# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackupPlanAdvancedBackupSettingResourceType',
    'BackupPlanBackupRuleResourceType',
    'BackupPlanCopyActionResourceType',
    'BackupPlanLifecycleResourceType',
    'BackupPlanResourceType',
    'BackupSelectionConditionParameter',
    'BackupSelectionConditionResourceType',
    'BackupSelectionResourceType',
    'BackupSelectionResourceTypeConditionsProperties',
    'BackupVaultLockConfigurationType',
    'BackupVaultNotificationObjectType',
    'FrameworkControl',
    'FrameworkControlControlScopeProperties',
    'FrameworkControlInputParameter',
    'FrameworkTag',
    'ReportDeliveryChannelProperties',
    'ReportPlanTag',
    'ReportSettingProperties',
]

@pulumi.output_type
class BackupPlanAdvancedBackupSettingResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupOptions":
            suggest = "backup_options"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPlanAdvancedBackupSettingResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPlanAdvancedBackupSettingResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPlanAdvancedBackupSettingResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_options: Any,
                 resource_type: str):
        pulumi.set(__self__, "backup_options", backup_options)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="backupOptions")
    def backup_options(self) -> Any:
        return pulumi.get(self, "backup_options")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class BackupPlanBackupRuleResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "targetBackupVault":
            suggest = "target_backup_vault"
        elif key == "completionWindowMinutes":
            suggest = "completion_window_minutes"
        elif key == "copyActions":
            suggest = "copy_actions"
        elif key == "enableContinuousBackup":
            suggest = "enable_continuous_backup"
        elif key == "recoveryPointTags":
            suggest = "recovery_point_tags"
        elif key == "scheduleExpression":
            suggest = "schedule_expression"
        elif key == "scheduleExpressionTimezone":
            suggest = "schedule_expression_timezone"
        elif key == "startWindowMinutes":
            suggest = "start_window_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPlanBackupRuleResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPlanBackupRuleResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPlanBackupRuleResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: str,
                 target_backup_vault: str,
                 completion_window_minutes: Optional[float] = None,
                 copy_actions: Optional[Sequence['outputs.BackupPlanCopyActionResourceType']] = None,
                 enable_continuous_backup: Optional[bool] = None,
                 lifecycle: Optional['outputs.BackupPlanLifecycleResourceType'] = None,
                 recovery_point_tags: Optional[Any] = None,
                 schedule_expression: Optional[str] = None,
                 schedule_expression_timezone: Optional[str] = None,
                 start_window_minutes: Optional[float] = None):
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "target_backup_vault", target_backup_vault)
        if completion_window_minutes is not None:
            pulumi.set(__self__, "completion_window_minutes", completion_window_minutes)
        if copy_actions is not None:
            pulumi.set(__self__, "copy_actions", copy_actions)
        if enable_continuous_backup is not None:
            pulumi.set(__self__, "enable_continuous_backup", enable_continuous_backup)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if recovery_point_tags is not None:
            pulumi.set(__self__, "recovery_point_tags", recovery_point_tags)
        if schedule_expression is not None:
            pulumi.set(__self__, "schedule_expression", schedule_expression)
        if schedule_expression_timezone is not None:
            pulumi.set(__self__, "schedule_expression_timezone", schedule_expression_timezone)
        if start_window_minutes is not None:
            pulumi.set(__self__, "start_window_minutes", start_window_minutes)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="targetBackupVault")
    def target_backup_vault(self) -> str:
        return pulumi.get(self, "target_backup_vault")

    @property
    @pulumi.getter(name="completionWindowMinutes")
    def completion_window_minutes(self) -> Optional[float]:
        return pulumi.get(self, "completion_window_minutes")

    @property
    @pulumi.getter(name="copyActions")
    def copy_actions(self) -> Optional[Sequence['outputs.BackupPlanCopyActionResourceType']]:
        return pulumi.get(self, "copy_actions")

    @property
    @pulumi.getter(name="enableContinuousBackup")
    def enable_continuous_backup(self) -> Optional[bool]:
        return pulumi.get(self, "enable_continuous_backup")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.BackupPlanLifecycleResourceType']:
        return pulumi.get(self, "lifecycle")

    @property
    @pulumi.getter(name="recoveryPointTags")
    def recovery_point_tags(self) -> Optional[Any]:
        return pulumi.get(self, "recovery_point_tags")

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> Optional[str]:
        return pulumi.get(self, "schedule_expression")

    @property
    @pulumi.getter(name="scheduleExpressionTimezone")
    def schedule_expression_timezone(self) -> Optional[str]:
        return pulumi.get(self, "schedule_expression_timezone")

    @property
    @pulumi.getter(name="startWindowMinutes")
    def start_window_minutes(self) -> Optional[float]:
        return pulumi.get(self, "start_window_minutes")


@pulumi.output_type
class BackupPlanCopyActionResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBackupVaultArn":
            suggest = "destination_backup_vault_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPlanCopyActionResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPlanCopyActionResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPlanCopyActionResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_backup_vault_arn: str,
                 lifecycle: Optional['outputs.BackupPlanLifecycleResourceType'] = None):
        pulumi.set(__self__, "destination_backup_vault_arn", destination_backup_vault_arn)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)

    @property
    @pulumi.getter(name="destinationBackupVaultArn")
    def destination_backup_vault_arn(self) -> str:
        return pulumi.get(self, "destination_backup_vault_arn")

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional['outputs.BackupPlanLifecycleResourceType']:
        return pulumi.get(self, "lifecycle")


@pulumi.output_type
class BackupPlanLifecycleResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteAfterDays":
            suggest = "delete_after_days"
        elif key == "moveToColdStorageAfterDays":
            suggest = "move_to_cold_storage_after_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPlanLifecycleResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPlanLifecycleResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPlanLifecycleResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_after_days: Optional[float] = None,
                 move_to_cold_storage_after_days: Optional[float] = None):
        if delete_after_days is not None:
            pulumi.set(__self__, "delete_after_days", delete_after_days)
        if move_to_cold_storage_after_days is not None:
            pulumi.set(__self__, "move_to_cold_storage_after_days", move_to_cold_storage_after_days)

    @property
    @pulumi.getter(name="deleteAfterDays")
    def delete_after_days(self) -> Optional[float]:
        return pulumi.get(self, "delete_after_days")

    @property
    @pulumi.getter(name="moveToColdStorageAfterDays")
    def move_to_cold_storage_after_days(self) -> Optional[float]:
        return pulumi.get(self, "move_to_cold_storage_after_days")


@pulumi.output_type
class BackupPlanResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPlanName":
            suggest = "backup_plan_name"
        elif key == "backupPlanRule":
            suggest = "backup_plan_rule"
        elif key == "advancedBackupSettings":
            suggest = "advanced_backup_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPlanResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPlanResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPlanResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_plan_name: str,
                 backup_plan_rule: Sequence['outputs.BackupPlanBackupRuleResourceType'],
                 advanced_backup_settings: Optional[Sequence['outputs.BackupPlanAdvancedBackupSettingResourceType']] = None):
        pulumi.set(__self__, "backup_plan_name", backup_plan_name)
        pulumi.set(__self__, "backup_plan_rule", backup_plan_rule)
        if advanced_backup_settings is not None:
            pulumi.set(__self__, "advanced_backup_settings", advanced_backup_settings)

    @property
    @pulumi.getter(name="backupPlanName")
    def backup_plan_name(self) -> str:
        return pulumi.get(self, "backup_plan_name")

    @property
    @pulumi.getter(name="backupPlanRule")
    def backup_plan_rule(self) -> Sequence['outputs.BackupPlanBackupRuleResourceType']:
        return pulumi.get(self, "backup_plan_rule")

    @property
    @pulumi.getter(name="advancedBackupSettings")
    def advanced_backup_settings(self) -> Optional[Sequence['outputs.BackupPlanAdvancedBackupSettingResourceType']]:
        return pulumi.get(self, "advanced_backup_settings")


@pulumi.output_type
class BackupSelectionConditionParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionKey":
            suggest = "condition_key"
        elif key == "conditionValue":
            suggest = "condition_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupSelectionConditionParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupSelectionConditionParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupSelectionConditionParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_key: Optional[str] = None,
                 condition_value: Optional[str] = None):
        if condition_key is not None:
            pulumi.set(__self__, "condition_key", condition_key)
        if condition_value is not None:
            pulumi.set(__self__, "condition_value", condition_value)

    @property
    @pulumi.getter(name="conditionKey")
    def condition_key(self) -> Optional[str]:
        return pulumi.get(self, "condition_key")

    @property
    @pulumi.getter(name="conditionValue")
    def condition_value(self) -> Optional[str]:
        return pulumi.get(self, "condition_value")


@pulumi.output_type
class BackupSelectionConditionResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionKey":
            suggest = "condition_key"
        elif key == "conditionType":
            suggest = "condition_type"
        elif key == "conditionValue":
            suggest = "condition_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupSelectionConditionResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupSelectionConditionResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupSelectionConditionResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_key: str,
                 condition_type: str,
                 condition_value: str):
        pulumi.set(__self__, "condition_key", condition_key)
        pulumi.set(__self__, "condition_type", condition_type)
        pulumi.set(__self__, "condition_value", condition_value)

    @property
    @pulumi.getter(name="conditionKey")
    def condition_key(self) -> str:
        return pulumi.get(self, "condition_key")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        return pulumi.get(self, "condition_type")

    @property
    @pulumi.getter(name="conditionValue")
    def condition_value(self) -> str:
        return pulumi.get(self, "condition_value")


@pulumi.output_type
class BackupSelectionResourceType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iamRoleArn":
            suggest = "iam_role_arn"
        elif key == "selectionName":
            suggest = "selection_name"
        elif key == "listOfTags":
            suggest = "list_of_tags"
        elif key == "notResources":
            suggest = "not_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupSelectionResourceType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupSelectionResourceType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupSelectionResourceType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iam_role_arn: str,
                 selection_name: str,
                 conditions: Optional['outputs.BackupSelectionResourceTypeConditionsProperties'] = None,
                 list_of_tags: Optional[Sequence['outputs.BackupSelectionConditionResourceType']] = None,
                 not_resources: Optional[Sequence[str]] = None,
                 resources: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        pulumi.set(__self__, "selection_name", selection_name)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if list_of_tags is not None:
            pulumi.set(__self__, "list_of_tags", list_of_tags)
        if not_resources is not None:
            pulumi.set(__self__, "not_resources", not_resources)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> str:
        return pulumi.get(self, "iam_role_arn")

    @property
    @pulumi.getter(name="selectionName")
    def selection_name(self) -> str:
        return pulumi.get(self, "selection_name")

    @property
    @pulumi.getter
    def conditions(self) -> Optional['outputs.BackupSelectionResourceTypeConditionsProperties']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="listOfTags")
    def list_of_tags(self) -> Optional[Sequence['outputs.BackupSelectionConditionResourceType']]:
        return pulumi.get(self, "list_of_tags")

    @property
    @pulumi.getter(name="notResources")
    def not_resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "not_resources")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resources")


@pulumi.output_type
class BackupSelectionResourceTypeConditionsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringEquals":
            suggest = "string_equals"
        elif key == "stringLike":
            suggest = "string_like"
        elif key == "stringNotEquals":
            suggest = "string_not_equals"
        elif key == "stringNotLike":
            suggest = "string_not_like"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupSelectionResourceTypeConditionsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupSelectionResourceTypeConditionsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupSelectionResourceTypeConditionsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 string_equals: Optional[Sequence['outputs.BackupSelectionConditionParameter']] = None,
                 string_like: Optional[Sequence['outputs.BackupSelectionConditionParameter']] = None,
                 string_not_equals: Optional[Sequence['outputs.BackupSelectionConditionParameter']] = None,
                 string_not_like: Optional[Sequence['outputs.BackupSelectionConditionParameter']] = None):
        if string_equals is not None:
            pulumi.set(__self__, "string_equals", string_equals)
        if string_like is not None:
            pulumi.set(__self__, "string_like", string_like)
        if string_not_equals is not None:
            pulumi.set(__self__, "string_not_equals", string_not_equals)
        if string_not_like is not None:
            pulumi.set(__self__, "string_not_like", string_not_like)

    @property
    @pulumi.getter(name="stringEquals")
    def string_equals(self) -> Optional[Sequence['outputs.BackupSelectionConditionParameter']]:
        return pulumi.get(self, "string_equals")

    @property
    @pulumi.getter(name="stringLike")
    def string_like(self) -> Optional[Sequence['outputs.BackupSelectionConditionParameter']]:
        return pulumi.get(self, "string_like")

    @property
    @pulumi.getter(name="stringNotEquals")
    def string_not_equals(self) -> Optional[Sequence['outputs.BackupSelectionConditionParameter']]:
        return pulumi.get(self, "string_not_equals")

    @property
    @pulumi.getter(name="stringNotLike")
    def string_not_like(self) -> Optional[Sequence['outputs.BackupSelectionConditionParameter']]:
        return pulumi.get(self, "string_not_like")


@pulumi.output_type
class BackupVaultLockConfigurationType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minRetentionDays":
            suggest = "min_retention_days"
        elif key == "changeableForDays":
            suggest = "changeable_for_days"
        elif key == "maxRetentionDays":
            suggest = "max_retention_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupVaultLockConfigurationType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupVaultLockConfigurationType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupVaultLockConfigurationType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_retention_days: int,
                 changeable_for_days: Optional[int] = None,
                 max_retention_days: Optional[int] = None):
        pulumi.set(__self__, "min_retention_days", min_retention_days)
        if changeable_for_days is not None:
            pulumi.set(__self__, "changeable_for_days", changeable_for_days)
        if max_retention_days is not None:
            pulumi.set(__self__, "max_retention_days", max_retention_days)

    @property
    @pulumi.getter(name="minRetentionDays")
    def min_retention_days(self) -> int:
        return pulumi.get(self, "min_retention_days")

    @property
    @pulumi.getter(name="changeableForDays")
    def changeable_for_days(self) -> Optional[int]:
        return pulumi.get(self, "changeable_for_days")

    @property
    @pulumi.getter(name="maxRetentionDays")
    def max_retention_days(self) -> Optional[int]:
        return pulumi.get(self, "max_retention_days")


@pulumi.output_type
class BackupVaultNotificationObjectType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupVaultEvents":
            suggest = "backup_vault_events"
        elif key == "snsTopicArn":
            suggest = "sns_topic_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupVaultNotificationObjectType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupVaultNotificationObjectType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupVaultNotificationObjectType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_vault_events: Sequence[str],
                 sns_topic_arn: str):
        pulumi.set(__self__, "backup_vault_events", backup_vault_events)
        pulumi.set(__self__, "sns_topic_arn", sns_topic_arn)

    @property
    @pulumi.getter(name="backupVaultEvents")
    def backup_vault_events(self) -> Sequence[str]:
        return pulumi.get(self, "backup_vault_events")

    @property
    @pulumi.getter(name="snsTopicArn")
    def sns_topic_arn(self) -> str:
        return pulumi.get(self, "sns_topic_arn")


@pulumi.output_type
class FrameworkControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlName":
            suggest = "control_name"
        elif key == "controlInputParameters":
            suggest = "control_input_parameters"
        elif key == "controlScope":
            suggest = "control_scope"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FrameworkControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FrameworkControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FrameworkControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_name: str,
                 control_input_parameters: Optional[Sequence['outputs.FrameworkControlInputParameter']] = None,
                 control_scope: Optional['outputs.FrameworkControlControlScopeProperties'] = None):
        """
        :param str control_name: The name of a control. This name is between 1 and 256 characters.
        :param Sequence['FrameworkControlInputParameter'] control_input_parameters: A list of ParameterName and ParameterValue pairs.
        :param 'FrameworkControlControlScopeProperties' control_scope: The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
        """
        pulumi.set(__self__, "control_name", control_name)
        if control_input_parameters is not None:
            pulumi.set(__self__, "control_input_parameters", control_input_parameters)
        if control_scope is not None:
            pulumi.set(__self__, "control_scope", control_scope)

    @property
    @pulumi.getter(name="controlName")
    def control_name(self) -> str:
        """
        The name of a control. This name is between 1 and 256 characters.
        """
        return pulumi.get(self, "control_name")

    @property
    @pulumi.getter(name="controlInputParameters")
    def control_input_parameters(self) -> Optional[Sequence['outputs.FrameworkControlInputParameter']]:
        """
        A list of ParameterName and ParameterValue pairs.
        """
        return pulumi.get(self, "control_input_parameters")

    @property
    @pulumi.getter(name="controlScope")
    def control_scope(self) -> Optional['outputs.FrameworkControlControlScopeProperties']:
        """
        The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
        """
        return pulumi.get(self, "control_scope")


@pulumi.output_type
class FrameworkControlControlScopeProperties(dict):
    """
    The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "complianceResourceIds":
            suggest = "compliance_resource_ids"
        elif key == "complianceResourceTypes":
            suggest = "compliance_resource_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FrameworkControlControlScopeProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FrameworkControlControlScopeProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FrameworkControlControlScopeProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compliance_resource_ids: Optional[Sequence[str]] = None,
                 compliance_resource_types: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence['outputs.FrameworkTag']] = None):
        """
        The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
        :param Sequence[str] compliance_resource_ids: The ID of the only AWS resource that you want your control scope to contain.
        :param Sequence[str] compliance_resource_types: Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.
        :param Sequence['FrameworkTag'] tags: Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.
        """
        if compliance_resource_ids is not None:
            pulumi.set(__self__, "compliance_resource_ids", compliance_resource_ids)
        if compliance_resource_types is not None:
            pulumi.set(__self__, "compliance_resource_types", compliance_resource_types)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="complianceResourceIds")
    def compliance_resource_ids(self) -> Optional[Sequence[str]]:
        """
        The ID of the only AWS resource that you want your control scope to contain.
        """
        return pulumi.get(self, "compliance_resource_ids")

    @property
    @pulumi.getter(name="complianceResourceTypes")
    def compliance_resource_types(self) -> Optional[Sequence[str]]:
        """
        Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.
        """
        return pulumi.get(self, "compliance_resource_types")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FrameworkTag']]:
        """
        Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class FrameworkControlInputParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterName":
            suggest = "parameter_name"
        elif key == "parameterValue":
            suggest = "parameter_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FrameworkControlInputParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FrameworkControlInputParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FrameworkControlInputParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_name: str,
                 parameter_value: str):
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_value", parameter_value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> str:
        return pulumi.get(self, "parameter_value")


@pulumi.output_type
class FrameworkTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReportDeliveryChannelProperties(dict):
    """
    A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3KeyPrefix":
            suggest = "s3_key_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDeliveryChannelProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDeliveryChannelProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDeliveryChannelProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket_name: str,
                 formats: Optional[Sequence[str]] = None,
                 s3_key_prefix: Optional[str] = None):
        """
        A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
        :param str s3_bucket_name: The unique name of the S3 bucket that receives your reports.
        :param Sequence[str] formats: A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
        :param str s3_key_prefix: The prefix for where AWS Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
        """
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)
        if s3_key_prefix is not None:
            pulumi.set(__self__, "s3_key_prefix", s3_key_prefix)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        """
        The unique name of the S3 bucket that receives your reports.
        """
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        """
        A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
        """
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="s3KeyPrefix")
    def s3_key_prefix(self) -> Optional[str]:
        """
        The prefix for where AWS Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
        """
        return pulumi.get(self, "s3_key_prefix")


@pulumi.output_type
class ReportPlanTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReportSettingProperties(dict):
    """
    Identifies the report template for the report. Reports are built using a report template.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportTemplate":
            suggest = "report_template"
        elif key == "frameworkArns":
            suggest = "framework_arns"
        elif key == "organizationUnits":
            suggest = "organization_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportSettingProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportSettingProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportSettingProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 report_template: str,
                 accounts: Optional[Sequence[str]] = None,
                 framework_arns: Optional[Sequence[str]] = None,
                 organization_units: Optional[Sequence[str]] = None,
                 regions: Optional[Sequence[str]] = None):
        """
        Identifies the report template for the report. Reports are built using a report template.
        :param str report_template: Identifies the report template for the report. Reports are built using a report template. The report templates are: `BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT`
        :param Sequence[str] accounts: The list of AWS accounts that a report covers.
        :param Sequence[str] framework_arns: The Amazon Resource Names (ARNs) of the frameworks a report covers.
        :param Sequence[str] organization_units: The list of AWS organization units that a report covers.
        :param Sequence[str] regions: The list of AWS regions that a report covers.
        """
        pulumi.set(__self__, "report_template", report_template)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if framework_arns is not None:
            pulumi.set(__self__, "framework_arns", framework_arns)
        if organization_units is not None:
            pulumi.set(__self__, "organization_units", organization_units)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter(name="reportTemplate")
    def report_template(self) -> str:
        """
        Identifies the report template for the report. Reports are built using a report template. The report templates are: `BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT`
        """
        return pulumi.get(self, "report_template")

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence[str]]:
        """
        The list of AWS accounts that a report covers.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="frameworkArns")
    def framework_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Names (ARNs) of the frameworks a report covers.
        """
        return pulumi.get(self, "framework_arns")

    @property
    @pulumi.getter(name="organizationUnits")
    def organization_units(self) -> Optional[Sequence[str]]:
        """
        The list of AWS organization units that a report covers.
        """
        return pulumi.get(self, "organization_units")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        """
        The list of AWS regions that a report covers.
        """
        return pulumi.get(self, "regions")


