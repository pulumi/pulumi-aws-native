# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['RestoreTestingPlanArgs', 'RestoreTestingPlan']

@pulumi.input_type
class RestoreTestingPlanArgs:
    def __init__(__self__, *,
                 recovery_point_selection: pulumi.Input['RestoreTestingPlanRestoreTestingRecoveryPointSelectionArgs'],
                 schedule_expression: pulumi.Input[str],
                 restore_testing_plan_name: Optional[pulumi.Input[str]] = None,
                 schedule_expression_timezone: Optional[pulumi.Input[str]] = None,
                 start_window_hours: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreTestingPlanTagArgs']]]] = None):
        """
        The set of arguments for constructing a RestoreTestingPlan resource.
        """
        pulumi.set(__self__, "recovery_point_selection", recovery_point_selection)
        pulumi.set(__self__, "schedule_expression", schedule_expression)
        if restore_testing_plan_name is not None:
            pulumi.set(__self__, "restore_testing_plan_name", restore_testing_plan_name)
        if schedule_expression_timezone is not None:
            pulumi.set(__self__, "schedule_expression_timezone", schedule_expression_timezone)
        if start_window_hours is not None:
            pulumi.set(__self__, "start_window_hours", start_window_hours)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="recoveryPointSelection")
    def recovery_point_selection(self) -> pulumi.Input['RestoreTestingPlanRestoreTestingRecoveryPointSelectionArgs']:
        return pulumi.get(self, "recovery_point_selection")

    @recovery_point_selection.setter
    def recovery_point_selection(self, value: pulumi.Input['RestoreTestingPlanRestoreTestingRecoveryPointSelectionArgs']):
        pulumi.set(self, "recovery_point_selection", value)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)

    @property
    @pulumi.getter(name="restoreTestingPlanName")
    def restore_testing_plan_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restore_testing_plan_name")

    @restore_testing_plan_name.setter
    def restore_testing_plan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restore_testing_plan_name", value)

    @property
    @pulumi.getter(name="scheduleExpressionTimezone")
    def schedule_expression_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_expression_timezone")

    @schedule_expression_timezone.setter
    def schedule_expression_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_expression_timezone", value)

    @property
    @pulumi.getter(name="startWindowHours")
    def start_window_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_window_hours")

    @start_window_hours.setter
    def start_window_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_window_hours", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestoreTestingPlanTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreTestingPlanTagArgs']]]]):
        pulumi.set(self, "tags", value)


class RestoreTestingPlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 recovery_point_selection: Optional[pulumi.Input[pulumi.InputType['RestoreTestingPlanRestoreTestingRecoveryPointSelectionArgs']]] = None,
                 restore_testing_plan_name: Optional[pulumi.Input[str]] = None,
                 schedule_expression: Optional[pulumi.Input[str]] = None,
                 schedule_expression_timezone: Optional[pulumi.Input[str]] = None,
                 start_window_hours: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreTestingPlanTagArgs']]]]] = None,
                 __props__=None):
        """
        Definition of AWS::Backup::RestoreTestingPlan Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestoreTestingPlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::Backup::RestoreTestingPlan Resource Type

        :param str resource_name: The name of the resource.
        :param RestoreTestingPlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestoreTestingPlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 recovery_point_selection: Optional[pulumi.Input[pulumi.InputType['RestoreTestingPlanRestoreTestingRecoveryPointSelectionArgs']]] = None,
                 restore_testing_plan_name: Optional[pulumi.Input[str]] = None,
                 schedule_expression: Optional[pulumi.Input[str]] = None,
                 schedule_expression_timezone: Optional[pulumi.Input[str]] = None,
                 start_window_hours: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreTestingPlanTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestoreTestingPlanArgs.__new__(RestoreTestingPlanArgs)

            if recovery_point_selection is None and not opts.urn:
                raise TypeError("Missing required property 'recovery_point_selection'")
            __props__.__dict__["recovery_point_selection"] = recovery_point_selection
            __props__.__dict__["restore_testing_plan_name"] = restore_testing_plan_name
            if schedule_expression is None and not opts.urn:
                raise TypeError("Missing required property 'schedule_expression'")
            __props__.__dict__["schedule_expression"] = schedule_expression
            __props__.__dict__["schedule_expression_timezone"] = schedule_expression_timezone
            __props__.__dict__["start_window_hours"] = start_window_hours
            __props__.__dict__["tags"] = tags
            __props__.__dict__["restore_testing_plan_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["restore_testing_plan_name"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(RestoreTestingPlan, __self__).__init__(
            'aws-native:backup:RestoreTestingPlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RestoreTestingPlan':
        """
        Get an existing RestoreTestingPlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RestoreTestingPlanArgs.__new__(RestoreTestingPlanArgs)

        __props__.__dict__["recovery_point_selection"] = None
        __props__.__dict__["restore_testing_plan_arn"] = None
        __props__.__dict__["restore_testing_plan_name"] = None
        __props__.__dict__["schedule_expression"] = None
        __props__.__dict__["schedule_expression_timezone"] = None
        __props__.__dict__["start_window_hours"] = None
        __props__.__dict__["tags"] = None
        return RestoreTestingPlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="recoveryPointSelection")
    def recovery_point_selection(self) -> pulumi.Output['outputs.RestoreTestingPlanRestoreTestingRecoveryPointSelection']:
        return pulumi.get(self, "recovery_point_selection")

    @property
    @pulumi.getter(name="restoreTestingPlanArn")
    def restore_testing_plan_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "restore_testing_plan_arn")

    @property
    @pulumi.getter(name="restoreTestingPlanName")
    def restore_testing_plan_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "restore_testing_plan_name")

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule_expression")

    @property
    @pulumi.getter(name="scheduleExpressionTimezone")
    def schedule_expression_timezone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "schedule_expression_timezone")

    @property
    @pulumi.getter(name="startWindowHours")
    def start_window_hours(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "start_window_hours")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.RestoreTestingPlanTag']]]:
        return pulumi.get(self, "tags")

