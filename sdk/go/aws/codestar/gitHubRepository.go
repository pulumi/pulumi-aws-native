// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codestar

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CodeStar::GitHubRepository
//
// Deprecated: GitHubRepository is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type GitHubRepository struct {
	pulumi.CustomResourceState

	Code                  GitHubRepositoryCodePtrOutput `pulumi:"code"`
	ConnectionArn         pulumi.StringPtrOutput        `pulumi:"connectionArn"`
	EnableIssues          pulumi.BoolPtrOutput          `pulumi:"enableIssues"`
	IsPrivate             pulumi.BoolPtrOutput          `pulumi:"isPrivate"`
	RepositoryAccessToken pulumi.StringPtrOutput        `pulumi:"repositoryAccessToken"`
	RepositoryDescription pulumi.StringPtrOutput        `pulumi:"repositoryDescription"`
	RepositoryName        pulumi.StringOutput           `pulumi:"repositoryName"`
	RepositoryOwner       pulumi.StringOutput           `pulumi:"repositoryOwner"`
}

// NewGitHubRepository registers a new resource with the given unique name, arguments, and options.
func NewGitHubRepository(ctx *pulumi.Context,
	name string, args *GitHubRepositoryArgs, opts ...pulumi.ResourceOption) (*GitHubRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryName'")
	}
	if args.RepositoryOwner == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryOwner'")
	}
	var resource GitHubRepository
	err := ctx.RegisterResource("aws-native:codestar:GitHubRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitHubRepository gets an existing GitHubRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitHubRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitHubRepositoryState, opts ...pulumi.ResourceOption) (*GitHubRepository, error) {
	var resource GitHubRepository
	err := ctx.ReadResource("aws-native:codestar:GitHubRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitHubRepository resources.
type gitHubRepositoryState struct {
}

type GitHubRepositoryState struct {
}

func (GitHubRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubRepositoryState)(nil)).Elem()
}

type gitHubRepositoryArgs struct {
	Code                  *GitHubRepositoryCode `pulumi:"code"`
	ConnectionArn         *string               `pulumi:"connectionArn"`
	EnableIssues          *bool                 `pulumi:"enableIssues"`
	IsPrivate             *bool                 `pulumi:"isPrivate"`
	RepositoryAccessToken *string               `pulumi:"repositoryAccessToken"`
	RepositoryDescription *string               `pulumi:"repositoryDescription"`
	RepositoryName        string                `pulumi:"repositoryName"`
	RepositoryOwner       string                `pulumi:"repositoryOwner"`
}

// The set of arguments for constructing a GitHubRepository resource.
type GitHubRepositoryArgs struct {
	Code                  GitHubRepositoryCodePtrInput
	ConnectionArn         pulumi.StringPtrInput
	EnableIssues          pulumi.BoolPtrInput
	IsPrivate             pulumi.BoolPtrInput
	RepositoryAccessToken pulumi.StringPtrInput
	RepositoryDescription pulumi.StringPtrInput
	RepositoryName        pulumi.StringInput
	RepositoryOwner       pulumi.StringInput
}

func (GitHubRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubRepositoryArgs)(nil)).Elem()
}

type GitHubRepositoryInput interface {
	pulumi.Input

	ToGitHubRepositoryOutput() GitHubRepositoryOutput
	ToGitHubRepositoryOutputWithContext(ctx context.Context) GitHubRepositoryOutput
}

func (*GitHubRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubRepository)(nil))
}

func (i *GitHubRepository) ToGitHubRepositoryOutput() GitHubRepositoryOutput {
	return i.ToGitHubRepositoryOutputWithContext(context.Background())
}

func (i *GitHubRepository) ToGitHubRepositoryOutputWithContext(ctx context.Context) GitHubRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubRepositoryOutput)
}

type GitHubRepositoryOutput struct{ *pulumi.OutputState }

func (GitHubRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubRepository)(nil))
}

func (o GitHubRepositoryOutput) ToGitHubRepositoryOutput() GitHubRepositoryOutput {
	return o
}

func (o GitHubRepositoryOutput) ToGitHubRepositoryOutputWithContext(ctx context.Context) GitHubRepositoryOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubRepositoryInput)(nil)).Elem(), &GitHubRepository{})
	pulumi.RegisterOutputType(GitHubRepositoryOutput{})
}
