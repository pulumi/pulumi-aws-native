// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codestar

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CodeStar::GitHubRepository
func LookupGitHubRepository(ctx *pulumi.Context, args *LookupGitHubRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupGitHubRepositoryResult, error) {
	var rv LookupGitHubRepositoryResult
	err := ctx.Invoke("aws-native:codestar:getGitHubRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGitHubRepositoryArgs struct {
	Id string `pulumi:"id"`
}

type LookupGitHubRepositoryResult struct {
	Code                  *GitHubRepositoryCode `pulumi:"code"`
	ConnectionArn         *string               `pulumi:"connectionArn"`
	EnableIssues          *bool                 `pulumi:"enableIssues"`
	Id                    *string               `pulumi:"id"`
	IsPrivate             *bool                 `pulumi:"isPrivate"`
	RepositoryAccessToken *string               `pulumi:"repositoryAccessToken"`
	RepositoryDescription *string               `pulumi:"repositoryDescription"`
	RepositoryName        *string               `pulumi:"repositoryName"`
	RepositoryOwner       *string               `pulumi:"repositoryOwner"`
}

func LookupGitHubRepositoryOutput(ctx *pulumi.Context, args LookupGitHubRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupGitHubRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitHubRepositoryResult, error) {
			args := v.(LookupGitHubRepositoryArgs)
			r, err := LookupGitHubRepository(ctx, &args, opts...)
			var s LookupGitHubRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitHubRepositoryResultOutput)
}

type LookupGitHubRepositoryOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupGitHubRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitHubRepositoryArgs)(nil)).Elem()
}

type LookupGitHubRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupGitHubRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitHubRepositoryResult)(nil)).Elem()
}

func (o LookupGitHubRepositoryResultOutput) ToLookupGitHubRepositoryResultOutput() LookupGitHubRepositoryResultOutput {
	return o
}

func (o LookupGitHubRepositoryResultOutput) ToLookupGitHubRepositoryResultOutputWithContext(ctx context.Context) LookupGitHubRepositoryResultOutput {
	return o
}

func (o LookupGitHubRepositoryResultOutput) Code() GitHubRepositoryCodePtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *GitHubRepositoryCode { return v.Code }).(GitHubRepositoryCodePtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) ConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *string { return v.ConnectionArn }).(pulumi.StringPtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) EnableIssues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *bool { return v.EnableIssues }).(pulumi.BoolPtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *bool { return v.IsPrivate }).(pulumi.BoolPtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) RepositoryAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *string { return v.RepositoryAccessToken }).(pulumi.StringPtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) RepositoryDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *string { return v.RepositoryDescription }).(pulumi.StringPtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

func (o LookupGitHubRepositoryResultOutput) RepositoryOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitHubRepositoryResult) *string { return v.RepositoryOwner }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitHubRepositoryResultOutput{})
}
