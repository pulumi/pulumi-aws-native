// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesisanalyticsv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// The configuration parameters for the default Amazon Glue database. You use this database for SQL queries that you write in a Kinesis Data Analytics Studio notebook.
type ApplicationCatalogConfiguration struct {
	// The configuration parameters for the default Amazon Glue database. You use this database for Apache Flink SQL queries and table API transforms that you write in a Kinesis Data Analytics Studio notebook.
	GlueDataCatalogConfiguration *ApplicationGlueDataCatalogConfiguration `pulumi:"glueDataCatalogConfiguration"`
}

// ApplicationCatalogConfigurationInput is an input type that accepts ApplicationCatalogConfigurationArgs and ApplicationCatalogConfigurationOutput values.
// You can construct a concrete instance of `ApplicationCatalogConfigurationInput` via:
//
//	ApplicationCatalogConfigurationArgs{...}
type ApplicationCatalogConfigurationInput interface {
	pulumi.Input

	ToApplicationCatalogConfigurationOutput() ApplicationCatalogConfigurationOutput
	ToApplicationCatalogConfigurationOutputWithContext(context.Context) ApplicationCatalogConfigurationOutput
}

// The configuration parameters for the default Amazon Glue database. You use this database for SQL queries that you write in a Kinesis Data Analytics Studio notebook.
type ApplicationCatalogConfigurationArgs struct {
	// The configuration parameters for the default Amazon Glue database. You use this database for Apache Flink SQL queries and table API transforms that you write in a Kinesis Data Analytics Studio notebook.
	GlueDataCatalogConfiguration ApplicationGlueDataCatalogConfigurationPtrInput `pulumi:"glueDataCatalogConfiguration"`
}

func (ApplicationCatalogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCatalogConfiguration)(nil)).Elem()
}

func (i ApplicationCatalogConfigurationArgs) ToApplicationCatalogConfigurationOutput() ApplicationCatalogConfigurationOutput {
	return i.ToApplicationCatalogConfigurationOutputWithContext(context.Background())
}

func (i ApplicationCatalogConfigurationArgs) ToApplicationCatalogConfigurationOutputWithContext(ctx context.Context) ApplicationCatalogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCatalogConfigurationOutput)
}

func (i ApplicationCatalogConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCatalogConfiguration] {
	return pulumix.Output[ApplicationCatalogConfiguration]{
		OutputState: i.ToApplicationCatalogConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationCatalogConfigurationArgs) ToApplicationCatalogConfigurationPtrOutput() ApplicationCatalogConfigurationPtrOutput {
	return i.ToApplicationCatalogConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationCatalogConfigurationArgs) ToApplicationCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCatalogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCatalogConfigurationOutput).ToApplicationCatalogConfigurationPtrOutputWithContext(ctx)
}

// ApplicationCatalogConfigurationPtrInput is an input type that accepts ApplicationCatalogConfigurationArgs, ApplicationCatalogConfigurationPtr and ApplicationCatalogConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationCatalogConfigurationPtrInput` via:
//
//	        ApplicationCatalogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationCatalogConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationCatalogConfigurationPtrOutput() ApplicationCatalogConfigurationPtrOutput
	ToApplicationCatalogConfigurationPtrOutputWithContext(context.Context) ApplicationCatalogConfigurationPtrOutput
}

type applicationCatalogConfigurationPtrType ApplicationCatalogConfigurationArgs

func ApplicationCatalogConfigurationPtr(v *ApplicationCatalogConfigurationArgs) ApplicationCatalogConfigurationPtrInput {
	return (*applicationCatalogConfigurationPtrType)(v)
}

func (*applicationCatalogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCatalogConfiguration)(nil)).Elem()
}

func (i *applicationCatalogConfigurationPtrType) ToApplicationCatalogConfigurationPtrOutput() ApplicationCatalogConfigurationPtrOutput {
	return i.ToApplicationCatalogConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationCatalogConfigurationPtrType) ToApplicationCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCatalogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCatalogConfigurationPtrOutput)
}

func (i *applicationCatalogConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCatalogConfiguration] {
	return pulumix.Output[*ApplicationCatalogConfiguration]{
		OutputState: i.ToApplicationCatalogConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration parameters for the default Amazon Glue database. You use this database for SQL queries that you write in a Kinesis Data Analytics Studio notebook.
type ApplicationCatalogConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationCatalogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCatalogConfiguration)(nil)).Elem()
}

func (o ApplicationCatalogConfigurationOutput) ToApplicationCatalogConfigurationOutput() ApplicationCatalogConfigurationOutput {
	return o
}

func (o ApplicationCatalogConfigurationOutput) ToApplicationCatalogConfigurationOutputWithContext(ctx context.Context) ApplicationCatalogConfigurationOutput {
	return o
}

func (o ApplicationCatalogConfigurationOutput) ToApplicationCatalogConfigurationPtrOutput() ApplicationCatalogConfigurationPtrOutput {
	return o.ToApplicationCatalogConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationCatalogConfigurationOutput) ToApplicationCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCatalogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationCatalogConfiguration) *ApplicationCatalogConfiguration {
		return &v
	}).(ApplicationCatalogConfigurationPtrOutput)
}

func (o ApplicationCatalogConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCatalogConfiguration] {
	return pulumix.Output[ApplicationCatalogConfiguration]{
		OutputState: o.OutputState,
	}
}

// The configuration parameters for the default Amazon Glue database. You use this database for Apache Flink SQL queries and table API transforms that you write in a Kinesis Data Analytics Studio notebook.
func (o ApplicationCatalogConfigurationOutput) GlueDataCatalogConfiguration() ApplicationGlueDataCatalogConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationCatalogConfiguration) *ApplicationGlueDataCatalogConfiguration {
		return v.GlueDataCatalogConfiguration
	}).(ApplicationGlueDataCatalogConfigurationPtrOutput)
}

type ApplicationCatalogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationCatalogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCatalogConfiguration)(nil)).Elem()
}

func (o ApplicationCatalogConfigurationPtrOutput) ToApplicationCatalogConfigurationPtrOutput() ApplicationCatalogConfigurationPtrOutput {
	return o
}

func (o ApplicationCatalogConfigurationPtrOutput) ToApplicationCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCatalogConfigurationPtrOutput {
	return o
}

func (o ApplicationCatalogConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCatalogConfiguration] {
	return pulumix.Output[*ApplicationCatalogConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCatalogConfigurationPtrOutput) Elem() ApplicationCatalogConfigurationOutput {
	return o.ApplyT(func(v *ApplicationCatalogConfiguration) ApplicationCatalogConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationCatalogConfiguration
		return ret
	}).(ApplicationCatalogConfigurationOutput)
}

// The configuration parameters for the default Amazon Glue database. You use this database for Apache Flink SQL queries and table API transforms that you write in a Kinesis Data Analytics Studio notebook.
func (o ApplicationCatalogConfigurationPtrOutput) GlueDataCatalogConfiguration() ApplicationGlueDataCatalogConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationCatalogConfiguration) *ApplicationGlueDataCatalogConfiguration {
		if v == nil {
			return nil
		}
		return v.GlueDataCatalogConfiguration
	}).(ApplicationGlueDataCatalogConfigurationPtrOutput)
}

// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
type ApplicationCheckpointConfiguration struct {
	// Describes the interval in milliseconds between checkpoint operations.
	CheckpointInterval *int `pulumi:"checkpointInterval"`
	// Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
	CheckpointingEnabled *bool `pulumi:"checkpointingEnabled"`
	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
	ConfigurationType ApplicationCheckpointConfigurationConfigurationType `pulumi:"configurationType"`
	// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
	MinPauseBetweenCheckpoints *int `pulumi:"minPauseBetweenCheckpoints"`
}

// ApplicationCheckpointConfigurationInput is an input type that accepts ApplicationCheckpointConfigurationArgs and ApplicationCheckpointConfigurationOutput values.
// You can construct a concrete instance of `ApplicationCheckpointConfigurationInput` via:
//
//	ApplicationCheckpointConfigurationArgs{...}
type ApplicationCheckpointConfigurationInput interface {
	pulumi.Input

	ToApplicationCheckpointConfigurationOutput() ApplicationCheckpointConfigurationOutput
	ToApplicationCheckpointConfigurationOutputWithContext(context.Context) ApplicationCheckpointConfigurationOutput
}

// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
type ApplicationCheckpointConfigurationArgs struct {
	// Describes the interval in milliseconds between checkpoint operations.
	CheckpointInterval pulumi.IntPtrInput `pulumi:"checkpointInterval"`
	// Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
	CheckpointingEnabled pulumi.BoolPtrInput `pulumi:"checkpointingEnabled"`
	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
	ConfigurationType ApplicationCheckpointConfigurationConfigurationTypeInput `pulumi:"configurationType"`
	// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
	MinPauseBetweenCheckpoints pulumi.IntPtrInput `pulumi:"minPauseBetweenCheckpoints"`
}

func (ApplicationCheckpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCheckpointConfiguration)(nil)).Elem()
}

func (i ApplicationCheckpointConfigurationArgs) ToApplicationCheckpointConfigurationOutput() ApplicationCheckpointConfigurationOutput {
	return i.ToApplicationCheckpointConfigurationOutputWithContext(context.Background())
}

func (i ApplicationCheckpointConfigurationArgs) ToApplicationCheckpointConfigurationOutputWithContext(ctx context.Context) ApplicationCheckpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCheckpointConfigurationOutput)
}

func (i ApplicationCheckpointConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCheckpointConfiguration] {
	return pulumix.Output[ApplicationCheckpointConfiguration]{
		OutputState: i.ToApplicationCheckpointConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationCheckpointConfigurationArgs) ToApplicationCheckpointConfigurationPtrOutput() ApplicationCheckpointConfigurationPtrOutput {
	return i.ToApplicationCheckpointConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationCheckpointConfigurationArgs) ToApplicationCheckpointConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCheckpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCheckpointConfigurationOutput).ToApplicationCheckpointConfigurationPtrOutputWithContext(ctx)
}

// ApplicationCheckpointConfigurationPtrInput is an input type that accepts ApplicationCheckpointConfigurationArgs, ApplicationCheckpointConfigurationPtr and ApplicationCheckpointConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationCheckpointConfigurationPtrInput` via:
//
//	        ApplicationCheckpointConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationCheckpointConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationCheckpointConfigurationPtrOutput() ApplicationCheckpointConfigurationPtrOutput
	ToApplicationCheckpointConfigurationPtrOutputWithContext(context.Context) ApplicationCheckpointConfigurationPtrOutput
}

type applicationCheckpointConfigurationPtrType ApplicationCheckpointConfigurationArgs

func ApplicationCheckpointConfigurationPtr(v *ApplicationCheckpointConfigurationArgs) ApplicationCheckpointConfigurationPtrInput {
	return (*applicationCheckpointConfigurationPtrType)(v)
}

func (*applicationCheckpointConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCheckpointConfiguration)(nil)).Elem()
}

func (i *applicationCheckpointConfigurationPtrType) ToApplicationCheckpointConfigurationPtrOutput() ApplicationCheckpointConfigurationPtrOutput {
	return i.ToApplicationCheckpointConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationCheckpointConfigurationPtrType) ToApplicationCheckpointConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCheckpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCheckpointConfigurationPtrOutput)
}

func (i *applicationCheckpointConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCheckpointConfiguration] {
	return pulumix.Output[*ApplicationCheckpointConfiguration]{
		OutputState: i.ToApplicationCheckpointConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
type ApplicationCheckpointConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationCheckpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCheckpointConfiguration)(nil)).Elem()
}

func (o ApplicationCheckpointConfigurationOutput) ToApplicationCheckpointConfigurationOutput() ApplicationCheckpointConfigurationOutput {
	return o
}

func (o ApplicationCheckpointConfigurationOutput) ToApplicationCheckpointConfigurationOutputWithContext(ctx context.Context) ApplicationCheckpointConfigurationOutput {
	return o
}

func (o ApplicationCheckpointConfigurationOutput) ToApplicationCheckpointConfigurationPtrOutput() ApplicationCheckpointConfigurationPtrOutput {
	return o.ToApplicationCheckpointConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationCheckpointConfigurationOutput) ToApplicationCheckpointConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCheckpointConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationCheckpointConfiguration) *ApplicationCheckpointConfiguration {
		return &v
	}).(ApplicationCheckpointConfigurationPtrOutput)
}

func (o ApplicationCheckpointConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCheckpointConfiguration] {
	return pulumix.Output[ApplicationCheckpointConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes the interval in milliseconds between checkpoint operations.
func (o ApplicationCheckpointConfigurationOutput) CheckpointInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationCheckpointConfiguration) *int { return v.CheckpointInterval }).(pulumi.IntPtrOutput)
}

// Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
func (o ApplicationCheckpointConfigurationOutput) CheckpointingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationCheckpointConfiguration) *bool { return v.CheckpointingEnabled }).(pulumi.BoolPtrOutput)
}

// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
func (o ApplicationCheckpointConfigurationOutput) ConfigurationType() ApplicationCheckpointConfigurationConfigurationTypeOutput {
	return o.ApplyT(func(v ApplicationCheckpointConfiguration) ApplicationCheckpointConfigurationConfigurationType {
		return v.ConfigurationType
	}).(ApplicationCheckpointConfigurationConfigurationTypeOutput)
}

// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
func (o ApplicationCheckpointConfigurationOutput) MinPauseBetweenCheckpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationCheckpointConfiguration) *int { return v.MinPauseBetweenCheckpoints }).(pulumi.IntPtrOutput)
}

type ApplicationCheckpointConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationCheckpointConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCheckpointConfiguration)(nil)).Elem()
}

func (o ApplicationCheckpointConfigurationPtrOutput) ToApplicationCheckpointConfigurationPtrOutput() ApplicationCheckpointConfigurationPtrOutput {
	return o
}

func (o ApplicationCheckpointConfigurationPtrOutput) ToApplicationCheckpointConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCheckpointConfigurationPtrOutput {
	return o
}

func (o ApplicationCheckpointConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCheckpointConfiguration] {
	return pulumix.Output[*ApplicationCheckpointConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCheckpointConfigurationPtrOutput) Elem() ApplicationCheckpointConfigurationOutput {
	return o.ApplyT(func(v *ApplicationCheckpointConfiguration) ApplicationCheckpointConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationCheckpointConfiguration
		return ret
	}).(ApplicationCheckpointConfigurationOutput)
}

// Describes the interval in milliseconds between checkpoint operations.
func (o ApplicationCheckpointConfigurationPtrOutput) CheckpointInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationCheckpointConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointInterval
	}).(pulumi.IntPtrOutput)
}

// Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
func (o ApplicationCheckpointConfigurationPtrOutput) CheckpointingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationCheckpointConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.CheckpointingEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
func (o ApplicationCheckpointConfigurationPtrOutput) ConfigurationType() ApplicationCheckpointConfigurationConfigurationTypePtrOutput {
	return o.ApplyT(func(v *ApplicationCheckpointConfiguration) *ApplicationCheckpointConfigurationConfigurationType {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(ApplicationCheckpointConfigurationConfigurationTypePtrOutput)
}

// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
func (o ApplicationCheckpointConfigurationPtrOutput) MinPauseBetweenCheckpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationCheckpointConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MinPauseBetweenCheckpoints
	}).(pulumi.IntPtrOutput)
}

type ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption struct {
	LogStreamArn string `pulumi:"logStreamArn"`
}

// ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionInput is an input type that accepts ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs and ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput values.
// You can construct a concrete instance of `ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionInput` via:
//
//	ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs{...}
type ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionInput interface {
	pulumi.Input

	ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput() ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput
	ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutputWithContext(context.Context) ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput
}

type ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs struct {
	LogStreamArn pulumi.StringInput `pulumi:"logStreamArn"`
}

func (ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption)(nil)).Elem()
}

func (i ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs) ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput() ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput {
	return i.ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutputWithContext(context.Background())
}

func (i ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs) ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutputWithContext(ctx context.Context) ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput)
}

func (i ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption] {
	return pulumix.Output[ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption]{
		OutputState: i.ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutputWithContext(ctx).OutputState,
	}
}

type ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput struct{ *pulumi.OutputState }

func (ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption)(nil)).Elem()
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput) ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput() ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput {
	return o
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput) ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutputWithContext(ctx context.Context) ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput {
	return o
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption] {
	return pulumix.Output[ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput) LogStreamArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption) string { return v.LogStreamArn }).(pulumi.StringOutput)
}

type ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput struct{ *pulumi.OutputState }

func (ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption)(nil)).Elem()
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput) ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput() ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput {
	return o
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput) ToApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutputWithContext(ctx context.Context) ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput {
	return o
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption] {
	return pulumix.Output[*ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput) Elem() ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput {
	return o.ApplyT(func(v *ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption) ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption {
		if v != nil {
			return *v
		}
		var ret ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption
		return ret
	}).(ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput)
}

func (o ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput) LogStreamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption) *string {
		if v == nil {
			return nil
		}
		return &v.LogStreamArn
	}).(pulumi.StringPtrOutput)
}

// Describes code configuration for an application.
type ApplicationCodeConfiguration struct {
	// The location and type of the application code.
	CodeContent ApplicationCodeContent `pulumi:"codeContent"`
	// Specifies whether the code content is in text or zip format.
	CodeContentType ApplicationCodeConfigurationCodeContentType `pulumi:"codeContentType"`
}

// ApplicationCodeConfigurationInput is an input type that accepts ApplicationCodeConfigurationArgs and ApplicationCodeConfigurationOutput values.
// You can construct a concrete instance of `ApplicationCodeConfigurationInput` via:
//
//	ApplicationCodeConfigurationArgs{...}
type ApplicationCodeConfigurationInput interface {
	pulumi.Input

	ToApplicationCodeConfigurationOutput() ApplicationCodeConfigurationOutput
	ToApplicationCodeConfigurationOutputWithContext(context.Context) ApplicationCodeConfigurationOutput
}

// Describes code configuration for an application.
type ApplicationCodeConfigurationArgs struct {
	// The location and type of the application code.
	CodeContent ApplicationCodeContentInput `pulumi:"codeContent"`
	// Specifies whether the code content is in text or zip format.
	CodeContentType ApplicationCodeConfigurationCodeContentTypeInput `pulumi:"codeContentType"`
}

func (ApplicationCodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCodeConfiguration)(nil)).Elem()
}

func (i ApplicationCodeConfigurationArgs) ToApplicationCodeConfigurationOutput() ApplicationCodeConfigurationOutput {
	return i.ToApplicationCodeConfigurationOutputWithContext(context.Background())
}

func (i ApplicationCodeConfigurationArgs) ToApplicationCodeConfigurationOutputWithContext(ctx context.Context) ApplicationCodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCodeConfigurationOutput)
}

func (i ApplicationCodeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCodeConfiguration] {
	return pulumix.Output[ApplicationCodeConfiguration]{
		OutputState: i.ToApplicationCodeConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationCodeConfigurationArgs) ToApplicationCodeConfigurationPtrOutput() ApplicationCodeConfigurationPtrOutput {
	return i.ToApplicationCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationCodeConfigurationArgs) ToApplicationCodeConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCodeConfigurationOutput).ToApplicationCodeConfigurationPtrOutputWithContext(ctx)
}

// ApplicationCodeConfigurationPtrInput is an input type that accepts ApplicationCodeConfigurationArgs, ApplicationCodeConfigurationPtr and ApplicationCodeConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationCodeConfigurationPtrInput` via:
//
//	        ApplicationCodeConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationCodeConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationCodeConfigurationPtrOutput() ApplicationCodeConfigurationPtrOutput
	ToApplicationCodeConfigurationPtrOutputWithContext(context.Context) ApplicationCodeConfigurationPtrOutput
}

type applicationCodeConfigurationPtrType ApplicationCodeConfigurationArgs

func ApplicationCodeConfigurationPtr(v *ApplicationCodeConfigurationArgs) ApplicationCodeConfigurationPtrInput {
	return (*applicationCodeConfigurationPtrType)(v)
}

func (*applicationCodeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCodeConfiguration)(nil)).Elem()
}

func (i *applicationCodeConfigurationPtrType) ToApplicationCodeConfigurationPtrOutput() ApplicationCodeConfigurationPtrOutput {
	return i.ToApplicationCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationCodeConfigurationPtrType) ToApplicationCodeConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCodeConfigurationPtrOutput)
}

func (i *applicationCodeConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCodeConfiguration] {
	return pulumix.Output[*ApplicationCodeConfiguration]{
		OutputState: i.ToApplicationCodeConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes code configuration for an application.
type ApplicationCodeConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationCodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCodeConfiguration)(nil)).Elem()
}

func (o ApplicationCodeConfigurationOutput) ToApplicationCodeConfigurationOutput() ApplicationCodeConfigurationOutput {
	return o
}

func (o ApplicationCodeConfigurationOutput) ToApplicationCodeConfigurationOutputWithContext(ctx context.Context) ApplicationCodeConfigurationOutput {
	return o
}

func (o ApplicationCodeConfigurationOutput) ToApplicationCodeConfigurationPtrOutput() ApplicationCodeConfigurationPtrOutput {
	return o.ToApplicationCodeConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationCodeConfigurationOutput) ToApplicationCodeConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCodeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationCodeConfiguration) *ApplicationCodeConfiguration {
		return &v
	}).(ApplicationCodeConfigurationPtrOutput)
}

func (o ApplicationCodeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCodeConfiguration] {
	return pulumix.Output[ApplicationCodeConfiguration]{
		OutputState: o.OutputState,
	}
}

// The location and type of the application code.
func (o ApplicationCodeConfigurationOutput) CodeContent() ApplicationCodeContentOutput {
	return o.ApplyT(func(v ApplicationCodeConfiguration) ApplicationCodeContent { return v.CodeContent }).(ApplicationCodeContentOutput)
}

// Specifies whether the code content is in text or zip format.
func (o ApplicationCodeConfigurationOutput) CodeContentType() ApplicationCodeConfigurationCodeContentTypeOutput {
	return o.ApplyT(func(v ApplicationCodeConfiguration) ApplicationCodeConfigurationCodeContentType {
		return v.CodeContentType
	}).(ApplicationCodeConfigurationCodeContentTypeOutput)
}

type ApplicationCodeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationCodeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCodeConfiguration)(nil)).Elem()
}

func (o ApplicationCodeConfigurationPtrOutput) ToApplicationCodeConfigurationPtrOutput() ApplicationCodeConfigurationPtrOutput {
	return o
}

func (o ApplicationCodeConfigurationPtrOutput) ToApplicationCodeConfigurationPtrOutputWithContext(ctx context.Context) ApplicationCodeConfigurationPtrOutput {
	return o
}

func (o ApplicationCodeConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCodeConfiguration] {
	return pulumix.Output[*ApplicationCodeConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCodeConfigurationPtrOutput) Elem() ApplicationCodeConfigurationOutput {
	return o.ApplyT(func(v *ApplicationCodeConfiguration) ApplicationCodeConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationCodeConfiguration
		return ret
	}).(ApplicationCodeConfigurationOutput)
}

// The location and type of the application code.
func (o ApplicationCodeConfigurationPtrOutput) CodeContent() ApplicationCodeContentPtrOutput {
	return o.ApplyT(func(v *ApplicationCodeConfiguration) *ApplicationCodeContent {
		if v == nil {
			return nil
		}
		return &v.CodeContent
	}).(ApplicationCodeContentPtrOutput)
}

// Specifies whether the code content is in text or zip format.
func (o ApplicationCodeConfigurationPtrOutput) CodeContentType() ApplicationCodeConfigurationCodeContentTypePtrOutput {
	return o.ApplyT(func(v *ApplicationCodeConfiguration) *ApplicationCodeConfigurationCodeContentType {
		if v == nil {
			return nil
		}
		return &v.CodeContentType
	}).(ApplicationCodeConfigurationCodeContentTypePtrOutput)
}

// Specifies either the application code, or the location of the application code, for a Flink-based Kinesis Data Analytics application.
type ApplicationCodeContent struct {
	// Information about the Amazon S3 bucket that contains the application code.
	S3ContentLocation *ApplicationS3ContentLocation `pulumi:"s3ContentLocation"`
	// The text-format code for a Flink-based Kinesis Data Analytics application.
	TextContent *string `pulumi:"textContent"`
	// The zip-format code for a Flink-based Kinesis Data Analytics application.
	ZipFileContent *string `pulumi:"zipFileContent"`
}

// ApplicationCodeContentInput is an input type that accepts ApplicationCodeContentArgs and ApplicationCodeContentOutput values.
// You can construct a concrete instance of `ApplicationCodeContentInput` via:
//
//	ApplicationCodeContentArgs{...}
type ApplicationCodeContentInput interface {
	pulumi.Input

	ToApplicationCodeContentOutput() ApplicationCodeContentOutput
	ToApplicationCodeContentOutputWithContext(context.Context) ApplicationCodeContentOutput
}

// Specifies either the application code, or the location of the application code, for a Flink-based Kinesis Data Analytics application.
type ApplicationCodeContentArgs struct {
	// Information about the Amazon S3 bucket that contains the application code.
	S3ContentLocation ApplicationS3ContentLocationPtrInput `pulumi:"s3ContentLocation"`
	// The text-format code for a Flink-based Kinesis Data Analytics application.
	TextContent pulumi.StringPtrInput `pulumi:"textContent"`
	// The zip-format code for a Flink-based Kinesis Data Analytics application.
	ZipFileContent pulumi.StringPtrInput `pulumi:"zipFileContent"`
}

func (ApplicationCodeContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCodeContent)(nil)).Elem()
}

func (i ApplicationCodeContentArgs) ToApplicationCodeContentOutput() ApplicationCodeContentOutput {
	return i.ToApplicationCodeContentOutputWithContext(context.Background())
}

func (i ApplicationCodeContentArgs) ToApplicationCodeContentOutputWithContext(ctx context.Context) ApplicationCodeContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCodeContentOutput)
}

func (i ApplicationCodeContentArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCodeContent] {
	return pulumix.Output[ApplicationCodeContent]{
		OutputState: i.ToApplicationCodeContentOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationCodeContentArgs) ToApplicationCodeContentPtrOutput() ApplicationCodeContentPtrOutput {
	return i.ToApplicationCodeContentPtrOutputWithContext(context.Background())
}

func (i ApplicationCodeContentArgs) ToApplicationCodeContentPtrOutputWithContext(ctx context.Context) ApplicationCodeContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCodeContentOutput).ToApplicationCodeContentPtrOutputWithContext(ctx)
}

// ApplicationCodeContentPtrInput is an input type that accepts ApplicationCodeContentArgs, ApplicationCodeContentPtr and ApplicationCodeContentPtrOutput values.
// You can construct a concrete instance of `ApplicationCodeContentPtrInput` via:
//
//	        ApplicationCodeContentArgs{...}
//
//	or:
//
//	        nil
type ApplicationCodeContentPtrInput interface {
	pulumi.Input

	ToApplicationCodeContentPtrOutput() ApplicationCodeContentPtrOutput
	ToApplicationCodeContentPtrOutputWithContext(context.Context) ApplicationCodeContentPtrOutput
}

type applicationCodeContentPtrType ApplicationCodeContentArgs

func ApplicationCodeContentPtr(v *ApplicationCodeContentArgs) ApplicationCodeContentPtrInput {
	return (*applicationCodeContentPtrType)(v)
}

func (*applicationCodeContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCodeContent)(nil)).Elem()
}

func (i *applicationCodeContentPtrType) ToApplicationCodeContentPtrOutput() ApplicationCodeContentPtrOutput {
	return i.ToApplicationCodeContentPtrOutputWithContext(context.Background())
}

func (i *applicationCodeContentPtrType) ToApplicationCodeContentPtrOutputWithContext(ctx context.Context) ApplicationCodeContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCodeContentPtrOutput)
}

func (i *applicationCodeContentPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCodeContent] {
	return pulumix.Output[*ApplicationCodeContent]{
		OutputState: i.ToApplicationCodeContentPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies either the application code, or the location of the application code, for a Flink-based Kinesis Data Analytics application.
type ApplicationCodeContentOutput struct{ *pulumi.OutputState }

func (ApplicationCodeContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCodeContent)(nil)).Elem()
}

func (o ApplicationCodeContentOutput) ToApplicationCodeContentOutput() ApplicationCodeContentOutput {
	return o
}

func (o ApplicationCodeContentOutput) ToApplicationCodeContentOutputWithContext(ctx context.Context) ApplicationCodeContentOutput {
	return o
}

func (o ApplicationCodeContentOutput) ToApplicationCodeContentPtrOutput() ApplicationCodeContentPtrOutput {
	return o.ToApplicationCodeContentPtrOutputWithContext(context.Background())
}

func (o ApplicationCodeContentOutput) ToApplicationCodeContentPtrOutputWithContext(ctx context.Context) ApplicationCodeContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationCodeContent) *ApplicationCodeContent {
		return &v
	}).(ApplicationCodeContentPtrOutput)
}

func (o ApplicationCodeContentOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCodeContent] {
	return pulumix.Output[ApplicationCodeContent]{
		OutputState: o.OutputState,
	}
}

// Information about the Amazon S3 bucket that contains the application code.
func (o ApplicationCodeContentOutput) S3ContentLocation() ApplicationS3ContentLocationPtrOutput {
	return o.ApplyT(func(v ApplicationCodeContent) *ApplicationS3ContentLocation { return v.S3ContentLocation }).(ApplicationS3ContentLocationPtrOutput)
}

// The text-format code for a Flink-based Kinesis Data Analytics application.
func (o ApplicationCodeContentOutput) TextContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCodeContent) *string { return v.TextContent }).(pulumi.StringPtrOutput)
}

// The zip-format code for a Flink-based Kinesis Data Analytics application.
func (o ApplicationCodeContentOutput) ZipFileContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCodeContent) *string { return v.ZipFileContent }).(pulumi.StringPtrOutput)
}

type ApplicationCodeContentPtrOutput struct{ *pulumi.OutputState }

func (ApplicationCodeContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCodeContent)(nil)).Elem()
}

func (o ApplicationCodeContentPtrOutput) ToApplicationCodeContentPtrOutput() ApplicationCodeContentPtrOutput {
	return o
}

func (o ApplicationCodeContentPtrOutput) ToApplicationCodeContentPtrOutputWithContext(ctx context.Context) ApplicationCodeContentPtrOutput {
	return o
}

func (o ApplicationCodeContentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCodeContent] {
	return pulumix.Output[*ApplicationCodeContent]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCodeContentPtrOutput) Elem() ApplicationCodeContentOutput {
	return o.ApplyT(func(v *ApplicationCodeContent) ApplicationCodeContent {
		if v != nil {
			return *v
		}
		var ret ApplicationCodeContent
		return ret
	}).(ApplicationCodeContentOutput)
}

// Information about the Amazon S3 bucket that contains the application code.
func (o ApplicationCodeContentPtrOutput) S3ContentLocation() ApplicationS3ContentLocationPtrOutput {
	return o.ApplyT(func(v *ApplicationCodeContent) *ApplicationS3ContentLocation {
		if v == nil {
			return nil
		}
		return v.S3ContentLocation
	}).(ApplicationS3ContentLocationPtrOutput)
}

// The text-format code for a Flink-based Kinesis Data Analytics application.
func (o ApplicationCodeContentPtrOutput) TextContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationCodeContent) *string {
		if v == nil {
			return nil
		}
		return v.TextContent
	}).(pulumi.StringPtrOutput)
}

// The zip-format code for a Flink-based Kinesis Data Analytics application.
func (o ApplicationCodeContentPtrOutput) ZipFileContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationCodeContent) *string {
		if v == nil {
			return nil
		}
		return v.ZipFileContent
	}).(pulumi.StringPtrOutput)
}

// Specifies the creation parameters for a Kinesis Data Analytics application.
type ApplicationConfiguration struct {
	// The code location and type parameters for a Flink-based Kinesis Data Analytics application.
	ApplicationCodeConfiguration *ApplicationCodeConfiguration `pulumi:"applicationCodeConfiguration"`
	// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
	ApplicationSnapshotConfiguration *ApplicationSnapshotConfiguration `pulumi:"applicationSnapshotConfiguration"`
	// Describes execution properties for a Flink-based Kinesis Data Analytics application.
	EnvironmentProperties *ApplicationEnvironmentProperties `pulumi:"environmentProperties"`
	// The creation and update parameters for a Flink-based Kinesis Data Analytics application.
	FlinkApplicationConfiguration *ApplicationFlinkApplicationConfiguration `pulumi:"flinkApplicationConfiguration"`
	// The creation and update parameters for a SQL-based Kinesis Data Analytics application.
	SqlApplicationConfiguration *ApplicationSqlApplicationConfiguration `pulumi:"sqlApplicationConfiguration"`
	// The array of descriptions of VPC configurations available to the application.
	VpcConfigurations []ApplicationVpcConfiguration `pulumi:"vpcConfigurations"`
	// The configuration parameters for a Kinesis Data Analytics Studio notebook.
	ZeppelinApplicationConfiguration *ApplicationZeppelinApplicationConfiguration `pulumi:"zeppelinApplicationConfiguration"`
}

// ApplicationConfigurationInput is an input type that accepts ApplicationConfigurationArgs and ApplicationConfigurationOutput values.
// You can construct a concrete instance of `ApplicationConfigurationInput` via:
//
//	ApplicationConfigurationArgs{...}
type ApplicationConfigurationInput interface {
	pulumi.Input

	ToApplicationConfigurationOutput() ApplicationConfigurationOutput
	ToApplicationConfigurationOutputWithContext(context.Context) ApplicationConfigurationOutput
}

// Specifies the creation parameters for a Kinesis Data Analytics application.
type ApplicationConfigurationArgs struct {
	// The code location and type parameters for a Flink-based Kinesis Data Analytics application.
	ApplicationCodeConfiguration ApplicationCodeConfigurationPtrInput `pulumi:"applicationCodeConfiguration"`
	// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
	ApplicationSnapshotConfiguration ApplicationSnapshotConfigurationPtrInput `pulumi:"applicationSnapshotConfiguration"`
	// Describes execution properties for a Flink-based Kinesis Data Analytics application.
	EnvironmentProperties ApplicationEnvironmentPropertiesPtrInput `pulumi:"environmentProperties"`
	// The creation and update parameters for a Flink-based Kinesis Data Analytics application.
	FlinkApplicationConfiguration ApplicationFlinkApplicationConfigurationPtrInput `pulumi:"flinkApplicationConfiguration"`
	// The creation and update parameters for a SQL-based Kinesis Data Analytics application.
	SqlApplicationConfiguration ApplicationSqlApplicationConfigurationPtrInput `pulumi:"sqlApplicationConfiguration"`
	// The array of descriptions of VPC configurations available to the application.
	VpcConfigurations ApplicationVpcConfigurationArrayInput `pulumi:"vpcConfigurations"`
	// The configuration parameters for a Kinesis Data Analytics Studio notebook.
	ZeppelinApplicationConfiguration ApplicationZeppelinApplicationConfigurationPtrInput `pulumi:"zeppelinApplicationConfiguration"`
}

func (ApplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationConfiguration)(nil)).Elem()
}

func (i ApplicationConfigurationArgs) ToApplicationConfigurationOutput() ApplicationConfigurationOutput {
	return i.ToApplicationConfigurationOutputWithContext(context.Background())
}

func (i ApplicationConfigurationArgs) ToApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConfigurationOutput)
}

func (i ApplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationConfiguration] {
	return pulumix.Output[ApplicationConfiguration]{
		OutputState: i.ToApplicationConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationConfigurationArgs) ToApplicationConfigurationPtrOutput() ApplicationConfigurationPtrOutput {
	return i.ToApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationConfigurationArgs) ToApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConfigurationOutput).ToApplicationConfigurationPtrOutputWithContext(ctx)
}

// ApplicationConfigurationPtrInput is an input type that accepts ApplicationConfigurationArgs, ApplicationConfigurationPtr and ApplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationConfigurationPtrInput` via:
//
//	        ApplicationConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationConfigurationPtrOutput() ApplicationConfigurationPtrOutput
	ToApplicationConfigurationPtrOutputWithContext(context.Context) ApplicationConfigurationPtrOutput
}

type applicationConfigurationPtrType ApplicationConfigurationArgs

func ApplicationConfigurationPtr(v *ApplicationConfigurationArgs) ApplicationConfigurationPtrInput {
	return (*applicationConfigurationPtrType)(v)
}

func (*applicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationConfiguration)(nil)).Elem()
}

func (i *applicationConfigurationPtrType) ToApplicationConfigurationPtrOutput() ApplicationConfigurationPtrOutput {
	return i.ToApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationConfigurationPtrType) ToApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConfigurationPtrOutput)
}

func (i *applicationConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationConfiguration] {
	return pulumix.Output[*ApplicationConfiguration]{
		OutputState: i.ToApplicationConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the creation parameters for a Kinesis Data Analytics application.
type ApplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationConfigurationOutput) ToApplicationConfigurationOutput() ApplicationConfigurationOutput {
	return o
}

func (o ApplicationConfigurationOutput) ToApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationConfigurationOutput {
	return o
}

func (o ApplicationConfigurationOutput) ToApplicationConfigurationPtrOutput() ApplicationConfigurationPtrOutput {
	return o.ToApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationConfigurationOutput) ToApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationConfiguration) *ApplicationConfiguration {
		return &v
	}).(ApplicationConfigurationPtrOutput)
}

func (o ApplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationConfiguration] {
	return pulumix.Output[ApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// The code location and type parameters for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationOutput) ApplicationCodeConfiguration() ApplicationCodeConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationConfiguration) *ApplicationCodeConfiguration { return v.ApplicationCodeConfiguration }).(ApplicationCodeConfigurationPtrOutput)
}

// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationOutput) ApplicationSnapshotConfiguration() ApplicationSnapshotConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationConfiguration) *ApplicationSnapshotConfiguration {
		return v.ApplicationSnapshotConfiguration
	}).(ApplicationSnapshotConfigurationPtrOutput)
}

// Describes execution properties for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationOutput) EnvironmentProperties() ApplicationEnvironmentPropertiesPtrOutput {
	return o.ApplyT(func(v ApplicationConfiguration) *ApplicationEnvironmentProperties { return v.EnvironmentProperties }).(ApplicationEnvironmentPropertiesPtrOutput)
}

// The creation and update parameters for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationOutput) FlinkApplicationConfiguration() ApplicationFlinkApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationConfiguration) *ApplicationFlinkApplicationConfiguration {
		return v.FlinkApplicationConfiguration
	}).(ApplicationFlinkApplicationConfigurationPtrOutput)
}

// The creation and update parameters for a SQL-based Kinesis Data Analytics application.
func (o ApplicationConfigurationOutput) SqlApplicationConfiguration() ApplicationSqlApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationConfiguration) *ApplicationSqlApplicationConfiguration {
		return v.SqlApplicationConfiguration
	}).(ApplicationSqlApplicationConfigurationPtrOutput)
}

// The array of descriptions of VPC configurations available to the application.
func (o ApplicationConfigurationOutput) VpcConfigurations() ApplicationVpcConfigurationArrayOutput {
	return o.ApplyT(func(v ApplicationConfiguration) []ApplicationVpcConfiguration { return v.VpcConfigurations }).(ApplicationVpcConfigurationArrayOutput)
}

// The configuration parameters for a Kinesis Data Analytics Studio notebook.
func (o ApplicationConfigurationOutput) ZeppelinApplicationConfiguration() ApplicationZeppelinApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationConfiguration) *ApplicationZeppelinApplicationConfiguration {
		return v.ZeppelinApplicationConfiguration
	}).(ApplicationZeppelinApplicationConfigurationPtrOutput)
}

type ApplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationConfigurationPtrOutput) ToApplicationConfigurationPtrOutput() ApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationConfigurationPtrOutput) ToApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationConfiguration] {
	return pulumix.Output[*ApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationConfigurationPtrOutput) Elem() ApplicationConfigurationOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) ApplicationConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationConfiguration
		return ret
	}).(ApplicationConfigurationOutput)
}

// The code location and type parameters for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationPtrOutput) ApplicationCodeConfiguration() ApplicationCodeConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) *ApplicationCodeConfiguration {
		if v == nil {
			return nil
		}
		return v.ApplicationCodeConfiguration
	}).(ApplicationCodeConfigurationPtrOutput)
}

// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationPtrOutput) ApplicationSnapshotConfiguration() ApplicationSnapshotConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) *ApplicationSnapshotConfiguration {
		if v == nil {
			return nil
		}
		return v.ApplicationSnapshotConfiguration
	}).(ApplicationSnapshotConfigurationPtrOutput)
}

// Describes execution properties for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationPtrOutput) EnvironmentProperties() ApplicationEnvironmentPropertiesPtrOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) *ApplicationEnvironmentProperties {
		if v == nil {
			return nil
		}
		return v.EnvironmentProperties
	}).(ApplicationEnvironmentPropertiesPtrOutput)
}

// The creation and update parameters for a Flink-based Kinesis Data Analytics application.
func (o ApplicationConfigurationPtrOutput) FlinkApplicationConfiguration() ApplicationFlinkApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) *ApplicationFlinkApplicationConfiguration {
		if v == nil {
			return nil
		}
		return v.FlinkApplicationConfiguration
	}).(ApplicationFlinkApplicationConfigurationPtrOutput)
}

// The creation and update parameters for a SQL-based Kinesis Data Analytics application.
func (o ApplicationConfigurationPtrOutput) SqlApplicationConfiguration() ApplicationSqlApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) *ApplicationSqlApplicationConfiguration {
		if v == nil {
			return nil
		}
		return v.SqlApplicationConfiguration
	}).(ApplicationSqlApplicationConfigurationPtrOutput)
}

// The array of descriptions of VPC configurations available to the application.
func (o ApplicationConfigurationPtrOutput) VpcConfigurations() ApplicationVpcConfigurationArrayOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) []ApplicationVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.VpcConfigurations
	}).(ApplicationVpcConfigurationArrayOutput)
}

// The configuration parameters for a Kinesis Data Analytics Studio notebook.
func (o ApplicationConfigurationPtrOutput) ZeppelinApplicationConfiguration() ApplicationZeppelinApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationConfiguration) *ApplicationZeppelinApplicationConfiguration {
		if v == nil {
			return nil
		}
		return v.ZeppelinApplicationConfiguration
	}).(ApplicationZeppelinApplicationConfigurationPtrOutput)
}

// For a SQL-based Kinesis Data Analytics application, provides additional mapping information when the record format uses delimiters, such as CSV. For example, the following sample records use CSV format, where the records use the '\n' as the row delimiter and a comma (",") as the column delimiter:
// `"name1", "address1"`
// `"name2", "address2"`
type ApplicationCsvMappingParameters struct {
	// The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
	RecordColumnDelimiter string `pulumi:"recordColumnDelimiter"`
	// The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
	RecordRowDelimiter string `pulumi:"recordRowDelimiter"`
}

// ApplicationCsvMappingParametersInput is an input type that accepts ApplicationCsvMappingParametersArgs and ApplicationCsvMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationCsvMappingParametersInput` via:
//
//	ApplicationCsvMappingParametersArgs{...}
type ApplicationCsvMappingParametersInput interface {
	pulumi.Input

	ToApplicationCsvMappingParametersOutput() ApplicationCsvMappingParametersOutput
	ToApplicationCsvMappingParametersOutputWithContext(context.Context) ApplicationCsvMappingParametersOutput
}

// For a SQL-based Kinesis Data Analytics application, provides additional mapping information when the record format uses delimiters, such as CSV. For example, the following sample records use CSV format, where the records use the '\n' as the row delimiter and a comma (",") as the column delimiter:
// `"name1", "address1"`
// `"name2", "address2"`
type ApplicationCsvMappingParametersArgs struct {
	// The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
	RecordColumnDelimiter pulumi.StringInput `pulumi:"recordColumnDelimiter"`
	// The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
	RecordRowDelimiter pulumi.StringInput `pulumi:"recordRowDelimiter"`
}

func (ApplicationCsvMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCsvMappingParameters)(nil)).Elem()
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersOutput() ApplicationCsvMappingParametersOutput {
	return i.ToApplicationCsvMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCsvMappingParametersOutput)
}

func (i ApplicationCsvMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCsvMappingParameters] {
	return pulumix.Output[ApplicationCsvMappingParameters]{
		OutputState: i.ToApplicationCsvMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return i.ToApplicationCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCsvMappingParametersOutput).ToApplicationCsvMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationCsvMappingParametersPtrInput is an input type that accepts ApplicationCsvMappingParametersArgs, ApplicationCsvMappingParametersPtr and ApplicationCsvMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationCsvMappingParametersPtrInput` via:
//
//	        ApplicationCsvMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationCsvMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput
	ToApplicationCsvMappingParametersPtrOutputWithContext(context.Context) ApplicationCsvMappingParametersPtrOutput
}

type applicationCsvMappingParametersPtrType ApplicationCsvMappingParametersArgs

func ApplicationCsvMappingParametersPtr(v *ApplicationCsvMappingParametersArgs) ApplicationCsvMappingParametersPtrInput {
	return (*applicationCsvMappingParametersPtrType)(v)
}

func (*applicationCsvMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCsvMappingParameters)(nil)).Elem()
}

func (i *applicationCsvMappingParametersPtrType) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return i.ToApplicationCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationCsvMappingParametersPtrType) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCsvMappingParametersPtrOutput)
}

func (i *applicationCsvMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCsvMappingParameters] {
	return pulumix.Output[*ApplicationCsvMappingParameters]{
		OutputState: i.ToApplicationCsvMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// For a SQL-based Kinesis Data Analytics application, provides additional mapping information when the record format uses delimiters, such as CSV. For example, the following sample records use CSV format, where the records use the '\n' as the row delimiter and a comma (",") as the column delimiter:
// `"name1", "address1"`
// `"name2", "address2"`
type ApplicationCsvMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationCsvMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersOutput() ApplicationCsvMappingParametersOutput {
	return o
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersOutput {
	return o
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return o.ToApplicationCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationCsvMappingParameters) *ApplicationCsvMappingParameters {
		return &v
	}).(ApplicationCsvMappingParametersPtrOutput)
}

func (o ApplicationCsvMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCsvMappingParameters] {
	return pulumix.Output[ApplicationCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

// The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
func (o ApplicationCsvMappingParametersOutput) RecordColumnDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationCsvMappingParameters) string { return v.RecordColumnDelimiter }).(pulumi.StringOutput)
}

// The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
func (o ApplicationCsvMappingParametersOutput) RecordRowDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationCsvMappingParameters) string { return v.RecordRowDelimiter }).(pulumi.StringOutput)
}

type ApplicationCsvMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationCsvMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationCsvMappingParametersPtrOutput) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationCsvMappingParametersPtrOutput) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationCsvMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCsvMappingParameters] {
	return pulumix.Output[*ApplicationCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCsvMappingParametersPtrOutput) Elem() ApplicationCsvMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationCsvMappingParameters) ApplicationCsvMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationCsvMappingParameters
		return ret
	}).(ApplicationCsvMappingParametersOutput)
}

// The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
func (o ApplicationCsvMappingParametersPtrOutput) RecordColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordColumnDelimiter
	}).(pulumi.StringPtrOutput)
}

// The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
func (o ApplicationCsvMappingParametersPtrOutput) RecordRowDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowDelimiter
	}).(pulumi.StringPtrOutput)
}

// The configuration of connectors and user-defined functions.
type ApplicationCustomArtifactConfiguration struct {
	// Set this to either `UDF` or `DEPENDENCY_JAR`. `UDF` stands for user-defined functions. This type of artifact must be in an S3 bucket. A `DEPENDENCY_JAR` can be in either Maven or an S3 bucket.
	ArtifactType ApplicationCustomArtifactConfigurationArtifactType `pulumi:"artifactType"`
	// The parameters required to fully specify a Maven reference.
	MavenReference *ApplicationMavenReference `pulumi:"mavenReference"`
	// The location of the custom artifacts.
	S3ContentLocation *ApplicationS3ContentLocation `pulumi:"s3ContentLocation"`
}

// ApplicationCustomArtifactConfigurationInput is an input type that accepts ApplicationCustomArtifactConfigurationArgs and ApplicationCustomArtifactConfigurationOutput values.
// You can construct a concrete instance of `ApplicationCustomArtifactConfigurationInput` via:
//
//	ApplicationCustomArtifactConfigurationArgs{...}
type ApplicationCustomArtifactConfigurationInput interface {
	pulumi.Input

	ToApplicationCustomArtifactConfigurationOutput() ApplicationCustomArtifactConfigurationOutput
	ToApplicationCustomArtifactConfigurationOutputWithContext(context.Context) ApplicationCustomArtifactConfigurationOutput
}

// The configuration of connectors and user-defined functions.
type ApplicationCustomArtifactConfigurationArgs struct {
	// Set this to either `UDF` or `DEPENDENCY_JAR`. `UDF` stands for user-defined functions. This type of artifact must be in an S3 bucket. A `DEPENDENCY_JAR` can be in either Maven or an S3 bucket.
	ArtifactType ApplicationCustomArtifactConfigurationArtifactTypeInput `pulumi:"artifactType"`
	// The parameters required to fully specify a Maven reference.
	MavenReference ApplicationMavenReferencePtrInput `pulumi:"mavenReference"`
	// The location of the custom artifacts.
	S3ContentLocation ApplicationS3ContentLocationPtrInput `pulumi:"s3ContentLocation"`
}

func (ApplicationCustomArtifactConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCustomArtifactConfiguration)(nil)).Elem()
}

func (i ApplicationCustomArtifactConfigurationArgs) ToApplicationCustomArtifactConfigurationOutput() ApplicationCustomArtifactConfigurationOutput {
	return i.ToApplicationCustomArtifactConfigurationOutputWithContext(context.Background())
}

func (i ApplicationCustomArtifactConfigurationArgs) ToApplicationCustomArtifactConfigurationOutputWithContext(ctx context.Context) ApplicationCustomArtifactConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCustomArtifactConfigurationOutput)
}

func (i ApplicationCustomArtifactConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCustomArtifactConfiguration] {
	return pulumix.Output[ApplicationCustomArtifactConfiguration]{
		OutputState: i.ToApplicationCustomArtifactConfigurationOutputWithContext(ctx).OutputState,
	}
}

// ApplicationCustomArtifactConfigurationArrayInput is an input type that accepts ApplicationCustomArtifactConfigurationArray and ApplicationCustomArtifactConfigurationArrayOutput values.
// You can construct a concrete instance of `ApplicationCustomArtifactConfigurationArrayInput` via:
//
//	ApplicationCustomArtifactConfigurationArray{ ApplicationCustomArtifactConfigurationArgs{...} }
type ApplicationCustomArtifactConfigurationArrayInput interface {
	pulumi.Input

	ToApplicationCustomArtifactConfigurationArrayOutput() ApplicationCustomArtifactConfigurationArrayOutput
	ToApplicationCustomArtifactConfigurationArrayOutputWithContext(context.Context) ApplicationCustomArtifactConfigurationArrayOutput
}

type ApplicationCustomArtifactConfigurationArray []ApplicationCustomArtifactConfigurationInput

func (ApplicationCustomArtifactConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCustomArtifactConfiguration)(nil)).Elem()
}

func (i ApplicationCustomArtifactConfigurationArray) ToApplicationCustomArtifactConfigurationArrayOutput() ApplicationCustomArtifactConfigurationArrayOutput {
	return i.ToApplicationCustomArtifactConfigurationArrayOutputWithContext(context.Background())
}

func (i ApplicationCustomArtifactConfigurationArray) ToApplicationCustomArtifactConfigurationArrayOutputWithContext(ctx context.Context) ApplicationCustomArtifactConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCustomArtifactConfigurationArrayOutput)
}

func (i ApplicationCustomArtifactConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationCustomArtifactConfiguration] {
	return pulumix.Output[[]ApplicationCustomArtifactConfiguration]{
		OutputState: i.ToApplicationCustomArtifactConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// The configuration of connectors and user-defined functions.
type ApplicationCustomArtifactConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationCustomArtifactConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCustomArtifactConfiguration)(nil)).Elem()
}

func (o ApplicationCustomArtifactConfigurationOutput) ToApplicationCustomArtifactConfigurationOutput() ApplicationCustomArtifactConfigurationOutput {
	return o
}

func (o ApplicationCustomArtifactConfigurationOutput) ToApplicationCustomArtifactConfigurationOutputWithContext(ctx context.Context) ApplicationCustomArtifactConfigurationOutput {
	return o
}

func (o ApplicationCustomArtifactConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCustomArtifactConfiguration] {
	return pulumix.Output[ApplicationCustomArtifactConfiguration]{
		OutputState: o.OutputState,
	}
}

// Set this to either `UDF` or `DEPENDENCY_JAR`. `UDF` stands for user-defined functions. This type of artifact must be in an S3 bucket. A `DEPENDENCY_JAR` can be in either Maven or an S3 bucket.
func (o ApplicationCustomArtifactConfigurationOutput) ArtifactType() ApplicationCustomArtifactConfigurationArtifactTypeOutput {
	return o.ApplyT(func(v ApplicationCustomArtifactConfiguration) ApplicationCustomArtifactConfigurationArtifactType {
		return v.ArtifactType
	}).(ApplicationCustomArtifactConfigurationArtifactTypeOutput)
}

// The parameters required to fully specify a Maven reference.
func (o ApplicationCustomArtifactConfigurationOutput) MavenReference() ApplicationMavenReferencePtrOutput {
	return o.ApplyT(func(v ApplicationCustomArtifactConfiguration) *ApplicationMavenReference { return v.MavenReference }).(ApplicationMavenReferencePtrOutput)
}

// The location of the custom artifacts.
func (o ApplicationCustomArtifactConfigurationOutput) S3ContentLocation() ApplicationS3ContentLocationPtrOutput {
	return o.ApplyT(func(v ApplicationCustomArtifactConfiguration) *ApplicationS3ContentLocation {
		return v.S3ContentLocation
	}).(ApplicationS3ContentLocationPtrOutput)
}

type ApplicationCustomArtifactConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationCustomArtifactConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCustomArtifactConfiguration)(nil)).Elem()
}

func (o ApplicationCustomArtifactConfigurationArrayOutput) ToApplicationCustomArtifactConfigurationArrayOutput() ApplicationCustomArtifactConfigurationArrayOutput {
	return o
}

func (o ApplicationCustomArtifactConfigurationArrayOutput) ToApplicationCustomArtifactConfigurationArrayOutputWithContext(ctx context.Context) ApplicationCustomArtifactConfigurationArrayOutput {
	return o
}

func (o ApplicationCustomArtifactConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationCustomArtifactConfiguration] {
	return pulumix.Output[[]ApplicationCustomArtifactConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCustomArtifactConfigurationArrayOutput) Index(i pulumi.IntInput) ApplicationCustomArtifactConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationCustomArtifactConfiguration {
		return vs[0].([]ApplicationCustomArtifactConfiguration)[vs[1].(int)]
	}).(ApplicationCustomArtifactConfigurationOutput)
}

// The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
type ApplicationDeployAsApplicationConfiguration struct {
	// The description of an Amazon S3 object that contains the Amazon Data Analytics application, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data.
	S3ContentLocation ApplicationS3ContentBaseLocation `pulumi:"s3ContentLocation"`
}

// ApplicationDeployAsApplicationConfigurationInput is an input type that accepts ApplicationDeployAsApplicationConfigurationArgs and ApplicationDeployAsApplicationConfigurationOutput values.
// You can construct a concrete instance of `ApplicationDeployAsApplicationConfigurationInput` via:
//
//	ApplicationDeployAsApplicationConfigurationArgs{...}
type ApplicationDeployAsApplicationConfigurationInput interface {
	pulumi.Input

	ToApplicationDeployAsApplicationConfigurationOutput() ApplicationDeployAsApplicationConfigurationOutput
	ToApplicationDeployAsApplicationConfigurationOutputWithContext(context.Context) ApplicationDeployAsApplicationConfigurationOutput
}

// The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
type ApplicationDeployAsApplicationConfigurationArgs struct {
	// The description of an Amazon S3 object that contains the Amazon Data Analytics application, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data.
	S3ContentLocation ApplicationS3ContentBaseLocationInput `pulumi:"s3ContentLocation"`
}

func (ApplicationDeployAsApplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeployAsApplicationConfiguration)(nil)).Elem()
}

func (i ApplicationDeployAsApplicationConfigurationArgs) ToApplicationDeployAsApplicationConfigurationOutput() ApplicationDeployAsApplicationConfigurationOutput {
	return i.ToApplicationDeployAsApplicationConfigurationOutputWithContext(context.Background())
}

func (i ApplicationDeployAsApplicationConfigurationArgs) ToApplicationDeployAsApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationDeployAsApplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeployAsApplicationConfigurationOutput)
}

func (i ApplicationDeployAsApplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationDeployAsApplicationConfiguration] {
	return pulumix.Output[ApplicationDeployAsApplicationConfiguration]{
		OutputState: i.ToApplicationDeployAsApplicationConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationDeployAsApplicationConfigurationArgs) ToApplicationDeployAsApplicationConfigurationPtrOutput() ApplicationDeployAsApplicationConfigurationPtrOutput {
	return i.ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationDeployAsApplicationConfigurationArgs) ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationDeployAsApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeployAsApplicationConfigurationOutput).ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(ctx)
}

// ApplicationDeployAsApplicationConfigurationPtrInput is an input type that accepts ApplicationDeployAsApplicationConfigurationArgs, ApplicationDeployAsApplicationConfigurationPtr and ApplicationDeployAsApplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationDeployAsApplicationConfigurationPtrInput` via:
//
//	        ApplicationDeployAsApplicationConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationDeployAsApplicationConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationDeployAsApplicationConfigurationPtrOutput() ApplicationDeployAsApplicationConfigurationPtrOutput
	ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(context.Context) ApplicationDeployAsApplicationConfigurationPtrOutput
}

type applicationDeployAsApplicationConfigurationPtrType ApplicationDeployAsApplicationConfigurationArgs

func ApplicationDeployAsApplicationConfigurationPtr(v *ApplicationDeployAsApplicationConfigurationArgs) ApplicationDeployAsApplicationConfigurationPtrInput {
	return (*applicationDeployAsApplicationConfigurationPtrType)(v)
}

func (*applicationDeployAsApplicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeployAsApplicationConfiguration)(nil)).Elem()
}

func (i *applicationDeployAsApplicationConfigurationPtrType) ToApplicationDeployAsApplicationConfigurationPtrOutput() ApplicationDeployAsApplicationConfigurationPtrOutput {
	return i.ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationDeployAsApplicationConfigurationPtrType) ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationDeployAsApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeployAsApplicationConfigurationPtrOutput)
}

func (i *applicationDeployAsApplicationConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationDeployAsApplicationConfiguration] {
	return pulumix.Output[*ApplicationDeployAsApplicationConfiguration]{
		OutputState: i.ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
type ApplicationDeployAsApplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationDeployAsApplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeployAsApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationDeployAsApplicationConfigurationOutput) ToApplicationDeployAsApplicationConfigurationOutput() ApplicationDeployAsApplicationConfigurationOutput {
	return o
}

func (o ApplicationDeployAsApplicationConfigurationOutput) ToApplicationDeployAsApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationDeployAsApplicationConfigurationOutput {
	return o
}

func (o ApplicationDeployAsApplicationConfigurationOutput) ToApplicationDeployAsApplicationConfigurationPtrOutput() ApplicationDeployAsApplicationConfigurationPtrOutput {
	return o.ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationDeployAsApplicationConfigurationOutput) ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationDeployAsApplicationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationDeployAsApplicationConfiguration) *ApplicationDeployAsApplicationConfiguration {
		return &v
	}).(ApplicationDeployAsApplicationConfigurationPtrOutput)
}

func (o ApplicationDeployAsApplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationDeployAsApplicationConfiguration] {
	return pulumix.Output[ApplicationDeployAsApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// The description of an Amazon S3 object that contains the Amazon Data Analytics application, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data.
func (o ApplicationDeployAsApplicationConfigurationOutput) S3ContentLocation() ApplicationS3ContentBaseLocationOutput {
	return o.ApplyT(func(v ApplicationDeployAsApplicationConfiguration) ApplicationS3ContentBaseLocation {
		return v.S3ContentLocation
	}).(ApplicationS3ContentBaseLocationOutput)
}

type ApplicationDeployAsApplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationDeployAsApplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeployAsApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationDeployAsApplicationConfigurationPtrOutput) ToApplicationDeployAsApplicationConfigurationPtrOutput() ApplicationDeployAsApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationDeployAsApplicationConfigurationPtrOutput) ToApplicationDeployAsApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationDeployAsApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationDeployAsApplicationConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationDeployAsApplicationConfiguration] {
	return pulumix.Output[*ApplicationDeployAsApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationDeployAsApplicationConfigurationPtrOutput) Elem() ApplicationDeployAsApplicationConfigurationOutput {
	return o.ApplyT(func(v *ApplicationDeployAsApplicationConfiguration) ApplicationDeployAsApplicationConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationDeployAsApplicationConfiguration
		return ret
	}).(ApplicationDeployAsApplicationConfigurationOutput)
}

// The description of an Amazon S3 object that contains the Amazon Data Analytics application, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data.
func (o ApplicationDeployAsApplicationConfigurationPtrOutput) S3ContentLocation() ApplicationS3ContentBaseLocationPtrOutput {
	return o.ApplyT(func(v *ApplicationDeployAsApplicationConfiguration) *ApplicationS3ContentBaseLocation {
		if v == nil {
			return nil
		}
		return &v.S3ContentLocation
	}).(ApplicationS3ContentBaseLocationPtrOutput)
}

// Describes execution properties for a Flink-based Kinesis Data Analytics application.
type ApplicationEnvironmentProperties struct {
	// Describes the execution property groups.
	PropertyGroups []ApplicationPropertyGroup `pulumi:"propertyGroups"`
}

// ApplicationEnvironmentPropertiesInput is an input type that accepts ApplicationEnvironmentPropertiesArgs and ApplicationEnvironmentPropertiesOutput values.
// You can construct a concrete instance of `ApplicationEnvironmentPropertiesInput` via:
//
//	ApplicationEnvironmentPropertiesArgs{...}
type ApplicationEnvironmentPropertiesInput interface {
	pulumi.Input

	ToApplicationEnvironmentPropertiesOutput() ApplicationEnvironmentPropertiesOutput
	ToApplicationEnvironmentPropertiesOutputWithContext(context.Context) ApplicationEnvironmentPropertiesOutput
}

// Describes execution properties for a Flink-based Kinesis Data Analytics application.
type ApplicationEnvironmentPropertiesArgs struct {
	// Describes the execution property groups.
	PropertyGroups ApplicationPropertyGroupArrayInput `pulumi:"propertyGroups"`
}

func (ApplicationEnvironmentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironmentProperties)(nil)).Elem()
}

func (i ApplicationEnvironmentPropertiesArgs) ToApplicationEnvironmentPropertiesOutput() ApplicationEnvironmentPropertiesOutput {
	return i.ToApplicationEnvironmentPropertiesOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentPropertiesArgs) ToApplicationEnvironmentPropertiesOutputWithContext(ctx context.Context) ApplicationEnvironmentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentPropertiesOutput)
}

func (i ApplicationEnvironmentPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationEnvironmentProperties] {
	return pulumix.Output[ApplicationEnvironmentProperties]{
		OutputState: i.ToApplicationEnvironmentPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationEnvironmentPropertiesArgs) ToApplicationEnvironmentPropertiesPtrOutput() ApplicationEnvironmentPropertiesPtrOutput {
	return i.ToApplicationEnvironmentPropertiesPtrOutputWithContext(context.Background())
}

func (i ApplicationEnvironmentPropertiesArgs) ToApplicationEnvironmentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationEnvironmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentPropertiesOutput).ToApplicationEnvironmentPropertiesPtrOutputWithContext(ctx)
}

// ApplicationEnvironmentPropertiesPtrInput is an input type that accepts ApplicationEnvironmentPropertiesArgs, ApplicationEnvironmentPropertiesPtr and ApplicationEnvironmentPropertiesPtrOutput values.
// You can construct a concrete instance of `ApplicationEnvironmentPropertiesPtrInput` via:
//
//	        ApplicationEnvironmentPropertiesArgs{...}
//
//	or:
//
//	        nil
type ApplicationEnvironmentPropertiesPtrInput interface {
	pulumi.Input

	ToApplicationEnvironmentPropertiesPtrOutput() ApplicationEnvironmentPropertiesPtrOutput
	ToApplicationEnvironmentPropertiesPtrOutputWithContext(context.Context) ApplicationEnvironmentPropertiesPtrOutput
}

type applicationEnvironmentPropertiesPtrType ApplicationEnvironmentPropertiesArgs

func ApplicationEnvironmentPropertiesPtr(v *ApplicationEnvironmentPropertiesArgs) ApplicationEnvironmentPropertiesPtrInput {
	return (*applicationEnvironmentPropertiesPtrType)(v)
}

func (*applicationEnvironmentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationEnvironmentProperties)(nil)).Elem()
}

func (i *applicationEnvironmentPropertiesPtrType) ToApplicationEnvironmentPropertiesPtrOutput() ApplicationEnvironmentPropertiesPtrOutput {
	return i.ToApplicationEnvironmentPropertiesPtrOutputWithContext(context.Background())
}

func (i *applicationEnvironmentPropertiesPtrType) ToApplicationEnvironmentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationEnvironmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationEnvironmentPropertiesPtrOutput)
}

func (i *applicationEnvironmentPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationEnvironmentProperties] {
	return pulumix.Output[*ApplicationEnvironmentProperties]{
		OutputState: i.ToApplicationEnvironmentPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes execution properties for a Flink-based Kinesis Data Analytics application.
type ApplicationEnvironmentPropertiesOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationEnvironmentProperties)(nil)).Elem()
}

func (o ApplicationEnvironmentPropertiesOutput) ToApplicationEnvironmentPropertiesOutput() ApplicationEnvironmentPropertiesOutput {
	return o
}

func (o ApplicationEnvironmentPropertiesOutput) ToApplicationEnvironmentPropertiesOutputWithContext(ctx context.Context) ApplicationEnvironmentPropertiesOutput {
	return o
}

func (o ApplicationEnvironmentPropertiesOutput) ToApplicationEnvironmentPropertiesPtrOutput() ApplicationEnvironmentPropertiesPtrOutput {
	return o.ToApplicationEnvironmentPropertiesPtrOutputWithContext(context.Background())
}

func (o ApplicationEnvironmentPropertiesOutput) ToApplicationEnvironmentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationEnvironmentPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationEnvironmentProperties) *ApplicationEnvironmentProperties {
		return &v
	}).(ApplicationEnvironmentPropertiesPtrOutput)
}

func (o ApplicationEnvironmentPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationEnvironmentProperties] {
	return pulumix.Output[ApplicationEnvironmentProperties]{
		OutputState: o.OutputState,
	}
}

// Describes the execution property groups.
func (o ApplicationEnvironmentPropertiesOutput) PropertyGroups() ApplicationPropertyGroupArrayOutput {
	return o.ApplyT(func(v ApplicationEnvironmentProperties) []ApplicationPropertyGroup { return v.PropertyGroups }).(ApplicationPropertyGroupArrayOutput)
}

type ApplicationEnvironmentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationEnvironmentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationEnvironmentProperties)(nil)).Elem()
}

func (o ApplicationEnvironmentPropertiesPtrOutput) ToApplicationEnvironmentPropertiesPtrOutput() ApplicationEnvironmentPropertiesPtrOutput {
	return o
}

func (o ApplicationEnvironmentPropertiesPtrOutput) ToApplicationEnvironmentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationEnvironmentPropertiesPtrOutput {
	return o
}

func (o ApplicationEnvironmentPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationEnvironmentProperties] {
	return pulumix.Output[*ApplicationEnvironmentProperties]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationEnvironmentPropertiesPtrOutput) Elem() ApplicationEnvironmentPropertiesOutput {
	return o.ApplyT(func(v *ApplicationEnvironmentProperties) ApplicationEnvironmentProperties {
		if v != nil {
			return *v
		}
		var ret ApplicationEnvironmentProperties
		return ret
	}).(ApplicationEnvironmentPropertiesOutput)
}

// Describes the execution property groups.
func (o ApplicationEnvironmentPropertiesPtrOutput) PropertyGroups() ApplicationPropertyGroupArrayOutput {
	return o.ApplyT(func(v *ApplicationEnvironmentProperties) []ApplicationPropertyGroup {
		if v == nil {
			return nil
		}
		return v.PropertyGroups
	}).(ApplicationPropertyGroupArrayOutput)
}

// Describes configuration parameters for a Flink-based Kinesis Data Analytics application or a Studio notebook.
type ApplicationFlinkApplicationConfiguration struct {
	// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
	CheckpointConfiguration *ApplicationCheckpointConfiguration `pulumi:"checkpointConfiguration"`
	// Describes configuration parameters for Amazon CloudWatch logging for an application.
	MonitoringConfiguration *ApplicationMonitoringConfiguration `pulumi:"monitoringConfiguration"`
	// Describes parameters for how an application executes multiple tasks simultaneously.
	ParallelismConfiguration *ApplicationParallelismConfiguration `pulumi:"parallelismConfiguration"`
}

// ApplicationFlinkApplicationConfigurationInput is an input type that accepts ApplicationFlinkApplicationConfigurationArgs and ApplicationFlinkApplicationConfigurationOutput values.
// You can construct a concrete instance of `ApplicationFlinkApplicationConfigurationInput` via:
//
//	ApplicationFlinkApplicationConfigurationArgs{...}
type ApplicationFlinkApplicationConfigurationInput interface {
	pulumi.Input

	ToApplicationFlinkApplicationConfigurationOutput() ApplicationFlinkApplicationConfigurationOutput
	ToApplicationFlinkApplicationConfigurationOutputWithContext(context.Context) ApplicationFlinkApplicationConfigurationOutput
}

// Describes configuration parameters for a Flink-based Kinesis Data Analytics application or a Studio notebook.
type ApplicationFlinkApplicationConfigurationArgs struct {
	// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
	CheckpointConfiguration ApplicationCheckpointConfigurationPtrInput `pulumi:"checkpointConfiguration"`
	// Describes configuration parameters for Amazon CloudWatch logging for an application.
	MonitoringConfiguration ApplicationMonitoringConfigurationPtrInput `pulumi:"monitoringConfiguration"`
	// Describes parameters for how an application executes multiple tasks simultaneously.
	ParallelismConfiguration ApplicationParallelismConfigurationPtrInput `pulumi:"parallelismConfiguration"`
}

func (ApplicationFlinkApplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationFlinkApplicationConfiguration)(nil)).Elem()
}

func (i ApplicationFlinkApplicationConfigurationArgs) ToApplicationFlinkApplicationConfigurationOutput() ApplicationFlinkApplicationConfigurationOutput {
	return i.ToApplicationFlinkApplicationConfigurationOutputWithContext(context.Background())
}

func (i ApplicationFlinkApplicationConfigurationArgs) ToApplicationFlinkApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationFlinkApplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFlinkApplicationConfigurationOutput)
}

func (i ApplicationFlinkApplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationFlinkApplicationConfiguration] {
	return pulumix.Output[ApplicationFlinkApplicationConfiguration]{
		OutputState: i.ToApplicationFlinkApplicationConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationFlinkApplicationConfigurationArgs) ToApplicationFlinkApplicationConfigurationPtrOutput() ApplicationFlinkApplicationConfigurationPtrOutput {
	return i.ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationFlinkApplicationConfigurationArgs) ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFlinkApplicationConfigurationOutput).ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(ctx)
}

// ApplicationFlinkApplicationConfigurationPtrInput is an input type that accepts ApplicationFlinkApplicationConfigurationArgs, ApplicationFlinkApplicationConfigurationPtr and ApplicationFlinkApplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationFlinkApplicationConfigurationPtrInput` via:
//
//	        ApplicationFlinkApplicationConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationFlinkApplicationConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationFlinkApplicationConfigurationPtrOutput() ApplicationFlinkApplicationConfigurationPtrOutput
	ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(context.Context) ApplicationFlinkApplicationConfigurationPtrOutput
}

type applicationFlinkApplicationConfigurationPtrType ApplicationFlinkApplicationConfigurationArgs

func ApplicationFlinkApplicationConfigurationPtr(v *ApplicationFlinkApplicationConfigurationArgs) ApplicationFlinkApplicationConfigurationPtrInput {
	return (*applicationFlinkApplicationConfigurationPtrType)(v)
}

func (*applicationFlinkApplicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationFlinkApplicationConfiguration)(nil)).Elem()
}

func (i *applicationFlinkApplicationConfigurationPtrType) ToApplicationFlinkApplicationConfigurationPtrOutput() ApplicationFlinkApplicationConfigurationPtrOutput {
	return i.ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationFlinkApplicationConfigurationPtrType) ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFlinkApplicationConfigurationPtrOutput)
}

func (i *applicationFlinkApplicationConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationFlinkApplicationConfiguration] {
	return pulumix.Output[*ApplicationFlinkApplicationConfiguration]{
		OutputState: i.ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes configuration parameters for a Flink-based Kinesis Data Analytics application or a Studio notebook.
type ApplicationFlinkApplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationFlinkApplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationFlinkApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationFlinkApplicationConfigurationOutput) ToApplicationFlinkApplicationConfigurationOutput() ApplicationFlinkApplicationConfigurationOutput {
	return o
}

func (o ApplicationFlinkApplicationConfigurationOutput) ToApplicationFlinkApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationFlinkApplicationConfigurationOutput {
	return o
}

func (o ApplicationFlinkApplicationConfigurationOutput) ToApplicationFlinkApplicationConfigurationPtrOutput() ApplicationFlinkApplicationConfigurationPtrOutput {
	return o.ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationFlinkApplicationConfigurationOutput) ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkApplicationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationFlinkApplicationConfiguration) *ApplicationFlinkApplicationConfiguration {
		return &v
	}).(ApplicationFlinkApplicationConfigurationPtrOutput)
}

func (o ApplicationFlinkApplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationFlinkApplicationConfiguration] {
	return pulumix.Output[ApplicationFlinkApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
func (o ApplicationFlinkApplicationConfigurationOutput) CheckpointConfiguration() ApplicationCheckpointConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationFlinkApplicationConfiguration) *ApplicationCheckpointConfiguration {
		return v.CheckpointConfiguration
	}).(ApplicationCheckpointConfigurationPtrOutput)
}

// Describes configuration parameters for Amazon CloudWatch logging for an application.
func (o ApplicationFlinkApplicationConfigurationOutput) MonitoringConfiguration() ApplicationMonitoringConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationFlinkApplicationConfiguration) *ApplicationMonitoringConfiguration {
		return v.MonitoringConfiguration
	}).(ApplicationMonitoringConfigurationPtrOutput)
}

// Describes parameters for how an application executes multiple tasks simultaneously.
func (o ApplicationFlinkApplicationConfigurationOutput) ParallelismConfiguration() ApplicationParallelismConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationFlinkApplicationConfiguration) *ApplicationParallelismConfiguration {
		return v.ParallelismConfiguration
	}).(ApplicationParallelismConfigurationPtrOutput)
}

type ApplicationFlinkApplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationFlinkApplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationFlinkApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationFlinkApplicationConfigurationPtrOutput) ToApplicationFlinkApplicationConfigurationPtrOutput() ApplicationFlinkApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationFlinkApplicationConfigurationPtrOutput) ToApplicationFlinkApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationFlinkApplicationConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationFlinkApplicationConfiguration] {
	return pulumix.Output[*ApplicationFlinkApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationFlinkApplicationConfigurationPtrOutput) Elem() ApplicationFlinkApplicationConfigurationOutput {
	return o.ApplyT(func(v *ApplicationFlinkApplicationConfiguration) ApplicationFlinkApplicationConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationFlinkApplicationConfiguration
		return ret
	}).(ApplicationFlinkApplicationConfigurationOutput)
}

// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
func (o ApplicationFlinkApplicationConfigurationPtrOutput) CheckpointConfiguration() ApplicationCheckpointConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationFlinkApplicationConfiguration) *ApplicationCheckpointConfiguration {
		if v == nil {
			return nil
		}
		return v.CheckpointConfiguration
	}).(ApplicationCheckpointConfigurationPtrOutput)
}

// Describes configuration parameters for Amazon CloudWatch logging for an application.
func (o ApplicationFlinkApplicationConfigurationPtrOutput) MonitoringConfiguration() ApplicationMonitoringConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationFlinkApplicationConfiguration) *ApplicationMonitoringConfiguration {
		if v == nil {
			return nil
		}
		return v.MonitoringConfiguration
	}).(ApplicationMonitoringConfigurationPtrOutput)
}

// Describes parameters for how an application executes multiple tasks simultaneously.
func (o ApplicationFlinkApplicationConfigurationPtrOutput) ParallelismConfiguration() ApplicationParallelismConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationFlinkApplicationConfiguration) *ApplicationParallelismConfiguration {
		if v == nil {
			return nil
		}
		return v.ParallelismConfiguration
	}).(ApplicationParallelismConfigurationPtrOutput)
}

// Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
type ApplicationFlinkRunConfiguration struct {
	// When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Defaults to false. If you update your application without specifying this parameter, AllowNonRestoredState will be set to false, even if it was previously set to true.
	AllowNonRestoredState *bool `pulumi:"allowNonRestoredState"`
}

// ApplicationFlinkRunConfigurationInput is an input type that accepts ApplicationFlinkRunConfigurationArgs and ApplicationFlinkRunConfigurationOutput values.
// You can construct a concrete instance of `ApplicationFlinkRunConfigurationInput` via:
//
//	ApplicationFlinkRunConfigurationArgs{...}
type ApplicationFlinkRunConfigurationInput interface {
	pulumi.Input

	ToApplicationFlinkRunConfigurationOutput() ApplicationFlinkRunConfigurationOutput
	ToApplicationFlinkRunConfigurationOutputWithContext(context.Context) ApplicationFlinkRunConfigurationOutput
}

// Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
type ApplicationFlinkRunConfigurationArgs struct {
	// When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Defaults to false. If you update your application without specifying this parameter, AllowNonRestoredState will be set to false, even if it was previously set to true.
	AllowNonRestoredState pulumi.BoolPtrInput `pulumi:"allowNonRestoredState"`
}

func (ApplicationFlinkRunConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationFlinkRunConfiguration)(nil)).Elem()
}

func (i ApplicationFlinkRunConfigurationArgs) ToApplicationFlinkRunConfigurationOutput() ApplicationFlinkRunConfigurationOutput {
	return i.ToApplicationFlinkRunConfigurationOutputWithContext(context.Background())
}

func (i ApplicationFlinkRunConfigurationArgs) ToApplicationFlinkRunConfigurationOutputWithContext(ctx context.Context) ApplicationFlinkRunConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFlinkRunConfigurationOutput)
}

func (i ApplicationFlinkRunConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationFlinkRunConfiguration] {
	return pulumix.Output[ApplicationFlinkRunConfiguration]{
		OutputState: i.ToApplicationFlinkRunConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationFlinkRunConfigurationArgs) ToApplicationFlinkRunConfigurationPtrOutput() ApplicationFlinkRunConfigurationPtrOutput {
	return i.ToApplicationFlinkRunConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationFlinkRunConfigurationArgs) ToApplicationFlinkRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkRunConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFlinkRunConfigurationOutput).ToApplicationFlinkRunConfigurationPtrOutputWithContext(ctx)
}

// ApplicationFlinkRunConfigurationPtrInput is an input type that accepts ApplicationFlinkRunConfigurationArgs, ApplicationFlinkRunConfigurationPtr and ApplicationFlinkRunConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationFlinkRunConfigurationPtrInput` via:
//
//	        ApplicationFlinkRunConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationFlinkRunConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationFlinkRunConfigurationPtrOutput() ApplicationFlinkRunConfigurationPtrOutput
	ToApplicationFlinkRunConfigurationPtrOutputWithContext(context.Context) ApplicationFlinkRunConfigurationPtrOutput
}

type applicationFlinkRunConfigurationPtrType ApplicationFlinkRunConfigurationArgs

func ApplicationFlinkRunConfigurationPtr(v *ApplicationFlinkRunConfigurationArgs) ApplicationFlinkRunConfigurationPtrInput {
	return (*applicationFlinkRunConfigurationPtrType)(v)
}

func (*applicationFlinkRunConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationFlinkRunConfiguration)(nil)).Elem()
}

func (i *applicationFlinkRunConfigurationPtrType) ToApplicationFlinkRunConfigurationPtrOutput() ApplicationFlinkRunConfigurationPtrOutput {
	return i.ToApplicationFlinkRunConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationFlinkRunConfigurationPtrType) ToApplicationFlinkRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkRunConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFlinkRunConfigurationPtrOutput)
}

func (i *applicationFlinkRunConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationFlinkRunConfiguration] {
	return pulumix.Output[*ApplicationFlinkRunConfiguration]{
		OutputState: i.ToApplicationFlinkRunConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
type ApplicationFlinkRunConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationFlinkRunConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationFlinkRunConfiguration)(nil)).Elem()
}

func (o ApplicationFlinkRunConfigurationOutput) ToApplicationFlinkRunConfigurationOutput() ApplicationFlinkRunConfigurationOutput {
	return o
}

func (o ApplicationFlinkRunConfigurationOutput) ToApplicationFlinkRunConfigurationOutputWithContext(ctx context.Context) ApplicationFlinkRunConfigurationOutput {
	return o
}

func (o ApplicationFlinkRunConfigurationOutput) ToApplicationFlinkRunConfigurationPtrOutput() ApplicationFlinkRunConfigurationPtrOutput {
	return o.ToApplicationFlinkRunConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationFlinkRunConfigurationOutput) ToApplicationFlinkRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkRunConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationFlinkRunConfiguration) *ApplicationFlinkRunConfiguration {
		return &v
	}).(ApplicationFlinkRunConfigurationPtrOutput)
}

func (o ApplicationFlinkRunConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationFlinkRunConfiguration] {
	return pulumix.Output[ApplicationFlinkRunConfiguration]{
		OutputState: o.OutputState,
	}
}

// When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Defaults to false. If you update your application without specifying this parameter, AllowNonRestoredState will be set to false, even if it was previously set to true.
func (o ApplicationFlinkRunConfigurationOutput) AllowNonRestoredState() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationFlinkRunConfiguration) *bool { return v.AllowNonRestoredState }).(pulumi.BoolPtrOutput)
}

type ApplicationFlinkRunConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationFlinkRunConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationFlinkRunConfiguration)(nil)).Elem()
}

func (o ApplicationFlinkRunConfigurationPtrOutput) ToApplicationFlinkRunConfigurationPtrOutput() ApplicationFlinkRunConfigurationPtrOutput {
	return o
}

func (o ApplicationFlinkRunConfigurationPtrOutput) ToApplicationFlinkRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationFlinkRunConfigurationPtrOutput {
	return o
}

func (o ApplicationFlinkRunConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationFlinkRunConfiguration] {
	return pulumix.Output[*ApplicationFlinkRunConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationFlinkRunConfigurationPtrOutput) Elem() ApplicationFlinkRunConfigurationOutput {
	return o.ApplyT(func(v *ApplicationFlinkRunConfiguration) ApplicationFlinkRunConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationFlinkRunConfiguration
		return ret
	}).(ApplicationFlinkRunConfigurationOutput)
}

// When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Defaults to false. If you update your application without specifying this parameter, AllowNonRestoredState will be set to false, even if it was previously set to true.
func (o ApplicationFlinkRunConfigurationPtrOutput) AllowNonRestoredState() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationFlinkRunConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNonRestoredState
	}).(pulumi.BoolPtrOutput)
}

// The configuration of the Glue Data Catalog that you use for Apache Flink SQL queries and table API transforms that you write in an application.
type ApplicationGlueDataCatalogConfiguration struct {
	// The Amazon Resource Name (ARN) of the database.
	DatabaseArn *string `pulumi:"databaseArn"`
}

// ApplicationGlueDataCatalogConfigurationInput is an input type that accepts ApplicationGlueDataCatalogConfigurationArgs and ApplicationGlueDataCatalogConfigurationOutput values.
// You can construct a concrete instance of `ApplicationGlueDataCatalogConfigurationInput` via:
//
//	ApplicationGlueDataCatalogConfigurationArgs{...}
type ApplicationGlueDataCatalogConfigurationInput interface {
	pulumi.Input

	ToApplicationGlueDataCatalogConfigurationOutput() ApplicationGlueDataCatalogConfigurationOutput
	ToApplicationGlueDataCatalogConfigurationOutputWithContext(context.Context) ApplicationGlueDataCatalogConfigurationOutput
}

// The configuration of the Glue Data Catalog that you use for Apache Flink SQL queries and table API transforms that you write in an application.
type ApplicationGlueDataCatalogConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the database.
	DatabaseArn pulumi.StringPtrInput `pulumi:"databaseArn"`
}

func (ApplicationGlueDataCatalogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGlueDataCatalogConfiguration)(nil)).Elem()
}

func (i ApplicationGlueDataCatalogConfigurationArgs) ToApplicationGlueDataCatalogConfigurationOutput() ApplicationGlueDataCatalogConfigurationOutput {
	return i.ToApplicationGlueDataCatalogConfigurationOutputWithContext(context.Background())
}

func (i ApplicationGlueDataCatalogConfigurationArgs) ToApplicationGlueDataCatalogConfigurationOutputWithContext(ctx context.Context) ApplicationGlueDataCatalogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGlueDataCatalogConfigurationOutput)
}

func (i ApplicationGlueDataCatalogConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationGlueDataCatalogConfiguration] {
	return pulumix.Output[ApplicationGlueDataCatalogConfiguration]{
		OutputState: i.ToApplicationGlueDataCatalogConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationGlueDataCatalogConfigurationArgs) ToApplicationGlueDataCatalogConfigurationPtrOutput() ApplicationGlueDataCatalogConfigurationPtrOutput {
	return i.ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationGlueDataCatalogConfigurationArgs) ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationGlueDataCatalogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGlueDataCatalogConfigurationOutput).ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(ctx)
}

// ApplicationGlueDataCatalogConfigurationPtrInput is an input type that accepts ApplicationGlueDataCatalogConfigurationArgs, ApplicationGlueDataCatalogConfigurationPtr and ApplicationGlueDataCatalogConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationGlueDataCatalogConfigurationPtrInput` via:
//
//	        ApplicationGlueDataCatalogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationGlueDataCatalogConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationGlueDataCatalogConfigurationPtrOutput() ApplicationGlueDataCatalogConfigurationPtrOutput
	ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(context.Context) ApplicationGlueDataCatalogConfigurationPtrOutput
}

type applicationGlueDataCatalogConfigurationPtrType ApplicationGlueDataCatalogConfigurationArgs

func ApplicationGlueDataCatalogConfigurationPtr(v *ApplicationGlueDataCatalogConfigurationArgs) ApplicationGlueDataCatalogConfigurationPtrInput {
	return (*applicationGlueDataCatalogConfigurationPtrType)(v)
}

func (*applicationGlueDataCatalogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationGlueDataCatalogConfiguration)(nil)).Elem()
}

func (i *applicationGlueDataCatalogConfigurationPtrType) ToApplicationGlueDataCatalogConfigurationPtrOutput() ApplicationGlueDataCatalogConfigurationPtrOutput {
	return i.ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationGlueDataCatalogConfigurationPtrType) ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationGlueDataCatalogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGlueDataCatalogConfigurationPtrOutput)
}

func (i *applicationGlueDataCatalogConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationGlueDataCatalogConfiguration] {
	return pulumix.Output[*ApplicationGlueDataCatalogConfiguration]{
		OutputState: i.ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration of the Glue Data Catalog that you use for Apache Flink SQL queries and table API transforms that you write in an application.
type ApplicationGlueDataCatalogConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationGlueDataCatalogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGlueDataCatalogConfiguration)(nil)).Elem()
}

func (o ApplicationGlueDataCatalogConfigurationOutput) ToApplicationGlueDataCatalogConfigurationOutput() ApplicationGlueDataCatalogConfigurationOutput {
	return o
}

func (o ApplicationGlueDataCatalogConfigurationOutput) ToApplicationGlueDataCatalogConfigurationOutputWithContext(ctx context.Context) ApplicationGlueDataCatalogConfigurationOutput {
	return o
}

func (o ApplicationGlueDataCatalogConfigurationOutput) ToApplicationGlueDataCatalogConfigurationPtrOutput() ApplicationGlueDataCatalogConfigurationPtrOutput {
	return o.ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationGlueDataCatalogConfigurationOutput) ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationGlueDataCatalogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationGlueDataCatalogConfiguration) *ApplicationGlueDataCatalogConfiguration {
		return &v
	}).(ApplicationGlueDataCatalogConfigurationPtrOutput)
}

func (o ApplicationGlueDataCatalogConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationGlueDataCatalogConfiguration] {
	return pulumix.Output[ApplicationGlueDataCatalogConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the database.
func (o ApplicationGlueDataCatalogConfigurationOutput) DatabaseArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGlueDataCatalogConfiguration) *string { return v.DatabaseArn }).(pulumi.StringPtrOutput)
}

type ApplicationGlueDataCatalogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationGlueDataCatalogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationGlueDataCatalogConfiguration)(nil)).Elem()
}

func (o ApplicationGlueDataCatalogConfigurationPtrOutput) ToApplicationGlueDataCatalogConfigurationPtrOutput() ApplicationGlueDataCatalogConfigurationPtrOutput {
	return o
}

func (o ApplicationGlueDataCatalogConfigurationPtrOutput) ToApplicationGlueDataCatalogConfigurationPtrOutputWithContext(ctx context.Context) ApplicationGlueDataCatalogConfigurationPtrOutput {
	return o
}

func (o ApplicationGlueDataCatalogConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationGlueDataCatalogConfiguration] {
	return pulumix.Output[*ApplicationGlueDataCatalogConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationGlueDataCatalogConfigurationPtrOutput) Elem() ApplicationGlueDataCatalogConfigurationOutput {
	return o.ApplyT(func(v *ApplicationGlueDataCatalogConfiguration) ApplicationGlueDataCatalogConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationGlueDataCatalogConfiguration
		return ret
	}).(ApplicationGlueDataCatalogConfigurationOutput)
}

// The Amazon Resource Name (ARN) of the database.
func (o ApplicationGlueDataCatalogConfigurationPtrOutput) DatabaseArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationGlueDataCatalogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseArn
	}).(pulumi.StringPtrOutput)
}

// When you configure the application input for a SQL-based Kinesis Data Analytics application, you specify the streaming source, the in-application stream name that is created, and the mapping between the two.
type ApplicationInputType struct {
	// Describes the number of in-application streams to create.
	InputParallelism *ApplicationInputParallelism `pulumi:"inputParallelism"`
	// The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
	InputProcessingConfiguration *ApplicationInputProcessingConfiguration `pulumi:"inputProcessingConfiguration"`
	// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
	InputSchema ApplicationInputSchema `pulumi:"inputSchema"`
	// If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
	KinesisFirehoseInput *ApplicationKinesisFirehoseInput `pulumi:"kinesisFirehoseInput"`
	// If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
	KinesisStreamsInput *ApplicationKinesisStreamsInput `pulumi:"kinesisStreamsInput"`
	// The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `"MyInApplicationStream"`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `"MyInApplicationStream_001"`, `"MyInApplicationStream_002"`, and so on.
	NamePrefix string `pulumi:"namePrefix"`
}

// ApplicationInputTypeInput is an input type that accepts ApplicationInputTypeArgs and ApplicationInputTypeOutput values.
// You can construct a concrete instance of `ApplicationInputTypeInput` via:
//
//	ApplicationInputTypeArgs{...}
type ApplicationInputTypeInput interface {
	pulumi.Input

	ToApplicationInputTypeOutput() ApplicationInputTypeOutput
	ToApplicationInputTypeOutputWithContext(context.Context) ApplicationInputTypeOutput
}

// When you configure the application input for a SQL-based Kinesis Data Analytics application, you specify the streaming source, the in-application stream name that is created, and the mapping between the two.
type ApplicationInputTypeArgs struct {
	// Describes the number of in-application streams to create.
	InputParallelism ApplicationInputParallelismPtrInput `pulumi:"inputParallelism"`
	// The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
	InputProcessingConfiguration ApplicationInputProcessingConfigurationPtrInput `pulumi:"inputProcessingConfiguration"`
	// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
	InputSchema ApplicationInputSchemaInput `pulumi:"inputSchema"`
	// If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
	KinesisFirehoseInput ApplicationKinesisFirehoseInputPtrInput `pulumi:"kinesisFirehoseInput"`
	// If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
	KinesisStreamsInput ApplicationKinesisStreamsInputPtrInput `pulumi:"kinesisStreamsInput"`
	// The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `"MyInApplicationStream"`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `"MyInApplicationStream_001"`, `"MyInApplicationStream_002"`, and so on.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
}

func (ApplicationInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputType)(nil)).Elem()
}

func (i ApplicationInputTypeArgs) ToApplicationInputTypeOutput() ApplicationInputTypeOutput {
	return i.ToApplicationInputTypeOutputWithContext(context.Background())
}

func (i ApplicationInputTypeArgs) ToApplicationInputTypeOutputWithContext(ctx context.Context) ApplicationInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputTypeOutput)
}

func (i ApplicationInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputType] {
	return pulumix.Output[ApplicationInputType]{
		OutputState: i.ToApplicationInputTypeOutputWithContext(ctx).OutputState,
	}
}

// ApplicationInputTypeArrayInput is an input type that accepts ApplicationInputTypeArray and ApplicationInputTypeArrayOutput values.
// You can construct a concrete instance of `ApplicationInputTypeArrayInput` via:
//
//	ApplicationInputTypeArray{ ApplicationInputTypeArgs{...} }
type ApplicationInputTypeArrayInput interface {
	pulumi.Input

	ToApplicationInputTypeArrayOutput() ApplicationInputTypeArrayOutput
	ToApplicationInputTypeArrayOutputWithContext(context.Context) ApplicationInputTypeArrayOutput
}

type ApplicationInputTypeArray []ApplicationInputTypeInput

func (ApplicationInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationInputType)(nil)).Elem()
}

func (i ApplicationInputTypeArray) ToApplicationInputTypeArrayOutput() ApplicationInputTypeArrayOutput {
	return i.ToApplicationInputTypeArrayOutputWithContext(context.Background())
}

func (i ApplicationInputTypeArray) ToApplicationInputTypeArrayOutputWithContext(ctx context.Context) ApplicationInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputTypeArrayOutput)
}

func (i ApplicationInputTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationInputType] {
	return pulumix.Output[[]ApplicationInputType]{
		OutputState: i.ToApplicationInputTypeArrayOutputWithContext(ctx).OutputState,
	}
}

// When you configure the application input for a SQL-based Kinesis Data Analytics application, you specify the streaming source, the in-application stream name that is created, and the mapping between the two.
type ApplicationInputTypeOutput struct{ *pulumi.OutputState }

func (ApplicationInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputType)(nil)).Elem()
}

func (o ApplicationInputTypeOutput) ToApplicationInputTypeOutput() ApplicationInputTypeOutput {
	return o
}

func (o ApplicationInputTypeOutput) ToApplicationInputTypeOutputWithContext(ctx context.Context) ApplicationInputTypeOutput {
	return o
}

func (o ApplicationInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputType] {
	return pulumix.Output[ApplicationInputType]{
		OutputState: o.OutputState,
	}
}

// Describes the number of in-application streams to create.
func (o ApplicationInputTypeOutput) InputParallelism() ApplicationInputParallelismPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationInputParallelism { return v.InputParallelism }).(ApplicationInputParallelismPtrOutput)
}

// The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
func (o ApplicationInputTypeOutput) InputProcessingConfiguration() ApplicationInputProcessingConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationInputProcessingConfiguration {
		return v.InputProcessingConfiguration
	}).(ApplicationInputProcessingConfigurationPtrOutput)
}

// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
func (o ApplicationInputTypeOutput) InputSchema() ApplicationInputSchemaOutput {
	return o.ApplyT(func(v ApplicationInputType) ApplicationInputSchema { return v.InputSchema }).(ApplicationInputSchemaOutput)
}

// If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
func (o ApplicationInputTypeOutput) KinesisFirehoseInput() ApplicationKinesisFirehoseInputPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationKinesisFirehoseInput { return v.KinesisFirehoseInput }).(ApplicationKinesisFirehoseInputPtrOutput)
}

// If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
func (o ApplicationInputTypeOutput) KinesisStreamsInput() ApplicationKinesisStreamsInputPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationKinesisStreamsInput { return v.KinesisStreamsInput }).(ApplicationKinesisStreamsInputPtrOutput)
}

// The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `"MyInApplicationStream"`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `"MyInApplicationStream_001"`, `"MyInApplicationStream_002"`, and so on.
func (o ApplicationInputTypeOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInputType) string { return v.NamePrefix }).(pulumi.StringOutput)
}

type ApplicationInputTypeArrayOutput struct{ *pulumi.OutputState }

func (ApplicationInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationInputType)(nil)).Elem()
}

func (o ApplicationInputTypeArrayOutput) ToApplicationInputTypeArrayOutput() ApplicationInputTypeArrayOutput {
	return o
}

func (o ApplicationInputTypeArrayOutput) ToApplicationInputTypeArrayOutputWithContext(ctx context.Context) ApplicationInputTypeArrayOutput {
	return o
}

func (o ApplicationInputTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationInputType] {
	return pulumix.Output[[]ApplicationInputType]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputTypeArrayOutput) Index(i pulumi.IntInput) ApplicationInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationInputType {
		return vs[0].([]ApplicationInputType)[vs[1].(int)]
	}).(ApplicationInputTypeOutput)
}

// An object that contains the Amazon Resource Name (ARN) of the Amazon Lambda function that is used to preprocess records in the stream in a SQL-based Kinesis Data Analytics application.
type ApplicationInputLambdaProcessor struct {
	// The ARN of the Amazon Lambda function that operates on records in the stream.
	ResourceArn string `pulumi:"resourceArn"`
}

// ApplicationInputLambdaProcessorInput is an input type that accepts ApplicationInputLambdaProcessorArgs and ApplicationInputLambdaProcessorOutput values.
// You can construct a concrete instance of `ApplicationInputLambdaProcessorInput` via:
//
//	ApplicationInputLambdaProcessorArgs{...}
type ApplicationInputLambdaProcessorInput interface {
	pulumi.Input

	ToApplicationInputLambdaProcessorOutput() ApplicationInputLambdaProcessorOutput
	ToApplicationInputLambdaProcessorOutputWithContext(context.Context) ApplicationInputLambdaProcessorOutput
}

// An object that contains the Amazon Resource Name (ARN) of the Amazon Lambda function that is used to preprocess records in the stream in a SQL-based Kinesis Data Analytics application.
type ApplicationInputLambdaProcessorArgs struct {
	// The ARN of the Amazon Lambda function that operates on records in the stream.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

func (ApplicationInputLambdaProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorOutput() ApplicationInputLambdaProcessorOutput {
	return i.ToApplicationInputLambdaProcessorOutputWithContext(context.Background())
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputLambdaProcessorOutput)
}

func (i ApplicationInputLambdaProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputLambdaProcessor] {
	return pulumix.Output[ApplicationInputLambdaProcessor]{
		OutputState: i.ToApplicationInputLambdaProcessorOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return i.ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Background())
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputLambdaProcessorOutput).ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx)
}

// ApplicationInputLambdaProcessorPtrInput is an input type that accepts ApplicationInputLambdaProcessorArgs, ApplicationInputLambdaProcessorPtr and ApplicationInputLambdaProcessorPtrOutput values.
// You can construct a concrete instance of `ApplicationInputLambdaProcessorPtrInput` via:
//
//	        ApplicationInputLambdaProcessorArgs{...}
//
//	or:
//
//	        nil
type ApplicationInputLambdaProcessorPtrInput interface {
	pulumi.Input

	ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput
	ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Context) ApplicationInputLambdaProcessorPtrOutput
}

type applicationInputLambdaProcessorPtrType ApplicationInputLambdaProcessorArgs

func ApplicationInputLambdaProcessorPtr(v *ApplicationInputLambdaProcessorArgs) ApplicationInputLambdaProcessorPtrInput {
	return (*applicationInputLambdaProcessorPtrType)(v)
}

func (*applicationInputLambdaProcessorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (i *applicationInputLambdaProcessorPtrType) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return i.ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Background())
}

func (i *applicationInputLambdaProcessorPtrType) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputLambdaProcessorPtrOutput)
}

func (i *applicationInputLambdaProcessorPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputLambdaProcessor] {
	return pulumix.Output[*ApplicationInputLambdaProcessor]{
		OutputState: i.ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx).OutputState,
	}
}

// An object that contains the Amazon Resource Name (ARN) of the Amazon Lambda function that is used to preprocess records in the stream in a SQL-based Kinesis Data Analytics application.
type ApplicationInputLambdaProcessorOutput struct{ *pulumi.OutputState }

func (ApplicationInputLambdaProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorOutput() ApplicationInputLambdaProcessorOutput {
	return o
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorOutput {
	return o
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return o.ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Background())
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInputLambdaProcessor) *ApplicationInputLambdaProcessor {
		return &v
	}).(ApplicationInputLambdaProcessorPtrOutput)
}

func (o ApplicationInputLambdaProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputLambdaProcessor] {
	return pulumix.Output[ApplicationInputLambdaProcessor]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Amazon Lambda function that operates on records in the stream.
func (o ApplicationInputLambdaProcessorOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInputLambdaProcessor) string { return v.ResourceArn }).(pulumi.StringOutput)
}

type ApplicationInputLambdaProcessorPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInputLambdaProcessorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (o ApplicationInputLambdaProcessorPtrOutput) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return o
}

func (o ApplicationInputLambdaProcessorPtrOutput) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return o
}

func (o ApplicationInputLambdaProcessorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputLambdaProcessor] {
	return pulumix.Output[*ApplicationInputLambdaProcessor]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputLambdaProcessorPtrOutput) Elem() ApplicationInputLambdaProcessorOutput {
	return o.ApplyT(func(v *ApplicationInputLambdaProcessor) ApplicationInputLambdaProcessor {
		if v != nil {
			return *v
		}
		var ret ApplicationInputLambdaProcessor
		return ret
	}).(ApplicationInputLambdaProcessorOutput)
}

// The ARN of the Amazon Lambda function that operates on records in the stream.
func (o ApplicationInputLambdaProcessorPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInputLambdaProcessor) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

// For a SQL-based Kinesis Data Analytics application, describes the number of in-application streams to create for a given streaming source.
type ApplicationInputParallelism struct {
	// The number of in-application streams to create.
	Count *int `pulumi:"count"`
}

// ApplicationInputParallelismInput is an input type that accepts ApplicationInputParallelismArgs and ApplicationInputParallelismOutput values.
// You can construct a concrete instance of `ApplicationInputParallelismInput` via:
//
//	ApplicationInputParallelismArgs{...}
type ApplicationInputParallelismInput interface {
	pulumi.Input

	ToApplicationInputParallelismOutput() ApplicationInputParallelismOutput
	ToApplicationInputParallelismOutputWithContext(context.Context) ApplicationInputParallelismOutput
}

// For a SQL-based Kinesis Data Analytics application, describes the number of in-application streams to create for a given streaming source.
type ApplicationInputParallelismArgs struct {
	// The number of in-application streams to create.
	Count pulumi.IntPtrInput `pulumi:"count"`
}

func (ApplicationInputParallelismArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputParallelism)(nil)).Elem()
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismOutput() ApplicationInputParallelismOutput {
	return i.ToApplicationInputParallelismOutputWithContext(context.Background())
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismOutputWithContext(ctx context.Context) ApplicationInputParallelismOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputParallelismOutput)
}

func (i ApplicationInputParallelismArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputParallelism] {
	return pulumix.Output[ApplicationInputParallelism]{
		OutputState: i.ToApplicationInputParallelismOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return i.ToApplicationInputParallelismPtrOutputWithContext(context.Background())
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputParallelismOutput).ToApplicationInputParallelismPtrOutputWithContext(ctx)
}

// ApplicationInputParallelismPtrInput is an input type that accepts ApplicationInputParallelismArgs, ApplicationInputParallelismPtr and ApplicationInputParallelismPtrOutput values.
// You can construct a concrete instance of `ApplicationInputParallelismPtrInput` via:
//
//	        ApplicationInputParallelismArgs{...}
//
//	or:
//
//	        nil
type ApplicationInputParallelismPtrInput interface {
	pulumi.Input

	ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput
	ToApplicationInputParallelismPtrOutputWithContext(context.Context) ApplicationInputParallelismPtrOutput
}

type applicationInputParallelismPtrType ApplicationInputParallelismArgs

func ApplicationInputParallelismPtr(v *ApplicationInputParallelismArgs) ApplicationInputParallelismPtrInput {
	return (*applicationInputParallelismPtrType)(v)
}

func (*applicationInputParallelismPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputParallelism)(nil)).Elem()
}

func (i *applicationInputParallelismPtrType) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return i.ToApplicationInputParallelismPtrOutputWithContext(context.Background())
}

func (i *applicationInputParallelismPtrType) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputParallelismPtrOutput)
}

func (i *applicationInputParallelismPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputParallelism] {
	return pulumix.Output[*ApplicationInputParallelism]{
		OutputState: i.ToApplicationInputParallelismPtrOutputWithContext(ctx).OutputState,
	}
}

// For a SQL-based Kinesis Data Analytics application, describes the number of in-application streams to create for a given streaming source.
type ApplicationInputParallelismOutput struct{ *pulumi.OutputState }

func (ApplicationInputParallelismOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputParallelism)(nil)).Elem()
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismOutput() ApplicationInputParallelismOutput {
	return o
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismOutputWithContext(ctx context.Context) ApplicationInputParallelismOutput {
	return o
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return o.ToApplicationInputParallelismPtrOutputWithContext(context.Background())
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInputParallelism) *ApplicationInputParallelism {
		return &v
	}).(ApplicationInputParallelismPtrOutput)
}

func (o ApplicationInputParallelismOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputParallelism] {
	return pulumix.Output[ApplicationInputParallelism]{
		OutputState: o.OutputState,
	}
}

// The number of in-application streams to create.
func (o ApplicationInputParallelismOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationInputParallelism) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type ApplicationInputParallelismPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInputParallelismPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputParallelism)(nil)).Elem()
}

func (o ApplicationInputParallelismPtrOutput) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return o
}

func (o ApplicationInputParallelismPtrOutput) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return o
}

func (o ApplicationInputParallelismPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputParallelism] {
	return pulumix.Output[*ApplicationInputParallelism]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputParallelismPtrOutput) Elem() ApplicationInputParallelismOutput {
	return o.ApplyT(func(v *ApplicationInputParallelism) ApplicationInputParallelism {
		if v != nil {
			return *v
		}
		var ret ApplicationInputParallelism
		return ret
	}).(ApplicationInputParallelismOutput)
}

// The number of in-application streams to create.
func (o ApplicationInputParallelismPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationInputParallelism) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// For an SQL-based Amazon Kinesis Data Analytics application, describes a processor that is used to preprocess the records in the stream before being processed by your application code. Currently, the only input processor available is Amazon Lambda.
type ApplicationInputProcessingConfiguration struct {
	// The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
	InputLambdaProcessor *ApplicationInputLambdaProcessor `pulumi:"inputLambdaProcessor"`
}

// ApplicationInputProcessingConfigurationInput is an input type that accepts ApplicationInputProcessingConfigurationArgs and ApplicationInputProcessingConfigurationOutput values.
// You can construct a concrete instance of `ApplicationInputProcessingConfigurationInput` via:
//
//	ApplicationInputProcessingConfigurationArgs{...}
type ApplicationInputProcessingConfigurationInput interface {
	pulumi.Input

	ToApplicationInputProcessingConfigurationOutput() ApplicationInputProcessingConfigurationOutput
	ToApplicationInputProcessingConfigurationOutputWithContext(context.Context) ApplicationInputProcessingConfigurationOutput
}

// For an SQL-based Amazon Kinesis Data Analytics application, describes a processor that is used to preprocess the records in the stream before being processed by your application code. Currently, the only input processor available is Amazon Lambda.
type ApplicationInputProcessingConfigurationArgs struct {
	// The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
	InputLambdaProcessor ApplicationInputLambdaProcessorPtrInput `pulumi:"inputLambdaProcessor"`
}

func (ApplicationInputProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationOutput() ApplicationInputProcessingConfigurationOutput {
	return i.ToApplicationInputProcessingConfigurationOutputWithContext(context.Background())
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputProcessingConfigurationOutput)
}

func (i ApplicationInputProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputProcessingConfiguration] {
	return pulumix.Output[ApplicationInputProcessingConfiguration]{
		OutputState: i.ToApplicationInputProcessingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return i.ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputProcessingConfigurationOutput).ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx)
}

// ApplicationInputProcessingConfigurationPtrInput is an input type that accepts ApplicationInputProcessingConfigurationArgs, ApplicationInputProcessingConfigurationPtr and ApplicationInputProcessingConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationInputProcessingConfigurationPtrInput` via:
//
//	        ApplicationInputProcessingConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationInputProcessingConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput
	ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Context) ApplicationInputProcessingConfigurationPtrOutput
}

type applicationInputProcessingConfigurationPtrType ApplicationInputProcessingConfigurationArgs

func ApplicationInputProcessingConfigurationPtr(v *ApplicationInputProcessingConfigurationArgs) ApplicationInputProcessingConfigurationPtrInput {
	return (*applicationInputProcessingConfigurationPtrType)(v)
}

func (*applicationInputProcessingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (i *applicationInputProcessingConfigurationPtrType) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return i.ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationInputProcessingConfigurationPtrType) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputProcessingConfigurationPtrOutput)
}

func (i *applicationInputProcessingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputProcessingConfiguration] {
	return pulumix.Output[*ApplicationInputProcessingConfiguration]{
		OutputState: i.ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// For an SQL-based Amazon Kinesis Data Analytics application, describes a processor that is used to preprocess the records in the stream before being processed by your application code. Currently, the only input processor available is Amazon Lambda.
type ApplicationInputProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationInputProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationOutput() ApplicationInputProcessingConfigurationOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return o.ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInputProcessingConfiguration) *ApplicationInputProcessingConfiguration {
		return &v
	}).(ApplicationInputProcessingConfigurationPtrOutput)
}

func (o ApplicationInputProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputProcessingConfiguration] {
	return pulumix.Output[ApplicationInputProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

// The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
func (o ApplicationInputProcessingConfigurationOutput) InputLambdaProcessor() ApplicationInputLambdaProcessorPtrOutput {
	return o.ApplyT(func(v ApplicationInputProcessingConfiguration) *ApplicationInputLambdaProcessor {
		return v.InputLambdaProcessor
	}).(ApplicationInputLambdaProcessorPtrOutput)
}

type ApplicationInputProcessingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInputProcessingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (o ApplicationInputProcessingConfigurationPtrOutput) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationPtrOutput) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputProcessingConfiguration] {
	return pulumix.Output[*ApplicationInputProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputProcessingConfigurationPtrOutput) Elem() ApplicationInputProcessingConfigurationOutput {
	return o.ApplyT(func(v *ApplicationInputProcessingConfiguration) ApplicationInputProcessingConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationInputProcessingConfiguration
		return ret
	}).(ApplicationInputProcessingConfigurationOutput)
}

// The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
func (o ApplicationInputProcessingConfigurationPtrOutput) InputLambdaProcessor() ApplicationInputLambdaProcessorPtrOutput {
	return o.ApplyT(func(v *ApplicationInputProcessingConfiguration) *ApplicationInputLambdaProcessor {
		if v == nil {
			return nil
		}
		return v.InputLambdaProcessor
	}).(ApplicationInputLambdaProcessorPtrOutput)
}

// For a SQL-based Kinesis Data Analytics application, describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
type ApplicationInputSchema struct {
	// A list of `RecordColumn` objects.
	RecordColumns []ApplicationRecordColumn `pulumi:"recordColumns"`
	// Specifies the encoding of the records in the streaming source. For example, UTF-8.
	RecordEncoding *ApplicationInputSchemaRecordEncoding `pulumi:"recordEncoding"`
	// Specifies the format of the records on the streaming source.
	RecordFormat ApplicationRecordFormat `pulumi:"recordFormat"`
}

// ApplicationInputSchemaInput is an input type that accepts ApplicationInputSchemaArgs and ApplicationInputSchemaOutput values.
// You can construct a concrete instance of `ApplicationInputSchemaInput` via:
//
//	ApplicationInputSchemaArgs{...}
type ApplicationInputSchemaInput interface {
	pulumi.Input

	ToApplicationInputSchemaOutput() ApplicationInputSchemaOutput
	ToApplicationInputSchemaOutputWithContext(context.Context) ApplicationInputSchemaOutput
}

// For a SQL-based Kinesis Data Analytics application, describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
type ApplicationInputSchemaArgs struct {
	// A list of `RecordColumn` objects.
	RecordColumns ApplicationRecordColumnArrayInput `pulumi:"recordColumns"`
	// Specifies the encoding of the records in the streaming source. For example, UTF-8.
	RecordEncoding ApplicationInputSchemaRecordEncodingPtrInput `pulumi:"recordEncoding"`
	// Specifies the format of the records on the streaming source.
	RecordFormat ApplicationRecordFormatInput `pulumi:"recordFormat"`
}

func (ApplicationInputSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputSchema)(nil)).Elem()
}

func (i ApplicationInputSchemaArgs) ToApplicationInputSchemaOutput() ApplicationInputSchemaOutput {
	return i.ToApplicationInputSchemaOutputWithContext(context.Background())
}

func (i ApplicationInputSchemaArgs) ToApplicationInputSchemaOutputWithContext(ctx context.Context) ApplicationInputSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputSchemaOutput)
}

func (i ApplicationInputSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputSchema] {
	return pulumix.Output[ApplicationInputSchema]{
		OutputState: i.ToApplicationInputSchemaOutputWithContext(ctx).OutputState,
	}
}

// For a SQL-based Kinesis Data Analytics application, describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
type ApplicationInputSchemaOutput struct{ *pulumi.OutputState }

func (ApplicationInputSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputSchema)(nil)).Elem()
}

func (o ApplicationInputSchemaOutput) ToApplicationInputSchemaOutput() ApplicationInputSchemaOutput {
	return o
}

func (o ApplicationInputSchemaOutput) ToApplicationInputSchemaOutputWithContext(ctx context.Context) ApplicationInputSchemaOutput {
	return o
}

func (o ApplicationInputSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputSchema] {
	return pulumix.Output[ApplicationInputSchema]{
		OutputState: o.OutputState,
	}
}

// A list of `RecordColumn` objects.
func (o ApplicationInputSchemaOutput) RecordColumns() ApplicationRecordColumnArrayOutput {
	return o.ApplyT(func(v ApplicationInputSchema) []ApplicationRecordColumn { return v.RecordColumns }).(ApplicationRecordColumnArrayOutput)
}

// Specifies the encoding of the records in the streaming source. For example, UTF-8.
func (o ApplicationInputSchemaOutput) RecordEncoding() ApplicationInputSchemaRecordEncodingPtrOutput {
	return o.ApplyT(func(v ApplicationInputSchema) *ApplicationInputSchemaRecordEncoding { return v.RecordEncoding }).(ApplicationInputSchemaRecordEncodingPtrOutput)
}

// Specifies the format of the records on the streaming source.
func (o ApplicationInputSchemaOutput) RecordFormat() ApplicationRecordFormatOutput {
	return o.ApplyT(func(v ApplicationInputSchema) ApplicationRecordFormat { return v.RecordFormat }).(ApplicationRecordFormatOutput)
}

// For a SQL-based Kinesis Data Analytics application, provides additional mapping information when JSON is the record format on the streaming source.
type ApplicationJsonMappingParameters struct {
	// The path to the top-level parent that contains the records.
	RecordRowPath string `pulumi:"recordRowPath"`
}

// ApplicationJsonMappingParametersInput is an input type that accepts ApplicationJsonMappingParametersArgs and ApplicationJsonMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationJsonMappingParametersInput` via:
//
//	ApplicationJsonMappingParametersArgs{...}
type ApplicationJsonMappingParametersInput interface {
	pulumi.Input

	ToApplicationJsonMappingParametersOutput() ApplicationJsonMappingParametersOutput
	ToApplicationJsonMappingParametersOutputWithContext(context.Context) ApplicationJsonMappingParametersOutput
}

// For a SQL-based Kinesis Data Analytics application, provides additional mapping information when JSON is the record format on the streaming source.
type ApplicationJsonMappingParametersArgs struct {
	// The path to the top-level parent that contains the records.
	RecordRowPath pulumi.StringInput `pulumi:"recordRowPath"`
}

func (ApplicationJsonMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationJsonMappingParameters)(nil)).Elem()
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersOutput() ApplicationJsonMappingParametersOutput {
	return i.ToApplicationJsonMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationJsonMappingParametersOutput)
}

func (i ApplicationJsonMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationJsonMappingParameters] {
	return pulumix.Output[ApplicationJsonMappingParameters]{
		OutputState: i.ToApplicationJsonMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return i.ToApplicationJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationJsonMappingParametersOutput).ToApplicationJsonMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationJsonMappingParametersPtrInput is an input type that accepts ApplicationJsonMappingParametersArgs, ApplicationJsonMappingParametersPtr and ApplicationJsonMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationJsonMappingParametersPtrInput` via:
//
//	        ApplicationJsonMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationJsonMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput
	ToApplicationJsonMappingParametersPtrOutputWithContext(context.Context) ApplicationJsonMappingParametersPtrOutput
}

type applicationJsonMappingParametersPtrType ApplicationJsonMappingParametersArgs

func ApplicationJsonMappingParametersPtr(v *ApplicationJsonMappingParametersArgs) ApplicationJsonMappingParametersPtrInput {
	return (*applicationJsonMappingParametersPtrType)(v)
}

func (*applicationJsonMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationJsonMappingParameters)(nil)).Elem()
}

func (i *applicationJsonMappingParametersPtrType) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return i.ToApplicationJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationJsonMappingParametersPtrType) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationJsonMappingParametersPtrOutput)
}

func (i *applicationJsonMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationJsonMappingParameters] {
	return pulumix.Output[*ApplicationJsonMappingParameters]{
		OutputState: i.ToApplicationJsonMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// For a SQL-based Kinesis Data Analytics application, provides additional mapping information when JSON is the record format on the streaming source.
type ApplicationJsonMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationJsonMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersOutput() ApplicationJsonMappingParametersOutput {
	return o
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersOutput {
	return o
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return o.ToApplicationJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationJsonMappingParameters) *ApplicationJsonMappingParameters {
		return &v
	}).(ApplicationJsonMappingParametersPtrOutput)
}

func (o ApplicationJsonMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationJsonMappingParameters] {
	return pulumix.Output[ApplicationJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

// The path to the top-level parent that contains the records.
func (o ApplicationJsonMappingParametersOutput) RecordRowPath() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationJsonMappingParameters) string { return v.RecordRowPath }).(pulumi.StringOutput)
}

type ApplicationJsonMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationJsonMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationJsonMappingParametersPtrOutput) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationJsonMappingParametersPtrOutput) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationJsonMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationJsonMappingParameters] {
	return pulumix.Output[*ApplicationJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationJsonMappingParametersPtrOutput) Elem() ApplicationJsonMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationJsonMappingParameters) ApplicationJsonMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationJsonMappingParameters
		return ret
	}).(ApplicationJsonMappingParametersOutput)
}

// The path to the top-level parent that contains the records.
func (o ApplicationJsonMappingParametersPtrOutput) RecordRowPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationJsonMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowPath
	}).(pulumi.StringPtrOutput)
}

// For a SQL-based Kinesis Data Analytics application, identifies a Kinesis Data Firehose delivery stream as the streaming source. You provide the delivery stream's Amazon Resource Name (ARN).
type ApplicationKinesisFirehoseInput struct {
	// The Amazon Resource Name (ARN) of the delivery stream.
	ResourceArn string `pulumi:"resourceArn"`
}

// ApplicationKinesisFirehoseInputInput is an input type that accepts ApplicationKinesisFirehoseInputArgs and ApplicationKinesisFirehoseInputOutput values.
// You can construct a concrete instance of `ApplicationKinesisFirehoseInputInput` via:
//
//	ApplicationKinesisFirehoseInputArgs{...}
type ApplicationKinesisFirehoseInputInput interface {
	pulumi.Input

	ToApplicationKinesisFirehoseInputOutput() ApplicationKinesisFirehoseInputOutput
	ToApplicationKinesisFirehoseInputOutputWithContext(context.Context) ApplicationKinesisFirehoseInputOutput
}

// For a SQL-based Kinesis Data Analytics application, identifies a Kinesis Data Firehose delivery stream as the streaming source. You provide the delivery stream's Amazon Resource Name (ARN).
type ApplicationKinesisFirehoseInputArgs struct {
	// The Amazon Resource Name (ARN) of the delivery stream.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

func (ApplicationKinesisFirehoseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputOutput() ApplicationKinesisFirehoseInputOutput {
	return i.ToApplicationKinesisFirehoseInputOutputWithContext(context.Background())
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisFirehoseInputOutput)
}

func (i ApplicationKinesisFirehoseInputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisFirehoseInput] {
	return pulumix.Output[ApplicationKinesisFirehoseInput]{
		OutputState: i.ToApplicationKinesisFirehoseInputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return i.ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Background())
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisFirehoseInputOutput).ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx)
}

// ApplicationKinesisFirehoseInputPtrInput is an input type that accepts ApplicationKinesisFirehoseInputArgs, ApplicationKinesisFirehoseInputPtr and ApplicationKinesisFirehoseInputPtrOutput values.
// You can construct a concrete instance of `ApplicationKinesisFirehoseInputPtrInput` via:
//
//	        ApplicationKinesisFirehoseInputArgs{...}
//
//	or:
//
//	        nil
type ApplicationKinesisFirehoseInputPtrInput interface {
	pulumi.Input

	ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput
	ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Context) ApplicationKinesisFirehoseInputPtrOutput
}

type applicationKinesisFirehoseInputPtrType ApplicationKinesisFirehoseInputArgs

func ApplicationKinesisFirehoseInputPtr(v *ApplicationKinesisFirehoseInputArgs) ApplicationKinesisFirehoseInputPtrInput {
	return (*applicationKinesisFirehoseInputPtrType)(v)
}

func (*applicationKinesisFirehoseInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (i *applicationKinesisFirehoseInputPtrType) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return i.ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Background())
}

func (i *applicationKinesisFirehoseInputPtrType) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisFirehoseInputPtrOutput)
}

func (i *applicationKinesisFirehoseInputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisFirehoseInput] {
	return pulumix.Output[*ApplicationKinesisFirehoseInput]{
		OutputState: i.ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx).OutputState,
	}
}

// For a SQL-based Kinesis Data Analytics application, identifies a Kinesis Data Firehose delivery stream as the streaming source. You provide the delivery stream's Amazon Resource Name (ARN).
type ApplicationKinesisFirehoseInputOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisFirehoseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputOutput() ApplicationKinesisFirehoseInputOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return o.ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Background())
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationKinesisFirehoseInput) *ApplicationKinesisFirehoseInput {
		return &v
	}).(ApplicationKinesisFirehoseInputPtrOutput)
}

func (o ApplicationKinesisFirehoseInputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisFirehoseInput] {
	return pulumix.Output[ApplicationKinesisFirehoseInput]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the delivery stream.
func (o ApplicationKinesisFirehoseInputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationKinesisFirehoseInput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

type ApplicationKinesisFirehoseInputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisFirehoseInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (o ApplicationKinesisFirehoseInputPtrOutput) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputPtrOutput) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisFirehoseInput] {
	return pulumix.Output[*ApplicationKinesisFirehoseInput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKinesisFirehoseInputPtrOutput) Elem() ApplicationKinesisFirehoseInputOutput {
	return o.ApplyT(func(v *ApplicationKinesisFirehoseInput) ApplicationKinesisFirehoseInput {
		if v != nil {
			return *v
		}
		var ret ApplicationKinesisFirehoseInput
		return ret
	}).(ApplicationKinesisFirehoseInputOutput)
}

// The Amazon Resource Name (ARN) of the delivery stream.
func (o ApplicationKinesisFirehoseInputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKinesisFirehoseInput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

// Identifies a Kinesis data stream as the streaming source. You provide the stream's Amazon Resource Name (ARN).
type ApplicationKinesisStreamsInput struct {
	// The ARN of the input Kinesis data stream to read.
	ResourceArn string `pulumi:"resourceArn"`
}

// ApplicationKinesisStreamsInputInput is an input type that accepts ApplicationKinesisStreamsInputArgs and ApplicationKinesisStreamsInputOutput values.
// You can construct a concrete instance of `ApplicationKinesisStreamsInputInput` via:
//
//	ApplicationKinesisStreamsInputArgs{...}
type ApplicationKinesisStreamsInputInput interface {
	pulumi.Input

	ToApplicationKinesisStreamsInputOutput() ApplicationKinesisStreamsInputOutput
	ToApplicationKinesisStreamsInputOutputWithContext(context.Context) ApplicationKinesisStreamsInputOutput
}

// Identifies a Kinesis data stream as the streaming source. You provide the stream's Amazon Resource Name (ARN).
type ApplicationKinesisStreamsInputArgs struct {
	// The ARN of the input Kinesis data stream to read.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

func (ApplicationKinesisStreamsInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputOutput() ApplicationKinesisStreamsInputOutput {
	return i.ToApplicationKinesisStreamsInputOutputWithContext(context.Background())
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisStreamsInputOutput)
}

func (i ApplicationKinesisStreamsInputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisStreamsInput] {
	return pulumix.Output[ApplicationKinesisStreamsInput]{
		OutputState: i.ToApplicationKinesisStreamsInputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return i.ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Background())
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisStreamsInputOutput).ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx)
}

// ApplicationKinesisStreamsInputPtrInput is an input type that accepts ApplicationKinesisStreamsInputArgs, ApplicationKinesisStreamsInputPtr and ApplicationKinesisStreamsInputPtrOutput values.
// You can construct a concrete instance of `ApplicationKinesisStreamsInputPtrInput` via:
//
//	        ApplicationKinesisStreamsInputArgs{...}
//
//	or:
//
//	        nil
type ApplicationKinesisStreamsInputPtrInput interface {
	pulumi.Input

	ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput
	ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Context) ApplicationKinesisStreamsInputPtrOutput
}

type applicationKinesisStreamsInputPtrType ApplicationKinesisStreamsInputArgs

func ApplicationKinesisStreamsInputPtr(v *ApplicationKinesisStreamsInputArgs) ApplicationKinesisStreamsInputPtrInput {
	return (*applicationKinesisStreamsInputPtrType)(v)
}

func (*applicationKinesisStreamsInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (i *applicationKinesisStreamsInputPtrType) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return i.ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Background())
}

func (i *applicationKinesisStreamsInputPtrType) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisStreamsInputPtrOutput)
}

func (i *applicationKinesisStreamsInputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisStreamsInput] {
	return pulumix.Output[*ApplicationKinesisStreamsInput]{
		OutputState: i.ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx).OutputState,
	}
}

// Identifies a Kinesis data stream as the streaming source. You provide the stream's Amazon Resource Name (ARN).
type ApplicationKinesisStreamsInputOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisStreamsInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputOutput() ApplicationKinesisStreamsInputOutput {
	return o
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputOutput {
	return o
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return o.ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Background())
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationKinesisStreamsInput) *ApplicationKinesisStreamsInput {
		return &v
	}).(ApplicationKinesisStreamsInputPtrOutput)
}

func (o ApplicationKinesisStreamsInputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisStreamsInput] {
	return pulumix.Output[ApplicationKinesisStreamsInput]{
		OutputState: o.OutputState,
	}
}

// The ARN of the input Kinesis data stream to read.
func (o ApplicationKinesisStreamsInputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationKinesisStreamsInput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

type ApplicationKinesisStreamsInputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisStreamsInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (o ApplicationKinesisStreamsInputPtrOutput) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return o
}

func (o ApplicationKinesisStreamsInputPtrOutput) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return o
}

func (o ApplicationKinesisStreamsInputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisStreamsInput] {
	return pulumix.Output[*ApplicationKinesisStreamsInput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKinesisStreamsInputPtrOutput) Elem() ApplicationKinesisStreamsInputOutput {
	return o.ApplyT(func(v *ApplicationKinesisStreamsInput) ApplicationKinesisStreamsInput {
		if v != nil {
			return *v
		}
		var ret ApplicationKinesisStreamsInput
		return ret
	}).(ApplicationKinesisStreamsInputOutput)
}

// The ARN of the input Kinesis data stream to read.
func (o ApplicationKinesisStreamsInputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKinesisStreamsInput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

// Describes the maintenance configuration for the application.
type ApplicationMaintenanceConfiguration struct {
	// The start time for the maintenance window.
	ApplicationMaintenanceWindowStartTime string `pulumi:"applicationMaintenanceWindowStartTime"`
}

// ApplicationMaintenanceConfigurationInput is an input type that accepts ApplicationMaintenanceConfigurationArgs and ApplicationMaintenanceConfigurationOutput values.
// You can construct a concrete instance of `ApplicationMaintenanceConfigurationInput` via:
//
//	ApplicationMaintenanceConfigurationArgs{...}
type ApplicationMaintenanceConfigurationInput interface {
	pulumi.Input

	ToApplicationMaintenanceConfigurationOutput() ApplicationMaintenanceConfigurationOutput
	ToApplicationMaintenanceConfigurationOutputWithContext(context.Context) ApplicationMaintenanceConfigurationOutput
}

// Describes the maintenance configuration for the application.
type ApplicationMaintenanceConfigurationArgs struct {
	// The start time for the maintenance window.
	ApplicationMaintenanceWindowStartTime pulumi.StringInput `pulumi:"applicationMaintenanceWindowStartTime"`
}

func (ApplicationMaintenanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMaintenanceConfiguration)(nil)).Elem()
}

func (i ApplicationMaintenanceConfigurationArgs) ToApplicationMaintenanceConfigurationOutput() ApplicationMaintenanceConfigurationOutput {
	return i.ToApplicationMaintenanceConfigurationOutputWithContext(context.Background())
}

func (i ApplicationMaintenanceConfigurationArgs) ToApplicationMaintenanceConfigurationOutputWithContext(ctx context.Context) ApplicationMaintenanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMaintenanceConfigurationOutput)
}

func (i ApplicationMaintenanceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationMaintenanceConfiguration] {
	return pulumix.Output[ApplicationMaintenanceConfiguration]{
		OutputState: i.ToApplicationMaintenanceConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationMaintenanceConfigurationArgs) ToApplicationMaintenanceConfigurationPtrOutput() ApplicationMaintenanceConfigurationPtrOutput {
	return i.ToApplicationMaintenanceConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationMaintenanceConfigurationArgs) ToApplicationMaintenanceConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMaintenanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMaintenanceConfigurationOutput).ToApplicationMaintenanceConfigurationPtrOutputWithContext(ctx)
}

// ApplicationMaintenanceConfigurationPtrInput is an input type that accepts ApplicationMaintenanceConfigurationArgs, ApplicationMaintenanceConfigurationPtr and ApplicationMaintenanceConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationMaintenanceConfigurationPtrInput` via:
//
//	        ApplicationMaintenanceConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationMaintenanceConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationMaintenanceConfigurationPtrOutput() ApplicationMaintenanceConfigurationPtrOutput
	ToApplicationMaintenanceConfigurationPtrOutputWithContext(context.Context) ApplicationMaintenanceConfigurationPtrOutput
}

type applicationMaintenanceConfigurationPtrType ApplicationMaintenanceConfigurationArgs

func ApplicationMaintenanceConfigurationPtr(v *ApplicationMaintenanceConfigurationArgs) ApplicationMaintenanceConfigurationPtrInput {
	return (*applicationMaintenanceConfigurationPtrType)(v)
}

func (*applicationMaintenanceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMaintenanceConfiguration)(nil)).Elem()
}

func (i *applicationMaintenanceConfigurationPtrType) ToApplicationMaintenanceConfigurationPtrOutput() ApplicationMaintenanceConfigurationPtrOutput {
	return i.ToApplicationMaintenanceConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationMaintenanceConfigurationPtrType) ToApplicationMaintenanceConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMaintenanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMaintenanceConfigurationPtrOutput)
}

func (i *applicationMaintenanceConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMaintenanceConfiguration] {
	return pulumix.Output[*ApplicationMaintenanceConfiguration]{
		OutputState: i.ToApplicationMaintenanceConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the maintenance configuration for the application.
type ApplicationMaintenanceConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationMaintenanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMaintenanceConfiguration)(nil)).Elem()
}

func (o ApplicationMaintenanceConfigurationOutput) ToApplicationMaintenanceConfigurationOutput() ApplicationMaintenanceConfigurationOutput {
	return o
}

func (o ApplicationMaintenanceConfigurationOutput) ToApplicationMaintenanceConfigurationOutputWithContext(ctx context.Context) ApplicationMaintenanceConfigurationOutput {
	return o
}

func (o ApplicationMaintenanceConfigurationOutput) ToApplicationMaintenanceConfigurationPtrOutput() ApplicationMaintenanceConfigurationPtrOutput {
	return o.ToApplicationMaintenanceConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationMaintenanceConfigurationOutput) ToApplicationMaintenanceConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMaintenanceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationMaintenanceConfiguration) *ApplicationMaintenanceConfiguration {
		return &v
	}).(ApplicationMaintenanceConfigurationPtrOutput)
}

func (o ApplicationMaintenanceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationMaintenanceConfiguration] {
	return pulumix.Output[ApplicationMaintenanceConfiguration]{
		OutputState: o.OutputState,
	}
}

// The start time for the maintenance window.
func (o ApplicationMaintenanceConfigurationOutput) ApplicationMaintenanceWindowStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationMaintenanceConfiguration) string { return v.ApplicationMaintenanceWindowStartTime }).(pulumi.StringOutput)
}

type ApplicationMaintenanceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationMaintenanceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMaintenanceConfiguration)(nil)).Elem()
}

func (o ApplicationMaintenanceConfigurationPtrOutput) ToApplicationMaintenanceConfigurationPtrOutput() ApplicationMaintenanceConfigurationPtrOutput {
	return o
}

func (o ApplicationMaintenanceConfigurationPtrOutput) ToApplicationMaintenanceConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMaintenanceConfigurationPtrOutput {
	return o
}

func (o ApplicationMaintenanceConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMaintenanceConfiguration] {
	return pulumix.Output[*ApplicationMaintenanceConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationMaintenanceConfigurationPtrOutput) Elem() ApplicationMaintenanceConfigurationOutput {
	return o.ApplyT(func(v *ApplicationMaintenanceConfiguration) ApplicationMaintenanceConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationMaintenanceConfiguration
		return ret
	}).(ApplicationMaintenanceConfigurationOutput)
}

// The start time for the maintenance window.
func (o ApplicationMaintenanceConfigurationPtrOutput) ApplicationMaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationMaintenanceConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationMaintenanceWindowStartTime
	}).(pulumi.StringPtrOutput)
}

// When you configure a SQL-based Kinesis Data Analytics application's input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
type ApplicationMappingParameters struct {
	// Provides additional mapping information when the record format uses delimiters (for example, CSV).
	CsvMappingParameters *ApplicationCsvMappingParameters `pulumi:"csvMappingParameters"`
	// Provides additional mapping information when JSON is the record format on the streaming source.
	JsonMappingParameters *ApplicationJsonMappingParameters `pulumi:"jsonMappingParameters"`
}

// ApplicationMappingParametersInput is an input type that accepts ApplicationMappingParametersArgs and ApplicationMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationMappingParametersInput` via:
//
//	ApplicationMappingParametersArgs{...}
type ApplicationMappingParametersInput interface {
	pulumi.Input

	ToApplicationMappingParametersOutput() ApplicationMappingParametersOutput
	ToApplicationMappingParametersOutputWithContext(context.Context) ApplicationMappingParametersOutput
}

// When you configure a SQL-based Kinesis Data Analytics application's input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
type ApplicationMappingParametersArgs struct {
	// Provides additional mapping information when the record format uses delimiters (for example, CSV).
	CsvMappingParameters ApplicationCsvMappingParametersPtrInput `pulumi:"csvMappingParameters"`
	// Provides additional mapping information when JSON is the record format on the streaming source.
	JsonMappingParameters ApplicationJsonMappingParametersPtrInput `pulumi:"jsonMappingParameters"`
}

func (ApplicationMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMappingParameters)(nil)).Elem()
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersOutput() ApplicationMappingParametersOutput {
	return i.ToApplicationMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersOutputWithContext(ctx context.Context) ApplicationMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMappingParametersOutput)
}

func (i ApplicationMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationMappingParameters] {
	return pulumix.Output[ApplicationMappingParameters]{
		OutputState: i.ToApplicationMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return i.ToApplicationMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMappingParametersOutput).ToApplicationMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationMappingParametersPtrInput is an input type that accepts ApplicationMappingParametersArgs, ApplicationMappingParametersPtr and ApplicationMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationMappingParametersPtrInput` via:
//
//	        ApplicationMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput
	ToApplicationMappingParametersPtrOutputWithContext(context.Context) ApplicationMappingParametersPtrOutput
}

type applicationMappingParametersPtrType ApplicationMappingParametersArgs

func ApplicationMappingParametersPtr(v *ApplicationMappingParametersArgs) ApplicationMappingParametersPtrInput {
	return (*applicationMappingParametersPtrType)(v)
}

func (*applicationMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMappingParameters)(nil)).Elem()
}

func (i *applicationMappingParametersPtrType) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return i.ToApplicationMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationMappingParametersPtrType) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMappingParametersPtrOutput)
}

func (i *applicationMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMappingParameters] {
	return pulumix.Output[*ApplicationMappingParameters]{
		OutputState: i.ToApplicationMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// When you configure a SQL-based Kinesis Data Analytics application's input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
type ApplicationMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMappingParameters)(nil)).Elem()
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersOutput() ApplicationMappingParametersOutput {
	return o
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersOutputWithContext(ctx context.Context) ApplicationMappingParametersOutput {
	return o
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return o.ToApplicationMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationMappingParameters) *ApplicationMappingParameters {
		return &v
	}).(ApplicationMappingParametersPtrOutput)
}

func (o ApplicationMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationMappingParameters] {
	return pulumix.Output[ApplicationMappingParameters]{
		OutputState: o.OutputState,
	}
}

// Provides additional mapping information when the record format uses delimiters (for example, CSV).
func (o ApplicationMappingParametersOutput) CsvMappingParameters() ApplicationCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationMappingParameters) *ApplicationCsvMappingParameters { return v.CsvMappingParameters }).(ApplicationCsvMappingParametersPtrOutput)
}

// Provides additional mapping information when JSON is the record format on the streaming source.
func (o ApplicationMappingParametersOutput) JsonMappingParameters() ApplicationJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationMappingParameters) *ApplicationJsonMappingParameters { return v.JsonMappingParameters }).(ApplicationJsonMappingParametersPtrOutput)
}

type ApplicationMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMappingParameters)(nil)).Elem()
}

func (o ApplicationMappingParametersPtrOutput) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return o
}

func (o ApplicationMappingParametersPtrOutput) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return o
}

func (o ApplicationMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMappingParameters] {
	return pulumix.Output[*ApplicationMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationMappingParametersPtrOutput) Elem() ApplicationMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationMappingParameters) ApplicationMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationMappingParameters
		return ret
	}).(ApplicationMappingParametersOutput)
}

// Provides additional mapping information when the record format uses delimiters (for example, CSV).
func (o ApplicationMappingParametersPtrOutput) CsvMappingParameters() ApplicationCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationMappingParameters) *ApplicationCsvMappingParameters {
		if v == nil {
			return nil
		}
		return v.CsvMappingParameters
	}).(ApplicationCsvMappingParametersPtrOutput)
}

// Provides additional mapping information when JSON is the record format on the streaming source.
func (o ApplicationMappingParametersPtrOutput) JsonMappingParameters() ApplicationJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationMappingParameters) *ApplicationJsonMappingParameters {
		if v == nil {
			return nil
		}
		return v.JsonMappingParameters
	}).(ApplicationJsonMappingParametersPtrOutput)
}

// The information required to specify a Maven reference. You can use Maven references to specify dependency JAR files.
type ApplicationMavenReference struct {
	// The artifact ID of the Maven reference.
	ArtifactId string `pulumi:"artifactId"`
	// The group ID of the Maven reference.
	GroupId string `pulumi:"groupId"`
	// The version of the Maven reference.
	Version string `pulumi:"version"`
}

// ApplicationMavenReferenceInput is an input type that accepts ApplicationMavenReferenceArgs and ApplicationMavenReferenceOutput values.
// You can construct a concrete instance of `ApplicationMavenReferenceInput` via:
//
//	ApplicationMavenReferenceArgs{...}
type ApplicationMavenReferenceInput interface {
	pulumi.Input

	ToApplicationMavenReferenceOutput() ApplicationMavenReferenceOutput
	ToApplicationMavenReferenceOutputWithContext(context.Context) ApplicationMavenReferenceOutput
}

// The information required to specify a Maven reference. You can use Maven references to specify dependency JAR files.
type ApplicationMavenReferenceArgs struct {
	// The artifact ID of the Maven reference.
	ArtifactId pulumi.StringInput `pulumi:"artifactId"`
	// The group ID of the Maven reference.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The version of the Maven reference.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ApplicationMavenReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMavenReference)(nil)).Elem()
}

func (i ApplicationMavenReferenceArgs) ToApplicationMavenReferenceOutput() ApplicationMavenReferenceOutput {
	return i.ToApplicationMavenReferenceOutputWithContext(context.Background())
}

func (i ApplicationMavenReferenceArgs) ToApplicationMavenReferenceOutputWithContext(ctx context.Context) ApplicationMavenReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMavenReferenceOutput)
}

func (i ApplicationMavenReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationMavenReference] {
	return pulumix.Output[ApplicationMavenReference]{
		OutputState: i.ToApplicationMavenReferenceOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationMavenReferenceArgs) ToApplicationMavenReferencePtrOutput() ApplicationMavenReferencePtrOutput {
	return i.ToApplicationMavenReferencePtrOutputWithContext(context.Background())
}

func (i ApplicationMavenReferenceArgs) ToApplicationMavenReferencePtrOutputWithContext(ctx context.Context) ApplicationMavenReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMavenReferenceOutput).ToApplicationMavenReferencePtrOutputWithContext(ctx)
}

// ApplicationMavenReferencePtrInput is an input type that accepts ApplicationMavenReferenceArgs, ApplicationMavenReferencePtr and ApplicationMavenReferencePtrOutput values.
// You can construct a concrete instance of `ApplicationMavenReferencePtrInput` via:
//
//	        ApplicationMavenReferenceArgs{...}
//
//	or:
//
//	        nil
type ApplicationMavenReferencePtrInput interface {
	pulumi.Input

	ToApplicationMavenReferencePtrOutput() ApplicationMavenReferencePtrOutput
	ToApplicationMavenReferencePtrOutputWithContext(context.Context) ApplicationMavenReferencePtrOutput
}

type applicationMavenReferencePtrType ApplicationMavenReferenceArgs

func ApplicationMavenReferencePtr(v *ApplicationMavenReferenceArgs) ApplicationMavenReferencePtrInput {
	return (*applicationMavenReferencePtrType)(v)
}

func (*applicationMavenReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMavenReference)(nil)).Elem()
}

func (i *applicationMavenReferencePtrType) ToApplicationMavenReferencePtrOutput() ApplicationMavenReferencePtrOutput {
	return i.ToApplicationMavenReferencePtrOutputWithContext(context.Background())
}

func (i *applicationMavenReferencePtrType) ToApplicationMavenReferencePtrOutputWithContext(ctx context.Context) ApplicationMavenReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMavenReferencePtrOutput)
}

func (i *applicationMavenReferencePtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMavenReference] {
	return pulumix.Output[*ApplicationMavenReference]{
		OutputState: i.ToApplicationMavenReferencePtrOutputWithContext(ctx).OutputState,
	}
}

// The information required to specify a Maven reference. You can use Maven references to specify dependency JAR files.
type ApplicationMavenReferenceOutput struct{ *pulumi.OutputState }

func (ApplicationMavenReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMavenReference)(nil)).Elem()
}

func (o ApplicationMavenReferenceOutput) ToApplicationMavenReferenceOutput() ApplicationMavenReferenceOutput {
	return o
}

func (o ApplicationMavenReferenceOutput) ToApplicationMavenReferenceOutputWithContext(ctx context.Context) ApplicationMavenReferenceOutput {
	return o
}

func (o ApplicationMavenReferenceOutput) ToApplicationMavenReferencePtrOutput() ApplicationMavenReferencePtrOutput {
	return o.ToApplicationMavenReferencePtrOutputWithContext(context.Background())
}

func (o ApplicationMavenReferenceOutput) ToApplicationMavenReferencePtrOutputWithContext(ctx context.Context) ApplicationMavenReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationMavenReference) *ApplicationMavenReference {
		return &v
	}).(ApplicationMavenReferencePtrOutput)
}

func (o ApplicationMavenReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationMavenReference] {
	return pulumix.Output[ApplicationMavenReference]{
		OutputState: o.OutputState,
	}
}

// The artifact ID of the Maven reference.
func (o ApplicationMavenReferenceOutput) ArtifactId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationMavenReference) string { return v.ArtifactId }).(pulumi.StringOutput)
}

// The group ID of the Maven reference.
func (o ApplicationMavenReferenceOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationMavenReference) string { return v.GroupId }).(pulumi.StringOutput)
}

// The version of the Maven reference.
func (o ApplicationMavenReferenceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationMavenReference) string { return v.Version }).(pulumi.StringOutput)
}

type ApplicationMavenReferencePtrOutput struct{ *pulumi.OutputState }

func (ApplicationMavenReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMavenReference)(nil)).Elem()
}

func (o ApplicationMavenReferencePtrOutput) ToApplicationMavenReferencePtrOutput() ApplicationMavenReferencePtrOutput {
	return o
}

func (o ApplicationMavenReferencePtrOutput) ToApplicationMavenReferencePtrOutputWithContext(ctx context.Context) ApplicationMavenReferencePtrOutput {
	return o
}

func (o ApplicationMavenReferencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMavenReference] {
	return pulumix.Output[*ApplicationMavenReference]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationMavenReferencePtrOutput) Elem() ApplicationMavenReferenceOutput {
	return o.ApplyT(func(v *ApplicationMavenReference) ApplicationMavenReference {
		if v != nil {
			return *v
		}
		var ret ApplicationMavenReference
		return ret
	}).(ApplicationMavenReferenceOutput)
}

// The artifact ID of the Maven reference.
func (o ApplicationMavenReferencePtrOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationMavenReference) *string {
		if v == nil {
			return nil
		}
		return &v.ArtifactId
	}).(pulumi.StringPtrOutput)
}

// The group ID of the Maven reference.
func (o ApplicationMavenReferencePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationMavenReference) *string {
		if v == nil {
			return nil
		}
		return &v.GroupId
	}).(pulumi.StringPtrOutput)
}

// The version of the Maven reference.
func (o ApplicationMavenReferencePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationMavenReference) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Describes configuration parameters for Amazon CloudWatch logging for a Java-based Kinesis Data Analytics application. For more information about CloudWatch logging, see Monitoring.
type ApplicationMonitoringConfiguration struct {
	// Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
	ConfigurationType ApplicationMonitoringConfigurationConfigurationType `pulumi:"configurationType"`
	// Describes the verbosity of the CloudWatch Logs for an application.
	LogLevel *ApplicationMonitoringConfigurationLogLevel `pulumi:"logLevel"`
	// Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
	MetricsLevel *ApplicationMonitoringConfigurationMetricsLevel `pulumi:"metricsLevel"`
}

// ApplicationMonitoringConfigurationInput is an input type that accepts ApplicationMonitoringConfigurationArgs and ApplicationMonitoringConfigurationOutput values.
// You can construct a concrete instance of `ApplicationMonitoringConfigurationInput` via:
//
//	ApplicationMonitoringConfigurationArgs{...}
type ApplicationMonitoringConfigurationInput interface {
	pulumi.Input

	ToApplicationMonitoringConfigurationOutput() ApplicationMonitoringConfigurationOutput
	ToApplicationMonitoringConfigurationOutputWithContext(context.Context) ApplicationMonitoringConfigurationOutput
}

// Describes configuration parameters for Amazon CloudWatch logging for a Java-based Kinesis Data Analytics application. For more information about CloudWatch logging, see Monitoring.
type ApplicationMonitoringConfigurationArgs struct {
	// Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
	ConfigurationType ApplicationMonitoringConfigurationConfigurationTypeInput `pulumi:"configurationType"`
	// Describes the verbosity of the CloudWatch Logs for an application.
	LogLevel ApplicationMonitoringConfigurationLogLevelPtrInput `pulumi:"logLevel"`
	// Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
	MetricsLevel ApplicationMonitoringConfigurationMetricsLevelPtrInput `pulumi:"metricsLevel"`
}

func (ApplicationMonitoringConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMonitoringConfiguration)(nil)).Elem()
}

func (i ApplicationMonitoringConfigurationArgs) ToApplicationMonitoringConfigurationOutput() ApplicationMonitoringConfigurationOutput {
	return i.ToApplicationMonitoringConfigurationOutputWithContext(context.Background())
}

func (i ApplicationMonitoringConfigurationArgs) ToApplicationMonitoringConfigurationOutputWithContext(ctx context.Context) ApplicationMonitoringConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMonitoringConfigurationOutput)
}

func (i ApplicationMonitoringConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationMonitoringConfiguration] {
	return pulumix.Output[ApplicationMonitoringConfiguration]{
		OutputState: i.ToApplicationMonitoringConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationMonitoringConfigurationArgs) ToApplicationMonitoringConfigurationPtrOutput() ApplicationMonitoringConfigurationPtrOutput {
	return i.ToApplicationMonitoringConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationMonitoringConfigurationArgs) ToApplicationMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMonitoringConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMonitoringConfigurationOutput).ToApplicationMonitoringConfigurationPtrOutputWithContext(ctx)
}

// ApplicationMonitoringConfigurationPtrInput is an input type that accepts ApplicationMonitoringConfigurationArgs, ApplicationMonitoringConfigurationPtr and ApplicationMonitoringConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationMonitoringConfigurationPtrInput` via:
//
//	        ApplicationMonitoringConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationMonitoringConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationMonitoringConfigurationPtrOutput() ApplicationMonitoringConfigurationPtrOutput
	ToApplicationMonitoringConfigurationPtrOutputWithContext(context.Context) ApplicationMonitoringConfigurationPtrOutput
}

type applicationMonitoringConfigurationPtrType ApplicationMonitoringConfigurationArgs

func ApplicationMonitoringConfigurationPtr(v *ApplicationMonitoringConfigurationArgs) ApplicationMonitoringConfigurationPtrInput {
	return (*applicationMonitoringConfigurationPtrType)(v)
}

func (*applicationMonitoringConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMonitoringConfiguration)(nil)).Elem()
}

func (i *applicationMonitoringConfigurationPtrType) ToApplicationMonitoringConfigurationPtrOutput() ApplicationMonitoringConfigurationPtrOutput {
	return i.ToApplicationMonitoringConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationMonitoringConfigurationPtrType) ToApplicationMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMonitoringConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMonitoringConfigurationPtrOutput)
}

func (i *applicationMonitoringConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMonitoringConfiguration] {
	return pulumix.Output[*ApplicationMonitoringConfiguration]{
		OutputState: i.ToApplicationMonitoringConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes configuration parameters for Amazon CloudWatch logging for a Java-based Kinesis Data Analytics application. For more information about CloudWatch logging, see Monitoring.
type ApplicationMonitoringConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationMonitoringConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMonitoringConfiguration)(nil)).Elem()
}

func (o ApplicationMonitoringConfigurationOutput) ToApplicationMonitoringConfigurationOutput() ApplicationMonitoringConfigurationOutput {
	return o
}

func (o ApplicationMonitoringConfigurationOutput) ToApplicationMonitoringConfigurationOutputWithContext(ctx context.Context) ApplicationMonitoringConfigurationOutput {
	return o
}

func (o ApplicationMonitoringConfigurationOutput) ToApplicationMonitoringConfigurationPtrOutput() ApplicationMonitoringConfigurationPtrOutput {
	return o.ToApplicationMonitoringConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationMonitoringConfigurationOutput) ToApplicationMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMonitoringConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationMonitoringConfiguration) *ApplicationMonitoringConfiguration {
		return &v
	}).(ApplicationMonitoringConfigurationPtrOutput)
}

func (o ApplicationMonitoringConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationMonitoringConfiguration] {
	return pulumix.Output[ApplicationMonitoringConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
func (o ApplicationMonitoringConfigurationOutput) ConfigurationType() ApplicationMonitoringConfigurationConfigurationTypeOutput {
	return o.ApplyT(func(v ApplicationMonitoringConfiguration) ApplicationMonitoringConfigurationConfigurationType {
		return v.ConfigurationType
	}).(ApplicationMonitoringConfigurationConfigurationTypeOutput)
}

// Describes the verbosity of the CloudWatch Logs for an application.
func (o ApplicationMonitoringConfigurationOutput) LogLevel() ApplicationMonitoringConfigurationLogLevelPtrOutput {
	return o.ApplyT(func(v ApplicationMonitoringConfiguration) *ApplicationMonitoringConfigurationLogLevel {
		return v.LogLevel
	}).(ApplicationMonitoringConfigurationLogLevelPtrOutput)
}

// Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
func (o ApplicationMonitoringConfigurationOutput) MetricsLevel() ApplicationMonitoringConfigurationMetricsLevelPtrOutput {
	return o.ApplyT(func(v ApplicationMonitoringConfiguration) *ApplicationMonitoringConfigurationMetricsLevel {
		return v.MetricsLevel
	}).(ApplicationMonitoringConfigurationMetricsLevelPtrOutput)
}

type ApplicationMonitoringConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationMonitoringConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMonitoringConfiguration)(nil)).Elem()
}

func (o ApplicationMonitoringConfigurationPtrOutput) ToApplicationMonitoringConfigurationPtrOutput() ApplicationMonitoringConfigurationPtrOutput {
	return o
}

func (o ApplicationMonitoringConfigurationPtrOutput) ToApplicationMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationMonitoringConfigurationPtrOutput {
	return o
}

func (o ApplicationMonitoringConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMonitoringConfiguration] {
	return pulumix.Output[*ApplicationMonitoringConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationMonitoringConfigurationPtrOutput) Elem() ApplicationMonitoringConfigurationOutput {
	return o.ApplyT(func(v *ApplicationMonitoringConfiguration) ApplicationMonitoringConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationMonitoringConfiguration
		return ret
	}).(ApplicationMonitoringConfigurationOutput)
}

// Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
func (o ApplicationMonitoringConfigurationPtrOutput) ConfigurationType() ApplicationMonitoringConfigurationConfigurationTypePtrOutput {
	return o.ApplyT(func(v *ApplicationMonitoringConfiguration) *ApplicationMonitoringConfigurationConfigurationType {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(ApplicationMonitoringConfigurationConfigurationTypePtrOutput)
}

// Describes the verbosity of the CloudWatch Logs for an application.
func (o ApplicationMonitoringConfigurationPtrOutput) LogLevel() ApplicationMonitoringConfigurationLogLevelPtrOutput {
	return o.ApplyT(func(v *ApplicationMonitoringConfiguration) *ApplicationMonitoringConfigurationLogLevel {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(ApplicationMonitoringConfigurationLogLevelPtrOutput)
}

// Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
func (o ApplicationMonitoringConfigurationPtrOutput) MetricsLevel() ApplicationMonitoringConfigurationMetricsLevelPtrOutput {
	return o.ApplyT(func(v *ApplicationMonitoringConfiguration) *ApplicationMonitoringConfigurationMetricsLevel {
		if v == nil {
			return nil
		}
		return v.MetricsLevel
	}).(ApplicationMonitoringConfigurationMetricsLevelPtrOutput)
}

type ApplicationOutputResourceDestinationSchema struct {
	RecordFormatType *string `pulumi:"recordFormatType"`
}

// ApplicationOutputResourceDestinationSchemaInput is an input type that accepts ApplicationOutputResourceDestinationSchemaArgs and ApplicationOutputResourceDestinationSchemaOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceDestinationSchemaInput` via:
//
//	ApplicationOutputResourceDestinationSchemaArgs{...}
type ApplicationOutputResourceDestinationSchemaInput interface {
	pulumi.Input

	ToApplicationOutputResourceDestinationSchemaOutput() ApplicationOutputResourceDestinationSchemaOutput
	ToApplicationOutputResourceDestinationSchemaOutputWithContext(context.Context) ApplicationOutputResourceDestinationSchemaOutput
}

type ApplicationOutputResourceDestinationSchemaArgs struct {
	RecordFormatType pulumi.StringPtrInput `pulumi:"recordFormatType"`
}

func (ApplicationOutputResourceDestinationSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceDestinationSchema)(nil)).Elem()
}

func (i ApplicationOutputResourceDestinationSchemaArgs) ToApplicationOutputResourceDestinationSchemaOutput() ApplicationOutputResourceDestinationSchemaOutput {
	return i.ToApplicationOutputResourceDestinationSchemaOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceDestinationSchemaArgs) ToApplicationOutputResourceDestinationSchemaOutputWithContext(ctx context.Context) ApplicationOutputResourceDestinationSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceDestinationSchemaOutput)
}

func (i ApplicationOutputResourceDestinationSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceDestinationSchema] {
	return pulumix.Output[ApplicationOutputResourceDestinationSchema]{
		OutputState: i.ToApplicationOutputResourceDestinationSchemaOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceDestinationSchemaOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceDestinationSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceDestinationSchema)(nil)).Elem()
}

func (o ApplicationOutputResourceDestinationSchemaOutput) ToApplicationOutputResourceDestinationSchemaOutput() ApplicationOutputResourceDestinationSchemaOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaOutput) ToApplicationOutputResourceDestinationSchemaOutputWithContext(ctx context.Context) ApplicationOutputResourceDestinationSchemaOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceDestinationSchema] {
	return pulumix.Output[ApplicationOutputResourceDestinationSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceDestinationSchemaOutput) RecordFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceDestinationSchema) *string { return v.RecordFormatType }).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceDestinationSchemaPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceDestinationSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceDestinationSchema)(nil)).Elem()
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) ToApplicationOutputResourceDestinationSchemaPtrOutput() ApplicationOutputResourceDestinationSchemaPtrOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) ToApplicationOutputResourceDestinationSchemaPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceDestinationSchemaPtrOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceDestinationSchema] {
	return pulumix.Output[*ApplicationOutputResourceDestinationSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) Elem() ApplicationOutputResourceDestinationSchemaOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceDestinationSchema) ApplicationOutputResourceDestinationSchema {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceDestinationSchema
		return ret
	}).(ApplicationOutputResourceDestinationSchemaOutput)
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) RecordFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceDestinationSchema) *string {
		if v == nil {
			return nil
		}
		return v.RecordFormatType
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceKinesisFirehoseOutput struct {
	ResourceArn string `pulumi:"resourceArn"`
}

// ApplicationOutputResourceKinesisFirehoseOutputInput is an input type that accepts ApplicationOutputResourceKinesisFirehoseOutputArgs and ApplicationOutputResourceKinesisFirehoseOutputOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisFirehoseOutputInput` via:
//
//	ApplicationOutputResourceKinesisFirehoseOutputArgs{...}
type ApplicationOutputResourceKinesisFirehoseOutputInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisFirehoseOutputOutput() ApplicationOutputResourceKinesisFirehoseOutputOutput
	ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(context.Context) ApplicationOutputResourceKinesisFirehoseOutputOutput
}

type ApplicationOutputResourceKinesisFirehoseOutputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

func (ApplicationOutputResourceKinesisFirehoseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputOutput() ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return i.ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisFirehoseOutputOutput)
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisFirehoseOutputOutput).ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx)
}

// ApplicationOutputResourceKinesisFirehoseOutputPtrInput is an input type that accepts ApplicationOutputResourceKinesisFirehoseOutputArgs, ApplicationOutputResourceKinesisFirehoseOutputPtr and ApplicationOutputResourceKinesisFirehoseOutputPtrOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisFirehoseOutputPtrInput` via:
//
//	        ApplicationOutputResourceKinesisFirehoseOutputArgs{...}
//
//	or:
//
//	        nil
type ApplicationOutputResourceKinesisFirehoseOutputPtrInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput
	ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput
}

type applicationOutputResourceKinesisFirehoseOutputPtrType ApplicationOutputResourceKinesisFirehoseOutputArgs

func ApplicationOutputResourceKinesisFirehoseOutputPtr(v *ApplicationOutputResourceKinesisFirehoseOutputArgs) ApplicationOutputResourceKinesisFirehoseOutputPtrInput {
	return (*applicationOutputResourceKinesisFirehoseOutputPtrType)(v)
}

func (*applicationOutputResourceKinesisFirehoseOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (i *applicationOutputResourceKinesisFirehoseOutputPtrType) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Background())
}

func (i *applicationOutputResourceKinesisFirehoseOutputPtrType) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (i *applicationOutputResourceKinesisFirehoseOutputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceKinesisFirehoseOutputOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisFirehoseOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputOutput() ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Background())
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationOutputResourceKinesisFirehoseOutput) *ApplicationOutputResourceKinesisFirehoseOutput {
		return &v
	}).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceKinesisFirehoseOutput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

type ApplicationOutputResourceKinesisFirehoseOutputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) Elem() ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisFirehoseOutput) ApplicationOutputResourceKinesisFirehoseOutput {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceKinesisFirehoseOutput
		return ret
	}).(ApplicationOutputResourceKinesisFirehoseOutputOutput)
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisFirehoseOutput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceKinesisStreamsOutput struct {
	ResourceArn string `pulumi:"resourceArn"`
}

// ApplicationOutputResourceKinesisStreamsOutputInput is an input type that accepts ApplicationOutputResourceKinesisStreamsOutputArgs and ApplicationOutputResourceKinesisStreamsOutputOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisStreamsOutputInput` via:
//
//	ApplicationOutputResourceKinesisStreamsOutputArgs{...}
type ApplicationOutputResourceKinesisStreamsOutputInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisStreamsOutputOutput() ApplicationOutputResourceKinesisStreamsOutputOutput
	ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(context.Context) ApplicationOutputResourceKinesisStreamsOutputOutput
}

type ApplicationOutputResourceKinesisStreamsOutputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

func (ApplicationOutputResourceKinesisStreamsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputOutput() ApplicationOutputResourceKinesisStreamsOutputOutput {
	return i.ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisStreamsOutputOutput)
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisStreamsOutputOutput).ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx)
}

// ApplicationOutputResourceKinesisStreamsOutputPtrInput is an input type that accepts ApplicationOutputResourceKinesisStreamsOutputArgs, ApplicationOutputResourceKinesisStreamsOutputPtr and ApplicationOutputResourceKinesisStreamsOutputPtrOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisStreamsOutputPtrInput` via:
//
//	        ApplicationOutputResourceKinesisStreamsOutputArgs{...}
//
//	or:
//
//	        nil
type ApplicationOutputResourceKinesisStreamsOutputPtrInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput
	ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput
}

type applicationOutputResourceKinesisStreamsOutputPtrType ApplicationOutputResourceKinesisStreamsOutputArgs

func ApplicationOutputResourceKinesisStreamsOutputPtr(v *ApplicationOutputResourceKinesisStreamsOutputArgs) ApplicationOutputResourceKinesisStreamsOutputPtrInput {
	return (*applicationOutputResourceKinesisStreamsOutputPtrType)(v)
}

func (*applicationOutputResourceKinesisStreamsOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (i *applicationOutputResourceKinesisStreamsOutputPtrType) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Background())
}

func (i *applicationOutputResourceKinesisStreamsOutputPtrType) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (i *applicationOutputResourceKinesisStreamsOutputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceKinesisStreamsOutputOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisStreamsOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputOutput() ApplicationOutputResourceKinesisStreamsOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Background())
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationOutputResourceKinesisStreamsOutput) *ApplicationOutputResourceKinesisStreamsOutput {
		return &v
	}).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceKinesisStreamsOutput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

type ApplicationOutputResourceKinesisStreamsOutputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) Elem() ApplicationOutputResourceKinesisStreamsOutputOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisStreamsOutput) ApplicationOutputResourceKinesisStreamsOutput {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceKinesisStreamsOutput
		return ret
	}).(ApplicationOutputResourceKinesisStreamsOutputOutput)
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisStreamsOutput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceLambdaOutput struct {
	ResourceArn string `pulumi:"resourceArn"`
}

// ApplicationOutputResourceLambdaOutputInput is an input type that accepts ApplicationOutputResourceLambdaOutputArgs and ApplicationOutputResourceLambdaOutputOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceLambdaOutputInput` via:
//
//	ApplicationOutputResourceLambdaOutputArgs{...}
type ApplicationOutputResourceLambdaOutputInput interface {
	pulumi.Input

	ToApplicationOutputResourceLambdaOutputOutput() ApplicationOutputResourceLambdaOutputOutput
	ToApplicationOutputResourceLambdaOutputOutputWithContext(context.Context) ApplicationOutputResourceLambdaOutputOutput
}

type ApplicationOutputResourceLambdaOutputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
}

func (ApplicationOutputResourceLambdaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputOutput() ApplicationOutputResourceLambdaOutputOutput {
	return i.ToApplicationOutputResourceLambdaOutputOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceLambdaOutputOutput)
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[ApplicationOutputResourceLambdaOutput]{
		OutputState: i.ToApplicationOutputResourceLambdaOutputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return i.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceLambdaOutputOutput).ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx)
}

// ApplicationOutputResourceLambdaOutputPtrInput is an input type that accepts ApplicationOutputResourceLambdaOutputArgs, ApplicationOutputResourceLambdaOutputPtr and ApplicationOutputResourceLambdaOutputPtrOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceLambdaOutputPtrInput` via:
//
//	        ApplicationOutputResourceLambdaOutputArgs{...}
//
//	or:
//
//	        nil
type ApplicationOutputResourceLambdaOutputPtrInput interface {
	pulumi.Input

	ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput
	ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Context) ApplicationOutputResourceLambdaOutputPtrOutput
}

type applicationOutputResourceLambdaOutputPtrType ApplicationOutputResourceLambdaOutputArgs

func ApplicationOutputResourceLambdaOutputPtr(v *ApplicationOutputResourceLambdaOutputArgs) ApplicationOutputResourceLambdaOutputPtrInput {
	return (*applicationOutputResourceLambdaOutputPtrType)(v)
}

func (*applicationOutputResourceLambdaOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (i *applicationOutputResourceLambdaOutputPtrType) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return i.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Background())
}

func (i *applicationOutputResourceLambdaOutputPtrType) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (i *applicationOutputResourceLambdaOutputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[*ApplicationOutputResourceLambdaOutput]{
		OutputState: i.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceLambdaOutputOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceLambdaOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputOutput() ApplicationOutputResourceLambdaOutputOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Background())
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationOutputResourceLambdaOutput) *ApplicationOutputResourceLambdaOutput {
		return &v
	}).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[ApplicationOutputResourceLambdaOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceLambdaOutputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceLambdaOutput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

type ApplicationOutputResourceLambdaOutputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceLambdaOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[*ApplicationOutputResourceLambdaOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) Elem() ApplicationOutputResourceLambdaOutputOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceLambdaOutput) ApplicationOutputResourceLambdaOutput {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceLambdaOutput
		return ret
	}).(ApplicationOutputResourceLambdaOutputOutput)
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceLambdaOutput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceOutputType struct {
	DestinationSchema     ApplicationOutputResourceDestinationSchema      `pulumi:"destinationSchema"`
	KinesisFirehoseOutput *ApplicationOutputResourceKinesisFirehoseOutput `pulumi:"kinesisFirehoseOutput"`
	KinesisStreamsOutput  *ApplicationOutputResourceKinesisStreamsOutput  `pulumi:"kinesisStreamsOutput"`
	LambdaOutput          *ApplicationOutputResourceLambdaOutput          `pulumi:"lambdaOutput"`
	Name                  *string                                         `pulumi:"name"`
}

// ApplicationOutputResourceOutputTypeInput is an input type that accepts ApplicationOutputResourceOutputTypeArgs and ApplicationOutputResourceOutputTypeOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceOutputTypeInput` via:
//
//	ApplicationOutputResourceOutputTypeArgs{...}
type ApplicationOutputResourceOutputTypeInput interface {
	pulumi.Input

	ToApplicationOutputResourceOutputTypeOutput() ApplicationOutputResourceOutputTypeOutput
	ToApplicationOutputResourceOutputTypeOutputWithContext(context.Context) ApplicationOutputResourceOutputTypeOutput
}

type ApplicationOutputResourceOutputTypeArgs struct {
	DestinationSchema     ApplicationOutputResourceDestinationSchemaInput        `pulumi:"destinationSchema"`
	KinesisFirehoseOutput ApplicationOutputResourceKinesisFirehoseOutputPtrInput `pulumi:"kinesisFirehoseOutput"`
	KinesisStreamsOutput  ApplicationOutputResourceKinesisStreamsOutputPtrInput  `pulumi:"kinesisStreamsOutput"`
	LambdaOutput          ApplicationOutputResourceLambdaOutputPtrInput          `pulumi:"lambdaOutput"`
	Name                  pulumi.StringPtrInput                                  `pulumi:"name"`
}

func (ApplicationOutputResourceOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceOutputType)(nil)).Elem()
}

func (i ApplicationOutputResourceOutputTypeArgs) ToApplicationOutputResourceOutputTypeOutput() ApplicationOutputResourceOutputTypeOutput {
	return i.ToApplicationOutputResourceOutputTypeOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceOutputTypeArgs) ToApplicationOutputResourceOutputTypeOutputWithContext(ctx context.Context) ApplicationOutputResourceOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceOutputTypeOutput)
}

func (i ApplicationOutputResourceOutputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceOutputType] {
	return pulumix.Output[ApplicationOutputResourceOutputType]{
		OutputState: i.ToApplicationOutputResourceOutputTypeOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceOutputTypeOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceOutputType)(nil)).Elem()
}

func (o ApplicationOutputResourceOutputTypeOutput) ToApplicationOutputResourceOutputTypeOutput() ApplicationOutputResourceOutputTypeOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypeOutput) ToApplicationOutputResourceOutputTypeOutputWithContext(ctx context.Context) ApplicationOutputResourceOutputTypeOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceOutputType] {
	return pulumix.Output[ApplicationOutputResourceOutputType]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceOutputTypeOutput) DestinationSchema() ApplicationOutputResourceDestinationSchemaOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) ApplicationOutputResourceDestinationSchema {
		return v.DestinationSchema
	}).(ApplicationOutputResourceDestinationSchemaOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) KinesisFirehoseOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisFirehoseOutput {
		return v.KinesisFirehoseOutput
	}).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) KinesisStreamsOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisStreamsOutput {
		return v.KinesisStreamsOutput
	}).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) LambdaOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *ApplicationOutputResourceLambdaOutput {
		return v.LambdaOutput
	}).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceOutputTypePtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceOutputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceOutputType)(nil)).Elem()
}

func (o ApplicationOutputResourceOutputTypePtrOutput) ToApplicationOutputResourceOutputTypePtrOutput() ApplicationOutputResourceOutputTypePtrOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypePtrOutput) ToApplicationOutputResourceOutputTypePtrOutputWithContext(ctx context.Context) ApplicationOutputResourceOutputTypePtrOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceOutputType] {
	return pulumix.Output[*ApplicationOutputResourceOutputType]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceOutputTypePtrOutput) Elem() ApplicationOutputResourceOutputTypeOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) ApplicationOutputResourceOutputType {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceOutputType
		return ret
	}).(ApplicationOutputResourceOutputTypeOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) DestinationSchema() ApplicationOutputResourceDestinationSchemaPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceDestinationSchema {
		if v == nil {
			return nil
		}
		return &v.DestinationSchema
	}).(ApplicationOutputResourceDestinationSchemaPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) KinesisFirehoseOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisFirehoseOutput {
		if v == nil {
			return nil
		}
		return v.KinesisFirehoseOutput
	}).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) KinesisStreamsOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisStreamsOutput {
		if v == nil {
			return nil
		}
		return v.KinesisStreamsOutput
	}).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) LambdaOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceLambdaOutput {
		if v == nil {
			return nil
		}
		return v.LambdaOutput
	}).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously. For more information about parallelism, see Parallel Execution in the Apache Flink Documentation
type ApplicationParallelismConfiguration struct {
	// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
	AutoScalingEnabled *bool `pulumi:"autoScalingEnabled"`
	// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
	ConfigurationType ApplicationParallelismConfigurationConfigurationType `pulumi:"configurationType"`
	// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration:AutoScalingEnabled is set to true.
	Parallelism *int `pulumi:"parallelism"`
	// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
	ParallelismPerKpu *int `pulumi:"parallelismPerKpu"`
}

// ApplicationParallelismConfigurationInput is an input type that accepts ApplicationParallelismConfigurationArgs and ApplicationParallelismConfigurationOutput values.
// You can construct a concrete instance of `ApplicationParallelismConfigurationInput` via:
//
//	ApplicationParallelismConfigurationArgs{...}
type ApplicationParallelismConfigurationInput interface {
	pulumi.Input

	ToApplicationParallelismConfigurationOutput() ApplicationParallelismConfigurationOutput
	ToApplicationParallelismConfigurationOutputWithContext(context.Context) ApplicationParallelismConfigurationOutput
}

// Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously. For more information about parallelism, see Parallel Execution in the Apache Flink Documentation
type ApplicationParallelismConfigurationArgs struct {
	// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
	AutoScalingEnabled pulumi.BoolPtrInput `pulumi:"autoScalingEnabled"`
	// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
	ConfigurationType ApplicationParallelismConfigurationConfigurationTypeInput `pulumi:"configurationType"`
	// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration:AutoScalingEnabled is set to true.
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
	ParallelismPerKpu pulumi.IntPtrInput `pulumi:"parallelismPerKpu"`
}

func (ApplicationParallelismConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationParallelismConfiguration)(nil)).Elem()
}

func (i ApplicationParallelismConfigurationArgs) ToApplicationParallelismConfigurationOutput() ApplicationParallelismConfigurationOutput {
	return i.ToApplicationParallelismConfigurationOutputWithContext(context.Background())
}

func (i ApplicationParallelismConfigurationArgs) ToApplicationParallelismConfigurationOutputWithContext(ctx context.Context) ApplicationParallelismConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParallelismConfigurationOutput)
}

func (i ApplicationParallelismConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationParallelismConfiguration] {
	return pulumix.Output[ApplicationParallelismConfiguration]{
		OutputState: i.ToApplicationParallelismConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationParallelismConfigurationArgs) ToApplicationParallelismConfigurationPtrOutput() ApplicationParallelismConfigurationPtrOutput {
	return i.ToApplicationParallelismConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationParallelismConfigurationArgs) ToApplicationParallelismConfigurationPtrOutputWithContext(ctx context.Context) ApplicationParallelismConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParallelismConfigurationOutput).ToApplicationParallelismConfigurationPtrOutputWithContext(ctx)
}

// ApplicationParallelismConfigurationPtrInput is an input type that accepts ApplicationParallelismConfigurationArgs, ApplicationParallelismConfigurationPtr and ApplicationParallelismConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationParallelismConfigurationPtrInput` via:
//
//	        ApplicationParallelismConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationParallelismConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationParallelismConfigurationPtrOutput() ApplicationParallelismConfigurationPtrOutput
	ToApplicationParallelismConfigurationPtrOutputWithContext(context.Context) ApplicationParallelismConfigurationPtrOutput
}

type applicationParallelismConfigurationPtrType ApplicationParallelismConfigurationArgs

func ApplicationParallelismConfigurationPtr(v *ApplicationParallelismConfigurationArgs) ApplicationParallelismConfigurationPtrInput {
	return (*applicationParallelismConfigurationPtrType)(v)
}

func (*applicationParallelismConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationParallelismConfiguration)(nil)).Elem()
}

func (i *applicationParallelismConfigurationPtrType) ToApplicationParallelismConfigurationPtrOutput() ApplicationParallelismConfigurationPtrOutput {
	return i.ToApplicationParallelismConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationParallelismConfigurationPtrType) ToApplicationParallelismConfigurationPtrOutputWithContext(ctx context.Context) ApplicationParallelismConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParallelismConfigurationPtrOutput)
}

func (i *applicationParallelismConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationParallelismConfiguration] {
	return pulumix.Output[*ApplicationParallelismConfiguration]{
		OutputState: i.ToApplicationParallelismConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously. For more information about parallelism, see Parallel Execution in the Apache Flink Documentation
type ApplicationParallelismConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationParallelismConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationParallelismConfiguration)(nil)).Elem()
}

func (o ApplicationParallelismConfigurationOutput) ToApplicationParallelismConfigurationOutput() ApplicationParallelismConfigurationOutput {
	return o
}

func (o ApplicationParallelismConfigurationOutput) ToApplicationParallelismConfigurationOutputWithContext(ctx context.Context) ApplicationParallelismConfigurationOutput {
	return o
}

func (o ApplicationParallelismConfigurationOutput) ToApplicationParallelismConfigurationPtrOutput() ApplicationParallelismConfigurationPtrOutput {
	return o.ToApplicationParallelismConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationParallelismConfigurationOutput) ToApplicationParallelismConfigurationPtrOutputWithContext(ctx context.Context) ApplicationParallelismConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationParallelismConfiguration) *ApplicationParallelismConfiguration {
		return &v
	}).(ApplicationParallelismConfigurationPtrOutput)
}

func (o ApplicationParallelismConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationParallelismConfiguration] {
	return pulumix.Output[ApplicationParallelismConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
func (o ApplicationParallelismConfigurationOutput) AutoScalingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationParallelismConfiguration) *bool { return v.AutoScalingEnabled }).(pulumi.BoolPtrOutput)
}

// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
func (o ApplicationParallelismConfigurationOutput) ConfigurationType() ApplicationParallelismConfigurationConfigurationTypeOutput {
	return o.ApplyT(func(v ApplicationParallelismConfiguration) ApplicationParallelismConfigurationConfigurationType {
		return v.ConfigurationType
	}).(ApplicationParallelismConfigurationConfigurationTypeOutput)
}

// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration:AutoScalingEnabled is set to true.
func (o ApplicationParallelismConfigurationOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationParallelismConfiguration) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
func (o ApplicationParallelismConfigurationOutput) ParallelismPerKpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationParallelismConfiguration) *int { return v.ParallelismPerKpu }).(pulumi.IntPtrOutput)
}

type ApplicationParallelismConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationParallelismConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationParallelismConfiguration)(nil)).Elem()
}

func (o ApplicationParallelismConfigurationPtrOutput) ToApplicationParallelismConfigurationPtrOutput() ApplicationParallelismConfigurationPtrOutput {
	return o
}

func (o ApplicationParallelismConfigurationPtrOutput) ToApplicationParallelismConfigurationPtrOutputWithContext(ctx context.Context) ApplicationParallelismConfigurationPtrOutput {
	return o
}

func (o ApplicationParallelismConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationParallelismConfiguration] {
	return pulumix.Output[*ApplicationParallelismConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationParallelismConfigurationPtrOutput) Elem() ApplicationParallelismConfigurationOutput {
	return o.ApplyT(func(v *ApplicationParallelismConfiguration) ApplicationParallelismConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationParallelismConfiguration
		return ret
	}).(ApplicationParallelismConfigurationOutput)
}

// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
func (o ApplicationParallelismConfigurationPtrOutput) AutoScalingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationParallelismConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AutoScalingEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
func (o ApplicationParallelismConfigurationPtrOutput) ConfigurationType() ApplicationParallelismConfigurationConfigurationTypePtrOutput {
	return o.ApplyT(func(v *ApplicationParallelismConfiguration) *ApplicationParallelismConfigurationConfigurationType {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(ApplicationParallelismConfigurationConfigurationTypePtrOutput)
}

// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration:AutoScalingEnabled is set to true.
func (o ApplicationParallelismConfigurationPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationParallelismConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
func (o ApplicationParallelismConfigurationPtrOutput) ParallelismPerKpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationParallelismConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ParallelismPerKpu
	}).(pulumi.IntPtrOutput)
}

// Property key-value pairs passed into an application.
type ApplicationPropertyGroup struct {
	// Describes the key of an application execution property key-value pair.
	PropertyGroupId *string `pulumi:"propertyGroupId"`
	// Describes the value of an application execution property key-value pair.
	PropertyMap interface{} `pulumi:"propertyMap"`
}

// ApplicationPropertyGroupInput is an input type that accepts ApplicationPropertyGroupArgs and ApplicationPropertyGroupOutput values.
// You can construct a concrete instance of `ApplicationPropertyGroupInput` via:
//
//	ApplicationPropertyGroupArgs{...}
type ApplicationPropertyGroupInput interface {
	pulumi.Input

	ToApplicationPropertyGroupOutput() ApplicationPropertyGroupOutput
	ToApplicationPropertyGroupOutputWithContext(context.Context) ApplicationPropertyGroupOutput
}

// Property key-value pairs passed into an application.
type ApplicationPropertyGroupArgs struct {
	// Describes the key of an application execution property key-value pair.
	PropertyGroupId pulumi.StringPtrInput `pulumi:"propertyGroupId"`
	// Describes the value of an application execution property key-value pair.
	PropertyMap pulumi.Input `pulumi:"propertyMap"`
}

func (ApplicationPropertyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPropertyGroup)(nil)).Elem()
}

func (i ApplicationPropertyGroupArgs) ToApplicationPropertyGroupOutput() ApplicationPropertyGroupOutput {
	return i.ToApplicationPropertyGroupOutputWithContext(context.Background())
}

func (i ApplicationPropertyGroupArgs) ToApplicationPropertyGroupOutputWithContext(ctx context.Context) ApplicationPropertyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPropertyGroupOutput)
}

func (i ApplicationPropertyGroupArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationPropertyGroup] {
	return pulumix.Output[ApplicationPropertyGroup]{
		OutputState: i.ToApplicationPropertyGroupOutputWithContext(ctx).OutputState,
	}
}

// ApplicationPropertyGroupArrayInput is an input type that accepts ApplicationPropertyGroupArray and ApplicationPropertyGroupArrayOutput values.
// You can construct a concrete instance of `ApplicationPropertyGroupArrayInput` via:
//
//	ApplicationPropertyGroupArray{ ApplicationPropertyGroupArgs{...} }
type ApplicationPropertyGroupArrayInput interface {
	pulumi.Input

	ToApplicationPropertyGroupArrayOutput() ApplicationPropertyGroupArrayOutput
	ToApplicationPropertyGroupArrayOutputWithContext(context.Context) ApplicationPropertyGroupArrayOutput
}

type ApplicationPropertyGroupArray []ApplicationPropertyGroupInput

func (ApplicationPropertyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPropertyGroup)(nil)).Elem()
}

func (i ApplicationPropertyGroupArray) ToApplicationPropertyGroupArrayOutput() ApplicationPropertyGroupArrayOutput {
	return i.ToApplicationPropertyGroupArrayOutputWithContext(context.Background())
}

func (i ApplicationPropertyGroupArray) ToApplicationPropertyGroupArrayOutputWithContext(ctx context.Context) ApplicationPropertyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPropertyGroupArrayOutput)
}

func (i ApplicationPropertyGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationPropertyGroup] {
	return pulumix.Output[[]ApplicationPropertyGroup]{
		OutputState: i.ToApplicationPropertyGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// Property key-value pairs passed into an application.
type ApplicationPropertyGroupOutput struct{ *pulumi.OutputState }

func (ApplicationPropertyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPropertyGroup)(nil)).Elem()
}

func (o ApplicationPropertyGroupOutput) ToApplicationPropertyGroupOutput() ApplicationPropertyGroupOutput {
	return o
}

func (o ApplicationPropertyGroupOutput) ToApplicationPropertyGroupOutputWithContext(ctx context.Context) ApplicationPropertyGroupOutput {
	return o
}

func (o ApplicationPropertyGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationPropertyGroup] {
	return pulumix.Output[ApplicationPropertyGroup]{
		OutputState: o.OutputState,
	}
}

// Describes the key of an application execution property key-value pair.
func (o ApplicationPropertyGroupOutput) PropertyGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPropertyGroup) *string { return v.PropertyGroupId }).(pulumi.StringPtrOutput)
}

// Describes the value of an application execution property key-value pair.
func (o ApplicationPropertyGroupOutput) PropertyMap() pulumi.AnyOutput {
	return o.ApplyT(func(v ApplicationPropertyGroup) interface{} { return v.PropertyMap }).(pulumi.AnyOutput)
}

type ApplicationPropertyGroupArrayOutput struct{ *pulumi.OutputState }

func (ApplicationPropertyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPropertyGroup)(nil)).Elem()
}

func (o ApplicationPropertyGroupArrayOutput) ToApplicationPropertyGroupArrayOutput() ApplicationPropertyGroupArrayOutput {
	return o
}

func (o ApplicationPropertyGroupArrayOutput) ToApplicationPropertyGroupArrayOutputWithContext(ctx context.Context) ApplicationPropertyGroupArrayOutput {
	return o
}

func (o ApplicationPropertyGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationPropertyGroup] {
	return pulumix.Output[[]ApplicationPropertyGroup]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationPropertyGroupArrayOutput) Index(i pulumi.IntInput) ApplicationPropertyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationPropertyGroup {
		return vs[0].([]ApplicationPropertyGroup)[vs[1].(int)]
	}).(ApplicationPropertyGroupOutput)
}

// For a SQL-based Kinesis Data Analytics application, describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
// Also used to describe the format of the reference data source.
type ApplicationRecordColumn struct {
	// A reference to the data element in the streaming input or the reference data source.
	Mapping *string `pulumi:"mapping"`
	// The name of the column that is created in the in-application input stream or reference table.
	Name string `pulumi:"name"`
	// The type of column created in the in-application input stream or reference table.
	SqlType string `pulumi:"sqlType"`
}

// ApplicationRecordColumnInput is an input type that accepts ApplicationRecordColumnArgs and ApplicationRecordColumnOutput values.
// You can construct a concrete instance of `ApplicationRecordColumnInput` via:
//
//	ApplicationRecordColumnArgs{...}
type ApplicationRecordColumnInput interface {
	pulumi.Input

	ToApplicationRecordColumnOutput() ApplicationRecordColumnOutput
	ToApplicationRecordColumnOutputWithContext(context.Context) ApplicationRecordColumnOutput
}

// For a SQL-based Kinesis Data Analytics application, describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
// Also used to describe the format of the reference data source.
type ApplicationRecordColumnArgs struct {
	// A reference to the data element in the streaming input or the reference data source.
	Mapping pulumi.StringPtrInput `pulumi:"mapping"`
	// The name of the column that is created in the in-application input stream or reference table.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of column created in the in-application input stream or reference table.
	SqlType pulumi.StringInput `pulumi:"sqlType"`
}

func (ApplicationRecordColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordColumn)(nil)).Elem()
}

func (i ApplicationRecordColumnArgs) ToApplicationRecordColumnOutput() ApplicationRecordColumnOutput {
	return i.ToApplicationRecordColumnOutputWithContext(context.Background())
}

func (i ApplicationRecordColumnArgs) ToApplicationRecordColumnOutputWithContext(ctx context.Context) ApplicationRecordColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRecordColumnOutput)
}

func (i ApplicationRecordColumnArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordColumn] {
	return pulumix.Output[ApplicationRecordColumn]{
		OutputState: i.ToApplicationRecordColumnOutputWithContext(ctx).OutputState,
	}
}

// ApplicationRecordColumnArrayInput is an input type that accepts ApplicationRecordColumnArray and ApplicationRecordColumnArrayOutput values.
// You can construct a concrete instance of `ApplicationRecordColumnArrayInput` via:
//
//	ApplicationRecordColumnArray{ ApplicationRecordColumnArgs{...} }
type ApplicationRecordColumnArrayInput interface {
	pulumi.Input

	ToApplicationRecordColumnArrayOutput() ApplicationRecordColumnArrayOutput
	ToApplicationRecordColumnArrayOutputWithContext(context.Context) ApplicationRecordColumnArrayOutput
}

type ApplicationRecordColumnArray []ApplicationRecordColumnInput

func (ApplicationRecordColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRecordColumn)(nil)).Elem()
}

func (i ApplicationRecordColumnArray) ToApplicationRecordColumnArrayOutput() ApplicationRecordColumnArrayOutput {
	return i.ToApplicationRecordColumnArrayOutputWithContext(context.Background())
}

func (i ApplicationRecordColumnArray) ToApplicationRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationRecordColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRecordColumnArrayOutput)
}

func (i ApplicationRecordColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationRecordColumn] {
	return pulumix.Output[[]ApplicationRecordColumn]{
		OutputState: i.ToApplicationRecordColumnArrayOutputWithContext(ctx).OutputState,
	}
}

// For a SQL-based Kinesis Data Analytics application, describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
// Also used to describe the format of the reference data source.
type ApplicationRecordColumnOutput struct{ *pulumi.OutputState }

func (ApplicationRecordColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordColumn)(nil)).Elem()
}

func (o ApplicationRecordColumnOutput) ToApplicationRecordColumnOutput() ApplicationRecordColumnOutput {
	return o
}

func (o ApplicationRecordColumnOutput) ToApplicationRecordColumnOutputWithContext(ctx context.Context) ApplicationRecordColumnOutput {
	return o
}

func (o ApplicationRecordColumnOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordColumn] {
	return pulumix.Output[ApplicationRecordColumn]{
		OutputState: o.OutputState,
	}
}

// A reference to the data element in the streaming input or the reference data source.
func (o ApplicationRecordColumnOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationRecordColumn) *string { return v.Mapping }).(pulumi.StringPtrOutput)
}

// The name of the column that is created in the in-application input stream or reference table.
func (o ApplicationRecordColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRecordColumn) string { return v.Name }).(pulumi.StringOutput)
}

// The type of column created in the in-application input stream or reference table.
func (o ApplicationRecordColumnOutput) SqlType() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRecordColumn) string { return v.SqlType }).(pulumi.StringOutput)
}

type ApplicationRecordColumnArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRecordColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRecordColumn)(nil)).Elem()
}

func (o ApplicationRecordColumnArrayOutput) ToApplicationRecordColumnArrayOutput() ApplicationRecordColumnArrayOutput {
	return o
}

func (o ApplicationRecordColumnArrayOutput) ToApplicationRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationRecordColumnArrayOutput {
	return o
}

func (o ApplicationRecordColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationRecordColumn] {
	return pulumix.Output[[]ApplicationRecordColumn]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationRecordColumnArrayOutput) Index(i pulumi.IntInput) ApplicationRecordColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRecordColumn {
		return vs[0].([]ApplicationRecordColumn)[vs[1].(int)]
	}).(ApplicationRecordColumnOutput)
}

// For a SQL-based Kinesis Data Analytics application, describes the record format and relevant mapping information that should be applied to schematize the records on the stream.
type ApplicationRecordFormat struct {
	// When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
	MappingParameters *ApplicationMappingParameters `pulumi:"mappingParameters"`
	// The type of record format.
	RecordFormatType ApplicationRecordFormatRecordFormatType `pulumi:"recordFormatType"`
}

// ApplicationRecordFormatInput is an input type that accepts ApplicationRecordFormatArgs and ApplicationRecordFormatOutput values.
// You can construct a concrete instance of `ApplicationRecordFormatInput` via:
//
//	ApplicationRecordFormatArgs{...}
type ApplicationRecordFormatInput interface {
	pulumi.Input

	ToApplicationRecordFormatOutput() ApplicationRecordFormatOutput
	ToApplicationRecordFormatOutputWithContext(context.Context) ApplicationRecordFormatOutput
}

// For a SQL-based Kinesis Data Analytics application, describes the record format and relevant mapping information that should be applied to schematize the records on the stream.
type ApplicationRecordFormatArgs struct {
	// When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
	MappingParameters ApplicationMappingParametersPtrInput `pulumi:"mappingParameters"`
	// The type of record format.
	RecordFormatType ApplicationRecordFormatRecordFormatTypeInput `pulumi:"recordFormatType"`
}

func (ApplicationRecordFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordFormat)(nil)).Elem()
}

func (i ApplicationRecordFormatArgs) ToApplicationRecordFormatOutput() ApplicationRecordFormatOutput {
	return i.ToApplicationRecordFormatOutputWithContext(context.Background())
}

func (i ApplicationRecordFormatArgs) ToApplicationRecordFormatOutputWithContext(ctx context.Context) ApplicationRecordFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRecordFormatOutput)
}

func (i ApplicationRecordFormatArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordFormat] {
	return pulumix.Output[ApplicationRecordFormat]{
		OutputState: i.ToApplicationRecordFormatOutputWithContext(ctx).OutputState,
	}
}

// For a SQL-based Kinesis Data Analytics application, describes the record format and relevant mapping information that should be applied to schematize the records on the stream.
type ApplicationRecordFormatOutput struct{ *pulumi.OutputState }

func (ApplicationRecordFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordFormat)(nil)).Elem()
}

func (o ApplicationRecordFormatOutput) ToApplicationRecordFormatOutput() ApplicationRecordFormatOutput {
	return o
}

func (o ApplicationRecordFormatOutput) ToApplicationRecordFormatOutputWithContext(ctx context.Context) ApplicationRecordFormatOutput {
	return o
}

func (o ApplicationRecordFormatOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordFormat] {
	return pulumix.Output[ApplicationRecordFormat]{
		OutputState: o.OutputState,
	}
}

// When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
func (o ApplicationRecordFormatOutput) MappingParameters() ApplicationMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationRecordFormat) *ApplicationMappingParameters { return v.MappingParameters }).(ApplicationMappingParametersPtrOutput)
}

// The type of record format.
func (o ApplicationRecordFormatOutput) RecordFormatType() ApplicationRecordFormatRecordFormatTypeOutput {
	return o.ApplyT(func(v ApplicationRecordFormat) ApplicationRecordFormatRecordFormatType { return v.RecordFormatType }).(ApplicationRecordFormatRecordFormatTypeOutput)
}

type ApplicationReferenceDataSourceCsvMappingParameters struct {
	RecordColumnDelimiter string `pulumi:"recordColumnDelimiter"`
	RecordRowDelimiter    string `pulumi:"recordRowDelimiter"`
}

// ApplicationReferenceDataSourceCsvMappingParametersInput is an input type that accepts ApplicationReferenceDataSourceCsvMappingParametersArgs and ApplicationReferenceDataSourceCsvMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceCsvMappingParametersInput` via:
//
//	ApplicationReferenceDataSourceCsvMappingParametersArgs{...}
type ApplicationReferenceDataSourceCsvMappingParametersInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceCsvMappingParametersOutput() ApplicationReferenceDataSourceCsvMappingParametersOutput
	ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(context.Context) ApplicationReferenceDataSourceCsvMappingParametersOutput
}

type ApplicationReferenceDataSourceCsvMappingParametersArgs struct {
	RecordColumnDelimiter pulumi.StringInput `pulumi:"recordColumnDelimiter"`
	RecordRowDelimiter    pulumi.StringInput `pulumi:"recordRowDelimiter"`
}

func (ApplicationReferenceDataSourceCsvMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersOutput() ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return i.ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceCsvMappingParametersOutput)
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceCsvMappingParametersOutput).ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceCsvMappingParametersPtrInput is an input type that accepts ApplicationReferenceDataSourceCsvMappingParametersArgs, ApplicationReferenceDataSourceCsvMappingParametersPtr and ApplicationReferenceDataSourceCsvMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceCsvMappingParametersPtrInput` via:
//
//	        ApplicationReferenceDataSourceCsvMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceCsvMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput
	ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput
}

type applicationReferenceDataSourceCsvMappingParametersPtrType ApplicationReferenceDataSourceCsvMappingParametersArgs

func ApplicationReferenceDataSourceCsvMappingParametersPtr(v *ApplicationReferenceDataSourceCsvMappingParametersArgs) ApplicationReferenceDataSourceCsvMappingParametersPtrInput {
	return (*applicationReferenceDataSourceCsvMappingParametersPtrType)(v)
}

func (*applicationReferenceDataSourceCsvMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (i *applicationReferenceDataSourceCsvMappingParametersPtrType) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceCsvMappingParametersPtrType) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (i *applicationReferenceDataSourceCsvMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceCsvMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceCsvMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersOutput() ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceCsvMappingParameters) *ApplicationReferenceDataSourceCsvMappingParameters {
		return &v
	}).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) RecordColumnDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceCsvMappingParameters) string { return v.RecordColumnDelimiter }).(pulumi.StringOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) RecordRowDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceCsvMappingParameters) string { return v.RecordRowDelimiter }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceCsvMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) Elem() ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceCsvMappingParameters) ApplicationReferenceDataSourceCsvMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceCsvMappingParameters
		return ret
	}).(ApplicationReferenceDataSourceCsvMappingParametersOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) RecordColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordColumnDelimiter
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) RecordRowDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowDelimiter
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceJsonMappingParameters struct {
	RecordRowPath string `pulumi:"recordRowPath"`
}

// ApplicationReferenceDataSourceJsonMappingParametersInput is an input type that accepts ApplicationReferenceDataSourceJsonMappingParametersArgs and ApplicationReferenceDataSourceJsonMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceJsonMappingParametersInput` via:
//
//	ApplicationReferenceDataSourceJsonMappingParametersArgs{...}
type ApplicationReferenceDataSourceJsonMappingParametersInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceJsonMappingParametersOutput() ApplicationReferenceDataSourceJsonMappingParametersOutput
	ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(context.Context) ApplicationReferenceDataSourceJsonMappingParametersOutput
}

type ApplicationReferenceDataSourceJsonMappingParametersArgs struct {
	RecordRowPath pulumi.StringInput `pulumi:"recordRowPath"`
}

func (ApplicationReferenceDataSourceJsonMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersOutput() ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return i.ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceJsonMappingParametersOutput)
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceJsonMappingParametersOutput).ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceJsonMappingParametersPtrInput is an input type that accepts ApplicationReferenceDataSourceJsonMappingParametersArgs, ApplicationReferenceDataSourceJsonMappingParametersPtr and ApplicationReferenceDataSourceJsonMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceJsonMappingParametersPtrInput` via:
//
//	        ApplicationReferenceDataSourceJsonMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceJsonMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput
	ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput
}

type applicationReferenceDataSourceJsonMappingParametersPtrType ApplicationReferenceDataSourceJsonMappingParametersArgs

func ApplicationReferenceDataSourceJsonMappingParametersPtr(v *ApplicationReferenceDataSourceJsonMappingParametersArgs) ApplicationReferenceDataSourceJsonMappingParametersPtrInput {
	return (*applicationReferenceDataSourceJsonMappingParametersPtrType)(v)
}

func (*applicationReferenceDataSourceJsonMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (i *applicationReferenceDataSourceJsonMappingParametersPtrType) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceJsonMappingParametersPtrType) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

func (i *applicationReferenceDataSourceJsonMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceJsonMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceJsonMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersOutput() ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceJsonMappingParameters) *ApplicationReferenceDataSourceJsonMappingParameters {
		return &v
	}).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) RecordRowPath() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceJsonMappingParameters) string { return v.RecordRowPath }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceJsonMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) Elem() ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceJsonMappingParameters) ApplicationReferenceDataSourceJsonMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceJsonMappingParameters
		return ret
	}).(ApplicationReferenceDataSourceJsonMappingParametersOutput)
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) RecordRowPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceJsonMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowPath
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceMappingParameters struct {
	CsvMappingParameters  *ApplicationReferenceDataSourceCsvMappingParameters  `pulumi:"csvMappingParameters"`
	JsonMappingParameters *ApplicationReferenceDataSourceJsonMappingParameters `pulumi:"jsonMappingParameters"`
}

// ApplicationReferenceDataSourceMappingParametersInput is an input type that accepts ApplicationReferenceDataSourceMappingParametersArgs and ApplicationReferenceDataSourceMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceMappingParametersInput` via:
//
//	ApplicationReferenceDataSourceMappingParametersArgs{...}
type ApplicationReferenceDataSourceMappingParametersInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceMappingParametersOutput() ApplicationReferenceDataSourceMappingParametersOutput
	ToApplicationReferenceDataSourceMappingParametersOutputWithContext(context.Context) ApplicationReferenceDataSourceMappingParametersOutput
}

type ApplicationReferenceDataSourceMappingParametersArgs struct {
	CsvMappingParameters  ApplicationReferenceDataSourceCsvMappingParametersPtrInput  `pulumi:"csvMappingParameters"`
	JsonMappingParameters ApplicationReferenceDataSourceJsonMappingParametersPtrInput `pulumi:"jsonMappingParameters"`
}

func (ApplicationReferenceDataSourceMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersOutput() ApplicationReferenceDataSourceMappingParametersOutput {
	return i.ToApplicationReferenceDataSourceMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceMappingParametersOutput)
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceMappingParametersOutput).ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceMappingParametersPtrInput is an input type that accepts ApplicationReferenceDataSourceMappingParametersArgs, ApplicationReferenceDataSourceMappingParametersPtr and ApplicationReferenceDataSourceMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceMappingParametersPtrInput` via:
//
//	        ApplicationReferenceDataSourceMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput
	ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput
}

type applicationReferenceDataSourceMappingParametersPtrType ApplicationReferenceDataSourceMappingParametersArgs

func ApplicationReferenceDataSourceMappingParametersPtr(v *ApplicationReferenceDataSourceMappingParametersArgs) ApplicationReferenceDataSourceMappingParametersPtrInput {
	return (*applicationReferenceDataSourceMappingParametersPtrType)(v)
}

func (*applicationReferenceDataSourceMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (i *applicationReferenceDataSourceMappingParametersPtrType) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceMappingParametersPtrType) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (i *applicationReferenceDataSourceMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersOutput() ApplicationReferenceDataSourceMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceMappingParameters {
		return &v
	}).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) CsvMappingParameters() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceCsvMappingParameters {
		return v.CsvMappingParameters
	}).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) JsonMappingParameters() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceJsonMappingParameters {
		return v.JsonMappingParameters
	}).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

type ApplicationReferenceDataSourceMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) Elem() ApplicationReferenceDataSourceMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceMappingParameters) ApplicationReferenceDataSourceMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceMappingParameters
		return ret
	}).(ApplicationReferenceDataSourceMappingParametersOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) CsvMappingParameters() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceCsvMappingParameters {
		if v == nil {
			return nil
		}
		return v.CsvMappingParameters
	}).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) JsonMappingParameters() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceJsonMappingParameters {
		if v == nil {
			return nil
		}
		return v.JsonMappingParameters
	}).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

type ApplicationReferenceDataSourceRecordColumn struct {
	Mapping *string `pulumi:"mapping"`
	Name    string  `pulumi:"name"`
	SqlType string  `pulumi:"sqlType"`
}

// ApplicationReferenceDataSourceRecordColumnInput is an input type that accepts ApplicationReferenceDataSourceRecordColumnArgs and ApplicationReferenceDataSourceRecordColumnOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceRecordColumnInput` via:
//
//	ApplicationReferenceDataSourceRecordColumnArgs{...}
type ApplicationReferenceDataSourceRecordColumnInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceRecordColumnOutput() ApplicationReferenceDataSourceRecordColumnOutput
	ToApplicationReferenceDataSourceRecordColumnOutputWithContext(context.Context) ApplicationReferenceDataSourceRecordColumnOutput
}

type ApplicationReferenceDataSourceRecordColumnArgs struct {
	Mapping pulumi.StringPtrInput `pulumi:"mapping"`
	Name    pulumi.StringInput    `pulumi:"name"`
	SqlType pulumi.StringInput    `pulumi:"sqlType"`
}

func (ApplicationReferenceDataSourceRecordColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceRecordColumnArgs) ToApplicationReferenceDataSourceRecordColumnOutput() ApplicationReferenceDataSourceRecordColumnOutput {
	return i.ToApplicationReferenceDataSourceRecordColumnOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceRecordColumnArgs) ToApplicationReferenceDataSourceRecordColumnOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceRecordColumnOutput)
}

func (i ApplicationReferenceDataSourceRecordColumnArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordColumn]{
		OutputState: i.ToApplicationReferenceDataSourceRecordColumnOutputWithContext(ctx).OutputState,
	}
}

// ApplicationReferenceDataSourceRecordColumnArrayInput is an input type that accepts ApplicationReferenceDataSourceRecordColumnArray and ApplicationReferenceDataSourceRecordColumnArrayOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceRecordColumnArrayInput` via:
//
//	ApplicationReferenceDataSourceRecordColumnArray{ ApplicationReferenceDataSourceRecordColumnArgs{...} }
type ApplicationReferenceDataSourceRecordColumnArrayInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceRecordColumnArrayOutput() ApplicationReferenceDataSourceRecordColumnArrayOutput
	ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(context.Context) ApplicationReferenceDataSourceRecordColumnArrayOutput
}

type ApplicationReferenceDataSourceRecordColumnArray []ApplicationReferenceDataSourceRecordColumnInput

func (ApplicationReferenceDataSourceRecordColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceRecordColumnArray) ToApplicationReferenceDataSourceRecordColumnArrayOutput() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return i.ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceRecordColumnArray) ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceRecordColumnArrayOutput)
}

func (i ApplicationReferenceDataSourceRecordColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn]{
		OutputState: i.ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceRecordColumnOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) ToApplicationReferenceDataSourceRecordColumnOutput() ApplicationReferenceDataSourceRecordColumnOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) ToApplicationReferenceDataSourceRecordColumnOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordColumn]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordColumn) *string { return v.Mapping }).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) SqlType() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordColumn) string { return v.SqlType }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceRecordColumnArrayOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) ToApplicationReferenceDataSourceRecordColumnArrayOutput() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) Index(i pulumi.IntInput) ApplicationReferenceDataSourceRecordColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationReferenceDataSourceRecordColumn {
		return vs[0].([]ApplicationReferenceDataSourceRecordColumn)[vs[1].(int)]
	}).(ApplicationReferenceDataSourceRecordColumnOutput)
}

type ApplicationReferenceDataSourceRecordFormat struct {
	MappingParameters *ApplicationReferenceDataSourceMappingParameters `pulumi:"mappingParameters"`
	RecordFormatType  string                                           `pulumi:"recordFormatType"`
}

// ApplicationReferenceDataSourceRecordFormatInput is an input type that accepts ApplicationReferenceDataSourceRecordFormatArgs and ApplicationReferenceDataSourceRecordFormatOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceRecordFormatInput` via:
//
//	ApplicationReferenceDataSourceRecordFormatArgs{...}
type ApplicationReferenceDataSourceRecordFormatInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceRecordFormatOutput() ApplicationReferenceDataSourceRecordFormatOutput
	ToApplicationReferenceDataSourceRecordFormatOutputWithContext(context.Context) ApplicationReferenceDataSourceRecordFormatOutput
}

type ApplicationReferenceDataSourceRecordFormatArgs struct {
	MappingParameters ApplicationReferenceDataSourceMappingParametersPtrInput `pulumi:"mappingParameters"`
	RecordFormatType  pulumi.StringInput                                      `pulumi:"recordFormatType"`
}

func (ApplicationReferenceDataSourceRecordFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordFormat)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceRecordFormatArgs) ToApplicationReferenceDataSourceRecordFormatOutput() ApplicationReferenceDataSourceRecordFormatOutput {
	return i.ToApplicationReferenceDataSourceRecordFormatOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceRecordFormatArgs) ToApplicationReferenceDataSourceRecordFormatOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceRecordFormatOutput)
}

func (i ApplicationReferenceDataSourceRecordFormatArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordFormat] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordFormat]{
		OutputState: i.ToApplicationReferenceDataSourceRecordFormatOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceRecordFormatOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordFormat)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) ToApplicationReferenceDataSourceRecordFormatOutput() ApplicationReferenceDataSourceRecordFormatOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) ToApplicationReferenceDataSourceRecordFormatOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordFormatOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordFormat] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordFormat]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) MappingParameters() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordFormat) *ApplicationReferenceDataSourceMappingParameters {
		return v.MappingParameters
	}).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) RecordFormatType() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordFormat) string { return v.RecordFormatType }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceRecordFormatPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceRecordFormat)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) ToApplicationReferenceDataSourceRecordFormatPtrOutput() ApplicationReferenceDataSourceRecordFormatPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) ToApplicationReferenceDataSourceRecordFormatPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordFormatPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceRecordFormat] {
	return pulumix.Output[*ApplicationReferenceDataSourceRecordFormat]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) Elem() ApplicationReferenceDataSourceRecordFormatOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceRecordFormat) ApplicationReferenceDataSourceRecordFormat {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceRecordFormat
		return ret
	}).(ApplicationReferenceDataSourceRecordFormatOutput)
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) MappingParameters() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceRecordFormat) *ApplicationReferenceDataSourceMappingParameters {
		if v == nil {
			return nil
		}
		return v.MappingParameters
	}).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) RecordFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceRecordFormat) *string {
		if v == nil {
			return nil
		}
		return &v.RecordFormatType
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceReferenceDataSource struct {
	ReferenceSchema       ApplicationReferenceDataSourceReferenceSchema        `pulumi:"referenceSchema"`
	S3ReferenceDataSource *ApplicationReferenceDataSourceS3ReferenceDataSource `pulumi:"s3ReferenceDataSource"`
	TableName             *string                                              `pulumi:"tableName"`
}

// ApplicationReferenceDataSourceReferenceDataSourceInput is an input type that accepts ApplicationReferenceDataSourceReferenceDataSourceArgs and ApplicationReferenceDataSourceReferenceDataSourceOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceReferenceDataSourceInput` via:
//
//	ApplicationReferenceDataSourceReferenceDataSourceArgs{...}
type ApplicationReferenceDataSourceReferenceDataSourceInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceReferenceDataSourceOutput() ApplicationReferenceDataSourceReferenceDataSourceOutput
	ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(context.Context) ApplicationReferenceDataSourceReferenceDataSourceOutput
}

type ApplicationReferenceDataSourceReferenceDataSourceArgs struct {
	ReferenceSchema       ApplicationReferenceDataSourceReferenceSchemaInput          `pulumi:"referenceSchema"`
	S3ReferenceDataSource ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput `pulumi:"s3ReferenceDataSource"`
	TableName             pulumi.StringPtrInput                                       `pulumi:"tableName"`
}

func (ApplicationReferenceDataSourceReferenceDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceDataSource)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceReferenceDataSourceArgs) ToApplicationReferenceDataSourceReferenceDataSourceOutput() ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return i.ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceReferenceDataSourceArgs) ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceReferenceDataSourceOutput)
}

func (i ApplicationReferenceDataSourceReferenceDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource]{
		OutputState: i.ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceReferenceDataSourceOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ToApplicationReferenceDataSourceReferenceDataSourceOutput() ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ReferenceSchema() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceDataSource) ApplicationReferenceDataSourceReferenceSchema {
		return v.ReferenceSchema
	}).(ApplicationReferenceDataSourceReferenceSchemaOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) S3ReferenceDataSource() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceDataSource) *ApplicationReferenceDataSourceS3ReferenceDataSource {
		return v.S3ReferenceDataSource
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceDataSource) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceReferenceDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceReferenceDataSource] {
	return pulumix.Output[*ApplicationReferenceDataSourceReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) Elem() ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) ApplicationReferenceDataSourceReferenceDataSource {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceReferenceDataSource
		return ret
	}).(ApplicationReferenceDataSourceReferenceDataSourceOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ReferenceSchema() ApplicationReferenceDataSourceReferenceSchemaPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) *ApplicationReferenceDataSourceReferenceSchema {
		if v == nil {
			return nil
		}
		return &v.ReferenceSchema
	}).(ApplicationReferenceDataSourceReferenceSchemaPtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) S3ReferenceDataSource() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) *ApplicationReferenceDataSourceS3ReferenceDataSource {
		if v == nil {
			return nil
		}
		return v.S3ReferenceDataSource
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceReferenceSchema struct {
	RecordColumns  []ApplicationReferenceDataSourceRecordColumn `pulumi:"recordColumns"`
	RecordEncoding *string                                      `pulumi:"recordEncoding"`
	RecordFormat   ApplicationReferenceDataSourceRecordFormat   `pulumi:"recordFormat"`
}

// ApplicationReferenceDataSourceReferenceSchemaInput is an input type that accepts ApplicationReferenceDataSourceReferenceSchemaArgs and ApplicationReferenceDataSourceReferenceSchemaOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceReferenceSchemaInput` via:
//
//	ApplicationReferenceDataSourceReferenceSchemaArgs{...}
type ApplicationReferenceDataSourceReferenceSchemaInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceReferenceSchemaOutput() ApplicationReferenceDataSourceReferenceSchemaOutput
	ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(context.Context) ApplicationReferenceDataSourceReferenceSchemaOutput
}

type ApplicationReferenceDataSourceReferenceSchemaArgs struct {
	RecordColumns  ApplicationReferenceDataSourceRecordColumnArrayInput `pulumi:"recordColumns"`
	RecordEncoding pulumi.StringPtrInput                                `pulumi:"recordEncoding"`
	RecordFormat   ApplicationReferenceDataSourceRecordFormatInput      `pulumi:"recordFormat"`
}

func (ApplicationReferenceDataSourceReferenceSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceSchema)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceReferenceSchemaArgs) ToApplicationReferenceDataSourceReferenceSchemaOutput() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return i.ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceReferenceSchemaArgs) ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceReferenceSchemaOutput)
}

func (i ApplicationReferenceDataSourceReferenceSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceSchema] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceSchema]{
		OutputState: i.ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceReferenceSchemaOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceSchema)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) ToApplicationReferenceDataSourceReferenceSchemaOutput() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceSchema] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) RecordColumns() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceSchema) []ApplicationReferenceDataSourceRecordColumn {
		return v.RecordColumns
	}).(ApplicationReferenceDataSourceRecordColumnArrayOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) RecordEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceSchema) *string { return v.RecordEncoding }).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) RecordFormat() ApplicationReferenceDataSourceRecordFormatOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceSchema) ApplicationReferenceDataSourceRecordFormat {
		return v.RecordFormat
	}).(ApplicationReferenceDataSourceRecordFormatOutput)
}

type ApplicationReferenceDataSourceReferenceSchemaPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceReferenceSchema)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ToApplicationReferenceDataSourceReferenceSchemaPtrOutput() ApplicationReferenceDataSourceReferenceSchemaPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ToApplicationReferenceDataSourceReferenceSchemaPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceSchemaPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceReferenceSchema] {
	return pulumix.Output[*ApplicationReferenceDataSourceReferenceSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) Elem() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) ApplicationReferenceDataSourceReferenceSchema {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceReferenceSchema
		return ret
	}).(ApplicationReferenceDataSourceReferenceSchemaOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) RecordColumns() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) []ApplicationReferenceDataSourceRecordColumn {
		if v == nil {
			return nil
		}
		return v.RecordColumns
	}).(ApplicationReferenceDataSourceRecordColumnArrayOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) RecordEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) *string {
		if v == nil {
			return nil
		}
		return v.RecordEncoding
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) RecordFormat() ApplicationReferenceDataSourceRecordFormatPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) *ApplicationReferenceDataSourceRecordFormat {
		if v == nil {
			return nil
		}
		return &v.RecordFormat
	}).(ApplicationReferenceDataSourceRecordFormatPtrOutput)
}

type ApplicationReferenceDataSourceS3ReferenceDataSource struct {
	BucketArn string `pulumi:"bucketArn"`
	FileKey   string `pulumi:"fileKey"`
}

// ApplicationReferenceDataSourceS3ReferenceDataSourceInput is an input type that accepts ApplicationReferenceDataSourceS3ReferenceDataSourceArgs and ApplicationReferenceDataSourceS3ReferenceDataSourceOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceS3ReferenceDataSourceInput` via:
//
//	ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{...}
type ApplicationReferenceDataSourceS3ReferenceDataSourceInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceS3ReferenceDataSourceOutput() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput
	ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourceOutput
}

type ApplicationReferenceDataSourceS3ReferenceDataSourceArgs struct {
	BucketArn pulumi.StringInput `pulumi:"bucketArn"`
	FileKey   pulumi.StringInput `pulumi:"fileKey"`
}

func (ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutput() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return i.ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput)
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: i.ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return i.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput).ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput is an input type that accepts ApplicationReferenceDataSourceS3ReferenceDataSourceArgs, ApplicationReferenceDataSourceS3ReferenceDataSourcePtr and ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput` via:
//
//	        ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput
	ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput
}

type applicationReferenceDataSourceS3ReferenceDataSourcePtrType ApplicationReferenceDataSourceS3ReferenceDataSourceArgs

func ApplicationReferenceDataSourceS3ReferenceDataSourcePtr(v *ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput {
	return (*applicationReferenceDataSourceS3ReferenceDataSourcePtrType)(v)
}

func (*applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (i *applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return i.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (i *applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: i.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceS3ReferenceDataSourceOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutput() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceS3ReferenceDataSource) *ApplicationReferenceDataSourceS3ReferenceDataSource {
		return &v
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceS3ReferenceDataSource) string { return v.BucketArn }).(pulumi.StringOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) FileKey() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceS3ReferenceDataSource) string { return v.FileKey }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) Elem() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceS3ReferenceDataSource) ApplicationReferenceDataSourceS3ReferenceDataSource {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceS3ReferenceDataSource
		return ret
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) BucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceS3ReferenceDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.BucketArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) FileKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceS3ReferenceDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.FileKey
	}).(pulumi.StringPtrOutput)
}

// Describes the restore behavior of a restarting application.
type ApplicationRestoreConfiguration struct {
	// Specifies how the application should be restored.
	ApplicationRestoreType ApplicationRestoreConfigurationApplicationRestoreType `pulumi:"applicationRestoreType"`
	// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
	SnapshotName *string `pulumi:"snapshotName"`
}

// ApplicationRestoreConfigurationInput is an input type that accepts ApplicationRestoreConfigurationArgs and ApplicationRestoreConfigurationOutput values.
// You can construct a concrete instance of `ApplicationRestoreConfigurationInput` via:
//
//	ApplicationRestoreConfigurationArgs{...}
type ApplicationRestoreConfigurationInput interface {
	pulumi.Input

	ToApplicationRestoreConfigurationOutput() ApplicationRestoreConfigurationOutput
	ToApplicationRestoreConfigurationOutputWithContext(context.Context) ApplicationRestoreConfigurationOutput
}

// Describes the restore behavior of a restarting application.
type ApplicationRestoreConfigurationArgs struct {
	// Specifies how the application should be restored.
	ApplicationRestoreType ApplicationRestoreConfigurationApplicationRestoreTypeInput `pulumi:"applicationRestoreType"`
	// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
	SnapshotName pulumi.StringPtrInput `pulumi:"snapshotName"`
}

func (ApplicationRestoreConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRestoreConfiguration)(nil)).Elem()
}

func (i ApplicationRestoreConfigurationArgs) ToApplicationRestoreConfigurationOutput() ApplicationRestoreConfigurationOutput {
	return i.ToApplicationRestoreConfigurationOutputWithContext(context.Background())
}

func (i ApplicationRestoreConfigurationArgs) ToApplicationRestoreConfigurationOutputWithContext(ctx context.Context) ApplicationRestoreConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRestoreConfigurationOutput)
}

func (i ApplicationRestoreConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationRestoreConfiguration] {
	return pulumix.Output[ApplicationRestoreConfiguration]{
		OutputState: i.ToApplicationRestoreConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationRestoreConfigurationArgs) ToApplicationRestoreConfigurationPtrOutput() ApplicationRestoreConfigurationPtrOutput {
	return i.ToApplicationRestoreConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationRestoreConfigurationArgs) ToApplicationRestoreConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRestoreConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRestoreConfigurationOutput).ToApplicationRestoreConfigurationPtrOutputWithContext(ctx)
}

// ApplicationRestoreConfigurationPtrInput is an input type that accepts ApplicationRestoreConfigurationArgs, ApplicationRestoreConfigurationPtr and ApplicationRestoreConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationRestoreConfigurationPtrInput` via:
//
//	        ApplicationRestoreConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationRestoreConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationRestoreConfigurationPtrOutput() ApplicationRestoreConfigurationPtrOutput
	ToApplicationRestoreConfigurationPtrOutputWithContext(context.Context) ApplicationRestoreConfigurationPtrOutput
}

type applicationRestoreConfigurationPtrType ApplicationRestoreConfigurationArgs

func ApplicationRestoreConfigurationPtr(v *ApplicationRestoreConfigurationArgs) ApplicationRestoreConfigurationPtrInput {
	return (*applicationRestoreConfigurationPtrType)(v)
}

func (*applicationRestoreConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationRestoreConfiguration)(nil)).Elem()
}

func (i *applicationRestoreConfigurationPtrType) ToApplicationRestoreConfigurationPtrOutput() ApplicationRestoreConfigurationPtrOutput {
	return i.ToApplicationRestoreConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationRestoreConfigurationPtrType) ToApplicationRestoreConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRestoreConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRestoreConfigurationPtrOutput)
}

func (i *applicationRestoreConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationRestoreConfiguration] {
	return pulumix.Output[*ApplicationRestoreConfiguration]{
		OutputState: i.ToApplicationRestoreConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the restore behavior of a restarting application.
type ApplicationRestoreConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationRestoreConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRestoreConfiguration)(nil)).Elem()
}

func (o ApplicationRestoreConfigurationOutput) ToApplicationRestoreConfigurationOutput() ApplicationRestoreConfigurationOutput {
	return o
}

func (o ApplicationRestoreConfigurationOutput) ToApplicationRestoreConfigurationOutputWithContext(ctx context.Context) ApplicationRestoreConfigurationOutput {
	return o
}

func (o ApplicationRestoreConfigurationOutput) ToApplicationRestoreConfigurationPtrOutput() ApplicationRestoreConfigurationPtrOutput {
	return o.ToApplicationRestoreConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationRestoreConfigurationOutput) ToApplicationRestoreConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRestoreConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationRestoreConfiguration) *ApplicationRestoreConfiguration {
		return &v
	}).(ApplicationRestoreConfigurationPtrOutput)
}

func (o ApplicationRestoreConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationRestoreConfiguration] {
	return pulumix.Output[ApplicationRestoreConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies how the application should be restored.
func (o ApplicationRestoreConfigurationOutput) ApplicationRestoreType() ApplicationRestoreConfigurationApplicationRestoreTypeOutput {
	return o.ApplyT(func(v ApplicationRestoreConfiguration) ApplicationRestoreConfigurationApplicationRestoreType {
		return v.ApplicationRestoreType
	}).(ApplicationRestoreConfigurationApplicationRestoreTypeOutput)
}

// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
func (o ApplicationRestoreConfigurationOutput) SnapshotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationRestoreConfiguration) *string { return v.SnapshotName }).(pulumi.StringPtrOutput)
}

type ApplicationRestoreConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationRestoreConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationRestoreConfiguration)(nil)).Elem()
}

func (o ApplicationRestoreConfigurationPtrOutput) ToApplicationRestoreConfigurationPtrOutput() ApplicationRestoreConfigurationPtrOutput {
	return o
}

func (o ApplicationRestoreConfigurationPtrOutput) ToApplicationRestoreConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRestoreConfigurationPtrOutput {
	return o
}

func (o ApplicationRestoreConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationRestoreConfiguration] {
	return pulumix.Output[*ApplicationRestoreConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationRestoreConfigurationPtrOutput) Elem() ApplicationRestoreConfigurationOutput {
	return o.ApplyT(func(v *ApplicationRestoreConfiguration) ApplicationRestoreConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationRestoreConfiguration
		return ret
	}).(ApplicationRestoreConfigurationOutput)
}

// Specifies how the application should be restored.
func (o ApplicationRestoreConfigurationPtrOutput) ApplicationRestoreType() ApplicationRestoreConfigurationApplicationRestoreTypePtrOutput {
	return o.ApplyT(func(v *ApplicationRestoreConfiguration) *ApplicationRestoreConfigurationApplicationRestoreType {
		if v == nil {
			return nil
		}
		return &v.ApplicationRestoreType
	}).(ApplicationRestoreConfigurationApplicationRestoreTypePtrOutput)
}

// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
func (o ApplicationRestoreConfigurationPtrOutput) SnapshotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationRestoreConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotName
	}).(pulumi.StringPtrOutput)
}

// Identifies the run configuration (start parameters) of a Kinesis Data Analytics application. This section is evaluated only on stack updates for applications in running RUNNING state and has no effect during manual application start.
type ApplicationRunConfiguration struct {
	// Describes the restore behavior of a restarting application.
	ApplicationRestoreConfiguration *ApplicationRestoreConfiguration `pulumi:"applicationRestoreConfiguration"`
	// Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
	FlinkRunConfiguration *ApplicationFlinkRunConfiguration `pulumi:"flinkRunConfiguration"`
}

// ApplicationRunConfigurationInput is an input type that accepts ApplicationRunConfigurationArgs and ApplicationRunConfigurationOutput values.
// You can construct a concrete instance of `ApplicationRunConfigurationInput` via:
//
//	ApplicationRunConfigurationArgs{...}
type ApplicationRunConfigurationInput interface {
	pulumi.Input

	ToApplicationRunConfigurationOutput() ApplicationRunConfigurationOutput
	ToApplicationRunConfigurationOutputWithContext(context.Context) ApplicationRunConfigurationOutput
}

// Identifies the run configuration (start parameters) of a Kinesis Data Analytics application. This section is evaluated only on stack updates for applications in running RUNNING state and has no effect during manual application start.
type ApplicationRunConfigurationArgs struct {
	// Describes the restore behavior of a restarting application.
	ApplicationRestoreConfiguration ApplicationRestoreConfigurationPtrInput `pulumi:"applicationRestoreConfiguration"`
	// Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
	FlinkRunConfiguration ApplicationFlinkRunConfigurationPtrInput `pulumi:"flinkRunConfiguration"`
}

func (ApplicationRunConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRunConfiguration)(nil)).Elem()
}

func (i ApplicationRunConfigurationArgs) ToApplicationRunConfigurationOutput() ApplicationRunConfigurationOutput {
	return i.ToApplicationRunConfigurationOutputWithContext(context.Background())
}

func (i ApplicationRunConfigurationArgs) ToApplicationRunConfigurationOutputWithContext(ctx context.Context) ApplicationRunConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRunConfigurationOutput)
}

func (i ApplicationRunConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationRunConfiguration] {
	return pulumix.Output[ApplicationRunConfiguration]{
		OutputState: i.ToApplicationRunConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationRunConfigurationArgs) ToApplicationRunConfigurationPtrOutput() ApplicationRunConfigurationPtrOutput {
	return i.ToApplicationRunConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationRunConfigurationArgs) ToApplicationRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRunConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRunConfigurationOutput).ToApplicationRunConfigurationPtrOutputWithContext(ctx)
}

// ApplicationRunConfigurationPtrInput is an input type that accepts ApplicationRunConfigurationArgs, ApplicationRunConfigurationPtr and ApplicationRunConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationRunConfigurationPtrInput` via:
//
//	        ApplicationRunConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationRunConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationRunConfigurationPtrOutput() ApplicationRunConfigurationPtrOutput
	ToApplicationRunConfigurationPtrOutputWithContext(context.Context) ApplicationRunConfigurationPtrOutput
}

type applicationRunConfigurationPtrType ApplicationRunConfigurationArgs

func ApplicationRunConfigurationPtr(v *ApplicationRunConfigurationArgs) ApplicationRunConfigurationPtrInput {
	return (*applicationRunConfigurationPtrType)(v)
}

func (*applicationRunConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationRunConfiguration)(nil)).Elem()
}

func (i *applicationRunConfigurationPtrType) ToApplicationRunConfigurationPtrOutput() ApplicationRunConfigurationPtrOutput {
	return i.ToApplicationRunConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationRunConfigurationPtrType) ToApplicationRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRunConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRunConfigurationPtrOutput)
}

func (i *applicationRunConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationRunConfiguration] {
	return pulumix.Output[*ApplicationRunConfiguration]{
		OutputState: i.ToApplicationRunConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Identifies the run configuration (start parameters) of a Kinesis Data Analytics application. This section is evaluated only on stack updates for applications in running RUNNING state and has no effect during manual application start.
type ApplicationRunConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationRunConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRunConfiguration)(nil)).Elem()
}

func (o ApplicationRunConfigurationOutput) ToApplicationRunConfigurationOutput() ApplicationRunConfigurationOutput {
	return o
}

func (o ApplicationRunConfigurationOutput) ToApplicationRunConfigurationOutputWithContext(ctx context.Context) ApplicationRunConfigurationOutput {
	return o
}

func (o ApplicationRunConfigurationOutput) ToApplicationRunConfigurationPtrOutput() ApplicationRunConfigurationPtrOutput {
	return o.ToApplicationRunConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationRunConfigurationOutput) ToApplicationRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRunConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationRunConfiguration) *ApplicationRunConfiguration {
		return &v
	}).(ApplicationRunConfigurationPtrOutput)
}

func (o ApplicationRunConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationRunConfiguration] {
	return pulumix.Output[ApplicationRunConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes the restore behavior of a restarting application.
func (o ApplicationRunConfigurationOutput) ApplicationRestoreConfiguration() ApplicationRestoreConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationRunConfiguration) *ApplicationRestoreConfiguration {
		return v.ApplicationRestoreConfiguration
	}).(ApplicationRestoreConfigurationPtrOutput)
}

// Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
func (o ApplicationRunConfigurationOutput) FlinkRunConfiguration() ApplicationFlinkRunConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationRunConfiguration) *ApplicationFlinkRunConfiguration { return v.FlinkRunConfiguration }).(ApplicationFlinkRunConfigurationPtrOutput)
}

type ApplicationRunConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationRunConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationRunConfiguration)(nil)).Elem()
}

func (o ApplicationRunConfigurationPtrOutput) ToApplicationRunConfigurationPtrOutput() ApplicationRunConfigurationPtrOutput {
	return o
}

func (o ApplicationRunConfigurationPtrOutput) ToApplicationRunConfigurationPtrOutputWithContext(ctx context.Context) ApplicationRunConfigurationPtrOutput {
	return o
}

func (o ApplicationRunConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationRunConfiguration] {
	return pulumix.Output[*ApplicationRunConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationRunConfigurationPtrOutput) Elem() ApplicationRunConfigurationOutput {
	return o.ApplyT(func(v *ApplicationRunConfiguration) ApplicationRunConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationRunConfiguration
		return ret
	}).(ApplicationRunConfigurationOutput)
}

// Describes the restore behavior of a restarting application.
func (o ApplicationRunConfigurationPtrOutput) ApplicationRestoreConfiguration() ApplicationRestoreConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationRunConfiguration) *ApplicationRestoreConfiguration {
		if v == nil {
			return nil
		}
		return v.ApplicationRestoreConfiguration
	}).(ApplicationRestoreConfigurationPtrOutput)
}

// Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
func (o ApplicationRunConfigurationPtrOutput) FlinkRunConfiguration() ApplicationFlinkRunConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationRunConfiguration) *ApplicationFlinkRunConfiguration {
		if v == nil {
			return nil
		}
		return v.FlinkRunConfiguration
	}).(ApplicationFlinkRunConfigurationPtrOutput)
}

// The base location of the Amazon Data Analytics application.
type ApplicationS3ContentBaseLocation struct {
	// The base path for the S3 bucket.
	BasePath *string `pulumi:"basePath"`
	// The Amazon Resource Name (ARN) of the S3 bucket.
	BucketArn string `pulumi:"bucketArn"`
}

// ApplicationS3ContentBaseLocationInput is an input type that accepts ApplicationS3ContentBaseLocationArgs and ApplicationS3ContentBaseLocationOutput values.
// You can construct a concrete instance of `ApplicationS3ContentBaseLocationInput` via:
//
//	ApplicationS3ContentBaseLocationArgs{...}
type ApplicationS3ContentBaseLocationInput interface {
	pulumi.Input

	ToApplicationS3ContentBaseLocationOutput() ApplicationS3ContentBaseLocationOutput
	ToApplicationS3ContentBaseLocationOutputWithContext(context.Context) ApplicationS3ContentBaseLocationOutput
}

// The base location of the Amazon Data Analytics application.
type ApplicationS3ContentBaseLocationArgs struct {
	// The base path for the S3 bucket.
	BasePath pulumi.StringPtrInput `pulumi:"basePath"`
	// The Amazon Resource Name (ARN) of the S3 bucket.
	BucketArn pulumi.StringInput `pulumi:"bucketArn"`
}

func (ApplicationS3ContentBaseLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationS3ContentBaseLocation)(nil)).Elem()
}

func (i ApplicationS3ContentBaseLocationArgs) ToApplicationS3ContentBaseLocationOutput() ApplicationS3ContentBaseLocationOutput {
	return i.ToApplicationS3ContentBaseLocationOutputWithContext(context.Background())
}

func (i ApplicationS3ContentBaseLocationArgs) ToApplicationS3ContentBaseLocationOutputWithContext(ctx context.Context) ApplicationS3ContentBaseLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationS3ContentBaseLocationOutput)
}

func (i ApplicationS3ContentBaseLocationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationS3ContentBaseLocation] {
	return pulumix.Output[ApplicationS3ContentBaseLocation]{
		OutputState: i.ToApplicationS3ContentBaseLocationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationS3ContentBaseLocationArgs) ToApplicationS3ContentBaseLocationPtrOutput() ApplicationS3ContentBaseLocationPtrOutput {
	return i.ToApplicationS3ContentBaseLocationPtrOutputWithContext(context.Background())
}

func (i ApplicationS3ContentBaseLocationArgs) ToApplicationS3ContentBaseLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentBaseLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationS3ContentBaseLocationOutput).ToApplicationS3ContentBaseLocationPtrOutputWithContext(ctx)
}

// ApplicationS3ContentBaseLocationPtrInput is an input type that accepts ApplicationS3ContentBaseLocationArgs, ApplicationS3ContentBaseLocationPtr and ApplicationS3ContentBaseLocationPtrOutput values.
// You can construct a concrete instance of `ApplicationS3ContentBaseLocationPtrInput` via:
//
//	        ApplicationS3ContentBaseLocationArgs{...}
//
//	or:
//
//	        nil
type ApplicationS3ContentBaseLocationPtrInput interface {
	pulumi.Input

	ToApplicationS3ContentBaseLocationPtrOutput() ApplicationS3ContentBaseLocationPtrOutput
	ToApplicationS3ContentBaseLocationPtrOutputWithContext(context.Context) ApplicationS3ContentBaseLocationPtrOutput
}

type applicationS3ContentBaseLocationPtrType ApplicationS3ContentBaseLocationArgs

func ApplicationS3ContentBaseLocationPtr(v *ApplicationS3ContentBaseLocationArgs) ApplicationS3ContentBaseLocationPtrInput {
	return (*applicationS3ContentBaseLocationPtrType)(v)
}

func (*applicationS3ContentBaseLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationS3ContentBaseLocation)(nil)).Elem()
}

func (i *applicationS3ContentBaseLocationPtrType) ToApplicationS3ContentBaseLocationPtrOutput() ApplicationS3ContentBaseLocationPtrOutput {
	return i.ToApplicationS3ContentBaseLocationPtrOutputWithContext(context.Background())
}

func (i *applicationS3ContentBaseLocationPtrType) ToApplicationS3ContentBaseLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentBaseLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationS3ContentBaseLocationPtrOutput)
}

func (i *applicationS3ContentBaseLocationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationS3ContentBaseLocation] {
	return pulumix.Output[*ApplicationS3ContentBaseLocation]{
		OutputState: i.ToApplicationS3ContentBaseLocationPtrOutputWithContext(ctx).OutputState,
	}
}

// The base location of the Amazon Data Analytics application.
type ApplicationS3ContentBaseLocationOutput struct{ *pulumi.OutputState }

func (ApplicationS3ContentBaseLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationS3ContentBaseLocation)(nil)).Elem()
}

func (o ApplicationS3ContentBaseLocationOutput) ToApplicationS3ContentBaseLocationOutput() ApplicationS3ContentBaseLocationOutput {
	return o
}

func (o ApplicationS3ContentBaseLocationOutput) ToApplicationS3ContentBaseLocationOutputWithContext(ctx context.Context) ApplicationS3ContentBaseLocationOutput {
	return o
}

func (o ApplicationS3ContentBaseLocationOutput) ToApplicationS3ContentBaseLocationPtrOutput() ApplicationS3ContentBaseLocationPtrOutput {
	return o.ToApplicationS3ContentBaseLocationPtrOutputWithContext(context.Background())
}

func (o ApplicationS3ContentBaseLocationOutput) ToApplicationS3ContentBaseLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentBaseLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationS3ContentBaseLocation) *ApplicationS3ContentBaseLocation {
		return &v
	}).(ApplicationS3ContentBaseLocationPtrOutput)
}

func (o ApplicationS3ContentBaseLocationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationS3ContentBaseLocation] {
	return pulumix.Output[ApplicationS3ContentBaseLocation]{
		OutputState: o.OutputState,
	}
}

// The base path for the S3 bucket.
func (o ApplicationS3ContentBaseLocationOutput) BasePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationS3ContentBaseLocation) *string { return v.BasePath }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the S3 bucket.
func (o ApplicationS3ContentBaseLocationOutput) BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationS3ContentBaseLocation) string { return v.BucketArn }).(pulumi.StringOutput)
}

type ApplicationS3ContentBaseLocationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationS3ContentBaseLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationS3ContentBaseLocation)(nil)).Elem()
}

func (o ApplicationS3ContentBaseLocationPtrOutput) ToApplicationS3ContentBaseLocationPtrOutput() ApplicationS3ContentBaseLocationPtrOutput {
	return o
}

func (o ApplicationS3ContentBaseLocationPtrOutput) ToApplicationS3ContentBaseLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentBaseLocationPtrOutput {
	return o
}

func (o ApplicationS3ContentBaseLocationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationS3ContentBaseLocation] {
	return pulumix.Output[*ApplicationS3ContentBaseLocation]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationS3ContentBaseLocationPtrOutput) Elem() ApplicationS3ContentBaseLocationOutput {
	return o.ApplyT(func(v *ApplicationS3ContentBaseLocation) ApplicationS3ContentBaseLocation {
		if v != nil {
			return *v
		}
		var ret ApplicationS3ContentBaseLocation
		return ret
	}).(ApplicationS3ContentBaseLocationOutput)
}

// The base path for the S3 bucket.
func (o ApplicationS3ContentBaseLocationPtrOutput) BasePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationS3ContentBaseLocation) *string {
		if v == nil {
			return nil
		}
		return v.BasePath
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the S3 bucket.
func (o ApplicationS3ContentBaseLocationPtrOutput) BucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationS3ContentBaseLocation) *string {
		if v == nil {
			return nil
		}
		return &v.BucketArn
	}).(pulumi.StringPtrOutput)
}

// The location of an application or a custom artifact.
type ApplicationS3ContentLocation struct {
	// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
	BucketArn string `pulumi:"bucketArn"`
	// The file key for the object containing the application code.
	FileKey string `pulumi:"fileKey"`
	// The version of the object containing the application code.
	ObjectVersion *string `pulumi:"objectVersion"`
}

// ApplicationS3ContentLocationInput is an input type that accepts ApplicationS3ContentLocationArgs and ApplicationS3ContentLocationOutput values.
// You can construct a concrete instance of `ApplicationS3ContentLocationInput` via:
//
//	ApplicationS3ContentLocationArgs{...}
type ApplicationS3ContentLocationInput interface {
	pulumi.Input

	ToApplicationS3ContentLocationOutput() ApplicationS3ContentLocationOutput
	ToApplicationS3ContentLocationOutputWithContext(context.Context) ApplicationS3ContentLocationOutput
}

// The location of an application or a custom artifact.
type ApplicationS3ContentLocationArgs struct {
	// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
	BucketArn pulumi.StringInput `pulumi:"bucketArn"`
	// The file key for the object containing the application code.
	FileKey pulumi.StringInput `pulumi:"fileKey"`
	// The version of the object containing the application code.
	ObjectVersion pulumi.StringPtrInput `pulumi:"objectVersion"`
}

func (ApplicationS3ContentLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationS3ContentLocation)(nil)).Elem()
}

func (i ApplicationS3ContentLocationArgs) ToApplicationS3ContentLocationOutput() ApplicationS3ContentLocationOutput {
	return i.ToApplicationS3ContentLocationOutputWithContext(context.Background())
}

func (i ApplicationS3ContentLocationArgs) ToApplicationS3ContentLocationOutputWithContext(ctx context.Context) ApplicationS3ContentLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationS3ContentLocationOutput)
}

func (i ApplicationS3ContentLocationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationS3ContentLocation] {
	return pulumix.Output[ApplicationS3ContentLocation]{
		OutputState: i.ToApplicationS3ContentLocationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationS3ContentLocationArgs) ToApplicationS3ContentLocationPtrOutput() ApplicationS3ContentLocationPtrOutput {
	return i.ToApplicationS3ContentLocationPtrOutputWithContext(context.Background())
}

func (i ApplicationS3ContentLocationArgs) ToApplicationS3ContentLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationS3ContentLocationOutput).ToApplicationS3ContentLocationPtrOutputWithContext(ctx)
}

// ApplicationS3ContentLocationPtrInput is an input type that accepts ApplicationS3ContentLocationArgs, ApplicationS3ContentLocationPtr and ApplicationS3ContentLocationPtrOutput values.
// You can construct a concrete instance of `ApplicationS3ContentLocationPtrInput` via:
//
//	        ApplicationS3ContentLocationArgs{...}
//
//	or:
//
//	        nil
type ApplicationS3ContentLocationPtrInput interface {
	pulumi.Input

	ToApplicationS3ContentLocationPtrOutput() ApplicationS3ContentLocationPtrOutput
	ToApplicationS3ContentLocationPtrOutputWithContext(context.Context) ApplicationS3ContentLocationPtrOutput
}

type applicationS3ContentLocationPtrType ApplicationS3ContentLocationArgs

func ApplicationS3ContentLocationPtr(v *ApplicationS3ContentLocationArgs) ApplicationS3ContentLocationPtrInput {
	return (*applicationS3ContentLocationPtrType)(v)
}

func (*applicationS3ContentLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationS3ContentLocation)(nil)).Elem()
}

func (i *applicationS3ContentLocationPtrType) ToApplicationS3ContentLocationPtrOutput() ApplicationS3ContentLocationPtrOutput {
	return i.ToApplicationS3ContentLocationPtrOutputWithContext(context.Background())
}

func (i *applicationS3ContentLocationPtrType) ToApplicationS3ContentLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationS3ContentLocationPtrOutput)
}

func (i *applicationS3ContentLocationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationS3ContentLocation] {
	return pulumix.Output[*ApplicationS3ContentLocation]{
		OutputState: i.ToApplicationS3ContentLocationPtrOutputWithContext(ctx).OutputState,
	}
}

// The location of an application or a custom artifact.
type ApplicationS3ContentLocationOutput struct{ *pulumi.OutputState }

func (ApplicationS3ContentLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationS3ContentLocation)(nil)).Elem()
}

func (o ApplicationS3ContentLocationOutput) ToApplicationS3ContentLocationOutput() ApplicationS3ContentLocationOutput {
	return o
}

func (o ApplicationS3ContentLocationOutput) ToApplicationS3ContentLocationOutputWithContext(ctx context.Context) ApplicationS3ContentLocationOutput {
	return o
}

func (o ApplicationS3ContentLocationOutput) ToApplicationS3ContentLocationPtrOutput() ApplicationS3ContentLocationPtrOutput {
	return o.ToApplicationS3ContentLocationPtrOutputWithContext(context.Background())
}

func (o ApplicationS3ContentLocationOutput) ToApplicationS3ContentLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationS3ContentLocation) *ApplicationS3ContentLocation {
		return &v
	}).(ApplicationS3ContentLocationPtrOutput)
}

func (o ApplicationS3ContentLocationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationS3ContentLocation] {
	return pulumix.Output[ApplicationS3ContentLocation]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
func (o ApplicationS3ContentLocationOutput) BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationS3ContentLocation) string { return v.BucketArn }).(pulumi.StringOutput)
}

// The file key for the object containing the application code.
func (o ApplicationS3ContentLocationOutput) FileKey() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationS3ContentLocation) string { return v.FileKey }).(pulumi.StringOutput)
}

// The version of the object containing the application code.
func (o ApplicationS3ContentLocationOutput) ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationS3ContentLocation) *string { return v.ObjectVersion }).(pulumi.StringPtrOutput)
}

type ApplicationS3ContentLocationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationS3ContentLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationS3ContentLocation)(nil)).Elem()
}

func (o ApplicationS3ContentLocationPtrOutput) ToApplicationS3ContentLocationPtrOutput() ApplicationS3ContentLocationPtrOutput {
	return o
}

func (o ApplicationS3ContentLocationPtrOutput) ToApplicationS3ContentLocationPtrOutputWithContext(ctx context.Context) ApplicationS3ContentLocationPtrOutput {
	return o
}

func (o ApplicationS3ContentLocationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationS3ContentLocation] {
	return pulumix.Output[*ApplicationS3ContentLocation]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationS3ContentLocationPtrOutput) Elem() ApplicationS3ContentLocationOutput {
	return o.ApplyT(func(v *ApplicationS3ContentLocation) ApplicationS3ContentLocation {
		if v != nil {
			return *v
		}
		var ret ApplicationS3ContentLocation
		return ret
	}).(ApplicationS3ContentLocationOutput)
}

// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
func (o ApplicationS3ContentLocationPtrOutput) BucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationS3ContentLocation) *string {
		if v == nil {
			return nil
		}
		return &v.BucketArn
	}).(pulumi.StringPtrOutput)
}

// The file key for the object containing the application code.
func (o ApplicationS3ContentLocationPtrOutput) FileKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationS3ContentLocation) *string {
		if v == nil {
			return nil
		}
		return &v.FileKey
	}).(pulumi.StringPtrOutput)
}

// The version of the object containing the application code.
func (o ApplicationS3ContentLocationPtrOutput) ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationS3ContentLocation) *string {
		if v == nil {
			return nil
		}
		return v.ObjectVersion
	}).(pulumi.StringPtrOutput)
}

// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
type ApplicationSnapshotConfiguration struct {
	// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
	SnapshotsEnabled bool `pulumi:"snapshotsEnabled"`
}

// ApplicationSnapshotConfigurationInput is an input type that accepts ApplicationSnapshotConfigurationArgs and ApplicationSnapshotConfigurationOutput values.
// You can construct a concrete instance of `ApplicationSnapshotConfigurationInput` via:
//
//	ApplicationSnapshotConfigurationArgs{...}
type ApplicationSnapshotConfigurationInput interface {
	pulumi.Input

	ToApplicationSnapshotConfigurationOutput() ApplicationSnapshotConfigurationOutput
	ToApplicationSnapshotConfigurationOutputWithContext(context.Context) ApplicationSnapshotConfigurationOutput
}

// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
type ApplicationSnapshotConfigurationArgs struct {
	// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
	SnapshotsEnabled pulumi.BoolInput `pulumi:"snapshotsEnabled"`
}

func (ApplicationSnapshotConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSnapshotConfiguration)(nil)).Elem()
}

func (i ApplicationSnapshotConfigurationArgs) ToApplicationSnapshotConfigurationOutput() ApplicationSnapshotConfigurationOutput {
	return i.ToApplicationSnapshotConfigurationOutputWithContext(context.Background())
}

func (i ApplicationSnapshotConfigurationArgs) ToApplicationSnapshotConfigurationOutputWithContext(ctx context.Context) ApplicationSnapshotConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSnapshotConfigurationOutput)
}

func (i ApplicationSnapshotConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationSnapshotConfiguration] {
	return pulumix.Output[ApplicationSnapshotConfiguration]{
		OutputState: i.ToApplicationSnapshotConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationSnapshotConfigurationArgs) ToApplicationSnapshotConfigurationPtrOutput() ApplicationSnapshotConfigurationPtrOutput {
	return i.ToApplicationSnapshotConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationSnapshotConfigurationArgs) ToApplicationSnapshotConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSnapshotConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSnapshotConfigurationOutput).ToApplicationSnapshotConfigurationPtrOutputWithContext(ctx)
}

// ApplicationSnapshotConfigurationPtrInput is an input type that accepts ApplicationSnapshotConfigurationArgs, ApplicationSnapshotConfigurationPtr and ApplicationSnapshotConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationSnapshotConfigurationPtrInput` via:
//
//	        ApplicationSnapshotConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationSnapshotConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationSnapshotConfigurationPtrOutput() ApplicationSnapshotConfigurationPtrOutput
	ToApplicationSnapshotConfigurationPtrOutputWithContext(context.Context) ApplicationSnapshotConfigurationPtrOutput
}

type applicationSnapshotConfigurationPtrType ApplicationSnapshotConfigurationArgs

func ApplicationSnapshotConfigurationPtr(v *ApplicationSnapshotConfigurationArgs) ApplicationSnapshotConfigurationPtrInput {
	return (*applicationSnapshotConfigurationPtrType)(v)
}

func (*applicationSnapshotConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSnapshotConfiguration)(nil)).Elem()
}

func (i *applicationSnapshotConfigurationPtrType) ToApplicationSnapshotConfigurationPtrOutput() ApplicationSnapshotConfigurationPtrOutput {
	return i.ToApplicationSnapshotConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationSnapshotConfigurationPtrType) ToApplicationSnapshotConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSnapshotConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSnapshotConfigurationPtrOutput)
}

func (i *applicationSnapshotConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationSnapshotConfiguration] {
	return pulumix.Output[*ApplicationSnapshotConfiguration]{
		OutputState: i.ToApplicationSnapshotConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
type ApplicationSnapshotConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationSnapshotConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSnapshotConfiguration)(nil)).Elem()
}

func (o ApplicationSnapshotConfigurationOutput) ToApplicationSnapshotConfigurationOutput() ApplicationSnapshotConfigurationOutput {
	return o
}

func (o ApplicationSnapshotConfigurationOutput) ToApplicationSnapshotConfigurationOutputWithContext(ctx context.Context) ApplicationSnapshotConfigurationOutput {
	return o
}

func (o ApplicationSnapshotConfigurationOutput) ToApplicationSnapshotConfigurationPtrOutput() ApplicationSnapshotConfigurationPtrOutput {
	return o.ToApplicationSnapshotConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationSnapshotConfigurationOutput) ToApplicationSnapshotConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSnapshotConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSnapshotConfiguration) *ApplicationSnapshotConfiguration {
		return &v
	}).(ApplicationSnapshotConfigurationPtrOutput)
}

func (o ApplicationSnapshotConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationSnapshotConfiguration] {
	return pulumix.Output[ApplicationSnapshotConfiguration]{
		OutputState: o.OutputState,
	}
}

// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
func (o ApplicationSnapshotConfigurationOutput) SnapshotsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplicationSnapshotConfiguration) bool { return v.SnapshotsEnabled }).(pulumi.BoolOutput)
}

type ApplicationSnapshotConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSnapshotConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSnapshotConfiguration)(nil)).Elem()
}

func (o ApplicationSnapshotConfigurationPtrOutput) ToApplicationSnapshotConfigurationPtrOutput() ApplicationSnapshotConfigurationPtrOutput {
	return o
}

func (o ApplicationSnapshotConfigurationPtrOutput) ToApplicationSnapshotConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSnapshotConfigurationPtrOutput {
	return o
}

func (o ApplicationSnapshotConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationSnapshotConfiguration] {
	return pulumix.Output[*ApplicationSnapshotConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationSnapshotConfigurationPtrOutput) Elem() ApplicationSnapshotConfigurationOutput {
	return o.ApplyT(func(v *ApplicationSnapshotConfiguration) ApplicationSnapshotConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationSnapshotConfiguration
		return ret
	}).(ApplicationSnapshotConfigurationOutput)
}

// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
func (o ApplicationSnapshotConfigurationPtrOutput) SnapshotsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSnapshotConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.SnapshotsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes the inputs, outputs, and reference data sources for a SQL-based Kinesis Data Analytics application.
type ApplicationSqlApplicationConfiguration struct {
	// The array of Input objects describing the input streams used by the application.
	Inputs []ApplicationInputType `pulumi:"inputs"`
}

// ApplicationSqlApplicationConfigurationInput is an input type that accepts ApplicationSqlApplicationConfigurationArgs and ApplicationSqlApplicationConfigurationOutput values.
// You can construct a concrete instance of `ApplicationSqlApplicationConfigurationInput` via:
//
//	ApplicationSqlApplicationConfigurationArgs{...}
type ApplicationSqlApplicationConfigurationInput interface {
	pulumi.Input

	ToApplicationSqlApplicationConfigurationOutput() ApplicationSqlApplicationConfigurationOutput
	ToApplicationSqlApplicationConfigurationOutputWithContext(context.Context) ApplicationSqlApplicationConfigurationOutput
}

// Describes the inputs, outputs, and reference data sources for a SQL-based Kinesis Data Analytics application.
type ApplicationSqlApplicationConfigurationArgs struct {
	// The array of Input objects describing the input streams used by the application.
	Inputs ApplicationInputTypeArrayInput `pulumi:"inputs"`
}

func (ApplicationSqlApplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSqlApplicationConfiguration)(nil)).Elem()
}

func (i ApplicationSqlApplicationConfigurationArgs) ToApplicationSqlApplicationConfigurationOutput() ApplicationSqlApplicationConfigurationOutput {
	return i.ToApplicationSqlApplicationConfigurationOutputWithContext(context.Background())
}

func (i ApplicationSqlApplicationConfigurationArgs) ToApplicationSqlApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationSqlApplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSqlApplicationConfigurationOutput)
}

func (i ApplicationSqlApplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationSqlApplicationConfiguration] {
	return pulumix.Output[ApplicationSqlApplicationConfiguration]{
		OutputState: i.ToApplicationSqlApplicationConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationSqlApplicationConfigurationArgs) ToApplicationSqlApplicationConfigurationPtrOutput() ApplicationSqlApplicationConfigurationPtrOutput {
	return i.ToApplicationSqlApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationSqlApplicationConfigurationArgs) ToApplicationSqlApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSqlApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSqlApplicationConfigurationOutput).ToApplicationSqlApplicationConfigurationPtrOutputWithContext(ctx)
}

// ApplicationSqlApplicationConfigurationPtrInput is an input type that accepts ApplicationSqlApplicationConfigurationArgs, ApplicationSqlApplicationConfigurationPtr and ApplicationSqlApplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationSqlApplicationConfigurationPtrInput` via:
//
//	        ApplicationSqlApplicationConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationSqlApplicationConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationSqlApplicationConfigurationPtrOutput() ApplicationSqlApplicationConfigurationPtrOutput
	ToApplicationSqlApplicationConfigurationPtrOutputWithContext(context.Context) ApplicationSqlApplicationConfigurationPtrOutput
}

type applicationSqlApplicationConfigurationPtrType ApplicationSqlApplicationConfigurationArgs

func ApplicationSqlApplicationConfigurationPtr(v *ApplicationSqlApplicationConfigurationArgs) ApplicationSqlApplicationConfigurationPtrInput {
	return (*applicationSqlApplicationConfigurationPtrType)(v)
}

func (*applicationSqlApplicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSqlApplicationConfiguration)(nil)).Elem()
}

func (i *applicationSqlApplicationConfigurationPtrType) ToApplicationSqlApplicationConfigurationPtrOutput() ApplicationSqlApplicationConfigurationPtrOutput {
	return i.ToApplicationSqlApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationSqlApplicationConfigurationPtrType) ToApplicationSqlApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSqlApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSqlApplicationConfigurationPtrOutput)
}

func (i *applicationSqlApplicationConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationSqlApplicationConfiguration] {
	return pulumix.Output[*ApplicationSqlApplicationConfiguration]{
		OutputState: i.ToApplicationSqlApplicationConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the inputs, outputs, and reference data sources for a SQL-based Kinesis Data Analytics application.
type ApplicationSqlApplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationSqlApplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationSqlApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationSqlApplicationConfigurationOutput) ToApplicationSqlApplicationConfigurationOutput() ApplicationSqlApplicationConfigurationOutput {
	return o
}

func (o ApplicationSqlApplicationConfigurationOutput) ToApplicationSqlApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationSqlApplicationConfigurationOutput {
	return o
}

func (o ApplicationSqlApplicationConfigurationOutput) ToApplicationSqlApplicationConfigurationPtrOutput() ApplicationSqlApplicationConfigurationPtrOutput {
	return o.ToApplicationSqlApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationSqlApplicationConfigurationOutput) ToApplicationSqlApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSqlApplicationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationSqlApplicationConfiguration) *ApplicationSqlApplicationConfiguration {
		return &v
	}).(ApplicationSqlApplicationConfigurationPtrOutput)
}

func (o ApplicationSqlApplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationSqlApplicationConfiguration] {
	return pulumix.Output[ApplicationSqlApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// The array of Input objects describing the input streams used by the application.
func (o ApplicationSqlApplicationConfigurationOutput) Inputs() ApplicationInputTypeArrayOutput {
	return o.ApplyT(func(v ApplicationSqlApplicationConfiguration) []ApplicationInputType { return v.Inputs }).(ApplicationInputTypeArrayOutput)
}

type ApplicationSqlApplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationSqlApplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSqlApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationSqlApplicationConfigurationPtrOutput) ToApplicationSqlApplicationConfigurationPtrOutput() ApplicationSqlApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationSqlApplicationConfigurationPtrOutput) ToApplicationSqlApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationSqlApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationSqlApplicationConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationSqlApplicationConfiguration] {
	return pulumix.Output[*ApplicationSqlApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationSqlApplicationConfigurationPtrOutput) Elem() ApplicationSqlApplicationConfigurationOutput {
	return o.ApplyT(func(v *ApplicationSqlApplicationConfiguration) ApplicationSqlApplicationConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationSqlApplicationConfiguration
		return ret
	}).(ApplicationSqlApplicationConfigurationOutput)
}

// The array of Input objects describing the input streams used by the application.
func (o ApplicationSqlApplicationConfigurationPtrOutput) Inputs() ApplicationInputTypeArrayOutput {
	return o.ApplyT(func(v *ApplicationSqlApplicationConfiguration) []ApplicationInputType {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(ApplicationInputTypeArrayOutput)
}

// A key-value pair that identifies an application.
type ApplicationTag struct {
	// The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that's 0 to 256 characters in length.
	Value string `pulumi:"value"`
}

// ApplicationTagInput is an input type that accepts ApplicationTagArgs and ApplicationTagOutput values.
// You can construct a concrete instance of `ApplicationTagInput` via:
//
//	ApplicationTagArgs{...}
type ApplicationTagInput interface {
	pulumi.Input

	ToApplicationTagOutput() ApplicationTagOutput
	ToApplicationTagOutputWithContext(context.Context) ApplicationTagOutput
}

// A key-value pair that identifies an application.
type ApplicationTagArgs struct {
	// The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that's 0 to 256 characters in length.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTag)(nil)).Elem()
}

func (i ApplicationTagArgs) ToApplicationTagOutput() ApplicationTagOutput {
	return i.ToApplicationTagOutputWithContext(context.Background())
}

func (i ApplicationTagArgs) ToApplicationTagOutputWithContext(ctx context.Context) ApplicationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTagOutput)
}

func (i ApplicationTagArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationTag] {
	return pulumix.Output[ApplicationTag]{
		OutputState: i.ToApplicationTagOutputWithContext(ctx).OutputState,
	}
}

// ApplicationTagArrayInput is an input type that accepts ApplicationTagArray and ApplicationTagArrayOutput values.
// You can construct a concrete instance of `ApplicationTagArrayInput` via:
//
//	ApplicationTagArray{ ApplicationTagArgs{...} }
type ApplicationTagArrayInput interface {
	pulumi.Input

	ToApplicationTagArrayOutput() ApplicationTagArrayOutput
	ToApplicationTagArrayOutputWithContext(context.Context) ApplicationTagArrayOutput
}

type ApplicationTagArray []ApplicationTagInput

func (ApplicationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationTag)(nil)).Elem()
}

func (i ApplicationTagArray) ToApplicationTagArrayOutput() ApplicationTagArrayOutput {
	return i.ToApplicationTagArrayOutputWithContext(context.Background())
}

func (i ApplicationTagArray) ToApplicationTagArrayOutputWithContext(ctx context.Context) ApplicationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTagArrayOutput)
}

func (i ApplicationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationTag] {
	return pulumix.Output[[]ApplicationTag]{
		OutputState: i.ToApplicationTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair that identifies an application.
type ApplicationTagOutput struct{ *pulumi.OutputState }

func (ApplicationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTag)(nil)).Elem()
}

func (o ApplicationTagOutput) ToApplicationTagOutput() ApplicationTagOutput {
	return o
}

func (o ApplicationTagOutput) ToApplicationTagOutputWithContext(ctx context.Context) ApplicationTagOutput {
	return o
}

func (o ApplicationTagOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationTag] {
	return pulumix.Output[ApplicationTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ApplicationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that's 0 to 256 characters in length.
func (o ApplicationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTag) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationTagArrayOutput struct{ *pulumi.OutputState }

func (ApplicationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationTag)(nil)).Elem()
}

func (o ApplicationTagArrayOutput) ToApplicationTagArrayOutput() ApplicationTagArrayOutput {
	return o
}

func (o ApplicationTagArrayOutput) ToApplicationTagArrayOutputWithContext(ctx context.Context) ApplicationTagArrayOutput {
	return o
}

func (o ApplicationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationTag] {
	return pulumix.Output[[]ApplicationTag]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationTagArrayOutput) Index(i pulumi.IntInput) ApplicationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationTag {
		return vs[0].([]ApplicationTag)[vs[1].(int)]
	}).(ApplicationTagOutput)
}

// Describes the parameters of a VPC used by the application.
type ApplicationVpcConfiguration struct {
	// The array of SecurityGroup IDs used by the VPC configuration.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The array of Subnet IDs used by the VPC configuration.
	SubnetIds []string `pulumi:"subnetIds"`
}

// ApplicationVpcConfigurationInput is an input type that accepts ApplicationVpcConfigurationArgs and ApplicationVpcConfigurationOutput values.
// You can construct a concrete instance of `ApplicationVpcConfigurationInput` via:
//
//	ApplicationVpcConfigurationArgs{...}
type ApplicationVpcConfigurationInput interface {
	pulumi.Input

	ToApplicationVpcConfigurationOutput() ApplicationVpcConfigurationOutput
	ToApplicationVpcConfigurationOutputWithContext(context.Context) ApplicationVpcConfigurationOutput
}

// Describes the parameters of a VPC used by the application.
type ApplicationVpcConfigurationArgs struct {
	// The array of SecurityGroup IDs used by the VPC configuration.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The array of Subnet IDs used by the VPC configuration.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
}

func (ApplicationVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationVpcConfiguration)(nil)).Elem()
}

func (i ApplicationVpcConfigurationArgs) ToApplicationVpcConfigurationOutput() ApplicationVpcConfigurationOutput {
	return i.ToApplicationVpcConfigurationOutputWithContext(context.Background())
}

func (i ApplicationVpcConfigurationArgs) ToApplicationVpcConfigurationOutputWithContext(ctx context.Context) ApplicationVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationVpcConfigurationOutput)
}

func (i ApplicationVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationVpcConfiguration] {
	return pulumix.Output[ApplicationVpcConfiguration]{
		OutputState: i.ToApplicationVpcConfigurationOutputWithContext(ctx).OutputState,
	}
}

// ApplicationVpcConfigurationArrayInput is an input type that accepts ApplicationVpcConfigurationArray and ApplicationVpcConfigurationArrayOutput values.
// You can construct a concrete instance of `ApplicationVpcConfigurationArrayInput` via:
//
//	ApplicationVpcConfigurationArray{ ApplicationVpcConfigurationArgs{...} }
type ApplicationVpcConfigurationArrayInput interface {
	pulumi.Input

	ToApplicationVpcConfigurationArrayOutput() ApplicationVpcConfigurationArrayOutput
	ToApplicationVpcConfigurationArrayOutputWithContext(context.Context) ApplicationVpcConfigurationArrayOutput
}

type ApplicationVpcConfigurationArray []ApplicationVpcConfigurationInput

func (ApplicationVpcConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationVpcConfiguration)(nil)).Elem()
}

func (i ApplicationVpcConfigurationArray) ToApplicationVpcConfigurationArrayOutput() ApplicationVpcConfigurationArrayOutput {
	return i.ToApplicationVpcConfigurationArrayOutputWithContext(context.Background())
}

func (i ApplicationVpcConfigurationArray) ToApplicationVpcConfigurationArrayOutputWithContext(ctx context.Context) ApplicationVpcConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationVpcConfigurationArrayOutput)
}

func (i ApplicationVpcConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationVpcConfiguration] {
	return pulumix.Output[[]ApplicationVpcConfiguration]{
		OutputState: i.ToApplicationVpcConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes the parameters of a VPC used by the application.
type ApplicationVpcConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationVpcConfiguration)(nil)).Elem()
}

func (o ApplicationVpcConfigurationOutput) ToApplicationVpcConfigurationOutput() ApplicationVpcConfigurationOutput {
	return o
}

func (o ApplicationVpcConfigurationOutput) ToApplicationVpcConfigurationOutputWithContext(ctx context.Context) ApplicationVpcConfigurationOutput {
	return o
}

func (o ApplicationVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationVpcConfiguration] {
	return pulumix.Output[ApplicationVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

// The array of SecurityGroup IDs used by the VPC configuration.
func (o ApplicationVpcConfigurationOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationVpcConfiguration) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The array of Subnet IDs used by the VPC configuration.
func (o ApplicationVpcConfigurationOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationVpcConfiguration) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

type ApplicationVpcConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationVpcConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationVpcConfiguration)(nil)).Elem()
}

func (o ApplicationVpcConfigurationArrayOutput) ToApplicationVpcConfigurationArrayOutput() ApplicationVpcConfigurationArrayOutput {
	return o
}

func (o ApplicationVpcConfigurationArrayOutput) ToApplicationVpcConfigurationArrayOutputWithContext(ctx context.Context) ApplicationVpcConfigurationArrayOutput {
	return o
}

func (o ApplicationVpcConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationVpcConfiguration] {
	return pulumix.Output[[]ApplicationVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationVpcConfigurationArrayOutput) Index(i pulumi.IntInput) ApplicationVpcConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationVpcConfiguration {
		return vs[0].([]ApplicationVpcConfiguration)[vs[1].(int)]
	}).(ApplicationVpcConfigurationOutput)
}

// The configuration of a Kinesis Data Analytics Studio notebook.
type ApplicationZeppelinApplicationConfiguration struct {
	// The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.
	CatalogConfiguration *ApplicationCatalogConfiguration `pulumi:"catalogConfiguration"`
	// A list of CustomArtifactConfiguration objects.
	CustomArtifactsConfiguration []ApplicationCustomArtifactConfiguration `pulumi:"customArtifactsConfiguration"`
	// The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
	DeployAsApplicationConfiguration *ApplicationDeployAsApplicationConfiguration `pulumi:"deployAsApplicationConfiguration"`
	// The monitoring configuration of a Kinesis Data Analytics Studio notebook.
	MonitoringConfiguration *ApplicationZeppelinMonitoringConfiguration `pulumi:"monitoringConfiguration"`
}

// ApplicationZeppelinApplicationConfigurationInput is an input type that accepts ApplicationZeppelinApplicationConfigurationArgs and ApplicationZeppelinApplicationConfigurationOutput values.
// You can construct a concrete instance of `ApplicationZeppelinApplicationConfigurationInput` via:
//
//	ApplicationZeppelinApplicationConfigurationArgs{...}
type ApplicationZeppelinApplicationConfigurationInput interface {
	pulumi.Input

	ToApplicationZeppelinApplicationConfigurationOutput() ApplicationZeppelinApplicationConfigurationOutput
	ToApplicationZeppelinApplicationConfigurationOutputWithContext(context.Context) ApplicationZeppelinApplicationConfigurationOutput
}

// The configuration of a Kinesis Data Analytics Studio notebook.
type ApplicationZeppelinApplicationConfigurationArgs struct {
	// The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.
	CatalogConfiguration ApplicationCatalogConfigurationPtrInput `pulumi:"catalogConfiguration"`
	// A list of CustomArtifactConfiguration objects.
	CustomArtifactsConfiguration ApplicationCustomArtifactConfigurationArrayInput `pulumi:"customArtifactsConfiguration"`
	// The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
	DeployAsApplicationConfiguration ApplicationDeployAsApplicationConfigurationPtrInput `pulumi:"deployAsApplicationConfiguration"`
	// The monitoring configuration of a Kinesis Data Analytics Studio notebook.
	MonitoringConfiguration ApplicationZeppelinMonitoringConfigurationPtrInput `pulumi:"monitoringConfiguration"`
}

func (ApplicationZeppelinApplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationZeppelinApplicationConfiguration)(nil)).Elem()
}

func (i ApplicationZeppelinApplicationConfigurationArgs) ToApplicationZeppelinApplicationConfigurationOutput() ApplicationZeppelinApplicationConfigurationOutput {
	return i.ToApplicationZeppelinApplicationConfigurationOutputWithContext(context.Background())
}

func (i ApplicationZeppelinApplicationConfigurationArgs) ToApplicationZeppelinApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationZeppelinApplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationZeppelinApplicationConfigurationOutput)
}

func (i ApplicationZeppelinApplicationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationZeppelinApplicationConfiguration] {
	return pulumix.Output[ApplicationZeppelinApplicationConfiguration]{
		OutputState: i.ToApplicationZeppelinApplicationConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationZeppelinApplicationConfigurationArgs) ToApplicationZeppelinApplicationConfigurationPtrOutput() ApplicationZeppelinApplicationConfigurationPtrOutput {
	return i.ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationZeppelinApplicationConfigurationArgs) ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationZeppelinApplicationConfigurationOutput).ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(ctx)
}

// ApplicationZeppelinApplicationConfigurationPtrInput is an input type that accepts ApplicationZeppelinApplicationConfigurationArgs, ApplicationZeppelinApplicationConfigurationPtr and ApplicationZeppelinApplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationZeppelinApplicationConfigurationPtrInput` via:
//
//	        ApplicationZeppelinApplicationConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationZeppelinApplicationConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationZeppelinApplicationConfigurationPtrOutput() ApplicationZeppelinApplicationConfigurationPtrOutput
	ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(context.Context) ApplicationZeppelinApplicationConfigurationPtrOutput
}

type applicationZeppelinApplicationConfigurationPtrType ApplicationZeppelinApplicationConfigurationArgs

func ApplicationZeppelinApplicationConfigurationPtr(v *ApplicationZeppelinApplicationConfigurationArgs) ApplicationZeppelinApplicationConfigurationPtrInput {
	return (*applicationZeppelinApplicationConfigurationPtrType)(v)
}

func (*applicationZeppelinApplicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationZeppelinApplicationConfiguration)(nil)).Elem()
}

func (i *applicationZeppelinApplicationConfigurationPtrType) ToApplicationZeppelinApplicationConfigurationPtrOutput() ApplicationZeppelinApplicationConfigurationPtrOutput {
	return i.ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationZeppelinApplicationConfigurationPtrType) ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinApplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationZeppelinApplicationConfigurationPtrOutput)
}

func (i *applicationZeppelinApplicationConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationZeppelinApplicationConfiguration] {
	return pulumix.Output[*ApplicationZeppelinApplicationConfiguration]{
		OutputState: i.ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration of a Kinesis Data Analytics Studio notebook.
type ApplicationZeppelinApplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationZeppelinApplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationZeppelinApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationZeppelinApplicationConfigurationOutput) ToApplicationZeppelinApplicationConfigurationOutput() ApplicationZeppelinApplicationConfigurationOutput {
	return o
}

func (o ApplicationZeppelinApplicationConfigurationOutput) ToApplicationZeppelinApplicationConfigurationOutputWithContext(ctx context.Context) ApplicationZeppelinApplicationConfigurationOutput {
	return o
}

func (o ApplicationZeppelinApplicationConfigurationOutput) ToApplicationZeppelinApplicationConfigurationPtrOutput() ApplicationZeppelinApplicationConfigurationPtrOutput {
	return o.ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationZeppelinApplicationConfigurationOutput) ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinApplicationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationZeppelinApplicationConfiguration) *ApplicationZeppelinApplicationConfiguration {
		return &v
	}).(ApplicationZeppelinApplicationConfigurationPtrOutput)
}

func (o ApplicationZeppelinApplicationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationZeppelinApplicationConfiguration] {
	return pulumix.Output[ApplicationZeppelinApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.
func (o ApplicationZeppelinApplicationConfigurationOutput) CatalogConfiguration() ApplicationCatalogConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationZeppelinApplicationConfiguration) *ApplicationCatalogConfiguration {
		return v.CatalogConfiguration
	}).(ApplicationCatalogConfigurationPtrOutput)
}

// A list of CustomArtifactConfiguration objects.
func (o ApplicationZeppelinApplicationConfigurationOutput) CustomArtifactsConfiguration() ApplicationCustomArtifactConfigurationArrayOutput {
	return o.ApplyT(func(v ApplicationZeppelinApplicationConfiguration) []ApplicationCustomArtifactConfiguration {
		return v.CustomArtifactsConfiguration
	}).(ApplicationCustomArtifactConfigurationArrayOutput)
}

// The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
func (o ApplicationZeppelinApplicationConfigurationOutput) DeployAsApplicationConfiguration() ApplicationDeployAsApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationZeppelinApplicationConfiguration) *ApplicationDeployAsApplicationConfiguration {
		return v.DeployAsApplicationConfiguration
	}).(ApplicationDeployAsApplicationConfigurationPtrOutput)
}

// The monitoring configuration of a Kinesis Data Analytics Studio notebook.
func (o ApplicationZeppelinApplicationConfigurationOutput) MonitoringConfiguration() ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationZeppelinApplicationConfiguration) *ApplicationZeppelinMonitoringConfiguration {
		return v.MonitoringConfiguration
	}).(ApplicationZeppelinMonitoringConfigurationPtrOutput)
}

type ApplicationZeppelinApplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationZeppelinApplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationZeppelinApplicationConfiguration)(nil)).Elem()
}

func (o ApplicationZeppelinApplicationConfigurationPtrOutput) ToApplicationZeppelinApplicationConfigurationPtrOutput() ApplicationZeppelinApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationZeppelinApplicationConfigurationPtrOutput) ToApplicationZeppelinApplicationConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinApplicationConfigurationPtrOutput {
	return o
}

func (o ApplicationZeppelinApplicationConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationZeppelinApplicationConfiguration] {
	return pulumix.Output[*ApplicationZeppelinApplicationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationZeppelinApplicationConfigurationPtrOutput) Elem() ApplicationZeppelinApplicationConfigurationOutput {
	return o.ApplyT(func(v *ApplicationZeppelinApplicationConfiguration) ApplicationZeppelinApplicationConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationZeppelinApplicationConfiguration
		return ret
	}).(ApplicationZeppelinApplicationConfigurationOutput)
}

// The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.
func (o ApplicationZeppelinApplicationConfigurationPtrOutput) CatalogConfiguration() ApplicationCatalogConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationZeppelinApplicationConfiguration) *ApplicationCatalogConfiguration {
		if v == nil {
			return nil
		}
		return v.CatalogConfiguration
	}).(ApplicationCatalogConfigurationPtrOutput)
}

// A list of CustomArtifactConfiguration objects.
func (o ApplicationZeppelinApplicationConfigurationPtrOutput) CustomArtifactsConfiguration() ApplicationCustomArtifactConfigurationArrayOutput {
	return o.ApplyT(func(v *ApplicationZeppelinApplicationConfiguration) []ApplicationCustomArtifactConfiguration {
		if v == nil {
			return nil
		}
		return v.CustomArtifactsConfiguration
	}).(ApplicationCustomArtifactConfigurationArrayOutput)
}

// The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
func (o ApplicationZeppelinApplicationConfigurationPtrOutput) DeployAsApplicationConfiguration() ApplicationDeployAsApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationZeppelinApplicationConfiguration) *ApplicationDeployAsApplicationConfiguration {
		if v == nil {
			return nil
		}
		return v.DeployAsApplicationConfiguration
	}).(ApplicationDeployAsApplicationConfigurationPtrOutput)
}

// The monitoring configuration of a Kinesis Data Analytics Studio notebook.
func (o ApplicationZeppelinApplicationConfigurationPtrOutput) MonitoringConfiguration() ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationZeppelinApplicationConfiguration) *ApplicationZeppelinMonitoringConfiguration {
		if v == nil {
			return nil
		}
		return v.MonitoringConfiguration
	}).(ApplicationZeppelinMonitoringConfigurationPtrOutput)
}

// Describes configuration parameters for Amazon CloudWatch logging for a Kinesis Data Analytics Studio notebook. For more information about CloudWatch logging, see Monitoring.
type ApplicationZeppelinMonitoringConfiguration struct {
	// The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
	LogLevel *ApplicationZeppelinMonitoringConfigurationLogLevel `pulumi:"logLevel"`
}

// ApplicationZeppelinMonitoringConfigurationInput is an input type that accepts ApplicationZeppelinMonitoringConfigurationArgs and ApplicationZeppelinMonitoringConfigurationOutput values.
// You can construct a concrete instance of `ApplicationZeppelinMonitoringConfigurationInput` via:
//
//	ApplicationZeppelinMonitoringConfigurationArgs{...}
type ApplicationZeppelinMonitoringConfigurationInput interface {
	pulumi.Input

	ToApplicationZeppelinMonitoringConfigurationOutput() ApplicationZeppelinMonitoringConfigurationOutput
	ToApplicationZeppelinMonitoringConfigurationOutputWithContext(context.Context) ApplicationZeppelinMonitoringConfigurationOutput
}

// Describes configuration parameters for Amazon CloudWatch logging for a Kinesis Data Analytics Studio notebook. For more information about CloudWatch logging, see Monitoring.
type ApplicationZeppelinMonitoringConfigurationArgs struct {
	// The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
	LogLevel ApplicationZeppelinMonitoringConfigurationLogLevelPtrInput `pulumi:"logLevel"`
}

func (ApplicationZeppelinMonitoringConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationZeppelinMonitoringConfiguration)(nil)).Elem()
}

func (i ApplicationZeppelinMonitoringConfigurationArgs) ToApplicationZeppelinMonitoringConfigurationOutput() ApplicationZeppelinMonitoringConfigurationOutput {
	return i.ToApplicationZeppelinMonitoringConfigurationOutputWithContext(context.Background())
}

func (i ApplicationZeppelinMonitoringConfigurationArgs) ToApplicationZeppelinMonitoringConfigurationOutputWithContext(ctx context.Context) ApplicationZeppelinMonitoringConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationZeppelinMonitoringConfigurationOutput)
}

func (i ApplicationZeppelinMonitoringConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationZeppelinMonitoringConfiguration] {
	return pulumix.Output[ApplicationZeppelinMonitoringConfiguration]{
		OutputState: i.ToApplicationZeppelinMonitoringConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationZeppelinMonitoringConfigurationArgs) ToApplicationZeppelinMonitoringConfigurationPtrOutput() ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return i.ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationZeppelinMonitoringConfigurationArgs) ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationZeppelinMonitoringConfigurationOutput).ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(ctx)
}

// ApplicationZeppelinMonitoringConfigurationPtrInput is an input type that accepts ApplicationZeppelinMonitoringConfigurationArgs, ApplicationZeppelinMonitoringConfigurationPtr and ApplicationZeppelinMonitoringConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationZeppelinMonitoringConfigurationPtrInput` via:
//
//	        ApplicationZeppelinMonitoringConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationZeppelinMonitoringConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationZeppelinMonitoringConfigurationPtrOutput() ApplicationZeppelinMonitoringConfigurationPtrOutput
	ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(context.Context) ApplicationZeppelinMonitoringConfigurationPtrOutput
}

type applicationZeppelinMonitoringConfigurationPtrType ApplicationZeppelinMonitoringConfigurationArgs

func ApplicationZeppelinMonitoringConfigurationPtr(v *ApplicationZeppelinMonitoringConfigurationArgs) ApplicationZeppelinMonitoringConfigurationPtrInput {
	return (*applicationZeppelinMonitoringConfigurationPtrType)(v)
}

func (*applicationZeppelinMonitoringConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationZeppelinMonitoringConfiguration)(nil)).Elem()
}

func (i *applicationZeppelinMonitoringConfigurationPtrType) ToApplicationZeppelinMonitoringConfigurationPtrOutput() ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return i.ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationZeppelinMonitoringConfigurationPtrType) ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationZeppelinMonitoringConfigurationPtrOutput)
}

func (i *applicationZeppelinMonitoringConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationZeppelinMonitoringConfiguration] {
	return pulumix.Output[*ApplicationZeppelinMonitoringConfiguration]{
		OutputState: i.ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes configuration parameters for Amazon CloudWatch logging for a Kinesis Data Analytics Studio notebook. For more information about CloudWatch logging, see Monitoring.
type ApplicationZeppelinMonitoringConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationZeppelinMonitoringConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationZeppelinMonitoringConfiguration)(nil)).Elem()
}

func (o ApplicationZeppelinMonitoringConfigurationOutput) ToApplicationZeppelinMonitoringConfigurationOutput() ApplicationZeppelinMonitoringConfigurationOutput {
	return o
}

func (o ApplicationZeppelinMonitoringConfigurationOutput) ToApplicationZeppelinMonitoringConfigurationOutputWithContext(ctx context.Context) ApplicationZeppelinMonitoringConfigurationOutput {
	return o
}

func (o ApplicationZeppelinMonitoringConfigurationOutput) ToApplicationZeppelinMonitoringConfigurationPtrOutput() ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return o.ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationZeppelinMonitoringConfigurationOutput) ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationZeppelinMonitoringConfiguration) *ApplicationZeppelinMonitoringConfiguration {
		return &v
	}).(ApplicationZeppelinMonitoringConfigurationPtrOutput)
}

func (o ApplicationZeppelinMonitoringConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationZeppelinMonitoringConfiguration] {
	return pulumix.Output[ApplicationZeppelinMonitoringConfiguration]{
		OutputState: o.OutputState,
	}
}

// The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
func (o ApplicationZeppelinMonitoringConfigurationOutput) LogLevel() ApplicationZeppelinMonitoringConfigurationLogLevelPtrOutput {
	return o.ApplyT(func(v ApplicationZeppelinMonitoringConfiguration) *ApplicationZeppelinMonitoringConfigurationLogLevel {
		return v.LogLevel
	}).(ApplicationZeppelinMonitoringConfigurationLogLevelPtrOutput)
}

type ApplicationZeppelinMonitoringConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationZeppelinMonitoringConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationZeppelinMonitoringConfiguration)(nil)).Elem()
}

func (o ApplicationZeppelinMonitoringConfigurationPtrOutput) ToApplicationZeppelinMonitoringConfigurationPtrOutput() ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return o
}

func (o ApplicationZeppelinMonitoringConfigurationPtrOutput) ToApplicationZeppelinMonitoringConfigurationPtrOutputWithContext(ctx context.Context) ApplicationZeppelinMonitoringConfigurationPtrOutput {
	return o
}

func (o ApplicationZeppelinMonitoringConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationZeppelinMonitoringConfiguration] {
	return pulumix.Output[*ApplicationZeppelinMonitoringConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationZeppelinMonitoringConfigurationPtrOutput) Elem() ApplicationZeppelinMonitoringConfigurationOutput {
	return o.ApplyT(func(v *ApplicationZeppelinMonitoringConfiguration) ApplicationZeppelinMonitoringConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationZeppelinMonitoringConfiguration
		return ret
	}).(ApplicationZeppelinMonitoringConfigurationOutput)
}

// The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
func (o ApplicationZeppelinMonitoringConfigurationPtrOutput) LogLevel() ApplicationZeppelinMonitoringConfigurationLogLevelPtrOutput {
	return o.ApplyT(func(v *ApplicationZeppelinMonitoringConfiguration) *ApplicationZeppelinMonitoringConfigurationLogLevel {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(ApplicationZeppelinMonitoringConfigurationLogLevelPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCatalogConfigurationInput)(nil)).Elem(), ApplicationCatalogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCatalogConfigurationPtrInput)(nil)).Elem(), ApplicationCatalogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCheckpointConfigurationInput)(nil)).Elem(), ApplicationCheckpointConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCheckpointConfigurationPtrInput)(nil)).Elem(), ApplicationCheckpointConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionInput)(nil)).Elem(), ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCodeConfigurationInput)(nil)).Elem(), ApplicationCodeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCodeConfigurationPtrInput)(nil)).Elem(), ApplicationCodeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCodeContentInput)(nil)).Elem(), ApplicationCodeContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCodeContentPtrInput)(nil)).Elem(), ApplicationCodeContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationConfigurationInput)(nil)).Elem(), ApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationConfigurationPtrInput)(nil)).Elem(), ApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCsvMappingParametersInput)(nil)).Elem(), ApplicationCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCsvMappingParametersPtrInput)(nil)).Elem(), ApplicationCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCustomArtifactConfigurationInput)(nil)).Elem(), ApplicationCustomArtifactConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCustomArtifactConfigurationArrayInput)(nil)).Elem(), ApplicationCustomArtifactConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDeployAsApplicationConfigurationInput)(nil)).Elem(), ApplicationDeployAsApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDeployAsApplicationConfigurationPtrInput)(nil)).Elem(), ApplicationDeployAsApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationEnvironmentPropertiesInput)(nil)).Elem(), ApplicationEnvironmentPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationEnvironmentPropertiesPtrInput)(nil)).Elem(), ApplicationEnvironmentPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationFlinkApplicationConfigurationInput)(nil)).Elem(), ApplicationFlinkApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationFlinkApplicationConfigurationPtrInput)(nil)).Elem(), ApplicationFlinkApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationFlinkRunConfigurationInput)(nil)).Elem(), ApplicationFlinkRunConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationFlinkRunConfigurationPtrInput)(nil)).Elem(), ApplicationFlinkRunConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGlueDataCatalogConfigurationInput)(nil)).Elem(), ApplicationGlueDataCatalogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationGlueDataCatalogConfigurationPtrInput)(nil)).Elem(), ApplicationGlueDataCatalogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputTypeInput)(nil)).Elem(), ApplicationInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputTypeArrayInput)(nil)).Elem(), ApplicationInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputLambdaProcessorInput)(nil)).Elem(), ApplicationInputLambdaProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputLambdaProcessorPtrInput)(nil)).Elem(), ApplicationInputLambdaProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputParallelismInput)(nil)).Elem(), ApplicationInputParallelismArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputParallelismPtrInput)(nil)).Elem(), ApplicationInputParallelismArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputProcessingConfigurationInput)(nil)).Elem(), ApplicationInputProcessingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputProcessingConfigurationPtrInput)(nil)).Elem(), ApplicationInputProcessingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputSchemaInput)(nil)).Elem(), ApplicationInputSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationJsonMappingParametersInput)(nil)).Elem(), ApplicationJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationJsonMappingParametersPtrInput)(nil)).Elem(), ApplicationJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisFirehoseInputInput)(nil)).Elem(), ApplicationKinesisFirehoseInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisFirehoseInputPtrInput)(nil)).Elem(), ApplicationKinesisFirehoseInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisStreamsInputInput)(nil)).Elem(), ApplicationKinesisStreamsInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisStreamsInputPtrInput)(nil)).Elem(), ApplicationKinesisStreamsInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMaintenanceConfigurationInput)(nil)).Elem(), ApplicationMaintenanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMaintenanceConfigurationPtrInput)(nil)).Elem(), ApplicationMaintenanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMappingParametersInput)(nil)).Elem(), ApplicationMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMappingParametersPtrInput)(nil)).Elem(), ApplicationMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMavenReferenceInput)(nil)).Elem(), ApplicationMavenReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMavenReferencePtrInput)(nil)).Elem(), ApplicationMavenReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMonitoringConfigurationInput)(nil)).Elem(), ApplicationMonitoringConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMonitoringConfigurationPtrInput)(nil)).Elem(), ApplicationMonitoringConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceDestinationSchemaInput)(nil)).Elem(), ApplicationOutputResourceDestinationSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutputInput)(nil)).Elem(), ApplicationOutputResourceKinesisFirehoseOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutputPtrInput)(nil)).Elem(), ApplicationOutputResourceKinesisFirehoseOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutputInput)(nil)).Elem(), ApplicationOutputResourceKinesisStreamsOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutputPtrInput)(nil)).Elem(), ApplicationOutputResourceKinesisStreamsOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceLambdaOutputInput)(nil)).Elem(), ApplicationOutputResourceLambdaOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceLambdaOutputPtrInput)(nil)).Elem(), ApplicationOutputResourceLambdaOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceOutputTypeInput)(nil)).Elem(), ApplicationOutputResourceOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationParallelismConfigurationInput)(nil)).Elem(), ApplicationParallelismConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationParallelismConfigurationPtrInput)(nil)).Elem(), ApplicationParallelismConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPropertyGroupInput)(nil)).Elem(), ApplicationPropertyGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationPropertyGroupArrayInput)(nil)).Elem(), ApplicationPropertyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRecordColumnInput)(nil)).Elem(), ApplicationRecordColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRecordColumnArrayInput)(nil)).Elem(), ApplicationRecordColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRecordFormatInput)(nil)).Elem(), ApplicationRecordFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParametersInput)(nil)).Elem(), ApplicationReferenceDataSourceCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParametersPtrInput)(nil)).Elem(), ApplicationReferenceDataSourceCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParametersInput)(nil)).Elem(), ApplicationReferenceDataSourceJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParametersPtrInput)(nil)).Elem(), ApplicationReferenceDataSourceJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceMappingParametersInput)(nil)).Elem(), ApplicationReferenceDataSourceMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceMappingParametersPtrInput)(nil)).Elem(), ApplicationReferenceDataSourceMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumnInput)(nil)).Elem(), ApplicationReferenceDataSourceRecordColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumnArrayInput)(nil)).Elem(), ApplicationReferenceDataSourceRecordColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceRecordFormatInput)(nil)).Elem(), ApplicationReferenceDataSourceRecordFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceReferenceDataSourceInput)(nil)).Elem(), ApplicationReferenceDataSourceReferenceDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceReferenceSchemaInput)(nil)).Elem(), ApplicationReferenceDataSourceReferenceSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSourceInput)(nil)).Elem(), ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput)(nil)).Elem(), ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRestoreConfigurationInput)(nil)).Elem(), ApplicationRestoreConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRestoreConfigurationPtrInput)(nil)).Elem(), ApplicationRestoreConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRunConfigurationInput)(nil)).Elem(), ApplicationRunConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRunConfigurationPtrInput)(nil)).Elem(), ApplicationRunConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationS3ContentBaseLocationInput)(nil)).Elem(), ApplicationS3ContentBaseLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationS3ContentBaseLocationPtrInput)(nil)).Elem(), ApplicationS3ContentBaseLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationS3ContentLocationInput)(nil)).Elem(), ApplicationS3ContentLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationS3ContentLocationPtrInput)(nil)).Elem(), ApplicationS3ContentLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSnapshotConfigurationInput)(nil)).Elem(), ApplicationSnapshotConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSnapshotConfigurationPtrInput)(nil)).Elem(), ApplicationSnapshotConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSqlApplicationConfigurationInput)(nil)).Elem(), ApplicationSqlApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSqlApplicationConfigurationPtrInput)(nil)).Elem(), ApplicationSqlApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationTagInput)(nil)).Elem(), ApplicationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationTagArrayInput)(nil)).Elem(), ApplicationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationVpcConfigurationInput)(nil)).Elem(), ApplicationVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationVpcConfigurationArrayInput)(nil)).Elem(), ApplicationVpcConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationZeppelinApplicationConfigurationInput)(nil)).Elem(), ApplicationZeppelinApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationZeppelinApplicationConfigurationPtrInput)(nil)).Elem(), ApplicationZeppelinApplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationZeppelinMonitoringConfigurationInput)(nil)).Elem(), ApplicationZeppelinMonitoringConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationZeppelinMonitoringConfigurationPtrInput)(nil)).Elem(), ApplicationZeppelinMonitoringConfigurationArgs{})
	pulumi.RegisterOutputType(ApplicationCatalogConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationCatalogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationCheckpointConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationCheckpointConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionOutput{})
	pulumi.RegisterOutputType(ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput{})
	pulumi.RegisterOutputType(ApplicationCodeConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationCodeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationCodeContentOutput{})
	pulumi.RegisterOutputType(ApplicationCodeContentPtrOutput{})
	pulumi.RegisterOutputType(ApplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationCsvMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationCsvMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationCustomArtifactConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationCustomArtifactConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationDeployAsApplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationDeployAsApplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentPropertiesOutput{})
	pulumi.RegisterOutputType(ApplicationEnvironmentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationFlinkApplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationFlinkApplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationFlinkRunConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationFlinkRunConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationGlueDataCatalogConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationGlueDataCatalogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputTypeOutput{})
	pulumi.RegisterOutputType(ApplicationInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ApplicationInputLambdaProcessorOutput{})
	pulumi.RegisterOutputType(ApplicationInputLambdaProcessorPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputParallelismOutput{})
	pulumi.RegisterOutputType(ApplicationInputParallelismPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationInputProcessingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputSchemaOutput{})
	pulumi.RegisterOutputType(ApplicationJsonMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationJsonMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisFirehoseInputOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisFirehoseInputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisStreamsInputOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisStreamsInputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationMaintenanceConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationMaintenanceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationMavenReferenceOutput{})
	pulumi.RegisterOutputType(ApplicationMavenReferencePtrOutput{})
	pulumi.RegisterOutputType(ApplicationMonitoringConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationMonitoringConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceDestinationSchemaOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceDestinationSchemaPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisFirehoseOutputOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisStreamsOutputOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisStreamsOutputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceLambdaOutputOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceLambdaOutputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceOutputTypeOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceOutputTypePtrOutput{})
	pulumi.RegisterOutputType(ApplicationParallelismConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationParallelismConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationPropertyGroupOutput{})
	pulumi.RegisterOutputType(ApplicationPropertyGroupArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRecordColumnOutput{})
	pulumi.RegisterOutputType(ApplicationRecordColumnArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRecordFormatOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceCsvMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceJsonMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordColumnOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordColumnArrayOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordFormatOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordFormatPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceDataSourceOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceSchemaOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceSchemaPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationRestoreConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationRestoreConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationRunConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationRunConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationS3ContentBaseLocationOutput{})
	pulumi.RegisterOutputType(ApplicationS3ContentBaseLocationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationS3ContentLocationOutput{})
	pulumi.RegisterOutputType(ApplicationS3ContentLocationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSnapshotConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationSnapshotConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationSqlApplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationSqlApplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationTagOutput{})
	pulumi.RegisterOutputType(ApplicationTagArrayOutput{})
	pulumi.RegisterOutputType(ApplicationVpcConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationVpcConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationZeppelinApplicationConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationZeppelinApplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationZeppelinMonitoringConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationZeppelinMonitoringConfigurationPtrOutput{})
}
