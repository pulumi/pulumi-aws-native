// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinesisanalyticsv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption
func LookupApplicationCloudWatchLoggingOption(ctx *pulumi.Context, args *LookupApplicationCloudWatchLoggingOptionArgs, opts ...pulumi.InvokeOption) (*LookupApplicationCloudWatchLoggingOptionResult, error) {
	var rv LookupApplicationCloudWatchLoggingOptionResult
	err := ctx.Invoke("aws-native:kinesisanalyticsv2:getApplicationCloudWatchLoggingOption", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApplicationCloudWatchLoggingOptionArgs struct {
	Id string `pulumi:"id"`
}

type LookupApplicationCloudWatchLoggingOptionResult struct {
	CloudWatchLoggingOption *ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption `pulumi:"cloudWatchLoggingOption"`
	Id                      *string                                                    `pulumi:"id"`
}

func LookupApplicationCloudWatchLoggingOptionOutput(ctx *pulumi.Context, args LookupApplicationCloudWatchLoggingOptionOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationCloudWatchLoggingOptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationCloudWatchLoggingOptionResult, error) {
			args := v.(LookupApplicationCloudWatchLoggingOptionArgs)
			r, err := LookupApplicationCloudWatchLoggingOption(ctx, &args, opts...)
			var s LookupApplicationCloudWatchLoggingOptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationCloudWatchLoggingOptionResultOutput)
}

type LookupApplicationCloudWatchLoggingOptionOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupApplicationCloudWatchLoggingOptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationCloudWatchLoggingOptionArgs)(nil)).Elem()
}

type LookupApplicationCloudWatchLoggingOptionResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationCloudWatchLoggingOptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationCloudWatchLoggingOptionResult)(nil)).Elem()
}

func (o LookupApplicationCloudWatchLoggingOptionResultOutput) ToLookupApplicationCloudWatchLoggingOptionResultOutput() LookupApplicationCloudWatchLoggingOptionResultOutput {
	return o
}

func (o LookupApplicationCloudWatchLoggingOptionResultOutput) ToLookupApplicationCloudWatchLoggingOptionResultOutputWithContext(ctx context.Context) LookupApplicationCloudWatchLoggingOptionResultOutput {
	return o
}

func (o LookupApplicationCloudWatchLoggingOptionResultOutput) CloudWatchLoggingOption() ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput {
	return o.ApplyT(func(v LookupApplicationCloudWatchLoggingOptionResult) *ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption {
		return v.CloudWatchLoggingOption
	}).(ApplicationCloudWatchLoggingOptionCloudWatchLoggingOptionPtrOutput)
}

func (o LookupApplicationCloudWatchLoggingOptionResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationCloudWatchLoggingOptionResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationCloudWatchLoggingOptionResultOutput{})
}
