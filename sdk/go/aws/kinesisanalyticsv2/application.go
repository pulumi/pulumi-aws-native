// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesisanalyticsv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an Amazon Kinesis Data Analytics application. For information about creating a Kinesis Data Analytics application, see [Creating an Application](https://docs.aws.amazon.com/kinesisanalytics/latest/java/getting-started.html).
type Application struct {
	pulumi.CustomResourceState

	// Use this parameter to configure the application.
	ApplicationConfiguration ApplicationConfigurationPtrOutput `pulumi:"applicationConfiguration"`
	// The description of the application.
	ApplicationDescription pulumi.StringPtrOutput `pulumi:"applicationDescription"`
	// Used to configure start of maintenance window.
	ApplicationMaintenanceConfiguration ApplicationMaintenanceConfigurationPtrOutput `pulumi:"applicationMaintenanceConfiguration"`
	// To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
	ApplicationMode ApplicationModePtrOutput `pulumi:"applicationMode"`
	// The name of the application.
	ApplicationName pulumi.StringPtrOutput `pulumi:"applicationName"`
	// Specifies run configuration (start parameters) of a Kinesis Data Analytics application. Evaluated on update for RUNNING applications an only.
	RunConfiguration ApplicationRunConfigurationPtrOutput `pulumi:"runConfiguration"`
	// The runtime environment for the application.
	RuntimeEnvironment pulumi.StringOutput `pulumi:"runtimeEnvironment"`
	// Specifies the IAM role that the application uses to access external resources.
	ServiceExecutionRole pulumi.StringOutput `pulumi:"serviceExecutionRole"`
	// A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
	Tags ApplicationTagArrayOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuntimeEnvironment == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeEnvironment'")
	}
	if args.ServiceExecutionRole == nil {
		return nil, errors.New("invalid value for required argument 'ServiceExecutionRole'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationMode",
		"applicationName",
		"runtimeEnvironment",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:kinesisanalyticsv2:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:kinesisanalyticsv2:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Use this parameter to configure the application.
	ApplicationConfiguration *ApplicationConfiguration `pulumi:"applicationConfiguration"`
	// The description of the application.
	ApplicationDescription *string `pulumi:"applicationDescription"`
	// Used to configure start of maintenance window.
	ApplicationMaintenanceConfiguration *ApplicationMaintenanceConfiguration `pulumi:"applicationMaintenanceConfiguration"`
	// To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
	ApplicationMode *ApplicationMode `pulumi:"applicationMode"`
	// The name of the application.
	ApplicationName *string `pulumi:"applicationName"`
	// Specifies run configuration (start parameters) of a Kinesis Data Analytics application. Evaluated on update for RUNNING applications an only.
	RunConfiguration *ApplicationRunConfiguration `pulumi:"runConfiguration"`
	// The runtime environment for the application.
	RuntimeEnvironment string `pulumi:"runtimeEnvironment"`
	// Specifies the IAM role that the application uses to access external resources.
	ServiceExecutionRole string `pulumi:"serviceExecutionRole"`
	// A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
	Tags []ApplicationTag `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Use this parameter to configure the application.
	ApplicationConfiguration ApplicationConfigurationPtrInput
	// The description of the application.
	ApplicationDescription pulumi.StringPtrInput
	// Used to configure start of maintenance window.
	ApplicationMaintenanceConfiguration ApplicationMaintenanceConfigurationPtrInput
	// To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
	ApplicationMode ApplicationModePtrInput
	// The name of the application.
	ApplicationName pulumi.StringPtrInput
	// Specifies run configuration (start parameters) of a Kinesis Data Analytics application. Evaluated on update for RUNNING applications an only.
	RunConfiguration ApplicationRunConfigurationPtrInput
	// The runtime environment for the application.
	RuntimeEnvironment pulumi.StringInput
	// Specifies the IAM role that the application uses to access external resources.
	ServiceExecutionRole pulumi.StringInput
	// A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
	Tags ApplicationTagArrayInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

func (i *Application) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: i.ToApplicationOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: o.OutputState,
	}
}

// Use this parameter to configure the application.
func (o ApplicationOutput) ApplicationConfiguration() ApplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationConfigurationPtrOutput { return v.ApplicationConfiguration }).(ApplicationConfigurationPtrOutput)
}

// The description of the application.
func (o ApplicationOutput) ApplicationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationDescription }).(pulumi.StringPtrOutput)
}

// Used to configure start of maintenance window.
func (o ApplicationOutput) ApplicationMaintenanceConfiguration() ApplicationMaintenanceConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationMaintenanceConfigurationPtrOutput {
		return v.ApplicationMaintenanceConfiguration
	}).(ApplicationMaintenanceConfigurationPtrOutput)
}

// To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
func (o ApplicationOutput) ApplicationMode() ApplicationModePtrOutput {
	return o.ApplyT(func(v *Application) ApplicationModePtrOutput { return v.ApplicationMode }).(ApplicationModePtrOutput)
}

// The name of the application.
func (o ApplicationOutput) ApplicationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationName }).(pulumi.StringPtrOutput)
}

// Specifies run configuration (start parameters) of a Kinesis Data Analytics application. Evaluated on update for RUNNING applications an only.
func (o ApplicationOutput) RunConfiguration() ApplicationRunConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationRunConfigurationPtrOutput { return v.RunConfiguration }).(ApplicationRunConfigurationPtrOutput)
}

// The runtime environment for the application.
func (o ApplicationOutput) RuntimeEnvironment() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.RuntimeEnvironment }).(pulumi.StringOutput)
}

// Specifies the IAM role that the application uses to access external resources.
func (o ApplicationOutput) ServiceExecutionRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ServiceExecutionRole }).(pulumi.StringOutput)
}

// A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
func (o ApplicationOutput) Tags() ApplicationTagArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationTagArrayOutput { return v.Tags }).(ApplicationTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
