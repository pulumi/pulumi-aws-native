// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identitystore

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type Definition for AWS:IdentityStore::GroupMembership
type GroupMembership struct {
	pulumi.CustomResourceState

	// The unique identifier for a group in the identity store.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The globally unique identifier for the identity store.
	IdentityStoreId pulumi.StringOutput `pulumi:"identityStoreId"`
	// An object containing the identifier of a group member.
	MemberId GroupMembershipMemberIdOutput `pulumi:"memberId"`
	// The identifier for a GroupMembership in the identity store.
	MembershipId pulumi.StringOutput `pulumi:"membershipId"`
}

// NewGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewGroupMembership(ctx *pulumi.Context,
	name string, args *GroupMembershipArgs, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.IdentityStoreId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityStoreId'")
	}
	if args.MemberId == nil {
		return nil, errors.New("invalid value for required argument 'MemberId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"groupId",
		"identityStoreId",
		"memberId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupMembership
	err := ctx.RegisterResource("aws-native:identitystore:GroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMembership gets an existing GroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMembershipState, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	var resource GroupMembership
	err := ctx.ReadResource("aws-native:identitystore:GroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMembership resources.
type groupMembershipState struct {
}

type GroupMembershipState struct {
}

func (GroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipState)(nil)).Elem()
}

type groupMembershipArgs struct {
	// The unique identifier for a group in the identity store.
	GroupId string `pulumi:"groupId"`
	// The globally unique identifier for the identity store.
	IdentityStoreId string `pulumi:"identityStoreId"`
	// An object containing the identifier of a group member.
	MemberId GroupMembershipMemberId `pulumi:"memberId"`
}

// The set of arguments for constructing a GroupMembership resource.
type GroupMembershipArgs struct {
	// The unique identifier for a group in the identity store.
	GroupId pulumi.StringInput
	// The globally unique identifier for the identity store.
	IdentityStoreId pulumi.StringInput
	// An object containing the identifier of a group member.
	MemberId GroupMembershipMemberIdInput
}

func (GroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipArgs)(nil)).Elem()
}

type GroupMembershipInput interface {
	pulumi.Input

	ToGroupMembershipOutput() GroupMembershipOutput
	ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput
}

func (*GroupMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembership)(nil)).Elem()
}

func (i *GroupMembership) ToGroupMembershipOutput() GroupMembershipOutput {
	return i.ToGroupMembershipOutputWithContext(context.Background())
}

func (i *GroupMembership) ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipOutput)
}

func (i *GroupMembership) ToOutput(ctx context.Context) pulumix.Output[*GroupMembership] {
	return pulumix.Output[*GroupMembership]{
		OutputState: i.ToGroupMembershipOutputWithContext(ctx).OutputState,
	}
}

type GroupMembershipOutput struct{ *pulumi.OutputState }

func (GroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembership)(nil)).Elem()
}

func (o GroupMembershipOutput) ToGroupMembershipOutput() GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToOutput(ctx context.Context) pulumix.Output[*GroupMembership] {
	return pulumix.Output[*GroupMembership]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for a group in the identity store.
func (o GroupMembershipOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMembership) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The globally unique identifier for the identity store.
func (o GroupMembershipOutput) IdentityStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMembership) pulumi.StringOutput { return v.IdentityStoreId }).(pulumi.StringOutput)
}

// An object containing the identifier of a group member.
func (o GroupMembershipOutput) MemberId() GroupMembershipMemberIdOutput {
	return o.ApplyT(func(v *GroupMembership) GroupMembershipMemberIdOutput { return v.MemberId }).(GroupMembershipMemberIdOutput)
}

// The identifier for a GroupMembership in the identity store.
func (o GroupMembershipOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMembership) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipInput)(nil)).Elem(), &GroupMembership{})
	pulumi.RegisterOutputType(GroupMembershipOutput{})
}
