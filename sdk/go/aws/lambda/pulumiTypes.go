// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
type CodeSigningConfigAllowedPublishers struct {
	// List of Signing profile version Arns
	SigningProfileVersionArns []string `pulumi:"signingProfileVersionArns"`
}

// CodeSigningConfigAllowedPublishersInput is an input type that accepts CodeSigningConfigAllowedPublishersArgs and CodeSigningConfigAllowedPublishersOutput values.
// You can construct a concrete instance of `CodeSigningConfigAllowedPublishersInput` via:
//
//          CodeSigningConfigAllowedPublishersArgs{...}
type CodeSigningConfigAllowedPublishersInput interface {
	pulumi.Input

	ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput
	ToCodeSigningConfigAllowedPublishersOutputWithContext(context.Context) CodeSigningConfigAllowedPublishersOutput
}

// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
type CodeSigningConfigAllowedPublishersArgs struct {
	// List of Signing profile version Arns
	SigningProfileVersionArns pulumi.StringArrayInput `pulumi:"signingProfileVersionArns"`
}

func (CodeSigningConfigAllowedPublishersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput {
	return i.ToCodeSigningConfigAllowedPublishersOutputWithContext(context.Background())
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigAllowedPublishersOutput)
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersPtrOutput() CodeSigningConfigAllowedPublishersPtrOutput {
	return i.ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(context.Background())
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigAllowedPublishersOutput).ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(ctx)
}

// CodeSigningConfigAllowedPublishersPtrInput is an input type that accepts CodeSigningConfigAllowedPublishersArgs, CodeSigningConfigAllowedPublishersPtr and CodeSigningConfigAllowedPublishersPtrOutput values.
// You can construct a concrete instance of `CodeSigningConfigAllowedPublishersPtrInput` via:
//
//          CodeSigningConfigAllowedPublishersArgs{...}
//
//  or:
//
//          nil
type CodeSigningConfigAllowedPublishersPtrInput interface {
	pulumi.Input

	ToCodeSigningConfigAllowedPublishersPtrOutput() CodeSigningConfigAllowedPublishersPtrOutput
	ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(context.Context) CodeSigningConfigAllowedPublishersPtrOutput
}

type codeSigningConfigAllowedPublishersPtrType CodeSigningConfigAllowedPublishersArgs

func CodeSigningConfigAllowedPublishersPtr(v *CodeSigningConfigAllowedPublishersArgs) CodeSigningConfigAllowedPublishersPtrInput {
	return (*codeSigningConfigAllowedPublishersPtrType)(v)
}

func (*codeSigningConfigAllowedPublishersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (i *codeSigningConfigAllowedPublishersPtrType) ToCodeSigningConfigAllowedPublishersPtrOutput() CodeSigningConfigAllowedPublishersPtrOutput {
	return i.ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(context.Background())
}

func (i *codeSigningConfigAllowedPublishersPtrType) ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigAllowedPublishersPtrOutput)
}

// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
type CodeSigningConfigAllowedPublishersOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigAllowedPublishersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersPtrOutput() CodeSigningConfigAllowedPublishersPtrOutput {
	return o.ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(context.Background())
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeSigningConfigAllowedPublishers) *CodeSigningConfigAllowedPublishers {
		return &v
	}).(CodeSigningConfigAllowedPublishersPtrOutput)
}

// List of Signing profile version Arns
func (o CodeSigningConfigAllowedPublishersOutput) SigningProfileVersionArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CodeSigningConfigAllowedPublishers) []string { return v.SigningProfileVersionArns }).(pulumi.StringArrayOutput)
}

type CodeSigningConfigAllowedPublishersPtrOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigAllowedPublishersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (o CodeSigningConfigAllowedPublishersPtrOutput) ToCodeSigningConfigAllowedPublishersPtrOutput() CodeSigningConfigAllowedPublishersPtrOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersPtrOutput) ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersPtrOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersPtrOutput) Elem() CodeSigningConfigAllowedPublishersOutput {
	return o.ApplyT(func(v *CodeSigningConfigAllowedPublishers) CodeSigningConfigAllowedPublishers {
		if v != nil {
			return *v
		}
		var ret CodeSigningConfigAllowedPublishers
		return ret
	}).(CodeSigningConfigAllowedPublishersOutput)
}

// List of Signing profile version Arns
func (o CodeSigningConfigAllowedPublishersPtrOutput) SigningProfileVersionArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CodeSigningConfigAllowedPublishers) []string {
		if v == nil {
			return nil
		}
		return v.SigningProfileVersionArns
	}).(pulumi.StringArrayOutput)
}

// Policies to control how to act if a signature is invalid
type CodeSigningConfigCodeSigningPolicies struct {
	// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
	UntrustedArtifactOnDeployment string `pulumi:"untrustedArtifactOnDeployment"`
}

// CodeSigningConfigCodeSigningPoliciesInput is an input type that accepts CodeSigningConfigCodeSigningPoliciesArgs and CodeSigningConfigCodeSigningPoliciesOutput values.
// You can construct a concrete instance of `CodeSigningConfigCodeSigningPoliciesInput` via:
//
//          CodeSigningConfigCodeSigningPoliciesArgs{...}
type CodeSigningConfigCodeSigningPoliciesInput interface {
	pulumi.Input

	ToCodeSigningConfigCodeSigningPoliciesOutput() CodeSigningConfigCodeSigningPoliciesOutput
	ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(context.Context) CodeSigningConfigCodeSigningPoliciesOutput
}

// Policies to control how to act if a signature is invalid
type CodeSigningConfigCodeSigningPoliciesArgs struct {
	// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
	UntrustedArtifactOnDeployment pulumi.StringInput `pulumi:"untrustedArtifactOnDeployment"`
}

func (CodeSigningConfigCodeSigningPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesOutput() CodeSigningConfigCodeSigningPoliciesOutput {
	return i.ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(context.Background())
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigCodeSigningPoliciesOutput)
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return i.ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Background())
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigCodeSigningPoliciesOutput).ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx)
}

// CodeSigningConfigCodeSigningPoliciesPtrInput is an input type that accepts CodeSigningConfigCodeSigningPoliciesArgs, CodeSigningConfigCodeSigningPoliciesPtr and CodeSigningConfigCodeSigningPoliciesPtrOutput values.
// You can construct a concrete instance of `CodeSigningConfigCodeSigningPoliciesPtrInput` via:
//
//          CodeSigningConfigCodeSigningPoliciesArgs{...}
//
//  or:
//
//          nil
type CodeSigningConfigCodeSigningPoliciesPtrInput interface {
	pulumi.Input

	ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput
	ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput
}

type codeSigningConfigCodeSigningPoliciesPtrType CodeSigningConfigCodeSigningPoliciesArgs

func CodeSigningConfigCodeSigningPoliciesPtr(v *CodeSigningConfigCodeSigningPoliciesArgs) CodeSigningConfigCodeSigningPoliciesPtrInput {
	return (*codeSigningConfigCodeSigningPoliciesPtrType)(v)
}

func (*codeSigningConfigCodeSigningPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (i *codeSigningConfigCodeSigningPoliciesPtrType) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return i.ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Background())
}

func (i *codeSigningConfigCodeSigningPoliciesPtrType) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigCodeSigningPoliciesPtrOutput)
}

// Policies to control how to act if a signature is invalid
type CodeSigningConfigCodeSigningPoliciesOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigCodeSigningPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesOutput() CodeSigningConfigCodeSigningPoliciesOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o.ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Background())
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeSigningConfigCodeSigningPolicies) *CodeSigningConfigCodeSigningPolicies {
		return &v
	}).(CodeSigningConfigCodeSigningPoliciesPtrOutput)
}

// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
func (o CodeSigningConfigCodeSigningPoliciesOutput) UntrustedArtifactOnDeployment() pulumi.StringOutput {
	return o.ApplyT(func(v CodeSigningConfigCodeSigningPolicies) string { return v.UntrustedArtifactOnDeployment }).(pulumi.StringOutput)
}

type CodeSigningConfigCodeSigningPoliciesPtrOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigCodeSigningPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) Elem() CodeSigningConfigCodeSigningPoliciesOutput {
	return o.ApplyT(func(v *CodeSigningConfigCodeSigningPolicies) CodeSigningConfigCodeSigningPolicies {
		if v != nil {
			return *v
		}
		var ret CodeSigningConfigCodeSigningPolicies
		return ret
	}).(CodeSigningConfigCodeSigningPoliciesOutput)
}

// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) UntrustedArtifactOnDeployment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeSigningConfigCodeSigningPolicies) *string {
		if v == nil {
			return nil
		}
		return &v.UntrustedArtifactOnDeployment
	}).(pulumi.StringPtrOutput)
}

// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
type EventSourceMappingDestinationConfig struct {
	// The destination configuration for failed invocations.
	OnFailure *EventSourceMappingOnFailure `pulumi:"onFailure"`
}

// EventSourceMappingDestinationConfigInput is an input type that accepts EventSourceMappingDestinationConfigArgs and EventSourceMappingDestinationConfigOutput values.
// You can construct a concrete instance of `EventSourceMappingDestinationConfigInput` via:
//
//          EventSourceMappingDestinationConfigArgs{...}
type EventSourceMappingDestinationConfigInput interface {
	pulumi.Input

	ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput
	ToEventSourceMappingDestinationConfigOutputWithContext(context.Context) EventSourceMappingDestinationConfigOutput
}

// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
type EventSourceMappingDestinationConfigArgs struct {
	// The destination configuration for failed invocations.
	OnFailure EventSourceMappingOnFailurePtrInput `pulumi:"onFailure"`
}

func (EventSourceMappingDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput {
	return i.ToEventSourceMappingDestinationConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigOutput)
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return i.ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigOutput).ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx)
}

// EventSourceMappingDestinationConfigPtrInput is an input type that accepts EventSourceMappingDestinationConfigArgs, EventSourceMappingDestinationConfigPtr and EventSourceMappingDestinationConfigPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingDestinationConfigPtrInput` via:
//
//          EventSourceMappingDestinationConfigArgs{...}
//
//  or:
//
//          nil
type EventSourceMappingDestinationConfigPtrInput interface {
	pulumi.Input

	ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput
	ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Context) EventSourceMappingDestinationConfigPtrOutput
}

type eventSourceMappingDestinationConfigPtrType EventSourceMappingDestinationConfigArgs

func EventSourceMappingDestinationConfigPtr(v *EventSourceMappingDestinationConfigArgs) EventSourceMappingDestinationConfigPtrInput {
	return (*eventSourceMappingDestinationConfigPtrType)(v)
}

func (*eventSourceMappingDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (i *eventSourceMappingDestinationConfigPtrType) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return i.ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingDestinationConfigPtrType) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigPtrOutput)
}

// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
type EventSourceMappingDestinationConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return o.ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingDestinationConfig) *EventSourceMappingDestinationConfig {
		return &v
	}).(EventSourceMappingDestinationConfigPtrOutput)
}

// The destination configuration for failed invocations.
func (o EventSourceMappingDestinationConfigOutput) OnFailure() EventSourceMappingOnFailurePtrOutput {
	return o.ApplyT(func(v EventSourceMappingDestinationConfig) *EventSourceMappingOnFailure { return v.OnFailure }).(EventSourceMappingOnFailurePtrOutput)
}

type EventSourceMappingDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (o EventSourceMappingDestinationConfigPtrOutput) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return o
}

func (o EventSourceMappingDestinationConfigPtrOutput) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return o
}

func (o EventSourceMappingDestinationConfigPtrOutput) Elem() EventSourceMappingDestinationConfigOutput {
	return o.ApplyT(func(v *EventSourceMappingDestinationConfig) EventSourceMappingDestinationConfig {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingDestinationConfig
		return ret
	}).(EventSourceMappingDestinationConfigOutput)
}

// The destination configuration for failed invocations.
func (o EventSourceMappingDestinationConfigPtrOutput) OnFailure() EventSourceMappingOnFailurePtrOutput {
	return o.ApplyT(func(v *EventSourceMappingDestinationConfig) *EventSourceMappingOnFailure {
		if v == nil {
			return nil
		}
		return v.OnFailure
	}).(EventSourceMappingOnFailurePtrOutput)
}

// The endpoints used by AWS Lambda to access a self-managed event source.
type EventSourceMappingEndpoints struct {
	// A list of Kafka server endpoints.
	KafkaBootstrapServers []string `pulumi:"kafkaBootstrapServers"`
}

// EventSourceMappingEndpointsInput is an input type that accepts EventSourceMappingEndpointsArgs and EventSourceMappingEndpointsOutput values.
// You can construct a concrete instance of `EventSourceMappingEndpointsInput` via:
//
//          EventSourceMappingEndpointsArgs{...}
type EventSourceMappingEndpointsInput interface {
	pulumi.Input

	ToEventSourceMappingEndpointsOutput() EventSourceMappingEndpointsOutput
	ToEventSourceMappingEndpointsOutputWithContext(context.Context) EventSourceMappingEndpointsOutput
}

// The endpoints used by AWS Lambda to access a self-managed event source.
type EventSourceMappingEndpointsArgs struct {
	// A list of Kafka server endpoints.
	KafkaBootstrapServers pulumi.StringArrayInput `pulumi:"kafkaBootstrapServers"`
}

func (EventSourceMappingEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingEndpoints)(nil)).Elem()
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsOutput() EventSourceMappingEndpointsOutput {
	return i.ToEventSourceMappingEndpointsOutputWithContext(context.Background())
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsOutputWithContext(ctx context.Context) EventSourceMappingEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingEndpointsOutput)
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return i.ToEventSourceMappingEndpointsPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingEndpointsOutput).ToEventSourceMappingEndpointsPtrOutputWithContext(ctx)
}

// EventSourceMappingEndpointsPtrInput is an input type that accepts EventSourceMappingEndpointsArgs, EventSourceMappingEndpointsPtr and EventSourceMappingEndpointsPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingEndpointsPtrInput` via:
//
//          EventSourceMappingEndpointsArgs{...}
//
//  or:
//
//          nil
type EventSourceMappingEndpointsPtrInput interface {
	pulumi.Input

	ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput
	ToEventSourceMappingEndpointsPtrOutputWithContext(context.Context) EventSourceMappingEndpointsPtrOutput
}

type eventSourceMappingEndpointsPtrType EventSourceMappingEndpointsArgs

func EventSourceMappingEndpointsPtr(v *EventSourceMappingEndpointsArgs) EventSourceMappingEndpointsPtrInput {
	return (*eventSourceMappingEndpointsPtrType)(v)
}

func (*eventSourceMappingEndpointsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingEndpoints)(nil)).Elem()
}

func (i *eventSourceMappingEndpointsPtrType) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return i.ToEventSourceMappingEndpointsPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingEndpointsPtrType) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingEndpointsPtrOutput)
}

// The endpoints used by AWS Lambda to access a self-managed event source.
type EventSourceMappingEndpointsOutput struct{ *pulumi.OutputState }

func (EventSourceMappingEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingEndpoints)(nil)).Elem()
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsOutput() EventSourceMappingEndpointsOutput {
	return o
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsOutputWithContext(ctx context.Context) EventSourceMappingEndpointsOutput {
	return o
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return o.ToEventSourceMappingEndpointsPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingEndpoints) *EventSourceMappingEndpoints {
		return &v
	}).(EventSourceMappingEndpointsPtrOutput)
}

// A list of Kafka server endpoints.
func (o EventSourceMappingEndpointsOutput) KafkaBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSourceMappingEndpoints) []string { return v.KafkaBootstrapServers }).(pulumi.StringArrayOutput)
}

type EventSourceMappingEndpointsPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingEndpointsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingEndpoints)(nil)).Elem()
}

func (o EventSourceMappingEndpointsPtrOutput) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return o
}

func (o EventSourceMappingEndpointsPtrOutput) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return o
}

func (o EventSourceMappingEndpointsPtrOutput) Elem() EventSourceMappingEndpointsOutput {
	return o.ApplyT(func(v *EventSourceMappingEndpoints) EventSourceMappingEndpoints {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingEndpoints
		return ret
	}).(EventSourceMappingEndpointsOutput)
}

// A list of Kafka server endpoints.
func (o EventSourceMappingEndpointsPtrOutput) KafkaBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSourceMappingEndpoints) []string {
		if v == nil {
			return nil
		}
		return v.KafkaBootstrapServers
	}).(pulumi.StringArrayOutput)
}

// A destination for events that failed processing.
type EventSourceMappingOnFailure struct {
	// The Amazon Resource Name (ARN) of the destination resource.
	Destination *string `pulumi:"destination"`
}

// EventSourceMappingOnFailureInput is an input type that accepts EventSourceMappingOnFailureArgs and EventSourceMappingOnFailureOutput values.
// You can construct a concrete instance of `EventSourceMappingOnFailureInput` via:
//
//          EventSourceMappingOnFailureArgs{...}
type EventSourceMappingOnFailureInput interface {
	pulumi.Input

	ToEventSourceMappingOnFailureOutput() EventSourceMappingOnFailureOutput
	ToEventSourceMappingOnFailureOutputWithContext(context.Context) EventSourceMappingOnFailureOutput
}

// A destination for events that failed processing.
type EventSourceMappingOnFailureArgs struct {
	// The Amazon Resource Name (ARN) of the destination resource.
	Destination pulumi.StringPtrInput `pulumi:"destination"`
}

func (EventSourceMappingOnFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingOnFailure)(nil)).Elem()
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailureOutput() EventSourceMappingOnFailureOutput {
	return i.ToEventSourceMappingOnFailureOutputWithContext(context.Background())
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailureOutputWithContext(ctx context.Context) EventSourceMappingOnFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOnFailureOutput)
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return i.ToEventSourceMappingOnFailurePtrOutputWithContext(context.Background())
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOnFailureOutput).ToEventSourceMappingOnFailurePtrOutputWithContext(ctx)
}

// EventSourceMappingOnFailurePtrInput is an input type that accepts EventSourceMappingOnFailureArgs, EventSourceMappingOnFailurePtr and EventSourceMappingOnFailurePtrOutput values.
// You can construct a concrete instance of `EventSourceMappingOnFailurePtrInput` via:
//
//          EventSourceMappingOnFailureArgs{...}
//
//  or:
//
//          nil
type EventSourceMappingOnFailurePtrInput interface {
	pulumi.Input

	ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput
	ToEventSourceMappingOnFailurePtrOutputWithContext(context.Context) EventSourceMappingOnFailurePtrOutput
}

type eventSourceMappingOnFailurePtrType EventSourceMappingOnFailureArgs

func EventSourceMappingOnFailurePtr(v *EventSourceMappingOnFailureArgs) EventSourceMappingOnFailurePtrInput {
	return (*eventSourceMappingOnFailurePtrType)(v)
}

func (*eventSourceMappingOnFailurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingOnFailure)(nil)).Elem()
}

func (i *eventSourceMappingOnFailurePtrType) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return i.ToEventSourceMappingOnFailurePtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingOnFailurePtrType) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOnFailurePtrOutput)
}

// A destination for events that failed processing.
type EventSourceMappingOnFailureOutput struct{ *pulumi.OutputState }

func (EventSourceMappingOnFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingOnFailure)(nil)).Elem()
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailureOutput() EventSourceMappingOnFailureOutput {
	return o
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailureOutputWithContext(ctx context.Context) EventSourceMappingOnFailureOutput {
	return o
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return o.ToEventSourceMappingOnFailurePtrOutputWithContext(context.Background())
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingOnFailure) *EventSourceMappingOnFailure {
		return &v
	}).(EventSourceMappingOnFailurePtrOutput)
}

// The Amazon Resource Name (ARN) of the destination resource.
func (o EventSourceMappingOnFailureOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingOnFailure) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

type EventSourceMappingOnFailurePtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingOnFailurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingOnFailure)(nil)).Elem()
}

func (o EventSourceMappingOnFailurePtrOutput) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return o
}

func (o EventSourceMappingOnFailurePtrOutput) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return o
}

func (o EventSourceMappingOnFailurePtrOutput) Elem() EventSourceMappingOnFailureOutput {
	return o.ApplyT(func(v *EventSourceMappingOnFailure) EventSourceMappingOnFailure {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingOnFailure
		return ret
	}).(EventSourceMappingOnFailureOutput)
}

// The Amazon Resource Name (ARN) of the destination resource.
func (o EventSourceMappingOnFailurePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingOnFailure) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// The configuration used by AWS Lambda to access a self-managed event source.
type EventSourceMappingSelfManagedEventSource struct {
	// The endpoints for a self-managed event source.
	Endpoints *EventSourceMappingEndpoints `pulumi:"endpoints"`
}

// EventSourceMappingSelfManagedEventSourceInput is an input type that accepts EventSourceMappingSelfManagedEventSourceArgs and EventSourceMappingSelfManagedEventSourceOutput values.
// You can construct a concrete instance of `EventSourceMappingSelfManagedEventSourceInput` via:
//
//          EventSourceMappingSelfManagedEventSourceArgs{...}
type EventSourceMappingSelfManagedEventSourceInput interface {
	pulumi.Input

	ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput
	ToEventSourceMappingSelfManagedEventSourceOutputWithContext(context.Context) EventSourceMappingSelfManagedEventSourceOutput
}

// The configuration used by AWS Lambda to access a self-managed event source.
type EventSourceMappingSelfManagedEventSourceArgs struct {
	// The endpoints for a self-managed event source.
	Endpoints EventSourceMappingEndpointsPtrInput `pulumi:"endpoints"`
}

func (EventSourceMappingSelfManagedEventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput {
	return i.ToEventSourceMappingSelfManagedEventSourceOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourceOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedEventSourceOutput)
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return i.ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedEventSourceOutput).ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx)
}

// EventSourceMappingSelfManagedEventSourcePtrInput is an input type that accepts EventSourceMappingSelfManagedEventSourceArgs, EventSourceMappingSelfManagedEventSourcePtr and EventSourceMappingSelfManagedEventSourcePtrOutput values.
// You can construct a concrete instance of `EventSourceMappingSelfManagedEventSourcePtrInput` via:
//
//          EventSourceMappingSelfManagedEventSourceArgs{...}
//
//  or:
//
//          nil
type EventSourceMappingSelfManagedEventSourcePtrInput interface {
	pulumi.Input

	ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput
	ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput
}

type eventSourceMappingSelfManagedEventSourcePtrType EventSourceMappingSelfManagedEventSourceArgs

func EventSourceMappingSelfManagedEventSourcePtr(v *EventSourceMappingSelfManagedEventSourceArgs) EventSourceMappingSelfManagedEventSourcePtrInput {
	return (*eventSourceMappingSelfManagedEventSourcePtrType)(v)
}

func (*eventSourceMappingSelfManagedEventSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (i *eventSourceMappingSelfManagedEventSourcePtrType) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return i.ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingSelfManagedEventSourcePtrType) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedEventSourcePtrOutput)
}

// The configuration used by AWS Lambda to access a self-managed event source.
type EventSourceMappingSelfManagedEventSourceOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedEventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourceOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourceOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o.ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Background())
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingSelfManagedEventSource) *EventSourceMappingSelfManagedEventSource {
		return &v
	}).(EventSourceMappingSelfManagedEventSourcePtrOutput)
}

// The endpoints for a self-managed event source.
func (o EventSourceMappingSelfManagedEventSourceOutput) Endpoints() EventSourceMappingEndpointsPtrOutput {
	return o.ApplyT(func(v EventSourceMappingSelfManagedEventSource) *EventSourceMappingEndpoints { return v.Endpoints }).(EventSourceMappingEndpointsPtrOutput)
}

type EventSourceMappingSelfManagedEventSourcePtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedEventSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedEventSourcePtrOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourcePtrOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourcePtrOutput) Elem() EventSourceMappingSelfManagedEventSourceOutput {
	return o.ApplyT(func(v *EventSourceMappingSelfManagedEventSource) EventSourceMappingSelfManagedEventSource {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingSelfManagedEventSource
		return ret
	}).(EventSourceMappingSelfManagedEventSourceOutput)
}

// The endpoints for a self-managed event source.
func (o EventSourceMappingSelfManagedEventSourcePtrOutput) Endpoints() EventSourceMappingEndpointsPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingSelfManagedEventSource) *EventSourceMappingEndpoints {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(EventSourceMappingEndpointsPtrOutput)
}

// The configuration used by AWS Lambda to access event source
type EventSourceMappingSourceAccessConfiguration struct {
	// The type of source access configuration.
	Type *string `pulumi:"type"`
	// The URI for the source access configuration resource.
	URI *string `pulumi:"uRI"`
}

// EventSourceMappingSourceAccessConfigurationInput is an input type that accepts EventSourceMappingSourceAccessConfigurationArgs and EventSourceMappingSourceAccessConfigurationOutput values.
// You can construct a concrete instance of `EventSourceMappingSourceAccessConfigurationInput` via:
//
//          EventSourceMappingSourceAccessConfigurationArgs{...}
type EventSourceMappingSourceAccessConfigurationInput interface {
	pulumi.Input

	ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput
	ToEventSourceMappingSourceAccessConfigurationOutputWithContext(context.Context) EventSourceMappingSourceAccessConfigurationOutput
}

// The configuration used by AWS Lambda to access event source
type EventSourceMappingSourceAccessConfigurationArgs struct {
	// The type of source access configuration.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The URI for the source access configuration resource.
	URI pulumi.StringPtrInput `pulumi:"uRI"`
}

func (EventSourceMappingSourceAccessConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (i EventSourceMappingSourceAccessConfigurationArgs) ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput {
	return i.ToEventSourceMappingSourceAccessConfigurationOutputWithContext(context.Background())
}

func (i EventSourceMappingSourceAccessConfigurationArgs) ToEventSourceMappingSourceAccessConfigurationOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSourceAccessConfigurationOutput)
}

// EventSourceMappingSourceAccessConfigurationArrayInput is an input type that accepts EventSourceMappingSourceAccessConfigurationArray and EventSourceMappingSourceAccessConfigurationArrayOutput values.
// You can construct a concrete instance of `EventSourceMappingSourceAccessConfigurationArrayInput` via:
//
//          EventSourceMappingSourceAccessConfigurationArray{ EventSourceMappingSourceAccessConfigurationArgs{...} }
type EventSourceMappingSourceAccessConfigurationArrayInput interface {
	pulumi.Input

	ToEventSourceMappingSourceAccessConfigurationArrayOutput() EventSourceMappingSourceAccessConfigurationArrayOutput
	ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(context.Context) EventSourceMappingSourceAccessConfigurationArrayOutput
}

type EventSourceMappingSourceAccessConfigurationArray []EventSourceMappingSourceAccessConfigurationInput

func (EventSourceMappingSourceAccessConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (i EventSourceMappingSourceAccessConfigurationArray) ToEventSourceMappingSourceAccessConfigurationArrayOutput() EventSourceMappingSourceAccessConfigurationArrayOutput {
	return i.ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(context.Background())
}

func (i EventSourceMappingSourceAccessConfigurationArray) ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSourceAccessConfigurationArrayOutput)
}

// The configuration used by AWS Lambda to access event source
type EventSourceMappingSourceAccessConfigurationOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSourceAccessConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToEventSourceMappingSourceAccessConfigurationOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationOutput {
	return o
}

// The type of source access configuration.
func (o EventSourceMappingSourceAccessConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingSourceAccessConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The URI for the source access configuration resource.
func (o EventSourceMappingSourceAccessConfigurationOutput) URI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingSourceAccessConfiguration) *string { return v.URI }).(pulumi.StringPtrOutput)
}

type EventSourceMappingSourceAccessConfigurationArrayOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSourceAccessConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (o EventSourceMappingSourceAccessConfigurationArrayOutput) ToEventSourceMappingSourceAccessConfigurationArrayOutput() EventSourceMappingSourceAccessConfigurationArrayOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationArrayOutput) ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationArrayOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationArrayOutput) Index(i pulumi.IntInput) EventSourceMappingSourceAccessConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSourceMappingSourceAccessConfiguration {
		return vs[0].([]EventSourceMappingSourceAccessConfiguration)[vs[1].(int)]
	}).(EventSourceMappingSourceAccessConfigurationOutput)
}

type FunctionCode struct {
	// ImageUri.
	ImageUri *string `pulumi:"imageUri"`
	// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The Amazon S3 key of the deployment package.
	S3Key *string `pulumi:"s3Key"`
	// For versioned objects, the version of the deployment package object to use.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
	ZipFile *string `pulumi:"zipFile"`
}

// FunctionCodeInput is an input type that accepts FunctionCodeArgs and FunctionCodeOutput values.
// You can construct a concrete instance of `FunctionCodeInput` via:
//
//          FunctionCodeArgs{...}
type FunctionCodeInput interface {
	pulumi.Input

	ToFunctionCodeOutput() FunctionCodeOutput
	ToFunctionCodeOutputWithContext(context.Context) FunctionCodeOutput
}

type FunctionCodeArgs struct {
	// ImageUri.
	ImageUri pulumi.StringPtrInput `pulumi:"imageUri"`
	// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
	S3Bucket pulumi.StringPtrInput `pulumi:"s3Bucket"`
	// The Amazon S3 key of the deployment package.
	S3Key pulumi.StringPtrInput `pulumi:"s3Key"`
	// For versioned objects, the version of the deployment package object to use.
	S3ObjectVersion pulumi.StringPtrInput `pulumi:"s3ObjectVersion"`
	// The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
	ZipFile pulumi.StringPtrInput `pulumi:"zipFile"`
}

func (FunctionCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionCode)(nil)).Elem()
}

func (i FunctionCodeArgs) ToFunctionCodeOutput() FunctionCodeOutput {
	return i.ToFunctionCodeOutputWithContext(context.Background())
}

func (i FunctionCodeArgs) ToFunctionCodeOutputWithContext(ctx context.Context) FunctionCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionCodeOutput)
}

func (i FunctionCodeArgs) ToFunctionCodePtrOutput() FunctionCodePtrOutput {
	return i.ToFunctionCodePtrOutputWithContext(context.Background())
}

func (i FunctionCodeArgs) ToFunctionCodePtrOutputWithContext(ctx context.Context) FunctionCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionCodeOutput).ToFunctionCodePtrOutputWithContext(ctx)
}

// FunctionCodePtrInput is an input type that accepts FunctionCodeArgs, FunctionCodePtr and FunctionCodePtrOutput values.
// You can construct a concrete instance of `FunctionCodePtrInput` via:
//
//          FunctionCodeArgs{...}
//
//  or:
//
//          nil
type FunctionCodePtrInput interface {
	pulumi.Input

	ToFunctionCodePtrOutput() FunctionCodePtrOutput
	ToFunctionCodePtrOutputWithContext(context.Context) FunctionCodePtrOutput
}

type functionCodePtrType FunctionCodeArgs

func FunctionCodePtr(v *FunctionCodeArgs) FunctionCodePtrInput {
	return (*functionCodePtrType)(v)
}

func (*functionCodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionCode)(nil)).Elem()
}

func (i *functionCodePtrType) ToFunctionCodePtrOutput() FunctionCodePtrOutput {
	return i.ToFunctionCodePtrOutputWithContext(context.Background())
}

func (i *functionCodePtrType) ToFunctionCodePtrOutputWithContext(ctx context.Context) FunctionCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionCodePtrOutput)
}

type FunctionCodeOutput struct{ *pulumi.OutputState }

func (FunctionCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionCode)(nil)).Elem()
}

func (o FunctionCodeOutput) ToFunctionCodeOutput() FunctionCodeOutput {
	return o
}

func (o FunctionCodeOutput) ToFunctionCodeOutputWithContext(ctx context.Context) FunctionCodeOutput {
	return o
}

func (o FunctionCodeOutput) ToFunctionCodePtrOutput() FunctionCodePtrOutput {
	return o.ToFunctionCodePtrOutputWithContext(context.Background())
}

func (o FunctionCodeOutput) ToFunctionCodePtrOutputWithContext(ctx context.Context) FunctionCodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionCode) *FunctionCode {
		return &v
	}).(FunctionCodePtrOutput)
}

// ImageUri.
func (o FunctionCodeOutput) ImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.ImageUri }).(pulumi.StringPtrOutput)
}

// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
func (o FunctionCodeOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 key of the deployment package.
func (o FunctionCodeOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.S3Key }).(pulumi.StringPtrOutput)
}

// For versioned objects, the version of the deployment package object to use.
func (o FunctionCodeOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.S3ObjectVersion }).(pulumi.StringPtrOutput)
}

// The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
func (o FunctionCodeOutput) ZipFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.ZipFile }).(pulumi.StringPtrOutput)
}

type FunctionCodePtrOutput struct{ *pulumi.OutputState }

func (FunctionCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionCode)(nil)).Elem()
}

func (o FunctionCodePtrOutput) ToFunctionCodePtrOutput() FunctionCodePtrOutput {
	return o
}

func (o FunctionCodePtrOutput) ToFunctionCodePtrOutputWithContext(ctx context.Context) FunctionCodePtrOutput {
	return o
}

func (o FunctionCodePtrOutput) Elem() FunctionCodeOutput {
	return o.ApplyT(func(v *FunctionCode) FunctionCode {
		if v != nil {
			return *v
		}
		var ret FunctionCode
		return ret
	}).(FunctionCodeOutput)
}

// ImageUri.
func (o FunctionCodePtrOutput) ImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionCode) *string {
		if v == nil {
			return nil
		}
		return v.ImageUri
	}).(pulumi.StringPtrOutput)
}

// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
func (o FunctionCodePtrOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionCode) *string {
		if v == nil {
			return nil
		}
		return v.S3Bucket
	}).(pulumi.StringPtrOutput)
}

// The Amazon S3 key of the deployment package.
func (o FunctionCodePtrOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionCode) *string {
		if v == nil {
			return nil
		}
		return v.S3Key
	}).(pulumi.StringPtrOutput)
}

// For versioned objects, the version of the deployment package object to use.
func (o FunctionCodePtrOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionCode) *string {
		if v == nil {
			return nil
		}
		return v.S3ObjectVersion
	}).(pulumi.StringPtrOutput)
}

// The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
func (o FunctionCodePtrOutput) ZipFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionCode) *string {
		if v == nil {
			return nil
		}
		return v.ZipFile
	}).(pulumi.StringPtrOutput)
}

// The dead-letter queue for failed asynchronous invocations.
type FunctionDeadLetterConfig struct {
	// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
	TargetArn *string `pulumi:"targetArn"`
}

// FunctionDeadLetterConfigInput is an input type that accepts FunctionDeadLetterConfigArgs and FunctionDeadLetterConfigOutput values.
// You can construct a concrete instance of `FunctionDeadLetterConfigInput` via:
//
//          FunctionDeadLetterConfigArgs{...}
type FunctionDeadLetterConfigInput interface {
	pulumi.Input

	ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput
	ToFunctionDeadLetterConfigOutputWithContext(context.Context) FunctionDeadLetterConfigOutput
}

// The dead-letter queue for failed asynchronous invocations.
type FunctionDeadLetterConfigArgs struct {
	// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
	TargetArn pulumi.StringPtrInput `pulumi:"targetArn"`
}

func (FunctionDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionDeadLetterConfig)(nil)).Elem()
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput {
	return i.ToFunctionDeadLetterConfigOutputWithContext(context.Background())
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigOutputWithContext(ctx context.Context) FunctionDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionDeadLetterConfigOutput)
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return i.ToFunctionDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionDeadLetterConfigOutput).ToFunctionDeadLetterConfigPtrOutputWithContext(ctx)
}

// FunctionDeadLetterConfigPtrInput is an input type that accepts FunctionDeadLetterConfigArgs, FunctionDeadLetterConfigPtr and FunctionDeadLetterConfigPtrOutput values.
// You can construct a concrete instance of `FunctionDeadLetterConfigPtrInput` via:
//
//          FunctionDeadLetterConfigArgs{...}
//
//  or:
//
//          nil
type FunctionDeadLetterConfigPtrInput interface {
	pulumi.Input

	ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput
	ToFunctionDeadLetterConfigPtrOutputWithContext(context.Context) FunctionDeadLetterConfigPtrOutput
}

type functionDeadLetterConfigPtrType FunctionDeadLetterConfigArgs

func FunctionDeadLetterConfigPtr(v *FunctionDeadLetterConfigArgs) FunctionDeadLetterConfigPtrInput {
	return (*functionDeadLetterConfigPtrType)(v)
}

func (*functionDeadLetterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionDeadLetterConfig)(nil)).Elem()
}

func (i *functionDeadLetterConfigPtrType) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return i.ToFunctionDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i *functionDeadLetterConfigPtrType) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionDeadLetterConfigPtrOutput)
}

// The dead-letter queue for failed asynchronous invocations.
type FunctionDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (FunctionDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionDeadLetterConfig)(nil)).Elem()
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput {
	return o
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigOutputWithContext(ctx context.Context) FunctionDeadLetterConfigOutput {
	return o
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return o.ToFunctionDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionDeadLetterConfig) *FunctionDeadLetterConfig {
		return &v
	}).(FunctionDeadLetterConfigPtrOutput)
}

// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
func (o FunctionDeadLetterConfigOutput) TargetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionDeadLetterConfig) *string { return v.TargetArn }).(pulumi.StringPtrOutput)
}

type FunctionDeadLetterConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionDeadLetterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionDeadLetterConfig)(nil)).Elem()
}

func (o FunctionDeadLetterConfigPtrOutput) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return o
}

func (o FunctionDeadLetterConfigPtrOutput) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return o
}

func (o FunctionDeadLetterConfigPtrOutput) Elem() FunctionDeadLetterConfigOutput {
	return o.ApplyT(func(v *FunctionDeadLetterConfig) FunctionDeadLetterConfig {
		if v != nil {
			return *v
		}
		var ret FunctionDeadLetterConfig
		return ret
	}).(FunctionDeadLetterConfigOutput)
}

// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
func (o FunctionDeadLetterConfigPtrOutput) TargetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionDeadLetterConfig) *string {
		if v == nil {
			return nil
		}
		return v.TargetArn
	}).(pulumi.StringPtrOutput)
}

// A function's environment variable settings.
type FunctionEnvironment struct {
	// Environment variable key-value pairs.
	Variables interface{} `pulumi:"variables"`
}

// FunctionEnvironmentInput is an input type that accepts FunctionEnvironmentArgs and FunctionEnvironmentOutput values.
// You can construct a concrete instance of `FunctionEnvironmentInput` via:
//
//          FunctionEnvironmentArgs{...}
type FunctionEnvironmentInput interface {
	pulumi.Input

	ToFunctionEnvironmentOutput() FunctionEnvironmentOutput
	ToFunctionEnvironmentOutputWithContext(context.Context) FunctionEnvironmentOutput
}

// A function's environment variable settings.
type FunctionEnvironmentArgs struct {
	// Environment variable key-value pairs.
	Variables pulumi.Input `pulumi:"variables"`
}

func (FunctionEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEnvironment)(nil)).Elem()
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentOutput() FunctionEnvironmentOutput {
	return i.ToFunctionEnvironmentOutputWithContext(context.Background())
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentOutputWithContext(ctx context.Context) FunctionEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEnvironmentOutput)
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return i.ToFunctionEnvironmentPtrOutputWithContext(context.Background())
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEnvironmentOutput).ToFunctionEnvironmentPtrOutputWithContext(ctx)
}

// FunctionEnvironmentPtrInput is an input type that accepts FunctionEnvironmentArgs, FunctionEnvironmentPtr and FunctionEnvironmentPtrOutput values.
// You can construct a concrete instance of `FunctionEnvironmentPtrInput` via:
//
//          FunctionEnvironmentArgs{...}
//
//  or:
//
//          nil
type FunctionEnvironmentPtrInput interface {
	pulumi.Input

	ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput
	ToFunctionEnvironmentPtrOutputWithContext(context.Context) FunctionEnvironmentPtrOutput
}

type functionEnvironmentPtrType FunctionEnvironmentArgs

func FunctionEnvironmentPtr(v *FunctionEnvironmentArgs) FunctionEnvironmentPtrInput {
	return (*functionEnvironmentPtrType)(v)
}

func (*functionEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionEnvironment)(nil)).Elem()
}

func (i *functionEnvironmentPtrType) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return i.ToFunctionEnvironmentPtrOutputWithContext(context.Background())
}

func (i *functionEnvironmentPtrType) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEnvironmentPtrOutput)
}

// A function's environment variable settings.
type FunctionEnvironmentOutput struct{ *pulumi.OutputState }

func (FunctionEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEnvironment)(nil)).Elem()
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentOutput() FunctionEnvironmentOutput {
	return o
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentOutputWithContext(ctx context.Context) FunctionEnvironmentOutput {
	return o
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return o.ToFunctionEnvironmentPtrOutputWithContext(context.Background())
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionEnvironment) *FunctionEnvironment {
		return &v
	}).(FunctionEnvironmentPtrOutput)
}

// Environment variable key-value pairs.
func (o FunctionEnvironmentOutput) Variables() pulumi.AnyOutput {
	return o.ApplyT(func(v FunctionEnvironment) interface{} { return v.Variables }).(pulumi.AnyOutput)
}

type FunctionEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (FunctionEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionEnvironment)(nil)).Elem()
}

func (o FunctionEnvironmentPtrOutput) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return o
}

func (o FunctionEnvironmentPtrOutput) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return o
}

func (o FunctionEnvironmentPtrOutput) Elem() FunctionEnvironmentOutput {
	return o.ApplyT(func(v *FunctionEnvironment) FunctionEnvironment {
		if v != nil {
			return *v
		}
		var ret FunctionEnvironment
		return ret
	}).(FunctionEnvironmentOutput)
}

// Environment variable key-value pairs.
func (o FunctionEnvironmentPtrOutput) Variables() pulumi.AnyOutput {
	return o.ApplyT(func(v *FunctionEnvironment) interface{} {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(pulumi.AnyOutput)
}

type FunctionFileSystemConfig struct {
	// The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
	Arn string `pulumi:"arn"`
	// The path where the function can access the file system, starting with /mnt/.
	LocalMountPath string `pulumi:"localMountPath"`
}

// FunctionFileSystemConfigInput is an input type that accepts FunctionFileSystemConfigArgs and FunctionFileSystemConfigOutput values.
// You can construct a concrete instance of `FunctionFileSystemConfigInput` via:
//
//          FunctionFileSystemConfigArgs{...}
type FunctionFileSystemConfigInput interface {
	pulumi.Input

	ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput
	ToFunctionFileSystemConfigOutputWithContext(context.Context) FunctionFileSystemConfigOutput
}

type FunctionFileSystemConfigArgs struct {
	// The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The path where the function can access the file system, starting with /mnt/.
	LocalMountPath pulumi.StringInput `pulumi:"localMountPath"`
}

func (FunctionFileSystemConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFileSystemConfig)(nil)).Elem()
}

func (i FunctionFileSystemConfigArgs) ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput {
	return i.ToFunctionFileSystemConfigOutputWithContext(context.Background())
}

func (i FunctionFileSystemConfigArgs) ToFunctionFileSystemConfigOutputWithContext(ctx context.Context) FunctionFileSystemConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFileSystemConfigOutput)
}

// FunctionFileSystemConfigArrayInput is an input type that accepts FunctionFileSystemConfigArray and FunctionFileSystemConfigArrayOutput values.
// You can construct a concrete instance of `FunctionFileSystemConfigArrayInput` via:
//
//          FunctionFileSystemConfigArray{ FunctionFileSystemConfigArgs{...} }
type FunctionFileSystemConfigArrayInput interface {
	pulumi.Input

	ToFunctionFileSystemConfigArrayOutput() FunctionFileSystemConfigArrayOutput
	ToFunctionFileSystemConfigArrayOutputWithContext(context.Context) FunctionFileSystemConfigArrayOutput
}

type FunctionFileSystemConfigArray []FunctionFileSystemConfigInput

func (FunctionFileSystemConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFileSystemConfig)(nil)).Elem()
}

func (i FunctionFileSystemConfigArray) ToFunctionFileSystemConfigArrayOutput() FunctionFileSystemConfigArrayOutput {
	return i.ToFunctionFileSystemConfigArrayOutputWithContext(context.Background())
}

func (i FunctionFileSystemConfigArray) ToFunctionFileSystemConfigArrayOutputWithContext(ctx context.Context) FunctionFileSystemConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFileSystemConfigArrayOutput)
}

type FunctionFileSystemConfigOutput struct{ *pulumi.OutputState }

func (FunctionFileSystemConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFileSystemConfig)(nil)).Elem()
}

func (o FunctionFileSystemConfigOutput) ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput {
	return o
}

func (o FunctionFileSystemConfigOutput) ToFunctionFileSystemConfigOutputWithContext(ctx context.Context) FunctionFileSystemConfigOutput {
	return o
}

// The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
func (o FunctionFileSystemConfigOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFileSystemConfig) string { return v.Arn }).(pulumi.StringOutput)
}

// The path where the function can access the file system, starting with /mnt/.
func (o FunctionFileSystemConfigOutput) LocalMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFileSystemConfig) string { return v.LocalMountPath }).(pulumi.StringOutput)
}

type FunctionFileSystemConfigArrayOutput struct{ *pulumi.OutputState }

func (FunctionFileSystemConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFileSystemConfig)(nil)).Elem()
}

func (o FunctionFileSystemConfigArrayOutput) ToFunctionFileSystemConfigArrayOutput() FunctionFileSystemConfigArrayOutput {
	return o
}

func (o FunctionFileSystemConfigArrayOutput) ToFunctionFileSystemConfigArrayOutputWithContext(ctx context.Context) FunctionFileSystemConfigArrayOutput {
	return o
}

func (o FunctionFileSystemConfigArrayOutput) Index(i pulumi.IntInput) FunctionFileSystemConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionFileSystemConfig {
		return vs[0].([]FunctionFileSystemConfig)[vs[1].(int)]
	}).(FunctionFileSystemConfigOutput)
}

type FunctionImageConfig struct {
	// Command.
	Command []string `pulumi:"command"`
	// EntryPoint.
	EntryPoint []string `pulumi:"entryPoint"`
	// WorkingDirectory.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// FunctionImageConfigInput is an input type that accepts FunctionImageConfigArgs and FunctionImageConfigOutput values.
// You can construct a concrete instance of `FunctionImageConfigInput` via:
//
//          FunctionImageConfigArgs{...}
type FunctionImageConfigInput interface {
	pulumi.Input

	ToFunctionImageConfigOutput() FunctionImageConfigOutput
	ToFunctionImageConfigOutputWithContext(context.Context) FunctionImageConfigOutput
}

type FunctionImageConfigArgs struct {
	// Command.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// EntryPoint.
	EntryPoint pulumi.StringArrayInput `pulumi:"entryPoint"`
	// WorkingDirectory.
	WorkingDirectory pulumi.StringPtrInput `pulumi:"workingDirectory"`
}

func (FunctionImageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return i.ToFunctionImageConfigOutputWithContext(context.Background())
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigOutput)
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return i.ToFunctionImageConfigPtrOutputWithContext(context.Background())
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigOutput).ToFunctionImageConfigPtrOutputWithContext(ctx)
}

// FunctionImageConfigPtrInput is an input type that accepts FunctionImageConfigArgs, FunctionImageConfigPtr and FunctionImageConfigPtrOutput values.
// You can construct a concrete instance of `FunctionImageConfigPtrInput` via:
//
//          FunctionImageConfigArgs{...}
//
//  or:
//
//          nil
type FunctionImageConfigPtrInput interface {
	pulumi.Input

	ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput
	ToFunctionImageConfigPtrOutputWithContext(context.Context) FunctionImageConfigPtrOutput
}

type functionImageConfigPtrType FunctionImageConfigArgs

func FunctionImageConfigPtr(v *FunctionImageConfigArgs) FunctionImageConfigPtrInput {
	return (*functionImageConfigPtrType)(v)
}

func (*functionImageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionImageConfig)(nil)).Elem()
}

func (i *functionImageConfigPtrType) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return i.ToFunctionImageConfigPtrOutputWithContext(context.Background())
}

func (i *functionImageConfigPtrType) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigPtrOutput)
}

type FunctionImageConfigOutput struct{ *pulumi.OutputState }

func (FunctionImageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return o
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return o
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return o.ToFunctionImageConfigPtrOutputWithContext(context.Background())
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionImageConfig) *FunctionImageConfig {
		return &v
	}).(FunctionImageConfigPtrOutput)
}

// Command.
func (o FunctionImageConfigOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionImageConfig) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// EntryPoint.
func (o FunctionImageConfigOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionImageConfig) []string { return v.EntryPoint }).(pulumi.StringArrayOutput)
}

// WorkingDirectory.
func (o FunctionImageConfigOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionImageConfig) *string { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type FunctionImageConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionImageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionImageConfig)(nil)).Elem()
}

func (o FunctionImageConfigPtrOutput) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return o
}

func (o FunctionImageConfigPtrOutput) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return o
}

func (o FunctionImageConfigPtrOutput) Elem() FunctionImageConfigOutput {
	return o.ApplyT(func(v *FunctionImageConfig) FunctionImageConfig {
		if v != nil {
			return *v
		}
		var ret FunctionImageConfig
		return ret
	}).(FunctionImageConfigOutput)
}

// Command.
func (o FunctionImageConfigPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionImageConfig) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// EntryPoint.
func (o FunctionImageConfigPtrOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionImageConfig) []string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringArrayOutput)
}

// WorkingDirectory.
func (o FunctionImageConfigPtrOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.WorkingDirectory
	}).(pulumi.StringPtrOutput)
}

type FunctionTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value *string `pulumi:"value"`
}

// FunctionTagInput is an input type that accepts FunctionTagArgs and FunctionTagOutput values.
// You can construct a concrete instance of `FunctionTagInput` via:
//
//          FunctionTagArgs{...}
type FunctionTagInput interface {
	pulumi.Input

	ToFunctionTagOutput() FunctionTagOutput
	ToFunctionTagOutputWithContext(context.Context) FunctionTagOutput
}

type FunctionTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (FunctionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTag)(nil)).Elem()
}

func (i FunctionTagArgs) ToFunctionTagOutput() FunctionTagOutput {
	return i.ToFunctionTagOutputWithContext(context.Background())
}

func (i FunctionTagArgs) ToFunctionTagOutputWithContext(ctx context.Context) FunctionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTagOutput)
}

// FunctionTagArrayInput is an input type that accepts FunctionTagArray and FunctionTagArrayOutput values.
// You can construct a concrete instance of `FunctionTagArrayInput` via:
//
//          FunctionTagArray{ FunctionTagArgs{...} }
type FunctionTagArrayInput interface {
	pulumi.Input

	ToFunctionTagArrayOutput() FunctionTagArrayOutput
	ToFunctionTagArrayOutputWithContext(context.Context) FunctionTagArrayOutput
}

type FunctionTagArray []FunctionTagInput

func (FunctionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTag)(nil)).Elem()
}

func (i FunctionTagArray) ToFunctionTagArrayOutput() FunctionTagArrayOutput {
	return i.ToFunctionTagArrayOutputWithContext(context.Background())
}

func (i FunctionTagArray) ToFunctionTagArrayOutputWithContext(ctx context.Context) FunctionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTagArrayOutput)
}

type FunctionTagOutput struct{ *pulumi.OutputState }

func (FunctionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTag)(nil)).Elem()
}

func (o FunctionTagOutput) ToFunctionTagOutput() FunctionTagOutput {
	return o
}

func (o FunctionTagOutput) ToFunctionTagOutputWithContext(ctx context.Context) FunctionTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FunctionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FunctionTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FunctionTagArrayOutput struct{ *pulumi.OutputState }

func (FunctionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTag)(nil)).Elem()
}

func (o FunctionTagArrayOutput) ToFunctionTagArrayOutput() FunctionTagArrayOutput {
	return o
}

func (o FunctionTagArrayOutput) ToFunctionTagArrayOutputWithContext(ctx context.Context) FunctionTagArrayOutput {
	return o
}

func (o FunctionTagArrayOutput) Index(i pulumi.IntInput) FunctionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionTag {
		return vs[0].([]FunctionTag)[vs[1].(int)]
	}).(FunctionTagOutput)
}

// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
type FunctionTracingConfig struct {
	// The tracing mode.
	Mode *string `pulumi:"mode"`
}

// FunctionTracingConfigInput is an input type that accepts FunctionTracingConfigArgs and FunctionTracingConfigOutput values.
// You can construct a concrete instance of `FunctionTracingConfigInput` via:
//
//          FunctionTracingConfigArgs{...}
type FunctionTracingConfigInput interface {
	pulumi.Input

	ToFunctionTracingConfigOutput() FunctionTracingConfigOutput
	ToFunctionTracingConfigOutputWithContext(context.Context) FunctionTracingConfigOutput
}

// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
type FunctionTracingConfigArgs struct {
	// The tracing mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (FunctionTracingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTracingConfig)(nil)).Elem()
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigOutput() FunctionTracingConfigOutput {
	return i.ToFunctionTracingConfigOutputWithContext(context.Background())
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigOutputWithContext(ctx context.Context) FunctionTracingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTracingConfigOutput)
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return i.ToFunctionTracingConfigPtrOutputWithContext(context.Background())
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTracingConfigOutput).ToFunctionTracingConfigPtrOutputWithContext(ctx)
}

// FunctionTracingConfigPtrInput is an input type that accepts FunctionTracingConfigArgs, FunctionTracingConfigPtr and FunctionTracingConfigPtrOutput values.
// You can construct a concrete instance of `FunctionTracingConfigPtrInput` via:
//
//          FunctionTracingConfigArgs{...}
//
//  or:
//
//          nil
type FunctionTracingConfigPtrInput interface {
	pulumi.Input

	ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput
	ToFunctionTracingConfigPtrOutputWithContext(context.Context) FunctionTracingConfigPtrOutput
}

type functionTracingConfigPtrType FunctionTracingConfigArgs

func FunctionTracingConfigPtr(v *FunctionTracingConfigArgs) FunctionTracingConfigPtrInput {
	return (*functionTracingConfigPtrType)(v)
}

func (*functionTracingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTracingConfig)(nil)).Elem()
}

func (i *functionTracingConfigPtrType) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return i.ToFunctionTracingConfigPtrOutputWithContext(context.Background())
}

func (i *functionTracingConfigPtrType) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTracingConfigPtrOutput)
}

// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
type FunctionTracingConfigOutput struct{ *pulumi.OutputState }

func (FunctionTracingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTracingConfig)(nil)).Elem()
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigOutput() FunctionTracingConfigOutput {
	return o
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigOutputWithContext(ctx context.Context) FunctionTracingConfigOutput {
	return o
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return o.ToFunctionTracingConfigPtrOutputWithContext(context.Background())
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionTracingConfig) *FunctionTracingConfig {
		return &v
	}).(FunctionTracingConfigPtrOutput)
}

// The tracing mode.
func (o FunctionTracingConfigOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTracingConfig) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type FunctionTracingConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionTracingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTracingConfig)(nil)).Elem()
}

func (o FunctionTracingConfigPtrOutput) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return o
}

func (o FunctionTracingConfigPtrOutput) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return o
}

func (o FunctionTracingConfigPtrOutput) Elem() FunctionTracingConfigOutput {
	return o.ApplyT(func(v *FunctionTracingConfig) FunctionTracingConfig {
		if v != nil {
			return *v
		}
		var ret FunctionTracingConfig
		return ret
	}).(FunctionTracingConfigOutput)
}

// The tracing mode.
func (o FunctionTracingConfigPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTracingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
type FunctionVpcConfig struct {
	// A list of VPC security groups IDs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs.
	SubnetIds []string `pulumi:"subnetIds"`
}

// FunctionVpcConfigInput is an input type that accepts FunctionVpcConfigArgs and FunctionVpcConfigOutput values.
// You can construct a concrete instance of `FunctionVpcConfigInput` via:
//
//          FunctionVpcConfigArgs{...}
type FunctionVpcConfigInput interface {
	pulumi.Input

	ToFunctionVpcConfigOutput() FunctionVpcConfigOutput
	ToFunctionVpcConfigOutputWithContext(context.Context) FunctionVpcConfigOutput
}

// The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
type FunctionVpcConfigArgs struct {
	// A list of VPC security groups IDs.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
}

func (FunctionVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionVpcConfig)(nil)).Elem()
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigOutput() FunctionVpcConfigOutput {
	return i.ToFunctionVpcConfigOutputWithContext(context.Background())
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigOutputWithContext(ctx context.Context) FunctionVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVpcConfigOutput)
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return i.ToFunctionVpcConfigPtrOutputWithContext(context.Background())
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVpcConfigOutput).ToFunctionVpcConfigPtrOutputWithContext(ctx)
}

// FunctionVpcConfigPtrInput is an input type that accepts FunctionVpcConfigArgs, FunctionVpcConfigPtr and FunctionVpcConfigPtrOutput values.
// You can construct a concrete instance of `FunctionVpcConfigPtrInput` via:
//
//          FunctionVpcConfigArgs{...}
//
//  or:
//
//          nil
type FunctionVpcConfigPtrInput interface {
	pulumi.Input

	ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput
	ToFunctionVpcConfigPtrOutputWithContext(context.Context) FunctionVpcConfigPtrOutput
}

type functionVpcConfigPtrType FunctionVpcConfigArgs

func FunctionVpcConfigPtr(v *FunctionVpcConfigArgs) FunctionVpcConfigPtrInput {
	return (*functionVpcConfigPtrType)(v)
}

func (*functionVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionVpcConfig)(nil)).Elem()
}

func (i *functionVpcConfigPtrType) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return i.ToFunctionVpcConfigPtrOutputWithContext(context.Background())
}

func (i *functionVpcConfigPtrType) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVpcConfigPtrOutput)
}

// The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
type FunctionVpcConfigOutput struct{ *pulumi.OutputState }

func (FunctionVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionVpcConfig)(nil)).Elem()
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigOutput() FunctionVpcConfigOutput {
	return o
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigOutputWithContext(ctx context.Context) FunctionVpcConfigOutput {
	return o
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return o.ToFunctionVpcConfigPtrOutputWithContext(context.Background())
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionVpcConfig) *FunctionVpcConfig {
		return &v
	}).(FunctionVpcConfigPtrOutput)
}

// A list of VPC security groups IDs.
func (o FunctionVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs.
func (o FunctionVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

type FunctionVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionVpcConfig)(nil)).Elem()
}

func (o FunctionVpcConfigPtrOutput) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return o
}

func (o FunctionVpcConfigPtrOutput) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return o
}

func (o FunctionVpcConfigPtrOutput) Elem() FunctionVpcConfigOutput {
	return o.ApplyT(func(v *FunctionVpcConfig) FunctionVpcConfig {
		if v != nil {
			return *v
		}
		var ret FunctionVpcConfig
		return ret
	}).(FunctionVpcConfigOutput)
}

// A list of VPC security groups IDs.
func (o FunctionVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs.
func (o FunctionVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CodeSigningConfigAllowedPublishersOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigAllowedPublishersPtrOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigCodeSigningPoliciesOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigCodeSigningPoliciesPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDestinationConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingEndpointsOutput{})
	pulumi.RegisterOutputType(EventSourceMappingEndpointsPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingOnFailureOutput{})
	pulumi.RegisterOutputType(EventSourceMappingOnFailurePtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedEventSourceOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedEventSourcePtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSourceAccessConfigurationOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSourceAccessConfigurationArrayOutput{})
	pulumi.RegisterOutputType(FunctionCodeOutput{})
	pulumi.RegisterOutputType(FunctionCodePtrOutput{})
	pulumi.RegisterOutputType(FunctionDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(FunctionDeadLetterConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionEnvironmentOutput{})
	pulumi.RegisterOutputType(FunctionEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(FunctionFileSystemConfigOutput{})
	pulumi.RegisterOutputType(FunctionFileSystemConfigArrayOutput{})
	pulumi.RegisterOutputType(FunctionImageConfigOutput{})
	pulumi.RegisterOutputType(FunctionImageConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionTagOutput{})
	pulumi.RegisterOutputType(FunctionTagArrayOutput{})
	pulumi.RegisterOutputType(FunctionTracingConfigOutput{})
	pulumi.RegisterOutputType(FunctionTracingConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionVpcConfigOutput{})
	pulumi.RegisterOutputType(FunctionVpcConfigPtrOutput{})
}
