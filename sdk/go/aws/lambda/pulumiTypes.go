// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AliasProvisionedConcurrencyConfiguration struct {
	ProvisionedConcurrentExecutions int `pulumi:"provisionedConcurrentExecutions"`
}

// AliasProvisionedConcurrencyConfigurationInput is an input type that accepts AliasProvisionedConcurrencyConfigurationArgs and AliasProvisionedConcurrencyConfigurationOutput values.
// You can construct a concrete instance of `AliasProvisionedConcurrencyConfigurationInput` via:
//
//	AliasProvisionedConcurrencyConfigurationArgs{...}
type AliasProvisionedConcurrencyConfigurationInput interface {
	pulumi.Input

	ToAliasProvisionedConcurrencyConfigurationOutput() AliasProvisionedConcurrencyConfigurationOutput
	ToAliasProvisionedConcurrencyConfigurationOutputWithContext(context.Context) AliasProvisionedConcurrencyConfigurationOutput
}

type AliasProvisionedConcurrencyConfigurationArgs struct {
	ProvisionedConcurrentExecutions pulumi.IntInput `pulumi:"provisionedConcurrentExecutions"`
}

func (AliasProvisionedConcurrencyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (i AliasProvisionedConcurrencyConfigurationArgs) ToAliasProvisionedConcurrencyConfigurationOutput() AliasProvisionedConcurrencyConfigurationOutput {
	return i.ToAliasProvisionedConcurrencyConfigurationOutputWithContext(context.Background())
}

func (i AliasProvisionedConcurrencyConfigurationArgs) ToAliasProvisionedConcurrencyConfigurationOutputWithContext(ctx context.Context) AliasProvisionedConcurrencyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasProvisionedConcurrencyConfigurationOutput)
}

func (i AliasProvisionedConcurrencyConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[AliasProvisionedConcurrencyConfiguration] {
	return pulumix.Output[AliasProvisionedConcurrencyConfiguration]{
		OutputState: i.ToAliasProvisionedConcurrencyConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i AliasProvisionedConcurrencyConfigurationArgs) ToAliasProvisionedConcurrencyConfigurationPtrOutput() AliasProvisionedConcurrencyConfigurationPtrOutput {
	return i.ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i AliasProvisionedConcurrencyConfigurationArgs) ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) AliasProvisionedConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasProvisionedConcurrencyConfigurationOutput).ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx)
}

// AliasProvisionedConcurrencyConfigurationPtrInput is an input type that accepts AliasProvisionedConcurrencyConfigurationArgs, AliasProvisionedConcurrencyConfigurationPtr and AliasProvisionedConcurrencyConfigurationPtrOutput values.
// You can construct a concrete instance of `AliasProvisionedConcurrencyConfigurationPtrInput` via:
//
//	        AliasProvisionedConcurrencyConfigurationArgs{...}
//
//	or:
//
//	        nil
type AliasProvisionedConcurrencyConfigurationPtrInput interface {
	pulumi.Input

	ToAliasProvisionedConcurrencyConfigurationPtrOutput() AliasProvisionedConcurrencyConfigurationPtrOutput
	ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Context) AliasProvisionedConcurrencyConfigurationPtrOutput
}

type aliasProvisionedConcurrencyConfigurationPtrType AliasProvisionedConcurrencyConfigurationArgs

func AliasProvisionedConcurrencyConfigurationPtr(v *AliasProvisionedConcurrencyConfigurationArgs) AliasProvisionedConcurrencyConfigurationPtrInput {
	return (*aliasProvisionedConcurrencyConfigurationPtrType)(v)
}

func (*aliasProvisionedConcurrencyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (i *aliasProvisionedConcurrencyConfigurationPtrType) ToAliasProvisionedConcurrencyConfigurationPtrOutput() AliasProvisionedConcurrencyConfigurationPtrOutput {
	return i.ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i *aliasProvisionedConcurrencyConfigurationPtrType) ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) AliasProvisionedConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasProvisionedConcurrencyConfigurationPtrOutput)
}

func (i *aliasProvisionedConcurrencyConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AliasProvisionedConcurrencyConfiguration] {
	return pulumix.Output[*AliasProvisionedConcurrencyConfiguration]{
		OutputState: i.ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type AliasProvisionedConcurrencyConfigurationOutput struct{ *pulumi.OutputState }

func (AliasProvisionedConcurrencyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (o AliasProvisionedConcurrencyConfigurationOutput) ToAliasProvisionedConcurrencyConfigurationOutput() AliasProvisionedConcurrencyConfigurationOutput {
	return o
}

func (o AliasProvisionedConcurrencyConfigurationOutput) ToAliasProvisionedConcurrencyConfigurationOutputWithContext(ctx context.Context) AliasProvisionedConcurrencyConfigurationOutput {
	return o
}

func (o AliasProvisionedConcurrencyConfigurationOutput) ToAliasProvisionedConcurrencyConfigurationPtrOutput() AliasProvisionedConcurrencyConfigurationPtrOutput {
	return o.ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (o AliasProvisionedConcurrencyConfigurationOutput) ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) AliasProvisionedConcurrencyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AliasProvisionedConcurrencyConfiguration) *AliasProvisionedConcurrencyConfiguration {
		return &v
	}).(AliasProvisionedConcurrencyConfigurationPtrOutput)
}

func (o AliasProvisionedConcurrencyConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AliasProvisionedConcurrencyConfiguration] {
	return pulumix.Output[AliasProvisionedConcurrencyConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AliasProvisionedConcurrencyConfigurationOutput) ProvisionedConcurrentExecutions() pulumi.IntOutput {
	return o.ApplyT(func(v AliasProvisionedConcurrencyConfiguration) int { return v.ProvisionedConcurrentExecutions }).(pulumi.IntOutput)
}

type AliasProvisionedConcurrencyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AliasProvisionedConcurrencyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (o AliasProvisionedConcurrencyConfigurationPtrOutput) ToAliasProvisionedConcurrencyConfigurationPtrOutput() AliasProvisionedConcurrencyConfigurationPtrOutput {
	return o
}

func (o AliasProvisionedConcurrencyConfigurationPtrOutput) ToAliasProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) AliasProvisionedConcurrencyConfigurationPtrOutput {
	return o
}

func (o AliasProvisionedConcurrencyConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AliasProvisionedConcurrencyConfiguration] {
	return pulumix.Output[*AliasProvisionedConcurrencyConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AliasProvisionedConcurrencyConfigurationPtrOutput) Elem() AliasProvisionedConcurrencyConfigurationOutput {
	return o.ApplyT(func(v *AliasProvisionedConcurrencyConfiguration) AliasProvisionedConcurrencyConfiguration {
		if v != nil {
			return *v
		}
		var ret AliasProvisionedConcurrencyConfiguration
		return ret
	}).(AliasProvisionedConcurrencyConfigurationOutput)
}

func (o AliasProvisionedConcurrencyConfigurationPtrOutput) ProvisionedConcurrentExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AliasProvisionedConcurrencyConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.ProvisionedConcurrentExecutions
	}).(pulumi.IntPtrOutput)
}

type AliasRoutingConfiguration struct {
	AdditionalVersionWeights []AliasVersionWeight `pulumi:"additionalVersionWeights"`
}

// AliasRoutingConfigurationInput is an input type that accepts AliasRoutingConfigurationArgs and AliasRoutingConfigurationOutput values.
// You can construct a concrete instance of `AliasRoutingConfigurationInput` via:
//
//	AliasRoutingConfigurationArgs{...}
type AliasRoutingConfigurationInput interface {
	pulumi.Input

	ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput
	ToAliasRoutingConfigurationOutputWithContext(context.Context) AliasRoutingConfigurationOutput
}

type AliasRoutingConfigurationArgs struct {
	AdditionalVersionWeights AliasVersionWeightArrayInput `pulumi:"additionalVersionWeights"`
}

func (AliasRoutingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfiguration)(nil)).Elem()
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput {
	return i.ToAliasRoutingConfigurationOutputWithContext(context.Background())
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationOutputWithContext(ctx context.Context) AliasRoutingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasRoutingConfigurationOutput)
}

func (i AliasRoutingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[AliasRoutingConfiguration] {
	return pulumix.Output[AliasRoutingConfiguration]{
		OutputState: i.ToAliasRoutingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationPtrOutput() AliasRoutingConfigurationPtrOutput {
	return i.ToAliasRoutingConfigurationPtrOutputWithContext(context.Background())
}

func (i AliasRoutingConfigurationArgs) ToAliasRoutingConfigurationPtrOutputWithContext(ctx context.Context) AliasRoutingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasRoutingConfigurationOutput).ToAliasRoutingConfigurationPtrOutputWithContext(ctx)
}

// AliasRoutingConfigurationPtrInput is an input type that accepts AliasRoutingConfigurationArgs, AliasRoutingConfigurationPtr and AliasRoutingConfigurationPtrOutput values.
// You can construct a concrete instance of `AliasRoutingConfigurationPtrInput` via:
//
//	        AliasRoutingConfigurationArgs{...}
//
//	or:
//
//	        nil
type AliasRoutingConfigurationPtrInput interface {
	pulumi.Input

	ToAliasRoutingConfigurationPtrOutput() AliasRoutingConfigurationPtrOutput
	ToAliasRoutingConfigurationPtrOutputWithContext(context.Context) AliasRoutingConfigurationPtrOutput
}

type aliasRoutingConfigurationPtrType AliasRoutingConfigurationArgs

func AliasRoutingConfigurationPtr(v *AliasRoutingConfigurationArgs) AliasRoutingConfigurationPtrInput {
	return (*aliasRoutingConfigurationPtrType)(v)
}

func (*aliasRoutingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasRoutingConfiguration)(nil)).Elem()
}

func (i *aliasRoutingConfigurationPtrType) ToAliasRoutingConfigurationPtrOutput() AliasRoutingConfigurationPtrOutput {
	return i.ToAliasRoutingConfigurationPtrOutputWithContext(context.Background())
}

func (i *aliasRoutingConfigurationPtrType) ToAliasRoutingConfigurationPtrOutputWithContext(ctx context.Context) AliasRoutingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasRoutingConfigurationPtrOutput)
}

func (i *aliasRoutingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AliasRoutingConfiguration] {
	return pulumix.Output[*AliasRoutingConfiguration]{
		OutputState: i.ToAliasRoutingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type AliasRoutingConfigurationOutput struct{ *pulumi.OutputState }

func (AliasRoutingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasRoutingConfiguration)(nil)).Elem()
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationOutput() AliasRoutingConfigurationOutput {
	return o
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationOutputWithContext(ctx context.Context) AliasRoutingConfigurationOutput {
	return o
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationPtrOutput() AliasRoutingConfigurationPtrOutput {
	return o.ToAliasRoutingConfigurationPtrOutputWithContext(context.Background())
}

func (o AliasRoutingConfigurationOutput) ToAliasRoutingConfigurationPtrOutputWithContext(ctx context.Context) AliasRoutingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AliasRoutingConfiguration) *AliasRoutingConfiguration {
		return &v
	}).(AliasRoutingConfigurationPtrOutput)
}

func (o AliasRoutingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AliasRoutingConfiguration] {
	return pulumix.Output[AliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AliasRoutingConfigurationOutput) AdditionalVersionWeights() AliasVersionWeightArrayOutput {
	return o.ApplyT(func(v AliasRoutingConfiguration) []AliasVersionWeight { return v.AdditionalVersionWeights }).(AliasVersionWeightArrayOutput)
}

type AliasRoutingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AliasRoutingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasRoutingConfiguration)(nil)).Elem()
}

func (o AliasRoutingConfigurationPtrOutput) ToAliasRoutingConfigurationPtrOutput() AliasRoutingConfigurationPtrOutput {
	return o
}

func (o AliasRoutingConfigurationPtrOutput) ToAliasRoutingConfigurationPtrOutputWithContext(ctx context.Context) AliasRoutingConfigurationPtrOutput {
	return o
}

func (o AliasRoutingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AliasRoutingConfiguration] {
	return pulumix.Output[*AliasRoutingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AliasRoutingConfigurationPtrOutput) Elem() AliasRoutingConfigurationOutput {
	return o.ApplyT(func(v *AliasRoutingConfiguration) AliasRoutingConfiguration {
		if v != nil {
			return *v
		}
		var ret AliasRoutingConfiguration
		return ret
	}).(AliasRoutingConfigurationOutput)
}

func (o AliasRoutingConfigurationPtrOutput) AdditionalVersionWeights() AliasVersionWeightArrayOutput {
	return o.ApplyT(func(v *AliasRoutingConfiguration) []AliasVersionWeight {
		if v == nil {
			return nil
		}
		return v.AdditionalVersionWeights
	}).(AliasVersionWeightArrayOutput)
}

type AliasVersionWeight struct {
	FunctionVersion string  `pulumi:"functionVersion"`
	FunctionWeight  float64 `pulumi:"functionWeight"`
}

// AliasVersionWeightInput is an input type that accepts AliasVersionWeightArgs and AliasVersionWeightOutput values.
// You can construct a concrete instance of `AliasVersionWeightInput` via:
//
//	AliasVersionWeightArgs{...}
type AliasVersionWeightInput interface {
	pulumi.Input

	ToAliasVersionWeightOutput() AliasVersionWeightOutput
	ToAliasVersionWeightOutputWithContext(context.Context) AliasVersionWeightOutput
}

type AliasVersionWeightArgs struct {
	FunctionVersion pulumi.StringInput  `pulumi:"functionVersion"`
	FunctionWeight  pulumi.Float64Input `pulumi:"functionWeight"`
}

func (AliasVersionWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasVersionWeight)(nil)).Elem()
}

func (i AliasVersionWeightArgs) ToAliasVersionWeightOutput() AliasVersionWeightOutput {
	return i.ToAliasVersionWeightOutputWithContext(context.Background())
}

func (i AliasVersionWeightArgs) ToAliasVersionWeightOutputWithContext(ctx context.Context) AliasVersionWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasVersionWeightOutput)
}

func (i AliasVersionWeightArgs) ToOutput(ctx context.Context) pulumix.Output[AliasVersionWeight] {
	return pulumix.Output[AliasVersionWeight]{
		OutputState: i.ToAliasVersionWeightOutputWithContext(ctx).OutputState,
	}
}

// AliasVersionWeightArrayInput is an input type that accepts AliasVersionWeightArray and AliasVersionWeightArrayOutput values.
// You can construct a concrete instance of `AliasVersionWeightArrayInput` via:
//
//	AliasVersionWeightArray{ AliasVersionWeightArgs{...} }
type AliasVersionWeightArrayInput interface {
	pulumi.Input

	ToAliasVersionWeightArrayOutput() AliasVersionWeightArrayOutput
	ToAliasVersionWeightArrayOutputWithContext(context.Context) AliasVersionWeightArrayOutput
}

type AliasVersionWeightArray []AliasVersionWeightInput

func (AliasVersionWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasVersionWeight)(nil)).Elem()
}

func (i AliasVersionWeightArray) ToAliasVersionWeightArrayOutput() AliasVersionWeightArrayOutput {
	return i.ToAliasVersionWeightArrayOutputWithContext(context.Background())
}

func (i AliasVersionWeightArray) ToAliasVersionWeightArrayOutputWithContext(ctx context.Context) AliasVersionWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasVersionWeightArrayOutput)
}

func (i AliasVersionWeightArray) ToOutput(ctx context.Context) pulumix.Output[[]AliasVersionWeight] {
	return pulumix.Output[[]AliasVersionWeight]{
		OutputState: i.ToAliasVersionWeightArrayOutputWithContext(ctx).OutputState,
	}
}

type AliasVersionWeightOutput struct{ *pulumi.OutputState }

func (AliasVersionWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasVersionWeight)(nil)).Elem()
}

func (o AliasVersionWeightOutput) ToAliasVersionWeightOutput() AliasVersionWeightOutput {
	return o
}

func (o AliasVersionWeightOutput) ToAliasVersionWeightOutputWithContext(ctx context.Context) AliasVersionWeightOutput {
	return o
}

func (o AliasVersionWeightOutput) ToOutput(ctx context.Context) pulumix.Output[AliasVersionWeight] {
	return pulumix.Output[AliasVersionWeight]{
		OutputState: o.OutputState,
	}
}

func (o AliasVersionWeightOutput) FunctionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v AliasVersionWeight) string { return v.FunctionVersion }).(pulumi.StringOutput)
}

func (o AliasVersionWeightOutput) FunctionWeight() pulumi.Float64Output {
	return o.ApplyT(func(v AliasVersionWeight) float64 { return v.FunctionWeight }).(pulumi.Float64Output)
}

type AliasVersionWeightArrayOutput struct{ *pulumi.OutputState }

func (AliasVersionWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasVersionWeight)(nil)).Elem()
}

func (o AliasVersionWeightArrayOutput) ToAliasVersionWeightArrayOutput() AliasVersionWeightArrayOutput {
	return o
}

func (o AliasVersionWeightArrayOutput) ToAliasVersionWeightArrayOutputWithContext(ctx context.Context) AliasVersionWeightArrayOutput {
	return o
}

func (o AliasVersionWeightArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AliasVersionWeight] {
	return pulumix.Output[[]AliasVersionWeight]{
		OutputState: o.OutputState,
	}
}

func (o AliasVersionWeightArrayOutput) Index(i pulumi.IntInput) AliasVersionWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AliasVersionWeight {
		return vs[0].([]AliasVersionWeight)[vs[1].(int)]
	}).(AliasVersionWeightOutput)
}

// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
type CodeSigningConfigAllowedPublishers struct {
	// List of Signing profile version Arns
	SigningProfileVersionArns []string `pulumi:"signingProfileVersionArns"`
}

// CodeSigningConfigAllowedPublishersInput is an input type that accepts CodeSigningConfigAllowedPublishersArgs and CodeSigningConfigAllowedPublishersOutput values.
// You can construct a concrete instance of `CodeSigningConfigAllowedPublishersInput` via:
//
//	CodeSigningConfigAllowedPublishersArgs{...}
type CodeSigningConfigAllowedPublishersInput interface {
	pulumi.Input

	ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput
	ToCodeSigningConfigAllowedPublishersOutputWithContext(context.Context) CodeSigningConfigAllowedPublishersOutput
}

// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
type CodeSigningConfigAllowedPublishersArgs struct {
	// List of Signing profile version Arns
	SigningProfileVersionArns pulumi.StringArrayInput `pulumi:"signingProfileVersionArns"`
}

func (CodeSigningConfigAllowedPublishersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput {
	return i.ToCodeSigningConfigAllowedPublishersOutputWithContext(context.Background())
}

func (i CodeSigningConfigAllowedPublishersArgs) ToCodeSigningConfigAllowedPublishersOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigAllowedPublishersOutput)
}

func (i CodeSigningConfigAllowedPublishersArgs) ToOutput(ctx context.Context) pulumix.Output[CodeSigningConfigAllowedPublishers] {
	return pulumix.Output[CodeSigningConfigAllowedPublishers]{
		OutputState: i.ToCodeSigningConfigAllowedPublishersOutputWithContext(ctx).OutputState,
	}
}

// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
type CodeSigningConfigAllowedPublishersOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigAllowedPublishersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersOutput() CodeSigningConfigAllowedPublishersOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersOutput) ToCodeSigningConfigAllowedPublishersOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersOutput) ToOutput(ctx context.Context) pulumix.Output[CodeSigningConfigAllowedPublishers] {
	return pulumix.Output[CodeSigningConfigAllowedPublishers]{
		OutputState: o.OutputState,
	}
}

// List of Signing profile version Arns
func (o CodeSigningConfigAllowedPublishersOutput) SigningProfileVersionArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CodeSigningConfigAllowedPublishers) []string { return v.SigningProfileVersionArns }).(pulumi.StringArrayOutput)
}

type CodeSigningConfigAllowedPublishersPtrOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigAllowedPublishersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfigAllowedPublishers)(nil)).Elem()
}

func (o CodeSigningConfigAllowedPublishersPtrOutput) ToCodeSigningConfigAllowedPublishersPtrOutput() CodeSigningConfigAllowedPublishersPtrOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersPtrOutput) ToCodeSigningConfigAllowedPublishersPtrOutputWithContext(ctx context.Context) CodeSigningConfigAllowedPublishersPtrOutput {
	return o
}

func (o CodeSigningConfigAllowedPublishersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodeSigningConfigAllowedPublishers] {
	return pulumix.Output[*CodeSigningConfigAllowedPublishers]{
		OutputState: o.OutputState,
	}
}

func (o CodeSigningConfigAllowedPublishersPtrOutput) Elem() CodeSigningConfigAllowedPublishersOutput {
	return o.ApplyT(func(v *CodeSigningConfigAllowedPublishers) CodeSigningConfigAllowedPublishers {
		if v != nil {
			return *v
		}
		var ret CodeSigningConfigAllowedPublishers
		return ret
	}).(CodeSigningConfigAllowedPublishersOutput)
}

// List of Signing profile version Arns
func (o CodeSigningConfigAllowedPublishersPtrOutput) SigningProfileVersionArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CodeSigningConfigAllowedPublishers) []string {
		if v == nil {
			return nil
		}
		return v.SigningProfileVersionArns
	}).(pulumi.StringArrayOutput)
}

// Policies to control how to act if a signature is invalid
type CodeSigningConfigCodeSigningPolicies struct {
	// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
	UntrustedArtifactOnDeployment CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment `pulumi:"untrustedArtifactOnDeployment"`
}

// CodeSigningConfigCodeSigningPoliciesInput is an input type that accepts CodeSigningConfigCodeSigningPoliciesArgs and CodeSigningConfigCodeSigningPoliciesOutput values.
// You can construct a concrete instance of `CodeSigningConfigCodeSigningPoliciesInput` via:
//
//	CodeSigningConfigCodeSigningPoliciesArgs{...}
type CodeSigningConfigCodeSigningPoliciesInput interface {
	pulumi.Input

	ToCodeSigningConfigCodeSigningPoliciesOutput() CodeSigningConfigCodeSigningPoliciesOutput
	ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(context.Context) CodeSigningConfigCodeSigningPoliciesOutput
}

// Policies to control how to act if a signature is invalid
type CodeSigningConfigCodeSigningPoliciesArgs struct {
	// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
	UntrustedArtifactOnDeployment CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeploymentInput `pulumi:"untrustedArtifactOnDeployment"`
}

func (CodeSigningConfigCodeSigningPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesOutput() CodeSigningConfigCodeSigningPoliciesOutput {
	return i.ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(context.Background())
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigCodeSigningPoliciesOutput)
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToOutput(ctx context.Context) pulumix.Output[CodeSigningConfigCodeSigningPolicies] {
	return pulumix.Output[CodeSigningConfigCodeSigningPolicies]{
		OutputState: i.ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(ctx).OutputState,
	}
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return i.ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Background())
}

func (i CodeSigningConfigCodeSigningPoliciesArgs) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigCodeSigningPoliciesOutput).ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx)
}

// CodeSigningConfigCodeSigningPoliciesPtrInput is an input type that accepts CodeSigningConfigCodeSigningPoliciesArgs, CodeSigningConfigCodeSigningPoliciesPtr and CodeSigningConfigCodeSigningPoliciesPtrOutput values.
// You can construct a concrete instance of `CodeSigningConfigCodeSigningPoliciesPtrInput` via:
//
//	        CodeSigningConfigCodeSigningPoliciesArgs{...}
//
//	or:
//
//	        nil
type CodeSigningConfigCodeSigningPoliciesPtrInput interface {
	pulumi.Input

	ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput
	ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput
}

type codeSigningConfigCodeSigningPoliciesPtrType CodeSigningConfigCodeSigningPoliciesArgs

func CodeSigningConfigCodeSigningPoliciesPtr(v *CodeSigningConfigCodeSigningPoliciesArgs) CodeSigningConfigCodeSigningPoliciesPtrInput {
	return (*codeSigningConfigCodeSigningPoliciesPtrType)(v)
}

func (*codeSigningConfigCodeSigningPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (i *codeSigningConfigCodeSigningPoliciesPtrType) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return i.ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Background())
}

func (i *codeSigningConfigCodeSigningPoliciesPtrType) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeSigningConfigCodeSigningPoliciesPtrOutput)
}

func (i *codeSigningConfigCodeSigningPoliciesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CodeSigningConfigCodeSigningPolicies] {
	return pulumix.Output[*CodeSigningConfigCodeSigningPolicies]{
		OutputState: i.ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx).OutputState,
	}
}

// Policies to control how to act if a signature is invalid
type CodeSigningConfigCodeSigningPoliciesOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigCodeSigningPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesOutput() CodeSigningConfigCodeSigningPoliciesOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o.ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(context.Background())
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeSigningConfigCodeSigningPolicies) *CodeSigningConfigCodeSigningPolicies {
		return &v
	}).(CodeSigningConfigCodeSigningPoliciesPtrOutput)
}

func (o CodeSigningConfigCodeSigningPoliciesOutput) ToOutput(ctx context.Context) pulumix.Output[CodeSigningConfigCodeSigningPolicies] {
	return pulumix.Output[CodeSigningConfigCodeSigningPolicies]{
		OutputState: o.OutputState,
	}
}

// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
func (o CodeSigningConfigCodeSigningPoliciesOutput) UntrustedArtifactOnDeployment() CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeploymentOutput {
	return o.ApplyT(func(v CodeSigningConfigCodeSigningPolicies) CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment {
		return v.UntrustedArtifactOnDeployment
	}).(CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeploymentOutput)
}

type CodeSigningConfigCodeSigningPoliciesPtrOutput struct{ *pulumi.OutputState }

func (CodeSigningConfigCodeSigningPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeSigningConfigCodeSigningPolicies)(nil)).Elem()
}

func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutput() CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) ToCodeSigningConfigCodeSigningPoliciesPtrOutputWithContext(ctx context.Context) CodeSigningConfigCodeSigningPoliciesPtrOutput {
	return o
}

func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodeSigningConfigCodeSigningPolicies] {
	return pulumix.Output[*CodeSigningConfigCodeSigningPolicies]{
		OutputState: o.OutputState,
	}
}

func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) Elem() CodeSigningConfigCodeSigningPoliciesOutput {
	return o.ApplyT(func(v *CodeSigningConfigCodeSigningPolicies) CodeSigningConfigCodeSigningPolicies {
		if v != nil {
			return *v
		}
		var ret CodeSigningConfigCodeSigningPolicies
		return ret
	}).(CodeSigningConfigCodeSigningPoliciesOutput)
}

// Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
func (o CodeSigningConfigCodeSigningPoliciesPtrOutput) UntrustedArtifactOnDeployment() CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeploymentPtrOutput {
	return o.ApplyT(func(v *CodeSigningConfigCodeSigningPolicies) *CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment {
		if v == nil {
			return nil
		}
		return &v.UntrustedArtifactOnDeployment
	}).(CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeploymentPtrOutput)
}

type EventInvokeConfigDestinationConfig struct {
	OnFailure *EventInvokeConfigOnFailure `pulumi:"onFailure"`
	OnSuccess *EventInvokeConfigOnSuccess `pulumi:"onSuccess"`
}

// EventInvokeConfigDestinationConfigInput is an input type that accepts EventInvokeConfigDestinationConfigArgs and EventInvokeConfigDestinationConfigOutput values.
// You can construct a concrete instance of `EventInvokeConfigDestinationConfigInput` via:
//
//	EventInvokeConfigDestinationConfigArgs{...}
type EventInvokeConfigDestinationConfigInput interface {
	pulumi.Input

	ToEventInvokeConfigDestinationConfigOutput() EventInvokeConfigDestinationConfigOutput
	ToEventInvokeConfigDestinationConfigOutputWithContext(context.Context) EventInvokeConfigDestinationConfigOutput
}

type EventInvokeConfigDestinationConfigArgs struct {
	OnFailure EventInvokeConfigOnFailurePtrInput `pulumi:"onFailure"`
	OnSuccess EventInvokeConfigOnSuccessPtrInput `pulumi:"onSuccess"`
}

func (EventInvokeConfigDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeConfigDestinationConfig)(nil)).Elem()
}

func (i EventInvokeConfigDestinationConfigArgs) ToEventInvokeConfigDestinationConfigOutput() EventInvokeConfigDestinationConfigOutput {
	return i.ToEventInvokeConfigDestinationConfigOutputWithContext(context.Background())
}

func (i EventInvokeConfigDestinationConfigArgs) ToEventInvokeConfigDestinationConfigOutputWithContext(ctx context.Context) EventInvokeConfigDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigDestinationConfigOutput)
}

func (i EventInvokeConfigDestinationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EventInvokeConfigDestinationConfig] {
	return pulumix.Output[EventInvokeConfigDestinationConfig]{
		OutputState: i.ToEventInvokeConfigDestinationConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EventInvokeConfigDestinationConfigArgs) ToEventInvokeConfigDestinationConfigPtrOutput() EventInvokeConfigDestinationConfigPtrOutput {
	return i.ToEventInvokeConfigDestinationConfigPtrOutputWithContext(context.Background())
}

func (i EventInvokeConfigDestinationConfigArgs) ToEventInvokeConfigDestinationConfigPtrOutputWithContext(ctx context.Context) EventInvokeConfigDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigDestinationConfigOutput).ToEventInvokeConfigDestinationConfigPtrOutputWithContext(ctx)
}

// EventInvokeConfigDestinationConfigPtrInput is an input type that accepts EventInvokeConfigDestinationConfigArgs, EventInvokeConfigDestinationConfigPtr and EventInvokeConfigDestinationConfigPtrOutput values.
// You can construct a concrete instance of `EventInvokeConfigDestinationConfigPtrInput` via:
//
//	        EventInvokeConfigDestinationConfigArgs{...}
//
//	or:
//
//	        nil
type EventInvokeConfigDestinationConfigPtrInput interface {
	pulumi.Input

	ToEventInvokeConfigDestinationConfigPtrOutput() EventInvokeConfigDestinationConfigPtrOutput
	ToEventInvokeConfigDestinationConfigPtrOutputWithContext(context.Context) EventInvokeConfigDestinationConfigPtrOutput
}

type eventInvokeConfigDestinationConfigPtrType EventInvokeConfigDestinationConfigArgs

func EventInvokeConfigDestinationConfigPtr(v *EventInvokeConfigDestinationConfigArgs) EventInvokeConfigDestinationConfigPtrInput {
	return (*eventInvokeConfigDestinationConfigPtrType)(v)
}

func (*eventInvokeConfigDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventInvokeConfigDestinationConfig)(nil)).Elem()
}

func (i *eventInvokeConfigDestinationConfigPtrType) ToEventInvokeConfigDestinationConfigPtrOutput() EventInvokeConfigDestinationConfigPtrOutput {
	return i.ToEventInvokeConfigDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *eventInvokeConfigDestinationConfigPtrType) ToEventInvokeConfigDestinationConfigPtrOutputWithContext(ctx context.Context) EventInvokeConfigDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigDestinationConfigPtrOutput)
}

func (i *eventInvokeConfigDestinationConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventInvokeConfigDestinationConfig] {
	return pulumix.Output[*EventInvokeConfigDestinationConfig]{
		OutputState: i.ToEventInvokeConfigDestinationConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type EventInvokeConfigDestinationConfigOutput struct{ *pulumi.OutputState }

func (EventInvokeConfigDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeConfigDestinationConfig)(nil)).Elem()
}

func (o EventInvokeConfigDestinationConfigOutput) ToEventInvokeConfigDestinationConfigOutput() EventInvokeConfigDestinationConfigOutput {
	return o
}

func (o EventInvokeConfigDestinationConfigOutput) ToEventInvokeConfigDestinationConfigOutputWithContext(ctx context.Context) EventInvokeConfigDestinationConfigOutput {
	return o
}

func (o EventInvokeConfigDestinationConfigOutput) ToEventInvokeConfigDestinationConfigPtrOutput() EventInvokeConfigDestinationConfigPtrOutput {
	return o.ToEventInvokeConfigDestinationConfigPtrOutputWithContext(context.Background())
}

func (o EventInvokeConfigDestinationConfigOutput) ToEventInvokeConfigDestinationConfigPtrOutputWithContext(ctx context.Context) EventInvokeConfigDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventInvokeConfigDestinationConfig) *EventInvokeConfigDestinationConfig {
		return &v
	}).(EventInvokeConfigDestinationConfigPtrOutput)
}

func (o EventInvokeConfigDestinationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventInvokeConfigDestinationConfig] {
	return pulumix.Output[EventInvokeConfigDestinationConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventInvokeConfigDestinationConfigOutput) OnFailure() EventInvokeConfigOnFailurePtrOutput {
	return o.ApplyT(func(v EventInvokeConfigDestinationConfig) *EventInvokeConfigOnFailure { return v.OnFailure }).(EventInvokeConfigOnFailurePtrOutput)
}

func (o EventInvokeConfigDestinationConfigOutput) OnSuccess() EventInvokeConfigOnSuccessPtrOutput {
	return o.ApplyT(func(v EventInvokeConfigDestinationConfig) *EventInvokeConfigOnSuccess { return v.OnSuccess }).(EventInvokeConfigOnSuccessPtrOutput)
}

type EventInvokeConfigDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (EventInvokeConfigDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventInvokeConfigDestinationConfig)(nil)).Elem()
}

func (o EventInvokeConfigDestinationConfigPtrOutput) ToEventInvokeConfigDestinationConfigPtrOutput() EventInvokeConfigDestinationConfigPtrOutput {
	return o
}

func (o EventInvokeConfigDestinationConfigPtrOutput) ToEventInvokeConfigDestinationConfigPtrOutputWithContext(ctx context.Context) EventInvokeConfigDestinationConfigPtrOutput {
	return o
}

func (o EventInvokeConfigDestinationConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventInvokeConfigDestinationConfig] {
	return pulumix.Output[*EventInvokeConfigDestinationConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventInvokeConfigDestinationConfigPtrOutput) Elem() EventInvokeConfigDestinationConfigOutput {
	return o.ApplyT(func(v *EventInvokeConfigDestinationConfig) EventInvokeConfigDestinationConfig {
		if v != nil {
			return *v
		}
		var ret EventInvokeConfigDestinationConfig
		return ret
	}).(EventInvokeConfigDestinationConfigOutput)
}

func (o EventInvokeConfigDestinationConfigPtrOutput) OnFailure() EventInvokeConfigOnFailurePtrOutput {
	return o.ApplyT(func(v *EventInvokeConfigDestinationConfig) *EventInvokeConfigOnFailure {
		if v == nil {
			return nil
		}
		return v.OnFailure
	}).(EventInvokeConfigOnFailurePtrOutput)
}

func (o EventInvokeConfigDestinationConfigPtrOutput) OnSuccess() EventInvokeConfigOnSuccessPtrOutput {
	return o.ApplyT(func(v *EventInvokeConfigDestinationConfig) *EventInvokeConfigOnSuccess {
		if v == nil {
			return nil
		}
		return v.OnSuccess
	}).(EventInvokeConfigOnSuccessPtrOutput)
}

type EventInvokeConfigOnFailure struct {
	Destination string `pulumi:"destination"`
}

// EventInvokeConfigOnFailureInput is an input type that accepts EventInvokeConfigOnFailureArgs and EventInvokeConfigOnFailureOutput values.
// You can construct a concrete instance of `EventInvokeConfigOnFailureInput` via:
//
//	EventInvokeConfigOnFailureArgs{...}
type EventInvokeConfigOnFailureInput interface {
	pulumi.Input

	ToEventInvokeConfigOnFailureOutput() EventInvokeConfigOnFailureOutput
	ToEventInvokeConfigOnFailureOutputWithContext(context.Context) EventInvokeConfigOnFailureOutput
}

type EventInvokeConfigOnFailureArgs struct {
	Destination pulumi.StringInput `pulumi:"destination"`
}

func (EventInvokeConfigOnFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeConfigOnFailure)(nil)).Elem()
}

func (i EventInvokeConfigOnFailureArgs) ToEventInvokeConfigOnFailureOutput() EventInvokeConfigOnFailureOutput {
	return i.ToEventInvokeConfigOnFailureOutputWithContext(context.Background())
}

func (i EventInvokeConfigOnFailureArgs) ToEventInvokeConfigOnFailureOutputWithContext(ctx context.Context) EventInvokeConfigOnFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigOnFailureOutput)
}

func (i EventInvokeConfigOnFailureArgs) ToOutput(ctx context.Context) pulumix.Output[EventInvokeConfigOnFailure] {
	return pulumix.Output[EventInvokeConfigOnFailure]{
		OutputState: i.ToEventInvokeConfigOnFailureOutputWithContext(ctx).OutputState,
	}
}

func (i EventInvokeConfigOnFailureArgs) ToEventInvokeConfigOnFailurePtrOutput() EventInvokeConfigOnFailurePtrOutput {
	return i.ToEventInvokeConfigOnFailurePtrOutputWithContext(context.Background())
}

func (i EventInvokeConfigOnFailureArgs) ToEventInvokeConfigOnFailurePtrOutputWithContext(ctx context.Context) EventInvokeConfigOnFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigOnFailureOutput).ToEventInvokeConfigOnFailurePtrOutputWithContext(ctx)
}

// EventInvokeConfigOnFailurePtrInput is an input type that accepts EventInvokeConfigOnFailureArgs, EventInvokeConfigOnFailurePtr and EventInvokeConfigOnFailurePtrOutput values.
// You can construct a concrete instance of `EventInvokeConfigOnFailurePtrInput` via:
//
//	        EventInvokeConfigOnFailureArgs{...}
//
//	or:
//
//	        nil
type EventInvokeConfigOnFailurePtrInput interface {
	pulumi.Input

	ToEventInvokeConfigOnFailurePtrOutput() EventInvokeConfigOnFailurePtrOutput
	ToEventInvokeConfigOnFailurePtrOutputWithContext(context.Context) EventInvokeConfigOnFailurePtrOutput
}

type eventInvokeConfigOnFailurePtrType EventInvokeConfigOnFailureArgs

func EventInvokeConfigOnFailurePtr(v *EventInvokeConfigOnFailureArgs) EventInvokeConfigOnFailurePtrInput {
	return (*eventInvokeConfigOnFailurePtrType)(v)
}

func (*eventInvokeConfigOnFailurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventInvokeConfigOnFailure)(nil)).Elem()
}

func (i *eventInvokeConfigOnFailurePtrType) ToEventInvokeConfigOnFailurePtrOutput() EventInvokeConfigOnFailurePtrOutput {
	return i.ToEventInvokeConfigOnFailurePtrOutputWithContext(context.Background())
}

func (i *eventInvokeConfigOnFailurePtrType) ToEventInvokeConfigOnFailurePtrOutputWithContext(ctx context.Context) EventInvokeConfigOnFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigOnFailurePtrOutput)
}

func (i *eventInvokeConfigOnFailurePtrType) ToOutput(ctx context.Context) pulumix.Output[*EventInvokeConfigOnFailure] {
	return pulumix.Output[*EventInvokeConfigOnFailure]{
		OutputState: i.ToEventInvokeConfigOnFailurePtrOutputWithContext(ctx).OutputState,
	}
}

type EventInvokeConfigOnFailureOutput struct{ *pulumi.OutputState }

func (EventInvokeConfigOnFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeConfigOnFailure)(nil)).Elem()
}

func (o EventInvokeConfigOnFailureOutput) ToEventInvokeConfigOnFailureOutput() EventInvokeConfigOnFailureOutput {
	return o
}

func (o EventInvokeConfigOnFailureOutput) ToEventInvokeConfigOnFailureOutputWithContext(ctx context.Context) EventInvokeConfigOnFailureOutput {
	return o
}

func (o EventInvokeConfigOnFailureOutput) ToEventInvokeConfigOnFailurePtrOutput() EventInvokeConfigOnFailurePtrOutput {
	return o.ToEventInvokeConfigOnFailurePtrOutputWithContext(context.Background())
}

func (o EventInvokeConfigOnFailureOutput) ToEventInvokeConfigOnFailurePtrOutputWithContext(ctx context.Context) EventInvokeConfigOnFailurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventInvokeConfigOnFailure) *EventInvokeConfigOnFailure {
		return &v
	}).(EventInvokeConfigOnFailurePtrOutput)
}

func (o EventInvokeConfigOnFailureOutput) ToOutput(ctx context.Context) pulumix.Output[EventInvokeConfigOnFailure] {
	return pulumix.Output[EventInvokeConfigOnFailure]{
		OutputState: o.OutputState,
	}
}

func (o EventInvokeConfigOnFailureOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v EventInvokeConfigOnFailure) string { return v.Destination }).(pulumi.StringOutput)
}

type EventInvokeConfigOnFailurePtrOutput struct{ *pulumi.OutputState }

func (EventInvokeConfigOnFailurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventInvokeConfigOnFailure)(nil)).Elem()
}

func (o EventInvokeConfigOnFailurePtrOutput) ToEventInvokeConfigOnFailurePtrOutput() EventInvokeConfigOnFailurePtrOutput {
	return o
}

func (o EventInvokeConfigOnFailurePtrOutput) ToEventInvokeConfigOnFailurePtrOutputWithContext(ctx context.Context) EventInvokeConfigOnFailurePtrOutput {
	return o
}

func (o EventInvokeConfigOnFailurePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventInvokeConfigOnFailure] {
	return pulumix.Output[*EventInvokeConfigOnFailure]{
		OutputState: o.OutputState,
	}
}

func (o EventInvokeConfigOnFailurePtrOutput) Elem() EventInvokeConfigOnFailureOutput {
	return o.ApplyT(func(v *EventInvokeConfigOnFailure) EventInvokeConfigOnFailure {
		if v != nil {
			return *v
		}
		var ret EventInvokeConfigOnFailure
		return ret
	}).(EventInvokeConfigOnFailureOutput)
}

func (o EventInvokeConfigOnFailurePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventInvokeConfigOnFailure) *string {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(pulumi.StringPtrOutput)
}

type EventInvokeConfigOnSuccess struct {
	Destination string `pulumi:"destination"`
}

// EventInvokeConfigOnSuccessInput is an input type that accepts EventInvokeConfigOnSuccessArgs and EventInvokeConfigOnSuccessOutput values.
// You can construct a concrete instance of `EventInvokeConfigOnSuccessInput` via:
//
//	EventInvokeConfigOnSuccessArgs{...}
type EventInvokeConfigOnSuccessInput interface {
	pulumi.Input

	ToEventInvokeConfigOnSuccessOutput() EventInvokeConfigOnSuccessOutput
	ToEventInvokeConfigOnSuccessOutputWithContext(context.Context) EventInvokeConfigOnSuccessOutput
}

type EventInvokeConfigOnSuccessArgs struct {
	Destination pulumi.StringInput `pulumi:"destination"`
}

func (EventInvokeConfigOnSuccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeConfigOnSuccess)(nil)).Elem()
}

func (i EventInvokeConfigOnSuccessArgs) ToEventInvokeConfigOnSuccessOutput() EventInvokeConfigOnSuccessOutput {
	return i.ToEventInvokeConfigOnSuccessOutputWithContext(context.Background())
}

func (i EventInvokeConfigOnSuccessArgs) ToEventInvokeConfigOnSuccessOutputWithContext(ctx context.Context) EventInvokeConfigOnSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigOnSuccessOutput)
}

func (i EventInvokeConfigOnSuccessArgs) ToOutput(ctx context.Context) pulumix.Output[EventInvokeConfigOnSuccess] {
	return pulumix.Output[EventInvokeConfigOnSuccess]{
		OutputState: i.ToEventInvokeConfigOnSuccessOutputWithContext(ctx).OutputState,
	}
}

func (i EventInvokeConfigOnSuccessArgs) ToEventInvokeConfigOnSuccessPtrOutput() EventInvokeConfigOnSuccessPtrOutput {
	return i.ToEventInvokeConfigOnSuccessPtrOutputWithContext(context.Background())
}

func (i EventInvokeConfigOnSuccessArgs) ToEventInvokeConfigOnSuccessPtrOutputWithContext(ctx context.Context) EventInvokeConfigOnSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigOnSuccessOutput).ToEventInvokeConfigOnSuccessPtrOutputWithContext(ctx)
}

// EventInvokeConfigOnSuccessPtrInput is an input type that accepts EventInvokeConfigOnSuccessArgs, EventInvokeConfigOnSuccessPtr and EventInvokeConfigOnSuccessPtrOutput values.
// You can construct a concrete instance of `EventInvokeConfigOnSuccessPtrInput` via:
//
//	        EventInvokeConfigOnSuccessArgs{...}
//
//	or:
//
//	        nil
type EventInvokeConfigOnSuccessPtrInput interface {
	pulumi.Input

	ToEventInvokeConfigOnSuccessPtrOutput() EventInvokeConfigOnSuccessPtrOutput
	ToEventInvokeConfigOnSuccessPtrOutputWithContext(context.Context) EventInvokeConfigOnSuccessPtrOutput
}

type eventInvokeConfigOnSuccessPtrType EventInvokeConfigOnSuccessArgs

func EventInvokeConfigOnSuccessPtr(v *EventInvokeConfigOnSuccessArgs) EventInvokeConfigOnSuccessPtrInput {
	return (*eventInvokeConfigOnSuccessPtrType)(v)
}

func (*eventInvokeConfigOnSuccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventInvokeConfigOnSuccess)(nil)).Elem()
}

func (i *eventInvokeConfigOnSuccessPtrType) ToEventInvokeConfigOnSuccessPtrOutput() EventInvokeConfigOnSuccessPtrOutput {
	return i.ToEventInvokeConfigOnSuccessPtrOutputWithContext(context.Background())
}

func (i *eventInvokeConfigOnSuccessPtrType) ToEventInvokeConfigOnSuccessPtrOutputWithContext(ctx context.Context) EventInvokeConfigOnSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeConfigOnSuccessPtrOutput)
}

func (i *eventInvokeConfigOnSuccessPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventInvokeConfigOnSuccess] {
	return pulumix.Output[*EventInvokeConfigOnSuccess]{
		OutputState: i.ToEventInvokeConfigOnSuccessPtrOutputWithContext(ctx).OutputState,
	}
}

type EventInvokeConfigOnSuccessOutput struct{ *pulumi.OutputState }

func (EventInvokeConfigOnSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeConfigOnSuccess)(nil)).Elem()
}

func (o EventInvokeConfigOnSuccessOutput) ToEventInvokeConfigOnSuccessOutput() EventInvokeConfigOnSuccessOutput {
	return o
}

func (o EventInvokeConfigOnSuccessOutput) ToEventInvokeConfigOnSuccessOutputWithContext(ctx context.Context) EventInvokeConfigOnSuccessOutput {
	return o
}

func (o EventInvokeConfigOnSuccessOutput) ToEventInvokeConfigOnSuccessPtrOutput() EventInvokeConfigOnSuccessPtrOutput {
	return o.ToEventInvokeConfigOnSuccessPtrOutputWithContext(context.Background())
}

func (o EventInvokeConfigOnSuccessOutput) ToEventInvokeConfigOnSuccessPtrOutputWithContext(ctx context.Context) EventInvokeConfigOnSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventInvokeConfigOnSuccess) *EventInvokeConfigOnSuccess {
		return &v
	}).(EventInvokeConfigOnSuccessPtrOutput)
}

func (o EventInvokeConfigOnSuccessOutput) ToOutput(ctx context.Context) pulumix.Output[EventInvokeConfigOnSuccess] {
	return pulumix.Output[EventInvokeConfigOnSuccess]{
		OutputState: o.OutputState,
	}
}

func (o EventInvokeConfigOnSuccessOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v EventInvokeConfigOnSuccess) string { return v.Destination }).(pulumi.StringOutput)
}

type EventInvokeConfigOnSuccessPtrOutput struct{ *pulumi.OutputState }

func (EventInvokeConfigOnSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventInvokeConfigOnSuccess)(nil)).Elem()
}

func (o EventInvokeConfigOnSuccessPtrOutput) ToEventInvokeConfigOnSuccessPtrOutput() EventInvokeConfigOnSuccessPtrOutput {
	return o
}

func (o EventInvokeConfigOnSuccessPtrOutput) ToEventInvokeConfigOnSuccessPtrOutputWithContext(ctx context.Context) EventInvokeConfigOnSuccessPtrOutput {
	return o
}

func (o EventInvokeConfigOnSuccessPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventInvokeConfigOnSuccess] {
	return pulumix.Output[*EventInvokeConfigOnSuccess]{
		OutputState: o.OutputState,
	}
}

func (o EventInvokeConfigOnSuccessPtrOutput) Elem() EventInvokeConfigOnSuccessOutput {
	return o.ApplyT(func(v *EventInvokeConfigOnSuccess) EventInvokeConfigOnSuccess {
		if v != nil {
			return *v
		}
		var ret EventInvokeConfigOnSuccess
		return ret
	}).(EventInvokeConfigOnSuccessOutput)
}

func (o EventInvokeConfigOnSuccessPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventInvokeConfigOnSuccess) *string {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(pulumi.StringPtrOutput)
}

// Specific configuration settings for an MSK event source.
type EventSourceMappingAmazonManagedKafkaEventSourceConfig struct {
	// The identifier for the Kafka Consumer Group to join.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
}

// EventSourceMappingAmazonManagedKafkaEventSourceConfigInput is an input type that accepts EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs and EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput values.
// You can construct a concrete instance of `EventSourceMappingAmazonManagedKafkaEventSourceConfigInput` via:
//
//	EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs{...}
type EventSourceMappingAmazonManagedKafkaEventSourceConfigInput interface {
	pulumi.Input

	ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput
	ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput
}

// Specific configuration settings for an MSK event source.
type EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs struct {
	// The identifier for the Kafka Consumer Group to join.
	ConsumerGroupId pulumi.StringPtrInput `pulumi:"consumerGroupId"`
}

func (EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingAmazonManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (i EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return i.ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput)
}

func (i EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingAmazonManagedKafkaEventSourceConfig] {
	return pulumix.Output[EventSourceMappingAmazonManagedKafkaEventSourceConfig]{
		OutputState: i.ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return i.ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput).ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(ctx)
}

// EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrInput is an input type that accepts EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs, EventSourceMappingAmazonManagedKafkaEventSourceConfigPtr and EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrInput` via:
//
//	        EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrInput interface {
	pulumi.Input

	ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput
	ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput
}

type eventSourceMappingAmazonManagedKafkaEventSourceConfigPtrType EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs

func EventSourceMappingAmazonManagedKafkaEventSourceConfigPtr(v *EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs) EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrInput {
	return (*eventSourceMappingAmazonManagedKafkaEventSourceConfigPtrType)(v)
}

func (*eventSourceMappingAmazonManagedKafkaEventSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingAmazonManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (i *eventSourceMappingAmazonManagedKafkaEventSourceConfigPtrType) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return i.ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingAmazonManagedKafkaEventSourceConfigPtrType) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput)
}

func (i *eventSourceMappingAmazonManagedKafkaEventSourceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingAmazonManagedKafkaEventSourceConfig] {
	return pulumix.Output[*EventSourceMappingAmazonManagedKafkaEventSourceConfig]{
		OutputState: i.ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Specific configuration settings for an MSK event source.
type EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingAmazonManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return o.ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingAmazonManagedKafkaEventSourceConfig) *EventSourceMappingAmazonManagedKafkaEventSourceConfig {
		return &v
	}).(EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput)
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingAmazonManagedKafkaEventSourceConfig] {
	return pulumix.Output[EventSourceMappingAmazonManagedKafkaEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

// The identifier for the Kafka Consumer Group to join.
func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingAmazonManagedKafkaEventSourceConfig) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

type EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingAmazonManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return o
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput) ToEventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput {
	return o
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingAmazonManagedKafkaEventSourceConfig] {
	return pulumix.Output[*EventSourceMappingAmazonManagedKafkaEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput) Elem() EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput {
	return o.ApplyT(func(v *EventSourceMappingAmazonManagedKafkaEventSourceConfig) EventSourceMappingAmazonManagedKafkaEventSourceConfig {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingAmazonManagedKafkaEventSourceConfig
		return ret
	}).(EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput)
}

// The identifier for the Kafka Consumer Group to join.
func (o EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingAmazonManagedKafkaEventSourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
type EventSourceMappingDestinationConfig struct {
	// The destination configuration for failed invocations.
	OnFailure *EventSourceMappingOnFailure `pulumi:"onFailure"`
}

// EventSourceMappingDestinationConfigInput is an input type that accepts EventSourceMappingDestinationConfigArgs and EventSourceMappingDestinationConfigOutput values.
// You can construct a concrete instance of `EventSourceMappingDestinationConfigInput` via:
//
//	EventSourceMappingDestinationConfigArgs{...}
type EventSourceMappingDestinationConfigInput interface {
	pulumi.Input

	ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput
	ToEventSourceMappingDestinationConfigOutputWithContext(context.Context) EventSourceMappingDestinationConfigOutput
}

// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
type EventSourceMappingDestinationConfigArgs struct {
	// The destination configuration for failed invocations.
	OnFailure EventSourceMappingOnFailurePtrInput `pulumi:"onFailure"`
}

func (EventSourceMappingDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput {
	return i.ToEventSourceMappingDestinationConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigOutput)
}

func (i EventSourceMappingDestinationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingDestinationConfig] {
	return pulumix.Output[EventSourceMappingDestinationConfig]{
		OutputState: i.ToEventSourceMappingDestinationConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return i.ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingDestinationConfigArgs) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigOutput).ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx)
}

// EventSourceMappingDestinationConfigPtrInput is an input type that accepts EventSourceMappingDestinationConfigArgs, EventSourceMappingDestinationConfigPtr and EventSourceMappingDestinationConfigPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingDestinationConfigPtrInput` via:
//
//	        EventSourceMappingDestinationConfigArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingDestinationConfigPtrInput interface {
	pulumi.Input

	ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput
	ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Context) EventSourceMappingDestinationConfigPtrOutput
}

type eventSourceMappingDestinationConfigPtrType EventSourceMappingDestinationConfigArgs

func EventSourceMappingDestinationConfigPtr(v *EventSourceMappingDestinationConfigArgs) EventSourceMappingDestinationConfigPtrInput {
	return (*eventSourceMappingDestinationConfigPtrType)(v)
}

func (*eventSourceMappingDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (i *eventSourceMappingDestinationConfigPtrType) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return i.ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingDestinationConfigPtrType) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDestinationConfigPtrOutput)
}

func (i *eventSourceMappingDestinationConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingDestinationConfig] {
	return pulumix.Output[*EventSourceMappingDestinationConfig]{
		OutputState: i.ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
type EventSourceMappingDestinationConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigOutput() EventSourceMappingDestinationConfigOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigOutput {
	return o
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return o.ToEventSourceMappingDestinationConfigPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingDestinationConfigOutput) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingDestinationConfig) *EventSourceMappingDestinationConfig {
		return &v
	}).(EventSourceMappingDestinationConfigPtrOutput)
}

func (o EventSourceMappingDestinationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingDestinationConfig] {
	return pulumix.Output[EventSourceMappingDestinationConfig]{
		OutputState: o.OutputState,
	}
}

// The destination configuration for failed invocations.
func (o EventSourceMappingDestinationConfigOutput) OnFailure() EventSourceMappingOnFailurePtrOutput {
	return o.ApplyT(func(v EventSourceMappingDestinationConfig) *EventSourceMappingOnFailure { return v.OnFailure }).(EventSourceMappingOnFailurePtrOutput)
}

type EventSourceMappingDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingDestinationConfig)(nil)).Elem()
}

func (o EventSourceMappingDestinationConfigPtrOutput) ToEventSourceMappingDestinationConfigPtrOutput() EventSourceMappingDestinationConfigPtrOutput {
	return o
}

func (o EventSourceMappingDestinationConfigPtrOutput) ToEventSourceMappingDestinationConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDestinationConfigPtrOutput {
	return o
}

func (o EventSourceMappingDestinationConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingDestinationConfig] {
	return pulumix.Output[*EventSourceMappingDestinationConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingDestinationConfigPtrOutput) Elem() EventSourceMappingDestinationConfigOutput {
	return o.ApplyT(func(v *EventSourceMappingDestinationConfig) EventSourceMappingDestinationConfig {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingDestinationConfig
		return ret
	}).(EventSourceMappingDestinationConfigOutput)
}

// The destination configuration for failed invocations.
func (o EventSourceMappingDestinationConfigPtrOutput) OnFailure() EventSourceMappingOnFailurePtrOutput {
	return o.ApplyT(func(v *EventSourceMappingDestinationConfig) *EventSourceMappingOnFailure {
		if v == nil {
			return nil
		}
		return v.OnFailure
	}).(EventSourceMappingOnFailurePtrOutput)
}

// Document db event source config.
type EventSourceMappingDocumentDbEventSourceConfig struct {
	// The collection name to connect to.
	CollectionName *string `pulumi:"collectionName"`
	// The database name to connect to.
	DatabaseName *string `pulumi:"databaseName"`
	// Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
	FullDocument *EventSourceMappingDocumentDbEventSourceConfigFullDocument `pulumi:"fullDocument"`
}

// EventSourceMappingDocumentDbEventSourceConfigInput is an input type that accepts EventSourceMappingDocumentDbEventSourceConfigArgs and EventSourceMappingDocumentDbEventSourceConfigOutput values.
// You can construct a concrete instance of `EventSourceMappingDocumentDbEventSourceConfigInput` via:
//
//	EventSourceMappingDocumentDbEventSourceConfigArgs{...}
type EventSourceMappingDocumentDbEventSourceConfigInput interface {
	pulumi.Input

	ToEventSourceMappingDocumentDbEventSourceConfigOutput() EventSourceMappingDocumentDbEventSourceConfigOutput
	ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(context.Context) EventSourceMappingDocumentDbEventSourceConfigOutput
}

// Document db event source config.
type EventSourceMappingDocumentDbEventSourceConfigArgs struct {
	// The collection name to connect to.
	CollectionName pulumi.StringPtrInput `pulumi:"collectionName"`
	// The database name to connect to.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
	FullDocument EventSourceMappingDocumentDbEventSourceConfigFullDocumentPtrInput `pulumi:"fullDocument"`
}

func (EventSourceMappingDocumentDbEventSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDocumentDbEventSourceConfig)(nil)).Elem()
}

func (i EventSourceMappingDocumentDbEventSourceConfigArgs) ToEventSourceMappingDocumentDbEventSourceConfigOutput() EventSourceMappingDocumentDbEventSourceConfigOutput {
	return i.ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingDocumentDbEventSourceConfigArgs) ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDocumentDbEventSourceConfigOutput)
}

func (i EventSourceMappingDocumentDbEventSourceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingDocumentDbEventSourceConfig] {
	return pulumix.Output[EventSourceMappingDocumentDbEventSourceConfig]{
		OutputState: i.ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingDocumentDbEventSourceConfigArgs) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutput() EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return i.ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingDocumentDbEventSourceConfigArgs) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDocumentDbEventSourceConfigOutput).ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(ctx)
}

// EventSourceMappingDocumentDbEventSourceConfigPtrInput is an input type that accepts EventSourceMappingDocumentDbEventSourceConfigArgs, EventSourceMappingDocumentDbEventSourceConfigPtr and EventSourceMappingDocumentDbEventSourceConfigPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingDocumentDbEventSourceConfigPtrInput` via:
//
//	        EventSourceMappingDocumentDbEventSourceConfigArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingDocumentDbEventSourceConfigPtrInput interface {
	pulumi.Input

	ToEventSourceMappingDocumentDbEventSourceConfigPtrOutput() EventSourceMappingDocumentDbEventSourceConfigPtrOutput
	ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(context.Context) EventSourceMappingDocumentDbEventSourceConfigPtrOutput
}

type eventSourceMappingDocumentDbEventSourceConfigPtrType EventSourceMappingDocumentDbEventSourceConfigArgs

func EventSourceMappingDocumentDbEventSourceConfigPtr(v *EventSourceMappingDocumentDbEventSourceConfigArgs) EventSourceMappingDocumentDbEventSourceConfigPtrInput {
	return (*eventSourceMappingDocumentDbEventSourceConfigPtrType)(v)
}

func (*eventSourceMappingDocumentDbEventSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingDocumentDbEventSourceConfig)(nil)).Elem()
}

func (i *eventSourceMappingDocumentDbEventSourceConfigPtrType) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutput() EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return i.ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingDocumentDbEventSourceConfigPtrType) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingDocumentDbEventSourceConfigPtrOutput)
}

func (i *eventSourceMappingDocumentDbEventSourceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingDocumentDbEventSourceConfig] {
	return pulumix.Output[*EventSourceMappingDocumentDbEventSourceConfig]{
		OutputState: i.ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Document db event source config.
type EventSourceMappingDocumentDbEventSourceConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDocumentDbEventSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingDocumentDbEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToEventSourceMappingDocumentDbEventSourceConfigOutput() EventSourceMappingDocumentDbEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToEventSourceMappingDocumentDbEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutput() EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return o.ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingDocumentDbEventSourceConfig) *EventSourceMappingDocumentDbEventSourceConfig {
		return &v
	}).(EventSourceMappingDocumentDbEventSourceConfigPtrOutput)
}

func (o EventSourceMappingDocumentDbEventSourceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingDocumentDbEventSourceConfig] {
	return pulumix.Output[EventSourceMappingDocumentDbEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

// The collection name to connect to.
func (o EventSourceMappingDocumentDbEventSourceConfigOutput) CollectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingDocumentDbEventSourceConfig) *string { return v.CollectionName }).(pulumi.StringPtrOutput)
}

// The database name to connect to.
func (o EventSourceMappingDocumentDbEventSourceConfigOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingDocumentDbEventSourceConfig) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
func (o EventSourceMappingDocumentDbEventSourceConfigOutput) FullDocument() EventSourceMappingDocumentDbEventSourceConfigFullDocumentPtrOutput {
	return o.ApplyT(func(v EventSourceMappingDocumentDbEventSourceConfig) *EventSourceMappingDocumentDbEventSourceConfigFullDocument {
		return v.FullDocument
	}).(EventSourceMappingDocumentDbEventSourceConfigFullDocumentPtrOutput)
}

type EventSourceMappingDocumentDbEventSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingDocumentDbEventSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingDocumentDbEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingDocumentDbEventSourceConfigPtrOutput) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutput() EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return o
}

func (o EventSourceMappingDocumentDbEventSourceConfigPtrOutput) ToEventSourceMappingDocumentDbEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingDocumentDbEventSourceConfigPtrOutput {
	return o
}

func (o EventSourceMappingDocumentDbEventSourceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingDocumentDbEventSourceConfig] {
	return pulumix.Output[*EventSourceMappingDocumentDbEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingDocumentDbEventSourceConfigPtrOutput) Elem() EventSourceMappingDocumentDbEventSourceConfigOutput {
	return o.ApplyT(func(v *EventSourceMappingDocumentDbEventSourceConfig) EventSourceMappingDocumentDbEventSourceConfig {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingDocumentDbEventSourceConfig
		return ret
	}).(EventSourceMappingDocumentDbEventSourceConfigOutput)
}

// The collection name to connect to.
func (o EventSourceMappingDocumentDbEventSourceConfigPtrOutput) CollectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingDocumentDbEventSourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.CollectionName
	}).(pulumi.StringPtrOutput)
}

// The database name to connect to.
func (o EventSourceMappingDocumentDbEventSourceConfigPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingDocumentDbEventSourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
func (o EventSourceMappingDocumentDbEventSourceConfigPtrOutput) FullDocument() EventSourceMappingDocumentDbEventSourceConfigFullDocumentPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingDocumentDbEventSourceConfig) *EventSourceMappingDocumentDbEventSourceConfigFullDocument {
		if v == nil {
			return nil
		}
		return v.FullDocument
	}).(EventSourceMappingDocumentDbEventSourceConfigFullDocumentPtrOutput)
}

// The endpoints used by AWS Lambda to access a self-managed event source.
type EventSourceMappingEndpoints struct {
	// A list of Kafka server endpoints.
	KafkaBootstrapServers []string `pulumi:"kafkaBootstrapServers"`
}

// EventSourceMappingEndpointsInput is an input type that accepts EventSourceMappingEndpointsArgs and EventSourceMappingEndpointsOutput values.
// You can construct a concrete instance of `EventSourceMappingEndpointsInput` via:
//
//	EventSourceMappingEndpointsArgs{...}
type EventSourceMappingEndpointsInput interface {
	pulumi.Input

	ToEventSourceMappingEndpointsOutput() EventSourceMappingEndpointsOutput
	ToEventSourceMappingEndpointsOutputWithContext(context.Context) EventSourceMappingEndpointsOutput
}

// The endpoints used by AWS Lambda to access a self-managed event source.
type EventSourceMappingEndpointsArgs struct {
	// A list of Kafka server endpoints.
	KafkaBootstrapServers pulumi.StringArrayInput `pulumi:"kafkaBootstrapServers"`
}

func (EventSourceMappingEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingEndpoints)(nil)).Elem()
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsOutput() EventSourceMappingEndpointsOutput {
	return i.ToEventSourceMappingEndpointsOutputWithContext(context.Background())
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsOutputWithContext(ctx context.Context) EventSourceMappingEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingEndpointsOutput)
}

func (i EventSourceMappingEndpointsArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingEndpoints] {
	return pulumix.Output[EventSourceMappingEndpoints]{
		OutputState: i.ToEventSourceMappingEndpointsOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return i.ToEventSourceMappingEndpointsPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingEndpointsArgs) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingEndpointsOutput).ToEventSourceMappingEndpointsPtrOutputWithContext(ctx)
}

// EventSourceMappingEndpointsPtrInput is an input type that accepts EventSourceMappingEndpointsArgs, EventSourceMappingEndpointsPtr and EventSourceMappingEndpointsPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingEndpointsPtrInput` via:
//
//	        EventSourceMappingEndpointsArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingEndpointsPtrInput interface {
	pulumi.Input

	ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput
	ToEventSourceMappingEndpointsPtrOutputWithContext(context.Context) EventSourceMappingEndpointsPtrOutput
}

type eventSourceMappingEndpointsPtrType EventSourceMappingEndpointsArgs

func EventSourceMappingEndpointsPtr(v *EventSourceMappingEndpointsArgs) EventSourceMappingEndpointsPtrInput {
	return (*eventSourceMappingEndpointsPtrType)(v)
}

func (*eventSourceMappingEndpointsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingEndpoints)(nil)).Elem()
}

func (i *eventSourceMappingEndpointsPtrType) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return i.ToEventSourceMappingEndpointsPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingEndpointsPtrType) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingEndpointsPtrOutput)
}

func (i *eventSourceMappingEndpointsPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingEndpoints] {
	return pulumix.Output[*EventSourceMappingEndpoints]{
		OutputState: i.ToEventSourceMappingEndpointsPtrOutputWithContext(ctx).OutputState,
	}
}

// The endpoints used by AWS Lambda to access a self-managed event source.
type EventSourceMappingEndpointsOutput struct{ *pulumi.OutputState }

func (EventSourceMappingEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingEndpoints)(nil)).Elem()
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsOutput() EventSourceMappingEndpointsOutput {
	return o
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsOutputWithContext(ctx context.Context) EventSourceMappingEndpointsOutput {
	return o
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return o.ToEventSourceMappingEndpointsPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingEndpointsOutput) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingEndpoints) *EventSourceMappingEndpoints {
		return &v
	}).(EventSourceMappingEndpointsPtrOutput)
}

func (o EventSourceMappingEndpointsOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingEndpoints] {
	return pulumix.Output[EventSourceMappingEndpoints]{
		OutputState: o.OutputState,
	}
}

// A list of Kafka server endpoints.
func (o EventSourceMappingEndpointsOutput) KafkaBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSourceMappingEndpoints) []string { return v.KafkaBootstrapServers }).(pulumi.StringArrayOutput)
}

type EventSourceMappingEndpointsPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingEndpointsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingEndpoints)(nil)).Elem()
}

func (o EventSourceMappingEndpointsPtrOutput) ToEventSourceMappingEndpointsPtrOutput() EventSourceMappingEndpointsPtrOutput {
	return o
}

func (o EventSourceMappingEndpointsPtrOutput) ToEventSourceMappingEndpointsPtrOutputWithContext(ctx context.Context) EventSourceMappingEndpointsPtrOutput {
	return o
}

func (o EventSourceMappingEndpointsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingEndpoints] {
	return pulumix.Output[*EventSourceMappingEndpoints]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingEndpointsPtrOutput) Elem() EventSourceMappingEndpointsOutput {
	return o.ApplyT(func(v *EventSourceMappingEndpoints) EventSourceMappingEndpoints {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingEndpoints
		return ret
	}).(EventSourceMappingEndpointsOutput)
}

// A list of Kafka server endpoints.
func (o EventSourceMappingEndpointsPtrOutput) KafkaBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSourceMappingEndpoints) []string {
		if v == nil {
			return nil
		}
		return v.KafkaBootstrapServers
	}).(pulumi.StringArrayOutput)
}

// The filter object that defines parameters for ESM filtering.
type EventSourceMappingFilter struct {
	// The filter pattern that defines which events should be passed for invocations.
	Pattern *string `pulumi:"pattern"`
}

// EventSourceMappingFilterInput is an input type that accepts EventSourceMappingFilterArgs and EventSourceMappingFilterOutput values.
// You can construct a concrete instance of `EventSourceMappingFilterInput` via:
//
//	EventSourceMappingFilterArgs{...}
type EventSourceMappingFilterInput interface {
	pulumi.Input

	ToEventSourceMappingFilterOutput() EventSourceMappingFilterOutput
	ToEventSourceMappingFilterOutputWithContext(context.Context) EventSourceMappingFilterOutput
}

// The filter object that defines parameters for ESM filtering.
type EventSourceMappingFilterArgs struct {
	// The filter pattern that defines which events should be passed for invocations.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (EventSourceMappingFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilter)(nil)).Elem()
}

func (i EventSourceMappingFilterArgs) ToEventSourceMappingFilterOutput() EventSourceMappingFilterOutput {
	return i.ToEventSourceMappingFilterOutputWithContext(context.Background())
}

func (i EventSourceMappingFilterArgs) ToEventSourceMappingFilterOutputWithContext(ctx context.Context) EventSourceMappingFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingFilterOutput)
}

func (i EventSourceMappingFilterArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingFilter] {
	return pulumix.Output[EventSourceMappingFilter]{
		OutputState: i.ToEventSourceMappingFilterOutputWithContext(ctx).OutputState,
	}
}

// EventSourceMappingFilterArrayInput is an input type that accepts EventSourceMappingFilterArray and EventSourceMappingFilterArrayOutput values.
// You can construct a concrete instance of `EventSourceMappingFilterArrayInput` via:
//
//	EventSourceMappingFilterArray{ EventSourceMappingFilterArgs{...} }
type EventSourceMappingFilterArrayInput interface {
	pulumi.Input

	ToEventSourceMappingFilterArrayOutput() EventSourceMappingFilterArrayOutput
	ToEventSourceMappingFilterArrayOutputWithContext(context.Context) EventSourceMappingFilterArrayOutput
}

type EventSourceMappingFilterArray []EventSourceMappingFilterInput

func (EventSourceMappingFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceMappingFilter)(nil)).Elem()
}

func (i EventSourceMappingFilterArray) ToEventSourceMappingFilterArrayOutput() EventSourceMappingFilterArrayOutput {
	return i.ToEventSourceMappingFilterArrayOutputWithContext(context.Background())
}

func (i EventSourceMappingFilterArray) ToEventSourceMappingFilterArrayOutputWithContext(ctx context.Context) EventSourceMappingFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingFilterArrayOutput)
}

func (i EventSourceMappingFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSourceMappingFilter] {
	return pulumix.Output[[]EventSourceMappingFilter]{
		OutputState: i.ToEventSourceMappingFilterArrayOutputWithContext(ctx).OutputState,
	}
}

// The filter object that defines parameters for ESM filtering.
type EventSourceMappingFilterOutput struct{ *pulumi.OutputState }

func (EventSourceMappingFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilter)(nil)).Elem()
}

func (o EventSourceMappingFilterOutput) ToEventSourceMappingFilterOutput() EventSourceMappingFilterOutput {
	return o
}

func (o EventSourceMappingFilterOutput) ToEventSourceMappingFilterOutputWithContext(ctx context.Context) EventSourceMappingFilterOutput {
	return o
}

func (o EventSourceMappingFilterOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingFilter] {
	return pulumix.Output[EventSourceMappingFilter]{
		OutputState: o.OutputState,
	}
}

// The filter pattern that defines which events should be passed for invocations.
func (o EventSourceMappingFilterOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingFilter) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

type EventSourceMappingFilterArrayOutput struct{ *pulumi.OutputState }

func (EventSourceMappingFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceMappingFilter)(nil)).Elem()
}

func (o EventSourceMappingFilterArrayOutput) ToEventSourceMappingFilterArrayOutput() EventSourceMappingFilterArrayOutput {
	return o
}

func (o EventSourceMappingFilterArrayOutput) ToEventSourceMappingFilterArrayOutputWithContext(ctx context.Context) EventSourceMappingFilterArrayOutput {
	return o
}

func (o EventSourceMappingFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSourceMappingFilter] {
	return pulumix.Output[[]EventSourceMappingFilter]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingFilterArrayOutput) Index(i pulumi.IntInput) EventSourceMappingFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSourceMappingFilter {
		return vs[0].([]EventSourceMappingFilter)[vs[1].(int)]
	}).(EventSourceMappingFilterOutput)
}

// The filter criteria to control event filtering.
type EventSourceMappingFilterCriteria struct {
	// List of filters of this FilterCriteria
	Filters []EventSourceMappingFilter `pulumi:"filters"`
}

// EventSourceMappingFilterCriteriaInput is an input type that accepts EventSourceMappingFilterCriteriaArgs and EventSourceMappingFilterCriteriaOutput values.
// You can construct a concrete instance of `EventSourceMappingFilterCriteriaInput` via:
//
//	EventSourceMappingFilterCriteriaArgs{...}
type EventSourceMappingFilterCriteriaInput interface {
	pulumi.Input

	ToEventSourceMappingFilterCriteriaOutput() EventSourceMappingFilterCriteriaOutput
	ToEventSourceMappingFilterCriteriaOutputWithContext(context.Context) EventSourceMappingFilterCriteriaOutput
}

// The filter criteria to control event filtering.
type EventSourceMappingFilterCriteriaArgs struct {
	// List of filters of this FilterCriteria
	Filters EventSourceMappingFilterArrayInput `pulumi:"filters"`
}

func (EventSourceMappingFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilterCriteria)(nil)).Elem()
}

func (i EventSourceMappingFilterCriteriaArgs) ToEventSourceMappingFilterCriteriaOutput() EventSourceMappingFilterCriteriaOutput {
	return i.ToEventSourceMappingFilterCriteriaOutputWithContext(context.Background())
}

func (i EventSourceMappingFilterCriteriaArgs) ToEventSourceMappingFilterCriteriaOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingFilterCriteriaOutput)
}

func (i EventSourceMappingFilterCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingFilterCriteria] {
	return pulumix.Output[EventSourceMappingFilterCriteria]{
		OutputState: i.ToEventSourceMappingFilterCriteriaOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingFilterCriteriaArgs) ToEventSourceMappingFilterCriteriaPtrOutput() EventSourceMappingFilterCriteriaPtrOutput {
	return i.ToEventSourceMappingFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingFilterCriteriaArgs) ToEventSourceMappingFilterCriteriaPtrOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingFilterCriteriaOutput).ToEventSourceMappingFilterCriteriaPtrOutputWithContext(ctx)
}

// EventSourceMappingFilterCriteriaPtrInput is an input type that accepts EventSourceMappingFilterCriteriaArgs, EventSourceMappingFilterCriteriaPtr and EventSourceMappingFilterCriteriaPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingFilterCriteriaPtrInput` via:
//
//	        EventSourceMappingFilterCriteriaArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingFilterCriteriaPtrInput interface {
	pulumi.Input

	ToEventSourceMappingFilterCriteriaPtrOutput() EventSourceMappingFilterCriteriaPtrOutput
	ToEventSourceMappingFilterCriteriaPtrOutputWithContext(context.Context) EventSourceMappingFilterCriteriaPtrOutput
}

type eventSourceMappingFilterCriteriaPtrType EventSourceMappingFilterCriteriaArgs

func EventSourceMappingFilterCriteriaPtr(v *EventSourceMappingFilterCriteriaArgs) EventSourceMappingFilterCriteriaPtrInput {
	return (*eventSourceMappingFilterCriteriaPtrType)(v)
}

func (*eventSourceMappingFilterCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingFilterCriteria)(nil)).Elem()
}

func (i *eventSourceMappingFilterCriteriaPtrType) ToEventSourceMappingFilterCriteriaPtrOutput() EventSourceMappingFilterCriteriaPtrOutput {
	return i.ToEventSourceMappingFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingFilterCriteriaPtrType) ToEventSourceMappingFilterCriteriaPtrOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingFilterCriteriaPtrOutput)
}

func (i *eventSourceMappingFilterCriteriaPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingFilterCriteria] {
	return pulumix.Output[*EventSourceMappingFilterCriteria]{
		OutputState: i.ToEventSourceMappingFilterCriteriaPtrOutputWithContext(ctx).OutputState,
	}
}

// The filter criteria to control event filtering.
type EventSourceMappingFilterCriteriaOutput struct{ *pulumi.OutputState }

func (EventSourceMappingFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingFilterCriteria)(nil)).Elem()
}

func (o EventSourceMappingFilterCriteriaOutput) ToEventSourceMappingFilterCriteriaOutput() EventSourceMappingFilterCriteriaOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaOutput) ToEventSourceMappingFilterCriteriaOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaOutput) ToEventSourceMappingFilterCriteriaPtrOutput() EventSourceMappingFilterCriteriaPtrOutput {
	return o.ToEventSourceMappingFilterCriteriaPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingFilterCriteriaOutput) ToEventSourceMappingFilterCriteriaPtrOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingFilterCriteria) *EventSourceMappingFilterCriteria {
		return &v
	}).(EventSourceMappingFilterCriteriaPtrOutput)
}

func (o EventSourceMappingFilterCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingFilterCriteria] {
	return pulumix.Output[EventSourceMappingFilterCriteria]{
		OutputState: o.OutputState,
	}
}

// List of filters of this FilterCriteria
func (o EventSourceMappingFilterCriteriaOutput) Filters() EventSourceMappingFilterArrayOutput {
	return o.ApplyT(func(v EventSourceMappingFilterCriteria) []EventSourceMappingFilter { return v.Filters }).(EventSourceMappingFilterArrayOutput)
}

type EventSourceMappingFilterCriteriaPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingFilterCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingFilterCriteria)(nil)).Elem()
}

func (o EventSourceMappingFilterCriteriaPtrOutput) ToEventSourceMappingFilterCriteriaPtrOutput() EventSourceMappingFilterCriteriaPtrOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaPtrOutput) ToEventSourceMappingFilterCriteriaPtrOutputWithContext(ctx context.Context) EventSourceMappingFilterCriteriaPtrOutput {
	return o
}

func (o EventSourceMappingFilterCriteriaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingFilterCriteria] {
	return pulumix.Output[*EventSourceMappingFilterCriteria]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingFilterCriteriaPtrOutput) Elem() EventSourceMappingFilterCriteriaOutput {
	return o.ApplyT(func(v *EventSourceMappingFilterCriteria) EventSourceMappingFilterCriteria {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingFilterCriteria
		return ret
	}).(EventSourceMappingFilterCriteriaOutput)
}

// List of filters of this FilterCriteria
func (o EventSourceMappingFilterCriteriaPtrOutput) Filters() EventSourceMappingFilterArrayOutput {
	return o.ApplyT(func(v *EventSourceMappingFilterCriteria) []EventSourceMappingFilter {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(EventSourceMappingFilterArrayOutput)
}

// A destination for events that failed processing.
type EventSourceMappingOnFailure struct {
	// The Amazon Resource Name (ARN) of the destination resource.
	Destination *string `pulumi:"destination"`
}

// EventSourceMappingOnFailureInput is an input type that accepts EventSourceMappingOnFailureArgs and EventSourceMappingOnFailureOutput values.
// You can construct a concrete instance of `EventSourceMappingOnFailureInput` via:
//
//	EventSourceMappingOnFailureArgs{...}
type EventSourceMappingOnFailureInput interface {
	pulumi.Input

	ToEventSourceMappingOnFailureOutput() EventSourceMappingOnFailureOutput
	ToEventSourceMappingOnFailureOutputWithContext(context.Context) EventSourceMappingOnFailureOutput
}

// A destination for events that failed processing.
type EventSourceMappingOnFailureArgs struct {
	// The Amazon Resource Name (ARN) of the destination resource.
	Destination pulumi.StringPtrInput `pulumi:"destination"`
}

func (EventSourceMappingOnFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingOnFailure)(nil)).Elem()
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailureOutput() EventSourceMappingOnFailureOutput {
	return i.ToEventSourceMappingOnFailureOutputWithContext(context.Background())
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailureOutputWithContext(ctx context.Context) EventSourceMappingOnFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOnFailureOutput)
}

func (i EventSourceMappingOnFailureArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingOnFailure] {
	return pulumix.Output[EventSourceMappingOnFailure]{
		OutputState: i.ToEventSourceMappingOnFailureOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return i.ToEventSourceMappingOnFailurePtrOutputWithContext(context.Background())
}

func (i EventSourceMappingOnFailureArgs) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOnFailureOutput).ToEventSourceMappingOnFailurePtrOutputWithContext(ctx)
}

// EventSourceMappingOnFailurePtrInput is an input type that accepts EventSourceMappingOnFailureArgs, EventSourceMappingOnFailurePtr and EventSourceMappingOnFailurePtrOutput values.
// You can construct a concrete instance of `EventSourceMappingOnFailurePtrInput` via:
//
//	        EventSourceMappingOnFailureArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingOnFailurePtrInput interface {
	pulumi.Input

	ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput
	ToEventSourceMappingOnFailurePtrOutputWithContext(context.Context) EventSourceMappingOnFailurePtrOutput
}

type eventSourceMappingOnFailurePtrType EventSourceMappingOnFailureArgs

func EventSourceMappingOnFailurePtr(v *EventSourceMappingOnFailureArgs) EventSourceMappingOnFailurePtrInput {
	return (*eventSourceMappingOnFailurePtrType)(v)
}

func (*eventSourceMappingOnFailurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingOnFailure)(nil)).Elem()
}

func (i *eventSourceMappingOnFailurePtrType) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return i.ToEventSourceMappingOnFailurePtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingOnFailurePtrType) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOnFailurePtrOutput)
}

func (i *eventSourceMappingOnFailurePtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingOnFailure] {
	return pulumix.Output[*EventSourceMappingOnFailure]{
		OutputState: i.ToEventSourceMappingOnFailurePtrOutputWithContext(ctx).OutputState,
	}
}

// A destination for events that failed processing.
type EventSourceMappingOnFailureOutput struct{ *pulumi.OutputState }

func (EventSourceMappingOnFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingOnFailure)(nil)).Elem()
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailureOutput() EventSourceMappingOnFailureOutput {
	return o
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailureOutputWithContext(ctx context.Context) EventSourceMappingOnFailureOutput {
	return o
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return o.ToEventSourceMappingOnFailurePtrOutputWithContext(context.Background())
}

func (o EventSourceMappingOnFailureOutput) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingOnFailure) *EventSourceMappingOnFailure {
		return &v
	}).(EventSourceMappingOnFailurePtrOutput)
}

func (o EventSourceMappingOnFailureOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingOnFailure] {
	return pulumix.Output[EventSourceMappingOnFailure]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the destination resource.
func (o EventSourceMappingOnFailureOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingOnFailure) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

type EventSourceMappingOnFailurePtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingOnFailurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingOnFailure)(nil)).Elem()
}

func (o EventSourceMappingOnFailurePtrOutput) ToEventSourceMappingOnFailurePtrOutput() EventSourceMappingOnFailurePtrOutput {
	return o
}

func (o EventSourceMappingOnFailurePtrOutput) ToEventSourceMappingOnFailurePtrOutputWithContext(ctx context.Context) EventSourceMappingOnFailurePtrOutput {
	return o
}

func (o EventSourceMappingOnFailurePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingOnFailure] {
	return pulumix.Output[*EventSourceMappingOnFailure]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingOnFailurePtrOutput) Elem() EventSourceMappingOnFailureOutput {
	return o.ApplyT(func(v *EventSourceMappingOnFailure) EventSourceMappingOnFailure {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingOnFailure
		return ret
	}).(EventSourceMappingOnFailureOutput)
}

// The Amazon Resource Name (ARN) of the destination resource.
func (o EventSourceMappingOnFailurePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingOnFailure) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// The scaling configuration for the event source.
type EventSourceMappingScalingConfig struct {
	// The maximum number of concurrent functions that the event source can invoke.
	MaximumConcurrency *int `pulumi:"maximumConcurrency"`
}

// EventSourceMappingScalingConfigInput is an input type that accepts EventSourceMappingScalingConfigArgs and EventSourceMappingScalingConfigOutput values.
// You can construct a concrete instance of `EventSourceMappingScalingConfigInput` via:
//
//	EventSourceMappingScalingConfigArgs{...}
type EventSourceMappingScalingConfigInput interface {
	pulumi.Input

	ToEventSourceMappingScalingConfigOutput() EventSourceMappingScalingConfigOutput
	ToEventSourceMappingScalingConfigOutputWithContext(context.Context) EventSourceMappingScalingConfigOutput
}

// The scaling configuration for the event source.
type EventSourceMappingScalingConfigArgs struct {
	// The maximum number of concurrent functions that the event source can invoke.
	MaximumConcurrency pulumi.IntPtrInput `pulumi:"maximumConcurrency"`
}

func (EventSourceMappingScalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingScalingConfig)(nil)).Elem()
}

func (i EventSourceMappingScalingConfigArgs) ToEventSourceMappingScalingConfigOutput() EventSourceMappingScalingConfigOutput {
	return i.ToEventSourceMappingScalingConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingScalingConfigArgs) ToEventSourceMappingScalingConfigOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingScalingConfigOutput)
}

func (i EventSourceMappingScalingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingScalingConfig] {
	return pulumix.Output[EventSourceMappingScalingConfig]{
		OutputState: i.ToEventSourceMappingScalingConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingScalingConfigArgs) ToEventSourceMappingScalingConfigPtrOutput() EventSourceMappingScalingConfigPtrOutput {
	return i.ToEventSourceMappingScalingConfigPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingScalingConfigArgs) ToEventSourceMappingScalingConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingScalingConfigOutput).ToEventSourceMappingScalingConfigPtrOutputWithContext(ctx)
}

// EventSourceMappingScalingConfigPtrInput is an input type that accepts EventSourceMappingScalingConfigArgs, EventSourceMappingScalingConfigPtr and EventSourceMappingScalingConfigPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingScalingConfigPtrInput` via:
//
//	        EventSourceMappingScalingConfigArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingScalingConfigPtrInput interface {
	pulumi.Input

	ToEventSourceMappingScalingConfigPtrOutput() EventSourceMappingScalingConfigPtrOutput
	ToEventSourceMappingScalingConfigPtrOutputWithContext(context.Context) EventSourceMappingScalingConfigPtrOutput
}

type eventSourceMappingScalingConfigPtrType EventSourceMappingScalingConfigArgs

func EventSourceMappingScalingConfigPtr(v *EventSourceMappingScalingConfigArgs) EventSourceMappingScalingConfigPtrInput {
	return (*eventSourceMappingScalingConfigPtrType)(v)
}

func (*eventSourceMappingScalingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingScalingConfig)(nil)).Elem()
}

func (i *eventSourceMappingScalingConfigPtrType) ToEventSourceMappingScalingConfigPtrOutput() EventSourceMappingScalingConfigPtrOutput {
	return i.ToEventSourceMappingScalingConfigPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingScalingConfigPtrType) ToEventSourceMappingScalingConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingScalingConfigPtrOutput)
}

func (i *eventSourceMappingScalingConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingScalingConfig] {
	return pulumix.Output[*EventSourceMappingScalingConfig]{
		OutputState: i.ToEventSourceMappingScalingConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The scaling configuration for the event source.
type EventSourceMappingScalingConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingScalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingScalingConfig)(nil)).Elem()
}

func (o EventSourceMappingScalingConfigOutput) ToEventSourceMappingScalingConfigOutput() EventSourceMappingScalingConfigOutput {
	return o
}

func (o EventSourceMappingScalingConfigOutput) ToEventSourceMappingScalingConfigOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigOutput {
	return o
}

func (o EventSourceMappingScalingConfigOutput) ToEventSourceMappingScalingConfigPtrOutput() EventSourceMappingScalingConfigPtrOutput {
	return o.ToEventSourceMappingScalingConfigPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingScalingConfigOutput) ToEventSourceMappingScalingConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingScalingConfig) *EventSourceMappingScalingConfig {
		return &v
	}).(EventSourceMappingScalingConfigPtrOutput)
}

func (o EventSourceMappingScalingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingScalingConfig] {
	return pulumix.Output[EventSourceMappingScalingConfig]{
		OutputState: o.OutputState,
	}
}

// The maximum number of concurrent functions that the event source can invoke.
func (o EventSourceMappingScalingConfigOutput) MaximumConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSourceMappingScalingConfig) *int { return v.MaximumConcurrency }).(pulumi.IntPtrOutput)
}

type EventSourceMappingScalingConfigPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingScalingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingScalingConfig)(nil)).Elem()
}

func (o EventSourceMappingScalingConfigPtrOutput) ToEventSourceMappingScalingConfigPtrOutput() EventSourceMappingScalingConfigPtrOutput {
	return o
}

func (o EventSourceMappingScalingConfigPtrOutput) ToEventSourceMappingScalingConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingScalingConfigPtrOutput {
	return o
}

func (o EventSourceMappingScalingConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingScalingConfig] {
	return pulumix.Output[*EventSourceMappingScalingConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingScalingConfigPtrOutput) Elem() EventSourceMappingScalingConfigOutput {
	return o.ApplyT(func(v *EventSourceMappingScalingConfig) EventSourceMappingScalingConfig {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingScalingConfig
		return ret
	}).(EventSourceMappingScalingConfigOutput)
}

// The maximum number of concurrent functions that the event source can invoke.
func (o EventSourceMappingScalingConfigPtrOutput) MaximumConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingScalingConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaximumConcurrency
	}).(pulumi.IntPtrOutput)
}

// The configuration used by AWS Lambda to access a self-managed event source.
type EventSourceMappingSelfManagedEventSource struct {
	// The endpoints for a self-managed event source.
	Endpoints *EventSourceMappingEndpoints `pulumi:"endpoints"`
}

// EventSourceMappingSelfManagedEventSourceInput is an input type that accepts EventSourceMappingSelfManagedEventSourceArgs and EventSourceMappingSelfManagedEventSourceOutput values.
// You can construct a concrete instance of `EventSourceMappingSelfManagedEventSourceInput` via:
//
//	EventSourceMappingSelfManagedEventSourceArgs{...}
type EventSourceMappingSelfManagedEventSourceInput interface {
	pulumi.Input

	ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput
	ToEventSourceMappingSelfManagedEventSourceOutputWithContext(context.Context) EventSourceMappingSelfManagedEventSourceOutput
}

// The configuration used by AWS Lambda to access a self-managed event source.
type EventSourceMappingSelfManagedEventSourceArgs struct {
	// The endpoints for a self-managed event source.
	Endpoints EventSourceMappingEndpointsPtrInput `pulumi:"endpoints"`
}

func (EventSourceMappingSelfManagedEventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput {
	return i.ToEventSourceMappingSelfManagedEventSourceOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourceOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedEventSourceOutput)
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSelfManagedEventSource] {
	return pulumix.Output[EventSourceMappingSelfManagedEventSource]{
		OutputState: i.ToEventSourceMappingSelfManagedEventSourceOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return i.ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedEventSourceArgs) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedEventSourceOutput).ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx)
}

// EventSourceMappingSelfManagedEventSourcePtrInput is an input type that accepts EventSourceMappingSelfManagedEventSourceArgs, EventSourceMappingSelfManagedEventSourcePtr and EventSourceMappingSelfManagedEventSourcePtrOutput values.
// You can construct a concrete instance of `EventSourceMappingSelfManagedEventSourcePtrInput` via:
//
//	        EventSourceMappingSelfManagedEventSourceArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingSelfManagedEventSourcePtrInput interface {
	pulumi.Input

	ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput
	ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput
}

type eventSourceMappingSelfManagedEventSourcePtrType EventSourceMappingSelfManagedEventSourceArgs

func EventSourceMappingSelfManagedEventSourcePtr(v *EventSourceMappingSelfManagedEventSourceArgs) EventSourceMappingSelfManagedEventSourcePtrInput {
	return (*eventSourceMappingSelfManagedEventSourcePtrType)(v)
}

func (*eventSourceMappingSelfManagedEventSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (i *eventSourceMappingSelfManagedEventSourcePtrType) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return i.ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingSelfManagedEventSourcePtrType) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedEventSourcePtrOutput)
}

func (i *eventSourceMappingSelfManagedEventSourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingSelfManagedEventSource] {
	return pulumix.Output[*EventSourceMappingSelfManagedEventSource]{
		OutputState: i.ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration used by AWS Lambda to access a self-managed event source.
type EventSourceMappingSelfManagedEventSourceOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedEventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourceOutput() EventSourceMappingSelfManagedEventSourceOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourceOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourceOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o.ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(context.Background())
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingSelfManagedEventSource) *EventSourceMappingSelfManagedEventSource {
		return &v
	}).(EventSourceMappingSelfManagedEventSourcePtrOutput)
}

func (o EventSourceMappingSelfManagedEventSourceOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSelfManagedEventSource] {
	return pulumix.Output[EventSourceMappingSelfManagedEventSource]{
		OutputState: o.OutputState,
	}
}

// The endpoints for a self-managed event source.
func (o EventSourceMappingSelfManagedEventSourceOutput) Endpoints() EventSourceMappingEndpointsPtrOutput {
	return o.ApplyT(func(v EventSourceMappingSelfManagedEventSource) *EventSourceMappingEndpoints { return v.Endpoints }).(EventSourceMappingEndpointsPtrOutput)
}

type EventSourceMappingSelfManagedEventSourcePtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedEventSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingSelfManagedEventSource)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedEventSourcePtrOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutput() EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourcePtrOutput) ToEventSourceMappingSelfManagedEventSourcePtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedEventSourcePtrOutput {
	return o
}

func (o EventSourceMappingSelfManagedEventSourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingSelfManagedEventSource] {
	return pulumix.Output[*EventSourceMappingSelfManagedEventSource]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingSelfManagedEventSourcePtrOutput) Elem() EventSourceMappingSelfManagedEventSourceOutput {
	return o.ApplyT(func(v *EventSourceMappingSelfManagedEventSource) EventSourceMappingSelfManagedEventSource {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingSelfManagedEventSource
		return ret
	}).(EventSourceMappingSelfManagedEventSourceOutput)
}

// The endpoints for a self-managed event source.
func (o EventSourceMappingSelfManagedEventSourcePtrOutput) Endpoints() EventSourceMappingEndpointsPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingSelfManagedEventSource) *EventSourceMappingEndpoints {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(EventSourceMappingEndpointsPtrOutput)
}

// Specific configuration settings for a Self-Managed Apache Kafka event source.
type EventSourceMappingSelfManagedKafkaEventSourceConfig struct {
	// The identifier for the Kafka Consumer Group to join.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
}

// EventSourceMappingSelfManagedKafkaEventSourceConfigInput is an input type that accepts EventSourceMappingSelfManagedKafkaEventSourceConfigArgs and EventSourceMappingSelfManagedKafkaEventSourceConfigOutput values.
// You can construct a concrete instance of `EventSourceMappingSelfManagedKafkaEventSourceConfigInput` via:
//
//	EventSourceMappingSelfManagedKafkaEventSourceConfigArgs{...}
type EventSourceMappingSelfManagedKafkaEventSourceConfigInput interface {
	pulumi.Input

	ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigOutput
	ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigOutput
}

// Specific configuration settings for a Self-Managed Apache Kafka event source.
type EventSourceMappingSelfManagedKafkaEventSourceConfigArgs struct {
	// The identifier for the Kafka Consumer Group to join.
	ConsumerGroupId pulumi.StringPtrInput `pulumi:"consumerGroupId"`
}

func (EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (i EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return i.ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedKafkaEventSourceConfigOutput)
}

func (i EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSelfManagedKafkaEventSourceConfig] {
	return pulumix.Output[EventSourceMappingSelfManagedKafkaEventSourceConfig]{
		OutputState: i.ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return i.ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(context.Background())
}

func (i EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedKafkaEventSourceConfigOutput).ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(ctx)
}

// EventSourceMappingSelfManagedKafkaEventSourceConfigPtrInput is an input type that accepts EventSourceMappingSelfManagedKafkaEventSourceConfigArgs, EventSourceMappingSelfManagedKafkaEventSourceConfigPtr and EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput values.
// You can construct a concrete instance of `EventSourceMappingSelfManagedKafkaEventSourceConfigPtrInput` via:
//
//	        EventSourceMappingSelfManagedKafkaEventSourceConfigArgs{...}
//
//	or:
//
//	        nil
type EventSourceMappingSelfManagedKafkaEventSourceConfigPtrInput interface {
	pulumi.Input

	ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput
	ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput
}

type eventSourceMappingSelfManagedKafkaEventSourceConfigPtrType EventSourceMappingSelfManagedKafkaEventSourceConfigArgs

func EventSourceMappingSelfManagedKafkaEventSourceConfigPtr(v *EventSourceMappingSelfManagedKafkaEventSourceConfigArgs) EventSourceMappingSelfManagedKafkaEventSourceConfigPtrInput {
	return (*eventSourceMappingSelfManagedKafkaEventSourceConfigPtrType)(v)
}

func (*eventSourceMappingSelfManagedKafkaEventSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingSelfManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (i *eventSourceMappingSelfManagedKafkaEventSourceConfigPtrType) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return i.ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(context.Background())
}

func (i *eventSourceMappingSelfManagedKafkaEventSourceConfigPtrType) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput)
}

func (i *eventSourceMappingSelfManagedKafkaEventSourceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingSelfManagedKafkaEventSourceConfig] {
	return pulumix.Output[*EventSourceMappingSelfManagedKafkaEventSourceConfig]{
		OutputState: i.ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Specific configuration settings for a Self-Managed Apache Kafka event source.
type EventSourceMappingSelfManagedKafkaEventSourceConfigOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSelfManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return o
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return o.ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(context.Background())
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSourceMappingSelfManagedKafkaEventSourceConfig) *EventSourceMappingSelfManagedKafkaEventSourceConfig {
		return &v
	}).(EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput)
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSelfManagedKafkaEventSourceConfig] {
	return pulumix.Output[EventSourceMappingSelfManagedKafkaEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

// The identifier for the Kafka Consumer Group to join.
func (o EventSourceMappingSelfManagedKafkaEventSourceConfigOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingSelfManagedKafkaEventSourceConfig) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

type EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceMappingSelfManagedKafkaEventSourceConfig)(nil)).Elem()
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput() EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return o
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput) ToEventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutputWithContext(ctx context.Context) EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput {
	return o
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSourceMappingSelfManagedKafkaEventSourceConfig] {
	return pulumix.Output[*EventSourceMappingSelfManagedKafkaEventSourceConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput) Elem() EventSourceMappingSelfManagedKafkaEventSourceConfigOutput {
	return o.ApplyT(func(v *EventSourceMappingSelfManagedKafkaEventSourceConfig) EventSourceMappingSelfManagedKafkaEventSourceConfig {
		if v != nil {
			return *v
		}
		var ret EventSourceMappingSelfManagedKafkaEventSourceConfig
		return ret
	}).(EventSourceMappingSelfManagedKafkaEventSourceConfigOutput)
}

// The identifier for the Kafka Consumer Group to join.
func (o EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourceMappingSelfManagedKafkaEventSourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

// The configuration used by AWS Lambda to access event source
type EventSourceMappingSourceAccessConfiguration struct {
	// The type of source access configuration.
	Type *EventSourceMappingSourceAccessConfigurationType `pulumi:"type"`
	// The URI for the source access configuration resource.
	Uri *string `pulumi:"uri"`
}

// EventSourceMappingSourceAccessConfigurationInput is an input type that accepts EventSourceMappingSourceAccessConfigurationArgs and EventSourceMappingSourceAccessConfigurationOutput values.
// You can construct a concrete instance of `EventSourceMappingSourceAccessConfigurationInput` via:
//
//	EventSourceMappingSourceAccessConfigurationArgs{...}
type EventSourceMappingSourceAccessConfigurationInput interface {
	pulumi.Input

	ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput
	ToEventSourceMappingSourceAccessConfigurationOutputWithContext(context.Context) EventSourceMappingSourceAccessConfigurationOutput
}

// The configuration used by AWS Lambda to access event source
type EventSourceMappingSourceAccessConfigurationArgs struct {
	// The type of source access configuration.
	Type EventSourceMappingSourceAccessConfigurationTypePtrInput `pulumi:"type"`
	// The URI for the source access configuration resource.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (EventSourceMappingSourceAccessConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (i EventSourceMappingSourceAccessConfigurationArgs) ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput {
	return i.ToEventSourceMappingSourceAccessConfigurationOutputWithContext(context.Background())
}

func (i EventSourceMappingSourceAccessConfigurationArgs) ToEventSourceMappingSourceAccessConfigurationOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSourceAccessConfigurationOutput)
}

func (i EventSourceMappingSourceAccessConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSourceAccessConfiguration] {
	return pulumix.Output[EventSourceMappingSourceAccessConfiguration]{
		OutputState: i.ToEventSourceMappingSourceAccessConfigurationOutputWithContext(ctx).OutputState,
	}
}

// EventSourceMappingSourceAccessConfigurationArrayInput is an input type that accepts EventSourceMappingSourceAccessConfigurationArray and EventSourceMappingSourceAccessConfigurationArrayOutput values.
// You can construct a concrete instance of `EventSourceMappingSourceAccessConfigurationArrayInput` via:
//
//	EventSourceMappingSourceAccessConfigurationArray{ EventSourceMappingSourceAccessConfigurationArgs{...} }
type EventSourceMappingSourceAccessConfigurationArrayInput interface {
	pulumi.Input

	ToEventSourceMappingSourceAccessConfigurationArrayOutput() EventSourceMappingSourceAccessConfigurationArrayOutput
	ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(context.Context) EventSourceMappingSourceAccessConfigurationArrayOutput
}

type EventSourceMappingSourceAccessConfigurationArray []EventSourceMappingSourceAccessConfigurationInput

func (EventSourceMappingSourceAccessConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (i EventSourceMappingSourceAccessConfigurationArray) ToEventSourceMappingSourceAccessConfigurationArrayOutput() EventSourceMappingSourceAccessConfigurationArrayOutput {
	return i.ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(context.Background())
}

func (i EventSourceMappingSourceAccessConfigurationArray) ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingSourceAccessConfigurationArrayOutput)
}

func (i EventSourceMappingSourceAccessConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSourceMappingSourceAccessConfiguration] {
	return pulumix.Output[[]EventSourceMappingSourceAccessConfiguration]{
		OutputState: i.ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// The configuration used by AWS Lambda to access event source
type EventSourceMappingSourceAccessConfigurationOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSourceAccessConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToEventSourceMappingSourceAccessConfigurationOutput() EventSourceMappingSourceAccessConfigurationOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToEventSourceMappingSourceAccessConfigurationOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[EventSourceMappingSourceAccessConfiguration] {
	return pulumix.Output[EventSourceMappingSourceAccessConfiguration]{
		OutputState: o.OutputState,
	}
}

// The type of source access configuration.
func (o EventSourceMappingSourceAccessConfigurationOutput) Type() EventSourceMappingSourceAccessConfigurationTypePtrOutput {
	return o.ApplyT(func(v EventSourceMappingSourceAccessConfiguration) *EventSourceMappingSourceAccessConfigurationType {
		return v.Type
	}).(EventSourceMappingSourceAccessConfigurationTypePtrOutput)
}

// The URI for the source access configuration resource.
func (o EventSourceMappingSourceAccessConfigurationOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceMappingSourceAccessConfiguration) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type EventSourceMappingSourceAccessConfigurationArrayOutput struct{ *pulumi.OutputState }

func (EventSourceMappingSourceAccessConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceMappingSourceAccessConfiguration)(nil)).Elem()
}

func (o EventSourceMappingSourceAccessConfigurationArrayOutput) ToEventSourceMappingSourceAccessConfigurationArrayOutput() EventSourceMappingSourceAccessConfigurationArrayOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationArrayOutput) ToEventSourceMappingSourceAccessConfigurationArrayOutputWithContext(ctx context.Context) EventSourceMappingSourceAccessConfigurationArrayOutput {
	return o
}

func (o EventSourceMappingSourceAccessConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSourceMappingSourceAccessConfiguration] {
	return pulumix.Output[[]EventSourceMappingSourceAccessConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o EventSourceMappingSourceAccessConfigurationArrayOutput) Index(i pulumi.IntInput) EventSourceMappingSourceAccessConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSourceMappingSourceAccessConfiguration {
		return vs[0].([]EventSourceMappingSourceAccessConfiguration)[vs[1].(int)]
	}).(EventSourceMappingSourceAccessConfigurationOutput)
}

type FunctionCode struct {
	// ImageUri.
	ImageUri *string `pulumi:"imageUri"`
	// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The Amazon S3 key of the deployment package.
	S3Key *string `pulumi:"s3Key"`
	// For versioned objects, the version of the deployment package object to use.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
	ZipFile *string `pulumi:"zipFile"`
}

// FunctionCodeInput is an input type that accepts FunctionCodeArgs and FunctionCodeOutput values.
// You can construct a concrete instance of `FunctionCodeInput` via:
//
//	FunctionCodeArgs{...}
type FunctionCodeInput interface {
	pulumi.Input

	ToFunctionCodeOutput() FunctionCodeOutput
	ToFunctionCodeOutputWithContext(context.Context) FunctionCodeOutput
}

type FunctionCodeArgs struct {
	// ImageUri.
	ImageUri pulumi.StringPtrInput `pulumi:"imageUri"`
	// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
	S3Bucket pulumi.StringPtrInput `pulumi:"s3Bucket"`
	// The Amazon S3 key of the deployment package.
	S3Key pulumi.StringPtrInput `pulumi:"s3Key"`
	// For versioned objects, the version of the deployment package object to use.
	S3ObjectVersion pulumi.StringPtrInput `pulumi:"s3ObjectVersion"`
	// The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
	ZipFile pulumi.StringPtrInput `pulumi:"zipFile"`
}

func (FunctionCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionCode)(nil)).Elem()
}

func (i FunctionCodeArgs) ToFunctionCodeOutput() FunctionCodeOutput {
	return i.ToFunctionCodeOutputWithContext(context.Background())
}

func (i FunctionCodeArgs) ToFunctionCodeOutputWithContext(ctx context.Context) FunctionCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionCodeOutput)
}

func (i FunctionCodeArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionCode] {
	return pulumix.Output[FunctionCode]{
		OutputState: i.ToFunctionCodeOutputWithContext(ctx).OutputState,
	}
}

type FunctionCodeOutput struct{ *pulumi.OutputState }

func (FunctionCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionCode)(nil)).Elem()
}

func (o FunctionCodeOutput) ToFunctionCodeOutput() FunctionCodeOutput {
	return o
}

func (o FunctionCodeOutput) ToFunctionCodeOutputWithContext(ctx context.Context) FunctionCodeOutput {
	return o
}

func (o FunctionCodeOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionCode] {
	return pulumix.Output[FunctionCode]{
		OutputState: o.OutputState,
	}
}

// ImageUri.
func (o FunctionCodeOutput) ImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.ImageUri }).(pulumi.StringPtrOutput)
}

// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
func (o FunctionCodeOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 key of the deployment package.
func (o FunctionCodeOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.S3Key }).(pulumi.StringPtrOutput)
}

// For versioned objects, the version of the deployment package object to use.
func (o FunctionCodeOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.S3ObjectVersion }).(pulumi.StringPtrOutput)
}

// The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
func (o FunctionCodeOutput) ZipFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCode) *string { return v.ZipFile }).(pulumi.StringPtrOutput)
}

// The dead-letter queue for failed asynchronous invocations.
type FunctionDeadLetterConfig struct {
	// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
	TargetArn *string `pulumi:"targetArn"`
}

// FunctionDeadLetterConfigInput is an input type that accepts FunctionDeadLetterConfigArgs and FunctionDeadLetterConfigOutput values.
// You can construct a concrete instance of `FunctionDeadLetterConfigInput` via:
//
//	FunctionDeadLetterConfigArgs{...}
type FunctionDeadLetterConfigInput interface {
	pulumi.Input

	ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput
	ToFunctionDeadLetterConfigOutputWithContext(context.Context) FunctionDeadLetterConfigOutput
}

// The dead-letter queue for failed asynchronous invocations.
type FunctionDeadLetterConfigArgs struct {
	// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
	TargetArn pulumi.StringPtrInput `pulumi:"targetArn"`
}

func (FunctionDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionDeadLetterConfig)(nil)).Elem()
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput {
	return i.ToFunctionDeadLetterConfigOutputWithContext(context.Background())
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigOutputWithContext(ctx context.Context) FunctionDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionDeadLetterConfigOutput)
}

func (i FunctionDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionDeadLetterConfig] {
	return pulumix.Output[FunctionDeadLetterConfig]{
		OutputState: i.ToFunctionDeadLetterConfigOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return i.ToFunctionDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i FunctionDeadLetterConfigArgs) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionDeadLetterConfigOutput).ToFunctionDeadLetterConfigPtrOutputWithContext(ctx)
}

// FunctionDeadLetterConfigPtrInput is an input type that accepts FunctionDeadLetterConfigArgs, FunctionDeadLetterConfigPtr and FunctionDeadLetterConfigPtrOutput values.
// You can construct a concrete instance of `FunctionDeadLetterConfigPtrInput` via:
//
//	        FunctionDeadLetterConfigArgs{...}
//
//	or:
//
//	        nil
type FunctionDeadLetterConfigPtrInput interface {
	pulumi.Input

	ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput
	ToFunctionDeadLetterConfigPtrOutputWithContext(context.Context) FunctionDeadLetterConfigPtrOutput
}

type functionDeadLetterConfigPtrType FunctionDeadLetterConfigArgs

func FunctionDeadLetterConfigPtr(v *FunctionDeadLetterConfigArgs) FunctionDeadLetterConfigPtrInput {
	return (*functionDeadLetterConfigPtrType)(v)
}

func (*functionDeadLetterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionDeadLetterConfig)(nil)).Elem()
}

func (i *functionDeadLetterConfigPtrType) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return i.ToFunctionDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i *functionDeadLetterConfigPtrType) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionDeadLetterConfigPtrOutput)
}

func (i *functionDeadLetterConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionDeadLetterConfig] {
	return pulumix.Output[*FunctionDeadLetterConfig]{
		OutputState: i.ToFunctionDeadLetterConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The dead-letter queue for failed asynchronous invocations.
type FunctionDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (FunctionDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionDeadLetterConfig)(nil)).Elem()
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigOutput() FunctionDeadLetterConfigOutput {
	return o
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigOutputWithContext(ctx context.Context) FunctionDeadLetterConfigOutput {
	return o
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return o.ToFunctionDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (o FunctionDeadLetterConfigOutput) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionDeadLetterConfig) *FunctionDeadLetterConfig {
		return &v
	}).(FunctionDeadLetterConfigPtrOutput)
}

func (o FunctionDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionDeadLetterConfig] {
	return pulumix.Output[FunctionDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
func (o FunctionDeadLetterConfigOutput) TargetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionDeadLetterConfig) *string { return v.TargetArn }).(pulumi.StringPtrOutput)
}

type FunctionDeadLetterConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionDeadLetterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionDeadLetterConfig)(nil)).Elem()
}

func (o FunctionDeadLetterConfigPtrOutput) ToFunctionDeadLetterConfigPtrOutput() FunctionDeadLetterConfigPtrOutput {
	return o
}

func (o FunctionDeadLetterConfigPtrOutput) ToFunctionDeadLetterConfigPtrOutputWithContext(ctx context.Context) FunctionDeadLetterConfigPtrOutput {
	return o
}

func (o FunctionDeadLetterConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionDeadLetterConfig] {
	return pulumix.Output[*FunctionDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

func (o FunctionDeadLetterConfigPtrOutput) Elem() FunctionDeadLetterConfigOutput {
	return o.ApplyT(func(v *FunctionDeadLetterConfig) FunctionDeadLetterConfig {
		if v != nil {
			return *v
		}
		var ret FunctionDeadLetterConfig
		return ret
	}).(FunctionDeadLetterConfigOutput)
}

// The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
func (o FunctionDeadLetterConfigPtrOutput) TargetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionDeadLetterConfig) *string {
		if v == nil {
			return nil
		}
		return v.TargetArn
	}).(pulumi.StringPtrOutput)
}

// A function's environment variable settings.
type FunctionEnvironment struct {
	// Environment variable key-value pairs.
	Variables interface{} `pulumi:"variables"`
}

// FunctionEnvironmentInput is an input type that accepts FunctionEnvironmentArgs and FunctionEnvironmentOutput values.
// You can construct a concrete instance of `FunctionEnvironmentInput` via:
//
//	FunctionEnvironmentArgs{...}
type FunctionEnvironmentInput interface {
	pulumi.Input

	ToFunctionEnvironmentOutput() FunctionEnvironmentOutput
	ToFunctionEnvironmentOutputWithContext(context.Context) FunctionEnvironmentOutput
}

// A function's environment variable settings.
type FunctionEnvironmentArgs struct {
	// Environment variable key-value pairs.
	Variables pulumi.Input `pulumi:"variables"`
}

func (FunctionEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEnvironment)(nil)).Elem()
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentOutput() FunctionEnvironmentOutput {
	return i.ToFunctionEnvironmentOutputWithContext(context.Background())
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentOutputWithContext(ctx context.Context) FunctionEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEnvironmentOutput)
}

func (i FunctionEnvironmentArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionEnvironment] {
	return pulumix.Output[FunctionEnvironment]{
		OutputState: i.ToFunctionEnvironmentOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return i.ToFunctionEnvironmentPtrOutputWithContext(context.Background())
}

func (i FunctionEnvironmentArgs) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEnvironmentOutput).ToFunctionEnvironmentPtrOutputWithContext(ctx)
}

// FunctionEnvironmentPtrInput is an input type that accepts FunctionEnvironmentArgs, FunctionEnvironmentPtr and FunctionEnvironmentPtrOutput values.
// You can construct a concrete instance of `FunctionEnvironmentPtrInput` via:
//
//	        FunctionEnvironmentArgs{...}
//
//	or:
//
//	        nil
type FunctionEnvironmentPtrInput interface {
	pulumi.Input

	ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput
	ToFunctionEnvironmentPtrOutputWithContext(context.Context) FunctionEnvironmentPtrOutput
}

type functionEnvironmentPtrType FunctionEnvironmentArgs

func FunctionEnvironmentPtr(v *FunctionEnvironmentArgs) FunctionEnvironmentPtrInput {
	return (*functionEnvironmentPtrType)(v)
}

func (*functionEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionEnvironment)(nil)).Elem()
}

func (i *functionEnvironmentPtrType) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return i.ToFunctionEnvironmentPtrOutputWithContext(context.Background())
}

func (i *functionEnvironmentPtrType) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEnvironmentPtrOutput)
}

func (i *functionEnvironmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionEnvironment] {
	return pulumix.Output[*FunctionEnvironment]{
		OutputState: i.ToFunctionEnvironmentPtrOutputWithContext(ctx).OutputState,
	}
}

// A function's environment variable settings.
type FunctionEnvironmentOutput struct{ *pulumi.OutputState }

func (FunctionEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEnvironment)(nil)).Elem()
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentOutput() FunctionEnvironmentOutput {
	return o
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentOutputWithContext(ctx context.Context) FunctionEnvironmentOutput {
	return o
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return o.ToFunctionEnvironmentPtrOutputWithContext(context.Background())
}

func (o FunctionEnvironmentOutput) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionEnvironment) *FunctionEnvironment {
		return &v
	}).(FunctionEnvironmentPtrOutput)
}

func (o FunctionEnvironmentOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionEnvironment] {
	return pulumix.Output[FunctionEnvironment]{
		OutputState: o.OutputState,
	}
}

// Environment variable key-value pairs.
func (o FunctionEnvironmentOutput) Variables() pulumi.AnyOutput {
	return o.ApplyT(func(v FunctionEnvironment) interface{} { return v.Variables }).(pulumi.AnyOutput)
}

type FunctionEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (FunctionEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionEnvironment)(nil)).Elem()
}

func (o FunctionEnvironmentPtrOutput) ToFunctionEnvironmentPtrOutput() FunctionEnvironmentPtrOutput {
	return o
}

func (o FunctionEnvironmentPtrOutput) ToFunctionEnvironmentPtrOutputWithContext(ctx context.Context) FunctionEnvironmentPtrOutput {
	return o
}

func (o FunctionEnvironmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionEnvironment] {
	return pulumix.Output[*FunctionEnvironment]{
		OutputState: o.OutputState,
	}
}

func (o FunctionEnvironmentPtrOutput) Elem() FunctionEnvironmentOutput {
	return o.ApplyT(func(v *FunctionEnvironment) FunctionEnvironment {
		if v != nil {
			return *v
		}
		var ret FunctionEnvironment
		return ret
	}).(FunctionEnvironmentOutput)
}

// Environment variable key-value pairs.
func (o FunctionEnvironmentPtrOutput) Variables() pulumi.AnyOutput {
	return o.ApplyT(func(v *FunctionEnvironment) interface{} {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(pulumi.AnyOutput)
}

// A function's ephemeral storage settings.
type FunctionEphemeralStorage struct {
	// The amount of ephemeral storage that your function has access to.
	Size int `pulumi:"size"`
}

// FunctionEphemeralStorageInput is an input type that accepts FunctionEphemeralStorageArgs and FunctionEphemeralStorageOutput values.
// You can construct a concrete instance of `FunctionEphemeralStorageInput` via:
//
//	FunctionEphemeralStorageArgs{...}
type FunctionEphemeralStorageInput interface {
	pulumi.Input

	ToFunctionEphemeralStorageOutput() FunctionEphemeralStorageOutput
	ToFunctionEphemeralStorageOutputWithContext(context.Context) FunctionEphemeralStorageOutput
}

// A function's ephemeral storage settings.
type FunctionEphemeralStorageArgs struct {
	// The amount of ephemeral storage that your function has access to.
	Size pulumi.IntInput `pulumi:"size"`
}

func (FunctionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEphemeralStorage)(nil)).Elem()
}

func (i FunctionEphemeralStorageArgs) ToFunctionEphemeralStorageOutput() FunctionEphemeralStorageOutput {
	return i.ToFunctionEphemeralStorageOutputWithContext(context.Background())
}

func (i FunctionEphemeralStorageArgs) ToFunctionEphemeralStorageOutputWithContext(ctx context.Context) FunctionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEphemeralStorageOutput)
}

func (i FunctionEphemeralStorageArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionEphemeralStorage] {
	return pulumix.Output[FunctionEphemeralStorage]{
		OutputState: i.ToFunctionEphemeralStorageOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionEphemeralStorageArgs) ToFunctionEphemeralStoragePtrOutput() FunctionEphemeralStoragePtrOutput {
	return i.ToFunctionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i FunctionEphemeralStorageArgs) ToFunctionEphemeralStoragePtrOutputWithContext(ctx context.Context) FunctionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEphemeralStorageOutput).ToFunctionEphemeralStoragePtrOutputWithContext(ctx)
}

// FunctionEphemeralStoragePtrInput is an input type that accepts FunctionEphemeralStorageArgs, FunctionEphemeralStoragePtr and FunctionEphemeralStoragePtrOutput values.
// You can construct a concrete instance of `FunctionEphemeralStoragePtrInput` via:
//
//	        FunctionEphemeralStorageArgs{...}
//
//	or:
//
//	        nil
type FunctionEphemeralStoragePtrInput interface {
	pulumi.Input

	ToFunctionEphemeralStoragePtrOutput() FunctionEphemeralStoragePtrOutput
	ToFunctionEphemeralStoragePtrOutputWithContext(context.Context) FunctionEphemeralStoragePtrOutput
}

type functionEphemeralStoragePtrType FunctionEphemeralStorageArgs

func FunctionEphemeralStoragePtr(v *FunctionEphemeralStorageArgs) FunctionEphemeralStoragePtrInput {
	return (*functionEphemeralStoragePtrType)(v)
}

func (*functionEphemeralStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionEphemeralStorage)(nil)).Elem()
}

func (i *functionEphemeralStoragePtrType) ToFunctionEphemeralStoragePtrOutput() FunctionEphemeralStoragePtrOutput {
	return i.ToFunctionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i *functionEphemeralStoragePtrType) ToFunctionEphemeralStoragePtrOutputWithContext(ctx context.Context) FunctionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionEphemeralStoragePtrOutput)
}

func (i *functionEphemeralStoragePtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionEphemeralStorage] {
	return pulumix.Output[*FunctionEphemeralStorage]{
		OutputState: i.ToFunctionEphemeralStoragePtrOutputWithContext(ctx).OutputState,
	}
}

// A function's ephemeral storage settings.
type FunctionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (FunctionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionEphemeralStorage)(nil)).Elem()
}

func (o FunctionEphemeralStorageOutput) ToFunctionEphemeralStorageOutput() FunctionEphemeralStorageOutput {
	return o
}

func (o FunctionEphemeralStorageOutput) ToFunctionEphemeralStorageOutputWithContext(ctx context.Context) FunctionEphemeralStorageOutput {
	return o
}

func (o FunctionEphemeralStorageOutput) ToFunctionEphemeralStoragePtrOutput() FunctionEphemeralStoragePtrOutput {
	return o.ToFunctionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (o FunctionEphemeralStorageOutput) ToFunctionEphemeralStoragePtrOutputWithContext(ctx context.Context) FunctionEphemeralStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionEphemeralStorage) *FunctionEphemeralStorage {
		return &v
	}).(FunctionEphemeralStoragePtrOutput)
}

func (o FunctionEphemeralStorageOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionEphemeralStorage] {
	return pulumix.Output[FunctionEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

// The amount of ephemeral storage that your function has access to.
func (o FunctionEphemeralStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v FunctionEphemeralStorage) int { return v.Size }).(pulumi.IntOutput)
}

type FunctionEphemeralStoragePtrOutput struct{ *pulumi.OutputState }

func (FunctionEphemeralStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionEphemeralStorage)(nil)).Elem()
}

func (o FunctionEphemeralStoragePtrOutput) ToFunctionEphemeralStoragePtrOutput() FunctionEphemeralStoragePtrOutput {
	return o
}

func (o FunctionEphemeralStoragePtrOutput) ToFunctionEphemeralStoragePtrOutputWithContext(ctx context.Context) FunctionEphemeralStoragePtrOutput {
	return o
}

func (o FunctionEphemeralStoragePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionEphemeralStorage] {
	return pulumix.Output[*FunctionEphemeralStorage]{
		OutputState: o.OutputState,
	}
}

func (o FunctionEphemeralStoragePtrOutput) Elem() FunctionEphemeralStorageOutput {
	return o.ApplyT(func(v *FunctionEphemeralStorage) FunctionEphemeralStorage {
		if v != nil {
			return *v
		}
		var ret FunctionEphemeralStorage
		return ret
	}).(FunctionEphemeralStorageOutput)
}

// The amount of ephemeral storage that your function has access to.
func (o FunctionEphemeralStoragePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FunctionEphemeralStorage) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

type FunctionFileSystemConfig struct {
	// The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
	Arn string `pulumi:"arn"`
	// The path where the function can access the file system, starting with /mnt/.
	LocalMountPath string `pulumi:"localMountPath"`
}

// FunctionFileSystemConfigInput is an input type that accepts FunctionFileSystemConfigArgs and FunctionFileSystemConfigOutput values.
// You can construct a concrete instance of `FunctionFileSystemConfigInput` via:
//
//	FunctionFileSystemConfigArgs{...}
type FunctionFileSystemConfigInput interface {
	pulumi.Input

	ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput
	ToFunctionFileSystemConfigOutputWithContext(context.Context) FunctionFileSystemConfigOutput
}

type FunctionFileSystemConfigArgs struct {
	// The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The path where the function can access the file system, starting with /mnt/.
	LocalMountPath pulumi.StringInput `pulumi:"localMountPath"`
}

func (FunctionFileSystemConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFileSystemConfig)(nil)).Elem()
}

func (i FunctionFileSystemConfigArgs) ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput {
	return i.ToFunctionFileSystemConfigOutputWithContext(context.Background())
}

func (i FunctionFileSystemConfigArgs) ToFunctionFileSystemConfigOutputWithContext(ctx context.Context) FunctionFileSystemConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFileSystemConfigOutput)
}

func (i FunctionFileSystemConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionFileSystemConfig] {
	return pulumix.Output[FunctionFileSystemConfig]{
		OutputState: i.ToFunctionFileSystemConfigOutputWithContext(ctx).OutputState,
	}
}

// FunctionFileSystemConfigArrayInput is an input type that accepts FunctionFileSystemConfigArray and FunctionFileSystemConfigArrayOutput values.
// You can construct a concrete instance of `FunctionFileSystemConfigArrayInput` via:
//
//	FunctionFileSystemConfigArray{ FunctionFileSystemConfigArgs{...} }
type FunctionFileSystemConfigArrayInput interface {
	pulumi.Input

	ToFunctionFileSystemConfigArrayOutput() FunctionFileSystemConfigArrayOutput
	ToFunctionFileSystemConfigArrayOutputWithContext(context.Context) FunctionFileSystemConfigArrayOutput
}

type FunctionFileSystemConfigArray []FunctionFileSystemConfigInput

func (FunctionFileSystemConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFileSystemConfig)(nil)).Elem()
}

func (i FunctionFileSystemConfigArray) ToFunctionFileSystemConfigArrayOutput() FunctionFileSystemConfigArrayOutput {
	return i.ToFunctionFileSystemConfigArrayOutputWithContext(context.Background())
}

func (i FunctionFileSystemConfigArray) ToFunctionFileSystemConfigArrayOutputWithContext(ctx context.Context) FunctionFileSystemConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionFileSystemConfigArrayOutput)
}

func (i FunctionFileSystemConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]FunctionFileSystemConfig] {
	return pulumix.Output[[]FunctionFileSystemConfig]{
		OutputState: i.ToFunctionFileSystemConfigArrayOutputWithContext(ctx).OutputState,
	}
}

type FunctionFileSystemConfigOutput struct{ *pulumi.OutputState }

func (FunctionFileSystemConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionFileSystemConfig)(nil)).Elem()
}

func (o FunctionFileSystemConfigOutput) ToFunctionFileSystemConfigOutput() FunctionFileSystemConfigOutput {
	return o
}

func (o FunctionFileSystemConfigOutput) ToFunctionFileSystemConfigOutputWithContext(ctx context.Context) FunctionFileSystemConfigOutput {
	return o
}

func (o FunctionFileSystemConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionFileSystemConfig] {
	return pulumix.Output[FunctionFileSystemConfig]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
func (o FunctionFileSystemConfigOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFileSystemConfig) string { return v.Arn }).(pulumi.StringOutput)
}

// The path where the function can access the file system, starting with /mnt/.
func (o FunctionFileSystemConfigOutput) LocalMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionFileSystemConfig) string { return v.LocalMountPath }).(pulumi.StringOutput)
}

type FunctionFileSystemConfigArrayOutput struct{ *pulumi.OutputState }

func (FunctionFileSystemConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionFileSystemConfig)(nil)).Elem()
}

func (o FunctionFileSystemConfigArrayOutput) ToFunctionFileSystemConfigArrayOutput() FunctionFileSystemConfigArrayOutput {
	return o
}

func (o FunctionFileSystemConfigArrayOutput) ToFunctionFileSystemConfigArrayOutputWithContext(ctx context.Context) FunctionFileSystemConfigArrayOutput {
	return o
}

func (o FunctionFileSystemConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FunctionFileSystemConfig] {
	return pulumix.Output[[]FunctionFileSystemConfig]{
		OutputState: o.OutputState,
	}
}

func (o FunctionFileSystemConfigArrayOutput) Index(i pulumi.IntInput) FunctionFileSystemConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionFileSystemConfig {
		return vs[0].([]FunctionFileSystemConfig)[vs[1].(int)]
	}).(FunctionFileSystemConfigOutput)
}

type FunctionImageConfig struct {
	// Command.
	Command []string `pulumi:"command"`
	// EntryPoint.
	EntryPoint []string `pulumi:"entryPoint"`
	// WorkingDirectory.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// FunctionImageConfigInput is an input type that accepts FunctionImageConfigArgs and FunctionImageConfigOutput values.
// You can construct a concrete instance of `FunctionImageConfigInput` via:
//
//	FunctionImageConfigArgs{...}
type FunctionImageConfigInput interface {
	pulumi.Input

	ToFunctionImageConfigOutput() FunctionImageConfigOutput
	ToFunctionImageConfigOutputWithContext(context.Context) FunctionImageConfigOutput
}

type FunctionImageConfigArgs struct {
	// Command.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// EntryPoint.
	EntryPoint pulumi.StringArrayInput `pulumi:"entryPoint"`
	// WorkingDirectory.
	WorkingDirectory pulumi.StringPtrInput `pulumi:"workingDirectory"`
}

func (FunctionImageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return i.ToFunctionImageConfigOutputWithContext(context.Background())
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigOutput)
}

func (i FunctionImageConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionImageConfig] {
	return pulumix.Output[FunctionImageConfig]{
		OutputState: i.ToFunctionImageConfigOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return i.ToFunctionImageConfigPtrOutputWithContext(context.Background())
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigOutput).ToFunctionImageConfigPtrOutputWithContext(ctx)
}

// FunctionImageConfigPtrInput is an input type that accepts FunctionImageConfigArgs, FunctionImageConfigPtr and FunctionImageConfigPtrOutput values.
// You can construct a concrete instance of `FunctionImageConfigPtrInput` via:
//
//	        FunctionImageConfigArgs{...}
//
//	or:
//
//	        nil
type FunctionImageConfigPtrInput interface {
	pulumi.Input

	ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput
	ToFunctionImageConfigPtrOutputWithContext(context.Context) FunctionImageConfigPtrOutput
}

type functionImageConfigPtrType FunctionImageConfigArgs

func FunctionImageConfigPtr(v *FunctionImageConfigArgs) FunctionImageConfigPtrInput {
	return (*functionImageConfigPtrType)(v)
}

func (*functionImageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionImageConfig)(nil)).Elem()
}

func (i *functionImageConfigPtrType) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return i.ToFunctionImageConfigPtrOutputWithContext(context.Background())
}

func (i *functionImageConfigPtrType) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigPtrOutput)
}

func (i *functionImageConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionImageConfig] {
	return pulumix.Output[*FunctionImageConfig]{
		OutputState: i.ToFunctionImageConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type FunctionImageConfigOutput struct{ *pulumi.OutputState }

func (FunctionImageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return o
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return o
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return o.ToFunctionImageConfigPtrOutputWithContext(context.Background())
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionImageConfig) *FunctionImageConfig {
		return &v
	}).(FunctionImageConfigPtrOutput)
}

func (o FunctionImageConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionImageConfig] {
	return pulumix.Output[FunctionImageConfig]{
		OutputState: o.OutputState,
	}
}

// Command.
func (o FunctionImageConfigOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionImageConfig) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// EntryPoint.
func (o FunctionImageConfigOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionImageConfig) []string { return v.EntryPoint }).(pulumi.StringArrayOutput)
}

// WorkingDirectory.
func (o FunctionImageConfigOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionImageConfig) *string { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type FunctionImageConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionImageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionImageConfig)(nil)).Elem()
}

func (o FunctionImageConfigPtrOutput) ToFunctionImageConfigPtrOutput() FunctionImageConfigPtrOutput {
	return o
}

func (o FunctionImageConfigPtrOutput) ToFunctionImageConfigPtrOutputWithContext(ctx context.Context) FunctionImageConfigPtrOutput {
	return o
}

func (o FunctionImageConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionImageConfig] {
	return pulumix.Output[*FunctionImageConfig]{
		OutputState: o.OutputState,
	}
}

func (o FunctionImageConfigPtrOutput) Elem() FunctionImageConfigOutput {
	return o.ApplyT(func(v *FunctionImageConfig) FunctionImageConfig {
		if v != nil {
			return *v
		}
		var ret FunctionImageConfig
		return ret
	}).(FunctionImageConfigOutput)
}

// Command.
func (o FunctionImageConfigPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionImageConfig) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// EntryPoint.
func (o FunctionImageConfigPtrOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionImageConfig) []string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringArrayOutput)
}

// WorkingDirectory.
func (o FunctionImageConfigPtrOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionImageConfig) *string {
		if v == nil {
			return nil
		}
		return v.WorkingDirectory
	}).(pulumi.StringPtrOutput)
}

type FunctionRuntimeManagementConfig struct {
	// Unique identifier for a runtime version arn
	RuntimeVersionArn *string `pulumi:"runtimeVersionArn"`
	// Trigger for runtime update
	UpdateRuntimeOn FunctionRuntimeManagementConfigUpdateRuntimeOn `pulumi:"updateRuntimeOn"`
}

// FunctionRuntimeManagementConfigInput is an input type that accepts FunctionRuntimeManagementConfigArgs and FunctionRuntimeManagementConfigOutput values.
// You can construct a concrete instance of `FunctionRuntimeManagementConfigInput` via:
//
//	FunctionRuntimeManagementConfigArgs{...}
type FunctionRuntimeManagementConfigInput interface {
	pulumi.Input

	ToFunctionRuntimeManagementConfigOutput() FunctionRuntimeManagementConfigOutput
	ToFunctionRuntimeManagementConfigOutputWithContext(context.Context) FunctionRuntimeManagementConfigOutput
}

type FunctionRuntimeManagementConfigArgs struct {
	// Unique identifier for a runtime version arn
	RuntimeVersionArn pulumi.StringPtrInput `pulumi:"runtimeVersionArn"`
	// Trigger for runtime update
	UpdateRuntimeOn FunctionRuntimeManagementConfigUpdateRuntimeOnInput `pulumi:"updateRuntimeOn"`
}

func (FunctionRuntimeManagementConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionRuntimeManagementConfig)(nil)).Elem()
}

func (i FunctionRuntimeManagementConfigArgs) ToFunctionRuntimeManagementConfigOutput() FunctionRuntimeManagementConfigOutput {
	return i.ToFunctionRuntimeManagementConfigOutputWithContext(context.Background())
}

func (i FunctionRuntimeManagementConfigArgs) ToFunctionRuntimeManagementConfigOutputWithContext(ctx context.Context) FunctionRuntimeManagementConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRuntimeManagementConfigOutput)
}

func (i FunctionRuntimeManagementConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionRuntimeManagementConfig] {
	return pulumix.Output[FunctionRuntimeManagementConfig]{
		OutputState: i.ToFunctionRuntimeManagementConfigOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionRuntimeManagementConfigArgs) ToFunctionRuntimeManagementConfigPtrOutput() FunctionRuntimeManagementConfigPtrOutput {
	return i.ToFunctionRuntimeManagementConfigPtrOutputWithContext(context.Background())
}

func (i FunctionRuntimeManagementConfigArgs) ToFunctionRuntimeManagementConfigPtrOutputWithContext(ctx context.Context) FunctionRuntimeManagementConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRuntimeManagementConfigOutput).ToFunctionRuntimeManagementConfigPtrOutputWithContext(ctx)
}

// FunctionRuntimeManagementConfigPtrInput is an input type that accepts FunctionRuntimeManagementConfigArgs, FunctionRuntimeManagementConfigPtr and FunctionRuntimeManagementConfigPtrOutput values.
// You can construct a concrete instance of `FunctionRuntimeManagementConfigPtrInput` via:
//
//	        FunctionRuntimeManagementConfigArgs{...}
//
//	or:
//
//	        nil
type FunctionRuntimeManagementConfigPtrInput interface {
	pulumi.Input

	ToFunctionRuntimeManagementConfigPtrOutput() FunctionRuntimeManagementConfigPtrOutput
	ToFunctionRuntimeManagementConfigPtrOutputWithContext(context.Context) FunctionRuntimeManagementConfigPtrOutput
}

type functionRuntimeManagementConfigPtrType FunctionRuntimeManagementConfigArgs

func FunctionRuntimeManagementConfigPtr(v *FunctionRuntimeManagementConfigArgs) FunctionRuntimeManagementConfigPtrInput {
	return (*functionRuntimeManagementConfigPtrType)(v)
}

func (*functionRuntimeManagementConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionRuntimeManagementConfig)(nil)).Elem()
}

func (i *functionRuntimeManagementConfigPtrType) ToFunctionRuntimeManagementConfigPtrOutput() FunctionRuntimeManagementConfigPtrOutput {
	return i.ToFunctionRuntimeManagementConfigPtrOutputWithContext(context.Background())
}

func (i *functionRuntimeManagementConfigPtrType) ToFunctionRuntimeManagementConfigPtrOutputWithContext(ctx context.Context) FunctionRuntimeManagementConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRuntimeManagementConfigPtrOutput)
}

func (i *functionRuntimeManagementConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionRuntimeManagementConfig] {
	return pulumix.Output[*FunctionRuntimeManagementConfig]{
		OutputState: i.ToFunctionRuntimeManagementConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type FunctionRuntimeManagementConfigOutput struct{ *pulumi.OutputState }

func (FunctionRuntimeManagementConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionRuntimeManagementConfig)(nil)).Elem()
}

func (o FunctionRuntimeManagementConfigOutput) ToFunctionRuntimeManagementConfigOutput() FunctionRuntimeManagementConfigOutput {
	return o
}

func (o FunctionRuntimeManagementConfigOutput) ToFunctionRuntimeManagementConfigOutputWithContext(ctx context.Context) FunctionRuntimeManagementConfigOutput {
	return o
}

func (o FunctionRuntimeManagementConfigOutput) ToFunctionRuntimeManagementConfigPtrOutput() FunctionRuntimeManagementConfigPtrOutput {
	return o.ToFunctionRuntimeManagementConfigPtrOutputWithContext(context.Background())
}

func (o FunctionRuntimeManagementConfigOutput) ToFunctionRuntimeManagementConfigPtrOutputWithContext(ctx context.Context) FunctionRuntimeManagementConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionRuntimeManagementConfig) *FunctionRuntimeManagementConfig {
		return &v
	}).(FunctionRuntimeManagementConfigPtrOutput)
}

func (o FunctionRuntimeManagementConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionRuntimeManagementConfig] {
	return pulumix.Output[FunctionRuntimeManagementConfig]{
		OutputState: o.OutputState,
	}
}

// Unique identifier for a runtime version arn
func (o FunctionRuntimeManagementConfigOutput) RuntimeVersionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionRuntimeManagementConfig) *string { return v.RuntimeVersionArn }).(pulumi.StringPtrOutput)
}

// Trigger for runtime update
func (o FunctionRuntimeManagementConfigOutput) UpdateRuntimeOn() FunctionRuntimeManagementConfigUpdateRuntimeOnOutput {
	return o.ApplyT(func(v FunctionRuntimeManagementConfig) FunctionRuntimeManagementConfigUpdateRuntimeOn {
		return v.UpdateRuntimeOn
	}).(FunctionRuntimeManagementConfigUpdateRuntimeOnOutput)
}

type FunctionRuntimeManagementConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionRuntimeManagementConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionRuntimeManagementConfig)(nil)).Elem()
}

func (o FunctionRuntimeManagementConfigPtrOutput) ToFunctionRuntimeManagementConfigPtrOutput() FunctionRuntimeManagementConfigPtrOutput {
	return o
}

func (o FunctionRuntimeManagementConfigPtrOutput) ToFunctionRuntimeManagementConfigPtrOutputWithContext(ctx context.Context) FunctionRuntimeManagementConfigPtrOutput {
	return o
}

func (o FunctionRuntimeManagementConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionRuntimeManagementConfig] {
	return pulumix.Output[*FunctionRuntimeManagementConfig]{
		OutputState: o.OutputState,
	}
}

func (o FunctionRuntimeManagementConfigPtrOutput) Elem() FunctionRuntimeManagementConfigOutput {
	return o.ApplyT(func(v *FunctionRuntimeManagementConfig) FunctionRuntimeManagementConfig {
		if v != nil {
			return *v
		}
		var ret FunctionRuntimeManagementConfig
		return ret
	}).(FunctionRuntimeManagementConfigOutput)
}

// Unique identifier for a runtime version arn
func (o FunctionRuntimeManagementConfigPtrOutput) RuntimeVersionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionRuntimeManagementConfig) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersionArn
	}).(pulumi.StringPtrOutput)
}

// Trigger for runtime update
func (o FunctionRuntimeManagementConfigPtrOutput) UpdateRuntimeOn() FunctionRuntimeManagementConfigUpdateRuntimeOnPtrOutput {
	return o.ApplyT(func(v *FunctionRuntimeManagementConfig) *FunctionRuntimeManagementConfigUpdateRuntimeOn {
		if v == nil {
			return nil
		}
		return &v.UpdateRuntimeOn
	}).(FunctionRuntimeManagementConfigUpdateRuntimeOnPtrOutput)
}

// The function's SnapStart setting. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
type FunctionSnapStart struct {
	// Applying SnapStart setting on function resource type.
	ApplyOn FunctionSnapStartApplyOn `pulumi:"applyOn"`
}

// FunctionSnapStartInput is an input type that accepts FunctionSnapStartArgs and FunctionSnapStartOutput values.
// You can construct a concrete instance of `FunctionSnapStartInput` via:
//
//	FunctionSnapStartArgs{...}
type FunctionSnapStartInput interface {
	pulumi.Input

	ToFunctionSnapStartOutput() FunctionSnapStartOutput
	ToFunctionSnapStartOutputWithContext(context.Context) FunctionSnapStartOutput
}

// The function's SnapStart setting. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
type FunctionSnapStartArgs struct {
	// Applying SnapStart setting on function resource type.
	ApplyOn FunctionSnapStartApplyOnInput `pulumi:"applyOn"`
}

func (FunctionSnapStartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSnapStart)(nil)).Elem()
}

func (i FunctionSnapStartArgs) ToFunctionSnapStartOutput() FunctionSnapStartOutput {
	return i.ToFunctionSnapStartOutputWithContext(context.Background())
}

func (i FunctionSnapStartArgs) ToFunctionSnapStartOutputWithContext(ctx context.Context) FunctionSnapStartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSnapStartOutput)
}

func (i FunctionSnapStartArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionSnapStart] {
	return pulumix.Output[FunctionSnapStart]{
		OutputState: i.ToFunctionSnapStartOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionSnapStartArgs) ToFunctionSnapStartPtrOutput() FunctionSnapStartPtrOutput {
	return i.ToFunctionSnapStartPtrOutputWithContext(context.Background())
}

func (i FunctionSnapStartArgs) ToFunctionSnapStartPtrOutputWithContext(ctx context.Context) FunctionSnapStartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSnapStartOutput).ToFunctionSnapStartPtrOutputWithContext(ctx)
}

// FunctionSnapStartPtrInput is an input type that accepts FunctionSnapStartArgs, FunctionSnapStartPtr and FunctionSnapStartPtrOutput values.
// You can construct a concrete instance of `FunctionSnapStartPtrInput` via:
//
//	        FunctionSnapStartArgs{...}
//
//	or:
//
//	        nil
type FunctionSnapStartPtrInput interface {
	pulumi.Input

	ToFunctionSnapStartPtrOutput() FunctionSnapStartPtrOutput
	ToFunctionSnapStartPtrOutputWithContext(context.Context) FunctionSnapStartPtrOutput
}

type functionSnapStartPtrType FunctionSnapStartArgs

func FunctionSnapStartPtr(v *FunctionSnapStartArgs) FunctionSnapStartPtrInput {
	return (*functionSnapStartPtrType)(v)
}

func (*functionSnapStartPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionSnapStart)(nil)).Elem()
}

func (i *functionSnapStartPtrType) ToFunctionSnapStartPtrOutput() FunctionSnapStartPtrOutput {
	return i.ToFunctionSnapStartPtrOutputWithContext(context.Background())
}

func (i *functionSnapStartPtrType) ToFunctionSnapStartPtrOutputWithContext(ctx context.Context) FunctionSnapStartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionSnapStartPtrOutput)
}

func (i *functionSnapStartPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionSnapStart] {
	return pulumix.Output[*FunctionSnapStart]{
		OutputState: i.ToFunctionSnapStartPtrOutputWithContext(ctx).OutputState,
	}
}

// The function's SnapStart setting. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
type FunctionSnapStartOutput struct{ *pulumi.OutputState }

func (FunctionSnapStartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSnapStart)(nil)).Elem()
}

func (o FunctionSnapStartOutput) ToFunctionSnapStartOutput() FunctionSnapStartOutput {
	return o
}

func (o FunctionSnapStartOutput) ToFunctionSnapStartOutputWithContext(ctx context.Context) FunctionSnapStartOutput {
	return o
}

func (o FunctionSnapStartOutput) ToFunctionSnapStartPtrOutput() FunctionSnapStartPtrOutput {
	return o.ToFunctionSnapStartPtrOutputWithContext(context.Background())
}

func (o FunctionSnapStartOutput) ToFunctionSnapStartPtrOutputWithContext(ctx context.Context) FunctionSnapStartPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionSnapStart) *FunctionSnapStart {
		return &v
	}).(FunctionSnapStartPtrOutput)
}

func (o FunctionSnapStartOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionSnapStart] {
	return pulumix.Output[FunctionSnapStart]{
		OutputState: o.OutputState,
	}
}

// Applying SnapStart setting on function resource type.
func (o FunctionSnapStartOutput) ApplyOn() FunctionSnapStartApplyOnOutput {
	return o.ApplyT(func(v FunctionSnapStart) FunctionSnapStartApplyOn { return v.ApplyOn }).(FunctionSnapStartApplyOnOutput)
}

type FunctionSnapStartPtrOutput struct{ *pulumi.OutputState }

func (FunctionSnapStartPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionSnapStart)(nil)).Elem()
}

func (o FunctionSnapStartPtrOutput) ToFunctionSnapStartPtrOutput() FunctionSnapStartPtrOutput {
	return o
}

func (o FunctionSnapStartPtrOutput) ToFunctionSnapStartPtrOutputWithContext(ctx context.Context) FunctionSnapStartPtrOutput {
	return o
}

func (o FunctionSnapStartPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionSnapStart] {
	return pulumix.Output[*FunctionSnapStart]{
		OutputState: o.OutputState,
	}
}

func (o FunctionSnapStartPtrOutput) Elem() FunctionSnapStartOutput {
	return o.ApplyT(func(v *FunctionSnapStart) FunctionSnapStart {
		if v != nil {
			return *v
		}
		var ret FunctionSnapStart
		return ret
	}).(FunctionSnapStartOutput)
}

// Applying SnapStart setting on function resource type.
func (o FunctionSnapStartPtrOutput) ApplyOn() FunctionSnapStartApplyOnPtrOutput {
	return o.ApplyT(func(v *FunctionSnapStart) *FunctionSnapStartApplyOn {
		if v == nil {
			return nil
		}
		return &v.ApplyOn
	}).(FunctionSnapStartApplyOnPtrOutput)
}

// The function's SnapStart Response. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
type FunctionSnapStartResponse struct {
	// Applying SnapStart setting on function resource type.
	ApplyOn *FunctionSnapStartResponseApplyOn `pulumi:"applyOn"`
	// Indicates whether SnapStart is activated for the specified function version.
	OptimizationStatus *FunctionSnapStartResponseOptimizationStatus `pulumi:"optimizationStatus"`
}

// The function's SnapStart Response. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
type FunctionSnapStartResponseOutput struct{ *pulumi.OutputState }

func (FunctionSnapStartResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionSnapStartResponse)(nil)).Elem()
}

func (o FunctionSnapStartResponseOutput) ToFunctionSnapStartResponseOutput() FunctionSnapStartResponseOutput {
	return o
}

func (o FunctionSnapStartResponseOutput) ToFunctionSnapStartResponseOutputWithContext(ctx context.Context) FunctionSnapStartResponseOutput {
	return o
}

func (o FunctionSnapStartResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionSnapStartResponse] {
	return pulumix.Output[FunctionSnapStartResponse]{
		OutputState: o.OutputState,
	}
}

// Applying SnapStart setting on function resource type.
func (o FunctionSnapStartResponseOutput) ApplyOn() FunctionSnapStartResponseApplyOnPtrOutput {
	return o.ApplyT(func(v FunctionSnapStartResponse) *FunctionSnapStartResponseApplyOn { return v.ApplyOn }).(FunctionSnapStartResponseApplyOnPtrOutput)
}

// Indicates whether SnapStart is activated for the specified function version.
func (o FunctionSnapStartResponseOutput) OptimizationStatus() FunctionSnapStartResponseOptimizationStatusPtrOutput {
	return o.ApplyT(func(v FunctionSnapStartResponse) *FunctionSnapStartResponseOptimizationStatus {
		return v.OptimizationStatus
	}).(FunctionSnapStartResponseOptimizationStatusPtrOutput)
}

type FunctionSnapStartResponsePtrOutput struct{ *pulumi.OutputState }

func (FunctionSnapStartResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionSnapStartResponse)(nil)).Elem()
}

func (o FunctionSnapStartResponsePtrOutput) ToFunctionSnapStartResponsePtrOutput() FunctionSnapStartResponsePtrOutput {
	return o
}

func (o FunctionSnapStartResponsePtrOutput) ToFunctionSnapStartResponsePtrOutputWithContext(ctx context.Context) FunctionSnapStartResponsePtrOutput {
	return o
}

func (o FunctionSnapStartResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionSnapStartResponse] {
	return pulumix.Output[*FunctionSnapStartResponse]{
		OutputState: o.OutputState,
	}
}

func (o FunctionSnapStartResponsePtrOutput) Elem() FunctionSnapStartResponseOutput {
	return o.ApplyT(func(v *FunctionSnapStartResponse) FunctionSnapStartResponse {
		if v != nil {
			return *v
		}
		var ret FunctionSnapStartResponse
		return ret
	}).(FunctionSnapStartResponseOutput)
}

// Applying SnapStart setting on function resource type.
func (o FunctionSnapStartResponsePtrOutput) ApplyOn() FunctionSnapStartResponseApplyOnPtrOutput {
	return o.ApplyT(func(v *FunctionSnapStartResponse) *FunctionSnapStartResponseApplyOn {
		if v == nil {
			return nil
		}
		return v.ApplyOn
	}).(FunctionSnapStartResponseApplyOnPtrOutput)
}

// Indicates whether SnapStart is activated for the specified function version.
func (o FunctionSnapStartResponsePtrOutput) OptimizationStatus() FunctionSnapStartResponseOptimizationStatusPtrOutput {
	return o.ApplyT(func(v *FunctionSnapStartResponse) *FunctionSnapStartResponseOptimizationStatus {
		if v == nil {
			return nil
		}
		return v.OptimizationStatus
	}).(FunctionSnapStartResponseOptimizationStatusPtrOutput)
}

type FunctionTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value *string `pulumi:"value"`
}

// FunctionTagInput is an input type that accepts FunctionTagArgs and FunctionTagOutput values.
// You can construct a concrete instance of `FunctionTagInput` via:
//
//	FunctionTagArgs{...}
type FunctionTagInput interface {
	pulumi.Input

	ToFunctionTagOutput() FunctionTagOutput
	ToFunctionTagOutputWithContext(context.Context) FunctionTagOutput
}

type FunctionTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (FunctionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTag)(nil)).Elem()
}

func (i FunctionTagArgs) ToFunctionTagOutput() FunctionTagOutput {
	return i.ToFunctionTagOutputWithContext(context.Background())
}

func (i FunctionTagArgs) ToFunctionTagOutputWithContext(ctx context.Context) FunctionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTagOutput)
}

func (i FunctionTagArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionTag] {
	return pulumix.Output[FunctionTag]{
		OutputState: i.ToFunctionTagOutputWithContext(ctx).OutputState,
	}
}

// FunctionTagArrayInput is an input type that accepts FunctionTagArray and FunctionTagArrayOutput values.
// You can construct a concrete instance of `FunctionTagArrayInput` via:
//
//	FunctionTagArray{ FunctionTagArgs{...} }
type FunctionTagArrayInput interface {
	pulumi.Input

	ToFunctionTagArrayOutput() FunctionTagArrayOutput
	ToFunctionTagArrayOutputWithContext(context.Context) FunctionTagArrayOutput
}

type FunctionTagArray []FunctionTagInput

func (FunctionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTag)(nil)).Elem()
}

func (i FunctionTagArray) ToFunctionTagArrayOutput() FunctionTagArrayOutput {
	return i.ToFunctionTagArrayOutputWithContext(context.Background())
}

func (i FunctionTagArray) ToFunctionTagArrayOutputWithContext(ctx context.Context) FunctionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTagArrayOutput)
}

func (i FunctionTagArray) ToOutput(ctx context.Context) pulumix.Output[[]FunctionTag] {
	return pulumix.Output[[]FunctionTag]{
		OutputState: i.ToFunctionTagArrayOutputWithContext(ctx).OutputState,
	}
}

type FunctionTagOutput struct{ *pulumi.OutputState }

func (FunctionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTag)(nil)).Elem()
}

func (o FunctionTagOutput) ToFunctionTagOutput() FunctionTagOutput {
	return o
}

func (o FunctionTagOutput) ToFunctionTagOutputWithContext(ctx context.Context) FunctionTagOutput {
	return o
}

func (o FunctionTagOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionTag] {
	return pulumix.Output[FunctionTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FunctionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FunctionTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FunctionTagArrayOutput struct{ *pulumi.OutputState }

func (FunctionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTag)(nil)).Elem()
}

func (o FunctionTagArrayOutput) ToFunctionTagArrayOutput() FunctionTagArrayOutput {
	return o
}

func (o FunctionTagArrayOutput) ToFunctionTagArrayOutputWithContext(ctx context.Context) FunctionTagArrayOutput {
	return o
}

func (o FunctionTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FunctionTag] {
	return pulumix.Output[[]FunctionTag]{
		OutputState: o.OutputState,
	}
}

func (o FunctionTagArrayOutput) Index(i pulumi.IntInput) FunctionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionTag {
		return vs[0].([]FunctionTag)[vs[1].(int)]
	}).(FunctionTagOutput)
}

// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
type FunctionTracingConfig struct {
	// The tracing mode.
	Mode *FunctionTracingConfigMode `pulumi:"mode"`
}

// FunctionTracingConfigInput is an input type that accepts FunctionTracingConfigArgs and FunctionTracingConfigOutput values.
// You can construct a concrete instance of `FunctionTracingConfigInput` via:
//
//	FunctionTracingConfigArgs{...}
type FunctionTracingConfigInput interface {
	pulumi.Input

	ToFunctionTracingConfigOutput() FunctionTracingConfigOutput
	ToFunctionTracingConfigOutputWithContext(context.Context) FunctionTracingConfigOutput
}

// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
type FunctionTracingConfigArgs struct {
	// The tracing mode.
	Mode FunctionTracingConfigModePtrInput `pulumi:"mode"`
}

func (FunctionTracingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTracingConfig)(nil)).Elem()
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigOutput() FunctionTracingConfigOutput {
	return i.ToFunctionTracingConfigOutputWithContext(context.Background())
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigOutputWithContext(ctx context.Context) FunctionTracingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTracingConfigOutput)
}

func (i FunctionTracingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionTracingConfig] {
	return pulumix.Output[FunctionTracingConfig]{
		OutputState: i.ToFunctionTracingConfigOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return i.ToFunctionTracingConfigPtrOutputWithContext(context.Background())
}

func (i FunctionTracingConfigArgs) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTracingConfigOutput).ToFunctionTracingConfigPtrOutputWithContext(ctx)
}

// FunctionTracingConfigPtrInput is an input type that accepts FunctionTracingConfigArgs, FunctionTracingConfigPtr and FunctionTracingConfigPtrOutput values.
// You can construct a concrete instance of `FunctionTracingConfigPtrInput` via:
//
//	        FunctionTracingConfigArgs{...}
//
//	or:
//
//	        nil
type FunctionTracingConfigPtrInput interface {
	pulumi.Input

	ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput
	ToFunctionTracingConfigPtrOutputWithContext(context.Context) FunctionTracingConfigPtrOutput
}

type functionTracingConfigPtrType FunctionTracingConfigArgs

func FunctionTracingConfigPtr(v *FunctionTracingConfigArgs) FunctionTracingConfigPtrInput {
	return (*functionTracingConfigPtrType)(v)
}

func (*functionTracingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTracingConfig)(nil)).Elem()
}

func (i *functionTracingConfigPtrType) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return i.ToFunctionTracingConfigPtrOutputWithContext(context.Background())
}

func (i *functionTracingConfigPtrType) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTracingConfigPtrOutput)
}

func (i *functionTracingConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionTracingConfig] {
	return pulumix.Output[*FunctionTracingConfig]{
		OutputState: i.ToFunctionTracingConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
type FunctionTracingConfigOutput struct{ *pulumi.OutputState }

func (FunctionTracingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTracingConfig)(nil)).Elem()
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigOutput() FunctionTracingConfigOutput {
	return o
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigOutputWithContext(ctx context.Context) FunctionTracingConfigOutput {
	return o
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return o.ToFunctionTracingConfigPtrOutputWithContext(context.Background())
}

func (o FunctionTracingConfigOutput) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionTracingConfig) *FunctionTracingConfig {
		return &v
	}).(FunctionTracingConfigPtrOutput)
}

func (o FunctionTracingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionTracingConfig] {
	return pulumix.Output[FunctionTracingConfig]{
		OutputState: o.OutputState,
	}
}

// The tracing mode.
func (o FunctionTracingConfigOutput) Mode() FunctionTracingConfigModePtrOutput {
	return o.ApplyT(func(v FunctionTracingConfig) *FunctionTracingConfigMode { return v.Mode }).(FunctionTracingConfigModePtrOutput)
}

type FunctionTracingConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionTracingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTracingConfig)(nil)).Elem()
}

func (o FunctionTracingConfigPtrOutput) ToFunctionTracingConfigPtrOutput() FunctionTracingConfigPtrOutput {
	return o
}

func (o FunctionTracingConfigPtrOutput) ToFunctionTracingConfigPtrOutputWithContext(ctx context.Context) FunctionTracingConfigPtrOutput {
	return o
}

func (o FunctionTracingConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionTracingConfig] {
	return pulumix.Output[*FunctionTracingConfig]{
		OutputState: o.OutputState,
	}
}

func (o FunctionTracingConfigPtrOutput) Elem() FunctionTracingConfigOutput {
	return o.ApplyT(func(v *FunctionTracingConfig) FunctionTracingConfig {
		if v != nil {
			return *v
		}
		var ret FunctionTracingConfig
		return ret
	}).(FunctionTracingConfigOutput)
}

// The tracing mode.
func (o FunctionTracingConfigPtrOutput) Mode() FunctionTracingConfigModePtrOutput {
	return o.ApplyT(func(v *FunctionTracingConfig) *FunctionTracingConfigMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(FunctionTracingConfigModePtrOutput)
}

// The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
type FunctionVpcConfig struct {
	// A boolean indicating whether IPv6 protocols will be allowed for dual stack subnets
	Ipv6AllowedForDualStack *bool `pulumi:"ipv6AllowedForDualStack"`
	// A list of VPC security groups IDs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs.
	SubnetIds []string `pulumi:"subnetIds"`
}

// FunctionVpcConfigInput is an input type that accepts FunctionVpcConfigArgs and FunctionVpcConfigOutput values.
// You can construct a concrete instance of `FunctionVpcConfigInput` via:
//
//	FunctionVpcConfigArgs{...}
type FunctionVpcConfigInput interface {
	pulumi.Input

	ToFunctionVpcConfigOutput() FunctionVpcConfigOutput
	ToFunctionVpcConfigOutputWithContext(context.Context) FunctionVpcConfigOutput
}

// The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
type FunctionVpcConfigArgs struct {
	// A boolean indicating whether IPv6 protocols will be allowed for dual stack subnets
	Ipv6AllowedForDualStack pulumi.BoolPtrInput `pulumi:"ipv6AllowedForDualStack"`
	// A list of VPC security groups IDs.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
}

func (FunctionVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionVpcConfig)(nil)).Elem()
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigOutput() FunctionVpcConfigOutput {
	return i.ToFunctionVpcConfigOutputWithContext(context.Background())
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigOutputWithContext(ctx context.Context) FunctionVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVpcConfigOutput)
}

func (i FunctionVpcConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FunctionVpcConfig] {
	return pulumix.Output[FunctionVpcConfig]{
		OutputState: i.ToFunctionVpcConfigOutputWithContext(ctx).OutputState,
	}
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return i.ToFunctionVpcConfigPtrOutputWithContext(context.Background())
}

func (i FunctionVpcConfigArgs) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVpcConfigOutput).ToFunctionVpcConfigPtrOutputWithContext(ctx)
}

// FunctionVpcConfigPtrInput is an input type that accepts FunctionVpcConfigArgs, FunctionVpcConfigPtr and FunctionVpcConfigPtrOutput values.
// You can construct a concrete instance of `FunctionVpcConfigPtrInput` via:
//
//	        FunctionVpcConfigArgs{...}
//
//	or:
//
//	        nil
type FunctionVpcConfigPtrInput interface {
	pulumi.Input

	ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput
	ToFunctionVpcConfigPtrOutputWithContext(context.Context) FunctionVpcConfigPtrOutput
}

type functionVpcConfigPtrType FunctionVpcConfigArgs

func FunctionVpcConfigPtr(v *FunctionVpcConfigArgs) FunctionVpcConfigPtrInput {
	return (*functionVpcConfigPtrType)(v)
}

func (*functionVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionVpcConfig)(nil)).Elem()
}

func (i *functionVpcConfigPtrType) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return i.ToFunctionVpcConfigPtrOutputWithContext(context.Background())
}

func (i *functionVpcConfigPtrType) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVpcConfigPtrOutput)
}

func (i *functionVpcConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*FunctionVpcConfig] {
	return pulumix.Output[*FunctionVpcConfig]{
		OutputState: i.ToFunctionVpcConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
type FunctionVpcConfigOutput struct{ *pulumi.OutputState }

func (FunctionVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionVpcConfig)(nil)).Elem()
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigOutput() FunctionVpcConfigOutput {
	return o
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigOutputWithContext(ctx context.Context) FunctionVpcConfigOutput {
	return o
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return o.ToFunctionVpcConfigPtrOutputWithContext(context.Background())
}

func (o FunctionVpcConfigOutput) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionVpcConfig) *FunctionVpcConfig {
		return &v
	}).(FunctionVpcConfigPtrOutput)
}

func (o FunctionVpcConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FunctionVpcConfig] {
	return pulumix.Output[FunctionVpcConfig]{
		OutputState: o.OutputState,
	}
}

// A boolean indicating whether IPv6 protocols will be allowed for dual stack subnets
func (o FunctionVpcConfigOutput) Ipv6AllowedForDualStack() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FunctionVpcConfig) *bool { return v.Ipv6AllowedForDualStack }).(pulumi.BoolPtrOutput)
}

// A list of VPC security groups IDs.
func (o FunctionVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs.
func (o FunctionVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FunctionVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

type FunctionVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionVpcConfig)(nil)).Elem()
}

func (o FunctionVpcConfigPtrOutput) ToFunctionVpcConfigPtrOutput() FunctionVpcConfigPtrOutput {
	return o
}

func (o FunctionVpcConfigPtrOutput) ToFunctionVpcConfigPtrOutputWithContext(ctx context.Context) FunctionVpcConfigPtrOutput {
	return o
}

func (o FunctionVpcConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionVpcConfig] {
	return pulumix.Output[*FunctionVpcConfig]{
		OutputState: o.OutputState,
	}
}

func (o FunctionVpcConfigPtrOutput) Elem() FunctionVpcConfigOutput {
	return o.ApplyT(func(v *FunctionVpcConfig) FunctionVpcConfig {
		if v != nil {
			return *v
		}
		var ret FunctionVpcConfig
		return ret
	}).(FunctionVpcConfigOutput)
}

// A boolean indicating whether IPv6 protocols will be allowed for dual stack subnets
func (o FunctionVpcConfigPtrOutput) Ipv6AllowedForDualStack() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FunctionVpcConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Ipv6AllowedForDualStack
	}).(pulumi.BoolPtrOutput)
}

// A list of VPC security groups IDs.
func (o FunctionVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs.
func (o FunctionVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

type LayerVersionContent struct {
	// The Amazon S3 bucket of the layer archive.
	S3Bucket string `pulumi:"s3Bucket"`
	// The Amazon S3 key of the layer archive.
	S3Key string `pulumi:"s3Key"`
	// For versioned objects, the version of the layer archive object to use.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
}

// LayerVersionContentInput is an input type that accepts LayerVersionContentArgs and LayerVersionContentOutput values.
// You can construct a concrete instance of `LayerVersionContentInput` via:
//
//	LayerVersionContentArgs{...}
type LayerVersionContentInput interface {
	pulumi.Input

	ToLayerVersionContentOutput() LayerVersionContentOutput
	ToLayerVersionContentOutputWithContext(context.Context) LayerVersionContentOutput
}

type LayerVersionContentArgs struct {
	// The Amazon S3 bucket of the layer archive.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The Amazon S3 key of the layer archive.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
	// For versioned objects, the version of the layer archive object to use.
	S3ObjectVersion pulumi.StringPtrInput `pulumi:"s3ObjectVersion"`
}

func (LayerVersionContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerVersionContent)(nil)).Elem()
}

func (i LayerVersionContentArgs) ToLayerVersionContentOutput() LayerVersionContentOutput {
	return i.ToLayerVersionContentOutputWithContext(context.Background())
}

func (i LayerVersionContentArgs) ToLayerVersionContentOutputWithContext(ctx context.Context) LayerVersionContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerVersionContentOutput)
}

func (i LayerVersionContentArgs) ToOutput(ctx context.Context) pulumix.Output[LayerVersionContent] {
	return pulumix.Output[LayerVersionContent]{
		OutputState: i.ToLayerVersionContentOutputWithContext(ctx).OutputState,
	}
}

type LayerVersionContentOutput struct{ *pulumi.OutputState }

func (LayerVersionContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerVersionContent)(nil)).Elem()
}

func (o LayerVersionContentOutput) ToLayerVersionContentOutput() LayerVersionContentOutput {
	return o
}

func (o LayerVersionContentOutput) ToLayerVersionContentOutputWithContext(ctx context.Context) LayerVersionContentOutput {
	return o
}

func (o LayerVersionContentOutput) ToOutput(ctx context.Context) pulumix.Output[LayerVersionContent] {
	return pulumix.Output[LayerVersionContent]{
		OutputState: o.OutputState,
	}
}

// The Amazon S3 bucket of the layer archive.
func (o LayerVersionContentOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LayerVersionContent) string { return v.S3Bucket }).(pulumi.StringOutput)
}

// The Amazon S3 key of the layer archive.
func (o LayerVersionContentOutput) S3Key() pulumi.StringOutput {
	return o.ApplyT(func(v LayerVersionContent) string { return v.S3Key }).(pulumi.StringOutput)
}

// For versioned objects, the version of the layer archive object to use.
func (o LayerVersionContentOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayerVersionContent) *string { return v.S3ObjectVersion }).(pulumi.StringPtrOutput)
}

type UrlCors struct {
	// Specifies whether credentials are included in the CORS request.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Represents a collection of allowed headers.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Represents a collection of allowed HTTP methods.
	AllowMethods []UrlAllowMethodsItem `pulumi:"allowMethods"`
	// Represents a collection of allowed origins.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// Represents a collection of exposed headers.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	MaxAge        *int     `pulumi:"maxAge"`
}

// UrlCorsInput is an input type that accepts UrlCorsArgs and UrlCorsOutput values.
// You can construct a concrete instance of `UrlCorsInput` via:
//
//	UrlCorsArgs{...}
type UrlCorsInput interface {
	pulumi.Input

	ToUrlCorsOutput() UrlCorsOutput
	ToUrlCorsOutputWithContext(context.Context) UrlCorsOutput
}

type UrlCorsArgs struct {
	// Specifies whether credentials are included in the CORS request.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Represents a collection of allowed headers.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Represents a collection of allowed HTTP methods.
	AllowMethods UrlAllowMethodsItemArrayInput `pulumi:"allowMethods"`
	// Represents a collection of allowed origins.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// Represents a collection of exposed headers.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	MaxAge        pulumi.IntPtrInput      `pulumi:"maxAge"`
}

func (UrlCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlCors)(nil)).Elem()
}

func (i UrlCorsArgs) ToUrlCorsOutput() UrlCorsOutput {
	return i.ToUrlCorsOutputWithContext(context.Background())
}

func (i UrlCorsArgs) ToUrlCorsOutputWithContext(ctx context.Context) UrlCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlCorsOutput)
}

func (i UrlCorsArgs) ToOutput(ctx context.Context) pulumix.Output[UrlCors] {
	return pulumix.Output[UrlCors]{
		OutputState: i.ToUrlCorsOutputWithContext(ctx).OutputState,
	}
}

func (i UrlCorsArgs) ToUrlCorsPtrOutput() UrlCorsPtrOutput {
	return i.ToUrlCorsPtrOutputWithContext(context.Background())
}

func (i UrlCorsArgs) ToUrlCorsPtrOutputWithContext(ctx context.Context) UrlCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlCorsOutput).ToUrlCorsPtrOutputWithContext(ctx)
}

// UrlCorsPtrInput is an input type that accepts UrlCorsArgs, UrlCorsPtr and UrlCorsPtrOutput values.
// You can construct a concrete instance of `UrlCorsPtrInput` via:
//
//	        UrlCorsArgs{...}
//
//	or:
//
//	        nil
type UrlCorsPtrInput interface {
	pulumi.Input

	ToUrlCorsPtrOutput() UrlCorsPtrOutput
	ToUrlCorsPtrOutputWithContext(context.Context) UrlCorsPtrOutput
}

type urlCorsPtrType UrlCorsArgs

func UrlCorsPtr(v *UrlCorsArgs) UrlCorsPtrInput {
	return (*urlCorsPtrType)(v)
}

func (*urlCorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlCors)(nil)).Elem()
}

func (i *urlCorsPtrType) ToUrlCorsPtrOutput() UrlCorsPtrOutput {
	return i.ToUrlCorsPtrOutputWithContext(context.Background())
}

func (i *urlCorsPtrType) ToUrlCorsPtrOutputWithContext(ctx context.Context) UrlCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlCorsPtrOutput)
}

func (i *urlCorsPtrType) ToOutput(ctx context.Context) pulumix.Output[*UrlCors] {
	return pulumix.Output[*UrlCors]{
		OutputState: i.ToUrlCorsPtrOutputWithContext(ctx).OutputState,
	}
}

type UrlCorsOutput struct{ *pulumi.OutputState }

func (UrlCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlCors)(nil)).Elem()
}

func (o UrlCorsOutput) ToUrlCorsOutput() UrlCorsOutput {
	return o
}

func (o UrlCorsOutput) ToUrlCorsOutputWithContext(ctx context.Context) UrlCorsOutput {
	return o
}

func (o UrlCorsOutput) ToUrlCorsPtrOutput() UrlCorsPtrOutput {
	return o.ToUrlCorsPtrOutputWithContext(context.Background())
}

func (o UrlCorsOutput) ToUrlCorsPtrOutputWithContext(ctx context.Context) UrlCorsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlCors) *UrlCors {
		return &v
	}).(UrlCorsPtrOutput)
}

func (o UrlCorsOutput) ToOutput(ctx context.Context) pulumix.Output[UrlCors] {
	return pulumix.Output[UrlCors]{
		OutputState: o.OutputState,
	}
}

// Specifies whether credentials are included in the CORS request.
func (o UrlCorsOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UrlCors) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Represents a collection of allowed headers.
func (o UrlCorsOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UrlCors) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Represents a collection of allowed HTTP methods.
func (o UrlCorsOutput) AllowMethods() UrlAllowMethodsItemArrayOutput {
	return o.ApplyT(func(v UrlCors) []UrlAllowMethodsItem { return v.AllowMethods }).(UrlAllowMethodsItemArrayOutput)
}

// Represents a collection of allowed origins.
func (o UrlCorsOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UrlCors) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// Represents a collection of exposed headers.
func (o UrlCorsOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UrlCors) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

func (o UrlCorsOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlCors) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type UrlCorsPtrOutput struct{ *pulumi.OutputState }

func (UrlCorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlCors)(nil)).Elem()
}

func (o UrlCorsPtrOutput) ToUrlCorsPtrOutput() UrlCorsPtrOutput {
	return o
}

func (o UrlCorsPtrOutput) ToUrlCorsPtrOutputWithContext(ctx context.Context) UrlCorsPtrOutput {
	return o
}

func (o UrlCorsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UrlCors] {
	return pulumix.Output[*UrlCors]{
		OutputState: o.OutputState,
	}
}

func (o UrlCorsPtrOutput) Elem() UrlCorsOutput {
	return o.ApplyT(func(v *UrlCors) UrlCors {
		if v != nil {
			return *v
		}
		var ret UrlCors
		return ret
	}).(UrlCorsOutput)
}

// Specifies whether credentials are included in the CORS request.
func (o UrlCorsPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlCors) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Represents a collection of allowed headers.
func (o UrlCorsPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Represents a collection of allowed HTTP methods.
func (o UrlCorsPtrOutput) AllowMethods() UrlAllowMethodsItemArrayOutput {
	return o.ApplyT(func(v *UrlCors) []UrlAllowMethodsItem {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(UrlAllowMethodsItemArrayOutput)
}

// Represents a collection of allowed origins.
func (o UrlCorsPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// Represents a collection of exposed headers.
func (o UrlCorsPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlCors) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

func (o UrlCorsPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlCors) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

// A provisioned concurrency configuration for a function's version.
type VersionProvisionedConcurrencyConfiguration struct {
	// The amount of provisioned concurrency to allocate for the version.
	ProvisionedConcurrentExecutions int `pulumi:"provisionedConcurrentExecutions"`
}

// VersionProvisionedConcurrencyConfigurationInput is an input type that accepts VersionProvisionedConcurrencyConfigurationArgs and VersionProvisionedConcurrencyConfigurationOutput values.
// You can construct a concrete instance of `VersionProvisionedConcurrencyConfigurationInput` via:
//
//	VersionProvisionedConcurrencyConfigurationArgs{...}
type VersionProvisionedConcurrencyConfigurationInput interface {
	pulumi.Input

	ToVersionProvisionedConcurrencyConfigurationOutput() VersionProvisionedConcurrencyConfigurationOutput
	ToVersionProvisionedConcurrencyConfigurationOutputWithContext(context.Context) VersionProvisionedConcurrencyConfigurationOutput
}

// A provisioned concurrency configuration for a function's version.
type VersionProvisionedConcurrencyConfigurationArgs struct {
	// The amount of provisioned concurrency to allocate for the version.
	ProvisionedConcurrentExecutions pulumi.IntInput `pulumi:"provisionedConcurrentExecutions"`
}

func (VersionProvisionedConcurrencyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (i VersionProvisionedConcurrencyConfigurationArgs) ToVersionProvisionedConcurrencyConfigurationOutput() VersionProvisionedConcurrencyConfigurationOutput {
	return i.ToVersionProvisionedConcurrencyConfigurationOutputWithContext(context.Background())
}

func (i VersionProvisionedConcurrencyConfigurationArgs) ToVersionProvisionedConcurrencyConfigurationOutputWithContext(ctx context.Context) VersionProvisionedConcurrencyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionProvisionedConcurrencyConfigurationOutput)
}

func (i VersionProvisionedConcurrencyConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[VersionProvisionedConcurrencyConfiguration] {
	return pulumix.Output[VersionProvisionedConcurrencyConfiguration]{
		OutputState: i.ToVersionProvisionedConcurrencyConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i VersionProvisionedConcurrencyConfigurationArgs) ToVersionProvisionedConcurrencyConfigurationPtrOutput() VersionProvisionedConcurrencyConfigurationPtrOutput {
	return i.ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i VersionProvisionedConcurrencyConfigurationArgs) ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) VersionProvisionedConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionProvisionedConcurrencyConfigurationOutput).ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx)
}

// VersionProvisionedConcurrencyConfigurationPtrInput is an input type that accepts VersionProvisionedConcurrencyConfigurationArgs, VersionProvisionedConcurrencyConfigurationPtr and VersionProvisionedConcurrencyConfigurationPtrOutput values.
// You can construct a concrete instance of `VersionProvisionedConcurrencyConfigurationPtrInput` via:
//
//	        VersionProvisionedConcurrencyConfigurationArgs{...}
//
//	or:
//
//	        nil
type VersionProvisionedConcurrencyConfigurationPtrInput interface {
	pulumi.Input

	ToVersionProvisionedConcurrencyConfigurationPtrOutput() VersionProvisionedConcurrencyConfigurationPtrOutput
	ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Context) VersionProvisionedConcurrencyConfigurationPtrOutput
}

type versionProvisionedConcurrencyConfigurationPtrType VersionProvisionedConcurrencyConfigurationArgs

func VersionProvisionedConcurrencyConfigurationPtr(v *VersionProvisionedConcurrencyConfigurationArgs) VersionProvisionedConcurrencyConfigurationPtrInput {
	return (*versionProvisionedConcurrencyConfigurationPtrType)(v)
}

func (*versionProvisionedConcurrencyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VersionProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (i *versionProvisionedConcurrencyConfigurationPtrType) ToVersionProvisionedConcurrencyConfigurationPtrOutput() VersionProvisionedConcurrencyConfigurationPtrOutput {
	return i.ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i *versionProvisionedConcurrencyConfigurationPtrType) ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) VersionProvisionedConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionProvisionedConcurrencyConfigurationPtrOutput)
}

func (i *versionProvisionedConcurrencyConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*VersionProvisionedConcurrencyConfiguration] {
	return pulumix.Output[*VersionProvisionedConcurrencyConfiguration]{
		OutputState: i.ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// A provisioned concurrency configuration for a function's version.
type VersionProvisionedConcurrencyConfigurationOutput struct{ *pulumi.OutputState }

func (VersionProvisionedConcurrencyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (o VersionProvisionedConcurrencyConfigurationOutput) ToVersionProvisionedConcurrencyConfigurationOutput() VersionProvisionedConcurrencyConfigurationOutput {
	return o
}

func (o VersionProvisionedConcurrencyConfigurationOutput) ToVersionProvisionedConcurrencyConfigurationOutputWithContext(ctx context.Context) VersionProvisionedConcurrencyConfigurationOutput {
	return o
}

func (o VersionProvisionedConcurrencyConfigurationOutput) ToVersionProvisionedConcurrencyConfigurationPtrOutput() VersionProvisionedConcurrencyConfigurationPtrOutput {
	return o.ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (o VersionProvisionedConcurrencyConfigurationOutput) ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) VersionProvisionedConcurrencyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VersionProvisionedConcurrencyConfiguration) *VersionProvisionedConcurrencyConfiguration {
		return &v
	}).(VersionProvisionedConcurrencyConfigurationPtrOutput)
}

func (o VersionProvisionedConcurrencyConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[VersionProvisionedConcurrencyConfiguration] {
	return pulumix.Output[VersionProvisionedConcurrencyConfiguration]{
		OutputState: o.OutputState,
	}
}

// The amount of provisioned concurrency to allocate for the version.
func (o VersionProvisionedConcurrencyConfigurationOutput) ProvisionedConcurrentExecutions() pulumi.IntOutput {
	return o.ApplyT(func(v VersionProvisionedConcurrencyConfiguration) int { return v.ProvisionedConcurrentExecutions }).(pulumi.IntOutput)
}

type VersionProvisionedConcurrencyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VersionProvisionedConcurrencyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VersionProvisionedConcurrencyConfiguration)(nil)).Elem()
}

func (o VersionProvisionedConcurrencyConfigurationPtrOutput) ToVersionProvisionedConcurrencyConfigurationPtrOutput() VersionProvisionedConcurrencyConfigurationPtrOutput {
	return o
}

func (o VersionProvisionedConcurrencyConfigurationPtrOutput) ToVersionProvisionedConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) VersionProvisionedConcurrencyConfigurationPtrOutput {
	return o
}

func (o VersionProvisionedConcurrencyConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VersionProvisionedConcurrencyConfiguration] {
	return pulumix.Output[*VersionProvisionedConcurrencyConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o VersionProvisionedConcurrencyConfigurationPtrOutput) Elem() VersionProvisionedConcurrencyConfigurationOutput {
	return o.ApplyT(func(v *VersionProvisionedConcurrencyConfiguration) VersionProvisionedConcurrencyConfiguration {
		if v != nil {
			return *v
		}
		var ret VersionProvisionedConcurrencyConfiguration
		return ret
	}).(VersionProvisionedConcurrencyConfigurationOutput)
}

// The amount of provisioned concurrency to allocate for the version.
func (o VersionProvisionedConcurrencyConfigurationPtrOutput) ProvisionedConcurrentExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VersionProvisionedConcurrencyConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.ProvisionedConcurrentExecutions
	}).(pulumi.IntPtrOutput)
}

// Runtime Management Config of a function.
type VersionRuntimePolicy struct {
	// The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
	RuntimeVersionArn *string `pulumi:"runtimeVersionArn"`
	// The runtime update mode.
	UpdateRuntimeOn string `pulumi:"updateRuntimeOn"`
}

// VersionRuntimePolicyInput is an input type that accepts VersionRuntimePolicyArgs and VersionRuntimePolicyOutput values.
// You can construct a concrete instance of `VersionRuntimePolicyInput` via:
//
//	VersionRuntimePolicyArgs{...}
type VersionRuntimePolicyInput interface {
	pulumi.Input

	ToVersionRuntimePolicyOutput() VersionRuntimePolicyOutput
	ToVersionRuntimePolicyOutputWithContext(context.Context) VersionRuntimePolicyOutput
}

// Runtime Management Config of a function.
type VersionRuntimePolicyArgs struct {
	// The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
	RuntimeVersionArn pulumi.StringPtrInput `pulumi:"runtimeVersionArn"`
	// The runtime update mode.
	UpdateRuntimeOn pulumi.StringInput `pulumi:"updateRuntimeOn"`
}

func (VersionRuntimePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionRuntimePolicy)(nil)).Elem()
}

func (i VersionRuntimePolicyArgs) ToVersionRuntimePolicyOutput() VersionRuntimePolicyOutput {
	return i.ToVersionRuntimePolicyOutputWithContext(context.Background())
}

func (i VersionRuntimePolicyArgs) ToVersionRuntimePolicyOutputWithContext(ctx context.Context) VersionRuntimePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionRuntimePolicyOutput)
}

func (i VersionRuntimePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[VersionRuntimePolicy] {
	return pulumix.Output[VersionRuntimePolicy]{
		OutputState: i.ToVersionRuntimePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i VersionRuntimePolicyArgs) ToVersionRuntimePolicyPtrOutput() VersionRuntimePolicyPtrOutput {
	return i.ToVersionRuntimePolicyPtrOutputWithContext(context.Background())
}

func (i VersionRuntimePolicyArgs) ToVersionRuntimePolicyPtrOutputWithContext(ctx context.Context) VersionRuntimePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionRuntimePolicyOutput).ToVersionRuntimePolicyPtrOutputWithContext(ctx)
}

// VersionRuntimePolicyPtrInput is an input type that accepts VersionRuntimePolicyArgs, VersionRuntimePolicyPtr and VersionRuntimePolicyPtrOutput values.
// You can construct a concrete instance of `VersionRuntimePolicyPtrInput` via:
//
//	        VersionRuntimePolicyArgs{...}
//
//	or:
//
//	        nil
type VersionRuntimePolicyPtrInput interface {
	pulumi.Input

	ToVersionRuntimePolicyPtrOutput() VersionRuntimePolicyPtrOutput
	ToVersionRuntimePolicyPtrOutputWithContext(context.Context) VersionRuntimePolicyPtrOutput
}

type versionRuntimePolicyPtrType VersionRuntimePolicyArgs

func VersionRuntimePolicyPtr(v *VersionRuntimePolicyArgs) VersionRuntimePolicyPtrInput {
	return (*versionRuntimePolicyPtrType)(v)
}

func (*versionRuntimePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VersionRuntimePolicy)(nil)).Elem()
}

func (i *versionRuntimePolicyPtrType) ToVersionRuntimePolicyPtrOutput() VersionRuntimePolicyPtrOutput {
	return i.ToVersionRuntimePolicyPtrOutputWithContext(context.Background())
}

func (i *versionRuntimePolicyPtrType) ToVersionRuntimePolicyPtrOutputWithContext(ctx context.Context) VersionRuntimePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionRuntimePolicyPtrOutput)
}

func (i *versionRuntimePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*VersionRuntimePolicy] {
	return pulumix.Output[*VersionRuntimePolicy]{
		OutputState: i.ToVersionRuntimePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Runtime Management Config of a function.
type VersionRuntimePolicyOutput struct{ *pulumi.OutputState }

func (VersionRuntimePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionRuntimePolicy)(nil)).Elem()
}

func (o VersionRuntimePolicyOutput) ToVersionRuntimePolicyOutput() VersionRuntimePolicyOutput {
	return o
}

func (o VersionRuntimePolicyOutput) ToVersionRuntimePolicyOutputWithContext(ctx context.Context) VersionRuntimePolicyOutput {
	return o
}

func (o VersionRuntimePolicyOutput) ToVersionRuntimePolicyPtrOutput() VersionRuntimePolicyPtrOutput {
	return o.ToVersionRuntimePolicyPtrOutputWithContext(context.Background())
}

func (o VersionRuntimePolicyOutput) ToVersionRuntimePolicyPtrOutputWithContext(ctx context.Context) VersionRuntimePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VersionRuntimePolicy) *VersionRuntimePolicy {
		return &v
	}).(VersionRuntimePolicyPtrOutput)
}

func (o VersionRuntimePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[VersionRuntimePolicy] {
	return pulumix.Output[VersionRuntimePolicy]{
		OutputState: o.OutputState,
	}
}

// The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
func (o VersionRuntimePolicyOutput) RuntimeVersionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VersionRuntimePolicy) *string { return v.RuntimeVersionArn }).(pulumi.StringPtrOutput)
}

// The runtime update mode.
func (o VersionRuntimePolicyOutput) UpdateRuntimeOn() pulumi.StringOutput {
	return o.ApplyT(func(v VersionRuntimePolicy) string { return v.UpdateRuntimeOn }).(pulumi.StringOutput)
}

type VersionRuntimePolicyPtrOutput struct{ *pulumi.OutputState }

func (VersionRuntimePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VersionRuntimePolicy)(nil)).Elem()
}

func (o VersionRuntimePolicyPtrOutput) ToVersionRuntimePolicyPtrOutput() VersionRuntimePolicyPtrOutput {
	return o
}

func (o VersionRuntimePolicyPtrOutput) ToVersionRuntimePolicyPtrOutputWithContext(ctx context.Context) VersionRuntimePolicyPtrOutput {
	return o
}

func (o VersionRuntimePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VersionRuntimePolicy] {
	return pulumix.Output[*VersionRuntimePolicy]{
		OutputState: o.OutputState,
	}
}

func (o VersionRuntimePolicyPtrOutput) Elem() VersionRuntimePolicyOutput {
	return o.ApplyT(func(v *VersionRuntimePolicy) VersionRuntimePolicy {
		if v != nil {
			return *v
		}
		var ret VersionRuntimePolicy
		return ret
	}).(VersionRuntimePolicyOutput)
}

// The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
func (o VersionRuntimePolicyPtrOutput) RuntimeVersionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VersionRuntimePolicy) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersionArn
	}).(pulumi.StringPtrOutput)
}

// The runtime update mode.
func (o VersionRuntimePolicyPtrOutput) UpdateRuntimeOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VersionRuntimePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UpdateRuntimeOn
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AliasProvisionedConcurrencyConfigurationInput)(nil)).Elem(), AliasProvisionedConcurrencyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasProvisionedConcurrencyConfigurationPtrInput)(nil)).Elem(), AliasProvisionedConcurrencyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasRoutingConfigurationInput)(nil)).Elem(), AliasRoutingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasRoutingConfigurationPtrInput)(nil)).Elem(), AliasRoutingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasVersionWeightInput)(nil)).Elem(), AliasVersionWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasVersionWeightArrayInput)(nil)).Elem(), AliasVersionWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeSigningConfigAllowedPublishersInput)(nil)).Elem(), CodeSigningConfigAllowedPublishersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeSigningConfigCodeSigningPoliciesInput)(nil)).Elem(), CodeSigningConfigCodeSigningPoliciesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CodeSigningConfigCodeSigningPoliciesPtrInput)(nil)).Elem(), CodeSigningConfigCodeSigningPoliciesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventInvokeConfigDestinationConfigInput)(nil)).Elem(), EventInvokeConfigDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventInvokeConfigDestinationConfigPtrInput)(nil)).Elem(), EventInvokeConfigDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventInvokeConfigOnFailureInput)(nil)).Elem(), EventInvokeConfigOnFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventInvokeConfigOnFailurePtrInput)(nil)).Elem(), EventInvokeConfigOnFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventInvokeConfigOnSuccessInput)(nil)).Elem(), EventInvokeConfigOnSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventInvokeConfigOnSuccessPtrInput)(nil)).Elem(), EventInvokeConfigOnSuccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingAmazonManagedKafkaEventSourceConfigInput)(nil)).Elem(), EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrInput)(nil)).Elem(), EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingDestinationConfigInput)(nil)).Elem(), EventSourceMappingDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingDestinationConfigPtrInput)(nil)).Elem(), EventSourceMappingDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingDocumentDbEventSourceConfigInput)(nil)).Elem(), EventSourceMappingDocumentDbEventSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingDocumentDbEventSourceConfigPtrInput)(nil)).Elem(), EventSourceMappingDocumentDbEventSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingEndpointsInput)(nil)).Elem(), EventSourceMappingEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingEndpointsPtrInput)(nil)).Elem(), EventSourceMappingEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingFilterInput)(nil)).Elem(), EventSourceMappingFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingFilterArrayInput)(nil)).Elem(), EventSourceMappingFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingFilterCriteriaInput)(nil)).Elem(), EventSourceMappingFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingFilterCriteriaPtrInput)(nil)).Elem(), EventSourceMappingFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingOnFailureInput)(nil)).Elem(), EventSourceMappingOnFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingOnFailurePtrInput)(nil)).Elem(), EventSourceMappingOnFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingScalingConfigInput)(nil)).Elem(), EventSourceMappingScalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingScalingConfigPtrInput)(nil)).Elem(), EventSourceMappingScalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingSelfManagedEventSourceInput)(nil)).Elem(), EventSourceMappingSelfManagedEventSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingSelfManagedEventSourcePtrInput)(nil)).Elem(), EventSourceMappingSelfManagedEventSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingSelfManagedKafkaEventSourceConfigInput)(nil)).Elem(), EventSourceMappingSelfManagedKafkaEventSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingSelfManagedKafkaEventSourceConfigPtrInput)(nil)).Elem(), EventSourceMappingSelfManagedKafkaEventSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingSourceAccessConfigurationInput)(nil)).Elem(), EventSourceMappingSourceAccessConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingSourceAccessConfigurationArrayInput)(nil)).Elem(), EventSourceMappingSourceAccessConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionCodeInput)(nil)).Elem(), FunctionCodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionDeadLetterConfigInput)(nil)).Elem(), FunctionDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionDeadLetterConfigPtrInput)(nil)).Elem(), FunctionDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionEnvironmentInput)(nil)).Elem(), FunctionEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionEnvironmentPtrInput)(nil)).Elem(), FunctionEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionEphemeralStorageInput)(nil)).Elem(), FunctionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionEphemeralStoragePtrInput)(nil)).Elem(), FunctionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFileSystemConfigInput)(nil)).Elem(), FunctionFileSystemConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionFileSystemConfigArrayInput)(nil)).Elem(), FunctionFileSystemConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionImageConfigInput)(nil)).Elem(), FunctionImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionImageConfigPtrInput)(nil)).Elem(), FunctionImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRuntimeManagementConfigInput)(nil)).Elem(), FunctionRuntimeManagementConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRuntimeManagementConfigPtrInput)(nil)).Elem(), FunctionRuntimeManagementConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionSnapStartInput)(nil)).Elem(), FunctionSnapStartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionSnapStartPtrInput)(nil)).Elem(), FunctionSnapStartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTagInput)(nil)).Elem(), FunctionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTagArrayInput)(nil)).Elem(), FunctionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTracingConfigInput)(nil)).Elem(), FunctionTracingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTracingConfigPtrInput)(nil)).Elem(), FunctionTracingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionVpcConfigInput)(nil)).Elem(), FunctionVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionVpcConfigPtrInput)(nil)).Elem(), FunctionVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerVersionContentInput)(nil)).Elem(), LayerVersionContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlCorsInput)(nil)).Elem(), UrlCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlCorsPtrInput)(nil)).Elem(), UrlCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionProvisionedConcurrencyConfigurationInput)(nil)).Elem(), VersionProvisionedConcurrencyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionProvisionedConcurrencyConfigurationPtrInput)(nil)).Elem(), VersionProvisionedConcurrencyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionRuntimePolicyInput)(nil)).Elem(), VersionRuntimePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionRuntimePolicyPtrInput)(nil)).Elem(), VersionRuntimePolicyArgs{})
	pulumi.RegisterOutputType(AliasProvisionedConcurrencyConfigurationOutput{})
	pulumi.RegisterOutputType(AliasProvisionedConcurrencyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AliasRoutingConfigurationOutput{})
	pulumi.RegisterOutputType(AliasRoutingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AliasVersionWeightOutput{})
	pulumi.RegisterOutputType(AliasVersionWeightArrayOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigAllowedPublishersOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigAllowedPublishersPtrOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigCodeSigningPoliciesOutput{})
	pulumi.RegisterOutputType(CodeSigningConfigCodeSigningPoliciesPtrOutput{})
	pulumi.RegisterOutputType(EventInvokeConfigDestinationConfigOutput{})
	pulumi.RegisterOutputType(EventInvokeConfigDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(EventInvokeConfigOnFailureOutput{})
	pulumi.RegisterOutputType(EventInvokeConfigOnFailurePtrOutput{})
	pulumi.RegisterOutputType(EventInvokeConfigOnSuccessOutput{})
	pulumi.RegisterOutputType(EventInvokeConfigOnSuccessPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingAmazonManagedKafkaEventSourceConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingAmazonManagedKafkaEventSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDestinationConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDocumentDbEventSourceConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingDocumentDbEventSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingEndpointsOutput{})
	pulumi.RegisterOutputType(EventSourceMappingEndpointsPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingFilterOutput{})
	pulumi.RegisterOutputType(EventSourceMappingFilterArrayOutput{})
	pulumi.RegisterOutputType(EventSourceMappingFilterCriteriaOutput{})
	pulumi.RegisterOutputType(EventSourceMappingFilterCriteriaPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingOnFailureOutput{})
	pulumi.RegisterOutputType(EventSourceMappingOnFailurePtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingScalingConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingScalingConfigPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedEventSourceOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedEventSourcePtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedKafkaEventSourceConfigOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSelfManagedKafkaEventSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSourceAccessConfigurationOutput{})
	pulumi.RegisterOutputType(EventSourceMappingSourceAccessConfigurationArrayOutput{})
	pulumi.RegisterOutputType(FunctionCodeOutput{})
	pulumi.RegisterOutputType(FunctionDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(FunctionDeadLetterConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionEnvironmentOutput{})
	pulumi.RegisterOutputType(FunctionEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(FunctionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(FunctionEphemeralStoragePtrOutput{})
	pulumi.RegisterOutputType(FunctionFileSystemConfigOutput{})
	pulumi.RegisterOutputType(FunctionFileSystemConfigArrayOutput{})
	pulumi.RegisterOutputType(FunctionImageConfigOutput{})
	pulumi.RegisterOutputType(FunctionImageConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionRuntimeManagementConfigOutput{})
	pulumi.RegisterOutputType(FunctionRuntimeManagementConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionSnapStartOutput{})
	pulumi.RegisterOutputType(FunctionSnapStartPtrOutput{})
	pulumi.RegisterOutputType(FunctionSnapStartResponseOutput{})
	pulumi.RegisterOutputType(FunctionSnapStartResponsePtrOutput{})
	pulumi.RegisterOutputType(FunctionTagOutput{})
	pulumi.RegisterOutputType(FunctionTagArrayOutput{})
	pulumi.RegisterOutputType(FunctionTracingConfigOutput{})
	pulumi.RegisterOutputType(FunctionTracingConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionVpcConfigOutput{})
	pulumi.RegisterOutputType(FunctionVpcConfigPtrOutput{})
	pulumi.RegisterOutputType(LayerVersionContentOutput{})
	pulumi.RegisterOutputType(UrlCorsOutput{})
	pulumi.RegisterOutputType(UrlCorsPtrOutput{})
	pulumi.RegisterOutputType(VersionProvisionedConcurrencyConfigurationOutput{})
	pulumi.RegisterOutputType(VersionProvisionedConcurrencyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VersionRuntimePolicyOutput{})
	pulumi.RegisterOutputType(VersionRuntimePolicyPtrOutput{})
}
