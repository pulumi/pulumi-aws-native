// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lambda::EventSourceMapping
type EventSourceMapping struct {
	pulumi.CustomResourceState

	// The maximum number of items to retrieve in a single batch.
	BatchSize pulumi.IntPtrOutput `pulumi:"batchSize"`
	// (Streams) If the function returns an error, split the batch in two and retry.
	BisectBatchOnFunctionError pulumi.BoolPtrOutput `pulumi:"bisectBatchOnFunctionError"`
	// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
	DestinationConfig EventSourceMappingDestinationConfigPtrOutput `pulumi:"destinationConfig"`
	// Disables the event source mapping to pause polling and invocation.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The Amazon Resource Name (ARN) of the event source.
	EventSourceArn pulumi.StringPtrOutput `pulumi:"eventSourceArn"`
	// The filter criteria to control event filtering.
	FilterCriteria FilterCriteriaPropertiesPtrOutput `pulumi:"filterCriteria"`
	// The name of the Lambda function.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// (Streams) A list of response types supported by the function.
	FunctionResponseTypes EventSourceMappingFunctionResponseTypesItemArrayOutput `pulumi:"functionResponseTypes"`
	// (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
	MaximumBatchingWindowInSeconds pulumi.IntPtrOutput `pulumi:"maximumBatchingWindowInSeconds"`
	// (Streams) The maximum age of a record that Lambda sends to a function for processing.
	MaximumRecordAgeInSeconds pulumi.IntPtrOutput `pulumi:"maximumRecordAgeInSeconds"`
	// (Streams) The maximum number of times to retry when the function returns an error.
	MaximumRetryAttempts pulumi.IntPtrOutput `pulumi:"maximumRetryAttempts"`
	// (Streams) The number of batches to process from each shard concurrently.
	ParallelizationFactor pulumi.IntPtrOutput `pulumi:"parallelizationFactor"`
	// (ActiveMQ) A list of ActiveMQ queues.
	Queues pulumi.StringArrayOutput `pulumi:"queues"`
	// Self-managed event source endpoints.
	SelfManagedEventSource EventSourceMappingSelfManagedEventSourcePtrOutput `pulumi:"selfManagedEventSource"`
	// A list of SourceAccessConfiguration.
	SourceAccessConfigurations EventSourceMappingSourceAccessConfigurationArrayOutput `pulumi:"sourceAccessConfigurations"`
	// The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources.
	StartingPosition pulumi.StringPtrOutput `pulumi:"startingPosition"`
	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp pulumi.Float64PtrOutput `pulumi:"startingPositionTimestamp"`
	// (Kafka) A list of Kafka topics.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
	TumblingWindowInSeconds pulumi.IntPtrOutput `pulumi:"tumblingWindowInSeconds"`
}

// NewEventSourceMapping registers a new resource with the given unique name, arguments, and options.
func NewEventSourceMapping(ctx *pulumi.Context,
	name string, args *EventSourceMappingArgs, opts ...pulumi.ResourceOption) (*EventSourceMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	var resource EventSourceMapping
	err := ctx.RegisterResource("aws-native:lambda:EventSourceMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSourceMapping gets an existing EventSourceMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSourceMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSourceMappingState, opts ...pulumi.ResourceOption) (*EventSourceMapping, error) {
	var resource EventSourceMapping
	err := ctx.ReadResource("aws-native:lambda:EventSourceMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSourceMapping resources.
type eventSourceMappingState struct {
}

type EventSourceMappingState struct {
}

func (EventSourceMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceMappingState)(nil)).Elem()
}

type eventSourceMappingArgs struct {
	// The maximum number of items to retrieve in a single batch.
	BatchSize *int `pulumi:"batchSize"`
	// (Streams) If the function returns an error, split the batch in two and retry.
	BisectBatchOnFunctionError *bool `pulumi:"bisectBatchOnFunctionError"`
	// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
	DestinationConfig *EventSourceMappingDestinationConfig `pulumi:"destinationConfig"`
	// Disables the event source mapping to pause polling and invocation.
	Enabled *bool `pulumi:"enabled"`
	// The Amazon Resource Name (ARN) of the event source.
	EventSourceArn *string `pulumi:"eventSourceArn"`
	// The filter criteria to control event filtering.
	FilterCriteria *FilterCriteriaProperties `pulumi:"filterCriteria"`
	// The name of the Lambda function.
	FunctionName string `pulumi:"functionName"`
	// (Streams) A list of response types supported by the function.
	FunctionResponseTypes []EventSourceMappingFunctionResponseTypesItem `pulumi:"functionResponseTypes"`
	// (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
	// (Streams) The maximum age of a record that Lambda sends to a function for processing.
	MaximumRecordAgeInSeconds *int `pulumi:"maximumRecordAgeInSeconds"`
	// (Streams) The maximum number of times to retry when the function returns an error.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// (Streams) The number of batches to process from each shard concurrently.
	ParallelizationFactor *int `pulumi:"parallelizationFactor"`
	// (ActiveMQ) A list of ActiveMQ queues.
	Queues []string `pulumi:"queues"`
	// Self-managed event source endpoints.
	SelfManagedEventSource *EventSourceMappingSelfManagedEventSource `pulumi:"selfManagedEventSource"`
	// A list of SourceAccessConfiguration.
	SourceAccessConfigurations []EventSourceMappingSourceAccessConfiguration `pulumi:"sourceAccessConfigurations"`
	// The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources.
	StartingPosition *string `pulumi:"startingPosition"`
	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp *float64 `pulumi:"startingPositionTimestamp"`
	// (Kafka) A list of Kafka topics.
	Topics []string `pulumi:"topics"`
	// (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
	TumblingWindowInSeconds *int `pulumi:"tumblingWindowInSeconds"`
}

// The set of arguments for constructing a EventSourceMapping resource.
type EventSourceMappingArgs struct {
	// The maximum number of items to retrieve in a single batch.
	BatchSize pulumi.IntPtrInput
	// (Streams) If the function returns an error, split the batch in two and retry.
	BisectBatchOnFunctionError pulumi.BoolPtrInput
	// (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
	DestinationConfig EventSourceMappingDestinationConfigPtrInput
	// Disables the event source mapping to pause polling and invocation.
	Enabled pulumi.BoolPtrInput
	// The Amazon Resource Name (ARN) of the event source.
	EventSourceArn pulumi.StringPtrInput
	// The filter criteria to control event filtering.
	FilterCriteria FilterCriteriaPropertiesPtrInput
	// The name of the Lambda function.
	FunctionName pulumi.StringInput
	// (Streams) A list of response types supported by the function.
	FunctionResponseTypes EventSourceMappingFunctionResponseTypesItemArrayInput
	// (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput
	// (Streams) The maximum age of a record that Lambda sends to a function for processing.
	MaximumRecordAgeInSeconds pulumi.IntPtrInput
	// (Streams) The maximum number of times to retry when the function returns an error.
	MaximumRetryAttempts pulumi.IntPtrInput
	// (Streams) The number of batches to process from each shard concurrently.
	ParallelizationFactor pulumi.IntPtrInput
	// (ActiveMQ) A list of ActiveMQ queues.
	Queues pulumi.StringArrayInput
	// Self-managed event source endpoints.
	SelfManagedEventSource EventSourceMappingSelfManagedEventSourcePtrInput
	// A list of SourceAccessConfiguration.
	SourceAccessConfigurations EventSourceMappingSourceAccessConfigurationArrayInput
	// The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources.
	StartingPosition pulumi.StringPtrInput
	// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
	StartingPositionTimestamp pulumi.Float64PtrInput
	// (Kafka) A list of Kafka topics.
	Topics pulumi.StringArrayInput
	// (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
	TumblingWindowInSeconds pulumi.IntPtrInput
}

func (EventSourceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceMappingArgs)(nil)).Elem()
}

type EventSourceMappingInput interface {
	pulumi.Input

	ToEventSourceMappingOutput() EventSourceMappingOutput
	ToEventSourceMappingOutputWithContext(ctx context.Context) EventSourceMappingOutput
}

func (*EventSourceMapping) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMapping)(nil))
}

func (i *EventSourceMapping) ToEventSourceMappingOutput() EventSourceMappingOutput {
	return i.ToEventSourceMappingOutputWithContext(context.Background())
}

func (i *EventSourceMapping) ToEventSourceMappingOutputWithContext(ctx context.Context) EventSourceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMappingOutput)
}

type EventSourceMappingOutput struct{ *pulumi.OutputState }

func (EventSourceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceMapping)(nil))
}

func (o EventSourceMappingOutput) ToEventSourceMappingOutput() EventSourceMappingOutput {
	return o
}

func (o EventSourceMappingOutput) ToEventSourceMappingOutputWithContext(ctx context.Context) EventSourceMappingOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMappingInput)(nil)).Elem(), &EventSourceMapping{})
	pulumi.RegisterOutputType(EventSourceMappingOutput{})
}
