// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lambda::Function
type Function struct {
	pulumi.CustomResourceState

	// Unique identifier for function resources
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The code for the function.
	Code FunctionCodeOutput `pulumi:"code"`
	// A unique Arn for CodeSigningConfig resource
	CodeSigningConfigArn pulumi.StringPtrOutput `pulumi:"codeSigningConfigArn"`
	// A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfig FunctionDeadLetterConfigPtrOutput `pulumi:"deadLetterConfig"`
	// A description of the function.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Environment variables that are accessible from function code during execution.
	Environment FunctionEnvironmentPtrOutput `pulumi:"environment"`
	// Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an AWS::EFS::MountTarget resource, you must also specify a DependsOn attribute to ensure that the mount target is created or updated before the function.
	FileSystemConfigs FunctionFileSystemConfigArrayOutput `pulumi:"fileSystemConfigs"`
	// The name of the Lambda function, up to 64 characters in length. If you don't specify a name, AWS CloudFormation generates one.
	FunctionName pulumi.StringPtrOutput `pulumi:"functionName"`
	// The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime
	Handler pulumi.StringPtrOutput `pulumi:"handler"`
	// ImageConfig
	ImageConfig FunctionImageConfigPtrOutput `pulumi:"imageConfig"`
	// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
	Layers pulumi.StringArrayOutput `pulumi:"layers"`
	// The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
	MemorySize pulumi.IntPtrOutput `pulumi:"memorySize"`
	// PackageType.
	PackageType FunctionPackageTypePtrOutput `pulumi:"packageType"`
	// The number of simultaneous executions to reserve for the function.
	ReservedConcurrentExecutions pulumi.IntPtrOutput `pulumi:"reservedConcurrentExecutions"`
	// The Amazon Resource Name (ARN) of the function's execution role.
	Role pulumi.StringOutput `pulumi:"role"`
	// The identifier of the function's runtime.
	Runtime pulumi.StringPtrOutput `pulumi:"runtime"`
	// A list of tags to apply to the function.
	Tags FunctionTagArrayOutput `pulumi:"tags"`
	// The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray.
	TracingConfig FunctionTracingConfigPtrOutput `pulumi:"tracingConfig"`
	// For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
	VpcConfig FunctionVpcConfigPtrOutput `pulumi:"vpcConfig"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Code == nil {
		return nil, errors.New("invalid value for required argument 'Code'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource Function
	err := ctx.RegisterResource("aws-native:lambda:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("aws-native:lambda:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
}

type FunctionState struct {
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	// The code for the function.
	Code FunctionCode `pulumi:"code"`
	// A unique Arn for CodeSigningConfig resource
	CodeSigningConfigArn *string `pulumi:"codeSigningConfigArn"`
	// A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfig *FunctionDeadLetterConfig `pulumi:"deadLetterConfig"`
	// A description of the function.
	Description *string `pulumi:"description"`
	// Environment variables that are accessible from function code during execution.
	Environment *FunctionEnvironment `pulumi:"environment"`
	// Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an AWS::EFS::MountTarget resource, you must also specify a DependsOn attribute to ensure that the mount target is created or updated before the function.
	FileSystemConfigs []FunctionFileSystemConfig `pulumi:"fileSystemConfigs"`
	// The name of the Lambda function, up to 64 characters in length. If you don't specify a name, AWS CloudFormation generates one.
	FunctionName *string `pulumi:"functionName"`
	// The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime
	Handler *string `pulumi:"handler"`
	// ImageConfig
	ImageConfig *FunctionImageConfig `pulumi:"imageConfig"`
	// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
	Layers []string `pulumi:"layers"`
	// The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
	MemorySize *int `pulumi:"memorySize"`
	// PackageType.
	PackageType *FunctionPackageType `pulumi:"packageType"`
	// The number of simultaneous executions to reserve for the function.
	ReservedConcurrentExecutions *int `pulumi:"reservedConcurrentExecutions"`
	// The Amazon Resource Name (ARN) of the function's execution role.
	Role string `pulumi:"role"`
	// The identifier of the function's runtime.
	Runtime *string `pulumi:"runtime"`
	// A list of tags to apply to the function.
	Tags []FunctionTag `pulumi:"tags"`
	// The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
	Timeout *int `pulumi:"timeout"`
	// Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray.
	TracingConfig *FunctionTracingConfig `pulumi:"tracingConfig"`
	// For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
	VpcConfig *FunctionVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// The code for the function.
	Code FunctionCodeInput
	// A unique Arn for CodeSigningConfig resource
	CodeSigningConfigArn pulumi.StringPtrInput
	// A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
	DeadLetterConfig FunctionDeadLetterConfigPtrInput
	// A description of the function.
	Description pulumi.StringPtrInput
	// Environment variables that are accessible from function code during execution.
	Environment FunctionEnvironmentPtrInput
	// Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an AWS::EFS::MountTarget resource, you must also specify a DependsOn attribute to ensure that the mount target is created or updated before the function.
	FileSystemConfigs FunctionFileSystemConfigArrayInput
	// The name of the Lambda function, up to 64 characters in length. If you don't specify a name, AWS CloudFormation generates one.
	FunctionName pulumi.StringPtrInput
	// The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime
	Handler pulumi.StringPtrInput
	// ImageConfig
	ImageConfig FunctionImageConfigPtrInput
	// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
	KmsKeyArn pulumi.StringPtrInput
	// A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
	Layers pulumi.StringArrayInput
	// The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
	MemorySize pulumi.IntPtrInput
	// PackageType.
	PackageType FunctionPackageTypePtrInput
	// The number of simultaneous executions to reserve for the function.
	ReservedConcurrentExecutions pulumi.IntPtrInput
	// The Amazon Resource Name (ARN) of the function's execution role.
	Role pulumi.StringInput
	// The identifier of the function's runtime.
	Runtime pulumi.StringPtrInput
	// A list of tags to apply to the function.
	Tags FunctionTagArrayInput
	// The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
	Timeout pulumi.IntPtrInput
	// Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray.
	TracingConfig FunctionTracingConfigPtrInput
	// For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
	VpcConfig FunctionVpcConfigPtrInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((*Function)(nil))
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

type FunctionOutput struct{ *pulumi.OutputState }

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Function)(nil))
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FunctionOutput{})
}
