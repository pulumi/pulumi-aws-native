// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::Lambda::Permission
func LookupPermission(ctx *pulumi.Context, args *LookupPermissionArgs, opts ...pulumi.InvokeOption) (*LookupPermissionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPermissionResult
	err := ctx.Invoke("aws-native:lambda:getPermission", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPermissionArgs struct {
	// The name of the Lambda function, version, or alias.
	FunctionName string `pulumi:"functionName"`
	// A statement identifier that differentiates the statement from others in the same policy.
	Id string `pulumi:"id"`
}

type LookupPermissionResult struct {
	// A statement identifier that differentiates the statement from others in the same policy.
	Id *string `pulumi:"id"`
}

func LookupPermissionOutput(ctx *pulumi.Context, args LookupPermissionOutputArgs, opts ...pulumi.InvokeOption) LookupPermissionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPermissionResult, error) {
			args := v.(LookupPermissionArgs)
			r, err := LookupPermission(ctx, &args, opts...)
			var s LookupPermissionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPermissionResultOutput)
}

type LookupPermissionOutputArgs struct {
	// The name of the Lambda function, version, or alias.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// A statement identifier that differentiates the statement from others in the same policy.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupPermissionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionArgs)(nil)).Elem()
}

type LookupPermissionResultOutput struct{ *pulumi.OutputState }

func (LookupPermissionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionResult)(nil)).Elem()
}

func (o LookupPermissionResultOutput) ToLookupPermissionResultOutput() LookupPermissionResultOutput {
	return o
}

func (o LookupPermissionResultOutput) ToLookupPermissionResultOutputWithContext(ctx context.Context) LookupPermissionResultOutput {
	return o
}

func (o LookupPermissionResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPermissionResult] {
	return pulumix.Output[LookupPermissionResult]{
		OutputState: o.OutputState,
	}
}

// A statement identifier that differentiates the statement from others in the same policy.
func (o LookupPermissionResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPermissionResultOutput{})
}
