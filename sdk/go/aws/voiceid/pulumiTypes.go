// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package voiceid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainServerSideEncryptionConfiguration struct {
	KmsKeyId string `pulumi:"kmsKeyId"`
}

// DomainServerSideEncryptionConfigurationInput is an input type that accepts DomainServerSideEncryptionConfigurationArgs and DomainServerSideEncryptionConfigurationOutput values.
// You can construct a concrete instance of `DomainServerSideEncryptionConfigurationInput` via:
//
//          DomainServerSideEncryptionConfigurationArgs{...}
type DomainServerSideEncryptionConfigurationInput interface {
	pulumi.Input

	ToDomainServerSideEncryptionConfigurationOutput() DomainServerSideEncryptionConfigurationOutput
	ToDomainServerSideEncryptionConfigurationOutputWithContext(context.Context) DomainServerSideEncryptionConfigurationOutput
}

type DomainServerSideEncryptionConfigurationArgs struct {
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
}

func (DomainServerSideEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainServerSideEncryptionConfiguration)(nil)).Elem()
}

func (i DomainServerSideEncryptionConfigurationArgs) ToDomainServerSideEncryptionConfigurationOutput() DomainServerSideEncryptionConfigurationOutput {
	return i.ToDomainServerSideEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DomainServerSideEncryptionConfigurationArgs) ToDomainServerSideEncryptionConfigurationOutputWithContext(ctx context.Context) DomainServerSideEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainServerSideEncryptionConfigurationOutput)
}

type DomainServerSideEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DomainServerSideEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainServerSideEncryptionConfiguration)(nil)).Elem()
}

func (o DomainServerSideEncryptionConfigurationOutput) ToDomainServerSideEncryptionConfigurationOutput() DomainServerSideEncryptionConfigurationOutput {
	return o
}

func (o DomainServerSideEncryptionConfigurationOutput) ToDomainServerSideEncryptionConfigurationOutputWithContext(ctx context.Context) DomainServerSideEncryptionConfigurationOutput {
	return o
}

func (o DomainServerSideEncryptionConfigurationOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v DomainServerSideEncryptionConfiguration) string { return v.KmsKeyId }).(pulumi.StringOutput)
}

type DomainTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DomainTagInput is an input type that accepts DomainTagArgs and DomainTagOutput values.
// You can construct a concrete instance of `DomainTagInput` via:
//
//          DomainTagArgs{...}
type DomainTagInput interface {
	pulumi.Input

	ToDomainTagOutput() DomainTagOutput
	ToDomainTagOutputWithContext(context.Context) DomainTagOutput
}

type DomainTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DomainTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTag)(nil)).Elem()
}

func (i DomainTagArgs) ToDomainTagOutput() DomainTagOutput {
	return i.ToDomainTagOutputWithContext(context.Background())
}

func (i DomainTagArgs) ToDomainTagOutputWithContext(ctx context.Context) DomainTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTagOutput)
}

// DomainTagArrayInput is an input type that accepts DomainTagArray and DomainTagArrayOutput values.
// You can construct a concrete instance of `DomainTagArrayInput` via:
//
//          DomainTagArray{ DomainTagArgs{...} }
type DomainTagArrayInput interface {
	pulumi.Input

	ToDomainTagArrayOutput() DomainTagArrayOutput
	ToDomainTagArrayOutputWithContext(context.Context) DomainTagArrayOutput
}

type DomainTagArray []DomainTagInput

func (DomainTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainTag)(nil)).Elem()
}

func (i DomainTagArray) ToDomainTagArrayOutput() DomainTagArrayOutput {
	return i.ToDomainTagArrayOutputWithContext(context.Background())
}

func (i DomainTagArray) ToDomainTagArrayOutputWithContext(ctx context.Context) DomainTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTagArrayOutput)
}

type DomainTagOutput struct{ *pulumi.OutputState }

func (DomainTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTag)(nil)).Elem()
}

func (o DomainTagOutput) ToDomainTagOutput() DomainTagOutput {
	return o
}

func (o DomainTagOutput) ToDomainTagOutputWithContext(ctx context.Context) DomainTagOutput {
	return o
}

func (o DomainTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DomainTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTag) string { return v.Value }).(pulumi.StringOutput)
}

type DomainTagArrayOutput struct{ *pulumi.OutputState }

func (DomainTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainTag)(nil)).Elem()
}

func (o DomainTagArrayOutput) ToDomainTagArrayOutput() DomainTagArrayOutput {
	return o
}

func (o DomainTagArrayOutput) ToDomainTagArrayOutputWithContext(ctx context.Context) DomainTagArrayOutput {
	return o
}

func (o DomainTagArrayOutput) Index(i pulumi.IntInput) DomainTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainTag {
		return vs[0].([]DomainTag)[vs[1].(int)]
	}).(DomainTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainServerSideEncryptionConfigurationInput)(nil)).Elem(), DomainServerSideEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTagInput)(nil)).Elem(), DomainTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTagArrayInput)(nil)).Elem(), DomainTagArray{})
	pulumi.RegisterOutputType(DomainServerSideEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(DomainTagOutput{})
	pulumi.RegisterOutputType(DomainTagArrayOutput{})
}
