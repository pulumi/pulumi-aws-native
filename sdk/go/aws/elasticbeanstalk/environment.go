// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ElasticBeanstalk::Environment
//
// Deprecated: Environment is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Environment struct {
	pulumi.CustomResourceState

	ApplicationName   pulumi.StringOutput                 `pulumi:"applicationName"`
	CNAMEPrefix       pulumi.StringPtrOutput              `pulumi:"cNAMEPrefix"`
	Description       pulumi.StringPtrOutput              `pulumi:"description"`
	EndpointURL       pulumi.StringOutput                 `pulumi:"endpointURL"`
	EnvironmentName   pulumi.StringPtrOutput              `pulumi:"environmentName"`
	OperationsRole    pulumi.StringPtrOutput              `pulumi:"operationsRole"`
	OptionSettings    EnvironmentOptionSettingArrayOutput `pulumi:"optionSettings"`
	PlatformArn       pulumi.StringPtrOutput              `pulumi:"platformArn"`
	SolutionStackName pulumi.StringPtrOutput              `pulumi:"solutionStackName"`
	Tags              EnvironmentTagArrayOutput           `pulumi:"tags"`
	TemplateName      pulumi.StringPtrOutput              `pulumi:"templateName"`
	Tier              EnvironmentTierPtrOutput            `pulumi:"tier"`
	VersionLabel      pulumi.StringPtrOutput              `pulumi:"versionLabel"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	var resource Environment
	err := ctx.RegisterResource("aws-native:elasticbeanstalk:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws-native:elasticbeanstalk:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
}

type EnvironmentState struct {
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	ApplicationName   string                     `pulumi:"applicationName"`
	CNAMEPrefix       *string                    `pulumi:"cNAMEPrefix"`
	Description       *string                    `pulumi:"description"`
	EnvironmentName   *string                    `pulumi:"environmentName"`
	OperationsRole    *string                    `pulumi:"operationsRole"`
	OptionSettings    []EnvironmentOptionSetting `pulumi:"optionSettings"`
	PlatformArn       *string                    `pulumi:"platformArn"`
	SolutionStackName *string                    `pulumi:"solutionStackName"`
	Tags              []EnvironmentTag           `pulumi:"tags"`
	TemplateName      *string                    `pulumi:"templateName"`
	Tier              *EnvironmentTier           `pulumi:"tier"`
	VersionLabel      *string                    `pulumi:"versionLabel"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	ApplicationName   pulumi.StringInput
	CNAMEPrefix       pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	EnvironmentName   pulumi.StringPtrInput
	OperationsRole    pulumi.StringPtrInput
	OptionSettings    EnvironmentOptionSettingArrayInput
	PlatformArn       pulumi.StringPtrInput
	SolutionStackName pulumi.StringPtrInput
	Tags              EnvironmentTagArrayInput
	TemplateName      pulumi.StringPtrInput
	Tier              EnvironmentTierPtrInput
	VersionLabel      pulumi.StringPtrInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ApplicationName }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) CNAMEPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.CNAMEPrefix }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) EndpointURL() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EndpointURL }).(pulumi.StringOutput)
}

func (o EnvironmentOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) OperationsRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.OperationsRole }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) OptionSettings() EnvironmentOptionSettingArrayOutput {
	return o.ApplyT(func(v *Environment) EnvironmentOptionSettingArrayOutput { return v.OptionSettings }).(EnvironmentOptionSettingArrayOutput)
}

func (o EnvironmentOutput) PlatformArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.PlatformArn }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) SolutionStackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.SolutionStackName }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) Tags() EnvironmentTagArrayOutput {
	return o.ApplyT(func(v *Environment) EnvironmentTagArrayOutput { return v.Tags }).(EnvironmentTagArrayOutput)
}

func (o EnvironmentOutput) TemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.TemplateName }).(pulumi.StringPtrOutput)
}

func (o EnvironmentOutput) Tier() EnvironmentTierPtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentTierPtrOutput { return v.Tier }).(EnvironmentTierPtrOutput)
}

func (o EnvironmentOutput) VersionLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.VersionLabel }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
}
