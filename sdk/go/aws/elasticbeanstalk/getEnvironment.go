// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::ElasticBeanstalk::Environment
func LookupEnvironment(ctx *pulumi.Context, args *LookupEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnvironmentResult
	err := ctx.Invoke("aws-native:elasticbeanstalk:getEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEnvironmentArgs struct {
	// A unique name for the environment.
	EnvironmentName string `pulumi:"environmentName"`
}

type LookupEnvironmentResult struct {
	// Your description for this environment.
	Description *string `pulumi:"description"`
	EndpointUrl *string `pulumi:"endpointUrl"`
	// The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
	OperationsRole *string `pulumi:"operationsRole"`
	// The Amazon Resource Name (ARN) of the custom platform to use with the environment.
	PlatformArn *string `pulumi:"platformArn"`
	// Specifies the tags applied to resources in the environment.
	Tags []EnvironmentTag `pulumi:"tags"`
	// Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.
	Tier *EnvironmentTier `pulumi:"tier"`
	// The name of the application version to deploy.
	VersionLabel *string `pulumi:"versionLabel"`
}

func LookupEnvironmentOutput(ctx *pulumi.Context, args LookupEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupEnvironmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEnvironmentResult, error) {
			args := v.(LookupEnvironmentArgs)
			r, err := LookupEnvironment(ctx, &args, opts...)
			var s LookupEnvironmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEnvironmentResultOutput)
}

type LookupEnvironmentOutputArgs struct {
	// A unique name for the environment.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
}

func (LookupEnvironmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentArgs)(nil)).Elem()
}

type LookupEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentResult)(nil)).Elem()
}

func (o LookupEnvironmentResultOutput) ToLookupEnvironmentResultOutput() LookupEnvironmentResultOutput {
	return o
}

func (o LookupEnvironmentResultOutput) ToLookupEnvironmentResultOutputWithContext(ctx context.Context) LookupEnvironmentResultOutput {
	return o
}

func (o LookupEnvironmentResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupEnvironmentResult] {
	return pulumix.Output[LookupEnvironmentResult]{
		OutputState: o.OutputState,
	}
}

// Your description for this environment.
func (o LookupEnvironmentResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupEnvironmentResultOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
func (o LookupEnvironmentResultOutput) OperationsRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.OperationsRole }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the custom platform to use with the environment.
func (o LookupEnvironmentResultOutput) PlatformArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.PlatformArn }).(pulumi.StringPtrOutput)
}

// Specifies the tags applied to resources in the environment.
func (o LookupEnvironmentResultOutput) Tags() EnvironmentTagArrayOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) []EnvironmentTag { return v.Tags }).(EnvironmentTagArrayOutput)
}

// Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.
func (o LookupEnvironmentResultOutput) Tier() EnvironmentTierPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *EnvironmentTier { return v.Tier }).(EnvironmentTierPtrOutput)
}

// The name of the application version to deploy.
func (o LookupEnvironmentResultOutput) VersionLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.VersionLabel }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnvironmentResultOutput{})
}
