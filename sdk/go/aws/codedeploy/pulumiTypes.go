// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codedeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApplicationTag struct {
	// The tag's key.
	Key string `pulumi:"key"`
	// The tag's value.
	Value string `pulumi:"value"`
}

type DeploymentConfigMinimumHealthyHosts struct {
	// The minimum healthy instance type:
	//
	// - HOST_COUNT: The minimum number of healthy instance as an absolute value.
	// - FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.
	//
	// In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment is successful if four or more instance are deployed to successfully. Otherwise, the deployment fails.
	//
	// > In a call to `GetDeploymentConfig` , CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful.
	//
	// For more information, see [AWS CodeDeploy Instance Health](https://docs.aws.amazon.com//codedeploy/latest/userguide/instances-health.html) in the *AWS CodeDeploy User Guide* .
	Type string `pulumi:"type"`
	// The minimum healthy instance value.
	Value int `pulumi:"value"`
}

// DeploymentConfigMinimumHealthyHostsInput is an input type that accepts DeploymentConfigMinimumHealthyHostsArgs and DeploymentConfigMinimumHealthyHostsOutput values.
// You can construct a concrete instance of `DeploymentConfigMinimumHealthyHostsInput` via:
//
//	DeploymentConfigMinimumHealthyHostsArgs{...}
type DeploymentConfigMinimumHealthyHostsInput interface {
	pulumi.Input

	ToDeploymentConfigMinimumHealthyHostsOutput() DeploymentConfigMinimumHealthyHostsOutput
	ToDeploymentConfigMinimumHealthyHostsOutputWithContext(context.Context) DeploymentConfigMinimumHealthyHostsOutput
}

type DeploymentConfigMinimumHealthyHostsArgs struct {
	// The minimum healthy instance type:
	//
	// - HOST_COUNT: The minimum number of healthy instance as an absolute value.
	// - FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.
	//
	// In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment is successful if four or more instance are deployed to successfully. Otherwise, the deployment fails.
	//
	// > In a call to `GetDeploymentConfig` , CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful.
	//
	// For more information, see [AWS CodeDeploy Instance Health](https://docs.aws.amazon.com//codedeploy/latest/userguide/instances-health.html) in the *AWS CodeDeploy User Guide* .
	Type pulumi.StringInput `pulumi:"type"`
	// The minimum healthy instance value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (DeploymentConfigMinimumHealthyHostsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigMinimumHealthyHosts)(nil)).Elem()
}

func (i DeploymentConfigMinimumHealthyHostsArgs) ToDeploymentConfigMinimumHealthyHostsOutput() DeploymentConfigMinimumHealthyHostsOutput {
	return i.ToDeploymentConfigMinimumHealthyHostsOutputWithContext(context.Background())
}

func (i DeploymentConfigMinimumHealthyHostsArgs) ToDeploymentConfigMinimumHealthyHostsOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMinimumHealthyHostsOutput)
}

func (i DeploymentConfigMinimumHealthyHostsArgs) ToDeploymentConfigMinimumHealthyHostsPtrOutput() DeploymentConfigMinimumHealthyHostsPtrOutput {
	return i.ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(context.Background())
}

func (i DeploymentConfigMinimumHealthyHostsArgs) ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMinimumHealthyHostsOutput).ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(ctx)
}

// DeploymentConfigMinimumHealthyHostsPtrInput is an input type that accepts DeploymentConfigMinimumHealthyHostsArgs, DeploymentConfigMinimumHealthyHostsPtr and DeploymentConfigMinimumHealthyHostsPtrOutput values.
// You can construct a concrete instance of `DeploymentConfigMinimumHealthyHostsPtrInput` via:
//
//	        DeploymentConfigMinimumHealthyHostsArgs{...}
//
//	or:
//
//	        nil
type DeploymentConfigMinimumHealthyHostsPtrInput interface {
	pulumi.Input

	ToDeploymentConfigMinimumHealthyHostsPtrOutput() DeploymentConfigMinimumHealthyHostsPtrOutput
	ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(context.Context) DeploymentConfigMinimumHealthyHostsPtrOutput
}

type deploymentConfigMinimumHealthyHostsPtrType DeploymentConfigMinimumHealthyHostsArgs

func DeploymentConfigMinimumHealthyHostsPtr(v *DeploymentConfigMinimumHealthyHostsArgs) DeploymentConfigMinimumHealthyHostsPtrInput {
	return (*deploymentConfigMinimumHealthyHostsPtrType)(v)
}

func (*deploymentConfigMinimumHealthyHostsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigMinimumHealthyHosts)(nil)).Elem()
}

func (i *deploymentConfigMinimumHealthyHostsPtrType) ToDeploymentConfigMinimumHealthyHostsPtrOutput() DeploymentConfigMinimumHealthyHostsPtrOutput {
	return i.ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(context.Background())
}

func (i *deploymentConfigMinimumHealthyHostsPtrType) ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMinimumHealthyHostsPtrOutput)
}

type DeploymentConfigMinimumHealthyHostsOutput struct{ *pulumi.OutputState }

func (DeploymentConfigMinimumHealthyHostsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigMinimumHealthyHosts)(nil)).Elem()
}

func (o DeploymentConfigMinimumHealthyHostsOutput) ToDeploymentConfigMinimumHealthyHostsOutput() DeploymentConfigMinimumHealthyHostsOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsOutput) ToDeploymentConfigMinimumHealthyHostsOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsOutput) ToDeploymentConfigMinimumHealthyHostsPtrOutput() DeploymentConfigMinimumHealthyHostsPtrOutput {
	return o.ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(context.Background())
}

func (o DeploymentConfigMinimumHealthyHostsOutput) ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentConfigMinimumHealthyHosts) *DeploymentConfigMinimumHealthyHosts {
		return &v
	}).(DeploymentConfigMinimumHealthyHostsPtrOutput)
}

// The minimum healthy instance type:
//
// - HOST_COUNT: The minimum number of healthy instance as an absolute value.
// - FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.
//
// In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment is successful if four or more instance are deployed to successfully. Otherwise, the deployment fails.
//
// > In a call to `GetDeploymentConfig` , CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful.
//
// For more information, see [AWS CodeDeploy Instance Health](https://docs.aws.amazon.com//codedeploy/latest/userguide/instances-health.html) in the *AWS CodeDeploy User Guide* .
func (o DeploymentConfigMinimumHealthyHostsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentConfigMinimumHealthyHosts) string { return v.Type }).(pulumi.StringOutput)
}

// The minimum healthy instance value.
func (o DeploymentConfigMinimumHealthyHostsOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v DeploymentConfigMinimumHealthyHosts) int { return v.Value }).(pulumi.IntOutput)
}

type DeploymentConfigMinimumHealthyHostsPtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigMinimumHealthyHostsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigMinimumHealthyHosts)(nil)).Elem()
}

func (o DeploymentConfigMinimumHealthyHostsPtrOutput) ToDeploymentConfigMinimumHealthyHostsPtrOutput() DeploymentConfigMinimumHealthyHostsPtrOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsPtrOutput) ToDeploymentConfigMinimumHealthyHostsPtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPtrOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsPtrOutput) Elem() DeploymentConfigMinimumHealthyHostsOutput {
	return o.ApplyT(func(v *DeploymentConfigMinimumHealthyHosts) DeploymentConfigMinimumHealthyHosts {
		if v != nil {
			return *v
		}
		var ret DeploymentConfigMinimumHealthyHosts
		return ret
	}).(DeploymentConfigMinimumHealthyHostsOutput)
}

// The minimum healthy instance type:
//
// - HOST_COUNT: The minimum number of healthy instance as an absolute value.
// - FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.
//
// In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment is successful if four or more instance are deployed to successfully. Otherwise, the deployment fails.
//
// > In a call to `GetDeploymentConfig` , CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful.
//
// For more information, see [AWS CodeDeploy Instance Health](https://docs.aws.amazon.com//codedeploy/latest/userguide/instances-health.html) in the *AWS CodeDeploy User Guide* .
func (o DeploymentConfigMinimumHealthyHostsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigMinimumHealthyHosts) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The minimum healthy instance value.
func (o DeploymentConfigMinimumHealthyHostsPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigMinimumHealthyHosts) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type DeploymentConfigMinimumHealthyHostsPerZone struct {
	// The `type` associated with the `MinimumHealthyHostsPerZone` option.
	Type string `pulumi:"type"`
	// The `value` associated with the `MinimumHealthyHostsPerZone` option.
	Value int `pulumi:"value"`
}

// DeploymentConfigMinimumHealthyHostsPerZoneInput is an input type that accepts DeploymentConfigMinimumHealthyHostsPerZoneArgs and DeploymentConfigMinimumHealthyHostsPerZoneOutput values.
// You can construct a concrete instance of `DeploymentConfigMinimumHealthyHostsPerZoneInput` via:
//
//	DeploymentConfigMinimumHealthyHostsPerZoneArgs{...}
type DeploymentConfigMinimumHealthyHostsPerZoneInput interface {
	pulumi.Input

	ToDeploymentConfigMinimumHealthyHostsPerZoneOutput() DeploymentConfigMinimumHealthyHostsPerZoneOutput
	ToDeploymentConfigMinimumHealthyHostsPerZoneOutputWithContext(context.Context) DeploymentConfigMinimumHealthyHostsPerZoneOutput
}

type DeploymentConfigMinimumHealthyHostsPerZoneArgs struct {
	// The `type` associated with the `MinimumHealthyHostsPerZone` option.
	Type pulumi.StringInput `pulumi:"type"`
	// The `value` associated with the `MinimumHealthyHostsPerZone` option.
	Value pulumi.IntInput `pulumi:"value"`
}

func (DeploymentConfigMinimumHealthyHostsPerZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigMinimumHealthyHostsPerZone)(nil)).Elem()
}

func (i DeploymentConfigMinimumHealthyHostsPerZoneArgs) ToDeploymentConfigMinimumHealthyHostsPerZoneOutput() DeploymentConfigMinimumHealthyHostsPerZoneOutput {
	return i.ToDeploymentConfigMinimumHealthyHostsPerZoneOutputWithContext(context.Background())
}

func (i DeploymentConfigMinimumHealthyHostsPerZoneArgs) ToDeploymentConfigMinimumHealthyHostsPerZoneOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPerZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMinimumHealthyHostsPerZoneOutput)
}

func (i DeploymentConfigMinimumHealthyHostsPerZoneArgs) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutput() DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return i.ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(context.Background())
}

func (i DeploymentConfigMinimumHealthyHostsPerZoneArgs) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMinimumHealthyHostsPerZoneOutput).ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(ctx)
}

// DeploymentConfigMinimumHealthyHostsPerZonePtrInput is an input type that accepts DeploymentConfigMinimumHealthyHostsPerZoneArgs, DeploymentConfigMinimumHealthyHostsPerZonePtr and DeploymentConfigMinimumHealthyHostsPerZonePtrOutput values.
// You can construct a concrete instance of `DeploymentConfigMinimumHealthyHostsPerZonePtrInput` via:
//
//	        DeploymentConfigMinimumHealthyHostsPerZoneArgs{...}
//
//	or:
//
//	        nil
type DeploymentConfigMinimumHealthyHostsPerZonePtrInput interface {
	pulumi.Input

	ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutput() DeploymentConfigMinimumHealthyHostsPerZonePtrOutput
	ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(context.Context) DeploymentConfigMinimumHealthyHostsPerZonePtrOutput
}

type deploymentConfigMinimumHealthyHostsPerZonePtrType DeploymentConfigMinimumHealthyHostsPerZoneArgs

func DeploymentConfigMinimumHealthyHostsPerZonePtr(v *DeploymentConfigMinimumHealthyHostsPerZoneArgs) DeploymentConfigMinimumHealthyHostsPerZonePtrInput {
	return (*deploymentConfigMinimumHealthyHostsPerZonePtrType)(v)
}

func (*deploymentConfigMinimumHealthyHostsPerZonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigMinimumHealthyHostsPerZone)(nil)).Elem()
}

func (i *deploymentConfigMinimumHealthyHostsPerZonePtrType) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutput() DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return i.ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(context.Background())
}

func (i *deploymentConfigMinimumHealthyHostsPerZonePtrType) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigMinimumHealthyHostsPerZonePtrOutput)
}

type DeploymentConfigMinimumHealthyHostsPerZoneOutput struct{ *pulumi.OutputState }

func (DeploymentConfigMinimumHealthyHostsPerZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigMinimumHealthyHostsPerZone)(nil)).Elem()
}

func (o DeploymentConfigMinimumHealthyHostsPerZoneOutput) ToDeploymentConfigMinimumHealthyHostsPerZoneOutput() DeploymentConfigMinimumHealthyHostsPerZoneOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsPerZoneOutput) ToDeploymentConfigMinimumHealthyHostsPerZoneOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPerZoneOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsPerZoneOutput) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutput() DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return o.ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(context.Background())
}

func (o DeploymentConfigMinimumHealthyHostsPerZoneOutput) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentConfigMinimumHealthyHostsPerZone) *DeploymentConfigMinimumHealthyHostsPerZone {
		return &v
	}).(DeploymentConfigMinimumHealthyHostsPerZonePtrOutput)
}

// The `type` associated with the `MinimumHealthyHostsPerZone` option.
func (o DeploymentConfigMinimumHealthyHostsPerZoneOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentConfigMinimumHealthyHostsPerZone) string { return v.Type }).(pulumi.StringOutput)
}

// The `value` associated with the `MinimumHealthyHostsPerZone` option.
func (o DeploymentConfigMinimumHealthyHostsPerZoneOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v DeploymentConfigMinimumHealthyHostsPerZone) int { return v.Value }).(pulumi.IntOutput)
}

type DeploymentConfigMinimumHealthyHostsPerZonePtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigMinimumHealthyHostsPerZonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigMinimumHealthyHostsPerZone)(nil)).Elem()
}

func (o DeploymentConfigMinimumHealthyHostsPerZonePtrOutput) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutput() DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsPerZonePtrOutput) ToDeploymentConfigMinimumHealthyHostsPerZonePtrOutputWithContext(ctx context.Context) DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return o
}

func (o DeploymentConfigMinimumHealthyHostsPerZonePtrOutput) Elem() DeploymentConfigMinimumHealthyHostsPerZoneOutput {
	return o.ApplyT(func(v *DeploymentConfigMinimumHealthyHostsPerZone) DeploymentConfigMinimumHealthyHostsPerZone {
		if v != nil {
			return *v
		}
		var ret DeploymentConfigMinimumHealthyHostsPerZone
		return ret
	}).(DeploymentConfigMinimumHealthyHostsPerZoneOutput)
}

// The `type` associated with the `MinimumHealthyHostsPerZone` option.
func (o DeploymentConfigMinimumHealthyHostsPerZonePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigMinimumHealthyHostsPerZone) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The `value` associated with the `MinimumHealthyHostsPerZone` option.
func (o DeploymentConfigMinimumHealthyHostsPerZonePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigMinimumHealthyHostsPerZone) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type DeploymentConfigTimeBasedCanary struct {
	// The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
	CanaryInterval int `pulumi:"canaryInterval"`
	// The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
	CanaryPercentage int `pulumi:"canaryPercentage"`
}

// DeploymentConfigTimeBasedCanaryInput is an input type that accepts DeploymentConfigTimeBasedCanaryArgs and DeploymentConfigTimeBasedCanaryOutput values.
// You can construct a concrete instance of `DeploymentConfigTimeBasedCanaryInput` via:
//
//	DeploymentConfigTimeBasedCanaryArgs{...}
type DeploymentConfigTimeBasedCanaryInput interface {
	pulumi.Input

	ToDeploymentConfigTimeBasedCanaryOutput() DeploymentConfigTimeBasedCanaryOutput
	ToDeploymentConfigTimeBasedCanaryOutputWithContext(context.Context) DeploymentConfigTimeBasedCanaryOutput
}

type DeploymentConfigTimeBasedCanaryArgs struct {
	// The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
	CanaryInterval pulumi.IntInput `pulumi:"canaryInterval"`
	// The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
	CanaryPercentage pulumi.IntInput `pulumi:"canaryPercentage"`
}

func (DeploymentConfigTimeBasedCanaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTimeBasedCanary)(nil)).Elem()
}

func (i DeploymentConfigTimeBasedCanaryArgs) ToDeploymentConfigTimeBasedCanaryOutput() DeploymentConfigTimeBasedCanaryOutput {
	return i.ToDeploymentConfigTimeBasedCanaryOutputWithContext(context.Background())
}

func (i DeploymentConfigTimeBasedCanaryArgs) ToDeploymentConfigTimeBasedCanaryOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedCanaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTimeBasedCanaryOutput)
}

func (i DeploymentConfigTimeBasedCanaryArgs) ToDeploymentConfigTimeBasedCanaryPtrOutput() DeploymentConfigTimeBasedCanaryPtrOutput {
	return i.ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(context.Background())
}

func (i DeploymentConfigTimeBasedCanaryArgs) ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedCanaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTimeBasedCanaryOutput).ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(ctx)
}

// DeploymentConfigTimeBasedCanaryPtrInput is an input type that accepts DeploymentConfigTimeBasedCanaryArgs, DeploymentConfigTimeBasedCanaryPtr and DeploymentConfigTimeBasedCanaryPtrOutput values.
// You can construct a concrete instance of `DeploymentConfigTimeBasedCanaryPtrInput` via:
//
//	        DeploymentConfigTimeBasedCanaryArgs{...}
//
//	or:
//
//	        nil
type DeploymentConfigTimeBasedCanaryPtrInput interface {
	pulumi.Input

	ToDeploymentConfigTimeBasedCanaryPtrOutput() DeploymentConfigTimeBasedCanaryPtrOutput
	ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(context.Context) DeploymentConfigTimeBasedCanaryPtrOutput
}

type deploymentConfigTimeBasedCanaryPtrType DeploymentConfigTimeBasedCanaryArgs

func DeploymentConfigTimeBasedCanaryPtr(v *DeploymentConfigTimeBasedCanaryArgs) DeploymentConfigTimeBasedCanaryPtrInput {
	return (*deploymentConfigTimeBasedCanaryPtrType)(v)
}

func (*deploymentConfigTimeBasedCanaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigTimeBasedCanary)(nil)).Elem()
}

func (i *deploymentConfigTimeBasedCanaryPtrType) ToDeploymentConfigTimeBasedCanaryPtrOutput() DeploymentConfigTimeBasedCanaryPtrOutput {
	return i.ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(context.Background())
}

func (i *deploymentConfigTimeBasedCanaryPtrType) ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedCanaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTimeBasedCanaryPtrOutput)
}

type DeploymentConfigTimeBasedCanaryOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTimeBasedCanaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTimeBasedCanary)(nil)).Elem()
}

func (o DeploymentConfigTimeBasedCanaryOutput) ToDeploymentConfigTimeBasedCanaryOutput() DeploymentConfigTimeBasedCanaryOutput {
	return o
}

func (o DeploymentConfigTimeBasedCanaryOutput) ToDeploymentConfigTimeBasedCanaryOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedCanaryOutput {
	return o
}

func (o DeploymentConfigTimeBasedCanaryOutput) ToDeploymentConfigTimeBasedCanaryPtrOutput() DeploymentConfigTimeBasedCanaryPtrOutput {
	return o.ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(context.Background())
}

func (o DeploymentConfigTimeBasedCanaryOutput) ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedCanaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentConfigTimeBasedCanary) *DeploymentConfigTimeBasedCanary {
		return &v
	}).(DeploymentConfigTimeBasedCanaryPtrOutput)
}

// The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
func (o DeploymentConfigTimeBasedCanaryOutput) CanaryInterval() pulumi.IntOutput {
	return o.ApplyT(func(v DeploymentConfigTimeBasedCanary) int { return v.CanaryInterval }).(pulumi.IntOutput)
}

// The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
func (o DeploymentConfigTimeBasedCanaryOutput) CanaryPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v DeploymentConfigTimeBasedCanary) int { return v.CanaryPercentage }).(pulumi.IntOutput)
}

type DeploymentConfigTimeBasedCanaryPtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTimeBasedCanaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigTimeBasedCanary)(nil)).Elem()
}

func (o DeploymentConfigTimeBasedCanaryPtrOutput) ToDeploymentConfigTimeBasedCanaryPtrOutput() DeploymentConfigTimeBasedCanaryPtrOutput {
	return o
}

func (o DeploymentConfigTimeBasedCanaryPtrOutput) ToDeploymentConfigTimeBasedCanaryPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedCanaryPtrOutput {
	return o
}

func (o DeploymentConfigTimeBasedCanaryPtrOutput) Elem() DeploymentConfigTimeBasedCanaryOutput {
	return o.ApplyT(func(v *DeploymentConfigTimeBasedCanary) DeploymentConfigTimeBasedCanary {
		if v != nil {
			return *v
		}
		var ret DeploymentConfigTimeBasedCanary
		return ret
	}).(DeploymentConfigTimeBasedCanaryOutput)
}

// The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
func (o DeploymentConfigTimeBasedCanaryPtrOutput) CanaryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigTimeBasedCanary) *int {
		if v == nil {
			return nil
		}
		return &v.CanaryInterval
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
func (o DeploymentConfigTimeBasedCanaryPtrOutput) CanaryPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigTimeBasedCanary) *int {
		if v == nil {
			return nil
		}
		return &v.CanaryPercentage
	}).(pulumi.IntPtrOutput)
}

type DeploymentConfigTimeBasedLinear struct {
	// The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
	LinearInterval int `pulumi:"linearInterval"`
	// The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
	LinearPercentage int `pulumi:"linearPercentage"`
}

// DeploymentConfigTimeBasedLinearInput is an input type that accepts DeploymentConfigTimeBasedLinearArgs and DeploymentConfigTimeBasedLinearOutput values.
// You can construct a concrete instance of `DeploymentConfigTimeBasedLinearInput` via:
//
//	DeploymentConfigTimeBasedLinearArgs{...}
type DeploymentConfigTimeBasedLinearInput interface {
	pulumi.Input

	ToDeploymentConfigTimeBasedLinearOutput() DeploymentConfigTimeBasedLinearOutput
	ToDeploymentConfigTimeBasedLinearOutputWithContext(context.Context) DeploymentConfigTimeBasedLinearOutput
}

type DeploymentConfigTimeBasedLinearArgs struct {
	// The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
	LinearInterval pulumi.IntInput `pulumi:"linearInterval"`
	// The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
	LinearPercentage pulumi.IntInput `pulumi:"linearPercentage"`
}

func (DeploymentConfigTimeBasedLinearArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTimeBasedLinear)(nil)).Elem()
}

func (i DeploymentConfigTimeBasedLinearArgs) ToDeploymentConfigTimeBasedLinearOutput() DeploymentConfigTimeBasedLinearOutput {
	return i.ToDeploymentConfigTimeBasedLinearOutputWithContext(context.Background())
}

func (i DeploymentConfigTimeBasedLinearArgs) ToDeploymentConfigTimeBasedLinearOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedLinearOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTimeBasedLinearOutput)
}

func (i DeploymentConfigTimeBasedLinearArgs) ToDeploymentConfigTimeBasedLinearPtrOutput() DeploymentConfigTimeBasedLinearPtrOutput {
	return i.ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(context.Background())
}

func (i DeploymentConfigTimeBasedLinearArgs) ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedLinearPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTimeBasedLinearOutput).ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(ctx)
}

// DeploymentConfigTimeBasedLinearPtrInput is an input type that accepts DeploymentConfigTimeBasedLinearArgs, DeploymentConfigTimeBasedLinearPtr and DeploymentConfigTimeBasedLinearPtrOutput values.
// You can construct a concrete instance of `DeploymentConfigTimeBasedLinearPtrInput` via:
//
//	        DeploymentConfigTimeBasedLinearArgs{...}
//
//	or:
//
//	        nil
type DeploymentConfigTimeBasedLinearPtrInput interface {
	pulumi.Input

	ToDeploymentConfigTimeBasedLinearPtrOutput() DeploymentConfigTimeBasedLinearPtrOutput
	ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(context.Context) DeploymentConfigTimeBasedLinearPtrOutput
}

type deploymentConfigTimeBasedLinearPtrType DeploymentConfigTimeBasedLinearArgs

func DeploymentConfigTimeBasedLinearPtr(v *DeploymentConfigTimeBasedLinearArgs) DeploymentConfigTimeBasedLinearPtrInput {
	return (*deploymentConfigTimeBasedLinearPtrType)(v)
}

func (*deploymentConfigTimeBasedLinearPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigTimeBasedLinear)(nil)).Elem()
}

func (i *deploymentConfigTimeBasedLinearPtrType) ToDeploymentConfigTimeBasedLinearPtrOutput() DeploymentConfigTimeBasedLinearPtrOutput {
	return i.ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(context.Background())
}

func (i *deploymentConfigTimeBasedLinearPtrType) ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedLinearPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTimeBasedLinearPtrOutput)
}

type DeploymentConfigTimeBasedLinearOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTimeBasedLinearOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTimeBasedLinear)(nil)).Elem()
}

func (o DeploymentConfigTimeBasedLinearOutput) ToDeploymentConfigTimeBasedLinearOutput() DeploymentConfigTimeBasedLinearOutput {
	return o
}

func (o DeploymentConfigTimeBasedLinearOutput) ToDeploymentConfigTimeBasedLinearOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedLinearOutput {
	return o
}

func (o DeploymentConfigTimeBasedLinearOutput) ToDeploymentConfigTimeBasedLinearPtrOutput() DeploymentConfigTimeBasedLinearPtrOutput {
	return o.ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(context.Background())
}

func (o DeploymentConfigTimeBasedLinearOutput) ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedLinearPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentConfigTimeBasedLinear) *DeploymentConfigTimeBasedLinear {
		return &v
	}).(DeploymentConfigTimeBasedLinearPtrOutput)
}

// The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
func (o DeploymentConfigTimeBasedLinearOutput) LinearInterval() pulumi.IntOutput {
	return o.ApplyT(func(v DeploymentConfigTimeBasedLinear) int { return v.LinearInterval }).(pulumi.IntOutput)
}

// The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
func (o DeploymentConfigTimeBasedLinearOutput) LinearPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v DeploymentConfigTimeBasedLinear) int { return v.LinearPercentage }).(pulumi.IntOutput)
}

type DeploymentConfigTimeBasedLinearPtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTimeBasedLinearPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigTimeBasedLinear)(nil)).Elem()
}

func (o DeploymentConfigTimeBasedLinearPtrOutput) ToDeploymentConfigTimeBasedLinearPtrOutput() DeploymentConfigTimeBasedLinearPtrOutput {
	return o
}

func (o DeploymentConfigTimeBasedLinearPtrOutput) ToDeploymentConfigTimeBasedLinearPtrOutputWithContext(ctx context.Context) DeploymentConfigTimeBasedLinearPtrOutput {
	return o
}

func (o DeploymentConfigTimeBasedLinearPtrOutput) Elem() DeploymentConfigTimeBasedLinearOutput {
	return o.ApplyT(func(v *DeploymentConfigTimeBasedLinear) DeploymentConfigTimeBasedLinear {
		if v != nil {
			return *v
		}
		var ret DeploymentConfigTimeBasedLinear
		return ret
	}).(DeploymentConfigTimeBasedLinearOutput)
}

// The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
func (o DeploymentConfigTimeBasedLinearPtrOutput) LinearInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigTimeBasedLinear) *int {
		if v == nil {
			return nil
		}
		return &v.LinearInterval
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
func (o DeploymentConfigTimeBasedLinearPtrOutput) LinearPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigTimeBasedLinear) *int {
		if v == nil {
			return nil
		}
		return &v.LinearPercentage
	}).(pulumi.IntPtrOutput)
}

type DeploymentConfigTrafficRoutingConfig struct {
	// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	TimeBasedCanary *DeploymentConfigTimeBasedCanary `pulumi:"timeBasedCanary"`
	// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	TimeBasedLinear *DeploymentConfigTimeBasedLinear `pulumi:"timeBasedLinear"`
	// The type of traffic shifting ( `TimeBasedCanary` or `TimeBasedLinear` ) used by a deployment configuration.
	Type string `pulumi:"type"`
}

// DeploymentConfigTrafficRoutingConfigInput is an input type that accepts DeploymentConfigTrafficRoutingConfigArgs and DeploymentConfigTrafficRoutingConfigOutput values.
// You can construct a concrete instance of `DeploymentConfigTrafficRoutingConfigInput` via:
//
//	DeploymentConfigTrafficRoutingConfigArgs{...}
type DeploymentConfigTrafficRoutingConfigInput interface {
	pulumi.Input

	ToDeploymentConfigTrafficRoutingConfigOutput() DeploymentConfigTrafficRoutingConfigOutput
	ToDeploymentConfigTrafficRoutingConfigOutputWithContext(context.Context) DeploymentConfigTrafficRoutingConfigOutput
}

type DeploymentConfigTrafficRoutingConfigArgs struct {
	// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	TimeBasedCanary DeploymentConfigTimeBasedCanaryPtrInput `pulumi:"timeBasedCanary"`
	// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	TimeBasedLinear DeploymentConfigTimeBasedLinearPtrInput `pulumi:"timeBasedLinear"`
	// The type of traffic shifting ( `TimeBasedCanary` or `TimeBasedLinear` ) used by a deployment configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DeploymentConfigTrafficRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfig)(nil)).Elem()
}

func (i DeploymentConfigTrafficRoutingConfigArgs) ToDeploymentConfigTrafficRoutingConfigOutput() DeploymentConfigTrafficRoutingConfigOutput {
	return i.ToDeploymentConfigTrafficRoutingConfigOutputWithContext(context.Background())
}

func (i DeploymentConfigTrafficRoutingConfigArgs) ToDeploymentConfigTrafficRoutingConfigOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTrafficRoutingConfigOutput)
}

func (i DeploymentConfigTrafficRoutingConfigArgs) ToDeploymentConfigTrafficRoutingConfigPtrOutput() DeploymentConfigTrafficRoutingConfigPtrOutput {
	return i.ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(context.Background())
}

func (i DeploymentConfigTrafficRoutingConfigArgs) ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTrafficRoutingConfigOutput).ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(ctx)
}

// DeploymentConfigTrafficRoutingConfigPtrInput is an input type that accepts DeploymentConfigTrafficRoutingConfigArgs, DeploymentConfigTrafficRoutingConfigPtr and DeploymentConfigTrafficRoutingConfigPtrOutput values.
// You can construct a concrete instance of `DeploymentConfigTrafficRoutingConfigPtrInput` via:
//
//	        DeploymentConfigTrafficRoutingConfigArgs{...}
//
//	or:
//
//	        nil
type DeploymentConfigTrafficRoutingConfigPtrInput interface {
	pulumi.Input

	ToDeploymentConfigTrafficRoutingConfigPtrOutput() DeploymentConfigTrafficRoutingConfigPtrOutput
	ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(context.Context) DeploymentConfigTrafficRoutingConfigPtrOutput
}

type deploymentConfigTrafficRoutingConfigPtrType DeploymentConfigTrafficRoutingConfigArgs

func DeploymentConfigTrafficRoutingConfigPtr(v *DeploymentConfigTrafficRoutingConfigArgs) DeploymentConfigTrafficRoutingConfigPtrInput {
	return (*deploymentConfigTrafficRoutingConfigPtrType)(v)
}

func (*deploymentConfigTrafficRoutingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigTrafficRoutingConfig)(nil)).Elem()
}

func (i *deploymentConfigTrafficRoutingConfigPtrType) ToDeploymentConfigTrafficRoutingConfigPtrOutput() DeploymentConfigTrafficRoutingConfigPtrOutput {
	return i.ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(context.Background())
}

func (i *deploymentConfigTrafficRoutingConfigPtrType) ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigTrafficRoutingConfigPtrOutput)
}

type DeploymentConfigTrafficRoutingConfigOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTrafficRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigTrafficRoutingConfig)(nil)).Elem()
}

func (o DeploymentConfigTrafficRoutingConfigOutput) ToDeploymentConfigTrafficRoutingConfigOutput() DeploymentConfigTrafficRoutingConfigOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigOutput) ToDeploymentConfigTrafficRoutingConfigOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigOutput) ToDeploymentConfigTrafficRoutingConfigPtrOutput() DeploymentConfigTrafficRoutingConfigPtrOutput {
	return o.ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(context.Background())
}

func (o DeploymentConfigTrafficRoutingConfigOutput) ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentConfigTrafficRoutingConfig) *DeploymentConfigTrafficRoutingConfig {
		return &v
	}).(DeploymentConfigTrafficRoutingConfigPtrOutput)
}

// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
func (o DeploymentConfigTrafficRoutingConfigOutput) TimeBasedCanary() DeploymentConfigTimeBasedCanaryPtrOutput {
	return o.ApplyT(func(v DeploymentConfigTrafficRoutingConfig) *DeploymentConfigTimeBasedCanary {
		return v.TimeBasedCanary
	}).(DeploymentConfigTimeBasedCanaryPtrOutput)
}

// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
func (o DeploymentConfigTrafficRoutingConfigOutput) TimeBasedLinear() DeploymentConfigTimeBasedLinearPtrOutput {
	return o.ApplyT(func(v DeploymentConfigTrafficRoutingConfig) *DeploymentConfigTimeBasedLinear {
		return v.TimeBasedLinear
	}).(DeploymentConfigTimeBasedLinearPtrOutput)
}

// The type of traffic shifting ( `TimeBasedCanary` or `TimeBasedLinear` ) used by a deployment configuration.
func (o DeploymentConfigTrafficRoutingConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentConfigTrafficRoutingConfig) string { return v.Type }).(pulumi.StringOutput)
}

type DeploymentConfigTrafficRoutingConfigPtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigTrafficRoutingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigTrafficRoutingConfig)(nil)).Elem()
}

func (o DeploymentConfigTrafficRoutingConfigPtrOutput) ToDeploymentConfigTrafficRoutingConfigPtrOutput() DeploymentConfigTrafficRoutingConfigPtrOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigPtrOutput) ToDeploymentConfigTrafficRoutingConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigTrafficRoutingConfigPtrOutput {
	return o
}

func (o DeploymentConfigTrafficRoutingConfigPtrOutput) Elem() DeploymentConfigTrafficRoutingConfigOutput {
	return o.ApplyT(func(v *DeploymentConfigTrafficRoutingConfig) DeploymentConfigTrafficRoutingConfig {
		if v != nil {
			return *v
		}
		var ret DeploymentConfigTrafficRoutingConfig
		return ret
	}).(DeploymentConfigTrafficRoutingConfigOutput)
}

// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
func (o DeploymentConfigTrafficRoutingConfigPtrOutput) TimeBasedCanary() DeploymentConfigTimeBasedCanaryPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigTrafficRoutingConfig) *DeploymentConfigTimeBasedCanary {
		if v == nil {
			return nil
		}
		return v.TimeBasedCanary
	}).(DeploymentConfigTimeBasedCanaryPtrOutput)
}

// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
func (o DeploymentConfigTrafficRoutingConfigPtrOutput) TimeBasedLinear() DeploymentConfigTimeBasedLinearPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigTrafficRoutingConfig) *DeploymentConfigTimeBasedLinear {
		if v == nil {
			return nil
		}
		return v.TimeBasedLinear
	}).(DeploymentConfigTimeBasedLinearPtrOutput)
}

// The type of traffic shifting ( `TimeBasedCanary` or `TimeBasedLinear` ) used by a deployment configuration.
func (o DeploymentConfigTrafficRoutingConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigTrafficRoutingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DeploymentConfigZonalConfig struct {
	// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the *first* Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. You might set this option if you want to allow extra bake time for the first Availability Zone. If you don't specify a value for `firstZoneMonitorDurationInSeconds` , then CodeDeploy uses the `monitorDurationInSeconds` value for the first Availability Zone.
	//
	// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
	FirstZoneMonitorDurationInSeconds *int `pulumi:"firstZoneMonitorDurationInSeconds"`
	// Information about the minimum number of healthy instances per Availability Zone.
	MinimumHealthyHostsPerZone *DeploymentConfigMinimumHealthyHostsPerZone `pulumi:"minimumHealthyHostsPerZone"`
	// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. Consider adding a monitor duration to give the deployment some time to prove itself (or 'bake') in one Availability Zone before it is released in the next zone. If you don't specify a `monitorDurationInSeconds` , CodeDeploy starts deploying to the next Availability Zone immediately.
	//
	// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
	MonitorDurationInSeconds *int `pulumi:"monitorDurationInSeconds"`
}

// DeploymentConfigZonalConfigInput is an input type that accepts DeploymentConfigZonalConfigArgs and DeploymentConfigZonalConfigOutput values.
// You can construct a concrete instance of `DeploymentConfigZonalConfigInput` via:
//
//	DeploymentConfigZonalConfigArgs{...}
type DeploymentConfigZonalConfigInput interface {
	pulumi.Input

	ToDeploymentConfigZonalConfigOutput() DeploymentConfigZonalConfigOutput
	ToDeploymentConfigZonalConfigOutputWithContext(context.Context) DeploymentConfigZonalConfigOutput
}

type DeploymentConfigZonalConfigArgs struct {
	// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the *first* Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. You might set this option if you want to allow extra bake time for the first Availability Zone. If you don't specify a value for `firstZoneMonitorDurationInSeconds` , then CodeDeploy uses the `monitorDurationInSeconds` value for the first Availability Zone.
	//
	// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
	FirstZoneMonitorDurationInSeconds pulumi.IntPtrInput `pulumi:"firstZoneMonitorDurationInSeconds"`
	// Information about the minimum number of healthy instances per Availability Zone.
	MinimumHealthyHostsPerZone DeploymentConfigMinimumHealthyHostsPerZonePtrInput `pulumi:"minimumHealthyHostsPerZone"`
	// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. Consider adding a monitor duration to give the deployment some time to prove itself (or 'bake') in one Availability Zone before it is released in the next zone. If you don't specify a `monitorDurationInSeconds` , CodeDeploy starts deploying to the next Availability Zone immediately.
	//
	// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
	MonitorDurationInSeconds pulumi.IntPtrInput `pulumi:"monitorDurationInSeconds"`
}

func (DeploymentConfigZonalConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigZonalConfig)(nil)).Elem()
}

func (i DeploymentConfigZonalConfigArgs) ToDeploymentConfigZonalConfigOutput() DeploymentConfigZonalConfigOutput {
	return i.ToDeploymentConfigZonalConfigOutputWithContext(context.Background())
}

func (i DeploymentConfigZonalConfigArgs) ToDeploymentConfigZonalConfigOutputWithContext(ctx context.Context) DeploymentConfigZonalConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigZonalConfigOutput)
}

func (i DeploymentConfigZonalConfigArgs) ToDeploymentConfigZonalConfigPtrOutput() DeploymentConfigZonalConfigPtrOutput {
	return i.ToDeploymentConfigZonalConfigPtrOutputWithContext(context.Background())
}

func (i DeploymentConfigZonalConfigArgs) ToDeploymentConfigZonalConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigZonalConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigZonalConfigOutput).ToDeploymentConfigZonalConfigPtrOutputWithContext(ctx)
}

// DeploymentConfigZonalConfigPtrInput is an input type that accepts DeploymentConfigZonalConfigArgs, DeploymentConfigZonalConfigPtr and DeploymentConfigZonalConfigPtrOutput values.
// You can construct a concrete instance of `DeploymentConfigZonalConfigPtrInput` via:
//
//	        DeploymentConfigZonalConfigArgs{...}
//
//	or:
//
//	        nil
type DeploymentConfigZonalConfigPtrInput interface {
	pulumi.Input

	ToDeploymentConfigZonalConfigPtrOutput() DeploymentConfigZonalConfigPtrOutput
	ToDeploymentConfigZonalConfigPtrOutputWithContext(context.Context) DeploymentConfigZonalConfigPtrOutput
}

type deploymentConfigZonalConfigPtrType DeploymentConfigZonalConfigArgs

func DeploymentConfigZonalConfigPtr(v *DeploymentConfigZonalConfigArgs) DeploymentConfigZonalConfigPtrInput {
	return (*deploymentConfigZonalConfigPtrType)(v)
}

func (*deploymentConfigZonalConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigZonalConfig)(nil)).Elem()
}

func (i *deploymentConfigZonalConfigPtrType) ToDeploymentConfigZonalConfigPtrOutput() DeploymentConfigZonalConfigPtrOutput {
	return i.ToDeploymentConfigZonalConfigPtrOutputWithContext(context.Background())
}

func (i *deploymentConfigZonalConfigPtrType) ToDeploymentConfigZonalConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigZonalConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigZonalConfigPtrOutput)
}

type DeploymentConfigZonalConfigOutput struct{ *pulumi.OutputState }

func (DeploymentConfigZonalConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigZonalConfig)(nil)).Elem()
}

func (o DeploymentConfigZonalConfigOutput) ToDeploymentConfigZonalConfigOutput() DeploymentConfigZonalConfigOutput {
	return o
}

func (o DeploymentConfigZonalConfigOutput) ToDeploymentConfigZonalConfigOutputWithContext(ctx context.Context) DeploymentConfigZonalConfigOutput {
	return o
}

func (o DeploymentConfigZonalConfigOutput) ToDeploymentConfigZonalConfigPtrOutput() DeploymentConfigZonalConfigPtrOutput {
	return o.ToDeploymentConfigZonalConfigPtrOutputWithContext(context.Background())
}

func (o DeploymentConfigZonalConfigOutput) ToDeploymentConfigZonalConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigZonalConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentConfigZonalConfig) *DeploymentConfigZonalConfig {
		return &v
	}).(DeploymentConfigZonalConfigPtrOutput)
}

// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the *first* Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. You might set this option if you want to allow extra bake time for the first Availability Zone. If you don't specify a value for `firstZoneMonitorDurationInSeconds` , then CodeDeploy uses the `monitorDurationInSeconds` value for the first Availability Zone.
//
// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
func (o DeploymentConfigZonalConfigOutput) FirstZoneMonitorDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentConfigZonalConfig) *int { return v.FirstZoneMonitorDurationInSeconds }).(pulumi.IntPtrOutput)
}

// Information about the minimum number of healthy instances per Availability Zone.
func (o DeploymentConfigZonalConfigOutput) MinimumHealthyHostsPerZone() DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return o.ApplyT(func(v DeploymentConfigZonalConfig) *DeploymentConfigMinimumHealthyHostsPerZone {
		return v.MinimumHealthyHostsPerZone
	}).(DeploymentConfigMinimumHealthyHostsPerZonePtrOutput)
}

// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. Consider adding a monitor duration to give the deployment some time to prove itself (or 'bake') in one Availability Zone before it is released in the next zone. If you don't specify a `monitorDurationInSeconds` , CodeDeploy starts deploying to the next Availability Zone immediately.
//
// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
func (o DeploymentConfigZonalConfigOutput) MonitorDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentConfigZonalConfig) *int { return v.MonitorDurationInSeconds }).(pulumi.IntPtrOutput)
}

type DeploymentConfigZonalConfigPtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigZonalConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigZonalConfig)(nil)).Elem()
}

func (o DeploymentConfigZonalConfigPtrOutput) ToDeploymentConfigZonalConfigPtrOutput() DeploymentConfigZonalConfigPtrOutput {
	return o
}

func (o DeploymentConfigZonalConfigPtrOutput) ToDeploymentConfigZonalConfigPtrOutputWithContext(ctx context.Context) DeploymentConfigZonalConfigPtrOutput {
	return o
}

func (o DeploymentConfigZonalConfigPtrOutput) Elem() DeploymentConfigZonalConfigOutput {
	return o.ApplyT(func(v *DeploymentConfigZonalConfig) DeploymentConfigZonalConfig {
		if v != nil {
			return *v
		}
		var ret DeploymentConfigZonalConfig
		return ret
	}).(DeploymentConfigZonalConfigOutput)
}

// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the *first* Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. You might set this option if you want to allow extra bake time for the first Availability Zone. If you don't specify a value for `firstZoneMonitorDurationInSeconds` , then CodeDeploy uses the `monitorDurationInSeconds` value for the first Availability Zone.
//
// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
func (o DeploymentConfigZonalConfigPtrOutput) FirstZoneMonitorDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigZonalConfig) *int {
		if v == nil {
			return nil
		}
		return v.FirstZoneMonitorDurationInSeconds
	}).(pulumi.IntPtrOutput)
}

// Information about the minimum number of healthy instances per Availability Zone.
func (o DeploymentConfigZonalConfigPtrOutput) MinimumHealthyHostsPerZone() DeploymentConfigMinimumHealthyHostsPerZonePtrOutput {
	return o.ApplyT(func(v *DeploymentConfigZonalConfig) *DeploymentConfigMinimumHealthyHostsPerZone {
		if v == nil {
			return nil
		}
		return v.MinimumHealthyHostsPerZone
	}).(DeploymentConfigMinimumHealthyHostsPerZonePtrOutput)
}

// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. Consider adding a monitor duration to give the deployment some time to prove itself (or 'bake') in one Availability Zone before it is released in the next zone. If you don't specify a `monitorDurationInSeconds` , CodeDeploy starts deploying to the next Availability Zone immediately.
//
// For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
func (o DeploymentConfigZonalConfigPtrOutput) MonitorDurationInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentConfigZonalConfig) *int {
		if v == nil {
			return nil
		}
		return v.MonitorDurationInSeconds
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigMinimumHealthyHostsInput)(nil)).Elem(), DeploymentConfigMinimumHealthyHostsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigMinimumHealthyHostsPtrInput)(nil)).Elem(), DeploymentConfigMinimumHealthyHostsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigMinimumHealthyHostsPerZoneInput)(nil)).Elem(), DeploymentConfigMinimumHealthyHostsPerZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigMinimumHealthyHostsPerZonePtrInput)(nil)).Elem(), DeploymentConfigMinimumHealthyHostsPerZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigTimeBasedCanaryInput)(nil)).Elem(), DeploymentConfigTimeBasedCanaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigTimeBasedCanaryPtrInput)(nil)).Elem(), DeploymentConfigTimeBasedCanaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigTimeBasedLinearInput)(nil)).Elem(), DeploymentConfigTimeBasedLinearArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigTimeBasedLinearPtrInput)(nil)).Elem(), DeploymentConfigTimeBasedLinearArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigTrafficRoutingConfigInput)(nil)).Elem(), DeploymentConfigTrafficRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigTrafficRoutingConfigPtrInput)(nil)).Elem(), DeploymentConfigTrafficRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigZonalConfigInput)(nil)).Elem(), DeploymentConfigZonalConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentConfigZonalConfigPtrInput)(nil)).Elem(), DeploymentConfigZonalConfigArgs{})
	pulumi.RegisterOutputType(DeploymentConfigMinimumHealthyHostsOutput{})
	pulumi.RegisterOutputType(DeploymentConfigMinimumHealthyHostsPtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigMinimumHealthyHostsPerZoneOutput{})
	pulumi.RegisterOutputType(DeploymentConfigMinimumHealthyHostsPerZonePtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTimeBasedCanaryOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTimeBasedCanaryPtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTimeBasedLinearOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTimeBasedLinearPtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTrafficRoutingConfigOutput{})
	pulumi.RegisterOutputType(DeploymentConfigTrafficRoutingConfigPtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigZonalConfigOutput{})
	pulumi.RegisterOutputType(DeploymentConfigZonalConfigPtrOutput{})
}
