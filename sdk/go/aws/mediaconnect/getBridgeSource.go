// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource schema for AWS::MediaConnect::BridgeSource
func LookupBridgeSource(ctx *pulumi.Context, args *LookupBridgeSourceArgs, opts ...pulumi.InvokeOption) (*LookupBridgeSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBridgeSourceResult
	err := ctx.Invoke("aws-native:mediaconnect:getBridgeSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBridgeSourceArgs struct {
	// The Amazon Resource Number (ARN) of the bridge.
	BridgeArn string `pulumi:"bridgeArn"`
	// The name of the source.
	Name string `pulumi:"name"`
}

type LookupBridgeSourceResult struct {
	FlowSource    *BridgeSourceBridgeFlowSource    `pulumi:"flowSource"`
	NetworkSource *BridgeSourceBridgeNetworkSource `pulumi:"networkSource"`
}

func LookupBridgeSourceOutput(ctx *pulumi.Context, args LookupBridgeSourceOutputArgs, opts ...pulumi.InvokeOption) LookupBridgeSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBridgeSourceResult, error) {
			args := v.(LookupBridgeSourceArgs)
			r, err := LookupBridgeSource(ctx, &args, opts...)
			var s LookupBridgeSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBridgeSourceResultOutput)
}

type LookupBridgeSourceOutputArgs struct {
	// The Amazon Resource Number (ARN) of the bridge.
	BridgeArn pulumi.StringInput `pulumi:"bridgeArn"`
	// The name of the source.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupBridgeSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBridgeSourceArgs)(nil)).Elem()
}

type LookupBridgeSourceResultOutput struct{ *pulumi.OutputState }

func (LookupBridgeSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBridgeSourceResult)(nil)).Elem()
}

func (o LookupBridgeSourceResultOutput) ToLookupBridgeSourceResultOutput() LookupBridgeSourceResultOutput {
	return o
}

func (o LookupBridgeSourceResultOutput) ToLookupBridgeSourceResultOutputWithContext(ctx context.Context) LookupBridgeSourceResultOutput {
	return o
}

func (o LookupBridgeSourceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupBridgeSourceResult] {
	return pulumix.Output[LookupBridgeSourceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupBridgeSourceResultOutput) FlowSource() BridgeSourceBridgeFlowSourcePtrOutput {
	return o.ApplyT(func(v LookupBridgeSourceResult) *BridgeSourceBridgeFlowSource { return v.FlowSource }).(BridgeSourceBridgeFlowSourcePtrOutput)
}

func (o LookupBridgeSourceResultOutput) NetworkSource() BridgeSourceBridgeNetworkSourcePtrOutput {
	return o.ApplyT(func(v LookupBridgeSourceResult) *BridgeSourceBridgeNetworkSource { return v.NetworkSource }).(BridgeSourceBridgeNetworkSourcePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBridgeSourceResultOutput{})
}
