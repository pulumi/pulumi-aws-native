// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type BridgeEgressGatewayBridge struct {
	// The maximum expected bitrate of the egress bridge.
	MaxBitrate int `pulumi:"maxBitrate"`
}

// BridgeEgressGatewayBridgeInput is an input type that accepts BridgeEgressGatewayBridgeArgs and BridgeEgressGatewayBridgeOutput values.
// You can construct a concrete instance of `BridgeEgressGatewayBridgeInput` via:
//
//	BridgeEgressGatewayBridgeArgs{...}
type BridgeEgressGatewayBridgeInput interface {
	pulumi.Input

	ToBridgeEgressGatewayBridgeOutput() BridgeEgressGatewayBridgeOutput
	ToBridgeEgressGatewayBridgeOutputWithContext(context.Context) BridgeEgressGatewayBridgeOutput
}

type BridgeEgressGatewayBridgeArgs struct {
	// The maximum expected bitrate of the egress bridge.
	MaxBitrate pulumi.IntInput `pulumi:"maxBitrate"`
}

func (BridgeEgressGatewayBridgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeEgressGatewayBridge)(nil)).Elem()
}

func (i BridgeEgressGatewayBridgeArgs) ToBridgeEgressGatewayBridgeOutput() BridgeEgressGatewayBridgeOutput {
	return i.ToBridgeEgressGatewayBridgeOutputWithContext(context.Background())
}

func (i BridgeEgressGatewayBridgeArgs) ToBridgeEgressGatewayBridgeOutputWithContext(ctx context.Context) BridgeEgressGatewayBridgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeEgressGatewayBridgeOutput)
}

func (i BridgeEgressGatewayBridgeArgs) ToBridgeEgressGatewayBridgePtrOutput() BridgeEgressGatewayBridgePtrOutput {
	return i.ToBridgeEgressGatewayBridgePtrOutputWithContext(context.Background())
}

func (i BridgeEgressGatewayBridgeArgs) ToBridgeEgressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeEgressGatewayBridgePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeEgressGatewayBridgeOutput).ToBridgeEgressGatewayBridgePtrOutputWithContext(ctx)
}

// BridgeEgressGatewayBridgePtrInput is an input type that accepts BridgeEgressGatewayBridgeArgs, BridgeEgressGatewayBridgePtr and BridgeEgressGatewayBridgePtrOutput values.
// You can construct a concrete instance of `BridgeEgressGatewayBridgePtrInput` via:
//
//	        BridgeEgressGatewayBridgeArgs{...}
//
//	or:
//
//	        nil
type BridgeEgressGatewayBridgePtrInput interface {
	pulumi.Input

	ToBridgeEgressGatewayBridgePtrOutput() BridgeEgressGatewayBridgePtrOutput
	ToBridgeEgressGatewayBridgePtrOutputWithContext(context.Context) BridgeEgressGatewayBridgePtrOutput
}

type bridgeEgressGatewayBridgePtrType BridgeEgressGatewayBridgeArgs

func BridgeEgressGatewayBridgePtr(v *BridgeEgressGatewayBridgeArgs) BridgeEgressGatewayBridgePtrInput {
	return (*bridgeEgressGatewayBridgePtrType)(v)
}

func (*bridgeEgressGatewayBridgePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeEgressGatewayBridge)(nil)).Elem()
}

func (i *bridgeEgressGatewayBridgePtrType) ToBridgeEgressGatewayBridgePtrOutput() BridgeEgressGatewayBridgePtrOutput {
	return i.ToBridgeEgressGatewayBridgePtrOutputWithContext(context.Background())
}

func (i *bridgeEgressGatewayBridgePtrType) ToBridgeEgressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeEgressGatewayBridgePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeEgressGatewayBridgePtrOutput)
}

type BridgeEgressGatewayBridgeOutput struct{ *pulumi.OutputState }

func (BridgeEgressGatewayBridgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeEgressGatewayBridge)(nil)).Elem()
}

func (o BridgeEgressGatewayBridgeOutput) ToBridgeEgressGatewayBridgeOutput() BridgeEgressGatewayBridgeOutput {
	return o
}

func (o BridgeEgressGatewayBridgeOutput) ToBridgeEgressGatewayBridgeOutputWithContext(ctx context.Context) BridgeEgressGatewayBridgeOutput {
	return o
}

func (o BridgeEgressGatewayBridgeOutput) ToBridgeEgressGatewayBridgePtrOutput() BridgeEgressGatewayBridgePtrOutput {
	return o.ToBridgeEgressGatewayBridgePtrOutputWithContext(context.Background())
}

func (o BridgeEgressGatewayBridgeOutput) ToBridgeEgressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeEgressGatewayBridgePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeEgressGatewayBridge) *BridgeEgressGatewayBridge {
		return &v
	}).(BridgeEgressGatewayBridgePtrOutput)
}

// The maximum expected bitrate of the egress bridge.
func (o BridgeEgressGatewayBridgeOutput) MaxBitrate() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeEgressGatewayBridge) int { return v.MaxBitrate }).(pulumi.IntOutput)
}

type BridgeEgressGatewayBridgePtrOutput struct{ *pulumi.OutputState }

func (BridgeEgressGatewayBridgePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeEgressGatewayBridge)(nil)).Elem()
}

func (o BridgeEgressGatewayBridgePtrOutput) ToBridgeEgressGatewayBridgePtrOutput() BridgeEgressGatewayBridgePtrOutput {
	return o
}

func (o BridgeEgressGatewayBridgePtrOutput) ToBridgeEgressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeEgressGatewayBridgePtrOutput {
	return o
}

func (o BridgeEgressGatewayBridgePtrOutput) Elem() BridgeEgressGatewayBridgeOutput {
	return o.ApplyT(func(v *BridgeEgressGatewayBridge) BridgeEgressGatewayBridge {
		if v != nil {
			return *v
		}
		var ret BridgeEgressGatewayBridge
		return ret
	}).(BridgeEgressGatewayBridgeOutput)
}

// The maximum expected bitrate of the egress bridge.
func (o BridgeEgressGatewayBridgePtrOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeEgressGatewayBridge) *int {
		if v == nil {
			return nil
		}
		return &v.MaxBitrate
	}).(pulumi.IntPtrOutput)
}

// The settings for source failover.
type BridgeFailoverConfig struct {
	// The type of failover you choose for this flow. FAILOVER allows switching between different streams.
	FailoverMode BridgeFailoverModeEnum `pulumi:"failoverMode"`
	// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
	SourcePriority *BridgeSourcePriority `pulumi:"sourcePriority"`
	// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
	State *BridgeFailoverConfigStateEnum `pulumi:"state"`
}

// BridgeFailoverConfigInput is an input type that accepts BridgeFailoverConfigArgs and BridgeFailoverConfigOutput values.
// You can construct a concrete instance of `BridgeFailoverConfigInput` via:
//
//	BridgeFailoverConfigArgs{...}
type BridgeFailoverConfigInput interface {
	pulumi.Input

	ToBridgeFailoverConfigOutput() BridgeFailoverConfigOutput
	ToBridgeFailoverConfigOutputWithContext(context.Context) BridgeFailoverConfigOutput
}

// The settings for source failover.
type BridgeFailoverConfigArgs struct {
	// The type of failover you choose for this flow. FAILOVER allows switching between different streams.
	FailoverMode BridgeFailoverModeEnumInput `pulumi:"failoverMode"`
	// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
	SourcePriority BridgeSourcePriorityPtrInput `pulumi:"sourcePriority"`
	// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
	State BridgeFailoverConfigStateEnumPtrInput `pulumi:"state"`
}

func (BridgeFailoverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFailoverConfig)(nil)).Elem()
}

func (i BridgeFailoverConfigArgs) ToBridgeFailoverConfigOutput() BridgeFailoverConfigOutput {
	return i.ToBridgeFailoverConfigOutputWithContext(context.Background())
}

func (i BridgeFailoverConfigArgs) ToBridgeFailoverConfigOutputWithContext(ctx context.Context) BridgeFailoverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeFailoverConfigOutput)
}

func (i BridgeFailoverConfigArgs) ToBridgeFailoverConfigPtrOutput() BridgeFailoverConfigPtrOutput {
	return i.ToBridgeFailoverConfigPtrOutputWithContext(context.Background())
}

func (i BridgeFailoverConfigArgs) ToBridgeFailoverConfigPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeFailoverConfigOutput).ToBridgeFailoverConfigPtrOutputWithContext(ctx)
}

// BridgeFailoverConfigPtrInput is an input type that accepts BridgeFailoverConfigArgs, BridgeFailoverConfigPtr and BridgeFailoverConfigPtrOutput values.
// You can construct a concrete instance of `BridgeFailoverConfigPtrInput` via:
//
//	        BridgeFailoverConfigArgs{...}
//
//	or:
//
//	        nil
type BridgeFailoverConfigPtrInput interface {
	pulumi.Input

	ToBridgeFailoverConfigPtrOutput() BridgeFailoverConfigPtrOutput
	ToBridgeFailoverConfigPtrOutputWithContext(context.Context) BridgeFailoverConfigPtrOutput
}

type bridgeFailoverConfigPtrType BridgeFailoverConfigArgs

func BridgeFailoverConfigPtr(v *BridgeFailoverConfigArgs) BridgeFailoverConfigPtrInput {
	return (*bridgeFailoverConfigPtrType)(v)
}

func (*bridgeFailoverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeFailoverConfig)(nil)).Elem()
}

func (i *bridgeFailoverConfigPtrType) ToBridgeFailoverConfigPtrOutput() BridgeFailoverConfigPtrOutput {
	return i.ToBridgeFailoverConfigPtrOutputWithContext(context.Background())
}

func (i *bridgeFailoverConfigPtrType) ToBridgeFailoverConfigPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeFailoverConfigPtrOutput)
}

// The settings for source failover.
type BridgeFailoverConfigOutput struct{ *pulumi.OutputState }

func (BridgeFailoverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFailoverConfig)(nil)).Elem()
}

func (o BridgeFailoverConfigOutput) ToBridgeFailoverConfigOutput() BridgeFailoverConfigOutput {
	return o
}

func (o BridgeFailoverConfigOutput) ToBridgeFailoverConfigOutputWithContext(ctx context.Context) BridgeFailoverConfigOutput {
	return o
}

func (o BridgeFailoverConfigOutput) ToBridgeFailoverConfigPtrOutput() BridgeFailoverConfigPtrOutput {
	return o.ToBridgeFailoverConfigPtrOutputWithContext(context.Background())
}

func (o BridgeFailoverConfigOutput) ToBridgeFailoverConfigPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeFailoverConfig) *BridgeFailoverConfig {
		return &v
	}).(BridgeFailoverConfigPtrOutput)
}

// The type of failover you choose for this flow. FAILOVER allows switching between different streams.
func (o BridgeFailoverConfigOutput) FailoverMode() BridgeFailoverModeEnumOutput {
	return o.ApplyT(func(v BridgeFailoverConfig) BridgeFailoverModeEnum { return v.FailoverMode }).(BridgeFailoverModeEnumOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
func (o BridgeFailoverConfigOutput) SourcePriority() BridgeSourcePriorityPtrOutput {
	return o.ApplyT(func(v BridgeFailoverConfig) *BridgeSourcePriority { return v.SourcePriority }).(BridgeSourcePriorityPtrOutput)
}

// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
func (o BridgeFailoverConfigOutput) State() BridgeFailoverConfigStateEnumPtrOutput {
	return o.ApplyT(func(v BridgeFailoverConfig) *BridgeFailoverConfigStateEnum { return v.State }).(BridgeFailoverConfigStateEnumPtrOutput)
}

type BridgeFailoverConfigPtrOutput struct{ *pulumi.OutputState }

func (BridgeFailoverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeFailoverConfig)(nil)).Elem()
}

func (o BridgeFailoverConfigPtrOutput) ToBridgeFailoverConfigPtrOutput() BridgeFailoverConfigPtrOutput {
	return o
}

func (o BridgeFailoverConfigPtrOutput) ToBridgeFailoverConfigPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigPtrOutput {
	return o
}

func (o BridgeFailoverConfigPtrOutput) Elem() BridgeFailoverConfigOutput {
	return o.ApplyT(func(v *BridgeFailoverConfig) BridgeFailoverConfig {
		if v != nil {
			return *v
		}
		var ret BridgeFailoverConfig
		return ret
	}).(BridgeFailoverConfigOutput)
}

// The type of failover you choose for this flow. FAILOVER allows switching between different streams.
func (o BridgeFailoverConfigPtrOutput) FailoverMode() BridgeFailoverModeEnumPtrOutput {
	return o.ApplyT(func(v *BridgeFailoverConfig) *BridgeFailoverModeEnum {
		if v == nil {
			return nil
		}
		return &v.FailoverMode
	}).(BridgeFailoverModeEnumPtrOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
func (o BridgeFailoverConfigPtrOutput) SourcePriority() BridgeSourcePriorityPtrOutput {
	return o.ApplyT(func(v *BridgeFailoverConfig) *BridgeSourcePriority {
		if v == nil {
			return nil
		}
		return v.SourcePriority
	}).(BridgeSourcePriorityPtrOutput)
}

// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
func (o BridgeFailoverConfigPtrOutput) State() BridgeFailoverConfigStateEnumPtrOutput {
	return o.ApplyT(func(v *BridgeFailoverConfig) *BridgeFailoverConfigStateEnum {
		if v == nil {
			return nil
		}
		return v.State
	}).(BridgeFailoverConfigStateEnumPtrOutput)
}

// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
type BridgeFlowSource struct {
	// The ARN of the cloud flow used as a source of this bridge.
	FlowArn string `pulumi:"flowArn"`
	// The name of the VPC interface attachment to use for this source.
	FlowVpcInterfaceAttachment *BridgeVpcInterfaceAttachment `pulumi:"flowVpcInterfaceAttachment"`
	// The name of the flow source.
	Name string `pulumi:"name"`
}

// BridgeFlowSourceInput is an input type that accepts BridgeFlowSourceArgs and BridgeFlowSourceOutput values.
// You can construct a concrete instance of `BridgeFlowSourceInput` via:
//
//	BridgeFlowSourceArgs{...}
type BridgeFlowSourceInput interface {
	pulumi.Input

	ToBridgeFlowSourceOutput() BridgeFlowSourceOutput
	ToBridgeFlowSourceOutputWithContext(context.Context) BridgeFlowSourceOutput
}

// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
type BridgeFlowSourceArgs struct {
	// The ARN of the cloud flow used as a source of this bridge.
	FlowArn pulumi.StringInput `pulumi:"flowArn"`
	// The name of the VPC interface attachment to use for this source.
	FlowVpcInterfaceAttachment BridgeVpcInterfaceAttachmentPtrInput `pulumi:"flowVpcInterfaceAttachment"`
	// The name of the flow source.
	Name pulumi.StringInput `pulumi:"name"`
}

func (BridgeFlowSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFlowSource)(nil)).Elem()
}

func (i BridgeFlowSourceArgs) ToBridgeFlowSourceOutput() BridgeFlowSourceOutput {
	return i.ToBridgeFlowSourceOutputWithContext(context.Background())
}

func (i BridgeFlowSourceArgs) ToBridgeFlowSourceOutputWithContext(ctx context.Context) BridgeFlowSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeFlowSourceOutput)
}

func (i BridgeFlowSourceArgs) ToBridgeFlowSourcePtrOutput() BridgeFlowSourcePtrOutput {
	return i.ToBridgeFlowSourcePtrOutputWithContext(context.Background())
}

func (i BridgeFlowSourceArgs) ToBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeFlowSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeFlowSourceOutput).ToBridgeFlowSourcePtrOutputWithContext(ctx)
}

// BridgeFlowSourcePtrInput is an input type that accepts BridgeFlowSourceArgs, BridgeFlowSourcePtr and BridgeFlowSourcePtrOutput values.
// You can construct a concrete instance of `BridgeFlowSourcePtrInput` via:
//
//	        BridgeFlowSourceArgs{...}
//
//	or:
//
//	        nil
type BridgeFlowSourcePtrInput interface {
	pulumi.Input

	ToBridgeFlowSourcePtrOutput() BridgeFlowSourcePtrOutput
	ToBridgeFlowSourcePtrOutputWithContext(context.Context) BridgeFlowSourcePtrOutput
}

type bridgeFlowSourcePtrType BridgeFlowSourceArgs

func BridgeFlowSourcePtr(v *BridgeFlowSourceArgs) BridgeFlowSourcePtrInput {
	return (*bridgeFlowSourcePtrType)(v)
}

func (*bridgeFlowSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeFlowSource)(nil)).Elem()
}

func (i *bridgeFlowSourcePtrType) ToBridgeFlowSourcePtrOutput() BridgeFlowSourcePtrOutput {
	return i.ToBridgeFlowSourcePtrOutputWithContext(context.Background())
}

func (i *bridgeFlowSourcePtrType) ToBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeFlowSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeFlowSourcePtrOutput)
}

// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
type BridgeFlowSourceOutput struct{ *pulumi.OutputState }

func (BridgeFlowSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFlowSource)(nil)).Elem()
}

func (o BridgeFlowSourceOutput) ToBridgeFlowSourceOutput() BridgeFlowSourceOutput {
	return o
}

func (o BridgeFlowSourceOutput) ToBridgeFlowSourceOutputWithContext(ctx context.Context) BridgeFlowSourceOutput {
	return o
}

func (o BridgeFlowSourceOutput) ToBridgeFlowSourcePtrOutput() BridgeFlowSourcePtrOutput {
	return o.ToBridgeFlowSourcePtrOutputWithContext(context.Background())
}

func (o BridgeFlowSourceOutput) ToBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeFlowSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeFlowSource) *BridgeFlowSource {
		return &v
	}).(BridgeFlowSourcePtrOutput)
}

// The ARN of the cloud flow used as a source of this bridge.
func (o BridgeFlowSourceOutput) FlowArn() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeFlowSource) string { return v.FlowArn }).(pulumi.StringOutput)
}

// The name of the VPC interface attachment to use for this source.
func (o BridgeFlowSourceOutput) FlowVpcInterfaceAttachment() BridgeVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v BridgeFlowSource) *BridgeVpcInterfaceAttachment { return v.FlowVpcInterfaceAttachment }).(BridgeVpcInterfaceAttachmentPtrOutput)
}

// The name of the flow source.
func (o BridgeFlowSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeFlowSource) string { return v.Name }).(pulumi.StringOutput)
}

type BridgeFlowSourcePtrOutput struct{ *pulumi.OutputState }

func (BridgeFlowSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeFlowSource)(nil)).Elem()
}

func (o BridgeFlowSourcePtrOutput) ToBridgeFlowSourcePtrOutput() BridgeFlowSourcePtrOutput {
	return o
}

func (o BridgeFlowSourcePtrOutput) ToBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeFlowSourcePtrOutput {
	return o
}

func (o BridgeFlowSourcePtrOutput) Elem() BridgeFlowSourceOutput {
	return o.ApplyT(func(v *BridgeFlowSource) BridgeFlowSource {
		if v != nil {
			return *v
		}
		var ret BridgeFlowSource
		return ret
	}).(BridgeFlowSourceOutput)
}

// The ARN of the cloud flow used as a source of this bridge.
func (o BridgeFlowSourcePtrOutput) FlowArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeFlowSource) *string {
		if v == nil {
			return nil
		}
		return &v.FlowArn
	}).(pulumi.StringPtrOutput)
}

// The name of the VPC interface attachment to use for this source.
func (o BridgeFlowSourcePtrOutput) FlowVpcInterfaceAttachment() BridgeVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v *BridgeFlowSource) *BridgeVpcInterfaceAttachment {
		if v == nil {
			return nil
		}
		return v.FlowVpcInterfaceAttachment
	}).(BridgeVpcInterfaceAttachmentPtrOutput)
}

// The name of the flow source.
func (o BridgeFlowSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeFlowSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type BridgeIngressGatewayBridge struct {
	// The maximum expected bitrate of the ingress bridge.
	MaxBitrate int `pulumi:"maxBitrate"`
	// The maximum number of outputs on the ingress bridge.
	MaxOutputs int `pulumi:"maxOutputs"`
}

// BridgeIngressGatewayBridgeInput is an input type that accepts BridgeIngressGatewayBridgeArgs and BridgeIngressGatewayBridgeOutput values.
// You can construct a concrete instance of `BridgeIngressGatewayBridgeInput` via:
//
//	BridgeIngressGatewayBridgeArgs{...}
type BridgeIngressGatewayBridgeInput interface {
	pulumi.Input

	ToBridgeIngressGatewayBridgeOutput() BridgeIngressGatewayBridgeOutput
	ToBridgeIngressGatewayBridgeOutputWithContext(context.Context) BridgeIngressGatewayBridgeOutput
}

type BridgeIngressGatewayBridgeArgs struct {
	// The maximum expected bitrate of the ingress bridge.
	MaxBitrate pulumi.IntInput `pulumi:"maxBitrate"`
	// The maximum number of outputs on the ingress bridge.
	MaxOutputs pulumi.IntInput `pulumi:"maxOutputs"`
}

func (BridgeIngressGatewayBridgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeIngressGatewayBridge)(nil)).Elem()
}

func (i BridgeIngressGatewayBridgeArgs) ToBridgeIngressGatewayBridgeOutput() BridgeIngressGatewayBridgeOutput {
	return i.ToBridgeIngressGatewayBridgeOutputWithContext(context.Background())
}

func (i BridgeIngressGatewayBridgeArgs) ToBridgeIngressGatewayBridgeOutputWithContext(ctx context.Context) BridgeIngressGatewayBridgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeIngressGatewayBridgeOutput)
}

func (i BridgeIngressGatewayBridgeArgs) ToBridgeIngressGatewayBridgePtrOutput() BridgeIngressGatewayBridgePtrOutput {
	return i.ToBridgeIngressGatewayBridgePtrOutputWithContext(context.Background())
}

func (i BridgeIngressGatewayBridgeArgs) ToBridgeIngressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeIngressGatewayBridgePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeIngressGatewayBridgeOutput).ToBridgeIngressGatewayBridgePtrOutputWithContext(ctx)
}

// BridgeIngressGatewayBridgePtrInput is an input type that accepts BridgeIngressGatewayBridgeArgs, BridgeIngressGatewayBridgePtr and BridgeIngressGatewayBridgePtrOutput values.
// You can construct a concrete instance of `BridgeIngressGatewayBridgePtrInput` via:
//
//	        BridgeIngressGatewayBridgeArgs{...}
//
//	or:
//
//	        nil
type BridgeIngressGatewayBridgePtrInput interface {
	pulumi.Input

	ToBridgeIngressGatewayBridgePtrOutput() BridgeIngressGatewayBridgePtrOutput
	ToBridgeIngressGatewayBridgePtrOutputWithContext(context.Context) BridgeIngressGatewayBridgePtrOutput
}

type bridgeIngressGatewayBridgePtrType BridgeIngressGatewayBridgeArgs

func BridgeIngressGatewayBridgePtr(v *BridgeIngressGatewayBridgeArgs) BridgeIngressGatewayBridgePtrInput {
	return (*bridgeIngressGatewayBridgePtrType)(v)
}

func (*bridgeIngressGatewayBridgePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeIngressGatewayBridge)(nil)).Elem()
}

func (i *bridgeIngressGatewayBridgePtrType) ToBridgeIngressGatewayBridgePtrOutput() BridgeIngressGatewayBridgePtrOutput {
	return i.ToBridgeIngressGatewayBridgePtrOutputWithContext(context.Background())
}

func (i *bridgeIngressGatewayBridgePtrType) ToBridgeIngressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeIngressGatewayBridgePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeIngressGatewayBridgePtrOutput)
}

type BridgeIngressGatewayBridgeOutput struct{ *pulumi.OutputState }

func (BridgeIngressGatewayBridgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeIngressGatewayBridge)(nil)).Elem()
}

func (o BridgeIngressGatewayBridgeOutput) ToBridgeIngressGatewayBridgeOutput() BridgeIngressGatewayBridgeOutput {
	return o
}

func (o BridgeIngressGatewayBridgeOutput) ToBridgeIngressGatewayBridgeOutputWithContext(ctx context.Context) BridgeIngressGatewayBridgeOutput {
	return o
}

func (o BridgeIngressGatewayBridgeOutput) ToBridgeIngressGatewayBridgePtrOutput() BridgeIngressGatewayBridgePtrOutput {
	return o.ToBridgeIngressGatewayBridgePtrOutputWithContext(context.Background())
}

func (o BridgeIngressGatewayBridgeOutput) ToBridgeIngressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeIngressGatewayBridgePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeIngressGatewayBridge) *BridgeIngressGatewayBridge {
		return &v
	}).(BridgeIngressGatewayBridgePtrOutput)
}

// The maximum expected bitrate of the ingress bridge.
func (o BridgeIngressGatewayBridgeOutput) MaxBitrate() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeIngressGatewayBridge) int { return v.MaxBitrate }).(pulumi.IntOutput)
}

// The maximum number of outputs on the ingress bridge.
func (o BridgeIngressGatewayBridgeOutput) MaxOutputs() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeIngressGatewayBridge) int { return v.MaxOutputs }).(pulumi.IntOutput)
}

type BridgeIngressGatewayBridgePtrOutput struct{ *pulumi.OutputState }

func (BridgeIngressGatewayBridgePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeIngressGatewayBridge)(nil)).Elem()
}

func (o BridgeIngressGatewayBridgePtrOutput) ToBridgeIngressGatewayBridgePtrOutput() BridgeIngressGatewayBridgePtrOutput {
	return o
}

func (o BridgeIngressGatewayBridgePtrOutput) ToBridgeIngressGatewayBridgePtrOutputWithContext(ctx context.Context) BridgeIngressGatewayBridgePtrOutput {
	return o
}

func (o BridgeIngressGatewayBridgePtrOutput) Elem() BridgeIngressGatewayBridgeOutput {
	return o.ApplyT(func(v *BridgeIngressGatewayBridge) BridgeIngressGatewayBridge {
		if v != nil {
			return *v
		}
		var ret BridgeIngressGatewayBridge
		return ret
	}).(BridgeIngressGatewayBridgeOutput)
}

// The maximum expected bitrate of the ingress bridge.
func (o BridgeIngressGatewayBridgePtrOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeIngressGatewayBridge) *int {
		if v == nil {
			return nil
		}
		return &v.MaxBitrate
	}).(pulumi.IntPtrOutput)
}

// The maximum number of outputs on the ingress bridge.
func (o BridgeIngressGatewayBridgePtrOutput) MaxOutputs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeIngressGatewayBridge) *int {
		if v == nil {
			return nil
		}
		return &v.MaxOutputs
	}).(pulumi.IntPtrOutput)
}

// The output of the bridge. A network output is delivered to your premises.
type BridgeNetworkOutput struct {
	// The network output IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// The network output name.
	Name string `pulumi:"name"`
	// The network output's gateway network name.
	NetworkName string `pulumi:"networkName"`
	// The network output port.
	Port int `pulumi:"port"`
	// The network output protocol.
	Protocol BridgeProtocolEnum `pulumi:"protocol"`
	// The network output TTL.
	Ttl int `pulumi:"ttl"`
}

// BridgeNetworkOutputInput is an input type that accepts BridgeNetworkOutputArgs and BridgeNetworkOutputOutput values.
// You can construct a concrete instance of `BridgeNetworkOutputInput` via:
//
//	BridgeNetworkOutputArgs{...}
type BridgeNetworkOutputInput interface {
	pulumi.Input

	ToBridgeNetworkOutputOutput() BridgeNetworkOutputOutput
	ToBridgeNetworkOutputOutputWithContext(context.Context) BridgeNetworkOutputOutput
}

// The output of the bridge. A network output is delivered to your premises.
type BridgeNetworkOutputArgs struct {
	// The network output IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The network output name.
	Name pulumi.StringInput `pulumi:"name"`
	// The network output's gateway network name.
	NetworkName pulumi.StringInput `pulumi:"networkName"`
	// The network output port.
	Port pulumi.IntInput `pulumi:"port"`
	// The network output protocol.
	Protocol BridgeProtocolEnumInput `pulumi:"protocol"`
	// The network output TTL.
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (BridgeNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeNetworkOutput)(nil)).Elem()
}

func (i BridgeNetworkOutputArgs) ToBridgeNetworkOutputOutput() BridgeNetworkOutputOutput {
	return i.ToBridgeNetworkOutputOutputWithContext(context.Background())
}

func (i BridgeNetworkOutputArgs) ToBridgeNetworkOutputOutputWithContext(ctx context.Context) BridgeNetworkOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeNetworkOutputOutput)
}

func (i BridgeNetworkOutputArgs) ToBridgeNetworkOutputPtrOutput() BridgeNetworkOutputPtrOutput {
	return i.ToBridgeNetworkOutputPtrOutputWithContext(context.Background())
}

func (i BridgeNetworkOutputArgs) ToBridgeNetworkOutputPtrOutputWithContext(ctx context.Context) BridgeNetworkOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeNetworkOutputOutput).ToBridgeNetworkOutputPtrOutputWithContext(ctx)
}

// BridgeNetworkOutputPtrInput is an input type that accepts BridgeNetworkOutputArgs, BridgeNetworkOutputPtr and BridgeNetworkOutputPtrOutput values.
// You can construct a concrete instance of `BridgeNetworkOutputPtrInput` via:
//
//	        BridgeNetworkOutputArgs{...}
//
//	or:
//
//	        nil
type BridgeNetworkOutputPtrInput interface {
	pulumi.Input

	ToBridgeNetworkOutputPtrOutput() BridgeNetworkOutputPtrOutput
	ToBridgeNetworkOutputPtrOutputWithContext(context.Context) BridgeNetworkOutputPtrOutput
}

type bridgeNetworkOutputPtrType BridgeNetworkOutputArgs

func BridgeNetworkOutputPtr(v *BridgeNetworkOutputArgs) BridgeNetworkOutputPtrInput {
	return (*bridgeNetworkOutputPtrType)(v)
}

func (*bridgeNetworkOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeNetworkOutput)(nil)).Elem()
}

func (i *bridgeNetworkOutputPtrType) ToBridgeNetworkOutputPtrOutput() BridgeNetworkOutputPtrOutput {
	return i.ToBridgeNetworkOutputPtrOutputWithContext(context.Background())
}

func (i *bridgeNetworkOutputPtrType) ToBridgeNetworkOutputPtrOutputWithContext(ctx context.Context) BridgeNetworkOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeNetworkOutputPtrOutput)
}

// The output of the bridge. A network output is delivered to your premises.
type BridgeNetworkOutputOutput struct{ *pulumi.OutputState }

func (BridgeNetworkOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeNetworkOutput)(nil)).Elem()
}

func (o BridgeNetworkOutputOutput) ToBridgeNetworkOutputOutput() BridgeNetworkOutputOutput {
	return o
}

func (o BridgeNetworkOutputOutput) ToBridgeNetworkOutputOutputWithContext(ctx context.Context) BridgeNetworkOutputOutput {
	return o
}

func (o BridgeNetworkOutputOutput) ToBridgeNetworkOutputPtrOutput() BridgeNetworkOutputPtrOutput {
	return o.ToBridgeNetworkOutputPtrOutputWithContext(context.Background())
}

func (o BridgeNetworkOutputOutput) ToBridgeNetworkOutputPtrOutputWithContext(ctx context.Context) BridgeNetworkOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeNetworkOutput) *BridgeNetworkOutput {
		return &v
	}).(BridgeNetworkOutputPtrOutput)
}

// The network output IP Address.
func (o BridgeNetworkOutputOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeNetworkOutput) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The network output name.
func (o BridgeNetworkOutputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeNetworkOutput) string { return v.Name }).(pulumi.StringOutput)
}

// The network output's gateway network name.
func (o BridgeNetworkOutputOutput) NetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeNetworkOutput) string { return v.NetworkName }).(pulumi.StringOutput)
}

// The network output port.
func (o BridgeNetworkOutputOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeNetworkOutput) int { return v.Port }).(pulumi.IntOutput)
}

// The network output protocol.
func (o BridgeNetworkOutputOutput) Protocol() BridgeProtocolEnumOutput {
	return o.ApplyT(func(v BridgeNetworkOutput) BridgeProtocolEnum { return v.Protocol }).(BridgeProtocolEnumOutput)
}

// The network output TTL.
func (o BridgeNetworkOutputOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeNetworkOutput) int { return v.Ttl }).(pulumi.IntOutput)
}

type BridgeNetworkOutputPtrOutput struct{ *pulumi.OutputState }

func (BridgeNetworkOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeNetworkOutput)(nil)).Elem()
}

func (o BridgeNetworkOutputPtrOutput) ToBridgeNetworkOutputPtrOutput() BridgeNetworkOutputPtrOutput {
	return o
}

func (o BridgeNetworkOutputPtrOutput) ToBridgeNetworkOutputPtrOutputWithContext(ctx context.Context) BridgeNetworkOutputPtrOutput {
	return o
}

func (o BridgeNetworkOutputPtrOutput) Elem() BridgeNetworkOutputOutput {
	return o.ApplyT(func(v *BridgeNetworkOutput) BridgeNetworkOutput {
		if v != nil {
			return *v
		}
		var ret BridgeNetworkOutput
		return ret
	}).(BridgeNetworkOutputOutput)
}

// The network output IP Address.
func (o BridgeNetworkOutputPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkOutput) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// The network output name.
func (o BridgeNetworkOutputPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkOutput) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The network output's gateway network name.
func (o BridgeNetworkOutputPtrOutput) NetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkOutput) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkName
	}).(pulumi.StringPtrOutput)
}

// The network output port.
func (o BridgeNetworkOutputPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkOutput) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The network output protocol.
func (o BridgeNetworkOutputPtrOutput) Protocol() BridgeProtocolEnumPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkOutput) *BridgeProtocolEnum {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(BridgeProtocolEnumPtrOutput)
}

// The network output TTL.
func (o BridgeNetworkOutputPtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkOutput) *int {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(pulumi.IntPtrOutput)
}

// The source of the bridge. A network source originates at your premises.
type BridgeNetworkSource struct {
	// The network source multicast IP.
	MulticastIp string `pulumi:"multicastIp"`
	// The name of the network source.
	Name string `pulumi:"name"`
	// The network source's gateway network name.
	NetworkName string `pulumi:"networkName"`
	// The network source port.
	Port int `pulumi:"port"`
	// The network source protocol.
	Protocol BridgeProtocolEnum `pulumi:"protocol"`
}

// BridgeNetworkSourceInput is an input type that accepts BridgeNetworkSourceArgs and BridgeNetworkSourceOutput values.
// You can construct a concrete instance of `BridgeNetworkSourceInput` via:
//
//	BridgeNetworkSourceArgs{...}
type BridgeNetworkSourceInput interface {
	pulumi.Input

	ToBridgeNetworkSourceOutput() BridgeNetworkSourceOutput
	ToBridgeNetworkSourceOutputWithContext(context.Context) BridgeNetworkSourceOutput
}

// The source of the bridge. A network source originates at your premises.
type BridgeNetworkSourceArgs struct {
	// The network source multicast IP.
	MulticastIp pulumi.StringInput `pulumi:"multicastIp"`
	// The name of the network source.
	Name pulumi.StringInput `pulumi:"name"`
	// The network source's gateway network name.
	NetworkName pulumi.StringInput `pulumi:"networkName"`
	// The network source port.
	Port pulumi.IntInput `pulumi:"port"`
	// The network source protocol.
	Protocol BridgeProtocolEnumInput `pulumi:"protocol"`
}

func (BridgeNetworkSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeNetworkSource)(nil)).Elem()
}

func (i BridgeNetworkSourceArgs) ToBridgeNetworkSourceOutput() BridgeNetworkSourceOutput {
	return i.ToBridgeNetworkSourceOutputWithContext(context.Background())
}

func (i BridgeNetworkSourceArgs) ToBridgeNetworkSourceOutputWithContext(ctx context.Context) BridgeNetworkSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeNetworkSourceOutput)
}

func (i BridgeNetworkSourceArgs) ToBridgeNetworkSourcePtrOutput() BridgeNetworkSourcePtrOutput {
	return i.ToBridgeNetworkSourcePtrOutputWithContext(context.Background())
}

func (i BridgeNetworkSourceArgs) ToBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeNetworkSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeNetworkSourceOutput).ToBridgeNetworkSourcePtrOutputWithContext(ctx)
}

// BridgeNetworkSourcePtrInput is an input type that accepts BridgeNetworkSourceArgs, BridgeNetworkSourcePtr and BridgeNetworkSourcePtrOutput values.
// You can construct a concrete instance of `BridgeNetworkSourcePtrInput` via:
//
//	        BridgeNetworkSourceArgs{...}
//
//	or:
//
//	        nil
type BridgeNetworkSourcePtrInput interface {
	pulumi.Input

	ToBridgeNetworkSourcePtrOutput() BridgeNetworkSourcePtrOutput
	ToBridgeNetworkSourcePtrOutputWithContext(context.Context) BridgeNetworkSourcePtrOutput
}

type bridgeNetworkSourcePtrType BridgeNetworkSourceArgs

func BridgeNetworkSourcePtr(v *BridgeNetworkSourceArgs) BridgeNetworkSourcePtrInput {
	return (*bridgeNetworkSourcePtrType)(v)
}

func (*bridgeNetworkSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeNetworkSource)(nil)).Elem()
}

func (i *bridgeNetworkSourcePtrType) ToBridgeNetworkSourcePtrOutput() BridgeNetworkSourcePtrOutput {
	return i.ToBridgeNetworkSourcePtrOutputWithContext(context.Background())
}

func (i *bridgeNetworkSourcePtrType) ToBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeNetworkSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeNetworkSourcePtrOutput)
}

// The source of the bridge. A network source originates at your premises.
type BridgeNetworkSourceOutput struct{ *pulumi.OutputState }

func (BridgeNetworkSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeNetworkSource)(nil)).Elem()
}

func (o BridgeNetworkSourceOutput) ToBridgeNetworkSourceOutput() BridgeNetworkSourceOutput {
	return o
}

func (o BridgeNetworkSourceOutput) ToBridgeNetworkSourceOutputWithContext(ctx context.Context) BridgeNetworkSourceOutput {
	return o
}

func (o BridgeNetworkSourceOutput) ToBridgeNetworkSourcePtrOutput() BridgeNetworkSourcePtrOutput {
	return o.ToBridgeNetworkSourcePtrOutputWithContext(context.Background())
}

func (o BridgeNetworkSourceOutput) ToBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeNetworkSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeNetworkSource) *BridgeNetworkSource {
		return &v
	}).(BridgeNetworkSourcePtrOutput)
}

// The network source multicast IP.
func (o BridgeNetworkSourceOutput) MulticastIp() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeNetworkSource) string { return v.MulticastIp }).(pulumi.StringOutput)
}

// The name of the network source.
func (o BridgeNetworkSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeNetworkSource) string { return v.Name }).(pulumi.StringOutput)
}

// The network source's gateway network name.
func (o BridgeNetworkSourceOutput) NetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeNetworkSource) string { return v.NetworkName }).(pulumi.StringOutput)
}

// The network source port.
func (o BridgeNetworkSourceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeNetworkSource) int { return v.Port }).(pulumi.IntOutput)
}

// The network source protocol.
func (o BridgeNetworkSourceOutput) Protocol() BridgeProtocolEnumOutput {
	return o.ApplyT(func(v BridgeNetworkSource) BridgeProtocolEnum { return v.Protocol }).(BridgeProtocolEnumOutput)
}

type BridgeNetworkSourcePtrOutput struct{ *pulumi.OutputState }

func (BridgeNetworkSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeNetworkSource)(nil)).Elem()
}

func (o BridgeNetworkSourcePtrOutput) ToBridgeNetworkSourcePtrOutput() BridgeNetworkSourcePtrOutput {
	return o
}

func (o BridgeNetworkSourcePtrOutput) ToBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeNetworkSourcePtrOutput {
	return o
}

func (o BridgeNetworkSourcePtrOutput) Elem() BridgeNetworkSourceOutput {
	return o.ApplyT(func(v *BridgeNetworkSource) BridgeNetworkSource {
		if v != nil {
			return *v
		}
		var ret BridgeNetworkSource
		return ret
	}).(BridgeNetworkSourceOutput)
}

// The network source multicast IP.
func (o BridgeNetworkSourcePtrOutput) MulticastIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkSource) *string {
		if v == nil {
			return nil
		}
		return &v.MulticastIp
	}).(pulumi.StringPtrOutput)
}

// The name of the network source.
func (o BridgeNetworkSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The network source's gateway network name.
func (o BridgeNetworkSourcePtrOutput) NetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkSource) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkName
	}).(pulumi.StringPtrOutput)
}

// The network source port.
func (o BridgeNetworkSourcePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkSource) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The network source protocol.
func (o BridgeNetworkSourcePtrOutput) Protocol() BridgeProtocolEnumPtrOutput {
	return o.ApplyT(func(v *BridgeNetworkSource) *BridgeProtocolEnum {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(BridgeProtocolEnumPtrOutput)
}

// The output of the bridge.
type BridgeOutputType struct {
	// The output of the bridge. A network output is delivered to your premises.
	NetworkOutput *BridgeNetworkOutput `pulumi:"networkOutput"`
}

// BridgeOutputTypeInput is an input type that accepts BridgeOutputTypeArgs and BridgeOutputTypeOutput values.
// You can construct a concrete instance of `BridgeOutputTypeInput` via:
//
//	BridgeOutputTypeArgs{...}
type BridgeOutputTypeInput interface {
	pulumi.Input

	ToBridgeOutputTypeOutput() BridgeOutputTypeOutput
	ToBridgeOutputTypeOutputWithContext(context.Context) BridgeOutputTypeOutput
}

// The output of the bridge.
type BridgeOutputTypeArgs struct {
	// The output of the bridge. A network output is delivered to your premises.
	NetworkOutput BridgeNetworkOutputPtrInput `pulumi:"networkOutput"`
}

func (BridgeOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeOutputType)(nil)).Elem()
}

func (i BridgeOutputTypeArgs) ToBridgeOutputTypeOutput() BridgeOutputTypeOutput {
	return i.ToBridgeOutputTypeOutputWithContext(context.Background())
}

func (i BridgeOutputTypeArgs) ToBridgeOutputTypeOutputWithContext(ctx context.Context) BridgeOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeOutputTypeOutput)
}

// BridgeOutputTypeArrayInput is an input type that accepts BridgeOutputTypeArray and BridgeOutputTypeArrayOutput values.
// You can construct a concrete instance of `BridgeOutputTypeArrayInput` via:
//
//	BridgeOutputTypeArray{ BridgeOutputTypeArgs{...} }
type BridgeOutputTypeArrayInput interface {
	pulumi.Input

	ToBridgeOutputTypeArrayOutput() BridgeOutputTypeArrayOutput
	ToBridgeOutputTypeArrayOutputWithContext(context.Context) BridgeOutputTypeArrayOutput
}

type BridgeOutputTypeArray []BridgeOutputTypeInput

func (BridgeOutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BridgeOutputType)(nil)).Elem()
}

func (i BridgeOutputTypeArray) ToBridgeOutputTypeArrayOutput() BridgeOutputTypeArrayOutput {
	return i.ToBridgeOutputTypeArrayOutputWithContext(context.Background())
}

func (i BridgeOutputTypeArray) ToBridgeOutputTypeArrayOutputWithContext(ctx context.Context) BridgeOutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeOutputTypeArrayOutput)
}

// The output of the bridge.
type BridgeOutputTypeOutput struct{ *pulumi.OutputState }

func (BridgeOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeOutputType)(nil)).Elem()
}

func (o BridgeOutputTypeOutput) ToBridgeOutputTypeOutput() BridgeOutputTypeOutput {
	return o
}

func (o BridgeOutputTypeOutput) ToBridgeOutputTypeOutputWithContext(ctx context.Context) BridgeOutputTypeOutput {
	return o
}

// The output of the bridge. A network output is delivered to your premises.
func (o BridgeOutputTypeOutput) NetworkOutput() BridgeNetworkOutputPtrOutput {
	return o.ApplyT(func(v BridgeOutputType) *BridgeNetworkOutput { return v.NetworkOutput }).(BridgeNetworkOutputPtrOutput)
}

type BridgeOutputTypeArrayOutput struct{ *pulumi.OutputState }

func (BridgeOutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BridgeOutputType)(nil)).Elem()
}

func (o BridgeOutputTypeArrayOutput) ToBridgeOutputTypeArrayOutput() BridgeOutputTypeArrayOutput {
	return o
}

func (o BridgeOutputTypeArrayOutput) ToBridgeOutputTypeArrayOutputWithContext(ctx context.Context) BridgeOutputTypeArrayOutput {
	return o
}

func (o BridgeOutputTypeArrayOutput) Index(i pulumi.IntInput) BridgeOutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BridgeOutputType {
		return vs[0].([]BridgeOutputType)[vs[1].(int)]
	}).(BridgeOutputTypeOutput)
}

// The output of the bridge. A network output is delivered to your premises.
type BridgeOutputResourceBridgeNetworkOutput struct {
	// The network output IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// The network output's gateway network name.
	NetworkName string `pulumi:"networkName"`
	// The network output port.
	Port int `pulumi:"port"`
	// The network output protocol.
	Protocol BridgeOutputResourceBridgeNetworkOutputProtocol `pulumi:"protocol"`
	// The network output TTL.
	Ttl int `pulumi:"ttl"`
}

// BridgeOutputResourceBridgeNetworkOutputInput is an input type that accepts BridgeOutputResourceBridgeNetworkOutputArgs and BridgeOutputResourceBridgeNetworkOutputOutput values.
// You can construct a concrete instance of `BridgeOutputResourceBridgeNetworkOutputInput` via:
//
//	BridgeOutputResourceBridgeNetworkOutputArgs{...}
type BridgeOutputResourceBridgeNetworkOutputInput interface {
	pulumi.Input

	ToBridgeOutputResourceBridgeNetworkOutputOutput() BridgeOutputResourceBridgeNetworkOutputOutput
	ToBridgeOutputResourceBridgeNetworkOutputOutputWithContext(context.Context) BridgeOutputResourceBridgeNetworkOutputOutput
}

// The output of the bridge. A network output is delivered to your premises.
type BridgeOutputResourceBridgeNetworkOutputArgs struct {
	// The network output IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The network output's gateway network name.
	NetworkName pulumi.StringInput `pulumi:"networkName"`
	// The network output port.
	Port pulumi.IntInput `pulumi:"port"`
	// The network output protocol.
	Protocol BridgeOutputResourceBridgeNetworkOutputProtocolInput `pulumi:"protocol"`
	// The network output TTL.
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (BridgeOutputResourceBridgeNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeOutputResourceBridgeNetworkOutput)(nil)).Elem()
}

func (i BridgeOutputResourceBridgeNetworkOutputArgs) ToBridgeOutputResourceBridgeNetworkOutputOutput() BridgeOutputResourceBridgeNetworkOutputOutput {
	return i.ToBridgeOutputResourceBridgeNetworkOutputOutputWithContext(context.Background())
}

func (i BridgeOutputResourceBridgeNetworkOutputArgs) ToBridgeOutputResourceBridgeNetworkOutputOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeOutputResourceBridgeNetworkOutputOutput)
}

// The output of the bridge. A network output is delivered to your premises.
type BridgeOutputResourceBridgeNetworkOutputOutput struct{ *pulumi.OutputState }

func (BridgeOutputResourceBridgeNetworkOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeOutputResourceBridgeNetworkOutput)(nil)).Elem()
}

func (o BridgeOutputResourceBridgeNetworkOutputOutput) ToBridgeOutputResourceBridgeNetworkOutputOutput() BridgeOutputResourceBridgeNetworkOutputOutput {
	return o
}

func (o BridgeOutputResourceBridgeNetworkOutputOutput) ToBridgeOutputResourceBridgeNetworkOutputOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputOutput {
	return o
}

// The network output IP Address.
func (o BridgeOutputResourceBridgeNetworkOutputOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeOutputResourceBridgeNetworkOutput) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The network output's gateway network name.
func (o BridgeOutputResourceBridgeNetworkOutputOutput) NetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeOutputResourceBridgeNetworkOutput) string { return v.NetworkName }).(pulumi.StringOutput)
}

// The network output port.
func (o BridgeOutputResourceBridgeNetworkOutputOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeOutputResourceBridgeNetworkOutput) int { return v.Port }).(pulumi.IntOutput)
}

// The network output protocol.
func (o BridgeOutputResourceBridgeNetworkOutputOutput) Protocol() BridgeOutputResourceBridgeNetworkOutputProtocolOutput {
	return o.ApplyT(func(v BridgeOutputResourceBridgeNetworkOutput) BridgeOutputResourceBridgeNetworkOutputProtocol {
		return v.Protocol
	}).(BridgeOutputResourceBridgeNetworkOutputProtocolOutput)
}

// The network output TTL.
func (o BridgeOutputResourceBridgeNetworkOutputOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeOutputResourceBridgeNetworkOutput) int { return v.Ttl }).(pulumi.IntOutput)
}

type BridgeOutputResourceBridgeNetworkOutputPtrOutput struct{ *pulumi.OutputState }

func (BridgeOutputResourceBridgeNetworkOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeOutputResourceBridgeNetworkOutput)(nil)).Elem()
}

func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) ToBridgeOutputResourceBridgeNetworkOutputPtrOutput() BridgeOutputResourceBridgeNetworkOutputPtrOutput {
	return o
}

func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) ToBridgeOutputResourceBridgeNetworkOutputPtrOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputPtrOutput {
	return o
}

func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) Elem() BridgeOutputResourceBridgeNetworkOutputOutput {
	return o.ApplyT(func(v *BridgeOutputResourceBridgeNetworkOutput) BridgeOutputResourceBridgeNetworkOutput {
		if v != nil {
			return *v
		}
		var ret BridgeOutputResourceBridgeNetworkOutput
		return ret
	}).(BridgeOutputResourceBridgeNetworkOutputOutput)
}

// The network output IP Address.
func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeOutputResourceBridgeNetworkOutput) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// The network output's gateway network name.
func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) NetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeOutputResourceBridgeNetworkOutput) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkName
	}).(pulumi.StringPtrOutput)
}

// The network output port.
func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeOutputResourceBridgeNetworkOutput) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The network output protocol.
func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) Protocol() BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return o.ApplyT(func(v *BridgeOutputResourceBridgeNetworkOutput) *BridgeOutputResourceBridgeNetworkOutputProtocol {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput)
}

// The network output TTL.
func (o BridgeOutputResourceBridgeNetworkOutputPtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeOutputResourceBridgeNetworkOutput) *int {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(pulumi.IntPtrOutput)
}

// The bridge's source.
type BridgeSourceType struct {
	// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
	FlowSource *BridgeFlowSource `pulumi:"flowSource"`
	// The source of the bridge. A network source originates at your premises.
	NetworkSource *BridgeNetworkSource `pulumi:"networkSource"`
}

// BridgeSourceTypeInput is an input type that accepts BridgeSourceTypeArgs and BridgeSourceTypeOutput values.
// You can construct a concrete instance of `BridgeSourceTypeInput` via:
//
//	BridgeSourceTypeArgs{...}
type BridgeSourceTypeInput interface {
	pulumi.Input

	ToBridgeSourceTypeOutput() BridgeSourceTypeOutput
	ToBridgeSourceTypeOutputWithContext(context.Context) BridgeSourceTypeOutput
}

// The bridge's source.
type BridgeSourceTypeArgs struct {
	// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
	FlowSource BridgeFlowSourcePtrInput `pulumi:"flowSource"`
	// The source of the bridge. A network source originates at your premises.
	NetworkSource BridgeNetworkSourcePtrInput `pulumi:"networkSource"`
}

func (BridgeSourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceType)(nil)).Elem()
}

func (i BridgeSourceTypeArgs) ToBridgeSourceTypeOutput() BridgeSourceTypeOutput {
	return i.ToBridgeSourceTypeOutputWithContext(context.Background())
}

func (i BridgeSourceTypeArgs) ToBridgeSourceTypeOutputWithContext(ctx context.Context) BridgeSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceTypeOutput)
}

// BridgeSourceTypeArrayInput is an input type that accepts BridgeSourceTypeArray and BridgeSourceTypeArrayOutput values.
// You can construct a concrete instance of `BridgeSourceTypeArrayInput` via:
//
//	BridgeSourceTypeArray{ BridgeSourceTypeArgs{...} }
type BridgeSourceTypeArrayInput interface {
	pulumi.Input

	ToBridgeSourceTypeArrayOutput() BridgeSourceTypeArrayOutput
	ToBridgeSourceTypeArrayOutputWithContext(context.Context) BridgeSourceTypeArrayOutput
}

type BridgeSourceTypeArray []BridgeSourceTypeInput

func (BridgeSourceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BridgeSourceType)(nil)).Elem()
}

func (i BridgeSourceTypeArray) ToBridgeSourceTypeArrayOutput() BridgeSourceTypeArrayOutput {
	return i.ToBridgeSourceTypeArrayOutputWithContext(context.Background())
}

func (i BridgeSourceTypeArray) ToBridgeSourceTypeArrayOutputWithContext(ctx context.Context) BridgeSourceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceTypeArrayOutput)
}

// The bridge's source.
type BridgeSourceTypeOutput struct{ *pulumi.OutputState }

func (BridgeSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceType)(nil)).Elem()
}

func (o BridgeSourceTypeOutput) ToBridgeSourceTypeOutput() BridgeSourceTypeOutput {
	return o
}

func (o BridgeSourceTypeOutput) ToBridgeSourceTypeOutputWithContext(ctx context.Context) BridgeSourceTypeOutput {
	return o
}

// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
func (o BridgeSourceTypeOutput) FlowSource() BridgeFlowSourcePtrOutput {
	return o.ApplyT(func(v BridgeSourceType) *BridgeFlowSource { return v.FlowSource }).(BridgeFlowSourcePtrOutput)
}

// The source of the bridge. A network source originates at your premises.
func (o BridgeSourceTypeOutput) NetworkSource() BridgeNetworkSourcePtrOutput {
	return o.ApplyT(func(v BridgeSourceType) *BridgeNetworkSource { return v.NetworkSource }).(BridgeNetworkSourcePtrOutput)
}

type BridgeSourceTypeArrayOutput struct{ *pulumi.OutputState }

func (BridgeSourceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BridgeSourceType)(nil)).Elem()
}

func (o BridgeSourceTypeArrayOutput) ToBridgeSourceTypeArrayOutput() BridgeSourceTypeArrayOutput {
	return o
}

func (o BridgeSourceTypeArrayOutput) ToBridgeSourceTypeArrayOutputWithContext(ctx context.Context) BridgeSourceTypeArrayOutput {
	return o
}

func (o BridgeSourceTypeArrayOutput) Index(i pulumi.IntInput) BridgeSourceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BridgeSourceType {
		return vs[0].([]BridgeSourceType)[vs[1].(int)]
	}).(BridgeSourceTypeOutput)
}

// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
type BridgeSourceBridgeFlowSource struct {
	// The ARN of the cloud flow used as a source of this bridge.
	FlowArn string `pulumi:"flowArn"`
	// The name of the VPC interface attachment to use for this source.
	FlowVpcInterfaceAttachment *BridgeSourceVpcInterfaceAttachment `pulumi:"flowVpcInterfaceAttachment"`
}

// BridgeSourceBridgeFlowSourceInput is an input type that accepts BridgeSourceBridgeFlowSourceArgs and BridgeSourceBridgeFlowSourceOutput values.
// You can construct a concrete instance of `BridgeSourceBridgeFlowSourceInput` via:
//
//	BridgeSourceBridgeFlowSourceArgs{...}
type BridgeSourceBridgeFlowSourceInput interface {
	pulumi.Input

	ToBridgeSourceBridgeFlowSourceOutput() BridgeSourceBridgeFlowSourceOutput
	ToBridgeSourceBridgeFlowSourceOutputWithContext(context.Context) BridgeSourceBridgeFlowSourceOutput
}

// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
type BridgeSourceBridgeFlowSourceArgs struct {
	// The ARN of the cloud flow used as a source of this bridge.
	FlowArn pulumi.StringInput `pulumi:"flowArn"`
	// The name of the VPC interface attachment to use for this source.
	FlowVpcInterfaceAttachment BridgeSourceVpcInterfaceAttachmentPtrInput `pulumi:"flowVpcInterfaceAttachment"`
}

func (BridgeSourceBridgeFlowSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceBridgeFlowSource)(nil)).Elem()
}

func (i BridgeSourceBridgeFlowSourceArgs) ToBridgeSourceBridgeFlowSourceOutput() BridgeSourceBridgeFlowSourceOutput {
	return i.ToBridgeSourceBridgeFlowSourceOutputWithContext(context.Background())
}

func (i BridgeSourceBridgeFlowSourceArgs) ToBridgeSourceBridgeFlowSourceOutputWithContext(ctx context.Context) BridgeSourceBridgeFlowSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceBridgeFlowSourceOutput)
}

func (i BridgeSourceBridgeFlowSourceArgs) ToBridgeSourceBridgeFlowSourcePtrOutput() BridgeSourceBridgeFlowSourcePtrOutput {
	return i.ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(context.Background())
}

func (i BridgeSourceBridgeFlowSourceArgs) ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeFlowSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceBridgeFlowSourceOutput).ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(ctx)
}

// BridgeSourceBridgeFlowSourcePtrInput is an input type that accepts BridgeSourceBridgeFlowSourceArgs, BridgeSourceBridgeFlowSourcePtr and BridgeSourceBridgeFlowSourcePtrOutput values.
// You can construct a concrete instance of `BridgeSourceBridgeFlowSourcePtrInput` via:
//
//	        BridgeSourceBridgeFlowSourceArgs{...}
//
//	or:
//
//	        nil
type BridgeSourceBridgeFlowSourcePtrInput interface {
	pulumi.Input

	ToBridgeSourceBridgeFlowSourcePtrOutput() BridgeSourceBridgeFlowSourcePtrOutput
	ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(context.Context) BridgeSourceBridgeFlowSourcePtrOutput
}

type bridgeSourceBridgeFlowSourcePtrType BridgeSourceBridgeFlowSourceArgs

func BridgeSourceBridgeFlowSourcePtr(v *BridgeSourceBridgeFlowSourceArgs) BridgeSourceBridgeFlowSourcePtrInput {
	return (*bridgeSourceBridgeFlowSourcePtrType)(v)
}

func (*bridgeSourceBridgeFlowSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourceBridgeFlowSource)(nil)).Elem()
}

func (i *bridgeSourceBridgeFlowSourcePtrType) ToBridgeSourceBridgeFlowSourcePtrOutput() BridgeSourceBridgeFlowSourcePtrOutput {
	return i.ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(context.Background())
}

func (i *bridgeSourceBridgeFlowSourcePtrType) ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeFlowSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceBridgeFlowSourcePtrOutput)
}

// The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
type BridgeSourceBridgeFlowSourceOutput struct{ *pulumi.OutputState }

func (BridgeSourceBridgeFlowSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceBridgeFlowSource)(nil)).Elem()
}

func (o BridgeSourceBridgeFlowSourceOutput) ToBridgeSourceBridgeFlowSourceOutput() BridgeSourceBridgeFlowSourceOutput {
	return o
}

func (o BridgeSourceBridgeFlowSourceOutput) ToBridgeSourceBridgeFlowSourceOutputWithContext(ctx context.Context) BridgeSourceBridgeFlowSourceOutput {
	return o
}

func (o BridgeSourceBridgeFlowSourceOutput) ToBridgeSourceBridgeFlowSourcePtrOutput() BridgeSourceBridgeFlowSourcePtrOutput {
	return o.ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(context.Background())
}

func (o BridgeSourceBridgeFlowSourceOutput) ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeFlowSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeSourceBridgeFlowSource) *BridgeSourceBridgeFlowSource {
		return &v
	}).(BridgeSourceBridgeFlowSourcePtrOutput)
}

// The ARN of the cloud flow used as a source of this bridge.
func (o BridgeSourceBridgeFlowSourceOutput) FlowArn() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeSourceBridgeFlowSource) string { return v.FlowArn }).(pulumi.StringOutput)
}

// The name of the VPC interface attachment to use for this source.
func (o BridgeSourceBridgeFlowSourceOutput) FlowVpcInterfaceAttachment() BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v BridgeSourceBridgeFlowSource) *BridgeSourceVpcInterfaceAttachment {
		return v.FlowVpcInterfaceAttachment
	}).(BridgeSourceVpcInterfaceAttachmentPtrOutput)
}

type BridgeSourceBridgeFlowSourcePtrOutput struct{ *pulumi.OutputState }

func (BridgeSourceBridgeFlowSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourceBridgeFlowSource)(nil)).Elem()
}

func (o BridgeSourceBridgeFlowSourcePtrOutput) ToBridgeSourceBridgeFlowSourcePtrOutput() BridgeSourceBridgeFlowSourcePtrOutput {
	return o
}

func (o BridgeSourceBridgeFlowSourcePtrOutput) ToBridgeSourceBridgeFlowSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeFlowSourcePtrOutput {
	return o
}

func (o BridgeSourceBridgeFlowSourcePtrOutput) Elem() BridgeSourceBridgeFlowSourceOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeFlowSource) BridgeSourceBridgeFlowSource {
		if v != nil {
			return *v
		}
		var ret BridgeSourceBridgeFlowSource
		return ret
	}).(BridgeSourceBridgeFlowSourceOutput)
}

// The ARN of the cloud flow used as a source of this bridge.
func (o BridgeSourceBridgeFlowSourcePtrOutput) FlowArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeFlowSource) *string {
		if v == nil {
			return nil
		}
		return &v.FlowArn
	}).(pulumi.StringPtrOutput)
}

// The name of the VPC interface attachment to use for this source.
func (o BridgeSourceBridgeFlowSourcePtrOutput) FlowVpcInterfaceAttachment() BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeFlowSource) *BridgeSourceVpcInterfaceAttachment {
		if v == nil {
			return nil
		}
		return v.FlowVpcInterfaceAttachment
	}).(BridgeSourceVpcInterfaceAttachmentPtrOutput)
}

// The source of the bridge. A network source originates at your premises.
type BridgeSourceBridgeNetworkSource struct {
	// The network source multicast IP.
	MulticastIp string `pulumi:"multicastIp"`
	// The network source's gateway network name.
	NetworkName string `pulumi:"networkName"`
	// The network source port.
	Port int `pulumi:"port"`
	// The network source protocol.
	Protocol BridgeSourceProtocolEnum `pulumi:"protocol"`
}

// BridgeSourceBridgeNetworkSourceInput is an input type that accepts BridgeSourceBridgeNetworkSourceArgs and BridgeSourceBridgeNetworkSourceOutput values.
// You can construct a concrete instance of `BridgeSourceBridgeNetworkSourceInput` via:
//
//	BridgeSourceBridgeNetworkSourceArgs{...}
type BridgeSourceBridgeNetworkSourceInput interface {
	pulumi.Input

	ToBridgeSourceBridgeNetworkSourceOutput() BridgeSourceBridgeNetworkSourceOutput
	ToBridgeSourceBridgeNetworkSourceOutputWithContext(context.Context) BridgeSourceBridgeNetworkSourceOutput
}

// The source of the bridge. A network source originates at your premises.
type BridgeSourceBridgeNetworkSourceArgs struct {
	// The network source multicast IP.
	MulticastIp pulumi.StringInput `pulumi:"multicastIp"`
	// The network source's gateway network name.
	NetworkName pulumi.StringInput `pulumi:"networkName"`
	// The network source port.
	Port pulumi.IntInput `pulumi:"port"`
	// The network source protocol.
	Protocol BridgeSourceProtocolEnumInput `pulumi:"protocol"`
}

func (BridgeSourceBridgeNetworkSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceBridgeNetworkSource)(nil)).Elem()
}

func (i BridgeSourceBridgeNetworkSourceArgs) ToBridgeSourceBridgeNetworkSourceOutput() BridgeSourceBridgeNetworkSourceOutput {
	return i.ToBridgeSourceBridgeNetworkSourceOutputWithContext(context.Background())
}

func (i BridgeSourceBridgeNetworkSourceArgs) ToBridgeSourceBridgeNetworkSourceOutputWithContext(ctx context.Context) BridgeSourceBridgeNetworkSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceBridgeNetworkSourceOutput)
}

func (i BridgeSourceBridgeNetworkSourceArgs) ToBridgeSourceBridgeNetworkSourcePtrOutput() BridgeSourceBridgeNetworkSourcePtrOutput {
	return i.ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(context.Background())
}

func (i BridgeSourceBridgeNetworkSourceArgs) ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeNetworkSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceBridgeNetworkSourceOutput).ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(ctx)
}

// BridgeSourceBridgeNetworkSourcePtrInput is an input type that accepts BridgeSourceBridgeNetworkSourceArgs, BridgeSourceBridgeNetworkSourcePtr and BridgeSourceBridgeNetworkSourcePtrOutput values.
// You can construct a concrete instance of `BridgeSourceBridgeNetworkSourcePtrInput` via:
//
//	        BridgeSourceBridgeNetworkSourceArgs{...}
//
//	or:
//
//	        nil
type BridgeSourceBridgeNetworkSourcePtrInput interface {
	pulumi.Input

	ToBridgeSourceBridgeNetworkSourcePtrOutput() BridgeSourceBridgeNetworkSourcePtrOutput
	ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(context.Context) BridgeSourceBridgeNetworkSourcePtrOutput
}

type bridgeSourceBridgeNetworkSourcePtrType BridgeSourceBridgeNetworkSourceArgs

func BridgeSourceBridgeNetworkSourcePtr(v *BridgeSourceBridgeNetworkSourceArgs) BridgeSourceBridgeNetworkSourcePtrInput {
	return (*bridgeSourceBridgeNetworkSourcePtrType)(v)
}

func (*bridgeSourceBridgeNetworkSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourceBridgeNetworkSource)(nil)).Elem()
}

func (i *bridgeSourceBridgeNetworkSourcePtrType) ToBridgeSourceBridgeNetworkSourcePtrOutput() BridgeSourceBridgeNetworkSourcePtrOutput {
	return i.ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(context.Background())
}

func (i *bridgeSourceBridgeNetworkSourcePtrType) ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeNetworkSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceBridgeNetworkSourcePtrOutput)
}

// The source of the bridge. A network source originates at your premises.
type BridgeSourceBridgeNetworkSourceOutput struct{ *pulumi.OutputState }

func (BridgeSourceBridgeNetworkSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceBridgeNetworkSource)(nil)).Elem()
}

func (o BridgeSourceBridgeNetworkSourceOutput) ToBridgeSourceBridgeNetworkSourceOutput() BridgeSourceBridgeNetworkSourceOutput {
	return o
}

func (o BridgeSourceBridgeNetworkSourceOutput) ToBridgeSourceBridgeNetworkSourceOutputWithContext(ctx context.Context) BridgeSourceBridgeNetworkSourceOutput {
	return o
}

func (o BridgeSourceBridgeNetworkSourceOutput) ToBridgeSourceBridgeNetworkSourcePtrOutput() BridgeSourceBridgeNetworkSourcePtrOutput {
	return o.ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(context.Background())
}

func (o BridgeSourceBridgeNetworkSourceOutput) ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeNetworkSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeSourceBridgeNetworkSource) *BridgeSourceBridgeNetworkSource {
		return &v
	}).(BridgeSourceBridgeNetworkSourcePtrOutput)
}

// The network source multicast IP.
func (o BridgeSourceBridgeNetworkSourceOutput) MulticastIp() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeSourceBridgeNetworkSource) string { return v.MulticastIp }).(pulumi.StringOutput)
}

// The network source's gateway network name.
func (o BridgeSourceBridgeNetworkSourceOutput) NetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v BridgeSourceBridgeNetworkSource) string { return v.NetworkName }).(pulumi.StringOutput)
}

// The network source port.
func (o BridgeSourceBridgeNetworkSourceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v BridgeSourceBridgeNetworkSource) int { return v.Port }).(pulumi.IntOutput)
}

// The network source protocol.
func (o BridgeSourceBridgeNetworkSourceOutput) Protocol() BridgeSourceProtocolEnumOutput {
	return o.ApplyT(func(v BridgeSourceBridgeNetworkSource) BridgeSourceProtocolEnum { return v.Protocol }).(BridgeSourceProtocolEnumOutput)
}

type BridgeSourceBridgeNetworkSourcePtrOutput struct{ *pulumi.OutputState }

func (BridgeSourceBridgeNetworkSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourceBridgeNetworkSource)(nil)).Elem()
}

func (o BridgeSourceBridgeNetworkSourcePtrOutput) ToBridgeSourceBridgeNetworkSourcePtrOutput() BridgeSourceBridgeNetworkSourcePtrOutput {
	return o
}

func (o BridgeSourceBridgeNetworkSourcePtrOutput) ToBridgeSourceBridgeNetworkSourcePtrOutputWithContext(ctx context.Context) BridgeSourceBridgeNetworkSourcePtrOutput {
	return o
}

func (o BridgeSourceBridgeNetworkSourcePtrOutput) Elem() BridgeSourceBridgeNetworkSourceOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeNetworkSource) BridgeSourceBridgeNetworkSource {
		if v != nil {
			return *v
		}
		var ret BridgeSourceBridgeNetworkSource
		return ret
	}).(BridgeSourceBridgeNetworkSourceOutput)
}

// The network source multicast IP.
func (o BridgeSourceBridgeNetworkSourcePtrOutput) MulticastIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeNetworkSource) *string {
		if v == nil {
			return nil
		}
		return &v.MulticastIp
	}).(pulumi.StringPtrOutput)
}

// The network source's gateway network name.
func (o BridgeSourceBridgeNetworkSourcePtrOutput) NetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeNetworkSource) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkName
	}).(pulumi.StringPtrOutput)
}

// The network source port.
func (o BridgeSourceBridgeNetworkSourcePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeNetworkSource) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The network source protocol.
func (o BridgeSourceBridgeNetworkSourcePtrOutput) Protocol() BridgeSourceProtocolEnumPtrOutput {
	return o.ApplyT(func(v *BridgeSourceBridgeNetworkSource) *BridgeSourceProtocolEnum {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(BridgeSourceProtocolEnumPtrOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
type BridgeSourcePriority struct {
	// The name of the source you choose as the primary source for this flow.
	PrimarySource *string `pulumi:"primarySource"`
}

// BridgeSourcePriorityInput is an input type that accepts BridgeSourcePriorityArgs and BridgeSourcePriorityOutput values.
// You can construct a concrete instance of `BridgeSourcePriorityInput` via:
//
//	BridgeSourcePriorityArgs{...}
type BridgeSourcePriorityInput interface {
	pulumi.Input

	ToBridgeSourcePriorityOutput() BridgeSourcePriorityOutput
	ToBridgeSourcePriorityOutputWithContext(context.Context) BridgeSourcePriorityOutput
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
type BridgeSourcePriorityArgs struct {
	// The name of the source you choose as the primary source for this flow.
	PrimarySource pulumi.StringPtrInput `pulumi:"primarySource"`
}

func (BridgeSourcePriorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourcePriority)(nil)).Elem()
}

func (i BridgeSourcePriorityArgs) ToBridgeSourcePriorityOutput() BridgeSourcePriorityOutput {
	return i.ToBridgeSourcePriorityOutputWithContext(context.Background())
}

func (i BridgeSourcePriorityArgs) ToBridgeSourcePriorityOutputWithContext(ctx context.Context) BridgeSourcePriorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourcePriorityOutput)
}

func (i BridgeSourcePriorityArgs) ToBridgeSourcePriorityPtrOutput() BridgeSourcePriorityPtrOutput {
	return i.ToBridgeSourcePriorityPtrOutputWithContext(context.Background())
}

func (i BridgeSourcePriorityArgs) ToBridgeSourcePriorityPtrOutputWithContext(ctx context.Context) BridgeSourcePriorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourcePriorityOutput).ToBridgeSourcePriorityPtrOutputWithContext(ctx)
}

// BridgeSourcePriorityPtrInput is an input type that accepts BridgeSourcePriorityArgs, BridgeSourcePriorityPtr and BridgeSourcePriorityPtrOutput values.
// You can construct a concrete instance of `BridgeSourcePriorityPtrInput` via:
//
//	        BridgeSourcePriorityArgs{...}
//
//	or:
//
//	        nil
type BridgeSourcePriorityPtrInput interface {
	pulumi.Input

	ToBridgeSourcePriorityPtrOutput() BridgeSourcePriorityPtrOutput
	ToBridgeSourcePriorityPtrOutputWithContext(context.Context) BridgeSourcePriorityPtrOutput
}

type bridgeSourcePriorityPtrType BridgeSourcePriorityArgs

func BridgeSourcePriorityPtr(v *BridgeSourcePriorityArgs) BridgeSourcePriorityPtrInput {
	return (*bridgeSourcePriorityPtrType)(v)
}

func (*bridgeSourcePriorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourcePriority)(nil)).Elem()
}

func (i *bridgeSourcePriorityPtrType) ToBridgeSourcePriorityPtrOutput() BridgeSourcePriorityPtrOutput {
	return i.ToBridgeSourcePriorityPtrOutputWithContext(context.Background())
}

func (i *bridgeSourcePriorityPtrType) ToBridgeSourcePriorityPtrOutputWithContext(ctx context.Context) BridgeSourcePriorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourcePriorityPtrOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
type BridgeSourcePriorityOutput struct{ *pulumi.OutputState }

func (BridgeSourcePriorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourcePriority)(nil)).Elem()
}

func (o BridgeSourcePriorityOutput) ToBridgeSourcePriorityOutput() BridgeSourcePriorityOutput {
	return o
}

func (o BridgeSourcePriorityOutput) ToBridgeSourcePriorityOutputWithContext(ctx context.Context) BridgeSourcePriorityOutput {
	return o
}

func (o BridgeSourcePriorityOutput) ToBridgeSourcePriorityPtrOutput() BridgeSourcePriorityPtrOutput {
	return o.ToBridgeSourcePriorityPtrOutputWithContext(context.Background())
}

func (o BridgeSourcePriorityOutput) ToBridgeSourcePriorityPtrOutputWithContext(ctx context.Context) BridgeSourcePriorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeSourcePriority) *BridgeSourcePriority {
		return &v
	}).(BridgeSourcePriorityPtrOutput)
}

// The name of the source you choose as the primary source for this flow.
func (o BridgeSourcePriorityOutput) PrimarySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BridgeSourcePriority) *string { return v.PrimarySource }).(pulumi.StringPtrOutput)
}

type BridgeSourcePriorityPtrOutput struct{ *pulumi.OutputState }

func (BridgeSourcePriorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourcePriority)(nil)).Elem()
}

func (o BridgeSourcePriorityPtrOutput) ToBridgeSourcePriorityPtrOutput() BridgeSourcePriorityPtrOutput {
	return o
}

func (o BridgeSourcePriorityPtrOutput) ToBridgeSourcePriorityPtrOutputWithContext(ctx context.Context) BridgeSourcePriorityPtrOutput {
	return o
}

func (o BridgeSourcePriorityPtrOutput) Elem() BridgeSourcePriorityOutput {
	return o.ApplyT(func(v *BridgeSourcePriority) BridgeSourcePriority {
		if v != nil {
			return *v
		}
		var ret BridgeSourcePriority
		return ret
	}).(BridgeSourcePriorityOutput)
}

// The name of the source you choose as the primary source for this flow.
func (o BridgeSourcePriorityPtrOutput) PrimarySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeSourcePriority) *string {
		if v == nil {
			return nil
		}
		return v.PrimarySource
	}).(pulumi.StringPtrOutput)
}

// The settings for attaching a VPC interface to an resource.
type BridgeSourceVpcInterfaceAttachment struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
}

// BridgeSourceVpcInterfaceAttachmentInput is an input type that accepts BridgeSourceVpcInterfaceAttachmentArgs and BridgeSourceVpcInterfaceAttachmentOutput values.
// You can construct a concrete instance of `BridgeSourceVpcInterfaceAttachmentInput` via:
//
//	BridgeSourceVpcInterfaceAttachmentArgs{...}
type BridgeSourceVpcInterfaceAttachmentInput interface {
	pulumi.Input

	ToBridgeSourceVpcInterfaceAttachmentOutput() BridgeSourceVpcInterfaceAttachmentOutput
	ToBridgeSourceVpcInterfaceAttachmentOutputWithContext(context.Context) BridgeSourceVpcInterfaceAttachmentOutput
}

// The settings for attaching a VPC interface to an resource.
type BridgeSourceVpcInterfaceAttachmentArgs struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
}

func (BridgeSourceVpcInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (i BridgeSourceVpcInterfaceAttachmentArgs) ToBridgeSourceVpcInterfaceAttachmentOutput() BridgeSourceVpcInterfaceAttachmentOutput {
	return i.ToBridgeSourceVpcInterfaceAttachmentOutputWithContext(context.Background())
}

func (i BridgeSourceVpcInterfaceAttachmentArgs) ToBridgeSourceVpcInterfaceAttachmentOutputWithContext(ctx context.Context) BridgeSourceVpcInterfaceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceVpcInterfaceAttachmentOutput)
}

func (i BridgeSourceVpcInterfaceAttachmentArgs) ToBridgeSourceVpcInterfaceAttachmentPtrOutput() BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return i.ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i BridgeSourceVpcInterfaceAttachmentArgs) ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceVpcInterfaceAttachmentOutput).ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx)
}

// BridgeSourceVpcInterfaceAttachmentPtrInput is an input type that accepts BridgeSourceVpcInterfaceAttachmentArgs, BridgeSourceVpcInterfaceAttachmentPtr and BridgeSourceVpcInterfaceAttachmentPtrOutput values.
// You can construct a concrete instance of `BridgeSourceVpcInterfaceAttachmentPtrInput` via:
//
//	        BridgeSourceVpcInterfaceAttachmentArgs{...}
//
//	or:
//
//	        nil
type BridgeSourceVpcInterfaceAttachmentPtrInput interface {
	pulumi.Input

	ToBridgeSourceVpcInterfaceAttachmentPtrOutput() BridgeSourceVpcInterfaceAttachmentPtrOutput
	ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Context) BridgeSourceVpcInterfaceAttachmentPtrOutput
}

type bridgeSourceVpcInterfaceAttachmentPtrType BridgeSourceVpcInterfaceAttachmentArgs

func BridgeSourceVpcInterfaceAttachmentPtr(v *BridgeSourceVpcInterfaceAttachmentArgs) BridgeSourceVpcInterfaceAttachmentPtrInput {
	return (*bridgeSourceVpcInterfaceAttachmentPtrType)(v)
}

func (*bridgeSourceVpcInterfaceAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (i *bridgeSourceVpcInterfaceAttachmentPtrType) ToBridgeSourceVpcInterfaceAttachmentPtrOutput() BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return i.ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i *bridgeSourceVpcInterfaceAttachmentPtrType) ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceVpcInterfaceAttachmentPtrOutput)
}

// The settings for attaching a VPC interface to an resource.
type BridgeSourceVpcInterfaceAttachmentOutput struct{ *pulumi.OutputState }

func (BridgeSourceVpcInterfaceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (o BridgeSourceVpcInterfaceAttachmentOutput) ToBridgeSourceVpcInterfaceAttachmentOutput() BridgeSourceVpcInterfaceAttachmentOutput {
	return o
}

func (o BridgeSourceVpcInterfaceAttachmentOutput) ToBridgeSourceVpcInterfaceAttachmentOutputWithContext(ctx context.Context) BridgeSourceVpcInterfaceAttachmentOutput {
	return o
}

func (o BridgeSourceVpcInterfaceAttachmentOutput) ToBridgeSourceVpcInterfaceAttachmentPtrOutput() BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return o.ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (o BridgeSourceVpcInterfaceAttachmentOutput) ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeSourceVpcInterfaceAttachment) *BridgeSourceVpcInterfaceAttachment {
		return &v
	}).(BridgeSourceVpcInterfaceAttachmentPtrOutput)
}

// The name of the VPC interface to use for this resource.
func (o BridgeSourceVpcInterfaceAttachmentOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BridgeSourceVpcInterfaceAttachment) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

type BridgeSourceVpcInterfaceAttachmentPtrOutput struct{ *pulumi.OutputState }

func (BridgeSourceVpcInterfaceAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (o BridgeSourceVpcInterfaceAttachmentPtrOutput) ToBridgeSourceVpcInterfaceAttachmentPtrOutput() BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o BridgeSourceVpcInterfaceAttachmentPtrOutput) ToBridgeSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeSourceVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o BridgeSourceVpcInterfaceAttachmentPtrOutput) Elem() BridgeSourceVpcInterfaceAttachmentOutput {
	return o.ApplyT(func(v *BridgeSourceVpcInterfaceAttachment) BridgeSourceVpcInterfaceAttachment {
		if v != nil {
			return *v
		}
		var ret BridgeSourceVpcInterfaceAttachment
		return ret
	}).(BridgeSourceVpcInterfaceAttachmentOutput)
}

// The name of the VPC interface to use for this resource.
func (o BridgeSourceVpcInterfaceAttachmentPtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeSourceVpcInterfaceAttachment) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// The settings for attaching a VPC interface to an resource.
type BridgeVpcInterfaceAttachment struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
}

// BridgeVpcInterfaceAttachmentInput is an input type that accepts BridgeVpcInterfaceAttachmentArgs and BridgeVpcInterfaceAttachmentOutput values.
// You can construct a concrete instance of `BridgeVpcInterfaceAttachmentInput` via:
//
//	BridgeVpcInterfaceAttachmentArgs{...}
type BridgeVpcInterfaceAttachmentInput interface {
	pulumi.Input

	ToBridgeVpcInterfaceAttachmentOutput() BridgeVpcInterfaceAttachmentOutput
	ToBridgeVpcInterfaceAttachmentOutputWithContext(context.Context) BridgeVpcInterfaceAttachmentOutput
}

// The settings for attaching a VPC interface to an resource.
type BridgeVpcInterfaceAttachmentArgs struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
}

func (BridgeVpcInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeVpcInterfaceAttachment)(nil)).Elem()
}

func (i BridgeVpcInterfaceAttachmentArgs) ToBridgeVpcInterfaceAttachmentOutput() BridgeVpcInterfaceAttachmentOutput {
	return i.ToBridgeVpcInterfaceAttachmentOutputWithContext(context.Background())
}

func (i BridgeVpcInterfaceAttachmentArgs) ToBridgeVpcInterfaceAttachmentOutputWithContext(ctx context.Context) BridgeVpcInterfaceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeVpcInterfaceAttachmentOutput)
}

func (i BridgeVpcInterfaceAttachmentArgs) ToBridgeVpcInterfaceAttachmentPtrOutput() BridgeVpcInterfaceAttachmentPtrOutput {
	return i.ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i BridgeVpcInterfaceAttachmentArgs) ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeVpcInterfaceAttachmentOutput).ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(ctx)
}

// BridgeVpcInterfaceAttachmentPtrInput is an input type that accepts BridgeVpcInterfaceAttachmentArgs, BridgeVpcInterfaceAttachmentPtr and BridgeVpcInterfaceAttachmentPtrOutput values.
// You can construct a concrete instance of `BridgeVpcInterfaceAttachmentPtrInput` via:
//
//	        BridgeVpcInterfaceAttachmentArgs{...}
//
//	or:
//
//	        nil
type BridgeVpcInterfaceAttachmentPtrInput interface {
	pulumi.Input

	ToBridgeVpcInterfaceAttachmentPtrOutput() BridgeVpcInterfaceAttachmentPtrOutput
	ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(context.Context) BridgeVpcInterfaceAttachmentPtrOutput
}

type bridgeVpcInterfaceAttachmentPtrType BridgeVpcInterfaceAttachmentArgs

func BridgeVpcInterfaceAttachmentPtr(v *BridgeVpcInterfaceAttachmentArgs) BridgeVpcInterfaceAttachmentPtrInput {
	return (*bridgeVpcInterfaceAttachmentPtrType)(v)
}

func (*bridgeVpcInterfaceAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeVpcInterfaceAttachment)(nil)).Elem()
}

func (i *bridgeVpcInterfaceAttachmentPtrType) ToBridgeVpcInterfaceAttachmentPtrOutput() BridgeVpcInterfaceAttachmentPtrOutput {
	return i.ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i *bridgeVpcInterfaceAttachmentPtrType) ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeVpcInterfaceAttachmentPtrOutput)
}

// The settings for attaching a VPC interface to an resource.
type BridgeVpcInterfaceAttachmentOutput struct{ *pulumi.OutputState }

func (BridgeVpcInterfaceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeVpcInterfaceAttachment)(nil)).Elem()
}

func (o BridgeVpcInterfaceAttachmentOutput) ToBridgeVpcInterfaceAttachmentOutput() BridgeVpcInterfaceAttachmentOutput {
	return o
}

func (o BridgeVpcInterfaceAttachmentOutput) ToBridgeVpcInterfaceAttachmentOutputWithContext(ctx context.Context) BridgeVpcInterfaceAttachmentOutput {
	return o
}

func (o BridgeVpcInterfaceAttachmentOutput) ToBridgeVpcInterfaceAttachmentPtrOutput() BridgeVpcInterfaceAttachmentPtrOutput {
	return o.ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (o BridgeVpcInterfaceAttachmentOutput) ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeVpcInterfaceAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeVpcInterfaceAttachment) *BridgeVpcInterfaceAttachment {
		return &v
	}).(BridgeVpcInterfaceAttachmentPtrOutput)
}

// The name of the VPC interface to use for this resource.
func (o BridgeVpcInterfaceAttachmentOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BridgeVpcInterfaceAttachment) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

type BridgeVpcInterfaceAttachmentPtrOutput struct{ *pulumi.OutputState }

func (BridgeVpcInterfaceAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeVpcInterfaceAttachment)(nil)).Elem()
}

func (o BridgeVpcInterfaceAttachmentPtrOutput) ToBridgeVpcInterfaceAttachmentPtrOutput() BridgeVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o BridgeVpcInterfaceAttachmentPtrOutput) ToBridgeVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) BridgeVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o BridgeVpcInterfaceAttachmentPtrOutput) Elem() BridgeVpcInterfaceAttachmentOutput {
	return o.ApplyT(func(v *BridgeVpcInterfaceAttachment) BridgeVpcInterfaceAttachment {
		if v != nil {
			return *v
		}
		var ret BridgeVpcInterfaceAttachment
		return ret
	}).(BridgeVpcInterfaceAttachmentOutput)
}

// The name of the VPC interface to use for this resource.
func (o BridgeVpcInterfaceAttachmentPtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeVpcInterfaceAttachment) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// Information about the encryption of the flow.
type FlowEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm *FlowEncryptionAlgorithm `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector *string `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId *string `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowEncryptionKeyType `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region *string `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId *string `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn *string `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url *string `pulumi:"url"`
}

// FlowEncryptionInput is an input type that accepts FlowEncryptionArgs and FlowEncryptionOutput values.
// You can construct a concrete instance of `FlowEncryptionInput` via:
//
//	FlowEncryptionArgs{...}
type FlowEncryptionInput interface {
	pulumi.Input

	ToFlowEncryptionOutput() FlowEncryptionOutput
	ToFlowEncryptionOutputWithContext(context.Context) FlowEncryptionOutput
}

// Information about the encryption of the flow.
type FlowEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowEncryptionAlgorithmPtrInput `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector pulumi.StringPtrInput `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (FlowEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryption)(nil)).Elem()
}

func (i FlowEncryptionArgs) ToFlowEncryptionOutput() FlowEncryptionOutput {
	return i.ToFlowEncryptionOutputWithContext(context.Background())
}

func (i FlowEncryptionArgs) ToFlowEncryptionOutputWithContext(ctx context.Context) FlowEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEncryptionOutput)
}

func (i FlowEncryptionArgs) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return i.ToFlowEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowEncryptionArgs) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEncryptionOutput).ToFlowEncryptionPtrOutputWithContext(ctx)
}

// FlowEncryptionPtrInput is an input type that accepts FlowEncryptionArgs, FlowEncryptionPtr and FlowEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowEncryptionPtrInput` via:
//
//	        FlowEncryptionArgs{...}
//
//	or:
//
//	        nil
type FlowEncryptionPtrInput interface {
	pulumi.Input

	ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput
	ToFlowEncryptionPtrOutputWithContext(context.Context) FlowEncryptionPtrOutput
}

type flowEncryptionPtrType FlowEncryptionArgs

func FlowEncryptionPtr(v *FlowEncryptionArgs) FlowEncryptionPtrInput {
	return (*flowEncryptionPtrType)(v)
}

func (*flowEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryption)(nil)).Elem()
}

func (i *flowEncryptionPtrType) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return i.ToFlowEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowEncryptionPtrType) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowEncryptionOutput struct{ *pulumi.OutputState }

func (FlowEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryption)(nil)).Elem()
}

func (o FlowEncryptionOutput) ToFlowEncryptionOutput() FlowEncryptionOutput {
	return o
}

func (o FlowEncryptionOutput) ToFlowEncryptionOutputWithContext(ctx context.Context) FlowEncryptionOutput {
	return o
}

func (o FlowEncryptionOutput) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return o.ToFlowEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionOutput) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEncryption) *FlowEncryption {
		return &v
	}).(FlowEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEncryptionOutput) Algorithm() FlowEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *FlowEncryptionAlgorithm { return v.Algorithm }).(FlowEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEncryptionOutput) KeyType() FlowEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowEncryption) *FlowEncryptionKeyType { return v.KeyType }).(FlowEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEncryptionOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type FlowEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryption)(nil)).Elem()
}

func (o FlowEncryptionPtrOutput) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return o
}

func (o FlowEncryptionPtrOutput) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return o
}

func (o FlowEncryptionPtrOutput) Elem() FlowEncryptionOutput {
	return o.ApplyT(func(v *FlowEncryption) FlowEncryption {
		if v != nil {
			return *v
		}
		var ret FlowEncryption
		return ret
	}).(FlowEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEncryptionPtrOutput) Algorithm() FlowEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *FlowEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(FlowEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.DeviceId
	}).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEncryptionPtrOutput) KeyType() FlowEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *FlowEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Information about the encryption of the flow.
type FlowEntitlementEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowEntitlementEncryptionAlgorithm `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector *string `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId *string `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowEntitlementEncryptionKeyType `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region *string `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId *string `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn *string `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url *string `pulumi:"url"`
}

// FlowEntitlementEncryptionInput is an input type that accepts FlowEntitlementEncryptionArgs and FlowEntitlementEncryptionOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionInput` via:
//
//	FlowEntitlementEncryptionArgs{...}
type FlowEntitlementEncryptionInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionOutput() FlowEntitlementEncryptionOutput
	ToFlowEntitlementEncryptionOutputWithContext(context.Context) FlowEntitlementEncryptionOutput
}

// Information about the encryption of the flow.
type FlowEntitlementEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowEntitlementEncryptionAlgorithmInput `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector pulumi.StringPtrInput `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowEntitlementEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (FlowEntitlementEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryption)(nil)).Elem()
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionOutput() FlowEntitlementEncryptionOutput {
	return i.ToFlowEntitlementEncryptionOutputWithContext(context.Background())
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionOutputWithContext(ctx context.Context) FlowEntitlementEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEntitlementEncryptionOutput)
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return i.ToFlowEntitlementEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEntitlementEncryptionOutput).ToFlowEntitlementEncryptionPtrOutputWithContext(ctx)
}

// FlowEntitlementEncryptionPtrInput is an input type that accepts FlowEntitlementEncryptionArgs, FlowEntitlementEncryptionPtr and FlowEntitlementEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionPtrInput` via:
//
//	        FlowEntitlementEncryptionArgs{...}
//
//	or:
//
//	        nil
type FlowEntitlementEncryptionPtrInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput
	ToFlowEntitlementEncryptionPtrOutputWithContext(context.Context) FlowEntitlementEncryptionPtrOutput
}

type flowEntitlementEncryptionPtrType FlowEntitlementEncryptionArgs

func FlowEntitlementEncryptionPtr(v *FlowEntitlementEncryptionArgs) FlowEntitlementEncryptionPtrInput {
	return (*flowEntitlementEncryptionPtrType)(v)
}

func (*flowEntitlementEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryption)(nil)).Elem()
}

func (i *flowEntitlementEncryptionPtrType) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return i.ToFlowEntitlementEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowEntitlementEncryptionPtrType) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEntitlementEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowEntitlementEncryptionOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryption)(nil)).Elem()
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionOutput() FlowEntitlementEncryptionOutput {
	return o
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionOutputWithContext(ctx context.Context) FlowEntitlementEncryptionOutput {
	return o
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return o.ToFlowEntitlementEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEncryption) *FlowEntitlementEncryption {
		return &v
	}).(FlowEntitlementEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEntitlementEncryptionOutput) Algorithm() FlowEntitlementEncryptionAlgorithmOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) FlowEntitlementEncryptionAlgorithm { return v.Algorithm }).(FlowEntitlementEncryptionAlgorithmOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEntitlementEncryptionOutput) KeyType() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *FlowEntitlementEncryptionKeyType { return v.KeyType }).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEntitlementEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEntitlementEncryptionOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type FlowEntitlementEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryption)(nil)).Elem()
}

func (o FlowEntitlementEncryptionPtrOutput) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionPtrOutput) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionPtrOutput) Elem() FlowEntitlementEncryptionOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) FlowEntitlementEncryption {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEncryption
		return ret
	}).(FlowEntitlementEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEntitlementEncryptionPtrOutput) Algorithm() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *FlowEntitlementEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.DeviceId
	}).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEntitlementEncryptionPtrOutput) KeyType() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *FlowEntitlementEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEntitlementEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEntitlementEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The settings for source failover
type FlowFailoverConfig struct {
	// The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
	FailoverMode *FlowFailoverConfigFailoverMode `pulumi:"failoverMode"`
	// Search window time to look for dash-7 packets
	RecoveryWindow *int `pulumi:"recoveryWindow"`
	// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
	SourcePriority *FlowFailoverConfigSourcePriorityProperties `pulumi:"sourcePriority"`
	// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
	State *FlowFailoverConfigState `pulumi:"state"`
}

// FlowFailoverConfigInput is an input type that accepts FlowFailoverConfigArgs and FlowFailoverConfigOutput values.
// You can construct a concrete instance of `FlowFailoverConfigInput` via:
//
//	FlowFailoverConfigArgs{...}
type FlowFailoverConfigInput interface {
	pulumi.Input

	ToFlowFailoverConfigOutput() FlowFailoverConfigOutput
	ToFlowFailoverConfigOutputWithContext(context.Context) FlowFailoverConfigOutput
}

// The settings for source failover
type FlowFailoverConfigArgs struct {
	// The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
	FailoverMode FlowFailoverConfigFailoverModePtrInput `pulumi:"failoverMode"`
	// Search window time to look for dash-7 packets
	RecoveryWindow pulumi.IntPtrInput `pulumi:"recoveryWindow"`
	// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
	SourcePriority FlowFailoverConfigSourcePriorityPropertiesPtrInput `pulumi:"sourcePriority"`
	// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
	State FlowFailoverConfigStatePtrInput `pulumi:"state"`
}

func (FlowFailoverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfig)(nil)).Elem()
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigOutput() FlowFailoverConfigOutput {
	return i.ToFlowFailoverConfigOutputWithContext(context.Background())
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigOutputWithContext(ctx context.Context) FlowFailoverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigOutput)
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return i.ToFlowFailoverConfigPtrOutputWithContext(context.Background())
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigOutput).ToFlowFailoverConfigPtrOutputWithContext(ctx)
}

// FlowFailoverConfigPtrInput is an input type that accepts FlowFailoverConfigArgs, FlowFailoverConfigPtr and FlowFailoverConfigPtrOutput values.
// You can construct a concrete instance of `FlowFailoverConfigPtrInput` via:
//
//	        FlowFailoverConfigArgs{...}
//
//	or:
//
//	        nil
type FlowFailoverConfigPtrInput interface {
	pulumi.Input

	ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput
	ToFlowFailoverConfigPtrOutputWithContext(context.Context) FlowFailoverConfigPtrOutput
}

type flowFailoverConfigPtrType FlowFailoverConfigArgs

func FlowFailoverConfigPtr(v *FlowFailoverConfigArgs) FlowFailoverConfigPtrInput {
	return (*flowFailoverConfigPtrType)(v)
}

func (*flowFailoverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfig)(nil)).Elem()
}

func (i *flowFailoverConfigPtrType) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return i.ToFlowFailoverConfigPtrOutputWithContext(context.Background())
}

func (i *flowFailoverConfigPtrType) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigPtrOutput)
}

// The settings for source failover
type FlowFailoverConfigOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfig)(nil)).Elem()
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigOutput() FlowFailoverConfigOutput {
	return o
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigOutputWithContext(ctx context.Context) FlowFailoverConfigOutput {
	return o
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return o.ToFlowFailoverConfigPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFailoverConfig) *FlowFailoverConfig {
		return &v
	}).(FlowFailoverConfigPtrOutput)
}

// The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
func (o FlowFailoverConfigOutput) FailoverMode() FlowFailoverConfigFailoverModePtrOutput {
	return o.ApplyT(func(v FlowFailoverConfig) *FlowFailoverConfigFailoverMode { return v.FailoverMode }).(FlowFailoverConfigFailoverModePtrOutput)
}

// Search window time to look for dash-7 packets
func (o FlowFailoverConfigOutput) RecoveryWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowFailoverConfig) *int { return v.RecoveryWindow }).(pulumi.IntPtrOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
func (o FlowFailoverConfigOutput) SourcePriority() FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return o.ApplyT(func(v FlowFailoverConfig) *FlowFailoverConfigSourcePriorityProperties { return v.SourcePriority }).(FlowFailoverConfigSourcePriorityPropertiesPtrOutput)
}

// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
func (o FlowFailoverConfigOutput) State() FlowFailoverConfigStatePtrOutput {
	return o.ApplyT(func(v FlowFailoverConfig) *FlowFailoverConfigState { return v.State }).(FlowFailoverConfigStatePtrOutput)
}

type FlowFailoverConfigPtrOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfig)(nil)).Elem()
}

func (o FlowFailoverConfigPtrOutput) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return o
}

func (o FlowFailoverConfigPtrOutput) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return o
}

func (o FlowFailoverConfigPtrOutput) Elem() FlowFailoverConfigOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) FlowFailoverConfig {
		if v != nil {
			return *v
		}
		var ret FlowFailoverConfig
		return ret
	}).(FlowFailoverConfigOutput)
}

// The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
func (o FlowFailoverConfigPtrOutput) FailoverMode() FlowFailoverConfigFailoverModePtrOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) *FlowFailoverConfigFailoverMode {
		if v == nil {
			return nil
		}
		return v.FailoverMode
	}).(FlowFailoverConfigFailoverModePtrOutput)
}

// Search window time to look for dash-7 packets
func (o FlowFailoverConfigPtrOutput) RecoveryWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) *int {
		if v == nil {
			return nil
		}
		return v.RecoveryWindow
	}).(pulumi.IntPtrOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
func (o FlowFailoverConfigPtrOutput) SourcePriority() FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) *FlowFailoverConfigSourcePriorityProperties {
		if v == nil {
			return nil
		}
		return v.SourcePriority
	}).(FlowFailoverConfigSourcePriorityPropertiesPtrOutput)
}

// The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
func (o FlowFailoverConfigPtrOutput) State() FlowFailoverConfigStatePtrOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) *FlowFailoverConfigState {
		if v == nil {
			return nil
		}
		return v.State
	}).(FlowFailoverConfigStatePtrOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
type FlowFailoverConfigSourcePriorityProperties struct {
	// The name of the source you choose as the primary source for this flow.
	PrimarySource string `pulumi:"primarySource"`
}

// FlowFailoverConfigSourcePriorityPropertiesInput is an input type that accepts FlowFailoverConfigSourcePriorityPropertiesArgs and FlowFailoverConfigSourcePriorityPropertiesOutput values.
// You can construct a concrete instance of `FlowFailoverConfigSourcePriorityPropertiesInput` via:
//
//	FlowFailoverConfigSourcePriorityPropertiesArgs{...}
type FlowFailoverConfigSourcePriorityPropertiesInput interface {
	pulumi.Input

	ToFlowFailoverConfigSourcePriorityPropertiesOutput() FlowFailoverConfigSourcePriorityPropertiesOutput
	ToFlowFailoverConfigSourcePriorityPropertiesOutputWithContext(context.Context) FlowFailoverConfigSourcePriorityPropertiesOutput
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
type FlowFailoverConfigSourcePriorityPropertiesArgs struct {
	// The name of the source you choose as the primary source for this flow.
	PrimarySource pulumi.StringInput `pulumi:"primarySource"`
}

func (FlowFailoverConfigSourcePriorityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigSourcePriorityProperties)(nil)).Elem()
}

func (i FlowFailoverConfigSourcePriorityPropertiesArgs) ToFlowFailoverConfigSourcePriorityPropertiesOutput() FlowFailoverConfigSourcePriorityPropertiesOutput {
	return i.ToFlowFailoverConfigSourcePriorityPropertiesOutputWithContext(context.Background())
}

func (i FlowFailoverConfigSourcePriorityPropertiesArgs) ToFlowFailoverConfigSourcePriorityPropertiesOutputWithContext(ctx context.Context) FlowFailoverConfigSourcePriorityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigSourcePriorityPropertiesOutput)
}

func (i FlowFailoverConfigSourcePriorityPropertiesArgs) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutput() FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return i.ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(context.Background())
}

func (i FlowFailoverConfigSourcePriorityPropertiesArgs) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(ctx context.Context) FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigSourcePriorityPropertiesOutput).ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(ctx)
}

// FlowFailoverConfigSourcePriorityPropertiesPtrInput is an input type that accepts FlowFailoverConfigSourcePriorityPropertiesArgs, FlowFailoverConfigSourcePriorityPropertiesPtr and FlowFailoverConfigSourcePriorityPropertiesPtrOutput values.
// You can construct a concrete instance of `FlowFailoverConfigSourcePriorityPropertiesPtrInput` via:
//
//	        FlowFailoverConfigSourcePriorityPropertiesArgs{...}
//
//	or:
//
//	        nil
type FlowFailoverConfigSourcePriorityPropertiesPtrInput interface {
	pulumi.Input

	ToFlowFailoverConfigSourcePriorityPropertiesPtrOutput() FlowFailoverConfigSourcePriorityPropertiesPtrOutput
	ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(context.Context) FlowFailoverConfigSourcePriorityPropertiesPtrOutput
}

type flowFailoverConfigSourcePriorityPropertiesPtrType FlowFailoverConfigSourcePriorityPropertiesArgs

func FlowFailoverConfigSourcePriorityPropertiesPtr(v *FlowFailoverConfigSourcePriorityPropertiesArgs) FlowFailoverConfigSourcePriorityPropertiesPtrInput {
	return (*flowFailoverConfigSourcePriorityPropertiesPtrType)(v)
}

func (*flowFailoverConfigSourcePriorityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfigSourcePriorityProperties)(nil)).Elem()
}

func (i *flowFailoverConfigSourcePriorityPropertiesPtrType) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutput() FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return i.ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(context.Background())
}

func (i *flowFailoverConfigSourcePriorityPropertiesPtrType) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(ctx context.Context) FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigSourcePriorityPropertiesPtrOutput)
}

// The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
type FlowFailoverConfigSourcePriorityPropertiesOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigSourcePriorityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigSourcePriorityProperties)(nil)).Elem()
}

func (o FlowFailoverConfigSourcePriorityPropertiesOutput) ToFlowFailoverConfigSourcePriorityPropertiesOutput() FlowFailoverConfigSourcePriorityPropertiesOutput {
	return o
}

func (o FlowFailoverConfigSourcePriorityPropertiesOutput) ToFlowFailoverConfigSourcePriorityPropertiesOutputWithContext(ctx context.Context) FlowFailoverConfigSourcePriorityPropertiesOutput {
	return o
}

func (o FlowFailoverConfigSourcePriorityPropertiesOutput) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutput() FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return o.ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigSourcePriorityPropertiesOutput) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(ctx context.Context) FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFailoverConfigSourcePriorityProperties) *FlowFailoverConfigSourcePriorityProperties {
		return &v
	}).(FlowFailoverConfigSourcePriorityPropertiesPtrOutput)
}

// The name of the source you choose as the primary source for this flow.
func (o FlowFailoverConfigSourcePriorityPropertiesOutput) PrimarySource() pulumi.StringOutput {
	return o.ApplyT(func(v FlowFailoverConfigSourcePriorityProperties) string { return v.PrimarySource }).(pulumi.StringOutput)
}

type FlowFailoverConfigSourcePriorityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigSourcePriorityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfigSourcePriorityProperties)(nil)).Elem()
}

func (o FlowFailoverConfigSourcePriorityPropertiesPtrOutput) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutput() FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return o
}

func (o FlowFailoverConfigSourcePriorityPropertiesPtrOutput) ToFlowFailoverConfigSourcePriorityPropertiesPtrOutputWithContext(ctx context.Context) FlowFailoverConfigSourcePriorityPropertiesPtrOutput {
	return o
}

func (o FlowFailoverConfigSourcePriorityPropertiesPtrOutput) Elem() FlowFailoverConfigSourcePriorityPropertiesOutput {
	return o.ApplyT(func(v *FlowFailoverConfigSourcePriorityProperties) FlowFailoverConfigSourcePriorityProperties {
		if v != nil {
			return *v
		}
		var ret FlowFailoverConfigSourcePriorityProperties
		return ret
	}).(FlowFailoverConfigSourcePriorityPropertiesOutput)
}

// The name of the source you choose as the primary source for this flow.
func (o FlowFailoverConfigSourcePriorityPropertiesPtrOutput) PrimarySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowFailoverConfigSourcePriorityProperties) *string {
		if v == nil {
			return nil
		}
		return &v.PrimarySource
	}).(pulumi.StringPtrOutput)
}

// A set of parameters that define the media stream.
type FlowFmtp struct {
	// The format of the audio channel.
	ChannelOrder *string `pulumi:"channelOrder"`
	// The format used for the representation of color.
	Colorimetry *FlowFmtpColorimetry `pulumi:"colorimetry"`
	// The frame rate for the video stream, in frames/second. For example: 60000/1001.
	ExactFramerate *string `pulumi:"exactFramerate"`
	// The pixel aspect ratio (PAR) of the video.
	Par *string `pulumi:"par"`
	// The encoding range of the video.
	Range *FlowFmtpRange `pulumi:"range"`
	// The type of compression that was used to smooth the video's appearance.
	ScanMode *FlowFmtpScanMode `pulumi:"scanMode"`
	// The transfer characteristic system (TCS) that is used in the video.
	Tcs *FlowFmtpTcs `pulumi:"tcs"`
}

// FlowFmtpInput is an input type that accepts FlowFmtpArgs and FlowFmtpOutput values.
// You can construct a concrete instance of `FlowFmtpInput` via:
//
//	FlowFmtpArgs{...}
type FlowFmtpInput interface {
	pulumi.Input

	ToFlowFmtpOutput() FlowFmtpOutput
	ToFlowFmtpOutputWithContext(context.Context) FlowFmtpOutput
}

// A set of parameters that define the media stream.
type FlowFmtpArgs struct {
	// The format of the audio channel.
	ChannelOrder pulumi.StringPtrInput `pulumi:"channelOrder"`
	// The format used for the representation of color.
	Colorimetry FlowFmtpColorimetryPtrInput `pulumi:"colorimetry"`
	// The frame rate for the video stream, in frames/second. For example: 60000/1001.
	ExactFramerate pulumi.StringPtrInput `pulumi:"exactFramerate"`
	// The pixel aspect ratio (PAR) of the video.
	Par pulumi.StringPtrInput `pulumi:"par"`
	// The encoding range of the video.
	Range FlowFmtpRangePtrInput `pulumi:"range"`
	// The type of compression that was used to smooth the video's appearance.
	ScanMode FlowFmtpScanModePtrInput `pulumi:"scanMode"`
	// The transfer characteristic system (TCS) that is used in the video.
	Tcs FlowFmtpTcsPtrInput `pulumi:"tcs"`
}

func (FlowFmtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFmtp)(nil)).Elem()
}

func (i FlowFmtpArgs) ToFlowFmtpOutput() FlowFmtpOutput {
	return i.ToFlowFmtpOutputWithContext(context.Background())
}

func (i FlowFmtpArgs) ToFlowFmtpOutputWithContext(ctx context.Context) FlowFmtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFmtpOutput)
}

func (i FlowFmtpArgs) ToFlowFmtpPtrOutput() FlowFmtpPtrOutput {
	return i.ToFlowFmtpPtrOutputWithContext(context.Background())
}

func (i FlowFmtpArgs) ToFlowFmtpPtrOutputWithContext(ctx context.Context) FlowFmtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFmtpOutput).ToFlowFmtpPtrOutputWithContext(ctx)
}

// FlowFmtpPtrInput is an input type that accepts FlowFmtpArgs, FlowFmtpPtr and FlowFmtpPtrOutput values.
// You can construct a concrete instance of `FlowFmtpPtrInput` via:
//
//	        FlowFmtpArgs{...}
//
//	or:
//
//	        nil
type FlowFmtpPtrInput interface {
	pulumi.Input

	ToFlowFmtpPtrOutput() FlowFmtpPtrOutput
	ToFlowFmtpPtrOutputWithContext(context.Context) FlowFmtpPtrOutput
}

type flowFmtpPtrType FlowFmtpArgs

func FlowFmtpPtr(v *FlowFmtpArgs) FlowFmtpPtrInput {
	return (*flowFmtpPtrType)(v)
}

func (*flowFmtpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFmtp)(nil)).Elem()
}

func (i *flowFmtpPtrType) ToFlowFmtpPtrOutput() FlowFmtpPtrOutput {
	return i.ToFlowFmtpPtrOutputWithContext(context.Background())
}

func (i *flowFmtpPtrType) ToFlowFmtpPtrOutputWithContext(ctx context.Context) FlowFmtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFmtpPtrOutput)
}

// A set of parameters that define the media stream.
type FlowFmtpOutput struct{ *pulumi.OutputState }

func (FlowFmtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFmtp)(nil)).Elem()
}

func (o FlowFmtpOutput) ToFlowFmtpOutput() FlowFmtpOutput {
	return o
}

func (o FlowFmtpOutput) ToFlowFmtpOutputWithContext(ctx context.Context) FlowFmtpOutput {
	return o
}

func (o FlowFmtpOutput) ToFlowFmtpPtrOutput() FlowFmtpPtrOutput {
	return o.ToFlowFmtpPtrOutputWithContext(context.Background())
}

func (o FlowFmtpOutput) ToFlowFmtpPtrOutputWithContext(ctx context.Context) FlowFmtpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFmtp) *FlowFmtp {
		return &v
	}).(FlowFmtpPtrOutput)
}

// The format of the audio channel.
func (o FlowFmtpOutput) ChannelOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowFmtp) *string { return v.ChannelOrder }).(pulumi.StringPtrOutput)
}

// The format used for the representation of color.
func (o FlowFmtpOutput) Colorimetry() FlowFmtpColorimetryPtrOutput {
	return o.ApplyT(func(v FlowFmtp) *FlowFmtpColorimetry { return v.Colorimetry }).(FlowFmtpColorimetryPtrOutput)
}

// The frame rate for the video stream, in frames/second. For example: 60000/1001.
func (o FlowFmtpOutput) ExactFramerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowFmtp) *string { return v.ExactFramerate }).(pulumi.StringPtrOutput)
}

// The pixel aspect ratio (PAR) of the video.
func (o FlowFmtpOutput) Par() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowFmtp) *string { return v.Par }).(pulumi.StringPtrOutput)
}

// The encoding range of the video.
func (o FlowFmtpOutput) Range() FlowFmtpRangePtrOutput {
	return o.ApplyT(func(v FlowFmtp) *FlowFmtpRange { return v.Range }).(FlowFmtpRangePtrOutput)
}

// The type of compression that was used to smooth the video's appearance.
func (o FlowFmtpOutput) ScanMode() FlowFmtpScanModePtrOutput {
	return o.ApplyT(func(v FlowFmtp) *FlowFmtpScanMode { return v.ScanMode }).(FlowFmtpScanModePtrOutput)
}

// The transfer characteristic system (TCS) that is used in the video.
func (o FlowFmtpOutput) Tcs() FlowFmtpTcsPtrOutput {
	return o.ApplyT(func(v FlowFmtp) *FlowFmtpTcs { return v.Tcs }).(FlowFmtpTcsPtrOutput)
}

type FlowFmtpPtrOutput struct{ *pulumi.OutputState }

func (FlowFmtpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFmtp)(nil)).Elem()
}

func (o FlowFmtpPtrOutput) ToFlowFmtpPtrOutput() FlowFmtpPtrOutput {
	return o
}

func (o FlowFmtpPtrOutput) ToFlowFmtpPtrOutputWithContext(ctx context.Context) FlowFmtpPtrOutput {
	return o
}

func (o FlowFmtpPtrOutput) Elem() FlowFmtpOutput {
	return o.ApplyT(func(v *FlowFmtp) FlowFmtp {
		if v != nil {
			return *v
		}
		var ret FlowFmtp
		return ret
	}).(FlowFmtpOutput)
}

// The format of the audio channel.
func (o FlowFmtpPtrOutput) ChannelOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowFmtp) *string {
		if v == nil {
			return nil
		}
		return v.ChannelOrder
	}).(pulumi.StringPtrOutput)
}

// The format used for the representation of color.
func (o FlowFmtpPtrOutput) Colorimetry() FlowFmtpColorimetryPtrOutput {
	return o.ApplyT(func(v *FlowFmtp) *FlowFmtpColorimetry {
		if v == nil {
			return nil
		}
		return v.Colorimetry
	}).(FlowFmtpColorimetryPtrOutput)
}

// The frame rate for the video stream, in frames/second. For example: 60000/1001.
func (o FlowFmtpPtrOutput) ExactFramerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowFmtp) *string {
		if v == nil {
			return nil
		}
		return v.ExactFramerate
	}).(pulumi.StringPtrOutput)
}

// The pixel aspect ratio (PAR) of the video.
func (o FlowFmtpPtrOutput) Par() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowFmtp) *string {
		if v == nil {
			return nil
		}
		return v.Par
	}).(pulumi.StringPtrOutput)
}

// The encoding range of the video.
func (o FlowFmtpPtrOutput) Range() FlowFmtpRangePtrOutput {
	return o.ApplyT(func(v *FlowFmtp) *FlowFmtpRange {
		if v == nil {
			return nil
		}
		return v.Range
	}).(FlowFmtpRangePtrOutput)
}

// The type of compression that was used to smooth the video's appearance.
func (o FlowFmtpPtrOutput) ScanMode() FlowFmtpScanModePtrOutput {
	return o.ApplyT(func(v *FlowFmtp) *FlowFmtpScanMode {
		if v == nil {
			return nil
		}
		return v.ScanMode
	}).(FlowFmtpScanModePtrOutput)
}

// The transfer characteristic system (TCS) that is used in the video.
func (o FlowFmtpPtrOutput) Tcs() FlowFmtpTcsPtrOutput {
	return o.ApplyT(func(v *FlowFmtp) *FlowFmtpTcs {
		if v == nil {
			return nil
		}
		return v.Tcs
	}).(FlowFmtpTcsPtrOutput)
}

// The source configuration for cloud flows receiving a stream from a bridge.
type FlowGatewayBridgeSource struct {
	// The ARN of the bridge feeding this flow.
	BridgeArn string `pulumi:"bridgeArn"`
	// The name of the VPC interface attachment to use for this bridge source.
	VpcInterfaceAttachment *FlowVpcInterfaceAttachment `pulumi:"vpcInterfaceAttachment"`
}

// FlowGatewayBridgeSourceInput is an input type that accepts FlowGatewayBridgeSourceArgs and FlowGatewayBridgeSourceOutput values.
// You can construct a concrete instance of `FlowGatewayBridgeSourceInput` via:
//
//	FlowGatewayBridgeSourceArgs{...}
type FlowGatewayBridgeSourceInput interface {
	pulumi.Input

	ToFlowGatewayBridgeSourceOutput() FlowGatewayBridgeSourceOutput
	ToFlowGatewayBridgeSourceOutputWithContext(context.Context) FlowGatewayBridgeSourceOutput
}

// The source configuration for cloud flows receiving a stream from a bridge.
type FlowGatewayBridgeSourceArgs struct {
	// The ARN of the bridge feeding this flow.
	BridgeArn pulumi.StringInput `pulumi:"bridgeArn"`
	// The name of the VPC interface attachment to use for this bridge source.
	VpcInterfaceAttachment FlowVpcInterfaceAttachmentPtrInput `pulumi:"vpcInterfaceAttachment"`
}

func (FlowGatewayBridgeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowGatewayBridgeSource)(nil)).Elem()
}

func (i FlowGatewayBridgeSourceArgs) ToFlowGatewayBridgeSourceOutput() FlowGatewayBridgeSourceOutput {
	return i.ToFlowGatewayBridgeSourceOutputWithContext(context.Background())
}

func (i FlowGatewayBridgeSourceArgs) ToFlowGatewayBridgeSourceOutputWithContext(ctx context.Context) FlowGatewayBridgeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowGatewayBridgeSourceOutput)
}

func (i FlowGatewayBridgeSourceArgs) ToFlowGatewayBridgeSourcePtrOutput() FlowGatewayBridgeSourcePtrOutput {
	return i.ToFlowGatewayBridgeSourcePtrOutputWithContext(context.Background())
}

func (i FlowGatewayBridgeSourceArgs) ToFlowGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowGatewayBridgeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowGatewayBridgeSourceOutput).ToFlowGatewayBridgeSourcePtrOutputWithContext(ctx)
}

// FlowGatewayBridgeSourcePtrInput is an input type that accepts FlowGatewayBridgeSourceArgs, FlowGatewayBridgeSourcePtr and FlowGatewayBridgeSourcePtrOutput values.
// You can construct a concrete instance of `FlowGatewayBridgeSourcePtrInput` via:
//
//	        FlowGatewayBridgeSourceArgs{...}
//
//	or:
//
//	        nil
type FlowGatewayBridgeSourcePtrInput interface {
	pulumi.Input

	ToFlowGatewayBridgeSourcePtrOutput() FlowGatewayBridgeSourcePtrOutput
	ToFlowGatewayBridgeSourcePtrOutputWithContext(context.Context) FlowGatewayBridgeSourcePtrOutput
}

type flowGatewayBridgeSourcePtrType FlowGatewayBridgeSourceArgs

func FlowGatewayBridgeSourcePtr(v *FlowGatewayBridgeSourceArgs) FlowGatewayBridgeSourcePtrInput {
	return (*flowGatewayBridgeSourcePtrType)(v)
}

func (*flowGatewayBridgeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowGatewayBridgeSource)(nil)).Elem()
}

func (i *flowGatewayBridgeSourcePtrType) ToFlowGatewayBridgeSourcePtrOutput() FlowGatewayBridgeSourcePtrOutput {
	return i.ToFlowGatewayBridgeSourcePtrOutputWithContext(context.Background())
}

func (i *flowGatewayBridgeSourcePtrType) ToFlowGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowGatewayBridgeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowGatewayBridgeSourcePtrOutput)
}

// The source configuration for cloud flows receiving a stream from a bridge.
type FlowGatewayBridgeSourceOutput struct{ *pulumi.OutputState }

func (FlowGatewayBridgeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowGatewayBridgeSource)(nil)).Elem()
}

func (o FlowGatewayBridgeSourceOutput) ToFlowGatewayBridgeSourceOutput() FlowGatewayBridgeSourceOutput {
	return o
}

func (o FlowGatewayBridgeSourceOutput) ToFlowGatewayBridgeSourceOutputWithContext(ctx context.Context) FlowGatewayBridgeSourceOutput {
	return o
}

func (o FlowGatewayBridgeSourceOutput) ToFlowGatewayBridgeSourcePtrOutput() FlowGatewayBridgeSourcePtrOutput {
	return o.ToFlowGatewayBridgeSourcePtrOutputWithContext(context.Background())
}

func (o FlowGatewayBridgeSourceOutput) ToFlowGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowGatewayBridgeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowGatewayBridgeSource) *FlowGatewayBridgeSource {
		return &v
	}).(FlowGatewayBridgeSourcePtrOutput)
}

// The ARN of the bridge feeding this flow.
func (o FlowGatewayBridgeSourceOutput) BridgeArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowGatewayBridgeSource) string { return v.BridgeArn }).(pulumi.StringOutput)
}

// The name of the VPC interface attachment to use for this bridge source.
func (o FlowGatewayBridgeSourceOutput) VpcInterfaceAttachment() FlowVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v FlowGatewayBridgeSource) *FlowVpcInterfaceAttachment { return v.VpcInterfaceAttachment }).(FlowVpcInterfaceAttachmentPtrOutput)
}

type FlowGatewayBridgeSourcePtrOutput struct{ *pulumi.OutputState }

func (FlowGatewayBridgeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowGatewayBridgeSource)(nil)).Elem()
}

func (o FlowGatewayBridgeSourcePtrOutput) ToFlowGatewayBridgeSourcePtrOutput() FlowGatewayBridgeSourcePtrOutput {
	return o
}

func (o FlowGatewayBridgeSourcePtrOutput) ToFlowGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowGatewayBridgeSourcePtrOutput {
	return o
}

func (o FlowGatewayBridgeSourcePtrOutput) Elem() FlowGatewayBridgeSourceOutput {
	return o.ApplyT(func(v *FlowGatewayBridgeSource) FlowGatewayBridgeSource {
		if v != nil {
			return *v
		}
		var ret FlowGatewayBridgeSource
		return ret
	}).(FlowGatewayBridgeSourceOutput)
}

// The ARN of the bridge feeding this flow.
func (o FlowGatewayBridgeSourcePtrOutput) BridgeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowGatewayBridgeSource) *string {
		if v == nil {
			return nil
		}
		return &v.BridgeArn
	}).(pulumi.StringPtrOutput)
}

// The name of the VPC interface attachment to use for this bridge source.
func (o FlowGatewayBridgeSourcePtrOutput) VpcInterfaceAttachment() FlowVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v *FlowGatewayBridgeSource) *FlowVpcInterfaceAttachment {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceAttachment
	}).(FlowVpcInterfaceAttachmentPtrOutput)
}

// The transport parameters associated with an incoming media stream.
type FlowInputConfiguration struct {
	// The port that the flow listens on for an incoming media stream.
	InputPort int `pulumi:"inputPort"`
	// The VPC interface where the media stream comes in from.
	Interface FlowInterface `pulumi:"interface"`
}

// FlowInputConfigurationInput is an input type that accepts FlowInputConfigurationArgs and FlowInputConfigurationOutput values.
// You can construct a concrete instance of `FlowInputConfigurationInput` via:
//
//	FlowInputConfigurationArgs{...}
type FlowInputConfigurationInput interface {
	pulumi.Input

	ToFlowInputConfigurationOutput() FlowInputConfigurationOutput
	ToFlowInputConfigurationOutputWithContext(context.Context) FlowInputConfigurationOutput
}

// The transport parameters associated with an incoming media stream.
type FlowInputConfigurationArgs struct {
	// The port that the flow listens on for an incoming media stream.
	InputPort pulumi.IntInput `pulumi:"inputPort"`
	// The VPC interface where the media stream comes in from.
	Interface FlowInterfaceInput `pulumi:"interface"`
}

func (FlowInputConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowInputConfiguration)(nil)).Elem()
}

func (i FlowInputConfigurationArgs) ToFlowInputConfigurationOutput() FlowInputConfigurationOutput {
	return i.ToFlowInputConfigurationOutputWithContext(context.Background())
}

func (i FlowInputConfigurationArgs) ToFlowInputConfigurationOutputWithContext(ctx context.Context) FlowInputConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowInputConfigurationOutput)
}

// FlowInputConfigurationArrayInput is an input type that accepts FlowInputConfigurationArray and FlowInputConfigurationArrayOutput values.
// You can construct a concrete instance of `FlowInputConfigurationArrayInput` via:
//
//	FlowInputConfigurationArray{ FlowInputConfigurationArgs{...} }
type FlowInputConfigurationArrayInput interface {
	pulumi.Input

	ToFlowInputConfigurationArrayOutput() FlowInputConfigurationArrayOutput
	ToFlowInputConfigurationArrayOutputWithContext(context.Context) FlowInputConfigurationArrayOutput
}

type FlowInputConfigurationArray []FlowInputConfigurationInput

func (FlowInputConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowInputConfiguration)(nil)).Elem()
}

func (i FlowInputConfigurationArray) ToFlowInputConfigurationArrayOutput() FlowInputConfigurationArrayOutput {
	return i.ToFlowInputConfigurationArrayOutputWithContext(context.Background())
}

func (i FlowInputConfigurationArray) ToFlowInputConfigurationArrayOutputWithContext(ctx context.Context) FlowInputConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowInputConfigurationArrayOutput)
}

// The transport parameters associated with an incoming media stream.
type FlowInputConfigurationOutput struct{ *pulumi.OutputState }

func (FlowInputConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowInputConfiguration)(nil)).Elem()
}

func (o FlowInputConfigurationOutput) ToFlowInputConfigurationOutput() FlowInputConfigurationOutput {
	return o
}

func (o FlowInputConfigurationOutput) ToFlowInputConfigurationOutputWithContext(ctx context.Context) FlowInputConfigurationOutput {
	return o
}

// The port that the flow listens on for an incoming media stream.
func (o FlowInputConfigurationOutput) InputPort() pulumi.IntOutput {
	return o.ApplyT(func(v FlowInputConfiguration) int { return v.InputPort }).(pulumi.IntOutput)
}

// The VPC interface where the media stream comes in from.
func (o FlowInputConfigurationOutput) Interface() FlowInterfaceOutput {
	return o.ApplyT(func(v FlowInputConfiguration) FlowInterface { return v.Interface }).(FlowInterfaceOutput)
}

type FlowInputConfigurationArrayOutput struct{ *pulumi.OutputState }

func (FlowInputConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowInputConfiguration)(nil)).Elem()
}

func (o FlowInputConfigurationArrayOutput) ToFlowInputConfigurationArrayOutput() FlowInputConfigurationArrayOutput {
	return o
}

func (o FlowInputConfigurationArrayOutput) ToFlowInputConfigurationArrayOutputWithContext(ctx context.Context) FlowInputConfigurationArrayOutput {
	return o
}

func (o FlowInputConfigurationArrayOutput) Index(i pulumi.IntInput) FlowInputConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowInputConfiguration {
		return vs[0].([]FlowInputConfiguration)[vs[1].(int)]
	}).(FlowInputConfigurationOutput)
}

// The VPC interface that you want to use for the media stream associated with the output.
type FlowInterface struct {
	// The name of the VPC interface that you want to use for the media stream associated with the output.
	Name string `pulumi:"name"`
}

// FlowInterfaceInput is an input type that accepts FlowInterfaceArgs and FlowInterfaceOutput values.
// You can construct a concrete instance of `FlowInterfaceInput` via:
//
//	FlowInterfaceArgs{...}
type FlowInterfaceInput interface {
	pulumi.Input

	ToFlowInterfaceOutput() FlowInterfaceOutput
	ToFlowInterfaceOutputWithContext(context.Context) FlowInterfaceOutput
}

// The VPC interface that you want to use for the media stream associated with the output.
type FlowInterfaceArgs struct {
	// The name of the VPC interface that you want to use for the media stream associated with the output.
	Name pulumi.StringInput `pulumi:"name"`
}

func (FlowInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowInterface)(nil)).Elem()
}

func (i FlowInterfaceArgs) ToFlowInterfaceOutput() FlowInterfaceOutput {
	return i.ToFlowInterfaceOutputWithContext(context.Background())
}

func (i FlowInterfaceArgs) ToFlowInterfaceOutputWithContext(ctx context.Context) FlowInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowInterfaceOutput)
}

// The VPC interface that you want to use for the media stream associated with the output.
type FlowInterfaceOutput struct{ *pulumi.OutputState }

func (FlowInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowInterface)(nil)).Elem()
}

func (o FlowInterfaceOutput) ToFlowInterfaceOutput() FlowInterfaceOutput {
	return o
}

func (o FlowInterfaceOutput) ToFlowInterfaceOutputWithContext(ctx context.Context) FlowInterfaceOutput {
	return o
}

// The name of the VPC interface that you want to use for the media stream associated with the output.
func (o FlowInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FlowInterface) string { return v.Name }).(pulumi.StringOutput)
}

// The maintenance setting of a flow.
type FlowMaintenance struct {
	// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
	MaintenanceDay FlowMaintenanceMaintenanceDay `pulumi:"maintenanceDay"`
	// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
	MaintenanceStartHour string `pulumi:"maintenanceStartHour"`
}

// FlowMaintenanceInput is an input type that accepts FlowMaintenanceArgs and FlowMaintenanceOutput values.
// You can construct a concrete instance of `FlowMaintenanceInput` via:
//
//	FlowMaintenanceArgs{...}
type FlowMaintenanceInput interface {
	pulumi.Input

	ToFlowMaintenanceOutput() FlowMaintenanceOutput
	ToFlowMaintenanceOutputWithContext(context.Context) FlowMaintenanceOutput
}

// The maintenance setting of a flow.
type FlowMaintenanceArgs struct {
	// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
	MaintenanceDay FlowMaintenanceMaintenanceDayInput `pulumi:"maintenanceDay"`
	// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
	MaintenanceStartHour pulumi.StringInput `pulumi:"maintenanceStartHour"`
}

func (FlowMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMaintenance)(nil)).Elem()
}

func (i FlowMaintenanceArgs) ToFlowMaintenanceOutput() FlowMaintenanceOutput {
	return i.ToFlowMaintenanceOutputWithContext(context.Background())
}

func (i FlowMaintenanceArgs) ToFlowMaintenanceOutputWithContext(ctx context.Context) FlowMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMaintenanceOutput)
}

func (i FlowMaintenanceArgs) ToFlowMaintenancePtrOutput() FlowMaintenancePtrOutput {
	return i.ToFlowMaintenancePtrOutputWithContext(context.Background())
}

func (i FlowMaintenanceArgs) ToFlowMaintenancePtrOutputWithContext(ctx context.Context) FlowMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMaintenanceOutput).ToFlowMaintenancePtrOutputWithContext(ctx)
}

// FlowMaintenancePtrInput is an input type that accepts FlowMaintenanceArgs, FlowMaintenancePtr and FlowMaintenancePtrOutput values.
// You can construct a concrete instance of `FlowMaintenancePtrInput` via:
//
//	        FlowMaintenanceArgs{...}
//
//	or:
//
//	        nil
type FlowMaintenancePtrInput interface {
	pulumi.Input

	ToFlowMaintenancePtrOutput() FlowMaintenancePtrOutput
	ToFlowMaintenancePtrOutputWithContext(context.Context) FlowMaintenancePtrOutput
}

type flowMaintenancePtrType FlowMaintenanceArgs

func FlowMaintenancePtr(v *FlowMaintenanceArgs) FlowMaintenancePtrInput {
	return (*flowMaintenancePtrType)(v)
}

func (*flowMaintenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowMaintenance)(nil)).Elem()
}

func (i *flowMaintenancePtrType) ToFlowMaintenancePtrOutput() FlowMaintenancePtrOutput {
	return i.ToFlowMaintenancePtrOutputWithContext(context.Background())
}

func (i *flowMaintenancePtrType) ToFlowMaintenancePtrOutputWithContext(ctx context.Context) FlowMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMaintenancePtrOutput)
}

// The maintenance setting of a flow.
type FlowMaintenanceOutput struct{ *pulumi.OutputState }

func (FlowMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMaintenance)(nil)).Elem()
}

func (o FlowMaintenanceOutput) ToFlowMaintenanceOutput() FlowMaintenanceOutput {
	return o
}

func (o FlowMaintenanceOutput) ToFlowMaintenanceOutputWithContext(ctx context.Context) FlowMaintenanceOutput {
	return o
}

func (o FlowMaintenanceOutput) ToFlowMaintenancePtrOutput() FlowMaintenancePtrOutput {
	return o.ToFlowMaintenancePtrOutputWithContext(context.Background())
}

func (o FlowMaintenanceOutput) ToFlowMaintenancePtrOutputWithContext(ctx context.Context) FlowMaintenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowMaintenance) *FlowMaintenance {
		return &v
	}).(FlowMaintenancePtrOutput)
}

// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
func (o FlowMaintenanceOutput) MaintenanceDay() FlowMaintenanceMaintenanceDayOutput {
	return o.ApplyT(func(v FlowMaintenance) FlowMaintenanceMaintenanceDay { return v.MaintenanceDay }).(FlowMaintenanceMaintenanceDayOutput)
}

// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
func (o FlowMaintenanceOutput) MaintenanceStartHour() pulumi.StringOutput {
	return o.ApplyT(func(v FlowMaintenance) string { return v.MaintenanceStartHour }).(pulumi.StringOutput)
}

type FlowMaintenancePtrOutput struct{ *pulumi.OutputState }

func (FlowMaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowMaintenance)(nil)).Elem()
}

func (o FlowMaintenancePtrOutput) ToFlowMaintenancePtrOutput() FlowMaintenancePtrOutput {
	return o
}

func (o FlowMaintenancePtrOutput) ToFlowMaintenancePtrOutputWithContext(ctx context.Context) FlowMaintenancePtrOutput {
	return o
}

func (o FlowMaintenancePtrOutput) Elem() FlowMaintenanceOutput {
	return o.ApplyT(func(v *FlowMaintenance) FlowMaintenance {
		if v != nil {
			return *v
		}
		var ret FlowMaintenance
		return ret
	}).(FlowMaintenanceOutput)
}

// A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
func (o FlowMaintenancePtrOutput) MaintenanceDay() FlowMaintenanceMaintenanceDayPtrOutput {
	return o.ApplyT(func(v *FlowMaintenance) *FlowMaintenanceMaintenanceDay {
		if v == nil {
			return nil
		}
		return &v.MaintenanceDay
	}).(FlowMaintenanceMaintenanceDayPtrOutput)
}

// UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
func (o FlowMaintenancePtrOutput) MaintenanceStartHour() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowMaintenance) *string {
		if v == nil {
			return nil
		}
		return &v.MaintenanceStartHour
	}).(pulumi.StringPtrOutput)
}

// A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
type FlowMediaStream struct {
	// Attributes that are related to the media stream.
	Attributes *FlowMediaStreamAttributes `pulumi:"attributes"`
	// The sample rate for the stream. This value in measured in kHz.
	ClockRate *int `pulumi:"clockRate"`
	// A description that can help you quickly identify what your media stream is used for.
	Description *string `pulumi:"description"`
	// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
	Fmt *int `pulumi:"fmt"`
	// A unique identifier for the media stream.
	MediaStreamId int `pulumi:"mediaStreamId"`
	// A name that helps you distinguish one media stream from another.
	MediaStreamName string `pulumi:"mediaStreamName"`
	// The type of media stream.
	MediaStreamType FlowMediaStreamMediaStreamType `pulumi:"mediaStreamType"`
	// The resolution of the video.
	VideoFormat *FlowMediaStreamVideoFormat `pulumi:"videoFormat"`
}

// FlowMediaStreamInput is an input type that accepts FlowMediaStreamArgs and FlowMediaStreamOutput values.
// You can construct a concrete instance of `FlowMediaStreamInput` via:
//
//	FlowMediaStreamArgs{...}
type FlowMediaStreamInput interface {
	pulumi.Input

	ToFlowMediaStreamOutput() FlowMediaStreamOutput
	ToFlowMediaStreamOutputWithContext(context.Context) FlowMediaStreamOutput
}

// A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
type FlowMediaStreamArgs struct {
	// Attributes that are related to the media stream.
	Attributes FlowMediaStreamAttributesPtrInput `pulumi:"attributes"`
	// The sample rate for the stream. This value in measured in kHz.
	ClockRate pulumi.IntPtrInput `pulumi:"clockRate"`
	// A description that can help you quickly identify what your media stream is used for.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
	Fmt pulumi.IntPtrInput `pulumi:"fmt"`
	// A unique identifier for the media stream.
	MediaStreamId pulumi.IntInput `pulumi:"mediaStreamId"`
	// A name that helps you distinguish one media stream from another.
	MediaStreamName pulumi.StringInput `pulumi:"mediaStreamName"`
	// The type of media stream.
	MediaStreamType FlowMediaStreamMediaStreamTypeInput `pulumi:"mediaStreamType"`
	// The resolution of the video.
	VideoFormat FlowMediaStreamVideoFormatPtrInput `pulumi:"videoFormat"`
}

func (FlowMediaStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMediaStream)(nil)).Elem()
}

func (i FlowMediaStreamArgs) ToFlowMediaStreamOutput() FlowMediaStreamOutput {
	return i.ToFlowMediaStreamOutputWithContext(context.Background())
}

func (i FlowMediaStreamArgs) ToFlowMediaStreamOutputWithContext(ctx context.Context) FlowMediaStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMediaStreamOutput)
}

// FlowMediaStreamArrayInput is an input type that accepts FlowMediaStreamArray and FlowMediaStreamArrayOutput values.
// You can construct a concrete instance of `FlowMediaStreamArrayInput` via:
//
//	FlowMediaStreamArray{ FlowMediaStreamArgs{...} }
type FlowMediaStreamArrayInput interface {
	pulumi.Input

	ToFlowMediaStreamArrayOutput() FlowMediaStreamArrayOutput
	ToFlowMediaStreamArrayOutputWithContext(context.Context) FlowMediaStreamArrayOutput
}

type FlowMediaStreamArray []FlowMediaStreamInput

func (FlowMediaStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowMediaStream)(nil)).Elem()
}

func (i FlowMediaStreamArray) ToFlowMediaStreamArrayOutput() FlowMediaStreamArrayOutput {
	return i.ToFlowMediaStreamArrayOutputWithContext(context.Background())
}

func (i FlowMediaStreamArray) ToFlowMediaStreamArrayOutputWithContext(ctx context.Context) FlowMediaStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMediaStreamArrayOutput)
}

// A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
type FlowMediaStreamOutput struct{ *pulumi.OutputState }

func (FlowMediaStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMediaStream)(nil)).Elem()
}

func (o FlowMediaStreamOutput) ToFlowMediaStreamOutput() FlowMediaStreamOutput {
	return o
}

func (o FlowMediaStreamOutput) ToFlowMediaStreamOutputWithContext(ctx context.Context) FlowMediaStreamOutput {
	return o
}

// Attributes that are related to the media stream.
func (o FlowMediaStreamOutput) Attributes() FlowMediaStreamAttributesPtrOutput {
	return o.ApplyT(func(v FlowMediaStream) *FlowMediaStreamAttributes { return v.Attributes }).(FlowMediaStreamAttributesPtrOutput)
}

// The sample rate for the stream. This value in measured in kHz.
func (o FlowMediaStreamOutput) ClockRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowMediaStream) *int { return v.ClockRate }).(pulumi.IntPtrOutput)
}

// A description that can help you quickly identify what your media stream is used for.
func (o FlowMediaStreamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowMediaStream) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
func (o FlowMediaStreamOutput) Fmt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowMediaStream) *int { return v.Fmt }).(pulumi.IntPtrOutput)
}

// A unique identifier for the media stream.
func (o FlowMediaStreamOutput) MediaStreamId() pulumi.IntOutput {
	return o.ApplyT(func(v FlowMediaStream) int { return v.MediaStreamId }).(pulumi.IntOutput)
}

// A name that helps you distinguish one media stream from another.
func (o FlowMediaStreamOutput) MediaStreamName() pulumi.StringOutput {
	return o.ApplyT(func(v FlowMediaStream) string { return v.MediaStreamName }).(pulumi.StringOutput)
}

// The type of media stream.
func (o FlowMediaStreamOutput) MediaStreamType() FlowMediaStreamMediaStreamTypeOutput {
	return o.ApplyT(func(v FlowMediaStream) FlowMediaStreamMediaStreamType { return v.MediaStreamType }).(FlowMediaStreamMediaStreamTypeOutput)
}

// The resolution of the video.
func (o FlowMediaStreamOutput) VideoFormat() FlowMediaStreamVideoFormatPtrOutput {
	return o.ApplyT(func(v FlowMediaStream) *FlowMediaStreamVideoFormat { return v.VideoFormat }).(FlowMediaStreamVideoFormatPtrOutput)
}

type FlowMediaStreamArrayOutput struct{ *pulumi.OutputState }

func (FlowMediaStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowMediaStream)(nil)).Elem()
}

func (o FlowMediaStreamArrayOutput) ToFlowMediaStreamArrayOutput() FlowMediaStreamArrayOutput {
	return o
}

func (o FlowMediaStreamArrayOutput) ToFlowMediaStreamArrayOutputWithContext(ctx context.Context) FlowMediaStreamArrayOutput {
	return o
}

func (o FlowMediaStreamArrayOutput) Index(i pulumi.IntInput) FlowMediaStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowMediaStream {
		return vs[0].([]FlowMediaStream)[vs[1].(int)]
	}).(FlowMediaStreamOutput)
}

// Attributes that are related to the media stream.
type FlowMediaStreamAttributes struct {
	// A set of parameters that define the media stream.
	Fmtp *FlowFmtp `pulumi:"fmtp"`
	// The audio language, in a format that is recognized by the receiver.
	Lang *string `pulumi:"lang"`
}

// FlowMediaStreamAttributesInput is an input type that accepts FlowMediaStreamAttributesArgs and FlowMediaStreamAttributesOutput values.
// You can construct a concrete instance of `FlowMediaStreamAttributesInput` via:
//
//	FlowMediaStreamAttributesArgs{...}
type FlowMediaStreamAttributesInput interface {
	pulumi.Input

	ToFlowMediaStreamAttributesOutput() FlowMediaStreamAttributesOutput
	ToFlowMediaStreamAttributesOutputWithContext(context.Context) FlowMediaStreamAttributesOutput
}

// Attributes that are related to the media stream.
type FlowMediaStreamAttributesArgs struct {
	// A set of parameters that define the media stream.
	Fmtp FlowFmtpPtrInput `pulumi:"fmtp"`
	// The audio language, in a format that is recognized by the receiver.
	Lang pulumi.StringPtrInput `pulumi:"lang"`
}

func (FlowMediaStreamAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMediaStreamAttributes)(nil)).Elem()
}

func (i FlowMediaStreamAttributesArgs) ToFlowMediaStreamAttributesOutput() FlowMediaStreamAttributesOutput {
	return i.ToFlowMediaStreamAttributesOutputWithContext(context.Background())
}

func (i FlowMediaStreamAttributesArgs) ToFlowMediaStreamAttributesOutputWithContext(ctx context.Context) FlowMediaStreamAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMediaStreamAttributesOutput)
}

func (i FlowMediaStreamAttributesArgs) ToFlowMediaStreamAttributesPtrOutput() FlowMediaStreamAttributesPtrOutput {
	return i.ToFlowMediaStreamAttributesPtrOutputWithContext(context.Background())
}

func (i FlowMediaStreamAttributesArgs) ToFlowMediaStreamAttributesPtrOutputWithContext(ctx context.Context) FlowMediaStreamAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMediaStreamAttributesOutput).ToFlowMediaStreamAttributesPtrOutputWithContext(ctx)
}

// FlowMediaStreamAttributesPtrInput is an input type that accepts FlowMediaStreamAttributesArgs, FlowMediaStreamAttributesPtr and FlowMediaStreamAttributesPtrOutput values.
// You can construct a concrete instance of `FlowMediaStreamAttributesPtrInput` via:
//
//	        FlowMediaStreamAttributesArgs{...}
//
//	or:
//
//	        nil
type FlowMediaStreamAttributesPtrInput interface {
	pulumi.Input

	ToFlowMediaStreamAttributesPtrOutput() FlowMediaStreamAttributesPtrOutput
	ToFlowMediaStreamAttributesPtrOutputWithContext(context.Context) FlowMediaStreamAttributesPtrOutput
}

type flowMediaStreamAttributesPtrType FlowMediaStreamAttributesArgs

func FlowMediaStreamAttributesPtr(v *FlowMediaStreamAttributesArgs) FlowMediaStreamAttributesPtrInput {
	return (*flowMediaStreamAttributesPtrType)(v)
}

func (*flowMediaStreamAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowMediaStreamAttributes)(nil)).Elem()
}

func (i *flowMediaStreamAttributesPtrType) ToFlowMediaStreamAttributesPtrOutput() FlowMediaStreamAttributesPtrOutput {
	return i.ToFlowMediaStreamAttributesPtrOutputWithContext(context.Background())
}

func (i *flowMediaStreamAttributesPtrType) ToFlowMediaStreamAttributesPtrOutputWithContext(ctx context.Context) FlowMediaStreamAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMediaStreamAttributesPtrOutput)
}

// Attributes that are related to the media stream.
type FlowMediaStreamAttributesOutput struct{ *pulumi.OutputState }

func (FlowMediaStreamAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMediaStreamAttributes)(nil)).Elem()
}

func (o FlowMediaStreamAttributesOutput) ToFlowMediaStreamAttributesOutput() FlowMediaStreamAttributesOutput {
	return o
}

func (o FlowMediaStreamAttributesOutput) ToFlowMediaStreamAttributesOutputWithContext(ctx context.Context) FlowMediaStreamAttributesOutput {
	return o
}

func (o FlowMediaStreamAttributesOutput) ToFlowMediaStreamAttributesPtrOutput() FlowMediaStreamAttributesPtrOutput {
	return o.ToFlowMediaStreamAttributesPtrOutputWithContext(context.Background())
}

func (o FlowMediaStreamAttributesOutput) ToFlowMediaStreamAttributesPtrOutputWithContext(ctx context.Context) FlowMediaStreamAttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowMediaStreamAttributes) *FlowMediaStreamAttributes {
		return &v
	}).(FlowMediaStreamAttributesPtrOutput)
}

// A set of parameters that define the media stream.
func (o FlowMediaStreamAttributesOutput) Fmtp() FlowFmtpPtrOutput {
	return o.ApplyT(func(v FlowMediaStreamAttributes) *FlowFmtp { return v.Fmtp }).(FlowFmtpPtrOutput)
}

// The audio language, in a format that is recognized by the receiver.
func (o FlowMediaStreamAttributesOutput) Lang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowMediaStreamAttributes) *string { return v.Lang }).(pulumi.StringPtrOutput)
}

type FlowMediaStreamAttributesPtrOutput struct{ *pulumi.OutputState }

func (FlowMediaStreamAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowMediaStreamAttributes)(nil)).Elem()
}

func (o FlowMediaStreamAttributesPtrOutput) ToFlowMediaStreamAttributesPtrOutput() FlowMediaStreamAttributesPtrOutput {
	return o
}

func (o FlowMediaStreamAttributesPtrOutput) ToFlowMediaStreamAttributesPtrOutputWithContext(ctx context.Context) FlowMediaStreamAttributesPtrOutput {
	return o
}

func (o FlowMediaStreamAttributesPtrOutput) Elem() FlowMediaStreamAttributesOutput {
	return o.ApplyT(func(v *FlowMediaStreamAttributes) FlowMediaStreamAttributes {
		if v != nil {
			return *v
		}
		var ret FlowMediaStreamAttributes
		return ret
	}).(FlowMediaStreamAttributesOutput)
}

// A set of parameters that define the media stream.
func (o FlowMediaStreamAttributesPtrOutput) Fmtp() FlowFmtpPtrOutput {
	return o.ApplyT(func(v *FlowMediaStreamAttributes) *FlowFmtp {
		if v == nil {
			return nil
		}
		return v.Fmtp
	}).(FlowFmtpPtrOutput)
}

// The audio language, in a format that is recognized by the receiver.
func (o FlowMediaStreamAttributesPtrOutput) Lang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowMediaStreamAttributes) *string {
		if v == nil {
			return nil
		}
		return v.Lang
	}).(pulumi.StringPtrOutput)
}

// The media stream that is associated with the source, and the parameters for that association.
type FlowMediaStreamSourceConfiguration struct {
	// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
	EncodingName FlowMediaStreamSourceConfigurationEncodingName `pulumi:"encodingName"`
	// The media streams that you want to associate with the source.
	InputConfigurations []FlowInputConfiguration `pulumi:"inputConfigurations"`
	// A name that helps you distinguish one media stream from another.
	MediaStreamName string `pulumi:"mediaStreamName"`
}

// FlowMediaStreamSourceConfigurationInput is an input type that accepts FlowMediaStreamSourceConfigurationArgs and FlowMediaStreamSourceConfigurationOutput values.
// You can construct a concrete instance of `FlowMediaStreamSourceConfigurationInput` via:
//
//	FlowMediaStreamSourceConfigurationArgs{...}
type FlowMediaStreamSourceConfigurationInput interface {
	pulumi.Input

	ToFlowMediaStreamSourceConfigurationOutput() FlowMediaStreamSourceConfigurationOutput
	ToFlowMediaStreamSourceConfigurationOutputWithContext(context.Context) FlowMediaStreamSourceConfigurationOutput
}

// The media stream that is associated with the source, and the parameters for that association.
type FlowMediaStreamSourceConfigurationArgs struct {
	// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
	EncodingName FlowMediaStreamSourceConfigurationEncodingNameInput `pulumi:"encodingName"`
	// The media streams that you want to associate with the source.
	InputConfigurations FlowInputConfigurationArrayInput `pulumi:"inputConfigurations"`
	// A name that helps you distinguish one media stream from another.
	MediaStreamName pulumi.StringInput `pulumi:"mediaStreamName"`
}

func (FlowMediaStreamSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMediaStreamSourceConfiguration)(nil)).Elem()
}

func (i FlowMediaStreamSourceConfigurationArgs) ToFlowMediaStreamSourceConfigurationOutput() FlowMediaStreamSourceConfigurationOutput {
	return i.ToFlowMediaStreamSourceConfigurationOutputWithContext(context.Background())
}

func (i FlowMediaStreamSourceConfigurationArgs) ToFlowMediaStreamSourceConfigurationOutputWithContext(ctx context.Context) FlowMediaStreamSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMediaStreamSourceConfigurationOutput)
}

// FlowMediaStreamSourceConfigurationArrayInput is an input type that accepts FlowMediaStreamSourceConfigurationArray and FlowMediaStreamSourceConfigurationArrayOutput values.
// You can construct a concrete instance of `FlowMediaStreamSourceConfigurationArrayInput` via:
//
//	FlowMediaStreamSourceConfigurationArray{ FlowMediaStreamSourceConfigurationArgs{...} }
type FlowMediaStreamSourceConfigurationArrayInput interface {
	pulumi.Input

	ToFlowMediaStreamSourceConfigurationArrayOutput() FlowMediaStreamSourceConfigurationArrayOutput
	ToFlowMediaStreamSourceConfigurationArrayOutputWithContext(context.Context) FlowMediaStreamSourceConfigurationArrayOutput
}

type FlowMediaStreamSourceConfigurationArray []FlowMediaStreamSourceConfigurationInput

func (FlowMediaStreamSourceConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowMediaStreamSourceConfiguration)(nil)).Elem()
}

func (i FlowMediaStreamSourceConfigurationArray) ToFlowMediaStreamSourceConfigurationArrayOutput() FlowMediaStreamSourceConfigurationArrayOutput {
	return i.ToFlowMediaStreamSourceConfigurationArrayOutputWithContext(context.Background())
}

func (i FlowMediaStreamSourceConfigurationArray) ToFlowMediaStreamSourceConfigurationArrayOutputWithContext(ctx context.Context) FlowMediaStreamSourceConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowMediaStreamSourceConfigurationArrayOutput)
}

// The media stream that is associated with the source, and the parameters for that association.
type FlowMediaStreamSourceConfigurationOutput struct{ *pulumi.OutputState }

func (FlowMediaStreamSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowMediaStreamSourceConfiguration)(nil)).Elem()
}

func (o FlowMediaStreamSourceConfigurationOutput) ToFlowMediaStreamSourceConfigurationOutput() FlowMediaStreamSourceConfigurationOutput {
	return o
}

func (o FlowMediaStreamSourceConfigurationOutput) ToFlowMediaStreamSourceConfigurationOutputWithContext(ctx context.Context) FlowMediaStreamSourceConfigurationOutput {
	return o
}

// The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
func (o FlowMediaStreamSourceConfigurationOutput) EncodingName() FlowMediaStreamSourceConfigurationEncodingNameOutput {
	return o.ApplyT(func(v FlowMediaStreamSourceConfiguration) FlowMediaStreamSourceConfigurationEncodingName {
		return v.EncodingName
	}).(FlowMediaStreamSourceConfigurationEncodingNameOutput)
}

// The media streams that you want to associate with the source.
func (o FlowMediaStreamSourceConfigurationOutput) InputConfigurations() FlowInputConfigurationArrayOutput {
	return o.ApplyT(func(v FlowMediaStreamSourceConfiguration) []FlowInputConfiguration { return v.InputConfigurations }).(FlowInputConfigurationArrayOutput)
}

// A name that helps you distinguish one media stream from another.
func (o FlowMediaStreamSourceConfigurationOutput) MediaStreamName() pulumi.StringOutput {
	return o.ApplyT(func(v FlowMediaStreamSourceConfiguration) string { return v.MediaStreamName }).(pulumi.StringOutput)
}

type FlowMediaStreamSourceConfigurationArrayOutput struct{ *pulumi.OutputState }

func (FlowMediaStreamSourceConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowMediaStreamSourceConfiguration)(nil)).Elem()
}

func (o FlowMediaStreamSourceConfigurationArrayOutput) ToFlowMediaStreamSourceConfigurationArrayOutput() FlowMediaStreamSourceConfigurationArrayOutput {
	return o
}

func (o FlowMediaStreamSourceConfigurationArrayOutput) ToFlowMediaStreamSourceConfigurationArrayOutputWithContext(ctx context.Context) FlowMediaStreamSourceConfigurationArrayOutput {
	return o
}

func (o FlowMediaStreamSourceConfigurationArrayOutput) Index(i pulumi.IntInput) FlowMediaStreamSourceConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowMediaStreamSourceConfiguration {
		return vs[0].([]FlowMediaStreamSourceConfiguration)[vs[1].(int)]
	}).(FlowMediaStreamSourceConfigurationOutput)
}

// The definition of a media stream that is associated with the output.
type FlowOutputDestinationConfiguration struct {
	// The IP address where contents of the media stream will be sent.
	DestinationIp string `pulumi:"destinationIp"`
	// The port to use when the content of the media stream is distributed to the output.
	DestinationPort int `pulumi:"destinationPort"`
	// The VPC interface that is used for the media stream associated with the output.
	Interface FlowOutputInterface `pulumi:"interface"`
}

// FlowOutputDestinationConfigurationInput is an input type that accepts FlowOutputDestinationConfigurationArgs and FlowOutputDestinationConfigurationOutput values.
// You can construct a concrete instance of `FlowOutputDestinationConfigurationInput` via:
//
//	FlowOutputDestinationConfigurationArgs{...}
type FlowOutputDestinationConfigurationInput interface {
	pulumi.Input

	ToFlowOutputDestinationConfigurationOutput() FlowOutputDestinationConfigurationOutput
	ToFlowOutputDestinationConfigurationOutputWithContext(context.Context) FlowOutputDestinationConfigurationOutput
}

// The definition of a media stream that is associated with the output.
type FlowOutputDestinationConfigurationArgs struct {
	// The IP address where contents of the media stream will be sent.
	DestinationIp pulumi.StringInput `pulumi:"destinationIp"`
	// The port to use when the content of the media stream is distributed to the output.
	DestinationPort pulumi.IntInput `pulumi:"destinationPort"`
	// The VPC interface that is used for the media stream associated with the output.
	Interface FlowOutputInterfaceInput `pulumi:"interface"`
}

func (FlowOutputDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputDestinationConfiguration)(nil)).Elem()
}

func (i FlowOutputDestinationConfigurationArgs) ToFlowOutputDestinationConfigurationOutput() FlowOutputDestinationConfigurationOutput {
	return i.ToFlowOutputDestinationConfigurationOutputWithContext(context.Background())
}

func (i FlowOutputDestinationConfigurationArgs) ToFlowOutputDestinationConfigurationOutputWithContext(ctx context.Context) FlowOutputDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputDestinationConfigurationOutput)
}

// FlowOutputDestinationConfigurationArrayInput is an input type that accepts FlowOutputDestinationConfigurationArray and FlowOutputDestinationConfigurationArrayOutput values.
// You can construct a concrete instance of `FlowOutputDestinationConfigurationArrayInput` via:
//
//	FlowOutputDestinationConfigurationArray{ FlowOutputDestinationConfigurationArgs{...} }
type FlowOutputDestinationConfigurationArrayInput interface {
	pulumi.Input

	ToFlowOutputDestinationConfigurationArrayOutput() FlowOutputDestinationConfigurationArrayOutput
	ToFlowOutputDestinationConfigurationArrayOutputWithContext(context.Context) FlowOutputDestinationConfigurationArrayOutput
}

type FlowOutputDestinationConfigurationArray []FlowOutputDestinationConfigurationInput

func (FlowOutputDestinationConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowOutputDestinationConfiguration)(nil)).Elem()
}

func (i FlowOutputDestinationConfigurationArray) ToFlowOutputDestinationConfigurationArrayOutput() FlowOutputDestinationConfigurationArrayOutput {
	return i.ToFlowOutputDestinationConfigurationArrayOutputWithContext(context.Background())
}

func (i FlowOutputDestinationConfigurationArray) ToFlowOutputDestinationConfigurationArrayOutputWithContext(ctx context.Context) FlowOutputDestinationConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputDestinationConfigurationArrayOutput)
}

// The definition of a media stream that is associated with the output.
type FlowOutputDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (FlowOutputDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputDestinationConfiguration)(nil)).Elem()
}

func (o FlowOutputDestinationConfigurationOutput) ToFlowOutputDestinationConfigurationOutput() FlowOutputDestinationConfigurationOutput {
	return o
}

func (o FlowOutputDestinationConfigurationOutput) ToFlowOutputDestinationConfigurationOutputWithContext(ctx context.Context) FlowOutputDestinationConfigurationOutput {
	return o
}

// The IP address where contents of the media stream will be sent.
func (o FlowOutputDestinationConfigurationOutput) DestinationIp() pulumi.StringOutput {
	return o.ApplyT(func(v FlowOutputDestinationConfiguration) string { return v.DestinationIp }).(pulumi.StringOutput)
}

// The port to use when the content of the media stream is distributed to the output.
func (o FlowOutputDestinationConfigurationOutput) DestinationPort() pulumi.IntOutput {
	return o.ApplyT(func(v FlowOutputDestinationConfiguration) int { return v.DestinationPort }).(pulumi.IntOutput)
}

// The VPC interface that is used for the media stream associated with the output.
func (o FlowOutputDestinationConfigurationOutput) Interface() FlowOutputInterfaceOutput {
	return o.ApplyT(func(v FlowOutputDestinationConfiguration) FlowOutputInterface { return v.Interface }).(FlowOutputInterfaceOutput)
}

type FlowOutputDestinationConfigurationArrayOutput struct{ *pulumi.OutputState }

func (FlowOutputDestinationConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowOutputDestinationConfiguration)(nil)).Elem()
}

func (o FlowOutputDestinationConfigurationArrayOutput) ToFlowOutputDestinationConfigurationArrayOutput() FlowOutputDestinationConfigurationArrayOutput {
	return o
}

func (o FlowOutputDestinationConfigurationArrayOutput) ToFlowOutputDestinationConfigurationArrayOutputWithContext(ctx context.Context) FlowOutputDestinationConfigurationArrayOutput {
	return o
}

func (o FlowOutputDestinationConfigurationArrayOutput) Index(i pulumi.IntInput) FlowOutputDestinationConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowOutputDestinationConfiguration {
		return vs[0].([]FlowOutputDestinationConfiguration)[vs[1].(int)]
	}).(FlowOutputDestinationConfigurationOutput)
}

// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
type FlowOutputEncodingParameters struct {
	// A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are in the range of 3.0 to 10.0, inclusive.
	CompressionFactor float64 `pulumi:"compressionFactor"`
	// A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.
	EncoderProfile *FlowOutputEncodingParametersEncoderProfile `pulumi:"encoderProfile"`
}

// FlowOutputEncodingParametersInput is an input type that accepts FlowOutputEncodingParametersArgs and FlowOutputEncodingParametersOutput values.
// You can construct a concrete instance of `FlowOutputEncodingParametersInput` via:
//
//	FlowOutputEncodingParametersArgs{...}
type FlowOutputEncodingParametersInput interface {
	pulumi.Input

	ToFlowOutputEncodingParametersOutput() FlowOutputEncodingParametersOutput
	ToFlowOutputEncodingParametersOutputWithContext(context.Context) FlowOutputEncodingParametersOutput
}

// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
type FlowOutputEncodingParametersArgs struct {
	// A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are in the range of 3.0 to 10.0, inclusive.
	CompressionFactor pulumi.Float64Input `pulumi:"compressionFactor"`
	// A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.
	EncoderProfile FlowOutputEncodingParametersEncoderProfilePtrInput `pulumi:"encoderProfile"`
}

func (FlowOutputEncodingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncodingParameters)(nil)).Elem()
}

func (i FlowOutputEncodingParametersArgs) ToFlowOutputEncodingParametersOutput() FlowOutputEncodingParametersOutput {
	return i.ToFlowOutputEncodingParametersOutputWithContext(context.Background())
}

func (i FlowOutputEncodingParametersArgs) ToFlowOutputEncodingParametersOutputWithContext(ctx context.Context) FlowOutputEncodingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncodingParametersOutput)
}

func (i FlowOutputEncodingParametersArgs) ToFlowOutputEncodingParametersPtrOutput() FlowOutputEncodingParametersPtrOutput {
	return i.ToFlowOutputEncodingParametersPtrOutputWithContext(context.Background())
}

func (i FlowOutputEncodingParametersArgs) ToFlowOutputEncodingParametersPtrOutputWithContext(ctx context.Context) FlowOutputEncodingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncodingParametersOutput).ToFlowOutputEncodingParametersPtrOutputWithContext(ctx)
}

// FlowOutputEncodingParametersPtrInput is an input type that accepts FlowOutputEncodingParametersArgs, FlowOutputEncodingParametersPtr and FlowOutputEncodingParametersPtrOutput values.
// You can construct a concrete instance of `FlowOutputEncodingParametersPtrInput` via:
//
//	        FlowOutputEncodingParametersArgs{...}
//
//	or:
//
//	        nil
type FlowOutputEncodingParametersPtrInput interface {
	pulumi.Input

	ToFlowOutputEncodingParametersPtrOutput() FlowOutputEncodingParametersPtrOutput
	ToFlowOutputEncodingParametersPtrOutputWithContext(context.Context) FlowOutputEncodingParametersPtrOutput
}

type flowOutputEncodingParametersPtrType FlowOutputEncodingParametersArgs

func FlowOutputEncodingParametersPtr(v *FlowOutputEncodingParametersArgs) FlowOutputEncodingParametersPtrInput {
	return (*flowOutputEncodingParametersPtrType)(v)
}

func (*flowOutputEncodingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncodingParameters)(nil)).Elem()
}

func (i *flowOutputEncodingParametersPtrType) ToFlowOutputEncodingParametersPtrOutput() FlowOutputEncodingParametersPtrOutput {
	return i.ToFlowOutputEncodingParametersPtrOutputWithContext(context.Background())
}

func (i *flowOutputEncodingParametersPtrType) ToFlowOutputEncodingParametersPtrOutputWithContext(ctx context.Context) FlowOutputEncodingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncodingParametersPtrOutput)
}

// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
type FlowOutputEncodingParametersOutput struct{ *pulumi.OutputState }

func (FlowOutputEncodingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncodingParameters)(nil)).Elem()
}

func (o FlowOutputEncodingParametersOutput) ToFlowOutputEncodingParametersOutput() FlowOutputEncodingParametersOutput {
	return o
}

func (o FlowOutputEncodingParametersOutput) ToFlowOutputEncodingParametersOutputWithContext(ctx context.Context) FlowOutputEncodingParametersOutput {
	return o
}

func (o FlowOutputEncodingParametersOutput) ToFlowOutputEncodingParametersPtrOutput() FlowOutputEncodingParametersPtrOutput {
	return o.ToFlowOutputEncodingParametersPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncodingParametersOutput) ToFlowOutputEncodingParametersPtrOutputWithContext(ctx context.Context) FlowOutputEncodingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputEncodingParameters) *FlowOutputEncodingParameters {
		return &v
	}).(FlowOutputEncodingParametersPtrOutput)
}

// A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are in the range of 3.0 to 10.0, inclusive.
func (o FlowOutputEncodingParametersOutput) CompressionFactor() pulumi.Float64Output {
	return o.ApplyT(func(v FlowOutputEncodingParameters) float64 { return v.CompressionFactor }).(pulumi.Float64Output)
}

// A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.
func (o FlowOutputEncodingParametersOutput) EncoderProfile() FlowOutputEncodingParametersEncoderProfilePtrOutput {
	return o.ApplyT(func(v FlowOutputEncodingParameters) *FlowOutputEncodingParametersEncoderProfile {
		return v.EncoderProfile
	}).(FlowOutputEncodingParametersEncoderProfilePtrOutput)
}

type FlowOutputEncodingParametersPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputEncodingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncodingParameters)(nil)).Elem()
}

func (o FlowOutputEncodingParametersPtrOutput) ToFlowOutputEncodingParametersPtrOutput() FlowOutputEncodingParametersPtrOutput {
	return o
}

func (o FlowOutputEncodingParametersPtrOutput) ToFlowOutputEncodingParametersPtrOutputWithContext(ctx context.Context) FlowOutputEncodingParametersPtrOutput {
	return o
}

func (o FlowOutputEncodingParametersPtrOutput) Elem() FlowOutputEncodingParametersOutput {
	return o.ApplyT(func(v *FlowOutputEncodingParameters) FlowOutputEncodingParameters {
		if v != nil {
			return *v
		}
		var ret FlowOutputEncodingParameters
		return ret
	}).(FlowOutputEncodingParametersOutput)
}

// A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are in the range of 3.0 to 10.0, inclusive.
func (o FlowOutputEncodingParametersPtrOutput) CompressionFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FlowOutputEncodingParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.CompressionFactor
	}).(pulumi.Float64PtrOutput)
}

// A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.
func (o FlowOutputEncodingParametersPtrOutput) EncoderProfile() FlowOutputEncodingParametersEncoderProfilePtrOutput {
	return o.ApplyT(func(v *FlowOutputEncodingParameters) *FlowOutputEncodingParametersEncoderProfile {
		if v == nil {
			return nil
		}
		return v.EncoderProfile
	}).(FlowOutputEncodingParametersEncoderProfilePtrOutput)
}

// Information about the encryption of the flow.
type FlowOutputEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm *FlowOutputEncryptionAlgorithm `pulumi:"algorithm"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowOutputEncryptionKeyType `pulumi:"keyType"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn string `pulumi:"secretArn"`
}

// FlowOutputEncryptionInput is an input type that accepts FlowOutputEncryptionArgs and FlowOutputEncryptionOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionInput` via:
//
//	FlowOutputEncryptionArgs{...}
type FlowOutputEncryptionInput interface {
	pulumi.Input

	ToFlowOutputEncryptionOutput() FlowOutputEncryptionOutput
	ToFlowOutputEncryptionOutputWithContext(context.Context) FlowOutputEncryptionOutput
}

// Information about the encryption of the flow.
type FlowOutputEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowOutputEncryptionAlgorithmPtrInput `pulumi:"algorithm"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowOutputEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringInput `pulumi:"secretArn"`
}

func (FlowOutputEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryption)(nil)).Elem()
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionOutput() FlowOutputEncryptionOutput {
	return i.ToFlowOutputEncryptionOutputWithContext(context.Background())
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionOutputWithContext(ctx context.Context) FlowOutputEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncryptionOutput)
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return i.ToFlowOutputEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncryptionOutput).ToFlowOutputEncryptionPtrOutputWithContext(ctx)
}

// FlowOutputEncryptionPtrInput is an input type that accepts FlowOutputEncryptionArgs, FlowOutputEncryptionPtr and FlowOutputEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionPtrInput` via:
//
//	        FlowOutputEncryptionArgs{...}
//
//	or:
//
//	        nil
type FlowOutputEncryptionPtrInput interface {
	pulumi.Input

	ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput
	ToFlowOutputEncryptionPtrOutputWithContext(context.Context) FlowOutputEncryptionPtrOutput
}

type flowOutputEncryptionPtrType FlowOutputEncryptionArgs

func FlowOutputEncryptionPtr(v *FlowOutputEncryptionArgs) FlowOutputEncryptionPtrInput {
	return (*flowOutputEncryptionPtrType)(v)
}

func (*flowOutputEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryption)(nil)).Elem()
}

func (i *flowOutputEncryptionPtrType) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return i.ToFlowOutputEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowOutputEncryptionPtrType) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowOutputEncryptionOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryption)(nil)).Elem()
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionOutput() FlowOutputEncryptionOutput {
	return o
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionOutputWithContext(ctx context.Context) FlowOutputEncryptionOutput {
	return o
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return o.ToFlowOutputEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputEncryption) *FlowOutputEncryption {
		return &v
	}).(FlowOutputEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowOutputEncryptionOutput) Algorithm() FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v FlowOutputEncryption) *FlowOutputEncryptionAlgorithm { return v.Algorithm }).(FlowOutputEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowOutputEncryptionOutput) KeyType() FlowOutputEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowOutputEncryption) *FlowOutputEncryptionKeyType { return v.KeyType }).(FlowOutputEncryptionKeyTypePtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowOutputEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowOutputEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowOutputEncryptionOutput) SecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowOutputEncryption) string { return v.SecretArn }).(pulumi.StringOutput)
}

type FlowOutputEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryption)(nil)).Elem()
}

func (o FlowOutputEncryptionPtrOutput) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return o
}

func (o FlowOutputEncryptionPtrOutput) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return o
}

func (o FlowOutputEncryptionPtrOutput) Elem() FlowOutputEncryptionOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) FlowOutputEncryption {
		if v != nil {
			return *v
		}
		var ret FlowOutputEncryption
		return ret
	}).(FlowOutputEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowOutputEncryptionPtrOutput) Algorithm() FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *FlowOutputEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(FlowOutputEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowOutputEncryptionPtrOutput) KeyType() FlowOutputEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *FlowOutputEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowOutputEncryptionKeyTypePtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowOutputEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowOutputEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The VPC interface that you want to use for the media stream associated with the output.
type FlowOutputInterface struct {
	// The name of the VPC interface that you want to use for the media stream associated with the output.
	Name string `pulumi:"name"`
}

// FlowOutputInterfaceInput is an input type that accepts FlowOutputInterfaceArgs and FlowOutputInterfaceOutput values.
// You can construct a concrete instance of `FlowOutputInterfaceInput` via:
//
//	FlowOutputInterfaceArgs{...}
type FlowOutputInterfaceInput interface {
	pulumi.Input

	ToFlowOutputInterfaceOutput() FlowOutputInterfaceOutput
	ToFlowOutputInterfaceOutputWithContext(context.Context) FlowOutputInterfaceOutput
}

// The VPC interface that you want to use for the media stream associated with the output.
type FlowOutputInterfaceArgs struct {
	// The name of the VPC interface that you want to use for the media stream associated with the output.
	Name pulumi.StringInput `pulumi:"name"`
}

func (FlowOutputInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputInterface)(nil)).Elem()
}

func (i FlowOutputInterfaceArgs) ToFlowOutputInterfaceOutput() FlowOutputInterfaceOutput {
	return i.ToFlowOutputInterfaceOutputWithContext(context.Background())
}

func (i FlowOutputInterfaceArgs) ToFlowOutputInterfaceOutputWithContext(ctx context.Context) FlowOutputInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputInterfaceOutput)
}

// The VPC interface that you want to use for the media stream associated with the output.
type FlowOutputInterfaceOutput struct{ *pulumi.OutputState }

func (FlowOutputInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputInterface)(nil)).Elem()
}

func (o FlowOutputInterfaceOutput) ToFlowOutputInterfaceOutput() FlowOutputInterfaceOutput {
	return o
}

func (o FlowOutputInterfaceOutput) ToFlowOutputInterfaceOutputWithContext(ctx context.Context) FlowOutputInterfaceOutput {
	return o
}

// The name of the VPC interface that you want to use for the media stream associated with the output.
func (o FlowOutputInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FlowOutputInterface) string { return v.Name }).(pulumi.StringOutput)
}

// The media stream that is associated with the output, and the parameters for that association.
type FlowOutputMediaStreamOutputConfiguration struct {
	// The media streams that you want to associate with the output.
	DestinationConfigurations []FlowOutputDestinationConfiguration `pulumi:"destinationConfigurations"`
	// The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video streams on sources or outputs that use the CDI protocol, set the encoding name to raw. For video streams on sources or outputs that use the ST 2110 JPEG XS protocol, set the encoding name to jxsv.
	EncodingName FlowOutputMediaStreamOutputConfigurationEncodingName `pulumi:"encodingName"`
	// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
	EncodingParameters *FlowOutputEncodingParameters `pulumi:"encodingParameters"`
	// A name that helps you distinguish one media stream from another.
	MediaStreamName string `pulumi:"mediaStreamName"`
}

// FlowOutputMediaStreamOutputConfigurationInput is an input type that accepts FlowOutputMediaStreamOutputConfigurationArgs and FlowOutputMediaStreamOutputConfigurationOutput values.
// You can construct a concrete instance of `FlowOutputMediaStreamOutputConfigurationInput` via:
//
//	FlowOutputMediaStreamOutputConfigurationArgs{...}
type FlowOutputMediaStreamOutputConfigurationInput interface {
	pulumi.Input

	ToFlowOutputMediaStreamOutputConfigurationOutput() FlowOutputMediaStreamOutputConfigurationOutput
	ToFlowOutputMediaStreamOutputConfigurationOutputWithContext(context.Context) FlowOutputMediaStreamOutputConfigurationOutput
}

// The media stream that is associated with the output, and the parameters for that association.
type FlowOutputMediaStreamOutputConfigurationArgs struct {
	// The media streams that you want to associate with the output.
	DestinationConfigurations FlowOutputDestinationConfigurationArrayInput `pulumi:"destinationConfigurations"`
	// The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video streams on sources or outputs that use the CDI protocol, set the encoding name to raw. For video streams on sources or outputs that use the ST 2110 JPEG XS protocol, set the encoding name to jxsv.
	EncodingName FlowOutputMediaStreamOutputConfigurationEncodingNameInput `pulumi:"encodingName"`
	// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
	EncodingParameters FlowOutputEncodingParametersPtrInput `pulumi:"encodingParameters"`
	// A name that helps you distinguish one media stream from another.
	MediaStreamName pulumi.StringInput `pulumi:"mediaStreamName"`
}

func (FlowOutputMediaStreamOutputConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputMediaStreamOutputConfiguration)(nil)).Elem()
}

func (i FlowOutputMediaStreamOutputConfigurationArgs) ToFlowOutputMediaStreamOutputConfigurationOutput() FlowOutputMediaStreamOutputConfigurationOutput {
	return i.ToFlowOutputMediaStreamOutputConfigurationOutputWithContext(context.Background())
}

func (i FlowOutputMediaStreamOutputConfigurationArgs) ToFlowOutputMediaStreamOutputConfigurationOutputWithContext(ctx context.Context) FlowOutputMediaStreamOutputConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputMediaStreamOutputConfigurationOutput)
}

// FlowOutputMediaStreamOutputConfigurationArrayInput is an input type that accepts FlowOutputMediaStreamOutputConfigurationArray and FlowOutputMediaStreamOutputConfigurationArrayOutput values.
// You can construct a concrete instance of `FlowOutputMediaStreamOutputConfigurationArrayInput` via:
//
//	FlowOutputMediaStreamOutputConfigurationArray{ FlowOutputMediaStreamOutputConfigurationArgs{...} }
type FlowOutputMediaStreamOutputConfigurationArrayInput interface {
	pulumi.Input

	ToFlowOutputMediaStreamOutputConfigurationArrayOutput() FlowOutputMediaStreamOutputConfigurationArrayOutput
	ToFlowOutputMediaStreamOutputConfigurationArrayOutputWithContext(context.Context) FlowOutputMediaStreamOutputConfigurationArrayOutput
}

type FlowOutputMediaStreamOutputConfigurationArray []FlowOutputMediaStreamOutputConfigurationInput

func (FlowOutputMediaStreamOutputConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowOutputMediaStreamOutputConfiguration)(nil)).Elem()
}

func (i FlowOutputMediaStreamOutputConfigurationArray) ToFlowOutputMediaStreamOutputConfigurationArrayOutput() FlowOutputMediaStreamOutputConfigurationArrayOutput {
	return i.ToFlowOutputMediaStreamOutputConfigurationArrayOutputWithContext(context.Background())
}

func (i FlowOutputMediaStreamOutputConfigurationArray) ToFlowOutputMediaStreamOutputConfigurationArrayOutputWithContext(ctx context.Context) FlowOutputMediaStreamOutputConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputMediaStreamOutputConfigurationArrayOutput)
}

// The media stream that is associated with the output, and the parameters for that association.
type FlowOutputMediaStreamOutputConfigurationOutput struct{ *pulumi.OutputState }

func (FlowOutputMediaStreamOutputConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputMediaStreamOutputConfiguration)(nil)).Elem()
}

func (o FlowOutputMediaStreamOutputConfigurationOutput) ToFlowOutputMediaStreamOutputConfigurationOutput() FlowOutputMediaStreamOutputConfigurationOutput {
	return o
}

func (o FlowOutputMediaStreamOutputConfigurationOutput) ToFlowOutputMediaStreamOutputConfigurationOutputWithContext(ctx context.Context) FlowOutputMediaStreamOutputConfigurationOutput {
	return o
}

// The media streams that you want to associate with the output.
func (o FlowOutputMediaStreamOutputConfigurationOutput) DestinationConfigurations() FlowOutputDestinationConfigurationArrayOutput {
	return o.ApplyT(func(v FlowOutputMediaStreamOutputConfiguration) []FlowOutputDestinationConfiguration {
		return v.DestinationConfigurations
	}).(FlowOutputDestinationConfigurationArrayOutput)
}

// The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video streams on sources or outputs that use the CDI protocol, set the encoding name to raw. For video streams on sources or outputs that use the ST 2110 JPEG XS protocol, set the encoding name to jxsv.
func (o FlowOutputMediaStreamOutputConfigurationOutput) EncodingName() FlowOutputMediaStreamOutputConfigurationEncodingNameOutput {
	return o.ApplyT(func(v FlowOutputMediaStreamOutputConfiguration) FlowOutputMediaStreamOutputConfigurationEncodingName {
		return v.EncodingName
	}).(FlowOutputMediaStreamOutputConfigurationEncodingNameOutput)
}

// A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
func (o FlowOutputMediaStreamOutputConfigurationOutput) EncodingParameters() FlowOutputEncodingParametersPtrOutput {
	return o.ApplyT(func(v FlowOutputMediaStreamOutputConfiguration) *FlowOutputEncodingParameters {
		return v.EncodingParameters
	}).(FlowOutputEncodingParametersPtrOutput)
}

// A name that helps you distinguish one media stream from another.
func (o FlowOutputMediaStreamOutputConfigurationOutput) MediaStreamName() pulumi.StringOutput {
	return o.ApplyT(func(v FlowOutputMediaStreamOutputConfiguration) string { return v.MediaStreamName }).(pulumi.StringOutput)
}

type FlowOutputMediaStreamOutputConfigurationArrayOutput struct{ *pulumi.OutputState }

func (FlowOutputMediaStreamOutputConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowOutputMediaStreamOutputConfiguration)(nil)).Elem()
}

func (o FlowOutputMediaStreamOutputConfigurationArrayOutput) ToFlowOutputMediaStreamOutputConfigurationArrayOutput() FlowOutputMediaStreamOutputConfigurationArrayOutput {
	return o
}

func (o FlowOutputMediaStreamOutputConfigurationArrayOutput) ToFlowOutputMediaStreamOutputConfigurationArrayOutputWithContext(ctx context.Context) FlowOutputMediaStreamOutputConfigurationArrayOutput {
	return o
}

func (o FlowOutputMediaStreamOutputConfigurationArrayOutput) Index(i pulumi.IntInput) FlowOutputMediaStreamOutputConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowOutputMediaStreamOutputConfiguration {
		return vs[0].([]FlowOutputMediaStreamOutputConfiguration)[vs[1].(int)]
	}).(FlowOutputMediaStreamOutputConfigurationOutput)
}

// The settings for attaching a VPC interface to an output.
type FlowOutputVpcInterfaceAttachment struct {
	// The name of the VPC interface to use for this output.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
}

// FlowOutputVpcInterfaceAttachmentInput is an input type that accepts FlowOutputVpcInterfaceAttachmentArgs and FlowOutputVpcInterfaceAttachmentOutput values.
// You can construct a concrete instance of `FlowOutputVpcInterfaceAttachmentInput` via:
//
//	FlowOutputVpcInterfaceAttachmentArgs{...}
type FlowOutputVpcInterfaceAttachmentInput interface {
	pulumi.Input

	ToFlowOutputVpcInterfaceAttachmentOutput() FlowOutputVpcInterfaceAttachmentOutput
	ToFlowOutputVpcInterfaceAttachmentOutputWithContext(context.Context) FlowOutputVpcInterfaceAttachmentOutput
}

// The settings for attaching a VPC interface to an output.
type FlowOutputVpcInterfaceAttachmentArgs struct {
	// The name of the VPC interface to use for this output.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
}

func (FlowOutputVpcInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentOutput() FlowOutputVpcInterfaceAttachmentOutput {
	return i.ToFlowOutputVpcInterfaceAttachmentOutputWithContext(context.Background())
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputVpcInterfaceAttachmentOutput)
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputVpcInterfaceAttachmentOutput).ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx)
}

// FlowOutputVpcInterfaceAttachmentPtrInput is an input type that accepts FlowOutputVpcInterfaceAttachmentArgs, FlowOutputVpcInterfaceAttachmentPtr and FlowOutputVpcInterfaceAttachmentPtrOutput values.
// You can construct a concrete instance of `FlowOutputVpcInterfaceAttachmentPtrInput` via:
//
//	        FlowOutputVpcInterfaceAttachmentArgs{...}
//
//	or:
//
//	        nil
type FlowOutputVpcInterfaceAttachmentPtrInput interface {
	pulumi.Input

	ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput
	ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput
}

type flowOutputVpcInterfaceAttachmentPtrType FlowOutputVpcInterfaceAttachmentArgs

func FlowOutputVpcInterfaceAttachmentPtr(v *FlowOutputVpcInterfaceAttachmentArgs) FlowOutputVpcInterfaceAttachmentPtrInput {
	return (*flowOutputVpcInterfaceAttachmentPtrType)(v)
}

func (*flowOutputVpcInterfaceAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (i *flowOutputVpcInterfaceAttachmentPtrType) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i *flowOutputVpcInterfaceAttachmentPtrType) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputVpcInterfaceAttachmentPtrOutput)
}

// The settings for attaching a VPC interface to an output.
type FlowOutputVpcInterfaceAttachmentOutput struct{ *pulumi.OutputState }

func (FlowOutputVpcInterfaceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentOutput() FlowOutputVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o.ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputVpcInterfaceAttachment) *FlowOutputVpcInterfaceAttachment {
		return &v
	}).(FlowOutputVpcInterfaceAttachmentPtrOutput)
}

// The name of the VPC interface to use for this output.
func (o FlowOutputVpcInterfaceAttachmentOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowOutputVpcInterfaceAttachment) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

type FlowOutputVpcInterfaceAttachmentPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputVpcInterfaceAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowOutputVpcInterfaceAttachmentPtrOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentPtrOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentPtrOutput) Elem() FlowOutputVpcInterfaceAttachmentOutput {
	return o.ApplyT(func(v *FlowOutputVpcInterfaceAttachment) FlowOutputVpcInterfaceAttachment {
		if v != nil {
			return *v
		}
		var ret FlowOutputVpcInterfaceAttachment
		return ret
	}).(FlowOutputVpcInterfaceAttachmentOutput)
}

// The name of the VPC interface to use for this output.
func (o FlowOutputVpcInterfaceAttachmentPtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowOutputVpcInterfaceAttachment) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// The settings for the source of the flow.
type FlowSourceType struct {
	// The type of decryption that is used on the content ingested from this source.
	Decryption *FlowEncryption `pulumi:"decryption"`
	// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
	Description *string `pulumi:"description"`
	// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
	EntitlementArn *string `pulumi:"entitlementArn"`
	// The source configuration for cloud flows receiving a stream from a bridge.
	GatewayBridgeSource *FlowGatewayBridgeSource `pulumi:"gatewayBridgeSource"`
	// The IP address that the flow will be listening on for incoming content.
	IngestIp *string `pulumi:"ingestIp"`
	// The port that the flow will be listening on for incoming content.
	IngestPort *int `pulumi:"ingestPort"`
	// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
	MaxBitrate *int `pulumi:"maxBitrate"`
	// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
	MaxLatency *int `pulumi:"maxLatency"`
	// The size of the buffer (in milliseconds) to use to sync incoming source data.
	MaxSyncBuffer *int `pulumi:"maxSyncBuffer"`
	// The media stream that is associated with the source, and the parameters for that association.
	MediaStreamSourceConfigurations []FlowMediaStreamSourceConfiguration `pulumi:"mediaStreamSourceConfigurations"`
	// The minimum latency in milliseconds.
	MinLatency *int `pulumi:"minLatency"`
	// The name of the source.
	Name *string `pulumi:"name"`
	// The protocol that is used by the source.
	Protocol *FlowSourceProtocol `pulumi:"protocol"`
	// The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
	SenderControlPort *int `pulumi:"senderControlPort"`
	// The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
	SenderIpAddress *string `pulumi:"senderIpAddress"`
	// The ARN of the source.
	SourceArn *string `pulumi:"sourceArn"`
	// The port that the flow will be listening on for incoming content.(ReadOnly)
	SourceIngestPort *string `pulumi:"sourceIngestPort"`
	// Source IP or domain name for SRT-caller protocol.
	SourceListenerAddress *string `pulumi:"sourceListenerAddress"`
	// Source port for SRT-caller protocol.
	SourceListenerPort *int `pulumi:"sourceListenerPort"`
	// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
	StreamId *string `pulumi:"streamId"`
	// The name of the VPC Interface this Source is configured with.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
	// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
	WhitelistCidr *string `pulumi:"whitelistCidr"`
}

// FlowSourceTypeInput is an input type that accepts FlowSourceTypeArgs and FlowSourceTypeOutput values.
// You can construct a concrete instance of `FlowSourceTypeInput` via:
//
//	FlowSourceTypeArgs{...}
type FlowSourceTypeInput interface {
	pulumi.Input

	ToFlowSourceTypeOutput() FlowSourceTypeOutput
	ToFlowSourceTypeOutputWithContext(context.Context) FlowSourceTypeOutput
}

// The settings for the source of the flow.
type FlowSourceTypeArgs struct {
	// The type of decryption that is used on the content ingested from this source.
	Decryption FlowEncryptionPtrInput `pulumi:"decryption"`
	// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
	EntitlementArn pulumi.StringPtrInput `pulumi:"entitlementArn"`
	// The source configuration for cloud flows receiving a stream from a bridge.
	GatewayBridgeSource FlowGatewayBridgeSourcePtrInput `pulumi:"gatewayBridgeSource"`
	// The IP address that the flow will be listening on for incoming content.
	IngestIp pulumi.StringPtrInput `pulumi:"ingestIp"`
	// The port that the flow will be listening on for incoming content.
	IngestPort pulumi.IntPtrInput `pulumi:"ingestPort"`
	// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
	MaxBitrate pulumi.IntPtrInput `pulumi:"maxBitrate"`
	// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
	MaxLatency pulumi.IntPtrInput `pulumi:"maxLatency"`
	// The size of the buffer (in milliseconds) to use to sync incoming source data.
	MaxSyncBuffer pulumi.IntPtrInput `pulumi:"maxSyncBuffer"`
	// The media stream that is associated with the source, and the parameters for that association.
	MediaStreamSourceConfigurations FlowMediaStreamSourceConfigurationArrayInput `pulumi:"mediaStreamSourceConfigurations"`
	// The minimum latency in milliseconds.
	MinLatency pulumi.IntPtrInput `pulumi:"minLatency"`
	// The name of the source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The protocol that is used by the source.
	Protocol FlowSourceProtocolPtrInput `pulumi:"protocol"`
	// The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
	SenderControlPort pulumi.IntPtrInput `pulumi:"senderControlPort"`
	// The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
	SenderIpAddress pulumi.StringPtrInput `pulumi:"senderIpAddress"`
	// The ARN of the source.
	SourceArn pulumi.StringPtrInput `pulumi:"sourceArn"`
	// The port that the flow will be listening on for incoming content.(ReadOnly)
	SourceIngestPort pulumi.StringPtrInput `pulumi:"sourceIngestPort"`
	// Source IP or domain name for SRT-caller protocol.
	SourceListenerAddress pulumi.StringPtrInput `pulumi:"sourceListenerAddress"`
	// Source port for SRT-caller protocol.
	SourceListenerPort pulumi.IntPtrInput `pulumi:"sourceListenerPort"`
	// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
	StreamId pulumi.StringPtrInput `pulumi:"streamId"`
	// The name of the VPC Interface this Source is configured with.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
	// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
	WhitelistCidr pulumi.StringPtrInput `pulumi:"whitelistCidr"`
}

func (FlowSourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceType)(nil)).Elem()
}

func (i FlowSourceTypeArgs) ToFlowSourceTypeOutput() FlowSourceTypeOutput {
	return i.ToFlowSourceTypeOutputWithContext(context.Background())
}

func (i FlowSourceTypeArgs) ToFlowSourceTypeOutputWithContext(ctx context.Context) FlowSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceTypeOutput)
}

// The settings for the source of the flow.
type FlowSourceTypeOutput struct{ *pulumi.OutputState }

func (FlowSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceType)(nil)).Elem()
}

func (o FlowSourceTypeOutput) ToFlowSourceTypeOutput() FlowSourceTypeOutput {
	return o
}

func (o FlowSourceTypeOutput) ToFlowSourceTypeOutputWithContext(ctx context.Context) FlowSourceTypeOutput {
	return o
}

// The type of decryption that is used on the content ingested from this source.
func (o FlowSourceTypeOutput) Decryption() FlowEncryptionPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *FlowEncryption { return v.Decryption }).(FlowEncryptionPtrOutput)
}

// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
func (o FlowSourceTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
func (o FlowSourceTypeOutput) EntitlementArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.EntitlementArn }).(pulumi.StringPtrOutput)
}

// The source configuration for cloud flows receiving a stream from a bridge.
func (o FlowSourceTypeOutput) GatewayBridgeSource() FlowGatewayBridgeSourcePtrOutput {
	return o.ApplyT(func(v FlowSourceType) *FlowGatewayBridgeSource { return v.GatewayBridgeSource }).(FlowGatewayBridgeSourcePtrOutput)
}

// The IP address that the flow will be listening on for incoming content.
func (o FlowSourceTypeOutput) IngestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.IngestIp }).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.
func (o FlowSourceTypeOutput) IngestPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.IngestPort }).(pulumi.IntPtrOutput)
}

// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
func (o FlowSourceTypeOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.MaxBitrate }).(pulumi.IntPtrOutput)
}

// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
func (o FlowSourceTypeOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.MaxLatency }).(pulumi.IntPtrOutput)
}

// The size of the buffer (in milliseconds) to use to sync incoming source data.
func (o FlowSourceTypeOutput) MaxSyncBuffer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.MaxSyncBuffer }).(pulumi.IntPtrOutput)
}

// The media stream that is associated with the source, and the parameters for that association.
func (o FlowSourceTypeOutput) MediaStreamSourceConfigurations() FlowMediaStreamSourceConfigurationArrayOutput {
	return o.ApplyT(func(v FlowSourceType) []FlowMediaStreamSourceConfiguration { return v.MediaStreamSourceConfigurations }).(FlowMediaStreamSourceConfigurationArrayOutput)
}

// The minimum latency in milliseconds.
func (o FlowSourceTypeOutput) MinLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.MinLatency }).(pulumi.IntPtrOutput)
}

// The name of the source.
func (o FlowSourceTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The protocol that is used by the source.
func (o FlowSourceTypeOutput) Protocol() FlowSourceProtocolPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *FlowSourceProtocol { return v.Protocol }).(FlowSourceProtocolPtrOutput)
}

// The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
func (o FlowSourceTypeOutput) SenderControlPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.SenderControlPort }).(pulumi.IntPtrOutput)
}

// The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
func (o FlowSourceTypeOutput) SenderIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.SenderIpAddress }).(pulumi.StringPtrOutput)
}

// The ARN of the source.
func (o FlowSourceTypeOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.SourceArn }).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.(ReadOnly)
func (o FlowSourceTypeOutput) SourceIngestPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.SourceIngestPort }).(pulumi.StringPtrOutput)
}

// Source IP or domain name for SRT-caller protocol.
func (o FlowSourceTypeOutput) SourceListenerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.SourceListenerAddress }).(pulumi.StringPtrOutput)
}

// Source port for SRT-caller protocol.
func (o FlowSourceTypeOutput) SourceListenerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.SourceListenerPort }).(pulumi.IntPtrOutput)
}

// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
func (o FlowSourceTypeOutput) StreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.StreamId }).(pulumi.StringPtrOutput)
}

// The name of the VPC Interface this Source is configured with.
func (o FlowSourceTypeOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
func (o FlowSourceTypeOutput) WhitelistCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.WhitelistCidr }).(pulumi.StringPtrOutput)
}

type FlowSourceTypePtrOutput struct{ *pulumi.OutputState }

func (FlowSourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceType)(nil)).Elem()
}

func (o FlowSourceTypePtrOutput) ToFlowSourceTypePtrOutput() FlowSourceTypePtrOutput {
	return o
}

func (o FlowSourceTypePtrOutput) ToFlowSourceTypePtrOutputWithContext(ctx context.Context) FlowSourceTypePtrOutput {
	return o
}

func (o FlowSourceTypePtrOutput) Elem() FlowSourceTypeOutput {
	return o.ApplyT(func(v *FlowSourceType) FlowSourceType {
		if v != nil {
			return *v
		}
		var ret FlowSourceType
		return ret
	}).(FlowSourceTypeOutput)
}

// The type of decryption that is used on the content ingested from this source.
func (o FlowSourceTypePtrOutput) Decryption() FlowEncryptionPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *FlowEncryption {
		if v == nil {
			return nil
		}
		return v.Decryption
	}).(FlowEncryptionPtrOutput)
}

// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
func (o FlowSourceTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
func (o FlowSourceTypePtrOutput) EntitlementArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.EntitlementArn
	}).(pulumi.StringPtrOutput)
}

// The source configuration for cloud flows receiving a stream from a bridge.
func (o FlowSourceTypePtrOutput) GatewayBridgeSource() FlowGatewayBridgeSourcePtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *FlowGatewayBridgeSource {
		if v == nil {
			return nil
		}
		return v.GatewayBridgeSource
	}).(FlowGatewayBridgeSourcePtrOutput)
}

// The IP address that the flow will be listening on for incoming content.
func (o FlowSourceTypePtrOutput) IngestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.IngestIp
	}).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.
func (o FlowSourceTypePtrOutput) IngestPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.IngestPort
	}).(pulumi.IntPtrOutput)
}

// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
func (o FlowSourceTypePtrOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.MaxBitrate
	}).(pulumi.IntPtrOutput)
}

// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
func (o FlowSourceTypePtrOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.MaxLatency
	}).(pulumi.IntPtrOutput)
}

// The size of the buffer (in milliseconds) to use to sync incoming source data.
func (o FlowSourceTypePtrOutput) MaxSyncBuffer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.MaxSyncBuffer
	}).(pulumi.IntPtrOutput)
}

// The media stream that is associated with the source, and the parameters for that association.
func (o FlowSourceTypePtrOutput) MediaStreamSourceConfigurations() FlowMediaStreamSourceConfigurationArrayOutput {
	return o.ApplyT(func(v *FlowSourceType) []FlowMediaStreamSourceConfiguration {
		if v == nil {
			return nil
		}
		return v.MediaStreamSourceConfigurations
	}).(FlowMediaStreamSourceConfigurationArrayOutput)
}

// The minimum latency in milliseconds.
func (o FlowSourceTypePtrOutput) MinLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.MinLatency
	}).(pulumi.IntPtrOutput)
}

// The name of the source.
func (o FlowSourceTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The protocol that is used by the source.
func (o FlowSourceTypePtrOutput) Protocol() FlowSourceProtocolPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *FlowSourceProtocol {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(FlowSourceProtocolPtrOutput)
}

// The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
func (o FlowSourceTypePtrOutput) SenderControlPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.SenderControlPort
	}).(pulumi.IntPtrOutput)
}

// The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
func (o FlowSourceTypePtrOutput) SenderIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.SenderIpAddress
	}).(pulumi.StringPtrOutput)
}

// The ARN of the source.
func (o FlowSourceTypePtrOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.SourceArn
	}).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.(ReadOnly)
func (o FlowSourceTypePtrOutput) SourceIngestPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.SourceIngestPort
	}).(pulumi.StringPtrOutput)
}

// Source IP or domain name for SRT-caller protocol.
func (o FlowSourceTypePtrOutput) SourceListenerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.SourceListenerAddress
	}).(pulumi.StringPtrOutput)
}

// Source port for SRT-caller protocol.
func (o FlowSourceTypePtrOutput) SourceListenerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.SourceListenerPort
	}).(pulumi.IntPtrOutput)
}

// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
func (o FlowSourceTypePtrOutput) StreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.StreamId
	}).(pulumi.StringPtrOutput)
}

// The name of the VPC Interface this Source is configured with.
func (o FlowSourceTypePtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
func (o FlowSourceTypePtrOutput) WhitelistCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.WhitelistCidr
	}).(pulumi.StringPtrOutput)
}

// Information about the encryption of the flow.
type FlowSourceEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm *FlowSourceEncryptionAlgorithm `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector *string `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId *string `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowSourceEncryptionKeyType `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region *string `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId *string `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn *string `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url *string `pulumi:"url"`
}

// FlowSourceEncryptionInput is an input type that accepts FlowSourceEncryptionArgs and FlowSourceEncryptionOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionInput` via:
//
//	FlowSourceEncryptionArgs{...}
type FlowSourceEncryptionInput interface {
	pulumi.Input

	ToFlowSourceEncryptionOutput() FlowSourceEncryptionOutput
	ToFlowSourceEncryptionOutputWithContext(context.Context) FlowSourceEncryptionOutput
}

// Information about the encryption of the flow.
type FlowSourceEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowSourceEncryptionAlgorithmPtrInput `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector pulumi.StringPtrInput `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowSourceEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (FlowSourceEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryption)(nil)).Elem()
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionOutput() FlowSourceEncryptionOutput {
	return i.ToFlowSourceEncryptionOutputWithContext(context.Background())
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionOutputWithContext(ctx context.Context) FlowSourceEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceEncryptionOutput)
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return i.ToFlowSourceEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceEncryptionOutput).ToFlowSourceEncryptionPtrOutputWithContext(ctx)
}

// FlowSourceEncryptionPtrInput is an input type that accepts FlowSourceEncryptionArgs, FlowSourceEncryptionPtr and FlowSourceEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionPtrInput` via:
//
//	        FlowSourceEncryptionArgs{...}
//
//	or:
//
//	        nil
type FlowSourceEncryptionPtrInput interface {
	pulumi.Input

	ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput
	ToFlowSourceEncryptionPtrOutputWithContext(context.Context) FlowSourceEncryptionPtrOutput
}

type flowSourceEncryptionPtrType FlowSourceEncryptionArgs

func FlowSourceEncryptionPtr(v *FlowSourceEncryptionArgs) FlowSourceEncryptionPtrInput {
	return (*flowSourceEncryptionPtrType)(v)
}

func (*flowSourceEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryption)(nil)).Elem()
}

func (i *flowSourceEncryptionPtrType) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return i.ToFlowSourceEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowSourceEncryptionPtrType) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowSourceEncryptionOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryption)(nil)).Elem()
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionOutput() FlowSourceEncryptionOutput {
	return o
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionOutputWithContext(ctx context.Context) FlowSourceEncryptionOutput {
	return o
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return o.ToFlowSourceEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceEncryption) *FlowSourceEncryption {
		return &v
	}).(FlowSourceEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowSourceEncryptionOutput) Algorithm() FlowSourceEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *FlowSourceEncryptionAlgorithm { return v.Algorithm }).(FlowSourceEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowSourceEncryptionOutput) KeyType() FlowSourceEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *FlowSourceEncryptionKeyType { return v.KeyType }).(FlowSourceEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowSourceEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowSourceEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowSourceEncryptionOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type FlowSourceEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryption)(nil)).Elem()
}

func (o FlowSourceEncryptionPtrOutput) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return o
}

func (o FlowSourceEncryptionPtrOutput) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return o
}

func (o FlowSourceEncryptionPtrOutput) Elem() FlowSourceEncryptionOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) FlowSourceEncryption {
		if v != nil {
			return *v
		}
		var ret FlowSourceEncryption
		return ret
	}).(FlowSourceEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowSourceEncryptionPtrOutput) Algorithm() FlowSourceEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *FlowSourceEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(FlowSourceEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.DeviceId
	}).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowSourceEncryptionPtrOutput) KeyType() FlowSourceEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *FlowSourceEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowSourceEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowSourceEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowSourceEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The source configuration for cloud flows receiving a stream from a bridge.
type FlowSourceGatewayBridgeSource struct {
	// The ARN of the bridge feeding this flow.
	BridgeArn string `pulumi:"bridgeArn"`
	// The name of the VPC interface attachment to use for this bridge source.
	VpcInterfaceAttachment *FlowSourceVpcInterfaceAttachment `pulumi:"vpcInterfaceAttachment"`
}

// FlowSourceGatewayBridgeSourceInput is an input type that accepts FlowSourceGatewayBridgeSourceArgs and FlowSourceGatewayBridgeSourceOutput values.
// You can construct a concrete instance of `FlowSourceGatewayBridgeSourceInput` via:
//
//	FlowSourceGatewayBridgeSourceArgs{...}
type FlowSourceGatewayBridgeSourceInput interface {
	pulumi.Input

	ToFlowSourceGatewayBridgeSourceOutput() FlowSourceGatewayBridgeSourceOutput
	ToFlowSourceGatewayBridgeSourceOutputWithContext(context.Context) FlowSourceGatewayBridgeSourceOutput
}

// The source configuration for cloud flows receiving a stream from a bridge.
type FlowSourceGatewayBridgeSourceArgs struct {
	// The ARN of the bridge feeding this flow.
	BridgeArn pulumi.StringInput `pulumi:"bridgeArn"`
	// The name of the VPC interface attachment to use for this bridge source.
	VpcInterfaceAttachment FlowSourceVpcInterfaceAttachmentPtrInput `pulumi:"vpcInterfaceAttachment"`
}

func (FlowSourceGatewayBridgeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceGatewayBridgeSource)(nil)).Elem()
}

func (i FlowSourceGatewayBridgeSourceArgs) ToFlowSourceGatewayBridgeSourceOutput() FlowSourceGatewayBridgeSourceOutput {
	return i.ToFlowSourceGatewayBridgeSourceOutputWithContext(context.Background())
}

func (i FlowSourceGatewayBridgeSourceArgs) ToFlowSourceGatewayBridgeSourceOutputWithContext(ctx context.Context) FlowSourceGatewayBridgeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceGatewayBridgeSourceOutput)
}

func (i FlowSourceGatewayBridgeSourceArgs) ToFlowSourceGatewayBridgeSourcePtrOutput() FlowSourceGatewayBridgeSourcePtrOutput {
	return i.ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(context.Background())
}

func (i FlowSourceGatewayBridgeSourceArgs) ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowSourceGatewayBridgeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceGatewayBridgeSourceOutput).ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(ctx)
}

// FlowSourceGatewayBridgeSourcePtrInput is an input type that accepts FlowSourceGatewayBridgeSourceArgs, FlowSourceGatewayBridgeSourcePtr and FlowSourceGatewayBridgeSourcePtrOutput values.
// You can construct a concrete instance of `FlowSourceGatewayBridgeSourcePtrInput` via:
//
//	        FlowSourceGatewayBridgeSourceArgs{...}
//
//	or:
//
//	        nil
type FlowSourceGatewayBridgeSourcePtrInput interface {
	pulumi.Input

	ToFlowSourceGatewayBridgeSourcePtrOutput() FlowSourceGatewayBridgeSourcePtrOutput
	ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(context.Context) FlowSourceGatewayBridgeSourcePtrOutput
}

type flowSourceGatewayBridgeSourcePtrType FlowSourceGatewayBridgeSourceArgs

func FlowSourceGatewayBridgeSourcePtr(v *FlowSourceGatewayBridgeSourceArgs) FlowSourceGatewayBridgeSourcePtrInput {
	return (*flowSourceGatewayBridgeSourcePtrType)(v)
}

func (*flowSourceGatewayBridgeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceGatewayBridgeSource)(nil)).Elem()
}

func (i *flowSourceGatewayBridgeSourcePtrType) ToFlowSourceGatewayBridgeSourcePtrOutput() FlowSourceGatewayBridgeSourcePtrOutput {
	return i.ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(context.Background())
}

func (i *flowSourceGatewayBridgeSourcePtrType) ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowSourceGatewayBridgeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceGatewayBridgeSourcePtrOutput)
}

// The source configuration for cloud flows receiving a stream from a bridge.
type FlowSourceGatewayBridgeSourceOutput struct{ *pulumi.OutputState }

func (FlowSourceGatewayBridgeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceGatewayBridgeSource)(nil)).Elem()
}

func (o FlowSourceGatewayBridgeSourceOutput) ToFlowSourceGatewayBridgeSourceOutput() FlowSourceGatewayBridgeSourceOutput {
	return o
}

func (o FlowSourceGatewayBridgeSourceOutput) ToFlowSourceGatewayBridgeSourceOutputWithContext(ctx context.Context) FlowSourceGatewayBridgeSourceOutput {
	return o
}

func (o FlowSourceGatewayBridgeSourceOutput) ToFlowSourceGatewayBridgeSourcePtrOutput() FlowSourceGatewayBridgeSourcePtrOutput {
	return o.ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(context.Background())
}

func (o FlowSourceGatewayBridgeSourceOutput) ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowSourceGatewayBridgeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceGatewayBridgeSource) *FlowSourceGatewayBridgeSource {
		return &v
	}).(FlowSourceGatewayBridgeSourcePtrOutput)
}

// The ARN of the bridge feeding this flow.
func (o FlowSourceGatewayBridgeSourceOutput) BridgeArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowSourceGatewayBridgeSource) string { return v.BridgeArn }).(pulumi.StringOutput)
}

// The name of the VPC interface attachment to use for this bridge source.
func (o FlowSourceGatewayBridgeSourceOutput) VpcInterfaceAttachment() FlowSourceVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v FlowSourceGatewayBridgeSource) *FlowSourceVpcInterfaceAttachment {
		return v.VpcInterfaceAttachment
	}).(FlowSourceVpcInterfaceAttachmentPtrOutput)
}

type FlowSourceGatewayBridgeSourcePtrOutput struct{ *pulumi.OutputState }

func (FlowSourceGatewayBridgeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceGatewayBridgeSource)(nil)).Elem()
}

func (o FlowSourceGatewayBridgeSourcePtrOutput) ToFlowSourceGatewayBridgeSourcePtrOutput() FlowSourceGatewayBridgeSourcePtrOutput {
	return o
}

func (o FlowSourceGatewayBridgeSourcePtrOutput) ToFlowSourceGatewayBridgeSourcePtrOutputWithContext(ctx context.Context) FlowSourceGatewayBridgeSourcePtrOutput {
	return o
}

func (o FlowSourceGatewayBridgeSourcePtrOutput) Elem() FlowSourceGatewayBridgeSourceOutput {
	return o.ApplyT(func(v *FlowSourceGatewayBridgeSource) FlowSourceGatewayBridgeSource {
		if v != nil {
			return *v
		}
		var ret FlowSourceGatewayBridgeSource
		return ret
	}).(FlowSourceGatewayBridgeSourceOutput)
}

// The ARN of the bridge feeding this flow.
func (o FlowSourceGatewayBridgeSourcePtrOutput) BridgeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceGatewayBridgeSource) *string {
		if v == nil {
			return nil
		}
		return &v.BridgeArn
	}).(pulumi.StringPtrOutput)
}

// The name of the VPC interface attachment to use for this bridge source.
func (o FlowSourceGatewayBridgeSourcePtrOutput) VpcInterfaceAttachment() FlowSourceVpcInterfaceAttachmentPtrOutput {
	return o.ApplyT(func(v *FlowSourceGatewayBridgeSource) *FlowSourceVpcInterfaceAttachment {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceAttachment
	}).(FlowSourceVpcInterfaceAttachmentPtrOutput)
}

// The settings for attaching a VPC interface to an resource.
type FlowSourceVpcInterfaceAttachment struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
}

// FlowSourceVpcInterfaceAttachmentInput is an input type that accepts FlowSourceVpcInterfaceAttachmentArgs and FlowSourceVpcInterfaceAttachmentOutput values.
// You can construct a concrete instance of `FlowSourceVpcInterfaceAttachmentInput` via:
//
//	FlowSourceVpcInterfaceAttachmentArgs{...}
type FlowSourceVpcInterfaceAttachmentInput interface {
	pulumi.Input

	ToFlowSourceVpcInterfaceAttachmentOutput() FlowSourceVpcInterfaceAttachmentOutput
	ToFlowSourceVpcInterfaceAttachmentOutputWithContext(context.Context) FlowSourceVpcInterfaceAttachmentOutput
}

// The settings for attaching a VPC interface to an resource.
type FlowSourceVpcInterfaceAttachmentArgs struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
}

func (FlowSourceVpcInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (i FlowSourceVpcInterfaceAttachmentArgs) ToFlowSourceVpcInterfaceAttachmentOutput() FlowSourceVpcInterfaceAttachmentOutput {
	return i.ToFlowSourceVpcInterfaceAttachmentOutputWithContext(context.Background())
}

func (i FlowSourceVpcInterfaceAttachmentArgs) ToFlowSourceVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowSourceVpcInterfaceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceVpcInterfaceAttachmentOutput)
}

func (i FlowSourceVpcInterfaceAttachmentArgs) ToFlowSourceVpcInterfaceAttachmentPtrOutput() FlowSourceVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i FlowSourceVpcInterfaceAttachmentArgs) ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowSourceVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceVpcInterfaceAttachmentOutput).ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx)
}

// FlowSourceVpcInterfaceAttachmentPtrInput is an input type that accepts FlowSourceVpcInterfaceAttachmentArgs, FlowSourceVpcInterfaceAttachmentPtr and FlowSourceVpcInterfaceAttachmentPtrOutput values.
// You can construct a concrete instance of `FlowSourceVpcInterfaceAttachmentPtrInput` via:
//
//	        FlowSourceVpcInterfaceAttachmentArgs{...}
//
//	or:
//
//	        nil
type FlowSourceVpcInterfaceAttachmentPtrInput interface {
	pulumi.Input

	ToFlowSourceVpcInterfaceAttachmentPtrOutput() FlowSourceVpcInterfaceAttachmentPtrOutput
	ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Context) FlowSourceVpcInterfaceAttachmentPtrOutput
}

type flowSourceVpcInterfaceAttachmentPtrType FlowSourceVpcInterfaceAttachmentArgs

func FlowSourceVpcInterfaceAttachmentPtr(v *FlowSourceVpcInterfaceAttachmentArgs) FlowSourceVpcInterfaceAttachmentPtrInput {
	return (*flowSourceVpcInterfaceAttachmentPtrType)(v)
}

func (*flowSourceVpcInterfaceAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (i *flowSourceVpcInterfaceAttachmentPtrType) ToFlowSourceVpcInterfaceAttachmentPtrOutput() FlowSourceVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i *flowSourceVpcInterfaceAttachmentPtrType) ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowSourceVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceVpcInterfaceAttachmentPtrOutput)
}

// The settings for attaching a VPC interface to an resource.
type FlowSourceVpcInterfaceAttachmentOutput struct{ *pulumi.OutputState }

func (FlowSourceVpcInterfaceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowSourceVpcInterfaceAttachmentOutput) ToFlowSourceVpcInterfaceAttachmentOutput() FlowSourceVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowSourceVpcInterfaceAttachmentOutput) ToFlowSourceVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowSourceVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowSourceVpcInterfaceAttachmentOutput) ToFlowSourceVpcInterfaceAttachmentPtrOutput() FlowSourceVpcInterfaceAttachmentPtrOutput {
	return o.ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (o FlowSourceVpcInterfaceAttachmentOutput) ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowSourceVpcInterfaceAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceVpcInterfaceAttachment) *FlowSourceVpcInterfaceAttachment {
		return &v
	}).(FlowSourceVpcInterfaceAttachmentPtrOutput)
}

// The name of the VPC interface to use for this resource.
func (o FlowSourceVpcInterfaceAttachmentOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceVpcInterfaceAttachment) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

type FlowSourceVpcInterfaceAttachmentPtrOutput struct{ *pulumi.OutputState }

func (FlowSourceVpcInterfaceAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowSourceVpcInterfaceAttachmentPtrOutput) ToFlowSourceVpcInterfaceAttachmentPtrOutput() FlowSourceVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowSourceVpcInterfaceAttachmentPtrOutput) ToFlowSourceVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowSourceVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowSourceVpcInterfaceAttachmentPtrOutput) Elem() FlowSourceVpcInterfaceAttachmentOutput {
	return o.ApplyT(func(v *FlowSourceVpcInterfaceAttachment) FlowSourceVpcInterfaceAttachment {
		if v != nil {
			return *v
		}
		var ret FlowSourceVpcInterfaceAttachment
		return ret
	}).(FlowSourceVpcInterfaceAttachmentOutput)
}

// The name of the VPC interface to use for this resource.
func (o FlowSourceVpcInterfaceAttachmentPtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceVpcInterfaceAttachment) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// The details of a VPC interface.
type FlowVpcInterfaceType struct {
	// Immutable and has to be a unique against other VpcInterfaces in this Flow.
	Name string `pulumi:"name"`
	// IDs of the network interfaces created in customer's account by MediaConnect.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// The type of network adapter that you want MediaConnect to use on this interface. If you don't set this value, it defaults to ENA.
	NetworkInterfaceType *FlowVpcInterfaceNetworkInterfaceType `pulumi:"networkInterfaceType"`
	// Role Arn MediaConnect can assume to create ENIs in customer's account.
	RoleArn string `pulumi:"roleArn"`
	// Security Group IDs to be used on ENI.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Subnet must be in the AZ of the Flow
	SubnetId string `pulumi:"subnetId"`
}

// FlowVpcInterfaceTypeInput is an input type that accepts FlowVpcInterfaceTypeArgs and FlowVpcInterfaceTypeOutput values.
// You can construct a concrete instance of `FlowVpcInterfaceTypeInput` via:
//
//	FlowVpcInterfaceTypeArgs{...}
type FlowVpcInterfaceTypeInput interface {
	pulumi.Input

	ToFlowVpcInterfaceTypeOutput() FlowVpcInterfaceTypeOutput
	ToFlowVpcInterfaceTypeOutputWithContext(context.Context) FlowVpcInterfaceTypeOutput
}

// The details of a VPC interface.
type FlowVpcInterfaceTypeArgs struct {
	// Immutable and has to be a unique against other VpcInterfaces in this Flow.
	Name pulumi.StringInput `pulumi:"name"`
	// IDs of the network interfaces created in customer's account by MediaConnect.
	NetworkInterfaceIds pulumi.StringArrayInput `pulumi:"networkInterfaceIds"`
	// The type of network adapter that you want MediaConnect to use on this interface. If you don't set this value, it defaults to ENA.
	NetworkInterfaceType FlowVpcInterfaceNetworkInterfaceTypePtrInput `pulumi:"networkInterfaceType"`
	// Role Arn MediaConnect can assume to create ENIs in customer's account.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// Security Group IDs to be used on ENI.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// Subnet must be in the AZ of the Flow
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (FlowVpcInterfaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowVpcInterfaceType)(nil)).Elem()
}

func (i FlowVpcInterfaceTypeArgs) ToFlowVpcInterfaceTypeOutput() FlowVpcInterfaceTypeOutput {
	return i.ToFlowVpcInterfaceTypeOutputWithContext(context.Background())
}

func (i FlowVpcInterfaceTypeArgs) ToFlowVpcInterfaceTypeOutputWithContext(ctx context.Context) FlowVpcInterfaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowVpcInterfaceTypeOutput)
}

// FlowVpcInterfaceTypeArrayInput is an input type that accepts FlowVpcInterfaceTypeArray and FlowVpcInterfaceTypeArrayOutput values.
// You can construct a concrete instance of `FlowVpcInterfaceTypeArrayInput` via:
//
//	FlowVpcInterfaceTypeArray{ FlowVpcInterfaceTypeArgs{...} }
type FlowVpcInterfaceTypeArrayInput interface {
	pulumi.Input

	ToFlowVpcInterfaceTypeArrayOutput() FlowVpcInterfaceTypeArrayOutput
	ToFlowVpcInterfaceTypeArrayOutputWithContext(context.Context) FlowVpcInterfaceTypeArrayOutput
}

type FlowVpcInterfaceTypeArray []FlowVpcInterfaceTypeInput

func (FlowVpcInterfaceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowVpcInterfaceType)(nil)).Elem()
}

func (i FlowVpcInterfaceTypeArray) ToFlowVpcInterfaceTypeArrayOutput() FlowVpcInterfaceTypeArrayOutput {
	return i.ToFlowVpcInterfaceTypeArrayOutputWithContext(context.Background())
}

func (i FlowVpcInterfaceTypeArray) ToFlowVpcInterfaceTypeArrayOutputWithContext(ctx context.Context) FlowVpcInterfaceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowVpcInterfaceTypeArrayOutput)
}

// The details of a VPC interface.
type FlowVpcInterfaceTypeOutput struct{ *pulumi.OutputState }

func (FlowVpcInterfaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowVpcInterfaceType)(nil)).Elem()
}

func (o FlowVpcInterfaceTypeOutput) ToFlowVpcInterfaceTypeOutput() FlowVpcInterfaceTypeOutput {
	return o
}

func (o FlowVpcInterfaceTypeOutput) ToFlowVpcInterfaceTypeOutputWithContext(ctx context.Context) FlowVpcInterfaceTypeOutput {
	return o
}

// Immutable and has to be a unique against other VpcInterfaces in this Flow.
func (o FlowVpcInterfaceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FlowVpcInterfaceType) string { return v.Name }).(pulumi.StringOutput)
}

// IDs of the network interfaces created in customer's account by MediaConnect.
func (o FlowVpcInterfaceTypeOutput) NetworkInterfaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlowVpcInterfaceType) []string { return v.NetworkInterfaceIds }).(pulumi.StringArrayOutput)
}

// The type of network adapter that you want MediaConnect to use on this interface. If you don't set this value, it defaults to ENA.
func (o FlowVpcInterfaceTypeOutput) NetworkInterfaceType() FlowVpcInterfaceNetworkInterfaceTypePtrOutput {
	return o.ApplyT(func(v FlowVpcInterfaceType) *FlowVpcInterfaceNetworkInterfaceType { return v.NetworkInterfaceType }).(FlowVpcInterfaceNetworkInterfaceTypePtrOutput)
}

// Role Arn MediaConnect can assume to create ENIs in customer's account.
func (o FlowVpcInterfaceTypeOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowVpcInterfaceType) string { return v.RoleArn }).(pulumi.StringOutput)
}

// Security Group IDs to be used on ENI.
func (o FlowVpcInterfaceTypeOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlowVpcInterfaceType) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Subnet must be in the AZ of the Flow
func (o FlowVpcInterfaceTypeOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v FlowVpcInterfaceType) string { return v.SubnetId }).(pulumi.StringOutput)
}

type FlowVpcInterfaceTypeArrayOutput struct{ *pulumi.OutputState }

func (FlowVpcInterfaceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlowVpcInterfaceType)(nil)).Elem()
}

func (o FlowVpcInterfaceTypeArrayOutput) ToFlowVpcInterfaceTypeArrayOutput() FlowVpcInterfaceTypeArrayOutput {
	return o
}

func (o FlowVpcInterfaceTypeArrayOutput) ToFlowVpcInterfaceTypeArrayOutputWithContext(ctx context.Context) FlowVpcInterfaceTypeArrayOutput {
	return o
}

func (o FlowVpcInterfaceTypeArrayOutput) Index(i pulumi.IntInput) FlowVpcInterfaceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlowVpcInterfaceType {
		return vs[0].([]FlowVpcInterfaceType)[vs[1].(int)]
	}).(FlowVpcInterfaceTypeOutput)
}

// The settings for attaching a VPC interface to an resource.
type FlowVpcInterfaceAttachment struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
}

// FlowVpcInterfaceAttachmentInput is an input type that accepts FlowVpcInterfaceAttachmentArgs and FlowVpcInterfaceAttachmentOutput values.
// You can construct a concrete instance of `FlowVpcInterfaceAttachmentInput` via:
//
//	FlowVpcInterfaceAttachmentArgs{...}
type FlowVpcInterfaceAttachmentInput interface {
	pulumi.Input

	ToFlowVpcInterfaceAttachmentOutput() FlowVpcInterfaceAttachmentOutput
	ToFlowVpcInterfaceAttachmentOutputWithContext(context.Context) FlowVpcInterfaceAttachmentOutput
}

// The settings for attaching a VPC interface to an resource.
type FlowVpcInterfaceAttachmentArgs struct {
	// The name of the VPC interface to use for this resource.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
}

func (FlowVpcInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowVpcInterfaceAttachment)(nil)).Elem()
}

func (i FlowVpcInterfaceAttachmentArgs) ToFlowVpcInterfaceAttachmentOutput() FlowVpcInterfaceAttachmentOutput {
	return i.ToFlowVpcInterfaceAttachmentOutputWithContext(context.Background())
}

func (i FlowVpcInterfaceAttachmentArgs) ToFlowVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowVpcInterfaceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowVpcInterfaceAttachmentOutput)
}

func (i FlowVpcInterfaceAttachmentArgs) ToFlowVpcInterfaceAttachmentPtrOutput() FlowVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i FlowVpcInterfaceAttachmentArgs) ToFlowVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowVpcInterfaceAttachmentOutput).ToFlowVpcInterfaceAttachmentPtrOutputWithContext(ctx)
}

// FlowVpcInterfaceAttachmentPtrInput is an input type that accepts FlowVpcInterfaceAttachmentArgs, FlowVpcInterfaceAttachmentPtr and FlowVpcInterfaceAttachmentPtrOutput values.
// You can construct a concrete instance of `FlowVpcInterfaceAttachmentPtrInput` via:
//
//	        FlowVpcInterfaceAttachmentArgs{...}
//
//	or:
//
//	        nil
type FlowVpcInterfaceAttachmentPtrInput interface {
	pulumi.Input

	ToFlowVpcInterfaceAttachmentPtrOutput() FlowVpcInterfaceAttachmentPtrOutput
	ToFlowVpcInterfaceAttachmentPtrOutputWithContext(context.Context) FlowVpcInterfaceAttachmentPtrOutput
}

type flowVpcInterfaceAttachmentPtrType FlowVpcInterfaceAttachmentArgs

func FlowVpcInterfaceAttachmentPtr(v *FlowVpcInterfaceAttachmentArgs) FlowVpcInterfaceAttachmentPtrInput {
	return (*flowVpcInterfaceAttachmentPtrType)(v)
}

func (*flowVpcInterfaceAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowVpcInterfaceAttachment)(nil)).Elem()
}

func (i *flowVpcInterfaceAttachmentPtrType) ToFlowVpcInterfaceAttachmentPtrOutput() FlowVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i *flowVpcInterfaceAttachmentPtrType) ToFlowVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowVpcInterfaceAttachmentPtrOutput)
}

// The settings for attaching a VPC interface to an resource.
type FlowVpcInterfaceAttachmentOutput struct{ *pulumi.OutputState }

func (FlowVpcInterfaceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowVpcInterfaceAttachmentOutput) ToFlowVpcInterfaceAttachmentOutput() FlowVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowVpcInterfaceAttachmentOutput) ToFlowVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowVpcInterfaceAttachmentOutput) ToFlowVpcInterfaceAttachmentPtrOutput() FlowVpcInterfaceAttachmentPtrOutput {
	return o.ToFlowVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (o FlowVpcInterfaceAttachmentOutput) ToFlowVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowVpcInterfaceAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowVpcInterfaceAttachment) *FlowVpcInterfaceAttachment {
		return &v
	}).(FlowVpcInterfaceAttachmentPtrOutput)
}

// The name of the VPC interface to use for this resource.
func (o FlowVpcInterfaceAttachmentOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowVpcInterfaceAttachment) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

type FlowVpcInterfaceAttachmentPtrOutput struct{ *pulumi.OutputState }

func (FlowVpcInterfaceAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowVpcInterfaceAttachmentPtrOutput) ToFlowVpcInterfaceAttachmentPtrOutput() FlowVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowVpcInterfaceAttachmentPtrOutput) ToFlowVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowVpcInterfaceAttachmentPtrOutput) Elem() FlowVpcInterfaceAttachmentOutput {
	return o.ApplyT(func(v *FlowVpcInterfaceAttachment) FlowVpcInterfaceAttachment {
		if v != nil {
			return *v
		}
		var ret FlowVpcInterfaceAttachment
		return ret
	}).(FlowVpcInterfaceAttachmentOutput)
}

// The name of the VPC interface to use for this resource.
func (o FlowVpcInterfaceAttachmentPtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowVpcInterfaceAttachment) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// The network settings for a gateway.
type GatewayNetwork struct {
	// A unique IP address range to use for this network. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
	CidrBlock string `pulumi:"cidrBlock"`
	// The name of the network. This name is used to reference the network and must be unique among networks in this gateway.
	Name string `pulumi:"name"`
}

// GatewayNetworkInput is an input type that accepts GatewayNetworkArgs and GatewayNetworkOutput values.
// You can construct a concrete instance of `GatewayNetworkInput` via:
//
//	GatewayNetworkArgs{...}
type GatewayNetworkInput interface {
	pulumi.Input

	ToGatewayNetworkOutput() GatewayNetworkOutput
	ToGatewayNetworkOutputWithContext(context.Context) GatewayNetworkOutput
}

// The network settings for a gateway.
type GatewayNetworkArgs struct {
	// A unique IP address range to use for this network. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// The name of the network. This name is used to reference the network and must be unique among networks in this gateway.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GatewayNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayNetwork)(nil)).Elem()
}

func (i GatewayNetworkArgs) ToGatewayNetworkOutput() GatewayNetworkOutput {
	return i.ToGatewayNetworkOutputWithContext(context.Background())
}

func (i GatewayNetworkArgs) ToGatewayNetworkOutputWithContext(ctx context.Context) GatewayNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayNetworkOutput)
}

// GatewayNetworkArrayInput is an input type that accepts GatewayNetworkArray and GatewayNetworkArrayOutput values.
// You can construct a concrete instance of `GatewayNetworkArrayInput` via:
//
//	GatewayNetworkArray{ GatewayNetworkArgs{...} }
type GatewayNetworkArrayInput interface {
	pulumi.Input

	ToGatewayNetworkArrayOutput() GatewayNetworkArrayOutput
	ToGatewayNetworkArrayOutputWithContext(context.Context) GatewayNetworkArrayOutput
}

type GatewayNetworkArray []GatewayNetworkInput

func (GatewayNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayNetwork)(nil)).Elem()
}

func (i GatewayNetworkArray) ToGatewayNetworkArrayOutput() GatewayNetworkArrayOutput {
	return i.ToGatewayNetworkArrayOutputWithContext(context.Background())
}

func (i GatewayNetworkArray) ToGatewayNetworkArrayOutputWithContext(ctx context.Context) GatewayNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayNetworkArrayOutput)
}

// The network settings for a gateway.
type GatewayNetworkOutput struct{ *pulumi.OutputState }

func (GatewayNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayNetwork)(nil)).Elem()
}

func (o GatewayNetworkOutput) ToGatewayNetworkOutput() GatewayNetworkOutput {
	return o
}

func (o GatewayNetworkOutput) ToGatewayNetworkOutputWithContext(ctx context.Context) GatewayNetworkOutput {
	return o
}

// A unique IP address range to use for this network. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
func (o GatewayNetworkOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayNetwork) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// The name of the network. This name is used to reference the network and must be unique among networks in this gateway.
func (o GatewayNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayNetwork) string { return v.Name }).(pulumi.StringOutput)
}

type GatewayNetworkArrayOutput struct{ *pulumi.OutputState }

func (GatewayNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayNetwork)(nil)).Elem()
}

func (o GatewayNetworkArrayOutput) ToGatewayNetworkArrayOutput() GatewayNetworkArrayOutput {
	return o
}

func (o GatewayNetworkArrayOutput) ToGatewayNetworkArrayOutputWithContext(ctx context.Context) GatewayNetworkArrayOutput {
	return o
}

func (o GatewayNetworkArrayOutput) Index(i pulumi.IntInput) GatewayNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewayNetwork {
		return vs[0].([]GatewayNetwork)[vs[1].(int)]
	}).(GatewayNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeEgressGatewayBridgeInput)(nil)).Elem(), BridgeEgressGatewayBridgeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeEgressGatewayBridgePtrInput)(nil)).Elem(), BridgeEgressGatewayBridgeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFailoverConfigInput)(nil)).Elem(), BridgeFailoverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFailoverConfigPtrInput)(nil)).Elem(), BridgeFailoverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFlowSourceInput)(nil)).Elem(), BridgeFlowSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFlowSourcePtrInput)(nil)).Elem(), BridgeFlowSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeIngressGatewayBridgeInput)(nil)).Elem(), BridgeIngressGatewayBridgeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeIngressGatewayBridgePtrInput)(nil)).Elem(), BridgeIngressGatewayBridgeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeNetworkOutputInput)(nil)).Elem(), BridgeNetworkOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeNetworkOutputPtrInput)(nil)).Elem(), BridgeNetworkOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeNetworkSourceInput)(nil)).Elem(), BridgeNetworkSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeNetworkSourcePtrInput)(nil)).Elem(), BridgeNetworkSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeOutputTypeInput)(nil)).Elem(), BridgeOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeOutputTypeArrayInput)(nil)).Elem(), BridgeOutputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeOutputResourceBridgeNetworkOutputInput)(nil)).Elem(), BridgeOutputResourceBridgeNetworkOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceTypeInput)(nil)).Elem(), BridgeSourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceTypeArrayInput)(nil)).Elem(), BridgeSourceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceBridgeFlowSourceInput)(nil)).Elem(), BridgeSourceBridgeFlowSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceBridgeFlowSourcePtrInput)(nil)).Elem(), BridgeSourceBridgeFlowSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceBridgeNetworkSourceInput)(nil)).Elem(), BridgeSourceBridgeNetworkSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceBridgeNetworkSourcePtrInput)(nil)).Elem(), BridgeSourceBridgeNetworkSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourcePriorityInput)(nil)).Elem(), BridgeSourcePriorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourcePriorityPtrInput)(nil)).Elem(), BridgeSourcePriorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceVpcInterfaceAttachmentInput)(nil)).Elem(), BridgeSourceVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceVpcInterfaceAttachmentPtrInput)(nil)).Elem(), BridgeSourceVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeVpcInterfaceAttachmentInput)(nil)).Elem(), BridgeVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeVpcInterfaceAttachmentPtrInput)(nil)).Elem(), BridgeVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionInput)(nil)).Elem(), FlowEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionPtrInput)(nil)).Elem(), FlowEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionInput)(nil)).Elem(), FlowEntitlementEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionPtrInput)(nil)).Elem(), FlowEntitlementEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigInput)(nil)).Elem(), FlowFailoverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigPtrInput)(nil)).Elem(), FlowFailoverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigSourcePriorityPropertiesInput)(nil)).Elem(), FlowFailoverConfigSourcePriorityPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigSourcePriorityPropertiesPtrInput)(nil)).Elem(), FlowFailoverConfigSourcePriorityPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFmtpInput)(nil)).Elem(), FlowFmtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFmtpPtrInput)(nil)).Elem(), FlowFmtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowGatewayBridgeSourceInput)(nil)).Elem(), FlowGatewayBridgeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowGatewayBridgeSourcePtrInput)(nil)).Elem(), FlowGatewayBridgeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowInputConfigurationInput)(nil)).Elem(), FlowInputConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowInputConfigurationArrayInput)(nil)).Elem(), FlowInputConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowInterfaceInput)(nil)).Elem(), FlowInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMaintenanceInput)(nil)).Elem(), FlowMaintenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMaintenancePtrInput)(nil)).Elem(), FlowMaintenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMediaStreamInput)(nil)).Elem(), FlowMediaStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMediaStreamArrayInput)(nil)).Elem(), FlowMediaStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMediaStreamAttributesInput)(nil)).Elem(), FlowMediaStreamAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMediaStreamAttributesPtrInput)(nil)).Elem(), FlowMediaStreamAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMediaStreamSourceConfigurationInput)(nil)).Elem(), FlowMediaStreamSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowMediaStreamSourceConfigurationArrayInput)(nil)).Elem(), FlowMediaStreamSourceConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputDestinationConfigurationInput)(nil)).Elem(), FlowOutputDestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputDestinationConfigurationArrayInput)(nil)).Elem(), FlowOutputDestinationConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncodingParametersInput)(nil)).Elem(), FlowOutputEncodingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncodingParametersPtrInput)(nil)).Elem(), FlowOutputEncodingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionInput)(nil)).Elem(), FlowOutputEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionPtrInput)(nil)).Elem(), FlowOutputEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputInterfaceInput)(nil)).Elem(), FlowOutputInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputMediaStreamOutputConfigurationInput)(nil)).Elem(), FlowOutputMediaStreamOutputConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputMediaStreamOutputConfigurationArrayInput)(nil)).Elem(), FlowOutputMediaStreamOutputConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputVpcInterfaceAttachmentInput)(nil)).Elem(), FlowOutputVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputVpcInterfaceAttachmentPtrInput)(nil)).Elem(), FlowOutputVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceTypeInput)(nil)).Elem(), FlowSourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionInput)(nil)).Elem(), FlowSourceEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionPtrInput)(nil)).Elem(), FlowSourceEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceGatewayBridgeSourceInput)(nil)).Elem(), FlowSourceGatewayBridgeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceGatewayBridgeSourcePtrInput)(nil)).Elem(), FlowSourceGatewayBridgeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceVpcInterfaceAttachmentInput)(nil)).Elem(), FlowSourceVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceVpcInterfaceAttachmentPtrInput)(nil)).Elem(), FlowSourceVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowVpcInterfaceTypeInput)(nil)).Elem(), FlowVpcInterfaceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowVpcInterfaceTypeArrayInput)(nil)).Elem(), FlowVpcInterfaceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowVpcInterfaceAttachmentInput)(nil)).Elem(), FlowVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowVpcInterfaceAttachmentPtrInput)(nil)).Elem(), FlowVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayNetworkInput)(nil)).Elem(), GatewayNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayNetworkArrayInput)(nil)).Elem(), GatewayNetworkArray{})
	pulumi.RegisterOutputType(BridgeEgressGatewayBridgeOutput{})
	pulumi.RegisterOutputType(BridgeEgressGatewayBridgePtrOutput{})
	pulumi.RegisterOutputType(BridgeFailoverConfigOutput{})
	pulumi.RegisterOutputType(BridgeFailoverConfigPtrOutput{})
	pulumi.RegisterOutputType(BridgeFlowSourceOutput{})
	pulumi.RegisterOutputType(BridgeFlowSourcePtrOutput{})
	pulumi.RegisterOutputType(BridgeIngressGatewayBridgeOutput{})
	pulumi.RegisterOutputType(BridgeIngressGatewayBridgePtrOutput{})
	pulumi.RegisterOutputType(BridgeNetworkOutputOutput{})
	pulumi.RegisterOutputType(BridgeNetworkOutputPtrOutput{})
	pulumi.RegisterOutputType(BridgeNetworkSourceOutput{})
	pulumi.RegisterOutputType(BridgeNetworkSourcePtrOutput{})
	pulumi.RegisterOutputType(BridgeOutputTypeOutput{})
	pulumi.RegisterOutputType(BridgeOutputTypeArrayOutput{})
	pulumi.RegisterOutputType(BridgeOutputResourceBridgeNetworkOutputOutput{})
	pulumi.RegisterOutputType(BridgeOutputResourceBridgeNetworkOutputPtrOutput{})
	pulumi.RegisterOutputType(BridgeSourceTypeOutput{})
	pulumi.RegisterOutputType(BridgeSourceTypeArrayOutput{})
	pulumi.RegisterOutputType(BridgeSourceBridgeFlowSourceOutput{})
	pulumi.RegisterOutputType(BridgeSourceBridgeFlowSourcePtrOutput{})
	pulumi.RegisterOutputType(BridgeSourceBridgeNetworkSourceOutput{})
	pulumi.RegisterOutputType(BridgeSourceBridgeNetworkSourcePtrOutput{})
	pulumi.RegisterOutputType(BridgeSourcePriorityOutput{})
	pulumi.RegisterOutputType(BridgeSourcePriorityPtrOutput{})
	pulumi.RegisterOutputType(BridgeSourceVpcInterfaceAttachmentOutput{})
	pulumi.RegisterOutputType(BridgeSourceVpcInterfaceAttachmentPtrOutput{})
	pulumi.RegisterOutputType(BridgeVpcInterfaceAttachmentOutput{})
	pulumi.RegisterOutputType(BridgeVpcInterfaceAttachmentPtrOutput{})
	pulumi.RegisterOutputType(FlowEncryptionOutput{})
	pulumi.RegisterOutputType(FlowEncryptionPtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionPtrOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigPtrOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigSourcePriorityPropertiesOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigSourcePriorityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FlowFmtpOutput{})
	pulumi.RegisterOutputType(FlowFmtpPtrOutput{})
	pulumi.RegisterOutputType(FlowGatewayBridgeSourceOutput{})
	pulumi.RegisterOutputType(FlowGatewayBridgeSourcePtrOutput{})
	pulumi.RegisterOutputType(FlowInputConfigurationOutput{})
	pulumi.RegisterOutputType(FlowInputConfigurationArrayOutput{})
	pulumi.RegisterOutputType(FlowInterfaceOutput{})
	pulumi.RegisterOutputType(FlowMaintenanceOutput{})
	pulumi.RegisterOutputType(FlowMaintenancePtrOutput{})
	pulumi.RegisterOutputType(FlowMediaStreamOutput{})
	pulumi.RegisterOutputType(FlowMediaStreamArrayOutput{})
	pulumi.RegisterOutputType(FlowMediaStreamAttributesOutput{})
	pulumi.RegisterOutputType(FlowMediaStreamAttributesPtrOutput{})
	pulumi.RegisterOutputType(FlowMediaStreamSourceConfigurationOutput{})
	pulumi.RegisterOutputType(FlowMediaStreamSourceConfigurationArrayOutput{})
	pulumi.RegisterOutputType(FlowOutputDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(FlowOutputDestinationConfigurationArrayOutput{})
	pulumi.RegisterOutputType(FlowOutputEncodingParametersOutput{})
	pulumi.RegisterOutputType(FlowOutputEncodingParametersPtrOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionPtrOutput{})
	pulumi.RegisterOutputType(FlowOutputInterfaceOutput{})
	pulumi.RegisterOutputType(FlowOutputMediaStreamOutputConfigurationOutput{})
	pulumi.RegisterOutputType(FlowOutputMediaStreamOutputConfigurationArrayOutput{})
	pulumi.RegisterOutputType(FlowOutputVpcInterfaceAttachmentOutput{})
	pulumi.RegisterOutputType(FlowOutputVpcInterfaceAttachmentPtrOutput{})
	pulumi.RegisterOutputType(FlowSourceTypeOutput{})
	pulumi.RegisterOutputType(FlowSourceTypePtrOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionPtrOutput{})
	pulumi.RegisterOutputType(FlowSourceGatewayBridgeSourceOutput{})
	pulumi.RegisterOutputType(FlowSourceGatewayBridgeSourcePtrOutput{})
	pulumi.RegisterOutputType(FlowSourceVpcInterfaceAttachmentOutput{})
	pulumi.RegisterOutputType(FlowSourceVpcInterfaceAttachmentPtrOutput{})
	pulumi.RegisterOutputType(FlowVpcInterfaceTypeOutput{})
	pulumi.RegisterOutputType(FlowVpcInterfaceTypeArrayOutput{})
	pulumi.RegisterOutputType(FlowVpcInterfaceAttachmentOutput{})
	pulumi.RegisterOutputType(FlowVpcInterfaceAttachmentPtrOutput{})
	pulumi.RegisterOutputType(GatewayNetworkOutput{})
	pulumi.RegisterOutputType(GatewayNetworkArrayOutput{})
}
