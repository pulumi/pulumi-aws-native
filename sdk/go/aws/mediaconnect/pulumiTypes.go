// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about the encryption of the flow.
type FlowEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm *FlowEncryptionAlgorithm `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector *string `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId *string `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowEncryptionKeyType `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region *string `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId *string `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn *string `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url *string `pulumi:"url"`
}

// FlowEncryptionInput is an input type that accepts FlowEncryptionArgs and FlowEncryptionOutput values.
// You can construct a concrete instance of `FlowEncryptionInput` via:
//
//          FlowEncryptionArgs{...}
type FlowEncryptionInput interface {
	pulumi.Input

	ToFlowEncryptionOutput() FlowEncryptionOutput
	ToFlowEncryptionOutputWithContext(context.Context) FlowEncryptionOutput
}

// Information about the encryption of the flow.
type FlowEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowEncryptionAlgorithmPtrInput `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector pulumi.StringPtrInput `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (FlowEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryption)(nil)).Elem()
}

func (i FlowEncryptionArgs) ToFlowEncryptionOutput() FlowEncryptionOutput {
	return i.ToFlowEncryptionOutputWithContext(context.Background())
}

func (i FlowEncryptionArgs) ToFlowEncryptionOutputWithContext(ctx context.Context) FlowEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEncryptionOutput)
}

func (i FlowEncryptionArgs) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return i.ToFlowEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowEncryptionArgs) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEncryptionOutput).ToFlowEncryptionPtrOutputWithContext(ctx)
}

// FlowEncryptionPtrInput is an input type that accepts FlowEncryptionArgs, FlowEncryptionPtr and FlowEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowEncryptionPtrInput` via:
//
//          FlowEncryptionArgs{...}
//
//  or:
//
//          nil
type FlowEncryptionPtrInput interface {
	pulumi.Input

	ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput
	ToFlowEncryptionPtrOutputWithContext(context.Context) FlowEncryptionPtrOutput
}

type flowEncryptionPtrType FlowEncryptionArgs

func FlowEncryptionPtr(v *FlowEncryptionArgs) FlowEncryptionPtrInput {
	return (*flowEncryptionPtrType)(v)
}

func (*flowEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryption)(nil)).Elem()
}

func (i *flowEncryptionPtrType) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return i.ToFlowEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowEncryptionPtrType) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowEncryptionOutput struct{ *pulumi.OutputState }

func (FlowEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryption)(nil)).Elem()
}

func (o FlowEncryptionOutput) ToFlowEncryptionOutput() FlowEncryptionOutput {
	return o
}

func (o FlowEncryptionOutput) ToFlowEncryptionOutputWithContext(ctx context.Context) FlowEncryptionOutput {
	return o
}

func (o FlowEncryptionOutput) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return o.ToFlowEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionOutput) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEncryption) *FlowEncryption {
		return &v
	}).(FlowEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEncryptionOutput) Algorithm() FlowEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *FlowEncryptionAlgorithm { return v.Algorithm }).(FlowEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEncryptionOutput) KeyType() FlowEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowEncryption) *FlowEncryptionKeyType { return v.KeyType }).(FlowEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEncryptionOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEncryption) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type FlowEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryption)(nil)).Elem()
}

func (o FlowEncryptionPtrOutput) ToFlowEncryptionPtrOutput() FlowEncryptionPtrOutput {
	return o
}

func (o FlowEncryptionPtrOutput) ToFlowEncryptionPtrOutputWithContext(ctx context.Context) FlowEncryptionPtrOutput {
	return o
}

func (o FlowEncryptionPtrOutput) Elem() FlowEncryptionOutput {
	return o.ApplyT(func(v *FlowEncryption) FlowEncryption {
		if v != nil {
			return *v
		}
		var ret FlowEncryption
		return ret
	}).(FlowEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEncryptionPtrOutput) Algorithm() FlowEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *FlowEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(FlowEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.DeviceId
	}).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEncryptionPtrOutput) KeyType() FlowEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *FlowEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEncryptionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Information about the encryption of the flow.
type FlowEntitlementEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowEntitlementEncryptionAlgorithm `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector *string `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId *string `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowEntitlementEncryptionKeyType `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region *string `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId *string `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn *string `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url *string `pulumi:"url"`
}

// FlowEntitlementEncryptionInput is an input type that accepts FlowEntitlementEncryptionArgs and FlowEntitlementEncryptionOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionInput` via:
//
//          FlowEntitlementEncryptionArgs{...}
type FlowEntitlementEncryptionInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionOutput() FlowEntitlementEncryptionOutput
	ToFlowEntitlementEncryptionOutputWithContext(context.Context) FlowEntitlementEncryptionOutput
}

// Information about the encryption of the flow.
type FlowEntitlementEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowEntitlementEncryptionAlgorithmInput `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector pulumi.StringPtrInput `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowEntitlementEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (FlowEntitlementEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryption)(nil)).Elem()
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionOutput() FlowEntitlementEncryptionOutput {
	return i.ToFlowEntitlementEncryptionOutputWithContext(context.Background())
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionOutputWithContext(ctx context.Context) FlowEntitlementEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEntitlementEncryptionOutput)
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return i.ToFlowEntitlementEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowEntitlementEncryptionArgs) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEntitlementEncryptionOutput).ToFlowEntitlementEncryptionPtrOutputWithContext(ctx)
}

// FlowEntitlementEncryptionPtrInput is an input type that accepts FlowEntitlementEncryptionArgs, FlowEntitlementEncryptionPtr and FlowEntitlementEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionPtrInput` via:
//
//          FlowEntitlementEncryptionArgs{...}
//
//  or:
//
//          nil
type FlowEntitlementEncryptionPtrInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput
	ToFlowEntitlementEncryptionPtrOutputWithContext(context.Context) FlowEntitlementEncryptionPtrOutput
}

type flowEntitlementEncryptionPtrType FlowEntitlementEncryptionArgs

func FlowEntitlementEncryptionPtr(v *FlowEntitlementEncryptionArgs) FlowEntitlementEncryptionPtrInput {
	return (*flowEntitlementEncryptionPtrType)(v)
}

func (*flowEntitlementEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryption)(nil)).Elem()
}

func (i *flowEntitlementEncryptionPtrType) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return i.ToFlowEntitlementEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowEntitlementEncryptionPtrType) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowEntitlementEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowEntitlementEncryptionOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryption)(nil)).Elem()
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionOutput() FlowEntitlementEncryptionOutput {
	return o
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionOutputWithContext(ctx context.Context) FlowEntitlementEncryptionOutput {
	return o
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return o.ToFlowEntitlementEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionOutput) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEncryption) *FlowEntitlementEncryption {
		return &v
	}).(FlowEntitlementEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEntitlementEncryptionOutput) Algorithm() FlowEntitlementEncryptionAlgorithmOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) FlowEntitlementEncryptionAlgorithm { return v.Algorithm }).(FlowEntitlementEncryptionAlgorithmOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEntitlementEncryptionOutput) KeyType() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *FlowEntitlementEncryptionKeyType { return v.KeyType }).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEntitlementEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEntitlementEncryptionOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowEntitlementEncryption) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type FlowEntitlementEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryption)(nil)).Elem()
}

func (o FlowEntitlementEncryptionPtrOutput) ToFlowEntitlementEncryptionPtrOutput() FlowEntitlementEncryptionPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionPtrOutput) ToFlowEntitlementEncryptionPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionPtrOutput) Elem() FlowEntitlementEncryptionOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) FlowEntitlementEncryption {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEncryption
		return ret
	}).(FlowEntitlementEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowEntitlementEncryptionPtrOutput) Algorithm() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *FlowEntitlementEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.DeviceId
	}).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowEntitlementEncryptionPtrOutput) KeyType() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *FlowEntitlementEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowEntitlementEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowEntitlementEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowEntitlementEncryptionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The settings for source failover
type FlowFailoverConfig struct {
	// Search window time to look for dash-7 packets
	RecoveryWindow *int                     `pulumi:"recoveryWindow"`
	State          *FlowFailoverConfigState `pulumi:"state"`
}

// FlowFailoverConfigInput is an input type that accepts FlowFailoverConfigArgs and FlowFailoverConfigOutput values.
// You can construct a concrete instance of `FlowFailoverConfigInput` via:
//
//          FlowFailoverConfigArgs{...}
type FlowFailoverConfigInput interface {
	pulumi.Input

	ToFlowFailoverConfigOutput() FlowFailoverConfigOutput
	ToFlowFailoverConfigOutputWithContext(context.Context) FlowFailoverConfigOutput
}

// The settings for source failover
type FlowFailoverConfigArgs struct {
	// Search window time to look for dash-7 packets
	RecoveryWindow pulumi.IntPtrInput              `pulumi:"recoveryWindow"`
	State          FlowFailoverConfigStatePtrInput `pulumi:"state"`
}

func (FlowFailoverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfig)(nil)).Elem()
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigOutput() FlowFailoverConfigOutput {
	return i.ToFlowFailoverConfigOutputWithContext(context.Background())
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigOutputWithContext(ctx context.Context) FlowFailoverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigOutput)
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return i.ToFlowFailoverConfigPtrOutputWithContext(context.Background())
}

func (i FlowFailoverConfigArgs) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigOutput).ToFlowFailoverConfigPtrOutputWithContext(ctx)
}

// FlowFailoverConfigPtrInput is an input type that accepts FlowFailoverConfigArgs, FlowFailoverConfigPtr and FlowFailoverConfigPtrOutput values.
// You can construct a concrete instance of `FlowFailoverConfigPtrInput` via:
//
//          FlowFailoverConfigArgs{...}
//
//  or:
//
//          nil
type FlowFailoverConfigPtrInput interface {
	pulumi.Input

	ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput
	ToFlowFailoverConfigPtrOutputWithContext(context.Context) FlowFailoverConfigPtrOutput
}

type flowFailoverConfigPtrType FlowFailoverConfigArgs

func FlowFailoverConfigPtr(v *FlowFailoverConfigArgs) FlowFailoverConfigPtrInput {
	return (*flowFailoverConfigPtrType)(v)
}

func (*flowFailoverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfig)(nil)).Elem()
}

func (i *flowFailoverConfigPtrType) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return i.ToFlowFailoverConfigPtrOutputWithContext(context.Background())
}

func (i *flowFailoverConfigPtrType) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowFailoverConfigPtrOutput)
}

// The settings for source failover
type FlowFailoverConfigOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfig)(nil)).Elem()
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigOutput() FlowFailoverConfigOutput {
	return o
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigOutputWithContext(ctx context.Context) FlowFailoverConfigOutput {
	return o
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return o.ToFlowFailoverConfigPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigOutput) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFailoverConfig) *FlowFailoverConfig {
		return &v
	}).(FlowFailoverConfigPtrOutput)
}

// Search window time to look for dash-7 packets
func (o FlowFailoverConfigOutput) RecoveryWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowFailoverConfig) *int { return v.RecoveryWindow }).(pulumi.IntPtrOutput)
}

func (o FlowFailoverConfigOutput) State() FlowFailoverConfigStatePtrOutput {
	return o.ApplyT(func(v FlowFailoverConfig) *FlowFailoverConfigState { return v.State }).(FlowFailoverConfigStatePtrOutput)
}

type FlowFailoverConfigPtrOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfig)(nil)).Elem()
}

func (o FlowFailoverConfigPtrOutput) ToFlowFailoverConfigPtrOutput() FlowFailoverConfigPtrOutput {
	return o
}

func (o FlowFailoverConfigPtrOutput) ToFlowFailoverConfigPtrOutputWithContext(ctx context.Context) FlowFailoverConfigPtrOutput {
	return o
}

func (o FlowFailoverConfigPtrOutput) Elem() FlowFailoverConfigOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) FlowFailoverConfig {
		if v != nil {
			return *v
		}
		var ret FlowFailoverConfig
		return ret
	}).(FlowFailoverConfigOutput)
}

// Search window time to look for dash-7 packets
func (o FlowFailoverConfigPtrOutput) RecoveryWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) *int {
		if v == nil {
			return nil
		}
		return v.RecoveryWindow
	}).(pulumi.IntPtrOutput)
}

func (o FlowFailoverConfigPtrOutput) State() FlowFailoverConfigStatePtrOutput {
	return o.ApplyT(func(v *FlowFailoverConfig) *FlowFailoverConfigState {
		if v == nil {
			return nil
		}
		return v.State
	}).(FlowFailoverConfigStatePtrOutput)
}

// Information about the encryption of the flow.
type FlowOutputEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm *FlowOutputEncryptionAlgorithm `pulumi:"algorithm"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowOutputEncryptionKeyType `pulumi:"keyType"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn string `pulumi:"secretArn"`
}

// FlowOutputEncryptionInput is an input type that accepts FlowOutputEncryptionArgs and FlowOutputEncryptionOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionInput` via:
//
//          FlowOutputEncryptionArgs{...}
type FlowOutputEncryptionInput interface {
	pulumi.Input

	ToFlowOutputEncryptionOutput() FlowOutputEncryptionOutput
	ToFlowOutputEncryptionOutputWithContext(context.Context) FlowOutputEncryptionOutput
}

// Information about the encryption of the flow.
type FlowOutputEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowOutputEncryptionAlgorithmPtrInput `pulumi:"algorithm"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowOutputEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringInput `pulumi:"secretArn"`
}

func (FlowOutputEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryption)(nil)).Elem()
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionOutput() FlowOutputEncryptionOutput {
	return i.ToFlowOutputEncryptionOutputWithContext(context.Background())
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionOutputWithContext(ctx context.Context) FlowOutputEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncryptionOutput)
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return i.ToFlowOutputEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowOutputEncryptionArgs) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncryptionOutput).ToFlowOutputEncryptionPtrOutputWithContext(ctx)
}

// FlowOutputEncryptionPtrInput is an input type that accepts FlowOutputEncryptionArgs, FlowOutputEncryptionPtr and FlowOutputEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionPtrInput` via:
//
//          FlowOutputEncryptionArgs{...}
//
//  or:
//
//          nil
type FlowOutputEncryptionPtrInput interface {
	pulumi.Input

	ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput
	ToFlowOutputEncryptionPtrOutputWithContext(context.Context) FlowOutputEncryptionPtrOutput
}

type flowOutputEncryptionPtrType FlowOutputEncryptionArgs

func FlowOutputEncryptionPtr(v *FlowOutputEncryptionArgs) FlowOutputEncryptionPtrInput {
	return (*flowOutputEncryptionPtrType)(v)
}

func (*flowOutputEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryption)(nil)).Elem()
}

func (i *flowOutputEncryptionPtrType) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return i.ToFlowOutputEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowOutputEncryptionPtrType) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowOutputEncryptionOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryption)(nil)).Elem()
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionOutput() FlowOutputEncryptionOutput {
	return o
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionOutputWithContext(ctx context.Context) FlowOutputEncryptionOutput {
	return o
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return o.ToFlowOutputEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionOutput) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputEncryption) *FlowOutputEncryption {
		return &v
	}).(FlowOutputEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowOutputEncryptionOutput) Algorithm() FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v FlowOutputEncryption) *FlowOutputEncryptionAlgorithm { return v.Algorithm }).(FlowOutputEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowOutputEncryptionOutput) KeyType() FlowOutputEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowOutputEncryption) *FlowOutputEncryptionKeyType { return v.KeyType }).(FlowOutputEncryptionKeyTypePtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowOutputEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowOutputEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowOutputEncryptionOutput) SecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowOutputEncryption) string { return v.SecretArn }).(pulumi.StringOutput)
}

type FlowOutputEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryption)(nil)).Elem()
}

func (o FlowOutputEncryptionPtrOutput) ToFlowOutputEncryptionPtrOutput() FlowOutputEncryptionPtrOutput {
	return o
}

func (o FlowOutputEncryptionPtrOutput) ToFlowOutputEncryptionPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionPtrOutput {
	return o
}

func (o FlowOutputEncryptionPtrOutput) Elem() FlowOutputEncryptionOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) FlowOutputEncryption {
		if v != nil {
			return *v
		}
		var ret FlowOutputEncryption
		return ret
	}).(FlowOutputEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowOutputEncryptionPtrOutput) Algorithm() FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *FlowOutputEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(FlowOutputEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowOutputEncryptionPtrOutput) KeyType() FlowOutputEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *FlowOutputEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowOutputEncryptionKeyTypePtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowOutputEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowOutputEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowOutputEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The settings for attaching a VPC interface to an output.
type FlowOutputVpcInterfaceAttachment struct {
	// The name of the VPC interface to use for this output.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
}

// FlowOutputVpcInterfaceAttachmentInput is an input type that accepts FlowOutputVpcInterfaceAttachmentArgs and FlowOutputVpcInterfaceAttachmentOutput values.
// You can construct a concrete instance of `FlowOutputVpcInterfaceAttachmentInput` via:
//
//          FlowOutputVpcInterfaceAttachmentArgs{...}
type FlowOutputVpcInterfaceAttachmentInput interface {
	pulumi.Input

	ToFlowOutputVpcInterfaceAttachmentOutput() FlowOutputVpcInterfaceAttachmentOutput
	ToFlowOutputVpcInterfaceAttachmentOutputWithContext(context.Context) FlowOutputVpcInterfaceAttachmentOutput
}

// The settings for attaching a VPC interface to an output.
type FlowOutputVpcInterfaceAttachmentArgs struct {
	// The name of the VPC interface to use for this output.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
}

func (FlowOutputVpcInterfaceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentOutput() FlowOutputVpcInterfaceAttachmentOutput {
	return i.ToFlowOutputVpcInterfaceAttachmentOutputWithContext(context.Background())
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputVpcInterfaceAttachmentOutput)
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i FlowOutputVpcInterfaceAttachmentArgs) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputVpcInterfaceAttachmentOutput).ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx)
}

// FlowOutputVpcInterfaceAttachmentPtrInput is an input type that accepts FlowOutputVpcInterfaceAttachmentArgs, FlowOutputVpcInterfaceAttachmentPtr and FlowOutputVpcInterfaceAttachmentPtrOutput values.
// You can construct a concrete instance of `FlowOutputVpcInterfaceAttachmentPtrInput` via:
//
//          FlowOutputVpcInterfaceAttachmentArgs{...}
//
//  or:
//
//          nil
type FlowOutputVpcInterfaceAttachmentPtrInput interface {
	pulumi.Input

	ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput
	ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput
}

type flowOutputVpcInterfaceAttachmentPtrType FlowOutputVpcInterfaceAttachmentArgs

func FlowOutputVpcInterfaceAttachmentPtr(v *FlowOutputVpcInterfaceAttachmentArgs) FlowOutputVpcInterfaceAttachmentPtrInput {
	return (*flowOutputVpcInterfaceAttachmentPtrType)(v)
}

func (*flowOutputVpcInterfaceAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (i *flowOutputVpcInterfaceAttachmentPtrType) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return i.ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (i *flowOutputVpcInterfaceAttachmentPtrType) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowOutputVpcInterfaceAttachmentPtrOutput)
}

// The settings for attaching a VPC interface to an output.
type FlowOutputVpcInterfaceAttachmentOutput struct{ *pulumi.OutputState }

func (FlowOutputVpcInterfaceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentOutput() FlowOutputVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o.ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(context.Background())
}

func (o FlowOutputVpcInterfaceAttachmentOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputVpcInterfaceAttachment) *FlowOutputVpcInterfaceAttachment {
		return &v
	}).(FlowOutputVpcInterfaceAttachmentPtrOutput)
}

// The name of the VPC interface to use for this output.
func (o FlowOutputVpcInterfaceAttachmentOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowOutputVpcInterfaceAttachment) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

type FlowOutputVpcInterfaceAttachmentPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputVpcInterfaceAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputVpcInterfaceAttachment)(nil)).Elem()
}

func (o FlowOutputVpcInterfaceAttachmentPtrOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutput() FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentPtrOutput) ToFlowOutputVpcInterfaceAttachmentPtrOutputWithContext(ctx context.Context) FlowOutputVpcInterfaceAttachmentPtrOutput {
	return o
}

func (o FlowOutputVpcInterfaceAttachmentPtrOutput) Elem() FlowOutputVpcInterfaceAttachmentOutput {
	return o.ApplyT(func(v *FlowOutputVpcInterfaceAttachment) FlowOutputVpcInterfaceAttachment {
		if v != nil {
			return *v
		}
		var ret FlowOutputVpcInterfaceAttachment
		return ret
	}).(FlowOutputVpcInterfaceAttachmentOutput)
}

// The name of the VPC interface to use for this output.
func (o FlowOutputVpcInterfaceAttachmentPtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowOutputVpcInterfaceAttachment) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// The settings for the source of the flow.
type FlowSourceType struct {
	// The type of decryption that is used on the content ingested from this source.
	Decryption *FlowEncryption `pulumi:"decryption"`
	// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
	Description *string `pulumi:"description"`
	// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
	EntitlementArn *string `pulumi:"entitlementArn"`
	// The IP address that the flow will be listening on for incoming content.
	IngestIp *string `pulumi:"ingestIp"`
	// The port that the flow will be listening on for incoming content.
	IngestPort *int `pulumi:"ingestPort"`
	// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
	MaxBitrate *int `pulumi:"maxBitrate"`
	// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
	MaxLatency *int `pulumi:"maxLatency"`
	// The minimum latency in milliseconds.
	MinLatency *int `pulumi:"minLatency"`
	// The name of the source.
	Name *string `pulumi:"name"`
	// The protocol that is used by the source or output.
	Protocol *FlowSourceProtocol `pulumi:"protocol"`
	// The ARN of the source.
	SourceArn *string `pulumi:"sourceArn"`
	// The port that the flow will be listening on for incoming content.(ReadOnly)
	SourceIngestPort *string `pulumi:"sourceIngestPort"`
	// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
	StreamId *string `pulumi:"streamId"`
	// The name of the VPC Interface this Source is configured with.
	VpcInterfaceName *string `pulumi:"vpcInterfaceName"`
	// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
	WhitelistCidr *string `pulumi:"whitelistCidr"`
}

// FlowSourceTypeInput is an input type that accepts FlowSourceTypeArgs and FlowSourceTypeOutput values.
// You can construct a concrete instance of `FlowSourceTypeInput` via:
//
//          FlowSourceTypeArgs{...}
type FlowSourceTypeInput interface {
	pulumi.Input

	ToFlowSourceTypeOutput() FlowSourceTypeOutput
	ToFlowSourceTypeOutputWithContext(context.Context) FlowSourceTypeOutput
}

// The settings for the source of the flow.
type FlowSourceTypeArgs struct {
	// The type of decryption that is used on the content ingested from this source.
	Decryption FlowEncryptionPtrInput `pulumi:"decryption"`
	// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
	EntitlementArn pulumi.StringPtrInput `pulumi:"entitlementArn"`
	// The IP address that the flow will be listening on for incoming content.
	IngestIp pulumi.StringPtrInput `pulumi:"ingestIp"`
	// The port that the flow will be listening on for incoming content.
	IngestPort pulumi.IntPtrInput `pulumi:"ingestPort"`
	// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
	MaxBitrate pulumi.IntPtrInput `pulumi:"maxBitrate"`
	// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
	MaxLatency pulumi.IntPtrInput `pulumi:"maxLatency"`
	// The minimum latency in milliseconds.
	MinLatency pulumi.IntPtrInput `pulumi:"minLatency"`
	// The name of the source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The protocol that is used by the source or output.
	Protocol FlowSourceProtocolPtrInput `pulumi:"protocol"`
	// The ARN of the source.
	SourceArn pulumi.StringPtrInput `pulumi:"sourceArn"`
	// The port that the flow will be listening on for incoming content.(ReadOnly)
	SourceIngestPort pulumi.StringPtrInput `pulumi:"sourceIngestPort"`
	// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
	StreamId pulumi.StringPtrInput `pulumi:"streamId"`
	// The name of the VPC Interface this Source is configured with.
	VpcInterfaceName pulumi.StringPtrInput `pulumi:"vpcInterfaceName"`
	// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
	WhitelistCidr pulumi.StringPtrInput `pulumi:"whitelistCidr"`
}

func (FlowSourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceType)(nil)).Elem()
}

func (i FlowSourceTypeArgs) ToFlowSourceTypeOutput() FlowSourceTypeOutput {
	return i.ToFlowSourceTypeOutputWithContext(context.Background())
}

func (i FlowSourceTypeArgs) ToFlowSourceTypeOutputWithContext(ctx context.Context) FlowSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceTypeOutput)
}

func (i FlowSourceTypeArgs) ToFlowSourceTypePtrOutput() FlowSourceTypePtrOutput {
	return i.ToFlowSourceTypePtrOutputWithContext(context.Background())
}

func (i FlowSourceTypeArgs) ToFlowSourceTypePtrOutputWithContext(ctx context.Context) FlowSourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceTypeOutput).ToFlowSourceTypePtrOutputWithContext(ctx)
}

// FlowSourceTypePtrInput is an input type that accepts FlowSourceTypeArgs, FlowSourceTypePtr and FlowSourceTypePtrOutput values.
// You can construct a concrete instance of `FlowSourceTypePtrInput` via:
//
//          FlowSourceTypeArgs{...}
//
//  or:
//
//          nil
type FlowSourceTypePtrInput interface {
	pulumi.Input

	ToFlowSourceTypePtrOutput() FlowSourceTypePtrOutput
	ToFlowSourceTypePtrOutputWithContext(context.Context) FlowSourceTypePtrOutput
}

type flowSourceTypePtrType FlowSourceTypeArgs

func FlowSourceTypePtr(v *FlowSourceTypeArgs) FlowSourceTypePtrInput {
	return (*flowSourceTypePtrType)(v)
}

func (*flowSourceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceType)(nil)).Elem()
}

func (i *flowSourceTypePtrType) ToFlowSourceTypePtrOutput() FlowSourceTypePtrOutput {
	return i.ToFlowSourceTypePtrOutputWithContext(context.Background())
}

func (i *flowSourceTypePtrType) ToFlowSourceTypePtrOutputWithContext(ctx context.Context) FlowSourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceTypePtrOutput)
}

// The settings for the source of the flow.
type FlowSourceTypeOutput struct{ *pulumi.OutputState }

func (FlowSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceType)(nil)).Elem()
}

func (o FlowSourceTypeOutput) ToFlowSourceTypeOutput() FlowSourceTypeOutput {
	return o
}

func (o FlowSourceTypeOutput) ToFlowSourceTypeOutputWithContext(ctx context.Context) FlowSourceTypeOutput {
	return o
}

func (o FlowSourceTypeOutput) ToFlowSourceTypePtrOutput() FlowSourceTypePtrOutput {
	return o.ToFlowSourceTypePtrOutputWithContext(context.Background())
}

func (o FlowSourceTypeOutput) ToFlowSourceTypePtrOutputWithContext(ctx context.Context) FlowSourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceType) *FlowSourceType {
		return &v
	}).(FlowSourceTypePtrOutput)
}

// The type of decryption that is used on the content ingested from this source.
func (o FlowSourceTypeOutput) Decryption() FlowEncryptionPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *FlowEncryption { return v.Decryption }).(FlowEncryptionPtrOutput)
}

// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
func (o FlowSourceTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
func (o FlowSourceTypeOutput) EntitlementArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.EntitlementArn }).(pulumi.StringPtrOutput)
}

// The IP address that the flow will be listening on for incoming content.
func (o FlowSourceTypeOutput) IngestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.IngestIp }).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.
func (o FlowSourceTypeOutput) IngestPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.IngestPort }).(pulumi.IntPtrOutput)
}

// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
func (o FlowSourceTypeOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.MaxBitrate }).(pulumi.IntPtrOutput)
}

// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
func (o FlowSourceTypeOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.MaxLatency }).(pulumi.IntPtrOutput)
}

// The minimum latency in milliseconds.
func (o FlowSourceTypeOutput) MinLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *int { return v.MinLatency }).(pulumi.IntPtrOutput)
}

// The name of the source.
func (o FlowSourceTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The protocol that is used by the source or output.
func (o FlowSourceTypeOutput) Protocol() FlowSourceProtocolPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *FlowSourceProtocol { return v.Protocol }).(FlowSourceProtocolPtrOutput)
}

// The ARN of the source.
func (o FlowSourceTypeOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.SourceArn }).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.(ReadOnly)
func (o FlowSourceTypeOutput) SourceIngestPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.SourceIngestPort }).(pulumi.StringPtrOutput)
}

// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
func (o FlowSourceTypeOutput) StreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.StreamId }).(pulumi.StringPtrOutput)
}

// The name of the VPC Interface this Source is configured with.
func (o FlowSourceTypeOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.VpcInterfaceName }).(pulumi.StringPtrOutput)
}

// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
func (o FlowSourceTypeOutput) WhitelistCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceType) *string { return v.WhitelistCidr }).(pulumi.StringPtrOutput)
}

type FlowSourceTypePtrOutput struct{ *pulumi.OutputState }

func (FlowSourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceType)(nil)).Elem()
}

func (o FlowSourceTypePtrOutput) ToFlowSourceTypePtrOutput() FlowSourceTypePtrOutput {
	return o
}

func (o FlowSourceTypePtrOutput) ToFlowSourceTypePtrOutputWithContext(ctx context.Context) FlowSourceTypePtrOutput {
	return o
}

func (o FlowSourceTypePtrOutput) Elem() FlowSourceTypeOutput {
	return o.ApplyT(func(v *FlowSourceType) FlowSourceType {
		if v != nil {
			return *v
		}
		var ret FlowSourceType
		return ret
	}).(FlowSourceTypeOutput)
}

// The type of decryption that is used on the content ingested from this source.
func (o FlowSourceTypePtrOutput) Decryption() FlowEncryptionPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *FlowEncryption {
		if v == nil {
			return nil
		}
		return v.Decryption
	}).(FlowEncryptionPtrOutput)
}

// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
func (o FlowSourceTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
func (o FlowSourceTypePtrOutput) EntitlementArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.EntitlementArn
	}).(pulumi.StringPtrOutput)
}

// The IP address that the flow will be listening on for incoming content.
func (o FlowSourceTypePtrOutput) IngestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.IngestIp
	}).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.
func (o FlowSourceTypePtrOutput) IngestPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.IngestPort
	}).(pulumi.IntPtrOutput)
}

// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
func (o FlowSourceTypePtrOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.MaxBitrate
	}).(pulumi.IntPtrOutput)
}

// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
func (o FlowSourceTypePtrOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.MaxLatency
	}).(pulumi.IntPtrOutput)
}

// The minimum latency in milliseconds.
func (o FlowSourceTypePtrOutput) MinLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *int {
		if v == nil {
			return nil
		}
		return v.MinLatency
	}).(pulumi.IntPtrOutput)
}

// The name of the source.
func (o FlowSourceTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The protocol that is used by the source or output.
func (o FlowSourceTypePtrOutput) Protocol() FlowSourceProtocolPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *FlowSourceProtocol {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(FlowSourceProtocolPtrOutput)
}

// The ARN of the source.
func (o FlowSourceTypePtrOutput) SourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.SourceArn
	}).(pulumi.StringPtrOutput)
}

// The port that the flow will be listening on for incoming content.(ReadOnly)
func (o FlowSourceTypePtrOutput) SourceIngestPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.SourceIngestPort
	}).(pulumi.StringPtrOutput)
}

// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
func (o FlowSourceTypePtrOutput) StreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.StreamId
	}).(pulumi.StringPtrOutput)
}

// The name of the VPC Interface this Source is configured with.
func (o FlowSourceTypePtrOutput) VpcInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.VpcInterfaceName
	}).(pulumi.StringPtrOutput)
}

// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
func (o FlowSourceTypePtrOutput) WhitelistCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceType) *string {
		if v == nil {
			return nil
		}
		return v.WhitelistCidr
	}).(pulumi.StringPtrOutput)
}

// Information about the encryption of the flow.
type FlowSourceEncryption struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowSourceEncryptionAlgorithm `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector *string `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId *string `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType *FlowSourceEncryptionKeyType `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region *string `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId *string `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn string `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn *string `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url *string `pulumi:"url"`
}

// FlowSourceEncryptionInput is an input type that accepts FlowSourceEncryptionArgs and FlowSourceEncryptionOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionInput` via:
//
//          FlowSourceEncryptionArgs{...}
type FlowSourceEncryptionInput interface {
	pulumi.Input

	ToFlowSourceEncryptionOutput() FlowSourceEncryptionOutput
	ToFlowSourceEncryptionOutputWithContext(context.Context) FlowSourceEncryptionOutput
}

// Information about the encryption of the flow.
type FlowSourceEncryptionArgs struct {
	// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
	Algorithm FlowSourceEncryptionAlgorithmInput `pulumi:"algorithm"`
	// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
	ConstantInitializationVector pulumi.StringPtrInput `pulumi:"constantInitializationVector"`
	// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	DeviceId pulumi.StringPtrInput `pulumi:"deviceId"`
	// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
	KeyType FlowSourceEncryptionKeyTypePtrInput `pulumi:"keyType"`
	// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
	// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (FlowSourceEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryption)(nil)).Elem()
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionOutput() FlowSourceEncryptionOutput {
	return i.ToFlowSourceEncryptionOutputWithContext(context.Background())
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionOutputWithContext(ctx context.Context) FlowSourceEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceEncryptionOutput)
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return i.ToFlowSourceEncryptionPtrOutputWithContext(context.Background())
}

func (i FlowSourceEncryptionArgs) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceEncryptionOutput).ToFlowSourceEncryptionPtrOutputWithContext(ctx)
}

// FlowSourceEncryptionPtrInput is an input type that accepts FlowSourceEncryptionArgs, FlowSourceEncryptionPtr and FlowSourceEncryptionPtrOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionPtrInput` via:
//
//          FlowSourceEncryptionArgs{...}
//
//  or:
//
//          nil
type FlowSourceEncryptionPtrInput interface {
	pulumi.Input

	ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput
	ToFlowSourceEncryptionPtrOutputWithContext(context.Context) FlowSourceEncryptionPtrOutput
}

type flowSourceEncryptionPtrType FlowSourceEncryptionArgs

func FlowSourceEncryptionPtr(v *FlowSourceEncryptionArgs) FlowSourceEncryptionPtrInput {
	return (*flowSourceEncryptionPtrType)(v)
}

func (*flowSourceEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryption)(nil)).Elem()
}

func (i *flowSourceEncryptionPtrType) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return i.ToFlowSourceEncryptionPtrOutputWithContext(context.Background())
}

func (i *flowSourceEncryptionPtrType) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowSourceEncryptionPtrOutput)
}

// Information about the encryption of the flow.
type FlowSourceEncryptionOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryption)(nil)).Elem()
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionOutput() FlowSourceEncryptionOutput {
	return o
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionOutputWithContext(ctx context.Context) FlowSourceEncryptionOutput {
	return o
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return o.ToFlowSourceEncryptionPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionOutput) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceEncryption) *FlowSourceEncryption {
		return &v
	}).(FlowSourceEncryptionPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowSourceEncryptionOutput) Algorithm() FlowSourceEncryptionAlgorithmOutput {
	return o.ApplyT(func(v FlowSourceEncryption) FlowSourceEncryptionAlgorithm { return v.Algorithm }).(FlowSourceEncryptionAlgorithmOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowSourceEncryptionOutput) KeyType() FlowSourceEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *FlowSourceEncryptionKeyType { return v.KeyType }).(FlowSourceEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowSourceEncryptionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v FlowSourceEncryption) string { return v.RoleArn }).(pulumi.StringOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowSourceEncryptionOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowSourceEncryption) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type FlowSourceEncryptionPtrOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryption)(nil)).Elem()
}

func (o FlowSourceEncryptionPtrOutput) ToFlowSourceEncryptionPtrOutput() FlowSourceEncryptionPtrOutput {
	return o
}

func (o FlowSourceEncryptionPtrOutput) ToFlowSourceEncryptionPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionPtrOutput {
	return o
}

func (o FlowSourceEncryptionPtrOutput) Elem() FlowSourceEncryptionOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) FlowSourceEncryption {
		if v != nil {
			return *v
		}
		var ret FlowSourceEncryption
		return ret
	}).(FlowSourceEncryptionOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
func (o FlowSourceEncryptionPtrOutput) Algorithm() FlowSourceEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *FlowSourceEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(FlowSourceEncryptionAlgorithmPtrOutput)
}

// A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

// The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.DeviceId
	}).(pulumi.StringPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
func (o FlowSourceEncryptionPtrOutput) KeyType() FlowSourceEncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *FlowSourceEncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(FlowSourceEncryptionKeyTypePtrOutput)
}

// The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
func (o FlowSourceEncryptionPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

//  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
func (o FlowSourceEncryptionPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
func (o FlowSourceEncryptionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowSourceEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionInput)(nil)).Elem(), FlowEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionPtrInput)(nil)).Elem(), FlowEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionInput)(nil)).Elem(), FlowEntitlementEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionPtrInput)(nil)).Elem(), FlowEntitlementEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigInput)(nil)).Elem(), FlowFailoverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigPtrInput)(nil)).Elem(), FlowFailoverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionInput)(nil)).Elem(), FlowOutputEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionPtrInput)(nil)).Elem(), FlowOutputEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputVpcInterfaceAttachmentInput)(nil)).Elem(), FlowOutputVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputVpcInterfaceAttachmentPtrInput)(nil)).Elem(), FlowOutputVpcInterfaceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceTypeInput)(nil)).Elem(), FlowSourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceTypePtrInput)(nil)).Elem(), FlowSourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionInput)(nil)).Elem(), FlowSourceEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionPtrInput)(nil)).Elem(), FlowSourceEncryptionArgs{})
	pulumi.RegisterOutputType(FlowEncryptionOutput{})
	pulumi.RegisterOutputType(FlowEncryptionPtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionPtrOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigPtrOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionPtrOutput{})
	pulumi.RegisterOutputType(FlowOutputVpcInterfaceAttachmentOutput{})
	pulumi.RegisterOutputType(FlowOutputVpcInterfaceAttachmentPtrOutput{})
	pulumi.RegisterOutputType(FlowSourceTypeOutput{})
	pulumi.RegisterOutputType(FlowSourceTypePtrOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionPtrOutput{})
}
