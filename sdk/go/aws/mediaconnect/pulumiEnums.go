// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowEncryptionAlgorithm string

const (
	FlowEncryptionAlgorithmAes128 = FlowEncryptionAlgorithm("aes128")
	FlowEncryptionAlgorithmAes192 = FlowEncryptionAlgorithm("aes192")
	FlowEncryptionAlgorithmAes256 = FlowEncryptionAlgorithm("aes256")
)

func (FlowEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmOutput() FlowEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowEncryptionAlgorithmOutput)
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEncryptionAlgorithmOutput)
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return e.ToFlowEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return FlowEncryptionAlgorithm(e).ToFlowEncryptionAlgorithmOutputWithContext(ctx).ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmOutput() FlowEncryptionAlgorithmOutput {
	return o
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmOutput {
	return o
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return o.ToFlowEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEncryptionAlgorithm) *FlowEncryptionAlgorithm {
		return &v
	}).(FlowEncryptionAlgorithmPtrOutput)
}

func (o FlowEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEncryptionAlgorithmPtrOutput) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEncryptionAlgorithmPtrOutput) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEncryptionAlgorithmPtrOutput) Elem() FlowEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowEncryptionAlgorithm) FlowEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowEncryptionAlgorithm
		return ret
	}).(FlowEncryptionAlgorithmOutput)
}

func (o FlowEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEncryptionAlgorithmInput is an input type that accepts FlowEncryptionAlgorithmArgs and FlowEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowEncryptionAlgorithmInput` via:
//
//          FlowEncryptionAlgorithmArgs{...}
type FlowEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowEncryptionAlgorithmOutput() FlowEncryptionAlgorithmOutput
	ToFlowEncryptionAlgorithmOutputWithContext(context.Context) FlowEncryptionAlgorithmOutput
}

var flowEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowEncryptionAlgorithm)(nil)).Elem()

type FlowEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput
	ToFlowEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowEncryptionAlgorithmPtrOutput
}

type flowEncryptionAlgorithmPtr string

func FlowEncryptionAlgorithmPtr(v string) FlowEncryptionAlgorithmPtrInput {
	return (*flowEncryptionAlgorithmPtr)(&v)
}

func (*flowEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowEncryptionAlgorithmPtrType
}

func (in *flowEncryptionAlgorithmPtr) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowEncryptionAlgorithmPtrOutput)
}

func (in *flowEncryptionAlgorithmPtr) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowEncryptionKeyType string

const (
	FlowEncryptionKeyTypeSpeke     = FlowEncryptionKeyType("speke")
	FlowEncryptionKeyTypeStaticKey = FlowEncryptionKeyType("static-key")
)

func (FlowEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionKeyType)(nil)).Elem()
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypeOutput() FlowEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowEncryptionKeyTypeOutput)
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEncryptionKeyTypeOutput)
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return e.ToFlowEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return FlowEncryptionKeyType(e).ToFlowEncryptionKeyTypeOutputWithContext(ctx).ToFlowEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionKeyType)(nil)).Elem()
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypeOutput() FlowEncryptionKeyTypeOutput {
	return o
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEncryptionKeyTypeOutput {
	return o
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return o.ToFlowEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEncryptionKeyType) *FlowEncryptionKeyType {
		return &v
	}).(FlowEncryptionKeyTypePtrOutput)
}

func (o FlowEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryptionKeyType)(nil)).Elem()
}

func (o FlowEncryptionKeyTypePtrOutput) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEncryptionKeyTypePtrOutput) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEncryptionKeyTypePtrOutput) Elem() FlowEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowEncryptionKeyType) FlowEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowEncryptionKeyType
		return ret
	}).(FlowEncryptionKeyTypeOutput)
}

func (o FlowEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEncryptionKeyTypeInput is an input type that accepts FlowEncryptionKeyTypeArgs and FlowEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowEncryptionKeyTypeInput` via:
//
//          FlowEncryptionKeyTypeArgs{...}
type FlowEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowEncryptionKeyTypeOutput() FlowEncryptionKeyTypeOutput
	ToFlowEncryptionKeyTypeOutputWithContext(context.Context) FlowEncryptionKeyTypeOutput
}

var flowEncryptionKeyTypePtrType = reflect.TypeOf((**FlowEncryptionKeyType)(nil)).Elem()

type FlowEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput
	ToFlowEncryptionKeyTypePtrOutputWithContext(context.Context) FlowEncryptionKeyTypePtrOutput
}

type flowEncryptionKeyTypePtr string

func FlowEncryptionKeyTypePtr(v string) FlowEncryptionKeyTypePtrInput {
	return (*flowEncryptionKeyTypePtr)(&v)
}

func (*flowEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowEncryptionKeyTypePtrType
}

func (in *flowEncryptionKeyTypePtr) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowEncryptionKeyTypePtrOutput)
}

func (in *flowEncryptionKeyTypePtr) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEncryptionKeyTypePtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowEntitlementEncryptionAlgorithm string

const (
	FlowEntitlementEncryptionAlgorithmAes128 = FlowEntitlementEncryptionAlgorithm("aes128")
	FlowEntitlementEncryptionAlgorithmAes192 = FlowEntitlementEncryptionAlgorithm("aes192")
	FlowEntitlementEncryptionAlgorithmAes256 = FlowEntitlementEncryptionAlgorithm("aes256")
)

func (FlowEntitlementEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmOutput() FlowEntitlementEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowEntitlementEncryptionAlgorithmOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEntitlementEncryptionAlgorithmOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return e.ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return FlowEntitlementEncryptionAlgorithm(e).ToFlowEntitlementEncryptionAlgorithmOutputWithContext(ctx).ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEntitlementEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmOutput() FlowEntitlementEncryptionAlgorithmOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o.ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEncryptionAlgorithm) *FlowEntitlementEncryptionAlgorithm {
		return &v
	}).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEntitlementEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) Elem() FlowEntitlementEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryptionAlgorithm) FlowEntitlementEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEncryptionAlgorithm
		return ret
	}).(FlowEntitlementEncryptionAlgorithmOutput)
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEntitlementEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEntitlementEncryptionAlgorithmInput is an input type that accepts FlowEntitlementEncryptionAlgorithmArgs and FlowEntitlementEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionAlgorithmInput` via:
//
//          FlowEntitlementEncryptionAlgorithmArgs{...}
type FlowEntitlementEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionAlgorithmOutput() FlowEntitlementEncryptionAlgorithmOutput
	ToFlowEntitlementEncryptionAlgorithmOutputWithContext(context.Context) FlowEntitlementEncryptionAlgorithmOutput
}

var flowEntitlementEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowEntitlementEncryptionAlgorithm)(nil)).Elem()

type FlowEntitlementEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput
	ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput
}

type flowEntitlementEncryptionAlgorithmPtr string

func FlowEntitlementEncryptionAlgorithmPtr(v string) FlowEntitlementEncryptionAlgorithmPtrInput {
	return (*flowEntitlementEncryptionAlgorithmPtr)(&v)
}

func (*flowEntitlementEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowEntitlementEncryptionAlgorithmPtrType
}

func (in *flowEntitlementEncryptionAlgorithmPtr) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

func (in *flowEntitlementEncryptionAlgorithmPtr) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowEntitlementEncryptionKeyType string

const (
	FlowEntitlementEncryptionKeyTypeSpeke     = FlowEntitlementEncryptionKeyType("speke")
	FlowEntitlementEncryptionKeyTypeStaticKey = FlowEntitlementEncryptionKeyType("static-key")
)

func (FlowEntitlementEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionKeyType)(nil)).Elem()
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypeOutput() FlowEntitlementEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowEntitlementEncryptionKeyTypeOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEntitlementEncryptionKeyTypeOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return e.ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return FlowEntitlementEncryptionKeyType(e).ToFlowEntitlementEncryptionKeyTypeOutputWithContext(ctx).ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowEntitlementEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEntitlementEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionKeyType)(nil)).Elem()
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypeOutput() FlowEntitlementEncryptionKeyTypeOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypeOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEncryptionKeyType) *FlowEntitlementEncryptionKeyType {
		return &v
	}).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEntitlementEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryptionKeyType)(nil)).Elem()
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) Elem() FlowEntitlementEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryptionKeyType) FlowEntitlementEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEncryptionKeyType
		return ret
	}).(FlowEntitlementEncryptionKeyTypeOutput)
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEntitlementEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEntitlementEncryptionKeyTypeInput is an input type that accepts FlowEntitlementEncryptionKeyTypeArgs and FlowEntitlementEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionKeyTypeInput` via:
//
//          FlowEntitlementEncryptionKeyTypeArgs{...}
type FlowEntitlementEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionKeyTypeOutput() FlowEntitlementEncryptionKeyTypeOutput
	ToFlowEntitlementEncryptionKeyTypeOutputWithContext(context.Context) FlowEntitlementEncryptionKeyTypeOutput
}

var flowEntitlementEncryptionKeyTypePtrType = reflect.TypeOf((**FlowEntitlementEncryptionKeyType)(nil)).Elem()

type FlowEntitlementEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput
	ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(context.Context) FlowEntitlementEncryptionKeyTypePtrOutput
}

type flowEntitlementEncryptionKeyTypePtr string

func FlowEntitlementEncryptionKeyTypePtr(v string) FlowEntitlementEncryptionKeyTypePtrInput {
	return (*flowEntitlementEncryptionKeyTypePtr)(&v)
}

func (*flowEntitlementEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowEntitlementEncryptionKeyTypePtrType
}

func (in *flowEntitlementEncryptionKeyTypePtr) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

func (in *flowEntitlementEncryptionKeyTypePtr) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

//  An indication of whether the entitlement is enabled.
type FlowEntitlementEntitlementStatus string

const (
	FlowEntitlementEntitlementStatusEnabled  = FlowEntitlementEntitlementStatus("ENABLED")
	FlowEntitlementEntitlementStatusDisabled = FlowEntitlementEntitlementStatus("DISABLED")
)

func (FlowEntitlementEntitlementStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEntitlementStatus)(nil)).Elem()
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusOutput() FlowEntitlementEntitlementStatusOutput {
	return pulumi.ToOutput(e).(FlowEntitlementEntitlementStatusOutput)
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEntitlementEntitlementStatusOutput)
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return e.ToFlowEntitlementEntitlementStatusPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return FlowEntitlementEntitlementStatus(e).ToFlowEntitlementEntitlementStatusOutputWithContext(ctx).ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx)
}

func (e FlowEntitlementEntitlementStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEntitlementStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEntitlementStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEntitlementStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEntitlementEntitlementStatusOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEntitlementStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEntitlementStatus)(nil)).Elem()
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusOutput() FlowEntitlementEntitlementStatusOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return o.ToFlowEntitlementEntitlementStatusPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEntitlementStatus) *FlowEntitlementEntitlementStatus {
		return &v
	}).(FlowEntitlementEntitlementStatusPtrOutput)
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEntitlementStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEntitlementStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEntitlementEntitlementStatusPtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEntitlementStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEntitlementStatus)(nil)).Elem()
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusPtrOutput) Elem() FlowEntitlementEntitlementStatusOutput {
	return o.ApplyT(func(v *FlowEntitlementEntitlementStatus) FlowEntitlementEntitlementStatus {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEntitlementStatus
		return ret
	}).(FlowEntitlementEntitlementStatusOutput)
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEntitlementEntitlementStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEntitlementEntitlementStatusInput is an input type that accepts FlowEntitlementEntitlementStatusArgs and FlowEntitlementEntitlementStatusOutput values.
// You can construct a concrete instance of `FlowEntitlementEntitlementStatusInput` via:
//
//          FlowEntitlementEntitlementStatusArgs{...}
type FlowEntitlementEntitlementStatusInput interface {
	pulumi.Input

	ToFlowEntitlementEntitlementStatusOutput() FlowEntitlementEntitlementStatusOutput
	ToFlowEntitlementEntitlementStatusOutputWithContext(context.Context) FlowEntitlementEntitlementStatusOutput
}

var flowEntitlementEntitlementStatusPtrType = reflect.TypeOf((**FlowEntitlementEntitlementStatus)(nil)).Elem()

type FlowEntitlementEntitlementStatusPtrInput interface {
	pulumi.Input

	ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput
	ToFlowEntitlementEntitlementStatusPtrOutputWithContext(context.Context) FlowEntitlementEntitlementStatusPtrOutput
}

type flowEntitlementEntitlementStatusPtr string

func FlowEntitlementEntitlementStatusPtr(v string) FlowEntitlementEntitlementStatusPtrInput {
	return (*flowEntitlementEntitlementStatusPtr)(&v)
}

func (*flowEntitlementEntitlementStatusPtr) ElementType() reflect.Type {
	return flowEntitlementEntitlementStatusPtrType
}

func (in *flowEntitlementEntitlementStatusPtr) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return pulumi.ToOutput(in).(FlowEntitlementEntitlementStatusPtrOutput)
}

func (in *flowEntitlementEntitlementStatusPtr) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEntitlementEntitlementStatusPtrOutput)
}

type FlowFailoverConfigState string

const (
	FlowFailoverConfigStateEnabled  = FlowFailoverConfigState("ENABLED")
	FlowFailoverConfigStateDisabled = FlowFailoverConfigState("DISABLED")
)

func (FlowFailoverConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigState)(nil)).Elem()
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStateOutput() FlowFailoverConfigStateOutput {
	return pulumi.ToOutput(e).(FlowFailoverConfigStateOutput)
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStateOutputWithContext(ctx context.Context) FlowFailoverConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowFailoverConfigStateOutput)
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return e.ToFlowFailoverConfigStatePtrOutputWithContext(context.Background())
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return FlowFailoverConfigState(e).ToFlowFailoverConfigStateOutputWithContext(ctx).ToFlowFailoverConfigStatePtrOutputWithContext(ctx)
}

func (e FlowFailoverConfigState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFailoverConfigState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFailoverConfigState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowFailoverConfigState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowFailoverConfigStateOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigState)(nil)).Elem()
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStateOutput() FlowFailoverConfigStateOutput {
	return o
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStateOutputWithContext(ctx context.Context) FlowFailoverConfigStateOutput {
	return o
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return o.ToFlowFailoverConfigStatePtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFailoverConfigState) *FlowFailoverConfigState {
		return &v
	}).(FlowFailoverConfigStatePtrOutput)
}

func (o FlowFailoverConfigStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFailoverConfigState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowFailoverConfigStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFailoverConfigState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowFailoverConfigStatePtrOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfigState)(nil)).Elem()
}

func (o FlowFailoverConfigStatePtrOutput) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return o
}

func (o FlowFailoverConfigStatePtrOutput) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return o
}

func (o FlowFailoverConfigStatePtrOutput) Elem() FlowFailoverConfigStateOutput {
	return o.ApplyT(func(v *FlowFailoverConfigState) FlowFailoverConfigState {
		if v != nil {
			return *v
		}
		var ret FlowFailoverConfigState
		return ret
	}).(FlowFailoverConfigStateOutput)
}

func (o FlowFailoverConfigStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowFailoverConfigState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowFailoverConfigStateInput is an input type that accepts FlowFailoverConfigStateArgs and FlowFailoverConfigStateOutput values.
// You can construct a concrete instance of `FlowFailoverConfigStateInput` via:
//
//          FlowFailoverConfigStateArgs{...}
type FlowFailoverConfigStateInput interface {
	pulumi.Input

	ToFlowFailoverConfigStateOutput() FlowFailoverConfigStateOutput
	ToFlowFailoverConfigStateOutputWithContext(context.Context) FlowFailoverConfigStateOutput
}

var flowFailoverConfigStatePtrType = reflect.TypeOf((**FlowFailoverConfigState)(nil)).Elem()

type FlowFailoverConfigStatePtrInput interface {
	pulumi.Input

	ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput
	ToFlowFailoverConfigStatePtrOutputWithContext(context.Context) FlowFailoverConfigStatePtrOutput
}

type flowFailoverConfigStatePtr string

func FlowFailoverConfigStatePtr(v string) FlowFailoverConfigStatePtrInput {
	return (*flowFailoverConfigStatePtr)(&v)
}

func (*flowFailoverConfigStatePtr) ElementType() reflect.Type {
	return flowFailoverConfigStatePtrType
}

func (in *flowFailoverConfigStatePtr) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return pulumi.ToOutput(in).(FlowFailoverConfigStatePtrOutput)
}

func (in *flowFailoverConfigStatePtr) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowFailoverConfigStatePtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowOutputEncryptionAlgorithm string

const (
	FlowOutputEncryptionAlgorithmAes128 = FlowOutputEncryptionAlgorithm("aes128")
	FlowOutputEncryptionAlgorithmAes192 = FlowOutputEncryptionAlgorithm("aes192")
	FlowOutputEncryptionAlgorithmAes256 = FlowOutputEncryptionAlgorithm("aes256")
)

func (FlowOutputEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmOutput() FlowOutputEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowOutputEncryptionAlgorithmOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowOutputEncryptionAlgorithmOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return e.ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return FlowOutputEncryptionAlgorithm(e).ToFlowOutputEncryptionAlgorithmOutputWithContext(ctx).ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowOutputEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowOutputEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmOutput() FlowOutputEncryptionAlgorithmOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputEncryptionAlgorithm) *FlowOutputEncryptionAlgorithm {
		return &v
	}).(FlowOutputEncryptionAlgorithmPtrOutput)
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowOutputEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) Elem() FlowOutputEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowOutputEncryptionAlgorithm) FlowOutputEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowOutputEncryptionAlgorithm
		return ret
	}).(FlowOutputEncryptionAlgorithmOutput)
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowOutputEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowOutputEncryptionAlgorithmInput is an input type that accepts FlowOutputEncryptionAlgorithmArgs and FlowOutputEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionAlgorithmInput` via:
//
//          FlowOutputEncryptionAlgorithmArgs{...}
type FlowOutputEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowOutputEncryptionAlgorithmOutput() FlowOutputEncryptionAlgorithmOutput
	ToFlowOutputEncryptionAlgorithmOutputWithContext(context.Context) FlowOutputEncryptionAlgorithmOutput
}

var flowOutputEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowOutputEncryptionAlgorithm)(nil)).Elem()

type FlowOutputEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput
	ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowOutputEncryptionAlgorithmPtrOutput
}

type flowOutputEncryptionAlgorithmPtr string

func FlowOutputEncryptionAlgorithmPtr(v string) FlowOutputEncryptionAlgorithmPtrInput {
	return (*flowOutputEncryptionAlgorithmPtr)(&v)
}

func (*flowOutputEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowOutputEncryptionAlgorithmPtrType
}

func (in *flowOutputEncryptionAlgorithmPtr) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowOutputEncryptionAlgorithmPtrOutput)
}

func (in *flowOutputEncryptionAlgorithmPtr) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowOutputEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowOutputEncryptionKeyType string

const (
	FlowOutputEncryptionKeyTypeStaticKey = FlowOutputEncryptionKeyType("static-key")
)

func (FlowOutputEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionKeyType)(nil)).Elem()
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypeOutput() FlowOutputEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowOutputEncryptionKeyTypeOutput)
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowOutputEncryptionKeyTypeOutput)
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return e.ToFlowOutputEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return FlowOutputEncryptionKeyType(e).ToFlowOutputEncryptionKeyTypeOutputWithContext(ctx).ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowOutputEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowOutputEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionKeyType)(nil)).Elem()
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypeOutput() FlowOutputEncryptionKeyTypeOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypeOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return o.ToFlowOutputEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputEncryptionKeyType) *FlowOutputEncryptionKeyType {
		return &v
	}).(FlowOutputEncryptionKeyTypePtrOutput)
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowOutputEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryptionKeyType)(nil)).Elem()
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypePtrOutput) Elem() FlowOutputEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowOutputEncryptionKeyType) FlowOutputEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowOutputEncryptionKeyType
		return ret
	}).(FlowOutputEncryptionKeyTypeOutput)
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowOutputEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowOutputEncryptionKeyTypeInput is an input type that accepts FlowOutputEncryptionKeyTypeArgs and FlowOutputEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionKeyTypeInput` via:
//
//          FlowOutputEncryptionKeyTypeArgs{...}
type FlowOutputEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowOutputEncryptionKeyTypeOutput() FlowOutputEncryptionKeyTypeOutput
	ToFlowOutputEncryptionKeyTypeOutputWithContext(context.Context) FlowOutputEncryptionKeyTypeOutput
}

var flowOutputEncryptionKeyTypePtrType = reflect.TypeOf((**FlowOutputEncryptionKeyType)(nil)).Elem()

type FlowOutputEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput
	ToFlowOutputEncryptionKeyTypePtrOutputWithContext(context.Context) FlowOutputEncryptionKeyTypePtrOutput
}

type flowOutputEncryptionKeyTypePtr string

func FlowOutputEncryptionKeyTypePtr(v string) FlowOutputEncryptionKeyTypePtrInput {
	return (*flowOutputEncryptionKeyTypePtr)(&v)
}

func (*flowOutputEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowOutputEncryptionKeyTypePtrType
}

func (in *flowOutputEncryptionKeyTypePtr) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowOutputEncryptionKeyTypePtrOutput)
}

func (in *flowOutputEncryptionKeyTypePtr) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowOutputEncryptionKeyTypePtrOutput)
}

// The protocol that is used by the source or output.
type FlowOutputProtocol string

const (
	FlowOutputProtocolZixiPush = FlowOutputProtocol("zixi-push")
	FlowOutputProtocolRtpFec   = FlowOutputProtocol("rtp-fec")
	FlowOutputProtocolRtp      = FlowOutputProtocol("rtp")
	FlowOutputProtocolZixiPull = FlowOutputProtocol("zixi-pull")
	FlowOutputProtocolRist     = FlowOutputProtocol("rist")
)

func (FlowOutputProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputProtocol)(nil)).Elem()
}

func (e FlowOutputProtocol) ToFlowOutputProtocolOutput() FlowOutputProtocolOutput {
	return pulumi.ToOutput(e).(FlowOutputProtocolOutput)
}

func (e FlowOutputProtocol) ToFlowOutputProtocolOutputWithContext(ctx context.Context) FlowOutputProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowOutputProtocolOutput)
}

func (e FlowOutputProtocol) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return e.ToFlowOutputProtocolPtrOutputWithContext(context.Background())
}

func (e FlowOutputProtocol) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return FlowOutputProtocol(e).ToFlowOutputProtocolOutputWithContext(ctx).ToFlowOutputProtocolPtrOutputWithContext(ctx)
}

func (e FlowOutputProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowOutputProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowOutputProtocolOutput struct{ *pulumi.OutputState }

func (FlowOutputProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputProtocol)(nil)).Elem()
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolOutput() FlowOutputProtocolOutput {
	return o
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolOutputWithContext(ctx context.Context) FlowOutputProtocolOutput {
	return o
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return o.ToFlowOutputProtocolPtrOutputWithContext(context.Background())
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputProtocol) *FlowOutputProtocol {
		return &v
	}).(FlowOutputProtocolPtrOutput)
}

func (o FlowOutputProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowOutputProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowOutputProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowOutputProtocolPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputProtocol)(nil)).Elem()
}

func (o FlowOutputProtocolPtrOutput) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return o
}

func (o FlowOutputProtocolPtrOutput) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return o
}

func (o FlowOutputProtocolPtrOutput) Elem() FlowOutputProtocolOutput {
	return o.ApplyT(func(v *FlowOutputProtocol) FlowOutputProtocol {
		if v != nil {
			return *v
		}
		var ret FlowOutputProtocol
		return ret
	}).(FlowOutputProtocolOutput)
}

func (o FlowOutputProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowOutputProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowOutputProtocolInput is an input type that accepts FlowOutputProtocolArgs and FlowOutputProtocolOutput values.
// You can construct a concrete instance of `FlowOutputProtocolInput` via:
//
//          FlowOutputProtocolArgs{...}
type FlowOutputProtocolInput interface {
	pulumi.Input

	ToFlowOutputProtocolOutput() FlowOutputProtocolOutput
	ToFlowOutputProtocolOutputWithContext(context.Context) FlowOutputProtocolOutput
}

var flowOutputProtocolPtrType = reflect.TypeOf((**FlowOutputProtocol)(nil)).Elem()

type FlowOutputProtocolPtrInput interface {
	pulumi.Input

	ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput
	ToFlowOutputProtocolPtrOutputWithContext(context.Context) FlowOutputProtocolPtrOutput
}

type flowOutputProtocolPtr string

func FlowOutputProtocolPtr(v string) FlowOutputProtocolPtrInput {
	return (*flowOutputProtocolPtr)(&v)
}

func (*flowOutputProtocolPtr) ElementType() reflect.Type {
	return flowOutputProtocolPtrType
}

func (in *flowOutputProtocolPtr) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return pulumi.ToOutput(in).(FlowOutputProtocolPtrOutput)
}

func (in *flowOutputProtocolPtr) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowOutputProtocolPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowSourceEncryptionAlgorithm string

const (
	FlowSourceEncryptionAlgorithmAes128 = FlowSourceEncryptionAlgorithm("aes128")
	FlowSourceEncryptionAlgorithmAes192 = FlowSourceEncryptionAlgorithm("aes192")
	FlowSourceEncryptionAlgorithmAes256 = FlowSourceEncryptionAlgorithm("aes256")
)

func (FlowSourceEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmOutput() FlowSourceEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowSourceEncryptionAlgorithmOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSourceEncryptionAlgorithmOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return e.ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return FlowSourceEncryptionAlgorithm(e).ToFlowSourceEncryptionAlgorithmOutputWithContext(ctx).ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowSourceEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSourceEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmOutput() FlowSourceEncryptionAlgorithmOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return o.ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceEncryptionAlgorithm) *FlowSourceEncryptionAlgorithm {
		return &v
	}).(FlowSourceEncryptionAlgorithmPtrOutput)
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSourceEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) Elem() FlowSourceEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowSourceEncryptionAlgorithm) FlowSourceEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowSourceEncryptionAlgorithm
		return ret
	}).(FlowSourceEncryptionAlgorithmOutput)
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSourceEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSourceEncryptionAlgorithmInput is an input type that accepts FlowSourceEncryptionAlgorithmArgs and FlowSourceEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionAlgorithmInput` via:
//
//          FlowSourceEncryptionAlgorithmArgs{...}
type FlowSourceEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowSourceEncryptionAlgorithmOutput() FlowSourceEncryptionAlgorithmOutput
	ToFlowSourceEncryptionAlgorithmOutputWithContext(context.Context) FlowSourceEncryptionAlgorithmOutput
}

var flowSourceEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowSourceEncryptionAlgorithm)(nil)).Elem()

type FlowSourceEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput
	ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowSourceEncryptionAlgorithmPtrOutput
}

type flowSourceEncryptionAlgorithmPtr string

func FlowSourceEncryptionAlgorithmPtr(v string) FlowSourceEncryptionAlgorithmPtrInput {
	return (*flowSourceEncryptionAlgorithmPtr)(&v)
}

func (*flowSourceEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowSourceEncryptionAlgorithmPtrType
}

func (in *flowSourceEncryptionAlgorithmPtr) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowSourceEncryptionAlgorithmPtrOutput)
}

func (in *flowSourceEncryptionAlgorithmPtr) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSourceEncryptionAlgorithmPtrOutput)
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowSourceEncryptionKeyType string

const (
	FlowSourceEncryptionKeyTypeSpeke     = FlowSourceEncryptionKeyType("speke")
	FlowSourceEncryptionKeyTypeStaticKey = FlowSourceEncryptionKeyType("static-key")
)

func (FlowSourceEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionKeyType)(nil)).Elem()
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypeOutput() FlowSourceEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowSourceEncryptionKeyTypeOutput)
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSourceEncryptionKeyTypeOutput)
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return e.ToFlowSourceEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return FlowSourceEncryptionKeyType(e).ToFlowSourceEncryptionKeyTypeOutputWithContext(ctx).ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowSourceEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSourceEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionKeyType)(nil)).Elem()
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypeOutput() FlowSourceEncryptionKeyTypeOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypeOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return o.ToFlowSourceEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceEncryptionKeyType) *FlowSourceEncryptionKeyType {
		return &v
	}).(FlowSourceEncryptionKeyTypePtrOutput)
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSourceEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryptionKeyType)(nil)).Elem()
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypePtrOutput) Elem() FlowSourceEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowSourceEncryptionKeyType) FlowSourceEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowSourceEncryptionKeyType
		return ret
	}).(FlowSourceEncryptionKeyTypeOutput)
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSourceEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSourceEncryptionKeyTypeInput is an input type that accepts FlowSourceEncryptionKeyTypeArgs and FlowSourceEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionKeyTypeInput` via:
//
//          FlowSourceEncryptionKeyTypeArgs{...}
type FlowSourceEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowSourceEncryptionKeyTypeOutput() FlowSourceEncryptionKeyTypeOutput
	ToFlowSourceEncryptionKeyTypeOutputWithContext(context.Context) FlowSourceEncryptionKeyTypeOutput
}

var flowSourceEncryptionKeyTypePtrType = reflect.TypeOf((**FlowSourceEncryptionKeyType)(nil)).Elem()

type FlowSourceEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput
	ToFlowSourceEncryptionKeyTypePtrOutputWithContext(context.Context) FlowSourceEncryptionKeyTypePtrOutput
}

type flowSourceEncryptionKeyTypePtr string

func FlowSourceEncryptionKeyTypePtr(v string) FlowSourceEncryptionKeyTypePtrInput {
	return (*flowSourceEncryptionKeyTypePtr)(&v)
}

func (*flowSourceEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowSourceEncryptionKeyTypePtrType
}

func (in *flowSourceEncryptionKeyTypePtr) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowSourceEncryptionKeyTypePtrOutput)
}

func (in *flowSourceEncryptionKeyTypePtr) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSourceEncryptionKeyTypePtrOutput)
}

// The protocol that is used by the source.
type FlowSourceProtocol string

const (
	FlowSourceProtocolZixiPush = FlowSourceProtocol("zixi-push")
	FlowSourceProtocolRtpFec   = FlowSourceProtocol("rtp-fec")
	FlowSourceProtocolRtp      = FlowSourceProtocol("rtp")
	FlowSourceProtocolRist     = FlowSourceProtocol("rist")
)

func (FlowSourceProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceProtocol)(nil)).Elem()
}

func (e FlowSourceProtocol) ToFlowSourceProtocolOutput() FlowSourceProtocolOutput {
	return pulumi.ToOutput(e).(FlowSourceProtocolOutput)
}

func (e FlowSourceProtocol) ToFlowSourceProtocolOutputWithContext(ctx context.Context) FlowSourceProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSourceProtocolOutput)
}

func (e FlowSourceProtocol) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return e.ToFlowSourceProtocolPtrOutputWithContext(context.Background())
}

func (e FlowSourceProtocol) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return FlowSourceProtocol(e).ToFlowSourceProtocolOutputWithContext(ctx).ToFlowSourceProtocolPtrOutputWithContext(ctx)
}

func (e FlowSourceProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSourceProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSourceProtocolOutput struct{ *pulumi.OutputState }

func (FlowSourceProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceProtocol)(nil)).Elem()
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolOutput() FlowSourceProtocolOutput {
	return o
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolOutputWithContext(ctx context.Context) FlowSourceProtocolOutput {
	return o
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return o.ToFlowSourceProtocolPtrOutputWithContext(context.Background())
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceProtocol) *FlowSourceProtocol {
		return &v
	}).(FlowSourceProtocolPtrOutput)
}

func (o FlowSourceProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSourceProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSourceProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSourceProtocolPtrOutput struct{ *pulumi.OutputState }

func (FlowSourceProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceProtocol)(nil)).Elem()
}

func (o FlowSourceProtocolPtrOutput) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return o
}

func (o FlowSourceProtocolPtrOutput) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return o
}

func (o FlowSourceProtocolPtrOutput) Elem() FlowSourceProtocolOutput {
	return o.ApplyT(func(v *FlowSourceProtocol) FlowSourceProtocol {
		if v != nil {
			return *v
		}
		var ret FlowSourceProtocol
		return ret
	}).(FlowSourceProtocolOutput)
}

func (o FlowSourceProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSourceProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSourceProtocolInput is an input type that accepts FlowSourceProtocolArgs and FlowSourceProtocolOutput values.
// You can construct a concrete instance of `FlowSourceProtocolInput` via:
//
//          FlowSourceProtocolArgs{...}
type FlowSourceProtocolInput interface {
	pulumi.Input

	ToFlowSourceProtocolOutput() FlowSourceProtocolOutput
	ToFlowSourceProtocolOutputWithContext(context.Context) FlowSourceProtocolOutput
}

var flowSourceProtocolPtrType = reflect.TypeOf((**FlowSourceProtocol)(nil)).Elem()

type FlowSourceProtocolPtrInput interface {
	pulumi.Input

	ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput
	ToFlowSourceProtocolPtrOutputWithContext(context.Context) FlowSourceProtocolPtrOutput
}

type flowSourceProtocolPtr string

func FlowSourceProtocolPtr(v string) FlowSourceProtocolPtrInput {
	return (*flowSourceProtocolPtr)(&v)
}

func (*flowSourceProtocolPtr) ElementType() reflect.Type {
	return flowSourceProtocolPtrType
}

func (in *flowSourceProtocolPtr) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return pulumi.ToOutput(in).(FlowSourceProtocolPtrOutput)
}

func (in *flowSourceProtocolPtr) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSourceProtocolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(FlowEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEntitlementStatusOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEntitlementStatusPtrOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigStateOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigStatePtrOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowOutputProtocolOutput{})
	pulumi.RegisterOutputType(FlowOutputProtocolPtrOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowSourceProtocolOutput{})
	pulumi.RegisterOutputType(FlowSourceProtocolPtrOutput{})
}
