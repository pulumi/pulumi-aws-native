// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type BridgeFailoverConfigStateEnum string

const (
	BridgeFailoverConfigStateEnumEnabled  = BridgeFailoverConfigStateEnum("ENABLED")
	BridgeFailoverConfigStateEnumDisabled = BridgeFailoverConfigStateEnum("DISABLED")
)

func (BridgeFailoverConfigStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFailoverConfigStateEnum)(nil)).Elem()
}

func (e BridgeFailoverConfigStateEnum) ToBridgeFailoverConfigStateEnumOutput() BridgeFailoverConfigStateEnumOutput {
	return pulumi.ToOutput(e).(BridgeFailoverConfigStateEnumOutput)
}

func (e BridgeFailoverConfigStateEnum) ToBridgeFailoverConfigStateEnumOutputWithContext(ctx context.Context) BridgeFailoverConfigStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BridgeFailoverConfigStateEnumOutput)
}

func (e BridgeFailoverConfigStateEnum) ToBridgeFailoverConfigStateEnumPtrOutput() BridgeFailoverConfigStateEnumPtrOutput {
	return e.ToBridgeFailoverConfigStateEnumPtrOutputWithContext(context.Background())
}

func (e BridgeFailoverConfigStateEnum) ToBridgeFailoverConfigStateEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigStateEnumPtrOutput {
	return BridgeFailoverConfigStateEnum(e).ToBridgeFailoverConfigStateEnumOutputWithContext(ctx).ToBridgeFailoverConfigStateEnumPtrOutputWithContext(ctx)
}

func (e BridgeFailoverConfigStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeFailoverConfigStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeFailoverConfigStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BridgeFailoverConfigStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BridgeFailoverConfigStateEnumOutput struct{ *pulumi.OutputState }

func (BridgeFailoverConfigStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFailoverConfigStateEnum)(nil)).Elem()
}

func (o BridgeFailoverConfigStateEnumOutput) ToBridgeFailoverConfigStateEnumOutput() BridgeFailoverConfigStateEnumOutput {
	return o
}

func (o BridgeFailoverConfigStateEnumOutput) ToBridgeFailoverConfigStateEnumOutputWithContext(ctx context.Context) BridgeFailoverConfigStateEnumOutput {
	return o
}

func (o BridgeFailoverConfigStateEnumOutput) ToBridgeFailoverConfigStateEnumPtrOutput() BridgeFailoverConfigStateEnumPtrOutput {
	return o.ToBridgeFailoverConfigStateEnumPtrOutputWithContext(context.Background())
}

func (o BridgeFailoverConfigStateEnumOutput) ToBridgeFailoverConfigStateEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeFailoverConfigStateEnum) *BridgeFailoverConfigStateEnum {
		return &v
	}).(BridgeFailoverConfigStateEnumPtrOutput)
}

func (o BridgeFailoverConfigStateEnumOutput) ToOutput(ctx context.Context) pulumix.Output[BridgeFailoverConfigStateEnum] {
	return pulumix.Output[BridgeFailoverConfigStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeFailoverConfigStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BridgeFailoverConfigStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeFailoverConfigStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BridgeFailoverConfigStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeFailoverConfigStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeFailoverConfigStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BridgeFailoverConfigStateEnumPtrOutput struct{ *pulumi.OutputState }

func (BridgeFailoverConfigStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeFailoverConfigStateEnum)(nil)).Elem()
}

func (o BridgeFailoverConfigStateEnumPtrOutput) ToBridgeFailoverConfigStateEnumPtrOutput() BridgeFailoverConfigStateEnumPtrOutput {
	return o
}

func (o BridgeFailoverConfigStateEnumPtrOutput) ToBridgeFailoverConfigStateEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigStateEnumPtrOutput {
	return o
}

func (o BridgeFailoverConfigStateEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeFailoverConfigStateEnum] {
	return pulumix.Output[*BridgeFailoverConfigStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeFailoverConfigStateEnumPtrOutput) Elem() BridgeFailoverConfigStateEnumOutput {
	return o.ApplyT(func(v *BridgeFailoverConfigStateEnum) BridgeFailoverConfigStateEnum {
		if v != nil {
			return *v
		}
		var ret BridgeFailoverConfigStateEnum
		return ret
	}).(BridgeFailoverConfigStateEnumOutput)
}

func (o BridgeFailoverConfigStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeFailoverConfigStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BridgeFailoverConfigStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BridgeFailoverConfigStateEnumInput is an input type that accepts BridgeFailoverConfigStateEnumArgs and BridgeFailoverConfigStateEnumOutput values.
// You can construct a concrete instance of `BridgeFailoverConfigStateEnumInput` via:
//
//	BridgeFailoverConfigStateEnumArgs{...}
type BridgeFailoverConfigStateEnumInput interface {
	pulumi.Input

	ToBridgeFailoverConfigStateEnumOutput() BridgeFailoverConfigStateEnumOutput
	ToBridgeFailoverConfigStateEnumOutputWithContext(context.Context) BridgeFailoverConfigStateEnumOutput
}

var bridgeFailoverConfigStateEnumPtrType = reflect.TypeOf((**BridgeFailoverConfigStateEnum)(nil)).Elem()

type BridgeFailoverConfigStateEnumPtrInput interface {
	pulumi.Input

	ToBridgeFailoverConfigStateEnumPtrOutput() BridgeFailoverConfigStateEnumPtrOutput
	ToBridgeFailoverConfigStateEnumPtrOutputWithContext(context.Context) BridgeFailoverConfigStateEnumPtrOutput
}

type bridgeFailoverConfigStateEnumPtr string

func BridgeFailoverConfigStateEnumPtr(v string) BridgeFailoverConfigStateEnumPtrInput {
	return (*bridgeFailoverConfigStateEnumPtr)(&v)
}

func (*bridgeFailoverConfigStateEnumPtr) ElementType() reflect.Type {
	return bridgeFailoverConfigStateEnumPtrType
}

func (in *bridgeFailoverConfigStateEnumPtr) ToBridgeFailoverConfigStateEnumPtrOutput() BridgeFailoverConfigStateEnumPtrOutput {
	return pulumi.ToOutput(in).(BridgeFailoverConfigStateEnumPtrOutput)
}

func (in *bridgeFailoverConfigStateEnumPtr) ToBridgeFailoverConfigStateEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverConfigStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BridgeFailoverConfigStateEnumPtrOutput)
}

func (in *bridgeFailoverConfigStateEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*BridgeFailoverConfigStateEnum] {
	return pulumix.Output[*BridgeFailoverConfigStateEnum]{
		OutputState: in.ToBridgeFailoverConfigStateEnumPtrOutputWithContext(ctx).OutputState,
	}
}

type BridgeFailoverModeEnum string

const (
	BridgeFailoverModeEnumFailover = BridgeFailoverModeEnum("FAILOVER")
)

func (BridgeFailoverModeEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFailoverModeEnum)(nil)).Elem()
}

func (e BridgeFailoverModeEnum) ToBridgeFailoverModeEnumOutput() BridgeFailoverModeEnumOutput {
	return pulumi.ToOutput(e).(BridgeFailoverModeEnumOutput)
}

func (e BridgeFailoverModeEnum) ToBridgeFailoverModeEnumOutputWithContext(ctx context.Context) BridgeFailoverModeEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BridgeFailoverModeEnumOutput)
}

func (e BridgeFailoverModeEnum) ToBridgeFailoverModeEnumPtrOutput() BridgeFailoverModeEnumPtrOutput {
	return e.ToBridgeFailoverModeEnumPtrOutputWithContext(context.Background())
}

func (e BridgeFailoverModeEnum) ToBridgeFailoverModeEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverModeEnumPtrOutput {
	return BridgeFailoverModeEnum(e).ToBridgeFailoverModeEnumOutputWithContext(ctx).ToBridgeFailoverModeEnumPtrOutputWithContext(ctx)
}

func (e BridgeFailoverModeEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeFailoverModeEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeFailoverModeEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BridgeFailoverModeEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BridgeFailoverModeEnumOutput struct{ *pulumi.OutputState }

func (BridgeFailoverModeEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeFailoverModeEnum)(nil)).Elem()
}

func (o BridgeFailoverModeEnumOutput) ToBridgeFailoverModeEnumOutput() BridgeFailoverModeEnumOutput {
	return o
}

func (o BridgeFailoverModeEnumOutput) ToBridgeFailoverModeEnumOutputWithContext(ctx context.Context) BridgeFailoverModeEnumOutput {
	return o
}

func (o BridgeFailoverModeEnumOutput) ToBridgeFailoverModeEnumPtrOutput() BridgeFailoverModeEnumPtrOutput {
	return o.ToBridgeFailoverModeEnumPtrOutputWithContext(context.Background())
}

func (o BridgeFailoverModeEnumOutput) ToBridgeFailoverModeEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverModeEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeFailoverModeEnum) *BridgeFailoverModeEnum {
		return &v
	}).(BridgeFailoverModeEnumPtrOutput)
}

func (o BridgeFailoverModeEnumOutput) ToOutput(ctx context.Context) pulumix.Output[BridgeFailoverModeEnum] {
	return pulumix.Output[BridgeFailoverModeEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeFailoverModeEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BridgeFailoverModeEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeFailoverModeEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BridgeFailoverModeEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeFailoverModeEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeFailoverModeEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BridgeFailoverModeEnumPtrOutput struct{ *pulumi.OutputState }

func (BridgeFailoverModeEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeFailoverModeEnum)(nil)).Elem()
}

func (o BridgeFailoverModeEnumPtrOutput) ToBridgeFailoverModeEnumPtrOutput() BridgeFailoverModeEnumPtrOutput {
	return o
}

func (o BridgeFailoverModeEnumPtrOutput) ToBridgeFailoverModeEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverModeEnumPtrOutput {
	return o
}

func (o BridgeFailoverModeEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeFailoverModeEnum] {
	return pulumix.Output[*BridgeFailoverModeEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeFailoverModeEnumPtrOutput) Elem() BridgeFailoverModeEnumOutput {
	return o.ApplyT(func(v *BridgeFailoverModeEnum) BridgeFailoverModeEnum {
		if v != nil {
			return *v
		}
		var ret BridgeFailoverModeEnum
		return ret
	}).(BridgeFailoverModeEnumOutput)
}

func (o BridgeFailoverModeEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeFailoverModeEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BridgeFailoverModeEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BridgeFailoverModeEnumInput is an input type that accepts BridgeFailoverModeEnumArgs and BridgeFailoverModeEnumOutput values.
// You can construct a concrete instance of `BridgeFailoverModeEnumInput` via:
//
//	BridgeFailoverModeEnumArgs{...}
type BridgeFailoverModeEnumInput interface {
	pulumi.Input

	ToBridgeFailoverModeEnumOutput() BridgeFailoverModeEnumOutput
	ToBridgeFailoverModeEnumOutputWithContext(context.Context) BridgeFailoverModeEnumOutput
}

var bridgeFailoverModeEnumPtrType = reflect.TypeOf((**BridgeFailoverModeEnum)(nil)).Elem()

type BridgeFailoverModeEnumPtrInput interface {
	pulumi.Input

	ToBridgeFailoverModeEnumPtrOutput() BridgeFailoverModeEnumPtrOutput
	ToBridgeFailoverModeEnumPtrOutputWithContext(context.Context) BridgeFailoverModeEnumPtrOutput
}

type bridgeFailoverModeEnumPtr string

func BridgeFailoverModeEnumPtr(v string) BridgeFailoverModeEnumPtrInput {
	return (*bridgeFailoverModeEnumPtr)(&v)
}

func (*bridgeFailoverModeEnumPtr) ElementType() reflect.Type {
	return bridgeFailoverModeEnumPtrType
}

func (in *bridgeFailoverModeEnumPtr) ToBridgeFailoverModeEnumPtrOutput() BridgeFailoverModeEnumPtrOutput {
	return pulumi.ToOutput(in).(BridgeFailoverModeEnumPtrOutput)
}

func (in *bridgeFailoverModeEnumPtr) ToBridgeFailoverModeEnumPtrOutputWithContext(ctx context.Context) BridgeFailoverModeEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BridgeFailoverModeEnumPtrOutput)
}

func (in *bridgeFailoverModeEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*BridgeFailoverModeEnum] {
	return pulumix.Output[*BridgeFailoverModeEnum]{
		OutputState: in.ToBridgeFailoverModeEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// The network output protocol.
type BridgeOutputResourceBridgeNetworkOutputProtocol string

const (
	BridgeOutputResourceBridgeNetworkOutputProtocolRtpFec = BridgeOutputResourceBridgeNetworkOutputProtocol("rtp-fec")
	BridgeOutputResourceBridgeNetworkOutputProtocolRtp    = BridgeOutputResourceBridgeNetworkOutputProtocol("rtp")
	BridgeOutputResourceBridgeNetworkOutputProtocolUdp    = BridgeOutputResourceBridgeNetworkOutputProtocol("udp")
)

func (BridgeOutputResourceBridgeNetworkOutputProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeOutputResourceBridgeNetworkOutputProtocol)(nil)).Elem()
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToBridgeOutputResourceBridgeNetworkOutputProtocolOutput() BridgeOutputResourceBridgeNetworkOutputProtocolOutput {
	return pulumi.ToOutput(e).(BridgeOutputResourceBridgeNetworkOutputProtocolOutput)
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToBridgeOutputResourceBridgeNetworkOutputProtocolOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BridgeOutputResourceBridgeNetworkOutputProtocolOutput)
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput() BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return e.ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(context.Background())
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return BridgeOutputResourceBridgeNetworkOutputProtocol(e).ToBridgeOutputResourceBridgeNetworkOutputProtocolOutputWithContext(ctx).ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(ctx)
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BridgeOutputResourceBridgeNetworkOutputProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BridgeOutputResourceBridgeNetworkOutputProtocolOutput struct{ *pulumi.OutputState }

func (BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeOutputResourceBridgeNetworkOutputProtocol)(nil)).Elem()
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToBridgeOutputResourceBridgeNetworkOutputProtocolOutput() BridgeOutputResourceBridgeNetworkOutputProtocolOutput {
	return o
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToBridgeOutputResourceBridgeNetworkOutputProtocolOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolOutput {
	return o
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput() BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return o.ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(context.Background())
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeOutputResourceBridgeNetworkOutputProtocol) *BridgeOutputResourceBridgeNetworkOutputProtocol {
		return &v
	}).(BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput)
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[BridgeOutputResourceBridgeNetworkOutputProtocol] {
	return pulumix.Output[BridgeOutputResourceBridgeNetworkOutputProtocol]{
		OutputState: o.OutputState,
	}
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeOutputResourceBridgeNetworkOutputProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeOutputResourceBridgeNetworkOutputProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput struct{ *pulumi.OutputState }

func (BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeOutputResourceBridgeNetworkOutputProtocol)(nil)).Elem()
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput() BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return o
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return o
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeOutputResourceBridgeNetworkOutputProtocol] {
	return pulumix.Output[*BridgeOutputResourceBridgeNetworkOutputProtocol]{
		OutputState: o.OutputState,
	}
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput) Elem() BridgeOutputResourceBridgeNetworkOutputProtocolOutput {
	return o.ApplyT(func(v *BridgeOutputResourceBridgeNetworkOutputProtocol) BridgeOutputResourceBridgeNetworkOutputProtocol {
		if v != nil {
			return *v
		}
		var ret BridgeOutputResourceBridgeNetworkOutputProtocol
		return ret
	}).(BridgeOutputResourceBridgeNetworkOutputProtocolOutput)
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BridgeOutputResourceBridgeNetworkOutputProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BridgeOutputResourceBridgeNetworkOutputProtocolInput is an input type that accepts BridgeOutputResourceBridgeNetworkOutputProtocolArgs and BridgeOutputResourceBridgeNetworkOutputProtocolOutput values.
// You can construct a concrete instance of `BridgeOutputResourceBridgeNetworkOutputProtocolInput` via:
//
//	BridgeOutputResourceBridgeNetworkOutputProtocolArgs{...}
type BridgeOutputResourceBridgeNetworkOutputProtocolInput interface {
	pulumi.Input

	ToBridgeOutputResourceBridgeNetworkOutputProtocolOutput() BridgeOutputResourceBridgeNetworkOutputProtocolOutput
	ToBridgeOutputResourceBridgeNetworkOutputProtocolOutputWithContext(context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolOutput
}

var bridgeOutputResourceBridgeNetworkOutputProtocolPtrType = reflect.TypeOf((**BridgeOutputResourceBridgeNetworkOutputProtocol)(nil)).Elem()

type BridgeOutputResourceBridgeNetworkOutputProtocolPtrInput interface {
	pulumi.Input

	ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput() BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput
	ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput
}

type bridgeOutputResourceBridgeNetworkOutputProtocolPtr string

func BridgeOutputResourceBridgeNetworkOutputProtocolPtr(v string) BridgeOutputResourceBridgeNetworkOutputProtocolPtrInput {
	return (*bridgeOutputResourceBridgeNetworkOutputProtocolPtr)(&v)
}

func (*bridgeOutputResourceBridgeNetworkOutputProtocolPtr) ElementType() reflect.Type {
	return bridgeOutputResourceBridgeNetworkOutputProtocolPtrType
}

func (in *bridgeOutputResourceBridgeNetworkOutputProtocolPtr) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput() BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return pulumi.ToOutput(in).(BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput)
}

func (in *bridgeOutputResourceBridgeNetworkOutputProtocolPtr) ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(ctx context.Context) BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput)
}

func (in *bridgeOutputResourceBridgeNetworkOutputProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*BridgeOutputResourceBridgeNetworkOutputProtocol] {
	return pulumix.Output[*BridgeOutputResourceBridgeNetworkOutputProtocol]{
		OutputState: in.ToBridgeOutputResourceBridgeNetworkOutputProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

type BridgeProtocolEnum string

const (
	BridgeProtocolEnumRtpFec = BridgeProtocolEnum("rtp-fec")
	BridgeProtocolEnumRtp    = BridgeProtocolEnum("rtp")
	BridgeProtocolEnumUdp    = BridgeProtocolEnum("udp")
)

func (BridgeProtocolEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeProtocolEnum)(nil)).Elem()
}

func (e BridgeProtocolEnum) ToBridgeProtocolEnumOutput() BridgeProtocolEnumOutput {
	return pulumi.ToOutput(e).(BridgeProtocolEnumOutput)
}

func (e BridgeProtocolEnum) ToBridgeProtocolEnumOutputWithContext(ctx context.Context) BridgeProtocolEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BridgeProtocolEnumOutput)
}

func (e BridgeProtocolEnum) ToBridgeProtocolEnumPtrOutput() BridgeProtocolEnumPtrOutput {
	return e.ToBridgeProtocolEnumPtrOutputWithContext(context.Background())
}

func (e BridgeProtocolEnum) ToBridgeProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeProtocolEnumPtrOutput {
	return BridgeProtocolEnum(e).ToBridgeProtocolEnumOutputWithContext(ctx).ToBridgeProtocolEnumPtrOutputWithContext(ctx)
}

func (e BridgeProtocolEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeProtocolEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeProtocolEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BridgeProtocolEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BridgeProtocolEnumOutput struct{ *pulumi.OutputState }

func (BridgeProtocolEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeProtocolEnum)(nil)).Elem()
}

func (o BridgeProtocolEnumOutput) ToBridgeProtocolEnumOutput() BridgeProtocolEnumOutput {
	return o
}

func (o BridgeProtocolEnumOutput) ToBridgeProtocolEnumOutputWithContext(ctx context.Context) BridgeProtocolEnumOutput {
	return o
}

func (o BridgeProtocolEnumOutput) ToBridgeProtocolEnumPtrOutput() BridgeProtocolEnumPtrOutput {
	return o.ToBridgeProtocolEnumPtrOutputWithContext(context.Background())
}

func (o BridgeProtocolEnumOutput) ToBridgeProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeProtocolEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeProtocolEnum) *BridgeProtocolEnum {
		return &v
	}).(BridgeProtocolEnumPtrOutput)
}

func (o BridgeProtocolEnumOutput) ToOutput(ctx context.Context) pulumix.Output[BridgeProtocolEnum] {
	return pulumix.Output[BridgeProtocolEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeProtocolEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BridgeProtocolEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeProtocolEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BridgeProtocolEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeProtocolEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeProtocolEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BridgeProtocolEnumPtrOutput struct{ *pulumi.OutputState }

func (BridgeProtocolEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeProtocolEnum)(nil)).Elem()
}

func (o BridgeProtocolEnumPtrOutput) ToBridgeProtocolEnumPtrOutput() BridgeProtocolEnumPtrOutput {
	return o
}

func (o BridgeProtocolEnumPtrOutput) ToBridgeProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeProtocolEnumPtrOutput {
	return o
}

func (o BridgeProtocolEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeProtocolEnum] {
	return pulumix.Output[*BridgeProtocolEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeProtocolEnumPtrOutput) Elem() BridgeProtocolEnumOutput {
	return o.ApplyT(func(v *BridgeProtocolEnum) BridgeProtocolEnum {
		if v != nil {
			return *v
		}
		var ret BridgeProtocolEnum
		return ret
	}).(BridgeProtocolEnumOutput)
}

func (o BridgeProtocolEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeProtocolEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BridgeProtocolEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BridgeProtocolEnumInput is an input type that accepts BridgeProtocolEnumArgs and BridgeProtocolEnumOutput values.
// You can construct a concrete instance of `BridgeProtocolEnumInput` via:
//
//	BridgeProtocolEnumArgs{...}
type BridgeProtocolEnumInput interface {
	pulumi.Input

	ToBridgeProtocolEnumOutput() BridgeProtocolEnumOutput
	ToBridgeProtocolEnumOutputWithContext(context.Context) BridgeProtocolEnumOutput
}

var bridgeProtocolEnumPtrType = reflect.TypeOf((**BridgeProtocolEnum)(nil)).Elem()

type BridgeProtocolEnumPtrInput interface {
	pulumi.Input

	ToBridgeProtocolEnumPtrOutput() BridgeProtocolEnumPtrOutput
	ToBridgeProtocolEnumPtrOutputWithContext(context.Context) BridgeProtocolEnumPtrOutput
}

type bridgeProtocolEnumPtr string

func BridgeProtocolEnumPtr(v string) BridgeProtocolEnumPtrInput {
	return (*bridgeProtocolEnumPtr)(&v)
}

func (*bridgeProtocolEnumPtr) ElementType() reflect.Type {
	return bridgeProtocolEnumPtrType
}

func (in *bridgeProtocolEnumPtr) ToBridgeProtocolEnumPtrOutput() BridgeProtocolEnumPtrOutput {
	return pulumi.ToOutput(in).(BridgeProtocolEnumPtrOutput)
}

func (in *bridgeProtocolEnumPtr) ToBridgeProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeProtocolEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BridgeProtocolEnumPtrOutput)
}

func (in *bridgeProtocolEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*BridgeProtocolEnum] {
	return pulumix.Output[*BridgeProtocolEnum]{
		OutputState: in.ToBridgeProtocolEnumPtrOutputWithContext(ctx).OutputState,
	}
}

type BridgeSourceProtocolEnum string

const (
	BridgeSourceProtocolEnumRtpFec = BridgeSourceProtocolEnum("rtp-fec")
	BridgeSourceProtocolEnumRtp    = BridgeSourceProtocolEnum("rtp")
	BridgeSourceProtocolEnumUdp    = BridgeSourceProtocolEnum("udp")
)

func (BridgeSourceProtocolEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceProtocolEnum)(nil)).Elem()
}

func (e BridgeSourceProtocolEnum) ToBridgeSourceProtocolEnumOutput() BridgeSourceProtocolEnumOutput {
	return pulumi.ToOutput(e).(BridgeSourceProtocolEnumOutput)
}

func (e BridgeSourceProtocolEnum) ToBridgeSourceProtocolEnumOutputWithContext(ctx context.Context) BridgeSourceProtocolEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BridgeSourceProtocolEnumOutput)
}

func (e BridgeSourceProtocolEnum) ToBridgeSourceProtocolEnumPtrOutput() BridgeSourceProtocolEnumPtrOutput {
	return e.ToBridgeSourceProtocolEnumPtrOutputWithContext(context.Background())
}

func (e BridgeSourceProtocolEnum) ToBridgeSourceProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeSourceProtocolEnumPtrOutput {
	return BridgeSourceProtocolEnum(e).ToBridgeSourceProtocolEnumOutputWithContext(ctx).ToBridgeSourceProtocolEnumPtrOutputWithContext(ctx)
}

func (e BridgeSourceProtocolEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeSourceProtocolEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BridgeSourceProtocolEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BridgeSourceProtocolEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BridgeSourceProtocolEnumOutput struct{ *pulumi.OutputState }

func (BridgeSourceProtocolEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeSourceProtocolEnum)(nil)).Elem()
}

func (o BridgeSourceProtocolEnumOutput) ToBridgeSourceProtocolEnumOutput() BridgeSourceProtocolEnumOutput {
	return o
}

func (o BridgeSourceProtocolEnumOutput) ToBridgeSourceProtocolEnumOutputWithContext(ctx context.Context) BridgeSourceProtocolEnumOutput {
	return o
}

func (o BridgeSourceProtocolEnumOutput) ToBridgeSourceProtocolEnumPtrOutput() BridgeSourceProtocolEnumPtrOutput {
	return o.ToBridgeSourceProtocolEnumPtrOutputWithContext(context.Background())
}

func (o BridgeSourceProtocolEnumOutput) ToBridgeSourceProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeSourceProtocolEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeSourceProtocolEnum) *BridgeSourceProtocolEnum {
		return &v
	}).(BridgeSourceProtocolEnumPtrOutput)
}

func (o BridgeSourceProtocolEnumOutput) ToOutput(ctx context.Context) pulumix.Output[BridgeSourceProtocolEnum] {
	return pulumix.Output[BridgeSourceProtocolEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeSourceProtocolEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BridgeSourceProtocolEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeSourceProtocolEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BridgeSourceProtocolEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeSourceProtocolEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeSourceProtocolEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BridgeSourceProtocolEnumPtrOutput struct{ *pulumi.OutputState }

func (BridgeSourceProtocolEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSourceProtocolEnum)(nil)).Elem()
}

func (o BridgeSourceProtocolEnumPtrOutput) ToBridgeSourceProtocolEnumPtrOutput() BridgeSourceProtocolEnumPtrOutput {
	return o
}

func (o BridgeSourceProtocolEnumPtrOutput) ToBridgeSourceProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeSourceProtocolEnumPtrOutput {
	return o
}

func (o BridgeSourceProtocolEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeSourceProtocolEnum] {
	return pulumix.Output[*BridgeSourceProtocolEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeSourceProtocolEnumPtrOutput) Elem() BridgeSourceProtocolEnumOutput {
	return o.ApplyT(func(v *BridgeSourceProtocolEnum) BridgeSourceProtocolEnum {
		if v != nil {
			return *v
		}
		var ret BridgeSourceProtocolEnum
		return ret
	}).(BridgeSourceProtocolEnumOutput)
}

func (o BridgeSourceProtocolEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeSourceProtocolEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BridgeSourceProtocolEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BridgeSourceProtocolEnumInput is an input type that accepts BridgeSourceProtocolEnumArgs and BridgeSourceProtocolEnumOutput values.
// You can construct a concrete instance of `BridgeSourceProtocolEnumInput` via:
//
//	BridgeSourceProtocolEnumArgs{...}
type BridgeSourceProtocolEnumInput interface {
	pulumi.Input

	ToBridgeSourceProtocolEnumOutput() BridgeSourceProtocolEnumOutput
	ToBridgeSourceProtocolEnumOutputWithContext(context.Context) BridgeSourceProtocolEnumOutput
}

var bridgeSourceProtocolEnumPtrType = reflect.TypeOf((**BridgeSourceProtocolEnum)(nil)).Elem()

type BridgeSourceProtocolEnumPtrInput interface {
	pulumi.Input

	ToBridgeSourceProtocolEnumPtrOutput() BridgeSourceProtocolEnumPtrOutput
	ToBridgeSourceProtocolEnumPtrOutputWithContext(context.Context) BridgeSourceProtocolEnumPtrOutput
}

type bridgeSourceProtocolEnumPtr string

func BridgeSourceProtocolEnumPtr(v string) BridgeSourceProtocolEnumPtrInput {
	return (*bridgeSourceProtocolEnumPtr)(&v)
}

func (*bridgeSourceProtocolEnumPtr) ElementType() reflect.Type {
	return bridgeSourceProtocolEnumPtrType
}

func (in *bridgeSourceProtocolEnumPtr) ToBridgeSourceProtocolEnumPtrOutput() BridgeSourceProtocolEnumPtrOutput {
	return pulumi.ToOutput(in).(BridgeSourceProtocolEnumPtrOutput)
}

func (in *bridgeSourceProtocolEnumPtr) ToBridgeSourceProtocolEnumPtrOutputWithContext(ctx context.Context) BridgeSourceProtocolEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BridgeSourceProtocolEnumPtrOutput)
}

func (in *bridgeSourceProtocolEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*BridgeSourceProtocolEnum] {
	return pulumix.Output[*BridgeSourceProtocolEnum]{
		OutputState: in.ToBridgeSourceProtocolEnumPtrOutputWithContext(ctx).OutputState,
	}
}

type BridgeStateEnum string

const (
	BridgeStateEnumCreating     = BridgeStateEnum("CREATING")
	BridgeStateEnumStandby      = BridgeStateEnum("STANDBY")
	BridgeStateEnumStarting     = BridgeStateEnum("STARTING")
	BridgeStateEnumDeploying    = BridgeStateEnum("DEPLOYING")
	BridgeStateEnumActive       = BridgeStateEnum("ACTIVE")
	BridgeStateEnumStopping     = BridgeStateEnum("STOPPING")
	BridgeStateEnumDeleting     = BridgeStateEnum("DELETING")
	BridgeStateEnumDeleted      = BridgeStateEnum("DELETED")
	BridgeStateEnumStartFailed  = BridgeStateEnum("START_FAILED")
	BridgeStateEnumStartPending = BridgeStateEnum("START_PENDING")
	BridgeStateEnumUpdating     = BridgeStateEnum("UPDATING")
)

type BridgeStateEnumOutput struct{ *pulumi.OutputState }

func (BridgeStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BridgeStateEnum)(nil)).Elem()
}

func (o BridgeStateEnumOutput) ToBridgeStateEnumOutput() BridgeStateEnumOutput {
	return o
}

func (o BridgeStateEnumOutput) ToBridgeStateEnumOutputWithContext(ctx context.Context) BridgeStateEnumOutput {
	return o
}

func (o BridgeStateEnumOutput) ToBridgeStateEnumPtrOutput() BridgeStateEnumPtrOutput {
	return o.ToBridgeStateEnumPtrOutputWithContext(context.Background())
}

func (o BridgeStateEnumOutput) ToBridgeStateEnumPtrOutputWithContext(ctx context.Context) BridgeStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BridgeStateEnum) *BridgeStateEnum {
		return &v
	}).(BridgeStateEnumPtrOutput)
}

func (o BridgeStateEnumOutput) ToOutput(ctx context.Context) pulumix.Output[BridgeStateEnum] {
	return pulumix.Output[BridgeStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BridgeStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BridgeStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BridgeStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BridgeStateEnumPtrOutput struct{ *pulumi.OutputState }

func (BridgeStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeStateEnum)(nil)).Elem()
}

func (o BridgeStateEnumPtrOutput) ToBridgeStateEnumPtrOutput() BridgeStateEnumPtrOutput {
	return o
}

func (o BridgeStateEnumPtrOutput) ToBridgeStateEnumPtrOutputWithContext(ctx context.Context) BridgeStateEnumPtrOutput {
	return o
}

func (o BridgeStateEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeStateEnum] {
	return pulumix.Output[*BridgeStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o BridgeStateEnumPtrOutput) Elem() BridgeStateEnumOutput {
	return o.ApplyT(func(v *BridgeStateEnum) BridgeStateEnum {
		if v != nil {
			return *v
		}
		var ret BridgeStateEnum
		return ret
	}).(BridgeStateEnumOutput)
}

func (o BridgeStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BridgeStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BridgeStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowEncryptionAlgorithm string

const (
	FlowEncryptionAlgorithmAes128 = FlowEncryptionAlgorithm("aes128")
	FlowEncryptionAlgorithmAes192 = FlowEncryptionAlgorithm("aes192")
	FlowEncryptionAlgorithmAes256 = FlowEncryptionAlgorithm("aes256")
)

func (FlowEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmOutput() FlowEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowEncryptionAlgorithmOutput)
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEncryptionAlgorithmOutput)
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return e.ToFlowEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowEncryptionAlgorithm) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return FlowEncryptionAlgorithm(e).ToFlowEncryptionAlgorithmOutputWithContext(ctx).ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmOutput() FlowEncryptionAlgorithmOutput {
	return o
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmOutput {
	return o
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return o.ToFlowEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmOutput) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEncryptionAlgorithm) *FlowEncryptionAlgorithm {
		return &v
	}).(FlowEncryptionAlgorithmPtrOutput)
}

func (o FlowEncryptionAlgorithmOutput) ToOutput(ctx context.Context) pulumix.Output[FlowEncryptionAlgorithm] {
	return pulumix.Output[FlowEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEncryptionAlgorithmPtrOutput) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEncryptionAlgorithmPtrOutput) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEncryptionAlgorithmPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowEncryptionAlgorithm] {
	return pulumix.Output[*FlowEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowEncryptionAlgorithmPtrOutput) Elem() FlowEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowEncryptionAlgorithm) FlowEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowEncryptionAlgorithm
		return ret
	}).(FlowEncryptionAlgorithmOutput)
}

func (o FlowEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEncryptionAlgorithmInput is an input type that accepts FlowEncryptionAlgorithmArgs and FlowEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowEncryptionAlgorithmInput` via:
//
//	FlowEncryptionAlgorithmArgs{...}
type FlowEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowEncryptionAlgorithmOutput() FlowEncryptionAlgorithmOutput
	ToFlowEncryptionAlgorithmOutputWithContext(context.Context) FlowEncryptionAlgorithmOutput
}

var flowEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowEncryptionAlgorithm)(nil)).Elem()

type FlowEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput
	ToFlowEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowEncryptionAlgorithmPtrOutput
}

type flowEncryptionAlgorithmPtr string

func FlowEncryptionAlgorithmPtr(v string) FlowEncryptionAlgorithmPtrInput {
	return (*flowEncryptionAlgorithmPtr)(&v)
}

func (*flowEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowEncryptionAlgorithmPtrType
}

func (in *flowEncryptionAlgorithmPtr) ToFlowEncryptionAlgorithmPtrOutput() FlowEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowEncryptionAlgorithmPtrOutput)
}

func (in *flowEncryptionAlgorithmPtr) ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEncryptionAlgorithmPtrOutput)
}

func (in *flowEncryptionAlgorithmPtr) ToOutput(ctx context.Context) pulumix.Output[*FlowEncryptionAlgorithm] {
	return pulumix.Output[*FlowEncryptionAlgorithm]{
		OutputState: in.ToFlowEncryptionAlgorithmPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowEncryptionKeyType string

const (
	FlowEncryptionKeyTypeSpeke       = FlowEncryptionKeyType("speke")
	FlowEncryptionKeyTypeStaticKey   = FlowEncryptionKeyType("static-key")
	FlowEncryptionKeyTypeSrtPassword = FlowEncryptionKeyType("srt-password")
)

func (FlowEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionKeyType)(nil)).Elem()
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypeOutput() FlowEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowEncryptionKeyTypeOutput)
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEncryptionKeyTypeOutput)
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return e.ToFlowEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowEncryptionKeyType) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return FlowEncryptionKeyType(e).ToFlowEncryptionKeyTypeOutputWithContext(ctx).ToFlowEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEncryptionKeyType)(nil)).Elem()
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypeOutput() FlowEncryptionKeyTypeOutput {
	return o
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEncryptionKeyTypeOutput {
	return o
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return o.ToFlowEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypeOutput) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEncryptionKeyType) *FlowEncryptionKeyType {
		return &v
	}).(FlowEncryptionKeyTypePtrOutput)
}

func (o FlowEncryptionKeyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowEncryptionKeyType] {
	return pulumix.Output[FlowEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEncryptionKeyType)(nil)).Elem()
}

func (o FlowEncryptionKeyTypePtrOutput) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEncryptionKeyTypePtrOutput) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEncryptionKeyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowEncryptionKeyType] {
	return pulumix.Output[*FlowEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowEncryptionKeyTypePtrOutput) Elem() FlowEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowEncryptionKeyType) FlowEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowEncryptionKeyType
		return ret
	}).(FlowEncryptionKeyTypeOutput)
}

func (o FlowEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEncryptionKeyTypeInput is an input type that accepts FlowEncryptionKeyTypeArgs and FlowEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowEncryptionKeyTypeInput` via:
//
//	FlowEncryptionKeyTypeArgs{...}
type FlowEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowEncryptionKeyTypeOutput() FlowEncryptionKeyTypeOutput
	ToFlowEncryptionKeyTypeOutputWithContext(context.Context) FlowEncryptionKeyTypeOutput
}

var flowEncryptionKeyTypePtrType = reflect.TypeOf((**FlowEncryptionKeyType)(nil)).Elem()

type FlowEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput
	ToFlowEncryptionKeyTypePtrOutputWithContext(context.Context) FlowEncryptionKeyTypePtrOutput
}

type flowEncryptionKeyTypePtr string

func FlowEncryptionKeyTypePtr(v string) FlowEncryptionKeyTypePtrInput {
	return (*flowEncryptionKeyTypePtr)(&v)
}

func (*flowEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowEncryptionKeyTypePtrType
}

func (in *flowEncryptionKeyTypePtr) ToFlowEncryptionKeyTypePtrOutput() FlowEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowEncryptionKeyTypePtrOutput)
}

func (in *flowEncryptionKeyTypePtr) ToFlowEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEncryptionKeyTypePtrOutput)
}

func (in *flowEncryptionKeyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FlowEncryptionKeyType] {
	return pulumix.Output[*FlowEncryptionKeyType]{
		OutputState: in.ToFlowEncryptionKeyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowEntitlementEncryptionAlgorithm string

const (
	FlowEntitlementEncryptionAlgorithmAes128 = FlowEntitlementEncryptionAlgorithm("aes128")
	FlowEntitlementEncryptionAlgorithmAes192 = FlowEntitlementEncryptionAlgorithm("aes192")
	FlowEntitlementEncryptionAlgorithmAes256 = FlowEntitlementEncryptionAlgorithm("aes256")
)

func (FlowEntitlementEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmOutput() FlowEntitlementEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowEntitlementEncryptionAlgorithmOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEntitlementEncryptionAlgorithmOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return e.ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionAlgorithm) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return FlowEntitlementEncryptionAlgorithm(e).ToFlowEntitlementEncryptionAlgorithmOutputWithContext(ctx).ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEntitlementEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmOutput() FlowEntitlementEncryptionAlgorithmOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o.ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEncryptionAlgorithm) *FlowEntitlementEncryptionAlgorithm {
		return &v
	}).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToOutput(ctx context.Context) pulumix.Output[FlowEntitlementEncryptionAlgorithm] {
	return pulumix.Output[FlowEntitlementEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEntitlementEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowEntitlementEncryptionAlgorithm] {
	return pulumix.Output[*FlowEntitlementEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) Elem() FlowEntitlementEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryptionAlgorithm) FlowEntitlementEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEncryptionAlgorithm
		return ret
	}).(FlowEntitlementEncryptionAlgorithmOutput)
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEntitlementEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEntitlementEncryptionAlgorithmInput is an input type that accepts FlowEntitlementEncryptionAlgorithmArgs and FlowEntitlementEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionAlgorithmInput` via:
//
//	FlowEntitlementEncryptionAlgorithmArgs{...}
type FlowEntitlementEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionAlgorithmOutput() FlowEntitlementEncryptionAlgorithmOutput
	ToFlowEntitlementEncryptionAlgorithmOutputWithContext(context.Context) FlowEntitlementEncryptionAlgorithmOutput
}

var flowEntitlementEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowEntitlementEncryptionAlgorithm)(nil)).Elem()

type FlowEntitlementEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput
	ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput
}

type flowEntitlementEncryptionAlgorithmPtr string

func FlowEntitlementEncryptionAlgorithmPtr(v string) FlowEntitlementEncryptionAlgorithmPtrInput {
	return (*flowEntitlementEncryptionAlgorithmPtr)(&v)
}

func (*flowEntitlementEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowEntitlementEncryptionAlgorithmPtrType
}

func (in *flowEntitlementEncryptionAlgorithmPtr) ToFlowEntitlementEncryptionAlgorithmPtrOutput() FlowEntitlementEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

func (in *flowEntitlementEncryptionAlgorithmPtr) ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEntitlementEncryptionAlgorithmPtrOutput)
}

func (in *flowEntitlementEncryptionAlgorithmPtr) ToOutput(ctx context.Context) pulumix.Output[*FlowEntitlementEncryptionAlgorithm] {
	return pulumix.Output[*FlowEntitlementEncryptionAlgorithm]{
		OutputState: in.ToFlowEntitlementEncryptionAlgorithmPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowEntitlementEncryptionKeyType string

const (
	FlowEntitlementEncryptionKeyTypeSpeke     = FlowEntitlementEncryptionKeyType("speke")
	FlowEntitlementEncryptionKeyTypeStaticKey = FlowEntitlementEncryptionKeyType("static-key")
)

func (FlowEntitlementEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionKeyType)(nil)).Elem()
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypeOutput() FlowEntitlementEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowEntitlementEncryptionKeyTypeOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEntitlementEncryptionKeyTypeOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return e.ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionKeyType) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return FlowEntitlementEncryptionKeyType(e).ToFlowEntitlementEncryptionKeyTypeOutputWithContext(ctx).ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowEntitlementEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEntitlementEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEncryptionKeyType)(nil)).Elem()
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypeOutput() FlowEntitlementEncryptionKeyTypeOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypeOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEncryptionKeyType) *FlowEntitlementEncryptionKeyType {
		return &v
	}).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowEntitlementEncryptionKeyType] {
	return pulumix.Output[FlowEntitlementEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEntitlementEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEncryptionKeyType)(nil)).Elem()
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowEntitlementEncryptionKeyType] {
	return pulumix.Output[*FlowEntitlementEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) Elem() FlowEntitlementEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowEntitlementEncryptionKeyType) FlowEntitlementEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEncryptionKeyType
		return ret
	}).(FlowEntitlementEncryptionKeyTypeOutput)
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEntitlementEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEntitlementEncryptionKeyTypeInput is an input type that accepts FlowEntitlementEncryptionKeyTypeArgs and FlowEntitlementEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowEntitlementEncryptionKeyTypeInput` via:
//
//	FlowEntitlementEncryptionKeyTypeArgs{...}
type FlowEntitlementEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionKeyTypeOutput() FlowEntitlementEncryptionKeyTypeOutput
	ToFlowEntitlementEncryptionKeyTypeOutputWithContext(context.Context) FlowEntitlementEncryptionKeyTypeOutput
}

var flowEntitlementEncryptionKeyTypePtrType = reflect.TypeOf((**FlowEntitlementEncryptionKeyType)(nil)).Elem()

type FlowEntitlementEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput
	ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(context.Context) FlowEntitlementEncryptionKeyTypePtrOutput
}

type flowEntitlementEncryptionKeyTypePtr string

func FlowEntitlementEncryptionKeyTypePtr(v string) FlowEntitlementEncryptionKeyTypePtrInput {
	return (*flowEntitlementEncryptionKeyTypePtr)(&v)
}

func (*flowEntitlementEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowEntitlementEncryptionKeyTypePtrType
}

func (in *flowEntitlementEncryptionKeyTypePtr) ToFlowEntitlementEncryptionKeyTypePtrOutput() FlowEntitlementEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

func (in *flowEntitlementEncryptionKeyTypePtr) ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowEntitlementEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEntitlementEncryptionKeyTypePtrOutput)
}

func (in *flowEntitlementEncryptionKeyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FlowEntitlementEncryptionKeyType] {
	return pulumix.Output[*FlowEntitlementEncryptionKeyType]{
		OutputState: in.ToFlowEntitlementEncryptionKeyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// An indication of whether the entitlement is enabled.
type FlowEntitlementEntitlementStatus string

const (
	FlowEntitlementEntitlementStatusEnabled  = FlowEntitlementEntitlementStatus("ENABLED")
	FlowEntitlementEntitlementStatusDisabled = FlowEntitlementEntitlementStatus("DISABLED")
)

func (FlowEntitlementEntitlementStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEntitlementStatus)(nil)).Elem()
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusOutput() FlowEntitlementEntitlementStatusOutput {
	return pulumi.ToOutput(e).(FlowEntitlementEntitlementStatusOutput)
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowEntitlementEntitlementStatusOutput)
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return e.ToFlowEntitlementEntitlementStatusPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEntitlementStatus) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return FlowEntitlementEntitlementStatus(e).ToFlowEntitlementEntitlementStatusOutputWithContext(ctx).ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx)
}

func (e FlowEntitlementEntitlementStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEntitlementStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowEntitlementEntitlementStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowEntitlementEntitlementStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowEntitlementEntitlementStatusOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEntitlementStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowEntitlementEntitlementStatus)(nil)).Elem()
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusOutput() FlowEntitlementEntitlementStatusOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return o.ToFlowEntitlementEntitlementStatusPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusOutput) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowEntitlementEntitlementStatus) *FlowEntitlementEntitlementStatus {
		return &v
	}).(FlowEntitlementEntitlementStatusPtrOutput)
}

func (o FlowEntitlementEntitlementStatusOutput) ToOutput(ctx context.Context) pulumix.Output[FlowEntitlementEntitlementStatus] {
	return pulumix.Output[FlowEntitlementEntitlementStatus]{
		OutputState: o.OutputState,
	}
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEntitlementStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowEntitlementEntitlementStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowEntitlementEntitlementStatusPtrOutput struct{ *pulumi.OutputState }

func (FlowEntitlementEntitlementStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowEntitlementEntitlementStatus)(nil)).Elem()
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return o
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowEntitlementEntitlementStatus] {
	return pulumix.Output[*FlowEntitlementEntitlementStatus]{
		OutputState: o.OutputState,
	}
}

func (o FlowEntitlementEntitlementStatusPtrOutput) Elem() FlowEntitlementEntitlementStatusOutput {
	return o.ApplyT(func(v *FlowEntitlementEntitlementStatus) FlowEntitlementEntitlementStatus {
		if v != nil {
			return *v
		}
		var ret FlowEntitlementEntitlementStatus
		return ret
	}).(FlowEntitlementEntitlementStatusOutput)
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowEntitlementEntitlementStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowEntitlementEntitlementStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowEntitlementEntitlementStatusInput is an input type that accepts FlowEntitlementEntitlementStatusArgs and FlowEntitlementEntitlementStatusOutput values.
// You can construct a concrete instance of `FlowEntitlementEntitlementStatusInput` via:
//
//	FlowEntitlementEntitlementStatusArgs{...}
type FlowEntitlementEntitlementStatusInput interface {
	pulumi.Input

	ToFlowEntitlementEntitlementStatusOutput() FlowEntitlementEntitlementStatusOutput
	ToFlowEntitlementEntitlementStatusOutputWithContext(context.Context) FlowEntitlementEntitlementStatusOutput
}

var flowEntitlementEntitlementStatusPtrType = reflect.TypeOf((**FlowEntitlementEntitlementStatus)(nil)).Elem()

type FlowEntitlementEntitlementStatusPtrInput interface {
	pulumi.Input

	ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput
	ToFlowEntitlementEntitlementStatusPtrOutputWithContext(context.Context) FlowEntitlementEntitlementStatusPtrOutput
}

type flowEntitlementEntitlementStatusPtr string

func FlowEntitlementEntitlementStatusPtr(v string) FlowEntitlementEntitlementStatusPtrInput {
	return (*flowEntitlementEntitlementStatusPtr)(&v)
}

func (*flowEntitlementEntitlementStatusPtr) ElementType() reflect.Type {
	return flowEntitlementEntitlementStatusPtrType
}

func (in *flowEntitlementEntitlementStatusPtr) ToFlowEntitlementEntitlementStatusPtrOutput() FlowEntitlementEntitlementStatusPtrOutput {
	return pulumi.ToOutput(in).(FlowEntitlementEntitlementStatusPtrOutput)
}

func (in *flowEntitlementEntitlementStatusPtr) ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx context.Context) FlowEntitlementEntitlementStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowEntitlementEntitlementStatusPtrOutput)
}

func (in *flowEntitlementEntitlementStatusPtr) ToOutput(ctx context.Context) pulumix.Output[*FlowEntitlementEntitlementStatus] {
	return pulumix.Output[*FlowEntitlementEntitlementStatus]{
		OutputState: in.ToFlowEntitlementEntitlementStatusPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
type FlowFailoverConfigFailoverMode string

const (
	FlowFailoverConfigFailoverModeMerge    = FlowFailoverConfigFailoverMode("MERGE")
	FlowFailoverConfigFailoverModeFailover = FlowFailoverConfigFailoverMode("FAILOVER")
)

func (FlowFailoverConfigFailoverMode) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigFailoverMode)(nil)).Elem()
}

func (e FlowFailoverConfigFailoverMode) ToFlowFailoverConfigFailoverModeOutput() FlowFailoverConfigFailoverModeOutput {
	return pulumi.ToOutput(e).(FlowFailoverConfigFailoverModeOutput)
}

func (e FlowFailoverConfigFailoverMode) ToFlowFailoverConfigFailoverModeOutputWithContext(ctx context.Context) FlowFailoverConfigFailoverModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowFailoverConfigFailoverModeOutput)
}

func (e FlowFailoverConfigFailoverMode) ToFlowFailoverConfigFailoverModePtrOutput() FlowFailoverConfigFailoverModePtrOutput {
	return e.ToFlowFailoverConfigFailoverModePtrOutputWithContext(context.Background())
}

func (e FlowFailoverConfigFailoverMode) ToFlowFailoverConfigFailoverModePtrOutputWithContext(ctx context.Context) FlowFailoverConfigFailoverModePtrOutput {
	return FlowFailoverConfigFailoverMode(e).ToFlowFailoverConfigFailoverModeOutputWithContext(ctx).ToFlowFailoverConfigFailoverModePtrOutputWithContext(ctx)
}

func (e FlowFailoverConfigFailoverMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFailoverConfigFailoverMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFailoverConfigFailoverMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowFailoverConfigFailoverMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowFailoverConfigFailoverModeOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigFailoverModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigFailoverMode)(nil)).Elem()
}

func (o FlowFailoverConfigFailoverModeOutput) ToFlowFailoverConfigFailoverModeOutput() FlowFailoverConfigFailoverModeOutput {
	return o
}

func (o FlowFailoverConfigFailoverModeOutput) ToFlowFailoverConfigFailoverModeOutputWithContext(ctx context.Context) FlowFailoverConfigFailoverModeOutput {
	return o
}

func (o FlowFailoverConfigFailoverModeOutput) ToFlowFailoverConfigFailoverModePtrOutput() FlowFailoverConfigFailoverModePtrOutput {
	return o.ToFlowFailoverConfigFailoverModePtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigFailoverModeOutput) ToFlowFailoverConfigFailoverModePtrOutputWithContext(ctx context.Context) FlowFailoverConfigFailoverModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFailoverConfigFailoverMode) *FlowFailoverConfigFailoverMode {
		return &v
	}).(FlowFailoverConfigFailoverModePtrOutput)
}

func (o FlowFailoverConfigFailoverModeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowFailoverConfigFailoverMode] {
	return pulumix.Output[FlowFailoverConfigFailoverMode]{
		OutputState: o.OutputState,
	}
}

func (o FlowFailoverConfigFailoverModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowFailoverConfigFailoverModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFailoverConfigFailoverMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowFailoverConfigFailoverModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigFailoverModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFailoverConfigFailoverMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowFailoverConfigFailoverModePtrOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigFailoverModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfigFailoverMode)(nil)).Elem()
}

func (o FlowFailoverConfigFailoverModePtrOutput) ToFlowFailoverConfigFailoverModePtrOutput() FlowFailoverConfigFailoverModePtrOutput {
	return o
}

func (o FlowFailoverConfigFailoverModePtrOutput) ToFlowFailoverConfigFailoverModePtrOutputWithContext(ctx context.Context) FlowFailoverConfigFailoverModePtrOutput {
	return o
}

func (o FlowFailoverConfigFailoverModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowFailoverConfigFailoverMode] {
	return pulumix.Output[*FlowFailoverConfigFailoverMode]{
		OutputState: o.OutputState,
	}
}

func (o FlowFailoverConfigFailoverModePtrOutput) Elem() FlowFailoverConfigFailoverModeOutput {
	return o.ApplyT(func(v *FlowFailoverConfigFailoverMode) FlowFailoverConfigFailoverMode {
		if v != nil {
			return *v
		}
		var ret FlowFailoverConfigFailoverMode
		return ret
	}).(FlowFailoverConfigFailoverModeOutput)
}

func (o FlowFailoverConfigFailoverModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigFailoverModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowFailoverConfigFailoverMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowFailoverConfigFailoverModeInput is an input type that accepts FlowFailoverConfigFailoverModeArgs and FlowFailoverConfigFailoverModeOutput values.
// You can construct a concrete instance of `FlowFailoverConfigFailoverModeInput` via:
//
//	FlowFailoverConfigFailoverModeArgs{...}
type FlowFailoverConfigFailoverModeInput interface {
	pulumi.Input

	ToFlowFailoverConfigFailoverModeOutput() FlowFailoverConfigFailoverModeOutput
	ToFlowFailoverConfigFailoverModeOutputWithContext(context.Context) FlowFailoverConfigFailoverModeOutput
}

var flowFailoverConfigFailoverModePtrType = reflect.TypeOf((**FlowFailoverConfigFailoverMode)(nil)).Elem()

type FlowFailoverConfigFailoverModePtrInput interface {
	pulumi.Input

	ToFlowFailoverConfigFailoverModePtrOutput() FlowFailoverConfigFailoverModePtrOutput
	ToFlowFailoverConfigFailoverModePtrOutputWithContext(context.Context) FlowFailoverConfigFailoverModePtrOutput
}

type flowFailoverConfigFailoverModePtr string

func FlowFailoverConfigFailoverModePtr(v string) FlowFailoverConfigFailoverModePtrInput {
	return (*flowFailoverConfigFailoverModePtr)(&v)
}

func (*flowFailoverConfigFailoverModePtr) ElementType() reflect.Type {
	return flowFailoverConfigFailoverModePtrType
}

func (in *flowFailoverConfigFailoverModePtr) ToFlowFailoverConfigFailoverModePtrOutput() FlowFailoverConfigFailoverModePtrOutput {
	return pulumi.ToOutput(in).(FlowFailoverConfigFailoverModePtrOutput)
}

func (in *flowFailoverConfigFailoverModePtr) ToFlowFailoverConfigFailoverModePtrOutputWithContext(ctx context.Context) FlowFailoverConfigFailoverModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowFailoverConfigFailoverModePtrOutput)
}

func (in *flowFailoverConfigFailoverModePtr) ToOutput(ctx context.Context) pulumix.Output[*FlowFailoverConfigFailoverMode] {
	return pulumix.Output[*FlowFailoverConfigFailoverMode]{
		OutputState: in.ToFlowFailoverConfigFailoverModePtrOutputWithContext(ctx).OutputState,
	}
}

type FlowFailoverConfigState string

const (
	FlowFailoverConfigStateEnabled  = FlowFailoverConfigState("ENABLED")
	FlowFailoverConfigStateDisabled = FlowFailoverConfigState("DISABLED")
)

func (FlowFailoverConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigState)(nil)).Elem()
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStateOutput() FlowFailoverConfigStateOutput {
	return pulumi.ToOutput(e).(FlowFailoverConfigStateOutput)
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStateOutputWithContext(ctx context.Context) FlowFailoverConfigStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowFailoverConfigStateOutput)
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return e.ToFlowFailoverConfigStatePtrOutputWithContext(context.Background())
}

func (e FlowFailoverConfigState) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return FlowFailoverConfigState(e).ToFlowFailoverConfigStateOutputWithContext(ctx).ToFlowFailoverConfigStatePtrOutputWithContext(ctx)
}

func (e FlowFailoverConfigState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFailoverConfigState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowFailoverConfigState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowFailoverConfigState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowFailoverConfigStateOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowFailoverConfigState)(nil)).Elem()
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStateOutput() FlowFailoverConfigStateOutput {
	return o
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStateOutputWithContext(ctx context.Context) FlowFailoverConfigStateOutput {
	return o
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return o.ToFlowFailoverConfigStatePtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStateOutput) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowFailoverConfigState) *FlowFailoverConfigState {
		return &v
	}).(FlowFailoverConfigStatePtrOutput)
}

func (o FlowFailoverConfigStateOutput) ToOutput(ctx context.Context) pulumix.Output[FlowFailoverConfigState] {
	return pulumix.Output[FlowFailoverConfigState]{
		OutputState: o.OutputState,
	}
}

func (o FlowFailoverConfigStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFailoverConfigState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowFailoverConfigStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowFailoverConfigState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowFailoverConfigStatePtrOutput struct{ *pulumi.OutputState }

func (FlowFailoverConfigStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowFailoverConfigState)(nil)).Elem()
}

func (o FlowFailoverConfigStatePtrOutput) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return o
}

func (o FlowFailoverConfigStatePtrOutput) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return o
}

func (o FlowFailoverConfigStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowFailoverConfigState] {
	return pulumix.Output[*FlowFailoverConfigState]{
		OutputState: o.OutputState,
	}
}

func (o FlowFailoverConfigStatePtrOutput) Elem() FlowFailoverConfigStateOutput {
	return o.ApplyT(func(v *FlowFailoverConfigState) FlowFailoverConfigState {
		if v != nil {
			return *v
		}
		var ret FlowFailoverConfigState
		return ret
	}).(FlowFailoverConfigStateOutput)
}

func (o FlowFailoverConfigStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowFailoverConfigStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowFailoverConfigState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowFailoverConfigStateInput is an input type that accepts FlowFailoverConfigStateArgs and FlowFailoverConfigStateOutput values.
// You can construct a concrete instance of `FlowFailoverConfigStateInput` via:
//
//	FlowFailoverConfigStateArgs{...}
type FlowFailoverConfigStateInput interface {
	pulumi.Input

	ToFlowFailoverConfigStateOutput() FlowFailoverConfigStateOutput
	ToFlowFailoverConfigStateOutputWithContext(context.Context) FlowFailoverConfigStateOutput
}

var flowFailoverConfigStatePtrType = reflect.TypeOf((**FlowFailoverConfigState)(nil)).Elem()

type FlowFailoverConfigStatePtrInput interface {
	pulumi.Input

	ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput
	ToFlowFailoverConfigStatePtrOutputWithContext(context.Context) FlowFailoverConfigStatePtrOutput
}

type flowFailoverConfigStatePtr string

func FlowFailoverConfigStatePtr(v string) FlowFailoverConfigStatePtrInput {
	return (*flowFailoverConfigStatePtr)(&v)
}

func (*flowFailoverConfigStatePtr) ElementType() reflect.Type {
	return flowFailoverConfigStatePtrType
}

func (in *flowFailoverConfigStatePtr) ToFlowFailoverConfigStatePtrOutput() FlowFailoverConfigStatePtrOutput {
	return pulumi.ToOutput(in).(FlowFailoverConfigStatePtrOutput)
}

func (in *flowFailoverConfigStatePtr) ToFlowFailoverConfigStatePtrOutputWithContext(ctx context.Context) FlowFailoverConfigStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowFailoverConfigStatePtrOutput)
}

func (in *flowFailoverConfigStatePtr) ToOutput(ctx context.Context) pulumix.Output[*FlowFailoverConfigState] {
	return pulumix.Output[*FlowFailoverConfigState]{
		OutputState: in.ToFlowFailoverConfigStatePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowOutputEncryptionAlgorithm string

const (
	FlowOutputEncryptionAlgorithmAes128 = FlowOutputEncryptionAlgorithm("aes128")
	FlowOutputEncryptionAlgorithmAes192 = FlowOutputEncryptionAlgorithm("aes192")
	FlowOutputEncryptionAlgorithmAes256 = FlowOutputEncryptionAlgorithm("aes256")
)

func (FlowOutputEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmOutput() FlowOutputEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowOutputEncryptionAlgorithmOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowOutputEncryptionAlgorithmOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return e.ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionAlgorithm) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return FlowOutputEncryptionAlgorithm(e).ToFlowOutputEncryptionAlgorithmOutputWithContext(ctx).ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowOutputEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowOutputEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmOutput() FlowOutputEncryptionAlgorithmOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmOutput) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputEncryptionAlgorithm) *FlowOutputEncryptionAlgorithm {
		return &v
	}).(FlowOutputEncryptionAlgorithmPtrOutput)
}

func (o FlowOutputEncryptionAlgorithmOutput) ToOutput(ctx context.Context) pulumix.Output[FlowOutputEncryptionAlgorithm] {
	return pulumix.Output[FlowOutputEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowOutputEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowOutputEncryptionAlgorithm] {
	return pulumix.Output[*FlowOutputEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) Elem() FlowOutputEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowOutputEncryptionAlgorithm) FlowOutputEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowOutputEncryptionAlgorithm
		return ret
	}).(FlowOutputEncryptionAlgorithmOutput)
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowOutputEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowOutputEncryptionAlgorithmInput is an input type that accepts FlowOutputEncryptionAlgorithmArgs and FlowOutputEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionAlgorithmInput` via:
//
//	FlowOutputEncryptionAlgorithmArgs{...}
type FlowOutputEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowOutputEncryptionAlgorithmOutput() FlowOutputEncryptionAlgorithmOutput
	ToFlowOutputEncryptionAlgorithmOutputWithContext(context.Context) FlowOutputEncryptionAlgorithmOutput
}

var flowOutputEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowOutputEncryptionAlgorithm)(nil)).Elem()

type FlowOutputEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput
	ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowOutputEncryptionAlgorithmPtrOutput
}

type flowOutputEncryptionAlgorithmPtr string

func FlowOutputEncryptionAlgorithmPtr(v string) FlowOutputEncryptionAlgorithmPtrInput {
	return (*flowOutputEncryptionAlgorithmPtr)(&v)
}

func (*flowOutputEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowOutputEncryptionAlgorithmPtrType
}

func (in *flowOutputEncryptionAlgorithmPtr) ToFlowOutputEncryptionAlgorithmPtrOutput() FlowOutputEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowOutputEncryptionAlgorithmPtrOutput)
}

func (in *flowOutputEncryptionAlgorithmPtr) ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowOutputEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowOutputEncryptionAlgorithmPtrOutput)
}

func (in *flowOutputEncryptionAlgorithmPtr) ToOutput(ctx context.Context) pulumix.Output[*FlowOutputEncryptionAlgorithm] {
	return pulumix.Output[*FlowOutputEncryptionAlgorithm]{
		OutputState: in.ToFlowOutputEncryptionAlgorithmPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowOutputEncryptionKeyType string

const (
	FlowOutputEncryptionKeyTypeStaticKey   = FlowOutputEncryptionKeyType("static-key")
	FlowOutputEncryptionKeyTypeSrtPassword = FlowOutputEncryptionKeyType("srt-password")
)

func (FlowOutputEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionKeyType)(nil)).Elem()
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypeOutput() FlowOutputEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowOutputEncryptionKeyTypeOutput)
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowOutputEncryptionKeyTypeOutput)
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return e.ToFlowOutputEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionKeyType) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return FlowOutputEncryptionKeyType(e).ToFlowOutputEncryptionKeyTypeOutputWithContext(ctx).ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowOutputEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowOutputEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowOutputEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputEncryptionKeyType)(nil)).Elem()
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypeOutput() FlowOutputEncryptionKeyTypeOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypeOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return o.ToFlowOutputEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypeOutput) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputEncryptionKeyType) *FlowOutputEncryptionKeyType {
		return &v
	}).(FlowOutputEncryptionKeyTypePtrOutput)
}

func (o FlowOutputEncryptionKeyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowOutputEncryptionKeyType] {
	return pulumix.Output[FlowOutputEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowOutputEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowOutputEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputEncryptionKeyType)(nil)).Elem()
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowOutputEncryptionKeyType] {
	return pulumix.Output[*FlowOutputEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowOutputEncryptionKeyTypePtrOutput) Elem() FlowOutputEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowOutputEncryptionKeyType) FlowOutputEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowOutputEncryptionKeyType
		return ret
	}).(FlowOutputEncryptionKeyTypeOutput)
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowOutputEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowOutputEncryptionKeyTypeInput is an input type that accepts FlowOutputEncryptionKeyTypeArgs and FlowOutputEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowOutputEncryptionKeyTypeInput` via:
//
//	FlowOutputEncryptionKeyTypeArgs{...}
type FlowOutputEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowOutputEncryptionKeyTypeOutput() FlowOutputEncryptionKeyTypeOutput
	ToFlowOutputEncryptionKeyTypeOutputWithContext(context.Context) FlowOutputEncryptionKeyTypeOutput
}

var flowOutputEncryptionKeyTypePtrType = reflect.TypeOf((**FlowOutputEncryptionKeyType)(nil)).Elem()

type FlowOutputEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput
	ToFlowOutputEncryptionKeyTypePtrOutputWithContext(context.Context) FlowOutputEncryptionKeyTypePtrOutput
}

type flowOutputEncryptionKeyTypePtr string

func FlowOutputEncryptionKeyTypePtr(v string) FlowOutputEncryptionKeyTypePtrInput {
	return (*flowOutputEncryptionKeyTypePtr)(&v)
}

func (*flowOutputEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowOutputEncryptionKeyTypePtrType
}

func (in *flowOutputEncryptionKeyTypePtr) ToFlowOutputEncryptionKeyTypePtrOutput() FlowOutputEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowOutputEncryptionKeyTypePtrOutput)
}

func (in *flowOutputEncryptionKeyTypePtr) ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowOutputEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowOutputEncryptionKeyTypePtrOutput)
}

func (in *flowOutputEncryptionKeyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FlowOutputEncryptionKeyType] {
	return pulumix.Output[*FlowOutputEncryptionKeyType]{
		OutputState: in.ToFlowOutputEncryptionKeyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The protocol that is used by the source or output.
type FlowOutputProtocol string

const (
	FlowOutputProtocolZixiPush    = FlowOutputProtocol("zixi-push")
	FlowOutputProtocolRtpFec      = FlowOutputProtocol("rtp-fec")
	FlowOutputProtocolRtp         = FlowOutputProtocol("rtp")
	FlowOutputProtocolZixiPull    = FlowOutputProtocol("zixi-pull")
	FlowOutputProtocolRist        = FlowOutputProtocol("rist")
	FlowOutputProtocolFujitsuQos  = FlowOutputProtocol("fujitsu-qos")
	FlowOutputProtocolSrtListener = FlowOutputProtocol("srt-listener")
	FlowOutputProtocolSrtCaller   = FlowOutputProtocol("srt-caller")
)

func (FlowOutputProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputProtocol)(nil)).Elem()
}

func (e FlowOutputProtocol) ToFlowOutputProtocolOutput() FlowOutputProtocolOutput {
	return pulumi.ToOutput(e).(FlowOutputProtocolOutput)
}

func (e FlowOutputProtocol) ToFlowOutputProtocolOutputWithContext(ctx context.Context) FlowOutputProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowOutputProtocolOutput)
}

func (e FlowOutputProtocol) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return e.ToFlowOutputProtocolPtrOutputWithContext(context.Background())
}

func (e FlowOutputProtocol) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return FlowOutputProtocol(e).ToFlowOutputProtocolOutputWithContext(ctx).ToFlowOutputProtocolPtrOutputWithContext(ctx)
}

func (e FlowOutputProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowOutputProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowOutputProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowOutputProtocolOutput struct{ *pulumi.OutputState }

func (FlowOutputProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowOutputProtocol)(nil)).Elem()
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolOutput() FlowOutputProtocolOutput {
	return o
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolOutputWithContext(ctx context.Context) FlowOutputProtocolOutput {
	return o
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return o.ToFlowOutputProtocolPtrOutputWithContext(context.Background())
}

func (o FlowOutputProtocolOutput) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowOutputProtocol) *FlowOutputProtocol {
		return &v
	}).(FlowOutputProtocolPtrOutput)
}

func (o FlowOutputProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[FlowOutputProtocol] {
	return pulumix.Output[FlowOutputProtocol]{
		OutputState: o.OutputState,
	}
}

func (o FlowOutputProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowOutputProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowOutputProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowOutputProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowOutputProtocolPtrOutput struct{ *pulumi.OutputState }

func (FlowOutputProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowOutputProtocol)(nil)).Elem()
}

func (o FlowOutputProtocolPtrOutput) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return o
}

func (o FlowOutputProtocolPtrOutput) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return o
}

func (o FlowOutputProtocolPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowOutputProtocol] {
	return pulumix.Output[*FlowOutputProtocol]{
		OutputState: o.OutputState,
	}
}

func (o FlowOutputProtocolPtrOutput) Elem() FlowOutputProtocolOutput {
	return o.ApplyT(func(v *FlowOutputProtocol) FlowOutputProtocol {
		if v != nil {
			return *v
		}
		var ret FlowOutputProtocol
		return ret
	}).(FlowOutputProtocolOutput)
}

func (o FlowOutputProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowOutputProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowOutputProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowOutputProtocolInput is an input type that accepts FlowOutputProtocolArgs and FlowOutputProtocolOutput values.
// You can construct a concrete instance of `FlowOutputProtocolInput` via:
//
//	FlowOutputProtocolArgs{...}
type FlowOutputProtocolInput interface {
	pulumi.Input

	ToFlowOutputProtocolOutput() FlowOutputProtocolOutput
	ToFlowOutputProtocolOutputWithContext(context.Context) FlowOutputProtocolOutput
}

var flowOutputProtocolPtrType = reflect.TypeOf((**FlowOutputProtocol)(nil)).Elem()

type FlowOutputProtocolPtrInput interface {
	pulumi.Input

	ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput
	ToFlowOutputProtocolPtrOutputWithContext(context.Context) FlowOutputProtocolPtrOutput
}

type flowOutputProtocolPtr string

func FlowOutputProtocolPtr(v string) FlowOutputProtocolPtrInput {
	return (*flowOutputProtocolPtr)(&v)
}

func (*flowOutputProtocolPtr) ElementType() reflect.Type {
	return flowOutputProtocolPtrType
}

func (in *flowOutputProtocolPtr) ToFlowOutputProtocolPtrOutput() FlowOutputProtocolPtrOutput {
	return pulumi.ToOutput(in).(FlowOutputProtocolPtrOutput)
}

func (in *flowOutputProtocolPtr) ToFlowOutputProtocolPtrOutputWithContext(ctx context.Context) FlowOutputProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowOutputProtocolPtrOutput)
}

func (in *flowOutputProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*FlowOutputProtocol] {
	return pulumix.Output[*FlowOutputProtocol]{
		OutputState: in.ToFlowOutputProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
type FlowSourceEncryptionAlgorithm string

const (
	FlowSourceEncryptionAlgorithmAes128 = FlowSourceEncryptionAlgorithm("aes128")
	FlowSourceEncryptionAlgorithmAes192 = FlowSourceEncryptionAlgorithm("aes192")
	FlowSourceEncryptionAlgorithmAes256 = FlowSourceEncryptionAlgorithm("aes256")
)

func (FlowSourceEncryptionAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionAlgorithm)(nil)).Elem()
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmOutput() FlowSourceEncryptionAlgorithmOutput {
	return pulumi.ToOutput(e).(FlowSourceEncryptionAlgorithmOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSourceEncryptionAlgorithmOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return e.ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionAlgorithm) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return FlowSourceEncryptionAlgorithm(e).ToFlowSourceEncryptionAlgorithmOutputWithContext(ctx).ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx)
}

func (e FlowSourceEncryptionAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSourceEncryptionAlgorithmOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmOutput() FlowSourceEncryptionAlgorithmOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return o.ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmOutput) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceEncryptionAlgorithm) *FlowSourceEncryptionAlgorithm {
		return &v
	}).(FlowSourceEncryptionAlgorithmPtrOutput)
}

func (o FlowSourceEncryptionAlgorithmOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceEncryptionAlgorithm] {
	return pulumix.Output[FlowSourceEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSourceEncryptionAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryptionAlgorithm)(nil)).Elem()
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return o
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceEncryptionAlgorithm] {
	return pulumix.Output[*FlowSourceEncryptionAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) Elem() FlowSourceEncryptionAlgorithmOutput {
	return o.ApplyT(func(v *FlowSourceEncryptionAlgorithm) FlowSourceEncryptionAlgorithm {
		if v != nil {
			return *v
		}
		var ret FlowSourceEncryptionAlgorithm
		return ret
	}).(FlowSourceEncryptionAlgorithmOutput)
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSourceEncryptionAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSourceEncryptionAlgorithmInput is an input type that accepts FlowSourceEncryptionAlgorithmArgs and FlowSourceEncryptionAlgorithmOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionAlgorithmInput` via:
//
//	FlowSourceEncryptionAlgorithmArgs{...}
type FlowSourceEncryptionAlgorithmInput interface {
	pulumi.Input

	ToFlowSourceEncryptionAlgorithmOutput() FlowSourceEncryptionAlgorithmOutput
	ToFlowSourceEncryptionAlgorithmOutputWithContext(context.Context) FlowSourceEncryptionAlgorithmOutput
}

var flowSourceEncryptionAlgorithmPtrType = reflect.TypeOf((**FlowSourceEncryptionAlgorithm)(nil)).Elem()

type FlowSourceEncryptionAlgorithmPtrInput interface {
	pulumi.Input

	ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput
	ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(context.Context) FlowSourceEncryptionAlgorithmPtrOutput
}

type flowSourceEncryptionAlgorithmPtr string

func FlowSourceEncryptionAlgorithmPtr(v string) FlowSourceEncryptionAlgorithmPtrInput {
	return (*flowSourceEncryptionAlgorithmPtr)(&v)
}

func (*flowSourceEncryptionAlgorithmPtr) ElementType() reflect.Type {
	return flowSourceEncryptionAlgorithmPtrType
}

func (in *flowSourceEncryptionAlgorithmPtr) ToFlowSourceEncryptionAlgorithmPtrOutput() FlowSourceEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(FlowSourceEncryptionAlgorithmPtrOutput)
}

func (in *flowSourceEncryptionAlgorithmPtr) ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx context.Context) FlowSourceEncryptionAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSourceEncryptionAlgorithmPtrOutput)
}

func (in *flowSourceEncryptionAlgorithmPtr) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceEncryptionAlgorithm] {
	return pulumix.Output[*FlowSourceEncryptionAlgorithm]{
		OutputState: in.ToFlowSourceEncryptionAlgorithmPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
type FlowSourceEncryptionKeyType string

const (
	FlowSourceEncryptionKeyTypeSpeke       = FlowSourceEncryptionKeyType("speke")
	FlowSourceEncryptionKeyTypeStaticKey   = FlowSourceEncryptionKeyType("static-key")
	FlowSourceEncryptionKeyTypeSrtPassword = FlowSourceEncryptionKeyType("srt-password")
)

func (FlowSourceEncryptionKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionKeyType)(nil)).Elem()
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypeOutput() FlowSourceEncryptionKeyTypeOutput {
	return pulumi.ToOutput(e).(FlowSourceEncryptionKeyTypeOutput)
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSourceEncryptionKeyTypeOutput)
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return e.ToFlowSourceEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionKeyType) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return FlowSourceEncryptionKeyType(e).ToFlowSourceEncryptionKeyTypeOutputWithContext(ctx).ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx)
}

func (e FlowSourceEncryptionKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceEncryptionKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSourceEncryptionKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSourceEncryptionKeyTypeOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceEncryptionKeyType)(nil)).Elem()
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypeOutput() FlowSourceEncryptionKeyTypeOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypeOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypeOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return o.ToFlowSourceEncryptionKeyTypePtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypeOutput) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceEncryptionKeyType) *FlowSourceEncryptionKeyType {
		return &v
	}).(FlowSourceEncryptionKeyTypePtrOutput)
}

func (o FlowSourceEncryptionKeyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceEncryptionKeyType] {
	return pulumix.Output[FlowSourceEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceEncryptionKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSourceEncryptionKeyTypePtrOutput struct{ *pulumi.OutputState }

func (FlowSourceEncryptionKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceEncryptionKeyType)(nil)).Elem()
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return o
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceEncryptionKeyType] {
	return pulumix.Output[*FlowSourceEncryptionKeyType]{
		OutputState: o.OutputState,
	}
}

func (o FlowSourceEncryptionKeyTypePtrOutput) Elem() FlowSourceEncryptionKeyTypeOutput {
	return o.ApplyT(func(v *FlowSourceEncryptionKeyType) FlowSourceEncryptionKeyType {
		if v != nil {
			return *v
		}
		var ret FlowSourceEncryptionKeyType
		return ret
	}).(FlowSourceEncryptionKeyTypeOutput)
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceEncryptionKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSourceEncryptionKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSourceEncryptionKeyTypeInput is an input type that accepts FlowSourceEncryptionKeyTypeArgs and FlowSourceEncryptionKeyTypeOutput values.
// You can construct a concrete instance of `FlowSourceEncryptionKeyTypeInput` via:
//
//	FlowSourceEncryptionKeyTypeArgs{...}
type FlowSourceEncryptionKeyTypeInput interface {
	pulumi.Input

	ToFlowSourceEncryptionKeyTypeOutput() FlowSourceEncryptionKeyTypeOutput
	ToFlowSourceEncryptionKeyTypeOutputWithContext(context.Context) FlowSourceEncryptionKeyTypeOutput
}

var flowSourceEncryptionKeyTypePtrType = reflect.TypeOf((**FlowSourceEncryptionKeyType)(nil)).Elem()

type FlowSourceEncryptionKeyTypePtrInput interface {
	pulumi.Input

	ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput
	ToFlowSourceEncryptionKeyTypePtrOutputWithContext(context.Context) FlowSourceEncryptionKeyTypePtrOutput
}

type flowSourceEncryptionKeyTypePtr string

func FlowSourceEncryptionKeyTypePtr(v string) FlowSourceEncryptionKeyTypePtrInput {
	return (*flowSourceEncryptionKeyTypePtr)(&v)
}

func (*flowSourceEncryptionKeyTypePtr) ElementType() reflect.Type {
	return flowSourceEncryptionKeyTypePtrType
}

func (in *flowSourceEncryptionKeyTypePtr) ToFlowSourceEncryptionKeyTypePtrOutput() FlowSourceEncryptionKeyTypePtrOutput {
	return pulumi.ToOutput(in).(FlowSourceEncryptionKeyTypePtrOutput)
}

func (in *flowSourceEncryptionKeyTypePtr) ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx context.Context) FlowSourceEncryptionKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSourceEncryptionKeyTypePtrOutput)
}

func (in *flowSourceEncryptionKeyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceEncryptionKeyType] {
	return pulumix.Output[*FlowSourceEncryptionKeyType]{
		OutputState: in.ToFlowSourceEncryptionKeyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The protocol that is used by the source.
type FlowSourceProtocol string

const (
	FlowSourceProtocolZixiPush    = FlowSourceProtocol("zixi-push")
	FlowSourceProtocolRtpFec      = FlowSourceProtocol("rtp-fec")
	FlowSourceProtocolRtp         = FlowSourceProtocol("rtp")
	FlowSourceProtocolRist        = FlowSourceProtocol("rist")
	FlowSourceProtocolFujitsuQos  = FlowSourceProtocol("fujitsu-qos")
	FlowSourceProtocolSrtListener = FlowSourceProtocol("srt-listener")
	FlowSourceProtocolSrtCaller   = FlowSourceProtocol("srt-caller")
)

func (FlowSourceProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceProtocol)(nil)).Elem()
}

func (e FlowSourceProtocol) ToFlowSourceProtocolOutput() FlowSourceProtocolOutput {
	return pulumi.ToOutput(e).(FlowSourceProtocolOutput)
}

func (e FlowSourceProtocol) ToFlowSourceProtocolOutputWithContext(ctx context.Context) FlowSourceProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowSourceProtocolOutput)
}

func (e FlowSourceProtocol) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return e.ToFlowSourceProtocolPtrOutputWithContext(context.Background())
}

func (e FlowSourceProtocol) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return FlowSourceProtocol(e).ToFlowSourceProtocolOutputWithContext(ctx).ToFlowSourceProtocolPtrOutputWithContext(ctx)
}

func (e FlowSourceProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowSourceProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowSourceProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowSourceProtocolOutput struct{ *pulumi.OutputState }

func (FlowSourceProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowSourceProtocol)(nil)).Elem()
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolOutput() FlowSourceProtocolOutput {
	return o
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolOutputWithContext(ctx context.Context) FlowSourceProtocolOutput {
	return o
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return o.ToFlowSourceProtocolPtrOutputWithContext(context.Background())
}

func (o FlowSourceProtocolOutput) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowSourceProtocol) *FlowSourceProtocol {
		return &v
	}).(FlowSourceProtocolPtrOutput)
}

func (o FlowSourceProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[FlowSourceProtocol] {
	return pulumix.Output[FlowSourceProtocol]{
		OutputState: o.OutputState,
	}
}

func (o FlowSourceProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowSourceProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowSourceProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowSourceProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowSourceProtocolPtrOutput struct{ *pulumi.OutputState }

func (FlowSourceProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowSourceProtocol)(nil)).Elem()
}

func (o FlowSourceProtocolPtrOutput) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return o
}

func (o FlowSourceProtocolPtrOutput) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return o
}

func (o FlowSourceProtocolPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceProtocol] {
	return pulumix.Output[*FlowSourceProtocol]{
		OutputState: o.OutputState,
	}
}

func (o FlowSourceProtocolPtrOutput) Elem() FlowSourceProtocolOutput {
	return o.ApplyT(func(v *FlowSourceProtocol) FlowSourceProtocol {
		if v != nil {
			return *v
		}
		var ret FlowSourceProtocol
		return ret
	}).(FlowSourceProtocolOutput)
}

func (o FlowSourceProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowSourceProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowSourceProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowSourceProtocolInput is an input type that accepts FlowSourceProtocolArgs and FlowSourceProtocolOutput values.
// You can construct a concrete instance of `FlowSourceProtocolInput` via:
//
//	FlowSourceProtocolArgs{...}
type FlowSourceProtocolInput interface {
	pulumi.Input

	ToFlowSourceProtocolOutput() FlowSourceProtocolOutput
	ToFlowSourceProtocolOutputWithContext(context.Context) FlowSourceProtocolOutput
}

var flowSourceProtocolPtrType = reflect.TypeOf((**FlowSourceProtocol)(nil)).Elem()

type FlowSourceProtocolPtrInput interface {
	pulumi.Input

	ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput
	ToFlowSourceProtocolPtrOutputWithContext(context.Context) FlowSourceProtocolPtrOutput
}

type flowSourceProtocolPtr string

func FlowSourceProtocolPtr(v string) FlowSourceProtocolPtrInput {
	return (*flowSourceProtocolPtr)(&v)
}

func (*flowSourceProtocolPtr) ElementType() reflect.Type {
	return flowSourceProtocolPtrType
}

func (in *flowSourceProtocolPtr) ToFlowSourceProtocolPtrOutput() FlowSourceProtocolPtrOutput {
	return pulumi.ToOutput(in).(FlowSourceProtocolPtrOutput)
}

func (in *flowSourceProtocolPtr) ToFlowSourceProtocolPtrOutputWithContext(ctx context.Context) FlowSourceProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowSourceProtocolPtrOutput)
}

func (in *flowSourceProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*FlowSourceProtocol] {
	return pulumix.Output[*FlowSourceProtocol]{
		OutputState: in.ToFlowSourceProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// The current status of the gateway.
type GatewayStateEnum string

const (
	GatewayStateEnumCreating = GatewayStateEnum("CREATING")
	GatewayStateEnumActive   = GatewayStateEnum("ACTIVE")
	GatewayStateEnumUpdating = GatewayStateEnum("UPDATING")
	GatewayStateEnumError    = GatewayStateEnum("ERROR")
	GatewayStateEnumDeleting = GatewayStateEnum("DELETING")
	GatewayStateEnumDeleted  = GatewayStateEnum("DELETED")
)

type GatewayStateEnumOutput struct{ *pulumi.OutputState }

func (GatewayStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayStateEnum)(nil)).Elem()
}

func (o GatewayStateEnumOutput) ToGatewayStateEnumOutput() GatewayStateEnumOutput {
	return o
}

func (o GatewayStateEnumOutput) ToGatewayStateEnumOutputWithContext(ctx context.Context) GatewayStateEnumOutput {
	return o
}

func (o GatewayStateEnumOutput) ToGatewayStateEnumPtrOutput() GatewayStateEnumPtrOutput {
	return o.ToGatewayStateEnumPtrOutputWithContext(context.Background())
}

func (o GatewayStateEnumOutput) ToGatewayStateEnumPtrOutputWithContext(ctx context.Context) GatewayStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewayStateEnum) *GatewayStateEnum {
		return &v
	}).(GatewayStateEnumPtrOutput)
}

func (o GatewayStateEnumOutput) ToOutput(ctx context.Context) pulumix.Output[GatewayStateEnum] {
	return pulumix.Output[GatewayStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o GatewayStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GatewayStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GatewayStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GatewayStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GatewayStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GatewayStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GatewayStateEnumPtrOutput struct{ *pulumi.OutputState }

func (GatewayStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayStateEnum)(nil)).Elem()
}

func (o GatewayStateEnumPtrOutput) ToGatewayStateEnumPtrOutput() GatewayStateEnumPtrOutput {
	return o
}

func (o GatewayStateEnumPtrOutput) ToGatewayStateEnumPtrOutputWithContext(ctx context.Context) GatewayStateEnumPtrOutput {
	return o
}

func (o GatewayStateEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GatewayStateEnum] {
	return pulumix.Output[*GatewayStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o GatewayStateEnumPtrOutput) Elem() GatewayStateEnumOutput {
	return o.ApplyT(func(v *GatewayStateEnum) GatewayStateEnum {
		if v != nil {
			return *v
		}
		var ret GatewayStateEnum
		return ret
	}).(GatewayStateEnumOutput)
}

func (o GatewayStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GatewayStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GatewayStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFailoverConfigStateEnumInput)(nil)).Elem(), BridgeFailoverConfigStateEnum("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFailoverConfigStateEnumPtrInput)(nil)).Elem(), BridgeFailoverConfigStateEnum("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFailoverModeEnumInput)(nil)).Elem(), BridgeFailoverModeEnum("FAILOVER"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeFailoverModeEnumPtrInput)(nil)).Elem(), BridgeFailoverModeEnum("FAILOVER"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeOutputResourceBridgeNetworkOutputProtocolInput)(nil)).Elem(), BridgeOutputResourceBridgeNetworkOutputProtocol("rtp-fec"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeOutputResourceBridgeNetworkOutputProtocolPtrInput)(nil)).Elem(), BridgeOutputResourceBridgeNetworkOutputProtocol("rtp-fec"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeProtocolEnumInput)(nil)).Elem(), BridgeProtocolEnum("rtp-fec"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeProtocolEnumPtrInput)(nil)).Elem(), BridgeProtocolEnum("rtp-fec"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceProtocolEnumInput)(nil)).Elem(), BridgeSourceProtocolEnum("rtp-fec"))
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceProtocolEnumPtrInput)(nil)).Elem(), BridgeSourceProtocolEnum("rtp-fec"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionAlgorithmInput)(nil)).Elem(), FlowEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionAlgorithmPtrInput)(nil)).Elem(), FlowEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionKeyTypeInput)(nil)).Elem(), FlowEncryptionKeyType("speke"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEncryptionKeyTypePtrInput)(nil)).Elem(), FlowEncryptionKeyType("speke"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionAlgorithmInput)(nil)).Elem(), FlowEntitlementEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionAlgorithmPtrInput)(nil)).Elem(), FlowEntitlementEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionKeyTypeInput)(nil)).Elem(), FlowEntitlementEncryptionKeyType("speke"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEncryptionKeyTypePtrInput)(nil)).Elem(), FlowEntitlementEncryptionKeyType("speke"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEntitlementStatusInput)(nil)).Elem(), FlowEntitlementEntitlementStatus("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowEntitlementEntitlementStatusPtrInput)(nil)).Elem(), FlowEntitlementEntitlementStatus("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigFailoverModeInput)(nil)).Elem(), FlowFailoverConfigFailoverMode("MERGE"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigFailoverModePtrInput)(nil)).Elem(), FlowFailoverConfigFailoverMode("MERGE"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigStateInput)(nil)).Elem(), FlowFailoverConfigState("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowFailoverConfigStatePtrInput)(nil)).Elem(), FlowFailoverConfigState("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionAlgorithmInput)(nil)).Elem(), FlowOutputEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionAlgorithmPtrInput)(nil)).Elem(), FlowOutputEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionKeyTypeInput)(nil)).Elem(), FlowOutputEncryptionKeyType("static-key"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputEncryptionKeyTypePtrInput)(nil)).Elem(), FlowOutputEncryptionKeyType("static-key"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputProtocolInput)(nil)).Elem(), FlowOutputProtocol("zixi-push"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowOutputProtocolPtrInput)(nil)).Elem(), FlowOutputProtocol("zixi-push"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionAlgorithmInput)(nil)).Elem(), FlowSourceEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionAlgorithmPtrInput)(nil)).Elem(), FlowSourceEncryptionAlgorithm("aes128"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionKeyTypeInput)(nil)).Elem(), FlowSourceEncryptionKeyType("speke"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceEncryptionKeyTypePtrInput)(nil)).Elem(), FlowSourceEncryptionKeyType("speke"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceProtocolInput)(nil)).Elem(), FlowSourceProtocol("zixi-push"))
	pulumi.RegisterInputType(reflect.TypeOf((*FlowSourceProtocolPtrInput)(nil)).Elem(), FlowSourceProtocol("zixi-push"))
	pulumi.RegisterOutputType(BridgeFailoverConfigStateEnumOutput{})
	pulumi.RegisterOutputType(BridgeFailoverConfigStateEnumPtrOutput{})
	pulumi.RegisterOutputType(BridgeFailoverModeEnumOutput{})
	pulumi.RegisterOutputType(BridgeFailoverModeEnumPtrOutput{})
	pulumi.RegisterOutputType(BridgeOutputResourceBridgeNetworkOutputProtocolOutput{})
	pulumi.RegisterOutputType(BridgeOutputResourceBridgeNetworkOutputProtocolPtrOutput{})
	pulumi.RegisterOutputType(BridgeProtocolEnumOutput{})
	pulumi.RegisterOutputType(BridgeProtocolEnumPtrOutput{})
	pulumi.RegisterOutputType(BridgeSourceProtocolEnumOutput{})
	pulumi.RegisterOutputType(BridgeSourceProtocolEnumPtrOutput{})
	pulumi.RegisterOutputType(BridgeStateEnumOutput{})
	pulumi.RegisterOutputType(BridgeStateEnumPtrOutput{})
	pulumi.RegisterOutputType(FlowEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEntitlementStatusOutput{})
	pulumi.RegisterOutputType(FlowEntitlementEntitlementStatusPtrOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigFailoverModeOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigFailoverModePtrOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigStateOutput{})
	pulumi.RegisterOutputType(FlowFailoverConfigStatePtrOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowOutputEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowOutputProtocolOutput{})
	pulumi.RegisterOutputType(FlowOutputProtocolPtrOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionAlgorithmOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionKeyTypeOutput{})
	pulumi.RegisterOutputType(FlowSourceEncryptionKeyTypePtrOutput{})
	pulumi.RegisterOutputType(FlowSourceProtocolOutput{})
	pulumi.RegisterOutputType(FlowSourceProtocolPtrOutput{})
	pulumi.RegisterOutputType(GatewayStateEnumOutput{})
	pulumi.RegisterOutputType(GatewayStateEnumPtrOutput{})
}
