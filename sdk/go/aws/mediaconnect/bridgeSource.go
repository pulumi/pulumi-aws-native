// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource schema for AWS::MediaConnect::BridgeSource
type BridgeSource struct {
	pulumi.CustomResourceState

	// The Amazon Resource Number (ARN) of the bridge.
	BridgeArn  pulumi.StringOutput                   `pulumi:"bridgeArn"`
	FlowSource BridgeSourceBridgeFlowSourcePtrOutput `pulumi:"flowSource"`
	// The name of the source.
	Name          pulumi.StringOutput                      `pulumi:"name"`
	NetworkSource BridgeSourceBridgeNetworkSourcePtrOutput `pulumi:"networkSource"`
}

// NewBridgeSource registers a new resource with the given unique name, arguments, and options.
func NewBridgeSource(ctx *pulumi.Context,
	name string, args *BridgeSourceArgs, opts ...pulumi.ResourceOption) (*BridgeSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BridgeArn == nil {
		return nil, errors.New("invalid value for required argument 'BridgeArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"bridgeArn",
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BridgeSource
	err := ctx.RegisterResource("aws-native:mediaconnect:BridgeSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBridgeSource gets an existing BridgeSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBridgeSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BridgeSourceState, opts ...pulumi.ResourceOption) (*BridgeSource, error) {
	var resource BridgeSource
	err := ctx.ReadResource("aws-native:mediaconnect:BridgeSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BridgeSource resources.
type bridgeSourceState struct {
}

type BridgeSourceState struct {
}

func (BridgeSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgeSourceState)(nil)).Elem()
}

type bridgeSourceArgs struct {
	// The Amazon Resource Number (ARN) of the bridge.
	BridgeArn  string                        `pulumi:"bridgeArn"`
	FlowSource *BridgeSourceBridgeFlowSource `pulumi:"flowSource"`
	// The name of the source.
	Name          *string                          `pulumi:"name"`
	NetworkSource *BridgeSourceBridgeNetworkSource `pulumi:"networkSource"`
}

// The set of arguments for constructing a BridgeSource resource.
type BridgeSourceArgs struct {
	// The Amazon Resource Number (ARN) of the bridge.
	BridgeArn  pulumi.StringInput
	FlowSource BridgeSourceBridgeFlowSourcePtrInput
	// The name of the source.
	Name          pulumi.StringPtrInput
	NetworkSource BridgeSourceBridgeNetworkSourcePtrInput
}

func (BridgeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgeSourceArgs)(nil)).Elem()
}

type BridgeSourceInput interface {
	pulumi.Input

	ToBridgeSourceOutput() BridgeSourceOutput
	ToBridgeSourceOutputWithContext(ctx context.Context) BridgeSourceOutput
}

func (*BridgeSource) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSource)(nil)).Elem()
}

func (i *BridgeSource) ToBridgeSourceOutput() BridgeSourceOutput {
	return i.ToBridgeSourceOutputWithContext(context.Background())
}

func (i *BridgeSource) ToBridgeSourceOutputWithContext(ctx context.Context) BridgeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeSourceOutput)
}

func (i *BridgeSource) ToOutput(ctx context.Context) pulumix.Output[*BridgeSource] {
	return pulumix.Output[*BridgeSource]{
		OutputState: i.ToBridgeSourceOutputWithContext(ctx).OutputState,
	}
}

type BridgeSourceOutput struct{ *pulumi.OutputState }

func (BridgeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeSource)(nil)).Elem()
}

func (o BridgeSourceOutput) ToBridgeSourceOutput() BridgeSourceOutput {
	return o
}

func (o BridgeSourceOutput) ToBridgeSourceOutputWithContext(ctx context.Context) BridgeSourceOutput {
	return o
}

func (o BridgeSourceOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeSource] {
	return pulumix.Output[*BridgeSource]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Number (ARN) of the bridge.
func (o BridgeSourceOutput) BridgeArn() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgeSource) pulumi.StringOutput { return v.BridgeArn }).(pulumi.StringOutput)
}

func (o BridgeSourceOutput) FlowSource() BridgeSourceBridgeFlowSourcePtrOutput {
	return o.ApplyT(func(v *BridgeSource) BridgeSourceBridgeFlowSourcePtrOutput { return v.FlowSource }).(BridgeSourceBridgeFlowSourcePtrOutput)
}

// The name of the source.
func (o BridgeSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgeSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BridgeSourceOutput) NetworkSource() BridgeSourceBridgeNetworkSourcePtrOutput {
	return o.ApplyT(func(v *BridgeSource) BridgeSourceBridgeNetworkSourcePtrOutput { return v.NetworkSource }).(BridgeSourceBridgeNetworkSourcePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeSourceInput)(nil)).Elem(), &BridgeSource{})
	pulumi.RegisterOutputType(BridgeSourceOutput{})
}
