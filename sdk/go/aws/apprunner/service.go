// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::AppRunner::Service resource specifies an AppRunner Service.
type Service struct {
	pulumi.CustomResourceState

	// Autoscaling configuration ARN
	AutoScalingConfigurationArn pulumi.StringPtrOutput `pulumi:"autoScalingConfigurationArn"`
	// An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed key .
	EncryptionConfiguration ServiceEncryptionConfigurationPtrOutput `pulumi:"encryptionConfiguration"`
	// The settings for the health check that AWS App Runner performs to monitor the health of the App Runner service.
	HealthCheckConfiguration ServiceHealthCheckConfigurationPtrOutput `pulumi:"healthCheckConfiguration"`
	// The runtime configuration of instances (scaling units) of your service.
	InstanceConfiguration ServiceInstanceConfigurationPtrOutput `pulumi:"instanceConfiguration"`
	// Configuration settings related to network traffic of the web application that the App Runner service runs.
	NetworkConfiguration ServiceNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// The observability configuration of your service.
	ObservabilityConfiguration ServiceObservabilityConfigurationPtrOutput `pulumi:"observabilityConfiguration"`
	// The Amazon Resource Name (ARN) of the AppRunner Service.
	ServiceArn pulumi.StringOutput `pulumi:"serviceArn"`
	// The AppRunner Service Id
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The AppRunner Service Name.
	ServiceName pulumi.StringPtrOutput `pulumi:"serviceName"`
	// The Service Url of the AppRunner Service.
	ServiceUrl pulumi.StringOutput `pulumi:"serviceUrl"`
	// The source to deploy to the App Runner service. It can be a code or an image repository.
	SourceConfiguration ServiceSourceConfigurationOutput `pulumi:"sourceConfiguration"`
	// AppRunner Service status.
	Status pulumi.StringOutput `pulumi:"status"`
	// An optional list of metadata items that you can associate with the App Runner service resource. A tag is a key-value pair.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'SourceConfiguration'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"encryptionConfiguration",
		"serviceName",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("aws-native:apprunner:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("aws-native:apprunner:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Autoscaling configuration ARN
	AutoScalingConfigurationArn *string `pulumi:"autoScalingConfigurationArn"`
	// An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed key .
	EncryptionConfiguration *ServiceEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// The settings for the health check that AWS App Runner performs to monitor the health of the App Runner service.
	HealthCheckConfiguration *ServiceHealthCheckConfiguration `pulumi:"healthCheckConfiguration"`
	// The runtime configuration of instances (scaling units) of your service.
	InstanceConfiguration *ServiceInstanceConfiguration `pulumi:"instanceConfiguration"`
	// Configuration settings related to network traffic of the web application that the App Runner service runs.
	NetworkConfiguration *ServiceNetworkConfiguration `pulumi:"networkConfiguration"`
	// The observability configuration of your service.
	ObservabilityConfiguration *ServiceObservabilityConfiguration `pulumi:"observabilityConfiguration"`
	// The AppRunner Service Name.
	ServiceName *string `pulumi:"serviceName"`
	// The source to deploy to the App Runner service. It can be a code or an image repository.
	SourceConfiguration ServiceSourceConfiguration `pulumi:"sourceConfiguration"`
	// An optional list of metadata items that you can associate with the App Runner service resource. A tag is a key-value pair.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Autoscaling configuration ARN
	AutoScalingConfigurationArn pulumi.StringPtrInput
	// An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed key .
	EncryptionConfiguration ServiceEncryptionConfigurationPtrInput
	// The settings for the health check that AWS App Runner performs to monitor the health of the App Runner service.
	HealthCheckConfiguration ServiceHealthCheckConfigurationPtrInput
	// The runtime configuration of instances (scaling units) of your service.
	InstanceConfiguration ServiceInstanceConfigurationPtrInput
	// Configuration settings related to network traffic of the web application that the App Runner service runs.
	NetworkConfiguration ServiceNetworkConfigurationPtrInput
	// The observability configuration of your service.
	ObservabilityConfiguration ServiceObservabilityConfigurationPtrInput
	// The AppRunner Service Name.
	ServiceName pulumi.StringPtrInput
	// The source to deploy to the App Runner service. It can be a code or an image repository.
	SourceConfiguration ServiceSourceConfigurationInput
	// An optional list of metadata items that you can associate with the App Runner service resource. A tag is a key-value pair.
	Tags aws.CreateOnlyTagArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// Autoscaling configuration ARN
func (o ServiceOutput) AutoScalingConfigurationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.AutoScalingConfigurationArn }).(pulumi.StringPtrOutput)
}

// An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed key .
func (o ServiceOutput) EncryptionConfiguration() ServiceEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceEncryptionConfigurationPtrOutput { return v.EncryptionConfiguration }).(ServiceEncryptionConfigurationPtrOutput)
}

// The settings for the health check that AWS App Runner performs to monitor the health of the App Runner service.
func (o ServiceOutput) HealthCheckConfiguration() ServiceHealthCheckConfigurationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceHealthCheckConfigurationPtrOutput { return v.HealthCheckConfiguration }).(ServiceHealthCheckConfigurationPtrOutput)
}

// The runtime configuration of instances (scaling units) of your service.
func (o ServiceOutput) InstanceConfiguration() ServiceInstanceConfigurationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceInstanceConfigurationPtrOutput { return v.InstanceConfiguration }).(ServiceInstanceConfigurationPtrOutput)
}

// Configuration settings related to network traffic of the web application that the App Runner service runs.
func (o ServiceOutput) NetworkConfiguration() ServiceNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceNetworkConfigurationPtrOutput { return v.NetworkConfiguration }).(ServiceNetworkConfigurationPtrOutput)
}

// The observability configuration of your service.
func (o ServiceOutput) ObservabilityConfiguration() ServiceObservabilityConfigurationPtrOutput {
	return o.ApplyT(func(v *Service) ServiceObservabilityConfigurationPtrOutput { return v.ObservabilityConfiguration }).(ServiceObservabilityConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) of the AppRunner Service.
func (o ServiceOutput) ServiceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceArn }).(pulumi.StringOutput)
}

// The AppRunner Service Id
func (o ServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The AppRunner Service Name.
func (o ServiceOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// The Service Url of the AppRunner Service.
func (o ServiceOutput) ServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceUrl }).(pulumi.StringOutput)
}

// The source to deploy to the App Runner service. It can be a code or an image repository.
func (o ServiceOutput) SourceConfiguration() ServiceSourceConfigurationOutput {
	return o.ApplyT(func(v *Service) ServiceSourceConfigurationOutput { return v.SourceConfiguration }).(ServiceSourceConfigurationOutput)
}

// AppRunner Service status.
func (o ServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// An optional list of metadata items that you can associate with the App Runner service resource. A tag is a key-value pair.
func (o ServiceOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *Service) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterOutputType(ServiceOutput{})
}
