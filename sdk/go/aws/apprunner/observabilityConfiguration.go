// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apprunner

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::AppRunner::ObservabilityConfiguration resource  is an AWS App Runner resource type that specifies an App Runner observability configuration
type ObservabilityConfiguration struct {
	pulumi.CustomResourceState

	// It's set to true for the configuration with the highest Revision among all configurations that share the same Name. It's set to false otherwise.
	Latest pulumi.BoolOutput `pulumi:"latest"`
	// The Amazon Resource Name (ARN) of this ObservabilityConfiguration
	ObservabilityConfigurationArn pulumi.StringOutput `pulumi:"observabilityConfigurationArn"`
	// A name for the observability configuration. When you use it for the first time in an AWS Region, App Runner creates revision number 1 of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.
	ObservabilityConfigurationName pulumi.StringPtrOutput `pulumi:"observabilityConfigurationName"`
	// The revision of this observability configuration. It's unique among all the active configurations ('Status': 'ACTIVE') that share the same ObservabilityConfigurationName.
	ObservabilityConfigurationRevision pulumi.IntOutput `pulumi:"observabilityConfigurationRevision"`
	// A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.
	Tags ObservabilityConfigurationTagArrayOutput `pulumi:"tags"`
	// The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.
	TraceConfiguration ObservabilityConfigurationTraceConfigurationPtrOutput `pulumi:"traceConfiguration"`
}

// NewObservabilityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewObservabilityConfiguration(ctx *pulumi.Context,
	name string, args *ObservabilityConfigurationArgs, opts ...pulumi.ResourceOption) (*ObservabilityConfiguration, error) {
	if args == nil {
		args = &ObservabilityConfigurationArgs{}
	}

	var resource ObservabilityConfiguration
	err := ctx.RegisterResource("aws-native:apprunner:ObservabilityConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityConfiguration gets an existing ObservabilityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityConfigurationState, opts ...pulumi.ResourceOption) (*ObservabilityConfiguration, error) {
	var resource ObservabilityConfiguration
	err := ctx.ReadResource("aws-native:apprunner:ObservabilityConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityConfiguration resources.
type observabilityConfigurationState struct {
}

type ObservabilityConfigurationState struct {
}

func (ObservabilityConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityConfigurationState)(nil)).Elem()
}

type observabilityConfigurationArgs struct {
	// A name for the observability configuration. When you use it for the first time in an AWS Region, App Runner creates revision number 1 of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.
	ObservabilityConfigurationName *string `pulumi:"observabilityConfigurationName"`
	// A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.
	Tags []ObservabilityConfigurationTag `pulumi:"tags"`
	// The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.
	TraceConfiguration *ObservabilityConfigurationTraceConfiguration `pulumi:"traceConfiguration"`
}

// The set of arguments for constructing a ObservabilityConfiguration resource.
type ObservabilityConfigurationArgs struct {
	// A name for the observability configuration. When you use it for the first time in an AWS Region, App Runner creates revision number 1 of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.
	ObservabilityConfigurationName pulumi.StringPtrInput
	// A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.
	Tags ObservabilityConfigurationTagArrayInput
	// The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.
	TraceConfiguration ObservabilityConfigurationTraceConfigurationPtrInput
}

func (ObservabilityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityConfigurationArgs)(nil)).Elem()
}

type ObservabilityConfigurationInput interface {
	pulumi.Input

	ToObservabilityConfigurationOutput() ObservabilityConfigurationOutput
	ToObservabilityConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationOutput
}

func (*ObservabilityConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityConfiguration)(nil)).Elem()
}

func (i *ObservabilityConfiguration) ToObservabilityConfigurationOutput() ObservabilityConfigurationOutput {
	return i.ToObservabilityConfigurationOutputWithContext(context.Background())
}

func (i *ObservabilityConfiguration) ToObservabilityConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityConfigurationOutput)
}

type ObservabilityConfigurationOutput struct{ *pulumi.OutputState }

func (ObservabilityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityConfiguration)(nil)).Elem()
}

func (o ObservabilityConfigurationOutput) ToObservabilityConfigurationOutput() ObservabilityConfigurationOutput {
	return o
}

func (o ObservabilityConfigurationOutput) ToObservabilityConfigurationOutputWithContext(ctx context.Context) ObservabilityConfigurationOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityConfigurationInput)(nil)).Elem(), &ObservabilityConfiguration{})
	pulumi.RegisterOutputType(ObservabilityConfigurationOutput{})
}
