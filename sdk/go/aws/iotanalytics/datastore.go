// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotanalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IoTAnalytics::Datastore
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iotanalytics.NewDatastore(ctx, "datastore", &iotanalytics.DatastoreArgs{
//				DatastoreName: pulumi.String("SimpleDatastore"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iotanalytics.NewDatastore(ctx, "datastore", &iotanalytics.DatastoreArgs{
//				DatastoreName: pulumi.String("SimpleDatastore"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iotanalytics.NewDatastore(ctx, "datastore", &iotanalytics.DatastoreArgs{
//				DatastoreName: pulumi.String("ComplexDatastore"),
//				RetentionPeriod: &iotanalytics.DatastoreRetentionPeriodArgs{
//					Unlimited:    pulumi.Bool(false),
//					NumberOfDays: pulumi.Int(10),
//				},
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname1"),
//						Value: pulumi.String("value1"),
//					},
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname2"),
//						Value: pulumi.String("value2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iotanalytics.NewDatastore(ctx, "datastore", &iotanalytics.DatastoreArgs{
//				DatastoreName: pulumi.String("ComplexDatastore"),
//				RetentionPeriod: &iotanalytics.DatastoreRetentionPeriodArgs{
//					Unlimited:    pulumi.Bool(false),
//					NumberOfDays: pulumi.Int(10),
//				},
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname1"),
//						Value: pulumi.String("value1"),
//					},
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname2"),
//						Value: pulumi.String("value2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Datastore struct {
	pulumi.CustomResourceState

	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The name of the data store.
	DatastoreName pulumi.StringPtrOutput `pulumi:"datastoreName"`
	// Information about the partition dimensions in a data store.
	DatastorePartitions DatastorePartitionsPtrOutput `pulumi:"datastorePartitions"`
	// Where data store data is stored.
	DatastoreStorage DatastoreStoragePtrOutput `pulumi:"datastoreStorage"`
	// Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and [Parquet](https://docs.aws.amazon.com/https://parquet.apache.org/) .
	//
	// The default file format is JSON. You can specify only one format.
	//
	// You can't change the file format after you create the data store.
	FileFormatConfiguration DatastoreFileFormatConfigurationPtrOutput `pulumi:"fileFormatConfiguration"`
	// How long, in days, message data is kept for the data store. When `customerManagedS3` storage is selected, this parameter is ignored.
	RetentionPeriod DatastoreRetentionPeriodPtrOutput `pulumi:"retentionPeriod"`
	// Metadata which can be used to manage the data store.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDatastore registers a new resource with the given unique name, arguments, and options.
func NewDatastore(ctx *pulumi.Context,
	name string, args *DatastoreArgs, opts ...pulumi.ResourceOption) (*Datastore, error) {
	if args == nil {
		args = &DatastoreArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datastoreName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datastore
	err := ctx.RegisterResource("aws-native:iotanalytics:Datastore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastore gets an existing Datastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastoreState, opts ...pulumi.ResourceOption) (*Datastore, error) {
	var resource Datastore
	err := ctx.ReadResource("aws-native:iotanalytics:Datastore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datastore resources.
type datastoreState struct {
}

type DatastoreState struct {
}

func (DatastoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreState)(nil)).Elem()
}

type datastoreArgs struct {
	// The name of the data store.
	DatastoreName *string `pulumi:"datastoreName"`
	// Information about the partition dimensions in a data store.
	DatastorePartitions *DatastorePartitions `pulumi:"datastorePartitions"`
	// Where data store data is stored.
	DatastoreStorage *DatastoreStorage `pulumi:"datastoreStorage"`
	// Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and [Parquet](https://docs.aws.amazon.com/https://parquet.apache.org/) .
	//
	// The default file format is JSON. You can specify only one format.
	//
	// You can't change the file format after you create the data store.
	FileFormatConfiguration *DatastoreFileFormatConfiguration `pulumi:"fileFormatConfiguration"`
	// How long, in days, message data is kept for the data store. When `customerManagedS3` storage is selected, this parameter is ignored.
	RetentionPeriod *DatastoreRetentionPeriod `pulumi:"retentionPeriod"`
	// Metadata which can be used to manage the data store.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Datastore resource.
type DatastoreArgs struct {
	// The name of the data store.
	DatastoreName pulumi.StringPtrInput
	// Information about the partition dimensions in a data store.
	DatastorePartitions DatastorePartitionsPtrInput
	// Where data store data is stored.
	DatastoreStorage DatastoreStoragePtrInput
	// Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and [Parquet](https://docs.aws.amazon.com/https://parquet.apache.org/) .
	//
	// The default file format is JSON. You can specify only one format.
	//
	// You can't change the file format after you create the data store.
	FileFormatConfiguration DatastoreFileFormatConfigurationPtrInput
	// How long, in days, message data is kept for the data store. When `customerManagedS3` storage is selected, this parameter is ignored.
	RetentionPeriod DatastoreRetentionPeriodPtrInput
	// Metadata which can be used to manage the data store.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags aws.TagArrayInput
}

func (DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreArgs)(nil)).Elem()
}

type DatastoreInput interface {
	pulumi.Input

	ToDatastoreOutput() DatastoreOutput
	ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput
}

func (*Datastore) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (i *Datastore) ToDatastoreOutput() DatastoreOutput {
	return i.ToDatastoreOutputWithContext(context.Background())
}

func (i *Datastore) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreOutput)
}

type DatastoreOutput struct{ *pulumi.OutputState }

func (DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (o DatastoreOutput) ToDatastoreOutput() DatastoreOutput {
	return o
}

func (o DatastoreOutput) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return o
}

func (o DatastoreOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The name of the data store.
func (o DatastoreOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringPtrOutput { return v.DatastoreName }).(pulumi.StringPtrOutput)
}

// Information about the partition dimensions in a data store.
func (o DatastoreOutput) DatastorePartitions() DatastorePartitionsPtrOutput {
	return o.ApplyT(func(v *Datastore) DatastorePartitionsPtrOutput { return v.DatastorePartitions }).(DatastorePartitionsPtrOutput)
}

// Where data store data is stored.
func (o DatastoreOutput) DatastoreStorage() DatastoreStoragePtrOutput {
	return o.ApplyT(func(v *Datastore) DatastoreStoragePtrOutput { return v.DatastoreStorage }).(DatastoreStoragePtrOutput)
}

// Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and [Parquet](https://docs.aws.amazon.com/https://parquet.apache.org/) .
//
// The default file format is JSON. You can specify only one format.
//
// You can't change the file format after you create the data store.
func (o DatastoreOutput) FileFormatConfiguration() DatastoreFileFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *Datastore) DatastoreFileFormatConfigurationPtrOutput { return v.FileFormatConfiguration }).(DatastoreFileFormatConfigurationPtrOutput)
}

// How long, in days, message data is kept for the data store. When `customerManagedS3` storage is selected, this parameter is ignored.
func (o DatastoreOutput) RetentionPeriod() DatastoreRetentionPeriodPtrOutput {
	return o.ApplyT(func(v *Datastore) DatastoreRetentionPeriodPtrOutput { return v.RetentionPeriod }).(DatastoreRetentionPeriodPtrOutput)
}

// Metadata which can be used to manage the data store.
//
// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
func (o DatastoreOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Datastore) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreInput)(nil)).Elem(), &Datastore{})
	pulumi.RegisterOutputType(DatastoreOutput{})
}
