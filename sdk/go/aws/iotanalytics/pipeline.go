// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotanalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IoTAnalytics::Pipeline
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := iotanalytics.NewPipeline(ctx, "pipeline", &iotanalytics.PipelineArgs{
// PipelineName: pulumi.String("SimplePipeline"),
// PipelineActivities: iotanalytics.PipelineActivityArray{
// interface{}{
// Channel: &iotanalytics.PipelineChannelArgs{
// Name: pulumi.String("ChannelActivity"),
// ChannelName: pulumi.String("SimpleChannel"),
// Next: pulumi.String("DatastoreActivity"),
// },
// Datastore: &iotanalytics.PipelineDatastoreArgs{
// Name: pulumi.String("DatastoreActivity"),
// DatastoreName: pulumi.String("SimpleDatastore"),
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := iotanalytics.NewPipeline(ctx, "pipeline", &iotanalytics.PipelineArgs{
// PipelineName: pulumi.String("SimplePipeline"),
// PipelineActivities: iotanalytics.PipelineActivityArray{
// interface{}{
// Channel: &iotanalytics.PipelineChannelArgs{
// Name: pulumi.String("ChannelActivity"),
// ChannelName: pulumi.String("SimpleChannel"),
// Next: pulumi.String("DatastoreActivity"),
// },
// Datastore: &iotanalytics.PipelineDatastoreArgs{
// Name: pulumi.String("DatastoreActivity"),
// DatastoreName: pulumi.String("SimpleDatastore"),
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := iotanalytics.NewPipeline(ctx, "pipeline", &iotanalytics.PipelineArgs{
// PipelineName: pulumi.String("ComplexPipeline"),
// PipelineActivities: iotanalytics.PipelineActivityArray{
// interface{}{
// Channel: &iotanalytics.PipelineChannelArgs{
// Name: pulumi.String("ChannelActivity"),
// ChannelName: pulumi.String("Channel"),
// Next: pulumi.String("LambdaActivity"),
// },
// Lambda: &iotanalytics.PipelineLambdaArgs{
// Name: pulumi.String("LambdaActivity"),
// LambdaName: pulumi.String("Lambda"),
// BatchSize: pulumi.Int(1),
// Next: pulumi.String("AddAttributesActivity"),
// },
// AddAttributes: &iotanalytics.PipelineAddAttributesArgs{
// Name: pulumi.String("AddAttributesActivity"),
// Attributes: pulumi.StringMap{
// "key1": pulumi.String("attribute1"),
// "key2": pulumi.String("attribute2"),
// },
// Next: pulumi.String("RemoveAttributesActivity"),
// },
// RemoveAttributes: &iotanalytics.PipelineRemoveAttributesArgs{
// Name: pulumi.String("RemoveAttributesActivity"),
// Attributes: pulumi.StringArray{
// pulumi.String("attribute1"),
// pulumi.String("attribute2"),
// },
// Next: pulumi.String("SelectAttributesActivity"),
// },
// SelectAttributes: &iotanalytics.PipelineSelectAttributesArgs{
// Name: pulumi.String("SelectAttributesActivity"),
// Attributes: pulumi.StringArray{
// pulumi.String("attribute1"),
// pulumi.String("attribute2"),
// },
// Next: pulumi.String("FilterActivity"),
// },
// Filter: &iotanalytics.PipelineFilterArgs{
// Name: pulumi.String("FilterActivity"),
// Filter: pulumi.String("attribute1 > 40 AND attribute2 < 20"),
// Next: pulumi.String("MathActivity"),
// },
// Math: &iotanalytics.PipelineMathArgs{
// Name: pulumi.String("MathActivity"),
// Attribute: pulumi.String("attribute"),
// Math: pulumi.String("attribute - 10"),
// Next: pulumi.String("DeviceRegistryEnrichActivity"),
// },
// DeviceRegistryEnrich: &iotanalytics.PipelineDeviceRegistryEnrichArgs{
// Name: pulumi.String("DeviceRegistryEnrichActivity"),
// Attribute: pulumi.String("attribute"),
// ThingName: pulumi.String("thingName"),
// RoleArn: pulumi.String("arn:aws:iam::<your_Account_Id>:role/Enrich"),
// Next: pulumi.String("DeviceShadowEnrichActivity"),
// },
// DeviceShadowEnrich: &iotanalytics.PipelineDeviceShadowEnrichArgs{
// Name: pulumi.String("DeviceShadowEnrichActivity"),
// Attribute: pulumi.String("attribute"),
// ThingName: pulumi.String("thingName"),
// RoleArn: pulumi.String("arn:aws:iam::<your_Account_Id>:role/Enrich"),
// Next: pulumi.String("DatastoreActivity"),
// },
// Datastore: &iotanalytics.PipelineDatastoreArgs{
// Name: pulumi.String("DatastoreActivity"),
// DatastoreName: pulumi.String("Datastore"),
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iotanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := iotanalytics.NewPipeline(ctx, "pipeline", &iotanalytics.PipelineArgs{
// PipelineName: pulumi.String("ComplexPipeline"),
// PipelineActivities: iotanalytics.PipelineActivityArray{
// interface{}{
// Channel: &iotanalytics.PipelineChannelArgs{
// Name: pulumi.String("ChannelActivity"),
// ChannelName: pulumi.String("Channel"),
// Next: pulumi.String("LambdaActivity"),
// },
// Lambda: &iotanalytics.PipelineLambdaArgs{
// Name: pulumi.String("LambdaActivity"),
// LambdaName: pulumi.String("Lambda"),
// BatchSize: pulumi.Int(1),
// Next: pulumi.String("AddAttributesActivity"),
// },
// AddAttributes: &iotanalytics.PipelineAddAttributesArgs{
// Name: pulumi.String("AddAttributesActivity"),
// Attributes: pulumi.StringMap{
// "key1": pulumi.String("attribute1"),
// "key2": pulumi.String("attribute2"),
// },
// Next: pulumi.String("RemoveAttributesActivity"),
// },
// RemoveAttributes: &iotanalytics.PipelineRemoveAttributesArgs{
// Name: pulumi.String("RemoveAttributesActivity"),
// Attributes: pulumi.StringArray{
// pulumi.String("attribute1"),
// pulumi.String("attribute2"),
// },
// Next: pulumi.String("SelectAttributesActivity"),
// },
// SelectAttributes: &iotanalytics.PipelineSelectAttributesArgs{
// Name: pulumi.String("SelectAttributesActivity"),
// Attributes: pulumi.StringArray{
// pulumi.String("attribute1"),
// pulumi.String("attribute2"),
// },
// Next: pulumi.String("FilterActivity"),
// },
// Filter: &iotanalytics.PipelineFilterArgs{
// Name: pulumi.String("FilterActivity"),
// Filter: pulumi.String("attribute1 > 40 AND attribute2 < 20"),
// Next: pulumi.String("MathActivity"),
// },
// Math: &iotanalytics.PipelineMathArgs{
// Name: pulumi.String("MathActivity"),
// Attribute: pulumi.String("attribute"),
// Math: pulumi.String("attribute - 10"),
// Next: pulumi.String("DeviceRegistryEnrichActivity"),
// },
// DeviceRegistryEnrich: &iotanalytics.PipelineDeviceRegistryEnrichArgs{
// Name: pulumi.String("DeviceRegistryEnrichActivity"),
// Attribute: pulumi.String("attribute"),
// ThingName: pulumi.String("thingName"),
// RoleArn: pulumi.String("arn:aws:iam::<your_Account_Id>:role/Enrich"),
// Next: pulumi.String("DeviceShadowEnrichActivity"),
// },
// DeviceShadowEnrich: &iotanalytics.PipelineDeviceShadowEnrichArgs{
// Name: pulumi.String("DeviceShadowEnrichActivity"),
// Attribute: pulumi.String("attribute"),
// ThingName: pulumi.String("thingName"),
// RoleArn: pulumi.String("arn:aws:iam::<your_Account_Id>:role/Enrich"),
// Next: pulumi.String("DatastoreActivity"),
// },
// Datastore: &iotanalytics.PipelineDatastoreArgs{
// Name: pulumi.String("DatastoreActivity"),
// DatastoreName: pulumi.String("Datastore"),
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
//
// ```
type Pipeline struct {
	pulumi.CustomResourceState

	AwsId              pulumi.StringOutput         `pulumi:"awsId"`
	PipelineActivities PipelineActivityArrayOutput `pulumi:"pipelineActivities"`
	PipelineName       pulumi.StringPtrOutput      `pulumi:"pipelineName"`
	Tags               aws.TagArrayOutput          `pulumi:"tags"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineActivities == nil {
		return nil, errors.New("invalid value for required argument 'PipelineActivities'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"pipelineName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("aws-native:iotanalytics:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws-native:iotanalytics:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
}

type PipelineState struct {
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	PipelineActivities []PipelineActivity `pulumi:"pipelineActivities"`
	PipelineName       *string            `pulumi:"pipelineName"`
	Tags               []aws.Tag          `pulumi:"tags"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	PipelineActivities PipelineActivityArrayInput
	PipelineName       pulumi.StringPtrInput
	Tags               aws.TagArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

func (o PipelineOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

func (o PipelineOutput) PipelineActivities() PipelineActivityArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineActivityArrayOutput { return v.PipelineActivities }).(PipelineActivityArrayOutput)
}

func (o PipelineOutput) PipelineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.PipelineName }).(pulumi.StringPtrOutput)
}

func (o PipelineOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Pipeline) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterOutputType(PipelineOutput{})
}
