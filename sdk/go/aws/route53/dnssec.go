// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource used to control (enable/disable) DNSSEC in a specific hosted zone.
type Dnssec struct {
	pulumi.CustomResourceState

	// The unique string (ID) used to identify a hosted zone.
	HostedZoneId pulumi.StringOutput `pulumi:"hostedZoneId"`
}

// NewDnssec registers a new resource with the given unique name, arguments, and options.
func NewDnssec(ctx *pulumi.Context,
	name string, args *DnssecArgs, opts ...pulumi.ResourceOption) (*Dnssec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostedZoneId == nil {
		return nil, errors.New("invalid value for required argument 'HostedZoneId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"hostedZoneId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dnssec
	err := ctx.RegisterResource("aws-native:route53:Dnssec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnssec gets an existing Dnssec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnssec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnssecState, opts ...pulumi.ResourceOption) (*Dnssec, error) {
	var resource Dnssec
	err := ctx.ReadResource("aws-native:route53:Dnssec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dnssec resources.
type dnssecState struct {
}

type DnssecState struct {
}

func (DnssecState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnssecState)(nil)).Elem()
}

type dnssecArgs struct {
	// The unique string (ID) used to identify a hosted zone.
	HostedZoneId string `pulumi:"hostedZoneId"`
}

// The set of arguments for constructing a Dnssec resource.
type DnssecArgs struct {
	// The unique string (ID) used to identify a hosted zone.
	HostedZoneId pulumi.StringInput
}

func (DnssecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnssecArgs)(nil)).Elem()
}

type DnssecInput interface {
	pulumi.Input

	ToDnssecOutput() DnssecOutput
	ToDnssecOutputWithContext(ctx context.Context) DnssecOutput
}

func (*Dnssec) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnssec)(nil)).Elem()
}

func (i *Dnssec) ToDnssecOutput() DnssecOutput {
	return i.ToDnssecOutputWithContext(context.Background())
}

func (i *Dnssec) ToDnssecOutputWithContext(ctx context.Context) DnssecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnssecOutput)
}

func (i *Dnssec) ToOutput(ctx context.Context) pulumix.Output[*Dnssec] {
	return pulumix.Output[*Dnssec]{
		OutputState: i.ToDnssecOutputWithContext(ctx).OutputState,
	}
}

type DnssecOutput struct{ *pulumi.OutputState }

func (DnssecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnssec)(nil)).Elem()
}

func (o DnssecOutput) ToDnssecOutput() DnssecOutput {
	return o
}

func (o DnssecOutput) ToDnssecOutputWithContext(ctx context.Context) DnssecOutput {
	return o
}

func (o DnssecOutput) ToOutput(ctx context.Context) pulumix.Output[*Dnssec] {
	return pulumix.Output[*Dnssec]{
		OutputState: o.OutputState,
	}
}

// The unique string (ID) used to identify a hosted zone.
func (o DnssecOutput) HostedZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnssec) pulumi.StringOutput { return v.HostedZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnssecInput)(nil)).Elem(), &Dnssec{})
	pulumi.RegisterOutputType(DnssecOutput{})
}
