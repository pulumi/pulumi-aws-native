// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Route53::HostedZone.
type HostedZone struct {
	pulumi.CustomResourceState

	HostedZoneConfig HostedZoneHostedZoneConfigPtrOutput `pulumi:"hostedZoneConfig"`
	// Adds, edits, or deletes tags for a health check or a hosted zone.
	//
	// For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
	HostedZoneTags HostedZoneHostedZoneTagArrayOutput `pulumi:"hostedZoneTags"`
	// The name of the domain. Specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical.
	//
	// If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of NameServers that are returned by the Fn::GetAtt intrinsic function.
	Name               pulumi.StringOutput                   `pulumi:"name"`
	NameServers        pulumi.StringArrayOutput              `pulumi:"nameServers"`
	QueryLoggingConfig HostedZoneQueryLoggingConfigPtrOutput `pulumi:"queryLoggingConfig"`
	// A complex type that contains information about the VPCs that are associated with the specified hosted zone.
	VPCs HostedZoneVPCArrayOutput `pulumi:"vPCs"`
}

// NewHostedZone registers a new resource with the given unique name, arguments, and options.
func NewHostedZone(ctx *pulumi.Context,
	name string, args *HostedZoneArgs, opts ...pulumi.ResourceOption) (*HostedZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource HostedZone
	err := ctx.RegisterResource("aws-native:route53:HostedZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostedZone gets an existing HostedZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostedZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostedZoneState, opts ...pulumi.ResourceOption) (*HostedZone, error) {
	var resource HostedZone
	err := ctx.ReadResource("aws-native:route53:HostedZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostedZone resources.
type hostedZoneState struct {
}

type HostedZoneState struct {
}

func (HostedZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedZoneState)(nil)).Elem()
}

type hostedZoneArgs struct {
	HostedZoneConfig *HostedZoneHostedZoneConfig `pulumi:"hostedZoneConfig"`
	// Adds, edits, or deletes tags for a health check or a hosted zone.
	//
	// For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
	HostedZoneTags []HostedZoneHostedZoneTag `pulumi:"hostedZoneTags"`
	// The name of the domain. Specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical.
	//
	// If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of NameServers that are returned by the Fn::GetAtt intrinsic function.
	Name               string                        `pulumi:"name"`
	QueryLoggingConfig *HostedZoneQueryLoggingConfig `pulumi:"queryLoggingConfig"`
	// A complex type that contains information about the VPCs that are associated with the specified hosted zone.
	VPCs []HostedZoneVPC `pulumi:"vPCs"`
}

// The set of arguments for constructing a HostedZone resource.
type HostedZoneArgs struct {
	HostedZoneConfig HostedZoneHostedZoneConfigPtrInput
	// Adds, edits, or deletes tags for a health check or a hosted zone.
	//
	// For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
	HostedZoneTags HostedZoneHostedZoneTagArrayInput
	// The name of the domain. Specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical.
	//
	// If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of NameServers that are returned by the Fn::GetAtt intrinsic function.
	Name               pulumi.StringInput
	QueryLoggingConfig HostedZoneQueryLoggingConfigPtrInput
	// A complex type that contains information about the VPCs that are associated with the specified hosted zone.
	VPCs HostedZoneVPCArrayInput
}

func (HostedZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostedZoneArgs)(nil)).Elem()
}

type HostedZoneInput interface {
	pulumi.Input

	ToHostedZoneOutput() HostedZoneOutput
	ToHostedZoneOutputWithContext(ctx context.Context) HostedZoneOutput
}

func (*HostedZone) ElementType() reflect.Type {
	return reflect.TypeOf((*HostedZone)(nil))
}

func (i *HostedZone) ToHostedZoneOutput() HostedZoneOutput {
	return i.ToHostedZoneOutputWithContext(context.Background())
}

func (i *HostedZone) ToHostedZoneOutputWithContext(ctx context.Context) HostedZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostedZoneOutput)
}

type HostedZoneOutput struct{ *pulumi.OutputState }

func (HostedZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostedZone)(nil))
}

func (o HostedZoneOutput) ToHostedZoneOutput() HostedZoneOutput {
	return o
}

func (o HostedZoneOutput) ToHostedZoneOutputWithContext(ctx context.Context) HostedZoneOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(HostedZoneOutput{})
}
