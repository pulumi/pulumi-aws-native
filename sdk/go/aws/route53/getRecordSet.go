// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Route53::RecordSet.
func LookupRecordSet(ctx *pulumi.Context, args *LookupRecordSetArgs, opts ...pulumi.InvokeOption) (*LookupRecordSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRecordSetResult
	err := ctx.Invoke("aws-native:route53:getRecordSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRecordSetArgs struct {
	// The ID of the hosted zone that you want to create records in.
	HostedZoneId string `pulumi:"hostedZoneId"`
	// The name of the record that you want to create, update, or delete.
	Name string `pulumi:"name"`
	// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
	SetIdentifier string `pulumi:"setIdentifier"`
	// The DNS record type.
	Type string `pulumi:"type"`
}

type LookupRecordSetResult struct {
	// Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
	AliasTarget *RecordSetAliasTarget `pulumi:"aliasTarget"`
	// The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
	CidrRoutingConfig *RecordSetCidrRoutingConfig `pulumi:"cidrRoutingConfig"`
	// To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
	Failover *RecordSetFailover `pulumi:"failover"`
	// A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
	GeoLocation *RecordSetGeoLocation `pulumi:"geoLocation"`
	// If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
	HealthCheckId *string `pulumi:"healthCheckId"`
	// To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
	MultiValueAnswer *bool `pulumi:"multiValueAnswer"`
	// The name of the record that you want to create, update, or delete.
	Name *string `pulumi:"name"`
	// The Amazon EC2 Region where you created the resource that this resource record set refers to.
	Region *string `pulumi:"region"`
	// One or more values that correspond with the value that you specified for the Type property.
	ResourceRecords []string `pulumi:"resourceRecords"`
	// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
	SetIdentifier *string `pulumi:"setIdentifier"`
	// The resource record cache time to live (TTL), in seconds.
	Ttl *string `pulumi:"ttl"`
	// The DNS record type.
	Type *string `pulumi:"type"`
	// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
	Weight *int `pulumi:"weight"`
}

func LookupRecordSetOutput(ctx *pulumi.Context, args LookupRecordSetOutputArgs, opts ...pulumi.InvokeOption) LookupRecordSetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRecordSetResultOutput, error) {
			args := v.(LookupRecordSetArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRecordSetResult
			secret, err := ctx.InvokePackageRaw("aws-native:route53:getRecordSet", args, &rv, "", opts...)
			if err != nil {
				return LookupRecordSetResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRecordSetResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRecordSetResultOutput), nil
			}
			return output, nil
		}).(LookupRecordSetResultOutput)
}

type LookupRecordSetOutputArgs struct {
	// The ID of the hosted zone that you want to create records in.
	HostedZoneId pulumi.StringInput `pulumi:"hostedZoneId"`
	// The name of the record that you want to create, update, or delete.
	Name pulumi.StringInput `pulumi:"name"`
	// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
	SetIdentifier pulumi.StringInput `pulumi:"setIdentifier"`
	// The DNS record type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupRecordSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRecordSetArgs)(nil)).Elem()
}

type LookupRecordSetResultOutput struct{ *pulumi.OutputState }

func (LookupRecordSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRecordSetResult)(nil)).Elem()
}

func (o LookupRecordSetResultOutput) ToLookupRecordSetResultOutput() LookupRecordSetResultOutput {
	return o
}

func (o LookupRecordSetResultOutput) ToLookupRecordSetResultOutputWithContext(ctx context.Context) LookupRecordSetResultOutput {
	return o
}

// Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
func (o LookupRecordSetResultOutput) AliasTarget() RecordSetAliasTargetPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *RecordSetAliasTarget { return v.AliasTarget }).(RecordSetAliasTargetPtrOutput)
}

// The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
func (o LookupRecordSetResultOutput) CidrRoutingConfig() RecordSetCidrRoutingConfigPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *RecordSetCidrRoutingConfig { return v.CidrRoutingConfig }).(RecordSetCidrRoutingConfigPtrOutput)
}

// To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
func (o LookupRecordSetResultOutput) Failover() RecordSetFailoverPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *RecordSetFailover { return v.Failover }).(RecordSetFailoverPtrOutput)
}

// A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
func (o LookupRecordSetResultOutput) GeoLocation() RecordSetGeoLocationPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *RecordSetGeoLocation { return v.GeoLocation }).(RecordSetGeoLocationPtrOutput)
}

// If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
func (o LookupRecordSetResultOutput) HealthCheckId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *string { return v.HealthCheckId }).(pulumi.StringPtrOutput)
}

// To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
func (o LookupRecordSetResultOutput) MultiValueAnswer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *bool { return v.MultiValueAnswer }).(pulumi.BoolPtrOutput)
}

// The name of the record that you want to create, update, or delete.
func (o LookupRecordSetResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Amazon EC2 Region where you created the resource that this resource record set refers to.
func (o LookupRecordSetResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// One or more values that correspond with the value that you specified for the Type property.
func (o LookupRecordSetResultOutput) ResourceRecords() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRecordSetResult) []string { return v.ResourceRecords }).(pulumi.StringArrayOutput)
}

// An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
func (o LookupRecordSetResultOutput) SetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *string { return v.SetIdentifier }).(pulumi.StringPtrOutput)
}

// The resource record cache time to live (TTL), in seconds.
func (o LookupRecordSetResultOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

// The DNS record type.
func (o LookupRecordSetResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
func (o LookupRecordSetResultOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupRecordSetResult) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRecordSetResultOutput{})
}
