// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Route53::CidrCollection.
type CidrCollection struct {
	pulumi.CustomResourceState

	// The Amazon resource name (ARN) to uniquely identify the AWS resource.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A complex type that contains information about the list of CIDR locations.
	Locations CidrCollectionLocationArrayOutput `pulumi:"locations"`
	// A unique name for the CIDR collection.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCidrCollection registers a new resource with the given unique name, arguments, and options.
func NewCidrCollection(ctx *pulumi.Context,
	name string, args *CidrCollectionArgs, opts ...pulumi.ResourceOption) (*CidrCollection, error) {
	if args == nil {
		args = &CidrCollectionArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CidrCollection
	err := ctx.RegisterResource("aws-native:route53:CidrCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCidrCollection gets an existing CidrCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCidrCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CidrCollectionState, opts ...pulumi.ResourceOption) (*CidrCollection, error) {
	var resource CidrCollection
	err := ctx.ReadResource("aws-native:route53:CidrCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CidrCollection resources.
type cidrCollectionState struct {
}

type CidrCollectionState struct {
}

func (CidrCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrCollectionState)(nil)).Elem()
}

type cidrCollectionArgs struct {
	// A complex type that contains information about the list of CIDR locations.
	Locations []CidrCollectionLocation `pulumi:"locations"`
	// A unique name for the CIDR collection.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CidrCollection resource.
type CidrCollectionArgs struct {
	// A complex type that contains information about the list of CIDR locations.
	Locations CidrCollectionLocationArrayInput
	// A unique name for the CIDR collection.
	Name pulumi.StringPtrInput
}

func (CidrCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrCollectionArgs)(nil)).Elem()
}

type CidrCollectionInput interface {
	pulumi.Input

	ToCidrCollectionOutput() CidrCollectionOutput
	ToCidrCollectionOutputWithContext(ctx context.Context) CidrCollectionOutput
}

func (*CidrCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**CidrCollection)(nil)).Elem()
}

func (i *CidrCollection) ToCidrCollectionOutput() CidrCollectionOutput {
	return i.ToCidrCollectionOutputWithContext(context.Background())
}

func (i *CidrCollection) ToCidrCollectionOutputWithContext(ctx context.Context) CidrCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrCollectionOutput)
}

type CidrCollectionOutput struct{ *pulumi.OutputState }

func (CidrCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CidrCollection)(nil)).Elem()
}

func (o CidrCollectionOutput) ToCidrCollectionOutput() CidrCollectionOutput {
	return o
}

func (o CidrCollectionOutput) ToCidrCollectionOutputWithContext(ctx context.Context) CidrCollectionOutput {
	return o
}

// The Amazon resource name (ARN) to uniquely identify the AWS resource.
func (o CidrCollectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CidrCollection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A complex type that contains information about the list of CIDR locations.
func (o CidrCollectionOutput) Locations() CidrCollectionLocationArrayOutput {
	return o.ApplyT(func(v *CidrCollection) CidrCollectionLocationArrayOutput { return v.Locations }).(CidrCollectionLocationArrayOutput)
}

// A unique name for the CIDR collection.
func (o CidrCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CidrCollection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CidrCollectionInput)(nil)).Elem(), &CidrCollection{})
	pulumi.RegisterOutputType(CidrCollectionOutput{})
}
