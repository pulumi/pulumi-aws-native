// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53resolver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// A key-value pair to associate with a resource.
type FirewallDomainListTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupAssociationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Firewall Rule associating the Rule Group to a Domain List
type FirewallRuleGroupFirewallRule struct {
	// Rule Action
	Action FirewallRuleGroupFirewallRuleAction `pulumi:"action"`
	// BlockOverrideDnsType
	BlockOverrideDnsType *FirewallRuleGroupFirewallRuleBlockOverrideDnsType `pulumi:"blockOverrideDnsType"`
	// BlockOverrideDomain
	BlockOverrideDomain *string `pulumi:"blockOverrideDomain"`
	// BlockOverrideTtl
	BlockOverrideTtl *int `pulumi:"blockOverrideTtl"`
	// BlockResponse
	BlockResponse *FirewallRuleGroupFirewallRuleBlockResponse `pulumi:"blockResponse"`
	// FirewallDomainRedirectionAction
	ConfidenceThreshold *FirewallRuleGroupFirewallRuleConfidenceThreshold `pulumi:"confidenceThreshold"`
	// FirewallDomainRedirectionAction
	DnsThreatProtection *FirewallRuleGroupFirewallRuleDnsThreatProtection `pulumi:"dnsThreatProtection"`
	// ResourceId
	FirewallDomainListId *string `pulumi:"firewallDomainListId"`
	// FirewallDomainRedirectionAction
	FirewallDomainRedirectionAction *FirewallRuleGroupFirewallRuleFirewallDomainRedirectionAction `pulumi:"firewallDomainRedirectionAction"`
	// ResourceId
	FirewallThreatProtectionId *string `pulumi:"firewallThreatProtectionId"`
	// Rule Priority
	Priority int `pulumi:"priority"`
	// Qtype
	Qtype *string `pulumi:"qtype"`
}

// FirewallRuleGroupFirewallRuleInput is an input type that accepts FirewallRuleGroupFirewallRuleArgs and FirewallRuleGroupFirewallRuleOutput values.
// You can construct a concrete instance of `FirewallRuleGroupFirewallRuleInput` via:
//
//	FirewallRuleGroupFirewallRuleArgs{...}
type FirewallRuleGroupFirewallRuleInput interface {
	pulumi.Input

	ToFirewallRuleGroupFirewallRuleOutput() FirewallRuleGroupFirewallRuleOutput
	ToFirewallRuleGroupFirewallRuleOutputWithContext(context.Context) FirewallRuleGroupFirewallRuleOutput
}

// Firewall Rule associating the Rule Group to a Domain List
type FirewallRuleGroupFirewallRuleArgs struct {
	// Rule Action
	Action FirewallRuleGroupFirewallRuleActionInput `pulumi:"action"`
	// BlockOverrideDnsType
	BlockOverrideDnsType FirewallRuleGroupFirewallRuleBlockOverrideDnsTypePtrInput `pulumi:"blockOverrideDnsType"`
	// BlockOverrideDomain
	BlockOverrideDomain pulumi.StringPtrInput `pulumi:"blockOverrideDomain"`
	// BlockOverrideTtl
	BlockOverrideTtl pulumi.IntPtrInput `pulumi:"blockOverrideTtl"`
	// BlockResponse
	BlockResponse FirewallRuleGroupFirewallRuleBlockResponsePtrInput `pulumi:"blockResponse"`
	// FirewallDomainRedirectionAction
	ConfidenceThreshold FirewallRuleGroupFirewallRuleConfidenceThresholdPtrInput `pulumi:"confidenceThreshold"`
	// FirewallDomainRedirectionAction
	DnsThreatProtection FirewallRuleGroupFirewallRuleDnsThreatProtectionPtrInput `pulumi:"dnsThreatProtection"`
	// ResourceId
	FirewallDomainListId pulumi.StringPtrInput `pulumi:"firewallDomainListId"`
	// FirewallDomainRedirectionAction
	FirewallDomainRedirectionAction FirewallRuleGroupFirewallRuleFirewallDomainRedirectionActionPtrInput `pulumi:"firewallDomainRedirectionAction"`
	// ResourceId
	FirewallThreatProtectionId pulumi.StringPtrInput `pulumi:"firewallThreatProtectionId"`
	// Rule Priority
	Priority pulumi.IntInput `pulumi:"priority"`
	// Qtype
	Qtype pulumi.StringPtrInput `pulumi:"qtype"`
}

func (FirewallRuleGroupFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (i FirewallRuleGroupFirewallRuleArgs) ToFirewallRuleGroupFirewallRuleOutput() FirewallRuleGroupFirewallRuleOutput {
	return i.ToFirewallRuleGroupFirewallRuleOutputWithContext(context.Background())
}

func (i FirewallRuleGroupFirewallRuleArgs) ToFirewallRuleGroupFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupFirewallRuleOutput)
}

// FirewallRuleGroupFirewallRuleArrayInput is an input type that accepts FirewallRuleGroupFirewallRuleArray and FirewallRuleGroupFirewallRuleArrayOutput values.
// You can construct a concrete instance of `FirewallRuleGroupFirewallRuleArrayInput` via:
//
//	FirewallRuleGroupFirewallRuleArray{ FirewallRuleGroupFirewallRuleArgs{...} }
type FirewallRuleGroupFirewallRuleArrayInput interface {
	pulumi.Input

	ToFirewallRuleGroupFirewallRuleArrayOutput() FirewallRuleGroupFirewallRuleArrayOutput
	ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(context.Context) FirewallRuleGroupFirewallRuleArrayOutput
}

type FirewallRuleGroupFirewallRuleArray []FirewallRuleGroupFirewallRuleInput

func (FirewallRuleGroupFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (i FirewallRuleGroupFirewallRuleArray) ToFirewallRuleGroupFirewallRuleArrayOutput() FirewallRuleGroupFirewallRuleArrayOutput {
	return i.ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(context.Background())
}

func (i FirewallRuleGroupFirewallRuleArray) ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupFirewallRuleArrayOutput)
}

// Firewall Rule associating the Rule Group to a Domain List
type FirewallRuleGroupFirewallRuleOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (o FirewallRuleGroupFirewallRuleOutput) ToFirewallRuleGroupFirewallRuleOutput() FirewallRuleGroupFirewallRuleOutput {
	return o
}

func (o FirewallRuleGroupFirewallRuleOutput) ToFirewallRuleGroupFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleOutput {
	return o
}

// Rule Action
func (o FirewallRuleGroupFirewallRuleOutput) Action() FirewallRuleGroupFirewallRuleActionOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) FirewallRuleGroupFirewallRuleAction { return v.Action }).(FirewallRuleGroupFirewallRuleActionOutput)
}

// BlockOverrideDnsType
func (o FirewallRuleGroupFirewallRuleOutput) BlockOverrideDnsType() FirewallRuleGroupFirewallRuleBlockOverrideDnsTypePtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *FirewallRuleGroupFirewallRuleBlockOverrideDnsType {
		return v.BlockOverrideDnsType
	}).(FirewallRuleGroupFirewallRuleBlockOverrideDnsTypePtrOutput)
}

// BlockOverrideDomain
func (o FirewallRuleGroupFirewallRuleOutput) BlockOverrideDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *string { return v.BlockOverrideDomain }).(pulumi.StringPtrOutput)
}

// BlockOverrideTtl
func (o FirewallRuleGroupFirewallRuleOutput) BlockOverrideTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *int { return v.BlockOverrideTtl }).(pulumi.IntPtrOutput)
}

// BlockResponse
func (o FirewallRuleGroupFirewallRuleOutput) BlockResponse() FirewallRuleGroupFirewallRuleBlockResponsePtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *FirewallRuleGroupFirewallRuleBlockResponse {
		return v.BlockResponse
	}).(FirewallRuleGroupFirewallRuleBlockResponsePtrOutput)
}

// FirewallDomainRedirectionAction
func (o FirewallRuleGroupFirewallRuleOutput) ConfidenceThreshold() FirewallRuleGroupFirewallRuleConfidenceThresholdPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *FirewallRuleGroupFirewallRuleConfidenceThreshold {
		return v.ConfidenceThreshold
	}).(FirewallRuleGroupFirewallRuleConfidenceThresholdPtrOutput)
}

// FirewallDomainRedirectionAction
func (o FirewallRuleGroupFirewallRuleOutput) DnsThreatProtection() FirewallRuleGroupFirewallRuleDnsThreatProtectionPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *FirewallRuleGroupFirewallRuleDnsThreatProtection {
		return v.DnsThreatProtection
	}).(FirewallRuleGroupFirewallRuleDnsThreatProtectionPtrOutput)
}

// ResourceId
func (o FirewallRuleGroupFirewallRuleOutput) FirewallDomainListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *string { return v.FirewallDomainListId }).(pulumi.StringPtrOutput)
}

// FirewallDomainRedirectionAction
func (o FirewallRuleGroupFirewallRuleOutput) FirewallDomainRedirectionAction() FirewallRuleGroupFirewallRuleFirewallDomainRedirectionActionPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *FirewallRuleGroupFirewallRuleFirewallDomainRedirectionAction {
		return v.FirewallDomainRedirectionAction
	}).(FirewallRuleGroupFirewallRuleFirewallDomainRedirectionActionPtrOutput)
}

// ResourceId
func (o FirewallRuleGroupFirewallRuleOutput) FirewallThreatProtectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *string { return v.FirewallThreatProtectionId }).(pulumi.StringPtrOutput)
}

// Rule Priority
func (o FirewallRuleGroupFirewallRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) int { return v.Priority }).(pulumi.IntOutput)
}

// Qtype
func (o FirewallRuleGroupFirewallRuleOutput) Qtype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *string { return v.Qtype }).(pulumi.StringPtrOutput)
}

type FirewallRuleGroupFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (o FirewallRuleGroupFirewallRuleArrayOutput) ToFirewallRuleGroupFirewallRuleArrayOutput() FirewallRuleGroupFirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleGroupFirewallRuleArrayOutput) ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleGroupFirewallRuleArrayOutput) Index(i pulumi.IntInput) FirewallRuleGroupFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRuleGroupFirewallRule {
		return vs[0].([]FirewallRuleGroupFirewallRule)[vs[1].(int)]
	}).(FirewallRuleGroupFirewallRuleOutput)
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type OutpostResolverTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type ResolverQueryLoggingConfigTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type ResolverRuleTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type ResolverRuleTargetAddress struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip *string `pulumi:"ip"`
	// One IPv6 address that you want to forward DNS queries to. You can specify only IPv6 addresses.
	Ipv6 *string `pulumi:"ipv6"`
	// The port at Ip that you want to forward DNS queries to.
	Port *string `pulumi:"port"`
	// The protocol that you want to use to forward DNS queries.
	Protocol *ResolverRuleTargetAddressProtocol `pulumi:"protocol"`
	// The SNI of the target name servers for DoH/DoH-FIPS outbound endpoints
	ServerNameIndication *string `pulumi:"serverNameIndication"`
}

// ResolverRuleTargetAddressInput is an input type that accepts ResolverRuleTargetAddressArgs and ResolverRuleTargetAddressOutput values.
// You can construct a concrete instance of `ResolverRuleTargetAddressInput` via:
//
//	ResolverRuleTargetAddressArgs{...}
type ResolverRuleTargetAddressInput interface {
	pulumi.Input

	ToResolverRuleTargetAddressOutput() ResolverRuleTargetAddressOutput
	ToResolverRuleTargetAddressOutputWithContext(context.Context) ResolverRuleTargetAddressOutput
}

type ResolverRuleTargetAddressArgs struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// One IPv6 address that you want to forward DNS queries to. You can specify only IPv6 addresses.
	Ipv6 pulumi.StringPtrInput `pulumi:"ipv6"`
	// The port at Ip that you want to forward DNS queries to.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// The protocol that you want to use to forward DNS queries.
	Protocol ResolverRuleTargetAddressProtocolPtrInput `pulumi:"protocol"`
	// The SNI of the target name servers for DoH/DoH-FIPS outbound endpoints
	ServerNameIndication pulumi.StringPtrInput `pulumi:"serverNameIndication"`
}

func (ResolverRuleTargetAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetAddress)(nil)).Elem()
}

func (i ResolverRuleTargetAddressArgs) ToResolverRuleTargetAddressOutput() ResolverRuleTargetAddressOutput {
	return i.ToResolverRuleTargetAddressOutputWithContext(context.Background())
}

func (i ResolverRuleTargetAddressArgs) ToResolverRuleTargetAddressOutputWithContext(ctx context.Context) ResolverRuleTargetAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetAddressOutput)
}

// ResolverRuleTargetAddressArrayInput is an input type that accepts ResolverRuleTargetAddressArray and ResolverRuleTargetAddressArrayOutput values.
// You can construct a concrete instance of `ResolverRuleTargetAddressArrayInput` via:
//
//	ResolverRuleTargetAddressArray{ ResolverRuleTargetAddressArgs{...} }
type ResolverRuleTargetAddressArrayInput interface {
	pulumi.Input

	ToResolverRuleTargetAddressArrayOutput() ResolverRuleTargetAddressArrayOutput
	ToResolverRuleTargetAddressArrayOutputWithContext(context.Context) ResolverRuleTargetAddressArrayOutput
}

type ResolverRuleTargetAddressArray []ResolverRuleTargetAddressInput

func (ResolverRuleTargetAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetAddress)(nil)).Elem()
}

func (i ResolverRuleTargetAddressArray) ToResolverRuleTargetAddressArrayOutput() ResolverRuleTargetAddressArrayOutput {
	return i.ToResolverRuleTargetAddressArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTargetAddressArray) ToResolverRuleTargetAddressArrayOutputWithContext(ctx context.Context) ResolverRuleTargetAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetAddressArrayOutput)
}

type ResolverRuleTargetAddressOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetAddress)(nil)).Elem()
}

func (o ResolverRuleTargetAddressOutput) ToResolverRuleTargetAddressOutput() ResolverRuleTargetAddressOutput {
	return o
}

func (o ResolverRuleTargetAddressOutput) ToResolverRuleTargetAddressOutputWithContext(ctx context.Context) ResolverRuleTargetAddressOutput {
	return o
}

// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
func (o ResolverRuleTargetAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// One IPv6 address that you want to forward DNS queries to. You can specify only IPv6 addresses.
func (o ResolverRuleTargetAddressOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetAddress) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

// The port at Ip that you want to forward DNS queries to.
func (o ResolverRuleTargetAddressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetAddress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The protocol that you want to use to forward DNS queries.
func (o ResolverRuleTargetAddressOutput) Protocol() ResolverRuleTargetAddressProtocolPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetAddress) *ResolverRuleTargetAddressProtocol { return v.Protocol }).(ResolverRuleTargetAddressProtocolPtrOutput)
}

// The SNI of the target name servers for DoH/DoH-FIPS outbound endpoints
func (o ResolverRuleTargetAddressOutput) ServerNameIndication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetAddress) *string { return v.ServerNameIndication }).(pulumi.StringPtrOutput)
}

type ResolverRuleTargetAddressArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetAddress)(nil)).Elem()
}

func (o ResolverRuleTargetAddressArrayOutput) ToResolverRuleTargetAddressArrayOutput() ResolverRuleTargetAddressArrayOutput {
	return o
}

func (o ResolverRuleTargetAddressArrayOutput) ToResolverRuleTargetAddressArrayOutputWithContext(ctx context.Context) ResolverRuleTargetAddressArrayOutput {
	return o
}

func (o ResolverRuleTargetAddressArrayOutput) Index(i pulumi.IntInput) ResolverRuleTargetAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleTargetAddress {
		return vs[0].([]ResolverRuleTargetAddress)[vs[1].(int)]
	}).(ResolverRuleTargetAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupFirewallRuleInput)(nil)).Elem(), FirewallRuleGroupFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupFirewallRuleArrayInput)(nil)).Elem(), FirewallRuleGroupFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetAddressInput)(nil)).Elem(), ResolverRuleTargetAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetAddressArrayInput)(nil)).Elem(), ResolverRuleTargetAddressArray{})
	pulumi.RegisterOutputType(FirewallRuleGroupFirewallRuleOutput{})
	pulumi.RegisterOutputType(FirewallRuleGroupFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetAddressOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetAddressArrayOutput{})
}
