// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53resolver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A key-value pair to associate with a resource.
type FirewallDomainListTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// FirewallDomainListTagInput is an input type that accepts FirewallDomainListTagArgs and FirewallDomainListTagOutput values.
// You can construct a concrete instance of `FirewallDomainListTagInput` via:
//
//          FirewallDomainListTagArgs{...}
type FirewallDomainListTagInput interface {
	pulumi.Input

	ToFirewallDomainListTagOutput() FirewallDomainListTagOutput
	ToFirewallDomainListTagOutputWithContext(context.Context) FirewallDomainListTagOutput
}

// A key-value pair to associate with a resource.
type FirewallDomainListTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FirewallDomainListTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDomainListTag)(nil)).Elem()
}

func (i FirewallDomainListTagArgs) ToFirewallDomainListTagOutput() FirewallDomainListTagOutput {
	return i.ToFirewallDomainListTagOutputWithContext(context.Background())
}

func (i FirewallDomainListTagArgs) ToFirewallDomainListTagOutputWithContext(ctx context.Context) FirewallDomainListTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDomainListTagOutput)
}

// FirewallDomainListTagArrayInput is an input type that accepts FirewallDomainListTagArray and FirewallDomainListTagArrayOutput values.
// You can construct a concrete instance of `FirewallDomainListTagArrayInput` via:
//
//          FirewallDomainListTagArray{ FirewallDomainListTagArgs{...} }
type FirewallDomainListTagArrayInput interface {
	pulumi.Input

	ToFirewallDomainListTagArrayOutput() FirewallDomainListTagArrayOutput
	ToFirewallDomainListTagArrayOutputWithContext(context.Context) FirewallDomainListTagArrayOutput
}

type FirewallDomainListTagArray []FirewallDomainListTagInput

func (FirewallDomainListTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDomainListTag)(nil)).Elem()
}

func (i FirewallDomainListTagArray) ToFirewallDomainListTagArrayOutput() FirewallDomainListTagArrayOutput {
	return i.ToFirewallDomainListTagArrayOutputWithContext(context.Background())
}

func (i FirewallDomainListTagArray) ToFirewallDomainListTagArrayOutputWithContext(ctx context.Context) FirewallDomainListTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDomainListTagArrayOutput)
}

// A key-value pair to associate with a resource.
type FirewallDomainListTagOutput struct{ *pulumi.OutputState }

func (FirewallDomainListTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDomainListTag)(nil)).Elem()
}

func (o FirewallDomainListTagOutput) ToFirewallDomainListTagOutput() FirewallDomainListTagOutput {
	return o
}

func (o FirewallDomainListTagOutput) ToFirewallDomainListTagOutputWithContext(ctx context.Context) FirewallDomainListTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FirewallDomainListTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallDomainListTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FirewallDomainListTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallDomainListTag) string { return v.Value }).(pulumi.StringOutput)
}

type FirewallDomainListTagArrayOutput struct{ *pulumi.OutputState }

func (FirewallDomainListTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDomainListTag)(nil)).Elem()
}

func (o FirewallDomainListTagArrayOutput) ToFirewallDomainListTagArrayOutput() FirewallDomainListTagArrayOutput {
	return o
}

func (o FirewallDomainListTagArrayOutput) ToFirewallDomainListTagArrayOutputWithContext(ctx context.Context) FirewallDomainListTagArrayOutput {
	return o
}

func (o FirewallDomainListTagArrayOutput) Index(i pulumi.IntInput) FirewallDomainListTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallDomainListTag {
		return vs[0].([]FirewallDomainListTag)[vs[1].(int)]
	}).(FirewallDomainListTagOutput)
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupAssociationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// FirewallRuleGroupAssociationTagInput is an input type that accepts FirewallRuleGroupAssociationTagArgs and FirewallRuleGroupAssociationTagOutput values.
// You can construct a concrete instance of `FirewallRuleGroupAssociationTagInput` via:
//
//          FirewallRuleGroupAssociationTagArgs{...}
type FirewallRuleGroupAssociationTagInput interface {
	pulumi.Input

	ToFirewallRuleGroupAssociationTagOutput() FirewallRuleGroupAssociationTagOutput
	ToFirewallRuleGroupAssociationTagOutputWithContext(context.Context) FirewallRuleGroupAssociationTagOutput
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupAssociationTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FirewallRuleGroupAssociationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupAssociationTag)(nil)).Elem()
}

func (i FirewallRuleGroupAssociationTagArgs) ToFirewallRuleGroupAssociationTagOutput() FirewallRuleGroupAssociationTagOutput {
	return i.ToFirewallRuleGroupAssociationTagOutputWithContext(context.Background())
}

func (i FirewallRuleGroupAssociationTagArgs) ToFirewallRuleGroupAssociationTagOutputWithContext(ctx context.Context) FirewallRuleGroupAssociationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupAssociationTagOutput)
}

// FirewallRuleGroupAssociationTagArrayInput is an input type that accepts FirewallRuleGroupAssociationTagArray and FirewallRuleGroupAssociationTagArrayOutput values.
// You can construct a concrete instance of `FirewallRuleGroupAssociationTagArrayInput` via:
//
//          FirewallRuleGroupAssociationTagArray{ FirewallRuleGroupAssociationTagArgs{...} }
type FirewallRuleGroupAssociationTagArrayInput interface {
	pulumi.Input

	ToFirewallRuleGroupAssociationTagArrayOutput() FirewallRuleGroupAssociationTagArrayOutput
	ToFirewallRuleGroupAssociationTagArrayOutputWithContext(context.Context) FirewallRuleGroupAssociationTagArrayOutput
}

type FirewallRuleGroupAssociationTagArray []FirewallRuleGroupAssociationTagInput

func (FirewallRuleGroupAssociationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupAssociationTag)(nil)).Elem()
}

func (i FirewallRuleGroupAssociationTagArray) ToFirewallRuleGroupAssociationTagArrayOutput() FirewallRuleGroupAssociationTagArrayOutput {
	return i.ToFirewallRuleGroupAssociationTagArrayOutputWithContext(context.Background())
}

func (i FirewallRuleGroupAssociationTagArray) ToFirewallRuleGroupAssociationTagArrayOutputWithContext(ctx context.Context) FirewallRuleGroupAssociationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupAssociationTagArrayOutput)
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupAssociationTagOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupAssociationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupAssociationTag)(nil)).Elem()
}

func (o FirewallRuleGroupAssociationTagOutput) ToFirewallRuleGroupAssociationTagOutput() FirewallRuleGroupAssociationTagOutput {
	return o
}

func (o FirewallRuleGroupAssociationTagOutput) ToFirewallRuleGroupAssociationTagOutputWithContext(ctx context.Context) FirewallRuleGroupAssociationTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FirewallRuleGroupAssociationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRuleGroupAssociationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FirewallRuleGroupAssociationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRuleGroupAssociationTag) string { return v.Value }).(pulumi.StringOutput)
}

type FirewallRuleGroupAssociationTagArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupAssociationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupAssociationTag)(nil)).Elem()
}

func (o FirewallRuleGroupAssociationTagArrayOutput) ToFirewallRuleGroupAssociationTagArrayOutput() FirewallRuleGroupAssociationTagArrayOutput {
	return o
}

func (o FirewallRuleGroupAssociationTagArrayOutput) ToFirewallRuleGroupAssociationTagArrayOutputWithContext(ctx context.Context) FirewallRuleGroupAssociationTagArrayOutput {
	return o
}

func (o FirewallRuleGroupAssociationTagArrayOutput) Index(i pulumi.IntInput) FirewallRuleGroupAssociationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRuleGroupAssociationTag {
		return vs[0].([]FirewallRuleGroupAssociationTag)[vs[1].(int)]
	}).(FirewallRuleGroupAssociationTagOutput)
}

// Firewall Rule associating the Rule Group to a Domain List
type FirewallRuleGroupFirewallRule struct {
	// Rule Action
	Action FirewallRuleGroupFirewallRuleAction `pulumi:"action"`
	// BlockOverrideDnsType
	BlockOverrideDnsType *FirewallRuleGroupFirewallRuleBlockOverrideDnsType `pulumi:"blockOverrideDnsType"`
	// BlockOverrideDomain
	BlockOverrideDomain *string `pulumi:"blockOverrideDomain"`
	// BlockOverrideTtl
	BlockOverrideTtl *int `pulumi:"blockOverrideTtl"`
	// BlockResponse
	BlockResponse *FirewallRuleGroupFirewallRuleBlockResponse `pulumi:"blockResponse"`
	// ResourceId
	FirewallDomainListId string `pulumi:"firewallDomainListId"`
	// Rule Priority
	Priority int `pulumi:"priority"`
}

// FirewallRuleGroupFirewallRuleInput is an input type that accepts FirewallRuleGroupFirewallRuleArgs and FirewallRuleGroupFirewallRuleOutput values.
// You can construct a concrete instance of `FirewallRuleGroupFirewallRuleInput` via:
//
//          FirewallRuleGroupFirewallRuleArgs{...}
type FirewallRuleGroupFirewallRuleInput interface {
	pulumi.Input

	ToFirewallRuleGroupFirewallRuleOutput() FirewallRuleGroupFirewallRuleOutput
	ToFirewallRuleGroupFirewallRuleOutputWithContext(context.Context) FirewallRuleGroupFirewallRuleOutput
}

// Firewall Rule associating the Rule Group to a Domain List
type FirewallRuleGroupFirewallRuleArgs struct {
	// Rule Action
	Action FirewallRuleGroupFirewallRuleActionInput `pulumi:"action"`
	// BlockOverrideDnsType
	BlockOverrideDnsType FirewallRuleGroupFirewallRuleBlockOverrideDnsTypePtrInput `pulumi:"blockOverrideDnsType"`
	// BlockOverrideDomain
	BlockOverrideDomain pulumi.StringPtrInput `pulumi:"blockOverrideDomain"`
	// BlockOverrideTtl
	BlockOverrideTtl pulumi.IntPtrInput `pulumi:"blockOverrideTtl"`
	// BlockResponse
	BlockResponse FirewallRuleGroupFirewallRuleBlockResponsePtrInput `pulumi:"blockResponse"`
	// ResourceId
	FirewallDomainListId pulumi.StringInput `pulumi:"firewallDomainListId"`
	// Rule Priority
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (FirewallRuleGroupFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (i FirewallRuleGroupFirewallRuleArgs) ToFirewallRuleGroupFirewallRuleOutput() FirewallRuleGroupFirewallRuleOutput {
	return i.ToFirewallRuleGroupFirewallRuleOutputWithContext(context.Background())
}

func (i FirewallRuleGroupFirewallRuleArgs) ToFirewallRuleGroupFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupFirewallRuleOutput)
}

// FirewallRuleGroupFirewallRuleArrayInput is an input type that accepts FirewallRuleGroupFirewallRuleArray and FirewallRuleGroupFirewallRuleArrayOutput values.
// You can construct a concrete instance of `FirewallRuleGroupFirewallRuleArrayInput` via:
//
//          FirewallRuleGroupFirewallRuleArray{ FirewallRuleGroupFirewallRuleArgs{...} }
type FirewallRuleGroupFirewallRuleArrayInput interface {
	pulumi.Input

	ToFirewallRuleGroupFirewallRuleArrayOutput() FirewallRuleGroupFirewallRuleArrayOutput
	ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(context.Context) FirewallRuleGroupFirewallRuleArrayOutput
}

type FirewallRuleGroupFirewallRuleArray []FirewallRuleGroupFirewallRuleInput

func (FirewallRuleGroupFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (i FirewallRuleGroupFirewallRuleArray) ToFirewallRuleGroupFirewallRuleArrayOutput() FirewallRuleGroupFirewallRuleArrayOutput {
	return i.ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(context.Background())
}

func (i FirewallRuleGroupFirewallRuleArray) ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupFirewallRuleArrayOutput)
}

// Firewall Rule associating the Rule Group to a Domain List
type FirewallRuleGroupFirewallRuleOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (o FirewallRuleGroupFirewallRuleOutput) ToFirewallRuleGroupFirewallRuleOutput() FirewallRuleGroupFirewallRuleOutput {
	return o
}

func (o FirewallRuleGroupFirewallRuleOutput) ToFirewallRuleGroupFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleOutput {
	return o
}

// Rule Action
func (o FirewallRuleGroupFirewallRuleOutput) Action() FirewallRuleGroupFirewallRuleActionOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) FirewallRuleGroupFirewallRuleAction { return v.Action }).(FirewallRuleGroupFirewallRuleActionOutput)
}

// BlockOverrideDnsType
func (o FirewallRuleGroupFirewallRuleOutput) BlockOverrideDnsType() FirewallRuleGroupFirewallRuleBlockOverrideDnsTypePtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *FirewallRuleGroupFirewallRuleBlockOverrideDnsType {
		return v.BlockOverrideDnsType
	}).(FirewallRuleGroupFirewallRuleBlockOverrideDnsTypePtrOutput)
}

// BlockOverrideDomain
func (o FirewallRuleGroupFirewallRuleOutput) BlockOverrideDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *string { return v.BlockOverrideDomain }).(pulumi.StringPtrOutput)
}

// BlockOverrideTtl
func (o FirewallRuleGroupFirewallRuleOutput) BlockOverrideTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *int { return v.BlockOverrideTtl }).(pulumi.IntPtrOutput)
}

// BlockResponse
func (o FirewallRuleGroupFirewallRuleOutput) BlockResponse() FirewallRuleGroupFirewallRuleBlockResponsePtrOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) *FirewallRuleGroupFirewallRuleBlockResponse {
		return v.BlockResponse
	}).(FirewallRuleGroupFirewallRuleBlockResponsePtrOutput)
}

// ResourceId
func (o FirewallRuleGroupFirewallRuleOutput) FirewallDomainListId() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) string { return v.FirewallDomainListId }).(pulumi.StringOutput)
}

// Rule Priority
func (o FirewallRuleGroupFirewallRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v FirewallRuleGroupFirewallRule) int { return v.Priority }).(pulumi.IntOutput)
}

type FirewallRuleGroupFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupFirewallRule)(nil)).Elem()
}

func (o FirewallRuleGroupFirewallRuleArrayOutput) ToFirewallRuleGroupFirewallRuleArrayOutput() FirewallRuleGroupFirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleGroupFirewallRuleArrayOutput) ToFirewallRuleGroupFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleGroupFirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleGroupFirewallRuleArrayOutput) Index(i pulumi.IntInput) FirewallRuleGroupFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRuleGroupFirewallRule {
		return vs[0].([]FirewallRuleGroupFirewallRule)[vs[1].(int)]
	}).(FirewallRuleGroupFirewallRuleOutput)
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// FirewallRuleGroupTagInput is an input type that accepts FirewallRuleGroupTagArgs and FirewallRuleGroupTagOutput values.
// You can construct a concrete instance of `FirewallRuleGroupTagInput` via:
//
//          FirewallRuleGroupTagArgs{...}
type FirewallRuleGroupTagInput interface {
	pulumi.Input

	ToFirewallRuleGroupTagOutput() FirewallRuleGroupTagOutput
	ToFirewallRuleGroupTagOutputWithContext(context.Context) FirewallRuleGroupTagOutput
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FirewallRuleGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupTag)(nil)).Elem()
}

func (i FirewallRuleGroupTagArgs) ToFirewallRuleGroupTagOutput() FirewallRuleGroupTagOutput {
	return i.ToFirewallRuleGroupTagOutputWithContext(context.Background())
}

func (i FirewallRuleGroupTagArgs) ToFirewallRuleGroupTagOutputWithContext(ctx context.Context) FirewallRuleGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupTagOutput)
}

// FirewallRuleGroupTagArrayInput is an input type that accepts FirewallRuleGroupTagArray and FirewallRuleGroupTagArrayOutput values.
// You can construct a concrete instance of `FirewallRuleGroupTagArrayInput` via:
//
//          FirewallRuleGroupTagArray{ FirewallRuleGroupTagArgs{...} }
type FirewallRuleGroupTagArrayInput interface {
	pulumi.Input

	ToFirewallRuleGroupTagArrayOutput() FirewallRuleGroupTagArrayOutput
	ToFirewallRuleGroupTagArrayOutputWithContext(context.Context) FirewallRuleGroupTagArrayOutput
}

type FirewallRuleGroupTagArray []FirewallRuleGroupTagInput

func (FirewallRuleGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupTag)(nil)).Elem()
}

func (i FirewallRuleGroupTagArray) ToFirewallRuleGroupTagArrayOutput() FirewallRuleGroupTagArrayOutput {
	return i.ToFirewallRuleGroupTagArrayOutputWithContext(context.Background())
}

func (i FirewallRuleGroupTagArray) ToFirewallRuleGroupTagArrayOutputWithContext(ctx context.Context) FirewallRuleGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleGroupTagArrayOutput)
}

// A key-value pair to associate with a resource.
type FirewallRuleGroupTagOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleGroupTag)(nil)).Elem()
}

func (o FirewallRuleGroupTagOutput) ToFirewallRuleGroupTagOutput() FirewallRuleGroupTagOutput {
	return o
}

func (o FirewallRuleGroupTagOutput) ToFirewallRuleGroupTagOutputWithContext(ctx context.Context) FirewallRuleGroupTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FirewallRuleGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRuleGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FirewallRuleGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRuleGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type FirewallRuleGroupTagArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleGroupTag)(nil)).Elem()
}

func (o FirewallRuleGroupTagArrayOutput) ToFirewallRuleGroupTagArrayOutput() FirewallRuleGroupTagArrayOutput {
	return o
}

func (o FirewallRuleGroupTagArrayOutput) ToFirewallRuleGroupTagArrayOutputWithContext(ctx context.Context) FirewallRuleGroupTagArrayOutput {
	return o
}

func (o FirewallRuleGroupTagArrayOutput) Index(i pulumi.IntInput) FirewallRuleGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRuleGroupTag {
		return vs[0].([]FirewallRuleGroupTag)[vs[1].(int)]
	}).(FirewallRuleGroupTagOutput)
}

type ResolverEndpointIpAddressRequest struct {
	Ip       *string `pulumi:"ip"`
	SubnetId string  `pulumi:"subnetId"`
}

// ResolverEndpointIpAddressRequestInput is an input type that accepts ResolverEndpointIpAddressRequestArgs and ResolverEndpointIpAddressRequestOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressRequestInput` via:
//
//          ResolverEndpointIpAddressRequestArgs{...}
type ResolverEndpointIpAddressRequestInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressRequestOutput() ResolverEndpointIpAddressRequestOutput
	ToResolverEndpointIpAddressRequestOutputWithContext(context.Context) ResolverEndpointIpAddressRequestOutput
}

type ResolverEndpointIpAddressRequestArgs struct {
	Ip       pulumi.StringPtrInput `pulumi:"ip"`
	SubnetId pulumi.StringInput    `pulumi:"subnetId"`
}

func (ResolverEndpointIpAddressRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddressRequest)(nil)).Elem()
}

func (i ResolverEndpointIpAddressRequestArgs) ToResolverEndpointIpAddressRequestOutput() ResolverEndpointIpAddressRequestOutput {
	return i.ToResolverEndpointIpAddressRequestOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressRequestArgs) ToResolverEndpointIpAddressRequestOutputWithContext(ctx context.Context) ResolverEndpointIpAddressRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressRequestOutput)
}

// ResolverEndpointIpAddressRequestArrayInput is an input type that accepts ResolverEndpointIpAddressRequestArray and ResolverEndpointIpAddressRequestArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointIpAddressRequestArrayInput` via:
//
//          ResolverEndpointIpAddressRequestArray{ ResolverEndpointIpAddressRequestArgs{...} }
type ResolverEndpointIpAddressRequestArrayInput interface {
	pulumi.Input

	ToResolverEndpointIpAddressRequestArrayOutput() ResolverEndpointIpAddressRequestArrayOutput
	ToResolverEndpointIpAddressRequestArrayOutputWithContext(context.Context) ResolverEndpointIpAddressRequestArrayOutput
}

type ResolverEndpointIpAddressRequestArray []ResolverEndpointIpAddressRequestInput

func (ResolverEndpointIpAddressRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddressRequest)(nil)).Elem()
}

func (i ResolverEndpointIpAddressRequestArray) ToResolverEndpointIpAddressRequestArrayOutput() ResolverEndpointIpAddressRequestArrayOutput {
	return i.ToResolverEndpointIpAddressRequestArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointIpAddressRequestArray) ToResolverEndpointIpAddressRequestArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpAddressRequestArrayOutput)
}

type ResolverEndpointIpAddressRequestOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpAddressRequest)(nil)).Elem()
}

func (o ResolverEndpointIpAddressRequestOutput) ToResolverEndpointIpAddressRequestOutput() ResolverEndpointIpAddressRequestOutput {
	return o
}

func (o ResolverEndpointIpAddressRequestOutput) ToResolverEndpointIpAddressRequestOutputWithContext(ctx context.Context) ResolverEndpointIpAddressRequestOutput {
	return o
}

func (o ResolverEndpointIpAddressRequestOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddressRequest) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointIpAddressRequestOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpAddressRequest) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointIpAddressRequestArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpAddressRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpAddressRequest)(nil)).Elem()
}

func (o ResolverEndpointIpAddressRequestArrayOutput) ToResolverEndpointIpAddressRequestArrayOutput() ResolverEndpointIpAddressRequestArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressRequestArrayOutput) ToResolverEndpointIpAddressRequestArrayOutputWithContext(ctx context.Context) ResolverEndpointIpAddressRequestArrayOutput {
	return o
}

func (o ResolverEndpointIpAddressRequestArrayOutput) Index(i pulumi.IntInput) ResolverEndpointIpAddressRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointIpAddressRequest {
		return vs[0].([]ResolverEndpointIpAddressRequest)[vs[1].(int)]
	}).(ResolverEndpointIpAddressRequestOutput)
}

type ResolverEndpointTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ResolverEndpointTagInput is an input type that accepts ResolverEndpointTagArgs and ResolverEndpointTagOutput values.
// You can construct a concrete instance of `ResolverEndpointTagInput` via:
//
//          ResolverEndpointTagArgs{...}
type ResolverEndpointTagInput interface {
	pulumi.Input

	ToResolverEndpointTagOutput() ResolverEndpointTagOutput
	ToResolverEndpointTagOutputWithContext(context.Context) ResolverEndpointTagOutput
}

type ResolverEndpointTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ResolverEndpointTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointTag)(nil)).Elem()
}

func (i ResolverEndpointTagArgs) ToResolverEndpointTagOutput() ResolverEndpointTagOutput {
	return i.ToResolverEndpointTagOutputWithContext(context.Background())
}

func (i ResolverEndpointTagArgs) ToResolverEndpointTagOutputWithContext(ctx context.Context) ResolverEndpointTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointTagOutput)
}

// ResolverEndpointTagArrayInput is an input type that accepts ResolverEndpointTagArray and ResolverEndpointTagArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointTagArrayInput` via:
//
//          ResolverEndpointTagArray{ ResolverEndpointTagArgs{...} }
type ResolverEndpointTagArrayInput interface {
	pulumi.Input

	ToResolverEndpointTagArrayOutput() ResolverEndpointTagArrayOutput
	ToResolverEndpointTagArrayOutputWithContext(context.Context) ResolverEndpointTagArrayOutput
}

type ResolverEndpointTagArray []ResolverEndpointTagInput

func (ResolverEndpointTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointTag)(nil)).Elem()
}

func (i ResolverEndpointTagArray) ToResolverEndpointTagArrayOutput() ResolverEndpointTagArrayOutput {
	return i.ToResolverEndpointTagArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointTagArray) ToResolverEndpointTagArrayOutputWithContext(ctx context.Context) ResolverEndpointTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointTagArrayOutput)
}

type ResolverEndpointTagOutput struct{ *pulumi.OutputState }

func (ResolverEndpointTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointTag)(nil)).Elem()
}

func (o ResolverEndpointTagOutput) ToResolverEndpointTagOutput() ResolverEndpointTagOutput {
	return o
}

func (o ResolverEndpointTagOutput) ToResolverEndpointTagOutputWithContext(ctx context.Context) ResolverEndpointTagOutput {
	return o
}

func (o ResolverEndpointTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ResolverEndpointTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointTag) string { return v.Value }).(pulumi.StringOutput)
}

type ResolverEndpointTagArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointTag)(nil)).Elem()
}

func (o ResolverEndpointTagArrayOutput) ToResolverEndpointTagArrayOutput() ResolverEndpointTagArrayOutput {
	return o
}

func (o ResolverEndpointTagArrayOutput) ToResolverEndpointTagArrayOutputWithContext(ctx context.Context) ResolverEndpointTagArrayOutput {
	return o
}

func (o ResolverEndpointTagArrayOutput) Index(i pulumi.IntInput) ResolverEndpointTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointTag {
		return vs[0].([]ResolverEndpointTag)[vs[1].(int)]
	}).(ResolverEndpointTagOutput)
}

type ResolverRuleTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ResolverRuleTagInput is an input type that accepts ResolverRuleTagArgs and ResolverRuleTagOutput values.
// You can construct a concrete instance of `ResolverRuleTagInput` via:
//
//          ResolverRuleTagArgs{...}
type ResolverRuleTagInput interface {
	pulumi.Input

	ToResolverRuleTagOutput() ResolverRuleTagOutput
	ToResolverRuleTagOutputWithContext(context.Context) ResolverRuleTagOutput
}

type ResolverRuleTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ResolverRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTag)(nil)).Elem()
}

func (i ResolverRuleTagArgs) ToResolverRuleTagOutput() ResolverRuleTagOutput {
	return i.ToResolverRuleTagOutputWithContext(context.Background())
}

func (i ResolverRuleTagArgs) ToResolverRuleTagOutputWithContext(ctx context.Context) ResolverRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTagOutput)
}

// ResolverRuleTagArrayInput is an input type that accepts ResolverRuleTagArray and ResolverRuleTagArrayOutput values.
// You can construct a concrete instance of `ResolverRuleTagArrayInput` via:
//
//          ResolverRuleTagArray{ ResolverRuleTagArgs{...} }
type ResolverRuleTagArrayInput interface {
	pulumi.Input

	ToResolverRuleTagArrayOutput() ResolverRuleTagArrayOutput
	ToResolverRuleTagArrayOutputWithContext(context.Context) ResolverRuleTagArrayOutput
}

type ResolverRuleTagArray []ResolverRuleTagInput

func (ResolverRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTag)(nil)).Elem()
}

func (i ResolverRuleTagArray) ToResolverRuleTagArrayOutput() ResolverRuleTagArrayOutput {
	return i.ToResolverRuleTagArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTagArray) ToResolverRuleTagArrayOutputWithContext(ctx context.Context) ResolverRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTagArrayOutput)
}

type ResolverRuleTagOutput struct{ *pulumi.OutputState }

func (ResolverRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTag)(nil)).Elem()
}

func (o ResolverRuleTagOutput) ToResolverRuleTagOutput() ResolverRuleTagOutput {
	return o
}

func (o ResolverRuleTagOutput) ToResolverRuleTagOutputWithContext(ctx context.Context) ResolverRuleTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ResolverRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ResolverRuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type ResolverRuleTagArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTag)(nil)).Elem()
}

func (o ResolverRuleTagArrayOutput) ToResolverRuleTagArrayOutput() ResolverRuleTagArrayOutput {
	return o
}

func (o ResolverRuleTagArrayOutput) ToResolverRuleTagArrayOutputWithContext(ctx context.Context) ResolverRuleTagArrayOutput {
	return o
}

func (o ResolverRuleTagArrayOutput) Index(i pulumi.IntInput) ResolverRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleTag {
		return vs[0].([]ResolverRuleTag)[vs[1].(int)]
	}).(ResolverRuleTagOutput)
}

type ResolverRuleTargetAddress struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip string `pulumi:"ip"`
	// The port at Ip that you want to forward DNS queries to.
	Port *string `pulumi:"port"`
}

// ResolverRuleTargetAddressInput is an input type that accepts ResolverRuleTargetAddressArgs and ResolverRuleTargetAddressOutput values.
// You can construct a concrete instance of `ResolverRuleTargetAddressInput` via:
//
//          ResolverRuleTargetAddressArgs{...}
type ResolverRuleTargetAddressInput interface {
	pulumi.Input

	ToResolverRuleTargetAddressOutput() ResolverRuleTargetAddressOutput
	ToResolverRuleTargetAddressOutputWithContext(context.Context) ResolverRuleTargetAddressOutput
}

type ResolverRuleTargetAddressArgs struct {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port at Ip that you want to forward DNS queries to.
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (ResolverRuleTargetAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetAddress)(nil)).Elem()
}

func (i ResolverRuleTargetAddressArgs) ToResolverRuleTargetAddressOutput() ResolverRuleTargetAddressOutput {
	return i.ToResolverRuleTargetAddressOutputWithContext(context.Background())
}

func (i ResolverRuleTargetAddressArgs) ToResolverRuleTargetAddressOutputWithContext(ctx context.Context) ResolverRuleTargetAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetAddressOutput)
}

// ResolverRuleTargetAddressArrayInput is an input type that accepts ResolverRuleTargetAddressArray and ResolverRuleTargetAddressArrayOutput values.
// You can construct a concrete instance of `ResolverRuleTargetAddressArrayInput` via:
//
//          ResolverRuleTargetAddressArray{ ResolverRuleTargetAddressArgs{...} }
type ResolverRuleTargetAddressArrayInput interface {
	pulumi.Input

	ToResolverRuleTargetAddressArrayOutput() ResolverRuleTargetAddressArrayOutput
	ToResolverRuleTargetAddressArrayOutputWithContext(context.Context) ResolverRuleTargetAddressArrayOutput
}

type ResolverRuleTargetAddressArray []ResolverRuleTargetAddressInput

func (ResolverRuleTargetAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetAddress)(nil)).Elem()
}

func (i ResolverRuleTargetAddressArray) ToResolverRuleTargetAddressArrayOutput() ResolverRuleTargetAddressArrayOutput {
	return i.ToResolverRuleTargetAddressArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTargetAddressArray) ToResolverRuleTargetAddressArrayOutputWithContext(ctx context.Context) ResolverRuleTargetAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTargetAddressArrayOutput)
}

type ResolverRuleTargetAddressOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTargetAddress)(nil)).Elem()
}

func (o ResolverRuleTargetAddressOutput) ToResolverRuleTargetAddressOutput() ResolverRuleTargetAddressOutput {
	return o
}

func (o ResolverRuleTargetAddressOutput) ToResolverRuleTargetAddressOutputWithContext(ctx context.Context) ResolverRuleTargetAddressOutput {
	return o
}

// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
func (o ResolverRuleTargetAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleTargetAddress) string { return v.Ip }).(pulumi.StringOutput)
}

// The port at Ip that you want to forward DNS queries to.
func (o ResolverRuleTargetAddressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleTargetAddress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ResolverRuleTargetAddressArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleTargetAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTargetAddress)(nil)).Elem()
}

func (o ResolverRuleTargetAddressArrayOutput) ToResolverRuleTargetAddressArrayOutput() ResolverRuleTargetAddressArrayOutput {
	return o
}

func (o ResolverRuleTargetAddressArrayOutput) ToResolverRuleTargetAddressArrayOutputWithContext(ctx context.Context) ResolverRuleTargetAddressArrayOutput {
	return o
}

func (o ResolverRuleTargetAddressArrayOutput) Index(i pulumi.IntInput) ResolverRuleTargetAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleTargetAddress {
		return vs[0].([]ResolverRuleTargetAddress)[vs[1].(int)]
	}).(ResolverRuleTargetAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDomainListTagInput)(nil)).Elem(), FirewallDomainListTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDomainListTagArrayInput)(nil)).Elem(), FirewallDomainListTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupAssociationTagInput)(nil)).Elem(), FirewallRuleGroupAssociationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupAssociationTagArrayInput)(nil)).Elem(), FirewallRuleGroupAssociationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupFirewallRuleInput)(nil)).Elem(), FirewallRuleGroupFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupFirewallRuleArrayInput)(nil)).Elem(), FirewallRuleGroupFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupTagInput)(nil)).Elem(), FirewallRuleGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleGroupTagArrayInput)(nil)).Elem(), FirewallRuleGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpAddressRequestInput)(nil)).Elem(), ResolverEndpointIpAddressRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpAddressRequestArrayInput)(nil)).Elem(), ResolverEndpointIpAddressRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointTagInput)(nil)).Elem(), ResolverEndpointTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointTagArrayInput)(nil)).Elem(), ResolverEndpointTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTagInput)(nil)).Elem(), ResolverRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTagArrayInput)(nil)).Elem(), ResolverRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetAddressInput)(nil)).Elem(), ResolverRuleTargetAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTargetAddressArrayInput)(nil)).Elem(), ResolverRuleTargetAddressArray{})
	pulumi.RegisterOutputType(FirewallDomainListTagOutput{})
	pulumi.RegisterOutputType(FirewallDomainListTagArrayOutput{})
	pulumi.RegisterOutputType(FirewallRuleGroupAssociationTagOutput{})
	pulumi.RegisterOutputType(FirewallRuleGroupAssociationTagArrayOutput{})
	pulumi.RegisterOutputType(FirewallRuleGroupFirewallRuleOutput{})
	pulumi.RegisterOutputType(FirewallRuleGroupFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallRuleGroupTagOutput{})
	pulumi.RegisterOutputType(FirewallRuleGroupTagArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressRequestOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpAddressRequestArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointTagOutput{})
	pulumi.RegisterOutputType(ResolverEndpointTagArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleTagOutput{})
	pulumi.RegisterOutputType(ResolverRuleTagArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetAddressOutput{})
	pulumi.RegisterOutputType(ResolverRuleTargetAddressArrayOutput{})
}
