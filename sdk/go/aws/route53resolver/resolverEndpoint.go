// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53resolver

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::Route53Resolver::ResolverEndpoint
type ResolverEndpoint struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the resolver endpoint, such as arn:aws:route53resolver:us-east-1:123456789012:resolver-endpoint/resolver-endpoint-a1bzhi.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:
	// - INBOUND: allows DNS queries to your VPC from your network
	// - OUTBOUND: allows DNS queries from your VPC to your network
	Direction pulumi.StringOutput `pulumi:"direction"`
	// The ID of the VPC that you want to create the resolver endpoint in.
	HostVpcId pulumi.StringOutput `pulumi:"hostVpcId"`
	// The number of IP addresses that the resolver endpoint can use for DNS queries.
	IpAddressCount pulumi.StringOutput `pulumi:"ipAddressCount"`
	// The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC.
	IpAddresses ResolverEndpointIpAddressRequestArrayOutput `pulumi:"ipAddresses"`
	// A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The ARN (Amazon Resource Name) for the Outpost.
	OutpostArn pulumi.StringPtrOutput `pulumi:"outpostArn"`
	// The Amazon EC2 instance type.
	PreferredInstanceType pulumi.StringPtrOutput `pulumi:"preferredInstanceType"`
	// Protocols used for the endpoint. DoH-FIPS is applicable for inbound endpoints only.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// The ID of the resolver endpoint.
	ResolverEndpointId pulumi.StringOutput `pulumi:"resolverEndpointId"`
	// The Resolver endpoint IP address type.
	ResolverEndpointType ResolverEndpointTypePtrOutput `pulumi:"resolverEndpointType"`
	// The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewResolverEndpoint registers a new resource with the given unique name, arguments, and options.
func NewResolverEndpoint(ctx *pulumi.Context,
	name string, args *ResolverEndpointArgs, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.IpAddresses == nil {
		return nil, errors.New("invalid value for required argument 'IpAddresses'")
	}
	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"direction",
		"outpostArn",
		"preferredInstanceType",
		"securityGroupIds[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverEndpoint
	err := ctx.RegisterResource("aws-native:route53resolver:ResolverEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverEndpoint gets an existing ResolverEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverEndpointState, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	var resource ResolverEndpoint
	err := ctx.ReadResource("aws-native:route53resolver:ResolverEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverEndpoint resources.
type resolverEndpointState struct {
}

type ResolverEndpointState struct {
}

func (ResolverEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointState)(nil)).Elem()
}

type resolverEndpointArgs struct {
	// Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:
	// - INBOUND: allows DNS queries to your VPC from your network
	// - OUTBOUND: allows DNS queries from your VPC to your network
	Direction string `pulumi:"direction"`
	// The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC.
	IpAddresses []ResolverEndpointIpAddressRequest `pulumi:"ipAddresses"`
	// A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.
	Name *string `pulumi:"name"`
	// The ARN (Amazon Resource Name) for the Outpost.
	OutpostArn *string `pulumi:"outpostArn"`
	// The Amazon EC2 instance type.
	PreferredInstanceType *string `pulumi:"preferredInstanceType"`
	// Protocols used for the endpoint. DoH-FIPS is applicable for inbound endpoints only.
	Protocols []string `pulumi:"protocols"`
	// The Resolver endpoint IP address type.
	ResolverEndpointType *ResolverEndpointType `pulumi:"resolverEndpointType"`
	// The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a ResolverEndpoint resource.
type ResolverEndpointArgs struct {
	// Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:
	// - INBOUND: allows DNS queries to your VPC from your network
	// - OUTBOUND: allows DNS queries from your VPC to your network
	Direction pulumi.StringInput
	// The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC.
	IpAddresses ResolverEndpointIpAddressRequestArrayInput
	// A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.
	Name pulumi.StringPtrInput
	// The ARN (Amazon Resource Name) for the Outpost.
	OutpostArn pulumi.StringPtrInput
	// The Amazon EC2 instance type.
	PreferredInstanceType pulumi.StringPtrInput
	// Protocols used for the endpoint. DoH-FIPS is applicable for inbound endpoints only.
	Protocols pulumi.StringArrayInput
	// The Resolver endpoint IP address type.
	ResolverEndpointType ResolverEndpointTypePtrInput
	// The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.
	SecurityGroupIds pulumi.StringArrayInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (ResolverEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointArgs)(nil)).Elem()
}

type ResolverEndpointInput interface {
	pulumi.Input

	ToResolverEndpointOutput() ResolverEndpointOutput
	ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput
}

func (*ResolverEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (i *ResolverEndpoint) ToResolverEndpointOutput() ResolverEndpointOutput {
	return i.ToResolverEndpointOutputWithContext(context.Background())
}

func (i *ResolverEndpoint) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointOutput)
}

type ResolverEndpointOutput struct{ *pulumi.OutputState }

func (ResolverEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointOutput) ToResolverEndpointOutput() ResolverEndpointOutput {
	return o
}

func (o ResolverEndpointOutput) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return o
}

// The Amazon Resource Name (ARN) of the resolver endpoint, such as arn:aws:route53resolver:us-east-1:123456789012:resolver-endpoint/resolver-endpoint-a1bzhi.
func (o ResolverEndpointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Indicates whether the Resolver endpoint allows inbound or outbound DNS queries:
// - INBOUND: allows DNS queries to your VPC from your network
// - OUTBOUND: allows DNS queries from your VPC to your network
func (o ResolverEndpointOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// The ID of the VPC that you want to create the resolver endpoint in.
func (o ResolverEndpointOutput) HostVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.HostVpcId }).(pulumi.StringOutput)
}

// The number of IP addresses that the resolver endpoint can use for DNS queries.
func (o ResolverEndpointOutput) IpAddressCount() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.IpAddressCount }).(pulumi.StringOutput)
}

// The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC.
func (o ResolverEndpointOutput) IpAddresses() ResolverEndpointIpAddressRequestArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) ResolverEndpointIpAddressRequestArrayOutput { return v.IpAddresses }).(ResolverEndpointIpAddressRequestArrayOutput)
}

// A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.
func (o ResolverEndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The ARN (Amazon Resource Name) for the Outpost.
func (o ResolverEndpointOutput) OutpostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringPtrOutput { return v.OutpostArn }).(pulumi.StringPtrOutput)
}

// The Amazon EC2 instance type.
func (o ResolverEndpointOutput) PreferredInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringPtrOutput { return v.PreferredInstanceType }).(pulumi.StringPtrOutput)
}

// Protocols used for the endpoint. DoH-FIPS is applicable for inbound endpoints only.
func (o ResolverEndpointOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// The ID of the resolver endpoint.
func (o ResolverEndpointOutput) ResolverEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.ResolverEndpointId }).(pulumi.StringOutput)
}

// The Resolver endpoint IP address type.
func (o ResolverEndpointOutput) ResolverEndpointType() ResolverEndpointTypePtrOutput {
	return o.ApplyT(func(v *ResolverEndpoint) ResolverEndpointTypePtrOutput { return v.ResolverEndpointType }).(ResolverEndpointTypePtrOutput)
}

// The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound rules (for inbound endpoints) or outbound rules (for outbound endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.
func (o ResolverEndpointOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ResolverEndpointOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointInput)(nil)).Elem(), &ResolverEndpoint{})
	pulumi.RegisterOutputType(ResolverEndpointOutput{})
}
