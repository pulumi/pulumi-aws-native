// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53resolver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::Route53Resolver::ResolverEndpoint
func LookupResolverEndpoint(ctx *pulumi.Context, args *LookupResolverEndpointArgs, opts ...pulumi.InvokeOption) (*LookupResolverEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverEndpointResult
	err := ctx.Invoke("aws-native:route53resolver:getResolverEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupResolverEndpointArgs struct {
	// The ID of the resolver endpoint.
	ResolverEndpointId string `pulumi:"resolverEndpointId"`
}

type LookupResolverEndpointResult struct {
	// The Amazon Resource Name (ARN) of the resolver endpoint, such as arn:aws:route53resolver:us-east-1:123456789012:resolver-endpoint/resolver-endpoint-a1bzhi.
	Arn *string `pulumi:"arn"`
	// The ID of the VPC that you want to create the resolver endpoint in.
	HostVpcId *string `pulumi:"hostVpcId"`
	// The number of IP addresses that the resolver endpoint can use for DNS queries.
	IpAddressCount *string `pulumi:"ipAddressCount"`
	// The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC.
	IpAddresses []ResolverEndpointIpAddressRequest `pulumi:"ipAddresses"`
	// A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.
	Name *string `pulumi:"name"`
	// Protocols used for the endpoint. DoH-FIPS is applicable for inbound endpoints only.
	Protocols []string `pulumi:"protocols"`
	// The ID of the resolver endpoint.
	ResolverEndpointId *string `pulumi:"resolverEndpointId"`
	// The Resolver endpoint IP address type.
	ResolverEndpointType *ResolverEndpointType `pulumi:"resolverEndpointType"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupResolverEndpointOutput(ctx *pulumi.Context, args LookupResolverEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupResolverEndpointResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupResolverEndpointResultOutput, error) {
			args := v.(LookupResolverEndpointArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:route53resolver:getResolverEndpoint", args, LookupResolverEndpointResultOutput{}, options).(LookupResolverEndpointResultOutput), nil
		}).(LookupResolverEndpointResultOutput)
}

type LookupResolverEndpointOutputArgs struct {
	// The ID of the resolver endpoint.
	ResolverEndpointId pulumi.StringInput `pulumi:"resolverEndpointId"`
}

func (LookupResolverEndpointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverEndpointArgs)(nil)).Elem()
}

type LookupResolverEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupResolverEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverEndpointResult)(nil)).Elem()
}

func (o LookupResolverEndpointResultOutput) ToLookupResolverEndpointResultOutput() LookupResolverEndpointResultOutput {
	return o
}

func (o LookupResolverEndpointResultOutput) ToLookupResolverEndpointResultOutputWithContext(ctx context.Context) LookupResolverEndpointResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the resolver endpoint, such as arn:aws:route53resolver:us-east-1:123456789012:resolver-endpoint/resolver-endpoint-a1bzhi.
func (o LookupResolverEndpointResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The ID of the VPC that you want to create the resolver endpoint in.
func (o LookupResolverEndpointResultOutput) HostVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *string { return v.HostVpcId }).(pulumi.StringPtrOutput)
}

// The number of IP addresses that the resolver endpoint can use for DNS queries.
func (o LookupResolverEndpointResultOutput) IpAddressCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *string { return v.IpAddressCount }).(pulumi.StringPtrOutput)
}

// The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC.
func (o LookupResolverEndpointResultOutput) IpAddresses() ResolverEndpointIpAddressRequestArrayOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) []ResolverEndpointIpAddressRequest { return v.IpAddresses }).(ResolverEndpointIpAddressRequestArrayOutput)
}

// A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.
func (o LookupResolverEndpointResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocols used for the endpoint. DoH-FIPS is applicable for inbound endpoints only.
func (o LookupResolverEndpointResultOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) []string { return v.Protocols }).(pulumi.StringArrayOutput)
}

// The ID of the resolver endpoint.
func (o LookupResolverEndpointResultOutput) ResolverEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *string { return v.ResolverEndpointId }).(pulumi.StringPtrOutput)
}

// The Resolver endpoint IP address type.
func (o LookupResolverEndpointResultOutput) ResolverEndpointType() ResolverEndpointTypePtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *ResolverEndpointType { return v.ResolverEndpointType }).(ResolverEndpointTypePtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupResolverEndpointResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResolverEndpointResultOutput{})
}
