// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package applicationsignals

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApplicationSignals::GroupingConfiguration
type GroupingConfiguration struct {
	pulumi.CustomResourceState

	// The 12 digit AWS Account ID for the account.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
	GroupingAttributeDefinitions GroupingConfigurationGroupingAttributeDefinitionArrayOutput `pulumi:"groupingAttributeDefinitions"`
	// The timestamp when this grouping configuration was last updated. When used in a raw HTTP Query API, it is formatted as epoch time in seconds.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewGroupingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewGroupingConfiguration(ctx *pulumi.Context,
	name string, args *GroupingConfigurationArgs, opts ...pulumi.ResourceOption) (*GroupingConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupingAttributeDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'GroupingAttributeDefinitions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupingConfiguration
	err := ctx.RegisterResource("aws-native:applicationsignals:GroupingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupingConfiguration gets an existing GroupingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupingConfigurationState, opts ...pulumi.ResourceOption) (*GroupingConfiguration, error) {
	var resource GroupingConfiguration
	err := ctx.ReadResource("aws-native:applicationsignals:GroupingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupingConfiguration resources.
type groupingConfigurationState struct {
}

type GroupingConfigurationState struct {
}

func (GroupingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupingConfigurationState)(nil)).Elem()
}

type groupingConfigurationArgs struct {
	// An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
	GroupingAttributeDefinitions []GroupingConfigurationGroupingAttributeDefinition `pulumi:"groupingAttributeDefinitions"`
}

// The set of arguments for constructing a GroupingConfiguration resource.
type GroupingConfigurationArgs struct {
	// An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
	GroupingAttributeDefinitions GroupingConfigurationGroupingAttributeDefinitionArrayInput
}

func (GroupingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupingConfigurationArgs)(nil)).Elem()
}

type GroupingConfigurationInput interface {
	pulumi.Input

	ToGroupingConfigurationOutput() GroupingConfigurationOutput
	ToGroupingConfigurationOutputWithContext(ctx context.Context) GroupingConfigurationOutput
}

func (*GroupingConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfiguration)(nil)).Elem()
}

func (i *GroupingConfiguration) ToGroupingConfigurationOutput() GroupingConfigurationOutput {
	return i.ToGroupingConfigurationOutputWithContext(context.Background())
}

func (i *GroupingConfiguration) ToGroupingConfigurationOutputWithContext(ctx context.Context) GroupingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupingConfigurationOutput)
}

type GroupingConfigurationOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfiguration)(nil)).Elem()
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationOutput() GroupingConfigurationOutput {
	return o
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationOutputWithContext(ctx context.Context) GroupingConfigurationOutput {
	return o
}

// The 12 digit AWS Account ID for the account.
func (o GroupingConfigurationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupingConfiguration) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
func (o GroupingConfigurationOutput) GroupingAttributeDefinitions() GroupingConfigurationGroupingAttributeDefinitionArrayOutput {
	return o.ApplyT(func(v *GroupingConfiguration) GroupingConfigurationGroupingAttributeDefinitionArrayOutput {
		return v.GroupingAttributeDefinitions
	}).(GroupingConfigurationGroupingAttributeDefinitionArrayOutput)
}

// The timestamp when this grouping configuration was last updated. When used in a raw HTTP Query API, it is formatted as epoch time in seconds.
func (o GroupingConfigurationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupingConfiguration) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupingConfigurationInput)(nil)).Elem(), &GroupingConfiguration{})
	pulumi.RegisterOutputType(GroupingConfigurationOutput{})
}
