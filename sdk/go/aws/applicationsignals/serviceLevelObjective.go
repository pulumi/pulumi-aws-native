// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package applicationsignals

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApplicationSignals::ServiceLevelObjective
type ServiceLevelObjective struct {
	pulumi.CustomResourceState

	// The ARN of this SLO.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Epoch time in seconds of the time that this SLO was created
	CreatedTime pulumi.IntOutput `pulumi:"createdTime"`
	// An optional description for this SLO. Default is 'No description'
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Displays whether this is a period-based SLO or a request-based SLO.
	EvaluationType ServiceLevelObjectiveEvaluationTypeOutput `pulumi:"evaluationType"`
	// This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.
	Goal ServiceLevelObjectiveGoalPtrOutput `pulumi:"goal"`
	// Epoch time in seconds of the time that this SLO was most recently updated
	LastUpdatedTime pulumi.IntOutput `pulumi:"lastUpdatedTime"`
	// The name of this SLO.
	Name pulumi.StringOutput `pulumi:"name"`
	// A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.
	RequestBasedSli ServiceLevelObjectiveRequestBasedSliPtrOutput `pulumi:"requestBasedSli"`
	// A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.
	Sli ServiceLevelObjectiveSliPtrOutput `pulumi:"sli"`
	// A list of key-value pairs to associate with the SLO. You can associate as many as 50 tags with an SLO. To be able to associate tags with the SLO when you create the SLO, you must have the cloudwatch:TagResource permission.
	//
	// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewServiceLevelObjective registers a new resource with the given unique name, arguments, and options.
func NewServiceLevelObjective(ctx *pulumi.Context,
	name string, args *ServiceLevelObjectiveArgs, opts ...pulumi.ResourceOption) (*ServiceLevelObjective, error) {
	if args == nil {
		args = &ServiceLevelObjectiveArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceLevelObjective
	err := ctx.RegisterResource("aws-native:applicationsignals:ServiceLevelObjective", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceLevelObjective gets an existing ServiceLevelObjective resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceLevelObjective(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceLevelObjectiveState, opts ...pulumi.ResourceOption) (*ServiceLevelObjective, error) {
	var resource ServiceLevelObjective
	err := ctx.ReadResource("aws-native:applicationsignals:ServiceLevelObjective", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceLevelObjective resources.
type serviceLevelObjectiveState struct {
}

type ServiceLevelObjectiveState struct {
}

func (ServiceLevelObjectiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceLevelObjectiveState)(nil)).Elem()
}

type serviceLevelObjectiveArgs struct {
	// An optional description for this SLO. Default is 'No description'
	Description *string `pulumi:"description"`
	// This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.
	Goal *ServiceLevelObjectiveGoal `pulumi:"goal"`
	// The name of this SLO.
	Name *string `pulumi:"name"`
	// A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.
	RequestBasedSli *ServiceLevelObjectiveRequestBasedSli `pulumi:"requestBasedSli"`
	// A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.
	Sli *ServiceLevelObjectiveSli `pulumi:"sli"`
	// A list of key-value pairs to associate with the SLO. You can associate as many as 50 tags with an SLO. To be able to associate tags with the SLO when you create the SLO, you must have the cloudwatch:TagResource permission.
	//
	// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a ServiceLevelObjective resource.
type ServiceLevelObjectiveArgs struct {
	// An optional description for this SLO. Default is 'No description'
	Description pulumi.StringPtrInput
	// This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.
	Goal ServiceLevelObjectiveGoalPtrInput
	// The name of this SLO.
	Name pulumi.StringPtrInput
	// A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.
	RequestBasedSli ServiceLevelObjectiveRequestBasedSliPtrInput
	// A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.
	Sli ServiceLevelObjectiveSliPtrInput
	// A list of key-value pairs to associate with the SLO. You can associate as many as 50 tags with an SLO. To be able to associate tags with the SLO when you create the SLO, you must have the cloudwatch:TagResource permission.
	//
	// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
	Tags aws.TagArrayInput
}

func (ServiceLevelObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceLevelObjectiveArgs)(nil)).Elem()
}

type ServiceLevelObjectiveInput interface {
	pulumi.Input

	ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput
	ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput
}

func (*ServiceLevelObjective) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjective)(nil)).Elem()
}

func (i *ServiceLevelObjective) ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput {
	return i.ToServiceLevelObjectiveOutputWithContext(context.Background())
}

func (i *ServiceLevelObjective) ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveOutput)
}

type ServiceLevelObjectiveOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjective)(nil)).Elem()
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectiveOutput() ServiceLevelObjectiveOutput {
	return o
}

func (o ServiceLevelObjectiveOutput) ToServiceLevelObjectiveOutputWithContext(ctx context.Context) ServiceLevelObjectiveOutput {
	return o
}

// The ARN of this SLO.
func (o ServiceLevelObjectiveOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Epoch time in seconds of the time that this SLO was created
func (o ServiceLevelObjectiveOutput) CreatedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.IntOutput { return v.CreatedTime }).(pulumi.IntOutput)
}

// An optional description for this SLO. Default is 'No description'
func (o ServiceLevelObjectiveOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Displays whether this is a period-based SLO or a request-based SLO.
func (o ServiceLevelObjectiveOutput) EvaluationType() ServiceLevelObjectiveEvaluationTypeOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) ServiceLevelObjectiveEvaluationTypeOutput { return v.EvaluationType }).(ServiceLevelObjectiveEvaluationTypeOutput)
}

// This structure contains the attributes that determine the goal of an SLO. This includes the time period for evaluation and the attainment threshold.
func (o ServiceLevelObjectiveOutput) Goal() ServiceLevelObjectiveGoalPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) ServiceLevelObjectiveGoalPtrOutput { return v.Goal }).(ServiceLevelObjectiveGoalPtrOutput)
}

// Epoch time in seconds of the time that this SLO was most recently updated
func (o ServiceLevelObjectiveOutput) LastUpdatedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.IntOutput { return v.LastUpdatedTime }).(pulumi.IntOutput)
}

// The name of this SLO.
func (o ServiceLevelObjectiveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A structure containing information about the performance metric that this SLO monitors, if this is a request-based SLO.
func (o ServiceLevelObjectiveOutput) RequestBasedSli() ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) ServiceLevelObjectiveRequestBasedSliPtrOutput { return v.RequestBasedSli }).(ServiceLevelObjectiveRequestBasedSliPtrOutput)
}

// A structure containing information about the performance metric that this SLO monitors, if this is a period-based SLO.
func (o ServiceLevelObjectiveOutput) Sli() ServiceLevelObjectiveSliPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) ServiceLevelObjectiveSliPtrOutput { return v.Sli }).(ServiceLevelObjectiveSliPtrOutput)
}

// A list of key-value pairs to associate with the SLO. You can associate as many as 50 tags with an SLO. To be able to associate tags with the SLO when you create the SLO, you must have the cloudwatch:TagResource permission.
//
// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
func (o ServiceLevelObjectiveOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjective) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveInput)(nil)).Elem(), &ServiceLevelObjective{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveOutput{})
}
