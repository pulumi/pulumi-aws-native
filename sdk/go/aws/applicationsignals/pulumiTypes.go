// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package applicationsignals

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// This object defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO. A burn rate of exactly 1 indicates that the SLO goal will be met exactly.
// For example, if you specify 60 as the number of minutes in the look-back window, the burn rate is calculated as the following:
// burn rate = error rate over the look-back window / (1 - attainment goal percentage)
type ServiceLevelObjectiveBurnRateConfiguration struct {
	// The number of minutes to use as the look-back window.
	LookBackWindowMinutes int `pulumi:"lookBackWindowMinutes"`
}

// ServiceLevelObjectiveBurnRateConfigurationInput is an input type that accepts ServiceLevelObjectiveBurnRateConfigurationArgs and ServiceLevelObjectiveBurnRateConfigurationOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveBurnRateConfigurationInput` via:
//
//	ServiceLevelObjectiveBurnRateConfigurationArgs{...}
type ServiceLevelObjectiveBurnRateConfigurationInput interface {
	pulumi.Input

	ToServiceLevelObjectiveBurnRateConfigurationOutput() ServiceLevelObjectiveBurnRateConfigurationOutput
	ToServiceLevelObjectiveBurnRateConfigurationOutputWithContext(context.Context) ServiceLevelObjectiveBurnRateConfigurationOutput
}

// This object defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO. A burn rate of exactly 1 indicates that the SLO goal will be met exactly.
// For example, if you specify 60 as the number of minutes in the look-back window, the burn rate is calculated as the following:
// burn rate = error rate over the look-back window / (1 - attainment goal percentage)
type ServiceLevelObjectiveBurnRateConfigurationArgs struct {
	// The number of minutes to use as the look-back window.
	LookBackWindowMinutes pulumi.IntInput `pulumi:"lookBackWindowMinutes"`
}

func (ServiceLevelObjectiveBurnRateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveBurnRateConfiguration)(nil)).Elem()
}

func (i ServiceLevelObjectiveBurnRateConfigurationArgs) ToServiceLevelObjectiveBurnRateConfigurationOutput() ServiceLevelObjectiveBurnRateConfigurationOutput {
	return i.ToServiceLevelObjectiveBurnRateConfigurationOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveBurnRateConfigurationArgs) ToServiceLevelObjectiveBurnRateConfigurationOutputWithContext(ctx context.Context) ServiceLevelObjectiveBurnRateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveBurnRateConfigurationOutput)
}

// ServiceLevelObjectiveBurnRateConfigurationArrayInput is an input type that accepts ServiceLevelObjectiveBurnRateConfigurationArray and ServiceLevelObjectiveBurnRateConfigurationArrayOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveBurnRateConfigurationArrayInput` via:
//
//	ServiceLevelObjectiveBurnRateConfigurationArray{ ServiceLevelObjectiveBurnRateConfigurationArgs{...} }
type ServiceLevelObjectiveBurnRateConfigurationArrayInput interface {
	pulumi.Input

	ToServiceLevelObjectiveBurnRateConfigurationArrayOutput() ServiceLevelObjectiveBurnRateConfigurationArrayOutput
	ToServiceLevelObjectiveBurnRateConfigurationArrayOutputWithContext(context.Context) ServiceLevelObjectiveBurnRateConfigurationArrayOutput
}

type ServiceLevelObjectiveBurnRateConfigurationArray []ServiceLevelObjectiveBurnRateConfigurationInput

func (ServiceLevelObjectiveBurnRateConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveBurnRateConfiguration)(nil)).Elem()
}

func (i ServiceLevelObjectiveBurnRateConfigurationArray) ToServiceLevelObjectiveBurnRateConfigurationArrayOutput() ServiceLevelObjectiveBurnRateConfigurationArrayOutput {
	return i.ToServiceLevelObjectiveBurnRateConfigurationArrayOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveBurnRateConfigurationArray) ToServiceLevelObjectiveBurnRateConfigurationArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveBurnRateConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveBurnRateConfigurationArrayOutput)
}

// This object defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO. A burn rate of exactly 1 indicates that the SLO goal will be met exactly.
// For example, if you specify 60 as the number of minutes in the look-back window, the burn rate is calculated as the following:
// burn rate = error rate over the look-back window / (1 - attainment goal percentage)
type ServiceLevelObjectiveBurnRateConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveBurnRateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveBurnRateConfiguration)(nil)).Elem()
}

func (o ServiceLevelObjectiveBurnRateConfigurationOutput) ToServiceLevelObjectiveBurnRateConfigurationOutput() ServiceLevelObjectiveBurnRateConfigurationOutput {
	return o
}

func (o ServiceLevelObjectiveBurnRateConfigurationOutput) ToServiceLevelObjectiveBurnRateConfigurationOutputWithContext(ctx context.Context) ServiceLevelObjectiveBurnRateConfigurationOutput {
	return o
}

// The number of minutes to use as the look-back window.
func (o ServiceLevelObjectiveBurnRateConfigurationOutput) LookBackWindowMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveBurnRateConfiguration) int { return v.LookBackWindowMinutes }).(pulumi.IntOutput)
}

type ServiceLevelObjectiveBurnRateConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveBurnRateConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveBurnRateConfiguration)(nil)).Elem()
}

func (o ServiceLevelObjectiveBurnRateConfigurationArrayOutput) ToServiceLevelObjectiveBurnRateConfigurationArrayOutput() ServiceLevelObjectiveBurnRateConfigurationArrayOutput {
	return o
}

func (o ServiceLevelObjectiveBurnRateConfigurationArrayOutput) ToServiceLevelObjectiveBurnRateConfigurationArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveBurnRateConfigurationArrayOutput {
	return o
}

func (o ServiceLevelObjectiveBurnRateConfigurationArrayOutput) Index(i pulumi.IntInput) ServiceLevelObjectiveBurnRateConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLevelObjectiveBurnRateConfiguration {
		return vs[0].([]ServiceLevelObjectiveBurnRateConfiguration)[vs[1].(int)]
	}).(ServiceLevelObjectiveBurnRateConfigurationOutput)
}

// If the interval for this service level objective is a calendar interval, this structure contains the interval specifications.
type ServiceLevelObjectiveCalendarInterval struct {
	// Specifies the duration of each calendar interval. For example, if `Duration` is `1` and `DurationUnit` is `MONTH` , each interval is one month, aligned with the calendar.
	Duration int `pulumi:"duration"`
	// Specifies the calendar interval unit.
	DurationUnit ServiceLevelObjectiveDurationUnit `pulumi:"durationUnit"`
	// Epoch time in seconds you want the first interval to start. Be sure to choose a time that configures the intervals the way that you want. For example, if you want weekly intervals starting on Mondays at 6 a.m., be sure to specify a start time that is a Monday at 6 a.m.
	// As soon as one calendar interval ends, another automatically begins.
	StartTime int `pulumi:"startTime"`
}

// ServiceLevelObjectiveCalendarIntervalInput is an input type that accepts ServiceLevelObjectiveCalendarIntervalArgs and ServiceLevelObjectiveCalendarIntervalOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveCalendarIntervalInput` via:
//
//	ServiceLevelObjectiveCalendarIntervalArgs{...}
type ServiceLevelObjectiveCalendarIntervalInput interface {
	pulumi.Input

	ToServiceLevelObjectiveCalendarIntervalOutput() ServiceLevelObjectiveCalendarIntervalOutput
	ToServiceLevelObjectiveCalendarIntervalOutputWithContext(context.Context) ServiceLevelObjectiveCalendarIntervalOutput
}

// If the interval for this service level objective is a calendar interval, this structure contains the interval specifications.
type ServiceLevelObjectiveCalendarIntervalArgs struct {
	// Specifies the duration of each calendar interval. For example, if `Duration` is `1` and `DurationUnit` is `MONTH` , each interval is one month, aligned with the calendar.
	Duration pulumi.IntInput `pulumi:"duration"`
	// Specifies the calendar interval unit.
	DurationUnit ServiceLevelObjectiveDurationUnitInput `pulumi:"durationUnit"`
	// Epoch time in seconds you want the first interval to start. Be sure to choose a time that configures the intervals the way that you want. For example, if you want weekly intervals starting on Mondays at 6 a.m., be sure to specify a start time that is a Monday at 6 a.m.
	// As soon as one calendar interval ends, another automatically begins.
	StartTime pulumi.IntInput `pulumi:"startTime"`
}

func (ServiceLevelObjectiveCalendarIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveCalendarInterval)(nil)).Elem()
}

func (i ServiceLevelObjectiveCalendarIntervalArgs) ToServiceLevelObjectiveCalendarIntervalOutput() ServiceLevelObjectiveCalendarIntervalOutput {
	return i.ToServiceLevelObjectiveCalendarIntervalOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveCalendarIntervalArgs) ToServiceLevelObjectiveCalendarIntervalOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveCalendarIntervalOutput)
}

func (i ServiceLevelObjectiveCalendarIntervalArgs) ToServiceLevelObjectiveCalendarIntervalPtrOutput() ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return i.ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveCalendarIntervalArgs) ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveCalendarIntervalOutput).ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveCalendarIntervalPtrInput is an input type that accepts ServiceLevelObjectiveCalendarIntervalArgs, ServiceLevelObjectiveCalendarIntervalPtr and ServiceLevelObjectiveCalendarIntervalPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveCalendarIntervalPtrInput` via:
//
//	        ServiceLevelObjectiveCalendarIntervalArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveCalendarIntervalPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveCalendarIntervalPtrOutput() ServiceLevelObjectiveCalendarIntervalPtrOutput
	ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(context.Context) ServiceLevelObjectiveCalendarIntervalPtrOutput
}

type serviceLevelObjectiveCalendarIntervalPtrType ServiceLevelObjectiveCalendarIntervalArgs

func ServiceLevelObjectiveCalendarIntervalPtr(v *ServiceLevelObjectiveCalendarIntervalArgs) ServiceLevelObjectiveCalendarIntervalPtrInput {
	return (*serviceLevelObjectiveCalendarIntervalPtrType)(v)
}

func (*serviceLevelObjectiveCalendarIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveCalendarInterval)(nil)).Elem()
}

func (i *serviceLevelObjectiveCalendarIntervalPtrType) ToServiceLevelObjectiveCalendarIntervalPtrOutput() ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return i.ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveCalendarIntervalPtrType) ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveCalendarIntervalPtrOutput)
}

// If the interval for this service level objective is a calendar interval, this structure contains the interval specifications.
type ServiceLevelObjectiveCalendarIntervalOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveCalendarIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveCalendarInterval)(nil)).Elem()
}

func (o ServiceLevelObjectiveCalendarIntervalOutput) ToServiceLevelObjectiveCalendarIntervalOutput() ServiceLevelObjectiveCalendarIntervalOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarIntervalOutput) ToServiceLevelObjectiveCalendarIntervalOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarIntervalOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarIntervalOutput) ToServiceLevelObjectiveCalendarIntervalPtrOutput() ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return o.ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveCalendarIntervalOutput) ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveCalendarInterval) *ServiceLevelObjectiveCalendarInterval {
		return &v
	}).(ServiceLevelObjectiveCalendarIntervalPtrOutput)
}

// Specifies the duration of each calendar interval. For example, if `Duration` is `1` and `DurationUnit` is `MONTH` , each interval is one month, aligned with the calendar.
func (o ServiceLevelObjectiveCalendarIntervalOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveCalendarInterval) int { return v.Duration }).(pulumi.IntOutput)
}

// Specifies the calendar interval unit.
func (o ServiceLevelObjectiveCalendarIntervalOutput) DurationUnit() ServiceLevelObjectiveDurationUnitOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveCalendarInterval) ServiceLevelObjectiveDurationUnit { return v.DurationUnit }).(ServiceLevelObjectiveDurationUnitOutput)
}

// Epoch time in seconds you want the first interval to start. Be sure to choose a time that configures the intervals the way that you want. For example, if you want weekly intervals starting on Mondays at 6 a.m., be sure to specify a start time that is a Monday at 6 a.m.
// As soon as one calendar interval ends, another automatically begins.
func (o ServiceLevelObjectiveCalendarIntervalOutput) StartTime() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveCalendarInterval) int { return v.StartTime }).(pulumi.IntOutput)
}

type ServiceLevelObjectiveCalendarIntervalPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveCalendarIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveCalendarInterval)(nil)).Elem()
}

func (o ServiceLevelObjectiveCalendarIntervalPtrOutput) ToServiceLevelObjectiveCalendarIntervalPtrOutput() ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarIntervalPtrOutput) ToServiceLevelObjectiveCalendarIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarIntervalPtrOutput) Elem() ServiceLevelObjectiveCalendarIntervalOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveCalendarInterval) ServiceLevelObjectiveCalendarInterval {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveCalendarInterval
		return ret
	}).(ServiceLevelObjectiveCalendarIntervalOutput)
}

// Specifies the duration of each calendar interval. For example, if `Duration` is `1` and `DurationUnit` is `MONTH` , each interval is one month, aligned with the calendar.
func (o ServiceLevelObjectiveCalendarIntervalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveCalendarInterval) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

// Specifies the calendar interval unit.
func (o ServiceLevelObjectiveCalendarIntervalPtrOutput) DurationUnit() ServiceLevelObjectiveDurationUnitPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveCalendarInterval) *ServiceLevelObjectiveDurationUnit {
		if v == nil {
			return nil
		}
		return &v.DurationUnit
	}).(ServiceLevelObjectiveDurationUnitPtrOutput)
}

// Epoch time in seconds you want the first interval to start. Be sure to choose a time that configures the intervals the way that you want. For example, if you want weekly intervals starting on Mondays at 6 a.m., be sure to specify a start time that is a Monday at 6 a.m.
// As soon as one calendar interval ends, another automatically begins.
func (o ServiceLevelObjectiveCalendarIntervalPtrOutput) StartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveCalendarInterval) *int {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.IntPtrOutput)
}

// A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish `InstanceId` as a dimension name, and the actual instance ID as the value for that dimension. You can assign up to 30 dimensions to a metric.
type ServiceLevelObjectiveDimension struct {
	// The name of the dimension. Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:). ASCII control characters are not supported as part of dimension names.
	Name string `pulumi:"name"`
	// The value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character. ASCII control characters are not supported as part of dimension values
	Value string `pulumi:"value"`
}

// ServiceLevelObjectiveDimensionInput is an input type that accepts ServiceLevelObjectiveDimensionArgs and ServiceLevelObjectiveDimensionOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveDimensionInput` via:
//
//	ServiceLevelObjectiveDimensionArgs{...}
type ServiceLevelObjectiveDimensionInput interface {
	pulumi.Input

	ToServiceLevelObjectiveDimensionOutput() ServiceLevelObjectiveDimensionOutput
	ToServiceLevelObjectiveDimensionOutputWithContext(context.Context) ServiceLevelObjectiveDimensionOutput
}

// A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish `InstanceId` as a dimension name, and the actual instance ID as the value for that dimension. You can assign up to 30 dimensions to a metric.
type ServiceLevelObjectiveDimensionArgs struct {
	// The name of the dimension. Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:). ASCII control characters are not supported as part of dimension names.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character. ASCII control characters are not supported as part of dimension values
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceLevelObjectiveDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveDimension)(nil)).Elem()
}

func (i ServiceLevelObjectiveDimensionArgs) ToServiceLevelObjectiveDimensionOutput() ServiceLevelObjectiveDimensionOutput {
	return i.ToServiceLevelObjectiveDimensionOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveDimensionArgs) ToServiceLevelObjectiveDimensionOutputWithContext(ctx context.Context) ServiceLevelObjectiveDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveDimensionOutput)
}

// ServiceLevelObjectiveDimensionArrayInput is an input type that accepts ServiceLevelObjectiveDimensionArray and ServiceLevelObjectiveDimensionArrayOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveDimensionArrayInput` via:
//
//	ServiceLevelObjectiveDimensionArray{ ServiceLevelObjectiveDimensionArgs{...} }
type ServiceLevelObjectiveDimensionArrayInput interface {
	pulumi.Input

	ToServiceLevelObjectiveDimensionArrayOutput() ServiceLevelObjectiveDimensionArrayOutput
	ToServiceLevelObjectiveDimensionArrayOutputWithContext(context.Context) ServiceLevelObjectiveDimensionArrayOutput
}

type ServiceLevelObjectiveDimensionArray []ServiceLevelObjectiveDimensionInput

func (ServiceLevelObjectiveDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveDimension)(nil)).Elem()
}

func (i ServiceLevelObjectiveDimensionArray) ToServiceLevelObjectiveDimensionArrayOutput() ServiceLevelObjectiveDimensionArrayOutput {
	return i.ToServiceLevelObjectiveDimensionArrayOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveDimensionArray) ToServiceLevelObjectiveDimensionArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveDimensionArrayOutput)
}

// A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish `InstanceId` as a dimension name, and the actual instance ID as the value for that dimension. You can assign up to 30 dimensions to a metric.
type ServiceLevelObjectiveDimensionOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveDimension)(nil)).Elem()
}

func (o ServiceLevelObjectiveDimensionOutput) ToServiceLevelObjectiveDimensionOutput() ServiceLevelObjectiveDimensionOutput {
	return o
}

func (o ServiceLevelObjectiveDimensionOutput) ToServiceLevelObjectiveDimensionOutputWithContext(ctx context.Context) ServiceLevelObjectiveDimensionOutput {
	return o
}

// The name of the dimension. Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:). ASCII control characters are not supported as part of dimension names.
func (o ServiceLevelObjectiveDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveDimension) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character. ASCII control characters are not supported as part of dimension values
func (o ServiceLevelObjectiveDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveDimension) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceLevelObjectiveDimensionArrayOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveDimension)(nil)).Elem()
}

func (o ServiceLevelObjectiveDimensionArrayOutput) ToServiceLevelObjectiveDimensionArrayOutput() ServiceLevelObjectiveDimensionArrayOutput {
	return o
}

func (o ServiceLevelObjectiveDimensionArrayOutput) ToServiceLevelObjectiveDimensionArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveDimensionArrayOutput {
	return o
}

func (o ServiceLevelObjectiveDimensionArrayOutput) Index(i pulumi.IntInput) ServiceLevelObjectiveDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLevelObjectiveDimension {
		return vs[0].([]ServiceLevelObjectiveDimension)[vs[1].(int)]
	}).(ServiceLevelObjectiveDimensionOutput)
}

// This object defines a time exclusion window for this SLO. The time exclusion window is used to exclude breaching data points from affecting attainment rate, error budget, and burn rate metrics.
type ServiceLevelObjectiveExclusionWindow struct {
	// An optional reason for scheduling this time exclusion window. Default is 'No reason'.
	Reason         *string                              `pulumi:"reason"`
	RecurrenceRule *ServiceLevelObjectiveRecurrenceRule `pulumi:"recurrenceRule"`
	// The time you want the exclusion window to start at. Note that time exclusion windows can only be scheduled in the future, not the past.
	StartTime *string                     `pulumi:"startTime"`
	Window    ServiceLevelObjectiveWindow `pulumi:"window"`
}

// ServiceLevelObjectiveExclusionWindowInput is an input type that accepts ServiceLevelObjectiveExclusionWindowArgs and ServiceLevelObjectiveExclusionWindowOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveExclusionWindowInput` via:
//
//	ServiceLevelObjectiveExclusionWindowArgs{...}
type ServiceLevelObjectiveExclusionWindowInput interface {
	pulumi.Input

	ToServiceLevelObjectiveExclusionWindowOutput() ServiceLevelObjectiveExclusionWindowOutput
	ToServiceLevelObjectiveExclusionWindowOutputWithContext(context.Context) ServiceLevelObjectiveExclusionWindowOutput
}

// This object defines a time exclusion window for this SLO. The time exclusion window is used to exclude breaching data points from affecting attainment rate, error budget, and burn rate metrics.
type ServiceLevelObjectiveExclusionWindowArgs struct {
	// An optional reason for scheduling this time exclusion window. Default is 'No reason'.
	Reason         pulumi.StringPtrInput                       `pulumi:"reason"`
	RecurrenceRule ServiceLevelObjectiveRecurrenceRulePtrInput `pulumi:"recurrenceRule"`
	// The time you want the exclusion window to start at. Note that time exclusion windows can only be scheduled in the future, not the past.
	StartTime pulumi.StringPtrInput            `pulumi:"startTime"`
	Window    ServiceLevelObjectiveWindowInput `pulumi:"window"`
}

func (ServiceLevelObjectiveExclusionWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveExclusionWindow)(nil)).Elem()
}

func (i ServiceLevelObjectiveExclusionWindowArgs) ToServiceLevelObjectiveExclusionWindowOutput() ServiceLevelObjectiveExclusionWindowOutput {
	return i.ToServiceLevelObjectiveExclusionWindowOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveExclusionWindowArgs) ToServiceLevelObjectiveExclusionWindowOutputWithContext(ctx context.Context) ServiceLevelObjectiveExclusionWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveExclusionWindowOutput)
}

// ServiceLevelObjectiveExclusionWindowArrayInput is an input type that accepts ServiceLevelObjectiveExclusionWindowArray and ServiceLevelObjectiveExclusionWindowArrayOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveExclusionWindowArrayInput` via:
//
//	ServiceLevelObjectiveExclusionWindowArray{ ServiceLevelObjectiveExclusionWindowArgs{...} }
type ServiceLevelObjectiveExclusionWindowArrayInput interface {
	pulumi.Input

	ToServiceLevelObjectiveExclusionWindowArrayOutput() ServiceLevelObjectiveExclusionWindowArrayOutput
	ToServiceLevelObjectiveExclusionWindowArrayOutputWithContext(context.Context) ServiceLevelObjectiveExclusionWindowArrayOutput
}

type ServiceLevelObjectiveExclusionWindowArray []ServiceLevelObjectiveExclusionWindowInput

func (ServiceLevelObjectiveExclusionWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveExclusionWindow)(nil)).Elem()
}

func (i ServiceLevelObjectiveExclusionWindowArray) ToServiceLevelObjectiveExclusionWindowArrayOutput() ServiceLevelObjectiveExclusionWindowArrayOutput {
	return i.ToServiceLevelObjectiveExclusionWindowArrayOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveExclusionWindowArray) ToServiceLevelObjectiveExclusionWindowArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveExclusionWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveExclusionWindowArrayOutput)
}

// This object defines a time exclusion window for this SLO. The time exclusion window is used to exclude breaching data points from affecting attainment rate, error budget, and burn rate metrics.
type ServiceLevelObjectiveExclusionWindowOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveExclusionWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveExclusionWindow)(nil)).Elem()
}

func (o ServiceLevelObjectiveExclusionWindowOutput) ToServiceLevelObjectiveExclusionWindowOutput() ServiceLevelObjectiveExclusionWindowOutput {
	return o
}

func (o ServiceLevelObjectiveExclusionWindowOutput) ToServiceLevelObjectiveExclusionWindowOutputWithContext(ctx context.Context) ServiceLevelObjectiveExclusionWindowOutput {
	return o
}

// An optional reason for scheduling this time exclusion window. Default is 'No reason'.
func (o ServiceLevelObjectiveExclusionWindowOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveExclusionWindow) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o ServiceLevelObjectiveExclusionWindowOutput) RecurrenceRule() ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveExclusionWindow) *ServiceLevelObjectiveRecurrenceRule {
		return v.RecurrenceRule
	}).(ServiceLevelObjectiveRecurrenceRulePtrOutput)
}

// The time you want the exclusion window to start at. Note that time exclusion windows can only be scheduled in the future, not the past.
func (o ServiceLevelObjectiveExclusionWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveExclusionWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o ServiceLevelObjectiveExclusionWindowOutput) Window() ServiceLevelObjectiveWindowOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveExclusionWindow) ServiceLevelObjectiveWindow { return v.Window }).(ServiceLevelObjectiveWindowOutput)
}

type ServiceLevelObjectiveExclusionWindowArrayOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveExclusionWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveExclusionWindow)(nil)).Elem()
}

func (o ServiceLevelObjectiveExclusionWindowArrayOutput) ToServiceLevelObjectiveExclusionWindowArrayOutput() ServiceLevelObjectiveExclusionWindowArrayOutput {
	return o
}

func (o ServiceLevelObjectiveExclusionWindowArrayOutput) ToServiceLevelObjectiveExclusionWindowArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveExclusionWindowArrayOutput {
	return o
}

func (o ServiceLevelObjectiveExclusionWindowArrayOutput) Index(i pulumi.IntInput) ServiceLevelObjectiveExclusionWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLevelObjectiveExclusionWindow {
		return vs[0].([]ServiceLevelObjectiveExclusionWindow)[vs[1].(int)]
	}).(ServiceLevelObjectiveExclusionWindowOutput)
}

// A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.
type ServiceLevelObjectiveGoal struct {
	// The threshold that determines if the goal is being met. An attainment goal is the ratio of good periods that meet the threshold requirements to the total periods within the interval. For example, an attainment goal of 99.9% means that within your interval, you are targeting 99.9% of the periods to be in healthy state.
	// If you omit this parameter, 99 is used to represent 99% as the attainment goal.
	AttainmentGoal *float64 `pulumi:"attainmentGoal"`
	// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
	//
	// If you omit this parameter, a rolling interval of 7 days is used.
	Interval *ServiceLevelObjectiveInterval `pulumi:"interval"`
	// The percentage of remaining budget over total budget that you want to get warnings for. If you omit this parameter, the default of 50.0 is used.
	WarningThreshold *float64 `pulumi:"warningThreshold"`
}

// ServiceLevelObjectiveGoalInput is an input type that accepts ServiceLevelObjectiveGoalArgs and ServiceLevelObjectiveGoalOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveGoalInput` via:
//
//	ServiceLevelObjectiveGoalArgs{...}
type ServiceLevelObjectiveGoalInput interface {
	pulumi.Input

	ToServiceLevelObjectiveGoalOutput() ServiceLevelObjectiveGoalOutput
	ToServiceLevelObjectiveGoalOutputWithContext(context.Context) ServiceLevelObjectiveGoalOutput
}

// A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.
type ServiceLevelObjectiveGoalArgs struct {
	// The threshold that determines if the goal is being met. An attainment goal is the ratio of good periods that meet the threshold requirements to the total periods within the interval. For example, an attainment goal of 99.9% means that within your interval, you are targeting 99.9% of the periods to be in healthy state.
	// If you omit this parameter, 99 is used to represent 99% as the attainment goal.
	AttainmentGoal pulumi.Float64PtrInput `pulumi:"attainmentGoal"`
	// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
	//
	// If you omit this parameter, a rolling interval of 7 days is used.
	Interval ServiceLevelObjectiveIntervalPtrInput `pulumi:"interval"`
	// The percentage of remaining budget over total budget that you want to get warnings for. If you omit this parameter, the default of 50.0 is used.
	WarningThreshold pulumi.Float64PtrInput `pulumi:"warningThreshold"`
}

func (ServiceLevelObjectiveGoalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveGoal)(nil)).Elem()
}

func (i ServiceLevelObjectiveGoalArgs) ToServiceLevelObjectiveGoalOutput() ServiceLevelObjectiveGoalOutput {
	return i.ToServiceLevelObjectiveGoalOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveGoalArgs) ToServiceLevelObjectiveGoalOutputWithContext(ctx context.Context) ServiceLevelObjectiveGoalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveGoalOutput)
}

func (i ServiceLevelObjectiveGoalArgs) ToServiceLevelObjectiveGoalPtrOutput() ServiceLevelObjectiveGoalPtrOutput {
	return i.ToServiceLevelObjectiveGoalPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveGoalArgs) ToServiceLevelObjectiveGoalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveGoalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveGoalOutput).ToServiceLevelObjectiveGoalPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveGoalPtrInput is an input type that accepts ServiceLevelObjectiveGoalArgs, ServiceLevelObjectiveGoalPtr and ServiceLevelObjectiveGoalPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveGoalPtrInput` via:
//
//	        ServiceLevelObjectiveGoalArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveGoalPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveGoalPtrOutput() ServiceLevelObjectiveGoalPtrOutput
	ToServiceLevelObjectiveGoalPtrOutputWithContext(context.Context) ServiceLevelObjectiveGoalPtrOutput
}

type serviceLevelObjectiveGoalPtrType ServiceLevelObjectiveGoalArgs

func ServiceLevelObjectiveGoalPtr(v *ServiceLevelObjectiveGoalArgs) ServiceLevelObjectiveGoalPtrInput {
	return (*serviceLevelObjectiveGoalPtrType)(v)
}

func (*serviceLevelObjectiveGoalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveGoal)(nil)).Elem()
}

func (i *serviceLevelObjectiveGoalPtrType) ToServiceLevelObjectiveGoalPtrOutput() ServiceLevelObjectiveGoalPtrOutput {
	return i.ToServiceLevelObjectiveGoalPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveGoalPtrType) ToServiceLevelObjectiveGoalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveGoalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveGoalPtrOutput)
}

// A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.
type ServiceLevelObjectiveGoalOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveGoalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveGoal)(nil)).Elem()
}

func (o ServiceLevelObjectiveGoalOutput) ToServiceLevelObjectiveGoalOutput() ServiceLevelObjectiveGoalOutput {
	return o
}

func (o ServiceLevelObjectiveGoalOutput) ToServiceLevelObjectiveGoalOutputWithContext(ctx context.Context) ServiceLevelObjectiveGoalOutput {
	return o
}

func (o ServiceLevelObjectiveGoalOutput) ToServiceLevelObjectiveGoalPtrOutput() ServiceLevelObjectiveGoalPtrOutput {
	return o.ToServiceLevelObjectiveGoalPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveGoalOutput) ToServiceLevelObjectiveGoalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveGoalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveGoal) *ServiceLevelObjectiveGoal {
		return &v
	}).(ServiceLevelObjectiveGoalPtrOutput)
}

// The threshold that determines if the goal is being met. An attainment goal is the ratio of good periods that meet the threshold requirements to the total periods within the interval. For example, an attainment goal of 99.9% means that within your interval, you are targeting 99.9% of the periods to be in healthy state.
// If you omit this parameter, 99 is used to represent 99% as the attainment goal.
func (o ServiceLevelObjectiveGoalOutput) AttainmentGoal() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveGoal) *float64 { return v.AttainmentGoal }).(pulumi.Float64PtrOutput)
}

// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
//
// If you omit this parameter, a rolling interval of 7 days is used.
func (o ServiceLevelObjectiveGoalOutput) Interval() ServiceLevelObjectiveIntervalPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveGoal) *ServiceLevelObjectiveInterval { return v.Interval }).(ServiceLevelObjectiveIntervalPtrOutput)
}

// The percentage of remaining budget over total budget that you want to get warnings for. If you omit this parameter, the default of 50.0 is used.
func (o ServiceLevelObjectiveGoalOutput) WarningThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveGoal) *float64 { return v.WarningThreshold }).(pulumi.Float64PtrOutput)
}

type ServiceLevelObjectiveGoalPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveGoalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveGoal)(nil)).Elem()
}

func (o ServiceLevelObjectiveGoalPtrOutput) ToServiceLevelObjectiveGoalPtrOutput() ServiceLevelObjectiveGoalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveGoalPtrOutput) ToServiceLevelObjectiveGoalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveGoalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveGoalPtrOutput) Elem() ServiceLevelObjectiveGoalOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveGoal) ServiceLevelObjectiveGoal {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveGoal
		return ret
	}).(ServiceLevelObjectiveGoalOutput)
}

// The threshold that determines if the goal is being met. An attainment goal is the ratio of good periods that meet the threshold requirements to the total periods within the interval. For example, an attainment goal of 99.9% means that within your interval, you are targeting 99.9% of the periods to be in healthy state.
// If you omit this parameter, 99 is used to represent 99% as the attainment goal.
func (o ServiceLevelObjectiveGoalPtrOutput) AttainmentGoal() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveGoal) *float64 {
		if v == nil {
			return nil
		}
		return v.AttainmentGoal
	}).(pulumi.Float64PtrOutput)
}

// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
//
// If you omit this parameter, a rolling interval of 7 days is used.
func (o ServiceLevelObjectiveGoalPtrOutput) Interval() ServiceLevelObjectiveIntervalPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveGoal) *ServiceLevelObjectiveInterval {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(ServiceLevelObjectiveIntervalPtrOutput)
}

// The percentage of remaining budget over total budget that you want to get warnings for. If you omit this parameter, the default of 50.0 is used.
func (o ServiceLevelObjectiveGoalPtrOutput) WarningThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveGoal) *float64 {
		if v == nil {
			return nil
		}
		return v.WarningThreshold
	}).(pulumi.Float64PtrOutput)
}

// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
// If you omit this parameter, a rolling interval of 7 days is used.
type ServiceLevelObjectiveInterval struct {
	// If the interval is a calendar interval, this structure contains the interval specifications.
	CalendarInterval *ServiceLevelObjectiveCalendarInterval `pulumi:"calendarInterval"`
	// If the interval is a rolling interval, this structure contains the interval specifications.
	RollingInterval *ServiceLevelObjectiveRollingInterval `pulumi:"rollingInterval"`
}

// ServiceLevelObjectiveIntervalInput is an input type that accepts ServiceLevelObjectiveIntervalArgs and ServiceLevelObjectiveIntervalOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveIntervalInput` via:
//
//	ServiceLevelObjectiveIntervalArgs{...}
type ServiceLevelObjectiveIntervalInput interface {
	pulumi.Input

	ToServiceLevelObjectiveIntervalOutput() ServiceLevelObjectiveIntervalOutput
	ToServiceLevelObjectiveIntervalOutputWithContext(context.Context) ServiceLevelObjectiveIntervalOutput
}

// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
// If you omit this parameter, a rolling interval of 7 days is used.
type ServiceLevelObjectiveIntervalArgs struct {
	// If the interval is a calendar interval, this structure contains the interval specifications.
	CalendarInterval ServiceLevelObjectiveCalendarIntervalPtrInput `pulumi:"calendarInterval"`
	// If the interval is a rolling interval, this structure contains the interval specifications.
	RollingInterval ServiceLevelObjectiveRollingIntervalPtrInput `pulumi:"rollingInterval"`
}

func (ServiceLevelObjectiveIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveInterval)(nil)).Elem()
}

func (i ServiceLevelObjectiveIntervalArgs) ToServiceLevelObjectiveIntervalOutput() ServiceLevelObjectiveIntervalOutput {
	return i.ToServiceLevelObjectiveIntervalOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveIntervalArgs) ToServiceLevelObjectiveIntervalOutputWithContext(ctx context.Context) ServiceLevelObjectiveIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveIntervalOutput)
}

func (i ServiceLevelObjectiveIntervalArgs) ToServiceLevelObjectiveIntervalPtrOutput() ServiceLevelObjectiveIntervalPtrOutput {
	return i.ToServiceLevelObjectiveIntervalPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveIntervalArgs) ToServiceLevelObjectiveIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveIntervalOutput).ToServiceLevelObjectiveIntervalPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveIntervalPtrInput is an input type that accepts ServiceLevelObjectiveIntervalArgs, ServiceLevelObjectiveIntervalPtr and ServiceLevelObjectiveIntervalPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveIntervalPtrInput` via:
//
//	        ServiceLevelObjectiveIntervalArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveIntervalPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveIntervalPtrOutput() ServiceLevelObjectiveIntervalPtrOutput
	ToServiceLevelObjectiveIntervalPtrOutputWithContext(context.Context) ServiceLevelObjectiveIntervalPtrOutput
}

type serviceLevelObjectiveIntervalPtrType ServiceLevelObjectiveIntervalArgs

func ServiceLevelObjectiveIntervalPtr(v *ServiceLevelObjectiveIntervalArgs) ServiceLevelObjectiveIntervalPtrInput {
	return (*serviceLevelObjectiveIntervalPtrType)(v)
}

func (*serviceLevelObjectiveIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveInterval)(nil)).Elem()
}

func (i *serviceLevelObjectiveIntervalPtrType) ToServiceLevelObjectiveIntervalPtrOutput() ServiceLevelObjectiveIntervalPtrOutput {
	return i.ToServiceLevelObjectiveIntervalPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveIntervalPtrType) ToServiceLevelObjectiveIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveIntervalPtrOutput)
}

// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
// If you omit this parameter, a rolling interval of 7 days is used.
type ServiceLevelObjectiveIntervalOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveInterval)(nil)).Elem()
}

func (o ServiceLevelObjectiveIntervalOutput) ToServiceLevelObjectiveIntervalOutput() ServiceLevelObjectiveIntervalOutput {
	return o
}

func (o ServiceLevelObjectiveIntervalOutput) ToServiceLevelObjectiveIntervalOutputWithContext(ctx context.Context) ServiceLevelObjectiveIntervalOutput {
	return o
}

func (o ServiceLevelObjectiveIntervalOutput) ToServiceLevelObjectiveIntervalPtrOutput() ServiceLevelObjectiveIntervalPtrOutput {
	return o.ToServiceLevelObjectiveIntervalPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveIntervalOutput) ToServiceLevelObjectiveIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveIntervalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveInterval) *ServiceLevelObjectiveInterval {
		return &v
	}).(ServiceLevelObjectiveIntervalPtrOutput)
}

// If the interval is a calendar interval, this structure contains the interval specifications.
func (o ServiceLevelObjectiveIntervalOutput) CalendarInterval() ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveInterval) *ServiceLevelObjectiveCalendarInterval {
		return v.CalendarInterval
	}).(ServiceLevelObjectiveCalendarIntervalPtrOutput)
}

// If the interval is a rolling interval, this structure contains the interval specifications.
func (o ServiceLevelObjectiveIntervalOutput) RollingInterval() ServiceLevelObjectiveRollingIntervalPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveInterval) *ServiceLevelObjectiveRollingInterval { return v.RollingInterval }).(ServiceLevelObjectiveRollingIntervalPtrOutput)
}

type ServiceLevelObjectiveIntervalPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveInterval)(nil)).Elem()
}

func (o ServiceLevelObjectiveIntervalPtrOutput) ToServiceLevelObjectiveIntervalPtrOutput() ServiceLevelObjectiveIntervalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveIntervalPtrOutput) ToServiceLevelObjectiveIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveIntervalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveIntervalPtrOutput) Elem() ServiceLevelObjectiveIntervalOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveInterval) ServiceLevelObjectiveInterval {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveInterval
		return ret
	}).(ServiceLevelObjectiveIntervalOutput)
}

// If the interval is a calendar interval, this structure contains the interval specifications.
func (o ServiceLevelObjectiveIntervalPtrOutput) CalendarInterval() ServiceLevelObjectiveCalendarIntervalPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveInterval) *ServiceLevelObjectiveCalendarInterval {
		if v == nil {
			return nil
		}
		return v.CalendarInterval
	}).(ServiceLevelObjectiveCalendarIntervalPtrOutput)
}

// If the interval is a rolling interval, this structure contains the interval specifications.
func (o ServiceLevelObjectiveIntervalPtrOutput) RollingInterval() ServiceLevelObjectiveRollingIntervalPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveInterval) *ServiceLevelObjectiveRollingInterval {
		if v == nil {
			return nil
		}
		return v.RollingInterval
	}).(ServiceLevelObjectiveRollingIntervalPtrOutput)
}

// This structure defines the metric used for a service level indicator, including the metric name, namespace, and dimensions.
type ServiceLevelObjectiveMetric struct {
	// An array of one or more dimensions to use to define the metric that you want to use.
	Dimensions []ServiceLevelObjectiveDimension `pulumi:"dimensions"`
	// The name of the metric to use.
	MetricName *string `pulumi:"metricName"`
	// The namespace of the metric.
	Namespace *string `pulumi:"namespace"`
}

// ServiceLevelObjectiveMetricInput is an input type that accepts ServiceLevelObjectiveMetricArgs and ServiceLevelObjectiveMetricOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMetricInput` via:
//
//	ServiceLevelObjectiveMetricArgs{...}
type ServiceLevelObjectiveMetricInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMetricOutput() ServiceLevelObjectiveMetricOutput
	ToServiceLevelObjectiveMetricOutputWithContext(context.Context) ServiceLevelObjectiveMetricOutput
}

// This structure defines the metric used for a service level indicator, including the metric name, namespace, and dimensions.
type ServiceLevelObjectiveMetricArgs struct {
	// An array of one or more dimensions to use to define the metric that you want to use.
	Dimensions ServiceLevelObjectiveDimensionArrayInput `pulumi:"dimensions"`
	// The name of the metric to use.
	MetricName pulumi.StringPtrInput `pulumi:"metricName"`
	// The namespace of the metric.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ServiceLevelObjectiveMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMetric)(nil)).Elem()
}

func (i ServiceLevelObjectiveMetricArgs) ToServiceLevelObjectiveMetricOutput() ServiceLevelObjectiveMetricOutput {
	return i.ToServiceLevelObjectiveMetricOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMetricArgs) ToServiceLevelObjectiveMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricOutput)
}

func (i ServiceLevelObjectiveMetricArgs) ToServiceLevelObjectiveMetricPtrOutput() ServiceLevelObjectiveMetricPtrOutput {
	return i.ToServiceLevelObjectiveMetricPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMetricArgs) ToServiceLevelObjectiveMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricOutput).ToServiceLevelObjectiveMetricPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveMetricPtrInput is an input type that accepts ServiceLevelObjectiveMetricArgs, ServiceLevelObjectiveMetricPtr and ServiceLevelObjectiveMetricPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMetricPtrInput` via:
//
//	        ServiceLevelObjectiveMetricArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveMetricPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMetricPtrOutput() ServiceLevelObjectiveMetricPtrOutput
	ToServiceLevelObjectiveMetricPtrOutputWithContext(context.Context) ServiceLevelObjectiveMetricPtrOutput
}

type serviceLevelObjectiveMetricPtrType ServiceLevelObjectiveMetricArgs

func ServiceLevelObjectiveMetricPtr(v *ServiceLevelObjectiveMetricArgs) ServiceLevelObjectiveMetricPtrInput {
	return (*serviceLevelObjectiveMetricPtrType)(v)
}

func (*serviceLevelObjectiveMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveMetric)(nil)).Elem()
}

func (i *serviceLevelObjectiveMetricPtrType) ToServiceLevelObjectiveMetricPtrOutput() ServiceLevelObjectiveMetricPtrOutput {
	return i.ToServiceLevelObjectiveMetricPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveMetricPtrType) ToServiceLevelObjectiveMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricPtrOutput)
}

// This structure defines the metric used for a service level indicator, including the metric name, namespace, and dimensions.
type ServiceLevelObjectiveMetricOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveMetricOutput) ToServiceLevelObjectiveMetricOutput() ServiceLevelObjectiveMetricOutput {
	return o
}

func (o ServiceLevelObjectiveMetricOutput) ToServiceLevelObjectiveMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricOutput {
	return o
}

func (o ServiceLevelObjectiveMetricOutput) ToServiceLevelObjectiveMetricPtrOutput() ServiceLevelObjectiveMetricPtrOutput {
	return o.ToServiceLevelObjectiveMetricPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveMetricOutput) ToServiceLevelObjectiveMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveMetric) *ServiceLevelObjectiveMetric {
		return &v
	}).(ServiceLevelObjectiveMetricPtrOutput)
}

// An array of one or more dimensions to use to define the metric that you want to use.
func (o ServiceLevelObjectiveMetricOutput) Dimensions() ServiceLevelObjectiveDimensionArrayOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetric) []ServiceLevelObjectiveDimension { return v.Dimensions }).(ServiceLevelObjectiveDimensionArrayOutput)
}

// The name of the metric to use.
func (o ServiceLevelObjectiveMetricOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetric) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The namespace of the metric.
func (o ServiceLevelObjectiveMetricOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ServiceLevelObjectiveMetricPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveMetricPtrOutput) ToServiceLevelObjectiveMetricPtrOutput() ServiceLevelObjectiveMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveMetricPtrOutput) ToServiceLevelObjectiveMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveMetricPtrOutput) Elem() ServiceLevelObjectiveMetricOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetric) ServiceLevelObjectiveMetric {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveMetric
		return ret
	}).(ServiceLevelObjectiveMetricOutput)
}

// An array of one or more dimensions to use to define the metric that you want to use.
func (o ServiceLevelObjectiveMetricPtrOutput) Dimensions() ServiceLevelObjectiveDimensionArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetric) []ServiceLevelObjectiveDimension {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(ServiceLevelObjectiveDimensionArrayOutput)
}

// The name of the metric to use.
func (o ServiceLevelObjectiveMetricPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetric) *string {
		if v == nil {
			return nil
		}
		return v.MetricName
	}).(pulumi.StringPtrOutput)
}

// The namespace of the metric.
func (o ServiceLevelObjectiveMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetric) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Use this structure to define a metric or metric math expression that you want to use as for a service level objective.
// Each `MetricDataQuery` in the `MetricDataQueries` array specifies either a metric to retrieve, or a metric math expression to be performed on retrieved metrics. A single `MetricDataQueries` array can include as many as 20 `MetricDataQuery` structures in the array. The 20 structures can include as many as 10 structures that contain a `MetricStat` parameter to retrieve a metric, and as many as 10 structures that contain the `Expression` parameter to perform a math expression. Of those Expression structures, exactly one must have true as the value for `ReturnData`. The result of this expression used for the SLO.
type ServiceLevelObjectiveMetricDataQuery struct {
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	AccountId *string `pulumi:"accountId"`
	// The math expression to be performed on the returned data.
	Expression *string `pulumi:"expression"`
	// A short name used to tie this object to the results in the response.
	Id string `pulumi:"id"`
	// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery, you must specify either Expression or MetricStat but not both.
	MetricStat *ServiceLevelObjectiveMetricStat `pulumi:"metricStat"`
	// This option indicates whether to return the timestamps and raw data values of this metric.
	ReturnData *bool `pulumi:"returnData"`
}

// ServiceLevelObjectiveMetricDataQueryInput is an input type that accepts ServiceLevelObjectiveMetricDataQueryArgs and ServiceLevelObjectiveMetricDataQueryOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMetricDataQueryInput` via:
//
//	ServiceLevelObjectiveMetricDataQueryArgs{...}
type ServiceLevelObjectiveMetricDataQueryInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMetricDataQueryOutput() ServiceLevelObjectiveMetricDataQueryOutput
	ToServiceLevelObjectiveMetricDataQueryOutputWithContext(context.Context) ServiceLevelObjectiveMetricDataQueryOutput
}

// Use this structure to define a metric or metric math expression that you want to use as for a service level objective.
// Each `MetricDataQuery` in the `MetricDataQueries` array specifies either a metric to retrieve, or a metric math expression to be performed on retrieved metrics. A single `MetricDataQueries` array can include as many as 20 `MetricDataQuery` structures in the array. The 20 structures can include as many as 10 structures that contain a `MetricStat` parameter to retrieve a metric, and as many as 10 structures that contain the `Expression` parameter to perform a math expression. Of those Expression structures, exactly one must have true as the value for `ReturnData`. The result of this expression used for the SLO.
type ServiceLevelObjectiveMetricDataQueryArgs struct {
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// The math expression to be performed on the returned data.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// A short name used to tie this object to the results in the response.
	Id pulumi.StringInput `pulumi:"id"`
	// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery, you must specify either Expression or MetricStat but not both.
	MetricStat ServiceLevelObjectiveMetricStatPtrInput `pulumi:"metricStat"`
	// This option indicates whether to return the timestamps and raw data values of this metric.
	ReturnData pulumi.BoolPtrInput `pulumi:"returnData"`
}

func (ServiceLevelObjectiveMetricDataQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMetricDataQuery)(nil)).Elem()
}

func (i ServiceLevelObjectiveMetricDataQueryArgs) ToServiceLevelObjectiveMetricDataQueryOutput() ServiceLevelObjectiveMetricDataQueryOutput {
	return i.ToServiceLevelObjectiveMetricDataQueryOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMetricDataQueryArgs) ToServiceLevelObjectiveMetricDataQueryOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricDataQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricDataQueryOutput)
}

// ServiceLevelObjectiveMetricDataQueryArrayInput is an input type that accepts ServiceLevelObjectiveMetricDataQueryArray and ServiceLevelObjectiveMetricDataQueryArrayOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMetricDataQueryArrayInput` via:
//
//	ServiceLevelObjectiveMetricDataQueryArray{ ServiceLevelObjectiveMetricDataQueryArgs{...} }
type ServiceLevelObjectiveMetricDataQueryArrayInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMetricDataQueryArrayOutput() ServiceLevelObjectiveMetricDataQueryArrayOutput
	ToServiceLevelObjectiveMetricDataQueryArrayOutputWithContext(context.Context) ServiceLevelObjectiveMetricDataQueryArrayOutput
}

type ServiceLevelObjectiveMetricDataQueryArray []ServiceLevelObjectiveMetricDataQueryInput

func (ServiceLevelObjectiveMetricDataQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveMetricDataQuery)(nil)).Elem()
}

func (i ServiceLevelObjectiveMetricDataQueryArray) ToServiceLevelObjectiveMetricDataQueryArrayOutput() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return i.ToServiceLevelObjectiveMetricDataQueryArrayOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMetricDataQueryArray) ToServiceLevelObjectiveMetricDataQueryArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

// Use this structure to define a metric or metric math expression that you want to use as for a service level objective.
// Each `MetricDataQuery` in the `MetricDataQueries` array specifies either a metric to retrieve, or a metric math expression to be performed on retrieved metrics. A single `MetricDataQueries` array can include as many as 20 `MetricDataQuery` structures in the array. The 20 structures can include as many as 10 structures that contain a `MetricStat` parameter to retrieve a metric, and as many as 10 structures that contain the `Expression` parameter to perform a math expression. Of those Expression structures, exactly one must have true as the value for `ReturnData`. The result of this expression used for the SLO.
type ServiceLevelObjectiveMetricDataQueryOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMetricDataQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMetricDataQuery)(nil)).Elem()
}

func (o ServiceLevelObjectiveMetricDataQueryOutput) ToServiceLevelObjectiveMetricDataQueryOutput() ServiceLevelObjectiveMetricDataQueryOutput {
	return o
}

func (o ServiceLevelObjectiveMetricDataQueryOutput) ToServiceLevelObjectiveMetricDataQueryOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricDataQueryOutput {
	return o
}

// The ID of the account where the metrics are located, if this is a cross-account alarm.
func (o ServiceLevelObjectiveMetricDataQueryOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricDataQuery) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The math expression to be performed on the returned data.
func (o ServiceLevelObjectiveMetricDataQueryOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricDataQuery) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// A short name used to tie this object to the results in the response.
func (o ServiceLevelObjectiveMetricDataQueryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricDataQuery) string { return v.Id }).(pulumi.StringOutput)
}

// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery, you must specify either Expression or MetricStat but not both.
func (o ServiceLevelObjectiveMetricDataQueryOutput) MetricStat() ServiceLevelObjectiveMetricStatPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricDataQuery) *ServiceLevelObjectiveMetricStat { return v.MetricStat }).(ServiceLevelObjectiveMetricStatPtrOutput)
}

// This option indicates whether to return the timestamps and raw data values of this metric.
func (o ServiceLevelObjectiveMetricDataQueryOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricDataQuery) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type ServiceLevelObjectiveMetricDataQueryArrayOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMetricDataQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLevelObjectiveMetricDataQuery)(nil)).Elem()
}

func (o ServiceLevelObjectiveMetricDataQueryArrayOutput) ToServiceLevelObjectiveMetricDataQueryArrayOutput() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o
}

func (o ServiceLevelObjectiveMetricDataQueryArrayOutput) ToServiceLevelObjectiveMetricDataQueryArrayOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o
}

func (o ServiceLevelObjectiveMetricDataQueryArrayOutput) Index(i pulumi.IntInput) ServiceLevelObjectiveMetricDataQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLevelObjectiveMetricDataQuery {
		return vs[0].([]ServiceLevelObjectiveMetricDataQuery)[vs[1].(int)]
	}).(ServiceLevelObjectiveMetricDataQueryOutput)
}

// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
type ServiceLevelObjectiveMetricStat struct {
	Metric ServiceLevelObjectiveMetric `pulumi:"metric"`
	// The granularity, in seconds, to be used for the metric.
	Period int `pulumi:"period"`
	// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic.
	Stat string `pulumi:"stat"`
	// If you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
	Unit *string `pulumi:"unit"`
}

// ServiceLevelObjectiveMetricStatInput is an input type that accepts ServiceLevelObjectiveMetricStatArgs and ServiceLevelObjectiveMetricStatOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMetricStatInput` via:
//
//	ServiceLevelObjectiveMetricStatArgs{...}
type ServiceLevelObjectiveMetricStatInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMetricStatOutput() ServiceLevelObjectiveMetricStatOutput
	ToServiceLevelObjectiveMetricStatOutputWithContext(context.Context) ServiceLevelObjectiveMetricStatOutput
}

// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
type ServiceLevelObjectiveMetricStatArgs struct {
	Metric ServiceLevelObjectiveMetricInput `pulumi:"metric"`
	// The granularity, in seconds, to be used for the metric.
	Period pulumi.IntInput `pulumi:"period"`
	// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic.
	Stat pulumi.StringInput `pulumi:"stat"`
	// If you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (ServiceLevelObjectiveMetricStatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMetricStat)(nil)).Elem()
}

func (i ServiceLevelObjectiveMetricStatArgs) ToServiceLevelObjectiveMetricStatOutput() ServiceLevelObjectiveMetricStatOutput {
	return i.ToServiceLevelObjectiveMetricStatOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMetricStatArgs) ToServiceLevelObjectiveMetricStatOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricStatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricStatOutput)
}

func (i ServiceLevelObjectiveMetricStatArgs) ToServiceLevelObjectiveMetricStatPtrOutput() ServiceLevelObjectiveMetricStatPtrOutput {
	return i.ToServiceLevelObjectiveMetricStatPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMetricStatArgs) ToServiceLevelObjectiveMetricStatPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricStatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricStatOutput).ToServiceLevelObjectiveMetricStatPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveMetricStatPtrInput is an input type that accepts ServiceLevelObjectiveMetricStatArgs, ServiceLevelObjectiveMetricStatPtr and ServiceLevelObjectiveMetricStatPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMetricStatPtrInput` via:
//
//	        ServiceLevelObjectiveMetricStatArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveMetricStatPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMetricStatPtrOutput() ServiceLevelObjectiveMetricStatPtrOutput
	ToServiceLevelObjectiveMetricStatPtrOutputWithContext(context.Context) ServiceLevelObjectiveMetricStatPtrOutput
}

type serviceLevelObjectiveMetricStatPtrType ServiceLevelObjectiveMetricStatArgs

func ServiceLevelObjectiveMetricStatPtr(v *ServiceLevelObjectiveMetricStatArgs) ServiceLevelObjectiveMetricStatPtrInput {
	return (*serviceLevelObjectiveMetricStatPtrType)(v)
}

func (*serviceLevelObjectiveMetricStatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveMetricStat)(nil)).Elem()
}

func (i *serviceLevelObjectiveMetricStatPtrType) ToServiceLevelObjectiveMetricStatPtrOutput() ServiceLevelObjectiveMetricStatPtrOutput {
	return i.ToServiceLevelObjectiveMetricStatPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveMetricStatPtrType) ToServiceLevelObjectiveMetricStatPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricStatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMetricStatPtrOutput)
}

// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
type ServiceLevelObjectiveMetricStatOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMetricStatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMetricStat)(nil)).Elem()
}

func (o ServiceLevelObjectiveMetricStatOutput) ToServiceLevelObjectiveMetricStatOutput() ServiceLevelObjectiveMetricStatOutput {
	return o
}

func (o ServiceLevelObjectiveMetricStatOutput) ToServiceLevelObjectiveMetricStatOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricStatOutput {
	return o
}

func (o ServiceLevelObjectiveMetricStatOutput) ToServiceLevelObjectiveMetricStatPtrOutput() ServiceLevelObjectiveMetricStatPtrOutput {
	return o.ToServiceLevelObjectiveMetricStatPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveMetricStatOutput) ToServiceLevelObjectiveMetricStatPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricStatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveMetricStat) *ServiceLevelObjectiveMetricStat {
		return &v
	}).(ServiceLevelObjectiveMetricStatPtrOutput)
}

func (o ServiceLevelObjectiveMetricStatOutput) Metric() ServiceLevelObjectiveMetricOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricStat) ServiceLevelObjectiveMetric { return v.Metric }).(ServiceLevelObjectiveMetricOutput)
}

// The granularity, in seconds, to be used for the metric.
func (o ServiceLevelObjectiveMetricStatOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricStat) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic.
func (o ServiceLevelObjectiveMetricStatOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricStat) string { return v.Stat }).(pulumi.StringOutput)
}

// If you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
func (o ServiceLevelObjectiveMetricStatOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMetricStat) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type ServiceLevelObjectiveMetricStatPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMetricStatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveMetricStat)(nil)).Elem()
}

func (o ServiceLevelObjectiveMetricStatPtrOutput) ToServiceLevelObjectiveMetricStatPtrOutput() ServiceLevelObjectiveMetricStatPtrOutput {
	return o
}

func (o ServiceLevelObjectiveMetricStatPtrOutput) ToServiceLevelObjectiveMetricStatPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMetricStatPtrOutput {
	return o
}

func (o ServiceLevelObjectiveMetricStatPtrOutput) Elem() ServiceLevelObjectiveMetricStatOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetricStat) ServiceLevelObjectiveMetricStat {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveMetricStat
		return ret
	}).(ServiceLevelObjectiveMetricStatOutput)
}

func (o ServiceLevelObjectiveMetricStatPtrOutput) Metric() ServiceLevelObjectiveMetricPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetricStat) *ServiceLevelObjectiveMetric {
		if v == nil {
			return nil
		}
		return &v.Metric
	}).(ServiceLevelObjectiveMetricPtrOutput)
}

// The granularity, in seconds, to be used for the metric.
func (o ServiceLevelObjectiveMetricStatPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetricStat) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic.
func (o ServiceLevelObjectiveMetricStatPtrOutput) Stat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetricStat) *string {
		if v == nil {
			return nil
		}
		return &v.Stat
	}).(pulumi.StringPtrOutput)
}

// If you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
func (o ServiceLevelObjectiveMetricStatPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMetricStat) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// This structure defines the metric that is used as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` is divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
type ServiceLevelObjectiveMonitoredRequestCountMetric struct {
	// If you want to count "bad requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "bad requests" in this structure.
	BadCountMetric []ServiceLevelObjectiveMetricDataQuery `pulumi:"badCountMetric"`
	// If you want to count "good requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "good requests" in this structure.
	GoodCountMetric []ServiceLevelObjectiveMetricDataQuery `pulumi:"goodCountMetric"`
}

// ServiceLevelObjectiveMonitoredRequestCountMetricInput is an input type that accepts ServiceLevelObjectiveMonitoredRequestCountMetricArgs and ServiceLevelObjectiveMonitoredRequestCountMetricOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMonitoredRequestCountMetricInput` via:
//
//	ServiceLevelObjectiveMonitoredRequestCountMetricArgs{...}
type ServiceLevelObjectiveMonitoredRequestCountMetricInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMonitoredRequestCountMetricOutput() ServiceLevelObjectiveMonitoredRequestCountMetricOutput
	ToServiceLevelObjectiveMonitoredRequestCountMetricOutputWithContext(context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricOutput
}

// This structure defines the metric that is used as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` is divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
type ServiceLevelObjectiveMonitoredRequestCountMetricArgs struct {
	// If you want to count "bad requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "bad requests" in this structure.
	BadCountMetric ServiceLevelObjectiveMetricDataQueryArrayInput `pulumi:"badCountMetric"`
	// If you want to count "good requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "good requests" in this structure.
	GoodCountMetric ServiceLevelObjectiveMetricDataQueryArrayInput `pulumi:"goodCountMetric"`
}

func (ServiceLevelObjectiveMonitoredRequestCountMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMonitoredRequestCountMetric)(nil)).Elem()
}

func (i ServiceLevelObjectiveMonitoredRequestCountMetricArgs) ToServiceLevelObjectiveMonitoredRequestCountMetricOutput() ServiceLevelObjectiveMonitoredRequestCountMetricOutput {
	return i.ToServiceLevelObjectiveMonitoredRequestCountMetricOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMonitoredRequestCountMetricArgs) ToServiceLevelObjectiveMonitoredRequestCountMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMonitoredRequestCountMetricOutput)
}

func (i ServiceLevelObjectiveMonitoredRequestCountMetricArgs) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput() ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return i.ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveMonitoredRequestCountMetricArgs) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMonitoredRequestCountMetricOutput).ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveMonitoredRequestCountMetricPtrInput is an input type that accepts ServiceLevelObjectiveMonitoredRequestCountMetricArgs, ServiceLevelObjectiveMonitoredRequestCountMetricPtr and ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveMonitoredRequestCountMetricPtrInput` via:
//
//	        ServiceLevelObjectiveMonitoredRequestCountMetricArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveMonitoredRequestCountMetricPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput() ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput
	ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput
}

type serviceLevelObjectiveMonitoredRequestCountMetricPtrType ServiceLevelObjectiveMonitoredRequestCountMetricArgs

func ServiceLevelObjectiveMonitoredRequestCountMetricPtr(v *ServiceLevelObjectiveMonitoredRequestCountMetricArgs) ServiceLevelObjectiveMonitoredRequestCountMetricPtrInput {
	return (*serviceLevelObjectiveMonitoredRequestCountMetricPtrType)(v)
}

func (*serviceLevelObjectiveMonitoredRequestCountMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveMonitoredRequestCountMetric)(nil)).Elem()
}

func (i *serviceLevelObjectiveMonitoredRequestCountMetricPtrType) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput() ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return i.ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveMonitoredRequestCountMetricPtrType) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput)
}

// This structure defines the metric that is used as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` is divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
type ServiceLevelObjectiveMonitoredRequestCountMetricOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMonitoredRequestCountMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveMonitoredRequestCountMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveMonitoredRequestCountMetricOutput) ToServiceLevelObjectiveMonitoredRequestCountMetricOutput() ServiceLevelObjectiveMonitoredRequestCountMetricOutput {
	return o
}

func (o ServiceLevelObjectiveMonitoredRequestCountMetricOutput) ToServiceLevelObjectiveMonitoredRequestCountMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricOutput {
	return o
}

func (o ServiceLevelObjectiveMonitoredRequestCountMetricOutput) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput() ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return o.ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveMonitoredRequestCountMetricOutput) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveMonitoredRequestCountMetric) *ServiceLevelObjectiveMonitoredRequestCountMetric {
		return &v
	}).(ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput)
}

// If you want to count "bad requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "bad requests" in this structure.
func (o ServiceLevelObjectiveMonitoredRequestCountMetricOutput) BadCountMetric() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMonitoredRequestCountMetric) []ServiceLevelObjectiveMetricDataQuery {
		return v.BadCountMetric
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

// If you want to count "good requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "good requests" in this structure.
func (o ServiceLevelObjectiveMonitoredRequestCountMetricOutput) GoodCountMetric() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveMonitoredRequestCountMetric) []ServiceLevelObjectiveMetricDataQuery {
		return v.GoodCountMetric
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

type ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveMonitoredRequestCountMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput() ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput) ToServiceLevelObjectiveMonitoredRequestCountMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput) Elem() ServiceLevelObjectiveMonitoredRequestCountMetricOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMonitoredRequestCountMetric) ServiceLevelObjectiveMonitoredRequestCountMetric {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveMonitoredRequestCountMetric
		return ret
	}).(ServiceLevelObjectiveMonitoredRequestCountMetricOutput)
}

// If you want to count "bad requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "bad requests" in this structure.
func (o ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput) BadCountMetric() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMonitoredRequestCountMetric) []ServiceLevelObjectiveMetricDataQuery {
		if v == nil {
			return nil
		}
		return v.BadCountMetric
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

// If you want to count "good requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "good requests" in this structure.
func (o ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput) GoodCountMetric() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveMonitoredRequestCountMetric) []ServiceLevelObjectiveMetricDataQuery {
		if v == nil {
			return nil
		}
		return v.GoodCountMetric
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

// This object defines how often to repeat a time exclusion window.
type ServiceLevelObjectiveRecurrenceRule struct {
	// A cron or rate expression denoting how often to repeat this exclusion window.
	Expression string `pulumi:"expression"`
}

// ServiceLevelObjectiveRecurrenceRuleInput is an input type that accepts ServiceLevelObjectiveRecurrenceRuleArgs and ServiceLevelObjectiveRecurrenceRuleOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRecurrenceRuleInput` via:
//
//	ServiceLevelObjectiveRecurrenceRuleArgs{...}
type ServiceLevelObjectiveRecurrenceRuleInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRecurrenceRuleOutput() ServiceLevelObjectiveRecurrenceRuleOutput
	ToServiceLevelObjectiveRecurrenceRuleOutputWithContext(context.Context) ServiceLevelObjectiveRecurrenceRuleOutput
}

// This object defines how often to repeat a time exclusion window.
type ServiceLevelObjectiveRecurrenceRuleArgs struct {
	// A cron or rate expression denoting how often to repeat this exclusion window.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (ServiceLevelObjectiveRecurrenceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRecurrenceRule)(nil)).Elem()
}

func (i ServiceLevelObjectiveRecurrenceRuleArgs) ToServiceLevelObjectiveRecurrenceRuleOutput() ServiceLevelObjectiveRecurrenceRuleOutput {
	return i.ToServiceLevelObjectiveRecurrenceRuleOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRecurrenceRuleArgs) ToServiceLevelObjectiveRecurrenceRuleOutputWithContext(ctx context.Context) ServiceLevelObjectiveRecurrenceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRecurrenceRuleOutput)
}

func (i ServiceLevelObjectiveRecurrenceRuleArgs) ToServiceLevelObjectiveRecurrenceRulePtrOutput() ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return i.ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRecurrenceRuleArgs) ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRecurrenceRuleOutput).ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveRecurrenceRulePtrInput is an input type that accepts ServiceLevelObjectiveRecurrenceRuleArgs, ServiceLevelObjectiveRecurrenceRulePtr and ServiceLevelObjectiveRecurrenceRulePtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRecurrenceRulePtrInput` via:
//
//	        ServiceLevelObjectiveRecurrenceRuleArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveRecurrenceRulePtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRecurrenceRulePtrOutput() ServiceLevelObjectiveRecurrenceRulePtrOutput
	ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(context.Context) ServiceLevelObjectiveRecurrenceRulePtrOutput
}

type serviceLevelObjectiveRecurrenceRulePtrType ServiceLevelObjectiveRecurrenceRuleArgs

func ServiceLevelObjectiveRecurrenceRulePtr(v *ServiceLevelObjectiveRecurrenceRuleArgs) ServiceLevelObjectiveRecurrenceRulePtrInput {
	return (*serviceLevelObjectiveRecurrenceRulePtrType)(v)
}

func (*serviceLevelObjectiveRecurrenceRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRecurrenceRule)(nil)).Elem()
}

func (i *serviceLevelObjectiveRecurrenceRulePtrType) ToServiceLevelObjectiveRecurrenceRulePtrOutput() ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return i.ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveRecurrenceRulePtrType) ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRecurrenceRulePtrOutput)
}

// This object defines how often to repeat a time exclusion window.
type ServiceLevelObjectiveRecurrenceRuleOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRecurrenceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRecurrenceRule)(nil)).Elem()
}

func (o ServiceLevelObjectiveRecurrenceRuleOutput) ToServiceLevelObjectiveRecurrenceRuleOutput() ServiceLevelObjectiveRecurrenceRuleOutput {
	return o
}

func (o ServiceLevelObjectiveRecurrenceRuleOutput) ToServiceLevelObjectiveRecurrenceRuleOutputWithContext(ctx context.Context) ServiceLevelObjectiveRecurrenceRuleOutput {
	return o
}

func (o ServiceLevelObjectiveRecurrenceRuleOutput) ToServiceLevelObjectiveRecurrenceRulePtrOutput() ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return o.ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveRecurrenceRuleOutput) ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveRecurrenceRule) *ServiceLevelObjectiveRecurrenceRule {
		return &v
	}).(ServiceLevelObjectiveRecurrenceRulePtrOutput)
}

// A cron or rate expression denoting how often to repeat this exclusion window.
func (o ServiceLevelObjectiveRecurrenceRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRecurrenceRule) string { return v.Expression }).(pulumi.StringOutput)
}

type ServiceLevelObjectiveRecurrenceRulePtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRecurrenceRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRecurrenceRule)(nil)).Elem()
}

func (o ServiceLevelObjectiveRecurrenceRulePtrOutput) ToServiceLevelObjectiveRecurrenceRulePtrOutput() ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return o
}

func (o ServiceLevelObjectiveRecurrenceRulePtrOutput) ToServiceLevelObjectiveRecurrenceRulePtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRecurrenceRulePtrOutput {
	return o
}

func (o ServiceLevelObjectiveRecurrenceRulePtrOutput) Elem() ServiceLevelObjectiveRecurrenceRuleOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRecurrenceRule) ServiceLevelObjectiveRecurrenceRule {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveRecurrenceRule
		return ret
	}).(ServiceLevelObjectiveRecurrenceRuleOutput)
}

// A cron or rate expression denoting how often to repeat this exclusion window.
func (o ServiceLevelObjectiveRecurrenceRulePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRecurrenceRule) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// This structure contains information about the performance metric that a request-based SLO monitors.
type ServiceLevelObjectiveRequestBasedSli struct {
	// The arithmetic operation used when comparing the specified metric to the threshold.
	ComparisonOperator *ServiceLevelObjectiveRequestBasedSliComparisonOperator `pulumi:"comparisonOperator"`
	// The value that the SLI metric is compared to.
	MetricThreshold *float64 `pulumi:"metricThreshold"`
	// A structure that contains information about the metric that the SLO monitors.
	RequestBasedSliMetric ServiceLevelObjectiveRequestBasedSliMetric `pulumi:"requestBasedSliMetric"`
}

// ServiceLevelObjectiveRequestBasedSliInput is an input type that accepts ServiceLevelObjectiveRequestBasedSliArgs and ServiceLevelObjectiveRequestBasedSliOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRequestBasedSliInput` via:
//
//	ServiceLevelObjectiveRequestBasedSliArgs{...}
type ServiceLevelObjectiveRequestBasedSliInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRequestBasedSliOutput() ServiceLevelObjectiveRequestBasedSliOutput
	ToServiceLevelObjectiveRequestBasedSliOutputWithContext(context.Context) ServiceLevelObjectiveRequestBasedSliOutput
}

// This structure contains information about the performance metric that a request-based SLO monitors.
type ServiceLevelObjectiveRequestBasedSliArgs struct {
	// The arithmetic operation used when comparing the specified metric to the threshold.
	ComparisonOperator ServiceLevelObjectiveRequestBasedSliComparisonOperatorPtrInput `pulumi:"comparisonOperator"`
	// The value that the SLI metric is compared to.
	MetricThreshold pulumi.Float64PtrInput `pulumi:"metricThreshold"`
	// A structure that contains information about the metric that the SLO monitors.
	RequestBasedSliMetric ServiceLevelObjectiveRequestBasedSliMetricInput `pulumi:"requestBasedSliMetric"`
}

func (ServiceLevelObjectiveRequestBasedSliArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSli)(nil)).Elem()
}

func (i ServiceLevelObjectiveRequestBasedSliArgs) ToServiceLevelObjectiveRequestBasedSliOutput() ServiceLevelObjectiveRequestBasedSliOutput {
	return i.ToServiceLevelObjectiveRequestBasedSliOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRequestBasedSliArgs) ToServiceLevelObjectiveRequestBasedSliOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRequestBasedSliOutput)
}

func (i ServiceLevelObjectiveRequestBasedSliArgs) ToServiceLevelObjectiveRequestBasedSliPtrOutput() ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return i.ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRequestBasedSliArgs) ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRequestBasedSliOutput).ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveRequestBasedSliPtrInput is an input type that accepts ServiceLevelObjectiveRequestBasedSliArgs, ServiceLevelObjectiveRequestBasedSliPtr and ServiceLevelObjectiveRequestBasedSliPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRequestBasedSliPtrInput` via:
//
//	        ServiceLevelObjectiveRequestBasedSliArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveRequestBasedSliPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRequestBasedSliPtrOutput() ServiceLevelObjectiveRequestBasedSliPtrOutput
	ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(context.Context) ServiceLevelObjectiveRequestBasedSliPtrOutput
}

type serviceLevelObjectiveRequestBasedSliPtrType ServiceLevelObjectiveRequestBasedSliArgs

func ServiceLevelObjectiveRequestBasedSliPtr(v *ServiceLevelObjectiveRequestBasedSliArgs) ServiceLevelObjectiveRequestBasedSliPtrInput {
	return (*serviceLevelObjectiveRequestBasedSliPtrType)(v)
}

func (*serviceLevelObjectiveRequestBasedSliPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRequestBasedSli)(nil)).Elem()
}

func (i *serviceLevelObjectiveRequestBasedSliPtrType) ToServiceLevelObjectiveRequestBasedSliPtrOutput() ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return i.ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveRequestBasedSliPtrType) ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRequestBasedSliPtrOutput)
}

// This structure contains information about the performance metric that a request-based SLO monitors.
type ServiceLevelObjectiveRequestBasedSliOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRequestBasedSliOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSli)(nil)).Elem()
}

func (o ServiceLevelObjectiveRequestBasedSliOutput) ToServiceLevelObjectiveRequestBasedSliOutput() ServiceLevelObjectiveRequestBasedSliOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliOutput) ToServiceLevelObjectiveRequestBasedSliOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliOutput) ToServiceLevelObjectiveRequestBasedSliPtrOutput() ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return o.ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveRequestBasedSliOutput) ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveRequestBasedSli) *ServiceLevelObjectiveRequestBasedSli {
		return &v
	}).(ServiceLevelObjectiveRequestBasedSliPtrOutput)
}

// The arithmetic operation used when comparing the specified metric to the threshold.
func (o ServiceLevelObjectiveRequestBasedSliOutput) ComparisonOperator() ServiceLevelObjectiveRequestBasedSliComparisonOperatorPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSli) *ServiceLevelObjectiveRequestBasedSliComparisonOperator {
		return v.ComparisonOperator
	}).(ServiceLevelObjectiveRequestBasedSliComparisonOperatorPtrOutput)
}

// The value that the SLI metric is compared to.
func (o ServiceLevelObjectiveRequestBasedSliOutput) MetricThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSli) *float64 { return v.MetricThreshold }).(pulumi.Float64PtrOutput)
}

// A structure that contains information about the metric that the SLO monitors.
func (o ServiceLevelObjectiveRequestBasedSliOutput) RequestBasedSliMetric() ServiceLevelObjectiveRequestBasedSliMetricOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSli) ServiceLevelObjectiveRequestBasedSliMetric {
		return v.RequestBasedSliMetric
	}).(ServiceLevelObjectiveRequestBasedSliMetricOutput)
}

type ServiceLevelObjectiveRequestBasedSliPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRequestBasedSliPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRequestBasedSli)(nil)).Elem()
}

func (o ServiceLevelObjectiveRequestBasedSliPtrOutput) ToServiceLevelObjectiveRequestBasedSliPtrOutput() ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliPtrOutput) ToServiceLevelObjectiveRequestBasedSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliPtrOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliPtrOutput) Elem() ServiceLevelObjectiveRequestBasedSliOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSli) ServiceLevelObjectiveRequestBasedSli {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveRequestBasedSli
		return ret
	}).(ServiceLevelObjectiveRequestBasedSliOutput)
}

// The arithmetic operation used when comparing the specified metric to the threshold.
func (o ServiceLevelObjectiveRequestBasedSliPtrOutput) ComparisonOperator() ServiceLevelObjectiveRequestBasedSliComparisonOperatorPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSli) *ServiceLevelObjectiveRequestBasedSliComparisonOperator {
		if v == nil {
			return nil
		}
		return v.ComparisonOperator
	}).(ServiceLevelObjectiveRequestBasedSliComparisonOperatorPtrOutput)
}

// The value that the SLI metric is compared to.
func (o ServiceLevelObjectiveRequestBasedSliPtrOutput) MetricThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSli) *float64 {
		if v == nil {
			return nil
		}
		return v.MetricThreshold
	}).(pulumi.Float64PtrOutput)
}

// A structure that contains information about the metric that the SLO monitors.
func (o ServiceLevelObjectiveRequestBasedSliPtrOutput) RequestBasedSliMetric() ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSli) *ServiceLevelObjectiveRequestBasedSliMetric {
		if v == nil {
			return nil
		}
		return &v.RequestBasedSliMetric
	}).(ServiceLevelObjectiveRequestBasedSliMetricPtrOutput)
}

// This structure contains the information about the metric that is used for a request-based SLO.
type ServiceLevelObjectiveRequestBasedSliMetric struct {
	// This is a string-to-string map that contains information about the type of object that this SLO is related to. It can include the following fields.
	//
	// - `Type` designates the type of object that this SLO is related to.
	// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
	// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Environment` specifies the location where this object is hosted, or what it belongs to.
	// - `AwsAccountId` allows you to create an SLO for an object that exists in another account.
	KeyAttributes map[string]string `pulumi:"keyAttributes"`
	// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
	MetricType *ServiceLevelObjectiveRequestBasedSliMetricMetricType `pulumi:"metricType"`
	// Use this structure to define the metric that you want to use as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` will be divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
	MonitoredRequestCountMetric *ServiceLevelObjectiveMonitoredRequestCountMetric `pulumi:"monitoredRequestCountMetric"`
	// If the SLO monitors a specific operation of the service, this field displays that operation name.
	OperationName *string `pulumi:"operationName"`
	// This structure defines the metric that is used as the "total requests" number for a request-based SLO. The number observed for this metric is divided by the number of "good requests" or "bad requests" that is observed for the metric defined in `MonitoredRequestCountMetric`.
	TotalRequestCountMetric []ServiceLevelObjectiveMetricDataQuery `pulumi:"totalRequestCountMetric"`
}

// ServiceLevelObjectiveRequestBasedSliMetricInput is an input type that accepts ServiceLevelObjectiveRequestBasedSliMetricArgs and ServiceLevelObjectiveRequestBasedSliMetricOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRequestBasedSliMetricInput` via:
//
//	ServiceLevelObjectiveRequestBasedSliMetricArgs{...}
type ServiceLevelObjectiveRequestBasedSliMetricInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRequestBasedSliMetricOutput() ServiceLevelObjectiveRequestBasedSliMetricOutput
	ToServiceLevelObjectiveRequestBasedSliMetricOutputWithContext(context.Context) ServiceLevelObjectiveRequestBasedSliMetricOutput
}

// This structure contains the information about the metric that is used for a request-based SLO.
type ServiceLevelObjectiveRequestBasedSliMetricArgs struct {
	// This is a string-to-string map that contains information about the type of object that this SLO is related to. It can include the following fields.
	//
	// - `Type` designates the type of object that this SLO is related to.
	// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
	// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Environment` specifies the location where this object is hosted, or what it belongs to.
	// - `AwsAccountId` allows you to create an SLO for an object that exists in another account.
	KeyAttributes pulumi.StringMapInput `pulumi:"keyAttributes"`
	// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
	MetricType ServiceLevelObjectiveRequestBasedSliMetricMetricTypePtrInput `pulumi:"metricType"`
	// Use this structure to define the metric that you want to use as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` will be divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
	MonitoredRequestCountMetric ServiceLevelObjectiveMonitoredRequestCountMetricPtrInput `pulumi:"monitoredRequestCountMetric"`
	// If the SLO monitors a specific operation of the service, this field displays that operation name.
	OperationName pulumi.StringPtrInput `pulumi:"operationName"`
	// This structure defines the metric that is used as the "total requests" number for a request-based SLO. The number observed for this metric is divided by the number of "good requests" or "bad requests" that is observed for the metric defined in `MonitoredRequestCountMetric`.
	TotalRequestCountMetric ServiceLevelObjectiveMetricDataQueryArrayInput `pulumi:"totalRequestCountMetric"`
}

func (ServiceLevelObjectiveRequestBasedSliMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSliMetric)(nil)).Elem()
}

func (i ServiceLevelObjectiveRequestBasedSliMetricArgs) ToServiceLevelObjectiveRequestBasedSliMetricOutput() ServiceLevelObjectiveRequestBasedSliMetricOutput {
	return i.ToServiceLevelObjectiveRequestBasedSliMetricOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRequestBasedSliMetricArgs) ToServiceLevelObjectiveRequestBasedSliMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRequestBasedSliMetricOutput)
}

func (i ServiceLevelObjectiveRequestBasedSliMetricArgs) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutput() ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return i.ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRequestBasedSliMetricArgs) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRequestBasedSliMetricOutput).ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveRequestBasedSliMetricPtrInput is an input type that accepts ServiceLevelObjectiveRequestBasedSliMetricArgs, ServiceLevelObjectiveRequestBasedSliMetricPtr and ServiceLevelObjectiveRequestBasedSliMetricPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRequestBasedSliMetricPtrInput` via:
//
//	        ServiceLevelObjectiveRequestBasedSliMetricArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveRequestBasedSliMetricPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRequestBasedSliMetricPtrOutput() ServiceLevelObjectiveRequestBasedSliMetricPtrOutput
	ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(context.Context) ServiceLevelObjectiveRequestBasedSliMetricPtrOutput
}

type serviceLevelObjectiveRequestBasedSliMetricPtrType ServiceLevelObjectiveRequestBasedSliMetricArgs

func ServiceLevelObjectiveRequestBasedSliMetricPtr(v *ServiceLevelObjectiveRequestBasedSliMetricArgs) ServiceLevelObjectiveRequestBasedSliMetricPtrInput {
	return (*serviceLevelObjectiveRequestBasedSliMetricPtrType)(v)
}

func (*serviceLevelObjectiveRequestBasedSliMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRequestBasedSliMetric)(nil)).Elem()
}

func (i *serviceLevelObjectiveRequestBasedSliMetricPtrType) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutput() ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return i.ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveRequestBasedSliMetricPtrType) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRequestBasedSliMetricPtrOutput)
}

// This structure contains the information about the metric that is used for a request-based SLO.
type ServiceLevelObjectiveRequestBasedSliMetricOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRequestBasedSliMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSliMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) ToServiceLevelObjectiveRequestBasedSliMetricOutput() ServiceLevelObjectiveRequestBasedSliMetricOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) ToServiceLevelObjectiveRequestBasedSliMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliMetricOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutput() ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return o.ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveRequestBasedSliMetric) *ServiceLevelObjectiveRequestBasedSliMetric {
		return &v
	}).(ServiceLevelObjectiveRequestBasedSliMetricPtrOutput)
}

// This is a string-to-string map that contains information about the type of object that this SLO is related to. It can include the following fields.
//
// - `Type` designates the type of object that this SLO is related to.
// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Environment` specifies the location where this object is hosted, or what it belongs to.
// - `AwsAccountId` allows you to create an SLO for an object that exists in another account.
func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) KeyAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSliMetric) map[string]string { return v.KeyAttributes }).(pulumi.StringMapOutput)
}

// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) MetricType() ServiceLevelObjectiveRequestBasedSliMetricMetricTypePtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSliMetric) *ServiceLevelObjectiveRequestBasedSliMetricMetricType {
		return v.MetricType
	}).(ServiceLevelObjectiveRequestBasedSliMetricMetricTypePtrOutput)
}

// Use this structure to define the metric that you want to use as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` will be divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) MonitoredRequestCountMetric() ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSliMetric) *ServiceLevelObjectiveMonitoredRequestCountMetric {
		return v.MonitoredRequestCountMetric
	}).(ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput)
}

// If the SLO monitors a specific operation of the service, this field displays that operation name.
func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSliMetric) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// This structure defines the metric that is used as the "total requests" number for a request-based SLO. The number observed for this metric is divided by the number of "good requests" or "bad requests" that is observed for the metric defined in `MonitoredRequestCountMetric`.
func (o ServiceLevelObjectiveRequestBasedSliMetricOutput) TotalRequestCountMetric() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRequestBasedSliMetric) []ServiceLevelObjectiveMetricDataQuery {
		return v.TotalRequestCountMetric
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

type ServiceLevelObjectiveRequestBasedSliMetricPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRequestBasedSliMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutput() ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) ToServiceLevelObjectiveRequestBasedSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRequestBasedSliMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) Elem() ServiceLevelObjectiveRequestBasedSliMetricOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSliMetric) ServiceLevelObjectiveRequestBasedSliMetric {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveRequestBasedSliMetric
		return ret
	}).(ServiceLevelObjectiveRequestBasedSliMetricOutput)
}

// This is a string-to-string map that contains information about the type of object that this SLO is related to. It can include the following fields.
//
// - `Type` designates the type of object that this SLO is related to.
// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Environment` specifies the location where this object is hosted, or what it belongs to.
// - `AwsAccountId` allows you to create an SLO for an object that exists in another account.
func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) KeyAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSliMetric) map[string]string {
		if v == nil {
			return nil
		}
		return v.KeyAttributes
	}).(pulumi.StringMapOutput)
}

// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) MetricType() ServiceLevelObjectiveRequestBasedSliMetricMetricTypePtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSliMetric) *ServiceLevelObjectiveRequestBasedSliMetricMetricType {
		if v == nil {
			return nil
		}
		return v.MetricType
	}).(ServiceLevelObjectiveRequestBasedSliMetricMetricTypePtrOutput)
}

// Use this structure to define the metric that you want to use as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` will be divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) MonitoredRequestCountMetric() ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSliMetric) *ServiceLevelObjectiveMonitoredRequestCountMetric {
		if v == nil {
			return nil
		}
		return v.MonitoredRequestCountMetric
	}).(ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput)
}

// If the SLO monitors a specific operation of the service, this field displays that operation name.
func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSliMetric) *string {
		if v == nil {
			return nil
		}
		return v.OperationName
	}).(pulumi.StringPtrOutput)
}

// This structure defines the metric that is used as the "total requests" number for a request-based SLO. The number observed for this metric is divided by the number of "good requests" or "bad requests" that is observed for the metric defined in `MonitoredRequestCountMetric`.
func (o ServiceLevelObjectiveRequestBasedSliMetricPtrOutput) TotalRequestCountMetric() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRequestBasedSliMetric) []ServiceLevelObjectiveMetricDataQuery {
		if v == nil {
			return nil
		}
		return v.TotalRequestCountMetric
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

// If the interval is a calendar interval, this structure contains the interval specifications.
type ServiceLevelObjectiveRollingInterval struct {
	// Specifies the duration of each rolling interval. For example, if `Duration` is `7` and `DurationUnit` is `DAY` , each rolling interval is seven days.
	Duration int `pulumi:"duration"`
	// Specifies the rolling interval unit.
	DurationUnit ServiceLevelObjectiveDurationUnit `pulumi:"durationUnit"`
}

// ServiceLevelObjectiveRollingIntervalInput is an input type that accepts ServiceLevelObjectiveRollingIntervalArgs and ServiceLevelObjectiveRollingIntervalOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRollingIntervalInput` via:
//
//	ServiceLevelObjectiveRollingIntervalArgs{...}
type ServiceLevelObjectiveRollingIntervalInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRollingIntervalOutput() ServiceLevelObjectiveRollingIntervalOutput
	ToServiceLevelObjectiveRollingIntervalOutputWithContext(context.Context) ServiceLevelObjectiveRollingIntervalOutput
}

// If the interval is a calendar interval, this structure contains the interval specifications.
type ServiceLevelObjectiveRollingIntervalArgs struct {
	// Specifies the duration of each rolling interval. For example, if `Duration` is `7` and `DurationUnit` is `DAY` , each rolling interval is seven days.
	Duration pulumi.IntInput `pulumi:"duration"`
	// Specifies the rolling interval unit.
	DurationUnit ServiceLevelObjectiveDurationUnitInput `pulumi:"durationUnit"`
}

func (ServiceLevelObjectiveRollingIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRollingInterval)(nil)).Elem()
}

func (i ServiceLevelObjectiveRollingIntervalArgs) ToServiceLevelObjectiveRollingIntervalOutput() ServiceLevelObjectiveRollingIntervalOutput {
	return i.ToServiceLevelObjectiveRollingIntervalOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRollingIntervalArgs) ToServiceLevelObjectiveRollingIntervalOutputWithContext(ctx context.Context) ServiceLevelObjectiveRollingIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRollingIntervalOutput)
}

func (i ServiceLevelObjectiveRollingIntervalArgs) ToServiceLevelObjectiveRollingIntervalPtrOutput() ServiceLevelObjectiveRollingIntervalPtrOutput {
	return i.ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveRollingIntervalArgs) ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRollingIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRollingIntervalOutput).ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveRollingIntervalPtrInput is an input type that accepts ServiceLevelObjectiveRollingIntervalArgs, ServiceLevelObjectiveRollingIntervalPtr and ServiceLevelObjectiveRollingIntervalPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveRollingIntervalPtrInput` via:
//
//	        ServiceLevelObjectiveRollingIntervalArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveRollingIntervalPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveRollingIntervalPtrOutput() ServiceLevelObjectiveRollingIntervalPtrOutput
	ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(context.Context) ServiceLevelObjectiveRollingIntervalPtrOutput
}

type serviceLevelObjectiveRollingIntervalPtrType ServiceLevelObjectiveRollingIntervalArgs

func ServiceLevelObjectiveRollingIntervalPtr(v *ServiceLevelObjectiveRollingIntervalArgs) ServiceLevelObjectiveRollingIntervalPtrInput {
	return (*serviceLevelObjectiveRollingIntervalPtrType)(v)
}

func (*serviceLevelObjectiveRollingIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRollingInterval)(nil)).Elem()
}

func (i *serviceLevelObjectiveRollingIntervalPtrType) ToServiceLevelObjectiveRollingIntervalPtrOutput() ServiceLevelObjectiveRollingIntervalPtrOutput {
	return i.ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveRollingIntervalPtrType) ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRollingIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveRollingIntervalPtrOutput)
}

// If the interval is a calendar interval, this structure contains the interval specifications.
type ServiceLevelObjectiveRollingIntervalOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRollingIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveRollingInterval)(nil)).Elem()
}

func (o ServiceLevelObjectiveRollingIntervalOutput) ToServiceLevelObjectiveRollingIntervalOutput() ServiceLevelObjectiveRollingIntervalOutput {
	return o
}

func (o ServiceLevelObjectiveRollingIntervalOutput) ToServiceLevelObjectiveRollingIntervalOutputWithContext(ctx context.Context) ServiceLevelObjectiveRollingIntervalOutput {
	return o
}

func (o ServiceLevelObjectiveRollingIntervalOutput) ToServiceLevelObjectiveRollingIntervalPtrOutput() ServiceLevelObjectiveRollingIntervalPtrOutput {
	return o.ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveRollingIntervalOutput) ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRollingIntervalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveRollingInterval) *ServiceLevelObjectiveRollingInterval {
		return &v
	}).(ServiceLevelObjectiveRollingIntervalPtrOutput)
}

// Specifies the duration of each rolling interval. For example, if `Duration` is `7` and `DurationUnit` is `DAY` , each rolling interval is seven days.
func (o ServiceLevelObjectiveRollingIntervalOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRollingInterval) int { return v.Duration }).(pulumi.IntOutput)
}

// Specifies the rolling interval unit.
func (o ServiceLevelObjectiveRollingIntervalOutput) DurationUnit() ServiceLevelObjectiveDurationUnitOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveRollingInterval) ServiceLevelObjectiveDurationUnit { return v.DurationUnit }).(ServiceLevelObjectiveDurationUnitOutput)
}

type ServiceLevelObjectiveRollingIntervalPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveRollingIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveRollingInterval)(nil)).Elem()
}

func (o ServiceLevelObjectiveRollingIntervalPtrOutput) ToServiceLevelObjectiveRollingIntervalPtrOutput() ServiceLevelObjectiveRollingIntervalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveRollingIntervalPtrOutput) ToServiceLevelObjectiveRollingIntervalPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveRollingIntervalPtrOutput {
	return o
}

func (o ServiceLevelObjectiveRollingIntervalPtrOutput) Elem() ServiceLevelObjectiveRollingIntervalOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRollingInterval) ServiceLevelObjectiveRollingInterval {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveRollingInterval
		return ret
	}).(ServiceLevelObjectiveRollingIntervalOutput)
}

// Specifies the duration of each rolling interval. For example, if `Duration` is `7` and `DurationUnit` is `DAY` , each rolling interval is seven days.
func (o ServiceLevelObjectiveRollingIntervalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRollingInterval) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

// Specifies the rolling interval unit.
func (o ServiceLevelObjectiveRollingIntervalPtrOutput) DurationUnit() ServiceLevelObjectiveDurationUnitPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveRollingInterval) *ServiceLevelObjectiveDurationUnit {
		if v == nil {
			return nil
		}
		return &v.DurationUnit
	}).(ServiceLevelObjectiveDurationUnitPtrOutput)
}

// This structure contains information about the performance metric that an SLO monitors.
type ServiceLevelObjectiveSli struct {
	// The arithmetic operation used when comparing the specified metric to the threshold.
	ComparisonOperator ServiceLevelObjectiveSliComparisonOperator `pulumi:"comparisonOperator"`
	// The value that the SLI metric is compared to.
	MetricThreshold float64 `pulumi:"metricThreshold"`
	// Use this structure to specify the metric to be used for the SLO.
	SliMetric ServiceLevelObjectiveSliMetric `pulumi:"sliMetric"`
}

// ServiceLevelObjectiveSliInput is an input type that accepts ServiceLevelObjectiveSliArgs and ServiceLevelObjectiveSliOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveSliInput` via:
//
//	ServiceLevelObjectiveSliArgs{...}
type ServiceLevelObjectiveSliInput interface {
	pulumi.Input

	ToServiceLevelObjectiveSliOutput() ServiceLevelObjectiveSliOutput
	ToServiceLevelObjectiveSliOutputWithContext(context.Context) ServiceLevelObjectiveSliOutput
}

// This structure contains information about the performance metric that an SLO monitors.
type ServiceLevelObjectiveSliArgs struct {
	// The arithmetic operation used when comparing the specified metric to the threshold.
	ComparisonOperator ServiceLevelObjectiveSliComparisonOperatorInput `pulumi:"comparisonOperator"`
	// The value that the SLI metric is compared to.
	MetricThreshold pulumi.Float64Input `pulumi:"metricThreshold"`
	// Use this structure to specify the metric to be used for the SLO.
	SliMetric ServiceLevelObjectiveSliMetricInput `pulumi:"sliMetric"`
}

func (ServiceLevelObjectiveSliArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveSli)(nil)).Elem()
}

func (i ServiceLevelObjectiveSliArgs) ToServiceLevelObjectiveSliOutput() ServiceLevelObjectiveSliOutput {
	return i.ToServiceLevelObjectiveSliOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveSliArgs) ToServiceLevelObjectiveSliOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveSliOutput)
}

func (i ServiceLevelObjectiveSliArgs) ToServiceLevelObjectiveSliPtrOutput() ServiceLevelObjectiveSliPtrOutput {
	return i.ToServiceLevelObjectiveSliPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveSliArgs) ToServiceLevelObjectiveSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveSliOutput).ToServiceLevelObjectiveSliPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveSliPtrInput is an input type that accepts ServiceLevelObjectiveSliArgs, ServiceLevelObjectiveSliPtr and ServiceLevelObjectiveSliPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveSliPtrInput` via:
//
//	        ServiceLevelObjectiveSliArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveSliPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveSliPtrOutput() ServiceLevelObjectiveSliPtrOutput
	ToServiceLevelObjectiveSliPtrOutputWithContext(context.Context) ServiceLevelObjectiveSliPtrOutput
}

type serviceLevelObjectiveSliPtrType ServiceLevelObjectiveSliArgs

func ServiceLevelObjectiveSliPtr(v *ServiceLevelObjectiveSliArgs) ServiceLevelObjectiveSliPtrInput {
	return (*serviceLevelObjectiveSliPtrType)(v)
}

func (*serviceLevelObjectiveSliPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveSli)(nil)).Elem()
}

func (i *serviceLevelObjectiveSliPtrType) ToServiceLevelObjectiveSliPtrOutput() ServiceLevelObjectiveSliPtrOutput {
	return i.ToServiceLevelObjectiveSliPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveSliPtrType) ToServiceLevelObjectiveSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveSliPtrOutput)
}

// This structure contains information about the performance metric that an SLO monitors.
type ServiceLevelObjectiveSliOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveSliOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveSli)(nil)).Elem()
}

func (o ServiceLevelObjectiveSliOutput) ToServiceLevelObjectiveSliOutput() ServiceLevelObjectiveSliOutput {
	return o
}

func (o ServiceLevelObjectiveSliOutput) ToServiceLevelObjectiveSliOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliOutput {
	return o
}

func (o ServiceLevelObjectiveSliOutput) ToServiceLevelObjectiveSliPtrOutput() ServiceLevelObjectiveSliPtrOutput {
	return o.ToServiceLevelObjectiveSliPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveSliOutput) ToServiceLevelObjectiveSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveSli) *ServiceLevelObjectiveSli {
		return &v
	}).(ServiceLevelObjectiveSliPtrOutput)
}

// The arithmetic operation used when comparing the specified metric to the threshold.
func (o ServiceLevelObjectiveSliOutput) ComparisonOperator() ServiceLevelObjectiveSliComparisonOperatorOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSli) ServiceLevelObjectiveSliComparisonOperator {
		return v.ComparisonOperator
	}).(ServiceLevelObjectiveSliComparisonOperatorOutput)
}

// The value that the SLI metric is compared to.
func (o ServiceLevelObjectiveSliOutput) MetricThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v ServiceLevelObjectiveSli) float64 { return v.MetricThreshold }).(pulumi.Float64Output)
}

// Use this structure to specify the metric to be used for the SLO.
func (o ServiceLevelObjectiveSliOutput) SliMetric() ServiceLevelObjectiveSliMetricOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSli) ServiceLevelObjectiveSliMetric { return v.SliMetric }).(ServiceLevelObjectiveSliMetricOutput)
}

type ServiceLevelObjectiveSliPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveSliPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveSli)(nil)).Elem()
}

func (o ServiceLevelObjectiveSliPtrOutput) ToServiceLevelObjectiveSliPtrOutput() ServiceLevelObjectiveSliPtrOutput {
	return o
}

func (o ServiceLevelObjectiveSliPtrOutput) ToServiceLevelObjectiveSliPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliPtrOutput {
	return o
}

func (o ServiceLevelObjectiveSliPtrOutput) Elem() ServiceLevelObjectiveSliOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSli) ServiceLevelObjectiveSli {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveSli
		return ret
	}).(ServiceLevelObjectiveSliOutput)
}

// The arithmetic operation used when comparing the specified metric to the threshold.
func (o ServiceLevelObjectiveSliPtrOutput) ComparisonOperator() ServiceLevelObjectiveSliComparisonOperatorPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSli) *ServiceLevelObjectiveSliComparisonOperator {
		if v == nil {
			return nil
		}
		return &v.ComparisonOperator
	}).(ServiceLevelObjectiveSliComparisonOperatorPtrOutput)
}

// The value that the SLI metric is compared to.
func (o ServiceLevelObjectiveSliPtrOutput) MetricThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSli) *float64 {
		if v == nil {
			return nil
		}
		return &v.MetricThreshold
	}).(pulumi.Float64PtrOutput)
}

// Use this structure to specify the metric to be used for the SLO.
func (o ServiceLevelObjectiveSliPtrOutput) SliMetric() ServiceLevelObjectiveSliMetricPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSli) *ServiceLevelObjectiveSliMetric {
		if v == nil {
			return nil
		}
		return &v.SliMetric
	}).(ServiceLevelObjectiveSliMetricPtrOutput)
}

// A structure that contains information about the metric that the SLO monitors.
type ServiceLevelObjectiveSliMetric struct {
	// If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the `Type` , `Name` , and `Environment` attributes.
	//
	// This is a string-to-string map. It can include the following fields.
	//
	// - `Type` designates the type of object this is.
	// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
	// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Environment` specifies the location where this object is hosted, or what it belongs to.
	KeyAttributes map[string]string `pulumi:"keyAttributes"`
	// If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.
	MetricDataQueries []ServiceLevelObjectiveMetricDataQuery `pulumi:"metricDataQueries"`
	// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
	MetricType *ServiceLevelObjectiveSliMetricMetricType `pulumi:"metricType"`
	// If the SLO monitors a specific operation of the service, this field displays that operation name.
	OperationName *string `pulumi:"operationName"`
	// The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic
	Statistic *string `pulumi:"statistic"`
}

// ServiceLevelObjectiveSliMetricInput is an input type that accepts ServiceLevelObjectiveSliMetricArgs and ServiceLevelObjectiveSliMetricOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveSliMetricInput` via:
//
//	ServiceLevelObjectiveSliMetricArgs{...}
type ServiceLevelObjectiveSliMetricInput interface {
	pulumi.Input

	ToServiceLevelObjectiveSliMetricOutput() ServiceLevelObjectiveSliMetricOutput
	ToServiceLevelObjectiveSliMetricOutputWithContext(context.Context) ServiceLevelObjectiveSliMetricOutput
}

// A structure that contains information about the metric that the SLO monitors.
type ServiceLevelObjectiveSliMetricArgs struct {
	// If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the `Type` , `Name` , and `Environment` attributes.
	//
	// This is a string-to-string map. It can include the following fields.
	//
	// - `Type` designates the type of object this is.
	// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
	// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
	// - `Environment` specifies the location where this object is hosted, or what it belongs to.
	KeyAttributes pulumi.StringMapInput `pulumi:"keyAttributes"`
	// If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.
	MetricDataQueries ServiceLevelObjectiveMetricDataQueryArrayInput `pulumi:"metricDataQueries"`
	// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
	MetricType ServiceLevelObjectiveSliMetricMetricTypePtrInput `pulumi:"metricType"`
	// If the SLO monitors a specific operation of the service, this field displays that operation name.
	OperationName pulumi.StringPtrInput `pulumi:"operationName"`
	// The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic
	Statistic pulumi.StringPtrInput `pulumi:"statistic"`
}

func (ServiceLevelObjectiveSliMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveSliMetric)(nil)).Elem()
}

func (i ServiceLevelObjectiveSliMetricArgs) ToServiceLevelObjectiveSliMetricOutput() ServiceLevelObjectiveSliMetricOutput {
	return i.ToServiceLevelObjectiveSliMetricOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveSliMetricArgs) ToServiceLevelObjectiveSliMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveSliMetricOutput)
}

func (i ServiceLevelObjectiveSliMetricArgs) ToServiceLevelObjectiveSliMetricPtrOutput() ServiceLevelObjectiveSliMetricPtrOutput {
	return i.ToServiceLevelObjectiveSliMetricPtrOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveSliMetricArgs) ToServiceLevelObjectiveSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveSliMetricOutput).ToServiceLevelObjectiveSliMetricPtrOutputWithContext(ctx)
}

// ServiceLevelObjectiveSliMetricPtrInput is an input type that accepts ServiceLevelObjectiveSliMetricArgs, ServiceLevelObjectiveSliMetricPtr and ServiceLevelObjectiveSliMetricPtrOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveSliMetricPtrInput` via:
//
//	        ServiceLevelObjectiveSliMetricArgs{...}
//
//	or:
//
//	        nil
type ServiceLevelObjectiveSliMetricPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveSliMetricPtrOutput() ServiceLevelObjectiveSliMetricPtrOutput
	ToServiceLevelObjectiveSliMetricPtrOutputWithContext(context.Context) ServiceLevelObjectiveSliMetricPtrOutput
}

type serviceLevelObjectiveSliMetricPtrType ServiceLevelObjectiveSliMetricArgs

func ServiceLevelObjectiveSliMetricPtr(v *ServiceLevelObjectiveSliMetricArgs) ServiceLevelObjectiveSliMetricPtrInput {
	return (*serviceLevelObjectiveSliMetricPtrType)(v)
}

func (*serviceLevelObjectiveSliMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveSliMetric)(nil)).Elem()
}

func (i *serviceLevelObjectiveSliMetricPtrType) ToServiceLevelObjectiveSliMetricPtrOutput() ServiceLevelObjectiveSliMetricPtrOutput {
	return i.ToServiceLevelObjectiveSliMetricPtrOutputWithContext(context.Background())
}

func (i *serviceLevelObjectiveSliMetricPtrType) ToServiceLevelObjectiveSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveSliMetricPtrOutput)
}

// A structure that contains information about the metric that the SLO monitors.
type ServiceLevelObjectiveSliMetricOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveSliMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveSliMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveSliMetricOutput) ToServiceLevelObjectiveSliMetricOutput() ServiceLevelObjectiveSliMetricOutput {
	return o
}

func (o ServiceLevelObjectiveSliMetricOutput) ToServiceLevelObjectiveSliMetricOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliMetricOutput {
	return o
}

func (o ServiceLevelObjectiveSliMetricOutput) ToServiceLevelObjectiveSliMetricPtrOutput() ServiceLevelObjectiveSliMetricPtrOutput {
	return o.ToServiceLevelObjectiveSliMetricPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveSliMetricOutput) ToServiceLevelObjectiveSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveSliMetric) *ServiceLevelObjectiveSliMetric {
		return &v
	}).(ServiceLevelObjectiveSliMetricPtrOutput)
}

// If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the `Type` , `Name` , and `Environment` attributes.
//
// This is a string-to-string map. It can include the following fields.
//
// - `Type` designates the type of object this is.
// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Environment` specifies the location where this object is hosted, or what it belongs to.
func (o ServiceLevelObjectiveSliMetricOutput) KeyAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSliMetric) map[string]string { return v.KeyAttributes }).(pulumi.StringMapOutput)
}

// If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.
func (o ServiceLevelObjectiveSliMetricOutput) MetricDataQueries() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSliMetric) []ServiceLevelObjectiveMetricDataQuery {
		return v.MetricDataQueries
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
func (o ServiceLevelObjectiveSliMetricOutput) MetricType() ServiceLevelObjectiveSliMetricMetricTypePtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSliMetric) *ServiceLevelObjectiveSliMetricMetricType { return v.MetricType }).(ServiceLevelObjectiveSliMetricMetricTypePtrOutput)
}

// If the SLO monitors a specific operation of the service, this field displays that operation name.
func (o ServiceLevelObjectiveSliMetricOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSliMetric) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.
func (o ServiceLevelObjectiveSliMetricOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSliMetric) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic
func (o ServiceLevelObjectiveSliMetricOutput) Statistic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveSliMetric) *string { return v.Statistic }).(pulumi.StringPtrOutput)
}

type ServiceLevelObjectiveSliMetricPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveSliMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveSliMetric)(nil)).Elem()
}

func (o ServiceLevelObjectiveSliMetricPtrOutput) ToServiceLevelObjectiveSliMetricPtrOutput() ServiceLevelObjectiveSliMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveSliMetricPtrOutput) ToServiceLevelObjectiveSliMetricPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveSliMetricPtrOutput {
	return o
}

func (o ServiceLevelObjectiveSliMetricPtrOutput) Elem() ServiceLevelObjectiveSliMetricOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSliMetric) ServiceLevelObjectiveSliMetric {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveSliMetric
		return ret
	}).(ServiceLevelObjectiveSliMetricOutput)
}

// If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the `Type` , `Name` , and `Environment` attributes.
//
// This is a string-to-string map. It can include the following fields.
//
// - `Type` designates the type of object this is.
// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
// - `Environment` specifies the location where this object is hosted, or what it belongs to.
func (o ServiceLevelObjectiveSliMetricPtrOutput) KeyAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSliMetric) map[string]string {
		if v == nil {
			return nil
		}
		return v.KeyAttributes
	}).(pulumi.StringMapOutput)
}

// If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.
func (o ServiceLevelObjectiveSliMetricPtrOutput) MetricDataQueries() ServiceLevelObjectiveMetricDataQueryArrayOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSliMetric) []ServiceLevelObjectiveMetricDataQuery {
		if v == nil {
			return nil
		}
		return v.MetricDataQueries
	}).(ServiceLevelObjectiveMetricDataQueryArrayOutput)
}

// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
func (o ServiceLevelObjectiveSliMetricPtrOutput) MetricType() ServiceLevelObjectiveSliMetricMetricTypePtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSliMetric) *ServiceLevelObjectiveSliMetricMetricType {
		if v == nil {
			return nil
		}
		return v.MetricType
	}).(ServiceLevelObjectiveSliMetricMetricTypePtrOutput)
}

// If the SLO monitors a specific operation of the service, this field displays that operation name.
func (o ServiceLevelObjectiveSliMetricPtrOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSliMetric) *string {
		if v == nil {
			return nil
		}
		return v.OperationName
	}).(pulumi.StringPtrOutput)
}

// The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.
func (o ServiceLevelObjectiveSliMetricPtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSliMetric) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic
func (o ServiceLevelObjectiveSliMetricPtrOutput) Statistic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveSliMetric) *string {
		if v == nil {
			return nil
		}
		return v.Statistic
	}).(pulumi.StringPtrOutput)
}

type ServiceLevelObjectiveTag struct {
	// A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
	Key string `pulumi:"key"`
	// The value for the specified tag key.
	Value string `pulumi:"value"`
}

// This object defines the length of time an exclusion window should span.
type ServiceLevelObjectiveWindow struct {
	Duration     int                               `pulumi:"duration"`
	DurationUnit ServiceLevelObjectiveDurationUnit `pulumi:"durationUnit"`
}

// ServiceLevelObjectiveWindowInput is an input type that accepts ServiceLevelObjectiveWindowArgs and ServiceLevelObjectiveWindowOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveWindowInput` via:
//
//	ServiceLevelObjectiveWindowArgs{...}
type ServiceLevelObjectiveWindowInput interface {
	pulumi.Input

	ToServiceLevelObjectiveWindowOutput() ServiceLevelObjectiveWindowOutput
	ToServiceLevelObjectiveWindowOutputWithContext(context.Context) ServiceLevelObjectiveWindowOutput
}

// This object defines the length of time an exclusion window should span.
type ServiceLevelObjectiveWindowArgs struct {
	Duration     pulumi.IntInput                        `pulumi:"duration"`
	DurationUnit ServiceLevelObjectiveDurationUnitInput `pulumi:"durationUnit"`
}

func (ServiceLevelObjectiveWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveWindow)(nil)).Elem()
}

func (i ServiceLevelObjectiveWindowArgs) ToServiceLevelObjectiveWindowOutput() ServiceLevelObjectiveWindowOutput {
	return i.ToServiceLevelObjectiveWindowOutputWithContext(context.Background())
}

func (i ServiceLevelObjectiveWindowArgs) ToServiceLevelObjectiveWindowOutputWithContext(ctx context.Context) ServiceLevelObjectiveWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLevelObjectiveWindowOutput)
}

// This object defines the length of time an exclusion window should span.
type ServiceLevelObjectiveWindowOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveWindow)(nil)).Elem()
}

func (o ServiceLevelObjectiveWindowOutput) ToServiceLevelObjectiveWindowOutput() ServiceLevelObjectiveWindowOutput {
	return o
}

func (o ServiceLevelObjectiveWindowOutput) ToServiceLevelObjectiveWindowOutputWithContext(ctx context.Context) ServiceLevelObjectiveWindowOutput {
	return o
}

func (o ServiceLevelObjectiveWindowOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveWindow) int { return v.Duration }).(pulumi.IntOutput)
}

func (o ServiceLevelObjectiveWindowOutput) DurationUnit() ServiceLevelObjectiveDurationUnitOutput {
	return o.ApplyT(func(v ServiceLevelObjectiveWindow) ServiceLevelObjectiveDurationUnit { return v.DurationUnit }).(ServiceLevelObjectiveDurationUnitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveBurnRateConfigurationInput)(nil)).Elem(), ServiceLevelObjectiveBurnRateConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveBurnRateConfigurationArrayInput)(nil)).Elem(), ServiceLevelObjectiveBurnRateConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveCalendarIntervalInput)(nil)).Elem(), ServiceLevelObjectiveCalendarIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveCalendarIntervalPtrInput)(nil)).Elem(), ServiceLevelObjectiveCalendarIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveDimensionInput)(nil)).Elem(), ServiceLevelObjectiveDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveDimensionArrayInput)(nil)).Elem(), ServiceLevelObjectiveDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveExclusionWindowInput)(nil)).Elem(), ServiceLevelObjectiveExclusionWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveExclusionWindowArrayInput)(nil)).Elem(), ServiceLevelObjectiveExclusionWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveGoalInput)(nil)).Elem(), ServiceLevelObjectiveGoalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveGoalPtrInput)(nil)).Elem(), ServiceLevelObjectiveGoalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveIntervalInput)(nil)).Elem(), ServiceLevelObjectiveIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveIntervalPtrInput)(nil)).Elem(), ServiceLevelObjectiveIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMetricInput)(nil)).Elem(), ServiceLevelObjectiveMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMetricPtrInput)(nil)).Elem(), ServiceLevelObjectiveMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMetricDataQueryInput)(nil)).Elem(), ServiceLevelObjectiveMetricDataQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMetricDataQueryArrayInput)(nil)).Elem(), ServiceLevelObjectiveMetricDataQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMetricStatInput)(nil)).Elem(), ServiceLevelObjectiveMetricStatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMetricStatPtrInput)(nil)).Elem(), ServiceLevelObjectiveMetricStatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMonitoredRequestCountMetricInput)(nil)).Elem(), ServiceLevelObjectiveMonitoredRequestCountMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveMonitoredRequestCountMetricPtrInput)(nil)).Elem(), ServiceLevelObjectiveMonitoredRequestCountMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRecurrenceRuleInput)(nil)).Elem(), ServiceLevelObjectiveRecurrenceRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRecurrenceRulePtrInput)(nil)).Elem(), ServiceLevelObjectiveRecurrenceRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSliInput)(nil)).Elem(), ServiceLevelObjectiveRequestBasedSliArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSliPtrInput)(nil)).Elem(), ServiceLevelObjectiveRequestBasedSliArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSliMetricInput)(nil)).Elem(), ServiceLevelObjectiveRequestBasedSliMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRequestBasedSliMetricPtrInput)(nil)).Elem(), ServiceLevelObjectiveRequestBasedSliMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRollingIntervalInput)(nil)).Elem(), ServiceLevelObjectiveRollingIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveRollingIntervalPtrInput)(nil)).Elem(), ServiceLevelObjectiveRollingIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveSliInput)(nil)).Elem(), ServiceLevelObjectiveSliArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveSliPtrInput)(nil)).Elem(), ServiceLevelObjectiveSliArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveSliMetricInput)(nil)).Elem(), ServiceLevelObjectiveSliMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveSliMetricPtrInput)(nil)).Elem(), ServiceLevelObjectiveSliMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveWindowInput)(nil)).Elem(), ServiceLevelObjectiveWindowArgs{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveBurnRateConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveBurnRateConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveCalendarIntervalOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveCalendarIntervalPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveDimensionOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveDimensionArrayOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveExclusionWindowOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveExclusionWindowArrayOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveGoalOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveGoalPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveIntervalOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveIntervalPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMetricOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMetricPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMetricDataQueryOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMetricDataQueryArrayOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMetricStatOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMetricStatPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMonitoredRequestCountMetricOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveMonitoredRequestCountMetricPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRecurrenceRuleOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRecurrenceRulePtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRequestBasedSliOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRequestBasedSliPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRequestBasedSliMetricOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRequestBasedSliMetricPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRollingIntervalOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveRollingIntervalPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveSliOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveSliPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveSliMetricOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveSliMetricPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveWindowOutput{})
}
