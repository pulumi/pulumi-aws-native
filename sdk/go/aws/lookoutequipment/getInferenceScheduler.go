// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lookoutequipment

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for LookoutEquipment InferenceScheduler.
func LookupInferenceScheduler(ctx *pulumi.Context, args *LookupInferenceSchedulerArgs, opts ...pulumi.InvokeOption) (*LookupInferenceSchedulerResult, error) {
	var rv LookupInferenceSchedulerResult
	err := ctx.Invoke("aws-native:lookoutequipment:getInferenceScheduler", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupInferenceSchedulerArgs struct {
	// The name of the inference scheduler being created.
	InferenceSchedulerName string `pulumi:"inferenceSchedulerName"`
}

type LookupInferenceSchedulerResult struct {
	// A period of time (in minutes) by which inference on the data is delayed after the data starts.
	DataDelayOffsetInMinutes *int `pulumi:"dataDelayOffsetInMinutes"`
	// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
	DataInputConfiguration *DataInputConfigurationProperties `pulumi:"dataInputConfiguration"`
	// Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output.
	DataOutputConfiguration *DataOutputConfigurationProperties `pulumi:"dataOutputConfiguration"`
	// How often data is uploaded to the source S3 bucket for the input data.
	DataUploadFrequency *InferenceSchedulerDataUploadFrequency `pulumi:"dataUploadFrequency"`
	// The Amazon Resource Name (ARN) of the inference scheduler being created.
	InferenceSchedulerArn *string `pulumi:"inferenceSchedulerArn"`
	// The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
	RoleArn *string `pulumi:"roleArn"`
	// Any tags associated with the inference scheduler.
	Tags []InferenceSchedulerTag `pulumi:"tags"`
}

func LookupInferenceSchedulerOutput(ctx *pulumi.Context, args LookupInferenceSchedulerOutputArgs, opts ...pulumi.InvokeOption) LookupInferenceSchedulerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInferenceSchedulerResult, error) {
			args := v.(LookupInferenceSchedulerArgs)
			r, err := LookupInferenceScheduler(ctx, &args, opts...)
			var s LookupInferenceSchedulerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInferenceSchedulerResultOutput)
}

type LookupInferenceSchedulerOutputArgs struct {
	// The name of the inference scheduler being created.
	InferenceSchedulerName pulumi.StringInput `pulumi:"inferenceSchedulerName"`
}

func (LookupInferenceSchedulerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInferenceSchedulerArgs)(nil)).Elem()
}

type LookupInferenceSchedulerResultOutput struct{ *pulumi.OutputState }

func (LookupInferenceSchedulerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInferenceSchedulerResult)(nil)).Elem()
}

func (o LookupInferenceSchedulerResultOutput) ToLookupInferenceSchedulerResultOutput() LookupInferenceSchedulerResultOutput {
	return o
}

func (o LookupInferenceSchedulerResultOutput) ToLookupInferenceSchedulerResultOutputWithContext(ctx context.Context) LookupInferenceSchedulerResultOutput {
	return o
}

// A period of time (in minutes) by which inference on the data is delayed after the data starts.
func (o LookupInferenceSchedulerResultOutput) DataDelayOffsetInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupInferenceSchedulerResult) *int { return v.DataDelayOffsetInMinutes }).(pulumi.IntPtrOutput)
}

// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
func (o LookupInferenceSchedulerResultOutput) DataInputConfiguration() DataInputConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v LookupInferenceSchedulerResult) *DataInputConfigurationProperties {
		return v.DataInputConfiguration
	}).(DataInputConfigurationPropertiesPtrOutput)
}

// Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output.
func (o LookupInferenceSchedulerResultOutput) DataOutputConfiguration() DataOutputConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v LookupInferenceSchedulerResult) *DataOutputConfigurationProperties {
		return v.DataOutputConfiguration
	}).(DataOutputConfigurationPropertiesPtrOutput)
}

// How often data is uploaded to the source S3 bucket for the input data.
func (o LookupInferenceSchedulerResultOutput) DataUploadFrequency() InferenceSchedulerDataUploadFrequencyPtrOutput {
	return o.ApplyT(func(v LookupInferenceSchedulerResult) *InferenceSchedulerDataUploadFrequency {
		return v.DataUploadFrequency
	}).(InferenceSchedulerDataUploadFrequencyPtrOutput)
}

// The Amazon Resource Name (ARN) of the inference scheduler being created.
func (o LookupInferenceSchedulerResultOutput) InferenceSchedulerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInferenceSchedulerResult) *string { return v.InferenceSchedulerArn }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
func (o LookupInferenceSchedulerResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInferenceSchedulerResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Any tags associated with the inference scheduler.
func (o LookupInferenceSchedulerResultOutput) Tags() InferenceSchedulerTagArrayOutput {
	return o.ApplyT(func(v LookupInferenceSchedulerResult) []InferenceSchedulerTag { return v.Tags }).(InferenceSchedulerTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInferenceSchedulerResultOutput{})
}
