// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::MediaPackage::Channel
type Channel struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) assigned to the Channel.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the Channel.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A short text description of the Channel.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The configuration parameters for egress access logging.
	EgressAccessLogs ChannelLogConfigurationPtrOutput `pulumi:"egressAccessLogs"`
	// An HTTP Live Streaming (HLS) ingest resource configuration.
	HlsIngest ChannelHlsIngestPtrOutput `pulumi:"hlsIngest"`
	// The configuration parameters for egress access logging.
	IngressAccessLogs ChannelLogConfigurationPtrOutput `pulumi:"ingressAccessLogs"`
	// A collection of tags associated with a resource
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsId == nil {
		return nil, errors.New("invalid value for required argument 'AwsId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Channel
	err := ctx.RegisterResource("aws-native:mediapackage:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws-native:mediapackage:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
}

type ChannelState struct {
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// The ID of the Channel.
	AwsId string `pulumi:"awsId"`
	// A short text description of the Channel.
	Description *string `pulumi:"description"`
	// The configuration parameters for egress access logging.
	EgressAccessLogs *ChannelLogConfiguration `pulumi:"egressAccessLogs"`
	// An HTTP Live Streaming (HLS) ingest resource configuration.
	HlsIngest *ChannelHlsIngest `pulumi:"hlsIngest"`
	// The configuration parameters for egress access logging.
	IngressAccessLogs *ChannelLogConfiguration `pulumi:"ingressAccessLogs"`
	// A collection of tags associated with a resource
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// The ID of the Channel.
	AwsId pulumi.StringInput
	// A short text description of the Channel.
	Description pulumi.StringPtrInput
	// The configuration parameters for egress access logging.
	EgressAccessLogs ChannelLogConfigurationPtrInput
	// An HTTP Live Streaming (HLS) ingest resource configuration.
	HlsIngest ChannelHlsIngestPtrInput
	// The configuration parameters for egress access logging.
	IngressAccessLogs ChannelLogConfigurationPtrInput
	// A collection of tags associated with a resource
	Tags aws.CreateOnlyTagArrayInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(ctx context.Context) ChannelOutput
}

func (*Channel) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *Channel) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i *Channel) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

// The Amazon Resource Name (ARN) assigned to the Channel.
func (o ChannelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the Channel.
func (o ChannelOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A short text description of the Channel.
func (o ChannelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The configuration parameters for egress access logging.
func (o ChannelOutput) EgressAccessLogs() ChannelLogConfigurationPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelLogConfigurationPtrOutput { return v.EgressAccessLogs }).(ChannelLogConfigurationPtrOutput)
}

// An HTTP Live Streaming (HLS) ingest resource configuration.
func (o ChannelOutput) HlsIngest() ChannelHlsIngestPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelHlsIngestPtrOutput { return v.HlsIngest }).(ChannelHlsIngestPtrOutput)
}

// The configuration parameters for egress access logging.
func (o ChannelOutput) IngressAccessLogs() ChannelLogConfigurationPtrOutput {
	return o.ApplyT(func(v *Channel) ChannelLogConfigurationPtrOutput { return v.IngressAccessLogs }).(ChannelLogConfigurationPtrOutput)
}

// A collection of tags associated with a resource
func (o ChannelOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *Channel) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInput)(nil)).Elem(), &Channel{})
	pulumi.RegisterOutputType(ChannelOutput{})
}
