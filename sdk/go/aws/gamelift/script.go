// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::GameLift::Script resource creates a new script record for your Realtime Servers script. Realtime scripts are JavaScript that provide configuration settings and optional custom game logic for your game. The script is deployed when you create a Realtime Servers fleet to host your game sessions. Script logic is executed during an active game session.
type Script struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift script resource and uniquely identifies it. ARNs are unique across all Regions. In a GameLift script ARN, the resource ID matches the Id value.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// A descriptive label that is associated with a script. Script names do not need to be unique.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
	SizeOnDisk pulumi.IntOutput `pulumi:"sizeOnDisk"`
	// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
	StorageLocation ScriptS3LocationOutput `pulumi:"storageLocation"`
	// An array of key-value pairs to apply to this resource.
	Tags ScriptTagArrayOutput `pulumi:"tags"`
	// The version that is associated with a script. Version strings do not need to be unique.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewScript registers a new resource with the given unique name, arguments, and options.
func NewScript(ctx *pulumi.Context,
	name string, args *ScriptArgs, opts ...pulumi.ResourceOption) (*Script, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Script
	err := ctx.RegisterResource("aws-native:gamelift:Script", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScript gets an existing Script resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScriptState, opts ...pulumi.ResourceOption) (*Script, error) {
	var resource Script
	err := ctx.ReadResource("aws-native:gamelift:Script", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Script resources.
type scriptState struct {
}

type ScriptState struct {
}

func (ScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptState)(nil)).Elem()
}

type scriptArgs struct {
	// A descriptive label that is associated with a script. Script names do not need to be unique.
	Name *string `pulumi:"name"`
	// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
	StorageLocation ScriptS3Location `pulumi:"storageLocation"`
	// An array of key-value pairs to apply to this resource.
	Tags []ScriptTag `pulumi:"tags"`
	// The version that is associated with a script. Version strings do not need to be unique.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Script resource.
type ScriptArgs struct {
	// A descriptive label that is associated with a script. Script names do not need to be unique.
	Name pulumi.StringPtrInput
	// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
	StorageLocation ScriptS3LocationInput
	// An array of key-value pairs to apply to this resource.
	Tags ScriptTagArrayInput
	// The version that is associated with a script. Version strings do not need to be unique.
	Version pulumi.StringPtrInput
}

func (ScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptArgs)(nil)).Elem()
}

type ScriptInput interface {
	pulumi.Input

	ToScriptOutput() ScriptOutput
	ToScriptOutputWithContext(ctx context.Context) ScriptOutput
}

func (*Script) ElementType() reflect.Type {
	return reflect.TypeOf((**Script)(nil)).Elem()
}

func (i *Script) ToScriptOutput() ScriptOutput {
	return i.ToScriptOutputWithContext(context.Background())
}

func (i *Script) ToScriptOutputWithContext(ctx context.Context) ScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptOutput)
}

type ScriptOutput struct{ *pulumi.OutputState }

func (ScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Script)(nil)).Elem()
}

func (o ScriptOutput) ToScriptOutput() ScriptOutput {
	return o
}

func (o ScriptOutput) ToScriptOutputWithContext(ctx context.Context) ScriptOutput {
	return o
}

// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift script resource and uniquely identifies it. ARNs are unique across all Regions. In a GameLift script ARN, the resource ID matches the Id value.
func (o ScriptOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Script) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
func (o ScriptOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Script) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// A descriptive label that is associated with a script. Script names do not need to be unique.
func (o ScriptOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Script) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
func (o ScriptOutput) SizeOnDisk() pulumi.IntOutput {
	return o.ApplyT(func(v *Script) pulumi.IntOutput { return v.SizeOnDisk }).(pulumi.IntOutput)
}

// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
func (o ScriptOutput) StorageLocation() ScriptS3LocationOutput {
	return o.ApplyT(func(v *Script) ScriptS3LocationOutput { return v.StorageLocation }).(ScriptS3LocationOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ScriptOutput) Tags() ScriptTagArrayOutput {
	return o.ApplyT(func(v *Script) ScriptTagArrayOutput { return v.Tags }).(ScriptTagArrayOutput)
}

// The version that is associated with a script. Version strings do not need to be unique.
func (o ScriptOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Script) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptInput)(nil)).Elem(), &Script{})
	pulumi.RegisterOutputType(ScriptOutput{})
}
