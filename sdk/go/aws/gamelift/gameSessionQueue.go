// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::GameLift::GameSessionQueue resource creates an Amazon GameLift (GameLift) game session queue.
type GameSessionQueue struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Information that is added to all events that are related to this game session queue.
	CustomEventData pulumi.StringPtrOutput `pulumi:"customEventData"`
	// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
	Destinations GameSessionQueueDestinationArrayOutput `pulumi:"destinations"`
	// A list of locations where a queue is allowed to place new game sessions.
	FilterConfiguration GameSessionQueueFilterConfigurationPtrOutput `pulumi:"filterConfiguration"`
	// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
	Name pulumi.StringOutput `pulumi:"name"`
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget pulumi.StringPtrOutput `pulumi:"notificationTarget"`
	// A set of policies that act as a sliding cap on player latency.
	PlayerLatencyPolicies GameSessionQueuePlayerLatencyPolicyArrayOutput `pulumi:"playerLatencyPolicies"`
	// Custom settings to use when prioritizing destinations and locations for game session placements.
	PriorityConfiguration GameSessionQueuePriorityConfigurationPtrOutput `pulumi:"priorityConfiguration"`
	// An array of key-value pairs to apply to this resource.
	Tags GameSessionQueueTagArrayOutput `pulumi:"tags"`
	// The maximum time, in seconds, that a new game session placement request remains in the queue.
	TimeoutInSeconds pulumi.IntPtrOutput `pulumi:"timeoutInSeconds"`
}

// NewGameSessionQueue registers a new resource with the given unique name, arguments, and options.
func NewGameSessionQueue(ctx *pulumi.Context,
	name string, args *GameSessionQueueArgs, opts ...pulumi.ResourceOption) (*GameSessionQueue, error) {
	if args == nil {
		args = &GameSessionQueueArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GameSessionQueue
	err := ctx.RegisterResource("aws-native:gamelift:GameSessionQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameSessionQueue gets an existing GameSessionQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameSessionQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameSessionQueueState, opts ...pulumi.ResourceOption) (*GameSessionQueue, error) {
	var resource GameSessionQueue
	err := ctx.ReadResource("aws-native:gamelift:GameSessionQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameSessionQueue resources.
type gameSessionQueueState struct {
}

type GameSessionQueueState struct {
}

func (GameSessionQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameSessionQueueState)(nil)).Elem()
}

type gameSessionQueueArgs struct {
	// Information that is added to all events that are related to this game session queue.
	CustomEventData *string `pulumi:"customEventData"`
	// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
	Destinations []GameSessionQueueDestination `pulumi:"destinations"`
	// A list of locations where a queue is allowed to place new game sessions.
	FilterConfiguration *GameSessionQueueFilterConfiguration `pulumi:"filterConfiguration"`
	// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
	Name *string `pulumi:"name"`
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget *string `pulumi:"notificationTarget"`
	// A set of policies that act as a sliding cap on player latency.
	PlayerLatencyPolicies []GameSessionQueuePlayerLatencyPolicy `pulumi:"playerLatencyPolicies"`
	// Custom settings to use when prioritizing destinations and locations for game session placements.
	PriorityConfiguration *GameSessionQueuePriorityConfiguration `pulumi:"priorityConfiguration"`
	// An array of key-value pairs to apply to this resource.
	Tags []GameSessionQueueTag `pulumi:"tags"`
	// The maximum time, in seconds, that a new game session placement request remains in the queue.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

// The set of arguments for constructing a GameSessionQueue resource.
type GameSessionQueueArgs struct {
	// Information that is added to all events that are related to this game session queue.
	CustomEventData pulumi.StringPtrInput
	// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
	Destinations GameSessionQueueDestinationArrayInput
	// A list of locations where a queue is allowed to place new game sessions.
	FilterConfiguration GameSessionQueueFilterConfigurationPtrInput
	// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
	Name pulumi.StringPtrInput
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget pulumi.StringPtrInput
	// A set of policies that act as a sliding cap on player latency.
	PlayerLatencyPolicies GameSessionQueuePlayerLatencyPolicyArrayInput
	// Custom settings to use when prioritizing destinations and locations for game session placements.
	PriorityConfiguration GameSessionQueuePriorityConfigurationPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags GameSessionQueueTagArrayInput
	// The maximum time, in seconds, that a new game session placement request remains in the queue.
	TimeoutInSeconds pulumi.IntPtrInput
}

func (GameSessionQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameSessionQueueArgs)(nil)).Elem()
}

type GameSessionQueueInput interface {
	pulumi.Input

	ToGameSessionQueueOutput() GameSessionQueueOutput
	ToGameSessionQueueOutputWithContext(ctx context.Context) GameSessionQueueOutput
}

func (*GameSessionQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**GameSessionQueue)(nil)).Elem()
}

func (i *GameSessionQueue) ToGameSessionQueueOutput() GameSessionQueueOutput {
	return i.ToGameSessionQueueOutputWithContext(context.Background())
}

func (i *GameSessionQueue) ToGameSessionQueueOutputWithContext(ctx context.Context) GameSessionQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameSessionQueueOutput)
}

type GameSessionQueueOutput struct{ *pulumi.OutputState }

func (GameSessionQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GameSessionQueue)(nil)).Elem()
}

func (o GameSessionQueueOutput) ToGameSessionQueueOutput() GameSessionQueueOutput {
	return o
}

func (o GameSessionQueueOutput) ToGameSessionQueueOutputWithContext(ctx context.Context) GameSessionQueueOutput {
	return o
}

// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
func (o GameSessionQueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Information that is added to all events that are related to this game session queue.
func (o GameSessionQueueOutput) CustomEventData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringPtrOutput { return v.CustomEventData }).(pulumi.StringPtrOutput)
}

// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
func (o GameSessionQueueOutput) Destinations() GameSessionQueueDestinationArrayOutput {
	return o.ApplyT(func(v *GameSessionQueue) GameSessionQueueDestinationArrayOutput { return v.Destinations }).(GameSessionQueueDestinationArrayOutput)
}

// A list of locations where a queue is allowed to place new game sessions.
func (o GameSessionQueueOutput) FilterConfiguration() GameSessionQueueFilterConfigurationPtrOutput {
	return o.ApplyT(func(v *GameSessionQueue) GameSessionQueueFilterConfigurationPtrOutput { return v.FilterConfiguration }).(GameSessionQueueFilterConfigurationPtrOutput)
}

// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
func (o GameSessionQueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An SNS topic ARN that is set up to receive game session placement notifications.
func (o GameSessionQueueOutput) NotificationTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.StringPtrOutput { return v.NotificationTarget }).(pulumi.StringPtrOutput)
}

// A set of policies that act as a sliding cap on player latency.
func (o GameSessionQueueOutput) PlayerLatencyPolicies() GameSessionQueuePlayerLatencyPolicyArrayOutput {
	return o.ApplyT(func(v *GameSessionQueue) GameSessionQueuePlayerLatencyPolicyArrayOutput {
		return v.PlayerLatencyPolicies
	}).(GameSessionQueuePlayerLatencyPolicyArrayOutput)
}

// Custom settings to use when prioritizing destinations and locations for game session placements.
func (o GameSessionQueueOutput) PriorityConfiguration() GameSessionQueuePriorityConfigurationPtrOutput {
	return o.ApplyT(func(v *GameSessionQueue) GameSessionQueuePriorityConfigurationPtrOutput {
		return v.PriorityConfiguration
	}).(GameSessionQueuePriorityConfigurationPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o GameSessionQueueOutput) Tags() GameSessionQueueTagArrayOutput {
	return o.ApplyT(func(v *GameSessionQueue) GameSessionQueueTagArrayOutput { return v.Tags }).(GameSessionQueueTagArrayOutput)
}

// The maximum time, in seconds, that a new game session placement request remains in the queue.
func (o GameSessionQueueOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GameSessionQueue) pulumi.IntPtrOutput { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GameSessionQueueInput)(nil)).Elem(), &GameSessionQueue{})
	pulumi.RegisterOutputType(GameSessionQueueOutput{})
}
