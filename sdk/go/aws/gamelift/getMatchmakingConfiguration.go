// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::GameLift::MatchmakingConfiguration resource creates an Amazon GameLift (GameLift) matchmaking configuration.
func LookupMatchmakingConfiguration(ctx *pulumi.Context, args *LookupMatchmakingConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupMatchmakingConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMatchmakingConfigurationResult
	err := ctx.Invoke("aws-native:gamelift:getMatchmakingConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMatchmakingConfigurationArgs struct {
	// A unique identifier for the matchmaking configuration.
	Name string `pulumi:"name"`
}

type LookupMatchmakingConfigurationResult struct {
	// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
	AcceptanceRequired *bool `pulumi:"acceptanceRequired"`
	// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
	AcceptanceTimeoutSeconds *int `pulumi:"acceptanceTimeoutSeconds"`
	// The number of player slots in a match to keep open for future players.
	AdditionalPlayerCount *int `pulumi:"additionalPlayerCount"`
	// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely identifies it.
	Arn *string `pulumi:"arn"`
	// The method used to backfill game sessions created with this matchmaking configuration.
	BackfillMode *MatchmakingConfigurationBackfillMode `pulumi:"backfillMode"`
	// A time stamp indicating when this data object was created.
	CreationTime *string `pulumi:"creationTime"`
	// Information to attach to all events related to the matchmaking configuration.
	CustomEventData *string `pulumi:"customEventData"`
	// A descriptive label that is associated with matchmaking configuration.
	Description *string `pulumi:"description"`
	// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
	FlexMatchMode *MatchmakingConfigurationFlexMatchMode `pulumi:"flexMatchMode"`
	// A set of custom properties for a game session, formatted as key:value pairs.
	GameProperties []MatchmakingConfigurationGameProperty `pulumi:"gameProperties"`
	// A set of custom game session properties, formatted as a single string value.
	GameSessionData *string `pulumi:"gameSessionData"`
	// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
	GameSessionQueueArns []string `pulumi:"gameSessionQueueArns"`
	// An SNS topic ARN that is set up to receive matchmaking notifications.
	NotificationTarget *string `pulumi:"notificationTarget"`
	// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
	RequestTimeoutSeconds *int `pulumi:"requestTimeoutSeconds"`
	// The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
	RuleSetArn *string `pulumi:"ruleSetArn"`
	// A unique identifier for the matchmaking rule set to use with this configuration.
	RuleSetName *string `pulumi:"ruleSetName"`
	// An array of key-value pairs to apply to this resource.
	Tags []MatchmakingConfigurationTag `pulumi:"tags"`
}

func LookupMatchmakingConfigurationOutput(ctx *pulumi.Context, args LookupMatchmakingConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupMatchmakingConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMatchmakingConfigurationResult, error) {
			args := v.(LookupMatchmakingConfigurationArgs)
			r, err := LookupMatchmakingConfiguration(ctx, &args, opts...)
			var s LookupMatchmakingConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMatchmakingConfigurationResultOutput)
}

type LookupMatchmakingConfigurationOutputArgs struct {
	// A unique identifier for the matchmaking configuration.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupMatchmakingConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMatchmakingConfigurationArgs)(nil)).Elem()
}

type LookupMatchmakingConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupMatchmakingConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMatchmakingConfigurationResult)(nil)).Elem()
}

func (o LookupMatchmakingConfigurationResultOutput) ToLookupMatchmakingConfigurationResultOutput() LookupMatchmakingConfigurationResultOutput {
	return o
}

func (o LookupMatchmakingConfigurationResultOutput) ToLookupMatchmakingConfigurationResultOutputWithContext(ctx context.Context) LookupMatchmakingConfigurationResultOutput {
	return o
}

// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
func (o LookupMatchmakingConfigurationResultOutput) AcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *bool { return v.AcceptanceRequired }).(pulumi.BoolPtrOutput)
}

// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
func (o LookupMatchmakingConfigurationResultOutput) AcceptanceTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *int { return v.AcceptanceTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The number of player slots in a match to keep open for future players.
func (o LookupMatchmakingConfigurationResultOutput) AdditionalPlayerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *int { return v.AdditionalPlayerCount }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely identifies it.
func (o LookupMatchmakingConfigurationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The method used to backfill game sessions created with this matchmaking configuration.
func (o LookupMatchmakingConfigurationResultOutput) BackfillMode() MatchmakingConfigurationBackfillModePtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *MatchmakingConfigurationBackfillMode {
		return v.BackfillMode
	}).(MatchmakingConfigurationBackfillModePtrOutput)
}

// A time stamp indicating when this data object was created.
func (o LookupMatchmakingConfigurationResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// Information to attach to all events related to the matchmaking configuration.
func (o LookupMatchmakingConfigurationResultOutput) CustomEventData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.CustomEventData }).(pulumi.StringPtrOutput)
}

// A descriptive label that is associated with matchmaking configuration.
func (o LookupMatchmakingConfigurationResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
func (o LookupMatchmakingConfigurationResultOutput) FlexMatchMode() MatchmakingConfigurationFlexMatchModePtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *MatchmakingConfigurationFlexMatchMode {
		return v.FlexMatchMode
	}).(MatchmakingConfigurationFlexMatchModePtrOutput)
}

// A set of custom properties for a game session, formatted as key:value pairs.
func (o LookupMatchmakingConfigurationResultOutput) GameProperties() MatchmakingConfigurationGamePropertyArrayOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) []MatchmakingConfigurationGameProperty {
		return v.GameProperties
	}).(MatchmakingConfigurationGamePropertyArrayOutput)
}

// A set of custom game session properties, formatted as a single string value.
func (o LookupMatchmakingConfigurationResultOutput) GameSessionData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.GameSessionData }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
func (o LookupMatchmakingConfigurationResultOutput) GameSessionQueueArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) []string { return v.GameSessionQueueArns }).(pulumi.StringArrayOutput)
}

// An SNS topic ARN that is set up to receive matchmaking notifications.
func (o LookupMatchmakingConfigurationResultOutput) NotificationTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.NotificationTarget }).(pulumi.StringPtrOutput)
}

// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
func (o LookupMatchmakingConfigurationResultOutput) RequestTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *int { return v.RequestTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
func (o LookupMatchmakingConfigurationResultOutput) RuleSetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.RuleSetArn }).(pulumi.StringPtrOutput)
}

// A unique identifier for the matchmaking rule set to use with this configuration.
func (o LookupMatchmakingConfigurationResultOutput) RuleSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) *string { return v.RuleSetName }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupMatchmakingConfigurationResultOutput) Tags() MatchmakingConfigurationTagArrayOutput {
	return o.ApplyT(func(v LookupMatchmakingConfigurationResult) []MatchmakingConfigurationTag { return v.Tags }).(MatchmakingConfigurationTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMatchmakingConfigurationResultOutput{})
}
