// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::GameLift::Alias resource creates an alias for an Amazon GameLift (GameLift) fleet destination.
func LookupAlias(ctx *pulumi.Context, args *LookupAliasArgs, opts ...pulumi.InvokeOption) (*LookupAliasResult, error) {
	var rv LookupAliasResult
	err := ctx.Invoke("aws-native:gamelift:getAlias", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAliasArgs struct {
	// Unique alias ID
	AliasId string `pulumi:"aliasId"`
}

type LookupAliasResult struct {
	// Unique alias ID
	AliasId *string `pulumi:"aliasId"`
	// A human-readable description of the alias.
	Description *string `pulumi:"description"`
	// A descriptive label that is associated with an alias. Alias names do not need to be unique.
	Name *string `pulumi:"name"`
	// A routing configuration that specifies where traffic is directed for this alias, such as to a fleet or to a message.
	RoutingStrategy *AliasRoutingStrategy `pulumi:"routingStrategy"`
}

func LookupAliasOutput(ctx *pulumi.Context, args LookupAliasOutputArgs, opts ...pulumi.InvokeOption) LookupAliasResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAliasResult, error) {
			args := v.(LookupAliasArgs)
			r, err := LookupAlias(ctx, &args, opts...)
			return *r, err
		}).(LookupAliasResultOutput)
}

type LookupAliasOutputArgs struct {
	// Unique alias ID
	AliasId pulumi.StringInput `pulumi:"aliasId"`
}

func (LookupAliasOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAliasArgs)(nil)).Elem()
}

type LookupAliasResultOutput struct{ *pulumi.OutputState }

func (LookupAliasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAliasResult)(nil)).Elem()
}

func (o LookupAliasResultOutput) ToLookupAliasResultOutput() LookupAliasResultOutput {
	return o
}

func (o LookupAliasResultOutput) ToLookupAliasResultOutputWithContext(ctx context.Context) LookupAliasResultOutput {
	return o
}

// Unique alias ID
func (o LookupAliasResultOutput) AliasId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAliasResult) *string { return v.AliasId }).(pulumi.StringPtrOutput)
}

// A human-readable description of the alias.
func (o LookupAliasResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAliasResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A descriptive label that is associated with an alias. Alias names do not need to be unique.
func (o LookupAliasResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAliasResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A routing configuration that specifies where traffic is directed for this alias, such as to a fleet or to a message.
func (o LookupAliasResultOutput) RoutingStrategy() AliasRoutingStrategyPtrOutput {
	return o.ApplyT(func(v LookupAliasResult) *AliasRoutingStrategy { return v.RoutingStrategy }).(AliasRoutingStrategyPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAliasResultOutput{})
}
