// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::GameLift::GameSessionQueue resource creates an Amazon GameLift (GameLift) game session queue.
func LookupGameSessionQueue(ctx *pulumi.Context, args *LookupGameSessionQueueArgs, opts ...pulumi.InvokeOption) (*LookupGameSessionQueueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGameSessionQueueResult
	err := ctx.Invoke("aws-native:gamelift:getGameSessionQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGameSessionQueueArgs struct {
	// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
	Name string `pulumi:"name"`
}

type LookupGameSessionQueueResult struct {
	// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
	Arn *string `pulumi:"arn"`
	// Information that is added to all events that are related to this game session queue.
	CustomEventData *string `pulumi:"customEventData"`
	// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
	Destinations []GameSessionQueueDestination `pulumi:"destinations"`
	// A list of locations where a queue is allowed to place new game sessions.
	FilterConfiguration *GameSessionQueueFilterConfiguration `pulumi:"filterConfiguration"`
	// An SNS topic ARN that is set up to receive game session placement notifications.
	NotificationTarget *string `pulumi:"notificationTarget"`
	// A set of policies that act as a sliding cap on player latency.
	PlayerLatencyPolicies []GameSessionQueuePlayerLatencyPolicy `pulumi:"playerLatencyPolicies"`
	// Custom settings to use when prioritizing destinations and locations for game session placements.
	PriorityConfiguration *GameSessionQueuePriorityConfiguration `pulumi:"priorityConfiguration"`
	// An array of key-value pairs to apply to this resource.
	Tags []GameSessionQueueTag `pulumi:"tags"`
	// The maximum time, in seconds, that a new game session placement request remains in the queue.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

func LookupGameSessionQueueOutput(ctx *pulumi.Context, args LookupGameSessionQueueOutputArgs, opts ...pulumi.InvokeOption) LookupGameSessionQueueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGameSessionQueueResult, error) {
			args := v.(LookupGameSessionQueueArgs)
			r, err := LookupGameSessionQueue(ctx, &args, opts...)
			var s LookupGameSessionQueueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGameSessionQueueResultOutput)
}

type LookupGameSessionQueueOutputArgs struct {
	// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupGameSessionQueueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGameSessionQueueArgs)(nil)).Elem()
}

type LookupGameSessionQueueResultOutput struct{ *pulumi.OutputState }

func (LookupGameSessionQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGameSessionQueueResult)(nil)).Elem()
}

func (o LookupGameSessionQueueResultOutput) ToLookupGameSessionQueueResultOutput() LookupGameSessionQueueResultOutput {
	return o
}

func (o LookupGameSessionQueueResultOutput) ToLookupGameSessionQueueResultOutputWithContext(ctx context.Context) LookupGameSessionQueueResultOutput {
	return o
}

func (o LookupGameSessionQueueResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupGameSessionQueueResult] {
	return pulumix.Output[LookupGameSessionQueueResult]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
func (o LookupGameSessionQueueResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Information that is added to all events that are related to this game session queue.
func (o LookupGameSessionQueueResultOutput) CustomEventData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) *string { return v.CustomEventData }).(pulumi.StringPtrOutput)
}

// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.
func (o LookupGameSessionQueueResultOutput) Destinations() GameSessionQueueDestinationArrayOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) []GameSessionQueueDestination { return v.Destinations }).(GameSessionQueueDestinationArrayOutput)
}

// A list of locations where a queue is allowed to place new game sessions.
func (o LookupGameSessionQueueResultOutput) FilterConfiguration() GameSessionQueueFilterConfigurationPtrOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) *GameSessionQueueFilterConfiguration {
		return v.FilterConfiguration
	}).(GameSessionQueueFilterConfigurationPtrOutput)
}

// An SNS topic ARN that is set up to receive game session placement notifications.
func (o LookupGameSessionQueueResultOutput) NotificationTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) *string { return v.NotificationTarget }).(pulumi.StringPtrOutput)
}

// A set of policies that act as a sliding cap on player latency.
func (o LookupGameSessionQueueResultOutput) PlayerLatencyPolicies() GameSessionQueuePlayerLatencyPolicyArrayOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) []GameSessionQueuePlayerLatencyPolicy {
		return v.PlayerLatencyPolicies
	}).(GameSessionQueuePlayerLatencyPolicyArrayOutput)
}

// Custom settings to use when prioritizing destinations and locations for game session placements.
func (o LookupGameSessionQueueResultOutput) PriorityConfiguration() GameSessionQueuePriorityConfigurationPtrOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) *GameSessionQueuePriorityConfiguration {
		return v.PriorityConfiguration
	}).(GameSessionQueuePriorityConfigurationPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupGameSessionQueueResultOutput) Tags() GameSessionQueueTagArrayOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) []GameSessionQueueTag { return v.Tags }).(GameSessionQueueTagArrayOutput)
}

// The maximum time, in seconds, that a new game session placement request remains in the queue.
func (o LookupGameSessionQueueResultOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupGameSessionQueueResult) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGameSessionQueueResultOutput{})
}
