// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::GameLift::MatchmakingConfiguration
//
// Deprecated: MatchmakingConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type MatchmakingConfiguration struct {
	pulumi.CustomResourceState

	AcceptanceRequired       pulumi.BoolOutput                               `pulumi:"acceptanceRequired"`
	AcceptanceTimeoutSeconds pulumi.IntPtrOutput                             `pulumi:"acceptanceTimeoutSeconds"`
	AdditionalPlayerCount    pulumi.IntPtrOutput                             `pulumi:"additionalPlayerCount"`
	Arn                      pulumi.StringOutput                             `pulumi:"arn"`
	BackfillMode             pulumi.StringPtrOutput                          `pulumi:"backfillMode"`
	CustomEventData          pulumi.StringPtrOutput                          `pulumi:"customEventData"`
	Description              pulumi.StringPtrOutput                          `pulumi:"description"`
	FlexMatchMode            pulumi.StringPtrOutput                          `pulumi:"flexMatchMode"`
	GameProperties           MatchmakingConfigurationGamePropertyArrayOutput `pulumi:"gameProperties"`
	GameSessionData          pulumi.StringPtrOutput                          `pulumi:"gameSessionData"`
	GameSessionQueueArns     pulumi.StringArrayOutput                        `pulumi:"gameSessionQueueArns"`
	Name                     pulumi.StringOutput                             `pulumi:"name"`
	NotificationTarget       pulumi.StringPtrOutput                          `pulumi:"notificationTarget"`
	RequestTimeoutSeconds    pulumi.IntOutput                                `pulumi:"requestTimeoutSeconds"`
	RuleSetName              pulumi.StringOutput                             `pulumi:"ruleSetName"`
}

// NewMatchmakingConfiguration registers a new resource with the given unique name, arguments, and options.
func NewMatchmakingConfiguration(ctx *pulumi.Context,
	name string, args *MatchmakingConfigurationArgs, opts ...pulumi.ResourceOption) (*MatchmakingConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceptanceRequired == nil {
		return nil, errors.New("invalid value for required argument 'AcceptanceRequired'")
	}
	if args.RequestTimeoutSeconds == nil {
		return nil, errors.New("invalid value for required argument 'RequestTimeoutSeconds'")
	}
	if args.RuleSetName == nil {
		return nil, errors.New("invalid value for required argument 'RuleSetName'")
	}
	var resource MatchmakingConfiguration
	err := ctx.RegisterResource("aws-native:gamelift:MatchmakingConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMatchmakingConfiguration gets an existing MatchmakingConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMatchmakingConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MatchmakingConfigurationState, opts ...pulumi.ResourceOption) (*MatchmakingConfiguration, error) {
	var resource MatchmakingConfiguration
	err := ctx.ReadResource("aws-native:gamelift:MatchmakingConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MatchmakingConfiguration resources.
type matchmakingConfigurationState struct {
}

type MatchmakingConfigurationState struct {
}

func (MatchmakingConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*matchmakingConfigurationState)(nil)).Elem()
}

type matchmakingConfigurationArgs struct {
	AcceptanceRequired       bool                                   `pulumi:"acceptanceRequired"`
	AcceptanceTimeoutSeconds *int                                   `pulumi:"acceptanceTimeoutSeconds"`
	AdditionalPlayerCount    *int                                   `pulumi:"additionalPlayerCount"`
	BackfillMode             *string                                `pulumi:"backfillMode"`
	CustomEventData          *string                                `pulumi:"customEventData"`
	Description              *string                                `pulumi:"description"`
	FlexMatchMode            *string                                `pulumi:"flexMatchMode"`
	GameProperties           []MatchmakingConfigurationGameProperty `pulumi:"gameProperties"`
	GameSessionData          *string                                `pulumi:"gameSessionData"`
	GameSessionQueueArns     []string                               `pulumi:"gameSessionQueueArns"`
	Name                     *string                                `pulumi:"name"`
	NotificationTarget       *string                                `pulumi:"notificationTarget"`
	RequestTimeoutSeconds    int                                    `pulumi:"requestTimeoutSeconds"`
	RuleSetName              string                                 `pulumi:"ruleSetName"`
}

// The set of arguments for constructing a MatchmakingConfiguration resource.
type MatchmakingConfigurationArgs struct {
	AcceptanceRequired       pulumi.BoolInput
	AcceptanceTimeoutSeconds pulumi.IntPtrInput
	AdditionalPlayerCount    pulumi.IntPtrInput
	BackfillMode             pulumi.StringPtrInput
	CustomEventData          pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	FlexMatchMode            pulumi.StringPtrInput
	GameProperties           MatchmakingConfigurationGamePropertyArrayInput
	GameSessionData          pulumi.StringPtrInput
	GameSessionQueueArns     pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	NotificationTarget       pulumi.StringPtrInput
	RequestTimeoutSeconds    pulumi.IntInput
	RuleSetName              pulumi.StringInput
}

func (MatchmakingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*matchmakingConfigurationArgs)(nil)).Elem()
}

type MatchmakingConfigurationInput interface {
	pulumi.Input

	ToMatchmakingConfigurationOutput() MatchmakingConfigurationOutput
	ToMatchmakingConfigurationOutputWithContext(ctx context.Context) MatchmakingConfigurationOutput
}

func (*MatchmakingConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchmakingConfiguration)(nil))
}

func (i *MatchmakingConfiguration) ToMatchmakingConfigurationOutput() MatchmakingConfigurationOutput {
	return i.ToMatchmakingConfigurationOutputWithContext(context.Background())
}

func (i *MatchmakingConfiguration) ToMatchmakingConfigurationOutputWithContext(ctx context.Context) MatchmakingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchmakingConfigurationOutput)
}

type MatchmakingConfigurationOutput struct{ *pulumi.OutputState }

func (MatchmakingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchmakingConfiguration)(nil))
}

func (o MatchmakingConfigurationOutput) ToMatchmakingConfigurationOutput() MatchmakingConfigurationOutput {
	return o
}

func (o MatchmakingConfigurationOutput) ToMatchmakingConfigurationOutputWithContext(ctx context.Context) MatchmakingConfigurationOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MatchmakingConfigurationInput)(nil)).Elem(), &MatchmakingConfiguration{})
	pulumi.RegisterOutputType(MatchmakingConfigurationOutput{})
}
