// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::GameLift::Build
type Build struct {
	pulumi.CustomResourceState

	// A unique identifier for a build to be deployed on the new fleet. If you are deploying the fleet with a custom game build, you must specify this property. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
	BuildId pulumi.StringOutput `pulumi:"buildId"`
	// A descriptive label that is associated with a build. Build names do not need to be unique.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
	OperatingSystem BuildOperatingSystemPtrOutput `pulumi:"operatingSystem"`
	// A server SDK version you used when integrating your game server build with Amazon GameLift. By default Amazon GameLift sets this value to 4.0.2.
	ServerSdkVersion pulumi.StringPtrOutput `pulumi:"serverSdkVersion"`
	// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.
	StorageLocation BuildStorageLocationPtrOutput `pulumi:"storageLocation"`
	// Version information that is associated with this build. Version strings do not need to be unique.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil {
		args = &BuildArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"operatingSystem",
		"serverSdkVersion",
		"storageLocation",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Build
	err := ctx.RegisterResource("aws-native:gamelift:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("aws-native:gamelift:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
}

type BuildState struct {
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	// A descriptive label that is associated with a build. Build names do not need to be unique.
	Name *string `pulumi:"name"`
	// The operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
	OperatingSystem *BuildOperatingSystem `pulumi:"operatingSystem"`
	// A server SDK version you used when integrating your game server build with Amazon GameLift. By default Amazon GameLift sets this value to 4.0.2.
	ServerSdkVersion *string `pulumi:"serverSdkVersion"`
	// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.
	StorageLocation *BuildStorageLocation `pulumi:"storageLocation"`
	// Version information that is associated with this build. Version strings do not need to be unique.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	// A descriptive label that is associated with a build. Build names do not need to be unique.
	Name pulumi.StringPtrInput
	// The operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
	OperatingSystem BuildOperatingSystemPtrInput
	// A server SDK version you used when integrating your game server build with Amazon GameLift. By default Amazon GameLift sets this value to 4.0.2.
	ServerSdkVersion pulumi.StringPtrInput
	// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.
	StorageLocation BuildStorageLocationPtrInput
	// Version information that is associated with this build. Version strings do not need to be unique.
	Version pulumi.StringPtrInput
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}

type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(ctx context.Context) BuildOutput
}

func (*Build) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *Build) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i *Build) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

func (i *Build) ToOutput(ctx context.Context) pulumix.Output[*Build] {
	return pulumix.Output[*Build]{
		OutputState: i.ToBuildOutputWithContext(ctx).OutputState,
	}
}

type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

func (o BuildOutput) ToOutput(ctx context.Context) pulumix.Output[*Build] {
	return pulumix.Output[*Build]{
		OutputState: o.OutputState,
	}
}

// A unique identifier for a build to be deployed on the new fleet. If you are deploying the fleet with a custom game build, you must specify this property. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
func (o BuildOutput) BuildId() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.BuildId }).(pulumi.StringOutput)
}

// A descriptive label that is associated with a build. Build names do not need to be unique.
func (o BuildOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
func (o BuildOutput) OperatingSystem() BuildOperatingSystemPtrOutput {
	return o.ApplyT(func(v *Build) BuildOperatingSystemPtrOutput { return v.OperatingSystem }).(BuildOperatingSystemPtrOutput)
}

// A server SDK version you used when integrating your game server build with Amazon GameLift. By default Amazon GameLift sets this value to 4.0.2.
func (o BuildOutput) ServerSdkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) pulumi.StringPtrOutput { return v.ServerSdkVersion }).(pulumi.StringPtrOutput)
}

// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.
func (o BuildOutput) StorageLocation() BuildStorageLocationPtrOutput {
	return o.ApplyT(func(v *Build) BuildStorageLocationPtrOutput { return v.StorageLocation }).(BuildStorageLocationPtrOutput)
}

// Version information that is associated with this build. Version strings do not need to be unique.
func (o BuildOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Build) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildInput)(nil)).Elem(), &Build{})
	pulumi.RegisterOutputType(BuildOutput{})
}
