// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::GameLift::Location resource creates an Amazon GameLift (GameLift) custom location.
type Location struct {
	pulumi.CustomResourceState

	LocationArn  pulumi.StringOutput `pulumi:"locationArn"`
	LocationName pulumi.StringOutput `pulumi:"locationName"`
	// An array of key-value pairs to apply to this resource.
	Tags LocationTagArrayOutput `pulumi:"tags"`
}

// NewLocation registers a new resource with the given unique name, arguments, and options.
func NewLocation(ctx *pulumi.Context,
	name string, args *LocationArgs, opts ...pulumi.ResourceOption) (*Location, error) {
	if args == nil {
		args = &LocationArgs{}
	}

	var resource Location
	err := ctx.RegisterResource("aws-native:gamelift:Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocation gets an existing Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationState, opts ...pulumi.ResourceOption) (*Location, error) {
	var resource Location
	err := ctx.ReadResource("aws-native:gamelift:Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Location resources.
type locationState struct {
}

type LocationState struct {
}

func (LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationState)(nil)).Elem()
}

type locationArgs struct {
	LocationName *string `pulumi:"locationName"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationTag `pulumi:"tags"`
}

// The set of arguments for constructing a Location resource.
type LocationArgs struct {
	LocationName pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LocationTagArrayInput
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationArgs)(nil)).Elem()
}

type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(ctx context.Context) LocationOutput
}

func (*Location) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (i *Location) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i *Location) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

func (o LocationOutput) LocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.LocationArn }).(pulumi.StringOutput)
}

func (o LocationOutput) LocationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.LocationName }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LocationOutput) Tags() LocationTagArrayOutput {
	return o.ApplyT(func(v *Location) LocationTagArrayOutput { return v.Tags }).(LocationTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), &Location{})
	pulumi.RegisterOutputType(LocationOutput{})
}
