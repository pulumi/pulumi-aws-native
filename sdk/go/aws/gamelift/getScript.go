// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::GameLift::Script resource creates a new script record for your Realtime Servers script. Realtime scripts are JavaScript that provide configuration settings and optional custom game logic for your game. The script is deployed when you create a Realtime Servers fleet to host your game sessions. Script logic is executed during an active game session.
func LookupScript(ctx *pulumi.Context, args *LookupScriptArgs, opts ...pulumi.InvokeOption) (*LookupScriptResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScriptResult
	err := ctx.Invoke("aws-native:gamelift:getScript", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScriptArgs struct {
	// A unique identifier for the Realtime script
	Id string `pulumi:"id"`
}

type LookupScriptResult struct {
	// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift script resource and uniquely identifies it. ARNs are unique across all Regions. In a GameLift script ARN, the resource ID matches the Id value.
	Arn *string `pulumi:"arn"`
	// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
	CreationTime *string `pulumi:"creationTime"`
	// A unique identifier for the Realtime script
	Id *string `pulumi:"id"`
	// A descriptive label that is associated with a script. Script names do not need to be unique.
	Name *string `pulumi:"name"`
	// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
	SizeOnDisk *int `pulumi:"sizeOnDisk"`
	// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
	StorageLocation *ScriptS3Location `pulumi:"storageLocation"`
	// An array of key-value pairs to apply to this resource.
	Tags []ScriptTag `pulumi:"tags"`
	// The version that is associated with a script. Version strings do not need to be unique.
	Version *string `pulumi:"version"`
}

func LookupScriptOutput(ctx *pulumi.Context, args LookupScriptOutputArgs, opts ...pulumi.InvokeOption) LookupScriptResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScriptResult, error) {
			args := v.(LookupScriptArgs)
			r, err := LookupScript(ctx, &args, opts...)
			var s LookupScriptResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScriptResultOutput)
}

type LookupScriptOutputArgs struct {
	// A unique identifier for the Realtime script
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupScriptOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScriptArgs)(nil)).Elem()
}

type LookupScriptResultOutput struct{ *pulumi.OutputState }

func (LookupScriptResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScriptResult)(nil)).Elem()
}

func (o LookupScriptResultOutput) ToLookupScriptResultOutput() LookupScriptResultOutput {
	return o
}

func (o LookupScriptResultOutput) ToLookupScriptResultOutputWithContext(ctx context.Context) LookupScriptResultOutput {
	return o
}

func (o LookupScriptResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupScriptResult] {
	return pulumix.Output[LookupScriptResult]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift script resource and uniquely identifies it. ARNs are unique across all Regions. In a GameLift script ARN, the resource ID matches the Id value.
func (o LookupScriptResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScriptResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
func (o LookupScriptResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScriptResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// A unique identifier for the Realtime script
func (o LookupScriptResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScriptResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A descriptive label that is associated with a script. Script names do not need to be unique.
func (o LookupScriptResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScriptResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
func (o LookupScriptResultOutput) SizeOnDisk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScriptResult) *int { return v.SizeOnDisk }).(pulumi.IntPtrOutput)
}

// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
func (o LookupScriptResultOutput) StorageLocation() ScriptS3LocationPtrOutput {
	return o.ApplyT(func(v LookupScriptResult) *ScriptS3Location { return v.StorageLocation }).(ScriptS3LocationPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupScriptResultOutput) Tags() ScriptTagArrayOutput {
	return o.ApplyT(func(v LookupScriptResult) []ScriptTag { return v.Tags }).(ScriptTagArrayOutput)
}

// The version that is associated with a script. Version strings do not need to be unique.
func (o LookupScriptResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScriptResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScriptResultOutput{})
}
