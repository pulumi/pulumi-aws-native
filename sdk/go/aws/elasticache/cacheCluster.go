// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ElastiCache::CacheCluster
//
// Deprecated: CacheCluster is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type CacheCluster struct {
	pulumi.CustomResourceState

	AZMode                       pulumi.StringPtrOutput                                 `pulumi:"aZMode"`
	AutoMinorVersionUpgrade      pulumi.BoolPtrOutput                                   `pulumi:"autoMinorVersionUpgrade"`
	CacheNodeType                pulumi.StringOutput                                    `pulumi:"cacheNodeType"`
	CacheParameterGroupName      pulumi.StringPtrOutput                                 `pulumi:"cacheParameterGroupName"`
	CacheSecurityGroupNames      pulumi.StringArrayOutput                               `pulumi:"cacheSecurityGroupNames"`
	CacheSubnetGroupName         pulumi.StringPtrOutput                                 `pulumi:"cacheSubnetGroupName"`
	ClusterName                  pulumi.StringPtrOutput                                 `pulumi:"clusterName"`
	ConfigurationEndpointAddress pulumi.StringPtrOutput                                 `pulumi:"configurationEndpointAddress"`
	ConfigurationEndpointPort    pulumi.StringPtrOutput                                 `pulumi:"configurationEndpointPort"`
	Engine                       pulumi.StringOutput                                    `pulumi:"engine"`
	EngineVersion                pulumi.StringPtrOutput                                 `pulumi:"engineVersion"`
	LogDeliveryConfigurations    CacheClusterLogDeliveryConfigurationRequestArrayOutput `pulumi:"logDeliveryConfigurations"`
	NotificationTopicArn         pulumi.StringPtrOutput                                 `pulumi:"notificationTopicArn"`
	NumCacheNodes                pulumi.IntOutput                                       `pulumi:"numCacheNodes"`
	Port                         pulumi.IntPtrOutput                                    `pulumi:"port"`
	PreferredAvailabilityZone    pulumi.StringPtrOutput                                 `pulumi:"preferredAvailabilityZone"`
	PreferredAvailabilityZones   pulumi.StringArrayOutput                               `pulumi:"preferredAvailabilityZones"`
	PreferredMaintenanceWindow   pulumi.StringPtrOutput                                 `pulumi:"preferredMaintenanceWindow"`
	RedisEndpointAddress         pulumi.StringPtrOutput                                 `pulumi:"redisEndpointAddress"`
	RedisEndpointPort            pulumi.StringPtrOutput                                 `pulumi:"redisEndpointPort"`
	SnapshotArns                 pulumi.StringArrayOutput                               `pulumi:"snapshotArns"`
	SnapshotName                 pulumi.StringPtrOutput                                 `pulumi:"snapshotName"`
	SnapshotRetentionLimit       pulumi.IntPtrOutput                                    `pulumi:"snapshotRetentionLimit"`
	SnapshotWindow               pulumi.StringPtrOutput                                 `pulumi:"snapshotWindow"`
	Tags                         CacheClusterTagArrayOutput                             `pulumi:"tags"`
	VpcSecurityGroupIds          pulumi.StringArrayOutput                               `pulumi:"vpcSecurityGroupIds"`
}

// NewCacheCluster registers a new resource with the given unique name, arguments, and options.
func NewCacheCluster(ctx *pulumi.Context,
	name string, args *CacheClusterArgs, opts ...pulumi.ResourceOption) (*CacheCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CacheNodeType == nil {
		return nil, errors.New("invalid value for required argument 'CacheNodeType'")
	}
	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.NumCacheNodes == nil {
		return nil, errors.New("invalid value for required argument 'NumCacheNodes'")
	}
	var resource CacheCluster
	err := ctx.RegisterResource("aws-native:elasticache:CacheCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCacheCluster gets an existing CacheCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCacheCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheClusterState, opts ...pulumi.ResourceOption) (*CacheCluster, error) {
	var resource CacheCluster
	err := ctx.ReadResource("aws-native:elasticache:CacheCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CacheCluster resources.
type cacheClusterState struct {
}

type CacheClusterState struct {
}

func (CacheClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheClusterState)(nil)).Elem()
}

type cacheClusterArgs struct {
	AZMode                       *string                                       `pulumi:"aZMode"`
	AutoMinorVersionUpgrade      *bool                                         `pulumi:"autoMinorVersionUpgrade"`
	CacheNodeType                string                                        `pulumi:"cacheNodeType"`
	CacheParameterGroupName      *string                                       `pulumi:"cacheParameterGroupName"`
	CacheSecurityGroupNames      []string                                      `pulumi:"cacheSecurityGroupNames"`
	CacheSubnetGroupName         *string                                       `pulumi:"cacheSubnetGroupName"`
	ClusterName                  *string                                       `pulumi:"clusterName"`
	ConfigurationEndpointAddress *string                                       `pulumi:"configurationEndpointAddress"`
	ConfigurationEndpointPort    *string                                       `pulumi:"configurationEndpointPort"`
	Engine                       string                                        `pulumi:"engine"`
	EngineVersion                *string                                       `pulumi:"engineVersion"`
	LogDeliveryConfigurations    []CacheClusterLogDeliveryConfigurationRequest `pulumi:"logDeliveryConfigurations"`
	NotificationTopicArn         *string                                       `pulumi:"notificationTopicArn"`
	NumCacheNodes                int                                           `pulumi:"numCacheNodes"`
	Port                         *int                                          `pulumi:"port"`
	PreferredAvailabilityZone    *string                                       `pulumi:"preferredAvailabilityZone"`
	PreferredAvailabilityZones   []string                                      `pulumi:"preferredAvailabilityZones"`
	PreferredMaintenanceWindow   *string                                       `pulumi:"preferredMaintenanceWindow"`
	RedisEndpointAddress         *string                                       `pulumi:"redisEndpointAddress"`
	RedisEndpointPort            *string                                       `pulumi:"redisEndpointPort"`
	SnapshotArns                 []string                                      `pulumi:"snapshotArns"`
	SnapshotName                 *string                                       `pulumi:"snapshotName"`
	SnapshotRetentionLimit       *int                                          `pulumi:"snapshotRetentionLimit"`
	SnapshotWindow               *string                                       `pulumi:"snapshotWindow"`
	Tags                         []CacheClusterTag                             `pulumi:"tags"`
	VpcSecurityGroupIds          []string                                      `pulumi:"vpcSecurityGroupIds"`
}

// The set of arguments for constructing a CacheCluster resource.
type CacheClusterArgs struct {
	AZMode                       pulumi.StringPtrInput
	AutoMinorVersionUpgrade      pulumi.BoolPtrInput
	CacheNodeType                pulumi.StringInput
	CacheParameterGroupName      pulumi.StringPtrInput
	CacheSecurityGroupNames      pulumi.StringArrayInput
	CacheSubnetGroupName         pulumi.StringPtrInput
	ClusterName                  pulumi.StringPtrInput
	ConfigurationEndpointAddress pulumi.StringPtrInput
	ConfigurationEndpointPort    pulumi.StringPtrInput
	Engine                       pulumi.StringInput
	EngineVersion                pulumi.StringPtrInput
	LogDeliveryConfigurations    CacheClusterLogDeliveryConfigurationRequestArrayInput
	NotificationTopicArn         pulumi.StringPtrInput
	NumCacheNodes                pulumi.IntInput
	Port                         pulumi.IntPtrInput
	PreferredAvailabilityZone    pulumi.StringPtrInput
	PreferredAvailabilityZones   pulumi.StringArrayInput
	PreferredMaintenanceWindow   pulumi.StringPtrInput
	RedisEndpointAddress         pulumi.StringPtrInput
	RedisEndpointPort            pulumi.StringPtrInput
	SnapshotArns                 pulumi.StringArrayInput
	SnapshotName                 pulumi.StringPtrInput
	SnapshotRetentionLimit       pulumi.IntPtrInput
	SnapshotWindow               pulumi.StringPtrInput
	Tags                         CacheClusterTagArrayInput
	VpcSecurityGroupIds          pulumi.StringArrayInput
}

func (CacheClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheClusterArgs)(nil)).Elem()
}

type CacheClusterInput interface {
	pulumi.Input

	ToCacheClusterOutput() CacheClusterOutput
	ToCacheClusterOutputWithContext(ctx context.Context) CacheClusterOutput
}

func (*CacheCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheCluster)(nil))
}

func (i *CacheCluster) ToCacheClusterOutput() CacheClusterOutput {
	return i.ToCacheClusterOutputWithContext(context.Background())
}

func (i *CacheCluster) ToCacheClusterOutputWithContext(ctx context.Context) CacheClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheClusterOutput)
}

type CacheClusterOutput struct{ *pulumi.OutputState }

func (CacheClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheCluster)(nil))
}

func (o CacheClusterOutput) ToCacheClusterOutput() CacheClusterOutput {
	return o
}

func (o CacheClusterOutput) ToCacheClusterOutputWithContext(ctx context.Context) CacheClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CacheClusterOutput{})
}
