// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::ElastiCache::ServerlessCache resource creates an Amazon ElastiCache Serverless Cache.
type ServerlessCache struct {
	pulumi.CustomResourceState

	// The ARN of the Serverless Cache.
	Arn              pulumi.StringOutput                      `pulumi:"arn"`
	CacheUsageLimits ServerlessCacheCacheUsageLimitsPtrOutput `pulumi:"cacheUsageLimits"`
	// The creation time of the Serverless Cache.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
	DailySnapshotTime pulumi.StringPtrOutput `pulumi:"dailySnapshotTime"`
	// The description of the Serverless Cache.
	Description pulumi.StringPtrOutput           `pulumi:"description"`
	Endpoint    ServerlessCacheEndpointPtrOutput `pulumi:"endpoint"`
	// The engine name of the Serverless Cache.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The final snapshot name which is taken before Serverless Cache is deleted.
	FinalSnapshotName pulumi.StringPtrOutput `pulumi:"finalSnapshotName"`
	// The full engine version of the Serverless Cache.
	FullEngineVersion pulumi.StringOutput `pulumi:"fullEngineVersion"`
	// The ID of the KMS key used to encrypt the cluster.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The major engine version of the Serverless Cache.
	MajorEngineVersion pulumi.StringPtrOutput           `pulumi:"majorEngineVersion"`
	ReaderEndpoint     ServerlessCacheEndpointPtrOutput `pulumi:"readerEndpoint"`
	// One or more Amazon VPC security groups associated with this Serverless Cache.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The name of the Serverless Cache. This value must be unique.
	ServerlessCacheName pulumi.StringOutput `pulumi:"serverlessCacheName"`
	// The ARN's of snapshot to restore Serverless Cache.
	SnapshotArnsToRestore pulumi.StringArrayOutput `pulumi:"snapshotArnsToRestore"`
	// The snapshot retention limit of the Serverless Cache.
	SnapshotRetentionLimit pulumi.IntPtrOutput `pulumi:"snapshotRetentionLimit"`
	// The status of the Serverless Cache.
	Status pulumi.StringOutput `pulumi:"status"`
	// The subnet id's of the Serverless Cache.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// An array of key-value pairs to apply to this Serverless Cache.
	Tags ServerlessCacheTagArrayOutput `pulumi:"tags"`
	// The ID of the user group.
	UserGroupId pulumi.StringPtrOutput `pulumi:"userGroupId"`
}

// NewServerlessCache registers a new resource with the given unique name, arguments, and options.
func NewServerlessCache(ctx *pulumi.Context,
	name string, args *ServerlessCacheArgs, opts ...pulumi.ResourceOption) (*ServerlessCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"engine",
		"kmsKeyId",
		"majorEngineVersion",
		"serverlessCacheName",
		"snapshotArnsToRestore[*]",
		"subnetIds[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessCache
	err := ctx.RegisterResource("aws-native:elasticache:ServerlessCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessCache gets an existing ServerlessCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessCacheState, opts ...pulumi.ResourceOption) (*ServerlessCache, error) {
	var resource ServerlessCache
	err := ctx.ReadResource("aws-native:elasticache:ServerlessCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessCache resources.
type serverlessCacheState struct {
}

type ServerlessCacheState struct {
}

func (ServerlessCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessCacheState)(nil)).Elem()
}

type serverlessCacheArgs struct {
	CacheUsageLimits *ServerlessCacheCacheUsageLimits `pulumi:"cacheUsageLimits"`
	// The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
	DailySnapshotTime *string `pulumi:"dailySnapshotTime"`
	// The description of the Serverless Cache.
	Description *string                  `pulumi:"description"`
	Endpoint    *ServerlessCacheEndpoint `pulumi:"endpoint"`
	// The engine name of the Serverless Cache.
	Engine string `pulumi:"engine"`
	// The final snapshot name which is taken before Serverless Cache is deleted.
	FinalSnapshotName *string `pulumi:"finalSnapshotName"`
	// The ID of the KMS key used to encrypt the cluster.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The major engine version of the Serverless Cache.
	MajorEngineVersion *string                  `pulumi:"majorEngineVersion"`
	ReaderEndpoint     *ServerlessCacheEndpoint `pulumi:"readerEndpoint"`
	// One or more Amazon VPC security groups associated with this Serverless Cache.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The name of the Serverless Cache. This value must be unique.
	ServerlessCacheName *string `pulumi:"serverlessCacheName"`
	// The ARN's of snapshot to restore Serverless Cache.
	SnapshotArnsToRestore []string `pulumi:"snapshotArnsToRestore"`
	// The snapshot retention limit of the Serverless Cache.
	SnapshotRetentionLimit *int `pulumi:"snapshotRetentionLimit"`
	// The subnet id's of the Serverless Cache.
	SubnetIds []string `pulumi:"subnetIds"`
	// An array of key-value pairs to apply to this Serverless Cache.
	Tags []ServerlessCacheTag `pulumi:"tags"`
	// The ID of the user group.
	UserGroupId *string `pulumi:"userGroupId"`
}

// The set of arguments for constructing a ServerlessCache resource.
type ServerlessCacheArgs struct {
	CacheUsageLimits ServerlessCacheCacheUsageLimitsPtrInput
	// The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
	DailySnapshotTime pulumi.StringPtrInput
	// The description of the Serverless Cache.
	Description pulumi.StringPtrInput
	Endpoint    ServerlessCacheEndpointPtrInput
	// The engine name of the Serverless Cache.
	Engine pulumi.StringInput
	// The final snapshot name which is taken before Serverless Cache is deleted.
	FinalSnapshotName pulumi.StringPtrInput
	// The ID of the KMS key used to encrypt the cluster.
	KmsKeyId pulumi.StringPtrInput
	// The major engine version of the Serverless Cache.
	MajorEngineVersion pulumi.StringPtrInput
	ReaderEndpoint     ServerlessCacheEndpointPtrInput
	// One or more Amazon VPC security groups associated with this Serverless Cache.
	SecurityGroupIds pulumi.StringArrayInput
	// The name of the Serverless Cache. This value must be unique.
	ServerlessCacheName pulumi.StringPtrInput
	// The ARN's of snapshot to restore Serverless Cache.
	SnapshotArnsToRestore pulumi.StringArrayInput
	// The snapshot retention limit of the Serverless Cache.
	SnapshotRetentionLimit pulumi.IntPtrInput
	// The subnet id's of the Serverless Cache.
	SubnetIds pulumi.StringArrayInput
	// An array of key-value pairs to apply to this Serverless Cache.
	Tags ServerlessCacheTagArrayInput
	// The ID of the user group.
	UserGroupId pulumi.StringPtrInput
}

func (ServerlessCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessCacheArgs)(nil)).Elem()
}

type ServerlessCacheInput interface {
	pulumi.Input

	ToServerlessCacheOutput() ServerlessCacheOutput
	ToServerlessCacheOutputWithContext(ctx context.Context) ServerlessCacheOutput
}

func (*ServerlessCache) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessCache)(nil)).Elem()
}

func (i *ServerlessCache) ToServerlessCacheOutput() ServerlessCacheOutput {
	return i.ToServerlessCacheOutputWithContext(context.Background())
}

func (i *ServerlessCache) ToServerlessCacheOutputWithContext(ctx context.Context) ServerlessCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessCacheOutput)
}

func (i *ServerlessCache) ToOutput(ctx context.Context) pulumix.Output[*ServerlessCache] {
	return pulumix.Output[*ServerlessCache]{
		OutputState: i.ToServerlessCacheOutputWithContext(ctx).OutputState,
	}
}

type ServerlessCacheOutput struct{ *pulumi.OutputState }

func (ServerlessCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessCache)(nil)).Elem()
}

func (o ServerlessCacheOutput) ToServerlessCacheOutput() ServerlessCacheOutput {
	return o
}

func (o ServerlessCacheOutput) ToServerlessCacheOutputWithContext(ctx context.Context) ServerlessCacheOutput {
	return o
}

func (o ServerlessCacheOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerlessCache] {
	return pulumix.Output[*ServerlessCache]{
		OutputState: o.OutputState,
	}
}

// The ARN of the Serverless Cache.
func (o ServerlessCacheOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ServerlessCacheOutput) CacheUsageLimits() ServerlessCacheCacheUsageLimitsPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) ServerlessCacheCacheUsageLimitsPtrOutput { return v.CacheUsageLimits }).(ServerlessCacheCacheUsageLimitsPtrOutput)
}

// The creation time of the Serverless Cache.
func (o ServerlessCacheOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
func (o ServerlessCacheOutput) DailySnapshotTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringPtrOutput { return v.DailySnapshotTime }).(pulumi.StringPtrOutput)
}

// The description of the Serverless Cache.
func (o ServerlessCacheOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ServerlessCacheOutput) Endpoint() ServerlessCacheEndpointPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) ServerlessCacheEndpointPtrOutput { return v.Endpoint }).(ServerlessCacheEndpointPtrOutput)
}

// The engine name of the Serverless Cache.
func (o ServerlessCacheOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The final snapshot name which is taken before Serverless Cache is deleted.
func (o ServerlessCacheOutput) FinalSnapshotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringPtrOutput { return v.FinalSnapshotName }).(pulumi.StringPtrOutput)
}

// The full engine version of the Serverless Cache.
func (o ServerlessCacheOutput) FullEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringOutput { return v.FullEngineVersion }).(pulumi.StringOutput)
}

// The ID of the KMS key used to encrypt the cluster.
func (o ServerlessCacheOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The major engine version of the Serverless Cache.
func (o ServerlessCacheOutput) MajorEngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringPtrOutput { return v.MajorEngineVersion }).(pulumi.StringPtrOutput)
}

func (o ServerlessCacheOutput) ReaderEndpoint() ServerlessCacheEndpointPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) ServerlessCacheEndpointPtrOutput { return v.ReaderEndpoint }).(ServerlessCacheEndpointPtrOutput)
}

// One or more Amazon VPC security groups associated with this Serverless Cache.
func (o ServerlessCacheOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The name of the Serverless Cache. This value must be unique.
func (o ServerlessCacheOutput) ServerlessCacheName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringOutput { return v.ServerlessCacheName }).(pulumi.StringOutput)
}

// The ARN's of snapshot to restore Serverless Cache.
func (o ServerlessCacheOutput) SnapshotArnsToRestore() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringArrayOutput { return v.SnapshotArnsToRestore }).(pulumi.StringArrayOutput)
}

// The snapshot retention limit of the Serverless Cache.
func (o ServerlessCacheOutput) SnapshotRetentionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.IntPtrOutput { return v.SnapshotRetentionLimit }).(pulumi.IntPtrOutput)
}

// The status of the Serverless Cache.
func (o ServerlessCacheOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The subnet id's of the Serverless Cache.
func (o ServerlessCacheOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// An array of key-value pairs to apply to this Serverless Cache.
func (o ServerlessCacheOutput) Tags() ServerlessCacheTagArrayOutput {
	return o.ApplyT(func(v *ServerlessCache) ServerlessCacheTagArrayOutput { return v.Tags }).(ServerlessCacheTagArrayOutput)
}

// The ID of the user group.
func (o ServerlessCacheOutput) UserGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessCache) pulumi.StringPtrOutput { return v.UserGroupId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessCacheInput)(nil)).Elem(), &ServerlessCache{})
	pulumi.RegisterOutputType(ServerlessCacheOutput{})
}
