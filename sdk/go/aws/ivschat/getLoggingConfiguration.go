// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivschat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::IVSChat::LoggingConfiguration.
func LookupLoggingConfiguration(ctx *pulumi.Context, args *LookupLoggingConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupLoggingConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoggingConfigurationResult
	err := ctx.Invoke("aws-native:ivschat:getLoggingConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLoggingConfigurationArgs struct {
	// LoggingConfiguration ARN is automatically generated on creation and assigned as the unique identifier.
	Arn string `pulumi:"arn"`
}

type LookupLoggingConfigurationResult struct {
	// LoggingConfiguration ARN is automatically generated on creation and assigned as the unique identifier.
	Arn                      *string                                       `pulumi:"arn"`
	DestinationConfiguration *LoggingConfigurationDestinationConfiguration `pulumi:"destinationConfiguration"`
	// The system-generated ID of the logging configuration.
	Id *string `pulumi:"id"`
	// The name of the logging configuration. The value does not need to be unique.
	Name *string `pulumi:"name"`
	// The state of the logging configuration. When the state is ACTIVE, the configuration is ready to log chat content.
	State *LoggingConfigurationStateEnum `pulumi:"state"`
	// An array of key-value pairs to apply to this resource.
	Tags []LoggingConfigurationTag `pulumi:"tags"`
}

func LookupLoggingConfigurationOutput(ctx *pulumi.Context, args LookupLoggingConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupLoggingConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoggingConfigurationResult, error) {
			args := v.(LookupLoggingConfigurationArgs)
			r, err := LookupLoggingConfiguration(ctx, &args, opts...)
			var s LookupLoggingConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLoggingConfigurationResultOutput)
}

type LookupLoggingConfigurationOutputArgs struct {
	// LoggingConfiguration ARN is automatically generated on creation and assigned as the unique identifier.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupLoggingConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingConfigurationArgs)(nil)).Elem()
}

type LookupLoggingConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupLoggingConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingConfigurationResult)(nil)).Elem()
}

func (o LookupLoggingConfigurationResultOutput) ToLookupLoggingConfigurationResultOutput() LookupLoggingConfigurationResultOutput {
	return o
}

func (o LookupLoggingConfigurationResultOutput) ToLookupLoggingConfigurationResultOutputWithContext(ctx context.Context) LookupLoggingConfigurationResultOutput {
	return o
}

// LoggingConfiguration ARN is automatically generated on creation and assigned as the unique identifier.
func (o LookupLoggingConfigurationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoggingConfigurationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupLoggingConfigurationResultOutput) DestinationConfiguration() LoggingConfigurationDestinationConfigurationPtrOutput {
	return o.ApplyT(func(v LookupLoggingConfigurationResult) *LoggingConfigurationDestinationConfiguration {
		return v.DestinationConfiguration
	}).(LoggingConfigurationDestinationConfigurationPtrOutput)
}

// The system-generated ID of the logging configuration.
func (o LookupLoggingConfigurationResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoggingConfigurationResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the logging configuration. The value does not need to be unique.
func (o LookupLoggingConfigurationResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoggingConfigurationResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The state of the logging configuration. When the state is ACTIVE, the configuration is ready to log chat content.
func (o LookupLoggingConfigurationResultOutput) State() LoggingConfigurationStateEnumPtrOutput {
	return o.ApplyT(func(v LookupLoggingConfigurationResult) *LoggingConfigurationStateEnum { return v.State }).(LoggingConfigurationStateEnumPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupLoggingConfigurationResultOutput) Tags() LoggingConfigurationTagArrayOutput {
	return o.ApplyT(func(v LookupLoggingConfigurationResult) []LoggingConfigurationTag { return v.Tags }).(LoggingConfigurationTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoggingConfigurationResultOutput{})
}
