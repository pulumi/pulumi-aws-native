// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Permission set on private certificate authority
func LookupPermission(ctx *pulumi.Context, args *LookupPermissionArgs, opts ...pulumi.InvokeOption) (*LookupPermissionResult, error) {
	var rv LookupPermissionResult
	err := ctx.Invoke("aws-native:acmpca:getPermission", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPermissionArgs struct {
	// The Amazon Resource Name (ARN) of the Private Certificate Authority that grants the permission.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// The AWS service or identity that receives the permission. At this time, the only valid principal is acm.amazonaws.com.
	Principal string `pulumi:"principal"`
}

type LookupPermissionResult struct {
}

func LookupPermissionOutput(ctx *pulumi.Context, args LookupPermissionOutputArgs, opts ...pulumi.InvokeOption) LookupPermissionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPermissionResult, error) {
			args := v.(LookupPermissionArgs)
			r, err := LookupPermission(ctx, &args, opts...)
			var s LookupPermissionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPermissionResultOutput)
}

type LookupPermissionOutputArgs struct {
	// The Amazon Resource Name (ARN) of the Private Certificate Authority that grants the permission.
	CertificateAuthorityArn pulumi.StringInput `pulumi:"certificateAuthorityArn"`
	// The AWS service or identity that receives the permission. At this time, the only valid principal is acm.amazonaws.com.
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (LookupPermissionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionArgs)(nil)).Elem()
}

type LookupPermissionResultOutput struct{ *pulumi.OutputState }

func (LookupPermissionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionResult)(nil)).Elem()
}

func (o LookupPermissionResultOutput) ToLookupPermissionResultOutput() LookupPermissionResultOutput {
	return o
}

func (o LookupPermissionResultOutput) ToLookupPermissionResultOutputWithContext(ctx context.Context) LookupPermissionResultOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LookupPermissionResultOutput{})
}
