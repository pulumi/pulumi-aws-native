// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Used to install the certificate authority certificate and update the certificate authority status.
type CertificateAuthorityActivation struct {
	pulumi.CustomResourceState

	// Certificate Authority certificate that will be installed in the Certificate Authority.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Arn of the Certificate Authority.
	CertificateAuthorityArn pulumi.StringOutput `pulumi:"certificateAuthorityArn"`
	// Certificate chain for the Certificate Authority certificate.
	CertificateChain pulumi.StringPtrOutput `pulumi:"certificateChain"`
	// The complete certificate chain, including the Certificate Authority certificate.
	CompleteCertificateChain pulumi.StringOutput `pulumi:"completeCertificateChain"`
	// The status of the Certificate Authority.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewCertificateAuthorityActivation registers a new resource with the given unique name, arguments, and options.
func NewCertificateAuthorityActivation(ctx *pulumi.Context,
	name string, args *CertificateAuthorityActivationArgs, opts ...pulumi.ResourceOption) (*CertificateAuthorityActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.CertificateAuthorityArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityArn'")
	}
	var resource CertificateAuthorityActivation
	err := ctx.RegisterResource("aws-native:acmpca:CertificateAuthorityActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateAuthorityActivation gets an existing CertificateAuthorityActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateAuthorityActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateAuthorityActivationState, opts ...pulumi.ResourceOption) (*CertificateAuthorityActivation, error) {
	var resource CertificateAuthorityActivation
	err := ctx.ReadResource("aws-native:acmpca:CertificateAuthorityActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateAuthorityActivation resources.
type certificateAuthorityActivationState struct {
}

type CertificateAuthorityActivationState struct {
}

func (CertificateAuthorityActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityActivationState)(nil)).Elem()
}

type certificateAuthorityActivationArgs struct {
	// Certificate Authority certificate that will be installed in the Certificate Authority.
	Certificate string `pulumi:"certificate"`
	// Arn of the Certificate Authority.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// Certificate chain for the Certificate Authority certificate.
	CertificateChain *string `pulumi:"certificateChain"`
	// The status of the Certificate Authority.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a CertificateAuthorityActivation resource.
type CertificateAuthorityActivationArgs struct {
	// Certificate Authority certificate that will be installed in the Certificate Authority.
	Certificate pulumi.StringInput
	// Arn of the Certificate Authority.
	CertificateAuthorityArn pulumi.StringInput
	// Certificate chain for the Certificate Authority certificate.
	CertificateChain pulumi.StringPtrInput
	// The status of the Certificate Authority.
	Status pulumi.StringPtrInput
}

func (CertificateAuthorityActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateAuthorityActivationArgs)(nil)).Elem()
}

type CertificateAuthorityActivationInput interface {
	pulumi.Input

	ToCertificateAuthorityActivationOutput() CertificateAuthorityActivationOutput
	ToCertificateAuthorityActivationOutputWithContext(ctx context.Context) CertificateAuthorityActivationOutput
}

func (*CertificateAuthorityActivation) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityActivation)(nil))
}

func (i *CertificateAuthorityActivation) ToCertificateAuthorityActivationOutput() CertificateAuthorityActivationOutput {
	return i.ToCertificateAuthorityActivationOutputWithContext(context.Background())
}

func (i *CertificateAuthorityActivation) ToCertificateAuthorityActivationOutputWithContext(ctx context.Context) CertificateAuthorityActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityActivationOutput)
}

type CertificateAuthorityActivationOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityActivation)(nil))
}

func (o CertificateAuthorityActivationOutput) ToCertificateAuthorityActivationOutput() CertificateAuthorityActivationOutput {
	return o
}

func (o CertificateAuthorityActivationOutput) ToCertificateAuthorityActivationOutputWithContext(ctx context.Context) CertificateAuthorityActivationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CertificateAuthorityActivationOutput{})
}
