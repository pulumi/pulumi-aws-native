// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acmpca

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ACMPCA::Certificate“ resource is used to issue a certificate using your private certificate authority. For more information, see the [IssueCertificate](https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html) action.
type Certificate struct {
	pulumi.CustomResourceState

	// Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.
	ApiPassthrough CertificateApiPassthroughPtrOutput `pulumi:"apiPassthrough"`
	Arn            pulumi.StringOutput                `pulumi:"arn"`
	Certificate    pulumi.StringOutput                `pulumi:"certificate"`
	// The Amazon Resource Name (ARN) for the private CA issues the certificate.
	CertificateAuthorityArn pulumi.StringOutput `pulumi:"certificateAuthorityArn"`
	// The certificate signing request (CSR) for the certificate.
	CertificateSigningRequest pulumi.StringOutput `pulumi:"certificateSigningRequest"`
	// The name of the algorithm that will be used to sign the certificate to be issued.
	//  This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action.
	//   The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
	SigningAlgorithm pulumi.StringOutput `pulumi:"signingAlgorithm"`
	// Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, PCAshort defaults to the ``EndEntityCertificate/V1`` template. For more information about PCAshort templates, see [Using Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
	TemplateArn pulumi.StringPtrOutput `pulumi:"templateArn"`
	// The period of time during which the certificate will be valid.
	Validity CertificateValidityOutput `pulumi:"validity"`
	// Information describing the start of the validity period of the certificate. This parameter sets the "Not Before" date for the certificate.
	//  By default, when issuing a certificate, PCAshort sets the "Not Before" date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore`` parameter can be used to customize the "Not Before" value.
	//  Unlike the ``Validity`` parameter, the ``ValidityNotBefore`` parameter is optional.
	//  The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity`` type value ``ABSOLUTE``.
	ValidityNotBefore CertificateValidityPtrOutput `pulumi:"validityNotBefore"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityArn'")
	}
	if args.CertificateSigningRequest == nil {
		return nil, errors.New("invalid value for required argument 'CertificateSigningRequest'")
	}
	if args.SigningAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'SigningAlgorithm'")
	}
	if args.Validity == nil {
		return nil, errors.New("invalid value for required argument 'Validity'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiPassthrough",
		"certificateAuthorityArn",
		"certificateSigningRequest",
		"signingAlgorithm",
		"templateArn",
		"validity",
		"validityNotBefore",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("aws-native:acmpca:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws-native:acmpca:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
}

type CertificateState struct {
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.
	ApiPassthrough *CertificateApiPassthrough `pulumi:"apiPassthrough"`
	// The Amazon Resource Name (ARN) for the private CA issues the certificate.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// The certificate signing request (CSR) for the certificate.
	CertificateSigningRequest string `pulumi:"certificateSigningRequest"`
	// The name of the algorithm that will be used to sign the certificate to be issued.
	//  This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action.
	//   The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
	SigningAlgorithm string `pulumi:"signingAlgorithm"`
	// Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, PCAshort defaults to the ``EndEntityCertificate/V1`` template. For more information about PCAshort templates, see [Using Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
	TemplateArn *string `pulumi:"templateArn"`
	// The period of time during which the certificate will be valid.
	Validity CertificateValidity `pulumi:"validity"`
	// Information describing the start of the validity period of the certificate. This parameter sets the "Not Before" date for the certificate.
	//  By default, when issuing a certificate, PCAshort sets the "Not Before" date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore`` parameter can be used to customize the "Not Before" value.
	//  Unlike the ``Validity`` parameter, the ``ValidityNotBefore`` parameter is optional.
	//  The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity`` type value ``ABSOLUTE``.
	ValidityNotBefore *CertificateValidity `pulumi:"validityNotBefore"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.
	ApiPassthrough CertificateApiPassthroughPtrInput
	// The Amazon Resource Name (ARN) for the private CA issues the certificate.
	CertificateAuthorityArn pulumi.StringInput
	// The certificate signing request (CSR) for the certificate.
	CertificateSigningRequest pulumi.StringInput
	// The name of the algorithm that will be used to sign the certificate to be issued.
	//  This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action.
	//   The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
	SigningAlgorithm pulumi.StringInput
	// Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, PCAshort defaults to the ``EndEntityCertificate/V1`` template. For more information about PCAshort templates, see [Using Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
	TemplateArn pulumi.StringPtrInput
	// The period of time during which the certificate will be valid.
	Validity CertificateValidityInput
	// Information describing the start of the validity period of the certificate. This parameter sets the "Not Before" date for the certificate.
	//  By default, when issuing a certificate, PCAshort sets the "Not Before" date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore`` parameter can be used to customize the "Not Before" value.
	//  Unlike the ``Validity`` parameter, the ``ValidityNotBefore`` parameter is optional.
	//  The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity`` type value ``ABSOLUTE``.
	ValidityNotBefore CertificateValidityPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// Specifies X.509 certificate information to be included in the issued certificate. An “APIPassthrough“ or “APICSRPassthrough“ template variant must be selected, or else this parameter is ignored.
func (o CertificateOutput) ApiPassthrough() CertificateApiPassthroughPtrOutput {
	return o.ApplyT(func(v *Certificate) CertificateApiPassthroughPtrOutput { return v.ApiPassthrough }).(CertificateApiPassthroughPtrOutput)
}

func (o CertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) for the private CA issues the certificate.
func (o CertificateOutput) CertificateAuthorityArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateAuthorityArn }).(pulumi.StringOutput)
}

// The certificate signing request (CSR) for the certificate.
func (o CertificateOutput) CertificateSigningRequest() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateSigningRequest }).(pulumi.StringOutput)
}

// The name of the algorithm that will be used to sign the certificate to be issued.
//
//	This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action.
//	 The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.
func (o CertificateOutput) SigningAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.SigningAlgorithm }).(pulumi.StringOutput)
}

// Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, PCAshort defaults to the “EndEntityCertificate/V1“ template. For more information about PCAshort templates, see [Using Templates](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html).
func (o CertificateOutput) TemplateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.TemplateArn }).(pulumi.StringPtrOutput)
}

// The period of time during which the certificate will be valid.
func (o CertificateOutput) Validity() CertificateValidityOutput {
	return o.ApplyT(func(v *Certificate) CertificateValidityOutput { return v.Validity }).(CertificateValidityOutput)
}

// Information describing the start of the validity period of the certificate. This parameter sets the "Not Before" date for the certificate.
//
//	By default, when issuing a certificate, PCAshort sets the "Not Before" date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore`` parameter can be used to customize the "Not Before" value.
//	Unlike the ``Validity`` parameter, the ``ValidityNotBefore`` parameter is optional.
//	The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity`` type value ``ABSOLUTE``.
func (o CertificateOutput) ValidityNotBefore() CertificateValidityPtrOutput {
	return o.ApplyT(func(v *Certificate) CertificateValidityPtrOutput { return v.ValidityNotBefore }).(CertificateValidityPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterOutputType(CertificateOutput{})
}
