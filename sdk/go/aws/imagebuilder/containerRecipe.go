// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::ImageBuilder::ContainerRecipe
type ContainerRecipe struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the container recipe.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Components for build and test that are included in the container recipe.
	Components ContainerRecipeComponentConfigurationArrayOutput `pulumi:"components"`
	// Specifies the type of container, such as Docker.
	ContainerType ContainerRecipeContainerTypePtrOutput `pulumi:"containerType"`
	// The description of the container recipe.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.
	DockerfileTemplateData pulumi.StringPtrOutput `pulumi:"dockerfileTemplateData"`
	// The S3 URI for the Dockerfile that will be used to build your container image.
	DockerfileTemplateUri pulumi.StringPtrOutput `pulumi:"dockerfileTemplateUri"`
	// Specifies the operating system version for the source image.
	ImageOsVersionOverride pulumi.StringPtrOutput `pulumi:"imageOsVersionOverride"`
	// A group of options that can be used to configure an instance for building and testing container images.
	InstanceConfiguration ContainerRecipeInstanceConfigurationPtrOutput `pulumi:"instanceConfiguration"`
	// Identifies which KMS key is used to encrypt the container image.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The name of the container recipe.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The source image for the container recipe.
	ParentImage pulumi.StringPtrOutput `pulumi:"parentImage"`
	// Specifies the operating system platform when you use a custom source image.
	PlatformOverride ContainerRecipePlatformOverridePtrOutput `pulumi:"platformOverride"`
	// Tags that are attached to the container recipe.
	Tags pulumi.AnyOutput `pulumi:"tags"`
	// The destination repository for the container image.
	TargetRepository ContainerRecipeTargetContainerRepositoryPtrOutput `pulumi:"targetRepository"`
	// The semantic version of the container recipe (<major>.<minor>.<patch>).
	Version pulumi.StringPtrOutput `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumi.StringPtrOutput `pulumi:"workingDirectory"`
}

// NewContainerRecipe registers a new resource with the given unique name, arguments, and options.
func NewContainerRecipe(ctx *pulumi.Context,
	name string, args *ContainerRecipeArgs, opts ...pulumi.ResourceOption) (*ContainerRecipe, error) {
	if args == nil {
		args = &ContainerRecipeArgs{}
	}

	var resource ContainerRecipe
	err := ctx.RegisterResource("aws-native:imagebuilder:ContainerRecipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRecipe gets an existing ContainerRecipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRecipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRecipeState, opts ...pulumi.ResourceOption) (*ContainerRecipe, error) {
	var resource ContainerRecipe
	err := ctx.ReadResource("aws-native:imagebuilder:ContainerRecipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRecipe resources.
type containerRecipeState struct {
}

type ContainerRecipeState struct {
}

func (ContainerRecipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRecipeState)(nil)).Elem()
}

type containerRecipeArgs struct {
	// Components for build and test that are included in the container recipe.
	Components []ContainerRecipeComponentConfiguration `pulumi:"components"`
	// Specifies the type of container, such as Docker.
	ContainerType *ContainerRecipeContainerType `pulumi:"containerType"`
	// The description of the container recipe.
	Description *string `pulumi:"description"`
	// Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.
	DockerfileTemplateData *string `pulumi:"dockerfileTemplateData"`
	// The S3 URI for the Dockerfile that will be used to build your container image.
	DockerfileTemplateUri *string `pulumi:"dockerfileTemplateUri"`
	// Specifies the operating system version for the source image.
	ImageOsVersionOverride *string `pulumi:"imageOsVersionOverride"`
	// A group of options that can be used to configure an instance for building and testing container images.
	InstanceConfiguration *ContainerRecipeInstanceConfiguration `pulumi:"instanceConfiguration"`
	// Identifies which KMS key is used to encrypt the container image.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The name of the container recipe.
	Name *string `pulumi:"name"`
	// The source image for the container recipe.
	ParentImage *string `pulumi:"parentImage"`
	// Specifies the operating system platform when you use a custom source image.
	PlatformOverride *ContainerRecipePlatformOverride `pulumi:"platformOverride"`
	// Tags that are attached to the container recipe.
	Tags interface{} `pulumi:"tags"`
	// The destination repository for the container image.
	TargetRepository *ContainerRecipeTargetContainerRepository `pulumi:"targetRepository"`
	// The semantic version of the container recipe (<major>.<minor>.<patch>).
	Version *string `pulumi:"version"`
	// The working directory to be used during build and test workflows.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// The set of arguments for constructing a ContainerRecipe resource.
type ContainerRecipeArgs struct {
	// Components for build and test that are included in the container recipe.
	Components ContainerRecipeComponentConfigurationArrayInput
	// Specifies the type of container, such as Docker.
	ContainerType ContainerRecipeContainerTypePtrInput
	// The description of the container recipe.
	Description pulumi.StringPtrInput
	// Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.
	DockerfileTemplateData pulumi.StringPtrInput
	// The S3 URI for the Dockerfile that will be used to build your container image.
	DockerfileTemplateUri pulumi.StringPtrInput
	// Specifies the operating system version for the source image.
	ImageOsVersionOverride pulumi.StringPtrInput
	// A group of options that can be used to configure an instance for building and testing container images.
	InstanceConfiguration ContainerRecipeInstanceConfigurationPtrInput
	// Identifies which KMS key is used to encrypt the container image.
	KmsKeyId pulumi.StringPtrInput
	// The name of the container recipe.
	Name pulumi.StringPtrInput
	// The source image for the container recipe.
	ParentImage pulumi.StringPtrInput
	// Specifies the operating system platform when you use a custom source image.
	PlatformOverride ContainerRecipePlatformOverridePtrInput
	// Tags that are attached to the container recipe.
	Tags pulumi.Input
	// The destination repository for the container image.
	TargetRepository ContainerRecipeTargetContainerRepositoryPtrInput
	// The semantic version of the container recipe (<major>.<minor>.<patch>).
	Version pulumi.StringPtrInput
	// The working directory to be used during build and test workflows.
	WorkingDirectory pulumi.StringPtrInput
}

func (ContainerRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRecipeArgs)(nil)).Elem()
}

type ContainerRecipeInput interface {
	pulumi.Input

	ToContainerRecipeOutput() ContainerRecipeOutput
	ToContainerRecipeOutputWithContext(ctx context.Context) ContainerRecipeOutput
}

func (*ContainerRecipe) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipe)(nil))
}

func (i *ContainerRecipe) ToContainerRecipeOutput() ContainerRecipeOutput {
	return i.ToContainerRecipeOutputWithContext(context.Background())
}

func (i *ContainerRecipe) ToContainerRecipeOutputWithContext(ctx context.Context) ContainerRecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeOutput)
}

type ContainerRecipeOutput struct{ *pulumi.OutputState }

func (ContainerRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipe)(nil))
}

func (o ContainerRecipeOutput) ToContainerRecipeOutput() ContainerRecipeOutput {
	return o
}

func (o ContainerRecipeOutput) ToContainerRecipeOutputWithContext(ctx context.Context) ContainerRecipeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ContainerRecipeOutput{})
}
