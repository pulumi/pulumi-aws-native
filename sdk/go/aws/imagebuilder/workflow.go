// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::ImageBuilder::Workflow
type Workflow struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the workflow.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The change description of the workflow.
	ChangeDescription pulumi.StringPtrOutput `pulumi:"changeDescription"`
	// The data of the workflow.
	Data pulumi.StringPtrOutput `pulumi:"data"`
	// The description of the workflow.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The KMS key identifier used to encrypt the workflow.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The name of the workflow.
	Name pulumi.StringOutput `pulumi:"name"`
	// The tags associated with the workflow.
	Tags pulumi.AnyOutput `pulumi:"tags"`
	// The type of the workflow denotes whether the workflow is used to build, test, or distribute.
	Type WorkflowTypeOutput `pulumi:"type"`
	// The uri of the workflow.
	Uri pulumi.StringPtrOutput `pulumi:"uri"`
	// The version of the workflow.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"changeDescription",
		"data",
		"description",
		"kmsKeyId",
		"name",
		"tags",
		"type",
		"uri",
		"version",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("aws-native:imagebuilder:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("aws-native:imagebuilder:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
}

type WorkflowState struct {
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	// The change description of the workflow.
	ChangeDescription *string `pulumi:"changeDescription"`
	// The data of the workflow.
	Data *string `pulumi:"data"`
	// The description of the workflow.
	Description *string `pulumi:"description"`
	// The KMS key identifier used to encrypt the workflow.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The name of the workflow.
	Name *string `pulumi:"name"`
	// The tags associated with the workflow.
	Tags interface{} `pulumi:"tags"`
	// The type of the workflow denotes whether the workflow is used to build, test, or distribute.
	Type WorkflowType `pulumi:"type"`
	// The uri of the workflow.
	Uri *string `pulumi:"uri"`
	// The version of the workflow.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// The change description of the workflow.
	ChangeDescription pulumi.StringPtrInput
	// The data of the workflow.
	Data pulumi.StringPtrInput
	// The description of the workflow.
	Description pulumi.StringPtrInput
	// The KMS key identifier used to encrypt the workflow.
	KmsKeyId pulumi.StringPtrInput
	// The name of the workflow.
	Name pulumi.StringPtrInput
	// The tags associated with the workflow.
	Tags pulumi.Input
	// The type of the workflow denotes whether the workflow is used to build, test, or distribute.
	Type WorkflowTypeInput
	// The uri of the workflow.
	Uri pulumi.StringPtrInput
	// The version of the workflow.
	Version pulumi.StringInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

// The Amazon Resource Name (ARN) of the workflow.
func (o WorkflowOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The change description of the workflow.
func (o WorkflowOutput) ChangeDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ChangeDescription }).(pulumi.StringPtrOutput)
}

// The data of the workflow.
func (o WorkflowOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Data }).(pulumi.StringPtrOutput)
}

// The description of the workflow.
func (o WorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The KMS key identifier used to encrypt the workflow.
func (o WorkflowOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The name of the workflow.
func (o WorkflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The tags associated with the workflow.
func (o WorkflowOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Workflow) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

// The type of the workflow denotes whether the workflow is used to build, test, or distribute.
func (o WorkflowOutput) Type() WorkflowTypeOutput {
	return o.ApplyT(func(v *Workflow) WorkflowTypeOutput { return v.Type }).(WorkflowTypeOutput)
}

// The uri of the workflow.
func (o WorkflowOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Uri }).(pulumi.StringPtrOutput)
}

// The version of the workflow.
func (o WorkflowOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInput)(nil)).Elem(), &Workflow{})
	pulumi.RegisterOutputType(WorkflowOutput{})
}
