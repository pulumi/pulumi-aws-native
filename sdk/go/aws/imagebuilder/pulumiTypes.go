// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Configuration details of the component.
type ContainerRecipeComponentConfiguration struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn *string `pulumi:"componentArn"`
	// A group of parameter settings that are used to configure the component for a specific recipe.
	Parameters []ContainerRecipeComponentParameter `pulumi:"parameters"`
}

// ContainerRecipeComponentConfigurationInput is an input type that accepts ContainerRecipeComponentConfigurationArgs and ContainerRecipeComponentConfigurationOutput values.
// You can construct a concrete instance of `ContainerRecipeComponentConfigurationInput` via:
//
//	ContainerRecipeComponentConfigurationArgs{...}
type ContainerRecipeComponentConfigurationInput interface {
	pulumi.Input

	ToContainerRecipeComponentConfigurationOutput() ContainerRecipeComponentConfigurationOutput
	ToContainerRecipeComponentConfigurationOutputWithContext(context.Context) ContainerRecipeComponentConfigurationOutput
}

// Configuration details of the component.
type ContainerRecipeComponentConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn pulumi.StringPtrInput `pulumi:"componentArn"`
	// A group of parameter settings that are used to configure the component for a specific recipe.
	Parameters ContainerRecipeComponentParameterArrayInput `pulumi:"parameters"`
}

func (ContainerRecipeComponentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (i ContainerRecipeComponentConfigurationArgs) ToContainerRecipeComponentConfigurationOutput() ContainerRecipeComponentConfigurationOutput {
	return i.ToContainerRecipeComponentConfigurationOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentConfigurationArgs) ToContainerRecipeComponentConfigurationOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentConfigurationOutput)
}

func (i ContainerRecipeComponentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeComponentConfiguration] {
	return pulumix.Output[ContainerRecipeComponentConfiguration]{
		OutputState: i.ToContainerRecipeComponentConfigurationOutputWithContext(ctx).OutputState,
	}
}

// ContainerRecipeComponentConfigurationArrayInput is an input type that accepts ContainerRecipeComponentConfigurationArray and ContainerRecipeComponentConfigurationArrayOutput values.
// You can construct a concrete instance of `ContainerRecipeComponentConfigurationArrayInput` via:
//
//	ContainerRecipeComponentConfigurationArray{ ContainerRecipeComponentConfigurationArgs{...} }
type ContainerRecipeComponentConfigurationArrayInput interface {
	pulumi.Input

	ToContainerRecipeComponentConfigurationArrayOutput() ContainerRecipeComponentConfigurationArrayOutput
	ToContainerRecipeComponentConfigurationArrayOutputWithContext(context.Context) ContainerRecipeComponentConfigurationArrayOutput
}

type ContainerRecipeComponentConfigurationArray []ContainerRecipeComponentConfigurationInput

func (ContainerRecipeComponentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (i ContainerRecipeComponentConfigurationArray) ToContainerRecipeComponentConfigurationArrayOutput() ContainerRecipeComponentConfigurationArrayOutput {
	return i.ToContainerRecipeComponentConfigurationArrayOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentConfigurationArray) ToContainerRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentConfigurationArrayOutput)
}

func (i ContainerRecipeComponentConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerRecipeComponentConfiguration] {
	return pulumix.Output[[]ContainerRecipeComponentConfiguration]{
		OutputState: i.ToContainerRecipeComponentConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// Configuration details of the component.
type ContainerRecipeComponentConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (o ContainerRecipeComponentConfigurationOutput) ToContainerRecipeComponentConfigurationOutput() ContainerRecipeComponentConfigurationOutput {
	return o
}

func (o ContainerRecipeComponentConfigurationOutput) ToContainerRecipeComponentConfigurationOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationOutput {
	return o
}

func (o ContainerRecipeComponentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeComponentConfiguration] {
	return pulumix.Output[ContainerRecipeComponentConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the component.
func (o ContainerRecipeComponentConfigurationOutput) ComponentArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeComponentConfiguration) *string { return v.ComponentArn }).(pulumi.StringPtrOutput)
}

// A group of parameter settings that are used to configure the component for a specific recipe.
func (o ContainerRecipeComponentConfigurationOutput) Parameters() ContainerRecipeComponentParameterArrayOutput {
	return o.ApplyT(func(v ContainerRecipeComponentConfiguration) []ContainerRecipeComponentParameter { return v.Parameters }).(ContainerRecipeComponentParameterArrayOutput)
}

type ContainerRecipeComponentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (o ContainerRecipeComponentConfigurationArrayOutput) ToContainerRecipeComponentConfigurationArrayOutput() ContainerRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ContainerRecipeComponentConfigurationArrayOutput) ToContainerRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ContainerRecipeComponentConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerRecipeComponentConfiguration] {
	return pulumix.Output[[]ContainerRecipeComponentConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRecipeComponentConfigurationArrayOutput) Index(i pulumi.IntInput) ContainerRecipeComponentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRecipeComponentConfiguration {
		return vs[0].([]ContainerRecipeComponentConfiguration)[vs[1].(int)]
	}).(ContainerRecipeComponentConfigurationOutput)
}

// Contains a key/value pair that sets the named component parameter.
type ContainerRecipeComponentParameter struct {
	// The name of the component parameter to set.
	Name string `pulumi:"name"`
	// Sets the value for the named component parameter.
	Value []string `pulumi:"value"`
}

// ContainerRecipeComponentParameterInput is an input type that accepts ContainerRecipeComponentParameterArgs and ContainerRecipeComponentParameterOutput values.
// You can construct a concrete instance of `ContainerRecipeComponentParameterInput` via:
//
//	ContainerRecipeComponentParameterArgs{...}
type ContainerRecipeComponentParameterInput interface {
	pulumi.Input

	ToContainerRecipeComponentParameterOutput() ContainerRecipeComponentParameterOutput
	ToContainerRecipeComponentParameterOutputWithContext(context.Context) ContainerRecipeComponentParameterOutput
}

// Contains a key/value pair that sets the named component parameter.
type ContainerRecipeComponentParameterArgs struct {
	// The name of the component parameter to set.
	Name pulumi.StringInput `pulumi:"name"`
	// Sets the value for the named component parameter.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ContainerRecipeComponentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentParameter)(nil)).Elem()
}

func (i ContainerRecipeComponentParameterArgs) ToContainerRecipeComponentParameterOutput() ContainerRecipeComponentParameterOutput {
	return i.ToContainerRecipeComponentParameterOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentParameterArgs) ToContainerRecipeComponentParameterOutputWithContext(ctx context.Context) ContainerRecipeComponentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentParameterOutput)
}

func (i ContainerRecipeComponentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeComponentParameter] {
	return pulumix.Output[ContainerRecipeComponentParameter]{
		OutputState: i.ToContainerRecipeComponentParameterOutputWithContext(ctx).OutputState,
	}
}

// ContainerRecipeComponentParameterArrayInput is an input type that accepts ContainerRecipeComponentParameterArray and ContainerRecipeComponentParameterArrayOutput values.
// You can construct a concrete instance of `ContainerRecipeComponentParameterArrayInput` via:
//
//	ContainerRecipeComponentParameterArray{ ContainerRecipeComponentParameterArgs{...} }
type ContainerRecipeComponentParameterArrayInput interface {
	pulumi.Input

	ToContainerRecipeComponentParameterArrayOutput() ContainerRecipeComponentParameterArrayOutput
	ToContainerRecipeComponentParameterArrayOutputWithContext(context.Context) ContainerRecipeComponentParameterArrayOutput
}

type ContainerRecipeComponentParameterArray []ContainerRecipeComponentParameterInput

func (ContainerRecipeComponentParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeComponentParameter)(nil)).Elem()
}

func (i ContainerRecipeComponentParameterArray) ToContainerRecipeComponentParameterArrayOutput() ContainerRecipeComponentParameterArrayOutput {
	return i.ToContainerRecipeComponentParameterArrayOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentParameterArray) ToContainerRecipeComponentParameterArrayOutputWithContext(ctx context.Context) ContainerRecipeComponentParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentParameterArrayOutput)
}

func (i ContainerRecipeComponentParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerRecipeComponentParameter] {
	return pulumix.Output[[]ContainerRecipeComponentParameter]{
		OutputState: i.ToContainerRecipeComponentParameterArrayOutputWithContext(ctx).OutputState,
	}
}

// Contains a key/value pair that sets the named component parameter.
type ContainerRecipeComponentParameterOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentParameter)(nil)).Elem()
}

func (o ContainerRecipeComponentParameterOutput) ToContainerRecipeComponentParameterOutput() ContainerRecipeComponentParameterOutput {
	return o
}

func (o ContainerRecipeComponentParameterOutput) ToContainerRecipeComponentParameterOutputWithContext(ctx context.Context) ContainerRecipeComponentParameterOutput {
	return o
}

func (o ContainerRecipeComponentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeComponentParameter] {
	return pulumix.Output[ContainerRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the component parameter to set.
func (o ContainerRecipeComponentParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerRecipeComponentParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Sets the value for the named component parameter.
func (o ContainerRecipeComponentParameterOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerRecipeComponentParameter) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ContainerRecipeComponentParameterArrayOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeComponentParameter)(nil)).Elem()
}

func (o ContainerRecipeComponentParameterArrayOutput) ToContainerRecipeComponentParameterArrayOutput() ContainerRecipeComponentParameterArrayOutput {
	return o
}

func (o ContainerRecipeComponentParameterArrayOutput) ToContainerRecipeComponentParameterArrayOutputWithContext(ctx context.Context) ContainerRecipeComponentParameterArrayOutput {
	return o
}

func (o ContainerRecipeComponentParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerRecipeComponentParameter] {
	return pulumix.Output[[]ContainerRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRecipeComponentParameterArrayOutput) Index(i pulumi.IntInput) ContainerRecipeComponentParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRecipeComponentParameter {
		return vs[0].([]ContainerRecipeComponentParameter)[vs[1].(int)]
	}).(ContainerRecipeComponentParameterOutput)
}

// Amazon EBS-specific block device mapping specifications.
type ContainerRecipeEbsInstanceBlockDeviceSpecification struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted *bool `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops *int `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId *string `pulumi:"snapshotId"`
	// For GP3 volumes only - The throughput in MiB/s that the volume supports.
	Throughput *int `pulumi:"throughput"`
	// Use to override the device's volume size.
	VolumeSize *int `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType *ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType `pulumi:"volumeType"`
}

// ContainerRecipeEbsInstanceBlockDeviceSpecificationInput is an input type that accepts ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs and ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput values.
// You can construct a concrete instance of `ContainerRecipeEbsInstanceBlockDeviceSpecificationInput` via:
//
//	ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
type ContainerRecipeEbsInstanceBlockDeviceSpecificationInput interface {
	pulumi.Input

	ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput
	ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput
}

// Amazon EBS-specific block device mapping specifications.
type ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// For GP3 volumes only - The throughput in MiB/s that the volume supports.
	Throughput pulumi.IntPtrInput `pulumi:"throughput"`
	// Use to override the device's volume size.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrInput `pulumi:"volumeType"`
}

func (ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Background())
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[ContainerRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput).ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx)
}

// ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput is an input type that accepts ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs, ContainerRecipeEbsInstanceBlockDeviceSpecificationPtr and ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput values.
// You can construct a concrete instance of `ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput` via:
//
//	        ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
//
//	or:
//
//	        nil
type ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput interface {
	pulumi.Input

	ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
	ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
}

type containerRecipeEbsInstanceBlockDeviceSpecificationPtrType ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs

func ContainerRecipeEbsInstanceBlockDeviceSpecificationPtr(v *ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput {
	return (*containerRecipeEbsInstanceBlockDeviceSpecificationPtrType)(v)
}

func (*containerRecipeEbsInstanceBlockDeviceSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i *containerRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i *containerRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

func (i *containerRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[*ContainerRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx).OutputState,
	}
}

// Amazon EBS-specific block device mapping specifications.
type ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput struct{ *pulumi.OutputState }

func (ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerRecipeEbsInstanceBlockDeviceSpecification) *ContainerRecipeEbsInstanceBlockDeviceSpecification {
		return &v
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[ContainerRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: o.OutputState,
	}
}

// Use to configure delete on termination of the associated device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// For GP3 volumes only - The throughput in MiB/s that the volume supports.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

// Use to override the device's volume size.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeType() ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		return v.VolumeType
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

type ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput struct{ *pulumi.OutputState }

func (ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[*ContainerRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Elem() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) ContainerRecipeEbsInstanceBlockDeviceSpecification {
		if v != nil {
			return *v
		}
		var ret ContainerRecipeEbsInstanceBlockDeviceSpecification
		return ret
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

// Use to configure delete on termination of the associated device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// For GP3 volumes only - The throughput in MiB/s that the volume supports.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

// Use to override the device's volume size.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeType() ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

// Defines block device mappings for the instance used to configure your image.
type ContainerRecipeInstanceBlockDeviceMapping struct {
	// The device to which these mappings apply.
	DeviceName *string `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs *ContainerRecipeEbsInstanceBlockDeviceSpecification `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice *string `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName *string `pulumi:"virtualName"`
}

// ContainerRecipeInstanceBlockDeviceMappingInput is an input type that accepts ContainerRecipeInstanceBlockDeviceMappingArgs and ContainerRecipeInstanceBlockDeviceMappingOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceBlockDeviceMappingInput` via:
//
//	ContainerRecipeInstanceBlockDeviceMappingArgs{...}
type ContainerRecipeInstanceBlockDeviceMappingInput interface {
	pulumi.Input

	ToContainerRecipeInstanceBlockDeviceMappingOutput() ContainerRecipeInstanceBlockDeviceMappingOutput
	ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(context.Context) ContainerRecipeInstanceBlockDeviceMappingOutput
}

// Defines block device mappings for the instance used to configure your image.
type ContainerRecipeInstanceBlockDeviceMappingArgs struct {
	// The device to which these mappings apply.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice pulumi.StringPtrInput `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName pulumi.StringPtrInput `pulumi:"virtualName"`
}

func (ContainerRecipeInstanceBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ContainerRecipeInstanceBlockDeviceMappingArgs) ToContainerRecipeInstanceBlockDeviceMappingOutput() ContainerRecipeInstanceBlockDeviceMappingOutput {
	return i.ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceBlockDeviceMappingArgs) ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceBlockDeviceMappingOutput)
}

func (i ContainerRecipeInstanceBlockDeviceMappingArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[ContainerRecipeInstanceBlockDeviceMapping]{
		OutputState: i.ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(ctx).OutputState,
	}
}

// ContainerRecipeInstanceBlockDeviceMappingArrayInput is an input type that accepts ContainerRecipeInstanceBlockDeviceMappingArray and ContainerRecipeInstanceBlockDeviceMappingArrayOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceBlockDeviceMappingArrayInput` via:
//
//	ContainerRecipeInstanceBlockDeviceMappingArray{ ContainerRecipeInstanceBlockDeviceMappingArgs{...} }
type ContainerRecipeInstanceBlockDeviceMappingArrayInput interface {
	pulumi.Input

	ToContainerRecipeInstanceBlockDeviceMappingArrayOutput() ContainerRecipeInstanceBlockDeviceMappingArrayOutput
	ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Context) ContainerRecipeInstanceBlockDeviceMappingArrayOutput
}

type ContainerRecipeInstanceBlockDeviceMappingArray []ContainerRecipeInstanceBlockDeviceMappingInput

func (ContainerRecipeInstanceBlockDeviceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ContainerRecipeInstanceBlockDeviceMappingArray) ToContainerRecipeInstanceBlockDeviceMappingArrayOutput() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return i.ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceBlockDeviceMappingArray) ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceBlockDeviceMappingArrayOutput)
}

func (i ContainerRecipeInstanceBlockDeviceMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[[]ContainerRecipeInstanceBlockDeviceMapping]{
		OutputState: i.ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Defines block device mappings for the instance used to configure your image.
type ContainerRecipeInstanceBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ContainerRecipeInstanceBlockDeviceMappingOutput) ToContainerRecipeInstanceBlockDeviceMappingOutput() ContainerRecipeInstanceBlockDeviceMappingOutput {
	return o
}

func (o ContainerRecipeInstanceBlockDeviceMappingOutput) ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingOutput {
	return o
}

func (o ContainerRecipeInstanceBlockDeviceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[ContainerRecipeInstanceBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

// The device to which these mappings apply.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Use to manage Amazon EBS-specific configuration for this mapping.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) Ebs() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *ContainerRecipeEbsInstanceBlockDeviceSpecification {
		return v.Ebs
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Use to remove a mapping from the parent image.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) NoDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *string { return v.NoDevice }).(pulumi.StringPtrOutput)
}

// Use to manage instance ephemeral devices.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) VirtualName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *string { return v.VirtualName }).(pulumi.StringPtrOutput)
}

type ContainerRecipeInstanceBlockDeviceMappingArrayOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceBlockDeviceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ContainerRecipeInstanceBlockDeviceMappingArrayOutput) ToContainerRecipeInstanceBlockDeviceMappingArrayOutput() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ContainerRecipeInstanceBlockDeviceMappingArrayOutput) ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ContainerRecipeInstanceBlockDeviceMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[[]ContainerRecipeInstanceBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRecipeInstanceBlockDeviceMappingArrayOutput) Index(i pulumi.IntInput) ContainerRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRecipeInstanceBlockDeviceMapping {
		return vs[0].([]ContainerRecipeInstanceBlockDeviceMapping)[vs[1].(int)]
	}).(ContainerRecipeInstanceBlockDeviceMappingOutput)
}

// A group of options that can be used to configure an instance for building and testing container images.
type ContainerRecipeInstanceConfiguration struct {
	// Defines the block devices to attach for building an instance from this Image Builder AMI.
	BlockDeviceMappings []ContainerRecipeInstanceBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	Image *string `pulumi:"image"`
}

// ContainerRecipeInstanceConfigurationInput is an input type that accepts ContainerRecipeInstanceConfigurationArgs and ContainerRecipeInstanceConfigurationOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceConfigurationInput` via:
//
//	ContainerRecipeInstanceConfigurationArgs{...}
type ContainerRecipeInstanceConfigurationInput interface {
	pulumi.Input

	ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput
	ToContainerRecipeInstanceConfigurationOutputWithContext(context.Context) ContainerRecipeInstanceConfigurationOutput
}

// A group of options that can be used to configure an instance for building and testing container images.
type ContainerRecipeInstanceConfigurationArgs struct {
	// Defines the block devices to attach for building an instance from this Image Builder AMI.
	BlockDeviceMappings ContainerRecipeInstanceBlockDeviceMappingArrayInput `pulumi:"blockDeviceMappings"`
	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (ContainerRecipeInstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput {
	return i.ToContainerRecipeInstanceConfigurationOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationOutput)
}

func (i ContainerRecipeInstanceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeInstanceConfiguration] {
	return pulumix.Output[ContainerRecipeInstanceConfiguration]{
		OutputState: i.ToContainerRecipeInstanceConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return i.ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationOutput).ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx)
}

// ContainerRecipeInstanceConfigurationPtrInput is an input type that accepts ContainerRecipeInstanceConfigurationArgs, ContainerRecipeInstanceConfigurationPtr and ContainerRecipeInstanceConfigurationPtrOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceConfigurationPtrInput` via:
//
//	        ContainerRecipeInstanceConfigurationArgs{...}
//
//	or:
//
//	        nil
type ContainerRecipeInstanceConfigurationPtrInput interface {
	pulumi.Input

	ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput
	ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Context) ContainerRecipeInstanceConfigurationPtrOutput
}

type containerRecipeInstanceConfigurationPtrType ContainerRecipeInstanceConfigurationArgs

func ContainerRecipeInstanceConfigurationPtr(v *ContainerRecipeInstanceConfigurationArgs) ContainerRecipeInstanceConfigurationPtrInput {
	return (*containerRecipeInstanceConfigurationPtrType)(v)
}

func (*containerRecipeInstanceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (i *containerRecipeInstanceConfigurationPtrType) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return i.ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i *containerRecipeInstanceConfigurationPtrType) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationPtrOutput)
}

func (i *containerRecipeInstanceConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeInstanceConfiguration] {
	return pulumix.Output[*ContainerRecipeInstanceConfiguration]{
		OutputState: i.ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// A group of options that can be used to configure an instance for building and testing container images.
type ContainerRecipeInstanceConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return o.ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerRecipeInstanceConfiguration) *ContainerRecipeInstanceConfiguration {
		return &v
	}).(ContainerRecipeInstanceConfigurationPtrOutput)
}

func (o ContainerRecipeInstanceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeInstanceConfiguration] {
	return pulumix.Output[ContainerRecipeInstanceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Defines the block devices to attach for building an instance from this Image Builder AMI.
func (o ContainerRecipeInstanceConfigurationOutput) BlockDeviceMappings() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceConfiguration) []ContainerRecipeInstanceBlockDeviceMapping {
		return v.BlockDeviceMappings
	}).(ContainerRecipeInstanceBlockDeviceMappingArrayOutput)
}

// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
func (o ContainerRecipeInstanceConfigurationOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceConfiguration) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type ContainerRecipeInstanceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (o ContainerRecipeInstanceConfigurationPtrOutput) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationPtrOutput) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeInstanceConfiguration] {
	return pulumix.Output[*ContainerRecipeInstanceConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRecipeInstanceConfigurationPtrOutput) Elem() ContainerRecipeInstanceConfigurationOutput {
	return o.ApplyT(func(v *ContainerRecipeInstanceConfiguration) ContainerRecipeInstanceConfiguration {
		if v != nil {
			return *v
		}
		var ret ContainerRecipeInstanceConfiguration
		return ret
	}).(ContainerRecipeInstanceConfigurationOutput)
}

// Defines the block devices to attach for building an instance from this Image Builder AMI.
func (o ContainerRecipeInstanceConfigurationPtrOutput) BlockDeviceMappings() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *ContainerRecipeInstanceConfiguration) []ContainerRecipeInstanceBlockDeviceMapping {
		if v == nil {
			return nil
		}
		return v.BlockDeviceMappings
	}).(ContainerRecipeInstanceBlockDeviceMappingArrayOutput)
}

// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
func (o ContainerRecipeInstanceConfigurationPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeInstanceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// The container repository where the output container image is stored.
type ContainerRecipeTargetContainerRepository struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName *string `pulumi:"repositoryName"`
	// Specifies the service in which this image was registered.
	Service *ContainerRecipeTargetContainerRepositoryService `pulumi:"service"`
}

// ContainerRecipeTargetContainerRepositoryInput is an input type that accepts ContainerRecipeTargetContainerRepositoryArgs and ContainerRecipeTargetContainerRepositoryOutput values.
// You can construct a concrete instance of `ContainerRecipeTargetContainerRepositoryInput` via:
//
//	ContainerRecipeTargetContainerRepositoryArgs{...}
type ContainerRecipeTargetContainerRepositoryInput interface {
	pulumi.Input

	ToContainerRecipeTargetContainerRepositoryOutput() ContainerRecipeTargetContainerRepositoryOutput
	ToContainerRecipeTargetContainerRepositoryOutputWithContext(context.Context) ContainerRecipeTargetContainerRepositoryOutput
}

// The container repository where the output container image is stored.
type ContainerRecipeTargetContainerRepositoryArgs struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// Specifies the service in which this image was registered.
	Service ContainerRecipeTargetContainerRepositoryServicePtrInput `pulumi:"service"`
}

func (ContainerRecipeTargetContainerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryOutput() ContainerRecipeTargetContainerRepositoryOutput {
	return i.ToContainerRecipeTargetContainerRepositoryOutputWithContext(context.Background())
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeTargetContainerRepositoryOutput)
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeTargetContainerRepository] {
	return pulumix.Output[ContainerRecipeTargetContainerRepository]{
		OutputState: i.ToContainerRecipeTargetContainerRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return i.ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeTargetContainerRepositoryOutput).ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx)
}

// ContainerRecipeTargetContainerRepositoryPtrInput is an input type that accepts ContainerRecipeTargetContainerRepositoryArgs, ContainerRecipeTargetContainerRepositoryPtr and ContainerRecipeTargetContainerRepositoryPtrOutput values.
// You can construct a concrete instance of `ContainerRecipeTargetContainerRepositoryPtrInput` via:
//
//	        ContainerRecipeTargetContainerRepositoryArgs{...}
//
//	or:
//
//	        nil
type ContainerRecipeTargetContainerRepositoryPtrInput interface {
	pulumi.Input

	ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput
	ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput
}

type containerRecipeTargetContainerRepositoryPtrType ContainerRecipeTargetContainerRepositoryArgs

func ContainerRecipeTargetContainerRepositoryPtr(v *ContainerRecipeTargetContainerRepositoryArgs) ContainerRecipeTargetContainerRepositoryPtrInput {
	return (*containerRecipeTargetContainerRepositoryPtrType)(v)
}

func (*containerRecipeTargetContainerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (i *containerRecipeTargetContainerRepositoryPtrType) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return i.ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i *containerRecipeTargetContainerRepositoryPtrType) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeTargetContainerRepositoryPtrOutput)
}

func (i *containerRecipeTargetContainerRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeTargetContainerRepository] {
	return pulumix.Output[*ContainerRecipeTargetContainerRepository]{
		OutputState: i.ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// The container repository where the output container image is stored.
type ContainerRecipeTargetContainerRepositoryOutput struct{ *pulumi.OutputState }

func (ContainerRecipeTargetContainerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryOutput() ContainerRecipeTargetContainerRepositoryOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o.ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerRecipeTargetContainerRepository) *ContainerRecipeTargetContainerRepository {
		return &v
	}).(ContainerRecipeTargetContainerRepositoryPtrOutput)
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerRecipeTargetContainerRepository] {
	return pulumix.Output[ContainerRecipeTargetContainerRepository]{
		OutputState: o.OutputState,
	}
}

// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
func (o ContainerRecipeTargetContainerRepositoryOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeTargetContainerRepository) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// Specifies the service in which this image was registered.
func (o ContainerRecipeTargetContainerRepositoryOutput) Service() ContainerRecipeTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v ContainerRecipeTargetContainerRepository) *ContainerRecipeTargetContainerRepositoryService {
		return v.Service
	}).(ContainerRecipeTargetContainerRepositoryServicePtrOutput)
}

type ContainerRecipeTargetContainerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (ContainerRecipeTargetContainerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (o ContainerRecipeTargetContainerRepositoryPtrOutput) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryPtrOutput) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerRecipeTargetContainerRepository] {
	return pulumix.Output[*ContainerRecipeTargetContainerRepository]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRecipeTargetContainerRepositoryPtrOutput) Elem() ContainerRecipeTargetContainerRepositoryOutput {
	return o.ApplyT(func(v *ContainerRecipeTargetContainerRepository) ContainerRecipeTargetContainerRepository {
		if v != nil {
			return *v
		}
		var ret ContainerRecipeTargetContainerRepository
		return ret
	}).(ContainerRecipeTargetContainerRepositoryOutput)
}

// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
func (o ContainerRecipeTargetContainerRepositoryPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeTargetContainerRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Specifies the service in which this image was registered.
func (o ContainerRecipeTargetContainerRepositoryPtrOutput) Service() ContainerRecipeTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v *ContainerRecipeTargetContainerRepository) *ContainerRecipeTargetContainerRepositoryService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ContainerRecipeTargetContainerRepositoryServicePtrOutput)
}

// The specific AMI settings (for example, launch permissions, AMI tags).
type DistributionConfigurationAmiDistributionConfiguration struct {
	// The tags to apply to AMIs distributed to this Region.
	AmiTags interface{} `pulumi:"amiTags"`
	// The description of the AMI distribution configuration.
	Description *string `pulumi:"description"`
	// The KMS key identifier used to encrypt the distributed image.
	KmsKeyId                      *string                                                 `pulumi:"kmsKeyId"`
	LaunchPermissionConfiguration *DistributionConfigurationLaunchPermissionConfiguration `pulumi:"launchPermissionConfiguration"`
	// The name of the AMI distribution configuration.
	Name *string `pulumi:"name"`
	// The ID of accounts to which you want to distribute an image.
	TargetAccountIds []string `pulumi:"targetAccountIds"`
}

// DistributionConfigurationAmiDistributionConfigurationInput is an input type that accepts DistributionConfigurationAmiDistributionConfigurationArgs and DistributionConfigurationAmiDistributionConfigurationOutput values.
// You can construct a concrete instance of `DistributionConfigurationAmiDistributionConfigurationInput` via:
//
//	DistributionConfigurationAmiDistributionConfigurationArgs{...}
type DistributionConfigurationAmiDistributionConfigurationInput interface {
	pulumi.Input

	ToDistributionConfigurationAmiDistributionConfigurationOutput() DistributionConfigurationAmiDistributionConfigurationOutput
	ToDistributionConfigurationAmiDistributionConfigurationOutputWithContext(context.Context) DistributionConfigurationAmiDistributionConfigurationOutput
}

// The specific AMI settings (for example, launch permissions, AMI tags).
type DistributionConfigurationAmiDistributionConfigurationArgs struct {
	// The tags to apply to AMIs distributed to this Region.
	AmiTags pulumi.Input `pulumi:"amiTags"`
	// The description of the AMI distribution configuration.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The KMS key identifier used to encrypt the distributed image.
	KmsKeyId                      pulumi.StringPtrInput                                          `pulumi:"kmsKeyId"`
	LaunchPermissionConfiguration DistributionConfigurationLaunchPermissionConfigurationPtrInput `pulumi:"launchPermissionConfiguration"`
	// The name of the AMI distribution configuration.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of accounts to which you want to distribute an image.
	TargetAccountIds pulumi.StringArrayInput `pulumi:"targetAccountIds"`
}

func (DistributionConfigurationAmiDistributionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationAmiDistributionConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationAmiDistributionConfigurationArgs) ToDistributionConfigurationAmiDistributionConfigurationOutput() DistributionConfigurationAmiDistributionConfigurationOutput {
	return i.ToDistributionConfigurationAmiDistributionConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationAmiDistributionConfigurationArgs) ToDistributionConfigurationAmiDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationAmiDistributionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationAmiDistributionConfigurationOutput)
}

func (i DistributionConfigurationAmiDistributionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationAmiDistributionConfiguration] {
	return pulumix.Output[DistributionConfigurationAmiDistributionConfiguration]{
		OutputState: i.ToDistributionConfigurationAmiDistributionConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DistributionConfigurationAmiDistributionConfigurationArgs) ToDistributionConfigurationAmiDistributionConfigurationPtrOutput() DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return i.ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationAmiDistributionConfigurationArgs) ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationAmiDistributionConfigurationOutput).ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(ctx)
}

// DistributionConfigurationAmiDistributionConfigurationPtrInput is an input type that accepts DistributionConfigurationAmiDistributionConfigurationArgs, DistributionConfigurationAmiDistributionConfigurationPtr and DistributionConfigurationAmiDistributionConfigurationPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationAmiDistributionConfigurationPtrInput` via:
//
//	        DistributionConfigurationAmiDistributionConfigurationArgs{...}
//
//	or:
//
//	        nil
type DistributionConfigurationAmiDistributionConfigurationPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationAmiDistributionConfigurationPtrOutput() DistributionConfigurationAmiDistributionConfigurationPtrOutput
	ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(context.Context) DistributionConfigurationAmiDistributionConfigurationPtrOutput
}

type distributionConfigurationAmiDistributionConfigurationPtrType DistributionConfigurationAmiDistributionConfigurationArgs

func DistributionConfigurationAmiDistributionConfigurationPtr(v *DistributionConfigurationAmiDistributionConfigurationArgs) DistributionConfigurationAmiDistributionConfigurationPtrInput {
	return (*distributionConfigurationAmiDistributionConfigurationPtrType)(v)
}

func (*distributionConfigurationAmiDistributionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationAmiDistributionConfiguration)(nil)).Elem()
}

func (i *distributionConfigurationAmiDistributionConfigurationPtrType) ToDistributionConfigurationAmiDistributionConfigurationPtrOutput() DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return i.ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationAmiDistributionConfigurationPtrType) ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationAmiDistributionConfigurationPtrOutput)
}

func (i *distributionConfigurationAmiDistributionConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationAmiDistributionConfiguration] {
	return pulumix.Output[*DistributionConfigurationAmiDistributionConfiguration]{
		OutputState: i.ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The specific AMI settings (for example, launch permissions, AMI tags).
type DistributionConfigurationAmiDistributionConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationAmiDistributionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationAmiDistributionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationAmiDistributionConfigurationOutput) ToDistributionConfigurationAmiDistributionConfigurationOutput() DistributionConfigurationAmiDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationAmiDistributionConfigurationOutput) ToDistributionConfigurationAmiDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationAmiDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationAmiDistributionConfigurationOutput) ToDistributionConfigurationAmiDistributionConfigurationPtrOutput() DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return o.ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationAmiDistributionConfigurationOutput) ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationAmiDistributionConfiguration) *DistributionConfigurationAmiDistributionConfiguration {
		return &v
	}).(DistributionConfigurationAmiDistributionConfigurationPtrOutput)
}

func (o DistributionConfigurationAmiDistributionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationAmiDistributionConfiguration] {
	return pulumix.Output[DistributionConfigurationAmiDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

// The tags to apply to AMIs distributed to this Region.
func (o DistributionConfigurationAmiDistributionConfigurationOutput) AmiTags() pulumi.AnyOutput {
	return o.ApplyT(func(v DistributionConfigurationAmiDistributionConfiguration) interface{} { return v.AmiTags }).(pulumi.AnyOutput)
}

// The description of the AMI distribution configuration.
func (o DistributionConfigurationAmiDistributionConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationAmiDistributionConfiguration) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The KMS key identifier used to encrypt the distributed image.
func (o DistributionConfigurationAmiDistributionConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationAmiDistributionConfiguration) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o DistributionConfigurationAmiDistributionConfigurationOutput) LaunchPermissionConfiguration() DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationAmiDistributionConfiguration) *DistributionConfigurationLaunchPermissionConfiguration {
		return v.LaunchPermissionConfiguration
	}).(DistributionConfigurationLaunchPermissionConfigurationPtrOutput)
}

// The name of the AMI distribution configuration.
func (o DistributionConfigurationAmiDistributionConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationAmiDistributionConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID of accounts to which you want to distribute an image.
func (o DistributionConfigurationAmiDistributionConfigurationOutput) TargetAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationAmiDistributionConfiguration) []string { return v.TargetAccountIds }).(pulumi.StringArrayOutput)
}

type DistributionConfigurationAmiDistributionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationAmiDistributionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationAmiDistributionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) ToDistributionConfigurationAmiDistributionConfigurationPtrOutput() DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) ToDistributionConfigurationAmiDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationAmiDistributionConfiguration] {
	return pulumix.Output[*DistributionConfigurationAmiDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) Elem() DistributionConfigurationAmiDistributionConfigurationOutput {
	return o.ApplyT(func(v *DistributionConfigurationAmiDistributionConfiguration) DistributionConfigurationAmiDistributionConfiguration {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationAmiDistributionConfiguration
		return ret
	}).(DistributionConfigurationAmiDistributionConfigurationOutput)
}

// The tags to apply to AMIs distributed to this Region.
func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) AmiTags() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistributionConfigurationAmiDistributionConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.AmiTags
	}).(pulumi.AnyOutput)
}

// The description of the AMI distribution configuration.
func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationAmiDistributionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The KMS key identifier used to encrypt the distributed image.
func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationAmiDistributionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) LaunchPermissionConfiguration() DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationAmiDistributionConfiguration) *DistributionConfigurationLaunchPermissionConfiguration {
		if v == nil {
			return nil
		}
		return v.LaunchPermissionConfiguration
	}).(DistributionConfigurationLaunchPermissionConfigurationPtrOutput)
}

// The name of the AMI distribution configuration.
func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationAmiDistributionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The ID of accounts to which you want to distribute an image.
func (o DistributionConfigurationAmiDistributionConfigurationPtrOutput) TargetAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationAmiDistributionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.TargetAccountIds
	}).(pulumi.StringArrayOutput)
}

// Container distribution settings for encryption, licensing, and sharing in a specific Region.
type DistributionConfigurationContainerDistributionConfiguration struct {
	// Tags that are attached to the container distribution configuration.
	ContainerTags []string `pulumi:"containerTags"`
	// The description of the container distribution configuration.
	Description *string `pulumi:"description"`
	// The destination repository for the container distribution configuration.
	TargetRepository *DistributionConfigurationTargetContainerRepository `pulumi:"targetRepository"`
}

// DistributionConfigurationContainerDistributionConfigurationInput is an input type that accepts DistributionConfigurationContainerDistributionConfigurationArgs and DistributionConfigurationContainerDistributionConfigurationOutput values.
// You can construct a concrete instance of `DistributionConfigurationContainerDistributionConfigurationInput` via:
//
//	DistributionConfigurationContainerDistributionConfigurationArgs{...}
type DistributionConfigurationContainerDistributionConfigurationInput interface {
	pulumi.Input

	ToDistributionConfigurationContainerDistributionConfigurationOutput() DistributionConfigurationContainerDistributionConfigurationOutput
	ToDistributionConfigurationContainerDistributionConfigurationOutputWithContext(context.Context) DistributionConfigurationContainerDistributionConfigurationOutput
}

// Container distribution settings for encryption, licensing, and sharing in a specific Region.
type DistributionConfigurationContainerDistributionConfigurationArgs struct {
	// Tags that are attached to the container distribution configuration.
	ContainerTags pulumi.StringArrayInput `pulumi:"containerTags"`
	// The description of the container distribution configuration.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The destination repository for the container distribution configuration.
	TargetRepository DistributionConfigurationTargetContainerRepositoryPtrInput `pulumi:"targetRepository"`
}

func (DistributionConfigurationContainerDistributionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationContainerDistributionConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationContainerDistributionConfigurationArgs) ToDistributionConfigurationContainerDistributionConfigurationOutput() DistributionConfigurationContainerDistributionConfigurationOutput {
	return i.ToDistributionConfigurationContainerDistributionConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationContainerDistributionConfigurationArgs) ToDistributionConfigurationContainerDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationContainerDistributionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationContainerDistributionConfigurationOutput)
}

func (i DistributionConfigurationContainerDistributionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationContainerDistributionConfiguration] {
	return pulumix.Output[DistributionConfigurationContainerDistributionConfiguration]{
		OutputState: i.ToDistributionConfigurationContainerDistributionConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DistributionConfigurationContainerDistributionConfigurationArgs) ToDistributionConfigurationContainerDistributionConfigurationPtrOutput() DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return i.ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationContainerDistributionConfigurationArgs) ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationContainerDistributionConfigurationOutput).ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(ctx)
}

// DistributionConfigurationContainerDistributionConfigurationPtrInput is an input type that accepts DistributionConfigurationContainerDistributionConfigurationArgs, DistributionConfigurationContainerDistributionConfigurationPtr and DistributionConfigurationContainerDistributionConfigurationPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationContainerDistributionConfigurationPtrInput` via:
//
//	        DistributionConfigurationContainerDistributionConfigurationArgs{...}
//
//	or:
//
//	        nil
type DistributionConfigurationContainerDistributionConfigurationPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationContainerDistributionConfigurationPtrOutput() DistributionConfigurationContainerDistributionConfigurationPtrOutput
	ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(context.Context) DistributionConfigurationContainerDistributionConfigurationPtrOutput
}

type distributionConfigurationContainerDistributionConfigurationPtrType DistributionConfigurationContainerDistributionConfigurationArgs

func DistributionConfigurationContainerDistributionConfigurationPtr(v *DistributionConfigurationContainerDistributionConfigurationArgs) DistributionConfigurationContainerDistributionConfigurationPtrInput {
	return (*distributionConfigurationContainerDistributionConfigurationPtrType)(v)
}

func (*distributionConfigurationContainerDistributionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationContainerDistributionConfiguration)(nil)).Elem()
}

func (i *distributionConfigurationContainerDistributionConfigurationPtrType) ToDistributionConfigurationContainerDistributionConfigurationPtrOutput() DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return i.ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationContainerDistributionConfigurationPtrType) ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationContainerDistributionConfigurationPtrOutput)
}

func (i *distributionConfigurationContainerDistributionConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationContainerDistributionConfiguration] {
	return pulumix.Output[*DistributionConfigurationContainerDistributionConfiguration]{
		OutputState: i.ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Container distribution settings for encryption, licensing, and sharing in a specific Region.
type DistributionConfigurationContainerDistributionConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationContainerDistributionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationContainerDistributionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationContainerDistributionConfigurationOutput) ToDistributionConfigurationContainerDistributionConfigurationOutput() DistributionConfigurationContainerDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationContainerDistributionConfigurationOutput) ToDistributionConfigurationContainerDistributionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationContainerDistributionConfigurationOutput {
	return o
}

func (o DistributionConfigurationContainerDistributionConfigurationOutput) ToDistributionConfigurationContainerDistributionConfigurationPtrOutput() DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return o.ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationContainerDistributionConfigurationOutput) ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationContainerDistributionConfiguration) *DistributionConfigurationContainerDistributionConfiguration {
		return &v
	}).(DistributionConfigurationContainerDistributionConfigurationPtrOutput)
}

func (o DistributionConfigurationContainerDistributionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationContainerDistributionConfiguration] {
	return pulumix.Output[DistributionConfigurationContainerDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Tags that are attached to the container distribution configuration.
func (o DistributionConfigurationContainerDistributionConfigurationOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationContainerDistributionConfiguration) []string { return v.ContainerTags }).(pulumi.StringArrayOutput)
}

// The description of the container distribution configuration.
func (o DistributionConfigurationContainerDistributionConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationContainerDistributionConfiguration) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination repository for the container distribution configuration.
func (o DistributionConfigurationContainerDistributionConfigurationOutput) TargetRepository() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationContainerDistributionConfiguration) *DistributionConfigurationTargetContainerRepository {
		return v.TargetRepository
	}).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

type DistributionConfigurationContainerDistributionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationContainerDistributionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationContainerDistributionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationContainerDistributionConfigurationPtrOutput) ToDistributionConfigurationContainerDistributionConfigurationPtrOutput() DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationContainerDistributionConfigurationPtrOutput) ToDistributionConfigurationContainerDistributionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationContainerDistributionConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationContainerDistributionConfiguration] {
	return pulumix.Output[*DistributionConfigurationContainerDistributionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationContainerDistributionConfigurationPtrOutput) Elem() DistributionConfigurationContainerDistributionConfigurationOutput {
	return o.ApplyT(func(v *DistributionConfigurationContainerDistributionConfiguration) DistributionConfigurationContainerDistributionConfiguration {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationContainerDistributionConfiguration
		return ret
	}).(DistributionConfigurationContainerDistributionConfigurationOutput)
}

// Tags that are attached to the container distribution configuration.
func (o DistributionConfigurationContainerDistributionConfigurationPtrOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationContainerDistributionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ContainerTags
	}).(pulumi.StringArrayOutput)
}

// The description of the container distribution configuration.
func (o DistributionConfigurationContainerDistributionConfigurationPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationContainerDistributionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The destination repository for the container distribution configuration.
func (o DistributionConfigurationContainerDistributionConfigurationPtrOutput) TargetRepository() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationContainerDistributionConfiguration) *DistributionConfigurationTargetContainerRepository {
		if v == nil {
			return nil
		}
		return v.TargetRepository
	}).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

// The distributions of the distribution configuration.
type DistributionConfigurationDistribution struct {
	AmiDistributionConfiguration       *DistributionConfigurationAmiDistributionConfiguration       `pulumi:"amiDistributionConfiguration"`
	ContainerDistributionConfiguration *DistributionConfigurationContainerDistributionConfiguration `pulumi:"containerDistributionConfiguration"`
	// The Windows faster-launching configurations to use for AMI distribution.
	FastLaunchConfigurations []DistributionConfigurationFastLaunchConfiguration `pulumi:"fastLaunchConfigurations"`
	// A group of launchTemplateConfiguration settings that apply to image distribution.
	LaunchTemplateConfigurations []DistributionConfigurationLaunchTemplateConfiguration `pulumi:"launchTemplateConfigurations"`
	// The License Manager Configuration to associate with the AMI in the specified Region.
	LicenseConfigurationArns []string `pulumi:"licenseConfigurationArns"`
	// region
	Region string `pulumi:"region"`
}

// DistributionConfigurationDistributionInput is an input type that accepts DistributionConfigurationDistributionArgs and DistributionConfigurationDistributionOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionInput` via:
//
//	DistributionConfigurationDistributionArgs{...}
type DistributionConfigurationDistributionInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput
	ToDistributionConfigurationDistributionOutputWithContext(context.Context) DistributionConfigurationDistributionOutput
}

// The distributions of the distribution configuration.
type DistributionConfigurationDistributionArgs struct {
	AmiDistributionConfiguration       DistributionConfigurationAmiDistributionConfigurationPtrInput       `pulumi:"amiDistributionConfiguration"`
	ContainerDistributionConfiguration DistributionConfigurationContainerDistributionConfigurationPtrInput `pulumi:"containerDistributionConfiguration"`
	// The Windows faster-launching configurations to use for AMI distribution.
	FastLaunchConfigurations DistributionConfigurationFastLaunchConfigurationArrayInput `pulumi:"fastLaunchConfigurations"`
	// A group of launchTemplateConfiguration settings that apply to image distribution.
	LaunchTemplateConfigurations DistributionConfigurationLaunchTemplateConfigurationArrayInput `pulumi:"launchTemplateConfigurations"`
	// The License Manager Configuration to associate with the AMI in the specified Region.
	LicenseConfigurationArns pulumi.StringArrayInput `pulumi:"licenseConfigurationArns"`
	// region
	Region pulumi.StringInput `pulumi:"region"`
}

func (DistributionConfigurationDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistribution)(nil)).Elem()
}

func (i DistributionConfigurationDistributionArgs) ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput {
	return i.ToDistributionConfigurationDistributionOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionArgs) ToDistributionConfigurationDistributionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionOutput)
}

func (i DistributionConfigurationDistributionArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistribution] {
	return pulumix.Output[DistributionConfigurationDistribution]{
		OutputState: i.ToDistributionConfigurationDistributionOutputWithContext(ctx).OutputState,
	}
}

// DistributionConfigurationDistributionArrayInput is an input type that accepts DistributionConfigurationDistributionArray and DistributionConfigurationDistributionArrayOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionArrayInput` via:
//
//	DistributionConfigurationDistributionArray{ DistributionConfigurationDistributionArgs{...} }
type DistributionConfigurationDistributionArrayInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionArrayOutput() DistributionConfigurationDistributionArrayOutput
	ToDistributionConfigurationDistributionArrayOutputWithContext(context.Context) DistributionConfigurationDistributionArrayOutput
}

type DistributionConfigurationDistributionArray []DistributionConfigurationDistributionInput

func (DistributionConfigurationDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationDistribution)(nil)).Elem()
}

func (i DistributionConfigurationDistributionArray) ToDistributionConfigurationDistributionArrayOutput() DistributionConfigurationDistributionArrayOutput {
	return i.ToDistributionConfigurationDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionArray) ToDistributionConfigurationDistributionArrayOutputWithContext(ctx context.Context) DistributionConfigurationDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionArrayOutput)
}

func (i DistributionConfigurationDistributionArray) ToOutput(ctx context.Context) pulumix.Output[[]DistributionConfigurationDistribution] {
	return pulumix.Output[[]DistributionConfigurationDistribution]{
		OutputState: i.ToDistributionConfigurationDistributionArrayOutputWithContext(ctx).OutputState,
	}
}

// The distributions of the distribution configuration.
type DistributionConfigurationDistributionOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistribution)(nil)).Elem()
}

func (o DistributionConfigurationDistributionOutput) ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput {
	return o
}

func (o DistributionConfigurationDistributionOutput) ToDistributionConfigurationDistributionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionOutput {
	return o
}

func (o DistributionConfigurationDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationDistribution] {
	return pulumix.Output[DistributionConfigurationDistribution]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationDistributionOutput) AmiDistributionConfiguration() DistributionConfigurationAmiDistributionConfigurationPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) *DistributionConfigurationAmiDistributionConfiguration {
		return v.AmiDistributionConfiguration
	}).(DistributionConfigurationAmiDistributionConfigurationPtrOutput)
}

func (o DistributionConfigurationDistributionOutput) ContainerDistributionConfiguration() DistributionConfigurationContainerDistributionConfigurationPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) *DistributionConfigurationContainerDistributionConfiguration {
		return v.ContainerDistributionConfiguration
	}).(DistributionConfigurationContainerDistributionConfigurationPtrOutput)
}

// The Windows faster-launching configurations to use for AMI distribution.
func (o DistributionConfigurationDistributionOutput) FastLaunchConfigurations() DistributionConfigurationFastLaunchConfigurationArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) []DistributionConfigurationFastLaunchConfiguration {
		return v.FastLaunchConfigurations
	}).(DistributionConfigurationFastLaunchConfigurationArrayOutput)
}

// A group of launchTemplateConfiguration settings that apply to image distribution.
func (o DistributionConfigurationDistributionOutput) LaunchTemplateConfigurations() DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) []DistributionConfigurationLaunchTemplateConfiguration {
		return v.LaunchTemplateConfigurations
	}).(DistributionConfigurationLaunchTemplateConfigurationArrayOutput)
}

// The License Manager Configuration to associate with the AMI in the specified Region.
func (o DistributionConfigurationDistributionOutput) LicenseConfigurationArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) []string { return v.LicenseConfigurationArns }).(pulumi.StringArrayOutput)
}

// region
func (o DistributionConfigurationDistributionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) string { return v.Region }).(pulumi.StringOutput)
}

type DistributionConfigurationDistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationDistribution)(nil)).Elem()
}

func (o DistributionConfigurationDistributionArrayOutput) ToDistributionConfigurationDistributionArrayOutput() DistributionConfigurationDistributionArrayOutput {
	return o
}

func (o DistributionConfigurationDistributionArrayOutput) ToDistributionConfigurationDistributionArrayOutputWithContext(ctx context.Context) DistributionConfigurationDistributionArrayOutput {
	return o
}

func (o DistributionConfigurationDistributionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DistributionConfigurationDistribution] {
	return pulumix.Output[[]DistributionConfigurationDistribution]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationDistributionArrayOutput) Index(i pulumi.IntInput) DistributionConfigurationDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionConfigurationDistribution {
		return vs[0].([]DistributionConfigurationDistribution)[vs[1].(int)]
	}).(DistributionConfigurationDistributionOutput)
}

// The Windows faster-launching configuration to use for AMI distribution.
type DistributionConfigurationFastLaunchConfiguration struct {
	// The owner account ID for the fast-launch enabled Windows AMI.
	AccountId *string `pulumi:"accountId"`
	// A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
	Enabled *bool `pulumi:"enabled"`
	// The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
	LaunchTemplate *DistributionConfigurationFastLaunchLaunchTemplateSpecification `pulumi:"launchTemplate"`
	// The maximum number of parallel instances that are launched for creating resources.
	MaxParallelLaunches *int `pulumi:"maxParallelLaunches"`
	// Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
	SnapshotConfiguration *DistributionConfigurationFastLaunchSnapshotConfiguration `pulumi:"snapshotConfiguration"`
}

// DistributionConfigurationFastLaunchConfigurationInput is an input type that accepts DistributionConfigurationFastLaunchConfigurationArgs and DistributionConfigurationFastLaunchConfigurationOutput values.
// You can construct a concrete instance of `DistributionConfigurationFastLaunchConfigurationInput` via:
//
//	DistributionConfigurationFastLaunchConfigurationArgs{...}
type DistributionConfigurationFastLaunchConfigurationInput interface {
	pulumi.Input

	ToDistributionConfigurationFastLaunchConfigurationOutput() DistributionConfigurationFastLaunchConfigurationOutput
	ToDistributionConfigurationFastLaunchConfigurationOutputWithContext(context.Context) DistributionConfigurationFastLaunchConfigurationOutput
}

// The Windows faster-launching configuration to use for AMI distribution.
type DistributionConfigurationFastLaunchConfigurationArgs struct {
	// The owner account ID for the fast-launch enabled Windows AMI.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
	LaunchTemplate DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrInput `pulumi:"launchTemplate"`
	// The maximum number of parallel instances that are launched for creating resources.
	MaxParallelLaunches pulumi.IntPtrInput `pulumi:"maxParallelLaunches"`
	// Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
	SnapshotConfiguration DistributionConfigurationFastLaunchSnapshotConfigurationPtrInput `pulumi:"snapshotConfiguration"`
}

func (DistributionConfigurationFastLaunchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationFastLaunchConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationFastLaunchConfigurationArgs) ToDistributionConfigurationFastLaunchConfigurationOutput() DistributionConfigurationFastLaunchConfigurationOutput {
	return i.ToDistributionConfigurationFastLaunchConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationFastLaunchConfigurationArgs) ToDistributionConfigurationFastLaunchConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchConfigurationOutput)
}

func (i DistributionConfigurationFastLaunchConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationFastLaunchConfiguration] {
	return pulumix.Output[DistributionConfigurationFastLaunchConfiguration]{
		OutputState: i.ToDistributionConfigurationFastLaunchConfigurationOutputWithContext(ctx).OutputState,
	}
}

// DistributionConfigurationFastLaunchConfigurationArrayInput is an input type that accepts DistributionConfigurationFastLaunchConfigurationArray and DistributionConfigurationFastLaunchConfigurationArrayOutput values.
// You can construct a concrete instance of `DistributionConfigurationFastLaunchConfigurationArrayInput` via:
//
//	DistributionConfigurationFastLaunchConfigurationArray{ DistributionConfigurationFastLaunchConfigurationArgs{...} }
type DistributionConfigurationFastLaunchConfigurationArrayInput interface {
	pulumi.Input

	ToDistributionConfigurationFastLaunchConfigurationArrayOutput() DistributionConfigurationFastLaunchConfigurationArrayOutput
	ToDistributionConfigurationFastLaunchConfigurationArrayOutputWithContext(context.Context) DistributionConfigurationFastLaunchConfigurationArrayOutput
}

type DistributionConfigurationFastLaunchConfigurationArray []DistributionConfigurationFastLaunchConfigurationInput

func (DistributionConfigurationFastLaunchConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationFastLaunchConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationFastLaunchConfigurationArray) ToDistributionConfigurationFastLaunchConfigurationArrayOutput() DistributionConfigurationFastLaunchConfigurationArrayOutput {
	return i.ToDistributionConfigurationFastLaunchConfigurationArrayOutputWithContext(context.Background())
}

func (i DistributionConfigurationFastLaunchConfigurationArray) ToDistributionConfigurationFastLaunchConfigurationArrayOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchConfigurationArrayOutput)
}

func (i DistributionConfigurationFastLaunchConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]DistributionConfigurationFastLaunchConfiguration] {
	return pulumix.Output[[]DistributionConfigurationFastLaunchConfiguration]{
		OutputState: i.ToDistributionConfigurationFastLaunchConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// The Windows faster-launching configuration to use for AMI distribution.
type DistributionConfigurationFastLaunchConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationFastLaunchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationFastLaunchConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationFastLaunchConfigurationOutput) ToDistributionConfigurationFastLaunchConfigurationOutput() DistributionConfigurationFastLaunchConfigurationOutput {
	return o
}

func (o DistributionConfigurationFastLaunchConfigurationOutput) ToDistributionConfigurationFastLaunchConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchConfigurationOutput {
	return o
}

func (o DistributionConfigurationFastLaunchConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationFastLaunchConfiguration] {
	return pulumix.Output[DistributionConfigurationFastLaunchConfiguration]{
		OutputState: o.OutputState,
	}
}

// The owner account ID for the fast-launch enabled Windows AMI.
func (o DistributionConfigurationFastLaunchConfigurationOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchConfiguration) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
func (o DistributionConfigurationFastLaunchConfigurationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchConfiguration) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
func (o DistributionConfigurationFastLaunchConfigurationOutput) LaunchTemplate() DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchConfiguration) *DistributionConfigurationFastLaunchLaunchTemplateSpecification {
		return v.LaunchTemplate
	}).(DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput)
}

// The maximum number of parallel instances that are launched for creating resources.
func (o DistributionConfigurationFastLaunchConfigurationOutput) MaxParallelLaunches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchConfiguration) *int { return v.MaxParallelLaunches }).(pulumi.IntPtrOutput)
}

// Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
func (o DistributionConfigurationFastLaunchConfigurationOutput) SnapshotConfiguration() DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchConfiguration) *DistributionConfigurationFastLaunchSnapshotConfiguration {
		return v.SnapshotConfiguration
	}).(DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput)
}

type DistributionConfigurationFastLaunchConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationFastLaunchConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationFastLaunchConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationFastLaunchConfigurationArrayOutput) ToDistributionConfigurationFastLaunchConfigurationArrayOutput() DistributionConfigurationFastLaunchConfigurationArrayOutput {
	return o
}

func (o DistributionConfigurationFastLaunchConfigurationArrayOutput) ToDistributionConfigurationFastLaunchConfigurationArrayOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchConfigurationArrayOutput {
	return o
}

func (o DistributionConfigurationFastLaunchConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DistributionConfigurationFastLaunchConfiguration] {
	return pulumix.Output[[]DistributionConfigurationFastLaunchConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationFastLaunchConfigurationArrayOutput) Index(i pulumi.IntInput) DistributionConfigurationFastLaunchConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionConfigurationFastLaunchConfiguration {
		return vs[0].([]DistributionConfigurationFastLaunchConfiguration)[vs[1].(int)]
	}).(DistributionConfigurationFastLaunchConfigurationOutput)
}

// The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
type DistributionConfigurationFastLaunchLaunchTemplateSpecification struct {
	// The ID of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// The name of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateName *string `pulumi:"launchTemplateName"`
	// The version of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateVersion *string `pulumi:"launchTemplateVersion"`
}

// DistributionConfigurationFastLaunchLaunchTemplateSpecificationInput is an input type that accepts DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs and DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput values.
// You can construct a concrete instance of `DistributionConfigurationFastLaunchLaunchTemplateSpecificationInput` via:
//
//	DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs{...}
type DistributionConfigurationFastLaunchLaunchTemplateSpecificationInput interface {
	pulumi.Input

	ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput
	ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutputWithContext(context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput
}

// The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
type DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs struct {
	// The ID of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateId pulumi.StringPtrInput `pulumi:"launchTemplateId"`
	// The name of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateName pulumi.StringPtrInput `pulumi:"launchTemplateName"`
	// The version of the launch template to use for faster launching for a Windows AMI.
	LaunchTemplateVersion pulumi.StringPtrInput `pulumi:"launchTemplateVersion"`
}

func (DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationFastLaunchLaunchTemplateSpecification)(nil)).Elem()
}

func (i DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput {
	return i.ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutputWithContext(context.Background())
}

func (i DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput)
}

func (i DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationFastLaunchLaunchTemplateSpecification] {
	return pulumix.Output[DistributionConfigurationFastLaunchLaunchTemplateSpecification]{
		OutputState: i.ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutputWithContext(ctx).OutputState,
	}
}

func (i DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return i.ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput).ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(ctx)
}

// DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrInput is an input type that accepts DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs, DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtr and DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrInput` via:
//
//	        DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs{...}
//
//	or:
//
//	        nil
type DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput
	ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput
}

type distributionConfigurationFastLaunchLaunchTemplateSpecificationPtrType DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs

func DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtr(v *DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs) DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrInput {
	return (*distributionConfigurationFastLaunchLaunchTemplateSpecificationPtrType)(v)
}

func (*distributionConfigurationFastLaunchLaunchTemplateSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationFastLaunchLaunchTemplateSpecification)(nil)).Elem()
}

func (i *distributionConfigurationFastLaunchLaunchTemplateSpecificationPtrType) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return i.ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationFastLaunchLaunchTemplateSpecificationPtrType) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput)
}

func (i *distributionConfigurationFastLaunchLaunchTemplateSpecificationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationFastLaunchLaunchTemplateSpecification] {
	return pulumix.Output[*DistributionConfigurationFastLaunchLaunchTemplateSpecification]{
		OutputState: i.ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(ctx).OutputState,
	}
}

// The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
type DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationFastLaunchLaunchTemplateSpecification)(nil)).Elem()
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput {
	return o
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput {
	return o
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return o.ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationFastLaunchLaunchTemplateSpecification) *DistributionConfigurationFastLaunchLaunchTemplateSpecification {
		return &v
	}).(DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput)
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationFastLaunchLaunchTemplateSpecification] {
	return pulumix.Output[DistributionConfigurationFastLaunchLaunchTemplateSpecification]{
		OutputState: o.OutputState,
	}
}

// The ID of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchLaunchTemplateSpecification) *string {
		return v.LaunchTemplateId
	}).(pulumi.StringPtrOutput)
}

// The name of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) LaunchTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchLaunchTemplateSpecification) *string {
		return v.LaunchTemplateName
	}).(pulumi.StringPtrOutput)
}

// The version of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput) LaunchTemplateVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchLaunchTemplateSpecification) *string {
		return v.LaunchTemplateVersion
	}).(pulumi.StringPtrOutput)
}

type DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationFastLaunchLaunchTemplateSpecification)(nil)).Elem()
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput() DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return o
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) ToDistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput {
	return o
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationFastLaunchLaunchTemplateSpecification] {
	return pulumix.Output[*DistributionConfigurationFastLaunchLaunchTemplateSpecification]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) Elem() DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput {
	return o.ApplyT(func(v *DistributionConfigurationFastLaunchLaunchTemplateSpecification) DistributionConfigurationFastLaunchLaunchTemplateSpecification {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationFastLaunchLaunchTemplateSpecification
		return ret
	}).(DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput)
}

// The ID of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationFastLaunchLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.LaunchTemplateId
	}).(pulumi.StringPtrOutput)
}

// The name of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) LaunchTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationFastLaunchLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.LaunchTemplateName
	}).(pulumi.StringPtrOutput)
}

// The version of the launch template to use for faster launching for a Windows AMI.
func (o DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput) LaunchTemplateVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationFastLaunchLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.LaunchTemplateVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
type DistributionConfigurationFastLaunchSnapshotConfiguration struct {
	// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
	TargetResourceCount *int `pulumi:"targetResourceCount"`
}

// DistributionConfigurationFastLaunchSnapshotConfigurationInput is an input type that accepts DistributionConfigurationFastLaunchSnapshotConfigurationArgs and DistributionConfigurationFastLaunchSnapshotConfigurationOutput values.
// You can construct a concrete instance of `DistributionConfigurationFastLaunchSnapshotConfigurationInput` via:
//
//	DistributionConfigurationFastLaunchSnapshotConfigurationArgs{...}
type DistributionConfigurationFastLaunchSnapshotConfigurationInput interface {
	pulumi.Input

	ToDistributionConfigurationFastLaunchSnapshotConfigurationOutput() DistributionConfigurationFastLaunchSnapshotConfigurationOutput
	ToDistributionConfigurationFastLaunchSnapshotConfigurationOutputWithContext(context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationOutput
}

// Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
type DistributionConfigurationFastLaunchSnapshotConfigurationArgs struct {
	// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
	TargetResourceCount pulumi.IntPtrInput `pulumi:"targetResourceCount"`
}

func (DistributionConfigurationFastLaunchSnapshotConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationFastLaunchSnapshotConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationFastLaunchSnapshotConfigurationArgs) ToDistributionConfigurationFastLaunchSnapshotConfigurationOutput() DistributionConfigurationFastLaunchSnapshotConfigurationOutput {
	return i.ToDistributionConfigurationFastLaunchSnapshotConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationFastLaunchSnapshotConfigurationArgs) ToDistributionConfigurationFastLaunchSnapshotConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchSnapshotConfigurationOutput)
}

func (i DistributionConfigurationFastLaunchSnapshotConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationFastLaunchSnapshotConfiguration] {
	return pulumix.Output[DistributionConfigurationFastLaunchSnapshotConfiguration]{
		OutputState: i.ToDistributionConfigurationFastLaunchSnapshotConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DistributionConfigurationFastLaunchSnapshotConfigurationArgs) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput() DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return i.ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationFastLaunchSnapshotConfigurationArgs) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchSnapshotConfigurationOutput).ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(ctx)
}

// DistributionConfigurationFastLaunchSnapshotConfigurationPtrInput is an input type that accepts DistributionConfigurationFastLaunchSnapshotConfigurationArgs, DistributionConfigurationFastLaunchSnapshotConfigurationPtr and DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationFastLaunchSnapshotConfigurationPtrInput` via:
//
//	        DistributionConfigurationFastLaunchSnapshotConfigurationArgs{...}
//
//	or:
//
//	        nil
type DistributionConfigurationFastLaunchSnapshotConfigurationPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput() DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput
	ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput
}

type distributionConfigurationFastLaunchSnapshotConfigurationPtrType DistributionConfigurationFastLaunchSnapshotConfigurationArgs

func DistributionConfigurationFastLaunchSnapshotConfigurationPtr(v *DistributionConfigurationFastLaunchSnapshotConfigurationArgs) DistributionConfigurationFastLaunchSnapshotConfigurationPtrInput {
	return (*distributionConfigurationFastLaunchSnapshotConfigurationPtrType)(v)
}

func (*distributionConfigurationFastLaunchSnapshotConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationFastLaunchSnapshotConfiguration)(nil)).Elem()
}

func (i *distributionConfigurationFastLaunchSnapshotConfigurationPtrType) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput() DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return i.ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationFastLaunchSnapshotConfigurationPtrType) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput)
}

func (i *distributionConfigurationFastLaunchSnapshotConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationFastLaunchSnapshotConfiguration] {
	return pulumix.Output[*DistributionConfigurationFastLaunchSnapshotConfiguration]{
		OutputState: i.ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
type DistributionConfigurationFastLaunchSnapshotConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationFastLaunchSnapshotConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationFastLaunchSnapshotConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationOutput) ToDistributionConfigurationFastLaunchSnapshotConfigurationOutput() DistributionConfigurationFastLaunchSnapshotConfigurationOutput {
	return o
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationOutput) ToDistributionConfigurationFastLaunchSnapshotConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationOutput {
	return o
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationOutput) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput() DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return o.ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationOutput) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationFastLaunchSnapshotConfiguration) *DistributionConfigurationFastLaunchSnapshotConfiguration {
		return &v
	}).(DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput)
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationFastLaunchSnapshotConfiguration] {
	return pulumix.Output[DistributionConfigurationFastLaunchSnapshotConfiguration]{
		OutputState: o.OutputState,
	}
}

// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
func (o DistributionConfigurationFastLaunchSnapshotConfigurationOutput) TargetResourceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationFastLaunchSnapshotConfiguration) *int { return v.TargetResourceCount }).(pulumi.IntPtrOutput)
}

type DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationFastLaunchSnapshotConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput() DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput) ToDistributionConfigurationFastLaunchSnapshotConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationFastLaunchSnapshotConfiguration] {
	return pulumix.Output[*DistributionConfigurationFastLaunchSnapshotConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput) Elem() DistributionConfigurationFastLaunchSnapshotConfigurationOutput {
	return o.ApplyT(func(v *DistributionConfigurationFastLaunchSnapshotConfiguration) DistributionConfigurationFastLaunchSnapshotConfiguration {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationFastLaunchSnapshotConfiguration
		return ret
	}).(DistributionConfigurationFastLaunchSnapshotConfigurationOutput)
}

// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
func (o DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput) TargetResourceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationFastLaunchSnapshotConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TargetResourceCount
	}).(pulumi.IntPtrOutput)
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
type DistributionConfigurationLaunchPermissionConfiguration struct {
	// The ARN for an Amazon Web Services Organization that you want to share your AMI with.
	OrganizationArns []string `pulumi:"organizationArns"`
	// The ARN for an Organizations organizational unit (OU) that you want to share your AMI with.
	OrganizationalUnitArns []string `pulumi:"organizationalUnitArns"`
	// The name of the group.
	UserGroups []string `pulumi:"userGroups"`
	// The AWS account ID.
	UserIds []string `pulumi:"userIds"`
}

// DistributionConfigurationLaunchPermissionConfigurationInput is an input type that accepts DistributionConfigurationLaunchPermissionConfigurationArgs and DistributionConfigurationLaunchPermissionConfigurationOutput values.
// You can construct a concrete instance of `DistributionConfigurationLaunchPermissionConfigurationInput` via:
//
//	DistributionConfigurationLaunchPermissionConfigurationArgs{...}
type DistributionConfigurationLaunchPermissionConfigurationInput interface {
	pulumi.Input

	ToDistributionConfigurationLaunchPermissionConfigurationOutput() DistributionConfigurationLaunchPermissionConfigurationOutput
	ToDistributionConfigurationLaunchPermissionConfigurationOutputWithContext(context.Context) DistributionConfigurationLaunchPermissionConfigurationOutput
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
type DistributionConfigurationLaunchPermissionConfigurationArgs struct {
	// The ARN for an Amazon Web Services Organization that you want to share your AMI with.
	OrganizationArns pulumi.StringArrayInput `pulumi:"organizationArns"`
	// The ARN for an Organizations organizational unit (OU) that you want to share your AMI with.
	OrganizationalUnitArns pulumi.StringArrayInput `pulumi:"organizationalUnitArns"`
	// The name of the group.
	UserGroups pulumi.StringArrayInput `pulumi:"userGroups"`
	// The AWS account ID.
	UserIds pulumi.StringArrayInput `pulumi:"userIds"`
}

func (DistributionConfigurationLaunchPermissionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationLaunchPermissionConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationLaunchPermissionConfigurationArgs) ToDistributionConfigurationLaunchPermissionConfigurationOutput() DistributionConfigurationLaunchPermissionConfigurationOutput {
	return i.ToDistributionConfigurationLaunchPermissionConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationLaunchPermissionConfigurationArgs) ToDistributionConfigurationLaunchPermissionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationLaunchPermissionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationLaunchPermissionConfigurationOutput)
}

func (i DistributionConfigurationLaunchPermissionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationLaunchPermissionConfiguration] {
	return pulumix.Output[DistributionConfigurationLaunchPermissionConfiguration]{
		OutputState: i.ToDistributionConfigurationLaunchPermissionConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DistributionConfigurationLaunchPermissionConfigurationArgs) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutput() DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return i.ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationLaunchPermissionConfigurationArgs) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationLaunchPermissionConfigurationOutput).ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(ctx)
}

// DistributionConfigurationLaunchPermissionConfigurationPtrInput is an input type that accepts DistributionConfigurationLaunchPermissionConfigurationArgs, DistributionConfigurationLaunchPermissionConfigurationPtr and DistributionConfigurationLaunchPermissionConfigurationPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationLaunchPermissionConfigurationPtrInput` via:
//
//	        DistributionConfigurationLaunchPermissionConfigurationArgs{...}
//
//	or:
//
//	        nil
type DistributionConfigurationLaunchPermissionConfigurationPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationLaunchPermissionConfigurationPtrOutput() DistributionConfigurationLaunchPermissionConfigurationPtrOutput
	ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(context.Context) DistributionConfigurationLaunchPermissionConfigurationPtrOutput
}

type distributionConfigurationLaunchPermissionConfigurationPtrType DistributionConfigurationLaunchPermissionConfigurationArgs

func DistributionConfigurationLaunchPermissionConfigurationPtr(v *DistributionConfigurationLaunchPermissionConfigurationArgs) DistributionConfigurationLaunchPermissionConfigurationPtrInput {
	return (*distributionConfigurationLaunchPermissionConfigurationPtrType)(v)
}

func (*distributionConfigurationLaunchPermissionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationLaunchPermissionConfiguration)(nil)).Elem()
}

func (i *distributionConfigurationLaunchPermissionConfigurationPtrType) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutput() DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return i.ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationLaunchPermissionConfigurationPtrType) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationLaunchPermissionConfigurationPtrOutput)
}

func (i *distributionConfigurationLaunchPermissionConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationLaunchPermissionConfiguration] {
	return pulumix.Output[*DistributionConfigurationLaunchPermissionConfiguration]{
		OutputState: i.ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
type DistributionConfigurationLaunchPermissionConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationLaunchPermissionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationLaunchPermissionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationLaunchPermissionConfigurationOutput) ToDistributionConfigurationLaunchPermissionConfigurationOutput() DistributionConfigurationLaunchPermissionConfigurationOutput {
	return o
}

func (o DistributionConfigurationLaunchPermissionConfigurationOutput) ToDistributionConfigurationLaunchPermissionConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationLaunchPermissionConfigurationOutput {
	return o
}

func (o DistributionConfigurationLaunchPermissionConfigurationOutput) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutput() DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return o.ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationLaunchPermissionConfigurationOutput) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationLaunchPermissionConfiguration) *DistributionConfigurationLaunchPermissionConfiguration {
		return &v
	}).(DistributionConfigurationLaunchPermissionConfigurationPtrOutput)
}

func (o DistributionConfigurationLaunchPermissionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationLaunchPermissionConfiguration] {
	return pulumix.Output[DistributionConfigurationLaunchPermissionConfiguration]{
		OutputState: o.OutputState,
	}
}

// The ARN for an Amazon Web Services Organization that you want to share your AMI with.
func (o DistributionConfigurationLaunchPermissionConfigurationOutput) OrganizationArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchPermissionConfiguration) []string { return v.OrganizationArns }).(pulumi.StringArrayOutput)
}

// The ARN for an Organizations organizational unit (OU) that you want to share your AMI with.
func (o DistributionConfigurationLaunchPermissionConfigurationOutput) OrganizationalUnitArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchPermissionConfiguration) []string {
		return v.OrganizationalUnitArns
	}).(pulumi.StringArrayOutput)
}

// The name of the group.
func (o DistributionConfigurationLaunchPermissionConfigurationOutput) UserGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchPermissionConfiguration) []string { return v.UserGroups }).(pulumi.StringArrayOutput)
}

// The AWS account ID.
func (o DistributionConfigurationLaunchPermissionConfigurationOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchPermissionConfiguration) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

type DistributionConfigurationLaunchPermissionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationLaunchPermissionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationLaunchPermissionConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutput() DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) ToDistributionConfigurationLaunchPermissionConfigurationPtrOutputWithContext(ctx context.Context) DistributionConfigurationLaunchPermissionConfigurationPtrOutput {
	return o
}

func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationLaunchPermissionConfiguration] {
	return pulumix.Output[*DistributionConfigurationLaunchPermissionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) Elem() DistributionConfigurationLaunchPermissionConfigurationOutput {
	return o.ApplyT(func(v *DistributionConfigurationLaunchPermissionConfiguration) DistributionConfigurationLaunchPermissionConfiguration {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationLaunchPermissionConfiguration
		return ret
	}).(DistributionConfigurationLaunchPermissionConfigurationOutput)
}

// The ARN for an Amazon Web Services Organization that you want to share your AMI with.
func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) OrganizationArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationLaunchPermissionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.OrganizationArns
	}).(pulumi.StringArrayOutput)
}

// The ARN for an Organizations organizational unit (OU) that you want to share your AMI with.
func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) OrganizationalUnitArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationLaunchPermissionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnitArns
	}).(pulumi.StringArrayOutput)
}

// The name of the group.
func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) UserGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationLaunchPermissionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.UserGroups
	}).(pulumi.StringArrayOutput)
}

// The AWS account ID.
func (o DistributionConfigurationLaunchPermissionConfigurationPtrOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationLaunchPermissionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.UserIds
	}).(pulumi.StringArrayOutput)
}

// launchTemplateConfiguration settings that apply to image distribution.
type DistributionConfigurationLaunchTemplateConfiguration struct {
	// The account ID that this configuration applies to.
	AccountId *string `pulumi:"accountId"`
	// Identifies the EC2 launch template to use.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// Set the specified EC2 launch template as the default launch template for the specified account.
	SetDefaultVersion *bool `pulumi:"setDefaultVersion"`
}

// DistributionConfigurationLaunchTemplateConfigurationInput is an input type that accepts DistributionConfigurationLaunchTemplateConfigurationArgs and DistributionConfigurationLaunchTemplateConfigurationOutput values.
// You can construct a concrete instance of `DistributionConfigurationLaunchTemplateConfigurationInput` via:
//
//	DistributionConfigurationLaunchTemplateConfigurationArgs{...}
type DistributionConfigurationLaunchTemplateConfigurationInput interface {
	pulumi.Input

	ToDistributionConfigurationLaunchTemplateConfigurationOutput() DistributionConfigurationLaunchTemplateConfigurationOutput
	ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(context.Context) DistributionConfigurationLaunchTemplateConfigurationOutput
}

// launchTemplateConfiguration settings that apply to image distribution.
type DistributionConfigurationLaunchTemplateConfigurationArgs struct {
	// The account ID that this configuration applies to.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Identifies the EC2 launch template to use.
	LaunchTemplateId pulumi.StringPtrInput `pulumi:"launchTemplateId"`
	// Set the specified EC2 launch template as the default launch template for the specified account.
	SetDefaultVersion pulumi.BoolPtrInput `pulumi:"setDefaultVersion"`
}

func (DistributionConfigurationLaunchTemplateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationLaunchTemplateConfigurationArgs) ToDistributionConfigurationLaunchTemplateConfigurationOutput() DistributionConfigurationLaunchTemplateConfigurationOutput {
	return i.ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationLaunchTemplateConfigurationArgs) ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationLaunchTemplateConfigurationOutput)
}

func (i DistributionConfigurationLaunchTemplateConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationLaunchTemplateConfiguration] {
	return pulumix.Output[DistributionConfigurationLaunchTemplateConfiguration]{
		OutputState: i.ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(ctx).OutputState,
	}
}

// DistributionConfigurationLaunchTemplateConfigurationArrayInput is an input type that accepts DistributionConfigurationLaunchTemplateConfigurationArray and DistributionConfigurationLaunchTemplateConfigurationArrayOutput values.
// You can construct a concrete instance of `DistributionConfigurationLaunchTemplateConfigurationArrayInput` via:
//
//	DistributionConfigurationLaunchTemplateConfigurationArray{ DistributionConfigurationLaunchTemplateConfigurationArgs{...} }
type DistributionConfigurationLaunchTemplateConfigurationArrayInput interface {
	pulumi.Input

	ToDistributionConfigurationLaunchTemplateConfigurationArrayOutput() DistributionConfigurationLaunchTemplateConfigurationArrayOutput
	ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(context.Context) DistributionConfigurationLaunchTemplateConfigurationArrayOutput
}

type DistributionConfigurationLaunchTemplateConfigurationArray []DistributionConfigurationLaunchTemplateConfigurationInput

func (DistributionConfigurationLaunchTemplateConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationLaunchTemplateConfigurationArray) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutput() DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return i.ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(context.Background())
}

func (i DistributionConfigurationLaunchTemplateConfigurationArray) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationLaunchTemplateConfigurationArrayOutput)
}

func (i DistributionConfigurationLaunchTemplateConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]DistributionConfigurationLaunchTemplateConfiguration] {
	return pulumix.Output[[]DistributionConfigurationLaunchTemplateConfiguration]{
		OutputState: i.ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// launchTemplateConfiguration settings that apply to image distribution.
type DistributionConfigurationLaunchTemplateConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationLaunchTemplateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationLaunchTemplateConfigurationOutput) ToDistributionConfigurationLaunchTemplateConfigurationOutput() DistributionConfigurationLaunchTemplateConfigurationOutput {
	return o
}

func (o DistributionConfigurationLaunchTemplateConfigurationOutput) ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationOutput {
	return o
}

func (o DistributionConfigurationLaunchTemplateConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationLaunchTemplateConfiguration] {
	return pulumix.Output[DistributionConfigurationLaunchTemplateConfiguration]{
		OutputState: o.OutputState,
	}
}

// The account ID that this configuration applies to.
func (o DistributionConfigurationLaunchTemplateConfigurationOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchTemplateConfiguration) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Identifies the EC2 launch template to use.
func (o DistributionConfigurationLaunchTemplateConfigurationOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchTemplateConfiguration) *string { return v.LaunchTemplateId }).(pulumi.StringPtrOutput)
}

// Set the specified EC2 launch template as the default launch template for the specified account.
func (o DistributionConfigurationLaunchTemplateConfigurationOutput) SetDefaultVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchTemplateConfiguration) *bool { return v.SetDefaultVersion }).(pulumi.BoolPtrOutput)
}

type DistributionConfigurationLaunchTemplateConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationLaunchTemplateConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationLaunchTemplateConfigurationArrayOutput) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutput() DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return o
}

func (o DistributionConfigurationLaunchTemplateConfigurationArrayOutput) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return o
}

func (o DistributionConfigurationLaunchTemplateConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DistributionConfigurationLaunchTemplateConfiguration] {
	return pulumix.Output[[]DistributionConfigurationLaunchTemplateConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationLaunchTemplateConfigurationArrayOutput) Index(i pulumi.IntInput) DistributionConfigurationLaunchTemplateConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionConfigurationLaunchTemplateConfiguration {
		return vs[0].([]DistributionConfigurationLaunchTemplateConfiguration)[vs[1].(int)]
	}).(DistributionConfigurationLaunchTemplateConfigurationOutput)
}

// The destination repository for the container image.
type DistributionConfigurationTargetContainerRepository struct {
	// The repository name of target container repository.
	RepositoryName *string `pulumi:"repositoryName"`
	// The service of target container repository.
	Service *DistributionConfigurationTargetContainerRepositoryService `pulumi:"service"`
}

// DistributionConfigurationTargetContainerRepositoryInput is an input type that accepts DistributionConfigurationTargetContainerRepositoryArgs and DistributionConfigurationTargetContainerRepositoryOutput values.
// You can construct a concrete instance of `DistributionConfigurationTargetContainerRepositoryInput` via:
//
//	DistributionConfigurationTargetContainerRepositoryArgs{...}
type DistributionConfigurationTargetContainerRepositoryInput interface {
	pulumi.Input

	ToDistributionConfigurationTargetContainerRepositoryOutput() DistributionConfigurationTargetContainerRepositoryOutput
	ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(context.Context) DistributionConfigurationTargetContainerRepositoryOutput
}

// The destination repository for the container image.
type DistributionConfigurationTargetContainerRepositoryArgs struct {
	// The repository name of target container repository.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// The service of target container repository.
	Service DistributionConfigurationTargetContainerRepositoryServicePtrInput `pulumi:"service"`
}

func (DistributionConfigurationTargetContainerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryOutput() DistributionConfigurationTargetContainerRepositoryOutput {
	return i.ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(context.Background())
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationTargetContainerRepositoryOutput)
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationTargetContainerRepository] {
	return pulumix.Output[DistributionConfigurationTargetContainerRepository]{
		OutputState: i.ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return i.ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationTargetContainerRepositoryOutput).ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx)
}

// DistributionConfigurationTargetContainerRepositoryPtrInput is an input type that accepts DistributionConfigurationTargetContainerRepositoryArgs, DistributionConfigurationTargetContainerRepositoryPtr and DistributionConfigurationTargetContainerRepositoryPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationTargetContainerRepositoryPtrInput` via:
//
//	        DistributionConfigurationTargetContainerRepositoryArgs{...}
//
//	or:
//
//	        nil
type DistributionConfigurationTargetContainerRepositoryPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput
	ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput
}

type distributionConfigurationTargetContainerRepositoryPtrType DistributionConfigurationTargetContainerRepositoryArgs

func DistributionConfigurationTargetContainerRepositoryPtr(v *DistributionConfigurationTargetContainerRepositoryArgs) DistributionConfigurationTargetContainerRepositoryPtrInput {
	return (*distributionConfigurationTargetContainerRepositoryPtrType)(v)
}

func (*distributionConfigurationTargetContainerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (i *distributionConfigurationTargetContainerRepositoryPtrType) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return i.ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationTargetContainerRepositoryPtrType) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

func (i *distributionConfigurationTargetContainerRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationTargetContainerRepository] {
	return pulumix.Output[*DistributionConfigurationTargetContainerRepository]{
		OutputState: i.ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// The destination repository for the container image.
type DistributionConfigurationTargetContainerRepositoryOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationTargetContainerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryOutput() DistributionConfigurationTargetContainerRepositoryOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationTargetContainerRepository) *DistributionConfigurationTargetContainerRepository {
		return &v
	}).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[DistributionConfigurationTargetContainerRepository] {
	return pulumix.Output[DistributionConfigurationTargetContainerRepository]{
		OutputState: o.OutputState,
	}
}

// The repository name of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationTargetContainerRepository) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// The service of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryOutput) Service() DistributionConfigurationTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v DistributionConfigurationTargetContainerRepository) *DistributionConfigurationTargetContainerRepositoryService {
		return v.Service
	}).(DistributionConfigurationTargetContainerRepositoryServicePtrOutput)
}

type DistributionConfigurationTargetContainerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationTargetContainerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DistributionConfigurationTargetContainerRepository] {
	return pulumix.Output[*DistributionConfigurationTargetContainerRepository]{
		OutputState: o.OutputState,
	}
}

func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) Elem() DistributionConfigurationTargetContainerRepositoryOutput {
	return o.ApplyT(func(v *DistributionConfigurationTargetContainerRepository) DistributionConfigurationTargetContainerRepository {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationTargetContainerRepository
		return ret
	}).(DistributionConfigurationTargetContainerRepositoryOutput)
}

// The repository name of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationTargetContainerRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// The service of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) Service() DistributionConfigurationTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationTargetContainerRepository) *DistributionConfigurationTargetContainerRepositoryService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(DistributionConfigurationTargetContainerRepositoryServicePtrOutput)
}

// Settings for Image Builder to configure the ECR repository and output container images that are scanned.
type ImageEcrConfiguration struct {
	// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
	ContainerTags []string `pulumi:"containerTags"`
	// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don’t provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
	RepositoryName *string `pulumi:"repositoryName"`
}

// ImageEcrConfigurationInput is an input type that accepts ImageEcrConfigurationArgs and ImageEcrConfigurationOutput values.
// You can construct a concrete instance of `ImageEcrConfigurationInput` via:
//
//	ImageEcrConfigurationArgs{...}
type ImageEcrConfigurationInput interface {
	pulumi.Input

	ToImageEcrConfigurationOutput() ImageEcrConfigurationOutput
	ToImageEcrConfigurationOutputWithContext(context.Context) ImageEcrConfigurationOutput
}

// Settings for Image Builder to configure the ECR repository and output container images that are scanned.
type ImageEcrConfigurationArgs struct {
	// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
	ContainerTags pulumi.StringArrayInput `pulumi:"containerTags"`
	// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don’t provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
}

func (ImageEcrConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageEcrConfiguration)(nil)).Elem()
}

func (i ImageEcrConfigurationArgs) ToImageEcrConfigurationOutput() ImageEcrConfigurationOutput {
	return i.ToImageEcrConfigurationOutputWithContext(context.Background())
}

func (i ImageEcrConfigurationArgs) ToImageEcrConfigurationOutputWithContext(ctx context.Context) ImageEcrConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageEcrConfigurationOutput)
}

func (i ImageEcrConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImageEcrConfiguration] {
	return pulumix.Output[ImageEcrConfiguration]{
		OutputState: i.ToImageEcrConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ImageEcrConfigurationArgs) ToImageEcrConfigurationPtrOutput() ImageEcrConfigurationPtrOutput {
	return i.ToImageEcrConfigurationPtrOutputWithContext(context.Background())
}

func (i ImageEcrConfigurationArgs) ToImageEcrConfigurationPtrOutputWithContext(ctx context.Context) ImageEcrConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageEcrConfigurationOutput).ToImageEcrConfigurationPtrOutputWithContext(ctx)
}

// ImageEcrConfigurationPtrInput is an input type that accepts ImageEcrConfigurationArgs, ImageEcrConfigurationPtr and ImageEcrConfigurationPtrOutput values.
// You can construct a concrete instance of `ImageEcrConfigurationPtrInput` via:
//
//	        ImageEcrConfigurationArgs{...}
//
//	or:
//
//	        nil
type ImageEcrConfigurationPtrInput interface {
	pulumi.Input

	ToImageEcrConfigurationPtrOutput() ImageEcrConfigurationPtrOutput
	ToImageEcrConfigurationPtrOutputWithContext(context.Context) ImageEcrConfigurationPtrOutput
}

type imageEcrConfigurationPtrType ImageEcrConfigurationArgs

func ImageEcrConfigurationPtr(v *ImageEcrConfigurationArgs) ImageEcrConfigurationPtrInput {
	return (*imageEcrConfigurationPtrType)(v)
}

func (*imageEcrConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageEcrConfiguration)(nil)).Elem()
}

func (i *imageEcrConfigurationPtrType) ToImageEcrConfigurationPtrOutput() ImageEcrConfigurationPtrOutput {
	return i.ToImageEcrConfigurationPtrOutputWithContext(context.Background())
}

func (i *imageEcrConfigurationPtrType) ToImageEcrConfigurationPtrOutputWithContext(ctx context.Context) ImageEcrConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageEcrConfigurationPtrOutput)
}

func (i *imageEcrConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImageEcrConfiguration] {
	return pulumix.Output[*ImageEcrConfiguration]{
		OutputState: i.ToImageEcrConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Settings for Image Builder to configure the ECR repository and output container images that are scanned.
type ImageEcrConfigurationOutput struct{ *pulumi.OutputState }

func (ImageEcrConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageEcrConfiguration)(nil)).Elem()
}

func (o ImageEcrConfigurationOutput) ToImageEcrConfigurationOutput() ImageEcrConfigurationOutput {
	return o
}

func (o ImageEcrConfigurationOutput) ToImageEcrConfigurationOutputWithContext(ctx context.Context) ImageEcrConfigurationOutput {
	return o
}

func (o ImageEcrConfigurationOutput) ToImageEcrConfigurationPtrOutput() ImageEcrConfigurationPtrOutput {
	return o.ToImageEcrConfigurationPtrOutputWithContext(context.Background())
}

func (o ImageEcrConfigurationOutput) ToImageEcrConfigurationPtrOutputWithContext(ctx context.Context) ImageEcrConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageEcrConfiguration) *ImageEcrConfiguration {
		return &v
	}).(ImageEcrConfigurationPtrOutput)
}

func (o ImageEcrConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageEcrConfiguration] {
	return pulumix.Output[ImageEcrConfiguration]{
		OutputState: o.OutputState,
	}
}

// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
func (o ImageEcrConfigurationOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageEcrConfiguration) []string { return v.ContainerTags }).(pulumi.StringArrayOutput)
}

// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don’t provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
func (o ImageEcrConfigurationOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageEcrConfiguration) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

type ImageEcrConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImageEcrConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageEcrConfiguration)(nil)).Elem()
}

func (o ImageEcrConfigurationPtrOutput) ToImageEcrConfigurationPtrOutput() ImageEcrConfigurationPtrOutput {
	return o
}

func (o ImageEcrConfigurationPtrOutput) ToImageEcrConfigurationPtrOutputWithContext(ctx context.Context) ImageEcrConfigurationPtrOutput {
	return o
}

func (o ImageEcrConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageEcrConfiguration] {
	return pulumix.Output[*ImageEcrConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImageEcrConfigurationPtrOutput) Elem() ImageEcrConfigurationOutput {
	return o.ApplyT(func(v *ImageEcrConfiguration) ImageEcrConfiguration {
		if v != nil {
			return *v
		}
		var ret ImageEcrConfiguration
		return ret
	}).(ImageEcrConfigurationOutput)
}

// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
func (o ImageEcrConfigurationPtrOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageEcrConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ContainerTags
	}).(pulumi.StringArrayOutput)
}

// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don’t provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
func (o ImageEcrConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageEcrConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Settings for Image Builder to configure the ECR repository and output container images that are scanned.
type ImagePipelineEcrConfiguration struct {
	// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
	ContainerTags []string `pulumi:"containerTags"`
	// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don't provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
	RepositoryName *string `pulumi:"repositoryName"`
}

// ImagePipelineEcrConfigurationInput is an input type that accepts ImagePipelineEcrConfigurationArgs and ImagePipelineEcrConfigurationOutput values.
// You can construct a concrete instance of `ImagePipelineEcrConfigurationInput` via:
//
//	ImagePipelineEcrConfigurationArgs{...}
type ImagePipelineEcrConfigurationInput interface {
	pulumi.Input

	ToImagePipelineEcrConfigurationOutput() ImagePipelineEcrConfigurationOutput
	ToImagePipelineEcrConfigurationOutputWithContext(context.Context) ImagePipelineEcrConfigurationOutput
}

// Settings for Image Builder to configure the ECR repository and output container images that are scanned.
type ImagePipelineEcrConfigurationArgs struct {
	// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
	ContainerTags pulumi.StringArrayInput `pulumi:"containerTags"`
	// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don't provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
}

func (ImagePipelineEcrConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineEcrConfiguration)(nil)).Elem()
}

func (i ImagePipelineEcrConfigurationArgs) ToImagePipelineEcrConfigurationOutput() ImagePipelineEcrConfigurationOutput {
	return i.ToImagePipelineEcrConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineEcrConfigurationArgs) ToImagePipelineEcrConfigurationOutputWithContext(ctx context.Context) ImagePipelineEcrConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineEcrConfigurationOutput)
}

func (i ImagePipelineEcrConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineEcrConfiguration] {
	return pulumix.Output[ImagePipelineEcrConfiguration]{
		OutputState: i.ToImagePipelineEcrConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ImagePipelineEcrConfigurationArgs) ToImagePipelineEcrConfigurationPtrOutput() ImagePipelineEcrConfigurationPtrOutput {
	return i.ToImagePipelineEcrConfigurationPtrOutputWithContext(context.Background())
}

func (i ImagePipelineEcrConfigurationArgs) ToImagePipelineEcrConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineEcrConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineEcrConfigurationOutput).ToImagePipelineEcrConfigurationPtrOutputWithContext(ctx)
}

// ImagePipelineEcrConfigurationPtrInput is an input type that accepts ImagePipelineEcrConfigurationArgs, ImagePipelineEcrConfigurationPtr and ImagePipelineEcrConfigurationPtrOutput values.
// You can construct a concrete instance of `ImagePipelineEcrConfigurationPtrInput` via:
//
//	        ImagePipelineEcrConfigurationArgs{...}
//
//	or:
//
//	        nil
type ImagePipelineEcrConfigurationPtrInput interface {
	pulumi.Input

	ToImagePipelineEcrConfigurationPtrOutput() ImagePipelineEcrConfigurationPtrOutput
	ToImagePipelineEcrConfigurationPtrOutputWithContext(context.Context) ImagePipelineEcrConfigurationPtrOutput
}

type imagePipelineEcrConfigurationPtrType ImagePipelineEcrConfigurationArgs

func ImagePipelineEcrConfigurationPtr(v *ImagePipelineEcrConfigurationArgs) ImagePipelineEcrConfigurationPtrInput {
	return (*imagePipelineEcrConfigurationPtrType)(v)
}

func (*imagePipelineEcrConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineEcrConfiguration)(nil)).Elem()
}

func (i *imagePipelineEcrConfigurationPtrType) ToImagePipelineEcrConfigurationPtrOutput() ImagePipelineEcrConfigurationPtrOutput {
	return i.ToImagePipelineEcrConfigurationPtrOutputWithContext(context.Background())
}

func (i *imagePipelineEcrConfigurationPtrType) ToImagePipelineEcrConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineEcrConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineEcrConfigurationPtrOutput)
}

func (i *imagePipelineEcrConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineEcrConfiguration] {
	return pulumix.Output[*ImagePipelineEcrConfiguration]{
		OutputState: i.ToImagePipelineEcrConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Settings for Image Builder to configure the ECR repository and output container images that are scanned.
type ImagePipelineEcrConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineEcrConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineEcrConfiguration)(nil)).Elem()
}

func (o ImagePipelineEcrConfigurationOutput) ToImagePipelineEcrConfigurationOutput() ImagePipelineEcrConfigurationOutput {
	return o
}

func (o ImagePipelineEcrConfigurationOutput) ToImagePipelineEcrConfigurationOutputWithContext(ctx context.Context) ImagePipelineEcrConfigurationOutput {
	return o
}

func (o ImagePipelineEcrConfigurationOutput) ToImagePipelineEcrConfigurationPtrOutput() ImagePipelineEcrConfigurationPtrOutput {
	return o.ToImagePipelineEcrConfigurationPtrOutputWithContext(context.Background())
}

func (o ImagePipelineEcrConfigurationOutput) ToImagePipelineEcrConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineEcrConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePipelineEcrConfiguration) *ImagePipelineEcrConfiguration {
		return &v
	}).(ImagePipelineEcrConfigurationPtrOutput)
}

func (o ImagePipelineEcrConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineEcrConfiguration] {
	return pulumix.Output[ImagePipelineEcrConfiguration]{
		OutputState: o.OutputState,
	}
}

// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
func (o ImagePipelineEcrConfigurationOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImagePipelineEcrConfiguration) []string { return v.ContainerTags }).(pulumi.StringArrayOutput)
}

// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don't provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
func (o ImagePipelineEcrConfigurationOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePipelineEcrConfiguration) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

type ImagePipelineEcrConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImagePipelineEcrConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineEcrConfiguration)(nil)).Elem()
}

func (o ImagePipelineEcrConfigurationPtrOutput) ToImagePipelineEcrConfigurationPtrOutput() ImagePipelineEcrConfigurationPtrOutput {
	return o
}

func (o ImagePipelineEcrConfigurationPtrOutput) ToImagePipelineEcrConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineEcrConfigurationPtrOutput {
	return o
}

func (o ImagePipelineEcrConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineEcrConfiguration] {
	return pulumix.Output[*ImagePipelineEcrConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineEcrConfigurationPtrOutput) Elem() ImagePipelineEcrConfigurationOutput {
	return o.ApplyT(func(v *ImagePipelineEcrConfiguration) ImagePipelineEcrConfiguration {
		if v != nil {
			return *v
		}
		var ret ImagePipelineEcrConfiguration
		return ret
	}).(ImagePipelineEcrConfigurationOutput)
}

// Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
func (o ImagePipelineEcrConfigurationPtrOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImagePipelineEcrConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ContainerTags
	}).(pulumi.StringArrayOutput)
}

// The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don't provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
func (o ImagePipelineEcrConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePipelineEcrConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
type ImagePipelineImageScanningConfiguration struct {
	// Contains ECR settings for vulnerability scans.
	EcrConfiguration *ImagePipelineEcrConfiguration `pulumi:"ecrConfiguration"`
	// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
	ImageScanningEnabled *bool `pulumi:"imageScanningEnabled"`
}

// ImagePipelineImageScanningConfigurationInput is an input type that accepts ImagePipelineImageScanningConfigurationArgs and ImagePipelineImageScanningConfigurationOutput values.
// You can construct a concrete instance of `ImagePipelineImageScanningConfigurationInput` via:
//
//	ImagePipelineImageScanningConfigurationArgs{...}
type ImagePipelineImageScanningConfigurationInput interface {
	pulumi.Input

	ToImagePipelineImageScanningConfigurationOutput() ImagePipelineImageScanningConfigurationOutput
	ToImagePipelineImageScanningConfigurationOutputWithContext(context.Context) ImagePipelineImageScanningConfigurationOutput
}

// Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
type ImagePipelineImageScanningConfigurationArgs struct {
	// Contains ECR settings for vulnerability scans.
	EcrConfiguration ImagePipelineEcrConfigurationPtrInput `pulumi:"ecrConfiguration"`
	// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
	ImageScanningEnabled pulumi.BoolPtrInput `pulumi:"imageScanningEnabled"`
}

func (ImagePipelineImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (i ImagePipelineImageScanningConfigurationArgs) ToImagePipelineImageScanningConfigurationOutput() ImagePipelineImageScanningConfigurationOutput {
	return i.ToImagePipelineImageScanningConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineImageScanningConfigurationArgs) ToImagePipelineImageScanningConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageScanningConfigurationOutput)
}

func (i ImagePipelineImageScanningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineImageScanningConfiguration] {
	return pulumix.Output[ImagePipelineImageScanningConfiguration]{
		OutputState: i.ToImagePipelineImageScanningConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ImagePipelineImageScanningConfigurationArgs) ToImagePipelineImageScanningConfigurationPtrOutput() ImagePipelineImageScanningConfigurationPtrOutput {
	return i.ToImagePipelineImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i ImagePipelineImageScanningConfigurationArgs) ToImagePipelineImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageScanningConfigurationOutput).ToImagePipelineImageScanningConfigurationPtrOutputWithContext(ctx)
}

// ImagePipelineImageScanningConfigurationPtrInput is an input type that accepts ImagePipelineImageScanningConfigurationArgs, ImagePipelineImageScanningConfigurationPtr and ImagePipelineImageScanningConfigurationPtrOutput values.
// You can construct a concrete instance of `ImagePipelineImageScanningConfigurationPtrInput` via:
//
//	        ImagePipelineImageScanningConfigurationArgs{...}
//
//	or:
//
//	        nil
type ImagePipelineImageScanningConfigurationPtrInput interface {
	pulumi.Input

	ToImagePipelineImageScanningConfigurationPtrOutput() ImagePipelineImageScanningConfigurationPtrOutput
	ToImagePipelineImageScanningConfigurationPtrOutputWithContext(context.Context) ImagePipelineImageScanningConfigurationPtrOutput
}

type imagePipelineImageScanningConfigurationPtrType ImagePipelineImageScanningConfigurationArgs

func ImagePipelineImageScanningConfigurationPtr(v *ImagePipelineImageScanningConfigurationArgs) ImagePipelineImageScanningConfigurationPtrInput {
	return (*imagePipelineImageScanningConfigurationPtrType)(v)
}

func (*imagePipelineImageScanningConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (i *imagePipelineImageScanningConfigurationPtrType) ToImagePipelineImageScanningConfigurationPtrOutput() ImagePipelineImageScanningConfigurationPtrOutput {
	return i.ToImagePipelineImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i *imagePipelineImageScanningConfigurationPtrType) ToImagePipelineImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageScanningConfigurationPtrOutput)
}

func (i *imagePipelineImageScanningConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineImageScanningConfiguration] {
	return pulumix.Output[*ImagePipelineImageScanningConfiguration]{
		OutputState: i.ToImagePipelineImageScanningConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
type ImagePipelineImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageScanningConfigurationOutput) ToImagePipelineImageScanningConfigurationOutput() ImagePipelineImageScanningConfigurationOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationOutput) ToImagePipelineImageScanningConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationOutput) ToImagePipelineImageScanningConfigurationPtrOutput() ImagePipelineImageScanningConfigurationPtrOutput {
	return o.ToImagePipelineImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (o ImagePipelineImageScanningConfigurationOutput) ToImagePipelineImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePipelineImageScanningConfiguration) *ImagePipelineImageScanningConfiguration {
		return &v
	}).(ImagePipelineImageScanningConfigurationPtrOutput)
}

func (o ImagePipelineImageScanningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineImageScanningConfiguration] {
	return pulumix.Output[ImagePipelineImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

// Contains ECR settings for vulnerability scans.
func (o ImagePipelineImageScanningConfigurationOutput) EcrConfiguration() ImagePipelineEcrConfigurationPtrOutput {
	return o.ApplyT(func(v ImagePipelineImageScanningConfiguration) *ImagePipelineEcrConfiguration {
		return v.EcrConfiguration
	}).(ImagePipelineEcrConfigurationPtrOutput)
}

// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
func (o ImagePipelineImageScanningConfigurationOutput) ImageScanningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImagePipelineImageScanningConfiguration) *bool { return v.ImageScanningEnabled }).(pulumi.BoolPtrOutput)
}

type ImagePipelineImageScanningConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageScanningConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineImageScanningConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageScanningConfigurationPtrOutput) ToImagePipelineImageScanningConfigurationPtrOutput() ImagePipelineImageScanningConfigurationPtrOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationPtrOutput) ToImagePipelineImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageScanningConfigurationPtrOutput {
	return o
}

func (o ImagePipelineImageScanningConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineImageScanningConfiguration] {
	return pulumix.Output[*ImagePipelineImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineImageScanningConfigurationPtrOutput) Elem() ImagePipelineImageScanningConfigurationOutput {
	return o.ApplyT(func(v *ImagePipelineImageScanningConfiguration) ImagePipelineImageScanningConfiguration {
		if v != nil {
			return *v
		}
		var ret ImagePipelineImageScanningConfiguration
		return ret
	}).(ImagePipelineImageScanningConfigurationOutput)
}

// Contains ECR settings for vulnerability scans.
func (o ImagePipelineImageScanningConfigurationPtrOutput) EcrConfiguration() ImagePipelineEcrConfigurationPtrOutput {
	return o.ApplyT(func(v *ImagePipelineImageScanningConfiguration) *ImagePipelineEcrConfiguration {
		if v == nil {
			return nil
		}
		return v.EcrConfiguration
	}).(ImagePipelineEcrConfigurationPtrOutput)
}

// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
func (o ImagePipelineImageScanningConfigurationPtrOutput) ImageScanningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImagePipelineImageScanningConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ImageScanningEnabled
	}).(pulumi.BoolPtrOutput)
}

// Image tests configuration.
type ImagePipelineImageTestsConfiguration struct {
	// Defines if tests should be executed when building this image.
	ImageTestsEnabled *bool `pulumi:"imageTestsEnabled"`
	// The maximum time in minutes that tests are permitted to run.
	TimeoutMinutes *int `pulumi:"timeoutMinutes"`
}

// ImagePipelineImageTestsConfigurationInput is an input type that accepts ImagePipelineImageTestsConfigurationArgs and ImagePipelineImageTestsConfigurationOutput values.
// You can construct a concrete instance of `ImagePipelineImageTestsConfigurationInput` via:
//
//	ImagePipelineImageTestsConfigurationArgs{...}
type ImagePipelineImageTestsConfigurationInput interface {
	pulumi.Input

	ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput
	ToImagePipelineImageTestsConfigurationOutputWithContext(context.Context) ImagePipelineImageTestsConfigurationOutput
}

// Image tests configuration.
type ImagePipelineImageTestsConfigurationArgs struct {
	// Defines if tests should be executed when building this image.
	ImageTestsEnabled pulumi.BoolPtrInput `pulumi:"imageTestsEnabled"`
	// The maximum time in minutes that tests are permitted to run.
	TimeoutMinutes pulumi.IntPtrInput `pulumi:"timeoutMinutes"`
}

func (ImagePipelineImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput {
	return i.ToImagePipelineImageTestsConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageTestsConfigurationOutput)
}

func (i ImagePipelineImageTestsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineImageTestsConfiguration] {
	return pulumix.Output[ImagePipelineImageTestsConfiguration]{
		OutputState: i.ToImagePipelineImageTestsConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return i.ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageTestsConfigurationOutput).ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx)
}

// ImagePipelineImageTestsConfigurationPtrInput is an input type that accepts ImagePipelineImageTestsConfigurationArgs, ImagePipelineImageTestsConfigurationPtr and ImagePipelineImageTestsConfigurationPtrOutput values.
// You can construct a concrete instance of `ImagePipelineImageTestsConfigurationPtrInput` via:
//
//	        ImagePipelineImageTestsConfigurationArgs{...}
//
//	or:
//
//	        nil
type ImagePipelineImageTestsConfigurationPtrInput interface {
	pulumi.Input

	ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput
	ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Context) ImagePipelineImageTestsConfigurationPtrOutput
}

type imagePipelineImageTestsConfigurationPtrType ImagePipelineImageTestsConfigurationArgs

func ImagePipelineImageTestsConfigurationPtr(v *ImagePipelineImageTestsConfigurationArgs) ImagePipelineImageTestsConfigurationPtrInput {
	return (*imagePipelineImageTestsConfigurationPtrType)(v)
}

func (*imagePipelineImageTestsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (i *imagePipelineImageTestsConfigurationPtrType) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return i.ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i *imagePipelineImageTestsConfigurationPtrType) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageTestsConfigurationPtrOutput)
}

func (i *imagePipelineImageTestsConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineImageTestsConfiguration] {
	return pulumix.Output[*ImagePipelineImageTestsConfiguration]{
		OutputState: i.ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Image tests configuration.
type ImagePipelineImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return o.ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePipelineImageTestsConfiguration) *ImagePipelineImageTestsConfiguration {
		return &v
	}).(ImagePipelineImageTestsConfigurationPtrOutput)
}

func (o ImagePipelineImageTestsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineImageTestsConfiguration] {
	return pulumix.Output[ImagePipelineImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Defines if tests should be executed when building this image.
func (o ImagePipelineImageTestsConfigurationOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImagePipelineImageTestsConfiguration) *bool { return v.ImageTestsEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum time in minutes that tests are permitted to run.
func (o ImagePipelineImageTestsConfigurationOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImagePipelineImageTestsConfiguration) *int { return v.TimeoutMinutes }).(pulumi.IntPtrOutput)
}

type ImagePipelineImageTestsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageTestsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageTestsConfigurationPtrOutput) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationPtrOutput) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineImageTestsConfiguration] {
	return pulumix.Output[*ImagePipelineImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineImageTestsConfigurationPtrOutput) Elem() ImagePipelineImageTestsConfigurationOutput {
	return o.ApplyT(func(v *ImagePipelineImageTestsConfiguration) ImagePipelineImageTestsConfiguration {
		if v != nil {
			return *v
		}
		var ret ImagePipelineImageTestsConfiguration
		return ret
	}).(ImagePipelineImageTestsConfigurationOutput)
}

// Defines if tests should be executed when building this image.
func (o ImagePipelineImageTestsConfigurationPtrOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImagePipelineImageTestsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ImageTestsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The maximum time in minutes that tests are permitted to run.
func (o ImagePipelineImageTestsConfigurationPtrOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImagePipelineImageTestsConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutMinutes
	}).(pulumi.IntPtrOutput)
}

// The schedule of the image pipeline.
type ImagePipelineSchedule struct {
	// The condition configures when the pipeline should trigger a new image build.
	PipelineExecutionStartCondition *ImagePipelineSchedulePipelineExecutionStartCondition `pulumi:"pipelineExecutionStartCondition"`
	// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
	ScheduleExpression *string `pulumi:"scheduleExpression"`
}

// ImagePipelineScheduleInput is an input type that accepts ImagePipelineScheduleArgs and ImagePipelineScheduleOutput values.
// You can construct a concrete instance of `ImagePipelineScheduleInput` via:
//
//	ImagePipelineScheduleArgs{...}
type ImagePipelineScheduleInput interface {
	pulumi.Input

	ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput
	ToImagePipelineScheduleOutputWithContext(context.Context) ImagePipelineScheduleOutput
}

// The schedule of the image pipeline.
type ImagePipelineScheduleArgs struct {
	// The condition configures when the pipeline should trigger a new image build.
	PipelineExecutionStartCondition ImagePipelineSchedulePipelineExecutionStartConditionPtrInput `pulumi:"pipelineExecutionStartCondition"`
	// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
	ScheduleExpression pulumi.StringPtrInput `pulumi:"scheduleExpression"`
}

func (ImagePipelineScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineSchedule)(nil)).Elem()
}

func (i ImagePipelineScheduleArgs) ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput {
	return i.ToImagePipelineScheduleOutputWithContext(context.Background())
}

func (i ImagePipelineScheduleArgs) ToImagePipelineScheduleOutputWithContext(ctx context.Context) ImagePipelineScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineScheduleOutput)
}

func (i ImagePipelineScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineSchedule] {
	return pulumix.Output[ImagePipelineSchedule]{
		OutputState: i.ToImagePipelineScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i ImagePipelineScheduleArgs) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return i.ToImagePipelineSchedulePtrOutputWithContext(context.Background())
}

func (i ImagePipelineScheduleArgs) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineScheduleOutput).ToImagePipelineSchedulePtrOutputWithContext(ctx)
}

// ImagePipelineSchedulePtrInput is an input type that accepts ImagePipelineScheduleArgs, ImagePipelineSchedulePtr and ImagePipelineSchedulePtrOutput values.
// You can construct a concrete instance of `ImagePipelineSchedulePtrInput` via:
//
//	        ImagePipelineScheduleArgs{...}
//
//	or:
//
//	        nil
type ImagePipelineSchedulePtrInput interface {
	pulumi.Input

	ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput
	ToImagePipelineSchedulePtrOutputWithContext(context.Context) ImagePipelineSchedulePtrOutput
}

type imagePipelineSchedulePtrType ImagePipelineScheduleArgs

func ImagePipelineSchedulePtr(v *ImagePipelineScheduleArgs) ImagePipelineSchedulePtrInput {
	return (*imagePipelineSchedulePtrType)(v)
}

func (*imagePipelineSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineSchedule)(nil)).Elem()
}

func (i *imagePipelineSchedulePtrType) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return i.ToImagePipelineSchedulePtrOutputWithContext(context.Background())
}

func (i *imagePipelineSchedulePtrType) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineSchedulePtrOutput)
}

func (i *imagePipelineSchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineSchedule] {
	return pulumix.Output[*ImagePipelineSchedule]{
		OutputState: i.ToImagePipelineSchedulePtrOutputWithContext(ctx).OutputState,
	}
}

// The schedule of the image pipeline.
type ImagePipelineScheduleOutput struct{ *pulumi.OutputState }

func (ImagePipelineScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineSchedule)(nil)).Elem()
}

func (o ImagePipelineScheduleOutput) ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput {
	return o
}

func (o ImagePipelineScheduleOutput) ToImagePipelineScheduleOutputWithContext(ctx context.Context) ImagePipelineScheduleOutput {
	return o
}

func (o ImagePipelineScheduleOutput) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return o.ToImagePipelineSchedulePtrOutputWithContext(context.Background())
}

func (o ImagePipelineScheduleOutput) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePipelineSchedule) *ImagePipelineSchedule {
		return &v
	}).(ImagePipelineSchedulePtrOutput)
}

func (o ImagePipelineScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineSchedule] {
	return pulumix.Output[ImagePipelineSchedule]{
		OutputState: o.OutputState,
	}
}

// The condition configures when the pipeline should trigger a new image build.
func (o ImagePipelineScheduleOutput) PipelineExecutionStartCondition() ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput {
	return o.ApplyT(func(v ImagePipelineSchedule) *ImagePipelineSchedulePipelineExecutionStartCondition {
		return v.PipelineExecutionStartCondition
	}).(ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput)
}

// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
func (o ImagePipelineScheduleOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePipelineSchedule) *string { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

type ImagePipelineSchedulePtrOutput struct{ *pulumi.OutputState }

func (ImagePipelineSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineSchedule)(nil)).Elem()
}

func (o ImagePipelineSchedulePtrOutput) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return o
}

func (o ImagePipelineSchedulePtrOutput) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return o
}

func (o ImagePipelineSchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImagePipelineSchedule] {
	return pulumix.Output[*ImagePipelineSchedule]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineSchedulePtrOutput) Elem() ImagePipelineScheduleOutput {
	return o.ApplyT(func(v *ImagePipelineSchedule) ImagePipelineSchedule {
		if v != nil {
			return *v
		}
		var ret ImagePipelineSchedule
		return ret
	}).(ImagePipelineScheduleOutput)
}

// The condition configures when the pipeline should trigger a new image build.
func (o ImagePipelineSchedulePtrOutput) PipelineExecutionStartCondition() ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput {
	return o.ApplyT(func(v *ImagePipelineSchedule) *ImagePipelineSchedulePipelineExecutionStartCondition {
		if v == nil {
			return nil
		}
		return v.PipelineExecutionStartCondition
	}).(ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput)
}

// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
func (o ImagePipelineSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePipelineSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

// The workflow configuration of the image
type ImagePipelineWorkflowConfiguration struct {
	// Define execution decision in case of workflow failure
	OnFailure *ImagePipelineWorkflowConfigurationOnFailure `pulumi:"onFailure"`
	// The parallel group name
	ParallelGroup *string `pulumi:"parallelGroup"`
	// The parameters associated with the workflow
	Parameters []ImagePipelineWorkflowParameter `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the workflow
	WorkflowArn *string `pulumi:"workflowArn"`
}

// ImagePipelineWorkflowConfigurationInput is an input type that accepts ImagePipelineWorkflowConfigurationArgs and ImagePipelineWorkflowConfigurationOutput values.
// You can construct a concrete instance of `ImagePipelineWorkflowConfigurationInput` via:
//
//	ImagePipelineWorkflowConfigurationArgs{...}
type ImagePipelineWorkflowConfigurationInput interface {
	pulumi.Input

	ToImagePipelineWorkflowConfigurationOutput() ImagePipelineWorkflowConfigurationOutput
	ToImagePipelineWorkflowConfigurationOutputWithContext(context.Context) ImagePipelineWorkflowConfigurationOutput
}

// The workflow configuration of the image
type ImagePipelineWorkflowConfigurationArgs struct {
	// Define execution decision in case of workflow failure
	OnFailure ImagePipelineWorkflowConfigurationOnFailurePtrInput `pulumi:"onFailure"`
	// The parallel group name
	ParallelGroup pulumi.StringPtrInput `pulumi:"parallelGroup"`
	// The parameters associated with the workflow
	Parameters ImagePipelineWorkflowParameterArrayInput `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the workflow
	WorkflowArn pulumi.StringPtrInput `pulumi:"workflowArn"`
}

func (ImagePipelineWorkflowConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineWorkflowConfiguration)(nil)).Elem()
}

func (i ImagePipelineWorkflowConfigurationArgs) ToImagePipelineWorkflowConfigurationOutput() ImagePipelineWorkflowConfigurationOutput {
	return i.ToImagePipelineWorkflowConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineWorkflowConfigurationArgs) ToImagePipelineWorkflowConfigurationOutputWithContext(ctx context.Context) ImagePipelineWorkflowConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineWorkflowConfigurationOutput)
}

func (i ImagePipelineWorkflowConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineWorkflowConfiguration] {
	return pulumix.Output[ImagePipelineWorkflowConfiguration]{
		OutputState: i.ToImagePipelineWorkflowConfigurationOutputWithContext(ctx).OutputState,
	}
}

// ImagePipelineWorkflowConfigurationArrayInput is an input type that accepts ImagePipelineWorkflowConfigurationArray and ImagePipelineWorkflowConfigurationArrayOutput values.
// You can construct a concrete instance of `ImagePipelineWorkflowConfigurationArrayInput` via:
//
//	ImagePipelineWorkflowConfigurationArray{ ImagePipelineWorkflowConfigurationArgs{...} }
type ImagePipelineWorkflowConfigurationArrayInput interface {
	pulumi.Input

	ToImagePipelineWorkflowConfigurationArrayOutput() ImagePipelineWorkflowConfigurationArrayOutput
	ToImagePipelineWorkflowConfigurationArrayOutputWithContext(context.Context) ImagePipelineWorkflowConfigurationArrayOutput
}

type ImagePipelineWorkflowConfigurationArray []ImagePipelineWorkflowConfigurationInput

func (ImagePipelineWorkflowConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePipelineWorkflowConfiguration)(nil)).Elem()
}

func (i ImagePipelineWorkflowConfigurationArray) ToImagePipelineWorkflowConfigurationArrayOutput() ImagePipelineWorkflowConfigurationArrayOutput {
	return i.ToImagePipelineWorkflowConfigurationArrayOutputWithContext(context.Background())
}

func (i ImagePipelineWorkflowConfigurationArray) ToImagePipelineWorkflowConfigurationArrayOutputWithContext(ctx context.Context) ImagePipelineWorkflowConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineWorkflowConfigurationArrayOutput)
}

func (i ImagePipelineWorkflowConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]ImagePipelineWorkflowConfiguration] {
	return pulumix.Output[[]ImagePipelineWorkflowConfiguration]{
		OutputState: i.ToImagePipelineWorkflowConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// The workflow configuration of the image
type ImagePipelineWorkflowConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineWorkflowConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineWorkflowConfiguration)(nil)).Elem()
}

func (o ImagePipelineWorkflowConfigurationOutput) ToImagePipelineWorkflowConfigurationOutput() ImagePipelineWorkflowConfigurationOutput {
	return o
}

func (o ImagePipelineWorkflowConfigurationOutput) ToImagePipelineWorkflowConfigurationOutputWithContext(ctx context.Context) ImagePipelineWorkflowConfigurationOutput {
	return o
}

func (o ImagePipelineWorkflowConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineWorkflowConfiguration] {
	return pulumix.Output[ImagePipelineWorkflowConfiguration]{
		OutputState: o.OutputState,
	}
}

// Define execution decision in case of workflow failure
func (o ImagePipelineWorkflowConfigurationOutput) OnFailure() ImagePipelineWorkflowConfigurationOnFailurePtrOutput {
	return o.ApplyT(func(v ImagePipelineWorkflowConfiguration) *ImagePipelineWorkflowConfigurationOnFailure {
		return v.OnFailure
	}).(ImagePipelineWorkflowConfigurationOnFailurePtrOutput)
}

// The parallel group name
func (o ImagePipelineWorkflowConfigurationOutput) ParallelGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePipelineWorkflowConfiguration) *string { return v.ParallelGroup }).(pulumi.StringPtrOutput)
}

// The parameters associated with the workflow
func (o ImagePipelineWorkflowConfigurationOutput) Parameters() ImagePipelineWorkflowParameterArrayOutput {
	return o.ApplyT(func(v ImagePipelineWorkflowConfiguration) []ImagePipelineWorkflowParameter { return v.Parameters }).(ImagePipelineWorkflowParameterArrayOutput)
}

// The Amazon Resource Name (ARN) of the workflow
func (o ImagePipelineWorkflowConfigurationOutput) WorkflowArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePipelineWorkflowConfiguration) *string { return v.WorkflowArn }).(pulumi.StringPtrOutput)
}

type ImagePipelineWorkflowConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ImagePipelineWorkflowConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePipelineWorkflowConfiguration)(nil)).Elem()
}

func (o ImagePipelineWorkflowConfigurationArrayOutput) ToImagePipelineWorkflowConfigurationArrayOutput() ImagePipelineWorkflowConfigurationArrayOutput {
	return o
}

func (o ImagePipelineWorkflowConfigurationArrayOutput) ToImagePipelineWorkflowConfigurationArrayOutputWithContext(ctx context.Context) ImagePipelineWorkflowConfigurationArrayOutput {
	return o
}

func (o ImagePipelineWorkflowConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImagePipelineWorkflowConfiguration] {
	return pulumix.Output[[]ImagePipelineWorkflowConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineWorkflowConfigurationArrayOutput) Index(i pulumi.IntInput) ImagePipelineWorkflowConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagePipelineWorkflowConfiguration {
		return vs[0].([]ImagePipelineWorkflowConfiguration)[vs[1].(int)]
	}).(ImagePipelineWorkflowConfigurationOutput)
}

// A parameter associated with the workflow
type ImagePipelineWorkflowParameter struct {
	Name  *string  `pulumi:"name"`
	Value []string `pulumi:"value"`
}

// ImagePipelineWorkflowParameterInput is an input type that accepts ImagePipelineWorkflowParameterArgs and ImagePipelineWorkflowParameterOutput values.
// You can construct a concrete instance of `ImagePipelineWorkflowParameterInput` via:
//
//	ImagePipelineWorkflowParameterArgs{...}
type ImagePipelineWorkflowParameterInput interface {
	pulumi.Input

	ToImagePipelineWorkflowParameterOutput() ImagePipelineWorkflowParameterOutput
	ToImagePipelineWorkflowParameterOutputWithContext(context.Context) ImagePipelineWorkflowParameterOutput
}

// A parameter associated with the workflow
type ImagePipelineWorkflowParameterArgs struct {
	Name  pulumi.StringPtrInput   `pulumi:"name"`
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ImagePipelineWorkflowParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineWorkflowParameter)(nil)).Elem()
}

func (i ImagePipelineWorkflowParameterArgs) ToImagePipelineWorkflowParameterOutput() ImagePipelineWorkflowParameterOutput {
	return i.ToImagePipelineWorkflowParameterOutputWithContext(context.Background())
}

func (i ImagePipelineWorkflowParameterArgs) ToImagePipelineWorkflowParameterOutputWithContext(ctx context.Context) ImagePipelineWorkflowParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineWorkflowParameterOutput)
}

func (i ImagePipelineWorkflowParameterArgs) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineWorkflowParameter] {
	return pulumix.Output[ImagePipelineWorkflowParameter]{
		OutputState: i.ToImagePipelineWorkflowParameterOutputWithContext(ctx).OutputState,
	}
}

// ImagePipelineWorkflowParameterArrayInput is an input type that accepts ImagePipelineWorkflowParameterArray and ImagePipelineWorkflowParameterArrayOutput values.
// You can construct a concrete instance of `ImagePipelineWorkflowParameterArrayInput` via:
//
//	ImagePipelineWorkflowParameterArray{ ImagePipelineWorkflowParameterArgs{...} }
type ImagePipelineWorkflowParameterArrayInput interface {
	pulumi.Input

	ToImagePipelineWorkflowParameterArrayOutput() ImagePipelineWorkflowParameterArrayOutput
	ToImagePipelineWorkflowParameterArrayOutputWithContext(context.Context) ImagePipelineWorkflowParameterArrayOutput
}

type ImagePipelineWorkflowParameterArray []ImagePipelineWorkflowParameterInput

func (ImagePipelineWorkflowParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePipelineWorkflowParameter)(nil)).Elem()
}

func (i ImagePipelineWorkflowParameterArray) ToImagePipelineWorkflowParameterArrayOutput() ImagePipelineWorkflowParameterArrayOutput {
	return i.ToImagePipelineWorkflowParameterArrayOutputWithContext(context.Background())
}

func (i ImagePipelineWorkflowParameterArray) ToImagePipelineWorkflowParameterArrayOutputWithContext(ctx context.Context) ImagePipelineWorkflowParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineWorkflowParameterArrayOutput)
}

func (i ImagePipelineWorkflowParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]ImagePipelineWorkflowParameter] {
	return pulumix.Output[[]ImagePipelineWorkflowParameter]{
		OutputState: i.ToImagePipelineWorkflowParameterArrayOutputWithContext(ctx).OutputState,
	}
}

// A parameter associated with the workflow
type ImagePipelineWorkflowParameterOutput struct{ *pulumi.OutputState }

func (ImagePipelineWorkflowParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineWorkflowParameter)(nil)).Elem()
}

func (o ImagePipelineWorkflowParameterOutput) ToImagePipelineWorkflowParameterOutput() ImagePipelineWorkflowParameterOutput {
	return o
}

func (o ImagePipelineWorkflowParameterOutput) ToImagePipelineWorkflowParameterOutputWithContext(ctx context.Context) ImagePipelineWorkflowParameterOutput {
	return o
}

func (o ImagePipelineWorkflowParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ImagePipelineWorkflowParameter] {
	return pulumix.Output[ImagePipelineWorkflowParameter]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineWorkflowParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePipelineWorkflowParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ImagePipelineWorkflowParameterOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImagePipelineWorkflowParameter) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ImagePipelineWorkflowParameterArrayOutput struct{ *pulumi.OutputState }

func (ImagePipelineWorkflowParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePipelineWorkflowParameter)(nil)).Elem()
}

func (o ImagePipelineWorkflowParameterArrayOutput) ToImagePipelineWorkflowParameterArrayOutput() ImagePipelineWorkflowParameterArrayOutput {
	return o
}

func (o ImagePipelineWorkflowParameterArrayOutput) ToImagePipelineWorkflowParameterArrayOutputWithContext(ctx context.Context) ImagePipelineWorkflowParameterArrayOutput {
	return o
}

func (o ImagePipelineWorkflowParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImagePipelineWorkflowParameter] {
	return pulumix.Output[[]ImagePipelineWorkflowParameter]{
		OutputState: o.OutputState,
	}
}

func (o ImagePipelineWorkflowParameterArrayOutput) Index(i pulumi.IntInput) ImagePipelineWorkflowParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagePipelineWorkflowParameter {
		return vs[0].([]ImagePipelineWorkflowParameter)[vs[1].(int)]
	}).(ImagePipelineWorkflowParameterOutput)
}

// Specify additional settings and launch scripts for your build instances.
type ImageRecipeAdditionalInstanceConfiguration struct {
	// Contains settings for the SSM agent on your build instance.
	SystemsManagerAgent *ImageRecipeSystemsManagerAgent `pulumi:"systemsManagerAgent"`
	// Use this property to provide commands or a command script to run when you launch your build instance.
	UserDataOverride *string `pulumi:"userDataOverride"`
}

// ImageRecipeAdditionalInstanceConfigurationInput is an input type that accepts ImageRecipeAdditionalInstanceConfigurationArgs and ImageRecipeAdditionalInstanceConfigurationOutput values.
// You can construct a concrete instance of `ImageRecipeAdditionalInstanceConfigurationInput` via:
//
//	ImageRecipeAdditionalInstanceConfigurationArgs{...}
type ImageRecipeAdditionalInstanceConfigurationInput interface {
	pulumi.Input

	ToImageRecipeAdditionalInstanceConfigurationOutput() ImageRecipeAdditionalInstanceConfigurationOutput
	ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(context.Context) ImageRecipeAdditionalInstanceConfigurationOutput
}

// Specify additional settings and launch scripts for your build instances.
type ImageRecipeAdditionalInstanceConfigurationArgs struct {
	// Contains settings for the SSM agent on your build instance.
	SystemsManagerAgent ImageRecipeSystemsManagerAgentPtrInput `pulumi:"systemsManagerAgent"`
	// Use this property to provide commands or a command script to run when you launch your build instance.
	UserDataOverride pulumi.StringPtrInput `pulumi:"userDataOverride"`
}

func (ImageRecipeAdditionalInstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationOutput() ImageRecipeAdditionalInstanceConfigurationOutput {
	return i.ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(context.Background())
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeAdditionalInstanceConfigurationOutput)
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeAdditionalInstanceConfiguration] {
	return pulumix.Output[ImageRecipeAdditionalInstanceConfiguration]{
		OutputState: i.ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return i.ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeAdditionalInstanceConfigurationOutput).ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx)
}

// ImageRecipeAdditionalInstanceConfigurationPtrInput is an input type that accepts ImageRecipeAdditionalInstanceConfigurationArgs, ImageRecipeAdditionalInstanceConfigurationPtr and ImageRecipeAdditionalInstanceConfigurationPtrOutput values.
// You can construct a concrete instance of `ImageRecipeAdditionalInstanceConfigurationPtrInput` via:
//
//	        ImageRecipeAdditionalInstanceConfigurationArgs{...}
//
//	or:
//
//	        nil
type ImageRecipeAdditionalInstanceConfigurationPtrInput interface {
	pulumi.Input

	ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput
	ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput
}

type imageRecipeAdditionalInstanceConfigurationPtrType ImageRecipeAdditionalInstanceConfigurationArgs

func ImageRecipeAdditionalInstanceConfigurationPtr(v *ImageRecipeAdditionalInstanceConfigurationArgs) ImageRecipeAdditionalInstanceConfigurationPtrInput {
	return (*imageRecipeAdditionalInstanceConfigurationPtrType)(v)
}

func (*imageRecipeAdditionalInstanceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (i *imageRecipeAdditionalInstanceConfigurationPtrType) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return i.ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i *imageRecipeAdditionalInstanceConfigurationPtrType) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeAdditionalInstanceConfigurationPtrOutput)
}

func (i *imageRecipeAdditionalInstanceConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeAdditionalInstanceConfiguration] {
	return pulumix.Output[*ImageRecipeAdditionalInstanceConfiguration]{
		OutputState: i.ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Specify additional settings and launch scripts for your build instances.
type ImageRecipeAdditionalInstanceConfigurationOutput struct{ *pulumi.OutputState }

func (ImageRecipeAdditionalInstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationOutput() ImageRecipeAdditionalInstanceConfigurationOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o.ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRecipeAdditionalInstanceConfiguration) *ImageRecipeAdditionalInstanceConfiguration {
		return &v
	}).(ImageRecipeAdditionalInstanceConfigurationPtrOutput)
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeAdditionalInstanceConfiguration] {
	return pulumix.Output[ImageRecipeAdditionalInstanceConfiguration]{
		OutputState: o.OutputState,
	}
}

// Contains settings for the SSM agent on your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationOutput) SystemsManagerAgent() ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ApplyT(func(v ImageRecipeAdditionalInstanceConfiguration) *ImageRecipeSystemsManagerAgent {
		return v.SystemsManagerAgent
	}).(ImageRecipeSystemsManagerAgentPtrOutput)
}

// Use this property to provide commands or a command script to run when you launch your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationOutput) UserDataOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeAdditionalInstanceConfiguration) *string { return v.UserDataOverride }).(pulumi.StringPtrOutput)
}

type ImageRecipeAdditionalInstanceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImageRecipeAdditionalInstanceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeAdditionalInstanceConfiguration] {
	return pulumix.Output[*ImageRecipeAdditionalInstanceConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) Elem() ImageRecipeAdditionalInstanceConfigurationOutput {
	return o.ApplyT(func(v *ImageRecipeAdditionalInstanceConfiguration) ImageRecipeAdditionalInstanceConfiguration {
		if v != nil {
			return *v
		}
		var ret ImageRecipeAdditionalInstanceConfiguration
		return ret
	}).(ImageRecipeAdditionalInstanceConfigurationOutput)
}

// Contains settings for the SSM agent on your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) SystemsManagerAgent() ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ApplyT(func(v *ImageRecipeAdditionalInstanceConfiguration) *ImageRecipeSystemsManagerAgent {
		if v == nil {
			return nil
		}
		return v.SystemsManagerAgent
	}).(ImageRecipeSystemsManagerAgentPtrOutput)
}

// Use this property to provide commands or a command script to run when you launch your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) UserDataOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipeAdditionalInstanceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.UserDataOverride
	}).(pulumi.StringPtrOutput)
}

// Configuration details of the component.
type ImageRecipeComponentConfiguration struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn *string `pulumi:"componentArn"`
	// A group of parameter settings that are used to configure the component for a specific recipe.
	Parameters []ImageRecipeComponentParameter `pulumi:"parameters"`
}

// ImageRecipeComponentConfigurationInput is an input type that accepts ImageRecipeComponentConfigurationArgs and ImageRecipeComponentConfigurationOutput values.
// You can construct a concrete instance of `ImageRecipeComponentConfigurationInput` via:
//
//	ImageRecipeComponentConfigurationArgs{...}
type ImageRecipeComponentConfigurationInput interface {
	pulumi.Input

	ToImageRecipeComponentConfigurationOutput() ImageRecipeComponentConfigurationOutput
	ToImageRecipeComponentConfigurationOutputWithContext(context.Context) ImageRecipeComponentConfigurationOutput
}

// Configuration details of the component.
type ImageRecipeComponentConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn pulumi.StringPtrInput `pulumi:"componentArn"`
	// A group of parameter settings that are used to configure the component for a specific recipe.
	Parameters ImageRecipeComponentParameterArrayInput `pulumi:"parameters"`
}

func (ImageRecipeComponentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (i ImageRecipeComponentConfigurationArgs) ToImageRecipeComponentConfigurationOutput() ImageRecipeComponentConfigurationOutput {
	return i.ToImageRecipeComponentConfigurationOutputWithContext(context.Background())
}

func (i ImageRecipeComponentConfigurationArgs) ToImageRecipeComponentConfigurationOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentConfigurationOutput)
}

func (i ImageRecipeComponentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeComponentConfiguration] {
	return pulumix.Output[ImageRecipeComponentConfiguration]{
		OutputState: i.ToImageRecipeComponentConfigurationOutputWithContext(ctx).OutputState,
	}
}

// ImageRecipeComponentConfigurationArrayInput is an input type that accepts ImageRecipeComponentConfigurationArray and ImageRecipeComponentConfigurationArrayOutput values.
// You can construct a concrete instance of `ImageRecipeComponentConfigurationArrayInput` via:
//
//	ImageRecipeComponentConfigurationArray{ ImageRecipeComponentConfigurationArgs{...} }
type ImageRecipeComponentConfigurationArrayInput interface {
	pulumi.Input

	ToImageRecipeComponentConfigurationArrayOutput() ImageRecipeComponentConfigurationArrayOutput
	ToImageRecipeComponentConfigurationArrayOutputWithContext(context.Context) ImageRecipeComponentConfigurationArrayOutput
}

type ImageRecipeComponentConfigurationArray []ImageRecipeComponentConfigurationInput

func (ImageRecipeComponentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (i ImageRecipeComponentConfigurationArray) ToImageRecipeComponentConfigurationArrayOutput() ImageRecipeComponentConfigurationArrayOutput {
	return i.ToImageRecipeComponentConfigurationArrayOutputWithContext(context.Background())
}

func (i ImageRecipeComponentConfigurationArray) ToImageRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentConfigurationArrayOutput)
}

func (i ImageRecipeComponentConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]ImageRecipeComponentConfiguration] {
	return pulumix.Output[[]ImageRecipeComponentConfiguration]{
		OutputState: i.ToImageRecipeComponentConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// Configuration details of the component.
type ImageRecipeComponentConfigurationOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (o ImageRecipeComponentConfigurationOutput) ToImageRecipeComponentConfigurationOutput() ImageRecipeComponentConfigurationOutput {
	return o
}

func (o ImageRecipeComponentConfigurationOutput) ToImageRecipeComponentConfigurationOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationOutput {
	return o
}

func (o ImageRecipeComponentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeComponentConfiguration] {
	return pulumix.Output[ImageRecipeComponentConfiguration]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the component.
func (o ImageRecipeComponentConfigurationOutput) ComponentArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeComponentConfiguration) *string { return v.ComponentArn }).(pulumi.StringPtrOutput)
}

// A group of parameter settings that are used to configure the component for a specific recipe.
func (o ImageRecipeComponentConfigurationOutput) Parameters() ImageRecipeComponentParameterArrayOutput {
	return o.ApplyT(func(v ImageRecipeComponentConfiguration) []ImageRecipeComponentParameter { return v.Parameters }).(ImageRecipeComponentParameterArrayOutput)
}

type ImageRecipeComponentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (o ImageRecipeComponentConfigurationArrayOutput) ToImageRecipeComponentConfigurationArrayOutput() ImageRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ImageRecipeComponentConfigurationArrayOutput) ToImageRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ImageRecipeComponentConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImageRecipeComponentConfiguration] {
	return pulumix.Output[[]ImageRecipeComponentConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImageRecipeComponentConfigurationArrayOutput) Index(i pulumi.IntInput) ImageRecipeComponentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRecipeComponentConfiguration {
		return vs[0].([]ImageRecipeComponentConfiguration)[vs[1].(int)]
	}).(ImageRecipeComponentConfigurationOutput)
}

// Contains a key/value pair that sets the named component parameter.
type ImageRecipeComponentParameter struct {
	// The name of the component parameter to set.
	Name string `pulumi:"name"`
	// Sets the value for the named component parameter.
	Value []string `pulumi:"value"`
}

// ImageRecipeComponentParameterInput is an input type that accepts ImageRecipeComponentParameterArgs and ImageRecipeComponentParameterOutput values.
// You can construct a concrete instance of `ImageRecipeComponentParameterInput` via:
//
//	ImageRecipeComponentParameterArgs{...}
type ImageRecipeComponentParameterInput interface {
	pulumi.Input

	ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput
	ToImageRecipeComponentParameterOutputWithContext(context.Context) ImageRecipeComponentParameterOutput
}

// Contains a key/value pair that sets the named component parameter.
type ImageRecipeComponentParameterArgs struct {
	// The name of the component parameter to set.
	Name pulumi.StringInput `pulumi:"name"`
	// Sets the value for the named component parameter.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ImageRecipeComponentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentParameter)(nil)).Elem()
}

func (i ImageRecipeComponentParameterArgs) ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput {
	return i.ToImageRecipeComponentParameterOutputWithContext(context.Background())
}

func (i ImageRecipeComponentParameterArgs) ToImageRecipeComponentParameterOutputWithContext(ctx context.Context) ImageRecipeComponentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentParameterOutput)
}

func (i ImageRecipeComponentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeComponentParameter] {
	return pulumix.Output[ImageRecipeComponentParameter]{
		OutputState: i.ToImageRecipeComponentParameterOutputWithContext(ctx).OutputState,
	}
}

// ImageRecipeComponentParameterArrayInput is an input type that accepts ImageRecipeComponentParameterArray and ImageRecipeComponentParameterArrayOutput values.
// You can construct a concrete instance of `ImageRecipeComponentParameterArrayInput` via:
//
//	ImageRecipeComponentParameterArray{ ImageRecipeComponentParameterArgs{...} }
type ImageRecipeComponentParameterArrayInput interface {
	pulumi.Input

	ToImageRecipeComponentParameterArrayOutput() ImageRecipeComponentParameterArrayOutput
	ToImageRecipeComponentParameterArrayOutputWithContext(context.Context) ImageRecipeComponentParameterArrayOutput
}

type ImageRecipeComponentParameterArray []ImageRecipeComponentParameterInput

func (ImageRecipeComponentParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentParameter)(nil)).Elem()
}

func (i ImageRecipeComponentParameterArray) ToImageRecipeComponentParameterArrayOutput() ImageRecipeComponentParameterArrayOutput {
	return i.ToImageRecipeComponentParameterArrayOutputWithContext(context.Background())
}

func (i ImageRecipeComponentParameterArray) ToImageRecipeComponentParameterArrayOutputWithContext(ctx context.Context) ImageRecipeComponentParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentParameterArrayOutput)
}

func (i ImageRecipeComponentParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]ImageRecipeComponentParameter] {
	return pulumix.Output[[]ImageRecipeComponentParameter]{
		OutputState: i.ToImageRecipeComponentParameterArrayOutputWithContext(ctx).OutputState,
	}
}

// Contains a key/value pair that sets the named component parameter.
type ImageRecipeComponentParameterOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentParameter)(nil)).Elem()
}

func (o ImageRecipeComponentParameterOutput) ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput {
	return o
}

func (o ImageRecipeComponentParameterOutput) ToImageRecipeComponentParameterOutputWithContext(ctx context.Context) ImageRecipeComponentParameterOutput {
	return o
}

func (o ImageRecipeComponentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeComponentParameter] {
	return pulumix.Output[ImageRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

// The name of the component parameter to set.
func (o ImageRecipeComponentParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRecipeComponentParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Sets the value for the named component parameter.
func (o ImageRecipeComponentParameterOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRecipeComponentParameter) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ImageRecipeComponentParameterArrayOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentParameter)(nil)).Elem()
}

func (o ImageRecipeComponentParameterArrayOutput) ToImageRecipeComponentParameterArrayOutput() ImageRecipeComponentParameterArrayOutput {
	return o
}

func (o ImageRecipeComponentParameterArrayOutput) ToImageRecipeComponentParameterArrayOutputWithContext(ctx context.Context) ImageRecipeComponentParameterArrayOutput {
	return o
}

func (o ImageRecipeComponentParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImageRecipeComponentParameter] {
	return pulumix.Output[[]ImageRecipeComponentParameter]{
		OutputState: o.OutputState,
	}
}

func (o ImageRecipeComponentParameterArrayOutput) Index(i pulumi.IntInput) ImageRecipeComponentParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRecipeComponentParameter {
		return vs[0].([]ImageRecipeComponentParameter)[vs[1].(int)]
	}).(ImageRecipeComponentParameterOutput)
}

// Amazon EBS-specific block device mapping specifications.
type ImageRecipeEbsInstanceBlockDeviceSpecification struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted *bool `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops *int `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId *string `pulumi:"snapshotId"`
	// For GP3 volumes only - The throughput in MiB/s that the volume supports.
	Throughput *int `pulumi:"throughput"`
	// Use to override the device's volume size.
	VolumeSize *int `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType *ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType `pulumi:"volumeType"`
}

// ImageRecipeEbsInstanceBlockDeviceSpecificationInput is an input type that accepts ImageRecipeEbsInstanceBlockDeviceSpecificationArgs and ImageRecipeEbsInstanceBlockDeviceSpecificationOutput values.
// You can construct a concrete instance of `ImageRecipeEbsInstanceBlockDeviceSpecificationInput` via:
//
//	ImageRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
type ImageRecipeEbsInstanceBlockDeviceSpecificationInput interface {
	pulumi.Input

	ToImageRecipeEbsInstanceBlockDeviceSpecificationOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput
	ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationOutput
}

// Amazon EBS-specific block device mapping specifications.
type ImageRecipeEbsInstanceBlockDeviceSpecificationArgs struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// For GP3 volumes only - The throughput in MiB/s that the volume supports.
	Throughput pulumi.IntPtrInput `pulumi:"throughput"`
	// Use to override the device's volume size.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrInput `pulumi:"volumeType"`
}

func (ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return i.ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Background())
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[ImageRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: i.ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx).OutputState,
	}
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput).ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx)
}

// ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput is an input type that accepts ImageRecipeEbsInstanceBlockDeviceSpecificationArgs, ImageRecipeEbsInstanceBlockDeviceSpecificationPtr and ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput values.
// You can construct a concrete instance of `ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput` via:
//
//	        ImageRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
//
//	or:
//
//	        nil
type ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput interface {
	pulumi.Input

	ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
	ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
}

type imageRecipeEbsInstanceBlockDeviceSpecificationPtrType ImageRecipeEbsInstanceBlockDeviceSpecificationArgs

func ImageRecipeEbsInstanceBlockDeviceSpecificationPtr(v *ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput {
	return (*imageRecipeEbsInstanceBlockDeviceSpecificationPtrType)(v)
}

func (*imageRecipeEbsInstanceBlockDeviceSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i *imageRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i *imageRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

func (i *imageRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[*ImageRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: i.ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx).OutputState,
	}
}

// Amazon EBS-specific block device mapping specifications.
type ImageRecipeEbsInstanceBlockDeviceSpecificationOutput struct{ *pulumi.OutputState }

func (ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRecipeEbsInstanceBlockDeviceSpecification) *ImageRecipeEbsInstanceBlockDeviceSpecification {
		return &v
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[ImageRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: o.OutputState,
	}
}

// Use to configure delete on termination of the associated device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// For GP3 volumes only - The throughput in MiB/s that the volume supports.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

// Use to override the device's volume size.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeType() ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		return v.VolumeType
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

type ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput struct{ *pulumi.OutputState }

func (ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeEbsInstanceBlockDeviceSpecification] {
	return pulumix.Output[*ImageRecipeEbsInstanceBlockDeviceSpecification]{
		OutputState: o.OutputState,
	}
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Elem() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) ImageRecipeEbsInstanceBlockDeviceSpecification {
		if v != nil {
			return *v
		}
		var ret ImageRecipeEbsInstanceBlockDeviceSpecification
		return ret
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

// Use to configure delete on termination of the associated device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// For GP3 volumes only - The throughput in MiB/s that the volume supports.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

// Use to override the device's volume size.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeType() ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

// Defines block device mappings for the instance used to configure your image.
type ImageRecipeInstanceBlockDeviceMapping struct {
	// The device to which these mappings apply.
	DeviceName *string `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs *ImageRecipeEbsInstanceBlockDeviceSpecification `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice *string `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName *string `pulumi:"virtualName"`
}

// ImageRecipeInstanceBlockDeviceMappingInput is an input type that accepts ImageRecipeInstanceBlockDeviceMappingArgs and ImageRecipeInstanceBlockDeviceMappingOutput values.
// You can construct a concrete instance of `ImageRecipeInstanceBlockDeviceMappingInput` via:
//
//	ImageRecipeInstanceBlockDeviceMappingArgs{...}
type ImageRecipeInstanceBlockDeviceMappingInput interface {
	pulumi.Input

	ToImageRecipeInstanceBlockDeviceMappingOutput() ImageRecipeInstanceBlockDeviceMappingOutput
	ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(context.Context) ImageRecipeInstanceBlockDeviceMappingOutput
}

// Defines block device mappings for the instance used to configure your image.
type ImageRecipeInstanceBlockDeviceMappingArgs struct {
	// The device to which these mappings apply.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice pulumi.StringPtrInput `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName pulumi.StringPtrInput `pulumi:"virtualName"`
}

func (ImageRecipeInstanceBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ImageRecipeInstanceBlockDeviceMappingArgs) ToImageRecipeInstanceBlockDeviceMappingOutput() ImageRecipeInstanceBlockDeviceMappingOutput {
	return i.ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(context.Background())
}

func (i ImageRecipeInstanceBlockDeviceMappingArgs) ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeInstanceBlockDeviceMappingOutput)
}

func (i ImageRecipeInstanceBlockDeviceMappingArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[ImageRecipeInstanceBlockDeviceMapping]{
		OutputState: i.ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(ctx).OutputState,
	}
}

// ImageRecipeInstanceBlockDeviceMappingArrayInput is an input type that accepts ImageRecipeInstanceBlockDeviceMappingArray and ImageRecipeInstanceBlockDeviceMappingArrayOutput values.
// You can construct a concrete instance of `ImageRecipeInstanceBlockDeviceMappingArrayInput` via:
//
//	ImageRecipeInstanceBlockDeviceMappingArray{ ImageRecipeInstanceBlockDeviceMappingArgs{...} }
type ImageRecipeInstanceBlockDeviceMappingArrayInput interface {
	pulumi.Input

	ToImageRecipeInstanceBlockDeviceMappingArrayOutput() ImageRecipeInstanceBlockDeviceMappingArrayOutput
	ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Context) ImageRecipeInstanceBlockDeviceMappingArrayOutput
}

type ImageRecipeInstanceBlockDeviceMappingArray []ImageRecipeInstanceBlockDeviceMappingInput

func (ImageRecipeInstanceBlockDeviceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ImageRecipeInstanceBlockDeviceMappingArray) ToImageRecipeInstanceBlockDeviceMappingArrayOutput() ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return i.ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Background())
}

func (i ImageRecipeInstanceBlockDeviceMappingArray) ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeInstanceBlockDeviceMappingArrayOutput)
}

func (i ImageRecipeInstanceBlockDeviceMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]ImageRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[[]ImageRecipeInstanceBlockDeviceMapping]{
		OutputState: i.ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Defines block device mappings for the instance used to configure your image.
type ImageRecipeInstanceBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (ImageRecipeInstanceBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ImageRecipeInstanceBlockDeviceMappingOutput) ToImageRecipeInstanceBlockDeviceMappingOutput() ImageRecipeInstanceBlockDeviceMappingOutput {
	return o
}

func (o ImageRecipeInstanceBlockDeviceMappingOutput) ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingOutput {
	return o
}

func (o ImageRecipeInstanceBlockDeviceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[ImageRecipeInstanceBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

// The device to which these mappings apply.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Use to manage Amazon EBS-specific configuration for this mapping.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) Ebs() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *ImageRecipeEbsInstanceBlockDeviceSpecification {
		return v.Ebs
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Use to remove a mapping from the parent image.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) NoDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *string { return v.NoDevice }).(pulumi.StringPtrOutput)
}

// Use to manage instance ephemeral devices.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) VirtualName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *string { return v.VirtualName }).(pulumi.StringPtrOutput)
}

type ImageRecipeInstanceBlockDeviceMappingArrayOutput struct{ *pulumi.OutputState }

func (ImageRecipeInstanceBlockDeviceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ImageRecipeInstanceBlockDeviceMappingArrayOutput) ToImageRecipeInstanceBlockDeviceMappingArrayOutput() ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ImageRecipeInstanceBlockDeviceMappingArrayOutput) ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ImageRecipeInstanceBlockDeviceMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImageRecipeInstanceBlockDeviceMapping] {
	return pulumix.Output[[]ImageRecipeInstanceBlockDeviceMapping]{
		OutputState: o.OutputState,
	}
}

func (o ImageRecipeInstanceBlockDeviceMappingArrayOutput) Index(i pulumi.IntInput) ImageRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRecipeInstanceBlockDeviceMapping {
		return vs[0].([]ImageRecipeInstanceBlockDeviceMapping)[vs[1].(int)]
	}).(ImageRecipeInstanceBlockDeviceMappingOutput)
}

// Contains settings for the SSM agent on your build instance.
type ImageRecipeSystemsManagerAgent struct {
	// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
	UninstallAfterBuild *bool `pulumi:"uninstallAfterBuild"`
}

// ImageRecipeSystemsManagerAgentInput is an input type that accepts ImageRecipeSystemsManagerAgentArgs and ImageRecipeSystemsManagerAgentOutput values.
// You can construct a concrete instance of `ImageRecipeSystemsManagerAgentInput` via:
//
//	ImageRecipeSystemsManagerAgentArgs{...}
type ImageRecipeSystemsManagerAgentInput interface {
	pulumi.Input

	ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput
	ToImageRecipeSystemsManagerAgentOutputWithContext(context.Context) ImageRecipeSystemsManagerAgentOutput
}

// Contains settings for the SSM agent on your build instance.
type ImageRecipeSystemsManagerAgentArgs struct {
	// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
	UninstallAfterBuild pulumi.BoolPtrInput `pulumi:"uninstallAfterBuild"`
}

func (ImageRecipeSystemsManagerAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput {
	return i.ToImageRecipeSystemsManagerAgentOutputWithContext(context.Background())
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeSystemsManagerAgentOutput)
}

func (i ImageRecipeSystemsManagerAgentArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeSystemsManagerAgent] {
	return pulumix.Output[ImageRecipeSystemsManagerAgent]{
		OutputState: i.ToImageRecipeSystemsManagerAgentOutputWithContext(ctx).OutputState,
	}
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return i.ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Background())
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeSystemsManagerAgentOutput).ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx)
}

// ImageRecipeSystemsManagerAgentPtrInput is an input type that accepts ImageRecipeSystemsManagerAgentArgs, ImageRecipeSystemsManagerAgentPtr and ImageRecipeSystemsManagerAgentPtrOutput values.
// You can construct a concrete instance of `ImageRecipeSystemsManagerAgentPtrInput` via:
//
//	        ImageRecipeSystemsManagerAgentArgs{...}
//
//	or:
//
//	        nil
type ImageRecipeSystemsManagerAgentPtrInput interface {
	pulumi.Input

	ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput
	ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Context) ImageRecipeSystemsManagerAgentPtrOutput
}

type imageRecipeSystemsManagerAgentPtrType ImageRecipeSystemsManagerAgentArgs

func ImageRecipeSystemsManagerAgentPtr(v *ImageRecipeSystemsManagerAgentArgs) ImageRecipeSystemsManagerAgentPtrInput {
	return (*imageRecipeSystemsManagerAgentPtrType)(v)
}

func (*imageRecipeSystemsManagerAgentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (i *imageRecipeSystemsManagerAgentPtrType) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return i.ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Background())
}

func (i *imageRecipeSystemsManagerAgentPtrType) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeSystemsManagerAgentPtrOutput)
}

func (i *imageRecipeSystemsManagerAgentPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeSystemsManagerAgent] {
	return pulumix.Output[*ImageRecipeSystemsManagerAgent]{
		OutputState: i.ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx).OutputState,
	}
}

// Contains settings for the SSM agent on your build instance.
type ImageRecipeSystemsManagerAgentOutput struct{ *pulumi.OutputState }

func (ImageRecipeSystemsManagerAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Background())
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRecipeSystemsManagerAgent) *ImageRecipeSystemsManagerAgent {
		return &v
	}).(ImageRecipeSystemsManagerAgentPtrOutput)
}

func (o ImageRecipeSystemsManagerAgentOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRecipeSystemsManagerAgent] {
	return pulumix.Output[ImageRecipeSystemsManagerAgent]{
		OutputState: o.OutputState,
	}
}

// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
func (o ImageRecipeSystemsManagerAgentOutput) UninstallAfterBuild() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRecipeSystemsManagerAgent) *bool { return v.UninstallAfterBuild }).(pulumi.BoolPtrOutput)
}

type ImageRecipeSystemsManagerAgentPtrOutput struct{ *pulumi.OutputState }

func (ImageRecipeSystemsManagerAgentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (o ImageRecipeSystemsManagerAgentPtrOutput) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentPtrOutput) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageRecipeSystemsManagerAgent] {
	return pulumix.Output[*ImageRecipeSystemsManagerAgent]{
		OutputState: o.OutputState,
	}
}

func (o ImageRecipeSystemsManagerAgentPtrOutput) Elem() ImageRecipeSystemsManagerAgentOutput {
	return o.ApplyT(func(v *ImageRecipeSystemsManagerAgent) ImageRecipeSystemsManagerAgent {
		if v != nil {
			return *v
		}
		var ret ImageRecipeSystemsManagerAgent
		return ret
	}).(ImageRecipeSystemsManagerAgentOutput)
}

// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
func (o ImageRecipeSystemsManagerAgentPtrOutput) UninstallAfterBuild() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRecipeSystemsManagerAgent) *bool {
		if v == nil {
			return nil
		}
		return v.UninstallAfterBuild
	}).(pulumi.BoolPtrOutput)
}

// Contains settings for Image Builder image resource and container image scans.
type ImageScanningConfiguration struct {
	// Contains ECR settings for vulnerability scans.
	EcrConfiguration *ImageEcrConfiguration `pulumi:"ecrConfiguration"`
	// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
	ImageScanningEnabled *bool `pulumi:"imageScanningEnabled"`
}

// ImageScanningConfigurationInput is an input type that accepts ImageScanningConfigurationArgs and ImageScanningConfigurationOutput values.
// You can construct a concrete instance of `ImageScanningConfigurationInput` via:
//
//	ImageScanningConfigurationArgs{...}
type ImageScanningConfigurationInput interface {
	pulumi.Input

	ToImageScanningConfigurationOutput() ImageScanningConfigurationOutput
	ToImageScanningConfigurationOutputWithContext(context.Context) ImageScanningConfigurationOutput
}

// Contains settings for Image Builder image resource and container image scans.
type ImageScanningConfigurationArgs struct {
	// Contains ECR settings for vulnerability scans.
	EcrConfiguration ImageEcrConfigurationPtrInput `pulumi:"ecrConfiguration"`
	// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
	ImageScanningEnabled pulumi.BoolPtrInput `pulumi:"imageScanningEnabled"`
}

func (ImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageScanningConfiguration)(nil)).Elem()
}

func (i ImageScanningConfigurationArgs) ToImageScanningConfigurationOutput() ImageScanningConfigurationOutput {
	return i.ToImageScanningConfigurationOutputWithContext(context.Background())
}

func (i ImageScanningConfigurationArgs) ToImageScanningConfigurationOutputWithContext(ctx context.Context) ImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageScanningConfigurationOutput)
}

func (i ImageScanningConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImageScanningConfiguration] {
	return pulumix.Output[ImageScanningConfiguration]{
		OutputState: i.ToImageScanningConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ImageScanningConfigurationArgs) ToImageScanningConfigurationPtrOutput() ImageScanningConfigurationPtrOutput {
	return i.ToImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i ImageScanningConfigurationArgs) ToImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageScanningConfigurationOutput).ToImageScanningConfigurationPtrOutputWithContext(ctx)
}

// ImageScanningConfigurationPtrInput is an input type that accepts ImageScanningConfigurationArgs, ImageScanningConfigurationPtr and ImageScanningConfigurationPtrOutput values.
// You can construct a concrete instance of `ImageScanningConfigurationPtrInput` via:
//
//	        ImageScanningConfigurationArgs{...}
//
//	or:
//
//	        nil
type ImageScanningConfigurationPtrInput interface {
	pulumi.Input

	ToImageScanningConfigurationPtrOutput() ImageScanningConfigurationPtrOutput
	ToImageScanningConfigurationPtrOutputWithContext(context.Context) ImageScanningConfigurationPtrOutput
}

type imageScanningConfigurationPtrType ImageScanningConfigurationArgs

func ImageScanningConfigurationPtr(v *ImageScanningConfigurationArgs) ImageScanningConfigurationPtrInput {
	return (*imageScanningConfigurationPtrType)(v)
}

func (*imageScanningConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageScanningConfiguration)(nil)).Elem()
}

func (i *imageScanningConfigurationPtrType) ToImageScanningConfigurationPtrOutput() ImageScanningConfigurationPtrOutput {
	return i.ToImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i *imageScanningConfigurationPtrType) ToImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageScanningConfigurationPtrOutput)
}

func (i *imageScanningConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImageScanningConfiguration] {
	return pulumix.Output[*ImageScanningConfiguration]{
		OutputState: i.ToImageScanningConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Contains settings for Image Builder image resource and container image scans.
type ImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (ImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageScanningConfiguration)(nil)).Elem()
}

func (o ImageScanningConfigurationOutput) ToImageScanningConfigurationOutput() ImageScanningConfigurationOutput {
	return o
}

func (o ImageScanningConfigurationOutput) ToImageScanningConfigurationOutputWithContext(ctx context.Context) ImageScanningConfigurationOutput {
	return o
}

func (o ImageScanningConfigurationOutput) ToImageScanningConfigurationPtrOutput() ImageScanningConfigurationPtrOutput {
	return o.ToImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (o ImageScanningConfigurationOutput) ToImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImageScanningConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageScanningConfiguration) *ImageScanningConfiguration {
		return &v
	}).(ImageScanningConfigurationPtrOutput)
}

func (o ImageScanningConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageScanningConfiguration] {
	return pulumix.Output[ImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

// Contains ECR settings for vulnerability scans.
func (o ImageScanningConfigurationOutput) EcrConfiguration() ImageEcrConfigurationPtrOutput {
	return o.ApplyT(func(v ImageScanningConfiguration) *ImageEcrConfiguration { return v.EcrConfiguration }).(ImageEcrConfigurationPtrOutput)
}

// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
func (o ImageScanningConfigurationOutput) ImageScanningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageScanningConfiguration) *bool { return v.ImageScanningEnabled }).(pulumi.BoolPtrOutput)
}

type ImageScanningConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImageScanningConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageScanningConfiguration)(nil)).Elem()
}

func (o ImageScanningConfigurationPtrOutput) ToImageScanningConfigurationPtrOutput() ImageScanningConfigurationPtrOutput {
	return o
}

func (o ImageScanningConfigurationPtrOutput) ToImageScanningConfigurationPtrOutputWithContext(ctx context.Context) ImageScanningConfigurationPtrOutput {
	return o
}

func (o ImageScanningConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageScanningConfiguration] {
	return pulumix.Output[*ImageScanningConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImageScanningConfigurationPtrOutput) Elem() ImageScanningConfigurationOutput {
	return o.ApplyT(func(v *ImageScanningConfiguration) ImageScanningConfiguration {
		if v != nil {
			return *v
		}
		var ret ImageScanningConfiguration
		return ret
	}).(ImageScanningConfigurationOutput)
}

// Contains ECR settings for vulnerability scans.
func (o ImageScanningConfigurationPtrOutput) EcrConfiguration() ImageEcrConfigurationPtrOutput {
	return o.ApplyT(func(v *ImageScanningConfiguration) *ImageEcrConfiguration {
		if v == nil {
			return nil
		}
		return v.EcrConfiguration
	}).(ImageEcrConfigurationPtrOutput)
}

// This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
func (o ImageScanningConfigurationPtrOutput) ImageScanningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageScanningConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ImageScanningEnabled
	}).(pulumi.BoolPtrOutput)
}

// The image tests configuration used when creating this image.
type ImageTestsConfiguration struct {
	// ImageTestsEnabled
	ImageTestsEnabled *bool `pulumi:"imageTestsEnabled"`
	// TimeoutMinutes
	TimeoutMinutes *int `pulumi:"timeoutMinutes"`
}

// ImageTestsConfigurationInput is an input type that accepts ImageTestsConfigurationArgs and ImageTestsConfigurationOutput values.
// You can construct a concrete instance of `ImageTestsConfigurationInput` via:
//
//	ImageTestsConfigurationArgs{...}
type ImageTestsConfigurationInput interface {
	pulumi.Input

	ToImageTestsConfigurationOutput() ImageTestsConfigurationOutput
	ToImageTestsConfigurationOutputWithContext(context.Context) ImageTestsConfigurationOutput
}

// The image tests configuration used when creating this image.
type ImageTestsConfigurationArgs struct {
	// ImageTestsEnabled
	ImageTestsEnabled pulumi.BoolPtrInput `pulumi:"imageTestsEnabled"`
	// TimeoutMinutes
	TimeoutMinutes pulumi.IntPtrInput `pulumi:"timeoutMinutes"`
}

func (ImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTestsConfiguration)(nil)).Elem()
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationOutput() ImageTestsConfigurationOutput {
	return i.ToImageTestsConfigurationOutputWithContext(context.Background())
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationOutputWithContext(ctx context.Context) ImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTestsConfigurationOutput)
}

func (i ImageTestsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImageTestsConfiguration] {
	return pulumix.Output[ImageTestsConfiguration]{
		OutputState: i.ToImageTestsConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return i.ToImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTestsConfigurationOutput).ToImageTestsConfigurationPtrOutputWithContext(ctx)
}

// ImageTestsConfigurationPtrInput is an input type that accepts ImageTestsConfigurationArgs, ImageTestsConfigurationPtr and ImageTestsConfigurationPtrOutput values.
// You can construct a concrete instance of `ImageTestsConfigurationPtrInput` via:
//
//	        ImageTestsConfigurationArgs{...}
//
//	or:
//
//	        nil
type ImageTestsConfigurationPtrInput interface {
	pulumi.Input

	ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput
	ToImageTestsConfigurationPtrOutputWithContext(context.Context) ImageTestsConfigurationPtrOutput
}

type imageTestsConfigurationPtrType ImageTestsConfigurationArgs

func ImageTestsConfigurationPtr(v *ImageTestsConfigurationArgs) ImageTestsConfigurationPtrInput {
	return (*imageTestsConfigurationPtrType)(v)
}

func (*imageTestsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTestsConfiguration)(nil)).Elem()
}

func (i *imageTestsConfigurationPtrType) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return i.ToImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i *imageTestsConfigurationPtrType) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTestsConfigurationPtrOutput)
}

func (i *imageTestsConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImageTestsConfiguration] {
	return pulumix.Output[*ImageTestsConfiguration]{
		OutputState: i.ToImageTestsConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The image tests configuration used when creating this image.
type ImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (ImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTestsConfiguration)(nil)).Elem()
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationOutput() ImageTestsConfigurationOutput {
	return o
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationOutputWithContext(ctx context.Context) ImageTestsConfigurationOutput {
	return o
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return o.ToImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageTestsConfiguration) *ImageTestsConfiguration {
		return &v
	}).(ImageTestsConfigurationPtrOutput)
}

func (o ImageTestsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageTestsConfiguration] {
	return pulumix.Output[ImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

// ImageTestsEnabled
func (o ImageTestsConfigurationOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageTestsConfiguration) *bool { return v.ImageTestsEnabled }).(pulumi.BoolPtrOutput)
}

// TimeoutMinutes
func (o ImageTestsConfigurationOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageTestsConfiguration) *int { return v.TimeoutMinutes }).(pulumi.IntPtrOutput)
}

type ImageTestsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImageTestsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTestsConfiguration)(nil)).Elem()
}

func (o ImageTestsConfigurationPtrOutput) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return o
}

func (o ImageTestsConfigurationPtrOutput) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return o
}

func (o ImageTestsConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageTestsConfiguration] {
	return pulumix.Output[*ImageTestsConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImageTestsConfigurationPtrOutput) Elem() ImageTestsConfigurationOutput {
	return o.ApplyT(func(v *ImageTestsConfiguration) ImageTestsConfiguration {
		if v != nil {
			return *v
		}
		var ret ImageTestsConfiguration
		return ret
	}).(ImageTestsConfigurationOutput)
}

// ImageTestsEnabled
func (o ImageTestsConfigurationPtrOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageTestsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ImageTestsEnabled
	}).(pulumi.BoolPtrOutput)
}

// TimeoutMinutes
func (o ImageTestsConfigurationPtrOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageTestsConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutMinutes
	}).(pulumi.IntPtrOutput)
}

// The workflow configuration of the image
type ImageWorkflowConfiguration struct {
	// Define execution decision in case of workflow failure
	OnFailure *ImageWorkflowConfigurationOnFailure `pulumi:"onFailure"`
	// The parallel group name
	ParallelGroup *string `pulumi:"parallelGroup"`
	// The parameters associated with the workflow
	Parameters []ImageWorkflowParameter `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the workflow
	WorkflowArn *string `pulumi:"workflowArn"`
}

// ImageWorkflowConfigurationInput is an input type that accepts ImageWorkflowConfigurationArgs and ImageWorkflowConfigurationOutput values.
// You can construct a concrete instance of `ImageWorkflowConfigurationInput` via:
//
//	ImageWorkflowConfigurationArgs{...}
type ImageWorkflowConfigurationInput interface {
	pulumi.Input

	ToImageWorkflowConfigurationOutput() ImageWorkflowConfigurationOutput
	ToImageWorkflowConfigurationOutputWithContext(context.Context) ImageWorkflowConfigurationOutput
}

// The workflow configuration of the image
type ImageWorkflowConfigurationArgs struct {
	// Define execution decision in case of workflow failure
	OnFailure ImageWorkflowConfigurationOnFailurePtrInput `pulumi:"onFailure"`
	// The parallel group name
	ParallelGroup pulumi.StringPtrInput `pulumi:"parallelGroup"`
	// The parameters associated with the workflow
	Parameters ImageWorkflowParameterArrayInput `pulumi:"parameters"`
	// The Amazon Resource Name (ARN) of the workflow
	WorkflowArn pulumi.StringPtrInput `pulumi:"workflowArn"`
}

func (ImageWorkflowConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageWorkflowConfiguration)(nil)).Elem()
}

func (i ImageWorkflowConfigurationArgs) ToImageWorkflowConfigurationOutput() ImageWorkflowConfigurationOutput {
	return i.ToImageWorkflowConfigurationOutputWithContext(context.Background())
}

func (i ImageWorkflowConfigurationArgs) ToImageWorkflowConfigurationOutputWithContext(ctx context.Context) ImageWorkflowConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageWorkflowConfigurationOutput)
}

func (i ImageWorkflowConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ImageWorkflowConfiguration] {
	return pulumix.Output[ImageWorkflowConfiguration]{
		OutputState: i.ToImageWorkflowConfigurationOutputWithContext(ctx).OutputState,
	}
}

// ImageWorkflowConfigurationArrayInput is an input type that accepts ImageWorkflowConfigurationArray and ImageWorkflowConfigurationArrayOutput values.
// You can construct a concrete instance of `ImageWorkflowConfigurationArrayInput` via:
//
//	ImageWorkflowConfigurationArray{ ImageWorkflowConfigurationArgs{...} }
type ImageWorkflowConfigurationArrayInput interface {
	pulumi.Input

	ToImageWorkflowConfigurationArrayOutput() ImageWorkflowConfigurationArrayOutput
	ToImageWorkflowConfigurationArrayOutputWithContext(context.Context) ImageWorkflowConfigurationArrayOutput
}

type ImageWorkflowConfigurationArray []ImageWorkflowConfigurationInput

func (ImageWorkflowConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageWorkflowConfiguration)(nil)).Elem()
}

func (i ImageWorkflowConfigurationArray) ToImageWorkflowConfigurationArrayOutput() ImageWorkflowConfigurationArrayOutput {
	return i.ToImageWorkflowConfigurationArrayOutputWithContext(context.Background())
}

func (i ImageWorkflowConfigurationArray) ToImageWorkflowConfigurationArrayOutputWithContext(ctx context.Context) ImageWorkflowConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageWorkflowConfigurationArrayOutput)
}

func (i ImageWorkflowConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]ImageWorkflowConfiguration] {
	return pulumix.Output[[]ImageWorkflowConfiguration]{
		OutputState: i.ToImageWorkflowConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// The workflow configuration of the image
type ImageWorkflowConfigurationOutput struct{ *pulumi.OutputState }

func (ImageWorkflowConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageWorkflowConfiguration)(nil)).Elem()
}

func (o ImageWorkflowConfigurationOutput) ToImageWorkflowConfigurationOutput() ImageWorkflowConfigurationOutput {
	return o
}

func (o ImageWorkflowConfigurationOutput) ToImageWorkflowConfigurationOutputWithContext(ctx context.Context) ImageWorkflowConfigurationOutput {
	return o
}

func (o ImageWorkflowConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ImageWorkflowConfiguration] {
	return pulumix.Output[ImageWorkflowConfiguration]{
		OutputState: o.OutputState,
	}
}

// Define execution decision in case of workflow failure
func (o ImageWorkflowConfigurationOutput) OnFailure() ImageWorkflowConfigurationOnFailurePtrOutput {
	return o.ApplyT(func(v ImageWorkflowConfiguration) *ImageWorkflowConfigurationOnFailure { return v.OnFailure }).(ImageWorkflowConfigurationOnFailurePtrOutput)
}

// The parallel group name
func (o ImageWorkflowConfigurationOutput) ParallelGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageWorkflowConfiguration) *string { return v.ParallelGroup }).(pulumi.StringPtrOutput)
}

// The parameters associated with the workflow
func (o ImageWorkflowConfigurationOutput) Parameters() ImageWorkflowParameterArrayOutput {
	return o.ApplyT(func(v ImageWorkflowConfiguration) []ImageWorkflowParameter { return v.Parameters }).(ImageWorkflowParameterArrayOutput)
}

// The Amazon Resource Name (ARN) of the workflow
func (o ImageWorkflowConfigurationOutput) WorkflowArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageWorkflowConfiguration) *string { return v.WorkflowArn }).(pulumi.StringPtrOutput)
}

type ImageWorkflowConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ImageWorkflowConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageWorkflowConfiguration)(nil)).Elem()
}

func (o ImageWorkflowConfigurationArrayOutput) ToImageWorkflowConfigurationArrayOutput() ImageWorkflowConfigurationArrayOutput {
	return o
}

func (o ImageWorkflowConfigurationArrayOutput) ToImageWorkflowConfigurationArrayOutputWithContext(ctx context.Context) ImageWorkflowConfigurationArrayOutput {
	return o
}

func (o ImageWorkflowConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImageWorkflowConfiguration] {
	return pulumix.Output[[]ImageWorkflowConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ImageWorkflowConfigurationArrayOutput) Index(i pulumi.IntInput) ImageWorkflowConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageWorkflowConfiguration {
		return vs[0].([]ImageWorkflowConfiguration)[vs[1].(int)]
	}).(ImageWorkflowConfigurationOutput)
}

// A parameter associated with the workflow
type ImageWorkflowParameter struct {
	Name  *string  `pulumi:"name"`
	Value []string `pulumi:"value"`
}

// ImageWorkflowParameterInput is an input type that accepts ImageWorkflowParameterArgs and ImageWorkflowParameterOutput values.
// You can construct a concrete instance of `ImageWorkflowParameterInput` via:
//
//	ImageWorkflowParameterArgs{...}
type ImageWorkflowParameterInput interface {
	pulumi.Input

	ToImageWorkflowParameterOutput() ImageWorkflowParameterOutput
	ToImageWorkflowParameterOutputWithContext(context.Context) ImageWorkflowParameterOutput
}

// A parameter associated with the workflow
type ImageWorkflowParameterArgs struct {
	Name  pulumi.StringPtrInput   `pulumi:"name"`
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ImageWorkflowParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageWorkflowParameter)(nil)).Elem()
}

func (i ImageWorkflowParameterArgs) ToImageWorkflowParameterOutput() ImageWorkflowParameterOutput {
	return i.ToImageWorkflowParameterOutputWithContext(context.Background())
}

func (i ImageWorkflowParameterArgs) ToImageWorkflowParameterOutputWithContext(ctx context.Context) ImageWorkflowParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageWorkflowParameterOutput)
}

func (i ImageWorkflowParameterArgs) ToOutput(ctx context.Context) pulumix.Output[ImageWorkflowParameter] {
	return pulumix.Output[ImageWorkflowParameter]{
		OutputState: i.ToImageWorkflowParameterOutputWithContext(ctx).OutputState,
	}
}

// ImageWorkflowParameterArrayInput is an input type that accepts ImageWorkflowParameterArray and ImageWorkflowParameterArrayOutput values.
// You can construct a concrete instance of `ImageWorkflowParameterArrayInput` via:
//
//	ImageWorkflowParameterArray{ ImageWorkflowParameterArgs{...} }
type ImageWorkflowParameterArrayInput interface {
	pulumi.Input

	ToImageWorkflowParameterArrayOutput() ImageWorkflowParameterArrayOutput
	ToImageWorkflowParameterArrayOutputWithContext(context.Context) ImageWorkflowParameterArrayOutput
}

type ImageWorkflowParameterArray []ImageWorkflowParameterInput

func (ImageWorkflowParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageWorkflowParameter)(nil)).Elem()
}

func (i ImageWorkflowParameterArray) ToImageWorkflowParameterArrayOutput() ImageWorkflowParameterArrayOutput {
	return i.ToImageWorkflowParameterArrayOutputWithContext(context.Background())
}

func (i ImageWorkflowParameterArray) ToImageWorkflowParameterArrayOutputWithContext(ctx context.Context) ImageWorkflowParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageWorkflowParameterArrayOutput)
}

func (i ImageWorkflowParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]ImageWorkflowParameter] {
	return pulumix.Output[[]ImageWorkflowParameter]{
		OutputState: i.ToImageWorkflowParameterArrayOutputWithContext(ctx).OutputState,
	}
}

// A parameter associated with the workflow
type ImageWorkflowParameterOutput struct{ *pulumi.OutputState }

func (ImageWorkflowParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageWorkflowParameter)(nil)).Elem()
}

func (o ImageWorkflowParameterOutput) ToImageWorkflowParameterOutput() ImageWorkflowParameterOutput {
	return o
}

func (o ImageWorkflowParameterOutput) ToImageWorkflowParameterOutputWithContext(ctx context.Context) ImageWorkflowParameterOutput {
	return o
}

func (o ImageWorkflowParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ImageWorkflowParameter] {
	return pulumix.Output[ImageWorkflowParameter]{
		OutputState: o.OutputState,
	}
}

func (o ImageWorkflowParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageWorkflowParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ImageWorkflowParameterOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageWorkflowParameter) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ImageWorkflowParameterArrayOutput struct{ *pulumi.OutputState }

func (ImageWorkflowParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageWorkflowParameter)(nil)).Elem()
}

func (o ImageWorkflowParameterArrayOutput) ToImageWorkflowParameterArrayOutput() ImageWorkflowParameterArrayOutput {
	return o
}

func (o ImageWorkflowParameterArrayOutput) ToImageWorkflowParameterArrayOutputWithContext(ctx context.Context) ImageWorkflowParameterArrayOutput {
	return o
}

func (o ImageWorkflowParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImageWorkflowParameter] {
	return pulumix.Output[[]ImageWorkflowParameter]{
		OutputState: o.OutputState,
	}
}

func (o ImageWorkflowParameterArrayOutput) Index(i pulumi.IntInput) ImageWorkflowParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageWorkflowParameter {
		return vs[0].([]ImageWorkflowParameter)[vs[1].(int)]
	}).(ImageWorkflowParameterOutput)
}

// The instance metadata option settings for the infrastructure configuration.
type InfrastructureConfigurationInstanceMetadataOptions struct {
	// Limit the number of hops that an instance metadata request can traverse to reach its destination.
	HttpPutResponseHopLimit *int `pulumi:"httpPutResponseHopLimit"`
	// Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:
	HttpTokens *InfrastructureConfigurationInstanceMetadataOptionsHttpTokens `pulumi:"httpTokens"`
}

// InfrastructureConfigurationInstanceMetadataOptionsInput is an input type that accepts InfrastructureConfigurationInstanceMetadataOptionsArgs and InfrastructureConfigurationInstanceMetadataOptionsOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationInstanceMetadataOptionsInput` via:
//
//	InfrastructureConfigurationInstanceMetadataOptionsArgs{...}
type InfrastructureConfigurationInstanceMetadataOptionsInput interface {
	pulumi.Input

	ToInfrastructureConfigurationInstanceMetadataOptionsOutput() InfrastructureConfigurationInstanceMetadataOptionsOutput
	ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(context.Context) InfrastructureConfigurationInstanceMetadataOptionsOutput
}

// The instance metadata option settings for the infrastructure configuration.
type InfrastructureConfigurationInstanceMetadataOptionsArgs struct {
	// Limit the number of hops that an instance metadata request can traverse to reach its destination.
	HttpPutResponseHopLimit pulumi.IntPtrInput `pulumi:"httpPutResponseHopLimit"`
	// Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:
	HttpTokens InfrastructureConfigurationInstanceMetadataOptionsHttpTokensPtrInput `pulumi:"httpTokens"`
}

func (InfrastructureConfigurationInstanceMetadataOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationInstanceMetadataOptions)(nil)).Elem()
}

func (i InfrastructureConfigurationInstanceMetadataOptionsArgs) ToInfrastructureConfigurationInstanceMetadataOptionsOutput() InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return i.ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationInstanceMetadataOptionsArgs) ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationInstanceMetadataOptionsOutput)
}

func (i InfrastructureConfigurationInstanceMetadataOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationInstanceMetadataOptions] {
	return pulumix.Output[InfrastructureConfigurationInstanceMetadataOptions]{
		OutputState: i.ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i InfrastructureConfigurationInstanceMetadataOptionsArgs) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutput() InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return i.ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationInstanceMetadataOptionsArgs) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationInstanceMetadataOptionsOutput).ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(ctx)
}

// InfrastructureConfigurationInstanceMetadataOptionsPtrInput is an input type that accepts InfrastructureConfigurationInstanceMetadataOptionsArgs, InfrastructureConfigurationInstanceMetadataOptionsPtr and InfrastructureConfigurationInstanceMetadataOptionsPtrOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationInstanceMetadataOptionsPtrInput` via:
//
//	        InfrastructureConfigurationInstanceMetadataOptionsArgs{...}
//
//	or:
//
//	        nil
type InfrastructureConfigurationInstanceMetadataOptionsPtrInput interface {
	pulumi.Input

	ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutput() InfrastructureConfigurationInstanceMetadataOptionsPtrOutput
	ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(context.Context) InfrastructureConfigurationInstanceMetadataOptionsPtrOutput
}

type infrastructureConfigurationInstanceMetadataOptionsPtrType InfrastructureConfigurationInstanceMetadataOptionsArgs

func InfrastructureConfigurationInstanceMetadataOptionsPtr(v *InfrastructureConfigurationInstanceMetadataOptionsArgs) InfrastructureConfigurationInstanceMetadataOptionsPtrInput {
	return (*infrastructureConfigurationInstanceMetadataOptionsPtrType)(v)
}

func (*infrastructureConfigurationInstanceMetadataOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationInstanceMetadataOptions)(nil)).Elem()
}

func (i *infrastructureConfigurationInstanceMetadataOptionsPtrType) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutput() InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return i.ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (i *infrastructureConfigurationInstanceMetadataOptionsPtrType) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationInstanceMetadataOptionsPtrOutput)
}

func (i *infrastructureConfigurationInstanceMetadataOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationInstanceMetadataOptions] {
	return pulumix.Output[*InfrastructureConfigurationInstanceMetadataOptions]{
		OutputState: i.ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

// The instance metadata option settings for the infrastructure configuration.
type InfrastructureConfigurationInstanceMetadataOptionsOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationInstanceMetadataOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationInstanceMetadataOptions)(nil)).Elem()
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToInfrastructureConfigurationInstanceMetadataOptionsOutput() InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return o
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToInfrastructureConfigurationInstanceMetadataOptionsOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return o
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutput() InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return o.ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureConfigurationInstanceMetadataOptions) *InfrastructureConfigurationInstanceMetadataOptions {
		return &v
	}).(InfrastructureConfigurationInstanceMetadataOptionsPtrOutput)
}

func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationInstanceMetadataOptions] {
	return pulumix.Output[InfrastructureConfigurationInstanceMetadataOptions]{
		OutputState: o.OutputState,
	}
}

// Limit the number of hops that an instance metadata request can traverse to reach its destination.
func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) HttpPutResponseHopLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationInstanceMetadataOptions) *int { return v.HttpPutResponseHopLimit }).(pulumi.IntPtrOutput)
}

// Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:
func (o InfrastructureConfigurationInstanceMetadataOptionsOutput) HttpTokens() InfrastructureConfigurationInstanceMetadataOptionsHttpTokensPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationInstanceMetadataOptions) *InfrastructureConfigurationInstanceMetadataOptionsHttpTokens {
		return v.HttpTokens
	}).(InfrastructureConfigurationInstanceMetadataOptionsHttpTokensPtrOutput)
}

type InfrastructureConfigurationInstanceMetadataOptionsPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationInstanceMetadataOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationInstanceMetadataOptions)(nil)).Elem()
}

func (o InfrastructureConfigurationInstanceMetadataOptionsPtrOutput) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutput() InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return o
}

func (o InfrastructureConfigurationInstanceMetadataOptionsPtrOutput) ToInfrastructureConfigurationInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationInstanceMetadataOptionsPtrOutput {
	return o
}

func (o InfrastructureConfigurationInstanceMetadataOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationInstanceMetadataOptions] {
	return pulumix.Output[*InfrastructureConfigurationInstanceMetadataOptions]{
		OutputState: o.OutputState,
	}
}

func (o InfrastructureConfigurationInstanceMetadataOptionsPtrOutput) Elem() InfrastructureConfigurationInstanceMetadataOptionsOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationInstanceMetadataOptions) InfrastructureConfigurationInstanceMetadataOptions {
		if v != nil {
			return *v
		}
		var ret InfrastructureConfigurationInstanceMetadataOptions
		return ret
	}).(InfrastructureConfigurationInstanceMetadataOptionsOutput)
}

// Limit the number of hops that an instance metadata request can traverse to reach its destination.
func (o InfrastructureConfigurationInstanceMetadataOptionsPtrOutput) HttpPutResponseHopLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationInstanceMetadataOptions) *int {
		if v == nil {
			return nil
		}
		return v.HttpPutResponseHopLimit
	}).(pulumi.IntPtrOutput)
}

// Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:
func (o InfrastructureConfigurationInstanceMetadataOptionsPtrOutput) HttpTokens() InfrastructureConfigurationInstanceMetadataOptionsHttpTokensPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationInstanceMetadataOptions) *InfrastructureConfigurationInstanceMetadataOptionsHttpTokens {
		if v == nil {
			return nil
		}
		return v.HttpTokens
	}).(InfrastructureConfigurationInstanceMetadataOptionsHttpTokensPtrOutput)
}

// The logging configuration of the infrastructure configuration.
type InfrastructureConfigurationLogging struct {
	S3Logs *InfrastructureConfigurationS3Logs `pulumi:"s3Logs"`
}

// InfrastructureConfigurationLoggingInput is an input type that accepts InfrastructureConfigurationLoggingArgs and InfrastructureConfigurationLoggingOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationLoggingInput` via:
//
//	InfrastructureConfigurationLoggingArgs{...}
type InfrastructureConfigurationLoggingInput interface {
	pulumi.Input

	ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput
	ToInfrastructureConfigurationLoggingOutputWithContext(context.Context) InfrastructureConfigurationLoggingOutput
}

// The logging configuration of the infrastructure configuration.
type InfrastructureConfigurationLoggingArgs struct {
	S3Logs InfrastructureConfigurationS3LogsPtrInput `pulumi:"s3Logs"`
}

func (InfrastructureConfigurationLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLogging)(nil)).Elem()
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput {
	return i.ToInfrastructureConfigurationLoggingOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingOutput)
}

func (i InfrastructureConfigurationLoggingArgs) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationLogging] {
	return pulumix.Output[InfrastructureConfigurationLogging]{
		OutputState: i.ToInfrastructureConfigurationLoggingOutputWithContext(ctx).OutputState,
	}
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return i.ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingOutput).ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx)
}

// InfrastructureConfigurationLoggingPtrInput is an input type that accepts InfrastructureConfigurationLoggingArgs, InfrastructureConfigurationLoggingPtr and InfrastructureConfigurationLoggingPtrOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationLoggingPtrInput` via:
//
//	        InfrastructureConfigurationLoggingArgs{...}
//
//	or:
//
//	        nil
type InfrastructureConfigurationLoggingPtrInput interface {
	pulumi.Input

	ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput
	ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Context) InfrastructureConfigurationLoggingPtrOutput
}

type infrastructureConfigurationLoggingPtrType InfrastructureConfigurationLoggingArgs

func InfrastructureConfigurationLoggingPtr(v *InfrastructureConfigurationLoggingArgs) InfrastructureConfigurationLoggingPtrInput {
	return (*infrastructureConfigurationLoggingPtrType)(v)
}

func (*infrastructureConfigurationLoggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationLogging)(nil)).Elem()
}

func (i *infrastructureConfigurationLoggingPtrType) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return i.ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Background())
}

func (i *infrastructureConfigurationLoggingPtrType) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingPtrOutput)
}

func (i *infrastructureConfigurationLoggingPtrType) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationLogging] {
	return pulumix.Output[*InfrastructureConfigurationLogging]{
		OutputState: i.ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx).OutputState,
	}
}

// The logging configuration of the infrastructure configuration.
type InfrastructureConfigurationLoggingOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLogging)(nil)).Elem()
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput {
	return o
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingOutput {
	return o
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return o.ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Background())
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureConfigurationLogging) *InfrastructureConfigurationLogging {
		return &v
	}).(InfrastructureConfigurationLoggingPtrOutput)
}

func (o InfrastructureConfigurationLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationLogging] {
	return pulumix.Output[InfrastructureConfigurationLogging]{
		OutputState: o.OutputState,
	}
}

func (o InfrastructureConfigurationLoggingOutput) S3Logs() InfrastructureConfigurationS3LogsPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationLogging) *InfrastructureConfigurationS3Logs { return v.S3Logs }).(InfrastructureConfigurationS3LogsPtrOutput)
}

type InfrastructureConfigurationLoggingPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationLogging)(nil)).Elem()
}

func (o InfrastructureConfigurationLoggingPtrOutput) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return o
}

func (o InfrastructureConfigurationLoggingPtrOutput) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return o
}

func (o InfrastructureConfigurationLoggingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationLogging] {
	return pulumix.Output[*InfrastructureConfigurationLogging]{
		OutputState: o.OutputState,
	}
}

func (o InfrastructureConfigurationLoggingPtrOutput) Elem() InfrastructureConfigurationLoggingOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationLogging) InfrastructureConfigurationLogging {
		if v != nil {
			return *v
		}
		var ret InfrastructureConfigurationLogging
		return ret
	}).(InfrastructureConfigurationLoggingOutput)
}

func (o InfrastructureConfigurationLoggingPtrOutput) S3Logs() InfrastructureConfigurationS3LogsPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationLogging) *InfrastructureConfigurationS3Logs {
		if v == nil {
			return nil
		}
		return v.S3Logs
	}).(InfrastructureConfigurationS3LogsPtrOutput)
}

// The S3 path in which to store the logs.
type InfrastructureConfigurationS3Logs struct {
	// S3BucketName
	S3BucketName *string `pulumi:"s3BucketName"`
	// S3KeyPrefix
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

// InfrastructureConfigurationS3LogsInput is an input type that accepts InfrastructureConfigurationS3LogsArgs and InfrastructureConfigurationS3LogsOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationS3LogsInput` via:
//
//	InfrastructureConfigurationS3LogsArgs{...}
type InfrastructureConfigurationS3LogsInput interface {
	pulumi.Input

	ToInfrastructureConfigurationS3LogsOutput() InfrastructureConfigurationS3LogsOutput
	ToInfrastructureConfigurationS3LogsOutputWithContext(context.Context) InfrastructureConfigurationS3LogsOutput
}

// The S3 path in which to store the logs.
type InfrastructureConfigurationS3LogsArgs struct {
	// S3BucketName
	S3BucketName pulumi.StringPtrInput `pulumi:"s3BucketName"`
	// S3KeyPrefix
	S3KeyPrefix pulumi.StringPtrInput `pulumi:"s3KeyPrefix"`
}

func (InfrastructureConfigurationS3LogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsOutput() InfrastructureConfigurationS3LogsOutput {
	return i.ToInfrastructureConfigurationS3LogsOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationS3LogsOutput)
}

func (i InfrastructureConfigurationS3LogsArgs) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationS3Logs] {
	return pulumix.Output[InfrastructureConfigurationS3Logs]{
		OutputState: i.ToInfrastructureConfigurationS3LogsOutputWithContext(ctx).OutputState,
	}
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return i.ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationS3LogsOutput).ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx)
}

// InfrastructureConfigurationS3LogsPtrInput is an input type that accepts InfrastructureConfigurationS3LogsArgs, InfrastructureConfigurationS3LogsPtr and InfrastructureConfigurationS3LogsPtrOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationS3LogsPtrInput` via:
//
//	        InfrastructureConfigurationS3LogsArgs{...}
//
//	or:
//
//	        nil
type InfrastructureConfigurationS3LogsPtrInput interface {
	pulumi.Input

	ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput
	ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Context) InfrastructureConfigurationS3LogsPtrOutput
}

type infrastructureConfigurationS3LogsPtrType InfrastructureConfigurationS3LogsArgs

func InfrastructureConfigurationS3LogsPtr(v *InfrastructureConfigurationS3LogsArgs) InfrastructureConfigurationS3LogsPtrInput {
	return (*infrastructureConfigurationS3LogsPtrType)(v)
}

func (*infrastructureConfigurationS3LogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (i *infrastructureConfigurationS3LogsPtrType) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return i.ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Background())
}

func (i *infrastructureConfigurationS3LogsPtrType) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationS3LogsPtrOutput)
}

func (i *infrastructureConfigurationS3LogsPtrType) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationS3Logs] {
	return pulumix.Output[*InfrastructureConfigurationS3Logs]{
		OutputState: i.ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx).OutputState,
	}
}

// The S3 path in which to store the logs.
type InfrastructureConfigurationS3LogsOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationS3LogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsOutput() InfrastructureConfigurationS3LogsOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return o.ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Background())
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureConfigurationS3Logs) *InfrastructureConfigurationS3Logs {
		return &v
	}).(InfrastructureConfigurationS3LogsPtrOutput)
}

func (o InfrastructureConfigurationS3LogsOutput) ToOutput(ctx context.Context) pulumix.Output[InfrastructureConfigurationS3Logs] {
	return pulumix.Output[InfrastructureConfigurationS3Logs]{
		OutputState: o.OutputState,
	}
}

// S3BucketName
func (o InfrastructureConfigurationS3LogsOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationS3Logs) *string { return v.S3BucketName }).(pulumi.StringPtrOutput)
}

// S3KeyPrefix
func (o InfrastructureConfigurationS3LogsOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationS3Logs) *string { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

type InfrastructureConfigurationS3LogsPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationS3LogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (o InfrastructureConfigurationS3LogsPtrOutput) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsPtrOutput) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InfrastructureConfigurationS3Logs] {
	return pulumix.Output[*InfrastructureConfigurationS3Logs]{
		OutputState: o.OutputState,
	}
}

func (o InfrastructureConfigurationS3LogsPtrOutput) Elem() InfrastructureConfigurationS3LogsOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationS3Logs) InfrastructureConfigurationS3Logs {
		if v != nil {
			return *v
		}
		var ret InfrastructureConfigurationS3Logs
		return ret
	}).(InfrastructureConfigurationS3LogsOutput)
}

// S3BucketName
func (o InfrastructureConfigurationS3LogsPtrOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationS3Logs) *string {
		if v == nil {
			return nil
		}
		return v.S3BucketName
	}).(pulumi.StringPtrOutput)
}

// S3KeyPrefix
func (o InfrastructureConfigurationS3LogsPtrOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationS3Logs) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyPrefix
	}).(pulumi.StringPtrOutput)
}

// The action of the policy detail.
type LifecyclePolicyAction struct {
	IncludeResources *LifecyclePolicyIncludeResources `pulumi:"includeResources"`
	// The action type of the policy detail.
	Type LifecyclePolicyActionType `pulumi:"type"`
}

// LifecyclePolicyActionInput is an input type that accepts LifecyclePolicyActionArgs and LifecyclePolicyActionOutput values.
// You can construct a concrete instance of `LifecyclePolicyActionInput` via:
//
//	LifecyclePolicyActionArgs{...}
type LifecyclePolicyActionInput interface {
	pulumi.Input

	ToLifecyclePolicyActionOutput() LifecyclePolicyActionOutput
	ToLifecyclePolicyActionOutputWithContext(context.Context) LifecyclePolicyActionOutput
}

// The action of the policy detail.
type LifecyclePolicyActionArgs struct {
	IncludeResources LifecyclePolicyIncludeResourcesPtrInput `pulumi:"includeResources"`
	// The action type of the policy detail.
	Type LifecyclePolicyActionTypeInput `pulumi:"type"`
}

func (LifecyclePolicyActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyAction)(nil)).Elem()
}

func (i LifecyclePolicyActionArgs) ToLifecyclePolicyActionOutput() LifecyclePolicyActionOutput {
	return i.ToLifecyclePolicyActionOutputWithContext(context.Background())
}

func (i LifecyclePolicyActionArgs) ToLifecyclePolicyActionOutputWithContext(ctx context.Context) LifecyclePolicyActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyActionOutput)
}

func (i LifecyclePolicyActionArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyAction] {
	return pulumix.Output[LifecyclePolicyAction]{
		OutputState: i.ToLifecyclePolicyActionOutputWithContext(ctx).OutputState,
	}
}

// The action of the policy detail.
type LifecyclePolicyActionOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyAction)(nil)).Elem()
}

func (o LifecyclePolicyActionOutput) ToLifecyclePolicyActionOutput() LifecyclePolicyActionOutput {
	return o
}

func (o LifecyclePolicyActionOutput) ToLifecyclePolicyActionOutputWithContext(ctx context.Context) LifecyclePolicyActionOutput {
	return o
}

func (o LifecyclePolicyActionOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyAction] {
	return pulumix.Output[LifecyclePolicyAction]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyActionOutput) IncludeResources() LifecyclePolicyIncludeResourcesPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyAction) *LifecyclePolicyIncludeResources { return v.IncludeResources }).(LifecyclePolicyIncludeResourcesPtrOutput)
}

// The action type of the policy detail.
func (o LifecyclePolicyActionOutput) Type() LifecyclePolicyActionTypeOutput {
	return o.ApplyT(func(v LifecyclePolicyAction) LifecyclePolicyActionType { return v.Type }).(LifecyclePolicyActionTypeOutput)
}

// The AMI exclusion rules for the policy detail.
type LifecyclePolicyAmiExclusionRules struct {
	// Use to apply lifecycle policy actions on whether the AMI is public.
	IsPublic *bool `pulumi:"isPublic"`
	// Use to apply lifecycle policy actions on AMIs launched before a certain time.
	LastLaunched *LifecyclePolicyLastLaunched `pulumi:"lastLaunched"`
	// Use to apply lifecycle policy actions on AMIs distributed to a set of regions.
	Regions []string `pulumi:"regions"`
	// Use to apply lifecycle policy actions on AMIs shared with a set of regions.
	SharedAccounts []string `pulumi:"sharedAccounts"`
	// The AMIs to select by tag.
	TagMap interface{} `pulumi:"tagMap"`
}

// LifecyclePolicyAmiExclusionRulesInput is an input type that accepts LifecyclePolicyAmiExclusionRulesArgs and LifecyclePolicyAmiExclusionRulesOutput values.
// You can construct a concrete instance of `LifecyclePolicyAmiExclusionRulesInput` via:
//
//	LifecyclePolicyAmiExclusionRulesArgs{...}
type LifecyclePolicyAmiExclusionRulesInput interface {
	pulumi.Input

	ToLifecyclePolicyAmiExclusionRulesOutput() LifecyclePolicyAmiExclusionRulesOutput
	ToLifecyclePolicyAmiExclusionRulesOutputWithContext(context.Context) LifecyclePolicyAmiExclusionRulesOutput
}

// The AMI exclusion rules for the policy detail.
type LifecyclePolicyAmiExclusionRulesArgs struct {
	// Use to apply lifecycle policy actions on whether the AMI is public.
	IsPublic pulumi.BoolPtrInput `pulumi:"isPublic"`
	// Use to apply lifecycle policy actions on AMIs launched before a certain time.
	LastLaunched LifecyclePolicyLastLaunchedPtrInput `pulumi:"lastLaunched"`
	// Use to apply lifecycle policy actions on AMIs distributed to a set of regions.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// Use to apply lifecycle policy actions on AMIs shared with a set of regions.
	SharedAccounts pulumi.StringArrayInput `pulumi:"sharedAccounts"`
	// The AMIs to select by tag.
	TagMap pulumi.Input `pulumi:"tagMap"`
}

func (LifecyclePolicyAmiExclusionRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyAmiExclusionRules)(nil)).Elem()
}

func (i LifecyclePolicyAmiExclusionRulesArgs) ToLifecyclePolicyAmiExclusionRulesOutput() LifecyclePolicyAmiExclusionRulesOutput {
	return i.ToLifecyclePolicyAmiExclusionRulesOutputWithContext(context.Background())
}

func (i LifecyclePolicyAmiExclusionRulesArgs) ToLifecyclePolicyAmiExclusionRulesOutputWithContext(ctx context.Context) LifecyclePolicyAmiExclusionRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyAmiExclusionRulesOutput)
}

func (i LifecyclePolicyAmiExclusionRulesArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyAmiExclusionRules] {
	return pulumix.Output[LifecyclePolicyAmiExclusionRules]{
		OutputState: i.ToLifecyclePolicyAmiExclusionRulesOutputWithContext(ctx).OutputState,
	}
}

func (i LifecyclePolicyAmiExclusionRulesArgs) ToLifecyclePolicyAmiExclusionRulesPtrOutput() LifecyclePolicyAmiExclusionRulesPtrOutput {
	return i.ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(context.Background())
}

func (i LifecyclePolicyAmiExclusionRulesArgs) ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyAmiExclusionRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyAmiExclusionRulesOutput).ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(ctx)
}

// LifecyclePolicyAmiExclusionRulesPtrInput is an input type that accepts LifecyclePolicyAmiExclusionRulesArgs, LifecyclePolicyAmiExclusionRulesPtr and LifecyclePolicyAmiExclusionRulesPtrOutput values.
// You can construct a concrete instance of `LifecyclePolicyAmiExclusionRulesPtrInput` via:
//
//	        LifecyclePolicyAmiExclusionRulesArgs{...}
//
//	or:
//
//	        nil
type LifecyclePolicyAmiExclusionRulesPtrInput interface {
	pulumi.Input

	ToLifecyclePolicyAmiExclusionRulesPtrOutput() LifecyclePolicyAmiExclusionRulesPtrOutput
	ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(context.Context) LifecyclePolicyAmiExclusionRulesPtrOutput
}

type lifecyclePolicyAmiExclusionRulesPtrType LifecyclePolicyAmiExclusionRulesArgs

func LifecyclePolicyAmiExclusionRulesPtr(v *LifecyclePolicyAmiExclusionRulesArgs) LifecyclePolicyAmiExclusionRulesPtrInput {
	return (*lifecyclePolicyAmiExclusionRulesPtrType)(v)
}

func (*lifecyclePolicyAmiExclusionRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyAmiExclusionRules)(nil)).Elem()
}

func (i *lifecyclePolicyAmiExclusionRulesPtrType) ToLifecyclePolicyAmiExclusionRulesPtrOutput() LifecyclePolicyAmiExclusionRulesPtrOutput {
	return i.ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(context.Background())
}

func (i *lifecyclePolicyAmiExclusionRulesPtrType) ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyAmiExclusionRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyAmiExclusionRulesPtrOutput)
}

func (i *lifecyclePolicyAmiExclusionRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyAmiExclusionRules] {
	return pulumix.Output[*LifecyclePolicyAmiExclusionRules]{
		OutputState: i.ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(ctx).OutputState,
	}
}

// The AMI exclusion rules for the policy detail.
type LifecyclePolicyAmiExclusionRulesOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyAmiExclusionRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyAmiExclusionRules)(nil)).Elem()
}

func (o LifecyclePolicyAmiExclusionRulesOutput) ToLifecyclePolicyAmiExclusionRulesOutput() LifecyclePolicyAmiExclusionRulesOutput {
	return o
}

func (o LifecyclePolicyAmiExclusionRulesOutput) ToLifecyclePolicyAmiExclusionRulesOutputWithContext(ctx context.Context) LifecyclePolicyAmiExclusionRulesOutput {
	return o
}

func (o LifecyclePolicyAmiExclusionRulesOutput) ToLifecyclePolicyAmiExclusionRulesPtrOutput() LifecyclePolicyAmiExclusionRulesPtrOutput {
	return o.ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(context.Background())
}

func (o LifecyclePolicyAmiExclusionRulesOutput) ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyAmiExclusionRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecyclePolicyAmiExclusionRules) *LifecyclePolicyAmiExclusionRules {
		return &v
	}).(LifecyclePolicyAmiExclusionRulesPtrOutput)
}

func (o LifecyclePolicyAmiExclusionRulesOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyAmiExclusionRules] {
	return pulumix.Output[LifecyclePolicyAmiExclusionRules]{
		OutputState: o.OutputState,
	}
}

// Use to apply lifecycle policy actions on whether the AMI is public.
func (o LifecyclePolicyAmiExclusionRulesOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyAmiExclusionRules) *bool { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

// Use to apply lifecycle policy actions on AMIs launched before a certain time.
func (o LifecyclePolicyAmiExclusionRulesOutput) LastLaunched() LifecyclePolicyLastLaunchedPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyAmiExclusionRules) *LifecyclePolicyLastLaunched { return v.LastLaunched }).(LifecyclePolicyLastLaunchedPtrOutput)
}

// Use to apply lifecycle policy actions on AMIs distributed to a set of regions.
func (o LifecyclePolicyAmiExclusionRulesOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LifecyclePolicyAmiExclusionRules) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// Use to apply lifecycle policy actions on AMIs shared with a set of regions.
func (o LifecyclePolicyAmiExclusionRulesOutput) SharedAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LifecyclePolicyAmiExclusionRules) []string { return v.SharedAccounts }).(pulumi.StringArrayOutput)
}

// The AMIs to select by tag.
func (o LifecyclePolicyAmiExclusionRulesOutput) TagMap() pulumi.AnyOutput {
	return o.ApplyT(func(v LifecyclePolicyAmiExclusionRules) interface{} { return v.TagMap }).(pulumi.AnyOutput)
}

type LifecyclePolicyAmiExclusionRulesPtrOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyAmiExclusionRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyAmiExclusionRules)(nil)).Elem()
}

func (o LifecyclePolicyAmiExclusionRulesPtrOutput) ToLifecyclePolicyAmiExclusionRulesPtrOutput() LifecyclePolicyAmiExclusionRulesPtrOutput {
	return o
}

func (o LifecyclePolicyAmiExclusionRulesPtrOutput) ToLifecyclePolicyAmiExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyAmiExclusionRulesPtrOutput {
	return o
}

func (o LifecyclePolicyAmiExclusionRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyAmiExclusionRules] {
	return pulumix.Output[*LifecyclePolicyAmiExclusionRules]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyAmiExclusionRulesPtrOutput) Elem() LifecyclePolicyAmiExclusionRulesOutput {
	return o.ApplyT(func(v *LifecyclePolicyAmiExclusionRules) LifecyclePolicyAmiExclusionRules {
		if v != nil {
			return *v
		}
		var ret LifecyclePolicyAmiExclusionRules
		return ret
	}).(LifecyclePolicyAmiExclusionRulesOutput)
}

// Use to apply lifecycle policy actions on whether the AMI is public.
func (o LifecyclePolicyAmiExclusionRulesPtrOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyAmiExclusionRules) *bool {
		if v == nil {
			return nil
		}
		return v.IsPublic
	}).(pulumi.BoolPtrOutput)
}

// Use to apply lifecycle policy actions on AMIs launched before a certain time.
func (o LifecyclePolicyAmiExclusionRulesPtrOutput) LastLaunched() LifecyclePolicyLastLaunchedPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyAmiExclusionRules) *LifecyclePolicyLastLaunched {
		if v == nil {
			return nil
		}
		return v.LastLaunched
	}).(LifecyclePolicyLastLaunchedPtrOutput)
}

// Use to apply lifecycle policy actions on AMIs distributed to a set of regions.
func (o LifecyclePolicyAmiExclusionRulesPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LifecyclePolicyAmiExclusionRules) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// Use to apply lifecycle policy actions on AMIs shared with a set of regions.
func (o LifecyclePolicyAmiExclusionRulesPtrOutput) SharedAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LifecyclePolicyAmiExclusionRules) []string {
		if v == nil {
			return nil
		}
		return v.SharedAccounts
	}).(pulumi.StringArrayOutput)
}

// The AMIs to select by tag.
func (o LifecyclePolicyAmiExclusionRulesPtrOutput) TagMap() pulumi.AnyOutput {
	return o.ApplyT(func(v *LifecyclePolicyAmiExclusionRules) interface{} {
		if v == nil {
			return nil
		}
		return v.TagMap
	}).(pulumi.AnyOutput)
}

// The exclusion rules to apply of the policy detail.
type LifecyclePolicyExclusionRules struct {
	Amis *LifecyclePolicyAmiExclusionRules `pulumi:"amis"`
	// The Image Builder tags to filter on.
	TagMap interface{} `pulumi:"tagMap"`
}

// LifecyclePolicyExclusionRulesInput is an input type that accepts LifecyclePolicyExclusionRulesArgs and LifecyclePolicyExclusionRulesOutput values.
// You can construct a concrete instance of `LifecyclePolicyExclusionRulesInput` via:
//
//	LifecyclePolicyExclusionRulesArgs{...}
type LifecyclePolicyExclusionRulesInput interface {
	pulumi.Input

	ToLifecyclePolicyExclusionRulesOutput() LifecyclePolicyExclusionRulesOutput
	ToLifecyclePolicyExclusionRulesOutputWithContext(context.Context) LifecyclePolicyExclusionRulesOutput
}

// The exclusion rules to apply of the policy detail.
type LifecyclePolicyExclusionRulesArgs struct {
	Amis LifecyclePolicyAmiExclusionRulesPtrInput `pulumi:"amis"`
	// The Image Builder tags to filter on.
	TagMap pulumi.Input `pulumi:"tagMap"`
}

func (LifecyclePolicyExclusionRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyExclusionRules)(nil)).Elem()
}

func (i LifecyclePolicyExclusionRulesArgs) ToLifecyclePolicyExclusionRulesOutput() LifecyclePolicyExclusionRulesOutput {
	return i.ToLifecyclePolicyExclusionRulesOutputWithContext(context.Background())
}

func (i LifecyclePolicyExclusionRulesArgs) ToLifecyclePolicyExclusionRulesOutputWithContext(ctx context.Context) LifecyclePolicyExclusionRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyExclusionRulesOutput)
}

func (i LifecyclePolicyExclusionRulesArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyExclusionRules] {
	return pulumix.Output[LifecyclePolicyExclusionRules]{
		OutputState: i.ToLifecyclePolicyExclusionRulesOutputWithContext(ctx).OutputState,
	}
}

func (i LifecyclePolicyExclusionRulesArgs) ToLifecyclePolicyExclusionRulesPtrOutput() LifecyclePolicyExclusionRulesPtrOutput {
	return i.ToLifecyclePolicyExclusionRulesPtrOutputWithContext(context.Background())
}

func (i LifecyclePolicyExclusionRulesArgs) ToLifecyclePolicyExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyExclusionRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyExclusionRulesOutput).ToLifecyclePolicyExclusionRulesPtrOutputWithContext(ctx)
}

// LifecyclePolicyExclusionRulesPtrInput is an input type that accepts LifecyclePolicyExclusionRulesArgs, LifecyclePolicyExclusionRulesPtr and LifecyclePolicyExclusionRulesPtrOutput values.
// You can construct a concrete instance of `LifecyclePolicyExclusionRulesPtrInput` via:
//
//	        LifecyclePolicyExclusionRulesArgs{...}
//
//	or:
//
//	        nil
type LifecyclePolicyExclusionRulesPtrInput interface {
	pulumi.Input

	ToLifecyclePolicyExclusionRulesPtrOutput() LifecyclePolicyExclusionRulesPtrOutput
	ToLifecyclePolicyExclusionRulesPtrOutputWithContext(context.Context) LifecyclePolicyExclusionRulesPtrOutput
}

type lifecyclePolicyExclusionRulesPtrType LifecyclePolicyExclusionRulesArgs

func LifecyclePolicyExclusionRulesPtr(v *LifecyclePolicyExclusionRulesArgs) LifecyclePolicyExclusionRulesPtrInput {
	return (*lifecyclePolicyExclusionRulesPtrType)(v)
}

func (*lifecyclePolicyExclusionRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyExclusionRules)(nil)).Elem()
}

func (i *lifecyclePolicyExclusionRulesPtrType) ToLifecyclePolicyExclusionRulesPtrOutput() LifecyclePolicyExclusionRulesPtrOutput {
	return i.ToLifecyclePolicyExclusionRulesPtrOutputWithContext(context.Background())
}

func (i *lifecyclePolicyExclusionRulesPtrType) ToLifecyclePolicyExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyExclusionRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyExclusionRulesPtrOutput)
}

func (i *lifecyclePolicyExclusionRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyExclusionRules] {
	return pulumix.Output[*LifecyclePolicyExclusionRules]{
		OutputState: i.ToLifecyclePolicyExclusionRulesPtrOutputWithContext(ctx).OutputState,
	}
}

// The exclusion rules to apply of the policy detail.
type LifecyclePolicyExclusionRulesOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyExclusionRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyExclusionRules)(nil)).Elem()
}

func (o LifecyclePolicyExclusionRulesOutput) ToLifecyclePolicyExclusionRulesOutput() LifecyclePolicyExclusionRulesOutput {
	return o
}

func (o LifecyclePolicyExclusionRulesOutput) ToLifecyclePolicyExclusionRulesOutputWithContext(ctx context.Context) LifecyclePolicyExclusionRulesOutput {
	return o
}

func (o LifecyclePolicyExclusionRulesOutput) ToLifecyclePolicyExclusionRulesPtrOutput() LifecyclePolicyExclusionRulesPtrOutput {
	return o.ToLifecyclePolicyExclusionRulesPtrOutputWithContext(context.Background())
}

func (o LifecyclePolicyExclusionRulesOutput) ToLifecyclePolicyExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyExclusionRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecyclePolicyExclusionRules) *LifecyclePolicyExclusionRules {
		return &v
	}).(LifecyclePolicyExclusionRulesPtrOutput)
}

func (o LifecyclePolicyExclusionRulesOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyExclusionRules] {
	return pulumix.Output[LifecyclePolicyExclusionRules]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyExclusionRulesOutput) Amis() LifecyclePolicyAmiExclusionRulesPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyExclusionRules) *LifecyclePolicyAmiExclusionRules { return v.Amis }).(LifecyclePolicyAmiExclusionRulesPtrOutput)
}

// The Image Builder tags to filter on.
func (o LifecyclePolicyExclusionRulesOutput) TagMap() pulumi.AnyOutput {
	return o.ApplyT(func(v LifecyclePolicyExclusionRules) interface{} { return v.TagMap }).(pulumi.AnyOutput)
}

type LifecyclePolicyExclusionRulesPtrOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyExclusionRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyExclusionRules)(nil)).Elem()
}

func (o LifecyclePolicyExclusionRulesPtrOutput) ToLifecyclePolicyExclusionRulesPtrOutput() LifecyclePolicyExclusionRulesPtrOutput {
	return o
}

func (o LifecyclePolicyExclusionRulesPtrOutput) ToLifecyclePolicyExclusionRulesPtrOutputWithContext(ctx context.Context) LifecyclePolicyExclusionRulesPtrOutput {
	return o
}

func (o LifecyclePolicyExclusionRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyExclusionRules] {
	return pulumix.Output[*LifecyclePolicyExclusionRules]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyExclusionRulesPtrOutput) Elem() LifecyclePolicyExclusionRulesOutput {
	return o.ApplyT(func(v *LifecyclePolicyExclusionRules) LifecyclePolicyExclusionRules {
		if v != nil {
			return *v
		}
		var ret LifecyclePolicyExclusionRules
		return ret
	}).(LifecyclePolicyExclusionRulesOutput)
}

func (o LifecyclePolicyExclusionRulesPtrOutput) Amis() LifecyclePolicyAmiExclusionRulesPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyExclusionRules) *LifecyclePolicyAmiExclusionRules {
		if v == nil {
			return nil
		}
		return v.Amis
	}).(LifecyclePolicyAmiExclusionRulesPtrOutput)
}

// The Image Builder tags to filter on.
func (o LifecyclePolicyExclusionRulesPtrOutput) TagMap() pulumi.AnyOutput {
	return o.ApplyT(func(v *LifecyclePolicyExclusionRules) interface{} {
		if v == nil {
			return nil
		}
		return v.TagMap
	}).(pulumi.AnyOutput)
}

// The filters to apply of the policy detail.
type LifecyclePolicyFilter struct {
	// The minimum number of Image Builder resources to retain.
	RetainAtLeast *int `pulumi:"retainAtLeast"`
	// The filter type.
	Type LifecyclePolicyFilterType `pulumi:"type"`
	// The value's time unit.
	Unit *LifecyclePolicyTimeUnit `pulumi:"unit"`
	// The filter value.
	Value int `pulumi:"value"`
}

// LifecyclePolicyFilterInput is an input type that accepts LifecyclePolicyFilterArgs and LifecyclePolicyFilterOutput values.
// You can construct a concrete instance of `LifecyclePolicyFilterInput` via:
//
//	LifecyclePolicyFilterArgs{...}
type LifecyclePolicyFilterInput interface {
	pulumi.Input

	ToLifecyclePolicyFilterOutput() LifecyclePolicyFilterOutput
	ToLifecyclePolicyFilterOutputWithContext(context.Context) LifecyclePolicyFilterOutput
}

// The filters to apply of the policy detail.
type LifecyclePolicyFilterArgs struct {
	// The minimum number of Image Builder resources to retain.
	RetainAtLeast pulumi.IntPtrInput `pulumi:"retainAtLeast"`
	// The filter type.
	Type LifecyclePolicyFilterTypeInput `pulumi:"type"`
	// The value's time unit.
	Unit LifecyclePolicyTimeUnitPtrInput `pulumi:"unit"`
	// The filter value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (LifecyclePolicyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyFilter)(nil)).Elem()
}

func (i LifecyclePolicyFilterArgs) ToLifecyclePolicyFilterOutput() LifecyclePolicyFilterOutput {
	return i.ToLifecyclePolicyFilterOutputWithContext(context.Background())
}

func (i LifecyclePolicyFilterArgs) ToLifecyclePolicyFilterOutputWithContext(ctx context.Context) LifecyclePolicyFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyFilterOutput)
}

func (i LifecyclePolicyFilterArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyFilter] {
	return pulumix.Output[LifecyclePolicyFilter]{
		OutputState: i.ToLifecyclePolicyFilterOutputWithContext(ctx).OutputState,
	}
}

// The filters to apply of the policy detail.
type LifecyclePolicyFilterOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyFilter)(nil)).Elem()
}

func (o LifecyclePolicyFilterOutput) ToLifecyclePolicyFilterOutput() LifecyclePolicyFilterOutput {
	return o
}

func (o LifecyclePolicyFilterOutput) ToLifecyclePolicyFilterOutputWithContext(ctx context.Context) LifecyclePolicyFilterOutput {
	return o
}

func (o LifecyclePolicyFilterOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyFilter] {
	return pulumix.Output[LifecyclePolicyFilter]{
		OutputState: o.OutputState,
	}
}

// The minimum number of Image Builder resources to retain.
func (o LifecyclePolicyFilterOutput) RetainAtLeast() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyFilter) *int { return v.RetainAtLeast }).(pulumi.IntPtrOutput)
}

// The filter type.
func (o LifecyclePolicyFilterOutput) Type() LifecyclePolicyFilterTypeOutput {
	return o.ApplyT(func(v LifecyclePolicyFilter) LifecyclePolicyFilterType { return v.Type }).(LifecyclePolicyFilterTypeOutput)
}

// The value's time unit.
func (o LifecyclePolicyFilterOutput) Unit() LifecyclePolicyTimeUnitPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyFilter) *LifecyclePolicyTimeUnit { return v.Unit }).(LifecyclePolicyTimeUnitPtrOutput)
}

// The filter value.
func (o LifecyclePolicyFilterOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v LifecyclePolicyFilter) int { return v.Value }).(pulumi.IntOutput)
}

// The included resources of the policy detail.
type LifecyclePolicyIncludeResources struct {
	// Use to configure lifecycle actions on AMIs.
	Amis *bool `pulumi:"amis"`
	// Use to configure lifecycle actions on containers.
	Containers *bool `pulumi:"containers"`
	// Use to configure lifecycle actions on snapshots.
	Snapshots *bool `pulumi:"snapshots"`
}

// LifecyclePolicyIncludeResourcesInput is an input type that accepts LifecyclePolicyIncludeResourcesArgs and LifecyclePolicyIncludeResourcesOutput values.
// You can construct a concrete instance of `LifecyclePolicyIncludeResourcesInput` via:
//
//	LifecyclePolicyIncludeResourcesArgs{...}
type LifecyclePolicyIncludeResourcesInput interface {
	pulumi.Input

	ToLifecyclePolicyIncludeResourcesOutput() LifecyclePolicyIncludeResourcesOutput
	ToLifecyclePolicyIncludeResourcesOutputWithContext(context.Context) LifecyclePolicyIncludeResourcesOutput
}

// The included resources of the policy detail.
type LifecyclePolicyIncludeResourcesArgs struct {
	// Use to configure lifecycle actions on AMIs.
	Amis pulumi.BoolPtrInput `pulumi:"amis"`
	// Use to configure lifecycle actions on containers.
	Containers pulumi.BoolPtrInput `pulumi:"containers"`
	// Use to configure lifecycle actions on snapshots.
	Snapshots pulumi.BoolPtrInput `pulumi:"snapshots"`
}

func (LifecyclePolicyIncludeResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyIncludeResources)(nil)).Elem()
}

func (i LifecyclePolicyIncludeResourcesArgs) ToLifecyclePolicyIncludeResourcesOutput() LifecyclePolicyIncludeResourcesOutput {
	return i.ToLifecyclePolicyIncludeResourcesOutputWithContext(context.Background())
}

func (i LifecyclePolicyIncludeResourcesArgs) ToLifecyclePolicyIncludeResourcesOutputWithContext(ctx context.Context) LifecyclePolicyIncludeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyIncludeResourcesOutput)
}

func (i LifecyclePolicyIncludeResourcesArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyIncludeResources] {
	return pulumix.Output[LifecyclePolicyIncludeResources]{
		OutputState: i.ToLifecyclePolicyIncludeResourcesOutputWithContext(ctx).OutputState,
	}
}

func (i LifecyclePolicyIncludeResourcesArgs) ToLifecyclePolicyIncludeResourcesPtrOutput() LifecyclePolicyIncludeResourcesPtrOutput {
	return i.ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(context.Background())
}

func (i LifecyclePolicyIncludeResourcesArgs) ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(ctx context.Context) LifecyclePolicyIncludeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyIncludeResourcesOutput).ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(ctx)
}

// LifecyclePolicyIncludeResourcesPtrInput is an input type that accepts LifecyclePolicyIncludeResourcesArgs, LifecyclePolicyIncludeResourcesPtr and LifecyclePolicyIncludeResourcesPtrOutput values.
// You can construct a concrete instance of `LifecyclePolicyIncludeResourcesPtrInput` via:
//
//	        LifecyclePolicyIncludeResourcesArgs{...}
//
//	or:
//
//	        nil
type LifecyclePolicyIncludeResourcesPtrInput interface {
	pulumi.Input

	ToLifecyclePolicyIncludeResourcesPtrOutput() LifecyclePolicyIncludeResourcesPtrOutput
	ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(context.Context) LifecyclePolicyIncludeResourcesPtrOutput
}

type lifecyclePolicyIncludeResourcesPtrType LifecyclePolicyIncludeResourcesArgs

func LifecyclePolicyIncludeResourcesPtr(v *LifecyclePolicyIncludeResourcesArgs) LifecyclePolicyIncludeResourcesPtrInput {
	return (*lifecyclePolicyIncludeResourcesPtrType)(v)
}

func (*lifecyclePolicyIncludeResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyIncludeResources)(nil)).Elem()
}

func (i *lifecyclePolicyIncludeResourcesPtrType) ToLifecyclePolicyIncludeResourcesPtrOutput() LifecyclePolicyIncludeResourcesPtrOutput {
	return i.ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(context.Background())
}

func (i *lifecyclePolicyIncludeResourcesPtrType) ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(ctx context.Context) LifecyclePolicyIncludeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyIncludeResourcesPtrOutput)
}

func (i *lifecyclePolicyIncludeResourcesPtrType) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyIncludeResources] {
	return pulumix.Output[*LifecyclePolicyIncludeResources]{
		OutputState: i.ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(ctx).OutputState,
	}
}

// The included resources of the policy detail.
type LifecyclePolicyIncludeResourcesOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyIncludeResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyIncludeResources)(nil)).Elem()
}

func (o LifecyclePolicyIncludeResourcesOutput) ToLifecyclePolicyIncludeResourcesOutput() LifecyclePolicyIncludeResourcesOutput {
	return o
}

func (o LifecyclePolicyIncludeResourcesOutput) ToLifecyclePolicyIncludeResourcesOutputWithContext(ctx context.Context) LifecyclePolicyIncludeResourcesOutput {
	return o
}

func (o LifecyclePolicyIncludeResourcesOutput) ToLifecyclePolicyIncludeResourcesPtrOutput() LifecyclePolicyIncludeResourcesPtrOutput {
	return o.ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(context.Background())
}

func (o LifecyclePolicyIncludeResourcesOutput) ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(ctx context.Context) LifecyclePolicyIncludeResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecyclePolicyIncludeResources) *LifecyclePolicyIncludeResources {
		return &v
	}).(LifecyclePolicyIncludeResourcesPtrOutput)
}

func (o LifecyclePolicyIncludeResourcesOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyIncludeResources] {
	return pulumix.Output[LifecyclePolicyIncludeResources]{
		OutputState: o.OutputState,
	}
}

// Use to configure lifecycle actions on AMIs.
func (o LifecyclePolicyIncludeResourcesOutput) Amis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyIncludeResources) *bool { return v.Amis }).(pulumi.BoolPtrOutput)
}

// Use to configure lifecycle actions on containers.
func (o LifecyclePolicyIncludeResourcesOutput) Containers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyIncludeResources) *bool { return v.Containers }).(pulumi.BoolPtrOutput)
}

// Use to configure lifecycle actions on snapshots.
func (o LifecyclePolicyIncludeResourcesOutput) Snapshots() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyIncludeResources) *bool { return v.Snapshots }).(pulumi.BoolPtrOutput)
}

type LifecyclePolicyIncludeResourcesPtrOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyIncludeResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyIncludeResources)(nil)).Elem()
}

func (o LifecyclePolicyIncludeResourcesPtrOutput) ToLifecyclePolicyIncludeResourcesPtrOutput() LifecyclePolicyIncludeResourcesPtrOutput {
	return o
}

func (o LifecyclePolicyIncludeResourcesPtrOutput) ToLifecyclePolicyIncludeResourcesPtrOutputWithContext(ctx context.Context) LifecyclePolicyIncludeResourcesPtrOutput {
	return o
}

func (o LifecyclePolicyIncludeResourcesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyIncludeResources] {
	return pulumix.Output[*LifecyclePolicyIncludeResources]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyIncludeResourcesPtrOutput) Elem() LifecyclePolicyIncludeResourcesOutput {
	return o.ApplyT(func(v *LifecyclePolicyIncludeResources) LifecyclePolicyIncludeResources {
		if v != nil {
			return *v
		}
		var ret LifecyclePolicyIncludeResources
		return ret
	}).(LifecyclePolicyIncludeResourcesOutput)
}

// Use to configure lifecycle actions on AMIs.
func (o LifecyclePolicyIncludeResourcesPtrOutput) Amis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyIncludeResources) *bool {
		if v == nil {
			return nil
		}
		return v.Amis
	}).(pulumi.BoolPtrOutput)
}

// Use to configure lifecycle actions on containers.
func (o LifecyclePolicyIncludeResourcesPtrOutput) Containers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyIncludeResources) *bool {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(pulumi.BoolPtrOutput)
}

// Use to configure lifecycle actions on snapshots.
func (o LifecyclePolicyIncludeResourcesPtrOutput) Snapshots() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyIncludeResources) *bool {
		if v == nil {
			return nil
		}
		return v.Snapshots
	}).(pulumi.BoolPtrOutput)
}

// The last launched time of a resource.
type LifecyclePolicyLastLaunched struct {
	// The value's time unit.
	Unit LifecyclePolicyTimeUnit `pulumi:"unit"`
	// The last launched value.
	Value int `pulumi:"value"`
}

// LifecyclePolicyLastLaunchedInput is an input type that accepts LifecyclePolicyLastLaunchedArgs and LifecyclePolicyLastLaunchedOutput values.
// You can construct a concrete instance of `LifecyclePolicyLastLaunchedInput` via:
//
//	LifecyclePolicyLastLaunchedArgs{...}
type LifecyclePolicyLastLaunchedInput interface {
	pulumi.Input

	ToLifecyclePolicyLastLaunchedOutput() LifecyclePolicyLastLaunchedOutput
	ToLifecyclePolicyLastLaunchedOutputWithContext(context.Context) LifecyclePolicyLastLaunchedOutput
}

// The last launched time of a resource.
type LifecyclePolicyLastLaunchedArgs struct {
	// The value's time unit.
	Unit LifecyclePolicyTimeUnitInput `pulumi:"unit"`
	// The last launched value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (LifecyclePolicyLastLaunchedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyLastLaunched)(nil)).Elem()
}

func (i LifecyclePolicyLastLaunchedArgs) ToLifecyclePolicyLastLaunchedOutput() LifecyclePolicyLastLaunchedOutput {
	return i.ToLifecyclePolicyLastLaunchedOutputWithContext(context.Background())
}

func (i LifecyclePolicyLastLaunchedArgs) ToLifecyclePolicyLastLaunchedOutputWithContext(ctx context.Context) LifecyclePolicyLastLaunchedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyLastLaunchedOutput)
}

func (i LifecyclePolicyLastLaunchedArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyLastLaunched] {
	return pulumix.Output[LifecyclePolicyLastLaunched]{
		OutputState: i.ToLifecyclePolicyLastLaunchedOutputWithContext(ctx).OutputState,
	}
}

func (i LifecyclePolicyLastLaunchedArgs) ToLifecyclePolicyLastLaunchedPtrOutput() LifecyclePolicyLastLaunchedPtrOutput {
	return i.ToLifecyclePolicyLastLaunchedPtrOutputWithContext(context.Background())
}

func (i LifecyclePolicyLastLaunchedArgs) ToLifecyclePolicyLastLaunchedPtrOutputWithContext(ctx context.Context) LifecyclePolicyLastLaunchedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyLastLaunchedOutput).ToLifecyclePolicyLastLaunchedPtrOutputWithContext(ctx)
}

// LifecyclePolicyLastLaunchedPtrInput is an input type that accepts LifecyclePolicyLastLaunchedArgs, LifecyclePolicyLastLaunchedPtr and LifecyclePolicyLastLaunchedPtrOutput values.
// You can construct a concrete instance of `LifecyclePolicyLastLaunchedPtrInput` via:
//
//	        LifecyclePolicyLastLaunchedArgs{...}
//
//	or:
//
//	        nil
type LifecyclePolicyLastLaunchedPtrInput interface {
	pulumi.Input

	ToLifecyclePolicyLastLaunchedPtrOutput() LifecyclePolicyLastLaunchedPtrOutput
	ToLifecyclePolicyLastLaunchedPtrOutputWithContext(context.Context) LifecyclePolicyLastLaunchedPtrOutput
}

type lifecyclePolicyLastLaunchedPtrType LifecyclePolicyLastLaunchedArgs

func LifecyclePolicyLastLaunchedPtr(v *LifecyclePolicyLastLaunchedArgs) LifecyclePolicyLastLaunchedPtrInput {
	return (*lifecyclePolicyLastLaunchedPtrType)(v)
}

func (*lifecyclePolicyLastLaunchedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyLastLaunched)(nil)).Elem()
}

func (i *lifecyclePolicyLastLaunchedPtrType) ToLifecyclePolicyLastLaunchedPtrOutput() LifecyclePolicyLastLaunchedPtrOutput {
	return i.ToLifecyclePolicyLastLaunchedPtrOutputWithContext(context.Background())
}

func (i *lifecyclePolicyLastLaunchedPtrType) ToLifecyclePolicyLastLaunchedPtrOutputWithContext(ctx context.Context) LifecyclePolicyLastLaunchedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyLastLaunchedPtrOutput)
}

func (i *lifecyclePolicyLastLaunchedPtrType) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyLastLaunched] {
	return pulumix.Output[*LifecyclePolicyLastLaunched]{
		OutputState: i.ToLifecyclePolicyLastLaunchedPtrOutputWithContext(ctx).OutputState,
	}
}

// The last launched time of a resource.
type LifecyclePolicyLastLaunchedOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyLastLaunchedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyLastLaunched)(nil)).Elem()
}

func (o LifecyclePolicyLastLaunchedOutput) ToLifecyclePolicyLastLaunchedOutput() LifecyclePolicyLastLaunchedOutput {
	return o
}

func (o LifecyclePolicyLastLaunchedOutput) ToLifecyclePolicyLastLaunchedOutputWithContext(ctx context.Context) LifecyclePolicyLastLaunchedOutput {
	return o
}

func (o LifecyclePolicyLastLaunchedOutput) ToLifecyclePolicyLastLaunchedPtrOutput() LifecyclePolicyLastLaunchedPtrOutput {
	return o.ToLifecyclePolicyLastLaunchedPtrOutputWithContext(context.Background())
}

func (o LifecyclePolicyLastLaunchedOutput) ToLifecyclePolicyLastLaunchedPtrOutputWithContext(ctx context.Context) LifecyclePolicyLastLaunchedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecyclePolicyLastLaunched) *LifecyclePolicyLastLaunched {
		return &v
	}).(LifecyclePolicyLastLaunchedPtrOutput)
}

func (o LifecyclePolicyLastLaunchedOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyLastLaunched] {
	return pulumix.Output[LifecyclePolicyLastLaunched]{
		OutputState: o.OutputState,
	}
}

// The value's time unit.
func (o LifecyclePolicyLastLaunchedOutput) Unit() LifecyclePolicyTimeUnitOutput {
	return o.ApplyT(func(v LifecyclePolicyLastLaunched) LifecyclePolicyTimeUnit { return v.Unit }).(LifecyclePolicyTimeUnitOutput)
}

// The last launched value.
func (o LifecyclePolicyLastLaunchedOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v LifecyclePolicyLastLaunched) int { return v.Value }).(pulumi.IntOutput)
}

type LifecyclePolicyLastLaunchedPtrOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyLastLaunchedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyLastLaunched)(nil)).Elem()
}

func (o LifecyclePolicyLastLaunchedPtrOutput) ToLifecyclePolicyLastLaunchedPtrOutput() LifecyclePolicyLastLaunchedPtrOutput {
	return o
}

func (o LifecyclePolicyLastLaunchedPtrOutput) ToLifecyclePolicyLastLaunchedPtrOutputWithContext(ctx context.Context) LifecyclePolicyLastLaunchedPtrOutput {
	return o
}

func (o LifecyclePolicyLastLaunchedPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyLastLaunched] {
	return pulumix.Output[*LifecyclePolicyLastLaunched]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyLastLaunchedPtrOutput) Elem() LifecyclePolicyLastLaunchedOutput {
	return o.ApplyT(func(v *LifecyclePolicyLastLaunched) LifecyclePolicyLastLaunched {
		if v != nil {
			return *v
		}
		var ret LifecyclePolicyLastLaunched
		return ret
	}).(LifecyclePolicyLastLaunchedOutput)
}

// The value's time unit.
func (o LifecyclePolicyLastLaunchedPtrOutput) Unit() LifecyclePolicyTimeUnitPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyLastLaunched) *LifecyclePolicyTimeUnit {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(LifecyclePolicyTimeUnitPtrOutput)
}

// The last launched value.
func (o LifecyclePolicyLastLaunchedPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LifecyclePolicyLastLaunched) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// The policy detail of the lifecycle policy.
type LifecyclePolicyPolicyDetail struct {
	Action         LifecyclePolicyAction          `pulumi:"action"`
	ExclusionRules *LifecyclePolicyExclusionRules `pulumi:"exclusionRules"`
	Filter         LifecyclePolicyFilter          `pulumi:"filter"`
}

// LifecyclePolicyPolicyDetailInput is an input type that accepts LifecyclePolicyPolicyDetailArgs and LifecyclePolicyPolicyDetailOutput values.
// You can construct a concrete instance of `LifecyclePolicyPolicyDetailInput` via:
//
//	LifecyclePolicyPolicyDetailArgs{...}
type LifecyclePolicyPolicyDetailInput interface {
	pulumi.Input

	ToLifecyclePolicyPolicyDetailOutput() LifecyclePolicyPolicyDetailOutput
	ToLifecyclePolicyPolicyDetailOutputWithContext(context.Context) LifecyclePolicyPolicyDetailOutput
}

// The policy detail of the lifecycle policy.
type LifecyclePolicyPolicyDetailArgs struct {
	Action         LifecyclePolicyActionInput            `pulumi:"action"`
	ExclusionRules LifecyclePolicyExclusionRulesPtrInput `pulumi:"exclusionRules"`
	Filter         LifecyclePolicyFilterInput            `pulumi:"filter"`
}

func (LifecyclePolicyPolicyDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetail)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailArgs) ToLifecyclePolicyPolicyDetailOutput() LifecyclePolicyPolicyDetailOutput {
	return i.ToLifecyclePolicyPolicyDetailOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailArgs) ToLifecyclePolicyPolicyDetailOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailOutput)
}

func (i LifecyclePolicyPolicyDetailArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetail] {
	return pulumix.Output[LifecyclePolicyPolicyDetail]{
		OutputState: i.ToLifecyclePolicyPolicyDetailOutputWithContext(ctx).OutputState,
	}
}

// LifecyclePolicyPolicyDetailArrayInput is an input type that accepts LifecyclePolicyPolicyDetailArray and LifecyclePolicyPolicyDetailArrayOutput values.
// You can construct a concrete instance of `LifecyclePolicyPolicyDetailArrayInput` via:
//
//	LifecyclePolicyPolicyDetailArray{ LifecyclePolicyPolicyDetailArgs{...} }
type LifecyclePolicyPolicyDetailArrayInput interface {
	pulumi.Input

	ToLifecyclePolicyPolicyDetailArrayOutput() LifecyclePolicyPolicyDetailArrayOutput
	ToLifecyclePolicyPolicyDetailArrayOutputWithContext(context.Context) LifecyclePolicyPolicyDetailArrayOutput
}

type LifecyclePolicyPolicyDetailArray []LifecyclePolicyPolicyDetailInput

func (LifecyclePolicyPolicyDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LifecyclePolicyPolicyDetail)(nil)).Elem()
}

func (i LifecyclePolicyPolicyDetailArray) ToLifecyclePolicyPolicyDetailArrayOutput() LifecyclePolicyPolicyDetailArrayOutput {
	return i.ToLifecyclePolicyPolicyDetailArrayOutputWithContext(context.Background())
}

func (i LifecyclePolicyPolicyDetailArray) ToLifecyclePolicyPolicyDetailArrayOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyPolicyDetailArrayOutput)
}

func (i LifecyclePolicyPolicyDetailArray) ToOutput(ctx context.Context) pulumix.Output[[]LifecyclePolicyPolicyDetail] {
	return pulumix.Output[[]LifecyclePolicyPolicyDetail]{
		OutputState: i.ToLifecyclePolicyPolicyDetailArrayOutputWithContext(ctx).OutputState,
	}
}

// The policy detail of the lifecycle policy.
type LifecyclePolicyPolicyDetailOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyPolicyDetail)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailOutput) ToLifecyclePolicyPolicyDetailOutput() LifecyclePolicyPolicyDetailOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailOutput) ToLifecyclePolicyPolicyDetailOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyPolicyDetail] {
	return pulumix.Output[LifecyclePolicyPolicyDetail]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyPolicyDetailOutput) Action() LifecyclePolicyActionOutput {
	return o.ApplyT(func(v LifecyclePolicyPolicyDetail) LifecyclePolicyAction { return v.Action }).(LifecyclePolicyActionOutput)
}

func (o LifecyclePolicyPolicyDetailOutput) ExclusionRules() LifecyclePolicyExclusionRulesPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyPolicyDetail) *LifecyclePolicyExclusionRules { return v.ExclusionRules }).(LifecyclePolicyExclusionRulesPtrOutput)
}

func (o LifecyclePolicyPolicyDetailOutput) Filter() LifecyclePolicyFilterOutput {
	return o.ApplyT(func(v LifecyclePolicyPolicyDetail) LifecyclePolicyFilter { return v.Filter }).(LifecyclePolicyFilterOutput)
}

type LifecyclePolicyPolicyDetailArrayOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyPolicyDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LifecyclePolicyPolicyDetail)(nil)).Elem()
}

func (o LifecyclePolicyPolicyDetailArrayOutput) ToLifecyclePolicyPolicyDetailArrayOutput() LifecyclePolicyPolicyDetailArrayOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailArrayOutput) ToLifecyclePolicyPolicyDetailArrayOutputWithContext(ctx context.Context) LifecyclePolicyPolicyDetailArrayOutput {
	return o
}

func (o LifecyclePolicyPolicyDetailArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LifecyclePolicyPolicyDetail] {
	return pulumix.Output[[]LifecyclePolicyPolicyDetail]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyPolicyDetailArrayOutput) Index(i pulumi.IntInput) LifecyclePolicyPolicyDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LifecyclePolicyPolicyDetail {
		return vs[0].([]LifecyclePolicyPolicyDetail)[vs[1].(int)]
	}).(LifecyclePolicyPolicyDetailOutput)
}

// The recipe to apply the lifecycle policy for.
type LifecyclePolicyRecipeSelection struct {
	// The recipe name.
	Name string `pulumi:"name"`
	// The recipe version.
	SemanticVersion *string `pulumi:"semanticVersion"`
}

// LifecyclePolicyRecipeSelectionInput is an input type that accepts LifecyclePolicyRecipeSelectionArgs and LifecyclePolicyRecipeSelectionOutput values.
// You can construct a concrete instance of `LifecyclePolicyRecipeSelectionInput` via:
//
//	LifecyclePolicyRecipeSelectionArgs{...}
type LifecyclePolicyRecipeSelectionInput interface {
	pulumi.Input

	ToLifecyclePolicyRecipeSelectionOutput() LifecyclePolicyRecipeSelectionOutput
	ToLifecyclePolicyRecipeSelectionOutputWithContext(context.Context) LifecyclePolicyRecipeSelectionOutput
}

// The recipe to apply the lifecycle policy for.
type LifecyclePolicyRecipeSelectionArgs struct {
	// The recipe name.
	Name pulumi.StringInput `pulumi:"name"`
	// The recipe version.
	SemanticVersion pulumi.StringPtrInput `pulumi:"semanticVersion"`
}

func (LifecyclePolicyRecipeSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyRecipeSelection)(nil)).Elem()
}

func (i LifecyclePolicyRecipeSelectionArgs) ToLifecyclePolicyRecipeSelectionOutput() LifecyclePolicyRecipeSelectionOutput {
	return i.ToLifecyclePolicyRecipeSelectionOutputWithContext(context.Background())
}

func (i LifecyclePolicyRecipeSelectionArgs) ToLifecyclePolicyRecipeSelectionOutputWithContext(ctx context.Context) LifecyclePolicyRecipeSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyRecipeSelectionOutput)
}

func (i LifecyclePolicyRecipeSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyRecipeSelection] {
	return pulumix.Output[LifecyclePolicyRecipeSelection]{
		OutputState: i.ToLifecyclePolicyRecipeSelectionOutputWithContext(ctx).OutputState,
	}
}

// LifecyclePolicyRecipeSelectionArrayInput is an input type that accepts LifecyclePolicyRecipeSelectionArray and LifecyclePolicyRecipeSelectionArrayOutput values.
// You can construct a concrete instance of `LifecyclePolicyRecipeSelectionArrayInput` via:
//
//	LifecyclePolicyRecipeSelectionArray{ LifecyclePolicyRecipeSelectionArgs{...} }
type LifecyclePolicyRecipeSelectionArrayInput interface {
	pulumi.Input

	ToLifecyclePolicyRecipeSelectionArrayOutput() LifecyclePolicyRecipeSelectionArrayOutput
	ToLifecyclePolicyRecipeSelectionArrayOutputWithContext(context.Context) LifecyclePolicyRecipeSelectionArrayOutput
}

type LifecyclePolicyRecipeSelectionArray []LifecyclePolicyRecipeSelectionInput

func (LifecyclePolicyRecipeSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LifecyclePolicyRecipeSelection)(nil)).Elem()
}

func (i LifecyclePolicyRecipeSelectionArray) ToLifecyclePolicyRecipeSelectionArrayOutput() LifecyclePolicyRecipeSelectionArrayOutput {
	return i.ToLifecyclePolicyRecipeSelectionArrayOutputWithContext(context.Background())
}

func (i LifecyclePolicyRecipeSelectionArray) ToLifecyclePolicyRecipeSelectionArrayOutputWithContext(ctx context.Context) LifecyclePolicyRecipeSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyRecipeSelectionArrayOutput)
}

func (i LifecyclePolicyRecipeSelectionArray) ToOutput(ctx context.Context) pulumix.Output[[]LifecyclePolicyRecipeSelection] {
	return pulumix.Output[[]LifecyclePolicyRecipeSelection]{
		OutputState: i.ToLifecyclePolicyRecipeSelectionArrayOutputWithContext(ctx).OutputState,
	}
}

// The recipe to apply the lifecycle policy for.
type LifecyclePolicyRecipeSelectionOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyRecipeSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyRecipeSelection)(nil)).Elem()
}

func (o LifecyclePolicyRecipeSelectionOutput) ToLifecyclePolicyRecipeSelectionOutput() LifecyclePolicyRecipeSelectionOutput {
	return o
}

func (o LifecyclePolicyRecipeSelectionOutput) ToLifecyclePolicyRecipeSelectionOutputWithContext(ctx context.Context) LifecyclePolicyRecipeSelectionOutput {
	return o
}

func (o LifecyclePolicyRecipeSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyRecipeSelection] {
	return pulumix.Output[LifecyclePolicyRecipeSelection]{
		OutputState: o.OutputState,
	}
}

// The recipe name.
func (o LifecyclePolicyRecipeSelectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LifecyclePolicyRecipeSelection) string { return v.Name }).(pulumi.StringOutput)
}

// The recipe version.
func (o LifecyclePolicyRecipeSelectionOutput) SemanticVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LifecyclePolicyRecipeSelection) *string { return v.SemanticVersion }).(pulumi.StringPtrOutput)
}

type LifecyclePolicyRecipeSelectionArrayOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyRecipeSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LifecyclePolicyRecipeSelection)(nil)).Elem()
}

func (o LifecyclePolicyRecipeSelectionArrayOutput) ToLifecyclePolicyRecipeSelectionArrayOutput() LifecyclePolicyRecipeSelectionArrayOutput {
	return o
}

func (o LifecyclePolicyRecipeSelectionArrayOutput) ToLifecyclePolicyRecipeSelectionArrayOutputWithContext(ctx context.Context) LifecyclePolicyRecipeSelectionArrayOutput {
	return o
}

func (o LifecyclePolicyRecipeSelectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LifecyclePolicyRecipeSelection] {
	return pulumix.Output[[]LifecyclePolicyRecipeSelection]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyRecipeSelectionArrayOutput) Index(i pulumi.IntInput) LifecyclePolicyRecipeSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LifecyclePolicyRecipeSelection {
		return vs[0].([]LifecyclePolicyRecipeSelection)[vs[1].(int)]
	}).(LifecyclePolicyRecipeSelectionOutput)
}

// The resource selection for the lifecycle policy.
type LifecyclePolicyResourceSelection struct {
	// The recipes to select.
	Recipes []LifecyclePolicyRecipeSelection `pulumi:"recipes"`
	// The Image Builder resources to select by tag.
	TagMap interface{} `pulumi:"tagMap"`
}

// LifecyclePolicyResourceSelectionInput is an input type that accepts LifecyclePolicyResourceSelectionArgs and LifecyclePolicyResourceSelectionOutput values.
// You can construct a concrete instance of `LifecyclePolicyResourceSelectionInput` via:
//
//	LifecyclePolicyResourceSelectionArgs{...}
type LifecyclePolicyResourceSelectionInput interface {
	pulumi.Input

	ToLifecyclePolicyResourceSelectionOutput() LifecyclePolicyResourceSelectionOutput
	ToLifecyclePolicyResourceSelectionOutputWithContext(context.Context) LifecyclePolicyResourceSelectionOutput
}

// The resource selection for the lifecycle policy.
type LifecyclePolicyResourceSelectionArgs struct {
	// The recipes to select.
	Recipes LifecyclePolicyRecipeSelectionArrayInput `pulumi:"recipes"`
	// The Image Builder resources to select by tag.
	TagMap pulumi.Input `pulumi:"tagMap"`
}

func (LifecyclePolicyResourceSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyResourceSelection)(nil)).Elem()
}

func (i LifecyclePolicyResourceSelectionArgs) ToLifecyclePolicyResourceSelectionOutput() LifecyclePolicyResourceSelectionOutput {
	return i.ToLifecyclePolicyResourceSelectionOutputWithContext(context.Background())
}

func (i LifecyclePolicyResourceSelectionArgs) ToLifecyclePolicyResourceSelectionOutputWithContext(ctx context.Context) LifecyclePolicyResourceSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecyclePolicyResourceSelectionOutput)
}

func (i LifecyclePolicyResourceSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyResourceSelection] {
	return pulumix.Output[LifecyclePolicyResourceSelection]{
		OutputState: i.ToLifecyclePolicyResourceSelectionOutputWithContext(ctx).OutputState,
	}
}

// The resource selection for the lifecycle policy.
type LifecyclePolicyResourceSelectionOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyResourceSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyResourceSelection)(nil)).Elem()
}

func (o LifecyclePolicyResourceSelectionOutput) ToLifecyclePolicyResourceSelectionOutput() LifecyclePolicyResourceSelectionOutput {
	return o
}

func (o LifecyclePolicyResourceSelectionOutput) ToLifecyclePolicyResourceSelectionOutputWithContext(ctx context.Context) LifecyclePolicyResourceSelectionOutput {
	return o
}

func (o LifecyclePolicyResourceSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyResourceSelection] {
	return pulumix.Output[LifecyclePolicyResourceSelection]{
		OutputState: o.OutputState,
	}
}

// The recipes to select.
func (o LifecyclePolicyResourceSelectionOutput) Recipes() LifecyclePolicyRecipeSelectionArrayOutput {
	return o.ApplyT(func(v LifecyclePolicyResourceSelection) []LifecyclePolicyRecipeSelection { return v.Recipes }).(LifecyclePolicyRecipeSelectionArrayOutput)
}

// The Image Builder resources to select by tag.
func (o LifecyclePolicyResourceSelectionOutput) TagMap() pulumi.AnyOutput {
	return o.ApplyT(func(v LifecyclePolicyResourceSelection) interface{} { return v.TagMap }).(pulumi.AnyOutput)
}

type LifecyclePolicyResourceSelectionPtrOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyResourceSelectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyResourceSelection)(nil)).Elem()
}

func (o LifecyclePolicyResourceSelectionPtrOutput) ToLifecyclePolicyResourceSelectionPtrOutput() LifecyclePolicyResourceSelectionPtrOutput {
	return o
}

func (o LifecyclePolicyResourceSelectionPtrOutput) ToLifecyclePolicyResourceSelectionPtrOutputWithContext(ctx context.Context) LifecyclePolicyResourceSelectionPtrOutput {
	return o
}

func (o LifecyclePolicyResourceSelectionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyResourceSelection] {
	return pulumix.Output[*LifecyclePolicyResourceSelection]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyResourceSelectionPtrOutput) Elem() LifecyclePolicyResourceSelectionOutput {
	return o.ApplyT(func(v *LifecyclePolicyResourceSelection) LifecyclePolicyResourceSelection {
		if v != nil {
			return *v
		}
		var ret LifecyclePolicyResourceSelection
		return ret
	}).(LifecyclePolicyResourceSelectionOutput)
}

// The recipes to select.
func (o LifecyclePolicyResourceSelectionPtrOutput) Recipes() LifecyclePolicyRecipeSelectionArrayOutput {
	return o.ApplyT(func(v *LifecyclePolicyResourceSelection) []LifecyclePolicyRecipeSelection {
		if v == nil {
			return nil
		}
		return v.Recipes
	}).(LifecyclePolicyRecipeSelectionArrayOutput)
}

// The Image Builder resources to select by tag.
func (o LifecyclePolicyResourceSelectionPtrOutput) TagMap() pulumi.AnyOutput {
	return o.ApplyT(func(v *LifecyclePolicyResourceSelection) interface{} {
		if v == nil {
			return nil
		}
		return v.TagMap
	}).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeComponentConfigurationInput)(nil)).Elem(), ContainerRecipeComponentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeComponentConfigurationArrayInput)(nil)).Elem(), ContainerRecipeComponentConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeComponentParameterInput)(nil)).Elem(), ContainerRecipeComponentParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeComponentParameterArrayInput)(nil)).Elem(), ContainerRecipeComponentParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeEbsInstanceBlockDeviceSpecificationInput)(nil)).Elem(), ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput)(nil)).Elem(), ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeInstanceBlockDeviceMappingInput)(nil)).Elem(), ContainerRecipeInstanceBlockDeviceMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeInstanceBlockDeviceMappingArrayInput)(nil)).Elem(), ContainerRecipeInstanceBlockDeviceMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeInstanceConfigurationInput)(nil)).Elem(), ContainerRecipeInstanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeInstanceConfigurationPtrInput)(nil)).Elem(), ContainerRecipeInstanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeTargetContainerRepositoryInput)(nil)).Elem(), ContainerRecipeTargetContainerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRecipeTargetContainerRepositoryPtrInput)(nil)).Elem(), ContainerRecipeTargetContainerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationAmiDistributionConfigurationInput)(nil)).Elem(), DistributionConfigurationAmiDistributionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationAmiDistributionConfigurationPtrInput)(nil)).Elem(), DistributionConfigurationAmiDistributionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationContainerDistributionConfigurationInput)(nil)).Elem(), DistributionConfigurationContainerDistributionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationContainerDistributionConfigurationPtrInput)(nil)).Elem(), DistributionConfigurationContainerDistributionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationDistributionInput)(nil)).Elem(), DistributionConfigurationDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationDistributionArrayInput)(nil)).Elem(), DistributionConfigurationDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationFastLaunchConfigurationInput)(nil)).Elem(), DistributionConfigurationFastLaunchConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationFastLaunchConfigurationArrayInput)(nil)).Elem(), DistributionConfigurationFastLaunchConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationFastLaunchLaunchTemplateSpecificationInput)(nil)).Elem(), DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrInput)(nil)).Elem(), DistributionConfigurationFastLaunchLaunchTemplateSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationFastLaunchSnapshotConfigurationInput)(nil)).Elem(), DistributionConfigurationFastLaunchSnapshotConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationFastLaunchSnapshotConfigurationPtrInput)(nil)).Elem(), DistributionConfigurationFastLaunchSnapshotConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationLaunchPermissionConfigurationInput)(nil)).Elem(), DistributionConfigurationLaunchPermissionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationLaunchPermissionConfigurationPtrInput)(nil)).Elem(), DistributionConfigurationLaunchPermissionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationLaunchTemplateConfigurationInput)(nil)).Elem(), DistributionConfigurationLaunchTemplateConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationLaunchTemplateConfigurationArrayInput)(nil)).Elem(), DistributionConfigurationLaunchTemplateConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationTargetContainerRepositoryInput)(nil)).Elem(), DistributionConfigurationTargetContainerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DistributionConfigurationTargetContainerRepositoryPtrInput)(nil)).Elem(), DistributionConfigurationTargetContainerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageEcrConfigurationInput)(nil)).Elem(), ImageEcrConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageEcrConfigurationPtrInput)(nil)).Elem(), ImageEcrConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineEcrConfigurationInput)(nil)).Elem(), ImagePipelineEcrConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineEcrConfigurationPtrInput)(nil)).Elem(), ImagePipelineEcrConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineImageScanningConfigurationInput)(nil)).Elem(), ImagePipelineImageScanningConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineImageScanningConfigurationPtrInput)(nil)).Elem(), ImagePipelineImageScanningConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineImageTestsConfigurationInput)(nil)).Elem(), ImagePipelineImageTestsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineImageTestsConfigurationPtrInput)(nil)).Elem(), ImagePipelineImageTestsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineScheduleInput)(nil)).Elem(), ImagePipelineScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineSchedulePtrInput)(nil)).Elem(), ImagePipelineScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineWorkflowConfigurationInput)(nil)).Elem(), ImagePipelineWorkflowConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineWorkflowConfigurationArrayInput)(nil)).Elem(), ImagePipelineWorkflowConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineWorkflowParameterInput)(nil)).Elem(), ImagePipelineWorkflowParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePipelineWorkflowParameterArrayInput)(nil)).Elem(), ImagePipelineWorkflowParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeAdditionalInstanceConfigurationInput)(nil)).Elem(), ImageRecipeAdditionalInstanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeAdditionalInstanceConfigurationPtrInput)(nil)).Elem(), ImageRecipeAdditionalInstanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeComponentConfigurationInput)(nil)).Elem(), ImageRecipeComponentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeComponentConfigurationArrayInput)(nil)).Elem(), ImageRecipeComponentConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeComponentParameterInput)(nil)).Elem(), ImageRecipeComponentParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeComponentParameterArrayInput)(nil)).Elem(), ImageRecipeComponentParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeEbsInstanceBlockDeviceSpecificationInput)(nil)).Elem(), ImageRecipeEbsInstanceBlockDeviceSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput)(nil)).Elem(), ImageRecipeEbsInstanceBlockDeviceSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeInstanceBlockDeviceMappingInput)(nil)).Elem(), ImageRecipeInstanceBlockDeviceMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeInstanceBlockDeviceMappingArrayInput)(nil)).Elem(), ImageRecipeInstanceBlockDeviceMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeSystemsManagerAgentInput)(nil)).Elem(), ImageRecipeSystemsManagerAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRecipeSystemsManagerAgentPtrInput)(nil)).Elem(), ImageRecipeSystemsManagerAgentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageScanningConfigurationInput)(nil)).Elem(), ImageScanningConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageScanningConfigurationPtrInput)(nil)).Elem(), ImageScanningConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTestsConfigurationInput)(nil)).Elem(), ImageTestsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTestsConfigurationPtrInput)(nil)).Elem(), ImageTestsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageWorkflowConfigurationInput)(nil)).Elem(), ImageWorkflowConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageWorkflowConfigurationArrayInput)(nil)).Elem(), ImageWorkflowConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageWorkflowParameterInput)(nil)).Elem(), ImageWorkflowParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageWorkflowParameterArrayInput)(nil)).Elem(), ImageWorkflowParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureConfigurationInstanceMetadataOptionsInput)(nil)).Elem(), InfrastructureConfigurationInstanceMetadataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureConfigurationInstanceMetadataOptionsPtrInput)(nil)).Elem(), InfrastructureConfigurationInstanceMetadataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureConfigurationLoggingInput)(nil)).Elem(), InfrastructureConfigurationLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureConfigurationLoggingPtrInput)(nil)).Elem(), InfrastructureConfigurationLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureConfigurationS3LogsInput)(nil)).Elem(), InfrastructureConfigurationS3LogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureConfigurationS3LogsPtrInput)(nil)).Elem(), InfrastructureConfigurationS3LogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyActionInput)(nil)).Elem(), LifecyclePolicyActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyAmiExclusionRulesInput)(nil)).Elem(), LifecyclePolicyAmiExclusionRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyAmiExclusionRulesPtrInput)(nil)).Elem(), LifecyclePolicyAmiExclusionRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyExclusionRulesInput)(nil)).Elem(), LifecyclePolicyExclusionRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyExclusionRulesPtrInput)(nil)).Elem(), LifecyclePolicyExclusionRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyFilterInput)(nil)).Elem(), LifecyclePolicyFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyIncludeResourcesInput)(nil)).Elem(), LifecyclePolicyIncludeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyIncludeResourcesPtrInput)(nil)).Elem(), LifecyclePolicyIncludeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyLastLaunchedInput)(nil)).Elem(), LifecyclePolicyLastLaunchedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyLastLaunchedPtrInput)(nil)).Elem(), LifecyclePolicyLastLaunchedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyPolicyDetailInput)(nil)).Elem(), LifecyclePolicyPolicyDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyPolicyDetailArrayInput)(nil)).Elem(), LifecyclePolicyPolicyDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyRecipeSelectionInput)(nil)).Elem(), LifecyclePolicyRecipeSelectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyRecipeSelectionArrayInput)(nil)).Elem(), LifecyclePolicyRecipeSelectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyResourceSelectionInput)(nil)).Elem(), LifecyclePolicyResourceSelectionArgs{})
	pulumi.RegisterOutputType(ContainerRecipeComponentConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerRecipeComponentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ContainerRecipeComponentParameterOutput{})
	pulumi.RegisterOutputType(ContainerRecipeComponentParameterArrayOutput{})
	pulumi.RegisterOutputType(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput{})
	pulumi.RegisterOutputType(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceBlockDeviceMappingArrayOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContainerRecipeTargetContainerRepositoryOutput{})
	pulumi.RegisterOutputType(ContainerRecipeTargetContainerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationAmiDistributionConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationAmiDistributionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationContainerDistributionConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationContainerDistributionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionArrayOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationFastLaunchConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationFastLaunchConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationFastLaunchLaunchTemplateSpecificationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationFastLaunchLaunchTemplateSpecificationPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationFastLaunchSnapshotConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationFastLaunchSnapshotConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationLaunchPermissionConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationLaunchPermissionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationLaunchTemplateConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationLaunchTemplateConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationTargetContainerRepositoryOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationTargetContainerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(ImageEcrConfigurationOutput{})
	pulumi.RegisterOutputType(ImageEcrConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImagePipelineEcrConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineEcrConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageScanningConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageTestsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImagePipelineScheduleOutput{})
	pulumi.RegisterOutputType(ImagePipelineSchedulePtrOutput{})
	pulumi.RegisterOutputType(ImagePipelineWorkflowConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineWorkflowConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ImagePipelineWorkflowParameterOutput{})
	pulumi.RegisterOutputType(ImagePipelineWorkflowParameterArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeAdditionalInstanceConfigurationOutput{})
	pulumi.RegisterOutputType(ImageRecipeAdditionalInstanceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentConfigurationOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentParameterOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentParameterArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput{})
	pulumi.RegisterOutputType(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput{})
	pulumi.RegisterOutputType(ImageRecipeInstanceBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(ImageRecipeInstanceBlockDeviceMappingArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeSystemsManagerAgentOutput{})
	pulumi.RegisterOutputType(ImageRecipeSystemsManagerAgentPtrOutput{})
	pulumi.RegisterOutputType(ImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(ImageScanningConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(ImageTestsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImageWorkflowConfigurationOutput{})
	pulumi.RegisterOutputType(ImageWorkflowConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ImageWorkflowParameterOutput{})
	pulumi.RegisterOutputType(ImageWorkflowParameterArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationInstanceMetadataOptionsOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationInstanceMetadataOptionsPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationLoggingOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationLoggingPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationS3LogsOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationS3LogsPtrOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyActionOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyAmiExclusionRulesOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyAmiExclusionRulesPtrOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyExclusionRulesOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyExclusionRulesPtrOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyFilterOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyIncludeResourcesOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyIncludeResourcesPtrOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyLastLaunchedOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyLastLaunchedPtrOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyPolicyDetailArrayOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyRecipeSelectionOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyRecipeSelectionArrayOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyResourceSelectionOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyResourceSelectionPtrOutput{})
}
