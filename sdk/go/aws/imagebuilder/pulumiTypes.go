// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package imagebuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configuration details of the component.
type ContainerRecipeComponentConfiguration struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn *string `pulumi:"componentArn"`
}

// ContainerRecipeComponentConfigurationInput is an input type that accepts ContainerRecipeComponentConfigurationArgs and ContainerRecipeComponentConfigurationOutput values.
// You can construct a concrete instance of `ContainerRecipeComponentConfigurationInput` via:
//
//          ContainerRecipeComponentConfigurationArgs{...}
type ContainerRecipeComponentConfigurationInput interface {
	pulumi.Input

	ToContainerRecipeComponentConfigurationOutput() ContainerRecipeComponentConfigurationOutput
	ToContainerRecipeComponentConfigurationOutputWithContext(context.Context) ContainerRecipeComponentConfigurationOutput
}

// Configuration details of the component.
type ContainerRecipeComponentConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn pulumi.StringPtrInput `pulumi:"componentArn"`
}

func (ContainerRecipeComponentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (i ContainerRecipeComponentConfigurationArgs) ToContainerRecipeComponentConfigurationOutput() ContainerRecipeComponentConfigurationOutput {
	return i.ToContainerRecipeComponentConfigurationOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentConfigurationArgs) ToContainerRecipeComponentConfigurationOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentConfigurationOutput)
}

// ContainerRecipeComponentConfigurationArrayInput is an input type that accepts ContainerRecipeComponentConfigurationArray and ContainerRecipeComponentConfigurationArrayOutput values.
// You can construct a concrete instance of `ContainerRecipeComponentConfigurationArrayInput` via:
//
//          ContainerRecipeComponentConfigurationArray{ ContainerRecipeComponentConfigurationArgs{...} }
type ContainerRecipeComponentConfigurationArrayInput interface {
	pulumi.Input

	ToContainerRecipeComponentConfigurationArrayOutput() ContainerRecipeComponentConfigurationArrayOutput
	ToContainerRecipeComponentConfigurationArrayOutputWithContext(context.Context) ContainerRecipeComponentConfigurationArrayOutput
}

type ContainerRecipeComponentConfigurationArray []ContainerRecipeComponentConfigurationInput

func (ContainerRecipeComponentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (i ContainerRecipeComponentConfigurationArray) ToContainerRecipeComponentConfigurationArrayOutput() ContainerRecipeComponentConfigurationArrayOutput {
	return i.ToContainerRecipeComponentConfigurationArrayOutputWithContext(context.Background())
}

func (i ContainerRecipeComponentConfigurationArray) ToContainerRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeComponentConfigurationArrayOutput)
}

// Configuration details of the component.
type ContainerRecipeComponentConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (o ContainerRecipeComponentConfigurationOutput) ToContainerRecipeComponentConfigurationOutput() ContainerRecipeComponentConfigurationOutput {
	return o
}

func (o ContainerRecipeComponentConfigurationOutput) ToContainerRecipeComponentConfigurationOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the component.
func (o ContainerRecipeComponentConfigurationOutput) ComponentArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeComponentConfiguration) *string { return v.ComponentArn }).(pulumi.StringPtrOutput)
}

type ContainerRecipeComponentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ContainerRecipeComponentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeComponentConfiguration)(nil)).Elem()
}

func (o ContainerRecipeComponentConfigurationArrayOutput) ToContainerRecipeComponentConfigurationArrayOutput() ContainerRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ContainerRecipeComponentConfigurationArrayOutput) ToContainerRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ContainerRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ContainerRecipeComponentConfigurationArrayOutput) Index(i pulumi.IntInput) ContainerRecipeComponentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRecipeComponentConfiguration {
		return vs[0].([]ContainerRecipeComponentConfiguration)[vs[1].(int)]
	}).(ContainerRecipeComponentConfigurationOutput)
}

// Amazon EBS-specific block device mapping specifications.
type ContainerRecipeEbsInstanceBlockDeviceSpecification struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted *bool `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops *int `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId *string `pulumi:"snapshotId"`
	// Use to override the device's volume size.
	VolumeSize *int `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType *ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType `pulumi:"volumeType"`
}

// ContainerRecipeEbsInstanceBlockDeviceSpecificationInput is an input type that accepts ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs and ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput values.
// You can construct a concrete instance of `ContainerRecipeEbsInstanceBlockDeviceSpecificationInput` via:
//
//          ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
type ContainerRecipeEbsInstanceBlockDeviceSpecificationInput interface {
	pulumi.Input

	ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput
	ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput
}

// Amazon EBS-specific block device mapping specifications.
type ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// Use to override the device's volume size.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrInput `pulumi:"volumeType"`
}

func (ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Background())
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput).ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx)
}

// ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput is an input type that accepts ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs, ContainerRecipeEbsInstanceBlockDeviceSpecificationPtr and ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput values.
// You can construct a concrete instance of `ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput` via:
//
//          ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
//
//  or:
//
//          nil
type ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput interface {
	pulumi.Input

	ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
	ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
}

type containerRecipeEbsInstanceBlockDeviceSpecificationPtrType ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs

func ContainerRecipeEbsInstanceBlockDeviceSpecificationPtr(v *ContainerRecipeEbsInstanceBlockDeviceSpecificationArgs) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput {
	return (*containerRecipeEbsInstanceBlockDeviceSpecificationPtrType)(v)
}

func (*containerRecipeEbsInstanceBlockDeviceSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i *containerRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i *containerRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Amazon EBS-specific block device mapping specifications.
type ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput struct{ *pulumi.OutputState }

func (ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerRecipeEbsInstanceBlockDeviceSpecification) *ContainerRecipeEbsInstanceBlockDeviceSpecification {
		return &v
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Use to configure delete on termination of the associated device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Use to override the device's volume size.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeType() ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v ContainerRecipeEbsInstanceBlockDeviceSpecification) *ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		return v.VolumeType
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

type ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput struct{ *pulumi.OutputState }

func (ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Elem() ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) ContainerRecipeEbsInstanceBlockDeviceSpecification {
		if v != nil {
			return *v
		}
		var ret ContainerRecipeEbsInstanceBlockDeviceSpecification
		return ret
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

// Use to configure delete on termination of the associated device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// Use to override the device's volume size.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeType() ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v *ContainerRecipeEbsInstanceBlockDeviceSpecification) *ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

// Defines block device mappings for the instance used to configure your image.
type ContainerRecipeInstanceBlockDeviceMapping struct {
	// The device to which these mappings apply.
	DeviceName *string `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs *ContainerRecipeEbsInstanceBlockDeviceSpecification `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice *string `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName *string `pulumi:"virtualName"`
}

// ContainerRecipeInstanceBlockDeviceMappingInput is an input type that accepts ContainerRecipeInstanceBlockDeviceMappingArgs and ContainerRecipeInstanceBlockDeviceMappingOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceBlockDeviceMappingInput` via:
//
//          ContainerRecipeInstanceBlockDeviceMappingArgs{...}
type ContainerRecipeInstanceBlockDeviceMappingInput interface {
	pulumi.Input

	ToContainerRecipeInstanceBlockDeviceMappingOutput() ContainerRecipeInstanceBlockDeviceMappingOutput
	ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(context.Context) ContainerRecipeInstanceBlockDeviceMappingOutput
}

// Defines block device mappings for the instance used to configure your image.
type ContainerRecipeInstanceBlockDeviceMappingArgs struct {
	// The device to which these mappings apply.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrInput `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice pulumi.StringPtrInput `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName pulumi.StringPtrInput `pulumi:"virtualName"`
}

func (ContainerRecipeInstanceBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ContainerRecipeInstanceBlockDeviceMappingArgs) ToContainerRecipeInstanceBlockDeviceMappingOutput() ContainerRecipeInstanceBlockDeviceMappingOutput {
	return i.ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceBlockDeviceMappingArgs) ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceBlockDeviceMappingOutput)
}

// ContainerRecipeInstanceBlockDeviceMappingArrayInput is an input type that accepts ContainerRecipeInstanceBlockDeviceMappingArray and ContainerRecipeInstanceBlockDeviceMappingArrayOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceBlockDeviceMappingArrayInput` via:
//
//          ContainerRecipeInstanceBlockDeviceMappingArray{ ContainerRecipeInstanceBlockDeviceMappingArgs{...} }
type ContainerRecipeInstanceBlockDeviceMappingArrayInput interface {
	pulumi.Input

	ToContainerRecipeInstanceBlockDeviceMappingArrayOutput() ContainerRecipeInstanceBlockDeviceMappingArrayOutput
	ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Context) ContainerRecipeInstanceBlockDeviceMappingArrayOutput
}

type ContainerRecipeInstanceBlockDeviceMappingArray []ContainerRecipeInstanceBlockDeviceMappingInput

func (ContainerRecipeInstanceBlockDeviceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ContainerRecipeInstanceBlockDeviceMappingArray) ToContainerRecipeInstanceBlockDeviceMappingArrayOutput() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return i.ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceBlockDeviceMappingArray) ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceBlockDeviceMappingArrayOutput)
}

// Defines block device mappings for the instance used to configure your image.
type ContainerRecipeInstanceBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ContainerRecipeInstanceBlockDeviceMappingOutput) ToContainerRecipeInstanceBlockDeviceMappingOutput() ContainerRecipeInstanceBlockDeviceMappingOutput {
	return o
}

func (o ContainerRecipeInstanceBlockDeviceMappingOutput) ToContainerRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingOutput {
	return o
}

// The device to which these mappings apply.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Use to manage Amazon EBS-specific configuration for this mapping.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) Ebs() ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *ContainerRecipeEbsInstanceBlockDeviceSpecification {
		return v.Ebs
	}).(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Use to remove a mapping from the parent image.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) NoDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *string { return v.NoDevice }).(pulumi.StringPtrOutput)
}

// Use to manage instance ephemeral devices.
func (o ContainerRecipeInstanceBlockDeviceMappingOutput) VirtualName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceBlockDeviceMapping) *string { return v.VirtualName }).(pulumi.StringPtrOutput)
}

type ContainerRecipeInstanceBlockDeviceMappingArrayOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceBlockDeviceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ContainerRecipeInstanceBlockDeviceMappingArrayOutput) ToContainerRecipeInstanceBlockDeviceMappingArrayOutput() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ContainerRecipeInstanceBlockDeviceMappingArrayOutput) ToContainerRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ContainerRecipeInstanceBlockDeviceMappingArrayOutput) Index(i pulumi.IntInput) ContainerRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRecipeInstanceBlockDeviceMapping {
		return vs[0].([]ContainerRecipeInstanceBlockDeviceMapping)[vs[1].(int)]
	}).(ContainerRecipeInstanceBlockDeviceMappingOutput)
}

// A group of options that can be used to configure an instance for building and testing container images.
type ContainerRecipeInstanceConfiguration struct {
	// Defines the block devices to attach for building an instance from this Image Builder AMI.
	BlockDeviceMappings []ContainerRecipeInstanceBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	Image *string `pulumi:"image"`
}

// ContainerRecipeInstanceConfigurationInput is an input type that accepts ContainerRecipeInstanceConfigurationArgs and ContainerRecipeInstanceConfigurationOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceConfigurationInput` via:
//
//          ContainerRecipeInstanceConfigurationArgs{...}
type ContainerRecipeInstanceConfigurationInput interface {
	pulumi.Input

	ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput
	ToContainerRecipeInstanceConfigurationOutputWithContext(context.Context) ContainerRecipeInstanceConfigurationOutput
}

// A group of options that can be used to configure an instance for building and testing container images.
type ContainerRecipeInstanceConfigurationArgs struct {
	// Defines the block devices to attach for building an instance from this Image Builder AMI.
	BlockDeviceMappings ContainerRecipeInstanceBlockDeviceMappingArrayInput `pulumi:"blockDeviceMappings"`
	// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
	Image pulumi.StringPtrInput `pulumi:"image"`
}

func (ContainerRecipeInstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput {
	return i.ToContainerRecipeInstanceConfigurationOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationOutput)
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return i.ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i ContainerRecipeInstanceConfigurationArgs) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationOutput).ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx)
}

// ContainerRecipeInstanceConfigurationPtrInput is an input type that accepts ContainerRecipeInstanceConfigurationArgs, ContainerRecipeInstanceConfigurationPtr and ContainerRecipeInstanceConfigurationPtrOutput values.
// You can construct a concrete instance of `ContainerRecipeInstanceConfigurationPtrInput` via:
//
//          ContainerRecipeInstanceConfigurationArgs{...}
//
//  or:
//
//          nil
type ContainerRecipeInstanceConfigurationPtrInput interface {
	pulumi.Input

	ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput
	ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Context) ContainerRecipeInstanceConfigurationPtrOutput
}

type containerRecipeInstanceConfigurationPtrType ContainerRecipeInstanceConfigurationArgs

func ContainerRecipeInstanceConfigurationPtr(v *ContainerRecipeInstanceConfigurationArgs) ContainerRecipeInstanceConfigurationPtrInput {
	return (*containerRecipeInstanceConfigurationPtrType)(v)
}

func (*containerRecipeInstanceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (i *containerRecipeInstanceConfigurationPtrType) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return i.ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i *containerRecipeInstanceConfigurationPtrType) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeInstanceConfigurationPtrOutput)
}

// A group of options that can be used to configure an instance for building and testing container images.
type ContainerRecipeInstanceConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationOutput() ContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return o.ToContainerRecipeInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (o ContainerRecipeInstanceConfigurationOutput) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerRecipeInstanceConfiguration) *ContainerRecipeInstanceConfiguration {
		return &v
	}).(ContainerRecipeInstanceConfigurationPtrOutput)
}

// Defines the block devices to attach for building an instance from this Image Builder AMI.
func (o ContainerRecipeInstanceConfigurationOutput) BlockDeviceMappings() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceConfiguration) []ContainerRecipeInstanceBlockDeviceMapping {
		return v.BlockDeviceMappings
	}).(ContainerRecipeInstanceBlockDeviceMappingArrayOutput)
}

// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
func (o ContainerRecipeInstanceConfigurationOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeInstanceConfiguration) *string { return v.Image }).(pulumi.StringPtrOutput)
}

type ContainerRecipeInstanceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContainerRecipeInstanceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeInstanceConfiguration)(nil)).Elem()
}

func (o ContainerRecipeInstanceConfigurationPtrOutput) ToContainerRecipeInstanceConfigurationPtrOutput() ContainerRecipeInstanceConfigurationPtrOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationPtrOutput) ToContainerRecipeInstanceConfigurationPtrOutputWithContext(ctx context.Context) ContainerRecipeInstanceConfigurationPtrOutput {
	return o
}

func (o ContainerRecipeInstanceConfigurationPtrOutput) Elem() ContainerRecipeInstanceConfigurationOutput {
	return o.ApplyT(func(v *ContainerRecipeInstanceConfiguration) ContainerRecipeInstanceConfiguration {
		if v != nil {
			return *v
		}
		var ret ContainerRecipeInstanceConfiguration
		return ret
	}).(ContainerRecipeInstanceConfigurationOutput)
}

// Defines the block devices to attach for building an instance from this Image Builder AMI.
func (o ContainerRecipeInstanceConfigurationPtrOutput) BlockDeviceMappings() ContainerRecipeInstanceBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *ContainerRecipeInstanceConfiguration) []ContainerRecipeInstanceBlockDeviceMapping {
		if v == nil {
			return nil
		}
		return v.BlockDeviceMappings
	}).(ContainerRecipeInstanceBlockDeviceMappingArrayOutput)
}

// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
func (o ContainerRecipeInstanceConfigurationPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeInstanceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// The container repository where the output container image is stored.
type ContainerRecipeTargetContainerRepository struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName *string `pulumi:"repositoryName"`
	// Specifies the service in which this image was registered.
	Service *ContainerRecipeTargetContainerRepositoryService `pulumi:"service"`
}

// ContainerRecipeTargetContainerRepositoryInput is an input type that accepts ContainerRecipeTargetContainerRepositoryArgs and ContainerRecipeTargetContainerRepositoryOutput values.
// You can construct a concrete instance of `ContainerRecipeTargetContainerRepositoryInput` via:
//
//          ContainerRecipeTargetContainerRepositoryArgs{...}
type ContainerRecipeTargetContainerRepositoryInput interface {
	pulumi.Input

	ToContainerRecipeTargetContainerRepositoryOutput() ContainerRecipeTargetContainerRepositoryOutput
	ToContainerRecipeTargetContainerRepositoryOutputWithContext(context.Context) ContainerRecipeTargetContainerRepositoryOutput
}

// The container repository where the output container image is stored.
type ContainerRecipeTargetContainerRepositoryArgs struct {
	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// Specifies the service in which this image was registered.
	Service ContainerRecipeTargetContainerRepositoryServicePtrInput `pulumi:"service"`
}

func (ContainerRecipeTargetContainerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryOutput() ContainerRecipeTargetContainerRepositoryOutput {
	return i.ToContainerRecipeTargetContainerRepositoryOutputWithContext(context.Background())
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeTargetContainerRepositoryOutput)
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return i.ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i ContainerRecipeTargetContainerRepositoryArgs) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeTargetContainerRepositoryOutput).ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx)
}

// ContainerRecipeTargetContainerRepositoryPtrInput is an input type that accepts ContainerRecipeTargetContainerRepositoryArgs, ContainerRecipeTargetContainerRepositoryPtr and ContainerRecipeTargetContainerRepositoryPtrOutput values.
// You can construct a concrete instance of `ContainerRecipeTargetContainerRepositoryPtrInput` via:
//
//          ContainerRecipeTargetContainerRepositoryArgs{...}
//
//  or:
//
//          nil
type ContainerRecipeTargetContainerRepositoryPtrInput interface {
	pulumi.Input

	ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput
	ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput
}

type containerRecipeTargetContainerRepositoryPtrType ContainerRecipeTargetContainerRepositoryArgs

func ContainerRecipeTargetContainerRepositoryPtr(v *ContainerRecipeTargetContainerRepositoryArgs) ContainerRecipeTargetContainerRepositoryPtrInput {
	return (*containerRecipeTargetContainerRepositoryPtrType)(v)
}

func (*containerRecipeTargetContainerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (i *containerRecipeTargetContainerRepositoryPtrType) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return i.ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i *containerRecipeTargetContainerRepositoryPtrType) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRecipeTargetContainerRepositoryPtrOutput)
}

// The container repository where the output container image is stored.
type ContainerRecipeTargetContainerRepositoryOutput struct{ *pulumi.OutputState }

func (ContainerRecipeTargetContainerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryOutput() ContainerRecipeTargetContainerRepositoryOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o.ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (o ContainerRecipeTargetContainerRepositoryOutput) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerRecipeTargetContainerRepository) *ContainerRecipeTargetContainerRepository {
		return &v
	}).(ContainerRecipeTargetContainerRepositoryPtrOutput)
}

// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
func (o ContainerRecipeTargetContainerRepositoryOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRecipeTargetContainerRepository) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// Specifies the service in which this image was registered.
func (o ContainerRecipeTargetContainerRepositoryOutput) Service() ContainerRecipeTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v ContainerRecipeTargetContainerRepository) *ContainerRecipeTargetContainerRepositoryService {
		return v.Service
	}).(ContainerRecipeTargetContainerRepositoryServicePtrOutput)
}

type ContainerRecipeTargetContainerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (ContainerRecipeTargetContainerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRecipeTargetContainerRepository)(nil)).Elem()
}

func (o ContainerRecipeTargetContainerRepositoryPtrOutput) ToContainerRecipeTargetContainerRepositoryPtrOutput() ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryPtrOutput) ToContainerRecipeTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) ContainerRecipeTargetContainerRepositoryPtrOutput {
	return o
}

func (o ContainerRecipeTargetContainerRepositoryPtrOutput) Elem() ContainerRecipeTargetContainerRepositoryOutput {
	return o.ApplyT(func(v *ContainerRecipeTargetContainerRepository) ContainerRecipeTargetContainerRepository {
		if v != nil {
			return *v
		}
		var ret ContainerRecipeTargetContainerRepository
		return ret
	}).(ContainerRecipeTargetContainerRepositoryOutput)
}

// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
func (o ContainerRecipeTargetContainerRepositoryPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRecipeTargetContainerRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Specifies the service in which this image was registered.
func (o ContainerRecipeTargetContainerRepositoryPtrOutput) Service() ContainerRecipeTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v *ContainerRecipeTargetContainerRepository) *ContainerRecipeTargetContainerRepositoryService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ContainerRecipeTargetContainerRepositoryServicePtrOutput)
}

// The distributions of the distribution configuration.
type DistributionConfigurationDistribution struct {
	// The specific AMI settings (for example, launch permissions, AMI tags).
	AmiDistributionConfiguration *DistributionConfigurationDistributionAmiDistributionConfigurationProperties `pulumi:"amiDistributionConfiguration"`
	// Container distribution settings for encryption, licensing, and sharing in a specific Region.
	ContainerDistributionConfiguration *DistributionConfigurationDistributionContainerDistributionConfigurationProperties `pulumi:"containerDistributionConfiguration"`
	// A group of launchTemplateConfiguration settings that apply to image distribution.
	LaunchTemplateConfigurations []DistributionConfigurationLaunchTemplateConfiguration `pulumi:"launchTemplateConfigurations"`
	// The License Manager Configuration to associate with the AMI in the specified Region.
	LicenseConfigurationArns []string `pulumi:"licenseConfigurationArns"`
	// region
	Region string `pulumi:"region"`
}

// DistributionConfigurationDistributionInput is an input type that accepts DistributionConfigurationDistributionArgs and DistributionConfigurationDistributionOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionInput` via:
//
//          DistributionConfigurationDistributionArgs{...}
type DistributionConfigurationDistributionInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput
	ToDistributionConfigurationDistributionOutputWithContext(context.Context) DistributionConfigurationDistributionOutput
}

// The distributions of the distribution configuration.
type DistributionConfigurationDistributionArgs struct {
	// The specific AMI settings (for example, launch permissions, AMI tags).
	AmiDistributionConfiguration DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrInput `pulumi:"amiDistributionConfiguration"`
	// Container distribution settings for encryption, licensing, and sharing in a specific Region.
	ContainerDistributionConfiguration DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrInput `pulumi:"containerDistributionConfiguration"`
	// A group of launchTemplateConfiguration settings that apply to image distribution.
	LaunchTemplateConfigurations DistributionConfigurationLaunchTemplateConfigurationArrayInput `pulumi:"launchTemplateConfigurations"`
	// The License Manager Configuration to associate with the AMI in the specified Region.
	LicenseConfigurationArns pulumi.StringArrayInput `pulumi:"licenseConfigurationArns"`
	// region
	Region pulumi.StringInput `pulumi:"region"`
}

func (DistributionConfigurationDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistribution)(nil)).Elem()
}

func (i DistributionConfigurationDistributionArgs) ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput {
	return i.ToDistributionConfigurationDistributionOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionArgs) ToDistributionConfigurationDistributionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionOutput)
}

// DistributionConfigurationDistributionArrayInput is an input type that accepts DistributionConfigurationDistributionArray and DistributionConfigurationDistributionArrayOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionArrayInput` via:
//
//          DistributionConfigurationDistributionArray{ DistributionConfigurationDistributionArgs{...} }
type DistributionConfigurationDistributionArrayInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionArrayOutput() DistributionConfigurationDistributionArrayOutput
	ToDistributionConfigurationDistributionArrayOutputWithContext(context.Context) DistributionConfigurationDistributionArrayOutput
}

type DistributionConfigurationDistributionArray []DistributionConfigurationDistributionInput

func (DistributionConfigurationDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationDistribution)(nil)).Elem()
}

func (i DistributionConfigurationDistributionArray) ToDistributionConfigurationDistributionArrayOutput() DistributionConfigurationDistributionArrayOutput {
	return i.ToDistributionConfigurationDistributionArrayOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionArray) ToDistributionConfigurationDistributionArrayOutputWithContext(ctx context.Context) DistributionConfigurationDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionArrayOutput)
}

// The distributions of the distribution configuration.
type DistributionConfigurationDistributionOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistribution)(nil)).Elem()
}

func (o DistributionConfigurationDistributionOutput) ToDistributionConfigurationDistributionOutput() DistributionConfigurationDistributionOutput {
	return o
}

func (o DistributionConfigurationDistributionOutput) ToDistributionConfigurationDistributionOutputWithContext(ctx context.Context) DistributionConfigurationDistributionOutput {
	return o
}

// The specific AMI settings (for example, launch permissions, AMI tags).
func (o DistributionConfigurationDistributionOutput) AmiDistributionConfiguration() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) *DistributionConfigurationDistributionAmiDistributionConfigurationProperties {
		return v.AmiDistributionConfiguration
	}).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput)
}

// Container distribution settings for encryption, licensing, and sharing in a specific Region.
func (o DistributionConfigurationDistributionOutput) ContainerDistributionConfiguration() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) *DistributionConfigurationDistributionContainerDistributionConfigurationProperties {
		return v.ContainerDistributionConfiguration
	}).(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput)
}

// A group of launchTemplateConfiguration settings that apply to image distribution.
func (o DistributionConfigurationDistributionOutput) LaunchTemplateConfigurations() DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) []DistributionConfigurationLaunchTemplateConfiguration {
		return v.LaunchTemplateConfigurations
	}).(DistributionConfigurationLaunchTemplateConfigurationArrayOutput)
}

// The License Manager Configuration to associate with the AMI in the specified Region.
func (o DistributionConfigurationDistributionOutput) LicenseConfigurationArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) []string { return v.LicenseConfigurationArns }).(pulumi.StringArrayOutput)
}

// region
func (o DistributionConfigurationDistributionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionConfigurationDistribution) string { return v.Region }).(pulumi.StringOutput)
}

type DistributionConfigurationDistributionArrayOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationDistribution)(nil)).Elem()
}

func (o DistributionConfigurationDistributionArrayOutput) ToDistributionConfigurationDistributionArrayOutput() DistributionConfigurationDistributionArrayOutput {
	return o
}

func (o DistributionConfigurationDistributionArrayOutput) ToDistributionConfigurationDistributionArrayOutputWithContext(ctx context.Context) DistributionConfigurationDistributionArrayOutput {
	return o
}

func (o DistributionConfigurationDistributionArrayOutput) Index(i pulumi.IntInput) DistributionConfigurationDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionConfigurationDistribution {
		return vs[0].([]DistributionConfigurationDistribution)[vs[1].(int)]
	}).(DistributionConfigurationDistributionOutput)
}

// The specific AMI settings (for example, launch permissions, AMI tags).
type DistributionConfigurationDistributionAmiDistributionConfigurationProperties struct {
	// The tags to apply to AMIs distributed to this Region.
	AmiTags interface{} `pulumi:"amiTags"`
	// The description of the AMI distribution configuration.
	Description *string `pulumi:"description"`
	// The KMS key identifier used to encrypt the distributed image.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
	LaunchPermissionConfiguration *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties `pulumi:"launchPermissionConfiguration"`
	// The name of the AMI distribution configuration.
	Name *string `pulumi:"name"`
	// The ID of accounts to which you want to distribute an image.
	TargetAccountIds []string `pulumi:"targetAccountIds"`
}

// DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesInput is an input type that accepts DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs and DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesInput` via:
//
//          DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs{...}
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput
	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutputWithContext(context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput
}

// The specific AMI settings (for example, launch permissions, AMI tags).
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs struct {
	// The tags to apply to AMIs distributed to this Region.
	AmiTags pulumi.Input `pulumi:"amiTags"`
	// The description of the AMI distribution configuration.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The KMS key identifier used to encrypt the distributed image.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
	LaunchPermissionConfiguration DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrInput `pulumi:"launchPermissionConfiguration"`
	// The name of the AMI distribution configuration.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of accounts to which you want to distribute an image.
	TargetAccountIds pulumi.StringArrayInput `pulumi:"targetAccountIds"`
}

func (DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfigurationProperties)(nil)).Elem()
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput)
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput).ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(ctx)
}

// DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrInput is an input type that accepts DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs, DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtr and DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrInput` via:
//
//          DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs{...}
//
//  or:
//
//          nil
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput
	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput
}

type distributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrType DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs

func DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtr(v *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesArgs) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrInput {
	return (*distributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrType)(v)
}

func (*distributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationDistributionAmiDistributionConfigurationProperties)(nil)).Elem()
}

func (i *distributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrType) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrType) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput)
}

// The specific AMI settings (for example, launch permissions, AMI tags).
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfigurationProperties)(nil)).Elem()
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return o.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *DistributionConfigurationDistributionAmiDistributionConfigurationProperties {
		return &v
	}).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput)
}

// The tags to apply to AMIs distributed to this Region.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) AmiTags() pulumi.AnyOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationProperties) interface{} {
		return v.AmiTags
	}).(pulumi.AnyOutput)
}

// The description of the AMI distribution configuration.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The KMS key identifier used to encrypt the distributed image.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *string {
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) LaunchPermissionConfiguration() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties {
		return v.LaunchPermissionConfiguration
	}).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput)
}

// The name of the AMI distribution configuration.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The ID of accounts to which you want to distribute an image.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput) TargetAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationProperties) []string {
		return v.TargetAccountIds
	}).(pulumi.StringArrayOutput)
}

type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationDistributionAmiDistributionConfigurationProperties)(nil)).Elem()
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) Elem() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationProperties) DistributionConfigurationDistributionAmiDistributionConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationDistributionAmiDistributionConfigurationProperties
		return ret
	}).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput)
}

// The tags to apply to AMIs distributed to this Region.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) AmiTags() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.AmiTags
	}).(pulumi.AnyOutput)
}

// The description of the AMI distribution configuration.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The KMS key identifier used to encrypt the distributed image.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) LaunchPermissionConfiguration() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties {
		if v == nil {
			return nil
		}
		return v.LaunchPermissionConfiguration
	}).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput)
}

// The name of the AMI distribution configuration.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The ID of accounts to which you want to distribute an image.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput) TargetAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationProperties) []string {
		if v == nil {
			return nil
		}
		return v.TargetAccountIds
	}).(pulumi.StringArrayOutput)
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties struct {
	// The name of the group.
	UserGroups []string `pulumi:"userGroups"`
	// The AWS account ID.
	UserIds []string `pulumi:"userIds"`
}

// DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesInput is an input type that accepts DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs and DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesInput` via:
//
//          DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs{...}
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput
	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutputWithContext(context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs struct {
	// The name of the group.
	UserGroups pulumi.StringArrayInput `pulumi:"userGroups"`
	// The AWS account ID.
	UserIds pulumi.StringArrayInput `pulumi:"userIds"`
}

func (DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties)(nil)).Elem()
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput)
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput).ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(ctx)
}

// DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrInput is an input type that accepts DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs, DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtr and DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrInput` via:
//
//          DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs{...}
//
//  or:
//
//          nil
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput
	ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput
}

type distributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrType DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs

func DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtr(v *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesArgs) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrInput {
	return (*distributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrType)(v)
}

func (*distributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties)(nil)).Elem()
}

func (i *distributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrType) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return i.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrType) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput)
}

// Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties)(nil)).Elem()
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return o.ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties) *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties {
		return &v
	}).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput)
}

// The name of the group.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput) UserGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties) []string {
		return v.UserGroups
	}).(pulumi.StringArrayOutput)
}

// The AWS account ID.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties) []string {
		return v.UserIds
	}).(pulumi.StringArrayOutput)
}

type DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties)(nil)).Elem()
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput) ToDistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput {
	return o
}

func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput) Elem() DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties) DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties
		return ret
	}).(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput)
}

// The name of the group.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput) UserGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties) []string {
		if v == nil {
			return nil
		}
		return v.UserGroups
	}).(pulumi.StringArrayOutput)
}

// The AWS account ID.
func (o DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationProperties) []string {
		if v == nil {
			return nil
		}
		return v.UserIds
	}).(pulumi.StringArrayOutput)
}

// Container distribution settings for encryption, licensing, and sharing in a specific Region.
type DistributionConfigurationDistributionContainerDistributionConfigurationProperties struct {
	// Tags that are attached to the container distribution configuration.
	ContainerTags []string `pulumi:"containerTags"`
	// The description of the container distribution configuration.
	Description *string `pulumi:"description"`
	// The destination repository for the container distribution configuration.
	TargetRepository *DistributionConfigurationTargetContainerRepository `pulumi:"targetRepository"`
}

// DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesInput is an input type that accepts DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs and DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesInput` via:
//
//          DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs{...}
type DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput
	ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutputWithContext(context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput
}

// Container distribution settings for encryption, licensing, and sharing in a specific Region.
type DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs struct {
	// Tags that are attached to the container distribution configuration.
	ContainerTags pulumi.StringArrayInput `pulumi:"containerTags"`
	// The description of the container distribution configuration.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The destination repository for the container distribution configuration.
	TargetRepository DistributionConfigurationTargetContainerRepositoryPtrInput `pulumi:"targetRepository"`
}

func (DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionContainerDistributionConfigurationProperties)(nil)).Elem()
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput {
	return i.ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput)
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return i.ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput).ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(ctx)
}

// DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrInput is an input type that accepts DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs, DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtr and DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrInput` via:
//
//          DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs{...}
//
//  or:
//
//          nil
type DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput
	ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput
}

type distributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrType DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs

func DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtr(v *DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesArgs) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrInput {
	return (*distributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrType)(v)
}

func (*distributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationDistributionContainerDistributionConfigurationProperties)(nil)).Elem()
}

func (i *distributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrType) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return i.ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrType) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput)
}

// Container distribution settings for encryption, licensing, and sharing in a specific Region.
type DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationDistributionContainerDistributionConfigurationProperties)(nil)).Elem()
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return o.ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationDistributionContainerDistributionConfigurationProperties) *DistributionConfigurationDistributionContainerDistributionConfigurationProperties {
		return &v
	}).(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput)
}

// Tags that are attached to the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionContainerDistributionConfigurationProperties) []string {
		return v.ContainerTags
	}).(pulumi.StringArrayOutput)
}

// The description of the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionContainerDistributionConfigurationProperties) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The destination repository for the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput) TargetRepository() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationDistributionContainerDistributionConfigurationProperties) *DistributionConfigurationTargetContainerRepository {
		return v.TargetRepository
	}).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

type DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationDistributionContainerDistributionConfigurationProperties)(nil)).Elem()
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput) ToDistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutputWithContext(ctx context.Context) DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput {
	return o
}

func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput) Elem() DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionContainerDistributionConfigurationProperties) DistributionConfigurationDistributionContainerDistributionConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationDistributionContainerDistributionConfigurationProperties
		return ret
	}).(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput)
}

// Tags that are attached to the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput) ContainerTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionContainerDistributionConfigurationProperties) []string {
		if v == nil {
			return nil
		}
		return v.ContainerTags
	}).(pulumi.StringArrayOutput)
}

// The description of the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionContainerDistributionConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The destination repository for the container distribution configuration.
func (o DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput) TargetRepository() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationDistributionContainerDistributionConfigurationProperties) *DistributionConfigurationTargetContainerRepository {
		if v == nil {
			return nil
		}
		return v.TargetRepository
	}).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

// launchTemplateConfiguration settings that apply to image distribution.
type DistributionConfigurationLaunchTemplateConfiguration struct {
	// The account ID that this configuration applies to.
	AccountId *string `pulumi:"accountId"`
	// Identifies the EC2 launch template to use.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// Set the specified EC2 launch template as the default launch template for the specified account.
	SetDefaultVersion *bool `pulumi:"setDefaultVersion"`
}

// DistributionConfigurationLaunchTemplateConfigurationInput is an input type that accepts DistributionConfigurationLaunchTemplateConfigurationArgs and DistributionConfigurationLaunchTemplateConfigurationOutput values.
// You can construct a concrete instance of `DistributionConfigurationLaunchTemplateConfigurationInput` via:
//
//          DistributionConfigurationLaunchTemplateConfigurationArgs{...}
type DistributionConfigurationLaunchTemplateConfigurationInput interface {
	pulumi.Input

	ToDistributionConfigurationLaunchTemplateConfigurationOutput() DistributionConfigurationLaunchTemplateConfigurationOutput
	ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(context.Context) DistributionConfigurationLaunchTemplateConfigurationOutput
}

// launchTemplateConfiguration settings that apply to image distribution.
type DistributionConfigurationLaunchTemplateConfigurationArgs struct {
	// The account ID that this configuration applies to.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Identifies the EC2 launch template to use.
	LaunchTemplateId pulumi.StringPtrInput `pulumi:"launchTemplateId"`
	// Set the specified EC2 launch template as the default launch template for the specified account.
	SetDefaultVersion pulumi.BoolPtrInput `pulumi:"setDefaultVersion"`
}

func (DistributionConfigurationLaunchTemplateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationLaunchTemplateConfigurationArgs) ToDistributionConfigurationLaunchTemplateConfigurationOutput() DistributionConfigurationLaunchTemplateConfigurationOutput {
	return i.ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(context.Background())
}

func (i DistributionConfigurationLaunchTemplateConfigurationArgs) ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationLaunchTemplateConfigurationOutput)
}

// DistributionConfigurationLaunchTemplateConfigurationArrayInput is an input type that accepts DistributionConfigurationLaunchTemplateConfigurationArray and DistributionConfigurationLaunchTemplateConfigurationArrayOutput values.
// You can construct a concrete instance of `DistributionConfigurationLaunchTemplateConfigurationArrayInput` via:
//
//          DistributionConfigurationLaunchTemplateConfigurationArray{ DistributionConfigurationLaunchTemplateConfigurationArgs{...} }
type DistributionConfigurationLaunchTemplateConfigurationArrayInput interface {
	pulumi.Input

	ToDistributionConfigurationLaunchTemplateConfigurationArrayOutput() DistributionConfigurationLaunchTemplateConfigurationArrayOutput
	ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(context.Context) DistributionConfigurationLaunchTemplateConfigurationArrayOutput
}

type DistributionConfigurationLaunchTemplateConfigurationArray []DistributionConfigurationLaunchTemplateConfigurationInput

func (DistributionConfigurationLaunchTemplateConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (i DistributionConfigurationLaunchTemplateConfigurationArray) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutput() DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return i.ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(context.Background())
}

func (i DistributionConfigurationLaunchTemplateConfigurationArray) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationLaunchTemplateConfigurationArrayOutput)
}

// launchTemplateConfiguration settings that apply to image distribution.
type DistributionConfigurationLaunchTemplateConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationLaunchTemplateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationLaunchTemplateConfigurationOutput) ToDistributionConfigurationLaunchTemplateConfigurationOutput() DistributionConfigurationLaunchTemplateConfigurationOutput {
	return o
}

func (o DistributionConfigurationLaunchTemplateConfigurationOutput) ToDistributionConfigurationLaunchTemplateConfigurationOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationOutput {
	return o
}

// The account ID that this configuration applies to.
func (o DistributionConfigurationLaunchTemplateConfigurationOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchTemplateConfiguration) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Identifies the EC2 launch template to use.
func (o DistributionConfigurationLaunchTemplateConfigurationOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchTemplateConfiguration) *string { return v.LaunchTemplateId }).(pulumi.StringPtrOutput)
}

// Set the specified EC2 launch template as the default launch template for the specified account.
func (o DistributionConfigurationLaunchTemplateConfigurationOutput) SetDefaultVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationLaunchTemplateConfiguration) *bool { return v.SetDefaultVersion }).(pulumi.BoolPtrOutput)
}

type DistributionConfigurationLaunchTemplateConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationLaunchTemplateConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionConfigurationLaunchTemplateConfiguration)(nil)).Elem()
}

func (o DistributionConfigurationLaunchTemplateConfigurationArrayOutput) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutput() DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return o
}

func (o DistributionConfigurationLaunchTemplateConfigurationArrayOutput) ToDistributionConfigurationLaunchTemplateConfigurationArrayOutputWithContext(ctx context.Context) DistributionConfigurationLaunchTemplateConfigurationArrayOutput {
	return o
}

func (o DistributionConfigurationLaunchTemplateConfigurationArrayOutput) Index(i pulumi.IntInput) DistributionConfigurationLaunchTemplateConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionConfigurationLaunchTemplateConfiguration {
		return vs[0].([]DistributionConfigurationLaunchTemplateConfiguration)[vs[1].(int)]
	}).(DistributionConfigurationLaunchTemplateConfigurationOutput)
}

// The destination repository for the container image.
type DistributionConfigurationTargetContainerRepository struct {
	// The repository name of target container repository.
	RepositoryName *string `pulumi:"repositoryName"`
	// The service of target container repository.
	Service *DistributionConfigurationTargetContainerRepositoryService `pulumi:"service"`
}

// DistributionConfigurationTargetContainerRepositoryInput is an input type that accepts DistributionConfigurationTargetContainerRepositoryArgs and DistributionConfigurationTargetContainerRepositoryOutput values.
// You can construct a concrete instance of `DistributionConfigurationTargetContainerRepositoryInput` via:
//
//          DistributionConfigurationTargetContainerRepositoryArgs{...}
type DistributionConfigurationTargetContainerRepositoryInput interface {
	pulumi.Input

	ToDistributionConfigurationTargetContainerRepositoryOutput() DistributionConfigurationTargetContainerRepositoryOutput
	ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(context.Context) DistributionConfigurationTargetContainerRepositoryOutput
}

// The destination repository for the container image.
type DistributionConfigurationTargetContainerRepositoryArgs struct {
	// The repository name of target container repository.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// The service of target container repository.
	Service DistributionConfigurationTargetContainerRepositoryServicePtrInput `pulumi:"service"`
}

func (DistributionConfigurationTargetContainerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryOutput() DistributionConfigurationTargetContainerRepositoryOutput {
	return i.ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(context.Background())
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationTargetContainerRepositoryOutput)
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return i.ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i DistributionConfigurationTargetContainerRepositoryArgs) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationTargetContainerRepositoryOutput).ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx)
}

// DistributionConfigurationTargetContainerRepositoryPtrInput is an input type that accepts DistributionConfigurationTargetContainerRepositoryArgs, DistributionConfigurationTargetContainerRepositoryPtr and DistributionConfigurationTargetContainerRepositoryPtrOutput values.
// You can construct a concrete instance of `DistributionConfigurationTargetContainerRepositoryPtrInput` via:
//
//          DistributionConfigurationTargetContainerRepositoryArgs{...}
//
//  or:
//
//          nil
type DistributionConfigurationTargetContainerRepositoryPtrInput interface {
	pulumi.Input

	ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput
	ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput
}

type distributionConfigurationTargetContainerRepositoryPtrType DistributionConfigurationTargetContainerRepositoryArgs

func DistributionConfigurationTargetContainerRepositoryPtr(v *DistributionConfigurationTargetContainerRepositoryArgs) DistributionConfigurationTargetContainerRepositoryPtrInput {
	return (*distributionConfigurationTargetContainerRepositoryPtrType)(v)
}

func (*distributionConfigurationTargetContainerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (i *distributionConfigurationTargetContainerRepositoryPtrType) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return i.ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i *distributionConfigurationTargetContainerRepositoryPtrType) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

// The destination repository for the container image.
type DistributionConfigurationTargetContainerRepositoryOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationTargetContainerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryOutput() DistributionConfigurationTargetContainerRepositoryOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(context.Background())
}

func (o DistributionConfigurationTargetContainerRepositoryOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistributionConfigurationTargetContainerRepository) *DistributionConfigurationTargetContainerRepository {
		return &v
	}).(DistributionConfigurationTargetContainerRepositoryPtrOutput)
}

// The repository name of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionConfigurationTargetContainerRepository) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// The service of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryOutput) Service() DistributionConfigurationTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v DistributionConfigurationTargetContainerRepository) *DistributionConfigurationTargetContainerRepositoryService {
		return v.Service
	}).(DistributionConfigurationTargetContainerRepositoryServicePtrOutput)
}

type DistributionConfigurationTargetContainerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (DistributionConfigurationTargetContainerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionConfigurationTargetContainerRepository)(nil)).Elem()
}

func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutput() DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) ToDistributionConfigurationTargetContainerRepositoryPtrOutputWithContext(ctx context.Context) DistributionConfigurationTargetContainerRepositoryPtrOutput {
	return o
}

func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) Elem() DistributionConfigurationTargetContainerRepositoryOutput {
	return o.ApplyT(func(v *DistributionConfigurationTargetContainerRepository) DistributionConfigurationTargetContainerRepository {
		if v != nil {
			return *v
		}
		var ret DistributionConfigurationTargetContainerRepository
		return ret
	}).(DistributionConfigurationTargetContainerRepositoryOutput)
}

// The repository name of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationTargetContainerRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// The service of target container repository.
func (o DistributionConfigurationTargetContainerRepositoryPtrOutput) Service() DistributionConfigurationTargetContainerRepositoryServicePtrOutput {
	return o.ApplyT(func(v *DistributionConfigurationTargetContainerRepository) *DistributionConfigurationTargetContainerRepositoryService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(DistributionConfigurationTargetContainerRepositoryServicePtrOutput)
}

// Image tests configuration.
type ImagePipelineImageTestsConfiguration struct {
	// Defines if tests should be executed when building this image.
	ImageTestsEnabled *bool `pulumi:"imageTestsEnabled"`
	// The maximum time in minutes that tests are permitted to run.
	TimeoutMinutes *int `pulumi:"timeoutMinutes"`
}

// ImagePipelineImageTestsConfigurationInput is an input type that accepts ImagePipelineImageTestsConfigurationArgs and ImagePipelineImageTestsConfigurationOutput values.
// You can construct a concrete instance of `ImagePipelineImageTestsConfigurationInput` via:
//
//          ImagePipelineImageTestsConfigurationArgs{...}
type ImagePipelineImageTestsConfigurationInput interface {
	pulumi.Input

	ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput
	ToImagePipelineImageTestsConfigurationOutputWithContext(context.Context) ImagePipelineImageTestsConfigurationOutput
}

// Image tests configuration.
type ImagePipelineImageTestsConfigurationArgs struct {
	// Defines if tests should be executed when building this image.
	ImageTestsEnabled pulumi.BoolPtrInput `pulumi:"imageTestsEnabled"`
	// The maximum time in minutes that tests are permitted to run.
	TimeoutMinutes pulumi.IntPtrInput `pulumi:"timeoutMinutes"`
}

func (ImagePipelineImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput {
	return i.ToImagePipelineImageTestsConfigurationOutputWithContext(context.Background())
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageTestsConfigurationOutput)
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return i.ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i ImagePipelineImageTestsConfigurationArgs) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageTestsConfigurationOutput).ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx)
}

// ImagePipelineImageTestsConfigurationPtrInput is an input type that accepts ImagePipelineImageTestsConfigurationArgs, ImagePipelineImageTestsConfigurationPtr and ImagePipelineImageTestsConfigurationPtrOutput values.
// You can construct a concrete instance of `ImagePipelineImageTestsConfigurationPtrInput` via:
//
//          ImagePipelineImageTestsConfigurationArgs{...}
//
//  or:
//
//          nil
type ImagePipelineImageTestsConfigurationPtrInput interface {
	pulumi.Input

	ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput
	ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Context) ImagePipelineImageTestsConfigurationPtrOutput
}

type imagePipelineImageTestsConfigurationPtrType ImagePipelineImageTestsConfigurationArgs

func ImagePipelineImageTestsConfigurationPtr(v *ImagePipelineImageTestsConfigurationArgs) ImagePipelineImageTestsConfigurationPtrInput {
	return (*imagePipelineImageTestsConfigurationPtrType)(v)
}

func (*imagePipelineImageTestsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (i *imagePipelineImageTestsConfigurationPtrType) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return i.ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i *imagePipelineImageTestsConfigurationPtrType) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineImageTestsConfigurationPtrOutput)
}

// Image tests configuration.
type ImagePipelineImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationOutput() ImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return o.ToImagePipelineImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (o ImagePipelineImageTestsConfigurationOutput) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePipelineImageTestsConfiguration) *ImagePipelineImageTestsConfiguration {
		return &v
	}).(ImagePipelineImageTestsConfigurationPtrOutput)
}

// Defines if tests should be executed when building this image.
func (o ImagePipelineImageTestsConfigurationOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImagePipelineImageTestsConfiguration) *bool { return v.ImageTestsEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum time in minutes that tests are permitted to run.
func (o ImagePipelineImageTestsConfigurationOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImagePipelineImageTestsConfiguration) *int { return v.TimeoutMinutes }).(pulumi.IntPtrOutput)
}

type ImagePipelineImageTestsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImagePipelineImageTestsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineImageTestsConfiguration)(nil)).Elem()
}

func (o ImagePipelineImageTestsConfigurationPtrOutput) ToImagePipelineImageTestsConfigurationPtrOutput() ImagePipelineImageTestsConfigurationPtrOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationPtrOutput) ToImagePipelineImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImagePipelineImageTestsConfigurationPtrOutput {
	return o
}

func (o ImagePipelineImageTestsConfigurationPtrOutput) Elem() ImagePipelineImageTestsConfigurationOutput {
	return o.ApplyT(func(v *ImagePipelineImageTestsConfiguration) ImagePipelineImageTestsConfiguration {
		if v != nil {
			return *v
		}
		var ret ImagePipelineImageTestsConfiguration
		return ret
	}).(ImagePipelineImageTestsConfigurationOutput)
}

// Defines if tests should be executed when building this image.
func (o ImagePipelineImageTestsConfigurationPtrOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImagePipelineImageTestsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ImageTestsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The maximum time in minutes that tests are permitted to run.
func (o ImagePipelineImageTestsConfigurationPtrOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImagePipelineImageTestsConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutMinutes
	}).(pulumi.IntPtrOutput)
}

// The schedule of the image pipeline.
type ImagePipelineSchedule struct {
	// The condition configures when the pipeline should trigger a new image build.
	PipelineExecutionStartCondition *ImagePipelineSchedulePipelineExecutionStartCondition `pulumi:"pipelineExecutionStartCondition"`
	// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
	ScheduleExpression *string `pulumi:"scheduleExpression"`
}

// ImagePipelineScheduleInput is an input type that accepts ImagePipelineScheduleArgs and ImagePipelineScheduleOutput values.
// You can construct a concrete instance of `ImagePipelineScheduleInput` via:
//
//          ImagePipelineScheduleArgs{...}
type ImagePipelineScheduleInput interface {
	pulumi.Input

	ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput
	ToImagePipelineScheduleOutputWithContext(context.Context) ImagePipelineScheduleOutput
}

// The schedule of the image pipeline.
type ImagePipelineScheduleArgs struct {
	// The condition configures when the pipeline should trigger a new image build.
	PipelineExecutionStartCondition ImagePipelineSchedulePipelineExecutionStartConditionPtrInput `pulumi:"pipelineExecutionStartCondition"`
	// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
	ScheduleExpression pulumi.StringPtrInput `pulumi:"scheduleExpression"`
}

func (ImagePipelineScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineSchedule)(nil)).Elem()
}

func (i ImagePipelineScheduleArgs) ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput {
	return i.ToImagePipelineScheduleOutputWithContext(context.Background())
}

func (i ImagePipelineScheduleArgs) ToImagePipelineScheduleOutputWithContext(ctx context.Context) ImagePipelineScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineScheduleOutput)
}

func (i ImagePipelineScheduleArgs) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return i.ToImagePipelineSchedulePtrOutputWithContext(context.Background())
}

func (i ImagePipelineScheduleArgs) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineScheduleOutput).ToImagePipelineSchedulePtrOutputWithContext(ctx)
}

// ImagePipelineSchedulePtrInput is an input type that accepts ImagePipelineScheduleArgs, ImagePipelineSchedulePtr and ImagePipelineSchedulePtrOutput values.
// You can construct a concrete instance of `ImagePipelineSchedulePtrInput` via:
//
//          ImagePipelineScheduleArgs{...}
//
//  or:
//
//          nil
type ImagePipelineSchedulePtrInput interface {
	pulumi.Input

	ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput
	ToImagePipelineSchedulePtrOutputWithContext(context.Context) ImagePipelineSchedulePtrOutput
}

type imagePipelineSchedulePtrType ImagePipelineScheduleArgs

func ImagePipelineSchedulePtr(v *ImagePipelineScheduleArgs) ImagePipelineSchedulePtrInput {
	return (*imagePipelineSchedulePtrType)(v)
}

func (*imagePipelineSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineSchedule)(nil)).Elem()
}

func (i *imagePipelineSchedulePtrType) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return i.ToImagePipelineSchedulePtrOutputWithContext(context.Background())
}

func (i *imagePipelineSchedulePtrType) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePipelineSchedulePtrOutput)
}

// The schedule of the image pipeline.
type ImagePipelineScheduleOutput struct{ *pulumi.OutputState }

func (ImagePipelineScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePipelineSchedule)(nil)).Elem()
}

func (o ImagePipelineScheduleOutput) ToImagePipelineScheduleOutput() ImagePipelineScheduleOutput {
	return o
}

func (o ImagePipelineScheduleOutput) ToImagePipelineScheduleOutputWithContext(ctx context.Context) ImagePipelineScheduleOutput {
	return o
}

func (o ImagePipelineScheduleOutput) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return o.ToImagePipelineSchedulePtrOutputWithContext(context.Background())
}

func (o ImagePipelineScheduleOutput) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePipelineSchedule) *ImagePipelineSchedule {
		return &v
	}).(ImagePipelineSchedulePtrOutput)
}

// The condition configures when the pipeline should trigger a new image build.
func (o ImagePipelineScheduleOutput) PipelineExecutionStartCondition() ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput {
	return o.ApplyT(func(v ImagePipelineSchedule) *ImagePipelineSchedulePipelineExecutionStartCondition {
		return v.PipelineExecutionStartCondition
	}).(ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput)
}

// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
func (o ImagePipelineScheduleOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePipelineSchedule) *string { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

type ImagePipelineSchedulePtrOutput struct{ *pulumi.OutputState }

func (ImagePipelineSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePipelineSchedule)(nil)).Elem()
}

func (o ImagePipelineSchedulePtrOutput) ToImagePipelineSchedulePtrOutput() ImagePipelineSchedulePtrOutput {
	return o
}

func (o ImagePipelineSchedulePtrOutput) ToImagePipelineSchedulePtrOutputWithContext(ctx context.Context) ImagePipelineSchedulePtrOutput {
	return o
}

func (o ImagePipelineSchedulePtrOutput) Elem() ImagePipelineScheduleOutput {
	return o.ApplyT(func(v *ImagePipelineSchedule) ImagePipelineSchedule {
		if v != nil {
			return *v
		}
		var ret ImagePipelineSchedule
		return ret
	}).(ImagePipelineScheduleOutput)
}

// The condition configures when the pipeline should trigger a new image build.
func (o ImagePipelineSchedulePtrOutput) PipelineExecutionStartCondition() ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput {
	return o.ApplyT(func(v *ImagePipelineSchedule) *ImagePipelineSchedulePipelineExecutionStartCondition {
		if v == nil {
			return nil
		}
		return v.PipelineExecutionStartCondition
	}).(ImagePipelineSchedulePipelineExecutionStartConditionPtrOutput)
}

// The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
func (o ImagePipelineSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePipelineSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

// Specify additional settings and launch scripts for your build instances.
type ImageRecipeAdditionalInstanceConfiguration struct {
	// Contains settings for the SSM agent on your build instance.
	SystemsManagerAgent *ImageRecipeSystemsManagerAgent `pulumi:"systemsManagerAgent"`
	// Use this property to provide commands or a command script to run when you launch your build instance.
	UserDataOverride *string `pulumi:"userDataOverride"`
}

// ImageRecipeAdditionalInstanceConfigurationInput is an input type that accepts ImageRecipeAdditionalInstanceConfigurationArgs and ImageRecipeAdditionalInstanceConfigurationOutput values.
// You can construct a concrete instance of `ImageRecipeAdditionalInstanceConfigurationInput` via:
//
//          ImageRecipeAdditionalInstanceConfigurationArgs{...}
type ImageRecipeAdditionalInstanceConfigurationInput interface {
	pulumi.Input

	ToImageRecipeAdditionalInstanceConfigurationOutput() ImageRecipeAdditionalInstanceConfigurationOutput
	ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(context.Context) ImageRecipeAdditionalInstanceConfigurationOutput
}

// Specify additional settings and launch scripts for your build instances.
type ImageRecipeAdditionalInstanceConfigurationArgs struct {
	// Contains settings for the SSM agent on your build instance.
	SystemsManagerAgent ImageRecipeSystemsManagerAgentPtrInput `pulumi:"systemsManagerAgent"`
	// Use this property to provide commands or a command script to run when you launch your build instance.
	UserDataOverride pulumi.StringPtrInput `pulumi:"userDataOverride"`
}

func (ImageRecipeAdditionalInstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationOutput() ImageRecipeAdditionalInstanceConfigurationOutput {
	return i.ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(context.Background())
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeAdditionalInstanceConfigurationOutput)
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return i.ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i ImageRecipeAdditionalInstanceConfigurationArgs) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeAdditionalInstanceConfigurationOutput).ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx)
}

// ImageRecipeAdditionalInstanceConfigurationPtrInput is an input type that accepts ImageRecipeAdditionalInstanceConfigurationArgs, ImageRecipeAdditionalInstanceConfigurationPtr and ImageRecipeAdditionalInstanceConfigurationPtrOutput values.
// You can construct a concrete instance of `ImageRecipeAdditionalInstanceConfigurationPtrInput` via:
//
//          ImageRecipeAdditionalInstanceConfigurationArgs{...}
//
//  or:
//
//          nil
type ImageRecipeAdditionalInstanceConfigurationPtrInput interface {
	pulumi.Input

	ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput
	ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput
}

type imageRecipeAdditionalInstanceConfigurationPtrType ImageRecipeAdditionalInstanceConfigurationArgs

func ImageRecipeAdditionalInstanceConfigurationPtr(v *ImageRecipeAdditionalInstanceConfigurationArgs) ImageRecipeAdditionalInstanceConfigurationPtrInput {
	return (*imageRecipeAdditionalInstanceConfigurationPtrType)(v)
}

func (*imageRecipeAdditionalInstanceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (i *imageRecipeAdditionalInstanceConfigurationPtrType) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return i.ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (i *imageRecipeAdditionalInstanceConfigurationPtrType) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeAdditionalInstanceConfigurationPtrOutput)
}

// Specify additional settings and launch scripts for your build instances.
type ImageRecipeAdditionalInstanceConfigurationOutput struct{ *pulumi.OutputState }

func (ImageRecipeAdditionalInstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationOutput() ImageRecipeAdditionalInstanceConfigurationOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o.ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(context.Background())
}

func (o ImageRecipeAdditionalInstanceConfigurationOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRecipeAdditionalInstanceConfiguration) *ImageRecipeAdditionalInstanceConfiguration {
		return &v
	}).(ImageRecipeAdditionalInstanceConfigurationPtrOutput)
}

// Contains settings for the SSM agent on your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationOutput) SystemsManagerAgent() ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ApplyT(func(v ImageRecipeAdditionalInstanceConfiguration) *ImageRecipeSystemsManagerAgent {
		return v.SystemsManagerAgent
	}).(ImageRecipeSystemsManagerAgentPtrOutput)
}

// Use this property to provide commands or a command script to run when you launch your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationOutput) UserDataOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeAdditionalInstanceConfiguration) *string { return v.UserDataOverride }).(pulumi.StringPtrOutput)
}

type ImageRecipeAdditionalInstanceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImageRecipeAdditionalInstanceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeAdditionalInstanceConfiguration)(nil)).Elem()
}

func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutput() ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) ToImageRecipeAdditionalInstanceConfigurationPtrOutputWithContext(ctx context.Context) ImageRecipeAdditionalInstanceConfigurationPtrOutput {
	return o
}

func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) Elem() ImageRecipeAdditionalInstanceConfigurationOutput {
	return o.ApplyT(func(v *ImageRecipeAdditionalInstanceConfiguration) ImageRecipeAdditionalInstanceConfiguration {
		if v != nil {
			return *v
		}
		var ret ImageRecipeAdditionalInstanceConfiguration
		return ret
	}).(ImageRecipeAdditionalInstanceConfigurationOutput)
}

// Contains settings for the SSM agent on your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) SystemsManagerAgent() ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ApplyT(func(v *ImageRecipeAdditionalInstanceConfiguration) *ImageRecipeSystemsManagerAgent {
		if v == nil {
			return nil
		}
		return v.SystemsManagerAgent
	}).(ImageRecipeSystemsManagerAgentPtrOutput)
}

// Use this property to provide commands or a command script to run when you launch your build instance.
func (o ImageRecipeAdditionalInstanceConfigurationPtrOutput) UserDataOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipeAdditionalInstanceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.UserDataOverride
	}).(pulumi.StringPtrOutput)
}

// Configuration details of the component.
type ImageRecipeComponentConfiguration struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn *string `pulumi:"componentArn"`
	// A group of parameter settings that are used to configure the component for a specific recipe.
	Parameters []ImageRecipeComponentParameter `pulumi:"parameters"`
}

// ImageRecipeComponentConfigurationInput is an input type that accepts ImageRecipeComponentConfigurationArgs and ImageRecipeComponentConfigurationOutput values.
// You can construct a concrete instance of `ImageRecipeComponentConfigurationInput` via:
//
//          ImageRecipeComponentConfigurationArgs{...}
type ImageRecipeComponentConfigurationInput interface {
	pulumi.Input

	ToImageRecipeComponentConfigurationOutput() ImageRecipeComponentConfigurationOutput
	ToImageRecipeComponentConfigurationOutputWithContext(context.Context) ImageRecipeComponentConfigurationOutput
}

// Configuration details of the component.
type ImageRecipeComponentConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn pulumi.StringPtrInput `pulumi:"componentArn"`
	// A group of parameter settings that are used to configure the component for a specific recipe.
	Parameters ImageRecipeComponentParameterArrayInput `pulumi:"parameters"`
}

func (ImageRecipeComponentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (i ImageRecipeComponentConfigurationArgs) ToImageRecipeComponentConfigurationOutput() ImageRecipeComponentConfigurationOutput {
	return i.ToImageRecipeComponentConfigurationOutputWithContext(context.Background())
}

func (i ImageRecipeComponentConfigurationArgs) ToImageRecipeComponentConfigurationOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentConfigurationOutput)
}

// ImageRecipeComponentConfigurationArrayInput is an input type that accepts ImageRecipeComponentConfigurationArray and ImageRecipeComponentConfigurationArrayOutput values.
// You can construct a concrete instance of `ImageRecipeComponentConfigurationArrayInput` via:
//
//          ImageRecipeComponentConfigurationArray{ ImageRecipeComponentConfigurationArgs{...} }
type ImageRecipeComponentConfigurationArrayInput interface {
	pulumi.Input

	ToImageRecipeComponentConfigurationArrayOutput() ImageRecipeComponentConfigurationArrayOutput
	ToImageRecipeComponentConfigurationArrayOutputWithContext(context.Context) ImageRecipeComponentConfigurationArrayOutput
}

type ImageRecipeComponentConfigurationArray []ImageRecipeComponentConfigurationInput

func (ImageRecipeComponentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (i ImageRecipeComponentConfigurationArray) ToImageRecipeComponentConfigurationArrayOutput() ImageRecipeComponentConfigurationArrayOutput {
	return i.ToImageRecipeComponentConfigurationArrayOutputWithContext(context.Background())
}

func (i ImageRecipeComponentConfigurationArray) ToImageRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentConfigurationArrayOutput)
}

// Configuration details of the component.
type ImageRecipeComponentConfigurationOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (o ImageRecipeComponentConfigurationOutput) ToImageRecipeComponentConfigurationOutput() ImageRecipeComponentConfigurationOutput {
	return o
}

func (o ImageRecipeComponentConfigurationOutput) ToImageRecipeComponentConfigurationOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the component.
func (o ImageRecipeComponentConfigurationOutput) ComponentArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeComponentConfiguration) *string { return v.ComponentArn }).(pulumi.StringPtrOutput)
}

// A group of parameter settings that are used to configure the component for a specific recipe.
func (o ImageRecipeComponentConfigurationOutput) Parameters() ImageRecipeComponentParameterArrayOutput {
	return o.ApplyT(func(v ImageRecipeComponentConfiguration) []ImageRecipeComponentParameter { return v.Parameters }).(ImageRecipeComponentParameterArrayOutput)
}

type ImageRecipeComponentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentConfiguration)(nil)).Elem()
}

func (o ImageRecipeComponentConfigurationArrayOutput) ToImageRecipeComponentConfigurationArrayOutput() ImageRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ImageRecipeComponentConfigurationArrayOutput) ToImageRecipeComponentConfigurationArrayOutputWithContext(ctx context.Context) ImageRecipeComponentConfigurationArrayOutput {
	return o
}

func (o ImageRecipeComponentConfigurationArrayOutput) Index(i pulumi.IntInput) ImageRecipeComponentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRecipeComponentConfiguration {
		return vs[0].([]ImageRecipeComponentConfiguration)[vs[1].(int)]
	}).(ImageRecipeComponentConfigurationOutput)
}

// Contains a key/value pair that sets the named component parameter.
type ImageRecipeComponentParameter struct {
	// The name of the component parameter to set.
	Name string `pulumi:"name"`
	// Sets the value for the named component parameter.
	Value []string `pulumi:"value"`
}

// ImageRecipeComponentParameterInput is an input type that accepts ImageRecipeComponentParameterArgs and ImageRecipeComponentParameterOutput values.
// You can construct a concrete instance of `ImageRecipeComponentParameterInput` via:
//
//          ImageRecipeComponentParameterArgs{...}
type ImageRecipeComponentParameterInput interface {
	pulumi.Input

	ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput
	ToImageRecipeComponentParameterOutputWithContext(context.Context) ImageRecipeComponentParameterOutput
}

// Contains a key/value pair that sets the named component parameter.
type ImageRecipeComponentParameterArgs struct {
	// The name of the component parameter to set.
	Name pulumi.StringInput `pulumi:"name"`
	// Sets the value for the named component parameter.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ImageRecipeComponentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentParameter)(nil)).Elem()
}

func (i ImageRecipeComponentParameterArgs) ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput {
	return i.ToImageRecipeComponentParameterOutputWithContext(context.Background())
}

func (i ImageRecipeComponentParameterArgs) ToImageRecipeComponentParameterOutputWithContext(ctx context.Context) ImageRecipeComponentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentParameterOutput)
}

// ImageRecipeComponentParameterArrayInput is an input type that accepts ImageRecipeComponentParameterArray and ImageRecipeComponentParameterArrayOutput values.
// You can construct a concrete instance of `ImageRecipeComponentParameterArrayInput` via:
//
//          ImageRecipeComponentParameterArray{ ImageRecipeComponentParameterArgs{...} }
type ImageRecipeComponentParameterArrayInput interface {
	pulumi.Input

	ToImageRecipeComponentParameterArrayOutput() ImageRecipeComponentParameterArrayOutput
	ToImageRecipeComponentParameterArrayOutputWithContext(context.Context) ImageRecipeComponentParameterArrayOutput
}

type ImageRecipeComponentParameterArray []ImageRecipeComponentParameterInput

func (ImageRecipeComponentParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentParameter)(nil)).Elem()
}

func (i ImageRecipeComponentParameterArray) ToImageRecipeComponentParameterArrayOutput() ImageRecipeComponentParameterArrayOutput {
	return i.ToImageRecipeComponentParameterArrayOutputWithContext(context.Background())
}

func (i ImageRecipeComponentParameterArray) ToImageRecipeComponentParameterArrayOutputWithContext(ctx context.Context) ImageRecipeComponentParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeComponentParameterArrayOutput)
}

// Contains a key/value pair that sets the named component parameter.
type ImageRecipeComponentParameterOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeComponentParameter)(nil)).Elem()
}

func (o ImageRecipeComponentParameterOutput) ToImageRecipeComponentParameterOutput() ImageRecipeComponentParameterOutput {
	return o
}

func (o ImageRecipeComponentParameterOutput) ToImageRecipeComponentParameterOutputWithContext(ctx context.Context) ImageRecipeComponentParameterOutput {
	return o
}

// The name of the component parameter to set.
func (o ImageRecipeComponentParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRecipeComponentParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Sets the value for the named component parameter.
func (o ImageRecipeComponentParameterOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRecipeComponentParameter) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ImageRecipeComponentParameterArrayOutput struct{ *pulumi.OutputState }

func (ImageRecipeComponentParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeComponentParameter)(nil)).Elem()
}

func (o ImageRecipeComponentParameterArrayOutput) ToImageRecipeComponentParameterArrayOutput() ImageRecipeComponentParameterArrayOutput {
	return o
}

func (o ImageRecipeComponentParameterArrayOutput) ToImageRecipeComponentParameterArrayOutputWithContext(ctx context.Context) ImageRecipeComponentParameterArrayOutput {
	return o
}

func (o ImageRecipeComponentParameterArrayOutput) Index(i pulumi.IntInput) ImageRecipeComponentParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRecipeComponentParameter {
		return vs[0].([]ImageRecipeComponentParameter)[vs[1].(int)]
	}).(ImageRecipeComponentParameterOutput)
}

// Amazon EBS-specific block device mapping specifications.
type ImageRecipeEbsInstanceBlockDeviceSpecification struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted *bool `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops *int `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId *string `pulumi:"snapshotId"`
	// Use to override the device's volume size.
	VolumeSize *int `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType *ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType `pulumi:"volumeType"`
}

// ImageRecipeEbsInstanceBlockDeviceSpecificationInput is an input type that accepts ImageRecipeEbsInstanceBlockDeviceSpecificationArgs and ImageRecipeEbsInstanceBlockDeviceSpecificationOutput values.
// You can construct a concrete instance of `ImageRecipeEbsInstanceBlockDeviceSpecificationInput` via:
//
//          ImageRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
type ImageRecipeEbsInstanceBlockDeviceSpecificationInput interface {
	pulumi.Input

	ToImageRecipeEbsInstanceBlockDeviceSpecificationOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput
	ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationOutput
}

// Amazon EBS-specific block device mapping specifications.
type ImageRecipeEbsInstanceBlockDeviceSpecificationArgs struct {
	// Use to configure delete on termination of the associated device.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// Use to configure device encryption.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// Use to configure device IOPS.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// Use to configure the KMS key to use when encrypting the device.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The snapshot that defines the device contents.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// Use to override the device's volume size.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// Use to override the device's volume type.
	VolumeType ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrInput `pulumi:"volumeType"`
}

func (ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return i.ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(context.Background())
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput).ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx)
}

// ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput is an input type that accepts ImageRecipeEbsInstanceBlockDeviceSpecificationArgs, ImageRecipeEbsInstanceBlockDeviceSpecificationPtr and ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput values.
// You can construct a concrete instance of `ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput` via:
//
//          ImageRecipeEbsInstanceBlockDeviceSpecificationArgs{...}
//
//  or:
//
//          nil
type ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput interface {
	pulumi.Input

	ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
	ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput
}

type imageRecipeEbsInstanceBlockDeviceSpecificationPtrType ImageRecipeEbsInstanceBlockDeviceSpecificationArgs

func ImageRecipeEbsInstanceBlockDeviceSpecificationPtr(v *ImageRecipeEbsInstanceBlockDeviceSpecificationArgs) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput {
	return (*imageRecipeEbsInstanceBlockDeviceSpecificationPtrType)(v)
}

func (*imageRecipeEbsInstanceBlockDeviceSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (i *imageRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return i.ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (i *imageRecipeEbsInstanceBlockDeviceSpecificationPtrType) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Amazon EBS-specific block device mapping specifications.
type ImageRecipeEbsInstanceBlockDeviceSpecificationOutput struct{ *pulumi.OutputState }

func (ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(context.Background())
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRecipeEbsInstanceBlockDeviceSpecification) *ImageRecipeEbsInstanceBlockDeviceSpecification {
		return &v
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Use to configure delete on termination of the associated device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Use to override the device's volume size.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationOutput) VolumeType() ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v ImageRecipeEbsInstanceBlockDeviceSpecification) *ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		return v.VolumeType
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

type ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput struct{ *pulumi.OutputState }

func (ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeEbsInstanceBlockDeviceSpecification)(nil)).Elem()
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) ToImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutputWithContext(ctx context.Context) ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o
}

func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Elem() ImageRecipeEbsInstanceBlockDeviceSpecificationOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) ImageRecipeEbsInstanceBlockDeviceSpecification {
		if v != nil {
			return *v
		}
		var ret ImageRecipeEbsInstanceBlockDeviceSpecification
		return ret
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput)
}

// Use to configure delete on termination of the associated device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device encryption.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// Use to configure device IOPS.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// Use to configure the KMS key to use when encrypting the device.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The snapshot that defines the device contents.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// Use to override the device's volume size.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.IntPtrOutput)
}

// Use to override the device's volume type.
func (o ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput) VolumeType() ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput {
	return o.ApplyT(func(v *ImageRecipeEbsInstanceBlockDeviceSpecification) *ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeTypePtrOutput)
}

// Defines block device mappings for the instance used to configure your image.
type ImageRecipeInstanceBlockDeviceMapping struct {
	// The device to which these mappings apply.
	DeviceName *string `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs *ImageRecipeEbsInstanceBlockDeviceSpecification `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice *string `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName *string `pulumi:"virtualName"`
}

// ImageRecipeInstanceBlockDeviceMappingInput is an input type that accepts ImageRecipeInstanceBlockDeviceMappingArgs and ImageRecipeInstanceBlockDeviceMappingOutput values.
// You can construct a concrete instance of `ImageRecipeInstanceBlockDeviceMappingInput` via:
//
//          ImageRecipeInstanceBlockDeviceMappingArgs{...}
type ImageRecipeInstanceBlockDeviceMappingInput interface {
	pulumi.Input

	ToImageRecipeInstanceBlockDeviceMappingOutput() ImageRecipeInstanceBlockDeviceMappingOutput
	ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(context.Context) ImageRecipeInstanceBlockDeviceMappingOutput
}

// Defines block device mappings for the instance used to configure your image.
type ImageRecipeInstanceBlockDeviceMappingArgs struct {
	// The device to which these mappings apply.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Use to manage Amazon EBS-specific configuration for this mapping.
	Ebs ImageRecipeEbsInstanceBlockDeviceSpecificationPtrInput `pulumi:"ebs"`
	// Use to remove a mapping from the parent image.
	NoDevice pulumi.StringPtrInput `pulumi:"noDevice"`
	// Use to manage instance ephemeral devices.
	VirtualName pulumi.StringPtrInput `pulumi:"virtualName"`
}

func (ImageRecipeInstanceBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ImageRecipeInstanceBlockDeviceMappingArgs) ToImageRecipeInstanceBlockDeviceMappingOutput() ImageRecipeInstanceBlockDeviceMappingOutput {
	return i.ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(context.Background())
}

func (i ImageRecipeInstanceBlockDeviceMappingArgs) ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeInstanceBlockDeviceMappingOutput)
}

// ImageRecipeInstanceBlockDeviceMappingArrayInput is an input type that accepts ImageRecipeInstanceBlockDeviceMappingArray and ImageRecipeInstanceBlockDeviceMappingArrayOutput values.
// You can construct a concrete instance of `ImageRecipeInstanceBlockDeviceMappingArrayInput` via:
//
//          ImageRecipeInstanceBlockDeviceMappingArray{ ImageRecipeInstanceBlockDeviceMappingArgs{...} }
type ImageRecipeInstanceBlockDeviceMappingArrayInput interface {
	pulumi.Input

	ToImageRecipeInstanceBlockDeviceMappingArrayOutput() ImageRecipeInstanceBlockDeviceMappingArrayOutput
	ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Context) ImageRecipeInstanceBlockDeviceMappingArrayOutput
}

type ImageRecipeInstanceBlockDeviceMappingArray []ImageRecipeInstanceBlockDeviceMappingInput

func (ImageRecipeInstanceBlockDeviceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (i ImageRecipeInstanceBlockDeviceMappingArray) ToImageRecipeInstanceBlockDeviceMappingArrayOutput() ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return i.ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(context.Background())
}

func (i ImageRecipeInstanceBlockDeviceMappingArray) ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeInstanceBlockDeviceMappingArrayOutput)
}

// Defines block device mappings for the instance used to configure your image.
type ImageRecipeInstanceBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (ImageRecipeInstanceBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ImageRecipeInstanceBlockDeviceMappingOutput) ToImageRecipeInstanceBlockDeviceMappingOutput() ImageRecipeInstanceBlockDeviceMappingOutput {
	return o
}

func (o ImageRecipeInstanceBlockDeviceMappingOutput) ToImageRecipeInstanceBlockDeviceMappingOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingOutput {
	return o
}

// The device to which these mappings apply.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Use to manage Amazon EBS-specific configuration for this mapping.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) Ebs() ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *ImageRecipeEbsInstanceBlockDeviceSpecification {
		return v.Ebs
	}).(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput)
}

// Use to remove a mapping from the parent image.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) NoDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *string { return v.NoDevice }).(pulumi.StringPtrOutput)
}

// Use to manage instance ephemeral devices.
func (o ImageRecipeInstanceBlockDeviceMappingOutput) VirtualName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRecipeInstanceBlockDeviceMapping) *string { return v.VirtualName }).(pulumi.StringPtrOutput)
}

type ImageRecipeInstanceBlockDeviceMappingArrayOutput struct{ *pulumi.OutputState }

func (ImageRecipeInstanceBlockDeviceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRecipeInstanceBlockDeviceMapping)(nil)).Elem()
}

func (o ImageRecipeInstanceBlockDeviceMappingArrayOutput) ToImageRecipeInstanceBlockDeviceMappingArrayOutput() ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ImageRecipeInstanceBlockDeviceMappingArrayOutput) ToImageRecipeInstanceBlockDeviceMappingArrayOutputWithContext(ctx context.Context) ImageRecipeInstanceBlockDeviceMappingArrayOutput {
	return o
}

func (o ImageRecipeInstanceBlockDeviceMappingArrayOutput) Index(i pulumi.IntInput) ImageRecipeInstanceBlockDeviceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRecipeInstanceBlockDeviceMapping {
		return vs[0].([]ImageRecipeInstanceBlockDeviceMapping)[vs[1].(int)]
	}).(ImageRecipeInstanceBlockDeviceMappingOutput)
}

// Contains settings for the SSM agent on your build instance.
type ImageRecipeSystemsManagerAgent struct {
	// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
	UninstallAfterBuild *bool `pulumi:"uninstallAfterBuild"`
}

// ImageRecipeSystemsManagerAgentInput is an input type that accepts ImageRecipeSystemsManagerAgentArgs and ImageRecipeSystemsManagerAgentOutput values.
// You can construct a concrete instance of `ImageRecipeSystemsManagerAgentInput` via:
//
//          ImageRecipeSystemsManagerAgentArgs{...}
type ImageRecipeSystemsManagerAgentInput interface {
	pulumi.Input

	ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput
	ToImageRecipeSystemsManagerAgentOutputWithContext(context.Context) ImageRecipeSystemsManagerAgentOutput
}

// Contains settings for the SSM agent on your build instance.
type ImageRecipeSystemsManagerAgentArgs struct {
	// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
	UninstallAfterBuild pulumi.BoolPtrInput `pulumi:"uninstallAfterBuild"`
}

func (ImageRecipeSystemsManagerAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput {
	return i.ToImageRecipeSystemsManagerAgentOutputWithContext(context.Background())
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeSystemsManagerAgentOutput)
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return i.ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Background())
}

func (i ImageRecipeSystemsManagerAgentArgs) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeSystemsManagerAgentOutput).ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx)
}

// ImageRecipeSystemsManagerAgentPtrInput is an input type that accepts ImageRecipeSystemsManagerAgentArgs, ImageRecipeSystemsManagerAgentPtr and ImageRecipeSystemsManagerAgentPtrOutput values.
// You can construct a concrete instance of `ImageRecipeSystemsManagerAgentPtrInput` via:
//
//          ImageRecipeSystemsManagerAgentArgs{...}
//
//  or:
//
//          nil
type ImageRecipeSystemsManagerAgentPtrInput interface {
	pulumi.Input

	ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput
	ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Context) ImageRecipeSystemsManagerAgentPtrOutput
}

type imageRecipeSystemsManagerAgentPtrType ImageRecipeSystemsManagerAgentArgs

func ImageRecipeSystemsManagerAgentPtr(v *ImageRecipeSystemsManagerAgentArgs) ImageRecipeSystemsManagerAgentPtrInput {
	return (*imageRecipeSystemsManagerAgentPtrType)(v)
}

func (*imageRecipeSystemsManagerAgentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (i *imageRecipeSystemsManagerAgentPtrType) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return i.ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Background())
}

func (i *imageRecipeSystemsManagerAgentPtrType) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRecipeSystemsManagerAgentPtrOutput)
}

// Contains settings for the SSM agent on your build instance.
type ImageRecipeSystemsManagerAgentOutput struct{ *pulumi.OutputState }

func (ImageRecipeSystemsManagerAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentOutput() ImageRecipeSystemsManagerAgentOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ToImageRecipeSystemsManagerAgentPtrOutputWithContext(context.Background())
}

func (o ImageRecipeSystemsManagerAgentOutput) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRecipeSystemsManagerAgent) *ImageRecipeSystemsManagerAgent {
		return &v
	}).(ImageRecipeSystemsManagerAgentPtrOutput)
}

// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
func (o ImageRecipeSystemsManagerAgentOutput) UninstallAfterBuild() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRecipeSystemsManagerAgent) *bool { return v.UninstallAfterBuild }).(pulumi.BoolPtrOutput)
}

type ImageRecipeSystemsManagerAgentPtrOutput struct{ *pulumi.OutputState }

func (ImageRecipeSystemsManagerAgentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRecipeSystemsManagerAgent)(nil)).Elem()
}

func (o ImageRecipeSystemsManagerAgentPtrOutput) ToImageRecipeSystemsManagerAgentPtrOutput() ImageRecipeSystemsManagerAgentPtrOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentPtrOutput) ToImageRecipeSystemsManagerAgentPtrOutputWithContext(ctx context.Context) ImageRecipeSystemsManagerAgentPtrOutput {
	return o
}

func (o ImageRecipeSystemsManagerAgentPtrOutput) Elem() ImageRecipeSystemsManagerAgentOutput {
	return o.ApplyT(func(v *ImageRecipeSystemsManagerAgent) ImageRecipeSystemsManagerAgent {
		if v != nil {
			return *v
		}
		var ret ImageRecipeSystemsManagerAgent
		return ret
	}).(ImageRecipeSystemsManagerAgentOutput)
}

// Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
func (o ImageRecipeSystemsManagerAgentPtrOutput) UninstallAfterBuild() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRecipeSystemsManagerAgent) *bool {
		if v == nil {
			return nil
		}
		return v.UninstallAfterBuild
	}).(pulumi.BoolPtrOutput)
}

// The image tests configuration used when creating this image.
type ImageTestsConfiguration struct {
	// ImageTestsEnabled
	ImageTestsEnabled *bool `pulumi:"imageTestsEnabled"`
	// TimeoutMinutes
	TimeoutMinutes *int `pulumi:"timeoutMinutes"`
}

// ImageTestsConfigurationInput is an input type that accepts ImageTestsConfigurationArgs and ImageTestsConfigurationOutput values.
// You can construct a concrete instance of `ImageTestsConfigurationInput` via:
//
//          ImageTestsConfigurationArgs{...}
type ImageTestsConfigurationInput interface {
	pulumi.Input

	ToImageTestsConfigurationOutput() ImageTestsConfigurationOutput
	ToImageTestsConfigurationOutputWithContext(context.Context) ImageTestsConfigurationOutput
}

// The image tests configuration used when creating this image.
type ImageTestsConfigurationArgs struct {
	// ImageTestsEnabled
	ImageTestsEnabled pulumi.BoolPtrInput `pulumi:"imageTestsEnabled"`
	// TimeoutMinutes
	TimeoutMinutes pulumi.IntPtrInput `pulumi:"timeoutMinutes"`
}

func (ImageTestsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTestsConfiguration)(nil)).Elem()
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationOutput() ImageTestsConfigurationOutput {
	return i.ToImageTestsConfigurationOutputWithContext(context.Background())
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationOutputWithContext(ctx context.Context) ImageTestsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTestsConfigurationOutput)
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return i.ToImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i ImageTestsConfigurationArgs) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTestsConfigurationOutput).ToImageTestsConfigurationPtrOutputWithContext(ctx)
}

// ImageTestsConfigurationPtrInput is an input type that accepts ImageTestsConfigurationArgs, ImageTestsConfigurationPtr and ImageTestsConfigurationPtrOutput values.
// You can construct a concrete instance of `ImageTestsConfigurationPtrInput` via:
//
//          ImageTestsConfigurationArgs{...}
//
//  or:
//
//          nil
type ImageTestsConfigurationPtrInput interface {
	pulumi.Input

	ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput
	ToImageTestsConfigurationPtrOutputWithContext(context.Context) ImageTestsConfigurationPtrOutput
}

type imageTestsConfigurationPtrType ImageTestsConfigurationArgs

func ImageTestsConfigurationPtr(v *ImageTestsConfigurationArgs) ImageTestsConfigurationPtrInput {
	return (*imageTestsConfigurationPtrType)(v)
}

func (*imageTestsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTestsConfiguration)(nil)).Elem()
}

func (i *imageTestsConfigurationPtrType) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return i.ToImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (i *imageTestsConfigurationPtrType) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTestsConfigurationPtrOutput)
}

// The image tests configuration used when creating this image.
type ImageTestsConfigurationOutput struct{ *pulumi.OutputState }

func (ImageTestsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTestsConfiguration)(nil)).Elem()
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationOutput() ImageTestsConfigurationOutput {
	return o
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationOutputWithContext(ctx context.Context) ImageTestsConfigurationOutput {
	return o
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return o.ToImageTestsConfigurationPtrOutputWithContext(context.Background())
}

func (o ImageTestsConfigurationOutput) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageTestsConfiguration) *ImageTestsConfiguration {
		return &v
	}).(ImageTestsConfigurationPtrOutput)
}

// ImageTestsEnabled
func (o ImageTestsConfigurationOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageTestsConfiguration) *bool { return v.ImageTestsEnabled }).(pulumi.BoolPtrOutput)
}

// TimeoutMinutes
func (o ImageTestsConfigurationOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageTestsConfiguration) *int { return v.TimeoutMinutes }).(pulumi.IntPtrOutput)
}

type ImageTestsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ImageTestsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTestsConfiguration)(nil)).Elem()
}

func (o ImageTestsConfigurationPtrOutput) ToImageTestsConfigurationPtrOutput() ImageTestsConfigurationPtrOutput {
	return o
}

func (o ImageTestsConfigurationPtrOutput) ToImageTestsConfigurationPtrOutputWithContext(ctx context.Context) ImageTestsConfigurationPtrOutput {
	return o
}

func (o ImageTestsConfigurationPtrOutput) Elem() ImageTestsConfigurationOutput {
	return o.ApplyT(func(v *ImageTestsConfiguration) ImageTestsConfiguration {
		if v != nil {
			return *v
		}
		var ret ImageTestsConfiguration
		return ret
	}).(ImageTestsConfigurationOutput)
}

// ImageTestsEnabled
func (o ImageTestsConfigurationPtrOutput) ImageTestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageTestsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ImageTestsEnabled
	}).(pulumi.BoolPtrOutput)
}

// TimeoutMinutes
func (o ImageTestsConfigurationPtrOutput) TimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageTestsConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutMinutes
	}).(pulumi.IntPtrOutput)
}

// The logging configuration of the infrastructure configuration.
type InfrastructureConfigurationLogging struct {
	S3Logs *InfrastructureConfigurationS3Logs `pulumi:"s3Logs"`
}

// InfrastructureConfigurationLoggingInput is an input type that accepts InfrastructureConfigurationLoggingArgs and InfrastructureConfigurationLoggingOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationLoggingInput` via:
//
//          InfrastructureConfigurationLoggingArgs{...}
type InfrastructureConfigurationLoggingInput interface {
	pulumi.Input

	ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput
	ToInfrastructureConfigurationLoggingOutputWithContext(context.Context) InfrastructureConfigurationLoggingOutput
}

// The logging configuration of the infrastructure configuration.
type InfrastructureConfigurationLoggingArgs struct {
	S3Logs InfrastructureConfigurationS3LogsPtrInput `pulumi:"s3Logs"`
}

func (InfrastructureConfigurationLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLogging)(nil)).Elem()
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput {
	return i.ToInfrastructureConfigurationLoggingOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingOutput)
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return i.ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationLoggingArgs) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingOutput).ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx)
}

// InfrastructureConfigurationLoggingPtrInput is an input type that accepts InfrastructureConfigurationLoggingArgs, InfrastructureConfigurationLoggingPtr and InfrastructureConfigurationLoggingPtrOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationLoggingPtrInput` via:
//
//          InfrastructureConfigurationLoggingArgs{...}
//
//  or:
//
//          nil
type InfrastructureConfigurationLoggingPtrInput interface {
	pulumi.Input

	ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput
	ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Context) InfrastructureConfigurationLoggingPtrOutput
}

type infrastructureConfigurationLoggingPtrType InfrastructureConfigurationLoggingArgs

func InfrastructureConfigurationLoggingPtr(v *InfrastructureConfigurationLoggingArgs) InfrastructureConfigurationLoggingPtrInput {
	return (*infrastructureConfigurationLoggingPtrType)(v)
}

func (*infrastructureConfigurationLoggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationLogging)(nil)).Elem()
}

func (i *infrastructureConfigurationLoggingPtrType) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return i.ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Background())
}

func (i *infrastructureConfigurationLoggingPtrType) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationLoggingPtrOutput)
}

// The logging configuration of the infrastructure configuration.
type InfrastructureConfigurationLoggingOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationLogging)(nil)).Elem()
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingOutput() InfrastructureConfigurationLoggingOutput {
	return o
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingOutput {
	return o
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return o.ToInfrastructureConfigurationLoggingPtrOutputWithContext(context.Background())
}

func (o InfrastructureConfigurationLoggingOutput) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureConfigurationLogging) *InfrastructureConfigurationLogging {
		return &v
	}).(InfrastructureConfigurationLoggingPtrOutput)
}

func (o InfrastructureConfigurationLoggingOutput) S3Logs() InfrastructureConfigurationS3LogsPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationLogging) *InfrastructureConfigurationS3Logs { return v.S3Logs }).(InfrastructureConfigurationS3LogsPtrOutput)
}

type InfrastructureConfigurationLoggingPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationLogging)(nil)).Elem()
}

func (o InfrastructureConfigurationLoggingPtrOutput) ToInfrastructureConfigurationLoggingPtrOutput() InfrastructureConfigurationLoggingPtrOutput {
	return o
}

func (o InfrastructureConfigurationLoggingPtrOutput) ToInfrastructureConfigurationLoggingPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationLoggingPtrOutput {
	return o
}

func (o InfrastructureConfigurationLoggingPtrOutput) Elem() InfrastructureConfigurationLoggingOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationLogging) InfrastructureConfigurationLogging {
		if v != nil {
			return *v
		}
		var ret InfrastructureConfigurationLogging
		return ret
	}).(InfrastructureConfigurationLoggingOutput)
}

func (o InfrastructureConfigurationLoggingPtrOutput) S3Logs() InfrastructureConfigurationS3LogsPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationLogging) *InfrastructureConfigurationS3Logs {
		if v == nil {
			return nil
		}
		return v.S3Logs
	}).(InfrastructureConfigurationS3LogsPtrOutput)
}

// The S3 path in which to store the logs.
type InfrastructureConfigurationS3Logs struct {
	// S3BucketName
	S3BucketName *string `pulumi:"s3BucketName"`
	// S3KeyPrefix
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

// InfrastructureConfigurationS3LogsInput is an input type that accepts InfrastructureConfigurationS3LogsArgs and InfrastructureConfigurationS3LogsOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationS3LogsInput` via:
//
//          InfrastructureConfigurationS3LogsArgs{...}
type InfrastructureConfigurationS3LogsInput interface {
	pulumi.Input

	ToInfrastructureConfigurationS3LogsOutput() InfrastructureConfigurationS3LogsOutput
	ToInfrastructureConfigurationS3LogsOutputWithContext(context.Context) InfrastructureConfigurationS3LogsOutput
}

// The S3 path in which to store the logs.
type InfrastructureConfigurationS3LogsArgs struct {
	// S3BucketName
	S3BucketName pulumi.StringPtrInput `pulumi:"s3BucketName"`
	// S3KeyPrefix
	S3KeyPrefix pulumi.StringPtrInput `pulumi:"s3KeyPrefix"`
}

func (InfrastructureConfigurationS3LogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsOutput() InfrastructureConfigurationS3LogsOutput {
	return i.ToInfrastructureConfigurationS3LogsOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationS3LogsOutput)
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return i.ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Background())
}

func (i InfrastructureConfigurationS3LogsArgs) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationS3LogsOutput).ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx)
}

// InfrastructureConfigurationS3LogsPtrInput is an input type that accepts InfrastructureConfigurationS3LogsArgs, InfrastructureConfigurationS3LogsPtr and InfrastructureConfigurationS3LogsPtrOutput values.
// You can construct a concrete instance of `InfrastructureConfigurationS3LogsPtrInput` via:
//
//          InfrastructureConfigurationS3LogsArgs{...}
//
//  or:
//
//          nil
type InfrastructureConfigurationS3LogsPtrInput interface {
	pulumi.Input

	ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput
	ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Context) InfrastructureConfigurationS3LogsPtrOutput
}

type infrastructureConfigurationS3LogsPtrType InfrastructureConfigurationS3LogsArgs

func InfrastructureConfigurationS3LogsPtr(v *InfrastructureConfigurationS3LogsArgs) InfrastructureConfigurationS3LogsPtrInput {
	return (*infrastructureConfigurationS3LogsPtrType)(v)
}

func (*infrastructureConfigurationS3LogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (i *infrastructureConfigurationS3LogsPtrType) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return i.ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Background())
}

func (i *infrastructureConfigurationS3LogsPtrType) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureConfigurationS3LogsPtrOutput)
}

// The S3 path in which to store the logs.
type InfrastructureConfigurationS3LogsOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationS3LogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsOutput() InfrastructureConfigurationS3LogsOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return o.ToInfrastructureConfigurationS3LogsPtrOutputWithContext(context.Background())
}

func (o InfrastructureConfigurationS3LogsOutput) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InfrastructureConfigurationS3Logs) *InfrastructureConfigurationS3Logs {
		return &v
	}).(InfrastructureConfigurationS3LogsPtrOutput)
}

// S3BucketName
func (o InfrastructureConfigurationS3LogsOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationS3Logs) *string { return v.S3BucketName }).(pulumi.StringPtrOutput)
}

// S3KeyPrefix
func (o InfrastructureConfigurationS3LogsOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfrastructureConfigurationS3Logs) *string { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

type InfrastructureConfigurationS3LogsPtrOutput struct{ *pulumi.OutputState }

func (InfrastructureConfigurationS3LogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfrastructureConfigurationS3Logs)(nil)).Elem()
}

func (o InfrastructureConfigurationS3LogsPtrOutput) ToInfrastructureConfigurationS3LogsPtrOutput() InfrastructureConfigurationS3LogsPtrOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsPtrOutput) ToInfrastructureConfigurationS3LogsPtrOutputWithContext(ctx context.Context) InfrastructureConfigurationS3LogsPtrOutput {
	return o
}

func (o InfrastructureConfigurationS3LogsPtrOutput) Elem() InfrastructureConfigurationS3LogsOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationS3Logs) InfrastructureConfigurationS3Logs {
		if v != nil {
			return *v
		}
		var ret InfrastructureConfigurationS3Logs
		return ret
	}).(InfrastructureConfigurationS3LogsOutput)
}

// S3BucketName
func (o InfrastructureConfigurationS3LogsPtrOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationS3Logs) *string {
		if v == nil {
			return nil
		}
		return v.S3BucketName
	}).(pulumi.StringPtrOutput)
}

// S3KeyPrefix
func (o InfrastructureConfigurationS3LogsPtrOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfrastructureConfigurationS3Logs) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyPrefix
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ContainerRecipeComponentConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerRecipeComponentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ContainerRecipeEbsInstanceBlockDeviceSpecificationOutput{})
	pulumi.RegisterOutputType(ContainerRecipeEbsInstanceBlockDeviceSpecificationPtrOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceBlockDeviceMappingArrayOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerRecipeInstanceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContainerRecipeTargetContainerRepositoryOutput{})
	pulumi.RegisterOutputType(ContainerRecipeTargetContainerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionArrayOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionAmiDistributionConfigurationPropertiesLaunchPermissionConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationDistributionContainerDistributionConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationLaunchTemplateConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationLaunchTemplateConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationTargetContainerRepositoryOutput{})
	pulumi.RegisterOutputType(DistributionConfigurationTargetContainerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(ImagePipelineImageTestsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImagePipelineScheduleOutput{})
	pulumi.RegisterOutputType(ImagePipelineSchedulePtrOutput{})
	pulumi.RegisterOutputType(ImageRecipeAdditionalInstanceConfigurationOutput{})
	pulumi.RegisterOutputType(ImageRecipeAdditionalInstanceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentConfigurationOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentParameterOutput{})
	pulumi.RegisterOutputType(ImageRecipeComponentParameterArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeEbsInstanceBlockDeviceSpecificationOutput{})
	pulumi.RegisterOutputType(ImageRecipeEbsInstanceBlockDeviceSpecificationPtrOutput{})
	pulumi.RegisterOutputType(ImageRecipeInstanceBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(ImageRecipeInstanceBlockDeviceMappingArrayOutput{})
	pulumi.RegisterOutputType(ImageRecipeSystemsManagerAgentOutput{})
	pulumi.RegisterOutputType(ImageRecipeSystemsManagerAgentPtrOutput{})
	pulumi.RegisterOutputType(ImageTestsConfigurationOutput{})
	pulumi.RegisterOutputType(ImageTestsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationLoggingOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationLoggingPtrOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationS3LogsOutput{})
	pulumi.RegisterOutputType(InfrastructureConfigurationS3LogsPtrOutput{})
}
