// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3vectors

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The metadata configuration for the vector index.
type IndexMetadataConfiguration struct {
	// Non-filterable metadata keys allow you to enrich vectors with additional context during storage and retrieval. Unlike default metadata keys, these keys cannot be used as query filters. Non-filterable metadata keys can be retrieved but cannot be searched, queried, or filtered. You can access non-filterable metadata keys of your vectors after finding the vectors.
	NonFilterableMetadataKeys []string `pulumi:"nonFilterableMetadataKeys"`
}

// IndexMetadataConfigurationInput is an input type that accepts IndexMetadataConfigurationArgs and IndexMetadataConfigurationOutput values.
// You can construct a concrete instance of `IndexMetadataConfigurationInput` via:
//
//	IndexMetadataConfigurationArgs{...}
type IndexMetadataConfigurationInput interface {
	pulumi.Input

	ToIndexMetadataConfigurationOutput() IndexMetadataConfigurationOutput
	ToIndexMetadataConfigurationOutputWithContext(context.Context) IndexMetadataConfigurationOutput
}

// The metadata configuration for the vector index.
type IndexMetadataConfigurationArgs struct {
	// Non-filterable metadata keys allow you to enrich vectors with additional context during storage and retrieval. Unlike default metadata keys, these keys cannot be used as query filters. Non-filterable metadata keys can be retrieved but cannot be searched, queried, or filtered. You can access non-filterable metadata keys of your vectors after finding the vectors.
	NonFilterableMetadataKeys pulumi.StringArrayInput `pulumi:"nonFilterableMetadataKeys"`
}

func (IndexMetadataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexMetadataConfiguration)(nil)).Elem()
}

func (i IndexMetadataConfigurationArgs) ToIndexMetadataConfigurationOutput() IndexMetadataConfigurationOutput {
	return i.ToIndexMetadataConfigurationOutputWithContext(context.Background())
}

func (i IndexMetadataConfigurationArgs) ToIndexMetadataConfigurationOutputWithContext(ctx context.Context) IndexMetadataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMetadataConfigurationOutput)
}

func (i IndexMetadataConfigurationArgs) ToIndexMetadataConfigurationPtrOutput() IndexMetadataConfigurationPtrOutput {
	return i.ToIndexMetadataConfigurationPtrOutputWithContext(context.Background())
}

func (i IndexMetadataConfigurationArgs) ToIndexMetadataConfigurationPtrOutputWithContext(ctx context.Context) IndexMetadataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMetadataConfigurationOutput).ToIndexMetadataConfigurationPtrOutputWithContext(ctx)
}

// IndexMetadataConfigurationPtrInput is an input type that accepts IndexMetadataConfigurationArgs, IndexMetadataConfigurationPtr and IndexMetadataConfigurationPtrOutput values.
// You can construct a concrete instance of `IndexMetadataConfigurationPtrInput` via:
//
//	        IndexMetadataConfigurationArgs{...}
//
//	or:
//
//	        nil
type IndexMetadataConfigurationPtrInput interface {
	pulumi.Input

	ToIndexMetadataConfigurationPtrOutput() IndexMetadataConfigurationPtrOutput
	ToIndexMetadataConfigurationPtrOutputWithContext(context.Context) IndexMetadataConfigurationPtrOutput
}

type indexMetadataConfigurationPtrType IndexMetadataConfigurationArgs

func IndexMetadataConfigurationPtr(v *IndexMetadataConfigurationArgs) IndexMetadataConfigurationPtrInput {
	return (*indexMetadataConfigurationPtrType)(v)
}

func (*indexMetadataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexMetadataConfiguration)(nil)).Elem()
}

func (i *indexMetadataConfigurationPtrType) ToIndexMetadataConfigurationPtrOutput() IndexMetadataConfigurationPtrOutput {
	return i.ToIndexMetadataConfigurationPtrOutputWithContext(context.Background())
}

func (i *indexMetadataConfigurationPtrType) ToIndexMetadataConfigurationPtrOutputWithContext(ctx context.Context) IndexMetadataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMetadataConfigurationPtrOutput)
}

// The metadata configuration for the vector index.
type IndexMetadataConfigurationOutput struct{ *pulumi.OutputState }

func (IndexMetadataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexMetadataConfiguration)(nil)).Elem()
}

func (o IndexMetadataConfigurationOutput) ToIndexMetadataConfigurationOutput() IndexMetadataConfigurationOutput {
	return o
}

func (o IndexMetadataConfigurationOutput) ToIndexMetadataConfigurationOutputWithContext(ctx context.Context) IndexMetadataConfigurationOutput {
	return o
}

func (o IndexMetadataConfigurationOutput) ToIndexMetadataConfigurationPtrOutput() IndexMetadataConfigurationPtrOutput {
	return o.ToIndexMetadataConfigurationPtrOutputWithContext(context.Background())
}

func (o IndexMetadataConfigurationOutput) ToIndexMetadataConfigurationPtrOutputWithContext(ctx context.Context) IndexMetadataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexMetadataConfiguration) *IndexMetadataConfiguration {
		return &v
	}).(IndexMetadataConfigurationPtrOutput)
}

// Non-filterable metadata keys allow you to enrich vectors with additional context during storage and retrieval. Unlike default metadata keys, these keys cannot be used as query filters. Non-filterable metadata keys can be retrieved but cannot be searched, queried, or filtered. You can access non-filterable metadata keys of your vectors after finding the vectors.
func (o IndexMetadataConfigurationOutput) NonFilterableMetadataKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IndexMetadataConfiguration) []string { return v.NonFilterableMetadataKeys }).(pulumi.StringArrayOutput)
}

type IndexMetadataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (IndexMetadataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexMetadataConfiguration)(nil)).Elem()
}

func (o IndexMetadataConfigurationPtrOutput) ToIndexMetadataConfigurationPtrOutput() IndexMetadataConfigurationPtrOutput {
	return o
}

func (o IndexMetadataConfigurationPtrOutput) ToIndexMetadataConfigurationPtrOutputWithContext(ctx context.Context) IndexMetadataConfigurationPtrOutput {
	return o
}

func (o IndexMetadataConfigurationPtrOutput) Elem() IndexMetadataConfigurationOutput {
	return o.ApplyT(func(v *IndexMetadataConfiguration) IndexMetadataConfiguration {
		if v != nil {
			return *v
		}
		var ret IndexMetadataConfiguration
		return ret
	}).(IndexMetadataConfigurationOutput)
}

// Non-filterable metadata keys allow you to enrich vectors with additional context during storage and retrieval. Unlike default metadata keys, these keys cannot be used as query filters. Non-filterable metadata keys can be retrieved but cannot be searched, queried, or filtered. You can access non-filterable metadata keys of your vectors after finding the vectors.
func (o IndexMetadataConfigurationPtrOutput) NonFilterableMetadataKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IndexMetadataConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.NonFilterableMetadataKeys
	}).(pulumi.StringArrayOutput)
}

// The encryption configuration for the vector bucket.
type VectorBucketEncryptionConfiguration struct {
	// AWS Key Management Service (KMS) customer managed key ID to use for the encryption configuration. This parameter is allowed if and only if sseType is set to aws:kms
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The server-side encryption type to use for the encryption configuration of the vector bucket. By default, if you don't specify, all new vectors in Amazon S3 vector buckets use server-side encryption with Amazon S3 managed keys (SSE-S3), specifically AES256.
	SseType *VectorBucketEncryptionConfigurationSseType `pulumi:"sseType"`
}

// VectorBucketEncryptionConfigurationInput is an input type that accepts VectorBucketEncryptionConfigurationArgs and VectorBucketEncryptionConfigurationOutput values.
// You can construct a concrete instance of `VectorBucketEncryptionConfigurationInput` via:
//
//	VectorBucketEncryptionConfigurationArgs{...}
type VectorBucketEncryptionConfigurationInput interface {
	pulumi.Input

	ToVectorBucketEncryptionConfigurationOutput() VectorBucketEncryptionConfigurationOutput
	ToVectorBucketEncryptionConfigurationOutputWithContext(context.Context) VectorBucketEncryptionConfigurationOutput
}

// The encryption configuration for the vector bucket.
type VectorBucketEncryptionConfigurationArgs struct {
	// AWS Key Management Service (KMS) customer managed key ID to use for the encryption configuration. This parameter is allowed if and only if sseType is set to aws:kms
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
	// The server-side encryption type to use for the encryption configuration of the vector bucket. By default, if you don't specify, all new vectors in Amazon S3 vector buckets use server-side encryption with Amazon S3 managed keys (SSE-S3), specifically AES256.
	SseType VectorBucketEncryptionConfigurationSseTypePtrInput `pulumi:"sseType"`
}

func (VectorBucketEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VectorBucketEncryptionConfiguration)(nil)).Elem()
}

func (i VectorBucketEncryptionConfigurationArgs) ToVectorBucketEncryptionConfigurationOutput() VectorBucketEncryptionConfigurationOutput {
	return i.ToVectorBucketEncryptionConfigurationOutputWithContext(context.Background())
}

func (i VectorBucketEncryptionConfigurationArgs) ToVectorBucketEncryptionConfigurationOutputWithContext(ctx context.Context) VectorBucketEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorBucketEncryptionConfigurationOutput)
}

func (i VectorBucketEncryptionConfigurationArgs) ToVectorBucketEncryptionConfigurationPtrOutput() VectorBucketEncryptionConfigurationPtrOutput {
	return i.ToVectorBucketEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i VectorBucketEncryptionConfigurationArgs) ToVectorBucketEncryptionConfigurationPtrOutputWithContext(ctx context.Context) VectorBucketEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorBucketEncryptionConfigurationOutput).ToVectorBucketEncryptionConfigurationPtrOutputWithContext(ctx)
}

// VectorBucketEncryptionConfigurationPtrInput is an input type that accepts VectorBucketEncryptionConfigurationArgs, VectorBucketEncryptionConfigurationPtr and VectorBucketEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `VectorBucketEncryptionConfigurationPtrInput` via:
//
//	        VectorBucketEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type VectorBucketEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToVectorBucketEncryptionConfigurationPtrOutput() VectorBucketEncryptionConfigurationPtrOutput
	ToVectorBucketEncryptionConfigurationPtrOutputWithContext(context.Context) VectorBucketEncryptionConfigurationPtrOutput
}

type vectorBucketEncryptionConfigurationPtrType VectorBucketEncryptionConfigurationArgs

func VectorBucketEncryptionConfigurationPtr(v *VectorBucketEncryptionConfigurationArgs) VectorBucketEncryptionConfigurationPtrInput {
	return (*vectorBucketEncryptionConfigurationPtrType)(v)
}

func (*vectorBucketEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorBucketEncryptionConfiguration)(nil)).Elem()
}

func (i *vectorBucketEncryptionConfigurationPtrType) ToVectorBucketEncryptionConfigurationPtrOutput() VectorBucketEncryptionConfigurationPtrOutput {
	return i.ToVectorBucketEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *vectorBucketEncryptionConfigurationPtrType) ToVectorBucketEncryptionConfigurationPtrOutputWithContext(ctx context.Context) VectorBucketEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorBucketEncryptionConfigurationPtrOutput)
}

// The encryption configuration for the vector bucket.
type VectorBucketEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (VectorBucketEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VectorBucketEncryptionConfiguration)(nil)).Elem()
}

func (o VectorBucketEncryptionConfigurationOutput) ToVectorBucketEncryptionConfigurationOutput() VectorBucketEncryptionConfigurationOutput {
	return o
}

func (o VectorBucketEncryptionConfigurationOutput) ToVectorBucketEncryptionConfigurationOutputWithContext(ctx context.Context) VectorBucketEncryptionConfigurationOutput {
	return o
}

func (o VectorBucketEncryptionConfigurationOutput) ToVectorBucketEncryptionConfigurationPtrOutput() VectorBucketEncryptionConfigurationPtrOutput {
	return o.ToVectorBucketEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o VectorBucketEncryptionConfigurationOutput) ToVectorBucketEncryptionConfigurationPtrOutputWithContext(ctx context.Context) VectorBucketEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VectorBucketEncryptionConfiguration) *VectorBucketEncryptionConfiguration {
		return &v
	}).(VectorBucketEncryptionConfigurationPtrOutput)
}

// AWS Key Management Service (KMS) customer managed key ID to use for the encryption configuration. This parameter is allowed if and only if sseType is set to aws:kms
func (o VectorBucketEncryptionConfigurationOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VectorBucketEncryptionConfiguration) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// The server-side encryption type to use for the encryption configuration of the vector bucket. By default, if you don't specify, all new vectors in Amazon S3 vector buckets use server-side encryption with Amazon S3 managed keys (SSE-S3), specifically AES256.
func (o VectorBucketEncryptionConfigurationOutput) SseType() VectorBucketEncryptionConfigurationSseTypePtrOutput {
	return o.ApplyT(func(v VectorBucketEncryptionConfiguration) *VectorBucketEncryptionConfigurationSseType {
		return v.SseType
	}).(VectorBucketEncryptionConfigurationSseTypePtrOutput)
}

type VectorBucketEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VectorBucketEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorBucketEncryptionConfiguration)(nil)).Elem()
}

func (o VectorBucketEncryptionConfigurationPtrOutput) ToVectorBucketEncryptionConfigurationPtrOutput() VectorBucketEncryptionConfigurationPtrOutput {
	return o
}

func (o VectorBucketEncryptionConfigurationPtrOutput) ToVectorBucketEncryptionConfigurationPtrOutputWithContext(ctx context.Context) VectorBucketEncryptionConfigurationPtrOutput {
	return o
}

func (o VectorBucketEncryptionConfigurationPtrOutput) Elem() VectorBucketEncryptionConfigurationOutput {
	return o.ApplyT(func(v *VectorBucketEncryptionConfiguration) VectorBucketEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret VectorBucketEncryptionConfiguration
		return ret
	}).(VectorBucketEncryptionConfigurationOutput)
}

// AWS Key Management Service (KMS) customer managed key ID to use for the encryption configuration. This parameter is allowed if and only if sseType is set to aws:kms
func (o VectorBucketEncryptionConfigurationPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VectorBucketEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

// The server-side encryption type to use for the encryption configuration of the vector bucket. By default, if you don't specify, all new vectors in Amazon S3 vector buckets use server-side encryption with Amazon S3 managed keys (SSE-S3), specifically AES256.
func (o VectorBucketEncryptionConfigurationPtrOutput) SseType() VectorBucketEncryptionConfigurationSseTypePtrOutput {
	return o.ApplyT(func(v *VectorBucketEncryptionConfiguration) *VectorBucketEncryptionConfigurationSseType {
		if v == nil {
			return nil
		}
		return v.SseType
	}).(VectorBucketEncryptionConfigurationSseTypePtrOutput)
}

// A policy document containing permissions to add to the specified vector bucket. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM.
type VectorBucketPolicyPolicy struct {
}

// VectorBucketPolicyPolicyInput is an input type that accepts VectorBucketPolicyPolicyArgs and VectorBucketPolicyPolicyOutput values.
// You can construct a concrete instance of `VectorBucketPolicyPolicyInput` via:
//
//	VectorBucketPolicyPolicyArgs{...}
type VectorBucketPolicyPolicyInput interface {
	pulumi.Input

	ToVectorBucketPolicyPolicyOutput() VectorBucketPolicyPolicyOutput
	ToVectorBucketPolicyPolicyOutputWithContext(context.Context) VectorBucketPolicyPolicyOutput
}

// A policy document containing permissions to add to the specified vector bucket. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM.
type VectorBucketPolicyPolicyArgs struct {
}

func (VectorBucketPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VectorBucketPolicyPolicy)(nil)).Elem()
}

func (i VectorBucketPolicyPolicyArgs) ToVectorBucketPolicyPolicyOutput() VectorBucketPolicyPolicyOutput {
	return i.ToVectorBucketPolicyPolicyOutputWithContext(context.Background())
}

func (i VectorBucketPolicyPolicyArgs) ToVectorBucketPolicyPolicyOutputWithContext(ctx context.Context) VectorBucketPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorBucketPolicyPolicyOutput)
}

// A policy document containing permissions to add to the specified vector bucket. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM.
type VectorBucketPolicyPolicyOutput struct{ *pulumi.OutputState }

func (VectorBucketPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VectorBucketPolicyPolicy)(nil)).Elem()
}

func (o VectorBucketPolicyPolicyOutput) ToVectorBucketPolicyPolicyOutput() VectorBucketPolicyPolicyOutput {
	return o
}

func (o VectorBucketPolicyPolicyOutput) ToVectorBucketPolicyPolicyOutputWithContext(ctx context.Context) VectorBucketPolicyPolicyOutput {
	return o
}

type VectorBucketPolicyPolicyPtrOutput struct{ *pulumi.OutputState }

func (VectorBucketPolicyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorBucketPolicyPolicy)(nil)).Elem()
}

func (o VectorBucketPolicyPolicyPtrOutput) ToVectorBucketPolicyPolicyPtrOutput() VectorBucketPolicyPolicyPtrOutput {
	return o
}

func (o VectorBucketPolicyPolicyPtrOutput) ToVectorBucketPolicyPolicyPtrOutputWithContext(ctx context.Context) VectorBucketPolicyPolicyPtrOutput {
	return o
}

func (o VectorBucketPolicyPolicyPtrOutput) Elem() VectorBucketPolicyPolicyOutput {
	return o.ApplyT(func(v *VectorBucketPolicyPolicy) VectorBucketPolicyPolicy {
		if v != nil {
			return *v
		}
		var ret VectorBucketPolicyPolicy
		return ret
	}).(VectorBucketPolicyPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMetadataConfigurationInput)(nil)).Elem(), IndexMetadataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMetadataConfigurationPtrInput)(nil)).Elem(), IndexMetadataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorBucketEncryptionConfigurationInput)(nil)).Elem(), VectorBucketEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorBucketEncryptionConfigurationPtrInput)(nil)).Elem(), VectorBucketEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VectorBucketPolicyPolicyInput)(nil)).Elem(), VectorBucketPolicyPolicyArgs{})
	pulumi.RegisterOutputType(IndexMetadataConfigurationOutput{})
	pulumi.RegisterOutputType(IndexMetadataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VectorBucketEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(VectorBucketEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VectorBucketPolicyPolicyOutput{})
	pulumi.RegisterOutputType(VectorBucketPolicyPolicyPtrOutput{})
}
