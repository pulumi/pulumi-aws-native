// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3vectors

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::S3Vectors::VectorBucketPolicy
type VectorBucketPolicy struct {
	pulumi.CustomResourceState

	Policy           VectorBucketPolicyPolicyOutput `pulumi:"policy"`
	VectorBucketArn  pulumi.StringPtrOutput         `pulumi:"vectorBucketArn"`
	VectorBucketName pulumi.StringPtrOutput         `pulumi:"vectorBucketName"`
}

// NewVectorBucketPolicy registers a new resource with the given unique name, arguments, and options.
func NewVectorBucketPolicy(ctx *pulumi.Context,
	name string, args *VectorBucketPolicyArgs, opts ...pulumi.ResourceOption) (*VectorBucketPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"vectorBucketArn",
		"vectorBucketName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VectorBucketPolicy
	err := ctx.RegisterResource("aws-native:s3vectors:VectorBucketPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVectorBucketPolicy gets an existing VectorBucketPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVectorBucketPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VectorBucketPolicyState, opts ...pulumi.ResourceOption) (*VectorBucketPolicy, error) {
	var resource VectorBucketPolicy
	err := ctx.ReadResource("aws-native:s3vectors:VectorBucketPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VectorBucketPolicy resources.
type vectorBucketPolicyState struct {
}

type VectorBucketPolicyState struct {
}

func (VectorBucketPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorBucketPolicyState)(nil)).Elem()
}

type vectorBucketPolicyArgs struct {
	Policy           VectorBucketPolicyPolicy `pulumi:"policy"`
	VectorBucketArn  *string                  `pulumi:"vectorBucketArn"`
	VectorBucketName *string                  `pulumi:"vectorBucketName"`
}

// The set of arguments for constructing a VectorBucketPolicy resource.
type VectorBucketPolicyArgs struct {
	Policy           VectorBucketPolicyPolicyInput
	VectorBucketArn  pulumi.StringPtrInput
	VectorBucketName pulumi.StringPtrInput
}

func (VectorBucketPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorBucketPolicyArgs)(nil)).Elem()
}

type VectorBucketPolicyInput interface {
	pulumi.Input

	ToVectorBucketPolicyOutput() VectorBucketPolicyOutput
	ToVectorBucketPolicyOutputWithContext(ctx context.Context) VectorBucketPolicyOutput
}

func (*VectorBucketPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorBucketPolicy)(nil)).Elem()
}

func (i *VectorBucketPolicy) ToVectorBucketPolicyOutput() VectorBucketPolicyOutput {
	return i.ToVectorBucketPolicyOutputWithContext(context.Background())
}

func (i *VectorBucketPolicy) ToVectorBucketPolicyOutputWithContext(ctx context.Context) VectorBucketPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorBucketPolicyOutput)
}

type VectorBucketPolicyOutput struct{ *pulumi.OutputState }

func (VectorBucketPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorBucketPolicy)(nil)).Elem()
}

func (o VectorBucketPolicyOutput) ToVectorBucketPolicyOutput() VectorBucketPolicyOutput {
	return o
}

func (o VectorBucketPolicyOutput) ToVectorBucketPolicyOutputWithContext(ctx context.Context) VectorBucketPolicyOutput {
	return o
}

func (o VectorBucketPolicyOutput) Policy() VectorBucketPolicyPolicyOutput {
	return o.ApplyT(func(v *VectorBucketPolicy) VectorBucketPolicyPolicyOutput { return v.Policy }).(VectorBucketPolicyPolicyOutput)
}

func (o VectorBucketPolicyOutput) VectorBucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VectorBucketPolicy) pulumi.StringPtrOutput { return v.VectorBucketArn }).(pulumi.StringPtrOutput)
}

func (o VectorBucketPolicyOutput) VectorBucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VectorBucketPolicy) pulumi.StringPtrOutput { return v.VectorBucketName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VectorBucketPolicyInput)(nil)).Elem(), &VectorBucketPolicy{})
	pulumi.RegisterOutputType(VectorBucketPolicyOutput{})
}
