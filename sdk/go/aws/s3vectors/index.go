// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3vectors

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::S3Vectors::Index
type Index struct {
	pulumi.CustomResourceState

	CreationTime          pulumi.StringOutput                 `pulumi:"creationTime"`
	DataType              IndexDataTypeOutput                 `pulumi:"dataType"`
	Dimension             pulumi.IntOutput                    `pulumi:"dimension"`
	DistanceMetric        IndexDistanceMetricOutput           `pulumi:"distanceMetric"`
	IndexArn              pulumi.StringOutput                 `pulumi:"indexArn"`
	IndexName             pulumi.StringPtrOutput              `pulumi:"indexName"`
	MetadataConfiguration IndexMetadataConfigurationPtrOutput `pulumi:"metadataConfiguration"`
	VectorBucketArn       pulumi.StringPtrOutput              `pulumi:"vectorBucketArn"`
	VectorBucketName      pulumi.StringPtrOutput              `pulumi:"vectorBucketName"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataType == nil {
		return nil, errors.New("invalid value for required argument 'DataType'")
	}
	if args.Dimension == nil {
		return nil, errors.New("invalid value for required argument 'Dimension'")
	}
	if args.DistanceMetric == nil {
		return nil, errors.New("invalid value for required argument 'DistanceMetric'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dataType",
		"dimension",
		"distanceMetric",
		"indexName",
		"metadataConfiguration",
		"vectorBucketArn",
		"vectorBucketName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("aws-native:s3vectors:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("aws-native:s3vectors:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
}

type IndexState struct {
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	DataType              IndexDataType               `pulumi:"dataType"`
	Dimension             int                         `pulumi:"dimension"`
	DistanceMetric        IndexDistanceMetric         `pulumi:"distanceMetric"`
	IndexName             *string                     `pulumi:"indexName"`
	MetadataConfiguration *IndexMetadataConfiguration `pulumi:"metadataConfiguration"`
	VectorBucketArn       *string                     `pulumi:"vectorBucketArn"`
	VectorBucketName      *string                     `pulumi:"vectorBucketName"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	DataType              IndexDataTypeInput
	Dimension             pulumi.IntInput
	DistanceMetric        IndexDistanceMetricInput
	IndexName             pulumi.StringPtrInput
	MetadataConfiguration IndexMetadataConfigurationPtrInput
	VectorBucketArn       pulumi.StringPtrInput
	VectorBucketName      pulumi.StringPtrInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

func (o IndexOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o IndexOutput) DataType() IndexDataTypeOutput {
	return o.ApplyT(func(v *Index) IndexDataTypeOutput { return v.DataType }).(IndexDataTypeOutput)
}

func (o IndexOutput) Dimension() pulumi.IntOutput {
	return o.ApplyT(func(v *Index) pulumi.IntOutput { return v.Dimension }).(pulumi.IntOutput)
}

func (o IndexOutput) DistanceMetric() IndexDistanceMetricOutput {
	return o.ApplyT(func(v *Index) IndexDistanceMetricOutput { return v.DistanceMetric }).(IndexDistanceMetricOutput)
}

func (o IndexOutput) IndexArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.IndexArn }).(pulumi.StringOutput)
}

func (o IndexOutput) IndexName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexName }).(pulumi.StringPtrOutput)
}

func (o IndexOutput) MetadataConfiguration() IndexMetadataConfigurationPtrOutput {
	return o.ApplyT(func(v *Index) IndexMetadataConfigurationPtrOutput { return v.MetadataConfiguration }).(IndexMetadataConfigurationPtrOutput)
}

func (o IndexOutput) VectorBucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.VectorBucketArn }).(pulumi.StringPtrOutput)
}

func (o IndexOutput) VectorBucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.VectorBucketName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterOutputType(IndexOutput{})
}
