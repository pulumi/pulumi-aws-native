// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3vectors

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::S3Vectors::VectorBucket
type VectorBucket struct {
	pulumi.CustomResourceState

	CreationTime            pulumi.StringOutput                          `pulumi:"creationTime"`
	EncryptionConfiguration VectorBucketEncryptionConfigurationPtrOutput `pulumi:"encryptionConfiguration"`
	VectorBucketArn         pulumi.StringOutput                          `pulumi:"vectorBucketArn"`
	VectorBucketName        pulumi.StringPtrOutput                       `pulumi:"vectorBucketName"`
}

// NewVectorBucket registers a new resource with the given unique name, arguments, and options.
func NewVectorBucket(ctx *pulumi.Context,
	name string, args *VectorBucketArgs, opts ...pulumi.ResourceOption) (*VectorBucket, error) {
	if args == nil {
		args = &VectorBucketArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"encryptionConfiguration",
		"vectorBucketName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VectorBucket
	err := ctx.RegisterResource("aws-native:s3vectors:VectorBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVectorBucket gets an existing VectorBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVectorBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VectorBucketState, opts ...pulumi.ResourceOption) (*VectorBucket, error) {
	var resource VectorBucket
	err := ctx.ReadResource("aws-native:s3vectors:VectorBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VectorBucket resources.
type vectorBucketState struct {
}

type VectorBucketState struct {
}

func (VectorBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorBucketState)(nil)).Elem()
}

type vectorBucketArgs struct {
	EncryptionConfiguration *VectorBucketEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	VectorBucketName        *string                              `pulumi:"vectorBucketName"`
}

// The set of arguments for constructing a VectorBucket resource.
type VectorBucketArgs struct {
	EncryptionConfiguration VectorBucketEncryptionConfigurationPtrInput
	VectorBucketName        pulumi.StringPtrInput
}

func (VectorBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vectorBucketArgs)(nil)).Elem()
}

type VectorBucketInput interface {
	pulumi.Input

	ToVectorBucketOutput() VectorBucketOutput
	ToVectorBucketOutputWithContext(ctx context.Context) VectorBucketOutput
}

func (*VectorBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorBucket)(nil)).Elem()
}

func (i *VectorBucket) ToVectorBucketOutput() VectorBucketOutput {
	return i.ToVectorBucketOutputWithContext(context.Background())
}

func (i *VectorBucket) ToVectorBucketOutputWithContext(ctx context.Context) VectorBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VectorBucketOutput)
}

type VectorBucketOutput struct{ *pulumi.OutputState }

func (VectorBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VectorBucket)(nil)).Elem()
}

func (o VectorBucketOutput) ToVectorBucketOutput() VectorBucketOutput {
	return o
}

func (o VectorBucketOutput) ToVectorBucketOutputWithContext(ctx context.Context) VectorBucketOutput {
	return o
}

func (o VectorBucketOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorBucket) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o VectorBucketOutput) EncryptionConfiguration() VectorBucketEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *VectorBucket) VectorBucketEncryptionConfigurationPtrOutput { return v.EncryptionConfiguration }).(VectorBucketEncryptionConfigurationPtrOutput)
}

func (o VectorBucketOutput) VectorBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *VectorBucket) pulumi.StringOutput { return v.VectorBucketArn }).(pulumi.StringOutput)
}

func (o VectorBucketOutput) VectorBucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VectorBucket) pulumi.StringPtrOutput { return v.VectorBucketName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VectorBucketInput)(nil)).Elem(), &VectorBucket{})
	pulumi.RegisterOutputType(VectorBucketOutput{})
}
