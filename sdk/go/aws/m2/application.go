// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package m2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents an application that runs on an AWS Mainframe Modernization Environment
type Application struct {
	pulumi.CustomResourceState

	ApplicationArn pulumi.StringOutput         `pulumi:"applicationArn"`
	ApplicationId  pulumi.StringOutput         `pulumi:"applicationId"`
	Definition     pulumi.AnyOutput            `pulumi:"definition"`
	Description    pulumi.StringPtrOutput      `pulumi:"description"`
	EngineType     ApplicationEngineTypeOutput `pulumi:"engineType"`
	// The ID or the Amazon Resource Name (ARN) of the customer managed KMS Key used for encrypting application-related resources.
	KmsKeyId pulumi.StringPtrOutput     `pulumi:"kmsKeyId"`
	Name     pulumi.StringOutput        `pulumi:"name"`
	RoleArn  pulumi.StringPtrOutput     `pulumi:"roleArn"`
	Tags     ApplicationTagMapPtrOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"engineType",
		"kmsKeyId",
		"name",
		"roleArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:m2:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:m2:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	Definition  interface{}           `pulumi:"definition"`
	Description *string               `pulumi:"description"`
	EngineType  ApplicationEngineType `pulumi:"engineType"`
	// The ID or the Amazon Resource Name (ARN) of the customer managed KMS Key used for encrypting application-related resources.
	KmsKeyId *string            `pulumi:"kmsKeyId"`
	Name     *string            `pulumi:"name"`
	RoleArn  *string            `pulumi:"roleArn"`
	Tags     *ApplicationTagMap `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	Definition  pulumi.Input
	Description pulumi.StringPtrInput
	EngineType  ApplicationEngineTypeInput
	// The ID or the Amazon Resource Name (ARN) of the customer managed KMS Key used for encrypting application-related resources.
	KmsKeyId pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	RoleArn  pulumi.StringPtrInput
	Tags     ApplicationTagMapPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

func (i *Application) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: i.ToApplicationOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutput) ApplicationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationArn }).(pulumi.StringOutput)
}

func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o ApplicationOutput) Definition() pulumi.AnyOutput {
	return o.ApplyT(func(v *Application) pulumi.AnyOutput { return v.Definition }).(pulumi.AnyOutput)
}

func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) EngineType() ApplicationEngineTypeOutput {
	return o.ApplyT(func(v *Application) ApplicationEngineTypeOutput { return v.EngineType }).(ApplicationEngineTypeOutput)
}

// The ID or the Amazon Resource Name (ARN) of the customer managed KMS Key used for encrypting application-related resources.
func (o ApplicationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o ApplicationOutput) Tags() ApplicationTagMapPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationTagMapPtrOutput { return v.Tags }).(ApplicationTagMapPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
