// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package observabilityadmin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::ObservabilityAdmin::TelemetryRule resource defines a CloudWatch Observability Admin Telemetry Rule.
type TelemetryRule struct {
	pulumi.CustomResourceState

	Rule TelemetryRuleTypeOutput `pulumi:"rule"`
	// The arn of the telemetry rule
	RuleArn pulumi.StringOutput `pulumi:"ruleArn"`
	// The name of the telemetry rule
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// An array of key-value pairs to apply to this resource
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewTelemetryRule registers a new resource with the given unique name, arguments, and options.
func NewTelemetryRule(ctx *pulumi.Context,
	name string, args *TelemetryRuleArgs, opts ...pulumi.ResourceOption) (*TelemetryRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"ruleName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TelemetryRule
	err := ctx.RegisterResource("aws-native:observabilityadmin:TelemetryRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTelemetryRule gets an existing TelemetryRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTelemetryRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TelemetryRuleState, opts ...pulumi.ResourceOption) (*TelemetryRule, error) {
	var resource TelemetryRule
	err := ctx.ReadResource("aws-native:observabilityadmin:TelemetryRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TelemetryRule resources.
type telemetryRuleState struct {
}

type TelemetryRuleState struct {
}

func (TelemetryRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryRuleState)(nil)).Elem()
}

type telemetryRuleArgs struct {
	Rule TelemetryRuleType `pulumi:"rule"`
	// The name of the telemetry rule
	RuleName *string `pulumi:"ruleName"`
	// An array of key-value pairs to apply to this resource
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a TelemetryRule resource.
type TelemetryRuleArgs struct {
	Rule TelemetryRuleTypeInput
	// The name of the telemetry rule
	RuleName pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource
	Tags aws.TagArrayInput
}

func (TelemetryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryRuleArgs)(nil)).Elem()
}

type TelemetryRuleInput interface {
	pulumi.Input

	ToTelemetryRuleOutput() TelemetryRuleOutput
	ToTelemetryRuleOutputWithContext(ctx context.Context) TelemetryRuleOutput
}

func (*TelemetryRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryRule)(nil)).Elem()
}

func (i *TelemetryRule) ToTelemetryRuleOutput() TelemetryRuleOutput {
	return i.ToTelemetryRuleOutputWithContext(context.Background())
}

func (i *TelemetryRule) ToTelemetryRuleOutputWithContext(ctx context.Context) TelemetryRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryRuleOutput)
}

type TelemetryRuleOutput struct{ *pulumi.OutputState }

func (TelemetryRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryRule)(nil)).Elem()
}

func (o TelemetryRuleOutput) ToTelemetryRuleOutput() TelemetryRuleOutput {
	return o
}

func (o TelemetryRuleOutput) ToTelemetryRuleOutputWithContext(ctx context.Context) TelemetryRuleOutput {
	return o
}

func (o TelemetryRuleOutput) Rule() TelemetryRuleTypeOutput {
	return o.ApplyT(func(v *TelemetryRule) TelemetryRuleTypeOutput { return v.Rule }).(TelemetryRuleTypeOutput)
}

// The arn of the telemetry rule
func (o TelemetryRuleOutput) RuleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TelemetryRule) pulumi.StringOutput { return v.RuleArn }).(pulumi.StringOutput)
}

// The name of the telemetry rule
func (o TelemetryRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *TelemetryRule) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource
func (o TelemetryRuleOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TelemetryRule) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryRuleInput)(nil)).Elem(), &TelemetryRule{})
	pulumi.RegisterOutputType(TelemetryRuleOutput{})
}
