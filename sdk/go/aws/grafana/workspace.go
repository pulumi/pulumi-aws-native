// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Grafana::Workspace Resource Type
type Workspace struct {
	pulumi.CustomResourceState

	// Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
	AccountAccessType WorkspaceAccountAccessTypeOutput `pulumi:"accountAccessType"`
	// List of authentication providers to enable.
	AuthenticationProviders WorkspaceAuthenticationProviderTypesArrayOutput `pulumi:"authenticationProviders"`
	// The id that uniquely identifies a Grafana workspace.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
	ClientToken pulumi.StringPtrOutput `pulumi:"clientToken"`
	// Timestamp when the workspace was created.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// List of data sources on the service managed IAM role.
	DataSources WorkspaceDataSourceTypeArrayOutput `pulumi:"dataSources"`
	// Description of a workspace.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Endpoint for the Grafana workspace.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The version of Grafana to support in your workspace.
	GrafanaVersion pulumi.StringPtrOutput `pulumi:"grafanaVersion"`
	// Timestamp when the workspace was last modified
	ModificationTimestamp pulumi.StringOutput `pulumi:"modificationTimestamp"`
	// The user friendly name of a workspace.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The configuration settings for network access to your workspace.
	NetworkAccessControl WorkspaceNetworkAccessControlPtrOutput `pulumi:"networkAccessControl"`
	// List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
	NotificationDestinations WorkspaceNotificationDestinationTypeArrayOutput `pulumi:"notificationDestinations"`
	// The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
	OrganizationRoleName pulumi.StringPtrOutput `pulumi:"organizationRoleName"`
	// List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
	OrganizationalUnits pulumi.StringArrayOutput `pulumi:"organizationalUnits"`
	// If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
	//
	// If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
	//
	// If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
	//
	// For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
	PermissionType WorkspacePermissionTypeOutput `pulumi:"permissionType"`
	// Allow workspace admins to install plugins
	PluginAdminEnabled pulumi.BoolPtrOutput `pulumi:"pluginAdminEnabled"`
	// IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
	SamlConfiguration WorkspaceSamlConfigurationPtrOutput `pulumi:"samlConfiguration"`
	// Specifies whether the workspace's SAML configuration is complete.
	//
	// Valid values: `CONFIGURED | NOT_CONFIGURED`
	//
	// Type: String
	SamlConfigurationStatus WorkspaceSamlConfigurationStatusOutput `pulumi:"samlConfigurationStatus"`
	// The client ID of the AWS SSO Managed Application.
	SsoClientId pulumi.StringOutput `pulumi:"ssoClientId"`
	// The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
	StackSetName pulumi.StringPtrOutput `pulumi:"stackSetName"`
	// The current status of the workspace.
	//
	// Valid values: `ACTIVE | CREATING | DELETING | FAILED | UPDATING | UPGRADING | DELETION_FAILED | CREATION_FAILED | UPDATE_FAILED | UPGRADE_FAILED | LICENSE_REMOVAL_FAILED`
	//
	// Type: String
	Status WorkspaceStatusOutput `pulumi:"status"`
	// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
	//
	// > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
	VpcConfiguration WorkspaceVpcConfigurationPtrOutput `pulumi:"vpcConfiguration"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountAccessType == nil {
		return nil, errors.New("invalid value for required argument 'AccountAccessType'")
	}
	if args.AuthenticationProviders == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationProviders'")
	}
	if args.PermissionType == nil {
		return nil, errors.New("invalid value for required argument 'PermissionType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clientToken",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("aws-native:grafana:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("aws-native:grafana:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
}

type WorkspaceState struct {
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
	AccountAccessType WorkspaceAccountAccessType `pulumi:"accountAccessType"`
	// List of authentication providers to enable.
	AuthenticationProviders []WorkspaceAuthenticationProviderTypes `pulumi:"authenticationProviders"`
	// A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
	ClientToken *string `pulumi:"clientToken"`
	// List of data sources on the service managed IAM role.
	DataSources []WorkspaceDataSourceType `pulumi:"dataSources"`
	// Description of a workspace.
	Description *string `pulumi:"description"`
	// The version of Grafana to support in your workspace.
	GrafanaVersion *string `pulumi:"grafanaVersion"`
	// The user friendly name of a workspace.
	Name *string `pulumi:"name"`
	// The configuration settings for network access to your workspace.
	NetworkAccessControl *WorkspaceNetworkAccessControl `pulumi:"networkAccessControl"`
	// List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
	NotificationDestinations []WorkspaceNotificationDestinationType `pulumi:"notificationDestinations"`
	// The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
	OrganizationRoleName *string `pulumi:"organizationRoleName"`
	// List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
	OrganizationalUnits []string `pulumi:"organizationalUnits"`
	// If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
	//
	// If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
	//
	// If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
	//
	// For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
	PermissionType WorkspacePermissionType `pulumi:"permissionType"`
	// Allow workspace admins to install plugins
	PluginAdminEnabled *bool `pulumi:"pluginAdminEnabled"`
	// IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
	RoleArn *string `pulumi:"roleArn"`
	// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
	SamlConfiguration *WorkspaceSamlConfiguration `pulumi:"samlConfiguration"`
	// The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
	StackSetName *string `pulumi:"stackSetName"`
	// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
	//
	// > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
	VpcConfiguration *WorkspaceVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
	AccountAccessType WorkspaceAccountAccessTypeInput
	// List of authentication providers to enable.
	AuthenticationProviders WorkspaceAuthenticationProviderTypesArrayInput
	// A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
	ClientToken pulumi.StringPtrInput
	// List of data sources on the service managed IAM role.
	DataSources WorkspaceDataSourceTypeArrayInput
	// Description of a workspace.
	Description pulumi.StringPtrInput
	// The version of Grafana to support in your workspace.
	GrafanaVersion pulumi.StringPtrInput
	// The user friendly name of a workspace.
	Name pulumi.StringPtrInput
	// The configuration settings for network access to your workspace.
	NetworkAccessControl WorkspaceNetworkAccessControlPtrInput
	// List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
	NotificationDestinations WorkspaceNotificationDestinationTypeArrayInput
	// The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
	OrganizationRoleName pulumi.StringPtrInput
	// List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
	OrganizationalUnits pulumi.StringArrayInput
	// If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
	//
	// If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
	//
	// If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
	//
	// For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
	PermissionType WorkspacePermissionTypeInput
	// Allow workspace admins to install plugins
	PluginAdminEnabled pulumi.BoolPtrInput
	// IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
	RoleArn pulumi.StringPtrInput
	// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
	SamlConfiguration WorkspaceSamlConfigurationPtrInput
	// The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
	StackSetName pulumi.StringPtrInput
	// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
	//
	// > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
	VpcConfiguration WorkspaceVpcConfigurationPtrInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

// Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
func (o WorkspaceOutput) AccountAccessType() WorkspaceAccountAccessTypeOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceAccountAccessTypeOutput { return v.AccountAccessType }).(WorkspaceAccountAccessTypeOutput)
}

// List of authentication providers to enable.
func (o WorkspaceOutput) AuthenticationProviders() WorkspaceAuthenticationProviderTypesArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceAuthenticationProviderTypesArrayOutput { return v.AuthenticationProviders }).(WorkspaceAuthenticationProviderTypesArrayOutput)
}

// The id that uniquely identifies a Grafana workspace.
func (o WorkspaceOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
func (o WorkspaceOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.ClientToken }).(pulumi.StringPtrOutput)
}

// Timestamp when the workspace was created.
func (o WorkspaceOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// List of data sources on the service managed IAM role.
func (o WorkspaceOutput) DataSources() WorkspaceDataSourceTypeArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceDataSourceTypeArrayOutput { return v.DataSources }).(WorkspaceDataSourceTypeArrayOutput)
}

// Description of a workspace.
func (o WorkspaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Endpoint for the Grafana workspace.
func (o WorkspaceOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The version of Grafana to support in your workspace.
func (o WorkspaceOutput) GrafanaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.GrafanaVersion }).(pulumi.StringPtrOutput)
}

// Timestamp when the workspace was last modified
func (o WorkspaceOutput) ModificationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.ModificationTimestamp }).(pulumi.StringOutput)
}

// The user friendly name of a workspace.
func (o WorkspaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The configuration settings for network access to your workspace.
func (o WorkspaceOutput) NetworkAccessControl() WorkspaceNetworkAccessControlPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceNetworkAccessControlPtrOutput { return v.NetworkAccessControl }).(WorkspaceNetworkAccessControlPtrOutput)
}

// List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
func (o WorkspaceOutput) NotificationDestinations() WorkspaceNotificationDestinationTypeArrayOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceNotificationDestinationTypeArrayOutput { return v.NotificationDestinations }).(WorkspaceNotificationDestinationTypeArrayOutput)
}

// The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
func (o WorkspaceOutput) OrganizationRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.OrganizationRoleName }).(pulumi.StringPtrOutput)
}

// List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
func (o WorkspaceOutput) OrganizationalUnits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.OrganizationalUnits }).(pulumi.StringArrayOutput)
}

// If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
//
// If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
//
// If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
//
// For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
func (o WorkspaceOutput) PermissionType() WorkspacePermissionTypeOutput {
	return o.ApplyT(func(v *Workspace) WorkspacePermissionTypeOutput { return v.PermissionType }).(WorkspacePermissionTypeOutput)
}

// Allow workspace admins to install plugins
func (o WorkspaceOutput) PluginAdminEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.PluginAdminEnabled }).(pulumi.BoolPtrOutput)
}

// IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
func (o WorkspaceOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
func (o WorkspaceOutput) SamlConfiguration() WorkspaceSamlConfigurationPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSamlConfigurationPtrOutput { return v.SamlConfiguration }).(WorkspaceSamlConfigurationPtrOutput)
}

// Specifies whether the workspace's SAML configuration is complete.
//
// Valid values: `CONFIGURED | NOT_CONFIGURED`
//
// Type: String
func (o WorkspaceOutput) SamlConfigurationStatus() WorkspaceSamlConfigurationStatusOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSamlConfigurationStatusOutput { return v.SamlConfigurationStatus }).(WorkspaceSamlConfigurationStatusOutput)
}

// The client ID of the AWS SSO Managed Application.
func (o WorkspaceOutput) SsoClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.SsoClientId }).(pulumi.StringOutput)
}

// The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
func (o WorkspaceOutput) StackSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.StackSetName }).(pulumi.StringPtrOutput)
}

// The current status of the workspace.
//
// Valid values: `ACTIVE | CREATING | DELETING | FAILED | UPDATING | UPGRADING | DELETION_FAILED | CREATION_FAILED | UPDATE_FAILED | UPGRADE_FAILED | LICENSE_REMOVAL_FAILED`
//
// Type: String
func (o WorkspaceOutput) Status() WorkspaceStatusOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceStatusOutput { return v.Status }).(WorkspaceStatusOutput)
}

// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
//
// > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
func (o WorkspaceOutput) VpcConfiguration() WorkspaceVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceVpcConfigurationPtrOutput { return v.VpcConfiguration }).(WorkspaceVpcConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
}
