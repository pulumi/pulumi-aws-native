// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Grafana::Workspace Resource Type
func LookupWorkspace(ctx *pulumi.Context, args *LookupWorkspaceArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceResult
	err := ctx.Invoke("aws-native:grafana:getWorkspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkspaceArgs struct {
	// The id that uniquely identifies a Grafana workspace.
	Id string `pulumi:"id"`
}

type LookupWorkspaceResult struct {
	// Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
	AccountAccessType *WorkspaceAccountAccessType `pulumi:"accountAccessType"`
	// List of authentication providers to enable.
	AuthenticationProviders []WorkspaceAuthenticationProviderTypes `pulumi:"authenticationProviders"`
	// Timestamp when the workspace was created.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// List of data sources on the service managed IAM role.
	DataSources []WorkspaceDataSourceType `pulumi:"dataSources"`
	// Description of a workspace.
	Description *string `pulumi:"description"`
	// Endpoint for the Grafana workspace.
	Endpoint *string `pulumi:"endpoint"`
	// The version of Grafana to support in your workspace.
	GrafanaVersion *string `pulumi:"grafanaVersion"`
	// The id that uniquely identifies a Grafana workspace.
	Id *string `pulumi:"id"`
	// Timestamp when the workspace was last modified
	ModificationTimestamp *string `pulumi:"modificationTimestamp"`
	// The user friendly name of a workspace.
	Name *string `pulumi:"name"`
	// The configuration settings for network access to your workspace.
	NetworkAccessControl *WorkspaceNetworkAccessControl `pulumi:"networkAccessControl"`
	// List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
	NotificationDestinations []WorkspaceNotificationDestinationType `pulumi:"notificationDestinations"`
	// The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
	OrganizationRoleName *string `pulumi:"organizationRoleName"`
	// List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
	OrganizationalUnits []string `pulumi:"organizationalUnits"`
	// If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
	//
	// If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
	//
	// If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
	//
	// For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
	PermissionType *WorkspacePermissionType `pulumi:"permissionType"`
	// Allow workspace admins to install plugins
	PluginAdminEnabled *bool `pulumi:"pluginAdminEnabled"`
	// IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
	RoleArn *string `pulumi:"roleArn"`
	// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
	SamlConfiguration *WorkspaceSamlConfiguration `pulumi:"samlConfiguration"`
	// Specifies whether the workspace's SAML configuration is complete.
	//
	// Valid values: `CONFIGURED | NOT_CONFIGURED`
	//
	// Type: String
	SamlConfigurationStatus *WorkspaceSamlConfigurationStatus `pulumi:"samlConfigurationStatus"`
	// The client ID of the AWS SSO Managed Application.
	SsoClientId *string `pulumi:"ssoClientId"`
	// The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
	StackSetName *string `pulumi:"stackSetName"`
	// The current status of the workspace.
	//
	// Valid values: `ACTIVE | CREATING | DELETING | FAILED | UPDATING | UPGRADING | DELETION_FAILED | CREATION_FAILED | UPDATE_FAILED | UPGRADE_FAILED | LICENSE_REMOVAL_FAILED`
	//
	// Type: String
	Status *WorkspaceStatus `pulumi:"status"`
	// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
	//
	// > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
	VpcConfiguration *WorkspaceVpcConfiguration `pulumi:"vpcConfiguration"`
}

func LookupWorkspaceOutput(ctx *pulumi.Context, args LookupWorkspaceOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkspaceResult, error) {
			args := v.(LookupWorkspaceArgs)
			r, err := LookupWorkspace(ctx, &args, opts...)
			var s LookupWorkspaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkspaceResultOutput)
}

type LookupWorkspaceOutputArgs struct {
	// The id that uniquely identifies a Grafana workspace.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupWorkspaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceArgs)(nil)).Elem()
}

type LookupWorkspaceResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceResult)(nil)).Elem()
}

func (o LookupWorkspaceResultOutput) ToLookupWorkspaceResultOutput() LookupWorkspaceResultOutput {
	return o
}

func (o LookupWorkspaceResultOutput) ToLookupWorkspaceResultOutputWithContext(ctx context.Context) LookupWorkspaceResultOutput {
	return o
}

// Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
func (o LookupWorkspaceResultOutput) AccountAccessType() WorkspaceAccountAccessTypePtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *WorkspaceAccountAccessType { return v.AccountAccessType }).(WorkspaceAccountAccessTypePtrOutput)
}

// List of authentication providers to enable.
func (o LookupWorkspaceResultOutput) AuthenticationProviders() WorkspaceAuthenticationProviderTypesArrayOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) []WorkspaceAuthenticationProviderTypes { return v.AuthenticationProviders }).(WorkspaceAuthenticationProviderTypesArrayOutput)
}

// Timestamp when the workspace was created.
func (o LookupWorkspaceResultOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.CreationTimestamp }).(pulumi.StringPtrOutput)
}

// List of data sources on the service managed IAM role.
func (o LookupWorkspaceResultOutput) DataSources() WorkspaceDataSourceTypeArrayOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) []WorkspaceDataSourceType { return v.DataSources }).(WorkspaceDataSourceTypeArrayOutput)
}

// Description of a workspace.
func (o LookupWorkspaceResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Endpoint for the Grafana workspace.
func (o LookupWorkspaceResultOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The version of Grafana to support in your workspace.
func (o LookupWorkspaceResultOutput) GrafanaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.GrafanaVersion }).(pulumi.StringPtrOutput)
}

// The id that uniquely identifies a Grafana workspace.
func (o LookupWorkspaceResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Timestamp when the workspace was last modified
func (o LookupWorkspaceResultOutput) ModificationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.ModificationTimestamp }).(pulumi.StringPtrOutput)
}

// The user friendly name of a workspace.
func (o LookupWorkspaceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The configuration settings for network access to your workspace.
func (o LookupWorkspaceResultOutput) NetworkAccessControl() WorkspaceNetworkAccessControlPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *WorkspaceNetworkAccessControl { return v.NetworkAccessControl }).(WorkspaceNetworkAccessControlPtrOutput)
}

// List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
func (o LookupWorkspaceResultOutput) NotificationDestinations() WorkspaceNotificationDestinationTypeArrayOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) []WorkspaceNotificationDestinationType {
		return v.NotificationDestinations
	}).(WorkspaceNotificationDestinationTypeArrayOutput)
}

// The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
func (o LookupWorkspaceResultOutput) OrganizationRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.OrganizationRoleName }).(pulumi.StringPtrOutput)
}

// List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
func (o LookupWorkspaceResultOutput) OrganizationalUnits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) []string { return v.OrganizationalUnits }).(pulumi.StringArrayOutput)
}

// If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
//
// If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
//
// If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
//
// For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
func (o LookupWorkspaceResultOutput) PermissionType() WorkspacePermissionTypePtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *WorkspacePermissionType { return v.PermissionType }).(WorkspacePermissionTypePtrOutput)
}

// Allow workspace admins to install plugins
func (o LookupWorkspaceResultOutput) PluginAdminEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *bool { return v.PluginAdminEnabled }).(pulumi.BoolPtrOutput)
}

// IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
func (o LookupWorkspaceResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
func (o LookupWorkspaceResultOutput) SamlConfiguration() WorkspaceSamlConfigurationPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *WorkspaceSamlConfiguration { return v.SamlConfiguration }).(WorkspaceSamlConfigurationPtrOutput)
}

// Specifies whether the workspace's SAML configuration is complete.
//
// Valid values: `CONFIGURED | NOT_CONFIGURED`
//
// Type: String
func (o LookupWorkspaceResultOutput) SamlConfigurationStatus() WorkspaceSamlConfigurationStatusPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *WorkspaceSamlConfigurationStatus { return v.SamlConfigurationStatus }).(WorkspaceSamlConfigurationStatusPtrOutput)
}

// The client ID of the AWS SSO Managed Application.
func (o LookupWorkspaceResultOutput) SsoClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.SsoClientId }).(pulumi.StringPtrOutput)
}

// The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
func (o LookupWorkspaceResultOutput) StackSetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *string { return v.StackSetName }).(pulumi.StringPtrOutput)
}

// The current status of the workspace.
//
// Valid values: `ACTIVE | CREATING | DELETING | FAILED | UPDATING | UPGRADING | DELETION_FAILED | CREATION_FAILED | UPDATE_FAILED | UPGRADE_FAILED | LICENSE_REMOVAL_FAILED`
//
// Type: String
func (o LookupWorkspaceResultOutput) Status() WorkspaceStatusPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *WorkspaceStatus { return v.Status }).(WorkspaceStatusPtrOutput)
}

// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
//
// > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
func (o LookupWorkspaceResultOutput) VpcConfiguration() WorkspaceVpcConfigurationPtrOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) *WorkspaceVpcConfiguration { return v.VpcConfiguration }).(WorkspaceVpcConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkspaceResultOutput{})
}
