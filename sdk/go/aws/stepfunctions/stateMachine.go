// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stepfunctions

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for StateMachine
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/stepfunctions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stepfunctions.NewStateMachine(ctx, "myStateMachine", &stepfunctions.StateMachineArgs{
//				StateMachineName: pulumi.String("HelloWorld-StateMachine"),
//				StateMachineType: stepfunctions.StateMachineTypeStandard,
//				DefinitionString: pulumi.String("{\"StartAt\": \"HelloWorld\",  \"States\": {\"HelloWorld\": {\"Type\": \"Task\", \"Resource\":  \"arn:aws:lambda:us-east-1:111122223333;:function:HelloFunction\", \"End\": true}}}"),
//				RoleArn:          pulumi.String("arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1;"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/stepfunctions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stepfunctions.NewStateMachine(ctx, "myStateMachine", &stepfunctions.StateMachineArgs{
//				StateMachineName: pulumi.String("HelloWorld-StateMachine"),
//				StateMachineType: stepfunctions.StateMachineTypeStandard,
//				DefinitionString: pulumi.String(`{
//	    "StartAt": "HelloWorld",
//	    "States" : {
//	        "HelloWorld" : {
//	            "Type" : "Task",
//	            "Resource" : "arn:aws:lambda:us-east-1:111122223333:function:HelloFunction",
//	            "End" : true
//	        }
//	    }
//	}`),
//
//				RoleArn: pulumi.String("arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1"),
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname1"),
//						Value: pulumi.String("value1"),
//					},
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname2"),
//						Value: pulumi.String("value2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/stepfunctions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stepfunctions.NewStateMachine(ctx, "myStateMachine", &stepfunctions.StateMachineArgs{
//				StateMachineName: pulumi.String("HelloWorld-StateMachine"),
//				DefinitionString: pulumi.String(`{
//	  "StartAt": "HelloWorld",
//	  "States": {
//	    "HelloWorld": {
//	      "Type": "Task",
//	      "Resource": "arn:aws:lambda:us-east-1:111122223333:function:HelloFunction",
//	      "End": true
//	    }
//	  }
//	}`),
//
//				RoleArn: pulumi.String("arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1"),
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname1"),
//						Value: pulumi.String("value1"),
//					},
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname2"),
//						Value: pulumi.String("value2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/stepfunctions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stepfunctions.NewStateMachine(ctx, "myStateMachine", &stepfunctions.StateMachineArgs{
//				StateMachineName: pulumi.String("HelloWorld-StateMachine"),
//				DefinitionS3Location: &stepfunctions.StateMachineS3LocationArgs{
//					Bucket: pulumi.String("example_bucket"),
//					Key:    pulumi.String("hello_world.json"),
//				},
//				DefinitionSubstitutions: pulumi.Map{
//					"helloFunction": pulumi.Any("arn:aws:lambda:us-east-1:111122223333:function:HelloFunction"),
//				},
//				RoleArn: pulumi.String("arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StateMachine struct {
	pulumi.CustomResourceState

	// Returns the ARN of the resource.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon States Language definition of the state machine. The state machine definition must be in JSON or YAML, and the format of the object must match the format of your CloudFormation template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
	Definition StateMachineDefinitionPtrOutput `pulumi:"definition"`
	// The name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.
	DefinitionS3Location StateMachineS3LocationPtrOutput `pulumi:"definitionS3Location"`
	// The Amazon States Language definition of the state machine. The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
	DefinitionString pulumi.StringPtrOutput `pulumi:"definitionString"`
	// A map (string to string) that specifies the mappings for placeholder variables in the state machine definition. This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.
	//
	// Substitutions must follow the syntax: `${key_name}` or `${variable_1,variable_2,...}` .
	DefinitionSubstitutions pulumi.MapOutput `pulumi:"definitionSubstitutions"`
	// Encryption configuration for the state machine.
	EncryptionConfiguration StateMachineEncryptionConfigurationPtrOutput `pulumi:"encryptionConfiguration"`
	// Defines what execution history events are logged and where they are logged.
	//
	// > By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
	LoggingConfiguration StateMachineLoggingConfigurationPtrOutput `pulumi:"loggingConfiguration"`
	// Returns the name of the state machine. For example:
	//
	// `{ "Fn::GetAtt": ["MyStateMachine", "Name"] }`
	//
	// Returns the name of your state machine:
	//
	// `HelloWorld-StateMachine`
	//
	// If you did not specify the name it will be similar to the following:
	//
	// `MyStateMachine-1234abcdefgh`
	//
	// For more information about using `Fn::GetAtt` , see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html) .
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The name of the state machine.
	//
	// A name must *not* contain:
	//
	// - white space
	// - brackets `< > { } [ ]`
	// - wildcard characters `? *`
	// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
	// - control characters ( `U+0000-001F` , `U+007F-009F` )
	//
	// > If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	StateMachineName pulumi.StringPtrOutput `pulumi:"stateMachineName"`
	// Identifier for a state machine revision, which is an immutable, read-only snapshot of a state machineâ€™s definition and configuration.
	StateMachineRevisionId pulumi.StringOutput `pulumi:"stateMachineRevisionId"`
	// Determines whether a `STANDARD` or `EXPRESS` state machine is created. The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.
	StateMachineType StateMachineTypePtrOutput `pulumi:"stateMachineType"`
	// The list of tags to add to a resource.
	//
	// Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// Selects whether or not the state machine's AWS X-Ray tracing is enabled.
	TracingConfiguration StateMachineTracingConfigurationPtrOutput `pulumi:"tracingConfiguration"`
}

// NewStateMachine registers a new resource with the given unique name, arguments, and options.
func NewStateMachine(ctx *pulumi.Context,
	name string, args *StateMachineArgs, opts ...pulumi.ResourceOption) (*StateMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"stateMachineName",
		"stateMachineType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StateMachine
	err := ctx.RegisterResource("aws-native:stepfunctions:StateMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStateMachine gets an existing StateMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStateMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StateMachineState, opts ...pulumi.ResourceOption) (*StateMachine, error) {
	var resource StateMachine
	err := ctx.ReadResource("aws-native:stepfunctions:StateMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StateMachine resources.
type stateMachineState struct {
}

type StateMachineState struct {
}

func (StateMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*stateMachineState)(nil)).Elem()
}

type stateMachineArgs struct {
	// The Amazon States Language definition of the state machine. The state machine definition must be in JSON or YAML, and the format of the object must match the format of your CloudFormation template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
	Definition *StateMachineDefinition `pulumi:"definition"`
	// The name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.
	DefinitionS3Location *StateMachineS3Location `pulumi:"definitionS3Location"`
	// The Amazon States Language definition of the state machine. The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
	DefinitionString *string `pulumi:"definitionString"`
	// A map (string to string) that specifies the mappings for placeholder variables in the state machine definition. This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.
	//
	// Substitutions must follow the syntax: `${key_name}` or `${variable_1,variable_2,...}` .
	DefinitionSubstitutions map[string]interface{} `pulumi:"definitionSubstitutions"`
	// Encryption configuration for the state machine.
	EncryptionConfiguration *StateMachineEncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// Defines what execution history events are logged and where they are logged.
	//
	// > By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
	LoggingConfiguration *StateMachineLoggingConfiguration `pulumi:"loggingConfiguration"`
	// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
	RoleArn string `pulumi:"roleArn"`
	// The name of the state machine.
	//
	// A name must *not* contain:
	//
	// - white space
	// - brackets `< > { } [ ]`
	// - wildcard characters `? *`
	// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
	// - control characters ( `U+0000-001F` , `U+007F-009F` )
	//
	// > If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	StateMachineName *string `pulumi:"stateMachineName"`
	// Determines whether a `STANDARD` or `EXPRESS` state machine is created. The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.
	StateMachineType *StateMachineType `pulumi:"stateMachineType"`
	// The list of tags to add to a resource.
	//
	// Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .
	Tags []aws.Tag `pulumi:"tags"`
	// Selects whether or not the state machine's AWS X-Ray tracing is enabled.
	TracingConfiguration *StateMachineTracingConfiguration `pulumi:"tracingConfiguration"`
}

// The set of arguments for constructing a StateMachine resource.
type StateMachineArgs struct {
	// The Amazon States Language definition of the state machine. The state machine definition must be in JSON or YAML, and the format of the object must match the format of your CloudFormation template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
	Definition StateMachineDefinitionPtrInput
	// The name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.
	DefinitionS3Location StateMachineS3LocationPtrInput
	// The Amazon States Language definition of the state machine. The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
	DefinitionString pulumi.StringPtrInput
	// A map (string to string) that specifies the mappings for placeholder variables in the state machine definition. This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.
	//
	// Substitutions must follow the syntax: `${key_name}` or `${variable_1,variable_2,...}` .
	DefinitionSubstitutions pulumi.MapInput
	// Encryption configuration for the state machine.
	EncryptionConfiguration StateMachineEncryptionConfigurationPtrInput
	// Defines what execution history events are logged and where they are logged.
	//
	// > By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
	LoggingConfiguration StateMachineLoggingConfigurationPtrInput
	// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
	RoleArn pulumi.StringInput
	// The name of the state machine.
	//
	// A name must *not* contain:
	//
	// - white space
	// - brackets `< > { } [ ]`
	// - wildcard characters `? *`
	// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
	// - control characters ( `U+0000-001F` , `U+007F-009F` )
	//
	// > If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	StateMachineName pulumi.StringPtrInput
	// Determines whether a `STANDARD` or `EXPRESS` state machine is created. The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.
	StateMachineType StateMachineTypePtrInput
	// The list of tags to add to a resource.
	//
	// Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .
	Tags aws.TagArrayInput
	// Selects whether or not the state machine's AWS X-Ray tracing is enabled.
	TracingConfiguration StateMachineTracingConfigurationPtrInput
}

func (StateMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stateMachineArgs)(nil)).Elem()
}

type StateMachineInput interface {
	pulumi.Input

	ToStateMachineOutput() StateMachineOutput
	ToStateMachineOutputWithContext(ctx context.Context) StateMachineOutput
}

func (*StateMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachine)(nil)).Elem()
}

func (i *StateMachine) ToStateMachineOutput() StateMachineOutput {
	return i.ToStateMachineOutputWithContext(context.Background())
}

func (i *StateMachine) ToStateMachineOutputWithContext(ctx context.Context) StateMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMachineOutput)
}

type StateMachineOutput struct{ *pulumi.OutputState }

func (StateMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StateMachine)(nil)).Elem()
}

func (o StateMachineOutput) ToStateMachineOutput() StateMachineOutput {
	return o
}

func (o StateMachineOutput) ToStateMachineOutputWithContext(ctx context.Context) StateMachineOutput {
	return o
}

// Returns the ARN of the resource.
func (o StateMachineOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Amazon States Language definition of the state machine. The state machine definition must be in JSON or YAML, and the format of the object must match the format of your CloudFormation template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
func (o StateMachineOutput) Definition() StateMachineDefinitionPtrOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineDefinitionPtrOutput { return v.Definition }).(StateMachineDefinitionPtrOutput)
}

// The name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.
func (o StateMachineOutput) DefinitionS3Location() StateMachineS3LocationPtrOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineS3LocationPtrOutput { return v.DefinitionS3Location }).(StateMachineS3LocationPtrOutput)
}

// The Amazon States Language definition of the state machine. The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
func (o StateMachineOutput) DefinitionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringPtrOutput { return v.DefinitionString }).(pulumi.StringPtrOutput)
}

// A map (string to string) that specifies the mappings for placeholder variables in the state machine definition. This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.
//
// Substitutions must follow the syntax: `${key_name}` or `${variable_1,variable_2,...}` .
func (o StateMachineOutput) DefinitionSubstitutions() pulumi.MapOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.MapOutput { return v.DefinitionSubstitutions }).(pulumi.MapOutput)
}

// Encryption configuration for the state machine.
func (o StateMachineOutput) EncryptionConfiguration() StateMachineEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineEncryptionConfigurationPtrOutput { return v.EncryptionConfiguration }).(StateMachineEncryptionConfigurationPtrOutput)
}

// Defines what execution history events are logged and where they are logged.
//
// > By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
func (o StateMachineOutput) LoggingConfiguration() StateMachineLoggingConfigurationPtrOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineLoggingConfigurationPtrOutput { return v.LoggingConfiguration }).(StateMachineLoggingConfigurationPtrOutput)
}

// Returns the name of the state machine. For example:
//
// `{ "Fn::GetAtt": ["MyStateMachine", "Name"] }`
//
// Returns the name of your state machine:
//
// `HelloWorld-StateMachine`
//
// If you did not specify the name it will be similar to the following:
//
// `MyStateMachine-1234abcdefgh`
//
// For more information about using `Fn::GetAtt` , see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html) .
func (o StateMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
func (o StateMachineOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The name of the state machine.
//
// A name must *not* contain:
//
// - white space
// - brackets `< > { } [ ]`
// - wildcard characters `? *`
// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
// - control characters ( `U+0000-001F` , `U+007F-009F` )
//
// > If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
func (o StateMachineOutput) StateMachineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringPtrOutput { return v.StateMachineName }).(pulumi.StringPtrOutput)
}

// Identifier for a state machine revision, which is an immutable, read-only snapshot of a state machineâ€™s definition and configuration.
func (o StateMachineOutput) StateMachineRevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *StateMachine) pulumi.StringOutput { return v.StateMachineRevisionId }).(pulumi.StringOutput)
}

// Determines whether a `STANDARD` or `EXPRESS` state machine is created. The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.
func (o StateMachineOutput) StateMachineType() StateMachineTypePtrOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineTypePtrOutput { return v.StateMachineType }).(StateMachineTypePtrOutput)
}

// The list of tags to add to a resource.
//
// Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .
func (o StateMachineOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *StateMachine) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// Selects whether or not the state machine's AWS X-Ray tracing is enabled.
func (o StateMachineOutput) TracingConfiguration() StateMachineTracingConfigurationPtrOutput {
	return o.ApplyT(func(v *StateMachine) StateMachineTracingConfigurationPtrOutput { return v.TracingConfiguration }).(StateMachineTracingConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StateMachineInput)(nil)).Elem(), &StateMachine{})
	pulumi.RegisterOutputType(StateMachineOutput{})
}
