// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stepfunctions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for Activity
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/stepfunctions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stepfunctions.NewActivity(ctx, "myActivity", &stepfunctions.ActivityArgs{
//				Name: pulumi.String("myActivity"),
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname1"),
//						Value: pulumi.String("value1"),
//					},
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname2"),
//						Value: pulumi.String("value2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/stepfunctions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := stepfunctions.NewActivity(ctx, "myActivity", &stepfunctions.ActivityArgs{
//				Name: pulumi.String("myActivity"),
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname1"),
//						Value: pulumi.String("value1"),
//					},
//					&aws.TagArgs{
//						Key:   pulumi.String("keyname2"),
//						Value: pulumi.String("value2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Activity struct {
	pulumi.CustomResourceState

	// Returns the ARN of the resource.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the activity.
	//
	// A name must *not* contain:
	//
	// - white space
	// - brackets `< > { } [ ]`
	// - wildcard characters `? *`
	// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
	// - control characters ( `U+0000-001F` , `U+007F-009F` )
	//
	// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
	Name pulumi.StringOutput `pulumi:"name"`
	// The `TagsEntry` property specifies *tags* to identify an activity.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewActivity registers a new resource with the given unique name, arguments, and options.
func NewActivity(ctx *pulumi.Context,
	name string, args *ActivityArgs, opts ...pulumi.ResourceOption) (*Activity, error) {
	if args == nil {
		args = &ActivityArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Activity
	err := ctx.RegisterResource("aws-native:stepfunctions:Activity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActivity gets an existing Activity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActivity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActivityState, opts ...pulumi.ResourceOption) (*Activity, error) {
	var resource Activity
	err := ctx.ReadResource("aws-native:stepfunctions:Activity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Activity resources.
type activityState struct {
}

type ActivityState struct {
}

func (ActivityState) ElementType() reflect.Type {
	return reflect.TypeOf((*activityState)(nil)).Elem()
}

type activityArgs struct {
	// The name of the activity.
	//
	// A name must *not* contain:
	//
	// - white space
	// - brackets `< > { } [ ]`
	// - wildcard characters `? *`
	// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
	// - control characters ( `U+0000-001F` , `U+007F-009F` )
	//
	// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
	Name *string `pulumi:"name"`
	// The `TagsEntry` property specifies *tags* to identify an activity.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Activity resource.
type ActivityArgs struct {
	// The name of the activity.
	//
	// A name must *not* contain:
	//
	// - white space
	// - brackets `< > { } [ ]`
	// - wildcard characters `? *`
	// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
	// - control characters ( `U+0000-001F` , `U+007F-009F` )
	//
	// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
	Name pulumi.StringPtrInput
	// The `TagsEntry` property specifies *tags* to identify an activity.
	Tags aws.TagArrayInput
}

func (ActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activityArgs)(nil)).Elem()
}

type ActivityInput interface {
	pulumi.Input

	ToActivityOutput() ActivityOutput
	ToActivityOutputWithContext(ctx context.Context) ActivityOutput
}

func (*Activity) ElementType() reflect.Type {
	return reflect.TypeOf((**Activity)(nil)).Elem()
}

func (i *Activity) ToActivityOutput() ActivityOutput {
	return i.ToActivityOutputWithContext(context.Background())
}

func (i *Activity) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityOutput)
}

type ActivityOutput struct{ *pulumi.OutputState }

func (ActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Activity)(nil)).Elem()
}

func (o ActivityOutput) ToActivityOutput() ActivityOutput {
	return o
}

func (o ActivityOutput) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return o
}

// Returns the ARN of the resource.
func (o ActivityOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Activity) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the activity.
//
// A name must *not* contain:
//
// - white space
// - brackets `< > { } [ ]`
// - wildcard characters `? *`
// - special characters ` " # % \ ^ | ~  ` $ & , ; : /`
// - control characters ( `U+0000-001F` , `U+007F-009F` )
//
// To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
func (o ActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Activity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `TagsEntry` property specifies *tags* to identify an activity.
func (o ActivityOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Activity) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityInput)(nil)).Elem(), &Activity{})
	pulumi.RegisterOutputType(ActivityOutput{})
}
