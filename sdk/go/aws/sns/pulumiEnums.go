// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Indicates one of the supported protocols for the SNS topic
type TopicLoggingConfigProtocol string

const (
	TopicLoggingConfigProtocolHttps       = TopicLoggingConfigProtocol("http/s")
	TopicLoggingConfigProtocolSqs         = TopicLoggingConfigProtocol("sqs")
	TopicLoggingConfigProtocolLambda      = TopicLoggingConfigProtocol("lambda")
	TopicLoggingConfigProtocolFirehose    = TopicLoggingConfigProtocol("firehose")
	TopicLoggingConfigProtocolApplication = TopicLoggingConfigProtocol("application")
)

func (TopicLoggingConfigProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicLoggingConfigProtocol)(nil)).Elem()
}

func (e TopicLoggingConfigProtocol) ToTopicLoggingConfigProtocolOutput() TopicLoggingConfigProtocolOutput {
	return pulumi.ToOutput(e).(TopicLoggingConfigProtocolOutput)
}

func (e TopicLoggingConfigProtocol) ToTopicLoggingConfigProtocolOutputWithContext(ctx context.Context) TopicLoggingConfigProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TopicLoggingConfigProtocolOutput)
}

func (e TopicLoggingConfigProtocol) ToTopicLoggingConfigProtocolPtrOutput() TopicLoggingConfigProtocolPtrOutput {
	return e.ToTopicLoggingConfigProtocolPtrOutputWithContext(context.Background())
}

func (e TopicLoggingConfigProtocol) ToTopicLoggingConfigProtocolPtrOutputWithContext(ctx context.Context) TopicLoggingConfigProtocolPtrOutput {
	return TopicLoggingConfigProtocol(e).ToTopicLoggingConfigProtocolOutputWithContext(ctx).ToTopicLoggingConfigProtocolPtrOutputWithContext(ctx)
}

func (e TopicLoggingConfigProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TopicLoggingConfigProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TopicLoggingConfigProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TopicLoggingConfigProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TopicLoggingConfigProtocolOutput struct{ *pulumi.OutputState }

func (TopicLoggingConfigProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicLoggingConfigProtocol)(nil)).Elem()
}

func (o TopicLoggingConfigProtocolOutput) ToTopicLoggingConfigProtocolOutput() TopicLoggingConfigProtocolOutput {
	return o
}

func (o TopicLoggingConfigProtocolOutput) ToTopicLoggingConfigProtocolOutputWithContext(ctx context.Context) TopicLoggingConfigProtocolOutput {
	return o
}

func (o TopicLoggingConfigProtocolOutput) ToTopicLoggingConfigProtocolPtrOutput() TopicLoggingConfigProtocolPtrOutput {
	return o.ToTopicLoggingConfigProtocolPtrOutputWithContext(context.Background())
}

func (o TopicLoggingConfigProtocolOutput) ToTopicLoggingConfigProtocolPtrOutputWithContext(ctx context.Context) TopicLoggingConfigProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicLoggingConfigProtocol) *TopicLoggingConfigProtocol {
		return &v
	}).(TopicLoggingConfigProtocolPtrOutput)
}

func (o TopicLoggingConfigProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[TopicLoggingConfigProtocol] {
	return pulumix.Output[TopicLoggingConfigProtocol]{
		OutputState: o.OutputState,
	}
}

func (o TopicLoggingConfigProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TopicLoggingConfigProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TopicLoggingConfigProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TopicLoggingConfigProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TopicLoggingConfigProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TopicLoggingConfigProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TopicLoggingConfigProtocolPtrOutput struct{ *pulumi.OutputState }

func (TopicLoggingConfigProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicLoggingConfigProtocol)(nil)).Elem()
}

func (o TopicLoggingConfigProtocolPtrOutput) ToTopicLoggingConfigProtocolPtrOutput() TopicLoggingConfigProtocolPtrOutput {
	return o
}

func (o TopicLoggingConfigProtocolPtrOutput) ToTopicLoggingConfigProtocolPtrOutputWithContext(ctx context.Context) TopicLoggingConfigProtocolPtrOutput {
	return o
}

func (o TopicLoggingConfigProtocolPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicLoggingConfigProtocol] {
	return pulumix.Output[*TopicLoggingConfigProtocol]{
		OutputState: o.OutputState,
	}
}

func (o TopicLoggingConfigProtocolPtrOutput) Elem() TopicLoggingConfigProtocolOutput {
	return o.ApplyT(func(v *TopicLoggingConfigProtocol) TopicLoggingConfigProtocol {
		if v != nil {
			return *v
		}
		var ret TopicLoggingConfigProtocol
		return ret
	}).(TopicLoggingConfigProtocolOutput)
}

func (o TopicLoggingConfigProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TopicLoggingConfigProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TopicLoggingConfigProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TopicLoggingConfigProtocolInput is an input type that accepts TopicLoggingConfigProtocolArgs and TopicLoggingConfigProtocolOutput values.
// You can construct a concrete instance of `TopicLoggingConfigProtocolInput` via:
//
//	TopicLoggingConfigProtocolArgs{...}
type TopicLoggingConfigProtocolInput interface {
	pulumi.Input

	ToTopicLoggingConfigProtocolOutput() TopicLoggingConfigProtocolOutput
	ToTopicLoggingConfigProtocolOutputWithContext(context.Context) TopicLoggingConfigProtocolOutput
}

var topicLoggingConfigProtocolPtrType = reflect.TypeOf((**TopicLoggingConfigProtocol)(nil)).Elem()

type TopicLoggingConfigProtocolPtrInput interface {
	pulumi.Input

	ToTopicLoggingConfigProtocolPtrOutput() TopicLoggingConfigProtocolPtrOutput
	ToTopicLoggingConfigProtocolPtrOutputWithContext(context.Context) TopicLoggingConfigProtocolPtrOutput
}

type topicLoggingConfigProtocolPtr string

func TopicLoggingConfigProtocolPtr(v string) TopicLoggingConfigProtocolPtrInput {
	return (*topicLoggingConfigProtocolPtr)(&v)
}

func (*topicLoggingConfigProtocolPtr) ElementType() reflect.Type {
	return topicLoggingConfigProtocolPtrType
}

func (in *topicLoggingConfigProtocolPtr) ToTopicLoggingConfigProtocolPtrOutput() TopicLoggingConfigProtocolPtrOutput {
	return pulumi.ToOutput(in).(TopicLoggingConfigProtocolPtrOutput)
}

func (in *topicLoggingConfigProtocolPtr) ToTopicLoggingConfigProtocolPtrOutputWithContext(ctx context.Context) TopicLoggingConfigProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TopicLoggingConfigProtocolPtrOutput)
}

func (in *topicLoggingConfigProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*TopicLoggingConfigProtocol] {
	return pulumix.Output[*TopicLoggingConfigProtocol]{
		OutputState: in.ToTopicLoggingConfigProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicLoggingConfigProtocolInput)(nil)).Elem(), TopicLoggingConfigProtocol("http/s"))
	pulumi.RegisterInputType(reflect.TypeOf((*TopicLoggingConfigProtocolPtrInput)(nil)).Elem(), TopicLoggingConfigProtocol("http/s"))
	pulumi.RegisterOutputType(TopicLoggingConfigProtocolOutput{})
	pulumi.RegisterOutputType(TopicLoggingConfigProtocolPtrOutput{})
}
