// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema for AWS::SNS::TopicInlinePolicy
type TopicInlinePolicy struct {
	pulumi.CustomResourceState

	// A policy document that contains permissions to add to the specified SNS topics.
	PolicyDocument pulumi.AnyOutput `pulumi:"policyDocument"`
	// The Amazon Resource Name (ARN) of the topic to which you want to add the policy.
	TopicArn pulumi.StringOutput `pulumi:"topicArn"`
}

// NewTopicInlinePolicy registers a new resource with the given unique name, arguments, and options.
func NewTopicInlinePolicy(ctx *pulumi.Context,
	name string, args *TopicInlinePolicyArgs, opts ...pulumi.ResourceOption) (*TopicInlinePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	if args.TopicArn == nil {
		return nil, errors.New("invalid value for required argument 'TopicArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"topicArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TopicInlinePolicy
	err := ctx.RegisterResource("aws-native:sns:TopicInlinePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicInlinePolicy gets an existing TopicInlinePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicInlinePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicInlinePolicyState, opts ...pulumi.ResourceOption) (*TopicInlinePolicy, error) {
	var resource TopicInlinePolicy
	err := ctx.ReadResource("aws-native:sns:TopicInlinePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicInlinePolicy resources.
type topicInlinePolicyState struct {
}

type TopicInlinePolicyState struct {
}

func (TopicInlinePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicInlinePolicyState)(nil)).Elem()
}

type topicInlinePolicyArgs struct {
	// A policy document that contains permissions to add to the specified SNS topics.
	PolicyDocument interface{} `pulumi:"policyDocument"`
	// The Amazon Resource Name (ARN) of the topic to which you want to add the policy.
	TopicArn string `pulumi:"topicArn"`
}

// The set of arguments for constructing a TopicInlinePolicy resource.
type TopicInlinePolicyArgs struct {
	// A policy document that contains permissions to add to the specified SNS topics.
	PolicyDocument pulumi.Input
	// The Amazon Resource Name (ARN) of the topic to which you want to add the policy.
	TopicArn pulumi.StringInput
}

func (TopicInlinePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicInlinePolicyArgs)(nil)).Elem()
}

type TopicInlinePolicyInput interface {
	pulumi.Input

	ToTopicInlinePolicyOutput() TopicInlinePolicyOutput
	ToTopicInlinePolicyOutputWithContext(ctx context.Context) TopicInlinePolicyOutput
}

func (*TopicInlinePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicInlinePolicy)(nil)).Elem()
}

func (i *TopicInlinePolicy) ToTopicInlinePolicyOutput() TopicInlinePolicyOutput {
	return i.ToTopicInlinePolicyOutputWithContext(context.Background())
}

func (i *TopicInlinePolicy) ToTopicInlinePolicyOutputWithContext(ctx context.Context) TopicInlinePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInlinePolicyOutput)
}

type TopicInlinePolicyOutput struct{ *pulumi.OutputState }

func (TopicInlinePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicInlinePolicy)(nil)).Elem()
}

func (o TopicInlinePolicyOutput) ToTopicInlinePolicyOutput() TopicInlinePolicyOutput {
	return o
}

func (o TopicInlinePolicyOutput) ToTopicInlinePolicyOutputWithContext(ctx context.Context) TopicInlinePolicyOutput {
	return o
}

// A policy document that contains permissions to add to the specified SNS topics.
func (o TopicInlinePolicyOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v *TopicInlinePolicy) pulumi.AnyOutput { return v.PolicyDocument }).(pulumi.AnyOutput)
}

// The Amazon Resource Name (ARN) of the topic to which you want to add the policy.
func (o TopicInlinePolicyOutput) TopicArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicInlinePolicy) pulumi.StringOutput { return v.TopicArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInlinePolicyInput)(nil)).Elem(), &TopicInlinePolicy{})
	pulumi.RegisterOutputType(TopicInlinePolicyOutput{})
}
