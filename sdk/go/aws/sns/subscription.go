// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SNS::Subscription
type Subscription struct {
	pulumi.CustomResourceState

	// Arn of the subscription
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The delivery policy JSON assigned to the subscription. Enables the subscriber to define the message delivery retry strategy in the case of an HTTP/S endpoint subscribed to the topic.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	DeliveryPolicy pulumi.AnyOutput `pulumi:"deliveryPolicy"`
	// The subscription's endpoint. The endpoint value depends on the protocol that you specify.
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// The filter policy JSON assigned to the subscription. Enables the subscriber to filter out unwanted messages.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	FilterPolicy pulumi.AnyOutput `pulumi:"filterPolicy"`
	// This attribute lets you choose the filtering scope by using one of the following string value types: MessageAttributes (default) and MessageBody.
	FilterPolicyScope pulumi.StringPtrOutput `pulumi:"filterPolicyScope"`
	// The subscription's protocol.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// When set to true, enables raw message delivery. Raw messages don't contain any JSON formatting and can be sent to Amazon SQS and HTTP/S endpoints.
	RawMessageDelivery pulumi.BoolPtrOutput `pulumi:"rawMessageDelivery"`
	// When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors are held in the dead-letter queue for further analysis or reprocessing.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	RedrivePolicy pulumi.AnyOutput `pulumi:"redrivePolicy"`
	// For cross-region subscriptions, the region in which the topic resides.If no region is specified, AWS CloudFormation uses the region of the caller as the default.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Specifies whether Amazon SNS resends the notification to the subscription when a message's attribute changes.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	ReplayPolicy pulumi.AnyOutput `pulumi:"replayPolicy"`
	// This property applies only to Amazon Data Firehose delivery stream subscriptions.
	SubscriptionRoleArn pulumi.StringPtrOutput `pulumi:"subscriptionRoleArn"`
	// The ARN of the topic to subscribe to.
	TopicArn pulumi.StringOutput `pulumi:"topicArn"`
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOption) (*Subscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.TopicArn == nil {
		return nil, errors.New("invalid value for required argument 'TopicArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"endpoint",
		"protocol",
		"topicArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subscription
	err := ctx.RegisterResource("aws-native:sns:Subscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionState, opts ...pulumi.ResourceOption) (*Subscription, error) {
	var resource Subscription
	err := ctx.ReadResource("aws-native:sns:Subscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subscription resources.
type subscriptionState struct {
}

type SubscriptionState struct {
}

func (SubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionState)(nil)).Elem()
}

type subscriptionArgs struct {
	// The delivery policy JSON assigned to the subscription. Enables the subscriber to define the message delivery retry strategy in the case of an HTTP/S endpoint subscribed to the topic.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	DeliveryPolicy interface{} `pulumi:"deliveryPolicy"`
	// The subscription's endpoint. The endpoint value depends on the protocol that you specify.
	Endpoint *string `pulumi:"endpoint"`
	// The filter policy JSON assigned to the subscription. Enables the subscriber to filter out unwanted messages.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	FilterPolicy interface{} `pulumi:"filterPolicy"`
	// This attribute lets you choose the filtering scope by using one of the following string value types: MessageAttributes (default) and MessageBody.
	FilterPolicyScope *string `pulumi:"filterPolicyScope"`
	// The subscription's protocol.
	Protocol string `pulumi:"protocol"`
	// When set to true, enables raw message delivery. Raw messages don't contain any JSON formatting and can be sent to Amazon SQS and HTTP/S endpoints.
	RawMessageDelivery *bool `pulumi:"rawMessageDelivery"`
	// When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors are held in the dead-letter queue for further analysis or reprocessing.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	RedrivePolicy interface{} `pulumi:"redrivePolicy"`
	// For cross-region subscriptions, the region in which the topic resides.If no region is specified, AWS CloudFormation uses the region of the caller as the default.
	Region *string `pulumi:"region"`
	// Specifies whether Amazon SNS resends the notification to the subscription when a message's attribute changes.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	ReplayPolicy interface{} `pulumi:"replayPolicy"`
	// This property applies only to Amazon Data Firehose delivery stream subscriptions.
	SubscriptionRoleArn *string `pulumi:"subscriptionRoleArn"`
	// The ARN of the topic to subscribe to.
	TopicArn string `pulumi:"topicArn"`
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	// The delivery policy JSON assigned to the subscription. Enables the subscriber to define the message delivery retry strategy in the case of an HTTP/S endpoint subscribed to the topic.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	DeliveryPolicy pulumi.Input
	// The subscription's endpoint. The endpoint value depends on the protocol that you specify.
	Endpoint pulumi.StringPtrInput
	// The filter policy JSON assigned to the subscription. Enables the subscriber to filter out unwanted messages.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	FilterPolicy pulumi.Input
	// This attribute lets you choose the filtering scope by using one of the following string value types: MessageAttributes (default) and MessageBody.
	FilterPolicyScope pulumi.StringPtrInput
	// The subscription's protocol.
	Protocol pulumi.StringInput
	// When set to true, enables raw message delivery. Raw messages don't contain any JSON formatting and can be sent to Amazon SQS and HTTP/S endpoints.
	RawMessageDelivery pulumi.BoolPtrInput
	// When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors are held in the dead-letter queue for further analysis or reprocessing.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	RedrivePolicy pulumi.Input
	// For cross-region subscriptions, the region in which the topic resides.If no region is specified, AWS CloudFormation uses the region of the caller as the default.
	Region pulumi.StringPtrInput
	// Specifies whether Amazon SNS resends the notification to the subscription when a message's attribute changes.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
	ReplayPolicy pulumi.Input
	// This property applies only to Amazon Data Firehose delivery stream subscriptions.
	SubscriptionRoleArn pulumi.StringPtrInput
	// The ARN of the topic to subscribe to.
	TopicArn pulumi.StringInput
}

func (SubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionArgs)(nil)).Elem()
}

type SubscriptionInput interface {
	pulumi.Input

	ToSubscriptionOutput() SubscriptionOutput
	ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput
}

func (*Subscription) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (i *Subscription) ToSubscriptionOutput() SubscriptionOutput {
	return i.ToSubscriptionOutputWithContext(context.Background())
}

func (i *Subscription) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionOutput)
}

type SubscriptionOutput struct{ *pulumi.OutputState }

func (SubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (o SubscriptionOutput) ToSubscriptionOutput() SubscriptionOutput {
	return o
}

func (o SubscriptionOutput) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return o
}

// Arn of the subscription
func (o SubscriptionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The delivery policy JSON assigned to the subscription. Enables the subscriber to define the message delivery retry strategy in the case of an HTTP/S endpoint subscribed to the topic.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
func (o SubscriptionOutput) DeliveryPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *Subscription) pulumi.AnyOutput { return v.DeliveryPolicy }).(pulumi.AnyOutput)
}

// The subscription's endpoint. The endpoint value depends on the protocol that you specify.
func (o SubscriptionOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The filter policy JSON assigned to the subscription. Enables the subscriber to filter out unwanted messages.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
func (o SubscriptionOutput) FilterPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *Subscription) pulumi.AnyOutput { return v.FilterPolicy }).(pulumi.AnyOutput)
}

// This attribute lets you choose the filtering scope by using one of the following string value types: MessageAttributes (default) and MessageBody.
func (o SubscriptionOutput) FilterPolicyScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringPtrOutput { return v.FilterPolicyScope }).(pulumi.StringPtrOutput)
}

// The subscription's protocol.
func (o SubscriptionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// When set to true, enables raw message delivery. Raw messages don't contain any JSON formatting and can be sent to Amazon SQS and HTTP/S endpoints.
func (o SubscriptionOutput) RawMessageDelivery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.BoolPtrOutput { return v.RawMessageDelivery }).(pulumi.BoolPtrOutput)
}

// When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors are held in the dead-letter queue for further analysis or reprocessing.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
func (o SubscriptionOutput) RedrivePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *Subscription) pulumi.AnyOutput { return v.RedrivePolicy }).(pulumi.AnyOutput)
}

// For cross-region subscriptions, the region in which the topic resides.If no region is specified, AWS CloudFormation uses the region of the caller as the default.
func (o SubscriptionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Specifies whether Amazon SNS resends the notification to the subscription when a message's attribute changes.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
func (o SubscriptionOutput) ReplayPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *Subscription) pulumi.AnyOutput { return v.ReplayPolicy }).(pulumi.AnyOutput)
}

// This property applies only to Amazon Data Firehose delivery stream subscriptions.
func (o SubscriptionOutput) SubscriptionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringPtrOutput { return v.SubscriptionRoleArn }).(pulumi.StringPtrOutput)
}

// The ARN of the topic to subscribe to.
func (o SubscriptionOutput) TopicArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.TopicArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionInput)(nil)).Elem(), &Subscription{})
	pulumi.RegisterOutputType(SubscriptionOutput{})
}
