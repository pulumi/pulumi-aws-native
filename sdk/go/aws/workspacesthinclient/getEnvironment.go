// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesthinclient

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource type definition for AWS::WorkSpacesThinClient::Environment.
func LookupEnvironment(ctx *pulumi.Context, args *LookupEnvironmentArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnvironmentResult
	err := ctx.Invoke("aws-native:workspacesthinclient:getEnvironment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEnvironmentArgs struct {
	// Unique identifier of the environment.
	Id string `pulumi:"id"`
}

type LookupEnvironmentResult struct {
	// Activation code for devices associated with environment.
	ActivationCode *string `pulumi:"activationCode"`
	// The environment ARN.
	Arn *string `pulumi:"arn"`
	// The timestamp in unix epoch format when environment was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the software set to apply.
	DesiredSoftwareSetId *string `pulumi:"desiredSoftwareSetId"`
	// The URL for the identity provider login (only for environments that use AppStream 2.0).
	DesktopEndpoint *string `pulumi:"desktopEndpoint"`
	// The type of VDI.
	DesktopType *EnvironmentDesktopType `pulumi:"desktopType"`
	// Unique identifier of the environment.
	Id *string `pulumi:"id"`
	// A specification for a time window to apply software updates.
	MaintenanceWindow *EnvironmentMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The name of the environment.
	Name *string `pulumi:"name"`
	// The ID of the software set that is pending to be installed.
	PendingSoftwareSetId *string `pulumi:"pendingSoftwareSetId"`
	// The version of the software set that is pending to be installed.
	PendingSoftwareSetVersion *string `pulumi:"pendingSoftwareSetVersion"`
	// Number of devices registered to the environment.
	RegisteredDevicesCount *int `pulumi:"registeredDevicesCount"`
	// Describes if the software currently installed on all devices in the environment is a supported version.
	SoftwareSetComplianceStatus *EnvironmentSoftwareSetComplianceStatus `pulumi:"softwareSetComplianceStatus"`
	// An option to define which software updates to apply.
	SoftwareSetUpdateMode *EnvironmentSoftwareSetUpdateMode `pulumi:"softwareSetUpdateMode"`
	// An option to define if software updates should be applied within a maintenance window.
	SoftwareSetUpdateSchedule *EnvironmentSoftwareSetUpdateSchedule `pulumi:"softwareSetUpdateSchedule"`
	// An array of key-value pairs to apply to this resource.
	Tags []EnvironmentTag `pulumi:"tags"`
	// The timestamp in unix epoch format when environment was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

func LookupEnvironmentOutput(ctx *pulumi.Context, args LookupEnvironmentOutputArgs, opts ...pulumi.InvokeOption) LookupEnvironmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEnvironmentResult, error) {
			args := v.(LookupEnvironmentArgs)
			r, err := LookupEnvironment(ctx, &args, opts...)
			var s LookupEnvironmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEnvironmentResultOutput)
}

type LookupEnvironmentOutputArgs struct {
	// Unique identifier of the environment.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupEnvironmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentArgs)(nil)).Elem()
}

type LookupEnvironmentResultOutput struct{ *pulumi.OutputState }

func (LookupEnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentResult)(nil)).Elem()
}

func (o LookupEnvironmentResultOutput) ToLookupEnvironmentResultOutput() LookupEnvironmentResultOutput {
	return o
}

func (o LookupEnvironmentResultOutput) ToLookupEnvironmentResultOutputWithContext(ctx context.Context) LookupEnvironmentResultOutput {
	return o
}

func (o LookupEnvironmentResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupEnvironmentResult] {
	return pulumix.Output[LookupEnvironmentResult]{
		OutputState: o.OutputState,
	}
}

// Activation code for devices associated with environment.
func (o LookupEnvironmentResultOutput) ActivationCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.ActivationCode }).(pulumi.StringPtrOutput)
}

// The environment ARN.
func (o LookupEnvironmentResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The timestamp in unix epoch format when environment was created.
func (o LookupEnvironmentResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The ID of the software set to apply.
func (o LookupEnvironmentResultOutput) DesiredSoftwareSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.DesiredSoftwareSetId }).(pulumi.StringPtrOutput)
}

// The URL for the identity provider login (only for environments that use AppStream 2.0).
func (o LookupEnvironmentResultOutput) DesktopEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.DesktopEndpoint }).(pulumi.StringPtrOutput)
}

// The type of VDI.
func (o LookupEnvironmentResultOutput) DesktopType() EnvironmentDesktopTypePtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *EnvironmentDesktopType { return v.DesktopType }).(EnvironmentDesktopTypePtrOutput)
}

// Unique identifier of the environment.
func (o LookupEnvironmentResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A specification for a time window to apply software updates.
func (o LookupEnvironmentResultOutput) MaintenanceWindow() EnvironmentMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *EnvironmentMaintenanceWindow { return v.MaintenanceWindow }).(EnvironmentMaintenanceWindowPtrOutput)
}

// The name of the environment.
func (o LookupEnvironmentResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID of the software set that is pending to be installed.
func (o LookupEnvironmentResultOutput) PendingSoftwareSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.PendingSoftwareSetId }).(pulumi.StringPtrOutput)
}

// The version of the software set that is pending to be installed.
func (o LookupEnvironmentResultOutput) PendingSoftwareSetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.PendingSoftwareSetVersion }).(pulumi.StringPtrOutput)
}

// Number of devices registered to the environment.
func (o LookupEnvironmentResultOutput) RegisteredDevicesCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *int { return v.RegisteredDevicesCount }).(pulumi.IntPtrOutput)
}

// Describes if the software currently installed on all devices in the environment is a supported version.
func (o LookupEnvironmentResultOutput) SoftwareSetComplianceStatus() EnvironmentSoftwareSetComplianceStatusPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *EnvironmentSoftwareSetComplianceStatus {
		return v.SoftwareSetComplianceStatus
	}).(EnvironmentSoftwareSetComplianceStatusPtrOutput)
}

// An option to define which software updates to apply.
func (o LookupEnvironmentResultOutput) SoftwareSetUpdateMode() EnvironmentSoftwareSetUpdateModePtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *EnvironmentSoftwareSetUpdateMode { return v.SoftwareSetUpdateMode }).(EnvironmentSoftwareSetUpdateModePtrOutput)
}

// An option to define if software updates should be applied within a maintenance window.
func (o LookupEnvironmentResultOutput) SoftwareSetUpdateSchedule() EnvironmentSoftwareSetUpdateSchedulePtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *EnvironmentSoftwareSetUpdateSchedule {
		return v.SoftwareSetUpdateSchedule
	}).(EnvironmentSoftwareSetUpdateSchedulePtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupEnvironmentResultOutput) Tags() EnvironmentTagArrayOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) []EnvironmentTag { return v.Tags }).(EnvironmentTagArrayOutput)
}

// The timestamp in unix epoch format when environment was last updated.
func (o LookupEnvironmentResultOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnvironmentResult) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnvironmentResultOutput{})
}
