// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesthinclient

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::WorkSpacesThinClient::Environment.
type Environment struct {
	pulumi.CustomResourceState

	// Activation code for devices associated with environment.
	ActivationCode pulumi.StringOutput `pulumi:"activationCode"`
	// The environment ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Unique identifier of the environment.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The timestamp in unix epoch format when environment was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the software set to apply.
	DesiredSoftwareSetId pulumi.StringPtrOutput `pulumi:"desiredSoftwareSetId"`
	// The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.
	DesktopArn pulumi.StringOutput `pulumi:"desktopArn"`
	// The URL for the identity provider login (only for environments that use AppStream 2.0).
	DesktopEndpoint pulumi.StringPtrOutput `pulumi:"desktopEndpoint"`
	// The type of VDI.
	DesktopType EnvironmentDesktopTypeOutput `pulumi:"desktopType"`
	// The Amazon Resource Name (ARN) of the AWS Key Management Service key used to encrypt the environment.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// A specification for a time window to apply software updates.
	MaintenanceWindow EnvironmentMaintenanceWindowPtrOutput `pulumi:"maintenanceWindow"`
	// The name of the environment.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The ID of the software set that is pending to be installed.
	PendingSoftwareSetId pulumi.StringOutput `pulumi:"pendingSoftwareSetId"`
	// The version of the software set that is pending to be installed.
	PendingSoftwareSetVersion pulumi.StringOutput `pulumi:"pendingSoftwareSetVersion"`
	// Number of devices registered to the environment.
	RegisteredDevicesCount pulumi.IntOutput `pulumi:"registeredDevicesCount"`
	// Describes if the software currently installed on all devices in the environment is a supported version.
	SoftwareSetComplianceStatus EnvironmentSoftwareSetComplianceStatusOutput `pulumi:"softwareSetComplianceStatus"`
	// An option to define which software updates to apply.
	SoftwareSetUpdateMode EnvironmentSoftwareSetUpdateModePtrOutput `pulumi:"softwareSetUpdateMode"`
	// An option to define if software updates should be applied within a maintenance window.
	SoftwareSetUpdateSchedule EnvironmentSoftwareSetUpdateSchedulePtrOutput `pulumi:"softwareSetUpdateSchedule"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The timestamp in unix epoch format when environment was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DesktopArn == nil {
		return nil, errors.New("invalid value for required argument 'DesktopArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"desktopArn",
		"kmsKeyArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("aws-native:workspacesthinclient:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws-native:workspacesthinclient:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
}

type EnvironmentState struct {
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// The ID of the software set to apply.
	DesiredSoftwareSetId *string `pulumi:"desiredSoftwareSetId"`
	// The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.
	DesktopArn string `pulumi:"desktopArn"`
	// The URL for the identity provider login (only for environments that use AppStream 2.0).
	DesktopEndpoint *string `pulumi:"desktopEndpoint"`
	// The Amazon Resource Name (ARN) of the AWS Key Management Service key used to encrypt the environment.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// A specification for a time window to apply software updates.
	MaintenanceWindow *EnvironmentMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The name of the environment.
	Name *string `pulumi:"name"`
	// An option to define which software updates to apply.
	SoftwareSetUpdateMode *EnvironmentSoftwareSetUpdateMode `pulumi:"softwareSetUpdateMode"`
	// An option to define if software updates should be applied within a maintenance window.
	SoftwareSetUpdateSchedule *EnvironmentSoftwareSetUpdateSchedule `pulumi:"softwareSetUpdateSchedule"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// The ID of the software set to apply.
	DesiredSoftwareSetId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.
	DesktopArn pulumi.StringInput
	// The URL for the identity provider login (only for environments that use AppStream 2.0).
	DesktopEndpoint pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the AWS Key Management Service key used to encrypt the environment.
	KmsKeyArn pulumi.StringPtrInput
	// A specification for a time window to apply software updates.
	MaintenanceWindow EnvironmentMaintenanceWindowPtrInput
	// The name of the environment.
	Name pulumi.StringPtrInput
	// An option to define which software updates to apply.
	SoftwareSetUpdateMode EnvironmentSoftwareSetUpdateModePtrInput
	// An option to define if software updates should be applied within a maintenance window.
	SoftwareSetUpdateSchedule EnvironmentSoftwareSetUpdateSchedulePtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

// Activation code for devices associated with environment.
func (o EnvironmentOutput) ActivationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ActivationCode }).(pulumi.StringOutput)
}

// The environment ARN.
func (o EnvironmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Unique identifier of the environment.
func (o EnvironmentOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The timestamp in unix epoch format when environment was created.
func (o EnvironmentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the software set to apply.
func (o EnvironmentOutput) DesiredSoftwareSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.DesiredSoftwareSetId }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.
func (o EnvironmentOutput) DesktopArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.DesktopArn }).(pulumi.StringOutput)
}

// The URL for the identity provider login (only for environments that use AppStream 2.0).
func (o EnvironmentOutput) DesktopEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.DesktopEndpoint }).(pulumi.StringPtrOutput)
}

// The type of VDI.
func (o EnvironmentOutput) DesktopType() EnvironmentDesktopTypeOutput {
	return o.ApplyT(func(v *Environment) EnvironmentDesktopTypeOutput { return v.DesktopType }).(EnvironmentDesktopTypeOutput)
}

// The Amazon Resource Name (ARN) of the AWS Key Management Service key used to encrypt the environment.
func (o EnvironmentOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// A specification for a time window to apply software updates.
func (o EnvironmentOutput) MaintenanceWindow() EnvironmentMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentMaintenanceWindowPtrOutput { return v.MaintenanceWindow }).(EnvironmentMaintenanceWindowPtrOutput)
}

// The name of the environment.
func (o EnvironmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID of the software set that is pending to be installed.
func (o EnvironmentOutput) PendingSoftwareSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.PendingSoftwareSetId }).(pulumi.StringOutput)
}

// The version of the software set that is pending to be installed.
func (o EnvironmentOutput) PendingSoftwareSetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.PendingSoftwareSetVersion }).(pulumi.StringOutput)
}

// Number of devices registered to the environment.
func (o EnvironmentOutput) RegisteredDevicesCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntOutput { return v.RegisteredDevicesCount }).(pulumi.IntOutput)
}

// Describes if the software currently installed on all devices in the environment is a supported version.
func (o EnvironmentOutput) SoftwareSetComplianceStatus() EnvironmentSoftwareSetComplianceStatusOutput {
	return o.ApplyT(func(v *Environment) EnvironmentSoftwareSetComplianceStatusOutput {
		return v.SoftwareSetComplianceStatus
	}).(EnvironmentSoftwareSetComplianceStatusOutput)
}

// An option to define which software updates to apply.
func (o EnvironmentOutput) SoftwareSetUpdateMode() EnvironmentSoftwareSetUpdateModePtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentSoftwareSetUpdateModePtrOutput { return v.SoftwareSetUpdateMode }).(EnvironmentSoftwareSetUpdateModePtrOutput)
}

// An option to define if software updates should be applied within a maintenance window.
func (o EnvironmentOutput) SoftwareSetUpdateSchedule() EnvironmentSoftwareSetUpdateSchedulePtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentSoftwareSetUpdateSchedulePtrOutput { return v.SoftwareSetUpdateSchedule }).(EnvironmentSoftwareSetUpdateSchedulePtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o EnvironmentOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Environment) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The timestamp in unix epoch format when environment was last updated.
func (o EnvironmentOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
}
