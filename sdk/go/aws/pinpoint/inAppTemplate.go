// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Pinpoint::InAppTemplate
type InAppTemplate struct {
	pulumi.CustomResourceState

	Arn                 pulumi.StringOutput                         `pulumi:"arn"`
	Content             InAppTemplateInAppMessageContentArrayOutput `pulumi:"content"`
	CustomConfig        pulumi.AnyOutput                            `pulumi:"customConfig"`
	Layout              InAppTemplateLayoutPtrOutput                `pulumi:"layout"`
	Tags                pulumi.AnyOutput                            `pulumi:"tags"`
	TemplateDescription pulumi.StringPtrOutput                      `pulumi:"templateDescription"`
	TemplateName        pulumi.StringOutput                         `pulumi:"templateName"`
}

// NewInAppTemplate registers a new resource with the given unique name, arguments, and options.
func NewInAppTemplate(ctx *pulumi.Context,
	name string, args *InAppTemplateArgs, opts ...pulumi.ResourceOption) (*InAppTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	var resource InAppTemplate
	err := ctx.RegisterResource("aws-native:pinpoint:InAppTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInAppTemplate gets an existing InAppTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInAppTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InAppTemplateState, opts ...pulumi.ResourceOption) (*InAppTemplate, error) {
	var resource InAppTemplate
	err := ctx.ReadResource("aws-native:pinpoint:InAppTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InAppTemplate resources.
type inAppTemplateState struct {
}

type InAppTemplateState struct {
}

func (InAppTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*inAppTemplateState)(nil)).Elem()
}

type inAppTemplateArgs struct {
	Content             []InAppTemplateInAppMessageContent `pulumi:"content"`
	CustomConfig        interface{}                        `pulumi:"customConfig"`
	Layout              *InAppTemplateLayout               `pulumi:"layout"`
	Tags                interface{}                        `pulumi:"tags"`
	TemplateDescription *string                            `pulumi:"templateDescription"`
	TemplateName        string                             `pulumi:"templateName"`
}

// The set of arguments for constructing a InAppTemplate resource.
type InAppTemplateArgs struct {
	Content             InAppTemplateInAppMessageContentArrayInput
	CustomConfig        pulumi.Input
	Layout              InAppTemplateLayoutPtrInput
	Tags                pulumi.Input
	TemplateDescription pulumi.StringPtrInput
	TemplateName        pulumi.StringInput
}

func (InAppTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inAppTemplateArgs)(nil)).Elem()
}

type InAppTemplateInput interface {
	pulumi.Input

	ToInAppTemplateOutput() InAppTemplateOutput
	ToInAppTemplateOutputWithContext(ctx context.Context) InAppTemplateOutput
}

func (*InAppTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((*InAppTemplate)(nil))
}

func (i *InAppTemplate) ToInAppTemplateOutput() InAppTemplateOutput {
	return i.ToInAppTemplateOutputWithContext(context.Background())
}

func (i *InAppTemplate) ToInAppTemplateOutputWithContext(ctx context.Context) InAppTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InAppTemplateOutput)
}

type InAppTemplateOutput struct{ *pulumi.OutputState }

func (InAppTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InAppTemplate)(nil))
}

func (o InAppTemplateOutput) ToInAppTemplateOutput() InAppTemplateOutput {
	return o
}

func (o InAppTemplateOutput) ToInAppTemplateOutputWithContext(ctx context.Context) InAppTemplateOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InAppTemplateInput)(nil)).Elem(), &InAppTemplate{})
	pulumi.RegisterOutputType(InAppTemplateOutput{})
}
