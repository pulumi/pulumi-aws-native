// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pinpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Pinpoint::ADMChannel
//
// Deprecated: ADMChannel is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type ADMChannel struct {
	pulumi.CustomResourceState

	ApplicationId pulumi.StringOutput  `pulumi:"applicationId"`
	ClientId      pulumi.StringOutput  `pulumi:"clientId"`
	ClientSecret  pulumi.StringOutput  `pulumi:"clientSecret"`
	Enabled       pulumi.BoolPtrOutput `pulumi:"enabled"`
}

// NewADMChannel registers a new resource with the given unique name, arguments, and options.
func NewADMChannel(ctx *pulumi.Context,
	name string, args *ADMChannelArgs, opts ...pulumi.ResourceOption) (*ADMChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	var resource ADMChannel
	err := ctx.RegisterResource("aws-native:pinpoint:ADMChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetADMChannel gets an existing ADMChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetADMChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ADMChannelState, opts ...pulumi.ResourceOption) (*ADMChannel, error) {
	var resource ADMChannel
	err := ctx.ReadResource("aws-native:pinpoint:ADMChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ADMChannel resources.
type admchannelState struct {
}

type ADMChannelState struct {
}

func (ADMChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*admchannelState)(nil)).Elem()
}

type admchannelArgs struct {
	ApplicationId string `pulumi:"applicationId"`
	ClientId      string `pulumi:"clientId"`
	ClientSecret  string `pulumi:"clientSecret"`
	Enabled       *bool  `pulumi:"enabled"`
}

// The set of arguments for constructing a ADMChannel resource.
type ADMChannelArgs struct {
	ApplicationId pulumi.StringInput
	ClientId      pulumi.StringInput
	ClientSecret  pulumi.StringInput
	Enabled       pulumi.BoolPtrInput
}

func (ADMChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*admchannelArgs)(nil)).Elem()
}

type ADMChannelInput interface {
	pulumi.Input

	ToADMChannelOutput() ADMChannelOutput
	ToADMChannelOutputWithContext(ctx context.Context) ADMChannelOutput
}

func (*ADMChannel) ElementType() reflect.Type {
	return reflect.TypeOf((*ADMChannel)(nil))
}

func (i *ADMChannel) ToADMChannelOutput() ADMChannelOutput {
	return i.ToADMChannelOutputWithContext(context.Background())
}

func (i *ADMChannel) ToADMChannelOutputWithContext(ctx context.Context) ADMChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADMChannelOutput)
}

type ADMChannelOutput struct{ *pulumi.OutputState }

func (ADMChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ADMChannel)(nil))
}

func (o ADMChannelOutput) ToADMChannelOutput() ADMChannelOutput {
	return o
}

func (o ADMChannelOutput) ToADMChannelOutputWithContext(ctx context.Context) ADMChannelOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ADMChannelInput)(nil)).Elem(), &ADMChannel{})
	pulumi.RegisterOutputType(ADMChannelOutput{})
}
