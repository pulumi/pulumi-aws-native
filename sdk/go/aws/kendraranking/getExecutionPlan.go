// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendraranking

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A KendraRanking Rescore execution plan
func LookupExecutionPlan(ctx *pulumi.Context, args *LookupExecutionPlanArgs, opts ...pulumi.InvokeOption) (*LookupExecutionPlanResult, error) {
	var rv LookupExecutionPlanResult
	err := ctx.Invoke("aws-native:kendraranking:getExecutionPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupExecutionPlanArgs struct {
	Id string `pulumi:"id"`
}

type LookupExecutionPlanResult struct {
	Arn *string `pulumi:"arn"`
	// Capacity units
	CapacityUnits *ExecutionPlanCapacityUnitsConfiguration `pulumi:"capacityUnits"`
	// A description for the execution plan
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	Name        *string `pulumi:"name"`
	// Tags for labeling the execution plan
	Tags []ExecutionPlanTag `pulumi:"tags"`
}

func LookupExecutionPlanOutput(ctx *pulumi.Context, args LookupExecutionPlanOutputArgs, opts ...pulumi.InvokeOption) LookupExecutionPlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupExecutionPlanResult, error) {
			args := v.(LookupExecutionPlanArgs)
			r, err := LookupExecutionPlan(ctx, &args, opts...)
			var s LookupExecutionPlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupExecutionPlanResultOutput)
}

type LookupExecutionPlanOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupExecutionPlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionPlanArgs)(nil)).Elem()
}

type LookupExecutionPlanResultOutput struct{ *pulumi.OutputState }

func (LookupExecutionPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionPlanResult)(nil)).Elem()
}

func (o LookupExecutionPlanResultOutput) ToLookupExecutionPlanResultOutput() LookupExecutionPlanResultOutput {
	return o
}

func (o LookupExecutionPlanResultOutput) ToLookupExecutionPlanResultOutputWithContext(ctx context.Context) LookupExecutionPlanResultOutput {
	return o
}

func (o LookupExecutionPlanResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupExecutionPlanResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Capacity units
func (o LookupExecutionPlanResultOutput) CapacityUnits() ExecutionPlanCapacityUnitsConfigurationPtrOutput {
	return o.ApplyT(func(v LookupExecutionPlanResult) *ExecutionPlanCapacityUnitsConfiguration { return v.CapacityUnits }).(ExecutionPlanCapacityUnitsConfigurationPtrOutput)
}

// A description for the execution plan
func (o LookupExecutionPlanResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupExecutionPlanResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupExecutionPlanResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupExecutionPlanResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupExecutionPlanResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupExecutionPlanResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags for labeling the execution plan
func (o LookupExecutionPlanResultOutput) Tags() ExecutionPlanTagArrayOutput {
	return o.ApplyT(func(v LookupExecutionPlanResult) []ExecutionPlanTag { return v.Tags }).(ExecutionPlanTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupExecutionPlanResultOutput{})
}
