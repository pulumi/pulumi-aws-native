// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendraranking

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A KendraRanking Rescore execution plan
type ExecutionPlan struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// Capacity units
	CapacityUnits ExecutionPlanCapacityUnitsConfigurationPtrOutput `pulumi:"capacityUnits"`
	// A description for the execution plan
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	// Tags for labeling the execution plan
	Tags ExecutionPlanTagArrayOutput `pulumi:"tags"`
}

// NewExecutionPlan registers a new resource with the given unique name, arguments, and options.
func NewExecutionPlan(ctx *pulumi.Context,
	name string, args *ExecutionPlanArgs, opts ...pulumi.ResourceOption) (*ExecutionPlan, error) {
	if args == nil {
		args = &ExecutionPlanArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExecutionPlan
	err := ctx.RegisterResource("aws-native:kendraranking:ExecutionPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExecutionPlan gets an existing ExecutionPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExecutionPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExecutionPlanState, opts ...pulumi.ResourceOption) (*ExecutionPlan, error) {
	var resource ExecutionPlan
	err := ctx.ReadResource("aws-native:kendraranking:ExecutionPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExecutionPlan resources.
type executionPlanState struct {
}

type ExecutionPlanState struct {
}

func (ExecutionPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*executionPlanState)(nil)).Elem()
}

type executionPlanArgs struct {
	// Capacity units
	CapacityUnits *ExecutionPlanCapacityUnitsConfiguration `pulumi:"capacityUnits"`
	// A description for the execution plan
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	// Tags for labeling the execution plan
	Tags []ExecutionPlanTag `pulumi:"tags"`
}

// The set of arguments for constructing a ExecutionPlan resource.
type ExecutionPlanArgs struct {
	// Capacity units
	CapacityUnits ExecutionPlanCapacityUnitsConfigurationPtrInput
	// A description for the execution plan
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	// Tags for labeling the execution plan
	Tags ExecutionPlanTagArrayInput
}

func (ExecutionPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*executionPlanArgs)(nil)).Elem()
}

type ExecutionPlanInput interface {
	pulumi.Input

	ToExecutionPlanOutput() ExecutionPlanOutput
	ToExecutionPlanOutputWithContext(ctx context.Context) ExecutionPlanOutput
}

func (*ExecutionPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionPlan)(nil)).Elem()
}

func (i *ExecutionPlan) ToExecutionPlanOutput() ExecutionPlanOutput {
	return i.ToExecutionPlanOutputWithContext(context.Background())
}

func (i *ExecutionPlan) ToExecutionPlanOutputWithContext(ctx context.Context) ExecutionPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionPlanOutput)
}

func (i *ExecutionPlan) ToOutput(ctx context.Context) pulumix.Output[*ExecutionPlan] {
	return pulumix.Output[*ExecutionPlan]{
		OutputState: i.ToExecutionPlanOutputWithContext(ctx).OutputState,
	}
}

type ExecutionPlanOutput struct{ *pulumi.OutputState }

func (ExecutionPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionPlan)(nil)).Elem()
}

func (o ExecutionPlanOutput) ToExecutionPlanOutput() ExecutionPlanOutput {
	return o
}

func (o ExecutionPlanOutput) ToExecutionPlanOutputWithContext(ctx context.Context) ExecutionPlanOutput {
	return o
}

func (o ExecutionPlanOutput) ToOutput(ctx context.Context) pulumix.Output[*ExecutionPlan] {
	return pulumix.Output[*ExecutionPlan]{
		OutputState: o.OutputState,
	}
}

func (o ExecutionPlanOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionPlan) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Capacity units
func (o ExecutionPlanOutput) CapacityUnits() ExecutionPlanCapacityUnitsConfigurationPtrOutput {
	return o.ApplyT(func(v *ExecutionPlan) ExecutionPlanCapacityUnitsConfigurationPtrOutput { return v.CapacityUnits }).(ExecutionPlanCapacityUnitsConfigurationPtrOutput)
}

// A description for the execution plan
func (o ExecutionPlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionPlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ExecutionPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Tags for labeling the execution plan
func (o ExecutionPlanOutput) Tags() ExecutionPlanTagArrayOutput {
	return o.ApplyT(func(v *ExecutionPlan) ExecutionPlanTagArrayOutput { return v.Tags }).(ExecutionPlanTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionPlanInput)(nil)).Elem(), &ExecutionPlan{})
	pulumi.RegisterOutputType(ExecutionPlanOutput{})
}
