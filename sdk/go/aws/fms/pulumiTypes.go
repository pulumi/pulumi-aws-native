// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An FMS includeMap or excludeMap.
type PolicyIEMap struct {
	ACCOUNT []string `pulumi:"aCCOUNT"`
	ORGUNIT []string `pulumi:"oRGUNIT"`
}

// PolicyIEMapInput is an input type that accepts PolicyIEMap and PolicyIEMapOutput values.
// You can construct a concrete instance of `PolicyIEMapInput` via:
//
//          PolicyIEMap{ "key": PolicyIEArgs{...} }
type PolicyIEMapInput interface {
	pulumi.Input

	ToPolicyIEMapOutput() PolicyIEMapOutput
	ToPolicyIEMapOutputWithContext(context.Context) PolicyIEMapOutput
}

// An FMS includeMap or excludeMap.
type PolicyIEMapArgs struct {
	ACCOUNT pulumi.StringArrayInput `pulumi:"aCCOUNT"`
	ORGUNIT pulumi.StringArrayInput `pulumi:"oRGUNIT"`
}

func (PolicyIEMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIEMap)(nil)).Elem()
}

func (i PolicyIEMapArgs) ToPolicyIEMapOutput() PolicyIEMapOutput {
	return i.ToPolicyIEMapOutputWithContext(context.Background())
}

func (i PolicyIEMapArgs) ToPolicyIEMapOutputWithContext(ctx context.Context) PolicyIEMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIEMapOutput)
}

func (i PolicyIEMapArgs) ToPolicyIEMapPtrOutput() PolicyIEMapPtrOutput {
	return i.ToPolicyIEMapPtrOutputWithContext(context.Background())
}

func (i PolicyIEMapArgs) ToPolicyIEMapPtrOutputWithContext(ctx context.Context) PolicyIEMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIEMapOutput).ToPolicyIEMapPtrOutputWithContext(ctx)
}

// PolicyIEMapPtrInput is an input type that accepts PolicyIEMapArgs, PolicyIEMapPtr and PolicyIEMapPtrOutput values.
// You can construct a concrete instance of `PolicyIEMapPtrInput` via:
//
//          PolicyIEMapArgs{...}
//
//  or:
//
//          nil
type PolicyIEMapPtrInput interface {
	pulumi.Input

	ToPolicyIEMapPtrOutput() PolicyIEMapPtrOutput
	ToPolicyIEMapPtrOutputWithContext(context.Context) PolicyIEMapPtrOutput
}

type policyIEMapPtrType PolicyIEMapArgs

func PolicyIEMapPtr(v *PolicyIEMapArgs) PolicyIEMapPtrInput {
	return (*policyIEMapPtrType)(v)
}

func (*policyIEMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyIEMap)(nil)).Elem()
}

func (i *policyIEMapPtrType) ToPolicyIEMapPtrOutput() PolicyIEMapPtrOutput {
	return i.ToPolicyIEMapPtrOutputWithContext(context.Background())
}

func (i *policyIEMapPtrType) ToPolicyIEMapPtrOutputWithContext(ctx context.Context) PolicyIEMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyIEMapPtrOutput)
}

// An FMS includeMap or excludeMap.
type PolicyIEMapOutput struct{ *pulumi.OutputState }

func (PolicyIEMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyIEMap)(nil)).Elem()
}

func (o PolicyIEMapOutput) ToPolicyIEMapOutput() PolicyIEMapOutput {
	return o
}

func (o PolicyIEMapOutput) ToPolicyIEMapOutputWithContext(ctx context.Context) PolicyIEMapOutput {
	return o
}

func (o PolicyIEMapOutput) ToPolicyIEMapPtrOutput() PolicyIEMapPtrOutput {
	return o.ToPolicyIEMapPtrOutputWithContext(context.Background())
}

func (o PolicyIEMapOutput) ToPolicyIEMapPtrOutputWithContext(ctx context.Context) PolicyIEMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyIEMap) *PolicyIEMap {
		return &v
	}).(PolicyIEMapPtrOutput)
}

func (o PolicyIEMapOutput) ACCOUNT() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyIEMap) []string { return v.ACCOUNT }).(pulumi.StringArrayOutput)
}

func (o PolicyIEMapOutput) ORGUNIT() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyIEMap) []string { return v.ORGUNIT }).(pulumi.StringArrayOutput)
}

type PolicyIEMapPtrOutput struct{ *pulumi.OutputState }

func (PolicyIEMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyIEMap)(nil)).Elem()
}

func (o PolicyIEMapPtrOutput) ToPolicyIEMapPtrOutput() PolicyIEMapPtrOutput {
	return o
}

func (o PolicyIEMapPtrOutput) ToPolicyIEMapPtrOutputWithContext(ctx context.Context) PolicyIEMapPtrOutput {
	return o
}

func (o PolicyIEMapPtrOutput) Elem() PolicyIEMapOutput {
	return o.ApplyT(func(v *PolicyIEMap) PolicyIEMap {
		if v != nil {
			return *v
		}
		var ret PolicyIEMap
		return ret
	}).(PolicyIEMapOutput)
}

func (o PolicyIEMapPtrOutput) ACCOUNT() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyIEMap) []string {
		if v == nil {
			return nil
		}
		return v.ACCOUNT
	}).(pulumi.StringArrayOutput)
}

func (o PolicyIEMapPtrOutput) ORGUNIT() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyIEMap) []string {
		if v == nil {
			return nil
		}
		return v.ORGUNIT
	}).(pulumi.StringArrayOutput)
}

// A resource tag.
type PolicyResourceTag struct {
	Key   string  `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// PolicyResourceTagInput is an input type that accepts PolicyResourceTagArgs and PolicyResourceTagOutput values.
// You can construct a concrete instance of `PolicyResourceTagInput` via:
//
//          PolicyResourceTagArgs{...}
type PolicyResourceTagInput interface {
	pulumi.Input

	ToPolicyResourceTagOutput() PolicyResourceTagOutput
	ToPolicyResourceTagOutputWithContext(context.Context) PolicyResourceTagOutput
}

// A resource tag.
type PolicyResourceTagArgs struct {
	Key   pulumi.StringInput    `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PolicyResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyResourceTag)(nil)).Elem()
}

func (i PolicyResourceTagArgs) ToPolicyResourceTagOutput() PolicyResourceTagOutput {
	return i.ToPolicyResourceTagOutputWithContext(context.Background())
}

func (i PolicyResourceTagArgs) ToPolicyResourceTagOutputWithContext(ctx context.Context) PolicyResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyResourceTagOutput)
}

// PolicyResourceTagArrayInput is an input type that accepts PolicyResourceTagArray and PolicyResourceTagArrayOutput values.
// You can construct a concrete instance of `PolicyResourceTagArrayInput` via:
//
//          PolicyResourceTagArray{ PolicyResourceTagArgs{...} }
type PolicyResourceTagArrayInput interface {
	pulumi.Input

	ToPolicyResourceTagArrayOutput() PolicyResourceTagArrayOutput
	ToPolicyResourceTagArrayOutputWithContext(context.Context) PolicyResourceTagArrayOutput
}

type PolicyResourceTagArray []PolicyResourceTagInput

func (PolicyResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyResourceTag)(nil)).Elem()
}

func (i PolicyResourceTagArray) ToPolicyResourceTagArrayOutput() PolicyResourceTagArrayOutput {
	return i.ToPolicyResourceTagArrayOutputWithContext(context.Background())
}

func (i PolicyResourceTagArray) ToPolicyResourceTagArrayOutputWithContext(ctx context.Context) PolicyResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyResourceTagArrayOutput)
}

// A resource tag.
type PolicyResourceTagOutput struct{ *pulumi.OutputState }

func (PolicyResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyResourceTag)(nil)).Elem()
}

func (o PolicyResourceTagOutput) ToPolicyResourceTagOutput() PolicyResourceTagOutput {
	return o
}

func (o PolicyResourceTagOutput) ToPolicyResourceTagOutputWithContext(ctx context.Context) PolicyResourceTagOutput {
	return o
}

func (o PolicyResourceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyResourceTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PolicyResourceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyResourceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PolicyResourceTagArrayOutput struct{ *pulumi.OutputState }

func (PolicyResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyResourceTag)(nil)).Elem()
}

func (o PolicyResourceTagArrayOutput) ToPolicyResourceTagArrayOutput() PolicyResourceTagArrayOutput {
	return o
}

func (o PolicyResourceTagArrayOutput) ToPolicyResourceTagArrayOutputWithContext(ctx context.Context) PolicyResourceTagArrayOutput {
	return o
}

func (o PolicyResourceTagArrayOutput) Index(i pulumi.IntInput) PolicyResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyResourceTag {
		return vs[0].([]PolicyResourceTag)[vs[1].(int)]
	}).(PolicyResourceTagOutput)
}

// A policy tag.
type PolicyTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// PolicyTagInput is an input type that accepts PolicyTagArgs and PolicyTagOutput values.
// You can construct a concrete instance of `PolicyTagInput` via:
//
//          PolicyTagArgs{...}
type PolicyTagInput interface {
	pulumi.Input

	ToPolicyTagOutput() PolicyTagOutput
	ToPolicyTagOutputWithContext(context.Context) PolicyTagOutput
}

// A policy tag.
type PolicyTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PolicyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyTag)(nil)).Elem()
}

func (i PolicyTagArgs) ToPolicyTagOutput() PolicyTagOutput {
	return i.ToPolicyTagOutputWithContext(context.Background())
}

func (i PolicyTagArgs) ToPolicyTagOutputWithContext(ctx context.Context) PolicyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTagOutput)
}

// PolicyTagArrayInput is an input type that accepts PolicyTagArray and PolicyTagArrayOutput values.
// You can construct a concrete instance of `PolicyTagArrayInput` via:
//
//          PolicyTagArray{ PolicyTagArgs{...} }
type PolicyTagArrayInput interface {
	pulumi.Input

	ToPolicyTagArrayOutput() PolicyTagArrayOutput
	ToPolicyTagArrayOutputWithContext(context.Context) PolicyTagArrayOutput
}

type PolicyTagArray []PolicyTagInput

func (PolicyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyTag)(nil)).Elem()
}

func (i PolicyTagArray) ToPolicyTagArrayOutput() PolicyTagArrayOutput {
	return i.ToPolicyTagArrayOutputWithContext(context.Background())
}

func (i PolicyTagArray) ToPolicyTagArrayOutputWithContext(ctx context.Context) PolicyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTagArrayOutput)
}

// A policy tag.
type PolicyTagOutput struct{ *pulumi.OutputState }

func (PolicyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyTag)(nil)).Elem()
}

func (o PolicyTagOutput) ToPolicyTagOutput() PolicyTagOutput {
	return o
}

func (o PolicyTagOutput) ToPolicyTagOutputWithContext(ctx context.Context) PolicyTagOutput {
	return o
}

func (o PolicyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PolicyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyTag) string { return v.Value }).(pulumi.StringOutput)
}

type PolicyTagArrayOutput struct{ *pulumi.OutputState }

func (PolicyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyTag)(nil)).Elem()
}

func (o PolicyTagArrayOutput) ToPolicyTagArrayOutput() PolicyTagArrayOutput {
	return o
}

func (o PolicyTagArrayOutput) ToPolicyTagArrayOutputWithContext(ctx context.Context) PolicyTagArrayOutput {
	return o
}

func (o PolicyTagArrayOutput) Index(i pulumi.IntInput) PolicyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyTag {
		return vs[0].([]PolicyTag)[vs[1].(int)]
	}).(PolicyTagOutput)
}

func init() {
	pulumi.RegisterOutputType(PolicyIEMapOutput{})
	pulumi.RegisterOutputType(PolicyIEMapPtrOutput{})
	pulumi.RegisterOutputType(PolicyResourceTagOutput{})
	pulumi.RegisterOutputType(PolicyResourceTagArrayOutput{})
	pulumi.RegisterOutputType(PolicyTagOutput{})
	pulumi.RegisterOutputType(PolicyTagArrayOutput{})
}
