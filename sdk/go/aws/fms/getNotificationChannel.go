// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Designates the IAM role and Amazon Simple Notification Service (SNS) topic that AWS Firewall Manager uses to record SNS logs.
func LookupNotificationChannel(ctx *pulumi.Context, args *LookupNotificationChannelArgs, opts ...pulumi.InvokeOption) (*LookupNotificationChannelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNotificationChannelResult
	err := ctx.Invoke("aws-native:fms:getNotificationChannel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNotificationChannelArgs struct {
	// The Amazon Resource Name (ARN) of the SNS topic that collects notifications from AWS Firewall Manager .
	SnsTopicArn string `pulumi:"snsTopicArn"`
}

type LookupNotificationChannelResult struct {
	// The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record AWS Firewall Manager activity.
	SnsRoleName *string `pulumi:"snsRoleName"`
	// The Amazon Resource Name (ARN) of the SNS topic that collects notifications from AWS Firewall Manager .
	SnsTopicArn *string `pulumi:"snsTopicArn"`
}

func LookupNotificationChannelOutput(ctx *pulumi.Context, args LookupNotificationChannelOutputArgs, opts ...pulumi.InvokeOption) LookupNotificationChannelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNotificationChannelResultOutput, error) {
			args := v.(LookupNotificationChannelArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNotificationChannelResult
			secret, err := ctx.InvokePackageRaw("aws-native:fms:getNotificationChannel", args, &rv, "", opts...)
			if err != nil {
				return LookupNotificationChannelResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNotificationChannelResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNotificationChannelResultOutput), nil
			}
			return output, nil
		}).(LookupNotificationChannelResultOutput)
}

type LookupNotificationChannelOutputArgs struct {
	// The Amazon Resource Name (ARN) of the SNS topic that collects notifications from AWS Firewall Manager .
	SnsTopicArn pulumi.StringInput `pulumi:"snsTopicArn"`
}

func (LookupNotificationChannelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationChannelArgs)(nil)).Elem()
}

type LookupNotificationChannelResultOutput struct{ *pulumi.OutputState }

func (LookupNotificationChannelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationChannelResult)(nil)).Elem()
}

func (o LookupNotificationChannelResultOutput) ToLookupNotificationChannelResultOutput() LookupNotificationChannelResultOutput {
	return o
}

func (o LookupNotificationChannelResultOutput) ToLookupNotificationChannelResultOutputWithContext(ctx context.Context) LookupNotificationChannelResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record AWS Firewall Manager activity.
func (o LookupNotificationChannelResultOutput) SnsRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNotificationChannelResult) *string { return v.SnsRoleName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the SNS topic that collects notifications from AWS Firewall Manager .
func (o LookupNotificationChannelResultOutput) SnsTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNotificationChannelResult) *string { return v.SnsTopicArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNotificationChannelResultOutput{})
}
