// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an AWS Firewall Manager policy.
type Policy struct {
	pulumi.CustomResourceState

	Arn                       pulumi.StringOutput                       `pulumi:"arn"`
	DeleteAllPolicyResources  pulumi.BoolPtrOutput                      `pulumi:"deleteAllPolicyResources"`
	ExcludeMap                PolicyIEMapPtrOutput                      `pulumi:"excludeMap"`
	ExcludeResourceTags       pulumi.BoolOutput                         `pulumi:"excludeResourceTags"`
	IncludeMap                PolicyIEMapPtrOutput                      `pulumi:"includeMap"`
	PolicyName                pulumi.StringOutput                       `pulumi:"policyName"`
	RemediationEnabled        pulumi.BoolOutput                         `pulumi:"remediationEnabled"`
	ResourceTags              PolicyResourceTagArrayOutput              `pulumi:"resourceTags"`
	ResourceType              pulumi.StringOutput                       `pulumi:"resourceType"`
	ResourceTypeList          pulumi.StringArrayOutput                  `pulumi:"resourceTypeList"`
	ResourcesCleanUp          pulumi.BoolPtrOutput                      `pulumi:"resourcesCleanUp"`
	SecurityServicePolicyData SecurityServicePolicyDataPropertiesOutput `pulumi:"securityServicePolicyData"`
	Tags                      PolicyTagArrayOutput                      `pulumi:"tags"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExcludeResourceTags == nil {
		return nil, errors.New("invalid value for required argument 'ExcludeResourceTags'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.RemediationEnabled == nil {
		return nil, errors.New("invalid value for required argument 'RemediationEnabled'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.SecurityServicePolicyData == nil {
		return nil, errors.New("invalid value for required argument 'SecurityServicePolicyData'")
	}
	var resource Policy
	err := ctx.RegisterResource("aws-native:fms:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("aws-native:fms:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
}

type PolicyState struct {
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	DeleteAllPolicyResources  *bool                               `pulumi:"deleteAllPolicyResources"`
	ExcludeMap                *PolicyIEMap                        `pulumi:"excludeMap"`
	ExcludeResourceTags       bool                                `pulumi:"excludeResourceTags"`
	IncludeMap                *PolicyIEMap                        `pulumi:"includeMap"`
	PolicyName                string                              `pulumi:"policyName"`
	RemediationEnabled        bool                                `pulumi:"remediationEnabled"`
	ResourceTags              []PolicyResourceTag                 `pulumi:"resourceTags"`
	ResourceType              string                              `pulumi:"resourceType"`
	ResourceTypeList          []string                            `pulumi:"resourceTypeList"`
	ResourcesCleanUp          *bool                               `pulumi:"resourcesCleanUp"`
	SecurityServicePolicyData SecurityServicePolicyDataProperties `pulumi:"securityServicePolicyData"`
	Tags                      []PolicyTag                         `pulumi:"tags"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	DeleteAllPolicyResources  pulumi.BoolPtrInput
	ExcludeMap                PolicyIEMapPtrInput
	ExcludeResourceTags       pulumi.BoolInput
	IncludeMap                PolicyIEMapPtrInput
	PolicyName                pulumi.StringInput
	RemediationEnabled        pulumi.BoolInput
	ResourceTags              PolicyResourceTagArrayInput
	ResourceType              pulumi.StringInput
	ResourceTypeList          pulumi.StringArrayInput
	ResourcesCleanUp          pulumi.BoolPtrInput
	SecurityServicePolicyData SecurityServicePolicyDataPropertiesInput
	Tags                      PolicyTagArrayInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil))
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil))
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PolicyOutput{})
}
