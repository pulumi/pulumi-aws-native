// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::CodeRepository
func LookupCodeRepository(ctx *pulumi.Context, args *LookupCodeRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupCodeRepositoryResult, error) {
	var rv LookupCodeRepositoryResult
	err := ctx.Invoke("aws-native:sagemaker:getCodeRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCodeRepositoryArgs struct {
	Id string `pulumi:"id"`
}

type LookupCodeRepositoryResult struct {
	GitConfig *CodeRepositoryGitConfig `pulumi:"gitConfig"`
	Id        *string                  `pulumi:"id"`
	Tags      []CodeRepositoryTag      `pulumi:"tags"`
}

func LookupCodeRepositoryOutput(ctx *pulumi.Context, args LookupCodeRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupCodeRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCodeRepositoryResult, error) {
			args := v.(LookupCodeRepositoryArgs)
			r, err := LookupCodeRepository(ctx, &args, opts...)
			return *r, err
		}).(LookupCodeRepositoryResultOutput)
}

type LookupCodeRepositoryOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCodeRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCodeRepositoryArgs)(nil)).Elem()
}

type LookupCodeRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupCodeRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCodeRepositoryResult)(nil)).Elem()
}

func (o LookupCodeRepositoryResultOutput) ToLookupCodeRepositoryResultOutput() LookupCodeRepositoryResultOutput {
	return o
}

func (o LookupCodeRepositoryResultOutput) ToLookupCodeRepositoryResultOutputWithContext(ctx context.Context) LookupCodeRepositoryResultOutput {
	return o
}

func (o LookupCodeRepositoryResultOutput) GitConfig() CodeRepositoryGitConfigPtrOutput {
	return o.ApplyT(func(v LookupCodeRepositoryResult) *CodeRepositoryGitConfig { return v.GitConfig }).(CodeRepositoryGitConfigPtrOutput)
}

func (o LookupCodeRepositoryResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCodeRepositoryResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupCodeRepositoryResultOutput) Tags() CodeRepositoryTagArrayOutput {
	return o.ApplyT(func(v LookupCodeRepositoryResult) []CodeRepositoryTag { return v.Tags }).(CodeRepositoryTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCodeRepositoryResultOutput{})
}
