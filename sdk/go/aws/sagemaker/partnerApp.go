// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::PartnerApp
type PartnerApp struct {
	pulumi.CustomResourceState

	// A collection of settings that specify the maintenance schedule for the PartnerApp.
	ApplicationConfig PartnerAppConfigPtrOutput `pulumi:"applicationConfig"`
	// The Amazon Resource Name (ARN) of the created PartnerApp.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Auth type of PartnerApp.
	AuthType PartnerAppAuthTypeOutput `pulumi:"authType"`
	// The AppServerUrl based on app and account-info.
	BaseUrl pulumi.StringOutput `pulumi:"baseUrl"`
	// The client token for the PartnerApp.
	ClientToken pulumi.StringPtrOutput `pulumi:"clientToken"`
	// Enables IAM Session based Identity for PartnerApp.
	EnableIamSessionBasedIdentity pulumi.BoolPtrOutput `pulumi:"enableIamSessionBasedIdentity"`
	// The execution role for the user.
	ExecutionRoleArn pulumi.StringOutput `pulumi:"executionRoleArn"`
	// The AWS KMS customer managed key used to encrypt the data associated with the PartnerApp.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// A collection of settings that specify the maintenance schedule for the PartnerApp.
	MaintenanceConfig PartnerAppMaintenanceConfigPtrOutput `pulumi:"maintenanceConfig"`
	// A name for the PartnerApp.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of tags to apply to the PartnerApp.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The tier of the PartnerApp.
	Tier pulumi.StringOutput `pulumi:"tier"`
	// The type of PartnerApp.
	Type PartnerAppTypeOutput `pulumi:"type"`
}

// NewPartnerApp registers a new resource with the given unique name, arguments, and options.
func NewPartnerApp(ctx *pulumi.Context,
	name string, args *PartnerAppArgs, opts ...pulumi.ResourceOption) (*PartnerApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	if args.Tier == nil {
		return nil, errors.New("invalid value for required argument 'Tier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"authType",
		"executionRoleArn",
		"kmsKeyId",
		"name",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartnerApp
	err := ctx.RegisterResource("aws-native:sagemaker:PartnerApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartnerApp gets an existing PartnerApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartnerApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnerAppState, opts ...pulumi.ResourceOption) (*PartnerApp, error) {
	var resource PartnerApp
	err := ctx.ReadResource("aws-native:sagemaker:PartnerApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartnerApp resources.
type partnerAppState struct {
}

type PartnerAppState struct {
}

func (PartnerAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerAppState)(nil)).Elem()
}

type partnerAppArgs struct {
	// A collection of settings that specify the maintenance schedule for the PartnerApp.
	ApplicationConfig *PartnerAppConfig `pulumi:"applicationConfig"`
	// The Auth type of PartnerApp.
	AuthType PartnerAppAuthType `pulumi:"authType"`
	// The client token for the PartnerApp.
	ClientToken *string `pulumi:"clientToken"`
	// Enables IAM Session based Identity for PartnerApp.
	EnableIamSessionBasedIdentity *bool `pulumi:"enableIamSessionBasedIdentity"`
	// The execution role for the user.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// The AWS KMS customer managed key used to encrypt the data associated with the PartnerApp.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// A collection of settings that specify the maintenance schedule for the PartnerApp.
	MaintenanceConfig *PartnerAppMaintenanceConfig `pulumi:"maintenanceConfig"`
	// A name for the PartnerApp.
	Name *string `pulumi:"name"`
	// A list of tags to apply to the PartnerApp.
	Tags []aws.Tag `pulumi:"tags"`
	// The tier of the PartnerApp.
	Tier string `pulumi:"tier"`
	// The type of PartnerApp.
	Type PartnerAppType `pulumi:"type"`
}

// The set of arguments for constructing a PartnerApp resource.
type PartnerAppArgs struct {
	// A collection of settings that specify the maintenance schedule for the PartnerApp.
	ApplicationConfig PartnerAppConfigPtrInput
	// The Auth type of PartnerApp.
	AuthType PartnerAppAuthTypeInput
	// The client token for the PartnerApp.
	ClientToken pulumi.StringPtrInput
	// Enables IAM Session based Identity for PartnerApp.
	EnableIamSessionBasedIdentity pulumi.BoolPtrInput
	// The execution role for the user.
	ExecutionRoleArn pulumi.StringInput
	// The AWS KMS customer managed key used to encrypt the data associated with the PartnerApp.
	KmsKeyId pulumi.StringPtrInput
	// A collection of settings that specify the maintenance schedule for the PartnerApp.
	MaintenanceConfig PartnerAppMaintenanceConfigPtrInput
	// A name for the PartnerApp.
	Name pulumi.StringPtrInput
	// A list of tags to apply to the PartnerApp.
	Tags aws.TagArrayInput
	// The tier of the PartnerApp.
	Tier pulumi.StringInput
	// The type of PartnerApp.
	Type PartnerAppTypeInput
}

func (PartnerAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerAppArgs)(nil)).Elem()
}

type PartnerAppInput interface {
	pulumi.Input

	ToPartnerAppOutput() PartnerAppOutput
	ToPartnerAppOutputWithContext(ctx context.Context) PartnerAppOutput
}

func (*PartnerApp) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerApp)(nil)).Elem()
}

func (i *PartnerApp) ToPartnerAppOutput() PartnerAppOutput {
	return i.ToPartnerAppOutputWithContext(context.Background())
}

func (i *PartnerApp) ToPartnerAppOutputWithContext(ctx context.Context) PartnerAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerAppOutput)
}

type PartnerAppOutput struct{ *pulumi.OutputState }

func (PartnerAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerApp)(nil)).Elem()
}

func (o PartnerAppOutput) ToPartnerAppOutput() PartnerAppOutput {
	return o
}

func (o PartnerAppOutput) ToPartnerAppOutputWithContext(ctx context.Context) PartnerAppOutput {
	return o
}

// A collection of settings that specify the maintenance schedule for the PartnerApp.
func (o PartnerAppOutput) ApplicationConfig() PartnerAppConfigPtrOutput {
	return o.ApplyT(func(v *PartnerApp) PartnerAppConfigPtrOutput { return v.ApplicationConfig }).(PartnerAppConfigPtrOutput)
}

// The Amazon Resource Name (ARN) of the created PartnerApp.
func (o PartnerAppOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Auth type of PartnerApp.
func (o PartnerAppOutput) AuthType() PartnerAppAuthTypeOutput {
	return o.ApplyT(func(v *PartnerApp) PartnerAppAuthTypeOutput { return v.AuthType }).(PartnerAppAuthTypeOutput)
}

// The AppServerUrl based on app and account-info.
func (o PartnerAppOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.StringOutput { return v.BaseUrl }).(pulumi.StringOutput)
}

// The client token for the PartnerApp.
func (o PartnerAppOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.StringPtrOutput { return v.ClientToken }).(pulumi.StringPtrOutput)
}

// Enables IAM Session based Identity for PartnerApp.
func (o PartnerAppOutput) EnableIamSessionBasedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.BoolPtrOutput { return v.EnableIamSessionBasedIdentity }).(pulumi.BoolPtrOutput)
}

// The execution role for the user.
func (o PartnerAppOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

// The AWS KMS customer managed key used to encrypt the data associated with the PartnerApp.
func (o PartnerAppOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// A collection of settings that specify the maintenance schedule for the PartnerApp.
func (o PartnerAppOutput) MaintenanceConfig() PartnerAppMaintenanceConfigPtrOutput {
	return o.ApplyT(func(v *PartnerApp) PartnerAppMaintenanceConfigPtrOutput { return v.MaintenanceConfig }).(PartnerAppMaintenanceConfigPtrOutput)
}

// A name for the PartnerApp.
func (o PartnerAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of tags to apply to the PartnerApp.
func (o PartnerAppOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *PartnerApp) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The tier of the PartnerApp.
func (o PartnerAppOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerApp) pulumi.StringOutput { return v.Tier }).(pulumi.StringOutput)
}

// The type of PartnerApp.
func (o PartnerAppOutput) Type() PartnerAppTypeOutput {
	return o.ApplyT(func(v *PartnerApp) PartnerAppTypeOutput { return v.Type }).(PartnerAppTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerAppInput)(nil)).Elem(), &PartnerApp{})
	pulumi.RegisterOutputType(PartnerAppOutput{})
}
