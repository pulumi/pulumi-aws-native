// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::ModelQualityJobDefinition
type ModelQualityJobDefinition struct {
	pulumi.CustomResourceState

	// The time at which the job definition was created.
	CreationTime pulumi.StringOutput    `pulumi:"creationTime"`
	EndpointName pulumi.StringPtrOutput `pulumi:"endpointName"`
	// The Amazon Resource Name (ARN) of job definition.
	JobDefinitionArn pulumi.StringOutput `pulumi:"jobDefinitionArn"`
	// The name of the monitoring job definition.
	JobDefinitionName pulumi.StringPtrOutput `pulumi:"jobDefinitionName"`
	// Identifies the resources to deploy for a monitoring job.
	JobResources ModelQualityJobDefinitionMonitoringResourcesOutput `pulumi:"jobResources"`
	// Container image configuration object for the monitoring job.
	ModelQualityAppSpecification ModelQualityJobDefinitionModelQualityAppSpecificationOutput `pulumi:"modelQualityAppSpecification"`
	// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
	ModelQualityBaselineConfig ModelQualityJobDefinitionModelQualityBaselineConfigPtrOutput `pulumi:"modelQualityBaselineConfig"`
	// The input for the model quality monitoring job. Currently endpoints are supported for input for model quality monitoring jobs.
	ModelQualityJobInput ModelQualityJobDefinitionModelQualityJobInputOutput `pulumi:"modelQualityJobInput"`
	// The output configuration for monitoring jobs.
	ModelQualityJobOutputConfig ModelQualityJobDefinitionMonitoringOutputConfigOutput `pulumi:"modelQualityJobOutputConfig"`
	// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
	NetworkConfig ModelQualityJobDefinitionNetworkConfigPtrOutput `pulumi:"networkConfig"`
	// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
	//
	// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
	//
	// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
	StoppingCondition ModelQualityJobDefinitionStoppingConditionPtrOutput `pulumi:"stoppingCondition"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
}

// NewModelQualityJobDefinition registers a new resource with the given unique name, arguments, and options.
func NewModelQualityJobDefinition(ctx *pulumi.Context,
	name string, args *ModelQualityJobDefinitionArgs, opts ...pulumi.ResourceOption) (*ModelQualityJobDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobResources == nil {
		return nil, errors.New("invalid value for required argument 'JobResources'")
	}
	if args.ModelQualityAppSpecification == nil {
		return nil, errors.New("invalid value for required argument 'ModelQualityAppSpecification'")
	}
	if args.ModelQualityJobInput == nil {
		return nil, errors.New("invalid value for required argument 'ModelQualityJobInput'")
	}
	if args.ModelQualityJobOutputConfig == nil {
		return nil, errors.New("invalid value for required argument 'ModelQualityJobOutputConfig'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"endpointName",
		"jobDefinitionName",
		"jobResources",
		"modelQualityAppSpecification",
		"modelQualityBaselineConfig",
		"modelQualityJobInput",
		"modelQualityJobOutputConfig",
		"networkConfig",
		"roleArn",
		"stoppingCondition",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelQualityJobDefinition
	err := ctx.RegisterResource("aws-native:sagemaker:ModelQualityJobDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelQualityJobDefinition gets an existing ModelQualityJobDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelQualityJobDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelQualityJobDefinitionState, opts ...pulumi.ResourceOption) (*ModelQualityJobDefinition, error) {
	var resource ModelQualityJobDefinition
	err := ctx.ReadResource("aws-native:sagemaker:ModelQualityJobDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelQualityJobDefinition resources.
type modelQualityJobDefinitionState struct {
}

type ModelQualityJobDefinitionState struct {
}

func (ModelQualityJobDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelQualityJobDefinitionState)(nil)).Elem()
}

type modelQualityJobDefinitionArgs struct {
	EndpointName *string `pulumi:"endpointName"`
	// The name of the monitoring job definition.
	JobDefinitionName *string `pulumi:"jobDefinitionName"`
	// Identifies the resources to deploy for a monitoring job.
	JobResources ModelQualityJobDefinitionMonitoringResources `pulumi:"jobResources"`
	// Container image configuration object for the monitoring job.
	ModelQualityAppSpecification ModelQualityJobDefinitionModelQualityAppSpecification `pulumi:"modelQualityAppSpecification"`
	// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
	ModelQualityBaselineConfig *ModelQualityJobDefinitionModelQualityBaselineConfig `pulumi:"modelQualityBaselineConfig"`
	// The input for the model quality monitoring job. Currently endpoints are supported for input for model quality monitoring jobs.
	ModelQualityJobInput ModelQualityJobDefinitionModelQualityJobInput `pulumi:"modelQualityJobInput"`
	// The output configuration for monitoring jobs.
	ModelQualityJobOutputConfig ModelQualityJobDefinitionMonitoringOutputConfig `pulumi:"modelQualityJobOutputConfig"`
	// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
	NetworkConfig *ModelQualityJobDefinitionNetworkConfig `pulumi:"networkConfig"`
	// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
	RoleArn string `pulumi:"roleArn"`
	// Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
	//
	// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
	//
	// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
	StoppingCondition *ModelQualityJobDefinitionStoppingCondition `pulumi:"stoppingCondition"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a ModelQualityJobDefinition resource.
type ModelQualityJobDefinitionArgs struct {
	EndpointName pulumi.StringPtrInput
	// The name of the monitoring job definition.
	JobDefinitionName pulumi.StringPtrInput
	// Identifies the resources to deploy for a monitoring job.
	JobResources ModelQualityJobDefinitionMonitoringResourcesInput
	// Container image configuration object for the monitoring job.
	ModelQualityAppSpecification ModelQualityJobDefinitionModelQualityAppSpecificationInput
	// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
	ModelQualityBaselineConfig ModelQualityJobDefinitionModelQualityBaselineConfigPtrInput
	// The input for the model quality monitoring job. Currently endpoints are supported for input for model quality monitoring jobs.
	ModelQualityJobInput ModelQualityJobDefinitionModelQualityJobInputInput
	// The output configuration for monitoring jobs.
	ModelQualityJobOutputConfig ModelQualityJobDefinitionMonitoringOutputConfigInput
	// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
	NetworkConfig ModelQualityJobDefinitionNetworkConfigPtrInput
	// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
	RoleArn pulumi.StringInput
	// Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
	//
	// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
	//
	// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
	StoppingCondition ModelQualityJobDefinitionStoppingConditionPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.CreateOnlyTagArrayInput
}

func (ModelQualityJobDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelQualityJobDefinitionArgs)(nil)).Elem()
}

type ModelQualityJobDefinitionInput interface {
	pulumi.Input

	ToModelQualityJobDefinitionOutput() ModelQualityJobDefinitionOutput
	ToModelQualityJobDefinitionOutputWithContext(ctx context.Context) ModelQualityJobDefinitionOutput
}

func (*ModelQualityJobDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelQualityJobDefinition)(nil)).Elem()
}

func (i *ModelQualityJobDefinition) ToModelQualityJobDefinitionOutput() ModelQualityJobDefinitionOutput {
	return i.ToModelQualityJobDefinitionOutputWithContext(context.Background())
}

func (i *ModelQualityJobDefinition) ToModelQualityJobDefinitionOutputWithContext(ctx context.Context) ModelQualityJobDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelQualityJobDefinitionOutput)
}

type ModelQualityJobDefinitionOutput struct{ *pulumi.OutputState }

func (ModelQualityJobDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelQualityJobDefinition)(nil)).Elem()
}

func (o ModelQualityJobDefinitionOutput) ToModelQualityJobDefinitionOutput() ModelQualityJobDefinitionOutput {
	return o
}

func (o ModelQualityJobDefinitionOutput) ToModelQualityJobDefinitionOutputWithContext(ctx context.Context) ModelQualityJobDefinitionOutput {
	return o
}

// The time at which the job definition was created.
func (o ModelQualityJobDefinitionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o ModelQualityJobDefinitionOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) pulumi.StringPtrOutput { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of job definition.
func (o ModelQualityJobDefinitionOutput) JobDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) pulumi.StringOutput { return v.JobDefinitionArn }).(pulumi.StringOutput)
}

// The name of the monitoring job definition.
func (o ModelQualityJobDefinitionOutput) JobDefinitionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) pulumi.StringPtrOutput { return v.JobDefinitionName }).(pulumi.StringPtrOutput)
}

// Identifies the resources to deploy for a monitoring job.
func (o ModelQualityJobDefinitionOutput) JobResources() ModelQualityJobDefinitionMonitoringResourcesOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) ModelQualityJobDefinitionMonitoringResourcesOutput {
		return v.JobResources
	}).(ModelQualityJobDefinitionMonitoringResourcesOutput)
}

// Container image configuration object for the monitoring job.
func (o ModelQualityJobDefinitionOutput) ModelQualityAppSpecification() ModelQualityJobDefinitionModelQualityAppSpecificationOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) ModelQualityJobDefinitionModelQualityAppSpecificationOutput {
		return v.ModelQualityAppSpecification
	}).(ModelQualityJobDefinitionModelQualityAppSpecificationOutput)
}

// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
func (o ModelQualityJobDefinitionOutput) ModelQualityBaselineConfig() ModelQualityJobDefinitionModelQualityBaselineConfigPtrOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) ModelQualityJobDefinitionModelQualityBaselineConfigPtrOutput {
		return v.ModelQualityBaselineConfig
	}).(ModelQualityJobDefinitionModelQualityBaselineConfigPtrOutput)
}

// The input for the model quality monitoring job. Currently endpoints are supported for input for model quality monitoring jobs.
func (o ModelQualityJobDefinitionOutput) ModelQualityJobInput() ModelQualityJobDefinitionModelQualityJobInputOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) ModelQualityJobDefinitionModelQualityJobInputOutput {
		return v.ModelQualityJobInput
	}).(ModelQualityJobDefinitionModelQualityJobInputOutput)
}

// The output configuration for monitoring jobs.
func (o ModelQualityJobDefinitionOutput) ModelQualityJobOutputConfig() ModelQualityJobDefinitionMonitoringOutputConfigOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) ModelQualityJobDefinitionMonitoringOutputConfigOutput {
		return v.ModelQualityJobOutputConfig
	}).(ModelQualityJobDefinitionMonitoringOutputConfigOutput)
}

// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
func (o ModelQualityJobDefinitionOutput) NetworkConfig() ModelQualityJobDefinitionNetworkConfigPtrOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) ModelQualityJobDefinitionNetworkConfigPtrOutput {
		return v.NetworkConfig
	}).(ModelQualityJobDefinitionNetworkConfigPtrOutput)
}

// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
func (o ModelQualityJobDefinitionOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
//
// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
//
// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
//
// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
func (o ModelQualityJobDefinitionOutput) StoppingCondition() ModelQualityJobDefinitionStoppingConditionPtrOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) ModelQualityJobDefinitionStoppingConditionPtrOutput {
		return v.StoppingCondition
	}).(ModelQualityJobDefinitionStoppingConditionPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ModelQualityJobDefinitionOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *ModelQualityJobDefinition) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelQualityJobDefinitionInput)(nil)).Elem(), &ModelQualityJobDefinition{})
	pulumi.RegisterOutputType(ModelQualityJobDefinitionOutput{})
}
