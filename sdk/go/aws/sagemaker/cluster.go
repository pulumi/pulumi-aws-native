// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::Cluster
type Cluster struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the HyperPod Cluster.
	ClusterArn pulumi.StringOutput `pulumi:"clusterArn"`
	// The name of the HyperPod Cluster.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// The status of the HyperPod Cluster.
	ClusterStatus ClusterStatusOutput `pulumi:"clusterStatus"`
	// The time at which the HyperPod cluster was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The failure message of the HyperPod Cluster.
	FailureMessage pulumi.StringOutput             `pulumi:"failureMessage"`
	InstanceGroups ClusterInstanceGroupArrayOutput `pulumi:"instanceGroups"`
	// If node auto-recovery is set to true, faulty nodes will be replaced or rebooted when a failure is detected. If set to false, nodes will be labelled when a fault is detected.
	NodeRecovery ClusterNodeRecoveryPtrOutput `pulumi:"nodeRecovery"`
	Orchestrator ClusterOrchestratorPtrOutput `pulumi:"orchestrator"`
	// Custom tags for managing the SageMaker HyperPod cluster as an AWS resource. You can add tags to your cluster in the same way you add them in other AWS services that support tagging.
	Tags      aws.TagArrayOutput        `pulumi:"tags"`
	VpcConfig ClusterVpcConfigPtrOutput `pulumi:"vpcConfig"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceGroups == nil {
		return nil, errors.New("invalid value for required argument 'InstanceGroups'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterName",
		"instanceGroups[*].executionRole",
		"instanceGroups[*].instanceGroupName",
		"instanceGroups[*].instanceType",
		"instanceGroups[*].threadsPerCore",
		"orchestrator",
		"vpcConfig",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws-native:sagemaker:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:sagemaker:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The name of the HyperPod Cluster.
	ClusterName    *string                `pulumi:"clusterName"`
	InstanceGroups []ClusterInstanceGroup `pulumi:"instanceGroups"`
	// If node auto-recovery is set to true, faulty nodes will be replaced or rebooted when a failure is detected. If set to false, nodes will be labelled when a fault is detected.
	NodeRecovery *ClusterNodeRecovery `pulumi:"nodeRecovery"`
	Orchestrator *ClusterOrchestrator `pulumi:"orchestrator"`
	// Custom tags for managing the SageMaker HyperPod cluster as an AWS resource. You can add tags to your cluster in the same way you add them in other AWS services that support tagging.
	Tags      []aws.Tag         `pulumi:"tags"`
	VpcConfig *ClusterVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The name of the HyperPod Cluster.
	ClusterName    pulumi.StringPtrInput
	InstanceGroups ClusterInstanceGroupArrayInput
	// If node auto-recovery is set to true, faulty nodes will be replaced or rebooted when a failure is detected. If set to false, nodes will be labelled when a fault is detected.
	NodeRecovery ClusterNodeRecoveryPtrInput
	Orchestrator ClusterOrchestratorPtrInput
	// Custom tags for managing the SageMaker HyperPod cluster as an AWS resource. You can add tags to your cluster in the same way you add them in other AWS services that support tagging.
	Tags      aws.TagArrayInput
	VpcConfig ClusterVpcConfigPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The Amazon Resource Name (ARN) of the HyperPod Cluster.
func (o ClusterOutput) ClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterArn }).(pulumi.StringOutput)
}

// The name of the HyperPod Cluster.
func (o ClusterOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// The status of the HyperPod Cluster.
func (o ClusterOutput) ClusterStatus() ClusterStatusOutput {
	return o.ApplyT(func(v *Cluster) ClusterStatusOutput { return v.ClusterStatus }).(ClusterStatusOutput)
}

// The time at which the HyperPod cluster was created.
func (o ClusterOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The failure message of the HyperPod Cluster.
func (o ClusterOutput) FailureMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.FailureMessage }).(pulumi.StringOutput)
}

func (o ClusterOutput) InstanceGroups() ClusterInstanceGroupArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterInstanceGroupArrayOutput { return v.InstanceGroups }).(ClusterInstanceGroupArrayOutput)
}

// If node auto-recovery is set to true, faulty nodes will be replaced or rebooted when a failure is detected. If set to false, nodes will be labelled when a fault is detected.
func (o ClusterOutput) NodeRecovery() ClusterNodeRecoveryPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeRecoveryPtrOutput { return v.NodeRecovery }).(ClusterNodeRecoveryPtrOutput)
}

func (o ClusterOutput) Orchestrator() ClusterOrchestratorPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterOrchestratorPtrOutput { return v.Orchestrator }).(ClusterOrchestratorPtrOutput)
}

// Custom tags for managing the SageMaker HyperPod cluster as an AWS resource. You can add tags to your cluster in the same way you add them in other AWS services that support tagging.
func (o ClusterOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Cluster) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o ClusterOutput) VpcConfig() ClusterVpcConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterVpcConfigPtrOutput { return v.VpcConfig }).(ClusterVpcConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
