// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::FeatureGroup
func LookupFeatureGroup(ctx *pulumi.Context, args *LookupFeatureGroupArgs, opts ...pulumi.InvokeOption) (*LookupFeatureGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFeatureGroupResult
	err := ctx.Invoke("aws-native:sagemaker:getFeatureGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFeatureGroupArgs struct {
	// The Name of the FeatureGroup.
	FeatureGroupName string `pulumi:"featureGroupName"`
}

type LookupFeatureGroupResult struct {
	// A timestamp of FeatureGroup creation time.
	CreationTime *string `pulumi:"creationTime"`
	// An Array of Feature Definition
	FeatureDefinitions []FeatureGroupFeatureDefinition `pulumi:"featureDefinitions"`
	// The status of the feature group.
	FeatureGroupStatus *string `pulumi:"featureGroupStatus"`
	// The configuration of an `OnlineStore` .
	OnlineStoreConfig *OnlineStoreConfigProperties `pulumi:"onlineStoreConfig"`
	// Used to set feature group throughput configuration. There are two modes: `ON_DEMAND` and `PROVISIONED` . With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.
	//
	// Note: `PROVISIONED` throughput mode is supported only for feature groups that are offline-only, or use the [`Standard`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
	ThroughputConfig *FeatureGroupThroughputConfig `pulumi:"throughputConfig"`
}

func LookupFeatureGroupOutput(ctx *pulumi.Context, args LookupFeatureGroupOutputArgs, opts ...pulumi.InvokeOption) LookupFeatureGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFeatureGroupResultOutput, error) {
			args := v.(LookupFeatureGroupArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupFeatureGroupResult
			secret, err := ctx.InvokePackageRaw("aws-native:sagemaker:getFeatureGroup", args, &rv, "", opts...)
			if err != nil {
				return LookupFeatureGroupResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupFeatureGroupResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupFeatureGroupResultOutput), nil
			}
			return output, nil
		}).(LookupFeatureGroupResultOutput)
}

type LookupFeatureGroupOutputArgs struct {
	// The Name of the FeatureGroup.
	FeatureGroupName pulumi.StringInput `pulumi:"featureGroupName"`
}

func (LookupFeatureGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureGroupArgs)(nil)).Elem()
}

type LookupFeatureGroupResultOutput struct{ *pulumi.OutputState }

func (LookupFeatureGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureGroupResult)(nil)).Elem()
}

func (o LookupFeatureGroupResultOutput) ToLookupFeatureGroupResultOutput() LookupFeatureGroupResultOutput {
	return o
}

func (o LookupFeatureGroupResultOutput) ToLookupFeatureGroupResultOutputWithContext(ctx context.Context) LookupFeatureGroupResultOutput {
	return o
}

// A timestamp of FeatureGroup creation time.
func (o LookupFeatureGroupResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFeatureGroupResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// An Array of Feature Definition
func (o LookupFeatureGroupResultOutput) FeatureDefinitions() FeatureGroupFeatureDefinitionArrayOutput {
	return o.ApplyT(func(v LookupFeatureGroupResult) []FeatureGroupFeatureDefinition { return v.FeatureDefinitions }).(FeatureGroupFeatureDefinitionArrayOutput)
}

// The status of the feature group.
func (o LookupFeatureGroupResultOutput) FeatureGroupStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFeatureGroupResult) *string { return v.FeatureGroupStatus }).(pulumi.StringPtrOutput)
}

// The configuration of an `OnlineStore` .
func (o LookupFeatureGroupResultOutput) OnlineStoreConfig() OnlineStoreConfigPropertiesPtrOutput {
	return o.ApplyT(func(v LookupFeatureGroupResult) *OnlineStoreConfigProperties { return v.OnlineStoreConfig }).(OnlineStoreConfigPropertiesPtrOutput)
}

// Used to set feature group throughput configuration. There are two modes: `ON_DEMAND` and `PROVISIONED` . With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.
//
// Note: `PROVISIONED` throughput mode is supported only for feature groups that are offline-only, or use the [`Standard`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
func (o LookupFeatureGroupResultOutput) ThroughputConfig() FeatureGroupThroughputConfigPtrOutput {
	return o.ApplyT(func(v LookupFeatureGroupResult) *FeatureGroupThroughputConfig { return v.ThroughputConfig }).(FeatureGroupThroughputConfigPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFeatureGroupResultOutput{})
}
