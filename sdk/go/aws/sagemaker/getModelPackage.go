// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::ModelPackage
func LookupModelPackage(ctx *pulumi.Context, args *LookupModelPackageArgs, opts ...pulumi.InvokeOption) (*LookupModelPackageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupModelPackageResult
	err := ctx.Invoke("aws-native:sagemaker:getModelPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupModelPackageArgs struct {
	// The Amazon Resource Name (ARN) of the model package.
	ModelPackageArn string `pulumi:"modelPackageArn"`
}

type LookupModelPackageResult struct {
	// An array of additional Inference Specification objects.
	AdditionalInferenceSpecifications []ModelPackageAdditionalInferenceSpecificationDefinition `pulumi:"additionalInferenceSpecifications"`
	// A description provided when the model approval is set.
	ApprovalDescription *string `pulumi:"approvalDescription"`
	// Whether the model package is to be certified to be listed on AWS Marketplace. For information about listing model packages on AWS Marketplace, see [List Your Algorithm or Model Package on AWS Marketplace](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html) .
	CertifyForMarketplace *bool `pulumi:"certifyForMarketplace"`
	// The time that the model package was created.
	CreationTime *string `pulumi:"creationTime"`
	// The metadata properties for the model package.
	CustomerMetadataProperties *ModelPackageCustomerMetadataProperties `pulumi:"customerMetadataProperties"`
	// The last time the model package was modified.
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// The approval status of the model. This can be one of the following values.
	//
	// - `APPROVED` - The model is approved
	// - `REJECTED` - The model is rejected.
	// - `PENDING_MANUAL_APPROVAL` - The model is waiting for manual approval.
	ModelApprovalStatus *ModelPackageModelApprovalStatus `pulumi:"modelApprovalStatus"`
	// An Amazon SageMaker Model Card.
	ModelCard *ModelPackageModelCard `pulumi:"modelCard"`
	// The Amazon Resource Name (ARN) of the model package.
	ModelPackageArn *string `pulumi:"modelPackageArn"`
	// The name of the model.
	ModelPackageName *string `pulumi:"modelPackageName"`
	// The status of the model package. This can be one of the following values.
	//
	// - `PENDING` - The model package creation is pending.
	// - `IN_PROGRESS` - The model package is in the process of being created.
	// - `COMPLETED` - The model package was successfully created.
	// - `FAILED` - The model package creation failed.
	// - `DELETING` - The model package is in the process of being deleted.
	ModelPackageStatus *ModelPackageStatus `pulumi:"modelPackageStatus"`
	// Specifies the validation and image scan statuses of the model package.
	ModelPackageStatusDetails *ModelPackageStatusDetails `pulumi:"modelPackageStatusDetails"`
	// The version number of a versioned model.
	ModelPackageVersion *int `pulumi:"modelPackageVersion"`
	// Indicates if you want to skip model validation.
	SkipModelValidation *ModelPackageSkipModelValidation `pulumi:"skipModelValidation"`
	// The URI of the source for the model package.
	SourceUri *string `pulumi:"sourceUri"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupModelPackageOutput(ctx *pulumi.Context, args LookupModelPackageOutputArgs, opts ...pulumi.InvokeOption) LookupModelPackageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupModelPackageResultOutput, error) {
			args := v.(LookupModelPackageArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupModelPackageResult
			secret, err := ctx.InvokePackageRaw("aws-native:sagemaker:getModelPackage", args, &rv, "", opts...)
			if err != nil {
				return LookupModelPackageResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupModelPackageResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupModelPackageResultOutput), nil
			}
			return output, nil
		}).(LookupModelPackageResultOutput)
}

type LookupModelPackageOutputArgs struct {
	// The Amazon Resource Name (ARN) of the model package.
	ModelPackageArn pulumi.StringInput `pulumi:"modelPackageArn"`
}

func (LookupModelPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelPackageArgs)(nil)).Elem()
}

type LookupModelPackageResultOutput struct{ *pulumi.OutputState }

func (LookupModelPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelPackageResult)(nil)).Elem()
}

func (o LookupModelPackageResultOutput) ToLookupModelPackageResultOutput() LookupModelPackageResultOutput {
	return o
}

func (o LookupModelPackageResultOutput) ToLookupModelPackageResultOutputWithContext(ctx context.Context) LookupModelPackageResultOutput {
	return o
}

// An array of additional Inference Specification objects.
func (o LookupModelPackageResultOutput) AdditionalInferenceSpecifications() ModelPackageAdditionalInferenceSpecificationDefinitionArrayOutput {
	return o.ApplyT(func(v LookupModelPackageResult) []ModelPackageAdditionalInferenceSpecificationDefinition {
		return v.AdditionalInferenceSpecifications
	}).(ModelPackageAdditionalInferenceSpecificationDefinitionArrayOutput)
}

// A description provided when the model approval is set.
func (o LookupModelPackageResultOutput) ApprovalDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *string { return v.ApprovalDescription }).(pulumi.StringPtrOutput)
}

// Whether the model package is to be certified to be listed on AWS Marketplace. For information about listing model packages on AWS Marketplace, see [List Your Algorithm or Model Package on AWS Marketplace](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html) .
func (o LookupModelPackageResultOutput) CertifyForMarketplace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *bool { return v.CertifyForMarketplace }).(pulumi.BoolPtrOutput)
}

// The time that the model package was created.
func (o LookupModelPackageResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// The metadata properties for the model package.
func (o LookupModelPackageResultOutput) CustomerMetadataProperties() ModelPackageCustomerMetadataPropertiesPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *ModelPackageCustomerMetadataProperties {
		return v.CustomerMetadataProperties
	}).(ModelPackageCustomerMetadataPropertiesPtrOutput)
}

// The last time the model package was modified.
func (o LookupModelPackageResultOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *string { return v.LastModifiedTime }).(pulumi.StringPtrOutput)
}

// The approval status of the model. This can be one of the following values.
//
// - `APPROVED` - The model is approved
// - `REJECTED` - The model is rejected.
// - `PENDING_MANUAL_APPROVAL` - The model is waiting for manual approval.
func (o LookupModelPackageResultOutput) ModelApprovalStatus() ModelPackageModelApprovalStatusPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *ModelPackageModelApprovalStatus { return v.ModelApprovalStatus }).(ModelPackageModelApprovalStatusPtrOutput)
}

// An Amazon SageMaker Model Card.
func (o LookupModelPackageResultOutput) ModelCard() ModelPackageModelCardPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *ModelPackageModelCard { return v.ModelCard }).(ModelPackageModelCardPtrOutput)
}

// The Amazon Resource Name (ARN) of the model package.
func (o LookupModelPackageResultOutput) ModelPackageArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *string { return v.ModelPackageArn }).(pulumi.StringPtrOutput)
}

// The name of the model.
func (o LookupModelPackageResultOutput) ModelPackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *string { return v.ModelPackageName }).(pulumi.StringPtrOutput)
}

// The status of the model package. This can be one of the following values.
//
// - `PENDING` - The model package creation is pending.
// - `IN_PROGRESS` - The model package is in the process of being created.
// - `COMPLETED` - The model package was successfully created.
// - `FAILED` - The model package creation failed.
// - `DELETING` - The model package is in the process of being deleted.
func (o LookupModelPackageResultOutput) ModelPackageStatus() ModelPackageStatusPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *ModelPackageStatus { return v.ModelPackageStatus }).(ModelPackageStatusPtrOutput)
}

// Specifies the validation and image scan statuses of the model package.
func (o LookupModelPackageResultOutput) ModelPackageStatusDetails() ModelPackageStatusDetailsPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *ModelPackageStatusDetails { return v.ModelPackageStatusDetails }).(ModelPackageStatusDetailsPtrOutput)
}

// The version number of a versioned model.
func (o LookupModelPackageResultOutput) ModelPackageVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *int { return v.ModelPackageVersion }).(pulumi.IntPtrOutput)
}

// Indicates if you want to skip model validation.
func (o LookupModelPackageResultOutput) SkipModelValidation() ModelPackageSkipModelValidationPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *ModelPackageSkipModelValidation { return v.SkipModelValidation }).(ModelPackageSkipModelValidationPtrOutput)
}

// The URI of the source for the model package.
func (o LookupModelPackageResultOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupModelPackageResult) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupModelPackageResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupModelPackageResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupModelPackageResultOutput{})
}
