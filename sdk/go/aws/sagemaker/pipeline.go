// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::Pipeline
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/sagemaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sagemaker.NewPipeline(ctx, "myPipeline", &sagemaker.PipelineArgs{
//				PipelineName:        pulumi.String("<pipeline-name>"),
//				PipelineDisplayName: pulumi.String("<pipeline-display-name>"),
//				PipelineDescription: pulumi.String("<pipeline-description>"),
//				PipelineDefinition: pulumi.Any{
//					PipelineDefinitionS3Location: &sagemaker.PipelineS3LocationArgs{
//						Bucket: pulumi.String("<S3-bucket-location>"),
//						Key:    pulumi.String("<S3-bucket-key>"),
//					},
//				},
//				RoleArn: pulumi.String("arn:aws:iam::<account-id>:root"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/sagemaker"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sagemaker.NewPipeline(ctx, "myPipeline", &sagemaker.PipelineArgs{
//				PipelineName:        pulumi.String("<pipeline-name>"),
//				PipelineDisplayName: pulumi.String("<pipeline-display-name>"),
//				PipelineDescription: pulumi.String("<pipeline-description>"),
//				PipelineDefinition: pulumi.Any{
//					PipelineDefinitionBody: pulumi.String("{\"Version\":\"2020-12-01\",\"Parameters\":[{\"Name\":\"InputDataSource\",\"DefaultValue\":\"\"},{\"Name\":\"InstanceCount\",\"Type\":\"Integer\",\"DefaultValue\":1}],\"Steps\":[{\"Name\":\"Training1\",\"Type\":\"Training\",\"Arguments\":{\"InputDataConfig\":[{\"DataSource\":{\"S3DataSource\":{\"S3Uri\":{\"Get\":\"Parameters.InputDataSource\"}}}}],\"OutputDataConfig\":{\"S3OutputPath\":\"s3://my-s3-bucket/\"},\"ResourceConfig\":{\"InstanceType\":\"ml.m5.large\",\"InstanceCount\":{\"Get\":\"Parameters.InstanceCount\"},\"VolumeSizeInGB\":1024}}}]}"),
//				},
//				RoleArn: pulumi.String("arn:aws:iam::<account-id>:root"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Pipeline struct {
	pulumi.CustomResourceState

	// The parallelism configuration applied to the pipeline.
	ParallelismConfiguration ParallelismConfigurationPropertiesPtrOutput `pulumi:"parallelismConfiguration"`
	// The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.
	PipelineDefinition pulumi.AnyOutput `pulumi:"pipelineDefinition"`
	// The description of the Pipeline.
	PipelineDescription pulumi.StringPtrOutput `pulumi:"pipelineDescription"`
	// The display name of the Pipeline.
	PipelineDisplayName pulumi.StringPtrOutput `pulumi:"pipelineDisplayName"`
	// The name of the Pipeline.
	PipelineName pulumi.StringOutput `pulumi:"pipelineName"`
	// Role Arn
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// A tag object that consists of a key and an optional value, used to manage metadata for SageMaker AWS resources.
	//
	// You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see [AddTags](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html) .
	//
	// For more information on adding metadata to your AWS resources with tagging, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) . For advice on best practices for managing AWS resources with tagging, see [Tagging Best Practices: Implement an Effective AWS Resource Tagging Strategy](https://docs.aws.amazon.com/https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf) .
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineDefinition == nil {
		return nil, errors.New("invalid value for required argument 'PipelineDefinition'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"pipelineName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("aws-native:sagemaker:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws-native:sagemaker:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
}

type PipelineState struct {
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// The parallelism configuration applied to the pipeline.
	ParallelismConfiguration *ParallelismConfigurationProperties `pulumi:"parallelismConfiguration"`
	// The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.
	PipelineDefinition interface{} `pulumi:"pipelineDefinition"`
	// The description of the Pipeline.
	PipelineDescription *string `pulumi:"pipelineDescription"`
	// The display name of the Pipeline.
	PipelineDisplayName *string `pulumi:"pipelineDisplayName"`
	// The name of the Pipeline.
	PipelineName *string `pulumi:"pipelineName"`
	// Role Arn
	RoleArn string `pulumi:"roleArn"`
	// A tag object that consists of a key and an optional value, used to manage metadata for SageMaker AWS resources.
	//
	// You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see [AddTags](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html) .
	//
	// For more information on adding metadata to your AWS resources with tagging, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) . For advice on best practices for managing AWS resources with tagging, see [Tagging Best Practices: Implement an Effective AWS Resource Tagging Strategy](https://docs.aws.amazon.com/https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf) .
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// The parallelism configuration applied to the pipeline.
	ParallelismConfiguration ParallelismConfigurationPropertiesPtrInput
	// The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.
	PipelineDefinition pulumi.Input
	// The description of the Pipeline.
	PipelineDescription pulumi.StringPtrInput
	// The display name of the Pipeline.
	PipelineDisplayName pulumi.StringPtrInput
	// The name of the Pipeline.
	PipelineName pulumi.StringPtrInput
	// Role Arn
	RoleArn pulumi.StringInput
	// A tag object that consists of a key and an optional value, used to manage metadata for SageMaker AWS resources.
	//
	// You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see [AddTags](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html) .
	//
	// For more information on adding metadata to your AWS resources with tagging, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) . For advice on best practices for managing AWS resources with tagging, see [Tagging Best Practices: Implement an Effective AWS Resource Tagging Strategy](https://docs.aws.amazon.com/https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf) .
	Tags aws.TagArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// The parallelism configuration applied to the pipeline.
func (o PipelineOutput) ParallelismConfiguration() ParallelismConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *Pipeline) ParallelismConfigurationPropertiesPtrOutput { return v.ParallelismConfiguration }).(ParallelismConfigurationPropertiesPtrOutput)
}

// The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.
func (o PipelineOutput) PipelineDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.AnyOutput { return v.PipelineDefinition }).(pulumi.AnyOutput)
}

// The description of the Pipeline.
func (o PipelineOutput) PipelineDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.PipelineDescription }).(pulumi.StringPtrOutput)
}

// The display name of the Pipeline.
func (o PipelineOutput) PipelineDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.PipelineDisplayName }).(pulumi.StringPtrOutput)
}

// The name of the Pipeline.
func (o PipelineOutput) PipelineName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.PipelineName }).(pulumi.StringOutput)
}

// Role Arn
func (o PipelineOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// A tag object that consists of a key and an optional value, used to manage metadata for SageMaker AWS resources.
//
// You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see [AddTags](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html) .
//
// For more information on adding metadata to your AWS resources with tagging, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) . For advice on best practices for managing AWS resources with tagging, see [Tagging Best Practices: Implement an Effective AWS Resource Tagging Strategy](https://docs.aws.amazon.com/https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf) .
func (o PipelineOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Pipeline) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterOutputType(PipelineOutput{})
}
