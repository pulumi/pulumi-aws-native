// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::Pipeline
type Pipeline struct {
	pulumi.CustomResourceState

	ParallelismConfiguration ParallelismConfigurationPropertiesPtrOutput `pulumi:"parallelismConfiguration"`
	PipelineDefinition       pulumi.AnyOutput                            `pulumi:"pipelineDefinition"`
	// The description of the Pipeline.
	PipelineDescription pulumi.StringPtrOutput `pulumi:"pipelineDescription"`
	// The display name of the Pipeline.
	PipelineDisplayName pulumi.StringPtrOutput `pulumi:"pipelineDisplayName"`
	// The name of the Pipeline.
	PipelineName pulumi.StringOutput `pulumi:"pipelineName"`
	// Role Arn
	RoleArn pulumi.StringOutput    `pulumi:"roleArn"`
	Tags    PipelineTagArrayOutput `pulumi:"tags"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineDefinition == nil {
		return nil, errors.New("invalid value for required argument 'PipelineDefinition'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource Pipeline
	err := ctx.RegisterResource("aws-native:sagemaker:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws-native:sagemaker:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
}

type PipelineState struct {
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	ParallelismConfiguration *ParallelismConfigurationProperties `pulumi:"parallelismConfiguration"`
	PipelineDefinition       interface{}                         `pulumi:"pipelineDefinition"`
	// The description of the Pipeline.
	PipelineDescription *string `pulumi:"pipelineDescription"`
	// The display name of the Pipeline.
	PipelineDisplayName *string `pulumi:"pipelineDisplayName"`
	// The name of the Pipeline.
	PipelineName *string `pulumi:"pipelineName"`
	// Role Arn
	RoleArn string        `pulumi:"roleArn"`
	Tags    []PipelineTag `pulumi:"tags"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	ParallelismConfiguration ParallelismConfigurationPropertiesPtrInput
	PipelineDefinition       pulumi.Input
	// The description of the Pipeline.
	PipelineDescription pulumi.StringPtrInput
	// The display name of the Pipeline.
	PipelineDisplayName pulumi.StringPtrInput
	// The name of the Pipeline.
	PipelineName pulumi.StringPtrInput
	// Role Arn
	RoleArn pulumi.StringInput
	Tags    PipelineTagArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil))
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil))
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterOutputType(PipelineOutput{})
}
