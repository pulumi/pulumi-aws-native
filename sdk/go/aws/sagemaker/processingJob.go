// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::ProcessingJob
type ProcessingJob struct {
	pulumi.CustomResourceState

	// Configuration to run a processing job in a specified container image.
	AppSpecification ProcessingJobAppSpecificationOutput `pulumi:"appSpecification"`
	// The ARN of an AutoML job associated with this processing job.
	AutoMlJobArn pulumi.StringOutput `pulumi:"autoMlJobArn"`
	// The time at which the processing job was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Sets the environment variables in the Docker container.
	Environment ProcessingJobEnvironmentPtrOutput `pulumi:"environment"`
	// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
	ExitMessage pulumi.StringOutput `pulumi:"exitMessage"`
	// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
	//
	// - [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
	// - [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
	// - [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
	ExperimentConfig ProcessingJobExperimentConfigPtrOutput `pulumi:"experimentConfig"`
	// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
	FailureReason pulumi.StringOutput `pulumi:"failureReason"`
	// The time at which the processing job was last modified.
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// The ARN of a monitoring schedule for an endpoint associated with this processing job.
	MonitoringScheduleArn pulumi.StringOutput `pulumi:"monitoringScheduleArn"`
	// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
	NetworkConfig ProcessingJobNetworkConfigPtrOutput `pulumi:"networkConfig"`
	// The time at which the processing job completed.
	ProcessingEndTime pulumi.StringOutput `pulumi:"processingEndTime"`
	// An array of inputs configuring the data to download into the processing container.
	ProcessingInputs ProcessingJobProcessingInputsObjectArrayOutput `pulumi:"processingInputs"`
	// The Amazon Resource Name (ARN) of the processing job.
	ProcessingJobArn pulumi.StringOutput `pulumi:"processingJobArn"`
	// The name of the processing job. The name must be unique within an AWS Region in the AWS account.
	ProcessingJobName pulumi.StringPtrOutput `pulumi:"processingJobName"`
	// Provides the status of a processing job.
	ProcessingJobStatus ProcessingJobStatusOutput `pulumi:"processingJobStatus"`
	// Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
	ProcessingOutputConfig ProcessingJobProcessingOutputConfigPtrOutput `pulumi:"processingOutputConfig"`
	// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
	ProcessingResources ProcessingJobProcessingResourcesOutput `pulumi:"processingResources"`
	// The time at which the processing job started.
	ProcessingStartTime pulumi.StringOutput `pulumi:"processingStartTime"`
	// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.
	//
	// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
	//
	// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
	StoppingCondition ProcessingJobStoppingConditionPtrOutput `pulumi:"stoppingCondition"`
	// (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
	// The ARN of a training job associated with this processing job
	TrainingJobArn pulumi.StringOutput `pulumi:"trainingJobArn"`
}

// NewProcessingJob registers a new resource with the given unique name, arguments, and options.
func NewProcessingJob(ctx *pulumi.Context,
	name string, args *ProcessingJobArgs, opts ...pulumi.ResourceOption) (*ProcessingJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppSpecification == nil {
		return nil, errors.New("invalid value for required argument 'AppSpecification'")
	}
	if args.ProcessingResources == nil {
		return nil, errors.New("invalid value for required argument 'ProcessingResources'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"appSpecification",
		"environment",
		"experimentConfig",
		"networkConfig",
		"processingInputs[*]",
		"processingJobName",
		"processingOutputConfig",
		"processingResources",
		"roleArn",
		"stoppingCondition",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcessingJob
	err := ctx.RegisterResource("aws-native:sagemaker:ProcessingJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcessingJob gets an existing ProcessingJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcessingJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcessingJobState, opts ...pulumi.ResourceOption) (*ProcessingJob, error) {
	var resource ProcessingJob
	err := ctx.ReadResource("aws-native:sagemaker:ProcessingJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcessingJob resources.
type processingJobState struct {
}

type ProcessingJobState struct {
}

func (ProcessingJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*processingJobState)(nil)).Elem()
}

type processingJobArgs struct {
	// Configuration to run a processing job in a specified container image.
	AppSpecification ProcessingJobAppSpecification `pulumi:"appSpecification"`
	// Sets the environment variables in the Docker container.
	Environment *ProcessingJobEnvironment `pulumi:"environment"`
	// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
	//
	// - [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
	// - [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
	// - [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
	ExperimentConfig *ProcessingJobExperimentConfig `pulumi:"experimentConfig"`
	// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
	NetworkConfig *ProcessingJobNetworkConfig `pulumi:"networkConfig"`
	// An array of inputs configuring the data to download into the processing container.
	ProcessingInputs []ProcessingJobProcessingInputsObject `pulumi:"processingInputs"`
	// The name of the processing job. The name must be unique within an AWS Region in the AWS account.
	ProcessingJobName *string `pulumi:"processingJobName"`
	// Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
	ProcessingOutputConfig *ProcessingJobProcessingOutputConfig `pulumi:"processingOutputConfig"`
	// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
	ProcessingResources ProcessingJobProcessingResources `pulumi:"processingResources"`
	// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
	RoleArn string `pulumi:"roleArn"`
	// Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.
	//
	// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
	//
	// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
	StoppingCondition *ProcessingJobStoppingCondition `pulumi:"stoppingCondition"`
	// (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a ProcessingJob resource.
type ProcessingJobArgs struct {
	// Configuration to run a processing job in a specified container image.
	AppSpecification ProcessingJobAppSpecificationInput
	// Sets the environment variables in the Docker container.
	Environment ProcessingJobEnvironmentPtrInput
	// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
	//
	// - [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
	// - [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
	// - [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
	ExperimentConfig ProcessingJobExperimentConfigPtrInput
	// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
	NetworkConfig ProcessingJobNetworkConfigPtrInput
	// An array of inputs configuring the data to download into the processing container.
	ProcessingInputs ProcessingJobProcessingInputsObjectArrayInput
	// The name of the processing job. The name must be unique within an AWS Region in the AWS account.
	ProcessingJobName pulumi.StringPtrInput
	// Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
	ProcessingOutputConfig ProcessingJobProcessingOutputConfigPtrInput
	// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
	ProcessingResources ProcessingJobProcessingResourcesInput
	// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
	RoleArn pulumi.StringInput
	// Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.
	//
	// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
	//
	// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
	StoppingCondition ProcessingJobStoppingConditionPtrInput
	// (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
	Tags aws.CreateOnlyTagArrayInput
}

func (ProcessingJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*processingJobArgs)(nil)).Elem()
}

type ProcessingJobInput interface {
	pulumi.Input

	ToProcessingJobOutput() ProcessingJobOutput
	ToProcessingJobOutputWithContext(ctx context.Context) ProcessingJobOutput
}

func (*ProcessingJob) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessingJob)(nil)).Elem()
}

func (i *ProcessingJob) ToProcessingJobOutput() ProcessingJobOutput {
	return i.ToProcessingJobOutputWithContext(context.Background())
}

func (i *ProcessingJob) ToProcessingJobOutputWithContext(ctx context.Context) ProcessingJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessingJobOutput)
}

type ProcessingJobOutput struct{ *pulumi.OutputState }

func (ProcessingJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessingJob)(nil)).Elem()
}

func (o ProcessingJobOutput) ToProcessingJobOutput() ProcessingJobOutput {
	return o
}

func (o ProcessingJobOutput) ToProcessingJobOutputWithContext(ctx context.Context) ProcessingJobOutput {
	return o
}

// Configuration to run a processing job in a specified container image.
func (o ProcessingJobOutput) AppSpecification() ProcessingJobAppSpecificationOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobAppSpecificationOutput { return v.AppSpecification }).(ProcessingJobAppSpecificationOutput)
}

// The ARN of an AutoML job associated with this processing job.
func (o ProcessingJobOutput) AutoMlJobArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.AutoMlJobArn }).(pulumi.StringOutput)
}

// The time at which the processing job was created.
func (o ProcessingJobOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Sets the environment variables in the Docker container.
func (o ProcessingJobOutput) Environment() ProcessingJobEnvironmentPtrOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobEnvironmentPtrOutput { return v.Environment }).(ProcessingJobEnvironmentPtrOutput)
}

// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
func (o ProcessingJobOutput) ExitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.ExitMessage }).(pulumi.StringOutput)
}

// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
//
// - [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
// - [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
// - [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
func (o ProcessingJobOutput) ExperimentConfig() ProcessingJobExperimentConfigPtrOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobExperimentConfigPtrOutput { return v.ExperimentConfig }).(ProcessingJobExperimentConfigPtrOutput)
}

// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
func (o ProcessingJobOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.FailureReason }).(pulumi.StringOutput)
}

// The time at which the processing job was last modified.
func (o ProcessingJobOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The ARN of a monitoring schedule for an endpoint associated with this processing job.
func (o ProcessingJobOutput) MonitoringScheduleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.MonitoringScheduleArn }).(pulumi.StringOutput)
}

// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
func (o ProcessingJobOutput) NetworkConfig() ProcessingJobNetworkConfigPtrOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobNetworkConfigPtrOutput { return v.NetworkConfig }).(ProcessingJobNetworkConfigPtrOutput)
}

// The time at which the processing job completed.
func (o ProcessingJobOutput) ProcessingEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.ProcessingEndTime }).(pulumi.StringOutput)
}

// An array of inputs configuring the data to download into the processing container.
func (o ProcessingJobOutput) ProcessingInputs() ProcessingJobProcessingInputsObjectArrayOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobProcessingInputsObjectArrayOutput { return v.ProcessingInputs }).(ProcessingJobProcessingInputsObjectArrayOutput)
}

// The Amazon Resource Name (ARN) of the processing job.
func (o ProcessingJobOutput) ProcessingJobArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.ProcessingJobArn }).(pulumi.StringOutput)
}

// The name of the processing job. The name must be unique within an AWS Region in the AWS account.
func (o ProcessingJobOutput) ProcessingJobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringPtrOutput { return v.ProcessingJobName }).(pulumi.StringPtrOutput)
}

// Provides the status of a processing job.
func (o ProcessingJobOutput) ProcessingJobStatus() ProcessingJobStatusOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobStatusOutput { return v.ProcessingJobStatus }).(ProcessingJobStatusOutput)
}

// Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
func (o ProcessingJobOutput) ProcessingOutputConfig() ProcessingJobProcessingOutputConfigPtrOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobProcessingOutputConfigPtrOutput { return v.ProcessingOutputConfig }).(ProcessingJobProcessingOutputConfigPtrOutput)
}

// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
func (o ProcessingJobOutput) ProcessingResources() ProcessingJobProcessingResourcesOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobProcessingResourcesOutput { return v.ProcessingResources }).(ProcessingJobProcessingResourcesOutput)
}

// The time at which the processing job started.
func (o ProcessingJobOutput) ProcessingStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.ProcessingStartTime }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
func (o ProcessingJobOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.
//
// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
//
// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
//
// > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
func (o ProcessingJobOutput) StoppingCondition() ProcessingJobStoppingConditionPtrOutput {
	return o.ApplyT(func(v *ProcessingJob) ProcessingJobStoppingConditionPtrOutput { return v.StoppingCondition }).(ProcessingJobStoppingConditionPtrOutput)
}

// (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
func (o ProcessingJobOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *ProcessingJob) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

// The ARN of a training job associated with this processing job
func (o ProcessingJobOutput) TrainingJobArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessingJob) pulumi.StringOutput { return v.TrainingJobArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessingJobInput)(nil)).Elem(), &ProcessingJob{})
	pulumi.RegisterOutputType(ProcessingJobOutput{})
}
