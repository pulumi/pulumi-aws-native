// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SageMaker::ModelPackageGroup
type ModelPackageGroup struct {
	pulumi.CustomResourceState

	// The time at which the model package group was created.
	CreationTime                 pulumi.StringOutput    `pulumi:"creationTime"`
	ModelPackageGroupArn         pulumi.StringOutput    `pulumi:"modelPackageGroupArn"`
	ModelPackageGroupDescription pulumi.StringPtrOutput `pulumi:"modelPackageGroupDescription"`
	ModelPackageGroupName        pulumi.StringOutput    `pulumi:"modelPackageGroupName"`
	ModelPackageGroupPolicy      pulumi.AnyOutput       `pulumi:"modelPackageGroupPolicy"`
	// The status of a modelpackage group job.
	ModelPackageGroupStatus ModelPackageGroupModelPackageGroupStatusOutput `pulumi:"modelPackageGroupStatus"`
	// An array of key-value pairs to apply to this resource.
	Tags ModelPackageGroupTagArrayOutput `pulumi:"tags"`
}

// NewModelPackageGroup registers a new resource with the given unique name, arguments, and options.
func NewModelPackageGroup(ctx *pulumi.Context,
	name string, args *ModelPackageGroupArgs, opts ...pulumi.ResourceOption) (*ModelPackageGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelPackageGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ModelPackageGroupName'")
	}
	var resource ModelPackageGroup
	err := ctx.RegisterResource("aws-native:sagemaker:ModelPackageGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelPackageGroup gets an existing ModelPackageGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelPackageGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelPackageGroupState, opts ...pulumi.ResourceOption) (*ModelPackageGroup, error) {
	var resource ModelPackageGroup
	err := ctx.ReadResource("aws-native:sagemaker:ModelPackageGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelPackageGroup resources.
type modelPackageGroupState struct {
}

type ModelPackageGroupState struct {
}

func (ModelPackageGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelPackageGroupState)(nil)).Elem()
}

type modelPackageGroupArgs struct {
	ModelPackageGroupDescription *string     `pulumi:"modelPackageGroupDescription"`
	ModelPackageGroupName        string      `pulumi:"modelPackageGroupName"`
	ModelPackageGroupPolicy      interface{} `pulumi:"modelPackageGroupPolicy"`
	// An array of key-value pairs to apply to this resource.
	Tags []ModelPackageGroupTag `pulumi:"tags"`
}

// The set of arguments for constructing a ModelPackageGroup resource.
type ModelPackageGroupArgs struct {
	ModelPackageGroupDescription pulumi.StringPtrInput
	ModelPackageGroupName        pulumi.StringInput
	ModelPackageGroupPolicy      pulumi.Input
	// An array of key-value pairs to apply to this resource.
	Tags ModelPackageGroupTagArrayInput
}

func (ModelPackageGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelPackageGroupArgs)(nil)).Elem()
}

type ModelPackageGroupInput interface {
	pulumi.Input

	ToModelPackageGroupOutput() ModelPackageGroupOutput
	ToModelPackageGroupOutputWithContext(ctx context.Context) ModelPackageGroupOutput
}

func (*ModelPackageGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelPackageGroup)(nil))
}

func (i *ModelPackageGroup) ToModelPackageGroupOutput() ModelPackageGroupOutput {
	return i.ToModelPackageGroupOutputWithContext(context.Background())
}

func (i *ModelPackageGroup) ToModelPackageGroupOutputWithContext(ctx context.Context) ModelPackageGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelPackageGroupOutput)
}

type ModelPackageGroupOutput struct{ *pulumi.OutputState }

func (ModelPackageGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelPackageGroup)(nil))
}

func (o ModelPackageGroupOutput) ToModelPackageGroupOutput() ModelPackageGroupOutput {
	return o
}

func (o ModelPackageGroupOutput) ToModelPackageGroupOutputWithContext(ctx context.Context) ModelPackageGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ModelPackageGroupOutput{})
}
