// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type InvestigationGroupChatbotNotificationChannel struct {
	ChatConfigurationArns []string `pulumi:"chatConfigurationArns"`
	SnsTopicArn           *string  `pulumi:"snsTopicArn"`
}

// InvestigationGroupChatbotNotificationChannelInput is an input type that accepts InvestigationGroupChatbotNotificationChannelArgs and InvestigationGroupChatbotNotificationChannelOutput values.
// You can construct a concrete instance of `InvestigationGroupChatbotNotificationChannelInput` via:
//
//	InvestigationGroupChatbotNotificationChannelArgs{...}
type InvestigationGroupChatbotNotificationChannelInput interface {
	pulumi.Input

	ToInvestigationGroupChatbotNotificationChannelOutput() InvestigationGroupChatbotNotificationChannelOutput
	ToInvestigationGroupChatbotNotificationChannelOutputWithContext(context.Context) InvestigationGroupChatbotNotificationChannelOutput
}

type InvestigationGroupChatbotNotificationChannelArgs struct {
	ChatConfigurationArns pulumi.StringArrayInput `pulumi:"chatConfigurationArns"`
	SnsTopicArn           pulumi.StringPtrInput   `pulumi:"snsTopicArn"`
}

func (InvestigationGroupChatbotNotificationChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationGroupChatbotNotificationChannel)(nil)).Elem()
}

func (i InvestigationGroupChatbotNotificationChannelArgs) ToInvestigationGroupChatbotNotificationChannelOutput() InvestigationGroupChatbotNotificationChannelOutput {
	return i.ToInvestigationGroupChatbotNotificationChannelOutputWithContext(context.Background())
}

func (i InvestigationGroupChatbotNotificationChannelArgs) ToInvestigationGroupChatbotNotificationChannelOutputWithContext(ctx context.Context) InvestigationGroupChatbotNotificationChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvestigationGroupChatbotNotificationChannelOutput)
}

// InvestigationGroupChatbotNotificationChannelArrayInput is an input type that accepts InvestigationGroupChatbotNotificationChannelArray and InvestigationGroupChatbotNotificationChannelArrayOutput values.
// You can construct a concrete instance of `InvestigationGroupChatbotNotificationChannelArrayInput` via:
//
//	InvestigationGroupChatbotNotificationChannelArray{ InvestigationGroupChatbotNotificationChannelArgs{...} }
type InvestigationGroupChatbotNotificationChannelArrayInput interface {
	pulumi.Input

	ToInvestigationGroupChatbotNotificationChannelArrayOutput() InvestigationGroupChatbotNotificationChannelArrayOutput
	ToInvestigationGroupChatbotNotificationChannelArrayOutputWithContext(context.Context) InvestigationGroupChatbotNotificationChannelArrayOutput
}

type InvestigationGroupChatbotNotificationChannelArray []InvestigationGroupChatbotNotificationChannelInput

func (InvestigationGroupChatbotNotificationChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvestigationGroupChatbotNotificationChannel)(nil)).Elem()
}

func (i InvestigationGroupChatbotNotificationChannelArray) ToInvestigationGroupChatbotNotificationChannelArrayOutput() InvestigationGroupChatbotNotificationChannelArrayOutput {
	return i.ToInvestigationGroupChatbotNotificationChannelArrayOutputWithContext(context.Background())
}

func (i InvestigationGroupChatbotNotificationChannelArray) ToInvestigationGroupChatbotNotificationChannelArrayOutputWithContext(ctx context.Context) InvestigationGroupChatbotNotificationChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvestigationGroupChatbotNotificationChannelArrayOutput)
}

type InvestigationGroupChatbotNotificationChannelOutput struct{ *pulumi.OutputState }

func (InvestigationGroupChatbotNotificationChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationGroupChatbotNotificationChannel)(nil)).Elem()
}

func (o InvestigationGroupChatbotNotificationChannelOutput) ToInvestigationGroupChatbotNotificationChannelOutput() InvestigationGroupChatbotNotificationChannelOutput {
	return o
}

func (o InvestigationGroupChatbotNotificationChannelOutput) ToInvestigationGroupChatbotNotificationChannelOutputWithContext(ctx context.Context) InvestigationGroupChatbotNotificationChannelOutput {
	return o
}

func (o InvestigationGroupChatbotNotificationChannelOutput) ChatConfigurationArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InvestigationGroupChatbotNotificationChannel) []string { return v.ChatConfigurationArns }).(pulumi.StringArrayOutput)
}

func (o InvestigationGroupChatbotNotificationChannelOutput) SnsTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvestigationGroupChatbotNotificationChannel) *string { return v.SnsTopicArn }).(pulumi.StringPtrOutput)
}

type InvestigationGroupChatbotNotificationChannelArrayOutput struct{ *pulumi.OutputState }

func (InvestigationGroupChatbotNotificationChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvestigationGroupChatbotNotificationChannel)(nil)).Elem()
}

func (o InvestigationGroupChatbotNotificationChannelArrayOutput) ToInvestigationGroupChatbotNotificationChannelArrayOutput() InvestigationGroupChatbotNotificationChannelArrayOutput {
	return o
}

func (o InvestigationGroupChatbotNotificationChannelArrayOutput) ToInvestigationGroupChatbotNotificationChannelArrayOutputWithContext(ctx context.Context) InvestigationGroupChatbotNotificationChannelArrayOutput {
	return o
}

func (o InvestigationGroupChatbotNotificationChannelArrayOutput) Index(i pulumi.IntInput) InvestigationGroupChatbotNotificationChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvestigationGroupChatbotNotificationChannel {
		return vs[0].([]InvestigationGroupChatbotNotificationChannel)[vs[1].(int)]
	}).(InvestigationGroupChatbotNotificationChannelOutput)
}

type InvestigationGroupCrossAccountConfiguration struct {
	SourceRoleArn *string `pulumi:"sourceRoleArn"`
}

// InvestigationGroupCrossAccountConfigurationInput is an input type that accepts InvestigationGroupCrossAccountConfigurationArgs and InvestigationGroupCrossAccountConfigurationOutput values.
// You can construct a concrete instance of `InvestigationGroupCrossAccountConfigurationInput` via:
//
//	InvestigationGroupCrossAccountConfigurationArgs{...}
type InvestigationGroupCrossAccountConfigurationInput interface {
	pulumi.Input

	ToInvestigationGroupCrossAccountConfigurationOutput() InvestigationGroupCrossAccountConfigurationOutput
	ToInvestigationGroupCrossAccountConfigurationOutputWithContext(context.Context) InvestigationGroupCrossAccountConfigurationOutput
}

type InvestigationGroupCrossAccountConfigurationArgs struct {
	SourceRoleArn pulumi.StringPtrInput `pulumi:"sourceRoleArn"`
}

func (InvestigationGroupCrossAccountConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationGroupCrossAccountConfiguration)(nil)).Elem()
}

func (i InvestigationGroupCrossAccountConfigurationArgs) ToInvestigationGroupCrossAccountConfigurationOutput() InvestigationGroupCrossAccountConfigurationOutput {
	return i.ToInvestigationGroupCrossAccountConfigurationOutputWithContext(context.Background())
}

func (i InvestigationGroupCrossAccountConfigurationArgs) ToInvestigationGroupCrossAccountConfigurationOutputWithContext(ctx context.Context) InvestigationGroupCrossAccountConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvestigationGroupCrossAccountConfigurationOutput)
}

// InvestigationGroupCrossAccountConfigurationArrayInput is an input type that accepts InvestigationGroupCrossAccountConfigurationArray and InvestigationGroupCrossAccountConfigurationArrayOutput values.
// You can construct a concrete instance of `InvestigationGroupCrossAccountConfigurationArrayInput` via:
//
//	InvestigationGroupCrossAccountConfigurationArray{ InvestigationGroupCrossAccountConfigurationArgs{...} }
type InvestigationGroupCrossAccountConfigurationArrayInput interface {
	pulumi.Input

	ToInvestigationGroupCrossAccountConfigurationArrayOutput() InvestigationGroupCrossAccountConfigurationArrayOutput
	ToInvestigationGroupCrossAccountConfigurationArrayOutputWithContext(context.Context) InvestigationGroupCrossAccountConfigurationArrayOutput
}

type InvestigationGroupCrossAccountConfigurationArray []InvestigationGroupCrossAccountConfigurationInput

func (InvestigationGroupCrossAccountConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvestigationGroupCrossAccountConfiguration)(nil)).Elem()
}

func (i InvestigationGroupCrossAccountConfigurationArray) ToInvestigationGroupCrossAccountConfigurationArrayOutput() InvestigationGroupCrossAccountConfigurationArrayOutput {
	return i.ToInvestigationGroupCrossAccountConfigurationArrayOutputWithContext(context.Background())
}

func (i InvestigationGroupCrossAccountConfigurationArray) ToInvestigationGroupCrossAccountConfigurationArrayOutputWithContext(ctx context.Context) InvestigationGroupCrossAccountConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvestigationGroupCrossAccountConfigurationArrayOutput)
}

type InvestigationGroupCrossAccountConfigurationOutput struct{ *pulumi.OutputState }

func (InvestigationGroupCrossAccountConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationGroupCrossAccountConfiguration)(nil)).Elem()
}

func (o InvestigationGroupCrossAccountConfigurationOutput) ToInvestigationGroupCrossAccountConfigurationOutput() InvestigationGroupCrossAccountConfigurationOutput {
	return o
}

func (o InvestigationGroupCrossAccountConfigurationOutput) ToInvestigationGroupCrossAccountConfigurationOutputWithContext(ctx context.Context) InvestigationGroupCrossAccountConfigurationOutput {
	return o
}

func (o InvestigationGroupCrossAccountConfigurationOutput) SourceRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvestigationGroupCrossAccountConfiguration) *string { return v.SourceRoleArn }).(pulumi.StringPtrOutput)
}

type InvestigationGroupCrossAccountConfigurationArrayOutput struct{ *pulumi.OutputState }

func (InvestigationGroupCrossAccountConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvestigationGroupCrossAccountConfiguration)(nil)).Elem()
}

func (o InvestigationGroupCrossAccountConfigurationArrayOutput) ToInvestigationGroupCrossAccountConfigurationArrayOutput() InvestigationGroupCrossAccountConfigurationArrayOutput {
	return o
}

func (o InvestigationGroupCrossAccountConfigurationArrayOutput) ToInvestigationGroupCrossAccountConfigurationArrayOutputWithContext(ctx context.Context) InvestigationGroupCrossAccountConfigurationArrayOutput {
	return o
}

func (o InvestigationGroupCrossAccountConfigurationArrayOutput) Index(i pulumi.IntInput) InvestigationGroupCrossAccountConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvestigationGroupCrossAccountConfiguration {
		return vs[0].([]InvestigationGroupCrossAccountConfiguration)[vs[1].(int)]
	}).(InvestigationGroupCrossAccountConfigurationOutput)
}

type InvestigationGroupEncryptionConfigMap struct {
	EncryptionConfigurationType *string `pulumi:"encryptionConfigurationType"`
	// If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

// InvestigationGroupEncryptionConfigMapInput is an input type that accepts InvestigationGroupEncryptionConfigMap and InvestigationGroupEncryptionConfigMapOutput values.
// You can construct a concrete instance of `InvestigationGroupEncryptionConfigMapInput` via:
//
//	InvestigationGroupEncryptionConfigMap{ "key": InvestigationGroupEncryptionConfigArgs{...} }
type InvestigationGroupEncryptionConfigMapInput interface {
	pulumi.Input

	ToInvestigationGroupEncryptionConfigMapOutput() InvestigationGroupEncryptionConfigMapOutput
	ToInvestigationGroupEncryptionConfigMapOutputWithContext(context.Context) InvestigationGroupEncryptionConfigMapOutput
}

type InvestigationGroupEncryptionConfigMapArgs struct {
	EncryptionConfigurationType pulumi.StringPtrInput `pulumi:"encryptionConfigurationType"`
	// If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
}

func (InvestigationGroupEncryptionConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationGroupEncryptionConfigMap)(nil)).Elem()
}

func (i InvestigationGroupEncryptionConfigMapArgs) ToInvestigationGroupEncryptionConfigMapOutput() InvestigationGroupEncryptionConfigMapOutput {
	return i.ToInvestigationGroupEncryptionConfigMapOutputWithContext(context.Background())
}

func (i InvestigationGroupEncryptionConfigMapArgs) ToInvestigationGroupEncryptionConfigMapOutputWithContext(ctx context.Context) InvestigationGroupEncryptionConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvestigationGroupEncryptionConfigMapOutput)
}

func (i InvestigationGroupEncryptionConfigMapArgs) ToInvestigationGroupEncryptionConfigMapPtrOutput() InvestigationGroupEncryptionConfigMapPtrOutput {
	return i.ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(context.Background())
}

func (i InvestigationGroupEncryptionConfigMapArgs) ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(ctx context.Context) InvestigationGroupEncryptionConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvestigationGroupEncryptionConfigMapOutput).ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(ctx)
}

// InvestigationGroupEncryptionConfigMapPtrInput is an input type that accepts InvestigationGroupEncryptionConfigMapArgs, InvestigationGroupEncryptionConfigMapPtr and InvestigationGroupEncryptionConfigMapPtrOutput values.
// You can construct a concrete instance of `InvestigationGroupEncryptionConfigMapPtrInput` via:
//
//	        InvestigationGroupEncryptionConfigMapArgs{...}
//
//	or:
//
//	        nil
type InvestigationGroupEncryptionConfigMapPtrInput interface {
	pulumi.Input

	ToInvestigationGroupEncryptionConfigMapPtrOutput() InvestigationGroupEncryptionConfigMapPtrOutput
	ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(context.Context) InvestigationGroupEncryptionConfigMapPtrOutput
}

type investigationGroupEncryptionConfigMapPtrType InvestigationGroupEncryptionConfigMapArgs

func InvestigationGroupEncryptionConfigMapPtr(v *InvestigationGroupEncryptionConfigMapArgs) InvestigationGroupEncryptionConfigMapPtrInput {
	return (*investigationGroupEncryptionConfigMapPtrType)(v)
}

func (*investigationGroupEncryptionConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InvestigationGroupEncryptionConfigMap)(nil)).Elem()
}

func (i *investigationGroupEncryptionConfigMapPtrType) ToInvestigationGroupEncryptionConfigMapPtrOutput() InvestigationGroupEncryptionConfigMapPtrOutput {
	return i.ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(context.Background())
}

func (i *investigationGroupEncryptionConfigMapPtrType) ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(ctx context.Context) InvestigationGroupEncryptionConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvestigationGroupEncryptionConfigMapPtrOutput)
}

type InvestigationGroupEncryptionConfigMapOutput struct{ *pulumi.OutputState }

func (InvestigationGroupEncryptionConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationGroupEncryptionConfigMap)(nil)).Elem()
}

func (o InvestigationGroupEncryptionConfigMapOutput) ToInvestigationGroupEncryptionConfigMapOutput() InvestigationGroupEncryptionConfigMapOutput {
	return o
}

func (o InvestigationGroupEncryptionConfigMapOutput) ToInvestigationGroupEncryptionConfigMapOutputWithContext(ctx context.Context) InvestigationGroupEncryptionConfigMapOutput {
	return o
}

func (o InvestigationGroupEncryptionConfigMapOutput) ToInvestigationGroupEncryptionConfigMapPtrOutput() InvestigationGroupEncryptionConfigMapPtrOutput {
	return o.ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(context.Background())
}

func (o InvestigationGroupEncryptionConfigMapOutput) ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(ctx context.Context) InvestigationGroupEncryptionConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InvestigationGroupEncryptionConfigMap) *InvestigationGroupEncryptionConfigMap {
		return &v
	}).(InvestigationGroupEncryptionConfigMapPtrOutput)
}

func (o InvestigationGroupEncryptionConfigMapOutput) EncryptionConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvestigationGroupEncryptionConfigMap) *string { return v.EncryptionConfigurationType }).(pulumi.StringPtrOutput)
}

// If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.
func (o InvestigationGroupEncryptionConfigMapOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvestigationGroupEncryptionConfigMap) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type InvestigationGroupEncryptionConfigMapPtrOutput struct{ *pulumi.OutputState }

func (InvestigationGroupEncryptionConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InvestigationGroupEncryptionConfigMap)(nil)).Elem()
}

func (o InvestigationGroupEncryptionConfigMapPtrOutput) ToInvestigationGroupEncryptionConfigMapPtrOutput() InvestigationGroupEncryptionConfigMapPtrOutput {
	return o
}

func (o InvestigationGroupEncryptionConfigMapPtrOutput) ToInvestigationGroupEncryptionConfigMapPtrOutputWithContext(ctx context.Context) InvestigationGroupEncryptionConfigMapPtrOutput {
	return o
}

func (o InvestigationGroupEncryptionConfigMapPtrOutput) Elem() InvestigationGroupEncryptionConfigMapOutput {
	return o.ApplyT(func(v *InvestigationGroupEncryptionConfigMap) InvestigationGroupEncryptionConfigMap {
		if v != nil {
			return *v
		}
		var ret InvestigationGroupEncryptionConfigMap
		return ret
	}).(InvestigationGroupEncryptionConfigMapOutput)
}

func (o InvestigationGroupEncryptionConfigMapPtrOutput) EncryptionConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvestigationGroupEncryptionConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionConfigurationType
	}).(pulumi.StringPtrOutput)
}

// If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.
func (o InvestigationGroupEncryptionConfigMapPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvestigationGroupEncryptionConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

type InvestigationGroupTag struct {
	// A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources, including investigation groups.
	Key string `pulumi:"key"`
	// The value for the specified tag key.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvestigationGroupChatbotNotificationChannelInput)(nil)).Elem(), InvestigationGroupChatbotNotificationChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvestigationGroupChatbotNotificationChannelArrayInput)(nil)).Elem(), InvestigationGroupChatbotNotificationChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvestigationGroupCrossAccountConfigurationInput)(nil)).Elem(), InvestigationGroupCrossAccountConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvestigationGroupCrossAccountConfigurationArrayInput)(nil)).Elem(), InvestigationGroupCrossAccountConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvestigationGroupEncryptionConfigMapInput)(nil)).Elem(), InvestigationGroupEncryptionConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvestigationGroupEncryptionConfigMapPtrInput)(nil)).Elem(), InvestigationGroupEncryptionConfigMapArgs{})
	pulumi.RegisterOutputType(InvestigationGroupChatbotNotificationChannelOutput{})
	pulumi.RegisterOutputType(InvestigationGroupChatbotNotificationChannelArrayOutput{})
	pulumi.RegisterOutputType(InvestigationGroupCrossAccountConfigurationOutput{})
	pulumi.RegisterOutputType(InvestigationGroupCrossAccountConfigurationArrayOutput{})
	pulumi.RegisterOutputType(InvestigationGroupEncryptionConfigMapOutput{})
	pulumi.RegisterOutputType(InvestigationGroupEncryptionConfigMapPtrOutput{})
}
