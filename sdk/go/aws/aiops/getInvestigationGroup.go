// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aiops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::AIOps::InvestigationGroup Resource Type
func LookupInvestigationGroup(ctx *pulumi.Context, args *LookupInvestigationGroupArgs, opts ...pulumi.InvokeOption) (*LookupInvestigationGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInvestigationGroupResult
	err := ctx.Invoke("aws-native:aiops:getInvestigationGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupInvestigationGroupArgs struct {
	// The Amazon Resource Name (ARN) of the investigation group. For example, `arn:aws:aiops: *Region* : *account-id* :investigation-group: *investigation-group-id*`
	Arn string `pulumi:"arn"`
}

type LookupInvestigationGroupResult struct {
	// The Amazon Resource Name (ARN) of the investigation group. For example, `arn:aws:aiops: *Region* : *account-id* :investigation-group: *investigation-group-id*`
	Arn *string `pulumi:"arn"`
	// An array of key-value pairs of notification channels to apply to this resource.
	ChatbotNotificationChannels []InvestigationGroupChatbotNotificationChannel `pulumi:"chatbotNotificationChannels"`
	// The date and time that the investigation group was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The name of the user who created the investigation group.
	CreatedBy *string `pulumi:"createdBy"`
	// An array of cross account configurations.
	CrossAccountConfigurations []InvestigationGroupCrossAccountConfiguration `pulumi:"crossAccountConfigurations"`
	// Use this property to specify a customer managed AWS KMS key to encrypt your investigation data. If you omit this property, Amazon Q Developer operational investigations will use an AWS key to encrypt the data. For more information, see [Encryption of investigation data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Investigations-Security.html#Investigations-KMS) .
	EncryptionConfig *InvestigationGroupEncryptionConfigMap `pulumi:"encryptionConfig"`
	// Investigation Group policy
	InvestigationGroupPolicy *string `pulumi:"investigationGroupPolicy"`
	// Flag to enable cloud trail history
	IsCloudTrailEventHistoryEnabled *bool `pulumi:"isCloudTrailEventHistoryEnabled"`
	// The date and time that the investigation group was most recently modified.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The name of the user who most recently modified the investigation group.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// Specify the ARN of the IAM role that Amazon Q Developer operational investigations will use when it gathers investigation data. The permissions in this role determine which of your resources that Amazon Q Developer operational investigations will have access to during investigations.
	//
	// For more information, see [How to control what data Amazon Q has access to during investigations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Investigations-Security.html#Investigations-Security-Data) .
	RoleArn *string `pulumi:"roleArn"`
	// Enter the existing custom tag keys for custom applications in your system. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources. For example, to discover that an Amazon ECS service depends on an Amazon RDS database, Amazon Q can discover this relationship using data sources such as X-Ray and CloudWatch Application Signals. However, if you haven't deployed these features, Amazon Q will attempt to identify possible relationships. Tag boundaries can be used to narrow the resources that will be discovered by Amazon Q in these cases.
	//
	// You don't need to enter tags created by myApplications or AWS CloudFormation , because Amazon Q can automatically detect those tags.
	TagKeyBoundaries []string `pulumi:"tagKeyBoundaries"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupInvestigationGroupOutput(ctx *pulumi.Context, args LookupInvestigationGroupOutputArgs, opts ...pulumi.InvokeOption) LookupInvestigationGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInvestigationGroupResultOutput, error) {
			args := v.(LookupInvestigationGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:aiops:getInvestigationGroup", args, LookupInvestigationGroupResultOutput{}, options).(LookupInvestigationGroupResultOutput), nil
		}).(LookupInvestigationGroupResultOutput)
}

type LookupInvestigationGroupOutputArgs struct {
	// The Amazon Resource Name (ARN) of the investigation group. For example, `arn:aws:aiops: *Region* : *account-id* :investigation-group: *investigation-group-id*`
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupInvestigationGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInvestigationGroupArgs)(nil)).Elem()
}

type LookupInvestigationGroupResultOutput struct{ *pulumi.OutputState }

func (LookupInvestigationGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInvestigationGroupResult)(nil)).Elem()
}

func (o LookupInvestigationGroupResultOutput) ToLookupInvestigationGroupResultOutput() LookupInvestigationGroupResultOutput {
	return o
}

func (o LookupInvestigationGroupResultOutput) ToLookupInvestigationGroupResultOutputWithContext(ctx context.Context) LookupInvestigationGroupResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the investigation group. For example, `arn:aws:aiops: *Region* : *account-id* :investigation-group: *investigation-group-id*`
func (o LookupInvestigationGroupResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs of notification channels to apply to this resource.
func (o LookupInvestigationGroupResultOutput) ChatbotNotificationChannels() InvestigationGroupChatbotNotificationChannelArrayOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) []InvestigationGroupChatbotNotificationChannel {
		return v.ChatbotNotificationChannels
	}).(InvestigationGroupChatbotNotificationChannelArrayOutput)
}

// The date and time that the investigation group was created.
func (o LookupInvestigationGroupResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The name of the user who created the investigation group.
func (o LookupInvestigationGroupResultOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// An array of cross account configurations.
func (o LookupInvestigationGroupResultOutput) CrossAccountConfigurations() InvestigationGroupCrossAccountConfigurationArrayOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) []InvestigationGroupCrossAccountConfiguration {
		return v.CrossAccountConfigurations
	}).(InvestigationGroupCrossAccountConfigurationArrayOutput)
}

// Use this property to specify a customer managed AWS KMS key to encrypt your investigation data. If you omit this property, Amazon Q Developer operational investigations will use an AWS key to encrypt the data. For more information, see [Encryption of investigation data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Investigations-Security.html#Investigations-KMS) .
func (o LookupInvestigationGroupResultOutput) EncryptionConfig() InvestigationGroupEncryptionConfigMapPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *InvestigationGroupEncryptionConfigMap {
		return v.EncryptionConfig
	}).(InvestigationGroupEncryptionConfigMapPtrOutput)
}

// Investigation Group policy
func (o LookupInvestigationGroupResultOutput) InvestigationGroupPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *string { return v.InvestigationGroupPolicy }).(pulumi.StringPtrOutput)
}

// Flag to enable cloud trail history
func (o LookupInvestigationGroupResultOutput) IsCloudTrailEventHistoryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *bool { return v.IsCloudTrailEventHistoryEnabled }).(pulumi.BoolPtrOutput)
}

// The date and time that the investigation group was most recently modified.
func (o LookupInvestigationGroupResultOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The name of the user who most recently modified the investigation group.
func (o LookupInvestigationGroupResultOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// Specify the ARN of the IAM role that Amazon Q Developer operational investigations will use when it gathers investigation data. The permissions in this role determine which of your resources that Amazon Q Developer operational investigations will have access to during investigations.
//
// For more information, see [How to control what data Amazon Q has access to during investigations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Investigations-Security.html#Investigations-Security-Data) .
func (o LookupInvestigationGroupResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Enter the existing custom tag keys for custom applications in your system. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources. For example, to discover that an Amazon ECS service depends on an Amazon RDS database, Amazon Q can discover this relationship using data sources such as X-Ray and CloudWatch Application Signals. However, if you haven't deployed these features, Amazon Q will attempt to identify possible relationships. Tag boundaries can be used to narrow the resources that will be discovered by Amazon Q in these cases.
//
// You don't need to enter tags created by myApplications or AWS CloudFormation , because Amazon Q can automatically detect those tags.
func (o LookupInvestigationGroupResultOutput) TagKeyBoundaries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) []string { return v.TagKeyBoundaries }).(pulumi.StringArrayOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupInvestigationGroupResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupInvestigationGroupResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInvestigationGroupResultOutput{})
}
