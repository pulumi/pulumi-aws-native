// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The scanning configuration for a private registry.
type RegistryScanningConfiguration struct {
	pulumi.CustomResourceState

	// The account ID of the destination registry.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// The scanning rules associated with the registry.
	Rules RegistryScanningConfigurationScanningRuleArrayOutput `pulumi:"rules"`
	// The type of scanning configured for the registry.
	ScanType RegistryScanningConfigurationScanTypeOutput `pulumi:"scanType"`
}

// NewRegistryScanningConfiguration registers a new resource with the given unique name, arguments, and options.
func NewRegistryScanningConfiguration(ctx *pulumi.Context,
	name string, args *RegistryScanningConfigurationArgs, opts ...pulumi.ResourceOption) (*RegistryScanningConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.ScanType == nil {
		return nil, errors.New("invalid value for required argument 'ScanType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryScanningConfiguration
	err := ctx.RegisterResource("aws-native:ecr:RegistryScanningConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryScanningConfiguration gets an existing RegistryScanningConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryScanningConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryScanningConfigurationState, opts ...pulumi.ResourceOption) (*RegistryScanningConfiguration, error) {
	var resource RegistryScanningConfiguration
	err := ctx.ReadResource("aws-native:ecr:RegistryScanningConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryScanningConfiguration resources.
type registryScanningConfigurationState struct {
}

type RegistryScanningConfigurationState struct {
}

func (RegistryScanningConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryScanningConfigurationState)(nil)).Elem()
}

type registryScanningConfigurationArgs struct {
	// The scanning rules associated with the registry.
	Rules []RegistryScanningConfigurationScanningRule `pulumi:"rules"`
	// The type of scanning configured for the registry.
	ScanType RegistryScanningConfigurationScanType `pulumi:"scanType"`
}

// The set of arguments for constructing a RegistryScanningConfiguration resource.
type RegistryScanningConfigurationArgs struct {
	// The scanning rules associated with the registry.
	Rules RegistryScanningConfigurationScanningRuleArrayInput
	// The type of scanning configured for the registry.
	ScanType RegistryScanningConfigurationScanTypeInput
}

func (RegistryScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryScanningConfigurationArgs)(nil)).Elem()
}

type RegistryScanningConfigurationInput interface {
	pulumi.Input

	ToRegistryScanningConfigurationOutput() RegistryScanningConfigurationOutput
	ToRegistryScanningConfigurationOutputWithContext(ctx context.Context) RegistryScanningConfigurationOutput
}

func (*RegistryScanningConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryScanningConfiguration)(nil)).Elem()
}

func (i *RegistryScanningConfiguration) ToRegistryScanningConfigurationOutput() RegistryScanningConfigurationOutput {
	return i.ToRegistryScanningConfigurationOutputWithContext(context.Background())
}

func (i *RegistryScanningConfiguration) ToRegistryScanningConfigurationOutputWithContext(ctx context.Context) RegistryScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryScanningConfigurationOutput)
}

type RegistryScanningConfigurationOutput struct{ *pulumi.OutputState }

func (RegistryScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryScanningConfiguration)(nil)).Elem()
}

func (o RegistryScanningConfigurationOutput) ToRegistryScanningConfigurationOutput() RegistryScanningConfigurationOutput {
	return o
}

func (o RegistryScanningConfigurationOutput) ToRegistryScanningConfigurationOutputWithContext(ctx context.Context) RegistryScanningConfigurationOutput {
	return o
}

// The account ID of the destination registry.
func (o RegistryScanningConfigurationOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryScanningConfiguration) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// The scanning rules associated with the registry.
func (o RegistryScanningConfigurationOutput) Rules() RegistryScanningConfigurationScanningRuleArrayOutput {
	return o.ApplyT(func(v *RegistryScanningConfiguration) RegistryScanningConfigurationScanningRuleArrayOutput {
		return v.Rules
	}).(RegistryScanningConfigurationScanningRuleArrayOutput)
}

// The type of scanning configured for the registry.
func (o RegistryScanningConfigurationOutput) ScanType() RegistryScanningConfigurationScanTypeOutput {
	return o.ApplyT(func(v *RegistryScanningConfiguration) RegistryScanningConfigurationScanTypeOutput { return v.ScanType }).(RegistryScanningConfigurationScanTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryScanningConfigurationInput)(nil)).Elem(), &RegistryScanningConfiguration{})
	pulumi.RegisterOutputType(RegistryScanningConfigurationOutput{})
}
