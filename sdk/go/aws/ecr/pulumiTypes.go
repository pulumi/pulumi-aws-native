// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An object representing the replication configuration for a registry.
type ReplicationConfigurationType struct {
	// An array of objects representing the replication rules for a replication configuration. A replication configuration may contain a maximum of 10 rules.
	Rules []ReplicationConfigurationReplicationRule `pulumi:"rules"`
}

// ReplicationConfigurationTypeInput is an input type that accepts ReplicationConfigurationTypeArgs and ReplicationConfigurationTypeOutput values.
// You can construct a concrete instance of `ReplicationConfigurationTypeInput` via:
//
//          ReplicationConfigurationTypeArgs{...}
type ReplicationConfigurationTypeInput interface {
	pulumi.Input

	ToReplicationConfigurationTypeOutput() ReplicationConfigurationTypeOutput
	ToReplicationConfigurationTypeOutputWithContext(context.Context) ReplicationConfigurationTypeOutput
}

// An object representing the replication configuration for a registry.
type ReplicationConfigurationTypeArgs struct {
	// An array of objects representing the replication rules for a replication configuration. A replication configuration may contain a maximum of 10 rules.
	Rules ReplicationConfigurationReplicationRuleArrayInput `pulumi:"rules"`
}

func (ReplicationConfigurationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationType)(nil)).Elem()
}

func (i ReplicationConfigurationTypeArgs) ToReplicationConfigurationTypeOutput() ReplicationConfigurationTypeOutput {
	return i.ToReplicationConfigurationTypeOutputWithContext(context.Background())
}

func (i ReplicationConfigurationTypeArgs) ToReplicationConfigurationTypeOutputWithContext(ctx context.Context) ReplicationConfigurationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationTypeOutput)
}

func (i ReplicationConfigurationTypeArgs) ToReplicationConfigurationTypePtrOutput() ReplicationConfigurationTypePtrOutput {
	return i.ToReplicationConfigurationTypePtrOutputWithContext(context.Background())
}

func (i ReplicationConfigurationTypeArgs) ToReplicationConfigurationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigurationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationTypeOutput).ToReplicationConfigurationTypePtrOutputWithContext(ctx)
}

// ReplicationConfigurationTypePtrInput is an input type that accepts ReplicationConfigurationTypeArgs, ReplicationConfigurationTypePtr and ReplicationConfigurationTypePtrOutput values.
// You can construct a concrete instance of `ReplicationConfigurationTypePtrInput` via:
//
//          ReplicationConfigurationTypeArgs{...}
//
//  or:
//
//          nil
type ReplicationConfigurationTypePtrInput interface {
	pulumi.Input

	ToReplicationConfigurationTypePtrOutput() ReplicationConfigurationTypePtrOutput
	ToReplicationConfigurationTypePtrOutputWithContext(context.Context) ReplicationConfigurationTypePtrOutput
}

type replicationConfigurationTypePtrType ReplicationConfigurationTypeArgs

func ReplicationConfigurationTypePtr(v *ReplicationConfigurationTypeArgs) ReplicationConfigurationTypePtrInput {
	return (*replicationConfigurationTypePtrType)(v)
}

func (*replicationConfigurationTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfigurationType)(nil)).Elem()
}

func (i *replicationConfigurationTypePtrType) ToReplicationConfigurationTypePtrOutput() ReplicationConfigurationTypePtrOutput {
	return i.ToReplicationConfigurationTypePtrOutputWithContext(context.Background())
}

func (i *replicationConfigurationTypePtrType) ToReplicationConfigurationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigurationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationTypePtrOutput)
}

// An object representing the replication configuration for a registry.
type ReplicationConfigurationTypeOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationType)(nil)).Elem()
}

func (o ReplicationConfigurationTypeOutput) ToReplicationConfigurationTypeOutput() ReplicationConfigurationTypeOutput {
	return o
}

func (o ReplicationConfigurationTypeOutput) ToReplicationConfigurationTypeOutputWithContext(ctx context.Context) ReplicationConfigurationTypeOutput {
	return o
}

func (o ReplicationConfigurationTypeOutput) ToReplicationConfigurationTypePtrOutput() ReplicationConfigurationTypePtrOutput {
	return o.ToReplicationConfigurationTypePtrOutputWithContext(context.Background())
}

func (o ReplicationConfigurationTypeOutput) ToReplicationConfigurationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigurationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicationConfigurationType) *ReplicationConfigurationType {
		return &v
	}).(ReplicationConfigurationTypePtrOutput)
}

// An array of objects representing the replication rules for a replication configuration. A replication configuration may contain a maximum of 10 rules.
func (o ReplicationConfigurationTypeOutput) Rules() ReplicationConfigurationReplicationRuleArrayOutput {
	return o.ApplyT(func(v ReplicationConfigurationType) []ReplicationConfigurationReplicationRule { return v.Rules }).(ReplicationConfigurationReplicationRuleArrayOutput)
}

type ReplicationConfigurationTypePtrOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfigurationType)(nil)).Elem()
}

func (o ReplicationConfigurationTypePtrOutput) ToReplicationConfigurationTypePtrOutput() ReplicationConfigurationTypePtrOutput {
	return o
}

func (o ReplicationConfigurationTypePtrOutput) ToReplicationConfigurationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigurationTypePtrOutput {
	return o
}

func (o ReplicationConfigurationTypePtrOutput) Elem() ReplicationConfigurationTypeOutput {
	return o.ApplyT(func(v *ReplicationConfigurationType) ReplicationConfigurationType {
		if v != nil {
			return *v
		}
		var ret ReplicationConfigurationType
		return ret
	}).(ReplicationConfigurationTypeOutput)
}

// An array of objects representing the replication rules for a replication configuration. A replication configuration may contain a maximum of 10 rules.
func (o ReplicationConfigurationTypePtrOutput) Rules() ReplicationConfigurationReplicationRuleArrayOutput {
	return o.ApplyT(func(v *ReplicationConfigurationType) []ReplicationConfigurationReplicationRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ReplicationConfigurationReplicationRuleArrayOutput)
}

// An array of objects representing the details of a replication destination.
type ReplicationConfigurationReplicationDestination struct {
	Region     string `pulumi:"region"`
	RegistryId string `pulumi:"registryId"`
}

// ReplicationConfigurationReplicationDestinationInput is an input type that accepts ReplicationConfigurationReplicationDestinationArgs and ReplicationConfigurationReplicationDestinationOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationDestinationInput` via:
//
//          ReplicationConfigurationReplicationDestinationArgs{...}
type ReplicationConfigurationReplicationDestinationInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationDestinationOutput() ReplicationConfigurationReplicationDestinationOutput
	ToReplicationConfigurationReplicationDestinationOutputWithContext(context.Context) ReplicationConfigurationReplicationDestinationOutput
}

// An array of objects representing the details of a replication destination.
type ReplicationConfigurationReplicationDestinationArgs struct {
	Region     pulumi.StringInput `pulumi:"region"`
	RegistryId pulumi.StringInput `pulumi:"registryId"`
}

func (ReplicationConfigurationReplicationDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationDestination)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationDestinationArgs) ToReplicationConfigurationReplicationDestinationOutput() ReplicationConfigurationReplicationDestinationOutput {
	return i.ToReplicationConfigurationReplicationDestinationOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationDestinationArgs) ToReplicationConfigurationReplicationDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationDestinationOutput)
}

// ReplicationConfigurationReplicationDestinationArrayInput is an input type that accepts ReplicationConfigurationReplicationDestinationArray and ReplicationConfigurationReplicationDestinationArrayOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationDestinationArrayInput` via:
//
//          ReplicationConfigurationReplicationDestinationArray{ ReplicationConfigurationReplicationDestinationArgs{...} }
type ReplicationConfigurationReplicationDestinationArrayInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationDestinationArrayOutput() ReplicationConfigurationReplicationDestinationArrayOutput
	ToReplicationConfigurationReplicationDestinationArrayOutputWithContext(context.Context) ReplicationConfigurationReplicationDestinationArrayOutput
}

type ReplicationConfigurationReplicationDestinationArray []ReplicationConfigurationReplicationDestinationInput

func (ReplicationConfigurationReplicationDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationReplicationDestination)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationDestinationArray) ToReplicationConfigurationReplicationDestinationArrayOutput() ReplicationConfigurationReplicationDestinationArrayOutput {
	return i.ToReplicationConfigurationReplicationDestinationArrayOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationDestinationArray) ToReplicationConfigurationReplicationDestinationArrayOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationDestinationArrayOutput)
}

// An array of objects representing the details of a replication destination.
type ReplicationConfigurationReplicationDestinationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationDestination)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationDestinationOutput) ToReplicationConfigurationReplicationDestinationOutput() ReplicationConfigurationReplicationDestinationOutput {
	return o
}

func (o ReplicationConfigurationReplicationDestinationOutput) ToReplicationConfigurationReplicationDestinationOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationDestinationOutput {
	return o
}

func (o ReplicationConfigurationReplicationDestinationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationDestination) string { return v.Region }).(pulumi.StringOutput)
}

func (o ReplicationConfigurationReplicationDestinationOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationDestination) string { return v.RegistryId }).(pulumi.StringOutput)
}

type ReplicationConfigurationReplicationDestinationArrayOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationReplicationDestination)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationDestinationArrayOutput) ToReplicationConfigurationReplicationDestinationArrayOutput() ReplicationConfigurationReplicationDestinationArrayOutput {
	return o
}

func (o ReplicationConfigurationReplicationDestinationArrayOutput) ToReplicationConfigurationReplicationDestinationArrayOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationDestinationArrayOutput {
	return o
}

func (o ReplicationConfigurationReplicationDestinationArrayOutput) Index(i pulumi.IntInput) ReplicationConfigurationReplicationDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationConfigurationReplicationDestination {
		return vs[0].([]ReplicationConfigurationReplicationDestination)[vs[1].(int)]
	}).(ReplicationConfigurationReplicationDestinationOutput)
}

// An array of objects representing the details of a replication destination.
type ReplicationConfigurationReplicationRule struct {
	// An array of objects representing the details of a replication destination.
	Destinations []ReplicationConfigurationReplicationDestination `pulumi:"destinations"`
	// An array of objects representing the details of a repository filter.
	RepositoryFilters []ReplicationConfigurationRepositoryFilter `pulumi:"repositoryFilters"`
}

// ReplicationConfigurationReplicationRuleInput is an input type that accepts ReplicationConfigurationReplicationRuleArgs and ReplicationConfigurationReplicationRuleOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationRuleInput` via:
//
//          ReplicationConfigurationReplicationRuleArgs{...}
type ReplicationConfigurationReplicationRuleInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationRuleOutput() ReplicationConfigurationReplicationRuleOutput
	ToReplicationConfigurationReplicationRuleOutputWithContext(context.Context) ReplicationConfigurationReplicationRuleOutput
}

// An array of objects representing the details of a replication destination.
type ReplicationConfigurationReplicationRuleArgs struct {
	// An array of objects representing the details of a replication destination.
	Destinations ReplicationConfigurationReplicationDestinationArrayInput `pulumi:"destinations"`
	// An array of objects representing the details of a repository filter.
	RepositoryFilters ReplicationConfigurationRepositoryFilterArrayInput `pulumi:"repositoryFilters"`
}

func (ReplicationConfigurationReplicationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationRule)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationRuleArgs) ToReplicationConfigurationReplicationRuleOutput() ReplicationConfigurationReplicationRuleOutput {
	return i.ToReplicationConfigurationReplicationRuleOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationRuleArgs) ToReplicationConfigurationReplicationRuleOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationRuleOutput)
}

// ReplicationConfigurationReplicationRuleArrayInput is an input type that accepts ReplicationConfigurationReplicationRuleArray and ReplicationConfigurationReplicationRuleArrayOutput values.
// You can construct a concrete instance of `ReplicationConfigurationReplicationRuleArrayInput` via:
//
//          ReplicationConfigurationReplicationRuleArray{ ReplicationConfigurationReplicationRuleArgs{...} }
type ReplicationConfigurationReplicationRuleArrayInput interface {
	pulumi.Input

	ToReplicationConfigurationReplicationRuleArrayOutput() ReplicationConfigurationReplicationRuleArrayOutput
	ToReplicationConfigurationReplicationRuleArrayOutputWithContext(context.Context) ReplicationConfigurationReplicationRuleArrayOutput
}

type ReplicationConfigurationReplicationRuleArray []ReplicationConfigurationReplicationRuleInput

func (ReplicationConfigurationReplicationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationReplicationRule)(nil)).Elem()
}

func (i ReplicationConfigurationReplicationRuleArray) ToReplicationConfigurationReplicationRuleArrayOutput() ReplicationConfigurationReplicationRuleArrayOutput {
	return i.ToReplicationConfigurationReplicationRuleArrayOutputWithContext(context.Background())
}

func (i ReplicationConfigurationReplicationRuleArray) ToReplicationConfigurationReplicationRuleArrayOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationReplicationRuleArrayOutput)
}

// An array of objects representing the details of a replication destination.
type ReplicationConfigurationReplicationRuleOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationReplicationRule)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationRuleOutput) ToReplicationConfigurationReplicationRuleOutput() ReplicationConfigurationReplicationRuleOutput {
	return o
}

func (o ReplicationConfigurationReplicationRuleOutput) ToReplicationConfigurationReplicationRuleOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationRuleOutput {
	return o
}

// An array of objects representing the details of a replication destination.
func (o ReplicationConfigurationReplicationRuleOutput) Destinations() ReplicationConfigurationReplicationDestinationArrayOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationRule) []ReplicationConfigurationReplicationDestination {
		return v.Destinations
	}).(ReplicationConfigurationReplicationDestinationArrayOutput)
}

// An array of objects representing the details of a repository filter.
func (o ReplicationConfigurationReplicationRuleOutput) RepositoryFilters() ReplicationConfigurationRepositoryFilterArrayOutput {
	return o.ApplyT(func(v ReplicationConfigurationReplicationRule) []ReplicationConfigurationRepositoryFilter {
		return v.RepositoryFilters
	}).(ReplicationConfigurationRepositoryFilterArrayOutput)
}

type ReplicationConfigurationReplicationRuleArrayOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationReplicationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationReplicationRule)(nil)).Elem()
}

func (o ReplicationConfigurationReplicationRuleArrayOutput) ToReplicationConfigurationReplicationRuleArrayOutput() ReplicationConfigurationReplicationRuleArrayOutput {
	return o
}

func (o ReplicationConfigurationReplicationRuleArrayOutput) ToReplicationConfigurationReplicationRuleArrayOutputWithContext(ctx context.Context) ReplicationConfigurationReplicationRuleArrayOutput {
	return o
}

func (o ReplicationConfigurationReplicationRuleArrayOutput) Index(i pulumi.IntInput) ReplicationConfigurationReplicationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationConfigurationReplicationRule {
		return vs[0].([]ReplicationConfigurationReplicationRule)[vs[1].(int)]
	}).(ReplicationConfigurationReplicationRuleOutput)
}

// An array of objects representing the details of a repository filter.
type ReplicationConfigurationRepositoryFilter struct {
	Filter     string                             `pulumi:"filter"`
	FilterType ReplicationConfigurationFilterType `pulumi:"filterType"`
}

// ReplicationConfigurationRepositoryFilterInput is an input type that accepts ReplicationConfigurationRepositoryFilterArgs and ReplicationConfigurationRepositoryFilterOutput values.
// You can construct a concrete instance of `ReplicationConfigurationRepositoryFilterInput` via:
//
//          ReplicationConfigurationRepositoryFilterArgs{...}
type ReplicationConfigurationRepositoryFilterInput interface {
	pulumi.Input

	ToReplicationConfigurationRepositoryFilterOutput() ReplicationConfigurationRepositoryFilterOutput
	ToReplicationConfigurationRepositoryFilterOutputWithContext(context.Context) ReplicationConfigurationRepositoryFilterOutput
}

// An array of objects representing the details of a repository filter.
type ReplicationConfigurationRepositoryFilterArgs struct {
	Filter     pulumi.StringInput                      `pulumi:"filter"`
	FilterType ReplicationConfigurationFilterTypeInput `pulumi:"filterType"`
}

func (ReplicationConfigurationRepositoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationRepositoryFilter)(nil)).Elem()
}

func (i ReplicationConfigurationRepositoryFilterArgs) ToReplicationConfigurationRepositoryFilterOutput() ReplicationConfigurationRepositoryFilterOutput {
	return i.ToReplicationConfigurationRepositoryFilterOutputWithContext(context.Background())
}

func (i ReplicationConfigurationRepositoryFilterArgs) ToReplicationConfigurationRepositoryFilterOutputWithContext(ctx context.Context) ReplicationConfigurationRepositoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationRepositoryFilterOutput)
}

// ReplicationConfigurationRepositoryFilterArrayInput is an input type that accepts ReplicationConfigurationRepositoryFilterArray and ReplicationConfigurationRepositoryFilterArrayOutput values.
// You can construct a concrete instance of `ReplicationConfigurationRepositoryFilterArrayInput` via:
//
//          ReplicationConfigurationRepositoryFilterArray{ ReplicationConfigurationRepositoryFilterArgs{...} }
type ReplicationConfigurationRepositoryFilterArrayInput interface {
	pulumi.Input

	ToReplicationConfigurationRepositoryFilterArrayOutput() ReplicationConfigurationRepositoryFilterArrayOutput
	ToReplicationConfigurationRepositoryFilterArrayOutputWithContext(context.Context) ReplicationConfigurationRepositoryFilterArrayOutput
}

type ReplicationConfigurationRepositoryFilterArray []ReplicationConfigurationRepositoryFilterInput

func (ReplicationConfigurationRepositoryFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationRepositoryFilter)(nil)).Elem()
}

func (i ReplicationConfigurationRepositoryFilterArray) ToReplicationConfigurationRepositoryFilterArrayOutput() ReplicationConfigurationRepositoryFilterArrayOutput {
	return i.ToReplicationConfigurationRepositoryFilterArrayOutputWithContext(context.Background())
}

func (i ReplicationConfigurationRepositoryFilterArray) ToReplicationConfigurationRepositoryFilterArrayOutputWithContext(ctx context.Context) ReplicationConfigurationRepositoryFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationRepositoryFilterArrayOutput)
}

// An array of objects representing the details of a repository filter.
type ReplicationConfigurationRepositoryFilterOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationRepositoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigurationRepositoryFilter)(nil)).Elem()
}

func (o ReplicationConfigurationRepositoryFilterOutput) ToReplicationConfigurationRepositoryFilterOutput() ReplicationConfigurationRepositoryFilterOutput {
	return o
}

func (o ReplicationConfigurationRepositoryFilterOutput) ToReplicationConfigurationRepositoryFilterOutputWithContext(ctx context.Context) ReplicationConfigurationRepositoryFilterOutput {
	return o
}

func (o ReplicationConfigurationRepositoryFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationConfigurationRepositoryFilter) string { return v.Filter }).(pulumi.StringOutput)
}

func (o ReplicationConfigurationRepositoryFilterOutput) FilterType() ReplicationConfigurationFilterTypeOutput {
	return o.ApplyT(func(v ReplicationConfigurationRepositoryFilter) ReplicationConfigurationFilterType {
		return v.FilterType
	}).(ReplicationConfigurationFilterTypeOutput)
}

type ReplicationConfigurationRepositoryFilterArrayOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationRepositoryFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationConfigurationRepositoryFilter)(nil)).Elem()
}

func (o ReplicationConfigurationRepositoryFilterArrayOutput) ToReplicationConfigurationRepositoryFilterArrayOutput() ReplicationConfigurationRepositoryFilterArrayOutput {
	return o
}

func (o ReplicationConfigurationRepositoryFilterArrayOutput) ToReplicationConfigurationRepositoryFilterArrayOutputWithContext(ctx context.Context) ReplicationConfigurationRepositoryFilterArrayOutput {
	return o
}

func (o ReplicationConfigurationRepositoryFilterArrayOutput) Index(i pulumi.IntInput) ReplicationConfigurationRepositoryFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationConfigurationRepositoryFilter {
		return vs[0].([]ReplicationConfigurationRepositoryFilter)[vs[1].(int)]
	}).(ReplicationConfigurationRepositoryFilterOutput)
}

// The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
//
// By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
//
// For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
type RepositoryEncryptionConfiguration struct {
	EncryptionType RepositoryEncryptionType `pulumi:"encryptionType"`
	KmsKey         *string                  `pulumi:"kmsKey"`
}

// RepositoryEncryptionConfigurationInput is an input type that accepts RepositoryEncryptionConfigurationArgs and RepositoryEncryptionConfigurationOutput values.
// You can construct a concrete instance of `RepositoryEncryptionConfigurationInput` via:
//
//          RepositoryEncryptionConfigurationArgs{...}
type RepositoryEncryptionConfigurationInput interface {
	pulumi.Input

	ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput
	ToRepositoryEncryptionConfigurationOutputWithContext(context.Context) RepositoryEncryptionConfigurationOutput
}

// The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
//
// By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
//
// For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
type RepositoryEncryptionConfigurationArgs struct {
	EncryptionType RepositoryEncryptionTypeInput `pulumi:"encryptionType"`
	KmsKey         pulumi.StringPtrInput         `pulumi:"kmsKey"`
}

func (RepositoryEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput {
	return i.ToRepositoryEncryptionConfigurationOutputWithContext(context.Background())
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEncryptionConfigurationOutput)
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationPtrOutput() RepositoryEncryptionConfigurationPtrOutput {
	return i.ToRepositoryEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i RepositoryEncryptionConfigurationArgs) ToRepositoryEncryptionConfigurationPtrOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEncryptionConfigurationOutput).ToRepositoryEncryptionConfigurationPtrOutputWithContext(ctx)
}

// RepositoryEncryptionConfigurationPtrInput is an input type that accepts RepositoryEncryptionConfigurationArgs, RepositoryEncryptionConfigurationPtr and RepositoryEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `RepositoryEncryptionConfigurationPtrInput` via:
//
//          RepositoryEncryptionConfigurationArgs{...}
//
//  or:
//
//          nil
type RepositoryEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToRepositoryEncryptionConfigurationPtrOutput() RepositoryEncryptionConfigurationPtrOutput
	ToRepositoryEncryptionConfigurationPtrOutputWithContext(context.Context) RepositoryEncryptionConfigurationPtrOutput
}

type repositoryEncryptionConfigurationPtrType RepositoryEncryptionConfigurationArgs

func RepositoryEncryptionConfigurationPtr(v *RepositoryEncryptionConfigurationArgs) RepositoryEncryptionConfigurationPtrInput {
	return (*repositoryEncryptionConfigurationPtrType)(v)
}

func (*repositoryEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (i *repositoryEncryptionConfigurationPtrType) ToRepositoryEncryptionConfigurationPtrOutput() RepositoryEncryptionConfigurationPtrOutput {
	return i.ToRepositoryEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *repositoryEncryptionConfigurationPtrType) ToRepositoryEncryptionConfigurationPtrOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEncryptionConfigurationPtrOutput)
}

// The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
//
// By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
//
// For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
type RepositoryEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (RepositoryEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationOutput() RepositoryEncryptionConfigurationOutput {
	return o
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationOutput {
	return o
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationPtrOutput() RepositoryEncryptionConfigurationPtrOutput {
	return o.ToRepositoryEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o RepositoryEncryptionConfigurationOutput) ToRepositoryEncryptionConfigurationPtrOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryEncryptionConfiguration) *RepositoryEncryptionConfiguration {
		return &v
	}).(RepositoryEncryptionConfigurationPtrOutput)
}

func (o RepositoryEncryptionConfigurationOutput) EncryptionType() RepositoryEncryptionTypeOutput {
	return o.ApplyT(func(v RepositoryEncryptionConfiguration) RepositoryEncryptionType { return v.EncryptionType }).(RepositoryEncryptionTypeOutput)
}

func (o RepositoryEncryptionConfigurationOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryEncryptionConfiguration) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

type RepositoryEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RepositoryEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEncryptionConfiguration)(nil)).Elem()
}

func (o RepositoryEncryptionConfigurationPtrOutput) ToRepositoryEncryptionConfigurationPtrOutput() RepositoryEncryptionConfigurationPtrOutput {
	return o
}

func (o RepositoryEncryptionConfigurationPtrOutput) ToRepositoryEncryptionConfigurationPtrOutputWithContext(ctx context.Context) RepositoryEncryptionConfigurationPtrOutput {
	return o
}

func (o RepositoryEncryptionConfigurationPtrOutput) Elem() RepositoryEncryptionConfigurationOutput {
	return o.ApplyT(func(v *RepositoryEncryptionConfiguration) RepositoryEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret RepositoryEncryptionConfiguration
		return ret
	}).(RepositoryEncryptionConfigurationOutput)
}

func (o RepositoryEncryptionConfigurationPtrOutput) EncryptionType() RepositoryEncryptionTypePtrOutput {
	return o.ApplyT(func(v *RepositoryEncryptionConfiguration) *RepositoryEncryptionType {
		if v == nil {
			return nil
		}
		return &v.EncryptionType
	}).(RepositoryEncryptionTypePtrOutput)
}

func (o RepositoryEncryptionConfigurationPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKey
	}).(pulumi.StringPtrOutput)
}

// The image scanning configuration for the repository. This setting determines whether images are scanned for known vulnerabilities after being pushed to the repository.
type RepositoryImageScanningConfiguration struct {
	ScanOnPush *bool `pulumi:"scanOnPush"`
}

// RepositoryImageScanningConfigurationInput is an input type that accepts RepositoryImageScanningConfigurationArgs and RepositoryImageScanningConfigurationOutput values.
// You can construct a concrete instance of `RepositoryImageScanningConfigurationInput` via:
//
//          RepositoryImageScanningConfigurationArgs{...}
type RepositoryImageScanningConfigurationInput interface {
	pulumi.Input

	ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput
	ToRepositoryImageScanningConfigurationOutputWithContext(context.Context) RepositoryImageScanningConfigurationOutput
}

// The image scanning configuration for the repository. This setting determines whether images are scanned for known vulnerabilities after being pushed to the repository.
type RepositoryImageScanningConfigurationArgs struct {
	ScanOnPush pulumi.BoolPtrInput `pulumi:"scanOnPush"`
}

func (RepositoryImageScanningConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput {
	return i.ToRepositoryImageScanningConfigurationOutputWithContext(context.Background())
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryImageScanningConfigurationOutput)
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return i.ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i RepositoryImageScanningConfigurationArgs) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryImageScanningConfigurationOutput).ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx)
}

// RepositoryImageScanningConfigurationPtrInput is an input type that accepts RepositoryImageScanningConfigurationArgs, RepositoryImageScanningConfigurationPtr and RepositoryImageScanningConfigurationPtrOutput values.
// You can construct a concrete instance of `RepositoryImageScanningConfigurationPtrInput` via:
//
//          RepositoryImageScanningConfigurationArgs{...}
//
//  or:
//
//          nil
type RepositoryImageScanningConfigurationPtrInput interface {
	pulumi.Input

	ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput
	ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Context) RepositoryImageScanningConfigurationPtrOutput
}

type repositoryImageScanningConfigurationPtrType RepositoryImageScanningConfigurationArgs

func RepositoryImageScanningConfigurationPtr(v *RepositoryImageScanningConfigurationArgs) RepositoryImageScanningConfigurationPtrInput {
	return (*repositoryImageScanningConfigurationPtrType)(v)
}

func (*repositoryImageScanningConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (i *repositoryImageScanningConfigurationPtrType) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return i.ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (i *repositoryImageScanningConfigurationPtrType) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryImageScanningConfigurationPtrOutput)
}

// The image scanning configuration for the repository. This setting determines whether images are scanned for known vulnerabilities after being pushed to the repository.
type RepositoryImageScanningConfigurationOutput struct{ *pulumi.OutputState }

func (RepositoryImageScanningConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationOutput() RepositoryImageScanningConfigurationOutput {
	return o
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationOutput {
	return o
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return o.ToRepositoryImageScanningConfigurationPtrOutputWithContext(context.Background())
}

func (o RepositoryImageScanningConfigurationOutput) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryImageScanningConfiguration) *RepositoryImageScanningConfiguration {
		return &v
	}).(RepositoryImageScanningConfigurationPtrOutput)
}

func (o RepositoryImageScanningConfigurationOutput) ScanOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryImageScanningConfiguration) *bool { return v.ScanOnPush }).(pulumi.BoolPtrOutput)
}

type RepositoryImageScanningConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RepositoryImageScanningConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryImageScanningConfiguration)(nil)).Elem()
}

func (o RepositoryImageScanningConfigurationPtrOutput) ToRepositoryImageScanningConfigurationPtrOutput() RepositoryImageScanningConfigurationPtrOutput {
	return o
}

func (o RepositoryImageScanningConfigurationPtrOutput) ToRepositoryImageScanningConfigurationPtrOutputWithContext(ctx context.Context) RepositoryImageScanningConfigurationPtrOutput {
	return o
}

func (o RepositoryImageScanningConfigurationPtrOutput) Elem() RepositoryImageScanningConfigurationOutput {
	return o.ApplyT(func(v *RepositoryImageScanningConfiguration) RepositoryImageScanningConfiguration {
		if v != nil {
			return *v
		}
		var ret RepositoryImageScanningConfiguration
		return ret
	}).(RepositoryImageScanningConfigurationOutput)
}

func (o RepositoryImageScanningConfigurationPtrOutput) ScanOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryImageScanningConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ScanOnPush
	}).(pulumi.BoolPtrOutput)
}

// The LifecyclePolicy property type specifies a lifecycle policy. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
type RepositoryLifecyclePolicy struct {
	LifecyclePolicyText *string `pulumi:"lifecyclePolicyText"`
	RegistryId          *string `pulumi:"registryId"`
}

// RepositoryLifecyclePolicyInput is an input type that accepts RepositoryLifecyclePolicyArgs and RepositoryLifecyclePolicyOutput values.
// You can construct a concrete instance of `RepositoryLifecyclePolicyInput` via:
//
//          RepositoryLifecyclePolicyArgs{...}
type RepositoryLifecyclePolicyInput interface {
	pulumi.Input

	ToRepositoryLifecyclePolicyOutput() RepositoryLifecyclePolicyOutput
	ToRepositoryLifecyclePolicyOutputWithContext(context.Context) RepositoryLifecyclePolicyOutput
}

// The LifecyclePolicy property type specifies a lifecycle policy. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
type RepositoryLifecyclePolicyArgs struct {
	LifecyclePolicyText pulumi.StringPtrInput `pulumi:"lifecyclePolicyText"`
	RegistryId          pulumi.StringPtrInput `pulumi:"registryId"`
}

func (RepositoryLifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLifecyclePolicy)(nil)).Elem()
}

func (i RepositoryLifecyclePolicyArgs) ToRepositoryLifecyclePolicyOutput() RepositoryLifecyclePolicyOutput {
	return i.ToRepositoryLifecyclePolicyOutputWithContext(context.Background())
}

func (i RepositoryLifecyclePolicyArgs) ToRepositoryLifecyclePolicyOutputWithContext(ctx context.Context) RepositoryLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLifecyclePolicyOutput)
}

func (i RepositoryLifecyclePolicyArgs) ToRepositoryLifecyclePolicyPtrOutput() RepositoryLifecyclePolicyPtrOutput {
	return i.ToRepositoryLifecyclePolicyPtrOutputWithContext(context.Background())
}

func (i RepositoryLifecyclePolicyArgs) ToRepositoryLifecyclePolicyPtrOutputWithContext(ctx context.Context) RepositoryLifecyclePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLifecyclePolicyOutput).ToRepositoryLifecyclePolicyPtrOutputWithContext(ctx)
}

// RepositoryLifecyclePolicyPtrInput is an input type that accepts RepositoryLifecyclePolicyArgs, RepositoryLifecyclePolicyPtr and RepositoryLifecyclePolicyPtrOutput values.
// You can construct a concrete instance of `RepositoryLifecyclePolicyPtrInput` via:
//
//          RepositoryLifecyclePolicyArgs{...}
//
//  or:
//
//          nil
type RepositoryLifecyclePolicyPtrInput interface {
	pulumi.Input

	ToRepositoryLifecyclePolicyPtrOutput() RepositoryLifecyclePolicyPtrOutput
	ToRepositoryLifecyclePolicyPtrOutputWithContext(context.Context) RepositoryLifecyclePolicyPtrOutput
}

type repositoryLifecyclePolicyPtrType RepositoryLifecyclePolicyArgs

func RepositoryLifecyclePolicyPtr(v *RepositoryLifecyclePolicyArgs) RepositoryLifecyclePolicyPtrInput {
	return (*repositoryLifecyclePolicyPtrType)(v)
}

func (*repositoryLifecyclePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLifecyclePolicy)(nil)).Elem()
}

func (i *repositoryLifecyclePolicyPtrType) ToRepositoryLifecyclePolicyPtrOutput() RepositoryLifecyclePolicyPtrOutput {
	return i.ToRepositoryLifecyclePolicyPtrOutputWithContext(context.Background())
}

func (i *repositoryLifecyclePolicyPtrType) ToRepositoryLifecyclePolicyPtrOutputWithContext(ctx context.Context) RepositoryLifecyclePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLifecyclePolicyPtrOutput)
}

// The LifecyclePolicy property type specifies a lifecycle policy. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
type RepositoryLifecyclePolicyOutput struct{ *pulumi.OutputState }

func (RepositoryLifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLifecyclePolicy)(nil)).Elem()
}

func (o RepositoryLifecyclePolicyOutput) ToRepositoryLifecyclePolicyOutput() RepositoryLifecyclePolicyOutput {
	return o
}

func (o RepositoryLifecyclePolicyOutput) ToRepositoryLifecyclePolicyOutputWithContext(ctx context.Context) RepositoryLifecyclePolicyOutput {
	return o
}

func (o RepositoryLifecyclePolicyOutput) ToRepositoryLifecyclePolicyPtrOutput() RepositoryLifecyclePolicyPtrOutput {
	return o.ToRepositoryLifecyclePolicyPtrOutputWithContext(context.Background())
}

func (o RepositoryLifecyclePolicyOutput) ToRepositoryLifecyclePolicyPtrOutputWithContext(ctx context.Context) RepositoryLifecyclePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryLifecyclePolicy) *RepositoryLifecyclePolicy {
		return &v
	}).(RepositoryLifecyclePolicyPtrOutput)
}

func (o RepositoryLifecyclePolicyOutput) LifecyclePolicyText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryLifecyclePolicy) *string { return v.LifecyclePolicyText }).(pulumi.StringPtrOutput)
}

func (o RepositoryLifecyclePolicyOutput) RegistryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryLifecyclePolicy) *string { return v.RegistryId }).(pulumi.StringPtrOutput)
}

type RepositoryLifecyclePolicyPtrOutput struct{ *pulumi.OutputState }

func (RepositoryLifecyclePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLifecyclePolicy)(nil)).Elem()
}

func (o RepositoryLifecyclePolicyPtrOutput) ToRepositoryLifecyclePolicyPtrOutput() RepositoryLifecyclePolicyPtrOutput {
	return o
}

func (o RepositoryLifecyclePolicyPtrOutput) ToRepositoryLifecyclePolicyPtrOutputWithContext(ctx context.Context) RepositoryLifecyclePolicyPtrOutput {
	return o
}

func (o RepositoryLifecyclePolicyPtrOutput) Elem() RepositoryLifecyclePolicyOutput {
	return o.ApplyT(func(v *RepositoryLifecyclePolicy) RepositoryLifecyclePolicy {
		if v != nil {
			return *v
		}
		var ret RepositoryLifecyclePolicy
		return ret
	}).(RepositoryLifecyclePolicyOutput)
}

func (o RepositoryLifecyclePolicyPtrOutput) LifecyclePolicyText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryLifecyclePolicy) *string {
		if v == nil {
			return nil
		}
		return v.LifecyclePolicyText
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryLifecyclePolicyPtrOutput) RegistryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryLifecyclePolicy) *string {
		if v == nil {
			return nil
		}
		return v.RegistryId
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type RepositoryTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// RepositoryTagInput is an input type that accepts RepositoryTagArgs and RepositoryTagOutput values.
// You can construct a concrete instance of `RepositoryTagInput` via:
//
//          RepositoryTagArgs{...}
type RepositoryTagInput interface {
	pulumi.Input

	ToRepositoryTagOutput() RepositoryTagOutput
	ToRepositoryTagOutputWithContext(context.Context) RepositoryTagOutput
}

// A key-value pair to associate with a resource.
type RepositoryTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RepositoryTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryTag)(nil)).Elem()
}

func (i RepositoryTagArgs) ToRepositoryTagOutput() RepositoryTagOutput {
	return i.ToRepositoryTagOutputWithContext(context.Background())
}

func (i RepositoryTagArgs) ToRepositoryTagOutputWithContext(ctx context.Context) RepositoryTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTagOutput)
}

// RepositoryTagArrayInput is an input type that accepts RepositoryTagArray and RepositoryTagArrayOutput values.
// You can construct a concrete instance of `RepositoryTagArrayInput` via:
//
//          RepositoryTagArray{ RepositoryTagArgs{...} }
type RepositoryTagArrayInput interface {
	pulumi.Input

	ToRepositoryTagArrayOutput() RepositoryTagArrayOutput
	ToRepositoryTagArrayOutputWithContext(context.Context) RepositoryTagArrayOutput
}

type RepositoryTagArray []RepositoryTagInput

func (RepositoryTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryTag)(nil)).Elem()
}

func (i RepositoryTagArray) ToRepositoryTagArrayOutput() RepositoryTagArrayOutput {
	return i.ToRepositoryTagArrayOutputWithContext(context.Background())
}

func (i RepositoryTagArray) ToRepositoryTagArrayOutputWithContext(ctx context.Context) RepositoryTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTagArrayOutput)
}

// A key-value pair to associate with a resource.
type RepositoryTagOutput struct{ *pulumi.OutputState }

func (RepositoryTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryTag)(nil)).Elem()
}

func (o RepositoryTagOutput) ToRepositoryTagOutput() RepositoryTagOutput {
	return o
}

func (o RepositoryTagOutput) ToRepositoryTagOutputWithContext(ctx context.Context) RepositoryTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RepositoryTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RepositoryTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryTag) string { return v.Value }).(pulumi.StringOutput)
}

type RepositoryTagArrayOutput struct{ *pulumi.OutputState }

func (RepositoryTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryTag)(nil)).Elem()
}

func (o RepositoryTagArrayOutput) ToRepositoryTagArrayOutput() RepositoryTagArrayOutput {
	return o
}

func (o RepositoryTagArrayOutput) ToRepositoryTagArrayOutputWithContext(ctx context.Context) RepositoryTagArrayOutput {
	return o
}

func (o RepositoryTagArrayOutput) Index(i pulumi.IntInput) RepositoryTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryTag {
		return vs[0].([]RepositoryTag)[vs[1].(int)]
	}).(RepositoryTagOutput)
}

func init() {
	pulumi.RegisterOutputType(ReplicationConfigurationTypeOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationTypePtrOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationDestinationOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationDestinationArrayOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationRuleOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationReplicationRuleArrayOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationRepositoryFilterOutput{})
	pulumi.RegisterOutputType(ReplicationConfigurationRepositoryFilterArrayOutput{})
	pulumi.RegisterOutputType(RepositoryEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(RepositoryEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RepositoryImageScanningConfigurationOutput{})
	pulumi.RegisterOutputType(RepositoryImageScanningConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RepositoryLifecyclePolicyOutput{})
	pulumi.RegisterOutputType(RepositoryLifecyclePolicyPtrOutput{})
	pulumi.RegisterOutputType(RepositoryTagOutput{})
	pulumi.RegisterOutputType(RepositoryTagArrayOutput{})
}
