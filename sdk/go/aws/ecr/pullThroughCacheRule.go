// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::ECR::PullThroughCacheRule resource configures the upstream registry configuration details for an Amazon Elastic Container Registry (Amazon Private ECR) pull-through cache.
type PullThroughCacheRule struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
	CredentialArn pulumi.StringPtrOutput `pulumi:"credentialArn"`
	// The ECRRepositoryPrefix is a custom alias for upstream registry url.
	EcrRepositoryPrefix pulumi.StringPtrOutput `pulumi:"ecrRepositoryPrefix"`
	// The name of the upstream registry.
	UpstreamRegistry pulumi.StringPtrOutput `pulumi:"upstreamRegistry"`
	// The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
	UpstreamRegistryUrl pulumi.StringPtrOutput `pulumi:"upstreamRegistryUrl"`
}

// NewPullThroughCacheRule registers a new resource with the given unique name, arguments, and options.
func NewPullThroughCacheRule(ctx *pulumi.Context,
	name string, args *PullThroughCacheRuleArgs, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	if args == nil {
		args = &PullThroughCacheRuleArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"credentialArn",
		"ecrRepositoryPrefix",
		"upstreamRegistry",
		"upstreamRegistryUrl",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PullThroughCacheRule
	err := ctx.RegisterResource("aws-native:ecr:PullThroughCacheRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPullThroughCacheRule gets an existing PullThroughCacheRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPullThroughCacheRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PullThroughCacheRuleState, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	var resource PullThroughCacheRule
	err := ctx.ReadResource("aws-native:ecr:PullThroughCacheRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PullThroughCacheRule resources.
type pullThroughCacheRuleState struct {
}

type PullThroughCacheRuleState struct {
}

func (PullThroughCacheRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleState)(nil)).Elem()
}

type pullThroughCacheRuleArgs struct {
	// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
	CredentialArn *string `pulumi:"credentialArn"`
	// The ECRRepositoryPrefix is a custom alias for upstream registry url.
	EcrRepositoryPrefix *string `pulumi:"ecrRepositoryPrefix"`
	// The name of the upstream registry.
	UpstreamRegistry *string `pulumi:"upstreamRegistry"`
	// The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
	UpstreamRegistryUrl *string `pulumi:"upstreamRegistryUrl"`
}

// The set of arguments for constructing a PullThroughCacheRule resource.
type PullThroughCacheRuleArgs struct {
	// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
	CredentialArn pulumi.StringPtrInput
	// The ECRRepositoryPrefix is a custom alias for upstream registry url.
	EcrRepositoryPrefix pulumi.StringPtrInput
	// The name of the upstream registry.
	UpstreamRegistry pulumi.StringPtrInput
	// The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
	UpstreamRegistryUrl pulumi.StringPtrInput
}

func (PullThroughCacheRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleArgs)(nil)).Elem()
}

type PullThroughCacheRuleInput interface {
	pulumi.Input

	ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput
	ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput
}

func (*PullThroughCacheRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PullThroughCacheRule)(nil)).Elem()
}

func (i *PullThroughCacheRule) ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput {
	return i.ToPullThroughCacheRuleOutputWithContext(context.Background())
}

func (i *PullThroughCacheRule) ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullThroughCacheRuleOutput)
}

func (i *PullThroughCacheRule) ToOutput(ctx context.Context) pulumix.Output[*PullThroughCacheRule] {
	return pulumix.Output[*PullThroughCacheRule]{
		OutputState: i.ToPullThroughCacheRuleOutputWithContext(ctx).OutputState,
	}
}

type PullThroughCacheRuleOutput struct{ *pulumi.OutputState }

func (PullThroughCacheRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullThroughCacheRule)(nil)).Elem()
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput {
	return o
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput {
	return o
}

func (o PullThroughCacheRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*PullThroughCacheRule] {
	return pulumix.Output[*PullThroughCacheRule]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
func (o PullThroughCacheRuleOutput) CredentialArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.CredentialArn }).(pulumi.StringPtrOutput)
}

// The ECRRepositoryPrefix is a custom alias for upstream registry url.
func (o PullThroughCacheRuleOutput) EcrRepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.EcrRepositoryPrefix }).(pulumi.StringPtrOutput)
}

// The name of the upstream registry.
func (o PullThroughCacheRuleOutput) UpstreamRegistry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.UpstreamRegistry }).(pulumi.StringPtrOutput)
}

// The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
func (o PullThroughCacheRuleOutput) UpstreamRegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.UpstreamRegistryUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PullThroughCacheRuleInput)(nil)).Elem(), &PullThroughCacheRule{})
	pulumi.RegisterOutputType(PullThroughCacheRuleOutput{})
}
