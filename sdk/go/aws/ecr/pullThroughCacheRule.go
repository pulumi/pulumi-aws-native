// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ECR::PullThroughCacheRule“ resource creates or updates a pull through cache rule. A pull through cache rule provides a way to cache images from an upstream registry in your Amazon ECR private registry.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecr.NewPullThroughCacheRule(ctx, "myECRPullThroughCacheRule", &ecr.PullThroughCacheRuleArgs{
//				EcrRepositoryPrefix: pulumi.String("my-ecr"),
//				UpstreamRegistryUrl: pulumi.String("public.ecr.aws"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecr.NewPullThroughCacheRule(ctx, "myECRPullThroughCacheRule", &ecr.PullThroughCacheRuleArgs{
//				EcrRepositoryPrefix: pulumi.String("my-ecr"),
//				UpstreamRegistryUrl: pulumi.String("public.ecr.aws"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PullThroughCacheRule struct {
	pulumi.CustomResourceState

	// The ARN of the Secrets Manager secret associated with the pull through cache rule.
	CredentialArn pulumi.StringPtrOutput `pulumi:"credentialArn"`
	// The Amazon ECR repository prefix associated with the pull through cache rule.
	EcrRepositoryPrefix pulumi.StringPtrOutput `pulumi:"ecrRepositoryPrefix"`
	// The name of the upstream source registry associated with the pull through cache rule.
	UpstreamRegistry pulumi.StringPtrOutput `pulumi:"upstreamRegistry"`
	// The upstream registry URL associated with the pull through cache rule.
	UpstreamRegistryUrl pulumi.StringPtrOutput `pulumi:"upstreamRegistryUrl"`
}

// NewPullThroughCacheRule registers a new resource with the given unique name, arguments, and options.
func NewPullThroughCacheRule(ctx *pulumi.Context,
	name string, args *PullThroughCacheRuleArgs, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	if args == nil {
		args = &PullThroughCacheRuleArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"credentialArn",
		"ecrRepositoryPrefix",
		"upstreamRegistry",
		"upstreamRegistryUrl",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PullThroughCacheRule
	err := ctx.RegisterResource("aws-native:ecr:PullThroughCacheRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPullThroughCacheRule gets an existing PullThroughCacheRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPullThroughCacheRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PullThroughCacheRuleState, opts ...pulumi.ResourceOption) (*PullThroughCacheRule, error) {
	var resource PullThroughCacheRule
	err := ctx.ReadResource("aws-native:ecr:PullThroughCacheRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PullThroughCacheRule resources.
type pullThroughCacheRuleState struct {
}

type PullThroughCacheRuleState struct {
}

func (PullThroughCacheRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleState)(nil)).Elem()
}

type pullThroughCacheRuleArgs struct {
	// The ARN of the Secrets Manager secret associated with the pull through cache rule.
	CredentialArn *string `pulumi:"credentialArn"`
	// The Amazon ECR repository prefix associated with the pull through cache rule.
	EcrRepositoryPrefix *string `pulumi:"ecrRepositoryPrefix"`
	// The name of the upstream source registry associated with the pull through cache rule.
	UpstreamRegistry *string `pulumi:"upstreamRegistry"`
	// The upstream registry URL associated with the pull through cache rule.
	UpstreamRegistryUrl *string `pulumi:"upstreamRegistryUrl"`
}

// The set of arguments for constructing a PullThroughCacheRule resource.
type PullThroughCacheRuleArgs struct {
	// The ARN of the Secrets Manager secret associated with the pull through cache rule.
	CredentialArn pulumi.StringPtrInput
	// The Amazon ECR repository prefix associated with the pull through cache rule.
	EcrRepositoryPrefix pulumi.StringPtrInput
	// The name of the upstream source registry associated with the pull through cache rule.
	UpstreamRegistry pulumi.StringPtrInput
	// The upstream registry URL associated with the pull through cache rule.
	UpstreamRegistryUrl pulumi.StringPtrInput
}

func (PullThroughCacheRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pullThroughCacheRuleArgs)(nil)).Elem()
}

type PullThroughCacheRuleInput interface {
	pulumi.Input

	ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput
	ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput
}

func (*PullThroughCacheRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PullThroughCacheRule)(nil)).Elem()
}

func (i *PullThroughCacheRule) ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput {
	return i.ToPullThroughCacheRuleOutputWithContext(context.Background())
}

func (i *PullThroughCacheRule) ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullThroughCacheRuleOutput)
}

type PullThroughCacheRuleOutput struct{ *pulumi.OutputState }

func (PullThroughCacheRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullThroughCacheRule)(nil)).Elem()
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutput() PullThroughCacheRuleOutput {
	return o
}

func (o PullThroughCacheRuleOutput) ToPullThroughCacheRuleOutputWithContext(ctx context.Context) PullThroughCacheRuleOutput {
	return o
}

// The ARN of the Secrets Manager secret associated with the pull through cache rule.
func (o PullThroughCacheRuleOutput) CredentialArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.CredentialArn }).(pulumi.StringPtrOutput)
}

// The Amazon ECR repository prefix associated with the pull through cache rule.
func (o PullThroughCacheRuleOutput) EcrRepositoryPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.EcrRepositoryPrefix }).(pulumi.StringPtrOutput)
}

// The name of the upstream source registry associated with the pull through cache rule.
func (o PullThroughCacheRuleOutput) UpstreamRegistry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.UpstreamRegistry }).(pulumi.StringPtrOutput)
}

// The upstream registry URL associated with the pull through cache rule.
func (o PullThroughCacheRuleOutput) UpstreamRegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullThroughCacheRule) pulumi.StringPtrOutput { return v.UpstreamRegistryUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PullThroughCacheRuleInput)(nil)).Elem(), &PullThroughCacheRule{})
	pulumi.RegisterOutputType(PullThroughCacheRuleOutput{})
}
