// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ECR::ReplicationConfiguration“ resource creates or updates the replication configuration for a private registry. The first time a replication configuration is applied to a private registry, a service-linked IAM role is created in your account for the replication process. For more information, see [Using Service-Linked Roles for Amazon ECR](https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html) in the *Amazon Elastic Container Registry User Guide*.
//
//	When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a private registry permissions policy. For more information, see ``AWS::ECR::RegistryPolicy``.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecr.NewReplicationConfiguration(ctx, "myReplicationConfig", &ecr.ReplicationConfigurationArgs{
//				ReplicationConfiguration: &ecr.ReplicationConfigurationTypeArgs{
//					Rules: ecr.ReplicationConfigurationReplicationRuleArray{
//						&ecr.ReplicationConfigurationReplicationRuleArgs{
//							Destinations: ecr.ReplicationConfigurationReplicationDestinationArray{
//								&ecr.ReplicationConfigurationReplicationDestinationArgs{
//									Region:     pulumi.String("us-east-2"),
//									RegistryId: pulumi.String("123456789012"),
//								},
//								&ecr.ReplicationConfigurationReplicationDestinationArgs{
//									Region:     pulumi.String("us-west-1"),
//									RegistryId: pulumi.String("123456789012"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ReplicationConfiguration struct {
	pulumi.CustomResourceState

	// The account ID of the destination registry.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// The replication configuration for a registry.
	ReplicationConfiguration ReplicationConfigurationTypeOutput `pulumi:"replicationConfiguration"`
}

// NewReplicationConfiguration registers a new resource with the given unique name, arguments, and options.
func NewReplicationConfiguration(ctx *pulumi.Context,
	name string, args *ReplicationConfigurationArgs, opts ...pulumi.ResourceOption) (*ReplicationConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReplicationConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReplicationConfiguration
	err := ctx.RegisterResource("aws-native:ecr:ReplicationConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationConfiguration gets an existing ReplicationConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationConfigurationState, opts ...pulumi.ResourceOption) (*ReplicationConfiguration, error) {
	var resource ReplicationConfiguration
	err := ctx.ReadResource("aws-native:ecr:ReplicationConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationConfiguration resources.
type replicationConfigurationState struct {
}

type ReplicationConfigurationState struct {
}

func (ReplicationConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationConfigurationState)(nil)).Elem()
}

type replicationConfigurationArgs struct {
	// The replication configuration for a registry.
	ReplicationConfiguration ReplicationConfigurationType `pulumi:"replicationConfiguration"`
}

// The set of arguments for constructing a ReplicationConfiguration resource.
type ReplicationConfigurationArgs struct {
	// The replication configuration for a registry.
	ReplicationConfiguration ReplicationConfigurationTypeInput
}

func (ReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationConfigurationArgs)(nil)).Elem()
}

type ReplicationConfigurationInput interface {
	pulumi.Input

	ToReplicationConfigurationOutput() ReplicationConfigurationOutput
	ToReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationOutput
}

func (*ReplicationConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfiguration)(nil)).Elem()
}

func (i *ReplicationConfiguration) ToReplicationConfigurationOutput() ReplicationConfigurationOutput {
	return i.ToReplicationConfigurationOutputWithContext(context.Background())
}

func (i *ReplicationConfiguration) ToReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationConfigurationOutput)
}

type ReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfiguration)(nil)).Elem()
}

func (o ReplicationConfigurationOutput) ToReplicationConfigurationOutput() ReplicationConfigurationOutput {
	return o
}

func (o ReplicationConfigurationOutput) ToReplicationConfigurationOutputWithContext(ctx context.Context) ReplicationConfigurationOutput {
	return o
}

// The account ID of the destination registry.
func (o ReplicationConfigurationOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationConfiguration) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// The replication configuration for a registry.
func (o ReplicationConfigurationOutput) ReplicationConfiguration() ReplicationConfigurationTypeOutput {
	return o.ApplyT(func(v *ReplicationConfiguration) ReplicationConfigurationTypeOutput {
		return v.ReplicationConfiguration
	}).(ReplicationConfigurationTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigurationInput)(nil)).Elem(), &ReplicationConfiguration{})
	pulumi.RegisterOutputType(ReplicationConfigurationOutput{})
}
