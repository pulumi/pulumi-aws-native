// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::ECR::PullThroughCacheRule resource configures the upstream registry configuration details for an Amazon Elastic Container Registry (Amazon Private ECR) pull-through cache.
func LookupPullThroughCacheRule(ctx *pulumi.Context, args *LookupPullThroughCacheRuleArgs, opts ...pulumi.InvokeOption) (*LookupPullThroughCacheRuleResult, error) {
	var rv LookupPullThroughCacheRuleResult
	err := ctx.Invoke("aws-native:ecr:getPullThroughCacheRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPullThroughCacheRuleArgs struct {
	// The ECRRepositoryPrefix is a custom alias for upstream registry url.
	EcrRepositoryPrefix string `pulumi:"ecrRepositoryPrefix"`
}

type LookupPullThroughCacheRuleResult struct {
}

func LookupPullThroughCacheRuleOutput(ctx *pulumi.Context, args LookupPullThroughCacheRuleOutputArgs, opts ...pulumi.InvokeOption) LookupPullThroughCacheRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPullThroughCacheRuleResult, error) {
			args := v.(LookupPullThroughCacheRuleArgs)
			r, err := LookupPullThroughCacheRule(ctx, &args, opts...)
			var s LookupPullThroughCacheRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPullThroughCacheRuleResultOutput)
}

type LookupPullThroughCacheRuleOutputArgs struct {
	// The ECRRepositoryPrefix is a custom alias for upstream registry url.
	EcrRepositoryPrefix pulumi.StringInput `pulumi:"ecrRepositoryPrefix"`
}

func (LookupPullThroughCacheRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPullThroughCacheRuleArgs)(nil)).Elem()
}

type LookupPullThroughCacheRuleResultOutput struct{ *pulumi.OutputState }

func (LookupPullThroughCacheRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPullThroughCacheRuleResult)(nil)).Elem()
}

func (o LookupPullThroughCacheRuleResultOutput) ToLookupPullThroughCacheRuleResultOutput() LookupPullThroughCacheRuleResultOutput {
	return o
}

func (o LookupPullThroughCacheRuleResultOutput) ToLookupPullThroughCacheRuleResultOutputWithContext(ctx context.Context) LookupPullThroughCacheRuleResultOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LookupPullThroughCacheRuleResultOutput{})
}
