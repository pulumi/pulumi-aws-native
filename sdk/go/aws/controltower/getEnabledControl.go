// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package controltower

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Enables a control on a specified target.
func LookupEnabledControl(ctx *pulumi.Context, args *LookupEnabledControlArgs, opts ...pulumi.InvokeOption) (*LookupEnabledControlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnabledControlResult
	err := ctx.Invoke("aws-native:controltower:getEnabledControl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEnabledControlArgs struct {
	// Arn of the control.
	ControlIdentifier string `pulumi:"controlIdentifier"`
	// Arn for Organizational unit to which the control needs to be applied
	TargetIdentifier string `pulumi:"targetIdentifier"`
}

type LookupEnabledControlResult struct {
	// Parameters to configure the enabled control behavior.
	Parameters []EnabledControlParameter `pulumi:"parameters"`
	// A set of tags to assign to the enabled control.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupEnabledControlOutput(ctx *pulumi.Context, args LookupEnabledControlOutputArgs, opts ...pulumi.InvokeOption) LookupEnabledControlResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEnabledControlResultOutput, error) {
			args := v.(LookupEnabledControlArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:controltower:getEnabledControl", args, LookupEnabledControlResultOutput{}, options).(LookupEnabledControlResultOutput), nil
		}).(LookupEnabledControlResultOutput)
}

type LookupEnabledControlOutputArgs struct {
	// Arn of the control.
	ControlIdentifier pulumi.StringInput `pulumi:"controlIdentifier"`
	// Arn for Organizational unit to which the control needs to be applied
	TargetIdentifier pulumi.StringInput `pulumi:"targetIdentifier"`
}

func (LookupEnabledControlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnabledControlArgs)(nil)).Elem()
}

type LookupEnabledControlResultOutput struct{ *pulumi.OutputState }

func (LookupEnabledControlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnabledControlResult)(nil)).Elem()
}

func (o LookupEnabledControlResultOutput) ToLookupEnabledControlResultOutput() LookupEnabledControlResultOutput {
	return o
}

func (o LookupEnabledControlResultOutput) ToLookupEnabledControlResultOutputWithContext(ctx context.Context) LookupEnabledControlResultOutput {
	return o
}

// Parameters to configure the enabled control behavior.
func (o LookupEnabledControlResultOutput) Parameters() EnabledControlParameterArrayOutput {
	return o.ApplyT(func(v LookupEnabledControlResult) []EnabledControlParameter { return v.Parameters }).(EnabledControlParameterArrayOutput)
}

// A set of tags to assign to the enabled control.
func (o LookupEnabledControlResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupEnabledControlResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnabledControlResultOutput{})
}
