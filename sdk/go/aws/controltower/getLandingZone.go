// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package controltower

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::ControlTower::LandingZone Resource Type
func LookupLandingZone(ctx *pulumi.Context, args *LookupLandingZoneArgs, opts ...pulumi.InvokeOption) (*LookupLandingZoneResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLandingZoneResult
	err := ctx.Invoke("aws-native:controltower:getLandingZone", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLandingZoneArgs struct {
	// The unique identifier of the landing zone.
	LandingZoneIdentifier string `pulumi:"landingZoneIdentifier"`
}

type LookupLandingZoneResult struct {
	// The ARN of the landing zone.
	Arn *string `pulumi:"arn"`
	// The drift status of the landing zone.
	DriftStatus *LandingZoneDriftStatus `pulumi:"driftStatus"`
	// The unique identifier of the landing zone.
	LandingZoneIdentifier *string `pulumi:"landingZoneIdentifier"`
	// The latest available version of the landing zone.
	LatestAvailableVersion *string `pulumi:"latestAvailableVersion"`
	// The landing zone manifest JSON text file that specifies the landing zone configurations.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::ControlTower::LandingZone` for more information about the expected schema for this property.
	Manifest interface{} `pulumi:"manifest"`
	// The landing zone deployment status. One of `ACTIVE` , `PROCESSING` , `FAILED` .
	Status *LandingZoneStatus `pulumi:"status"`
	// Tags to be applied to the landing zone.
	Tags []aws.Tag `pulumi:"tags"`
	// The landing zone's current deployed version.
	Version *string `pulumi:"version"`
}

func LookupLandingZoneOutput(ctx *pulumi.Context, args LookupLandingZoneOutputArgs, opts ...pulumi.InvokeOption) LookupLandingZoneResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLandingZoneResultOutput, error) {
			args := v.(LookupLandingZoneArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupLandingZoneResult
			secret, err := ctx.InvokePackageRaw("aws-native:controltower:getLandingZone", args, &rv, "", opts...)
			if err != nil {
				return LookupLandingZoneResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupLandingZoneResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupLandingZoneResultOutput), nil
			}
			return output, nil
		}).(LookupLandingZoneResultOutput)
}

type LookupLandingZoneOutputArgs struct {
	// The unique identifier of the landing zone.
	LandingZoneIdentifier pulumi.StringInput `pulumi:"landingZoneIdentifier"`
}

func (LookupLandingZoneOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLandingZoneArgs)(nil)).Elem()
}

type LookupLandingZoneResultOutput struct{ *pulumi.OutputState }

func (LookupLandingZoneResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLandingZoneResult)(nil)).Elem()
}

func (o LookupLandingZoneResultOutput) ToLookupLandingZoneResultOutput() LookupLandingZoneResultOutput {
	return o
}

func (o LookupLandingZoneResultOutput) ToLookupLandingZoneResultOutputWithContext(ctx context.Context) LookupLandingZoneResultOutput {
	return o
}

// The ARN of the landing zone.
func (o LookupLandingZoneResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The drift status of the landing zone.
func (o LookupLandingZoneResultOutput) DriftStatus() LandingZoneDriftStatusPtrOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) *LandingZoneDriftStatus { return v.DriftStatus }).(LandingZoneDriftStatusPtrOutput)
}

// The unique identifier of the landing zone.
func (o LookupLandingZoneResultOutput) LandingZoneIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) *string { return v.LandingZoneIdentifier }).(pulumi.StringPtrOutput)
}

// The latest available version of the landing zone.
func (o LookupLandingZoneResultOutput) LatestAvailableVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) *string { return v.LatestAvailableVersion }).(pulumi.StringPtrOutput)
}

// The landing zone manifest JSON text file that specifies the landing zone configurations.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::ControlTower::LandingZone` for more information about the expected schema for this property.
func (o LookupLandingZoneResultOutput) Manifest() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) interface{} { return v.Manifest }).(pulumi.AnyOutput)
}

// The landing zone deployment status. One of `ACTIVE` , `PROCESSING` , `FAILED` .
func (o LookupLandingZoneResultOutput) Status() LandingZoneStatusPtrOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) *LandingZoneStatus { return v.Status }).(LandingZoneStatusPtrOutput)
}

// Tags to be applied to the landing zone.
func (o LookupLandingZoneResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The landing zone's current deployed version.
func (o LookupLandingZoneResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLandingZoneResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLandingZoneResultOutput{})
}
