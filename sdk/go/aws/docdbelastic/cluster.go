// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package docdbelastic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::DocDBElastic::Cluster Amazon DocumentDB (with MongoDB compatibility) Elastic Scale resource describes a Cluster
type Cluster struct {
	pulumi.CustomResourceState

	AdminUserName              pulumi.StringOutput      `pulumi:"adminUserName"`
	AdminUserPassword          pulumi.StringPtrOutput   `pulumi:"adminUserPassword"`
	AuthType                   pulumi.StringOutput      `pulumi:"authType"`
	ClusterArn                 pulumi.StringOutput      `pulumi:"clusterArn"`
	ClusterEndpoint            pulumi.StringOutput      `pulumi:"clusterEndpoint"`
	ClusterName                pulumi.StringOutput      `pulumi:"clusterName"`
	KmsKeyId                   pulumi.StringPtrOutput   `pulumi:"kmsKeyId"`
	PreferredMaintenanceWindow pulumi.StringPtrOutput   `pulumi:"preferredMaintenanceWindow"`
	ShardCapacity              pulumi.IntOutput         `pulumi:"shardCapacity"`
	ShardCount                 pulumi.IntOutput         `pulumi:"shardCount"`
	SubnetIds                  pulumi.StringArrayOutput `pulumi:"subnetIds"`
	Tags                       aws.TagArrayOutput       `pulumi:"tags"`
	VpcSecurityGroupIds        pulumi.StringArrayOutput `pulumi:"vpcSecurityGroupIds"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminUserName == nil {
		return nil, errors.New("invalid value for required argument 'AdminUserName'")
	}
	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	if args.ShardCapacity == nil {
		return nil, errors.New("invalid value for required argument 'ShardCapacity'")
	}
	if args.ShardCount == nil {
		return nil, errors.New("invalid value for required argument 'ShardCount'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"adminUserName",
		"authType",
		"clusterName",
		"kmsKeyId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws-native:docdbelastic:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:docdbelastic:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AdminUserName              string    `pulumi:"adminUserName"`
	AdminUserPassword          *string   `pulumi:"adminUserPassword"`
	AuthType                   string    `pulumi:"authType"`
	ClusterName                *string   `pulumi:"clusterName"`
	KmsKeyId                   *string   `pulumi:"kmsKeyId"`
	PreferredMaintenanceWindow *string   `pulumi:"preferredMaintenanceWindow"`
	ShardCapacity              int       `pulumi:"shardCapacity"`
	ShardCount                 int       `pulumi:"shardCount"`
	SubnetIds                  []string  `pulumi:"subnetIds"`
	Tags                       []aws.Tag `pulumi:"tags"`
	VpcSecurityGroupIds        []string  `pulumi:"vpcSecurityGroupIds"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AdminUserName              pulumi.StringInput
	AdminUserPassword          pulumi.StringPtrInput
	AuthType                   pulumi.StringInput
	ClusterName                pulumi.StringPtrInput
	KmsKeyId                   pulumi.StringPtrInput
	PreferredMaintenanceWindow pulumi.StringPtrInput
	ShardCapacity              pulumi.IntInput
	ShardCount                 pulumi.IntInput
	SubnetIds                  pulumi.StringArrayInput
	Tags                       aws.TagArrayInput
	VpcSecurityGroupIds        pulumi.StringArrayInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AdminUserName }).(pulumi.StringOutput)
}

func (o ClusterOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.AdminUserPassword }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

func (o ClusterOutput) ClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterArn }).(pulumi.StringOutput)
}

func (o ClusterOutput) ClusterEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterEndpoint }).(pulumi.StringOutput)
}

func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ClusterOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) PreferredMaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.PreferredMaintenanceWindow }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) ShardCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ShardCapacity }).(pulumi.IntOutput)
}

func (o ClusterOutput) ShardCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ShardCount }).(pulumi.IntOutput)
}

func (o ClusterOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Cluster) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o ClusterOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
