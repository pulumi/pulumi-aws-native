// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iottwinmaker

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// An object that sets information about a composite component type.
type ComponentTypeCompositeComponentType struct {
	// The id of the composite component type.
	ComponentTypeId *string `pulumi:"componentTypeId"`
}

// ComponentTypeCompositeComponentTypeInput is an input type that accepts ComponentTypeCompositeComponentTypeArgs and ComponentTypeCompositeComponentTypeOutput values.
// You can construct a concrete instance of `ComponentTypeCompositeComponentTypeInput` via:
//
//	ComponentTypeCompositeComponentTypeArgs{...}
type ComponentTypeCompositeComponentTypeInput interface {
	pulumi.Input

	ToComponentTypeCompositeComponentTypeOutput() ComponentTypeCompositeComponentTypeOutput
	ToComponentTypeCompositeComponentTypeOutputWithContext(context.Context) ComponentTypeCompositeComponentTypeOutput
}

// An object that sets information about a composite component type.
type ComponentTypeCompositeComponentTypeArgs struct {
	// The id of the composite component type.
	ComponentTypeId pulumi.StringPtrInput `pulumi:"componentTypeId"`
}

func (ComponentTypeCompositeComponentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeCompositeComponentType)(nil)).Elem()
}

func (i ComponentTypeCompositeComponentTypeArgs) ToComponentTypeCompositeComponentTypeOutput() ComponentTypeCompositeComponentTypeOutput {
	return i.ToComponentTypeCompositeComponentTypeOutputWithContext(context.Background())
}

func (i ComponentTypeCompositeComponentTypeArgs) ToComponentTypeCompositeComponentTypeOutputWithContext(ctx context.Context) ComponentTypeCompositeComponentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeCompositeComponentTypeOutput)
}

// ComponentTypeCompositeComponentTypeMapInput is an input type that accepts ComponentTypeCompositeComponentTypeMap and ComponentTypeCompositeComponentTypeMapOutput values.
// You can construct a concrete instance of `ComponentTypeCompositeComponentTypeMapInput` via:
//
//	ComponentTypeCompositeComponentTypeMap{ "key": ComponentTypeCompositeComponentTypeArgs{...} }
type ComponentTypeCompositeComponentTypeMapInput interface {
	pulumi.Input

	ToComponentTypeCompositeComponentTypeMapOutput() ComponentTypeCompositeComponentTypeMapOutput
	ToComponentTypeCompositeComponentTypeMapOutputWithContext(context.Context) ComponentTypeCompositeComponentTypeMapOutput
}

type ComponentTypeCompositeComponentTypeMap map[string]ComponentTypeCompositeComponentTypeInput

func (ComponentTypeCompositeComponentTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypeCompositeComponentType)(nil)).Elem()
}

func (i ComponentTypeCompositeComponentTypeMap) ToComponentTypeCompositeComponentTypeMapOutput() ComponentTypeCompositeComponentTypeMapOutput {
	return i.ToComponentTypeCompositeComponentTypeMapOutputWithContext(context.Background())
}

func (i ComponentTypeCompositeComponentTypeMap) ToComponentTypeCompositeComponentTypeMapOutputWithContext(ctx context.Context) ComponentTypeCompositeComponentTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeCompositeComponentTypeMapOutput)
}

// An object that sets information about a composite component type.
type ComponentTypeCompositeComponentTypeOutput struct{ *pulumi.OutputState }

func (ComponentTypeCompositeComponentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeCompositeComponentType)(nil)).Elem()
}

func (o ComponentTypeCompositeComponentTypeOutput) ToComponentTypeCompositeComponentTypeOutput() ComponentTypeCompositeComponentTypeOutput {
	return o
}

func (o ComponentTypeCompositeComponentTypeOutput) ToComponentTypeCompositeComponentTypeOutputWithContext(ctx context.Context) ComponentTypeCompositeComponentTypeOutput {
	return o
}

// The id of the composite component type.
func (o ComponentTypeCompositeComponentTypeOutput) ComponentTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeCompositeComponentType) *string { return v.ComponentTypeId }).(pulumi.StringPtrOutput)
}

type ComponentTypeCompositeComponentTypeMapOutput struct{ *pulumi.OutputState }

func (ComponentTypeCompositeComponentTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypeCompositeComponentType)(nil)).Elem()
}

func (o ComponentTypeCompositeComponentTypeMapOutput) ToComponentTypeCompositeComponentTypeMapOutput() ComponentTypeCompositeComponentTypeMapOutput {
	return o
}

func (o ComponentTypeCompositeComponentTypeMapOutput) ToComponentTypeCompositeComponentTypeMapOutputWithContext(ctx context.Context) ComponentTypeCompositeComponentTypeMapOutput {
	return o
}

func (o ComponentTypeCompositeComponentTypeMapOutput) MapIndex(k pulumi.StringInput) ComponentTypeCompositeComponentTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentTypeCompositeComponentType {
		return vs[0].(map[string]ComponentTypeCompositeComponentType)[vs[1].(string)]
	}).(ComponentTypeCompositeComponentTypeOutput)
}

// The data connector.
type ComponentTypeDataConnector struct {
	// A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
	IsNative *bool `pulumi:"isNative"`
	// The Lambda function associated with this data connector.
	Lambda *ComponentTypeLambdaFunction `pulumi:"lambda"`
}

// ComponentTypeDataConnectorInput is an input type that accepts ComponentTypeDataConnectorArgs and ComponentTypeDataConnectorOutput values.
// You can construct a concrete instance of `ComponentTypeDataConnectorInput` via:
//
//	ComponentTypeDataConnectorArgs{...}
type ComponentTypeDataConnectorInput interface {
	pulumi.Input

	ToComponentTypeDataConnectorOutput() ComponentTypeDataConnectorOutput
	ToComponentTypeDataConnectorOutputWithContext(context.Context) ComponentTypeDataConnectorOutput
}

// The data connector.
type ComponentTypeDataConnectorArgs struct {
	// A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
	IsNative pulumi.BoolPtrInput `pulumi:"isNative"`
	// The Lambda function associated with this data connector.
	Lambda ComponentTypeLambdaFunctionPtrInput `pulumi:"lambda"`
}

func (ComponentTypeDataConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataConnector)(nil)).Elem()
}

func (i ComponentTypeDataConnectorArgs) ToComponentTypeDataConnectorOutput() ComponentTypeDataConnectorOutput {
	return i.ToComponentTypeDataConnectorOutputWithContext(context.Background())
}

func (i ComponentTypeDataConnectorArgs) ToComponentTypeDataConnectorOutputWithContext(ctx context.Context) ComponentTypeDataConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataConnectorOutput)
}

func (i ComponentTypeDataConnectorArgs) ToComponentTypeDataConnectorPtrOutput() ComponentTypeDataConnectorPtrOutput {
	return i.ToComponentTypeDataConnectorPtrOutputWithContext(context.Background())
}

func (i ComponentTypeDataConnectorArgs) ToComponentTypeDataConnectorPtrOutputWithContext(ctx context.Context) ComponentTypeDataConnectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataConnectorOutput).ToComponentTypeDataConnectorPtrOutputWithContext(ctx)
}

// ComponentTypeDataConnectorPtrInput is an input type that accepts ComponentTypeDataConnectorArgs, ComponentTypeDataConnectorPtr and ComponentTypeDataConnectorPtrOutput values.
// You can construct a concrete instance of `ComponentTypeDataConnectorPtrInput` via:
//
//	        ComponentTypeDataConnectorArgs{...}
//
//	or:
//
//	        nil
type ComponentTypeDataConnectorPtrInput interface {
	pulumi.Input

	ToComponentTypeDataConnectorPtrOutput() ComponentTypeDataConnectorPtrOutput
	ToComponentTypeDataConnectorPtrOutputWithContext(context.Context) ComponentTypeDataConnectorPtrOutput
}

type componentTypeDataConnectorPtrType ComponentTypeDataConnectorArgs

func ComponentTypeDataConnectorPtr(v *ComponentTypeDataConnectorArgs) ComponentTypeDataConnectorPtrInput {
	return (*componentTypeDataConnectorPtrType)(v)
}

func (*componentTypeDataConnectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataConnector)(nil)).Elem()
}

func (i *componentTypeDataConnectorPtrType) ToComponentTypeDataConnectorPtrOutput() ComponentTypeDataConnectorPtrOutput {
	return i.ToComponentTypeDataConnectorPtrOutputWithContext(context.Background())
}

func (i *componentTypeDataConnectorPtrType) ToComponentTypeDataConnectorPtrOutputWithContext(ctx context.Context) ComponentTypeDataConnectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataConnectorPtrOutput)
}

// The data connector.
type ComponentTypeDataConnectorOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataConnector)(nil)).Elem()
}

func (o ComponentTypeDataConnectorOutput) ToComponentTypeDataConnectorOutput() ComponentTypeDataConnectorOutput {
	return o
}

func (o ComponentTypeDataConnectorOutput) ToComponentTypeDataConnectorOutputWithContext(ctx context.Context) ComponentTypeDataConnectorOutput {
	return o
}

func (o ComponentTypeDataConnectorOutput) ToComponentTypeDataConnectorPtrOutput() ComponentTypeDataConnectorPtrOutput {
	return o.ToComponentTypeDataConnectorPtrOutputWithContext(context.Background())
}

func (o ComponentTypeDataConnectorOutput) ToComponentTypeDataConnectorPtrOutputWithContext(ctx context.Context) ComponentTypeDataConnectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTypeDataConnector) *ComponentTypeDataConnector {
		return &v
	}).(ComponentTypeDataConnectorPtrOutput)
}

// A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
func (o ComponentTypeDataConnectorOutput) IsNative() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataConnector) *bool { return v.IsNative }).(pulumi.BoolPtrOutput)
}

// The Lambda function associated with this data connector.
func (o ComponentTypeDataConnectorOutput) Lambda() ComponentTypeLambdaFunctionPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataConnector) *ComponentTypeLambdaFunction { return v.Lambda }).(ComponentTypeLambdaFunctionPtrOutput)
}

type ComponentTypeDataConnectorPtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataConnectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataConnector)(nil)).Elem()
}

func (o ComponentTypeDataConnectorPtrOutput) ToComponentTypeDataConnectorPtrOutput() ComponentTypeDataConnectorPtrOutput {
	return o
}

func (o ComponentTypeDataConnectorPtrOutput) ToComponentTypeDataConnectorPtrOutputWithContext(ctx context.Context) ComponentTypeDataConnectorPtrOutput {
	return o
}

func (o ComponentTypeDataConnectorPtrOutput) Elem() ComponentTypeDataConnectorOutput {
	return o.ApplyT(func(v *ComponentTypeDataConnector) ComponentTypeDataConnector {
		if v != nil {
			return *v
		}
		var ret ComponentTypeDataConnector
		return ret
	}).(ComponentTypeDataConnectorOutput)
}

// A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
func (o ComponentTypeDataConnectorPtrOutput) IsNative() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataConnector) *bool {
		if v == nil {
			return nil
		}
		return v.IsNative
	}).(pulumi.BoolPtrOutput)
}

// The Lambda function associated with this data connector.
func (o ComponentTypeDataConnectorPtrOutput) Lambda() ComponentTypeLambdaFunctionPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataConnector) *ComponentTypeLambdaFunction {
		if v == nil {
			return nil
		}
		return v.Lambda
	}).(ComponentTypeLambdaFunctionPtrOutput)
}

// An object that specifies the data type of a property.
type ComponentTypeDataType struct {
	// The allowed values for this data type.
	AllowedValues []ComponentTypeDataValue `pulumi:"allowedValues"`
	// The nested type in the data type.
	NestedType *ComponentTypeDataType `pulumi:"nestedType"`
	// A relationship that associates a component with another component.
	Relationship *ComponentTypeRelationship `pulumi:"relationship"`
	// The underlying type of the data type.
	Type ComponentTypeDataTypeType `pulumi:"type"`
	// The unit of measure used in this data type.
	UnitOfMeasure *string `pulumi:"unitOfMeasure"`
}

// ComponentTypeDataTypeInput is an input type that accepts ComponentTypeDataTypeArgs and ComponentTypeDataTypeOutput values.
// You can construct a concrete instance of `ComponentTypeDataTypeInput` via:
//
//	ComponentTypeDataTypeArgs{...}
type ComponentTypeDataTypeInput interface {
	pulumi.Input

	ToComponentTypeDataTypeOutput() ComponentTypeDataTypeOutput
	ToComponentTypeDataTypeOutputWithContext(context.Context) ComponentTypeDataTypeOutput
}

// An object that specifies the data type of a property.
type ComponentTypeDataTypeArgs struct {
	// The allowed values for this data type.
	AllowedValues ComponentTypeDataValueArrayInput `pulumi:"allowedValues"`
	// The nested type in the data type.
	NestedType ComponentTypeDataTypePtrInput `pulumi:"nestedType"`
	// A relationship that associates a component with another component.
	Relationship ComponentTypeRelationshipPtrInput `pulumi:"relationship"`
	// The underlying type of the data type.
	Type ComponentTypeDataTypeTypeInput `pulumi:"type"`
	// The unit of measure used in this data type.
	UnitOfMeasure pulumi.StringPtrInput `pulumi:"unitOfMeasure"`
}

func (ComponentTypeDataTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataType)(nil)).Elem()
}

func (i ComponentTypeDataTypeArgs) ToComponentTypeDataTypeOutput() ComponentTypeDataTypeOutput {
	return i.ToComponentTypeDataTypeOutputWithContext(context.Background())
}

func (i ComponentTypeDataTypeArgs) ToComponentTypeDataTypeOutputWithContext(ctx context.Context) ComponentTypeDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataTypeOutput)
}

func (i ComponentTypeDataTypeArgs) ToComponentTypeDataTypePtrOutput() ComponentTypeDataTypePtrOutput {
	return i.ToComponentTypeDataTypePtrOutputWithContext(context.Background())
}

func (i ComponentTypeDataTypeArgs) ToComponentTypeDataTypePtrOutputWithContext(ctx context.Context) ComponentTypeDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataTypeOutput).ToComponentTypeDataTypePtrOutputWithContext(ctx)
}

// ComponentTypeDataTypePtrInput is an input type that accepts ComponentTypeDataTypeArgs, ComponentTypeDataTypePtr and ComponentTypeDataTypePtrOutput values.
// You can construct a concrete instance of `ComponentTypeDataTypePtrInput` via:
//
//	        ComponentTypeDataTypeArgs{...}
//
//	or:
//
//	        nil
type ComponentTypeDataTypePtrInput interface {
	pulumi.Input

	ToComponentTypeDataTypePtrOutput() ComponentTypeDataTypePtrOutput
	ToComponentTypeDataTypePtrOutputWithContext(context.Context) ComponentTypeDataTypePtrOutput
}

type componentTypeDataTypePtrType ComponentTypeDataTypeArgs

func ComponentTypeDataTypePtr(v *ComponentTypeDataTypeArgs) ComponentTypeDataTypePtrInput {
	return (*componentTypeDataTypePtrType)(v)
}

func (*componentTypeDataTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataType)(nil)).Elem()
}

func (i *componentTypeDataTypePtrType) ToComponentTypeDataTypePtrOutput() ComponentTypeDataTypePtrOutput {
	return i.ToComponentTypeDataTypePtrOutputWithContext(context.Background())
}

func (i *componentTypeDataTypePtrType) ToComponentTypeDataTypePtrOutputWithContext(ctx context.Context) ComponentTypeDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataTypePtrOutput)
}

// An object that specifies the data type of a property.
type ComponentTypeDataTypeOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataType)(nil)).Elem()
}

func (o ComponentTypeDataTypeOutput) ToComponentTypeDataTypeOutput() ComponentTypeDataTypeOutput {
	return o
}

func (o ComponentTypeDataTypeOutput) ToComponentTypeDataTypeOutputWithContext(ctx context.Context) ComponentTypeDataTypeOutput {
	return o
}

func (o ComponentTypeDataTypeOutput) ToComponentTypeDataTypePtrOutput() ComponentTypeDataTypePtrOutput {
	return o.ToComponentTypeDataTypePtrOutputWithContext(context.Background())
}

func (o ComponentTypeDataTypeOutput) ToComponentTypeDataTypePtrOutputWithContext(ctx context.Context) ComponentTypeDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTypeDataType) *ComponentTypeDataType {
		return &v
	}).(ComponentTypeDataTypePtrOutput)
}

// The allowed values for this data type.
func (o ComponentTypeDataTypeOutput) AllowedValues() ComponentTypeDataValueArrayOutput {
	return o.ApplyT(func(v ComponentTypeDataType) []ComponentTypeDataValue { return v.AllowedValues }).(ComponentTypeDataValueArrayOutput)
}

// The nested type in the data type.
func (o ComponentTypeDataTypeOutput) NestedType() ComponentTypeDataTypePtrOutput {
	return o.ApplyT(func(v ComponentTypeDataType) *ComponentTypeDataType { return v.NestedType }).(ComponentTypeDataTypePtrOutput)
}

// A relationship that associates a component with another component.
func (o ComponentTypeDataTypeOutput) Relationship() ComponentTypeRelationshipPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataType) *ComponentTypeRelationship { return v.Relationship }).(ComponentTypeRelationshipPtrOutput)
}

// The underlying type of the data type.
func (o ComponentTypeDataTypeOutput) Type() ComponentTypeDataTypeTypeOutput {
	return o.ApplyT(func(v ComponentTypeDataType) ComponentTypeDataTypeType { return v.Type }).(ComponentTypeDataTypeTypeOutput)
}

// The unit of measure used in this data type.
func (o ComponentTypeDataTypeOutput) UnitOfMeasure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataType) *string { return v.UnitOfMeasure }).(pulumi.StringPtrOutput)
}

type ComponentTypeDataTypePtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataType)(nil)).Elem()
}

func (o ComponentTypeDataTypePtrOutput) ToComponentTypeDataTypePtrOutput() ComponentTypeDataTypePtrOutput {
	return o
}

func (o ComponentTypeDataTypePtrOutput) ToComponentTypeDataTypePtrOutputWithContext(ctx context.Context) ComponentTypeDataTypePtrOutput {
	return o
}

func (o ComponentTypeDataTypePtrOutput) Elem() ComponentTypeDataTypeOutput {
	return o.ApplyT(func(v *ComponentTypeDataType) ComponentTypeDataType {
		if v != nil {
			return *v
		}
		var ret ComponentTypeDataType
		return ret
	}).(ComponentTypeDataTypeOutput)
}

// The allowed values for this data type.
func (o ComponentTypeDataTypePtrOutput) AllowedValues() ComponentTypeDataValueArrayOutput {
	return o.ApplyT(func(v *ComponentTypeDataType) []ComponentTypeDataValue {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(ComponentTypeDataValueArrayOutput)
}

// The nested type in the data type.
func (o ComponentTypeDataTypePtrOutput) NestedType() ComponentTypeDataTypePtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataType) *ComponentTypeDataType {
		if v == nil {
			return nil
		}
		return v.NestedType
	}).(ComponentTypeDataTypePtrOutput)
}

// A relationship that associates a component with another component.
func (o ComponentTypeDataTypePtrOutput) Relationship() ComponentTypeRelationshipPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataType) *ComponentTypeRelationship {
		if v == nil {
			return nil
		}
		return v.Relationship
	}).(ComponentTypeRelationshipPtrOutput)
}

// The underlying type of the data type.
func (o ComponentTypeDataTypePtrOutput) Type() ComponentTypeDataTypeTypePtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataType) *ComponentTypeDataTypeType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(ComponentTypeDataTypeTypePtrOutput)
}

// The unit of measure used in this data type.
func (o ComponentTypeDataTypePtrOutput) UnitOfMeasure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataType) *string {
		if v == nil {
			return nil
		}
		return v.UnitOfMeasure
	}).(pulumi.StringPtrOutput)
}

// An object that specifies a value for a property.
type ComponentTypeDataValue struct {
	// A Boolean value.
	BooleanValue *bool `pulumi:"booleanValue"`
	// A double value.
	DoubleValue *float64 `pulumi:"doubleValue"`
	// An expression that produces the value.
	Expression *string `pulumi:"expression"`
	// An integer value.
	IntegerValue *int `pulumi:"integerValue"`
	// A list of multiple values.
	ListValue []ComponentTypeDataValue `pulumi:"listValue"`
	// A long value.
	LongValue *float64 `pulumi:"longValue"`
	// An object that maps strings to multiple DataValue objects.
	MapValue map[string]ComponentTypeDataValue `pulumi:"mapValue"`
	// A value that relates a component to another component.
	RelationshipValue *ComponentTypeDataValueRelationshipValueProperties `pulumi:"relationshipValue"`
	// A string value.
	StringValue *string `pulumi:"stringValue"`
}

// ComponentTypeDataValueInput is an input type that accepts ComponentTypeDataValueArgs and ComponentTypeDataValueOutput values.
// You can construct a concrete instance of `ComponentTypeDataValueInput` via:
//
//	ComponentTypeDataValueArgs{...}
type ComponentTypeDataValueInput interface {
	pulumi.Input

	ToComponentTypeDataValueOutput() ComponentTypeDataValueOutput
	ToComponentTypeDataValueOutputWithContext(context.Context) ComponentTypeDataValueOutput
}

// An object that specifies a value for a property.
type ComponentTypeDataValueArgs struct {
	// A Boolean value.
	BooleanValue pulumi.BoolPtrInput `pulumi:"booleanValue"`
	// A double value.
	DoubleValue pulumi.Float64PtrInput `pulumi:"doubleValue"`
	// An expression that produces the value.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// An integer value.
	IntegerValue pulumi.IntPtrInput `pulumi:"integerValue"`
	// A list of multiple values.
	ListValue ComponentTypeDataValueArrayInput `pulumi:"listValue"`
	// A long value.
	LongValue pulumi.Float64PtrInput `pulumi:"longValue"`
	// An object that maps strings to multiple DataValue objects.
	MapValue ComponentTypeDataValueMapInput `pulumi:"mapValue"`
	// A value that relates a component to another component.
	RelationshipValue ComponentTypeDataValueRelationshipValuePropertiesPtrInput `pulumi:"relationshipValue"`
	// A string value.
	StringValue pulumi.StringPtrInput `pulumi:"stringValue"`
}

func (ComponentTypeDataValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataValue)(nil)).Elem()
}

func (i ComponentTypeDataValueArgs) ToComponentTypeDataValueOutput() ComponentTypeDataValueOutput {
	return i.ToComponentTypeDataValueOutputWithContext(context.Background())
}

func (i ComponentTypeDataValueArgs) ToComponentTypeDataValueOutputWithContext(ctx context.Context) ComponentTypeDataValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValueOutput)
}

func (i ComponentTypeDataValueArgs) ToComponentTypeDataValuePtrOutput() ComponentTypeDataValuePtrOutput {
	return i.ToComponentTypeDataValuePtrOutputWithContext(context.Background())
}

func (i ComponentTypeDataValueArgs) ToComponentTypeDataValuePtrOutputWithContext(ctx context.Context) ComponentTypeDataValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValueOutput).ToComponentTypeDataValuePtrOutputWithContext(ctx)
}

// ComponentTypeDataValuePtrInput is an input type that accepts ComponentTypeDataValueArgs, ComponentTypeDataValuePtr and ComponentTypeDataValuePtrOutput values.
// You can construct a concrete instance of `ComponentTypeDataValuePtrInput` via:
//
//	        ComponentTypeDataValueArgs{...}
//
//	or:
//
//	        nil
type ComponentTypeDataValuePtrInput interface {
	pulumi.Input

	ToComponentTypeDataValuePtrOutput() ComponentTypeDataValuePtrOutput
	ToComponentTypeDataValuePtrOutputWithContext(context.Context) ComponentTypeDataValuePtrOutput
}

type componentTypeDataValuePtrType ComponentTypeDataValueArgs

func ComponentTypeDataValuePtr(v *ComponentTypeDataValueArgs) ComponentTypeDataValuePtrInput {
	return (*componentTypeDataValuePtrType)(v)
}

func (*componentTypeDataValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataValue)(nil)).Elem()
}

func (i *componentTypeDataValuePtrType) ToComponentTypeDataValuePtrOutput() ComponentTypeDataValuePtrOutput {
	return i.ToComponentTypeDataValuePtrOutputWithContext(context.Background())
}

func (i *componentTypeDataValuePtrType) ToComponentTypeDataValuePtrOutputWithContext(ctx context.Context) ComponentTypeDataValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValuePtrOutput)
}

// ComponentTypeDataValueArrayInput is an input type that accepts ComponentTypeDataValueArray and ComponentTypeDataValueArrayOutput values.
// You can construct a concrete instance of `ComponentTypeDataValueArrayInput` via:
//
//	ComponentTypeDataValueArray{ ComponentTypeDataValueArgs{...} }
type ComponentTypeDataValueArrayInput interface {
	pulumi.Input

	ToComponentTypeDataValueArrayOutput() ComponentTypeDataValueArrayOutput
	ToComponentTypeDataValueArrayOutputWithContext(context.Context) ComponentTypeDataValueArrayOutput
}

type ComponentTypeDataValueArray []ComponentTypeDataValueInput

func (ComponentTypeDataValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentTypeDataValue)(nil)).Elem()
}

func (i ComponentTypeDataValueArray) ToComponentTypeDataValueArrayOutput() ComponentTypeDataValueArrayOutput {
	return i.ToComponentTypeDataValueArrayOutputWithContext(context.Background())
}

func (i ComponentTypeDataValueArray) ToComponentTypeDataValueArrayOutputWithContext(ctx context.Context) ComponentTypeDataValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValueArrayOutput)
}

// ComponentTypeDataValueMapInput is an input type that accepts ComponentTypeDataValueMap and ComponentTypeDataValueMapOutput values.
// You can construct a concrete instance of `ComponentTypeDataValueMapInput` via:
//
//	ComponentTypeDataValueMap{ "key": ComponentTypeDataValueArgs{...} }
type ComponentTypeDataValueMapInput interface {
	pulumi.Input

	ToComponentTypeDataValueMapOutput() ComponentTypeDataValueMapOutput
	ToComponentTypeDataValueMapOutputWithContext(context.Context) ComponentTypeDataValueMapOutput
}

type ComponentTypeDataValueMap map[string]ComponentTypeDataValueInput

func (ComponentTypeDataValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypeDataValue)(nil)).Elem()
}

func (i ComponentTypeDataValueMap) ToComponentTypeDataValueMapOutput() ComponentTypeDataValueMapOutput {
	return i.ToComponentTypeDataValueMapOutputWithContext(context.Background())
}

func (i ComponentTypeDataValueMap) ToComponentTypeDataValueMapOutputWithContext(ctx context.Context) ComponentTypeDataValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValueMapOutput)
}

// An object that specifies a value for a property.
type ComponentTypeDataValueOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataValue)(nil)).Elem()
}

func (o ComponentTypeDataValueOutput) ToComponentTypeDataValueOutput() ComponentTypeDataValueOutput {
	return o
}

func (o ComponentTypeDataValueOutput) ToComponentTypeDataValueOutputWithContext(ctx context.Context) ComponentTypeDataValueOutput {
	return o
}

func (o ComponentTypeDataValueOutput) ToComponentTypeDataValuePtrOutput() ComponentTypeDataValuePtrOutput {
	return o.ToComponentTypeDataValuePtrOutputWithContext(context.Background())
}

func (o ComponentTypeDataValueOutput) ToComponentTypeDataValuePtrOutputWithContext(ctx context.Context) ComponentTypeDataValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTypeDataValue) *ComponentTypeDataValue {
		return &v
	}).(ComponentTypeDataValuePtrOutput)
}

// A Boolean value.
func (o ComponentTypeDataValueOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) *bool { return v.BooleanValue }).(pulumi.BoolPtrOutput)
}

// A double value.
func (o ComponentTypeDataValueOutput) DoubleValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) *float64 { return v.DoubleValue }).(pulumi.Float64PtrOutput)
}

// An expression that produces the value.
func (o ComponentTypeDataValueOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// An integer value.
func (o ComponentTypeDataValueOutput) IntegerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) *int { return v.IntegerValue }).(pulumi.IntPtrOutput)
}

// A list of multiple values.
func (o ComponentTypeDataValueOutput) ListValue() ComponentTypeDataValueArrayOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) []ComponentTypeDataValue { return v.ListValue }).(ComponentTypeDataValueArrayOutput)
}

// A long value.
func (o ComponentTypeDataValueOutput) LongValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) *float64 { return v.LongValue }).(pulumi.Float64PtrOutput)
}

// An object that maps strings to multiple DataValue objects.
func (o ComponentTypeDataValueOutput) MapValue() ComponentTypeDataValueMapOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) map[string]ComponentTypeDataValue { return v.MapValue }).(ComponentTypeDataValueMapOutput)
}

// A value that relates a component to another component.
func (o ComponentTypeDataValueOutput) RelationshipValue() ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) *ComponentTypeDataValueRelationshipValueProperties {
		return v.RelationshipValue
	}).(ComponentTypeDataValueRelationshipValuePropertiesPtrOutput)
}

// A string value.
func (o ComponentTypeDataValueOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValue) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

type ComponentTypeDataValuePtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataValue)(nil)).Elem()
}

func (o ComponentTypeDataValuePtrOutput) ToComponentTypeDataValuePtrOutput() ComponentTypeDataValuePtrOutput {
	return o
}

func (o ComponentTypeDataValuePtrOutput) ToComponentTypeDataValuePtrOutputWithContext(ctx context.Context) ComponentTypeDataValuePtrOutput {
	return o
}

func (o ComponentTypeDataValuePtrOutput) Elem() ComponentTypeDataValueOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) ComponentTypeDataValue {
		if v != nil {
			return *v
		}
		var ret ComponentTypeDataValue
		return ret
	}).(ComponentTypeDataValueOutput)
}

// A Boolean value.
func (o ComponentTypeDataValuePtrOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) *bool {
		if v == nil {
			return nil
		}
		return v.BooleanValue
	}).(pulumi.BoolPtrOutput)
}

// A double value.
func (o ComponentTypeDataValuePtrOutput) DoubleValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) *float64 {
		if v == nil {
			return nil
		}
		return v.DoubleValue
	}).(pulumi.Float64PtrOutput)
}

// An expression that produces the value.
func (o ComponentTypeDataValuePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// An integer value.
func (o ComponentTypeDataValuePtrOutput) IntegerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) *int {
		if v == nil {
			return nil
		}
		return v.IntegerValue
	}).(pulumi.IntPtrOutput)
}

// A list of multiple values.
func (o ComponentTypeDataValuePtrOutput) ListValue() ComponentTypeDataValueArrayOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) []ComponentTypeDataValue {
		if v == nil {
			return nil
		}
		return v.ListValue
	}).(ComponentTypeDataValueArrayOutput)
}

// A long value.
func (o ComponentTypeDataValuePtrOutput) LongValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) *float64 {
		if v == nil {
			return nil
		}
		return v.LongValue
	}).(pulumi.Float64PtrOutput)
}

// An object that maps strings to multiple DataValue objects.
func (o ComponentTypeDataValuePtrOutput) MapValue() ComponentTypeDataValueMapOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) map[string]ComponentTypeDataValue {
		if v == nil {
			return nil
		}
		return v.MapValue
	}).(ComponentTypeDataValueMapOutput)
}

// A value that relates a component to another component.
func (o ComponentTypeDataValuePtrOutput) RelationshipValue() ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) *ComponentTypeDataValueRelationshipValueProperties {
		if v == nil {
			return nil
		}
		return v.RelationshipValue
	}).(ComponentTypeDataValueRelationshipValuePropertiesPtrOutput)
}

// A string value.
func (o ComponentTypeDataValuePtrOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValue) *string {
		if v == nil {
			return nil
		}
		return v.StringValue
	}).(pulumi.StringPtrOutput)
}

type ComponentTypeDataValueArrayOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentTypeDataValue)(nil)).Elem()
}

func (o ComponentTypeDataValueArrayOutput) ToComponentTypeDataValueArrayOutput() ComponentTypeDataValueArrayOutput {
	return o
}

func (o ComponentTypeDataValueArrayOutput) ToComponentTypeDataValueArrayOutputWithContext(ctx context.Context) ComponentTypeDataValueArrayOutput {
	return o
}

func (o ComponentTypeDataValueArrayOutput) Index(i pulumi.IntInput) ComponentTypeDataValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentTypeDataValue {
		return vs[0].([]ComponentTypeDataValue)[vs[1].(int)]
	}).(ComponentTypeDataValueOutput)
}

type ComponentTypeDataValueMapOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypeDataValue)(nil)).Elem()
}

func (o ComponentTypeDataValueMapOutput) ToComponentTypeDataValueMapOutput() ComponentTypeDataValueMapOutput {
	return o
}

func (o ComponentTypeDataValueMapOutput) ToComponentTypeDataValueMapOutputWithContext(ctx context.Context) ComponentTypeDataValueMapOutput {
	return o
}

func (o ComponentTypeDataValueMapOutput) MapIndex(k pulumi.StringInput) ComponentTypeDataValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentTypeDataValue {
		return vs[0].(map[string]ComponentTypeDataValue)[vs[1].(string)]
	}).(ComponentTypeDataValueOutput)
}

// A value that relates a component to another component.
type ComponentTypeDataValueRelationshipValueProperties struct {
	TargetComponentName *string `pulumi:"targetComponentName"`
	TargetEntityId      *string `pulumi:"targetEntityId"`
}

// ComponentTypeDataValueRelationshipValuePropertiesInput is an input type that accepts ComponentTypeDataValueRelationshipValuePropertiesArgs and ComponentTypeDataValueRelationshipValuePropertiesOutput values.
// You can construct a concrete instance of `ComponentTypeDataValueRelationshipValuePropertiesInput` via:
//
//	ComponentTypeDataValueRelationshipValuePropertiesArgs{...}
type ComponentTypeDataValueRelationshipValuePropertiesInput interface {
	pulumi.Input

	ToComponentTypeDataValueRelationshipValuePropertiesOutput() ComponentTypeDataValueRelationshipValuePropertiesOutput
	ToComponentTypeDataValueRelationshipValuePropertiesOutputWithContext(context.Context) ComponentTypeDataValueRelationshipValuePropertiesOutput
}

// A value that relates a component to another component.
type ComponentTypeDataValueRelationshipValuePropertiesArgs struct {
	TargetComponentName pulumi.StringPtrInput `pulumi:"targetComponentName"`
	TargetEntityId      pulumi.StringPtrInput `pulumi:"targetEntityId"`
}

func (ComponentTypeDataValueRelationshipValuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataValueRelationshipValueProperties)(nil)).Elem()
}

func (i ComponentTypeDataValueRelationshipValuePropertiesArgs) ToComponentTypeDataValueRelationshipValuePropertiesOutput() ComponentTypeDataValueRelationshipValuePropertiesOutput {
	return i.ToComponentTypeDataValueRelationshipValuePropertiesOutputWithContext(context.Background())
}

func (i ComponentTypeDataValueRelationshipValuePropertiesArgs) ToComponentTypeDataValueRelationshipValuePropertiesOutputWithContext(ctx context.Context) ComponentTypeDataValueRelationshipValuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValueRelationshipValuePropertiesOutput)
}

func (i ComponentTypeDataValueRelationshipValuePropertiesArgs) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutput() ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return i.ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Background())
}

func (i ComponentTypeDataValueRelationshipValuePropertiesArgs) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValueRelationshipValuePropertiesOutput).ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx)
}

// ComponentTypeDataValueRelationshipValuePropertiesPtrInput is an input type that accepts ComponentTypeDataValueRelationshipValuePropertiesArgs, ComponentTypeDataValueRelationshipValuePropertiesPtr and ComponentTypeDataValueRelationshipValuePropertiesPtrOutput values.
// You can construct a concrete instance of `ComponentTypeDataValueRelationshipValuePropertiesPtrInput` via:
//
//	        ComponentTypeDataValueRelationshipValuePropertiesArgs{...}
//
//	or:
//
//	        nil
type ComponentTypeDataValueRelationshipValuePropertiesPtrInput interface {
	pulumi.Input

	ToComponentTypeDataValueRelationshipValuePropertiesPtrOutput() ComponentTypeDataValueRelationshipValuePropertiesPtrOutput
	ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Context) ComponentTypeDataValueRelationshipValuePropertiesPtrOutput
}

type componentTypeDataValueRelationshipValuePropertiesPtrType ComponentTypeDataValueRelationshipValuePropertiesArgs

func ComponentTypeDataValueRelationshipValuePropertiesPtr(v *ComponentTypeDataValueRelationshipValuePropertiesArgs) ComponentTypeDataValueRelationshipValuePropertiesPtrInput {
	return (*componentTypeDataValueRelationshipValuePropertiesPtrType)(v)
}

func (*componentTypeDataValueRelationshipValuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataValueRelationshipValueProperties)(nil)).Elem()
}

func (i *componentTypeDataValueRelationshipValuePropertiesPtrType) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutput() ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return i.ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Background())
}

func (i *componentTypeDataValueRelationshipValuePropertiesPtrType) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeDataValueRelationshipValuePropertiesPtrOutput)
}

// A value that relates a component to another component.
type ComponentTypeDataValueRelationshipValuePropertiesOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataValueRelationshipValuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeDataValueRelationshipValueProperties)(nil)).Elem()
}

func (o ComponentTypeDataValueRelationshipValuePropertiesOutput) ToComponentTypeDataValueRelationshipValuePropertiesOutput() ComponentTypeDataValueRelationshipValuePropertiesOutput {
	return o
}

func (o ComponentTypeDataValueRelationshipValuePropertiesOutput) ToComponentTypeDataValueRelationshipValuePropertiesOutputWithContext(ctx context.Context) ComponentTypeDataValueRelationshipValuePropertiesOutput {
	return o
}

func (o ComponentTypeDataValueRelationshipValuePropertiesOutput) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutput() ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return o.ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Background())
}

func (o ComponentTypeDataValueRelationshipValuePropertiesOutput) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTypeDataValueRelationshipValueProperties) *ComponentTypeDataValueRelationshipValueProperties {
		return &v
	}).(ComponentTypeDataValueRelationshipValuePropertiesPtrOutput)
}

func (o ComponentTypeDataValueRelationshipValuePropertiesOutput) TargetComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValueRelationshipValueProperties) *string { return v.TargetComponentName }).(pulumi.StringPtrOutput)
}

func (o ComponentTypeDataValueRelationshipValuePropertiesOutput) TargetEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeDataValueRelationshipValueProperties) *string { return v.TargetEntityId }).(pulumi.StringPtrOutput)
}

type ComponentTypeDataValueRelationshipValuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeDataValueRelationshipValuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeDataValueRelationshipValueProperties)(nil)).Elem()
}

func (o ComponentTypeDataValueRelationshipValuePropertiesPtrOutput) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutput() ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return o
}

func (o ComponentTypeDataValueRelationshipValuePropertiesPtrOutput) ToComponentTypeDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentTypeDataValueRelationshipValuePropertiesPtrOutput {
	return o
}

func (o ComponentTypeDataValueRelationshipValuePropertiesPtrOutput) Elem() ComponentTypeDataValueRelationshipValuePropertiesOutput {
	return o.ApplyT(func(v *ComponentTypeDataValueRelationshipValueProperties) ComponentTypeDataValueRelationshipValueProperties {
		if v != nil {
			return *v
		}
		var ret ComponentTypeDataValueRelationshipValueProperties
		return ret
	}).(ComponentTypeDataValueRelationshipValuePropertiesOutput)
}

func (o ComponentTypeDataValueRelationshipValuePropertiesPtrOutput) TargetComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValueRelationshipValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetComponentName
	}).(pulumi.StringPtrOutput)
}

func (o ComponentTypeDataValueRelationshipValuePropertiesPtrOutput) TargetEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeDataValueRelationshipValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetEntityId
	}).(pulumi.StringPtrOutput)
}

// The function of component type.
type ComponentTypeFunction struct {
	// The data connector.
	ImplementedBy *ComponentTypeDataConnector `pulumi:"implementedBy"`
	// The required properties of the function.
	RequiredProperties []string `pulumi:"requiredProperties"`
	// The scope of the function.
	Scope *ComponentTypeFunctionScope `pulumi:"scope"`
}

// ComponentTypeFunctionInput is an input type that accepts ComponentTypeFunctionArgs and ComponentTypeFunctionOutput values.
// You can construct a concrete instance of `ComponentTypeFunctionInput` via:
//
//	ComponentTypeFunctionArgs{...}
type ComponentTypeFunctionInput interface {
	pulumi.Input

	ToComponentTypeFunctionOutput() ComponentTypeFunctionOutput
	ToComponentTypeFunctionOutputWithContext(context.Context) ComponentTypeFunctionOutput
}

// The function of component type.
type ComponentTypeFunctionArgs struct {
	// The data connector.
	ImplementedBy ComponentTypeDataConnectorPtrInput `pulumi:"implementedBy"`
	// The required properties of the function.
	RequiredProperties pulumi.StringArrayInput `pulumi:"requiredProperties"`
	// The scope of the function.
	Scope ComponentTypeFunctionScopePtrInput `pulumi:"scope"`
}

func (ComponentTypeFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeFunction)(nil)).Elem()
}

func (i ComponentTypeFunctionArgs) ToComponentTypeFunctionOutput() ComponentTypeFunctionOutput {
	return i.ToComponentTypeFunctionOutputWithContext(context.Background())
}

func (i ComponentTypeFunctionArgs) ToComponentTypeFunctionOutputWithContext(ctx context.Context) ComponentTypeFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeFunctionOutput)
}

// ComponentTypeFunctionMapInput is an input type that accepts ComponentTypeFunctionMap and ComponentTypeFunctionMapOutput values.
// You can construct a concrete instance of `ComponentTypeFunctionMapInput` via:
//
//	ComponentTypeFunctionMap{ "key": ComponentTypeFunctionArgs{...} }
type ComponentTypeFunctionMapInput interface {
	pulumi.Input

	ToComponentTypeFunctionMapOutput() ComponentTypeFunctionMapOutput
	ToComponentTypeFunctionMapOutputWithContext(context.Context) ComponentTypeFunctionMapOutput
}

type ComponentTypeFunctionMap map[string]ComponentTypeFunctionInput

func (ComponentTypeFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypeFunction)(nil)).Elem()
}

func (i ComponentTypeFunctionMap) ToComponentTypeFunctionMapOutput() ComponentTypeFunctionMapOutput {
	return i.ToComponentTypeFunctionMapOutputWithContext(context.Background())
}

func (i ComponentTypeFunctionMap) ToComponentTypeFunctionMapOutputWithContext(ctx context.Context) ComponentTypeFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeFunctionMapOutput)
}

// The function of component type.
type ComponentTypeFunctionOutput struct{ *pulumi.OutputState }

func (ComponentTypeFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeFunction)(nil)).Elem()
}

func (o ComponentTypeFunctionOutput) ToComponentTypeFunctionOutput() ComponentTypeFunctionOutput {
	return o
}

func (o ComponentTypeFunctionOutput) ToComponentTypeFunctionOutputWithContext(ctx context.Context) ComponentTypeFunctionOutput {
	return o
}

// The data connector.
func (o ComponentTypeFunctionOutput) ImplementedBy() ComponentTypeDataConnectorPtrOutput {
	return o.ApplyT(func(v ComponentTypeFunction) *ComponentTypeDataConnector { return v.ImplementedBy }).(ComponentTypeDataConnectorPtrOutput)
}

// The required properties of the function.
func (o ComponentTypeFunctionOutput) RequiredProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComponentTypeFunction) []string { return v.RequiredProperties }).(pulumi.StringArrayOutput)
}

// The scope of the function.
func (o ComponentTypeFunctionOutput) Scope() ComponentTypeFunctionScopePtrOutput {
	return o.ApplyT(func(v ComponentTypeFunction) *ComponentTypeFunctionScope { return v.Scope }).(ComponentTypeFunctionScopePtrOutput)
}

type ComponentTypeFunctionMapOutput struct{ *pulumi.OutputState }

func (ComponentTypeFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypeFunction)(nil)).Elem()
}

func (o ComponentTypeFunctionMapOutput) ToComponentTypeFunctionMapOutput() ComponentTypeFunctionMapOutput {
	return o
}

func (o ComponentTypeFunctionMapOutput) ToComponentTypeFunctionMapOutputWithContext(ctx context.Context) ComponentTypeFunctionMapOutput {
	return o
}

func (o ComponentTypeFunctionMapOutput) MapIndex(k pulumi.StringInput) ComponentTypeFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentTypeFunction {
		return vs[0].(map[string]ComponentTypeFunction)[vs[1].(string)]
	}).(ComponentTypeFunctionOutput)
}

type ComponentTypeLambdaFunction struct {
	Arn string `pulumi:"arn"`
}

// ComponentTypeLambdaFunctionInput is an input type that accepts ComponentTypeLambdaFunctionArgs and ComponentTypeLambdaFunctionOutput values.
// You can construct a concrete instance of `ComponentTypeLambdaFunctionInput` via:
//
//	ComponentTypeLambdaFunctionArgs{...}
type ComponentTypeLambdaFunctionInput interface {
	pulumi.Input

	ToComponentTypeLambdaFunctionOutput() ComponentTypeLambdaFunctionOutput
	ToComponentTypeLambdaFunctionOutputWithContext(context.Context) ComponentTypeLambdaFunctionOutput
}

type ComponentTypeLambdaFunctionArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (ComponentTypeLambdaFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeLambdaFunction)(nil)).Elem()
}

func (i ComponentTypeLambdaFunctionArgs) ToComponentTypeLambdaFunctionOutput() ComponentTypeLambdaFunctionOutput {
	return i.ToComponentTypeLambdaFunctionOutputWithContext(context.Background())
}

func (i ComponentTypeLambdaFunctionArgs) ToComponentTypeLambdaFunctionOutputWithContext(ctx context.Context) ComponentTypeLambdaFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeLambdaFunctionOutput)
}

func (i ComponentTypeLambdaFunctionArgs) ToComponentTypeLambdaFunctionPtrOutput() ComponentTypeLambdaFunctionPtrOutput {
	return i.ToComponentTypeLambdaFunctionPtrOutputWithContext(context.Background())
}

func (i ComponentTypeLambdaFunctionArgs) ToComponentTypeLambdaFunctionPtrOutputWithContext(ctx context.Context) ComponentTypeLambdaFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeLambdaFunctionOutput).ToComponentTypeLambdaFunctionPtrOutputWithContext(ctx)
}

// ComponentTypeLambdaFunctionPtrInput is an input type that accepts ComponentTypeLambdaFunctionArgs, ComponentTypeLambdaFunctionPtr and ComponentTypeLambdaFunctionPtrOutput values.
// You can construct a concrete instance of `ComponentTypeLambdaFunctionPtrInput` via:
//
//	        ComponentTypeLambdaFunctionArgs{...}
//
//	or:
//
//	        nil
type ComponentTypeLambdaFunctionPtrInput interface {
	pulumi.Input

	ToComponentTypeLambdaFunctionPtrOutput() ComponentTypeLambdaFunctionPtrOutput
	ToComponentTypeLambdaFunctionPtrOutputWithContext(context.Context) ComponentTypeLambdaFunctionPtrOutput
}

type componentTypeLambdaFunctionPtrType ComponentTypeLambdaFunctionArgs

func ComponentTypeLambdaFunctionPtr(v *ComponentTypeLambdaFunctionArgs) ComponentTypeLambdaFunctionPtrInput {
	return (*componentTypeLambdaFunctionPtrType)(v)
}

func (*componentTypeLambdaFunctionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeLambdaFunction)(nil)).Elem()
}

func (i *componentTypeLambdaFunctionPtrType) ToComponentTypeLambdaFunctionPtrOutput() ComponentTypeLambdaFunctionPtrOutput {
	return i.ToComponentTypeLambdaFunctionPtrOutputWithContext(context.Background())
}

func (i *componentTypeLambdaFunctionPtrType) ToComponentTypeLambdaFunctionPtrOutputWithContext(ctx context.Context) ComponentTypeLambdaFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeLambdaFunctionPtrOutput)
}

type ComponentTypeLambdaFunctionOutput struct{ *pulumi.OutputState }

func (ComponentTypeLambdaFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeLambdaFunction)(nil)).Elem()
}

func (o ComponentTypeLambdaFunctionOutput) ToComponentTypeLambdaFunctionOutput() ComponentTypeLambdaFunctionOutput {
	return o
}

func (o ComponentTypeLambdaFunctionOutput) ToComponentTypeLambdaFunctionOutputWithContext(ctx context.Context) ComponentTypeLambdaFunctionOutput {
	return o
}

func (o ComponentTypeLambdaFunctionOutput) ToComponentTypeLambdaFunctionPtrOutput() ComponentTypeLambdaFunctionPtrOutput {
	return o.ToComponentTypeLambdaFunctionPtrOutputWithContext(context.Background())
}

func (o ComponentTypeLambdaFunctionOutput) ToComponentTypeLambdaFunctionPtrOutputWithContext(ctx context.Context) ComponentTypeLambdaFunctionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTypeLambdaFunction) *ComponentTypeLambdaFunction {
		return &v
	}).(ComponentTypeLambdaFunctionPtrOutput)
}

func (o ComponentTypeLambdaFunctionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentTypeLambdaFunction) string { return v.Arn }).(pulumi.StringOutput)
}

type ComponentTypeLambdaFunctionPtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeLambdaFunctionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeLambdaFunction)(nil)).Elem()
}

func (o ComponentTypeLambdaFunctionPtrOutput) ToComponentTypeLambdaFunctionPtrOutput() ComponentTypeLambdaFunctionPtrOutput {
	return o
}

func (o ComponentTypeLambdaFunctionPtrOutput) ToComponentTypeLambdaFunctionPtrOutputWithContext(ctx context.Context) ComponentTypeLambdaFunctionPtrOutput {
	return o
}

func (o ComponentTypeLambdaFunctionPtrOutput) Elem() ComponentTypeLambdaFunctionOutput {
	return o.ApplyT(func(v *ComponentTypeLambdaFunction) ComponentTypeLambdaFunction {
		if v != nil {
			return *v
		}
		var ret ComponentTypeLambdaFunction
		return ret
	}).(ComponentTypeLambdaFunctionOutput)
}

func (o ComponentTypeLambdaFunctionPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeLambdaFunction) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// An object that sets information about a property.
type ComponentTypePropertyDefinition struct {
	// An object that specifies information about a property.
	Configurations map[string]string `pulumi:"configurations"`
	// An object that contains information about the data type.
	DataType *ComponentTypeDataType `pulumi:"dataType"`
	// An object that contains the default value.
	DefaultValue *ComponentTypeDataValue `pulumi:"defaultValue"`
	// A Boolean value that specifies whether the property ID comes from an external data store.
	IsExternalId *bool `pulumi:"isExternalId"`
	// A Boolean value that specifies whether the property is required.
	IsRequiredInEntity *bool `pulumi:"isRequiredInEntity"`
	// A Boolean value that specifies whether the property is stored externally.
	IsStoredExternally *bool `pulumi:"isStoredExternally"`
	// A Boolean value that specifies whether the property consists of time series data.
	IsTimeSeries *bool `pulumi:"isTimeSeries"`
}

// ComponentTypePropertyDefinitionInput is an input type that accepts ComponentTypePropertyDefinitionArgs and ComponentTypePropertyDefinitionOutput values.
// You can construct a concrete instance of `ComponentTypePropertyDefinitionInput` via:
//
//	ComponentTypePropertyDefinitionArgs{...}
type ComponentTypePropertyDefinitionInput interface {
	pulumi.Input

	ToComponentTypePropertyDefinitionOutput() ComponentTypePropertyDefinitionOutput
	ToComponentTypePropertyDefinitionOutputWithContext(context.Context) ComponentTypePropertyDefinitionOutput
}

// An object that sets information about a property.
type ComponentTypePropertyDefinitionArgs struct {
	// An object that specifies information about a property.
	Configurations pulumi.StringMapInput `pulumi:"configurations"`
	// An object that contains information about the data type.
	DataType ComponentTypeDataTypePtrInput `pulumi:"dataType"`
	// An object that contains the default value.
	DefaultValue ComponentTypeDataValuePtrInput `pulumi:"defaultValue"`
	// A Boolean value that specifies whether the property ID comes from an external data store.
	IsExternalId pulumi.BoolPtrInput `pulumi:"isExternalId"`
	// A Boolean value that specifies whether the property is required.
	IsRequiredInEntity pulumi.BoolPtrInput `pulumi:"isRequiredInEntity"`
	// A Boolean value that specifies whether the property is stored externally.
	IsStoredExternally pulumi.BoolPtrInput `pulumi:"isStoredExternally"`
	// A Boolean value that specifies whether the property consists of time series data.
	IsTimeSeries pulumi.BoolPtrInput `pulumi:"isTimeSeries"`
}

func (ComponentTypePropertyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypePropertyDefinition)(nil)).Elem()
}

func (i ComponentTypePropertyDefinitionArgs) ToComponentTypePropertyDefinitionOutput() ComponentTypePropertyDefinitionOutput {
	return i.ToComponentTypePropertyDefinitionOutputWithContext(context.Background())
}

func (i ComponentTypePropertyDefinitionArgs) ToComponentTypePropertyDefinitionOutputWithContext(ctx context.Context) ComponentTypePropertyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypePropertyDefinitionOutput)
}

// ComponentTypePropertyDefinitionMapInput is an input type that accepts ComponentTypePropertyDefinitionMap and ComponentTypePropertyDefinitionMapOutput values.
// You can construct a concrete instance of `ComponentTypePropertyDefinitionMapInput` via:
//
//	ComponentTypePropertyDefinitionMap{ "key": ComponentTypePropertyDefinitionArgs{...} }
type ComponentTypePropertyDefinitionMapInput interface {
	pulumi.Input

	ToComponentTypePropertyDefinitionMapOutput() ComponentTypePropertyDefinitionMapOutput
	ToComponentTypePropertyDefinitionMapOutputWithContext(context.Context) ComponentTypePropertyDefinitionMapOutput
}

type ComponentTypePropertyDefinitionMap map[string]ComponentTypePropertyDefinitionInput

func (ComponentTypePropertyDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypePropertyDefinition)(nil)).Elem()
}

func (i ComponentTypePropertyDefinitionMap) ToComponentTypePropertyDefinitionMapOutput() ComponentTypePropertyDefinitionMapOutput {
	return i.ToComponentTypePropertyDefinitionMapOutputWithContext(context.Background())
}

func (i ComponentTypePropertyDefinitionMap) ToComponentTypePropertyDefinitionMapOutputWithContext(ctx context.Context) ComponentTypePropertyDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypePropertyDefinitionMapOutput)
}

// An object that sets information about a property.
type ComponentTypePropertyDefinitionOutput struct{ *pulumi.OutputState }

func (ComponentTypePropertyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypePropertyDefinition)(nil)).Elem()
}

func (o ComponentTypePropertyDefinitionOutput) ToComponentTypePropertyDefinitionOutput() ComponentTypePropertyDefinitionOutput {
	return o
}

func (o ComponentTypePropertyDefinitionOutput) ToComponentTypePropertyDefinitionOutputWithContext(ctx context.Context) ComponentTypePropertyDefinitionOutput {
	return o
}

// An object that specifies information about a property.
func (o ComponentTypePropertyDefinitionOutput) Configurations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentTypePropertyDefinition) map[string]string { return v.Configurations }).(pulumi.StringMapOutput)
}

// An object that contains information about the data type.
func (o ComponentTypePropertyDefinitionOutput) DataType() ComponentTypeDataTypePtrOutput {
	return o.ApplyT(func(v ComponentTypePropertyDefinition) *ComponentTypeDataType { return v.DataType }).(ComponentTypeDataTypePtrOutput)
}

// An object that contains the default value.
func (o ComponentTypePropertyDefinitionOutput) DefaultValue() ComponentTypeDataValuePtrOutput {
	return o.ApplyT(func(v ComponentTypePropertyDefinition) *ComponentTypeDataValue { return v.DefaultValue }).(ComponentTypeDataValuePtrOutput)
}

// A Boolean value that specifies whether the property ID comes from an external data store.
func (o ComponentTypePropertyDefinitionOutput) IsExternalId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentTypePropertyDefinition) *bool { return v.IsExternalId }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property is required.
func (o ComponentTypePropertyDefinitionOutput) IsRequiredInEntity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentTypePropertyDefinition) *bool { return v.IsRequiredInEntity }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property is stored externally.
func (o ComponentTypePropertyDefinitionOutput) IsStoredExternally() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentTypePropertyDefinition) *bool { return v.IsStoredExternally }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property consists of time series data.
func (o ComponentTypePropertyDefinitionOutput) IsTimeSeries() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentTypePropertyDefinition) *bool { return v.IsTimeSeries }).(pulumi.BoolPtrOutput)
}

type ComponentTypePropertyDefinitionMapOutput struct{ *pulumi.OutputState }

func (ComponentTypePropertyDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypePropertyDefinition)(nil)).Elem()
}

func (o ComponentTypePropertyDefinitionMapOutput) ToComponentTypePropertyDefinitionMapOutput() ComponentTypePropertyDefinitionMapOutput {
	return o
}

func (o ComponentTypePropertyDefinitionMapOutput) ToComponentTypePropertyDefinitionMapOutputWithContext(ctx context.Context) ComponentTypePropertyDefinitionMapOutput {
	return o
}

func (o ComponentTypePropertyDefinitionMapOutput) MapIndex(k pulumi.StringInput) ComponentTypePropertyDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentTypePropertyDefinition {
		return vs[0].(map[string]ComponentTypePropertyDefinition)[vs[1].(string)]
	}).(ComponentTypePropertyDefinitionOutput)
}

// An object that sets information about a property group.
type ComponentTypePropertyGroup struct {
	// The type of property group.
	GroupType *ComponentTypePropertyGroupGroupType `pulumi:"groupType"`
	// The list of property names in the property group.
	PropertyNames []string `pulumi:"propertyNames"`
}

// ComponentTypePropertyGroupInput is an input type that accepts ComponentTypePropertyGroupArgs and ComponentTypePropertyGroupOutput values.
// You can construct a concrete instance of `ComponentTypePropertyGroupInput` via:
//
//	ComponentTypePropertyGroupArgs{...}
type ComponentTypePropertyGroupInput interface {
	pulumi.Input

	ToComponentTypePropertyGroupOutput() ComponentTypePropertyGroupOutput
	ToComponentTypePropertyGroupOutputWithContext(context.Context) ComponentTypePropertyGroupOutput
}

// An object that sets information about a property group.
type ComponentTypePropertyGroupArgs struct {
	// The type of property group.
	GroupType ComponentTypePropertyGroupGroupTypePtrInput `pulumi:"groupType"`
	// The list of property names in the property group.
	PropertyNames pulumi.StringArrayInput `pulumi:"propertyNames"`
}

func (ComponentTypePropertyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypePropertyGroup)(nil)).Elem()
}

func (i ComponentTypePropertyGroupArgs) ToComponentTypePropertyGroupOutput() ComponentTypePropertyGroupOutput {
	return i.ToComponentTypePropertyGroupOutputWithContext(context.Background())
}

func (i ComponentTypePropertyGroupArgs) ToComponentTypePropertyGroupOutputWithContext(ctx context.Context) ComponentTypePropertyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypePropertyGroupOutput)
}

// ComponentTypePropertyGroupMapInput is an input type that accepts ComponentTypePropertyGroupMap and ComponentTypePropertyGroupMapOutput values.
// You can construct a concrete instance of `ComponentTypePropertyGroupMapInput` via:
//
//	ComponentTypePropertyGroupMap{ "key": ComponentTypePropertyGroupArgs{...} }
type ComponentTypePropertyGroupMapInput interface {
	pulumi.Input

	ToComponentTypePropertyGroupMapOutput() ComponentTypePropertyGroupMapOutput
	ToComponentTypePropertyGroupMapOutputWithContext(context.Context) ComponentTypePropertyGroupMapOutput
}

type ComponentTypePropertyGroupMap map[string]ComponentTypePropertyGroupInput

func (ComponentTypePropertyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypePropertyGroup)(nil)).Elem()
}

func (i ComponentTypePropertyGroupMap) ToComponentTypePropertyGroupMapOutput() ComponentTypePropertyGroupMapOutput {
	return i.ToComponentTypePropertyGroupMapOutputWithContext(context.Background())
}

func (i ComponentTypePropertyGroupMap) ToComponentTypePropertyGroupMapOutputWithContext(ctx context.Context) ComponentTypePropertyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypePropertyGroupMapOutput)
}

// An object that sets information about a property group.
type ComponentTypePropertyGroupOutput struct{ *pulumi.OutputState }

func (ComponentTypePropertyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypePropertyGroup)(nil)).Elem()
}

func (o ComponentTypePropertyGroupOutput) ToComponentTypePropertyGroupOutput() ComponentTypePropertyGroupOutput {
	return o
}

func (o ComponentTypePropertyGroupOutput) ToComponentTypePropertyGroupOutputWithContext(ctx context.Context) ComponentTypePropertyGroupOutput {
	return o
}

// The type of property group.
func (o ComponentTypePropertyGroupOutput) GroupType() ComponentTypePropertyGroupGroupTypePtrOutput {
	return o.ApplyT(func(v ComponentTypePropertyGroup) *ComponentTypePropertyGroupGroupType { return v.GroupType }).(ComponentTypePropertyGroupGroupTypePtrOutput)
}

// The list of property names in the property group.
func (o ComponentTypePropertyGroupOutput) PropertyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComponentTypePropertyGroup) []string { return v.PropertyNames }).(pulumi.StringArrayOutput)
}

type ComponentTypePropertyGroupMapOutput struct{ *pulumi.OutputState }

func (ComponentTypePropertyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentTypePropertyGroup)(nil)).Elem()
}

func (o ComponentTypePropertyGroupMapOutput) ToComponentTypePropertyGroupMapOutput() ComponentTypePropertyGroupMapOutput {
	return o
}

func (o ComponentTypePropertyGroupMapOutput) ToComponentTypePropertyGroupMapOutputWithContext(ctx context.Context) ComponentTypePropertyGroupMapOutput {
	return o
}

func (o ComponentTypePropertyGroupMapOutput) MapIndex(k pulumi.StringInput) ComponentTypePropertyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentTypePropertyGroup {
		return vs[0].(map[string]ComponentTypePropertyGroup)[vs[1].(string)]
	}).(ComponentTypePropertyGroupOutput)
}

// The type of the relationship.
type ComponentTypeRelationship struct {
	// The type of the relationship.
	RelationshipType *string `pulumi:"relationshipType"`
	// The ID of the target component type associated with this relationship.
	TargetComponentTypeId *string `pulumi:"targetComponentTypeId"`
}

// ComponentTypeRelationshipInput is an input type that accepts ComponentTypeRelationshipArgs and ComponentTypeRelationshipOutput values.
// You can construct a concrete instance of `ComponentTypeRelationshipInput` via:
//
//	ComponentTypeRelationshipArgs{...}
type ComponentTypeRelationshipInput interface {
	pulumi.Input

	ToComponentTypeRelationshipOutput() ComponentTypeRelationshipOutput
	ToComponentTypeRelationshipOutputWithContext(context.Context) ComponentTypeRelationshipOutput
}

// The type of the relationship.
type ComponentTypeRelationshipArgs struct {
	// The type of the relationship.
	RelationshipType pulumi.StringPtrInput `pulumi:"relationshipType"`
	// The ID of the target component type associated with this relationship.
	TargetComponentTypeId pulumi.StringPtrInput `pulumi:"targetComponentTypeId"`
}

func (ComponentTypeRelationshipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeRelationship)(nil)).Elem()
}

func (i ComponentTypeRelationshipArgs) ToComponentTypeRelationshipOutput() ComponentTypeRelationshipOutput {
	return i.ToComponentTypeRelationshipOutputWithContext(context.Background())
}

func (i ComponentTypeRelationshipArgs) ToComponentTypeRelationshipOutputWithContext(ctx context.Context) ComponentTypeRelationshipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeRelationshipOutput)
}

func (i ComponentTypeRelationshipArgs) ToComponentTypeRelationshipPtrOutput() ComponentTypeRelationshipPtrOutput {
	return i.ToComponentTypeRelationshipPtrOutputWithContext(context.Background())
}

func (i ComponentTypeRelationshipArgs) ToComponentTypeRelationshipPtrOutputWithContext(ctx context.Context) ComponentTypeRelationshipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeRelationshipOutput).ToComponentTypeRelationshipPtrOutputWithContext(ctx)
}

// ComponentTypeRelationshipPtrInput is an input type that accepts ComponentTypeRelationshipArgs, ComponentTypeRelationshipPtr and ComponentTypeRelationshipPtrOutput values.
// You can construct a concrete instance of `ComponentTypeRelationshipPtrInput` via:
//
//	        ComponentTypeRelationshipArgs{...}
//
//	or:
//
//	        nil
type ComponentTypeRelationshipPtrInput interface {
	pulumi.Input

	ToComponentTypeRelationshipPtrOutput() ComponentTypeRelationshipPtrOutput
	ToComponentTypeRelationshipPtrOutputWithContext(context.Context) ComponentTypeRelationshipPtrOutput
}

type componentTypeRelationshipPtrType ComponentTypeRelationshipArgs

func ComponentTypeRelationshipPtr(v *ComponentTypeRelationshipArgs) ComponentTypeRelationshipPtrInput {
	return (*componentTypeRelationshipPtrType)(v)
}

func (*componentTypeRelationshipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeRelationship)(nil)).Elem()
}

func (i *componentTypeRelationshipPtrType) ToComponentTypeRelationshipPtrOutput() ComponentTypeRelationshipPtrOutput {
	return i.ToComponentTypeRelationshipPtrOutputWithContext(context.Background())
}

func (i *componentTypeRelationshipPtrType) ToComponentTypeRelationshipPtrOutputWithContext(ctx context.Context) ComponentTypeRelationshipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeRelationshipPtrOutput)
}

// The type of the relationship.
type ComponentTypeRelationshipOutput struct{ *pulumi.OutputState }

func (ComponentTypeRelationshipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeRelationship)(nil)).Elem()
}

func (o ComponentTypeRelationshipOutput) ToComponentTypeRelationshipOutput() ComponentTypeRelationshipOutput {
	return o
}

func (o ComponentTypeRelationshipOutput) ToComponentTypeRelationshipOutputWithContext(ctx context.Context) ComponentTypeRelationshipOutput {
	return o
}

func (o ComponentTypeRelationshipOutput) ToComponentTypeRelationshipPtrOutput() ComponentTypeRelationshipPtrOutput {
	return o.ToComponentTypeRelationshipPtrOutputWithContext(context.Background())
}

func (o ComponentTypeRelationshipOutput) ToComponentTypeRelationshipPtrOutputWithContext(ctx context.Context) ComponentTypeRelationshipPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTypeRelationship) *ComponentTypeRelationship {
		return &v
	}).(ComponentTypeRelationshipPtrOutput)
}

// The type of the relationship.
func (o ComponentTypeRelationshipOutput) RelationshipType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeRelationship) *string { return v.RelationshipType }).(pulumi.StringPtrOutput)
}

// The ID of the target component type associated with this relationship.
func (o ComponentTypeRelationshipOutput) TargetComponentTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeRelationship) *string { return v.TargetComponentTypeId }).(pulumi.StringPtrOutput)
}

type ComponentTypeRelationshipPtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeRelationshipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeRelationship)(nil)).Elem()
}

func (o ComponentTypeRelationshipPtrOutput) ToComponentTypeRelationshipPtrOutput() ComponentTypeRelationshipPtrOutput {
	return o
}

func (o ComponentTypeRelationshipPtrOutput) ToComponentTypeRelationshipPtrOutputWithContext(ctx context.Context) ComponentTypeRelationshipPtrOutput {
	return o
}

func (o ComponentTypeRelationshipPtrOutput) Elem() ComponentTypeRelationshipOutput {
	return o.ApplyT(func(v *ComponentTypeRelationship) ComponentTypeRelationship {
		if v != nil {
			return *v
		}
		var ret ComponentTypeRelationship
		return ret
	}).(ComponentTypeRelationshipOutput)
}

// The type of the relationship.
func (o ComponentTypeRelationshipPtrOutput) RelationshipType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeRelationship) *string {
		if v == nil {
			return nil
		}
		return v.RelationshipType
	}).(pulumi.StringPtrOutput)
}

// The ID of the target component type associated with this relationship.
func (o ComponentTypeRelationshipPtrOutput) TargetComponentTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeRelationship) *string {
		if v == nil {
			return nil
		}
		return v.TargetComponentTypeId
	}).(pulumi.StringPtrOutput)
}

type ComponentTypeStatus struct {
	Error interface{}               `pulumi:"error"`
	State *ComponentTypeStatusState `pulumi:"state"`
}

type ComponentTypeStatusOutput struct{ *pulumi.OutputState }

func (ComponentTypeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeStatus)(nil)).Elem()
}

func (o ComponentTypeStatusOutput) ToComponentTypeStatusOutput() ComponentTypeStatusOutput {
	return o
}

func (o ComponentTypeStatusOutput) ToComponentTypeStatusOutputWithContext(ctx context.Context) ComponentTypeStatusOutput {
	return o
}

func (o ComponentTypeStatusOutput) Error() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentTypeStatus) interface{} { return v.Error }).(pulumi.AnyOutput)
}

func (o ComponentTypeStatusOutput) State() ComponentTypeStatusStatePtrOutput {
	return o.ApplyT(func(v ComponentTypeStatus) *ComponentTypeStatusState { return v.State }).(ComponentTypeStatusStatePtrOutput)
}

type ComponentTypeStatusPtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeStatus)(nil)).Elem()
}

func (o ComponentTypeStatusPtrOutput) ToComponentTypeStatusPtrOutput() ComponentTypeStatusPtrOutput {
	return o
}

func (o ComponentTypeStatusPtrOutput) ToComponentTypeStatusPtrOutputWithContext(ctx context.Context) ComponentTypeStatusPtrOutput {
	return o
}

func (o ComponentTypeStatusPtrOutput) Elem() ComponentTypeStatusOutput {
	return o.ApplyT(func(v *ComponentTypeStatus) ComponentTypeStatus {
		if v != nil {
			return *v
		}
		var ret ComponentTypeStatus
		return ret
	}).(ComponentTypeStatusOutput)
}

func (o ComponentTypeStatusPtrOutput) Error() pulumi.AnyOutput {
	return o.ApplyT(func(v *ComponentTypeStatus) interface{} {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.AnyOutput)
}

func (o ComponentTypeStatusPtrOutput) State() ComponentTypeStatusStatePtrOutput {
	return o.ApplyT(func(v *ComponentTypeStatus) *ComponentTypeStatusState {
		if v == nil {
			return nil
		}
		return v.State
	}).(ComponentTypeStatusStatePtrOutput)
}

// Error object with Message and Code.
type ComponentTypeStatusError1Properties struct {
	Code    *ComponentTypeStatusError1PropertiesCode `pulumi:"code"`
	Message *string                                  `pulumi:"message"`
}

// Error object with Message and Code.
type ComponentTypeStatusErrorProperties struct {
	Code    *ComponentTypeStatusErrorPropertiesCode `pulumi:"code"`
	Message *string                                 `pulumi:"message"`
}

// Error object with Message and Code.
type ComponentTypeStatusErrorPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentTypeStatusErrorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTypeStatusErrorProperties)(nil)).Elem()
}

func (o ComponentTypeStatusErrorPropertiesOutput) ToComponentTypeStatusErrorPropertiesOutput() ComponentTypeStatusErrorPropertiesOutput {
	return o
}

func (o ComponentTypeStatusErrorPropertiesOutput) ToComponentTypeStatusErrorPropertiesOutputWithContext(ctx context.Context) ComponentTypeStatusErrorPropertiesOutput {
	return o
}

func (o ComponentTypeStatusErrorPropertiesOutput) Code() ComponentTypeStatusErrorPropertiesCodePtrOutput {
	return o.ApplyT(func(v ComponentTypeStatusErrorProperties) *ComponentTypeStatusErrorPropertiesCode { return v.Code }).(ComponentTypeStatusErrorPropertiesCodePtrOutput)
}

func (o ComponentTypeStatusErrorPropertiesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTypeStatusErrorProperties) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ComponentTypeStatusErrorPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentTypeStatusErrorPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTypeStatusErrorProperties)(nil)).Elem()
}

func (o ComponentTypeStatusErrorPropertiesPtrOutput) ToComponentTypeStatusErrorPropertiesPtrOutput() ComponentTypeStatusErrorPropertiesPtrOutput {
	return o
}

func (o ComponentTypeStatusErrorPropertiesPtrOutput) ToComponentTypeStatusErrorPropertiesPtrOutputWithContext(ctx context.Context) ComponentTypeStatusErrorPropertiesPtrOutput {
	return o
}

func (o ComponentTypeStatusErrorPropertiesPtrOutput) Elem() ComponentTypeStatusErrorPropertiesOutput {
	return o.ApplyT(func(v *ComponentTypeStatusErrorProperties) ComponentTypeStatusErrorProperties {
		if v != nil {
			return *v
		}
		var ret ComponentTypeStatusErrorProperties
		return ret
	}).(ComponentTypeStatusErrorPropertiesOutput)
}

func (o ComponentTypeStatusErrorPropertiesPtrOutput) Code() ComponentTypeStatusErrorPropertiesCodePtrOutput {
	return o.ApplyT(func(v *ComponentTypeStatusErrorProperties) *ComponentTypeStatusErrorPropertiesCode {
		if v == nil {
			return nil
		}
		return v.Code
	}).(ComponentTypeStatusErrorPropertiesCodePtrOutput)
}

func (o ComponentTypeStatusErrorPropertiesPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentTypeStatusErrorProperties) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

type EntityComponent struct {
	// The name of the component.
	ComponentName *string `pulumi:"componentName"`
	// The ID of the component type.
	ComponentTypeId *string `pulumi:"componentTypeId"`
	// The name of the property definition set in the component.
	DefinedIn *string `pulumi:"definedIn"`
	// The description of the component.
	Description *string `pulumi:"description"`
	// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
	Properties map[string]EntityProperty `pulumi:"properties"`
	// An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
	PropertyGroups map[string]EntityPropertyGroup `pulumi:"propertyGroups"`
	// The current status of the entity.
	Status *EntityStatus `pulumi:"status"`
}

// EntityComponentInput is an input type that accepts EntityComponentArgs and EntityComponentOutput values.
// You can construct a concrete instance of `EntityComponentInput` via:
//
//	EntityComponentArgs{...}
type EntityComponentInput interface {
	pulumi.Input

	ToEntityComponentOutput() EntityComponentOutput
	ToEntityComponentOutputWithContext(context.Context) EntityComponentOutput
}

type EntityComponentArgs struct {
	// The name of the component.
	ComponentName pulumi.StringPtrInput `pulumi:"componentName"`
	// The ID of the component type.
	ComponentTypeId pulumi.StringPtrInput `pulumi:"componentTypeId"`
	// The name of the property definition set in the component.
	DefinedIn pulumi.StringPtrInput `pulumi:"definedIn"`
	// The description of the component.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
	Properties EntityPropertyMapInput `pulumi:"properties"`
	// An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
	PropertyGroups EntityPropertyGroupMapInput `pulumi:"propertyGroups"`
	// The current status of the entity.
	Status EntityStatusPtrInput `pulumi:"status"`
}

func (EntityComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityComponent)(nil)).Elem()
}

func (i EntityComponentArgs) ToEntityComponentOutput() EntityComponentOutput {
	return i.ToEntityComponentOutputWithContext(context.Background())
}

func (i EntityComponentArgs) ToEntityComponentOutputWithContext(ctx context.Context) EntityComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityComponentOutput)
}

// EntityComponentMapInput is an input type that accepts EntityComponentMap and EntityComponentMapOutput values.
// You can construct a concrete instance of `EntityComponentMapInput` via:
//
//	EntityComponentMap{ "key": EntityComponentArgs{...} }
type EntityComponentMapInput interface {
	pulumi.Input

	ToEntityComponentMapOutput() EntityComponentMapOutput
	ToEntityComponentMapOutputWithContext(context.Context) EntityComponentMapOutput
}

type EntityComponentMap map[string]EntityComponentInput

func (EntityComponentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityComponent)(nil)).Elem()
}

func (i EntityComponentMap) ToEntityComponentMapOutput() EntityComponentMapOutput {
	return i.ToEntityComponentMapOutputWithContext(context.Background())
}

func (i EntityComponentMap) ToEntityComponentMapOutputWithContext(ctx context.Context) EntityComponentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityComponentMapOutput)
}

type EntityComponentOutput struct{ *pulumi.OutputState }

func (EntityComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityComponent)(nil)).Elem()
}

func (o EntityComponentOutput) ToEntityComponentOutput() EntityComponentOutput {
	return o
}

func (o EntityComponentOutput) ToEntityComponentOutputWithContext(ctx context.Context) EntityComponentOutput {
	return o
}

// The name of the component.
func (o EntityComponentOutput) ComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityComponent) *string { return v.ComponentName }).(pulumi.StringPtrOutput)
}

// The ID of the component type.
func (o EntityComponentOutput) ComponentTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityComponent) *string { return v.ComponentTypeId }).(pulumi.StringPtrOutput)
}

// The name of the property definition set in the component.
func (o EntityComponentOutput) DefinedIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityComponent) *string { return v.DefinedIn }).(pulumi.StringPtrOutput)
}

// The description of the component.
func (o EntityComponentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityComponent) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
func (o EntityComponentOutput) Properties() EntityPropertyMapOutput {
	return o.ApplyT(func(v EntityComponent) map[string]EntityProperty { return v.Properties }).(EntityPropertyMapOutput)
}

// An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
func (o EntityComponentOutput) PropertyGroups() EntityPropertyGroupMapOutput {
	return o.ApplyT(func(v EntityComponent) map[string]EntityPropertyGroup { return v.PropertyGroups }).(EntityPropertyGroupMapOutput)
}

// The current status of the entity.
func (o EntityComponentOutput) Status() EntityStatusPtrOutput {
	return o.ApplyT(func(v EntityComponent) *EntityStatus { return v.Status }).(EntityStatusPtrOutput)
}

type EntityComponentMapOutput struct{ *pulumi.OutputState }

func (EntityComponentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityComponent)(nil)).Elem()
}

func (o EntityComponentMapOutput) ToEntityComponentMapOutput() EntityComponentMapOutput {
	return o
}

func (o EntityComponentMapOutput) ToEntityComponentMapOutputWithContext(ctx context.Context) EntityComponentMapOutput {
	return o
}

func (o EntityComponentMapOutput) MapIndex(k pulumi.StringInput) EntityComponentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EntityComponent {
		return vs[0].(map[string]EntityComponent)[vs[1].(string)]
	}).(EntityComponentOutput)
}

type EntityCompositeComponent struct {
	// The name of the component.
	ComponentName *string `pulumi:"componentName"`
	// The path of the component.
	ComponentPath *string `pulumi:"componentPath"`
	// The ID of the component type.
	ComponentTypeId *string `pulumi:"componentTypeId"`
	// The description of the component.
	Description *string `pulumi:"description"`
	// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
	Properties map[string]EntityProperty `pulumi:"properties"`
	// An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
	PropertyGroups map[string]EntityPropertyGroup `pulumi:"propertyGroups"`
	// The current status of the component.
	Status *EntityStatus `pulumi:"status"`
}

// EntityCompositeComponentInput is an input type that accepts EntityCompositeComponentArgs and EntityCompositeComponentOutput values.
// You can construct a concrete instance of `EntityCompositeComponentInput` via:
//
//	EntityCompositeComponentArgs{...}
type EntityCompositeComponentInput interface {
	pulumi.Input

	ToEntityCompositeComponentOutput() EntityCompositeComponentOutput
	ToEntityCompositeComponentOutputWithContext(context.Context) EntityCompositeComponentOutput
}

type EntityCompositeComponentArgs struct {
	// The name of the component.
	ComponentName pulumi.StringPtrInput `pulumi:"componentName"`
	// The path of the component.
	ComponentPath pulumi.StringPtrInput `pulumi:"componentPath"`
	// The ID of the component type.
	ComponentTypeId pulumi.StringPtrInput `pulumi:"componentTypeId"`
	// The description of the component.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
	Properties EntityPropertyMapInput `pulumi:"properties"`
	// An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
	PropertyGroups EntityPropertyGroupMapInput `pulumi:"propertyGroups"`
	// The current status of the component.
	Status EntityStatusPtrInput `pulumi:"status"`
}

func (EntityCompositeComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityCompositeComponent)(nil)).Elem()
}

func (i EntityCompositeComponentArgs) ToEntityCompositeComponentOutput() EntityCompositeComponentOutput {
	return i.ToEntityCompositeComponentOutputWithContext(context.Background())
}

func (i EntityCompositeComponentArgs) ToEntityCompositeComponentOutputWithContext(ctx context.Context) EntityCompositeComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityCompositeComponentOutput)
}

// EntityCompositeComponentMapInput is an input type that accepts EntityCompositeComponentMap and EntityCompositeComponentMapOutput values.
// You can construct a concrete instance of `EntityCompositeComponentMapInput` via:
//
//	EntityCompositeComponentMap{ "key": EntityCompositeComponentArgs{...} }
type EntityCompositeComponentMapInput interface {
	pulumi.Input

	ToEntityCompositeComponentMapOutput() EntityCompositeComponentMapOutput
	ToEntityCompositeComponentMapOutputWithContext(context.Context) EntityCompositeComponentMapOutput
}

type EntityCompositeComponentMap map[string]EntityCompositeComponentInput

func (EntityCompositeComponentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityCompositeComponent)(nil)).Elem()
}

func (i EntityCompositeComponentMap) ToEntityCompositeComponentMapOutput() EntityCompositeComponentMapOutput {
	return i.ToEntityCompositeComponentMapOutputWithContext(context.Background())
}

func (i EntityCompositeComponentMap) ToEntityCompositeComponentMapOutputWithContext(ctx context.Context) EntityCompositeComponentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityCompositeComponentMapOutput)
}

type EntityCompositeComponentOutput struct{ *pulumi.OutputState }

func (EntityCompositeComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityCompositeComponent)(nil)).Elem()
}

func (o EntityCompositeComponentOutput) ToEntityCompositeComponentOutput() EntityCompositeComponentOutput {
	return o
}

func (o EntityCompositeComponentOutput) ToEntityCompositeComponentOutputWithContext(ctx context.Context) EntityCompositeComponentOutput {
	return o
}

// The name of the component.
func (o EntityCompositeComponentOutput) ComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityCompositeComponent) *string { return v.ComponentName }).(pulumi.StringPtrOutput)
}

// The path of the component.
func (o EntityCompositeComponentOutput) ComponentPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityCompositeComponent) *string { return v.ComponentPath }).(pulumi.StringPtrOutput)
}

// The ID of the component type.
func (o EntityCompositeComponentOutput) ComponentTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityCompositeComponent) *string { return v.ComponentTypeId }).(pulumi.StringPtrOutput)
}

// The description of the component.
func (o EntityCompositeComponentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityCompositeComponent) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
func (o EntityCompositeComponentOutput) Properties() EntityPropertyMapOutput {
	return o.ApplyT(func(v EntityCompositeComponent) map[string]EntityProperty { return v.Properties }).(EntityPropertyMapOutput)
}

// An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
func (o EntityCompositeComponentOutput) PropertyGroups() EntityPropertyGroupMapOutput {
	return o.ApplyT(func(v EntityCompositeComponent) map[string]EntityPropertyGroup { return v.PropertyGroups }).(EntityPropertyGroupMapOutput)
}

// The current status of the component.
func (o EntityCompositeComponentOutput) Status() EntityStatusPtrOutput {
	return o.ApplyT(func(v EntityCompositeComponent) *EntityStatus { return v.Status }).(EntityStatusPtrOutput)
}

type EntityCompositeComponentMapOutput struct{ *pulumi.OutputState }

func (EntityCompositeComponentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityCompositeComponent)(nil)).Elem()
}

func (o EntityCompositeComponentMapOutput) ToEntityCompositeComponentMapOutput() EntityCompositeComponentMapOutput {
	return o
}

func (o EntityCompositeComponentMapOutput) ToEntityCompositeComponentMapOutputWithContext(ctx context.Context) EntityCompositeComponentMapOutput {
	return o
}

func (o EntityCompositeComponentMapOutput) MapIndex(k pulumi.StringInput) EntityCompositeComponentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EntityCompositeComponent {
		return vs[0].(map[string]EntityCompositeComponent)[vs[1].(string)]
	}).(EntityCompositeComponentOutput)
}

// An object that specifies the data type of a property.
type EntityDataType struct {
	// The allowed values for this data type.
	AllowedValues []EntityDataValue `pulumi:"allowedValues"`
	// The nested type in the data type.
	NestedType *EntityDataType `pulumi:"nestedType"`
	// A relationship that associates a component with another component.
	Relationship *EntityRelationship `pulumi:"relationship"`
	// The underlying type of the data type.
	Type *EntityDataTypeType `pulumi:"type"`
	// The unit of measure used in this data type.
	UnitOfMeasure *string `pulumi:"unitOfMeasure"`
}

// EntityDataTypeInput is an input type that accepts EntityDataTypeArgs and EntityDataTypeOutput values.
// You can construct a concrete instance of `EntityDataTypeInput` via:
//
//	EntityDataTypeArgs{...}
type EntityDataTypeInput interface {
	pulumi.Input

	ToEntityDataTypeOutput() EntityDataTypeOutput
	ToEntityDataTypeOutputWithContext(context.Context) EntityDataTypeOutput
}

// An object that specifies the data type of a property.
type EntityDataTypeArgs struct {
	// The allowed values for this data type.
	AllowedValues EntityDataValueArrayInput `pulumi:"allowedValues"`
	// The nested type in the data type.
	NestedType EntityDataTypePtrInput `pulumi:"nestedType"`
	// A relationship that associates a component with another component.
	Relationship EntityRelationshipPtrInput `pulumi:"relationship"`
	// The underlying type of the data type.
	Type EntityDataTypeTypePtrInput `pulumi:"type"`
	// The unit of measure used in this data type.
	UnitOfMeasure pulumi.StringPtrInput `pulumi:"unitOfMeasure"`
}

func (EntityDataTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityDataType)(nil)).Elem()
}

func (i EntityDataTypeArgs) ToEntityDataTypeOutput() EntityDataTypeOutput {
	return i.ToEntityDataTypeOutputWithContext(context.Background())
}

func (i EntityDataTypeArgs) ToEntityDataTypeOutputWithContext(ctx context.Context) EntityDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataTypeOutput)
}

func (i EntityDataTypeArgs) ToEntityDataTypePtrOutput() EntityDataTypePtrOutput {
	return i.ToEntityDataTypePtrOutputWithContext(context.Background())
}

func (i EntityDataTypeArgs) ToEntityDataTypePtrOutputWithContext(ctx context.Context) EntityDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataTypeOutput).ToEntityDataTypePtrOutputWithContext(ctx)
}

// EntityDataTypePtrInput is an input type that accepts EntityDataTypeArgs, EntityDataTypePtr and EntityDataTypePtrOutput values.
// You can construct a concrete instance of `EntityDataTypePtrInput` via:
//
//	        EntityDataTypeArgs{...}
//
//	or:
//
//	        nil
type EntityDataTypePtrInput interface {
	pulumi.Input

	ToEntityDataTypePtrOutput() EntityDataTypePtrOutput
	ToEntityDataTypePtrOutputWithContext(context.Context) EntityDataTypePtrOutput
}

type entityDataTypePtrType EntityDataTypeArgs

func EntityDataTypePtr(v *EntityDataTypeArgs) EntityDataTypePtrInput {
	return (*entityDataTypePtrType)(v)
}

func (*entityDataTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityDataType)(nil)).Elem()
}

func (i *entityDataTypePtrType) ToEntityDataTypePtrOutput() EntityDataTypePtrOutput {
	return i.ToEntityDataTypePtrOutputWithContext(context.Background())
}

func (i *entityDataTypePtrType) ToEntityDataTypePtrOutputWithContext(ctx context.Context) EntityDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataTypePtrOutput)
}

// An object that specifies the data type of a property.
type EntityDataTypeOutput struct{ *pulumi.OutputState }

func (EntityDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityDataType)(nil)).Elem()
}

func (o EntityDataTypeOutput) ToEntityDataTypeOutput() EntityDataTypeOutput {
	return o
}

func (o EntityDataTypeOutput) ToEntityDataTypeOutputWithContext(ctx context.Context) EntityDataTypeOutput {
	return o
}

func (o EntityDataTypeOutput) ToEntityDataTypePtrOutput() EntityDataTypePtrOutput {
	return o.ToEntityDataTypePtrOutputWithContext(context.Background())
}

func (o EntityDataTypeOutput) ToEntityDataTypePtrOutputWithContext(ctx context.Context) EntityDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityDataType) *EntityDataType {
		return &v
	}).(EntityDataTypePtrOutput)
}

// The allowed values for this data type.
func (o EntityDataTypeOutput) AllowedValues() EntityDataValueArrayOutput {
	return o.ApplyT(func(v EntityDataType) []EntityDataValue { return v.AllowedValues }).(EntityDataValueArrayOutput)
}

// The nested type in the data type.
func (o EntityDataTypeOutput) NestedType() EntityDataTypePtrOutput {
	return o.ApplyT(func(v EntityDataType) *EntityDataType { return v.NestedType }).(EntityDataTypePtrOutput)
}

// A relationship that associates a component with another component.
func (o EntityDataTypeOutput) Relationship() EntityRelationshipPtrOutput {
	return o.ApplyT(func(v EntityDataType) *EntityRelationship { return v.Relationship }).(EntityRelationshipPtrOutput)
}

// The underlying type of the data type.
func (o EntityDataTypeOutput) Type() EntityDataTypeTypePtrOutput {
	return o.ApplyT(func(v EntityDataType) *EntityDataTypeType { return v.Type }).(EntityDataTypeTypePtrOutput)
}

// The unit of measure used in this data type.
func (o EntityDataTypeOutput) UnitOfMeasure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityDataType) *string { return v.UnitOfMeasure }).(pulumi.StringPtrOutput)
}

type EntityDataTypePtrOutput struct{ *pulumi.OutputState }

func (EntityDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityDataType)(nil)).Elem()
}

func (o EntityDataTypePtrOutput) ToEntityDataTypePtrOutput() EntityDataTypePtrOutput {
	return o
}

func (o EntityDataTypePtrOutput) ToEntityDataTypePtrOutputWithContext(ctx context.Context) EntityDataTypePtrOutput {
	return o
}

func (o EntityDataTypePtrOutput) Elem() EntityDataTypeOutput {
	return o.ApplyT(func(v *EntityDataType) EntityDataType {
		if v != nil {
			return *v
		}
		var ret EntityDataType
		return ret
	}).(EntityDataTypeOutput)
}

// The allowed values for this data type.
func (o EntityDataTypePtrOutput) AllowedValues() EntityDataValueArrayOutput {
	return o.ApplyT(func(v *EntityDataType) []EntityDataValue {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(EntityDataValueArrayOutput)
}

// The nested type in the data type.
func (o EntityDataTypePtrOutput) NestedType() EntityDataTypePtrOutput {
	return o.ApplyT(func(v *EntityDataType) *EntityDataType {
		if v == nil {
			return nil
		}
		return v.NestedType
	}).(EntityDataTypePtrOutput)
}

// A relationship that associates a component with another component.
func (o EntityDataTypePtrOutput) Relationship() EntityRelationshipPtrOutput {
	return o.ApplyT(func(v *EntityDataType) *EntityRelationship {
		if v == nil {
			return nil
		}
		return v.Relationship
	}).(EntityRelationshipPtrOutput)
}

// The underlying type of the data type.
func (o EntityDataTypePtrOutput) Type() EntityDataTypeTypePtrOutput {
	return o.ApplyT(func(v *EntityDataType) *EntityDataTypeType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(EntityDataTypeTypePtrOutput)
}

// The unit of measure used in this data type.
func (o EntityDataTypePtrOutput) UnitOfMeasure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityDataType) *string {
		if v == nil {
			return nil
		}
		return v.UnitOfMeasure
	}).(pulumi.StringPtrOutput)
}

// An object that specifies a value for a property.
type EntityDataValue struct {
	// A Boolean value.
	BooleanValue *bool `pulumi:"booleanValue"`
	// A double value.
	DoubleValue *float64 `pulumi:"doubleValue"`
	// An expression that produces the value.
	Expression *string `pulumi:"expression"`
	// An integer value.
	IntegerValue *int `pulumi:"integerValue"`
	// A list of multiple values.
	ListValue []EntityDataValue `pulumi:"listValue"`
	// A long value.
	LongValue *float64 `pulumi:"longValue"`
	// An object that maps strings to multiple DataValue objects.
	MapValue map[string]EntityDataValue `pulumi:"mapValue"`
	// A value that relates a component to another component.
	RelationshipValue *EntityDataValueRelationshipValueProperties `pulumi:"relationshipValue"`
	// A string value.
	StringValue *string `pulumi:"stringValue"`
}

// EntityDataValueInput is an input type that accepts EntityDataValueArgs and EntityDataValueOutput values.
// You can construct a concrete instance of `EntityDataValueInput` via:
//
//	EntityDataValueArgs{...}
type EntityDataValueInput interface {
	pulumi.Input

	ToEntityDataValueOutput() EntityDataValueOutput
	ToEntityDataValueOutputWithContext(context.Context) EntityDataValueOutput
}

// An object that specifies a value for a property.
type EntityDataValueArgs struct {
	// A Boolean value.
	BooleanValue pulumi.BoolPtrInput `pulumi:"booleanValue"`
	// A double value.
	DoubleValue pulumi.Float64PtrInput `pulumi:"doubleValue"`
	// An expression that produces the value.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// An integer value.
	IntegerValue pulumi.IntPtrInput `pulumi:"integerValue"`
	// A list of multiple values.
	ListValue EntityDataValueArrayInput `pulumi:"listValue"`
	// A long value.
	LongValue pulumi.Float64PtrInput `pulumi:"longValue"`
	// An object that maps strings to multiple DataValue objects.
	MapValue EntityDataValueMapInput `pulumi:"mapValue"`
	// A value that relates a component to another component.
	RelationshipValue EntityDataValueRelationshipValuePropertiesPtrInput `pulumi:"relationshipValue"`
	// A string value.
	StringValue pulumi.StringPtrInput `pulumi:"stringValue"`
}

func (EntityDataValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityDataValue)(nil)).Elem()
}

func (i EntityDataValueArgs) ToEntityDataValueOutput() EntityDataValueOutput {
	return i.ToEntityDataValueOutputWithContext(context.Background())
}

func (i EntityDataValueArgs) ToEntityDataValueOutputWithContext(ctx context.Context) EntityDataValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValueOutput)
}

func (i EntityDataValueArgs) ToEntityDataValuePtrOutput() EntityDataValuePtrOutput {
	return i.ToEntityDataValuePtrOutputWithContext(context.Background())
}

func (i EntityDataValueArgs) ToEntityDataValuePtrOutputWithContext(ctx context.Context) EntityDataValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValueOutput).ToEntityDataValuePtrOutputWithContext(ctx)
}

// EntityDataValuePtrInput is an input type that accepts EntityDataValueArgs, EntityDataValuePtr and EntityDataValuePtrOutput values.
// You can construct a concrete instance of `EntityDataValuePtrInput` via:
//
//	        EntityDataValueArgs{...}
//
//	or:
//
//	        nil
type EntityDataValuePtrInput interface {
	pulumi.Input

	ToEntityDataValuePtrOutput() EntityDataValuePtrOutput
	ToEntityDataValuePtrOutputWithContext(context.Context) EntityDataValuePtrOutput
}

type entityDataValuePtrType EntityDataValueArgs

func EntityDataValuePtr(v *EntityDataValueArgs) EntityDataValuePtrInput {
	return (*entityDataValuePtrType)(v)
}

func (*entityDataValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityDataValue)(nil)).Elem()
}

func (i *entityDataValuePtrType) ToEntityDataValuePtrOutput() EntityDataValuePtrOutput {
	return i.ToEntityDataValuePtrOutputWithContext(context.Background())
}

func (i *entityDataValuePtrType) ToEntityDataValuePtrOutputWithContext(ctx context.Context) EntityDataValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValuePtrOutput)
}

// EntityDataValueArrayInput is an input type that accepts EntityDataValueArray and EntityDataValueArrayOutput values.
// You can construct a concrete instance of `EntityDataValueArrayInput` via:
//
//	EntityDataValueArray{ EntityDataValueArgs{...} }
type EntityDataValueArrayInput interface {
	pulumi.Input

	ToEntityDataValueArrayOutput() EntityDataValueArrayOutput
	ToEntityDataValueArrayOutputWithContext(context.Context) EntityDataValueArrayOutput
}

type EntityDataValueArray []EntityDataValueInput

func (EntityDataValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityDataValue)(nil)).Elem()
}

func (i EntityDataValueArray) ToEntityDataValueArrayOutput() EntityDataValueArrayOutput {
	return i.ToEntityDataValueArrayOutputWithContext(context.Background())
}

func (i EntityDataValueArray) ToEntityDataValueArrayOutputWithContext(ctx context.Context) EntityDataValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValueArrayOutput)
}

// EntityDataValueMapInput is an input type that accepts EntityDataValueMap and EntityDataValueMapOutput values.
// You can construct a concrete instance of `EntityDataValueMapInput` via:
//
//	EntityDataValueMap{ "key": EntityDataValueArgs{...} }
type EntityDataValueMapInput interface {
	pulumi.Input

	ToEntityDataValueMapOutput() EntityDataValueMapOutput
	ToEntityDataValueMapOutputWithContext(context.Context) EntityDataValueMapOutput
}

type EntityDataValueMap map[string]EntityDataValueInput

func (EntityDataValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityDataValue)(nil)).Elem()
}

func (i EntityDataValueMap) ToEntityDataValueMapOutput() EntityDataValueMapOutput {
	return i.ToEntityDataValueMapOutputWithContext(context.Background())
}

func (i EntityDataValueMap) ToEntityDataValueMapOutputWithContext(ctx context.Context) EntityDataValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValueMapOutput)
}

// An object that specifies a value for a property.
type EntityDataValueOutput struct{ *pulumi.OutputState }

func (EntityDataValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityDataValue)(nil)).Elem()
}

func (o EntityDataValueOutput) ToEntityDataValueOutput() EntityDataValueOutput {
	return o
}

func (o EntityDataValueOutput) ToEntityDataValueOutputWithContext(ctx context.Context) EntityDataValueOutput {
	return o
}

func (o EntityDataValueOutput) ToEntityDataValuePtrOutput() EntityDataValuePtrOutput {
	return o.ToEntityDataValuePtrOutputWithContext(context.Background())
}

func (o EntityDataValueOutput) ToEntityDataValuePtrOutputWithContext(ctx context.Context) EntityDataValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityDataValue) *EntityDataValue {
		return &v
	}).(EntityDataValuePtrOutput)
}

// A Boolean value.
func (o EntityDataValueOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityDataValue) *bool { return v.BooleanValue }).(pulumi.BoolPtrOutput)
}

// A double value.
func (o EntityDataValueOutput) DoubleValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EntityDataValue) *float64 { return v.DoubleValue }).(pulumi.Float64PtrOutput)
}

// An expression that produces the value.
func (o EntityDataValueOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityDataValue) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// An integer value.
func (o EntityDataValueOutput) IntegerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EntityDataValue) *int { return v.IntegerValue }).(pulumi.IntPtrOutput)
}

// A list of multiple values.
func (o EntityDataValueOutput) ListValue() EntityDataValueArrayOutput {
	return o.ApplyT(func(v EntityDataValue) []EntityDataValue { return v.ListValue }).(EntityDataValueArrayOutput)
}

// A long value.
func (o EntityDataValueOutput) LongValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EntityDataValue) *float64 { return v.LongValue }).(pulumi.Float64PtrOutput)
}

// An object that maps strings to multiple DataValue objects.
func (o EntityDataValueOutput) MapValue() EntityDataValueMapOutput {
	return o.ApplyT(func(v EntityDataValue) map[string]EntityDataValue { return v.MapValue }).(EntityDataValueMapOutput)
}

// A value that relates a component to another component.
func (o EntityDataValueOutput) RelationshipValue() EntityDataValueRelationshipValuePropertiesPtrOutput {
	return o.ApplyT(func(v EntityDataValue) *EntityDataValueRelationshipValueProperties { return v.RelationshipValue }).(EntityDataValueRelationshipValuePropertiesPtrOutput)
}

// A string value.
func (o EntityDataValueOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityDataValue) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

type EntityDataValuePtrOutput struct{ *pulumi.OutputState }

func (EntityDataValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityDataValue)(nil)).Elem()
}

func (o EntityDataValuePtrOutput) ToEntityDataValuePtrOutput() EntityDataValuePtrOutput {
	return o
}

func (o EntityDataValuePtrOutput) ToEntityDataValuePtrOutputWithContext(ctx context.Context) EntityDataValuePtrOutput {
	return o
}

func (o EntityDataValuePtrOutput) Elem() EntityDataValueOutput {
	return o.ApplyT(func(v *EntityDataValue) EntityDataValue {
		if v != nil {
			return *v
		}
		var ret EntityDataValue
		return ret
	}).(EntityDataValueOutput)
}

// A Boolean value.
func (o EntityDataValuePtrOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityDataValue) *bool {
		if v == nil {
			return nil
		}
		return v.BooleanValue
	}).(pulumi.BoolPtrOutput)
}

// A double value.
func (o EntityDataValuePtrOutput) DoubleValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EntityDataValue) *float64 {
		if v == nil {
			return nil
		}
		return v.DoubleValue
	}).(pulumi.Float64PtrOutput)
}

// An expression that produces the value.
func (o EntityDataValuePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityDataValue) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// An integer value.
func (o EntityDataValuePtrOutput) IntegerValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EntityDataValue) *int {
		if v == nil {
			return nil
		}
		return v.IntegerValue
	}).(pulumi.IntPtrOutput)
}

// A list of multiple values.
func (o EntityDataValuePtrOutput) ListValue() EntityDataValueArrayOutput {
	return o.ApplyT(func(v *EntityDataValue) []EntityDataValue {
		if v == nil {
			return nil
		}
		return v.ListValue
	}).(EntityDataValueArrayOutput)
}

// A long value.
func (o EntityDataValuePtrOutput) LongValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EntityDataValue) *float64 {
		if v == nil {
			return nil
		}
		return v.LongValue
	}).(pulumi.Float64PtrOutput)
}

// An object that maps strings to multiple DataValue objects.
func (o EntityDataValuePtrOutput) MapValue() EntityDataValueMapOutput {
	return o.ApplyT(func(v *EntityDataValue) map[string]EntityDataValue {
		if v == nil {
			return nil
		}
		return v.MapValue
	}).(EntityDataValueMapOutput)
}

// A value that relates a component to another component.
func (o EntityDataValuePtrOutput) RelationshipValue() EntityDataValueRelationshipValuePropertiesPtrOutput {
	return o.ApplyT(func(v *EntityDataValue) *EntityDataValueRelationshipValueProperties {
		if v == nil {
			return nil
		}
		return v.RelationshipValue
	}).(EntityDataValueRelationshipValuePropertiesPtrOutput)
}

// A string value.
func (o EntityDataValuePtrOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityDataValue) *string {
		if v == nil {
			return nil
		}
		return v.StringValue
	}).(pulumi.StringPtrOutput)
}

type EntityDataValueArrayOutput struct{ *pulumi.OutputState }

func (EntityDataValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityDataValue)(nil)).Elem()
}

func (o EntityDataValueArrayOutput) ToEntityDataValueArrayOutput() EntityDataValueArrayOutput {
	return o
}

func (o EntityDataValueArrayOutput) ToEntityDataValueArrayOutputWithContext(ctx context.Context) EntityDataValueArrayOutput {
	return o
}

func (o EntityDataValueArrayOutput) Index(i pulumi.IntInput) EntityDataValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityDataValue {
		return vs[0].([]EntityDataValue)[vs[1].(int)]
	}).(EntityDataValueOutput)
}

type EntityDataValueMapOutput struct{ *pulumi.OutputState }

func (EntityDataValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityDataValue)(nil)).Elem()
}

func (o EntityDataValueMapOutput) ToEntityDataValueMapOutput() EntityDataValueMapOutput {
	return o
}

func (o EntityDataValueMapOutput) ToEntityDataValueMapOutputWithContext(ctx context.Context) EntityDataValueMapOutput {
	return o
}

func (o EntityDataValueMapOutput) MapIndex(k pulumi.StringInput) EntityDataValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EntityDataValue {
		return vs[0].(map[string]EntityDataValue)[vs[1].(string)]
	}).(EntityDataValueOutput)
}

// A value that relates a component to another component.
type EntityDataValueRelationshipValueProperties struct {
	TargetComponentName *string `pulumi:"targetComponentName"`
	TargetEntityId      *string `pulumi:"targetEntityId"`
}

// EntityDataValueRelationshipValuePropertiesInput is an input type that accepts EntityDataValueRelationshipValuePropertiesArgs and EntityDataValueRelationshipValuePropertiesOutput values.
// You can construct a concrete instance of `EntityDataValueRelationshipValuePropertiesInput` via:
//
//	EntityDataValueRelationshipValuePropertiesArgs{...}
type EntityDataValueRelationshipValuePropertiesInput interface {
	pulumi.Input

	ToEntityDataValueRelationshipValuePropertiesOutput() EntityDataValueRelationshipValuePropertiesOutput
	ToEntityDataValueRelationshipValuePropertiesOutputWithContext(context.Context) EntityDataValueRelationshipValuePropertiesOutput
}

// A value that relates a component to another component.
type EntityDataValueRelationshipValuePropertiesArgs struct {
	TargetComponentName pulumi.StringPtrInput `pulumi:"targetComponentName"`
	TargetEntityId      pulumi.StringPtrInput `pulumi:"targetEntityId"`
}

func (EntityDataValueRelationshipValuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityDataValueRelationshipValueProperties)(nil)).Elem()
}

func (i EntityDataValueRelationshipValuePropertiesArgs) ToEntityDataValueRelationshipValuePropertiesOutput() EntityDataValueRelationshipValuePropertiesOutput {
	return i.ToEntityDataValueRelationshipValuePropertiesOutputWithContext(context.Background())
}

func (i EntityDataValueRelationshipValuePropertiesArgs) ToEntityDataValueRelationshipValuePropertiesOutputWithContext(ctx context.Context) EntityDataValueRelationshipValuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValueRelationshipValuePropertiesOutput)
}

func (i EntityDataValueRelationshipValuePropertiesArgs) ToEntityDataValueRelationshipValuePropertiesPtrOutput() EntityDataValueRelationshipValuePropertiesPtrOutput {
	return i.ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Background())
}

func (i EntityDataValueRelationshipValuePropertiesArgs) ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) EntityDataValueRelationshipValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValueRelationshipValuePropertiesOutput).ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx)
}

// EntityDataValueRelationshipValuePropertiesPtrInput is an input type that accepts EntityDataValueRelationshipValuePropertiesArgs, EntityDataValueRelationshipValuePropertiesPtr and EntityDataValueRelationshipValuePropertiesPtrOutput values.
// You can construct a concrete instance of `EntityDataValueRelationshipValuePropertiesPtrInput` via:
//
//	        EntityDataValueRelationshipValuePropertiesArgs{...}
//
//	or:
//
//	        nil
type EntityDataValueRelationshipValuePropertiesPtrInput interface {
	pulumi.Input

	ToEntityDataValueRelationshipValuePropertiesPtrOutput() EntityDataValueRelationshipValuePropertiesPtrOutput
	ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Context) EntityDataValueRelationshipValuePropertiesPtrOutput
}

type entityDataValueRelationshipValuePropertiesPtrType EntityDataValueRelationshipValuePropertiesArgs

func EntityDataValueRelationshipValuePropertiesPtr(v *EntityDataValueRelationshipValuePropertiesArgs) EntityDataValueRelationshipValuePropertiesPtrInput {
	return (*entityDataValueRelationshipValuePropertiesPtrType)(v)
}

func (*entityDataValueRelationshipValuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityDataValueRelationshipValueProperties)(nil)).Elem()
}

func (i *entityDataValueRelationshipValuePropertiesPtrType) ToEntityDataValueRelationshipValuePropertiesPtrOutput() EntityDataValueRelationshipValuePropertiesPtrOutput {
	return i.ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Background())
}

func (i *entityDataValueRelationshipValuePropertiesPtrType) ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) EntityDataValueRelationshipValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityDataValueRelationshipValuePropertiesPtrOutput)
}

// A value that relates a component to another component.
type EntityDataValueRelationshipValuePropertiesOutput struct{ *pulumi.OutputState }

func (EntityDataValueRelationshipValuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityDataValueRelationshipValueProperties)(nil)).Elem()
}

func (o EntityDataValueRelationshipValuePropertiesOutput) ToEntityDataValueRelationshipValuePropertiesOutput() EntityDataValueRelationshipValuePropertiesOutput {
	return o
}

func (o EntityDataValueRelationshipValuePropertiesOutput) ToEntityDataValueRelationshipValuePropertiesOutputWithContext(ctx context.Context) EntityDataValueRelationshipValuePropertiesOutput {
	return o
}

func (o EntityDataValueRelationshipValuePropertiesOutput) ToEntityDataValueRelationshipValuePropertiesPtrOutput() EntityDataValueRelationshipValuePropertiesPtrOutput {
	return o.ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(context.Background())
}

func (o EntityDataValueRelationshipValuePropertiesOutput) ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) EntityDataValueRelationshipValuePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityDataValueRelationshipValueProperties) *EntityDataValueRelationshipValueProperties {
		return &v
	}).(EntityDataValueRelationshipValuePropertiesPtrOutput)
}

func (o EntityDataValueRelationshipValuePropertiesOutput) TargetComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityDataValueRelationshipValueProperties) *string { return v.TargetComponentName }).(pulumi.StringPtrOutput)
}

func (o EntityDataValueRelationshipValuePropertiesOutput) TargetEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityDataValueRelationshipValueProperties) *string { return v.TargetEntityId }).(pulumi.StringPtrOutput)
}

type EntityDataValueRelationshipValuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntityDataValueRelationshipValuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityDataValueRelationshipValueProperties)(nil)).Elem()
}

func (o EntityDataValueRelationshipValuePropertiesPtrOutput) ToEntityDataValueRelationshipValuePropertiesPtrOutput() EntityDataValueRelationshipValuePropertiesPtrOutput {
	return o
}

func (o EntityDataValueRelationshipValuePropertiesPtrOutput) ToEntityDataValueRelationshipValuePropertiesPtrOutputWithContext(ctx context.Context) EntityDataValueRelationshipValuePropertiesPtrOutput {
	return o
}

func (o EntityDataValueRelationshipValuePropertiesPtrOutput) Elem() EntityDataValueRelationshipValuePropertiesOutput {
	return o.ApplyT(func(v *EntityDataValueRelationshipValueProperties) EntityDataValueRelationshipValueProperties {
		if v != nil {
			return *v
		}
		var ret EntityDataValueRelationshipValueProperties
		return ret
	}).(EntityDataValueRelationshipValuePropertiesOutput)
}

func (o EntityDataValueRelationshipValuePropertiesPtrOutput) TargetComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityDataValueRelationshipValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetComponentName
	}).(pulumi.StringPtrOutput)
}

func (o EntityDataValueRelationshipValuePropertiesPtrOutput) TargetEntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityDataValueRelationshipValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetEntityId
	}).(pulumi.StringPtrOutput)
}

type EntityProperty struct {
	// An object that specifies information about a property.
	Definition *EntityPropertyDefinitionProperties `pulumi:"definition"`
	// The value of the property.
	Value *EntityDataValue `pulumi:"value"`
}

// EntityPropertyInput is an input type that accepts EntityPropertyArgs and EntityPropertyOutput values.
// You can construct a concrete instance of `EntityPropertyInput` via:
//
//	EntityPropertyArgs{...}
type EntityPropertyInput interface {
	pulumi.Input

	ToEntityPropertyOutput() EntityPropertyOutput
	ToEntityPropertyOutputWithContext(context.Context) EntityPropertyOutput
}

type EntityPropertyArgs struct {
	// An object that specifies information about a property.
	Definition EntityPropertyDefinitionPropertiesPtrInput `pulumi:"definition"`
	// The value of the property.
	Value EntityDataValuePtrInput `pulumi:"value"`
}

func (EntityPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityProperty)(nil)).Elem()
}

func (i EntityPropertyArgs) ToEntityPropertyOutput() EntityPropertyOutput {
	return i.ToEntityPropertyOutputWithContext(context.Background())
}

func (i EntityPropertyArgs) ToEntityPropertyOutputWithContext(ctx context.Context) EntityPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyOutput)
}

// EntityPropertyMapInput is an input type that accepts EntityPropertyMap and EntityPropertyMapOutput values.
// You can construct a concrete instance of `EntityPropertyMapInput` via:
//
//	EntityPropertyMap{ "key": EntityPropertyArgs{...} }
type EntityPropertyMapInput interface {
	pulumi.Input

	ToEntityPropertyMapOutput() EntityPropertyMapOutput
	ToEntityPropertyMapOutputWithContext(context.Context) EntityPropertyMapOutput
}

type EntityPropertyMap map[string]EntityPropertyInput

func (EntityPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityProperty)(nil)).Elem()
}

func (i EntityPropertyMap) ToEntityPropertyMapOutput() EntityPropertyMapOutput {
	return i.ToEntityPropertyMapOutputWithContext(context.Background())
}

func (i EntityPropertyMap) ToEntityPropertyMapOutputWithContext(ctx context.Context) EntityPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyMapOutput)
}

type EntityPropertyOutput struct{ *pulumi.OutputState }

func (EntityPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityProperty)(nil)).Elem()
}

func (o EntityPropertyOutput) ToEntityPropertyOutput() EntityPropertyOutput {
	return o
}

func (o EntityPropertyOutput) ToEntityPropertyOutputWithContext(ctx context.Context) EntityPropertyOutput {
	return o
}

// An object that specifies information about a property.
func (o EntityPropertyOutput) Definition() EntityPropertyDefinitionPropertiesPtrOutput {
	return o.ApplyT(func(v EntityProperty) *EntityPropertyDefinitionProperties { return v.Definition }).(EntityPropertyDefinitionPropertiesPtrOutput)
}

// The value of the property.
func (o EntityPropertyOutput) Value() EntityDataValuePtrOutput {
	return o.ApplyT(func(v EntityProperty) *EntityDataValue { return v.Value }).(EntityDataValuePtrOutput)
}

type EntityPropertyMapOutput struct{ *pulumi.OutputState }

func (EntityPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityProperty)(nil)).Elem()
}

func (o EntityPropertyMapOutput) ToEntityPropertyMapOutput() EntityPropertyMapOutput {
	return o
}

func (o EntityPropertyMapOutput) ToEntityPropertyMapOutputWithContext(ctx context.Context) EntityPropertyMapOutput {
	return o
}

func (o EntityPropertyMapOutput) MapIndex(k pulumi.StringInput) EntityPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EntityProperty {
		return vs[0].(map[string]EntityProperty)[vs[1].(string)]
	}).(EntityPropertyOutput)
}

// An object that specifies information about a property.
type EntityPropertyDefinitionProperties struct {
	// An object that specifies information about a property.
	Configuration map[string]string `pulumi:"configuration"`
	// An object that contains information about the data type.
	DataType *EntityDataType `pulumi:"dataType"`
	// An object that contains the default value.
	DefaultValue *EntityDataValue `pulumi:"defaultValue"`
	// A Boolean value that specifies whether the property ID comes from an external data store.
	IsExternalId *bool `pulumi:"isExternalId"`
	// A Boolean value that specifies whether the property definition can be updated.
	IsFinal *bool `pulumi:"isFinal"`
	// A Boolean value that specifies whether the property definition is imported from an external data store.
	IsImported *bool `pulumi:"isImported"`
	// A Boolean value that specifies whether the property definition is inherited from a parent entity.
	IsInherited *bool `pulumi:"isInherited"`
	// A Boolean value that specifies whether the property is required.
	IsRequiredInEntity *bool `pulumi:"isRequiredInEntity"`
	// A Boolean value that specifies whether the property is stored externally.
	IsStoredExternally *bool `pulumi:"isStoredExternally"`
	// A Boolean value that specifies whether the property consists of time series data.
	IsTimeSeries *bool `pulumi:"isTimeSeries"`
}

// EntityPropertyDefinitionPropertiesInput is an input type that accepts EntityPropertyDefinitionPropertiesArgs and EntityPropertyDefinitionPropertiesOutput values.
// You can construct a concrete instance of `EntityPropertyDefinitionPropertiesInput` via:
//
//	EntityPropertyDefinitionPropertiesArgs{...}
type EntityPropertyDefinitionPropertiesInput interface {
	pulumi.Input

	ToEntityPropertyDefinitionPropertiesOutput() EntityPropertyDefinitionPropertiesOutput
	ToEntityPropertyDefinitionPropertiesOutputWithContext(context.Context) EntityPropertyDefinitionPropertiesOutput
}

// An object that specifies information about a property.
type EntityPropertyDefinitionPropertiesArgs struct {
	// An object that specifies information about a property.
	Configuration pulumi.StringMapInput `pulumi:"configuration"`
	// An object that contains information about the data type.
	DataType EntityDataTypePtrInput `pulumi:"dataType"`
	// An object that contains the default value.
	DefaultValue EntityDataValuePtrInput `pulumi:"defaultValue"`
	// A Boolean value that specifies whether the property ID comes from an external data store.
	IsExternalId pulumi.BoolPtrInput `pulumi:"isExternalId"`
	// A Boolean value that specifies whether the property definition can be updated.
	IsFinal pulumi.BoolPtrInput `pulumi:"isFinal"`
	// A Boolean value that specifies whether the property definition is imported from an external data store.
	IsImported pulumi.BoolPtrInput `pulumi:"isImported"`
	// A Boolean value that specifies whether the property definition is inherited from a parent entity.
	IsInherited pulumi.BoolPtrInput `pulumi:"isInherited"`
	// A Boolean value that specifies whether the property is required.
	IsRequiredInEntity pulumi.BoolPtrInput `pulumi:"isRequiredInEntity"`
	// A Boolean value that specifies whether the property is stored externally.
	IsStoredExternally pulumi.BoolPtrInput `pulumi:"isStoredExternally"`
	// A Boolean value that specifies whether the property consists of time series data.
	IsTimeSeries pulumi.BoolPtrInput `pulumi:"isTimeSeries"`
}

func (EntityPropertyDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyDefinitionProperties)(nil)).Elem()
}

func (i EntityPropertyDefinitionPropertiesArgs) ToEntityPropertyDefinitionPropertiesOutput() EntityPropertyDefinitionPropertiesOutput {
	return i.ToEntityPropertyDefinitionPropertiesOutputWithContext(context.Background())
}

func (i EntityPropertyDefinitionPropertiesArgs) ToEntityPropertyDefinitionPropertiesOutputWithContext(ctx context.Context) EntityPropertyDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyDefinitionPropertiesOutput)
}

func (i EntityPropertyDefinitionPropertiesArgs) ToEntityPropertyDefinitionPropertiesPtrOutput() EntityPropertyDefinitionPropertiesPtrOutput {
	return i.ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i EntityPropertyDefinitionPropertiesArgs) ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertyDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyDefinitionPropertiesOutput).ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(ctx)
}

// EntityPropertyDefinitionPropertiesPtrInput is an input type that accepts EntityPropertyDefinitionPropertiesArgs, EntityPropertyDefinitionPropertiesPtr and EntityPropertyDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `EntityPropertyDefinitionPropertiesPtrInput` via:
//
//	        EntityPropertyDefinitionPropertiesArgs{...}
//
//	or:
//
//	        nil
type EntityPropertyDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToEntityPropertyDefinitionPropertiesPtrOutput() EntityPropertyDefinitionPropertiesPtrOutput
	ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(context.Context) EntityPropertyDefinitionPropertiesPtrOutput
}

type entityPropertyDefinitionPropertiesPtrType EntityPropertyDefinitionPropertiesArgs

func EntityPropertyDefinitionPropertiesPtr(v *EntityPropertyDefinitionPropertiesArgs) EntityPropertyDefinitionPropertiesPtrInput {
	return (*entityPropertyDefinitionPropertiesPtrType)(v)
}

func (*entityPropertyDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityPropertyDefinitionProperties)(nil)).Elem()
}

func (i *entityPropertyDefinitionPropertiesPtrType) ToEntityPropertyDefinitionPropertiesPtrOutput() EntityPropertyDefinitionPropertiesPtrOutput {
	return i.ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *entityPropertyDefinitionPropertiesPtrType) ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertyDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyDefinitionPropertiesPtrOutput)
}

// An object that specifies information about a property.
type EntityPropertyDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (EntityPropertyDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyDefinitionProperties)(nil)).Elem()
}

func (o EntityPropertyDefinitionPropertiesOutput) ToEntityPropertyDefinitionPropertiesOutput() EntityPropertyDefinitionPropertiesOutput {
	return o
}

func (o EntityPropertyDefinitionPropertiesOutput) ToEntityPropertyDefinitionPropertiesOutputWithContext(ctx context.Context) EntityPropertyDefinitionPropertiesOutput {
	return o
}

func (o EntityPropertyDefinitionPropertiesOutput) ToEntityPropertyDefinitionPropertiesPtrOutput() EntityPropertyDefinitionPropertiesPtrOutput {
	return o.ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o EntityPropertyDefinitionPropertiesOutput) ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertyDefinitionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityPropertyDefinitionProperties) *EntityPropertyDefinitionProperties {
		return &v
	}).(EntityPropertyDefinitionPropertiesPtrOutput)
}

// An object that specifies information about a property.
func (o EntityPropertyDefinitionPropertiesOutput) Configuration() pulumi.StringMapOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) map[string]string { return v.Configuration }).(pulumi.StringMapOutput)
}

// An object that contains information about the data type.
func (o EntityPropertyDefinitionPropertiesOutput) DataType() EntityDataTypePtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *EntityDataType { return v.DataType }).(EntityDataTypePtrOutput)
}

// An object that contains the default value.
func (o EntityPropertyDefinitionPropertiesOutput) DefaultValue() EntityDataValuePtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *EntityDataValue { return v.DefaultValue }).(EntityDataValuePtrOutput)
}

// A Boolean value that specifies whether the property ID comes from an external data store.
func (o EntityPropertyDefinitionPropertiesOutput) IsExternalId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *bool { return v.IsExternalId }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property definition can be updated.
func (o EntityPropertyDefinitionPropertiesOutput) IsFinal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *bool { return v.IsFinal }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property definition is imported from an external data store.
func (o EntityPropertyDefinitionPropertiesOutput) IsImported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *bool { return v.IsImported }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property definition is inherited from a parent entity.
func (o EntityPropertyDefinitionPropertiesOutput) IsInherited() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *bool { return v.IsInherited }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property is required.
func (o EntityPropertyDefinitionPropertiesOutput) IsRequiredInEntity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *bool { return v.IsRequiredInEntity }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property is stored externally.
func (o EntityPropertyDefinitionPropertiesOutput) IsStoredExternally() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *bool { return v.IsStoredExternally }).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property consists of time series data.
func (o EntityPropertyDefinitionPropertiesOutput) IsTimeSeries() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EntityPropertyDefinitionProperties) *bool { return v.IsTimeSeries }).(pulumi.BoolPtrOutput)
}

type EntityPropertyDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntityPropertyDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityPropertyDefinitionProperties)(nil)).Elem()
}

func (o EntityPropertyDefinitionPropertiesPtrOutput) ToEntityPropertyDefinitionPropertiesPtrOutput() EntityPropertyDefinitionPropertiesPtrOutput {
	return o
}

func (o EntityPropertyDefinitionPropertiesPtrOutput) ToEntityPropertyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertyDefinitionPropertiesPtrOutput {
	return o
}

func (o EntityPropertyDefinitionPropertiesPtrOutput) Elem() EntityPropertyDefinitionPropertiesOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) EntityPropertyDefinitionProperties {
		if v != nil {
			return *v
		}
		var ret EntityPropertyDefinitionProperties
		return ret
	}).(EntityPropertyDefinitionPropertiesOutput)
}

// An object that specifies information about a property.
func (o EntityPropertyDefinitionPropertiesPtrOutput) Configuration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(pulumi.StringMapOutput)
}

// An object that contains information about the data type.
func (o EntityPropertyDefinitionPropertiesPtrOutput) DataType() EntityDataTypePtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *EntityDataType {
		if v == nil {
			return nil
		}
		return v.DataType
	}).(EntityDataTypePtrOutput)
}

// An object that contains the default value.
func (o EntityPropertyDefinitionPropertiesPtrOutput) DefaultValue() EntityDataValuePtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *EntityDataValue {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(EntityDataValuePtrOutput)
}

// A Boolean value that specifies whether the property ID comes from an external data store.
func (o EntityPropertyDefinitionPropertiesPtrOutput) IsExternalId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsExternalId
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property definition can be updated.
func (o EntityPropertyDefinitionPropertiesPtrOutput) IsFinal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsFinal
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property definition is imported from an external data store.
func (o EntityPropertyDefinitionPropertiesPtrOutput) IsImported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsImported
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property definition is inherited from a parent entity.
func (o EntityPropertyDefinitionPropertiesPtrOutput) IsInherited() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsInherited
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property is required.
func (o EntityPropertyDefinitionPropertiesPtrOutput) IsRequiredInEntity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequiredInEntity
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property is stored externally.
func (o EntityPropertyDefinitionPropertiesPtrOutput) IsStoredExternally() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsStoredExternally
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that specifies whether the property consists of time series data.
func (o EntityPropertyDefinitionPropertiesPtrOutput) IsTimeSeries() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EntityPropertyDefinitionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsTimeSeries
	}).(pulumi.BoolPtrOutput)
}

// An object that specifies information about a property group.
type EntityPropertyGroup struct {
	// The type of property group.
	GroupType *EntityPropertyGroupGroupType `pulumi:"groupType"`
	// The list of property names in the property group.
	PropertyNames []string `pulumi:"propertyNames"`
}

// EntityPropertyGroupInput is an input type that accepts EntityPropertyGroupArgs and EntityPropertyGroupOutput values.
// You can construct a concrete instance of `EntityPropertyGroupInput` via:
//
//	EntityPropertyGroupArgs{...}
type EntityPropertyGroupInput interface {
	pulumi.Input

	ToEntityPropertyGroupOutput() EntityPropertyGroupOutput
	ToEntityPropertyGroupOutputWithContext(context.Context) EntityPropertyGroupOutput
}

// An object that specifies information about a property group.
type EntityPropertyGroupArgs struct {
	// The type of property group.
	GroupType EntityPropertyGroupGroupTypePtrInput `pulumi:"groupType"`
	// The list of property names in the property group.
	PropertyNames pulumi.StringArrayInput `pulumi:"propertyNames"`
}

func (EntityPropertyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyGroup)(nil)).Elem()
}

func (i EntityPropertyGroupArgs) ToEntityPropertyGroupOutput() EntityPropertyGroupOutput {
	return i.ToEntityPropertyGroupOutputWithContext(context.Background())
}

func (i EntityPropertyGroupArgs) ToEntityPropertyGroupOutputWithContext(ctx context.Context) EntityPropertyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyGroupOutput)
}

// EntityPropertyGroupMapInput is an input type that accepts EntityPropertyGroupMap and EntityPropertyGroupMapOutput values.
// You can construct a concrete instance of `EntityPropertyGroupMapInput` via:
//
//	EntityPropertyGroupMap{ "key": EntityPropertyGroupArgs{...} }
type EntityPropertyGroupMapInput interface {
	pulumi.Input

	ToEntityPropertyGroupMapOutput() EntityPropertyGroupMapOutput
	ToEntityPropertyGroupMapOutputWithContext(context.Context) EntityPropertyGroupMapOutput
}

type EntityPropertyGroupMap map[string]EntityPropertyGroupInput

func (EntityPropertyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityPropertyGroup)(nil)).Elem()
}

func (i EntityPropertyGroupMap) ToEntityPropertyGroupMapOutput() EntityPropertyGroupMapOutput {
	return i.ToEntityPropertyGroupMapOutputWithContext(context.Background())
}

func (i EntityPropertyGroupMap) ToEntityPropertyGroupMapOutputWithContext(ctx context.Context) EntityPropertyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertyGroupMapOutput)
}

// An object that specifies information about a property group.
type EntityPropertyGroupOutput struct{ *pulumi.OutputState }

func (EntityPropertyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertyGroup)(nil)).Elem()
}

func (o EntityPropertyGroupOutput) ToEntityPropertyGroupOutput() EntityPropertyGroupOutput {
	return o
}

func (o EntityPropertyGroupOutput) ToEntityPropertyGroupOutputWithContext(ctx context.Context) EntityPropertyGroupOutput {
	return o
}

// The type of property group.
func (o EntityPropertyGroupOutput) GroupType() EntityPropertyGroupGroupTypePtrOutput {
	return o.ApplyT(func(v EntityPropertyGroup) *EntityPropertyGroupGroupType { return v.GroupType }).(EntityPropertyGroupGroupTypePtrOutput)
}

// The list of property names in the property group.
func (o EntityPropertyGroupOutput) PropertyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EntityPropertyGroup) []string { return v.PropertyNames }).(pulumi.StringArrayOutput)
}

type EntityPropertyGroupMapOutput struct{ *pulumi.OutputState }

func (EntityPropertyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EntityPropertyGroup)(nil)).Elem()
}

func (o EntityPropertyGroupMapOutput) ToEntityPropertyGroupMapOutput() EntityPropertyGroupMapOutput {
	return o
}

func (o EntityPropertyGroupMapOutput) ToEntityPropertyGroupMapOutputWithContext(ctx context.Context) EntityPropertyGroupMapOutput {
	return o
}

func (o EntityPropertyGroupMapOutput) MapIndex(k pulumi.StringInput) EntityPropertyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EntityPropertyGroup {
		return vs[0].(map[string]EntityPropertyGroup)[vs[1].(string)]
	}).(EntityPropertyGroupOutput)
}

// The type of the relationship.
type EntityRelationship struct {
	// The type of the relationship.
	RelationshipType *string `pulumi:"relationshipType"`
	// The ID of the target component type associated with this relationship.
	TargetComponentTypeId *string `pulumi:"targetComponentTypeId"`
}

// EntityRelationshipInput is an input type that accepts EntityRelationshipArgs and EntityRelationshipOutput values.
// You can construct a concrete instance of `EntityRelationshipInput` via:
//
//	EntityRelationshipArgs{...}
type EntityRelationshipInput interface {
	pulumi.Input

	ToEntityRelationshipOutput() EntityRelationshipOutput
	ToEntityRelationshipOutputWithContext(context.Context) EntityRelationshipOutput
}

// The type of the relationship.
type EntityRelationshipArgs struct {
	// The type of the relationship.
	RelationshipType pulumi.StringPtrInput `pulumi:"relationshipType"`
	// The ID of the target component type associated with this relationship.
	TargetComponentTypeId pulumi.StringPtrInput `pulumi:"targetComponentTypeId"`
}

func (EntityRelationshipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRelationship)(nil)).Elem()
}

func (i EntityRelationshipArgs) ToEntityRelationshipOutput() EntityRelationshipOutput {
	return i.ToEntityRelationshipOutputWithContext(context.Background())
}

func (i EntityRelationshipArgs) ToEntityRelationshipOutputWithContext(ctx context.Context) EntityRelationshipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRelationshipOutput)
}

func (i EntityRelationshipArgs) ToEntityRelationshipPtrOutput() EntityRelationshipPtrOutput {
	return i.ToEntityRelationshipPtrOutputWithContext(context.Background())
}

func (i EntityRelationshipArgs) ToEntityRelationshipPtrOutputWithContext(ctx context.Context) EntityRelationshipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRelationshipOutput).ToEntityRelationshipPtrOutputWithContext(ctx)
}

// EntityRelationshipPtrInput is an input type that accepts EntityRelationshipArgs, EntityRelationshipPtr and EntityRelationshipPtrOutput values.
// You can construct a concrete instance of `EntityRelationshipPtrInput` via:
//
//	        EntityRelationshipArgs{...}
//
//	or:
//
//	        nil
type EntityRelationshipPtrInput interface {
	pulumi.Input

	ToEntityRelationshipPtrOutput() EntityRelationshipPtrOutput
	ToEntityRelationshipPtrOutputWithContext(context.Context) EntityRelationshipPtrOutput
}

type entityRelationshipPtrType EntityRelationshipArgs

func EntityRelationshipPtr(v *EntityRelationshipArgs) EntityRelationshipPtrInput {
	return (*entityRelationshipPtrType)(v)
}

func (*entityRelationshipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityRelationship)(nil)).Elem()
}

func (i *entityRelationshipPtrType) ToEntityRelationshipPtrOutput() EntityRelationshipPtrOutput {
	return i.ToEntityRelationshipPtrOutputWithContext(context.Background())
}

func (i *entityRelationshipPtrType) ToEntityRelationshipPtrOutputWithContext(ctx context.Context) EntityRelationshipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityRelationshipPtrOutput)
}

// The type of the relationship.
type EntityRelationshipOutput struct{ *pulumi.OutputState }

func (EntityRelationshipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityRelationship)(nil)).Elem()
}

func (o EntityRelationshipOutput) ToEntityRelationshipOutput() EntityRelationshipOutput {
	return o
}

func (o EntityRelationshipOutput) ToEntityRelationshipOutputWithContext(ctx context.Context) EntityRelationshipOutput {
	return o
}

func (o EntityRelationshipOutput) ToEntityRelationshipPtrOutput() EntityRelationshipPtrOutput {
	return o.ToEntityRelationshipPtrOutputWithContext(context.Background())
}

func (o EntityRelationshipOutput) ToEntityRelationshipPtrOutputWithContext(ctx context.Context) EntityRelationshipPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityRelationship) *EntityRelationship {
		return &v
	}).(EntityRelationshipPtrOutput)
}

// The type of the relationship.
func (o EntityRelationshipOutput) RelationshipType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityRelationship) *string { return v.RelationshipType }).(pulumi.StringPtrOutput)
}

// The ID of the target component type associated with this relationship.
func (o EntityRelationshipOutput) TargetComponentTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityRelationship) *string { return v.TargetComponentTypeId }).(pulumi.StringPtrOutput)
}

type EntityRelationshipPtrOutput struct{ *pulumi.OutputState }

func (EntityRelationshipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityRelationship)(nil)).Elem()
}

func (o EntityRelationshipPtrOutput) ToEntityRelationshipPtrOutput() EntityRelationshipPtrOutput {
	return o
}

func (o EntityRelationshipPtrOutput) ToEntityRelationshipPtrOutputWithContext(ctx context.Context) EntityRelationshipPtrOutput {
	return o
}

func (o EntityRelationshipPtrOutput) Elem() EntityRelationshipOutput {
	return o.ApplyT(func(v *EntityRelationship) EntityRelationship {
		if v != nil {
			return *v
		}
		var ret EntityRelationship
		return ret
	}).(EntityRelationshipOutput)
}

// The type of the relationship.
func (o EntityRelationshipPtrOutput) RelationshipType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityRelationship) *string {
		if v == nil {
			return nil
		}
		return v.RelationshipType
	}).(pulumi.StringPtrOutput)
}

// The ID of the target component type associated with this relationship.
func (o EntityRelationshipPtrOutput) TargetComponentTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityRelationship) *string {
		if v == nil {
			return nil
		}
		return v.TargetComponentTypeId
	}).(pulumi.StringPtrOutput)
}

type EntityStatus struct {
	Error interface{}        `pulumi:"error"`
	State *EntityStatusState `pulumi:"state"`
}

// EntityStatusInput is an input type that accepts EntityStatusArgs and EntityStatusOutput values.
// You can construct a concrete instance of `EntityStatusInput` via:
//
//	EntityStatusArgs{...}
type EntityStatusInput interface {
	pulumi.Input

	ToEntityStatusOutput() EntityStatusOutput
	ToEntityStatusOutputWithContext(context.Context) EntityStatusOutput
}

type EntityStatusArgs struct {
	Error pulumi.Input              `pulumi:"error"`
	State EntityStatusStatePtrInput `pulumi:"state"`
}

func (EntityStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityStatus)(nil)).Elem()
}

func (i EntityStatusArgs) ToEntityStatusOutput() EntityStatusOutput {
	return i.ToEntityStatusOutputWithContext(context.Background())
}

func (i EntityStatusArgs) ToEntityStatusOutputWithContext(ctx context.Context) EntityStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityStatusOutput)
}

func (i EntityStatusArgs) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return i.ToEntityStatusPtrOutputWithContext(context.Background())
}

func (i EntityStatusArgs) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityStatusOutput).ToEntityStatusPtrOutputWithContext(ctx)
}

// EntityStatusPtrInput is an input type that accepts EntityStatusArgs, EntityStatusPtr and EntityStatusPtrOutput values.
// You can construct a concrete instance of `EntityStatusPtrInput` via:
//
//	        EntityStatusArgs{...}
//
//	or:
//
//	        nil
type EntityStatusPtrInput interface {
	pulumi.Input

	ToEntityStatusPtrOutput() EntityStatusPtrOutput
	ToEntityStatusPtrOutputWithContext(context.Context) EntityStatusPtrOutput
}

type entityStatusPtrType EntityStatusArgs

func EntityStatusPtr(v *EntityStatusArgs) EntityStatusPtrInput {
	return (*entityStatusPtrType)(v)
}

func (*entityStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityStatus)(nil)).Elem()
}

func (i *entityStatusPtrType) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return i.ToEntityStatusPtrOutputWithContext(context.Background())
}

func (i *entityStatusPtrType) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityStatusPtrOutput)
}

type EntityStatusOutput struct{ *pulumi.OutputState }

func (EntityStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityStatus)(nil)).Elem()
}

func (o EntityStatusOutput) ToEntityStatusOutput() EntityStatusOutput {
	return o
}

func (o EntityStatusOutput) ToEntityStatusOutputWithContext(ctx context.Context) EntityStatusOutput {
	return o
}

func (o EntityStatusOutput) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return o.ToEntityStatusPtrOutputWithContext(context.Background())
}

func (o EntityStatusOutput) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityStatus) *EntityStatus {
		return &v
	}).(EntityStatusPtrOutput)
}

func (o EntityStatusOutput) Error() pulumi.AnyOutput {
	return o.ApplyT(func(v EntityStatus) interface{} { return v.Error }).(pulumi.AnyOutput)
}

func (o EntityStatusOutput) State() EntityStatusStatePtrOutput {
	return o.ApplyT(func(v EntityStatus) *EntityStatusState { return v.State }).(EntityStatusStatePtrOutput)
}

type EntityStatusPtrOutput struct{ *pulumi.OutputState }

func (EntityStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityStatus)(nil)).Elem()
}

func (o EntityStatusPtrOutput) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return o
}

func (o EntityStatusPtrOutput) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return o
}

func (o EntityStatusPtrOutput) Elem() EntityStatusOutput {
	return o.ApplyT(func(v *EntityStatus) EntityStatus {
		if v != nil {
			return *v
		}
		var ret EntityStatus
		return ret
	}).(EntityStatusOutput)
}

func (o EntityStatusPtrOutput) Error() pulumi.AnyOutput {
	return o.ApplyT(func(v *EntityStatus) interface{} {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.AnyOutput)
}

func (o EntityStatusPtrOutput) State() EntityStatusStatePtrOutput {
	return o.ApplyT(func(v *EntityStatus) *EntityStatusState {
		if v == nil {
			return nil
		}
		return v.State
	}).(EntityStatusStatePtrOutput)
}

// Error object with Message and Code.
type EntityStatusError1Properties struct {
	Code    *EntityStatusError1PropertiesCode `pulumi:"code"`
	Message *string                           `pulumi:"message"`
}

// Error object with Message and Code.
type EntityStatusErrorProperties struct {
	Code    *EntityStatusErrorPropertiesCode `pulumi:"code"`
	Message *string                          `pulumi:"message"`
}

// EntityStatusErrorPropertiesInput is an input type that accepts EntityStatusErrorPropertiesArgs and EntityStatusErrorPropertiesOutput values.
// You can construct a concrete instance of `EntityStatusErrorPropertiesInput` via:
//
//	EntityStatusErrorPropertiesArgs{...}
type EntityStatusErrorPropertiesInput interface {
	pulumi.Input

	ToEntityStatusErrorPropertiesOutput() EntityStatusErrorPropertiesOutput
	ToEntityStatusErrorPropertiesOutputWithContext(context.Context) EntityStatusErrorPropertiesOutput
}

// Error object with Message and Code.
type EntityStatusErrorPropertiesArgs struct {
	Code    EntityStatusErrorPropertiesCodePtrInput `pulumi:"code"`
	Message pulumi.StringPtrInput                   `pulumi:"message"`
}

func (EntityStatusErrorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityStatusErrorProperties)(nil)).Elem()
}

func (i EntityStatusErrorPropertiesArgs) ToEntityStatusErrorPropertiesOutput() EntityStatusErrorPropertiesOutput {
	return i.ToEntityStatusErrorPropertiesOutputWithContext(context.Background())
}

func (i EntityStatusErrorPropertiesArgs) ToEntityStatusErrorPropertiesOutputWithContext(ctx context.Context) EntityStatusErrorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityStatusErrorPropertiesOutput)
}

func (i EntityStatusErrorPropertiesArgs) ToEntityStatusErrorPropertiesPtrOutput() EntityStatusErrorPropertiesPtrOutput {
	return i.ToEntityStatusErrorPropertiesPtrOutputWithContext(context.Background())
}

func (i EntityStatusErrorPropertiesArgs) ToEntityStatusErrorPropertiesPtrOutputWithContext(ctx context.Context) EntityStatusErrorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityStatusErrorPropertiesOutput).ToEntityStatusErrorPropertiesPtrOutputWithContext(ctx)
}

// EntityStatusErrorPropertiesPtrInput is an input type that accepts EntityStatusErrorPropertiesArgs, EntityStatusErrorPropertiesPtr and EntityStatusErrorPropertiesPtrOutput values.
// You can construct a concrete instance of `EntityStatusErrorPropertiesPtrInput` via:
//
//	        EntityStatusErrorPropertiesArgs{...}
//
//	or:
//
//	        nil
type EntityStatusErrorPropertiesPtrInput interface {
	pulumi.Input

	ToEntityStatusErrorPropertiesPtrOutput() EntityStatusErrorPropertiesPtrOutput
	ToEntityStatusErrorPropertiesPtrOutputWithContext(context.Context) EntityStatusErrorPropertiesPtrOutput
}

type entityStatusErrorPropertiesPtrType EntityStatusErrorPropertiesArgs

func EntityStatusErrorPropertiesPtr(v *EntityStatusErrorPropertiesArgs) EntityStatusErrorPropertiesPtrInput {
	return (*entityStatusErrorPropertiesPtrType)(v)
}

func (*entityStatusErrorPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityStatusErrorProperties)(nil)).Elem()
}

func (i *entityStatusErrorPropertiesPtrType) ToEntityStatusErrorPropertiesPtrOutput() EntityStatusErrorPropertiesPtrOutput {
	return i.ToEntityStatusErrorPropertiesPtrOutputWithContext(context.Background())
}

func (i *entityStatusErrorPropertiesPtrType) ToEntityStatusErrorPropertiesPtrOutputWithContext(ctx context.Context) EntityStatusErrorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityStatusErrorPropertiesPtrOutput)
}

// Error object with Message and Code.
type EntityStatusErrorPropertiesOutput struct{ *pulumi.OutputState }

func (EntityStatusErrorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityStatusErrorProperties)(nil)).Elem()
}

func (o EntityStatusErrorPropertiesOutput) ToEntityStatusErrorPropertiesOutput() EntityStatusErrorPropertiesOutput {
	return o
}

func (o EntityStatusErrorPropertiesOutput) ToEntityStatusErrorPropertiesOutputWithContext(ctx context.Context) EntityStatusErrorPropertiesOutput {
	return o
}

func (o EntityStatusErrorPropertiesOutput) ToEntityStatusErrorPropertiesPtrOutput() EntityStatusErrorPropertiesPtrOutput {
	return o.ToEntityStatusErrorPropertiesPtrOutputWithContext(context.Background())
}

func (o EntityStatusErrorPropertiesOutput) ToEntityStatusErrorPropertiesPtrOutputWithContext(ctx context.Context) EntityStatusErrorPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityStatusErrorProperties) *EntityStatusErrorProperties {
		return &v
	}).(EntityStatusErrorPropertiesPtrOutput)
}

func (o EntityStatusErrorPropertiesOutput) Code() EntityStatusErrorPropertiesCodePtrOutput {
	return o.ApplyT(func(v EntityStatusErrorProperties) *EntityStatusErrorPropertiesCode { return v.Code }).(EntityStatusErrorPropertiesCodePtrOutput)
}

func (o EntityStatusErrorPropertiesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityStatusErrorProperties) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type EntityStatusErrorPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntityStatusErrorPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityStatusErrorProperties)(nil)).Elem()
}

func (o EntityStatusErrorPropertiesPtrOutput) ToEntityStatusErrorPropertiesPtrOutput() EntityStatusErrorPropertiesPtrOutput {
	return o
}

func (o EntityStatusErrorPropertiesPtrOutput) ToEntityStatusErrorPropertiesPtrOutputWithContext(ctx context.Context) EntityStatusErrorPropertiesPtrOutput {
	return o
}

func (o EntityStatusErrorPropertiesPtrOutput) Elem() EntityStatusErrorPropertiesOutput {
	return o.ApplyT(func(v *EntityStatusErrorProperties) EntityStatusErrorProperties {
		if v != nil {
			return *v
		}
		var ret EntityStatusErrorProperties
		return ret
	}).(EntityStatusErrorPropertiesOutput)
}

func (o EntityStatusErrorPropertiesPtrOutput) Code() EntityStatusErrorPropertiesCodePtrOutput {
	return o.ApplyT(func(v *EntityStatusErrorProperties) *EntityStatusErrorPropertiesCode {
		if v == nil {
			return nil
		}
		return v.Code
	}).(EntityStatusErrorPropertiesCodePtrOutput)
}

func (o EntityStatusErrorPropertiesPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityStatusErrorProperties) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeCompositeComponentTypeInput)(nil)).Elem(), ComponentTypeCompositeComponentTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeCompositeComponentTypeMapInput)(nil)).Elem(), ComponentTypeCompositeComponentTypeMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataConnectorInput)(nil)).Elem(), ComponentTypeDataConnectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataConnectorPtrInput)(nil)).Elem(), ComponentTypeDataConnectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataTypeInput)(nil)).Elem(), ComponentTypeDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataTypePtrInput)(nil)).Elem(), ComponentTypeDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataValueInput)(nil)).Elem(), ComponentTypeDataValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataValuePtrInput)(nil)).Elem(), ComponentTypeDataValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataValueArrayInput)(nil)).Elem(), ComponentTypeDataValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataValueMapInput)(nil)).Elem(), ComponentTypeDataValueMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataValueRelationshipValuePropertiesInput)(nil)).Elem(), ComponentTypeDataValueRelationshipValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeDataValueRelationshipValuePropertiesPtrInput)(nil)).Elem(), ComponentTypeDataValueRelationshipValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeFunctionInput)(nil)).Elem(), ComponentTypeFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeFunctionMapInput)(nil)).Elem(), ComponentTypeFunctionMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeLambdaFunctionInput)(nil)).Elem(), ComponentTypeLambdaFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeLambdaFunctionPtrInput)(nil)).Elem(), ComponentTypeLambdaFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypePropertyDefinitionInput)(nil)).Elem(), ComponentTypePropertyDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypePropertyDefinitionMapInput)(nil)).Elem(), ComponentTypePropertyDefinitionMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypePropertyGroupInput)(nil)).Elem(), ComponentTypePropertyGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypePropertyGroupMapInput)(nil)).Elem(), ComponentTypePropertyGroupMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeRelationshipInput)(nil)).Elem(), ComponentTypeRelationshipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTypeRelationshipPtrInput)(nil)).Elem(), ComponentTypeRelationshipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityComponentInput)(nil)).Elem(), EntityComponentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityComponentMapInput)(nil)).Elem(), EntityComponentMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityCompositeComponentInput)(nil)).Elem(), EntityCompositeComponentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityCompositeComponentMapInput)(nil)).Elem(), EntityCompositeComponentMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataTypeInput)(nil)).Elem(), EntityDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataTypePtrInput)(nil)).Elem(), EntityDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataValueInput)(nil)).Elem(), EntityDataValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataValuePtrInput)(nil)).Elem(), EntityDataValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataValueArrayInput)(nil)).Elem(), EntityDataValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataValueMapInput)(nil)).Elem(), EntityDataValueMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataValueRelationshipValuePropertiesInput)(nil)).Elem(), EntityDataValueRelationshipValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityDataValueRelationshipValuePropertiesPtrInput)(nil)).Elem(), EntityDataValueRelationshipValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyInput)(nil)).Elem(), EntityPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyMapInput)(nil)).Elem(), EntityPropertyMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyDefinitionPropertiesInput)(nil)).Elem(), EntityPropertyDefinitionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyDefinitionPropertiesPtrInput)(nil)).Elem(), EntityPropertyDefinitionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyGroupInput)(nil)).Elem(), EntityPropertyGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPropertyGroupMapInput)(nil)).Elem(), EntityPropertyGroupMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRelationshipInput)(nil)).Elem(), EntityRelationshipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityRelationshipPtrInput)(nil)).Elem(), EntityRelationshipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityStatusInput)(nil)).Elem(), EntityStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityStatusPtrInput)(nil)).Elem(), EntityStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityStatusErrorPropertiesInput)(nil)).Elem(), EntityStatusErrorPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityStatusErrorPropertiesPtrInput)(nil)).Elem(), EntityStatusErrorPropertiesArgs{})
	pulumi.RegisterOutputType(ComponentTypeCompositeComponentTypeOutput{})
	pulumi.RegisterOutputType(ComponentTypeCompositeComponentTypeMapOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataConnectorOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataConnectorPtrOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataTypeOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataTypePtrOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataValueOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataValuePtrOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataValueArrayOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataValueMapOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataValueRelationshipValuePropertiesOutput{})
	pulumi.RegisterOutputType(ComponentTypeDataValueRelationshipValuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentTypeFunctionOutput{})
	pulumi.RegisterOutputType(ComponentTypeFunctionMapOutput{})
	pulumi.RegisterOutputType(ComponentTypeLambdaFunctionOutput{})
	pulumi.RegisterOutputType(ComponentTypeLambdaFunctionPtrOutput{})
	pulumi.RegisterOutputType(ComponentTypePropertyDefinitionOutput{})
	pulumi.RegisterOutputType(ComponentTypePropertyDefinitionMapOutput{})
	pulumi.RegisterOutputType(ComponentTypePropertyGroupOutput{})
	pulumi.RegisterOutputType(ComponentTypePropertyGroupMapOutput{})
	pulumi.RegisterOutputType(ComponentTypeRelationshipOutput{})
	pulumi.RegisterOutputType(ComponentTypeRelationshipPtrOutput{})
	pulumi.RegisterOutputType(ComponentTypeStatusOutput{})
	pulumi.RegisterOutputType(ComponentTypeStatusPtrOutput{})
	pulumi.RegisterOutputType(ComponentTypeStatusErrorPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentTypeStatusErrorPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EntityComponentOutput{})
	pulumi.RegisterOutputType(EntityComponentMapOutput{})
	pulumi.RegisterOutputType(EntityCompositeComponentOutput{})
	pulumi.RegisterOutputType(EntityCompositeComponentMapOutput{})
	pulumi.RegisterOutputType(EntityDataTypeOutput{})
	pulumi.RegisterOutputType(EntityDataTypePtrOutput{})
	pulumi.RegisterOutputType(EntityDataValueOutput{})
	pulumi.RegisterOutputType(EntityDataValuePtrOutput{})
	pulumi.RegisterOutputType(EntityDataValueArrayOutput{})
	pulumi.RegisterOutputType(EntityDataValueMapOutput{})
	pulumi.RegisterOutputType(EntityDataValueRelationshipValuePropertiesOutput{})
	pulumi.RegisterOutputType(EntityDataValueRelationshipValuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(EntityPropertyOutput{})
	pulumi.RegisterOutputType(EntityPropertyMapOutput{})
	pulumi.RegisterOutputType(EntityPropertyDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(EntityPropertyDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EntityPropertyGroupOutput{})
	pulumi.RegisterOutputType(EntityPropertyGroupMapOutput{})
	pulumi.RegisterOutputType(EntityRelationshipOutput{})
	pulumi.RegisterOutputType(EntityRelationshipPtrOutput{})
	pulumi.RegisterOutputType(EntityStatusOutput{})
	pulumi.RegisterOutputType(EntityStatusPtrOutput{})
	pulumi.RegisterOutputType(EntityStatusErrorPropertiesOutput{})
	pulumi.RegisterOutputType(EntityStatusErrorPropertiesPtrOutput{})
}
