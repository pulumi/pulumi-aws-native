// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iottwinmaker

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource schema for AWS::IoTTwinMaker::SyncJob
type SyncJob struct {
	pulumi.CustomResourceState

	// The ARN of the SyncJob.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The date and time when the sync job was created.
	CreationDateTime pulumi.StringOutput `pulumi:"creationDateTime"`
	// The state of SyncJob.
	State pulumi.StringOutput `pulumi:"state"`
	// The IAM Role that execute SyncJob.
	SyncRole pulumi.StringOutput `pulumi:"syncRole"`
	// The source of the SyncJob.
	SyncSource pulumi.StringOutput `pulumi:"syncSource"`
	// A key-value pair to associate with a resource.
	Tags pulumi.AnyOutput `pulumi:"tags"`
	// The date and time when the sync job was updated.
	UpdateDateTime pulumi.StringOutput `pulumi:"updateDateTime"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewSyncJob registers a new resource with the given unique name, arguments, and options.
func NewSyncJob(ctx *pulumi.Context,
	name string, args *SyncJobArgs, opts ...pulumi.ResourceOption) (*SyncJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SyncRole == nil {
		return nil, errors.New("invalid value for required argument 'SyncRole'")
	}
	if args.SyncSource == nil {
		return nil, errors.New("invalid value for required argument 'SyncSource'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"syncRole",
		"syncSource",
		"tags",
		"workspaceId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyncJob
	err := ctx.RegisterResource("aws-native:iottwinmaker:SyncJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncJob gets an existing SyncJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncJobState, opts ...pulumi.ResourceOption) (*SyncJob, error) {
	var resource SyncJob
	err := ctx.ReadResource("aws-native:iottwinmaker:SyncJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncJob resources.
type syncJobState struct {
}

type SyncJobState struct {
}

func (SyncJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncJobState)(nil)).Elem()
}

type syncJobArgs struct {
	// The IAM Role that execute SyncJob.
	SyncRole string `pulumi:"syncRole"`
	// The source of the SyncJob.
	SyncSource string `pulumi:"syncSource"`
	// A key-value pair to associate with a resource.
	Tags interface{} `pulumi:"tags"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a SyncJob resource.
type SyncJobArgs struct {
	// The IAM Role that execute SyncJob.
	SyncRole pulumi.StringInput
	// The source of the SyncJob.
	SyncSource pulumi.StringInput
	// A key-value pair to associate with a resource.
	Tags pulumi.Input
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (SyncJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncJobArgs)(nil)).Elem()
}

type SyncJobInput interface {
	pulumi.Input

	ToSyncJobOutput() SyncJobOutput
	ToSyncJobOutputWithContext(ctx context.Context) SyncJobOutput
}

func (*SyncJob) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncJob)(nil)).Elem()
}

func (i *SyncJob) ToSyncJobOutput() SyncJobOutput {
	return i.ToSyncJobOutputWithContext(context.Background())
}

func (i *SyncJob) ToSyncJobOutputWithContext(ctx context.Context) SyncJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncJobOutput)
}

func (i *SyncJob) ToOutput(ctx context.Context) pulumix.Output[*SyncJob] {
	return pulumix.Output[*SyncJob]{
		OutputState: i.ToSyncJobOutputWithContext(ctx).OutputState,
	}
}

type SyncJobOutput struct{ *pulumi.OutputState }

func (SyncJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncJob)(nil)).Elem()
}

func (o SyncJobOutput) ToSyncJobOutput() SyncJobOutput {
	return o
}

func (o SyncJobOutput) ToSyncJobOutputWithContext(ctx context.Context) SyncJobOutput {
	return o
}

func (o SyncJobOutput) ToOutput(ctx context.Context) pulumix.Output[*SyncJob] {
	return pulumix.Output[*SyncJob]{
		OutputState: o.OutputState,
	}
}

// The ARN of the SyncJob.
func (o SyncJobOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The date and time when the sync job was created.
func (o SyncJobOutput) CreationDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.CreationDateTime }).(pulumi.StringOutput)
}

// The state of SyncJob.
func (o SyncJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The IAM Role that execute SyncJob.
func (o SyncJobOutput) SyncRole() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.SyncRole }).(pulumi.StringOutput)
}

// The source of the SyncJob.
func (o SyncJobOutput) SyncSource() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.SyncSource }).(pulumi.StringOutput)
}

// A key-value pair to associate with a resource.
func (o SyncJobOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

// The date and time when the sync job was updated.
func (o SyncJobOutput) UpdateDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.UpdateDateTime }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o SyncJobOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncJobInput)(nil)).Elem(), &SyncJob{})
	pulumi.RegisterOutputType(SyncJobOutput{})
}
