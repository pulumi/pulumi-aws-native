// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS account associated with the assessment.
type AssessmentAWSAccount struct {
	EmailAddress *string `pulumi:"emailAddress"`
	Id           *string `pulumi:"id"`
	Name         *string `pulumi:"name"`
}

// AssessmentAWSAccountInput is an input type that accepts AssessmentAWSAccountArgs and AssessmentAWSAccountOutput values.
// You can construct a concrete instance of `AssessmentAWSAccountInput` via:
//
//          AssessmentAWSAccountArgs{...}
type AssessmentAWSAccountInput interface {
	pulumi.Input

	ToAssessmentAWSAccountOutput() AssessmentAWSAccountOutput
	ToAssessmentAWSAccountOutputWithContext(context.Context) AssessmentAWSAccountOutput
}

// The AWS account associated with the assessment.
type AssessmentAWSAccountArgs struct {
	EmailAddress pulumi.StringPtrInput `pulumi:"emailAddress"`
	Id           pulumi.StringPtrInput `pulumi:"id"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
}

func (AssessmentAWSAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAWSAccount)(nil)).Elem()
}

func (i AssessmentAWSAccountArgs) ToAssessmentAWSAccountOutput() AssessmentAWSAccountOutput {
	return i.ToAssessmentAWSAccountOutputWithContext(context.Background())
}

func (i AssessmentAWSAccountArgs) ToAssessmentAWSAccountOutputWithContext(ctx context.Context) AssessmentAWSAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAWSAccountOutput)
}

func (i AssessmentAWSAccountArgs) ToAssessmentAWSAccountPtrOutput() AssessmentAWSAccountPtrOutput {
	return i.ToAssessmentAWSAccountPtrOutputWithContext(context.Background())
}

func (i AssessmentAWSAccountArgs) ToAssessmentAWSAccountPtrOutputWithContext(ctx context.Context) AssessmentAWSAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAWSAccountOutput).ToAssessmentAWSAccountPtrOutputWithContext(ctx)
}

// AssessmentAWSAccountPtrInput is an input type that accepts AssessmentAWSAccountArgs, AssessmentAWSAccountPtr and AssessmentAWSAccountPtrOutput values.
// You can construct a concrete instance of `AssessmentAWSAccountPtrInput` via:
//
//          AssessmentAWSAccountArgs{...}
//
//  or:
//
//          nil
type AssessmentAWSAccountPtrInput interface {
	pulumi.Input

	ToAssessmentAWSAccountPtrOutput() AssessmentAWSAccountPtrOutput
	ToAssessmentAWSAccountPtrOutputWithContext(context.Context) AssessmentAWSAccountPtrOutput
}

type assessmentAWSAccountPtrType AssessmentAWSAccountArgs

func AssessmentAWSAccountPtr(v *AssessmentAWSAccountArgs) AssessmentAWSAccountPtrInput {
	return (*assessmentAWSAccountPtrType)(v)
}

func (*assessmentAWSAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentAWSAccount)(nil)).Elem()
}

func (i *assessmentAWSAccountPtrType) ToAssessmentAWSAccountPtrOutput() AssessmentAWSAccountPtrOutput {
	return i.ToAssessmentAWSAccountPtrOutputWithContext(context.Background())
}

func (i *assessmentAWSAccountPtrType) ToAssessmentAWSAccountPtrOutputWithContext(ctx context.Context) AssessmentAWSAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAWSAccountPtrOutput)
}

// AssessmentAWSAccountArrayInput is an input type that accepts AssessmentAWSAccountArray and AssessmentAWSAccountArrayOutput values.
// You can construct a concrete instance of `AssessmentAWSAccountArrayInput` via:
//
//          AssessmentAWSAccountArray{ AssessmentAWSAccountArgs{...} }
type AssessmentAWSAccountArrayInput interface {
	pulumi.Input

	ToAssessmentAWSAccountArrayOutput() AssessmentAWSAccountArrayOutput
	ToAssessmentAWSAccountArrayOutputWithContext(context.Context) AssessmentAWSAccountArrayOutput
}

type AssessmentAWSAccountArray []AssessmentAWSAccountInput

func (AssessmentAWSAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentAWSAccount)(nil)).Elem()
}

func (i AssessmentAWSAccountArray) ToAssessmentAWSAccountArrayOutput() AssessmentAWSAccountArrayOutput {
	return i.ToAssessmentAWSAccountArrayOutputWithContext(context.Background())
}

func (i AssessmentAWSAccountArray) ToAssessmentAWSAccountArrayOutputWithContext(ctx context.Context) AssessmentAWSAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAWSAccountArrayOutput)
}

// The AWS account associated with the assessment.
type AssessmentAWSAccountOutput struct{ *pulumi.OutputState }

func (AssessmentAWSAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAWSAccount)(nil)).Elem()
}

func (o AssessmentAWSAccountOutput) ToAssessmentAWSAccountOutput() AssessmentAWSAccountOutput {
	return o
}

func (o AssessmentAWSAccountOutput) ToAssessmentAWSAccountOutputWithContext(ctx context.Context) AssessmentAWSAccountOutput {
	return o
}

func (o AssessmentAWSAccountOutput) ToAssessmentAWSAccountPtrOutput() AssessmentAWSAccountPtrOutput {
	return o.ToAssessmentAWSAccountPtrOutputWithContext(context.Background())
}

func (o AssessmentAWSAccountOutput) ToAssessmentAWSAccountPtrOutputWithContext(ctx context.Context) AssessmentAWSAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentAWSAccount) *AssessmentAWSAccount {
		return &v
	}).(AssessmentAWSAccountPtrOutput)
}

func (o AssessmentAWSAccountOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentAWSAccount) *string { return v.EmailAddress }).(pulumi.StringPtrOutput)
}

func (o AssessmentAWSAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentAWSAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o AssessmentAWSAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentAWSAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AssessmentAWSAccountPtrOutput struct{ *pulumi.OutputState }

func (AssessmentAWSAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentAWSAccount)(nil)).Elem()
}

func (o AssessmentAWSAccountPtrOutput) ToAssessmentAWSAccountPtrOutput() AssessmentAWSAccountPtrOutput {
	return o
}

func (o AssessmentAWSAccountPtrOutput) ToAssessmentAWSAccountPtrOutputWithContext(ctx context.Context) AssessmentAWSAccountPtrOutput {
	return o
}

func (o AssessmentAWSAccountPtrOutput) Elem() AssessmentAWSAccountOutput {
	return o.ApplyT(func(v *AssessmentAWSAccount) AssessmentAWSAccount {
		if v != nil {
			return *v
		}
		var ret AssessmentAWSAccount
		return ret
	}).(AssessmentAWSAccountOutput)
}

func (o AssessmentAWSAccountPtrOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentAWSAccount) *string {
		if v == nil {
			return nil
		}
		return v.EmailAddress
	}).(pulumi.StringPtrOutput)
}

func (o AssessmentAWSAccountPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentAWSAccount) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o AssessmentAWSAccountPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentAWSAccount) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type AssessmentAWSAccountArrayOutput struct{ *pulumi.OutputState }

func (AssessmentAWSAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentAWSAccount)(nil)).Elem()
}

func (o AssessmentAWSAccountArrayOutput) ToAssessmentAWSAccountArrayOutput() AssessmentAWSAccountArrayOutput {
	return o
}

func (o AssessmentAWSAccountArrayOutput) ToAssessmentAWSAccountArrayOutputWithContext(ctx context.Context) AssessmentAWSAccountArrayOutput {
	return o
}

func (o AssessmentAWSAccountArrayOutput) Index(i pulumi.IntInput) AssessmentAWSAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentAWSAccount {
		return vs[0].([]AssessmentAWSAccount)[vs[1].(int)]
	}).(AssessmentAWSAccountOutput)
}

// An AWS service such as Amazon S3, AWS CloudTrail, and so on.
type AssessmentAWSService struct {
	ServiceName *string `pulumi:"serviceName"`
}

// AssessmentAWSServiceInput is an input type that accepts AssessmentAWSServiceArgs and AssessmentAWSServiceOutput values.
// You can construct a concrete instance of `AssessmentAWSServiceInput` via:
//
//          AssessmentAWSServiceArgs{...}
type AssessmentAWSServiceInput interface {
	pulumi.Input

	ToAssessmentAWSServiceOutput() AssessmentAWSServiceOutput
	ToAssessmentAWSServiceOutputWithContext(context.Context) AssessmentAWSServiceOutput
}

// An AWS service such as Amazon S3, AWS CloudTrail, and so on.
type AssessmentAWSServiceArgs struct {
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (AssessmentAWSServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAWSService)(nil)).Elem()
}

func (i AssessmentAWSServiceArgs) ToAssessmentAWSServiceOutput() AssessmentAWSServiceOutput {
	return i.ToAssessmentAWSServiceOutputWithContext(context.Background())
}

func (i AssessmentAWSServiceArgs) ToAssessmentAWSServiceOutputWithContext(ctx context.Context) AssessmentAWSServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAWSServiceOutput)
}

// AssessmentAWSServiceArrayInput is an input type that accepts AssessmentAWSServiceArray and AssessmentAWSServiceArrayOutput values.
// You can construct a concrete instance of `AssessmentAWSServiceArrayInput` via:
//
//          AssessmentAWSServiceArray{ AssessmentAWSServiceArgs{...} }
type AssessmentAWSServiceArrayInput interface {
	pulumi.Input

	ToAssessmentAWSServiceArrayOutput() AssessmentAWSServiceArrayOutput
	ToAssessmentAWSServiceArrayOutputWithContext(context.Context) AssessmentAWSServiceArrayOutput
}

type AssessmentAWSServiceArray []AssessmentAWSServiceInput

func (AssessmentAWSServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentAWSService)(nil)).Elem()
}

func (i AssessmentAWSServiceArray) ToAssessmentAWSServiceArrayOutput() AssessmentAWSServiceArrayOutput {
	return i.ToAssessmentAWSServiceArrayOutputWithContext(context.Background())
}

func (i AssessmentAWSServiceArray) ToAssessmentAWSServiceArrayOutputWithContext(ctx context.Context) AssessmentAWSServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAWSServiceArrayOutput)
}

// An AWS service such as Amazon S3, AWS CloudTrail, and so on.
type AssessmentAWSServiceOutput struct{ *pulumi.OutputState }

func (AssessmentAWSServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAWSService)(nil)).Elem()
}

func (o AssessmentAWSServiceOutput) ToAssessmentAWSServiceOutput() AssessmentAWSServiceOutput {
	return o
}

func (o AssessmentAWSServiceOutput) ToAssessmentAWSServiceOutputWithContext(ctx context.Context) AssessmentAWSServiceOutput {
	return o
}

func (o AssessmentAWSServiceOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentAWSService) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type AssessmentAWSServiceArrayOutput struct{ *pulumi.OutputState }

func (AssessmentAWSServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentAWSService)(nil)).Elem()
}

func (o AssessmentAWSServiceArrayOutput) ToAssessmentAWSServiceArrayOutput() AssessmentAWSServiceArrayOutput {
	return o
}

func (o AssessmentAWSServiceArrayOutput) ToAssessmentAWSServiceArrayOutputWithContext(ctx context.Context) AssessmentAWSServiceArrayOutput {
	return o
}

func (o AssessmentAWSServiceArrayOutput) Index(i pulumi.IntInput) AssessmentAWSServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentAWSService {
		return vs[0].([]AssessmentAWSService)[vs[1].(int)]
	}).(AssessmentAWSServiceOutput)
}

// The destination in which evidence reports are stored for the specified assessment.
type AssessmentAssessmentReportsDestination struct {
	Destination     *string                                    `pulumi:"destination"`
	DestinationType *AssessmentAssessmentReportDestinationType `pulumi:"destinationType"`
}

// AssessmentAssessmentReportsDestinationInput is an input type that accepts AssessmentAssessmentReportsDestinationArgs and AssessmentAssessmentReportsDestinationOutput values.
// You can construct a concrete instance of `AssessmentAssessmentReportsDestinationInput` via:
//
//          AssessmentAssessmentReportsDestinationArgs{...}
type AssessmentAssessmentReportsDestinationInput interface {
	pulumi.Input

	ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput
	ToAssessmentAssessmentReportsDestinationOutputWithContext(context.Context) AssessmentAssessmentReportsDestinationOutput
}

// The destination in which evidence reports are stored for the specified assessment.
type AssessmentAssessmentReportsDestinationArgs struct {
	Destination     pulumi.StringPtrInput                             `pulumi:"destination"`
	DestinationType AssessmentAssessmentReportDestinationTypePtrInput `pulumi:"destinationType"`
}

func (AssessmentAssessmentReportsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput {
	return i.ToAssessmentAssessmentReportsDestinationOutputWithContext(context.Background())
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAssessmentReportsDestinationOutput)
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return i.ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Background())
}

func (i AssessmentAssessmentReportsDestinationArgs) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAssessmentReportsDestinationOutput).ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx)
}

// AssessmentAssessmentReportsDestinationPtrInput is an input type that accepts AssessmentAssessmentReportsDestinationArgs, AssessmentAssessmentReportsDestinationPtr and AssessmentAssessmentReportsDestinationPtrOutput values.
// You can construct a concrete instance of `AssessmentAssessmentReportsDestinationPtrInput` via:
//
//          AssessmentAssessmentReportsDestinationArgs{...}
//
//  or:
//
//          nil
type AssessmentAssessmentReportsDestinationPtrInput interface {
	pulumi.Input

	ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput
	ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Context) AssessmentAssessmentReportsDestinationPtrOutput
}

type assessmentAssessmentReportsDestinationPtrType AssessmentAssessmentReportsDestinationArgs

func AssessmentAssessmentReportsDestinationPtr(v *AssessmentAssessmentReportsDestinationArgs) AssessmentAssessmentReportsDestinationPtrInput {
	return (*assessmentAssessmentReportsDestinationPtrType)(v)
}

func (*assessmentAssessmentReportsDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (i *assessmentAssessmentReportsDestinationPtrType) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return i.ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Background())
}

func (i *assessmentAssessmentReportsDestinationPtrType) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentAssessmentReportsDestinationPtrOutput)
}

// The destination in which evidence reports are stored for the specified assessment.
type AssessmentAssessmentReportsDestinationOutput struct{ *pulumi.OutputState }

func (AssessmentAssessmentReportsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationOutput() AssessmentAssessmentReportsDestinationOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return o.ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(context.Background())
}

func (o AssessmentAssessmentReportsDestinationOutput) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentAssessmentReportsDestination) *AssessmentAssessmentReportsDestination {
		return &v
	}).(AssessmentAssessmentReportsDestinationPtrOutput)
}

func (o AssessmentAssessmentReportsDestinationOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentAssessmentReportsDestination) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o AssessmentAssessmentReportsDestinationOutput) DestinationType() AssessmentAssessmentReportDestinationTypePtrOutput {
	return o.ApplyT(func(v AssessmentAssessmentReportsDestination) *AssessmentAssessmentReportDestinationType {
		return v.DestinationType
	}).(AssessmentAssessmentReportDestinationTypePtrOutput)
}

type AssessmentAssessmentReportsDestinationPtrOutput struct{ *pulumi.OutputState }

func (AssessmentAssessmentReportsDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentAssessmentReportsDestination)(nil)).Elem()
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) ToAssessmentAssessmentReportsDestinationPtrOutput() AssessmentAssessmentReportsDestinationPtrOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) ToAssessmentAssessmentReportsDestinationPtrOutputWithContext(ctx context.Context) AssessmentAssessmentReportsDestinationPtrOutput {
	return o
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) Elem() AssessmentAssessmentReportsDestinationOutput {
	return o.ApplyT(func(v *AssessmentAssessmentReportsDestination) AssessmentAssessmentReportsDestination {
		if v != nil {
			return *v
		}
		var ret AssessmentAssessmentReportsDestination
		return ret
	}).(AssessmentAssessmentReportsDestinationOutput)
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentAssessmentReportsDestination) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

func (o AssessmentAssessmentReportsDestinationPtrOutput) DestinationType() AssessmentAssessmentReportDestinationTypePtrOutput {
	return o.ApplyT(func(v *AssessmentAssessmentReportsDestination) *AssessmentAssessmentReportDestinationType {
		if v == nil {
			return nil
		}
		return v.DestinationType
	}).(AssessmentAssessmentReportDestinationTypePtrOutput)
}

// The assignment of a control set to a delegate for review.
type AssessmentDelegation struct {
	AssessmentId   *string                     `pulumi:"assessmentId"`
	AssessmentName *string                     `pulumi:"assessmentName"`
	Comment        *string                     `pulumi:"comment"`
	ControlSetId   *string                     `pulumi:"controlSetId"`
	CreatedBy      *string                     `pulumi:"createdBy"`
	CreationTime   *float64                    `pulumi:"creationTime"`
	Id             *string                     `pulumi:"id"`
	LastUpdated    *float64                    `pulumi:"lastUpdated"`
	RoleArn        *string                     `pulumi:"roleArn"`
	RoleType       *AssessmentRoleType         `pulumi:"roleType"`
	Status         *AssessmentDelegationStatus `pulumi:"status"`
}

// AssessmentDelegationInput is an input type that accepts AssessmentDelegationArgs and AssessmentDelegationOutput values.
// You can construct a concrete instance of `AssessmentDelegationInput` via:
//
//          AssessmentDelegationArgs{...}
type AssessmentDelegationInput interface {
	pulumi.Input

	ToAssessmentDelegationOutput() AssessmentDelegationOutput
	ToAssessmentDelegationOutputWithContext(context.Context) AssessmentDelegationOutput
}

// The assignment of a control set to a delegate for review.
type AssessmentDelegationArgs struct {
	AssessmentId   pulumi.StringPtrInput              `pulumi:"assessmentId"`
	AssessmentName pulumi.StringPtrInput              `pulumi:"assessmentName"`
	Comment        pulumi.StringPtrInput              `pulumi:"comment"`
	ControlSetId   pulumi.StringPtrInput              `pulumi:"controlSetId"`
	CreatedBy      pulumi.StringPtrInput              `pulumi:"createdBy"`
	CreationTime   pulumi.Float64PtrInput             `pulumi:"creationTime"`
	Id             pulumi.StringPtrInput              `pulumi:"id"`
	LastUpdated    pulumi.Float64PtrInput             `pulumi:"lastUpdated"`
	RoleArn        pulumi.StringPtrInput              `pulumi:"roleArn"`
	RoleType       AssessmentRoleTypePtrInput         `pulumi:"roleType"`
	Status         AssessmentDelegationStatusPtrInput `pulumi:"status"`
}

func (AssessmentDelegationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentDelegation)(nil)).Elem()
}

func (i AssessmentDelegationArgs) ToAssessmentDelegationOutput() AssessmentDelegationOutput {
	return i.ToAssessmentDelegationOutputWithContext(context.Background())
}

func (i AssessmentDelegationArgs) ToAssessmentDelegationOutputWithContext(ctx context.Context) AssessmentDelegationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentDelegationOutput)
}

// AssessmentDelegationArrayInput is an input type that accepts AssessmentDelegationArray and AssessmentDelegationArrayOutput values.
// You can construct a concrete instance of `AssessmentDelegationArrayInput` via:
//
//          AssessmentDelegationArray{ AssessmentDelegationArgs{...} }
type AssessmentDelegationArrayInput interface {
	pulumi.Input

	ToAssessmentDelegationArrayOutput() AssessmentDelegationArrayOutput
	ToAssessmentDelegationArrayOutputWithContext(context.Context) AssessmentDelegationArrayOutput
}

type AssessmentDelegationArray []AssessmentDelegationInput

func (AssessmentDelegationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentDelegation)(nil)).Elem()
}

func (i AssessmentDelegationArray) ToAssessmentDelegationArrayOutput() AssessmentDelegationArrayOutput {
	return i.ToAssessmentDelegationArrayOutputWithContext(context.Background())
}

func (i AssessmentDelegationArray) ToAssessmentDelegationArrayOutputWithContext(ctx context.Context) AssessmentDelegationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentDelegationArrayOutput)
}

// The assignment of a control set to a delegate for review.
type AssessmentDelegationOutput struct{ *pulumi.OutputState }

func (AssessmentDelegationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentDelegation)(nil)).Elem()
}

func (o AssessmentDelegationOutput) ToAssessmentDelegationOutput() AssessmentDelegationOutput {
	return o
}

func (o AssessmentDelegationOutput) ToAssessmentDelegationOutputWithContext(ctx context.Context) AssessmentDelegationOutput {
	return o
}

func (o AssessmentDelegationOutput) AssessmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *string { return v.AssessmentId }).(pulumi.StringPtrOutput)
}

func (o AssessmentDelegationOutput) AssessmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *string { return v.AssessmentName }).(pulumi.StringPtrOutput)
}

func (o AssessmentDelegationOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o AssessmentDelegationOutput) ControlSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *string { return v.ControlSetId }).(pulumi.StringPtrOutput)
}

func (o AssessmentDelegationOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

func (o AssessmentDelegationOutput) CreationTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *float64 { return v.CreationTime }).(pulumi.Float64PtrOutput)
}

func (o AssessmentDelegationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o AssessmentDelegationOutput) LastUpdated() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *float64 { return v.LastUpdated }).(pulumi.Float64PtrOutput)
}

func (o AssessmentDelegationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o AssessmentDelegationOutput) RoleType() AssessmentRoleTypePtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *AssessmentRoleType { return v.RoleType }).(AssessmentRoleTypePtrOutput)
}

func (o AssessmentDelegationOutput) Status() AssessmentDelegationStatusPtrOutput {
	return o.ApplyT(func(v AssessmentDelegation) *AssessmentDelegationStatus { return v.Status }).(AssessmentDelegationStatusPtrOutput)
}

type AssessmentDelegationArrayOutput struct{ *pulumi.OutputState }

func (AssessmentDelegationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentDelegation)(nil)).Elem()
}

func (o AssessmentDelegationArrayOutput) ToAssessmentDelegationArrayOutput() AssessmentDelegationArrayOutput {
	return o
}

func (o AssessmentDelegationArrayOutput) ToAssessmentDelegationArrayOutputWithContext(ctx context.Context) AssessmentDelegationArrayOutput {
	return o
}

func (o AssessmentDelegationArrayOutput) Index(i pulumi.IntInput) AssessmentDelegationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentDelegation {
		return vs[0].([]AssessmentDelegation)[vs[1].(int)]
	}).(AssessmentDelegationOutput)
}

// The wrapper that contains AWS Audit Manager role information, such as the role type and IAM ARN.
type AssessmentRole struct {
	RoleArn  *string             `pulumi:"roleArn"`
	RoleType *AssessmentRoleType `pulumi:"roleType"`
}

// AssessmentRoleInput is an input type that accepts AssessmentRoleArgs and AssessmentRoleOutput values.
// You can construct a concrete instance of `AssessmentRoleInput` via:
//
//          AssessmentRoleArgs{...}
type AssessmentRoleInput interface {
	pulumi.Input

	ToAssessmentRoleOutput() AssessmentRoleOutput
	ToAssessmentRoleOutputWithContext(context.Context) AssessmentRoleOutput
}

// The wrapper that contains AWS Audit Manager role information, such as the role type and IAM ARN.
type AssessmentRoleArgs struct {
	RoleArn  pulumi.StringPtrInput      `pulumi:"roleArn"`
	RoleType AssessmentRoleTypePtrInput `pulumi:"roleType"`
}

func (AssessmentRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRole)(nil)).Elem()
}

func (i AssessmentRoleArgs) ToAssessmentRoleOutput() AssessmentRoleOutput {
	return i.ToAssessmentRoleOutputWithContext(context.Background())
}

func (i AssessmentRoleArgs) ToAssessmentRoleOutputWithContext(ctx context.Context) AssessmentRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRoleOutput)
}

// AssessmentRoleArrayInput is an input type that accepts AssessmentRoleArray and AssessmentRoleArrayOutput values.
// You can construct a concrete instance of `AssessmentRoleArrayInput` via:
//
//          AssessmentRoleArray{ AssessmentRoleArgs{...} }
type AssessmentRoleArrayInput interface {
	pulumi.Input

	ToAssessmentRoleArrayOutput() AssessmentRoleArrayOutput
	ToAssessmentRoleArrayOutputWithContext(context.Context) AssessmentRoleArrayOutput
}

type AssessmentRoleArray []AssessmentRoleInput

func (AssessmentRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentRole)(nil)).Elem()
}

func (i AssessmentRoleArray) ToAssessmentRoleArrayOutput() AssessmentRoleArrayOutput {
	return i.ToAssessmentRoleArrayOutputWithContext(context.Background())
}

func (i AssessmentRoleArray) ToAssessmentRoleArrayOutputWithContext(ctx context.Context) AssessmentRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentRoleArrayOutput)
}

// The wrapper that contains AWS Audit Manager role information, such as the role type and IAM ARN.
type AssessmentRoleOutput struct{ *pulumi.OutputState }

func (AssessmentRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentRole)(nil)).Elem()
}

func (o AssessmentRoleOutput) ToAssessmentRoleOutput() AssessmentRoleOutput {
	return o
}

func (o AssessmentRoleOutput) ToAssessmentRoleOutputWithContext(ctx context.Context) AssessmentRoleOutput {
	return o
}

func (o AssessmentRoleOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentRole) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o AssessmentRoleOutput) RoleType() AssessmentRoleTypePtrOutput {
	return o.ApplyT(func(v AssessmentRole) *AssessmentRoleType { return v.RoleType }).(AssessmentRoleTypePtrOutput)
}

type AssessmentRoleArrayOutput struct{ *pulumi.OutputState }

func (AssessmentRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentRole)(nil)).Elem()
}

func (o AssessmentRoleArrayOutput) ToAssessmentRoleArrayOutput() AssessmentRoleArrayOutput {
	return o
}

func (o AssessmentRoleArrayOutput) ToAssessmentRoleArrayOutputWithContext(ctx context.Context) AssessmentRoleArrayOutput {
	return o
}

func (o AssessmentRoleArrayOutput) Index(i pulumi.IntInput) AssessmentRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentRole {
		return vs[0].([]AssessmentRole)[vs[1].(int)]
	}).(AssessmentRoleOutput)
}

// The wrapper that contains the AWS accounts and AWS services in scope for the assessment.
type AssessmentScope struct {
	// The AWS accounts included in scope.
	AwsAccounts []AssessmentAWSAccount `pulumi:"awsAccounts"`
	// The AWS services included in scope.
	AwsServices []AssessmentAWSService `pulumi:"awsServices"`
}

// AssessmentScopeInput is an input type that accepts AssessmentScopeArgs and AssessmentScopeOutput values.
// You can construct a concrete instance of `AssessmentScopeInput` via:
//
//          AssessmentScopeArgs{...}
type AssessmentScopeInput interface {
	pulumi.Input

	ToAssessmentScopeOutput() AssessmentScopeOutput
	ToAssessmentScopeOutputWithContext(context.Context) AssessmentScopeOutput
}

// The wrapper that contains the AWS accounts and AWS services in scope for the assessment.
type AssessmentScopeArgs struct {
	// The AWS accounts included in scope.
	AwsAccounts AssessmentAWSAccountArrayInput `pulumi:"awsAccounts"`
	// The AWS services included in scope.
	AwsServices AssessmentAWSServiceArrayInput `pulumi:"awsServices"`
}

func (AssessmentScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScope)(nil)).Elem()
}

func (i AssessmentScopeArgs) ToAssessmentScopeOutput() AssessmentScopeOutput {
	return i.ToAssessmentScopeOutputWithContext(context.Background())
}

func (i AssessmentScopeArgs) ToAssessmentScopeOutputWithContext(ctx context.Context) AssessmentScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeOutput)
}

func (i AssessmentScopeArgs) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return i.ToAssessmentScopePtrOutputWithContext(context.Background())
}

func (i AssessmentScopeArgs) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopeOutput).ToAssessmentScopePtrOutputWithContext(ctx)
}

// AssessmentScopePtrInput is an input type that accepts AssessmentScopeArgs, AssessmentScopePtr and AssessmentScopePtrOutput values.
// You can construct a concrete instance of `AssessmentScopePtrInput` via:
//
//          AssessmentScopeArgs{...}
//
//  or:
//
//          nil
type AssessmentScopePtrInput interface {
	pulumi.Input

	ToAssessmentScopePtrOutput() AssessmentScopePtrOutput
	ToAssessmentScopePtrOutputWithContext(context.Context) AssessmentScopePtrOutput
}

type assessmentScopePtrType AssessmentScopeArgs

func AssessmentScopePtr(v *AssessmentScopeArgs) AssessmentScopePtrInput {
	return (*assessmentScopePtrType)(v)
}

func (*assessmentScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentScope)(nil)).Elem()
}

func (i *assessmentScopePtrType) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return i.ToAssessmentScopePtrOutputWithContext(context.Background())
}

func (i *assessmentScopePtrType) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentScopePtrOutput)
}

// The wrapper that contains the AWS accounts and AWS services in scope for the assessment.
type AssessmentScopeOutput struct{ *pulumi.OutputState }

func (AssessmentScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentScope)(nil)).Elem()
}

func (o AssessmentScopeOutput) ToAssessmentScopeOutput() AssessmentScopeOutput {
	return o
}

func (o AssessmentScopeOutput) ToAssessmentScopeOutputWithContext(ctx context.Context) AssessmentScopeOutput {
	return o
}

func (o AssessmentScopeOutput) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return o.ToAssessmentScopePtrOutputWithContext(context.Background())
}

func (o AssessmentScopeOutput) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentScope) *AssessmentScope {
		return &v
	}).(AssessmentScopePtrOutput)
}

// The AWS accounts included in scope.
func (o AssessmentScopeOutput) AwsAccounts() AssessmentAWSAccountArrayOutput {
	return o.ApplyT(func(v AssessmentScope) []AssessmentAWSAccount { return v.AwsAccounts }).(AssessmentAWSAccountArrayOutput)
}

// The AWS services included in scope.
func (o AssessmentScopeOutput) AwsServices() AssessmentAWSServiceArrayOutput {
	return o.ApplyT(func(v AssessmentScope) []AssessmentAWSService { return v.AwsServices }).(AssessmentAWSServiceArrayOutput)
}

type AssessmentScopePtrOutput struct{ *pulumi.OutputState }

func (AssessmentScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentScope)(nil)).Elem()
}

func (o AssessmentScopePtrOutput) ToAssessmentScopePtrOutput() AssessmentScopePtrOutput {
	return o
}

func (o AssessmentScopePtrOutput) ToAssessmentScopePtrOutputWithContext(ctx context.Context) AssessmentScopePtrOutput {
	return o
}

func (o AssessmentScopePtrOutput) Elem() AssessmentScopeOutput {
	return o.ApplyT(func(v *AssessmentScope) AssessmentScope {
		if v != nil {
			return *v
		}
		var ret AssessmentScope
		return ret
	}).(AssessmentScopeOutput)
}

// The AWS accounts included in scope.
func (o AssessmentScopePtrOutput) AwsAccounts() AssessmentAWSAccountArrayOutput {
	return o.ApplyT(func(v *AssessmentScope) []AssessmentAWSAccount {
		if v == nil {
			return nil
		}
		return v.AwsAccounts
	}).(AssessmentAWSAccountArrayOutput)
}

// The AWS services included in scope.
func (o AssessmentScopePtrOutput) AwsServices() AssessmentAWSServiceArrayOutput {
	return o.ApplyT(func(v *AssessmentScope) []AssessmentAWSService {
		if v == nil {
			return nil
		}
		return v.AwsServices
	}).(AssessmentAWSServiceArrayOutput)
}

// A key-value pair to associate with a resource.
type AssessmentTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// AssessmentTagInput is an input type that accepts AssessmentTagArgs and AssessmentTagOutput values.
// You can construct a concrete instance of `AssessmentTagInput` via:
//
//          AssessmentTagArgs{...}
type AssessmentTagInput interface {
	pulumi.Input

	ToAssessmentTagOutput() AssessmentTagOutput
	ToAssessmentTagOutputWithContext(context.Context) AssessmentTagOutput
}

// A key-value pair to associate with a resource.
type AssessmentTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AssessmentTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentTag)(nil)).Elem()
}

func (i AssessmentTagArgs) ToAssessmentTagOutput() AssessmentTagOutput {
	return i.ToAssessmentTagOutputWithContext(context.Background())
}

func (i AssessmentTagArgs) ToAssessmentTagOutputWithContext(ctx context.Context) AssessmentTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentTagOutput)
}

// AssessmentTagArrayInput is an input type that accepts AssessmentTagArray and AssessmentTagArrayOutput values.
// You can construct a concrete instance of `AssessmentTagArrayInput` via:
//
//          AssessmentTagArray{ AssessmentTagArgs{...} }
type AssessmentTagArrayInput interface {
	pulumi.Input

	ToAssessmentTagArrayOutput() AssessmentTagArrayOutput
	ToAssessmentTagArrayOutputWithContext(context.Context) AssessmentTagArrayOutput
}

type AssessmentTagArray []AssessmentTagInput

func (AssessmentTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentTag)(nil)).Elem()
}

func (i AssessmentTagArray) ToAssessmentTagArrayOutput() AssessmentTagArrayOutput {
	return i.ToAssessmentTagArrayOutputWithContext(context.Background())
}

func (i AssessmentTagArray) ToAssessmentTagArrayOutputWithContext(ctx context.Context) AssessmentTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentTagArrayOutput)
}

// A key-value pair to associate with a resource.
type AssessmentTagOutput struct{ *pulumi.OutputState }

func (AssessmentTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentTag)(nil)).Elem()
}

func (o AssessmentTagOutput) ToAssessmentTagOutput() AssessmentTagOutput {
	return o
}

func (o AssessmentTagOutput) ToAssessmentTagOutputWithContext(ctx context.Context) AssessmentTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AssessmentTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AssessmentTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentTag) string { return v.Value }).(pulumi.StringOutput)
}

type AssessmentTagArrayOutput struct{ *pulumi.OutputState }

func (AssessmentTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentTag)(nil)).Elem()
}

func (o AssessmentTagArrayOutput) ToAssessmentTagArrayOutput() AssessmentTagArrayOutput {
	return o
}

func (o AssessmentTagArrayOutput) ToAssessmentTagArrayOutputWithContext(ctx context.Context) AssessmentTagArrayOutput {
	return o
}

func (o AssessmentTagArrayOutput) Index(i pulumi.IntInput) AssessmentTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentTag {
		return vs[0].([]AssessmentTag)[vs[1].(int)]
	}).(AssessmentTagOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentAWSAccountOutput{})
	pulumi.RegisterOutputType(AssessmentAWSAccountPtrOutput{})
	pulumi.RegisterOutputType(AssessmentAWSAccountArrayOutput{})
	pulumi.RegisterOutputType(AssessmentAWSServiceOutput{})
	pulumi.RegisterOutputType(AssessmentAWSServiceArrayOutput{})
	pulumi.RegisterOutputType(AssessmentAssessmentReportsDestinationOutput{})
	pulumi.RegisterOutputType(AssessmentAssessmentReportsDestinationPtrOutput{})
	pulumi.RegisterOutputType(AssessmentDelegationOutput{})
	pulumi.RegisterOutputType(AssessmentDelegationArrayOutput{})
	pulumi.RegisterOutputType(AssessmentRoleOutput{})
	pulumi.RegisterOutputType(AssessmentRoleArrayOutput{})
	pulumi.RegisterOutputType(AssessmentScopeOutput{})
	pulumi.RegisterOutputType(AssessmentScopePtrOutput{})
	pulumi.RegisterOutputType(AssessmentTagOutput{})
	pulumi.RegisterOutputType(AssessmentTagArrayOutput{})
}
