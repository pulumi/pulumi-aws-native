// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An entity that defines the scope of audit evidence collected by AWS Audit Manager.
type Assessment struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the assessment.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The unique identifier for the assessment.
	AssessmentId pulumi.StringOutput `pulumi:"assessmentId"`
	// The destination that evidence reports are stored in for the assessment.
	AssessmentReportsDestination AssessmentReportsDestinationPtrOutput `pulumi:"assessmentReportsDestination"`
	// The AWS account that's associated with the assessment.
	AwsAccount AssessmentAwsAccountPtrOutput `pulumi:"awsAccount"`
	// Specifies when the assessment was created.
	CreationTime pulumi.Float64Output `pulumi:"creationTime"`
	// The list of delegations.
	Delegations AssessmentDelegationArrayOutput `pulumi:"delegations"`
	// The description of the assessment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier for the framework.
	FrameworkId pulumi.StringPtrOutput `pulumi:"frameworkId"`
	// The name of the assessment.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The list of roles for the specified assessment.
	Roles AssessmentRoleArrayOutput `pulumi:"roles"`
	// The wrapper of AWS accounts and services that are in scope for the assessment.
	Scope AssessmentScopePtrOutput `pulumi:"scope"`
	// The overall status of the assessment.
	//
	// When you create a new assessment, the initial `Status` value is always `ACTIVE` . When you create an assessment, even if you specify the value as `INACTIVE` , the value overrides to `ACTIVE` .
	//
	// After you create an assessment, you can change the value of the `Status` property at any time. For example, when you want to stop collecting evidence for your assessment, you can change the assessment status to `INACTIVE` .
	Status AssessmentStatusPtrOutput `pulumi:"status"`
	// The tags associated with the assessment.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewAssessment registers a new resource with the given unique name, arguments, and options.
func NewAssessment(ctx *pulumi.Context,
	name string, args *AssessmentArgs, opts ...pulumi.ResourceOption) (*Assessment, error) {
	if args == nil {
		args = &AssessmentArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"awsAccount",
		"frameworkId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Assessment
	err := ctx.RegisterResource("aws-native:auditmanager:Assessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessment gets an existing Assessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentState, opts ...pulumi.ResourceOption) (*Assessment, error) {
	var resource Assessment
	err := ctx.ReadResource("aws-native:auditmanager:Assessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assessment resources.
type assessmentState struct {
}

type AssessmentState struct {
}

func (AssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentState)(nil)).Elem()
}

type assessmentArgs struct {
	// The destination that evidence reports are stored in for the assessment.
	AssessmentReportsDestination *AssessmentReportsDestination `pulumi:"assessmentReportsDestination"`
	// The AWS account that's associated with the assessment.
	AwsAccount *AssessmentAwsAccount `pulumi:"awsAccount"`
	// The list of delegations.
	Delegations []AssessmentDelegation `pulumi:"delegations"`
	// The description of the assessment.
	Description *string `pulumi:"description"`
	// The unique identifier for the framework.
	FrameworkId *string `pulumi:"frameworkId"`
	// The name of the assessment.
	Name *string `pulumi:"name"`
	// The list of roles for the specified assessment.
	Roles []AssessmentRole `pulumi:"roles"`
	// The wrapper of AWS accounts and services that are in scope for the assessment.
	Scope *AssessmentScope `pulumi:"scope"`
	// The overall status of the assessment.
	//
	// When you create a new assessment, the initial `Status` value is always `ACTIVE` . When you create an assessment, even if you specify the value as `INACTIVE` , the value overrides to `ACTIVE` .
	//
	// After you create an assessment, you can change the value of the `Status` property at any time. For example, when you want to stop collecting evidence for your assessment, you can change the assessment status to `INACTIVE` .
	Status *AssessmentStatus `pulumi:"status"`
	// The tags associated with the assessment.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Assessment resource.
type AssessmentArgs struct {
	// The destination that evidence reports are stored in for the assessment.
	AssessmentReportsDestination AssessmentReportsDestinationPtrInput
	// The AWS account that's associated with the assessment.
	AwsAccount AssessmentAwsAccountPtrInput
	// The list of delegations.
	Delegations AssessmentDelegationArrayInput
	// The description of the assessment.
	Description pulumi.StringPtrInput
	// The unique identifier for the framework.
	FrameworkId pulumi.StringPtrInput
	// The name of the assessment.
	Name pulumi.StringPtrInput
	// The list of roles for the specified assessment.
	Roles AssessmentRoleArrayInput
	// The wrapper of AWS accounts and services that are in scope for the assessment.
	Scope AssessmentScopePtrInput
	// The overall status of the assessment.
	//
	// When you create a new assessment, the initial `Status` value is always `ACTIVE` . When you create an assessment, even if you specify the value as `INACTIVE` , the value overrides to `ACTIVE` .
	//
	// After you create an assessment, you can change the value of the `Status` property at any time. For example, when you want to stop collecting evidence for your assessment, you can change the assessment status to `INACTIVE` .
	Status AssessmentStatusPtrInput
	// The tags associated with the assessment.
	Tags aws.TagArrayInput
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentArgs)(nil)).Elem()
}

type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput
}

func (*Assessment) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (i *Assessment) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i *Assessment) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

type AssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

// The Amazon Resource Name (ARN) of the assessment.
func (o AssessmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The unique identifier for the assessment.
func (o AssessmentOutput) AssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringOutput { return v.AssessmentId }).(pulumi.StringOutput)
}

// The destination that evidence reports are stored in for the assessment.
func (o AssessmentOutput) AssessmentReportsDestination() AssessmentReportsDestinationPtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentReportsDestinationPtrOutput { return v.AssessmentReportsDestination }).(AssessmentReportsDestinationPtrOutput)
}

// The AWS account that's associated with the assessment.
func (o AssessmentOutput) AwsAccount() AssessmentAwsAccountPtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentAwsAccountPtrOutput { return v.AwsAccount }).(AssessmentAwsAccountPtrOutput)
}

// Specifies when the assessment was created.
func (o AssessmentOutput) CreationTime() pulumi.Float64Output {
	return o.ApplyT(func(v *Assessment) pulumi.Float64Output { return v.CreationTime }).(pulumi.Float64Output)
}

// The list of delegations.
func (o AssessmentOutput) Delegations() AssessmentDelegationArrayOutput {
	return o.ApplyT(func(v *Assessment) AssessmentDelegationArrayOutput { return v.Delegations }).(AssessmentDelegationArrayOutput)
}

// The description of the assessment.
func (o AssessmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier for the framework.
func (o AssessmentOutput) FrameworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringPtrOutput { return v.FrameworkId }).(pulumi.StringPtrOutput)
}

// The name of the assessment.
func (o AssessmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of roles for the specified assessment.
func (o AssessmentOutput) Roles() AssessmentRoleArrayOutput {
	return o.ApplyT(func(v *Assessment) AssessmentRoleArrayOutput { return v.Roles }).(AssessmentRoleArrayOutput)
}

// The wrapper of AWS accounts and services that are in scope for the assessment.
func (o AssessmentOutput) Scope() AssessmentScopePtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentScopePtrOutput { return v.Scope }).(AssessmentScopePtrOutput)
}

// The overall status of the assessment.
//
// When you create a new assessment, the initial `Status` value is always `ACTIVE` . When you create an assessment, even if you specify the value as `INACTIVE` , the value overrides to `ACTIVE` .
//
// After you create an assessment, you can change the value of the `Status` property at any time. For example, when you want to stop collecting evidence for your assessment, you can change the assessment status to `INACTIVE` .
func (o AssessmentOutput) Status() AssessmentStatusPtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentStatusPtrOutput { return v.Status }).(AssessmentStatusPtrOutput)
}

// The tags associated with the assessment.
func (o AssessmentOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Assessment) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentInput)(nil)).Elem(), &Assessment{})
	pulumi.RegisterOutputType(AssessmentOutput{})
}
