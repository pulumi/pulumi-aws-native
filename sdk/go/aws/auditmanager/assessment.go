// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An entity that defines the scope of audit evidence collected by AWS Audit Manager.
type Assessment struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput                   `pulumi:"arn"`
	AssessmentId                 pulumi.StringOutput                   `pulumi:"assessmentId"`
	AssessmentReportsDestination AssessmentReportsDestinationPtrOutput `pulumi:"assessmentReportsDestination"`
	AwsAccount                   AssessmentAWSAccountPtrOutput         `pulumi:"awsAccount"`
	CreationTime                 pulumi.Float64Output                  `pulumi:"creationTime"`
	// The list of delegations.
	Delegations AssessmentDelegationArrayOutput `pulumi:"delegations"`
	Description pulumi.StringPtrOutput          `pulumi:"description"`
	FrameworkId pulumi.StringPtrOutput          `pulumi:"frameworkId"`
	Name        pulumi.StringPtrOutput          `pulumi:"name"`
	// The list of roles for the specified assessment.
	Roles  AssessmentRoleArrayOutput `pulumi:"roles"`
	Scope  AssessmentScopePtrOutput  `pulumi:"scope"`
	Status AssessmentStatusPtrOutput `pulumi:"status"`
	// The tags associated with the assessment.
	Tags AssessmentTagArrayOutput `pulumi:"tags"`
}

// NewAssessment registers a new resource with the given unique name, arguments, and options.
func NewAssessment(ctx *pulumi.Context,
	name string, args *AssessmentArgs, opts ...pulumi.ResourceOption) (*Assessment, error) {
	if args == nil {
		args = &AssessmentArgs{}
	}

	var resource Assessment
	err := ctx.RegisterResource("aws-native:auditmanager:Assessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessment gets an existing Assessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentState, opts ...pulumi.ResourceOption) (*Assessment, error) {
	var resource Assessment
	err := ctx.ReadResource("aws-native:auditmanager:Assessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assessment resources.
type assessmentState struct {
}

type AssessmentState struct {
}

func (AssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentState)(nil)).Elem()
}

type assessmentArgs struct {
	AssessmentReportsDestination *AssessmentReportsDestination `pulumi:"assessmentReportsDestination"`
	AwsAccount                   *AssessmentAWSAccount         `pulumi:"awsAccount"`
	Description                  *string                       `pulumi:"description"`
	FrameworkId                  *string                       `pulumi:"frameworkId"`
	Name                         *string                       `pulumi:"name"`
	// The list of roles for the specified assessment.
	Roles  []AssessmentRole  `pulumi:"roles"`
	Scope  *AssessmentScope  `pulumi:"scope"`
	Status *AssessmentStatus `pulumi:"status"`
	// The tags associated with the assessment.
	Tags []AssessmentTag `pulumi:"tags"`
}

// The set of arguments for constructing a Assessment resource.
type AssessmentArgs struct {
	AssessmentReportsDestination AssessmentReportsDestinationPtrInput
	AwsAccount                   AssessmentAWSAccountPtrInput
	Description                  pulumi.StringPtrInput
	FrameworkId                  pulumi.StringPtrInput
	Name                         pulumi.StringPtrInput
	// The list of roles for the specified assessment.
	Roles  AssessmentRoleArrayInput
	Scope  AssessmentScopePtrInput
	Status AssessmentStatusPtrInput
	// The tags associated with the assessment.
	Tags AssessmentTagArrayInput
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentArgs)(nil)).Elem()
}

type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput
}

func (*Assessment) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (i *Assessment) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i *Assessment) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

type AssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

func (o AssessmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AssessmentOutput) AssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringOutput { return v.AssessmentId }).(pulumi.StringOutput)
}

func (o AssessmentOutput) AssessmentReportsDestination() AssessmentReportsDestinationPtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentReportsDestinationPtrOutput { return v.AssessmentReportsDestination }).(AssessmentReportsDestinationPtrOutput)
}

func (o AssessmentOutput) AwsAccount() AssessmentAWSAccountPtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentAWSAccountPtrOutput { return v.AwsAccount }).(AssessmentAWSAccountPtrOutput)
}

func (o AssessmentOutput) CreationTime() pulumi.Float64Output {
	return o.ApplyT(func(v *Assessment) pulumi.Float64Output { return v.CreationTime }).(pulumi.Float64Output)
}

// The list of delegations.
func (o AssessmentOutput) Delegations() AssessmentDelegationArrayOutput {
	return o.ApplyT(func(v *Assessment) AssessmentDelegationArrayOutput { return v.Delegations }).(AssessmentDelegationArrayOutput)
}

func (o AssessmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AssessmentOutput) FrameworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringPtrOutput { return v.FrameworkId }).(pulumi.StringPtrOutput)
}

func (o AssessmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of roles for the specified assessment.
func (o AssessmentOutput) Roles() AssessmentRoleArrayOutput {
	return o.ApplyT(func(v *Assessment) AssessmentRoleArrayOutput { return v.Roles }).(AssessmentRoleArrayOutput)
}

func (o AssessmentOutput) Scope() AssessmentScopePtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentScopePtrOutput { return v.Scope }).(AssessmentScopePtrOutput)
}

func (o AssessmentOutput) Status() AssessmentStatusPtrOutput {
	return o.ApplyT(func(v *Assessment) AssessmentStatusPtrOutput { return v.Status }).(AssessmentStatusPtrOutput)
}

// The tags associated with the assessment.
func (o AssessmentOutput) Tags() AssessmentTagArrayOutput {
	return o.ApplyT(func(v *Assessment) AssessmentTagArrayOutput { return v.Tags }).(AssessmentTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentInput)(nil)).Elem(), &Assessment{})
	pulumi.RegisterOutputType(AssessmentOutput{})
}
