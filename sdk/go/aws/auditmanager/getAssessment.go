// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auditmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An entity that defines the scope of audit evidence collected by AWS Audit Manager.
func LookupAssessment(ctx *pulumi.Context, args *LookupAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupAssessmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAssessmentResult
	err := ctx.Invoke("aws-native:auditmanager:getAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAssessmentArgs struct {
	// The unique identifier for the assessment.
	AssessmentId string `pulumi:"assessmentId"`
}

type LookupAssessmentResult struct {
	// The Amazon Resource Name (ARN) of the assessment.
	Arn *string `pulumi:"arn"`
	// The unique identifier for the assessment.
	AssessmentId *string `pulumi:"assessmentId"`
	// The destination that evidence reports are stored in for the assessment.
	AssessmentReportsDestination *AssessmentReportsDestination `pulumi:"assessmentReportsDestination"`
	// Specifies when the assessment was created.
	CreationTime *float64 `pulumi:"creationTime"`
	// The list of delegations.
	Delegations []AssessmentDelegation `pulumi:"delegations"`
	// The list of roles for the specified assessment.
	Roles []AssessmentRole `pulumi:"roles"`
	// The wrapper of AWS accounts and services that are in scope for the assessment.
	Scope *AssessmentScope `pulumi:"scope"`
	// The overall status of the assessment.
	//
	// When you create a new assessment, the initial `Status` value is always `ACTIVE` . When you create an assessment, even if you specify the value as `INACTIVE` , the value overrides to `ACTIVE` .
	//
	// After you create an assessment, you can change the value of the `Status` property at any time. For example, when you want to stop collecting evidence for your assessment, you can change the assessment status to `INACTIVE` .
	Status *AssessmentStatus `pulumi:"status"`
	// The tags associated with the assessment.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupAssessmentOutput(ctx *pulumi.Context, args LookupAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAssessmentResultOutput, error) {
			args := v.(LookupAssessmentArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAssessmentResult
			secret, err := ctx.InvokePackageRaw("aws-native:auditmanager:getAssessment", args, &rv, "", opts...)
			if err != nil {
				return LookupAssessmentResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAssessmentResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAssessmentResultOutput), nil
			}
			return output, nil
		}).(LookupAssessmentResultOutput)
}

type LookupAssessmentOutputArgs struct {
	// The unique identifier for the assessment.
	AssessmentId pulumi.StringInput `pulumi:"assessmentId"`
}

func (LookupAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAssessmentArgs)(nil)).Elem()
}

type LookupAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAssessmentResult)(nil)).Elem()
}

func (o LookupAssessmentResultOutput) ToLookupAssessmentResultOutput() LookupAssessmentResultOutput {
	return o
}

func (o LookupAssessmentResultOutput) ToLookupAssessmentResultOutputWithContext(ctx context.Context) LookupAssessmentResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the assessment.
func (o LookupAssessmentResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAssessmentResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The unique identifier for the assessment.
func (o LookupAssessmentResultOutput) AssessmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAssessmentResult) *string { return v.AssessmentId }).(pulumi.StringPtrOutput)
}

// The destination that evidence reports are stored in for the assessment.
func (o LookupAssessmentResultOutput) AssessmentReportsDestination() AssessmentReportsDestinationPtrOutput {
	return o.ApplyT(func(v LookupAssessmentResult) *AssessmentReportsDestination { return v.AssessmentReportsDestination }).(AssessmentReportsDestinationPtrOutput)
}

// Specifies when the assessment was created.
func (o LookupAssessmentResultOutput) CreationTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAssessmentResult) *float64 { return v.CreationTime }).(pulumi.Float64PtrOutput)
}

// The list of delegations.
func (o LookupAssessmentResultOutput) Delegations() AssessmentDelegationArrayOutput {
	return o.ApplyT(func(v LookupAssessmentResult) []AssessmentDelegation { return v.Delegations }).(AssessmentDelegationArrayOutput)
}

// The list of roles for the specified assessment.
func (o LookupAssessmentResultOutput) Roles() AssessmentRoleArrayOutput {
	return o.ApplyT(func(v LookupAssessmentResult) []AssessmentRole { return v.Roles }).(AssessmentRoleArrayOutput)
}

// The wrapper of AWS accounts and services that are in scope for the assessment.
func (o LookupAssessmentResultOutput) Scope() AssessmentScopePtrOutput {
	return o.ApplyT(func(v LookupAssessmentResult) *AssessmentScope { return v.Scope }).(AssessmentScopePtrOutput)
}

// The overall status of the assessment.
//
// When you create a new assessment, the initial `Status` value is always `ACTIVE` . When you create an assessment, even if you specify the value as `INACTIVE` , the value overrides to `ACTIVE` .
//
// After you create an assessment, you can change the value of the `Status` property at any time. For example, when you want to stop collecting evidence for your assessment, you can change the assessment status to `INACTIVE` .
func (o LookupAssessmentResultOutput) Status() AssessmentStatusPtrOutput {
	return o.ApplyT(func(v LookupAssessmentResult) *AssessmentStatus { return v.Status }).(AssessmentStatusPtrOutput)
}

// The tags associated with the assessment.
func (o LookupAssessmentResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupAssessmentResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAssessmentResultOutput{})
}
