// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS Route53 Recovery Control basic constructs and validation rules.
type SafetyRule struct {
	pulumi.CustomResourceState

	// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
	AssertionRule SafetyRuleAssertionRulePtrOutput `pulumi:"assertionRule"`
	// The Amazon Resource Name (ARN) of the control panel.
	ControlPanelArn pulumi.StringPtrOutput `pulumi:"controlPanelArn"`
	// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
	//
	// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
	GatingRule SafetyRuleGatingRulePtrOutput `pulumi:"gatingRule"`
	// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: & > < ' (single quote) " (double quote) ; (semicolon)
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
	RuleConfig SafetyRuleRuleConfigPtrOutput `pulumi:"ruleConfig"`
	// The Amazon Resource Name (ARN) of the safety rule.
	SafetyRuleArn pulumi.StringOutput `pulumi:"safetyRuleArn"`
	// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
	Status SafetyRuleStatusOutput `pulumi:"status"`
	// A collection of tags associated with a resource
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewSafetyRule registers a new resource with the given unique name, arguments, and options.
func NewSafetyRule(ctx *pulumi.Context,
	name string, args *SafetyRuleArgs, opts ...pulumi.ResourceOption) (*SafetyRule, error) {
	if args == nil {
		args = &SafetyRuleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SafetyRule
	err := ctx.RegisterResource("aws-native:route53recoverycontrol:SafetyRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSafetyRule gets an existing SafetyRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSafetyRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SafetyRuleState, opts ...pulumi.ResourceOption) (*SafetyRule, error) {
	var resource SafetyRule
	err := ctx.ReadResource("aws-native:route53recoverycontrol:SafetyRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SafetyRule resources.
type safetyRuleState struct {
}

type SafetyRuleState struct {
}

func (SafetyRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*safetyRuleState)(nil)).Elem()
}

type safetyRuleArgs struct {
	// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
	AssertionRule *SafetyRuleAssertionRule `pulumi:"assertionRule"`
	// The Amazon Resource Name (ARN) of the control panel.
	ControlPanelArn *string `pulumi:"controlPanelArn"`
	// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
	//
	// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
	GatingRule *SafetyRuleGatingRule `pulumi:"gatingRule"`
	// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: & > < ' (single quote) " (double quote) ; (semicolon)
	Name *string `pulumi:"name"`
	// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
	RuleConfig *SafetyRuleRuleConfig `pulumi:"ruleConfig"`
	// A collection of tags associated with a resource
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a SafetyRule resource.
type SafetyRuleArgs struct {
	// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
	AssertionRule SafetyRuleAssertionRulePtrInput
	// The Amazon Resource Name (ARN) of the control panel.
	ControlPanelArn pulumi.StringPtrInput
	// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
	//
	// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
	GatingRule SafetyRuleGatingRulePtrInput
	// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: & > < ' (single quote) " (double quote) ; (semicolon)
	Name pulumi.StringPtrInput
	// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
	RuleConfig SafetyRuleRuleConfigPtrInput
	// A collection of tags associated with a resource
	Tags aws.TagArrayInput
}

func (SafetyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*safetyRuleArgs)(nil)).Elem()
}

type SafetyRuleInput interface {
	pulumi.Input

	ToSafetyRuleOutput() SafetyRuleOutput
	ToSafetyRuleOutputWithContext(ctx context.Context) SafetyRuleOutput
}

func (*SafetyRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SafetyRule)(nil)).Elem()
}

func (i *SafetyRule) ToSafetyRuleOutput() SafetyRuleOutput {
	return i.ToSafetyRuleOutputWithContext(context.Background())
}

func (i *SafetyRule) ToSafetyRuleOutputWithContext(ctx context.Context) SafetyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SafetyRuleOutput)
}

type SafetyRuleOutput struct{ *pulumi.OutputState }

func (SafetyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SafetyRule)(nil)).Elem()
}

func (o SafetyRuleOutput) ToSafetyRuleOutput() SafetyRuleOutput {
	return o
}

func (o SafetyRuleOutput) ToSafetyRuleOutputWithContext(ctx context.Context) SafetyRuleOutput {
	return o
}

// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
func (o SafetyRuleOutput) AssertionRule() SafetyRuleAssertionRulePtrOutput {
	return o.ApplyT(func(v *SafetyRule) SafetyRuleAssertionRulePtrOutput { return v.AssertionRule }).(SafetyRuleAssertionRulePtrOutput)
}

// The Amazon Resource Name (ARN) of the control panel.
func (o SafetyRuleOutput) ControlPanelArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SafetyRule) pulumi.StringPtrOutput { return v.ControlPanelArn }).(pulumi.StringPtrOutput)
}

// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
//
// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
func (o SafetyRuleOutput) GatingRule() SafetyRuleGatingRulePtrOutput {
	return o.ApplyT(func(v *SafetyRule) SafetyRuleGatingRulePtrOutput { return v.GatingRule }).(SafetyRuleGatingRulePtrOutput)
}

// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: & > < ' (single quote) " (double quote) ; (semicolon)
func (o SafetyRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SafetyRule) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
func (o SafetyRuleOutput) RuleConfig() SafetyRuleRuleConfigPtrOutput {
	return o.ApplyT(func(v *SafetyRule) SafetyRuleRuleConfigPtrOutput { return v.RuleConfig }).(SafetyRuleRuleConfigPtrOutput)
}

// The Amazon Resource Name (ARN) of the safety rule.
func (o SafetyRuleOutput) SafetyRuleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SafetyRule) pulumi.StringOutput { return v.SafetyRuleArn }).(pulumi.StringOutput)
}

// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
func (o SafetyRuleOutput) Status() SafetyRuleStatusOutput {
	return o.ApplyT(func(v *SafetyRule) SafetyRuleStatusOutput { return v.Status }).(SafetyRuleStatusOutput)
}

// A collection of tags associated with a resource
func (o SafetyRuleOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *SafetyRule) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SafetyRuleInput)(nil)).Elem(), &SafetyRule{})
	pulumi.RegisterOutputType(SafetyRuleOutput{})
}
