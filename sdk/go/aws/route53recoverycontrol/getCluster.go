// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS Route53 Recovery Control Cluster resource schema
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("aws-native:route53recoverycontrol:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	// The Amazon Resource Name (ARN) of the cluster.
	ClusterArn string `pulumi:"clusterArn"`
}

type LookupClusterResult struct {
	// The Amazon Resource Name (ARN) of the cluster.
	ClusterArn *string `pulumi:"clusterArn"`
	// Endpoints for the cluster.
	ClusterEndpoints []ClusterEndpoint `pulumi:"clusterEndpoints"`
	// Cluster supports IPv4 endpoints and Dual-stack IPv4 and IPv6 endpoints. NetworkType can be IPV4 or DUALSTACK.
	NetworkType *ClusterNetworkType `pulumi:"networkType"`
	// Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
	Status *ClusterStatus `pulumi:"status"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClusterResultOutput, error) {
			args := v.(LookupClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:route53recoverycontrol:getCluster", args, LookupClusterResultOutput{}, options).(LookupClusterResultOutput), nil
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	// The Amazon Resource Name (ARN) of the cluster.
	ClusterArn pulumi.StringInput `pulumi:"clusterArn"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the cluster.
func (o LookupClusterResultOutput) ClusterArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.ClusterArn }).(pulumi.StringPtrOutput)
}

// Endpoints for the cluster.
func (o LookupClusterResultOutput) ClusterEndpoints() ClusterEndpointArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterEndpoint { return v.ClusterEndpoints }).(ClusterEndpointArrayOutput)
}

// Cluster supports IPv4 endpoints and Dual-stack IPv4 and IPv6 endpoints. NetworkType can be IPV4 or DUALSTACK.
func (o LookupClusterResultOutput) NetworkType() ClusterNetworkTypePtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterNetworkType { return v.NetworkType }).(ClusterNetworkTypePtrOutput)
}

// Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
func (o LookupClusterResultOutput) Status() ClusterStatusPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterStatus { return v.Status }).(ClusterStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
