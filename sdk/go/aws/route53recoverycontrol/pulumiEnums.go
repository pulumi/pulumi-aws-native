// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
type ClusterStatus string

const (
	ClusterStatusPending         = ClusterStatus("PENDING")
	ClusterStatusDeployed        = ClusterStatus("DEPLOYED")
	ClusterStatusPendingDeletion = ClusterStatus("PENDING_DELETION")
)

func (ClusterStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatus)(nil)).Elem()
}

func (e ClusterStatus) ToClusterStatusOutput() ClusterStatusOutput {
	return pulumi.ToOutput(e).(ClusterStatusOutput)
}

func (e ClusterStatus) ToClusterStatusOutputWithContext(ctx context.Context) ClusterStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ClusterStatusOutput)
}

func (e ClusterStatus) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return e.ToClusterStatusPtrOutputWithContext(context.Background())
}

func (e ClusterStatus) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return ClusterStatus(e).ToClusterStatusOutputWithContext(ctx).ToClusterStatusPtrOutputWithContext(ctx)
}

func (e ClusterStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ClusterStatusOutput struct{ *pulumi.OutputState }

func (ClusterStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStatus)(nil)).Elem()
}

func (o ClusterStatusOutput) ToClusterStatusOutput() ClusterStatusOutput {
	return o
}

func (o ClusterStatusOutput) ToClusterStatusOutputWithContext(ctx context.Context) ClusterStatusOutput {
	return o
}

func (o ClusterStatusOutput) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return o.ToClusterStatusPtrOutputWithContext(context.Background())
}

func (o ClusterStatusOutput) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterStatus) *ClusterStatus {
		return &v
	}).(ClusterStatusPtrOutput)
}

func (o ClusterStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ClusterStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ClusterStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ClusterStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ClusterStatusPtrOutput struct{ *pulumi.OutputState }

func (ClusterStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStatus)(nil)).Elem()
}

func (o ClusterStatusPtrOutput) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return o
}

func (o ClusterStatusPtrOutput) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return o
}

func (o ClusterStatusPtrOutput) Elem() ClusterStatusOutput {
	return o.ApplyT(func(v *ClusterStatus) ClusterStatus {
		if v != nil {
			return *v
		}
		var ret ClusterStatus
		return ret
	}).(ClusterStatusOutput)
}

func (o ClusterStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ClusterStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ClusterStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ClusterStatusInput is an input type that accepts ClusterStatusArgs and ClusterStatusOutput values.
// You can construct a concrete instance of `ClusterStatusInput` via:
//
//          ClusterStatusArgs{...}
type ClusterStatusInput interface {
	pulumi.Input

	ToClusterStatusOutput() ClusterStatusOutput
	ToClusterStatusOutputWithContext(context.Context) ClusterStatusOutput
}

var clusterStatusPtrType = reflect.TypeOf((**ClusterStatus)(nil)).Elem()

type ClusterStatusPtrInput interface {
	pulumi.Input

	ToClusterStatusPtrOutput() ClusterStatusPtrOutput
	ToClusterStatusPtrOutputWithContext(context.Context) ClusterStatusPtrOutput
}

type clusterStatusPtr string

func ClusterStatusPtr(v string) ClusterStatusPtrInput {
	return (*clusterStatusPtr)(&v)
}

func (*clusterStatusPtr) ElementType() reflect.Type {
	return clusterStatusPtrType
}

func (in *clusterStatusPtr) ToClusterStatusPtrOutput() ClusterStatusPtrOutput {
	return pulumi.ToOutput(in).(ClusterStatusPtrOutput)
}

func (in *clusterStatusPtr) ToClusterStatusPtrOutputWithContext(ctx context.Context) ClusterStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ClusterStatusPtrOutput)
}

// The deployment status of control panel. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
type ControlPanelStatus string

const (
	ControlPanelStatusPending         = ControlPanelStatus("PENDING")
	ControlPanelStatusDeployed        = ControlPanelStatus("DEPLOYED")
	ControlPanelStatusPendingDeletion = ControlPanelStatus("PENDING_DELETION")
)

func (ControlPanelStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPanelStatus)(nil)).Elem()
}

func (e ControlPanelStatus) ToControlPanelStatusOutput() ControlPanelStatusOutput {
	return pulumi.ToOutput(e).(ControlPanelStatusOutput)
}

func (e ControlPanelStatus) ToControlPanelStatusOutputWithContext(ctx context.Context) ControlPanelStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ControlPanelStatusOutput)
}

func (e ControlPanelStatus) ToControlPanelStatusPtrOutput() ControlPanelStatusPtrOutput {
	return e.ToControlPanelStatusPtrOutputWithContext(context.Background())
}

func (e ControlPanelStatus) ToControlPanelStatusPtrOutputWithContext(ctx context.Context) ControlPanelStatusPtrOutput {
	return ControlPanelStatus(e).ToControlPanelStatusOutputWithContext(ctx).ToControlPanelStatusPtrOutputWithContext(ctx)
}

func (e ControlPanelStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ControlPanelStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ControlPanelStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ControlPanelStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ControlPanelStatusOutput struct{ *pulumi.OutputState }

func (ControlPanelStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPanelStatus)(nil)).Elem()
}

func (o ControlPanelStatusOutput) ToControlPanelStatusOutput() ControlPanelStatusOutput {
	return o
}

func (o ControlPanelStatusOutput) ToControlPanelStatusOutputWithContext(ctx context.Context) ControlPanelStatusOutput {
	return o
}

func (o ControlPanelStatusOutput) ToControlPanelStatusPtrOutput() ControlPanelStatusPtrOutput {
	return o.ToControlPanelStatusPtrOutputWithContext(context.Background())
}

func (o ControlPanelStatusOutput) ToControlPanelStatusPtrOutputWithContext(ctx context.Context) ControlPanelStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControlPanelStatus) *ControlPanelStatus {
		return &v
	}).(ControlPanelStatusPtrOutput)
}

func (o ControlPanelStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ControlPanelStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ControlPanelStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ControlPanelStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ControlPanelStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ControlPanelStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ControlPanelStatusPtrOutput struct{ *pulumi.OutputState }

func (ControlPanelStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControlPanelStatus)(nil)).Elem()
}

func (o ControlPanelStatusPtrOutput) ToControlPanelStatusPtrOutput() ControlPanelStatusPtrOutput {
	return o
}

func (o ControlPanelStatusPtrOutput) ToControlPanelStatusPtrOutputWithContext(ctx context.Context) ControlPanelStatusPtrOutput {
	return o
}

func (o ControlPanelStatusPtrOutput) Elem() ControlPanelStatusOutput {
	return o.ApplyT(func(v *ControlPanelStatus) ControlPanelStatus {
		if v != nil {
			return *v
		}
		var ret ControlPanelStatus
		return ret
	}).(ControlPanelStatusOutput)
}

func (o ControlPanelStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ControlPanelStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ControlPanelStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ControlPanelStatusInput is an input type that accepts ControlPanelStatusArgs and ControlPanelStatusOutput values.
// You can construct a concrete instance of `ControlPanelStatusInput` via:
//
//          ControlPanelStatusArgs{...}
type ControlPanelStatusInput interface {
	pulumi.Input

	ToControlPanelStatusOutput() ControlPanelStatusOutput
	ToControlPanelStatusOutputWithContext(context.Context) ControlPanelStatusOutput
}

var controlPanelStatusPtrType = reflect.TypeOf((**ControlPanelStatus)(nil)).Elem()

type ControlPanelStatusPtrInput interface {
	pulumi.Input

	ToControlPanelStatusPtrOutput() ControlPanelStatusPtrOutput
	ToControlPanelStatusPtrOutputWithContext(context.Context) ControlPanelStatusPtrOutput
}

type controlPanelStatusPtr string

func ControlPanelStatusPtr(v string) ControlPanelStatusPtrInput {
	return (*controlPanelStatusPtr)(&v)
}

func (*controlPanelStatusPtr) ElementType() reflect.Type {
	return controlPanelStatusPtrType
}

func (in *controlPanelStatusPtr) ToControlPanelStatusPtrOutput() ControlPanelStatusPtrOutput {
	return pulumi.ToOutput(in).(ControlPanelStatusPtrOutput)
}

func (in *controlPanelStatusPtr) ToControlPanelStatusPtrOutputWithContext(ctx context.Context) ControlPanelStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ControlPanelStatusPtrOutput)
}

// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
type RoutingControlStatus string

const (
	RoutingControlStatusPending         = RoutingControlStatus("PENDING")
	RoutingControlStatusDeployed        = RoutingControlStatus("DEPLOYED")
	RoutingControlStatusPendingDeletion = RoutingControlStatus("PENDING_DELETION")
)

func (RoutingControlStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingControlStatus)(nil)).Elem()
}

func (e RoutingControlStatus) ToRoutingControlStatusOutput() RoutingControlStatusOutput {
	return pulumi.ToOutput(e).(RoutingControlStatusOutput)
}

func (e RoutingControlStatus) ToRoutingControlStatusOutputWithContext(ctx context.Context) RoutingControlStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutingControlStatusOutput)
}

func (e RoutingControlStatus) ToRoutingControlStatusPtrOutput() RoutingControlStatusPtrOutput {
	return e.ToRoutingControlStatusPtrOutputWithContext(context.Background())
}

func (e RoutingControlStatus) ToRoutingControlStatusPtrOutputWithContext(ctx context.Context) RoutingControlStatusPtrOutput {
	return RoutingControlStatus(e).ToRoutingControlStatusOutputWithContext(ctx).ToRoutingControlStatusPtrOutputWithContext(ctx)
}

func (e RoutingControlStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutingControlStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutingControlStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutingControlStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutingControlStatusOutput struct{ *pulumi.OutputState }

func (RoutingControlStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingControlStatus)(nil)).Elem()
}

func (o RoutingControlStatusOutput) ToRoutingControlStatusOutput() RoutingControlStatusOutput {
	return o
}

func (o RoutingControlStatusOutput) ToRoutingControlStatusOutputWithContext(ctx context.Context) RoutingControlStatusOutput {
	return o
}

func (o RoutingControlStatusOutput) ToRoutingControlStatusPtrOutput() RoutingControlStatusPtrOutput {
	return o.ToRoutingControlStatusPtrOutputWithContext(context.Background())
}

func (o RoutingControlStatusOutput) ToRoutingControlStatusPtrOutputWithContext(ctx context.Context) RoutingControlStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutingControlStatus) *RoutingControlStatus {
		return &v
	}).(RoutingControlStatusPtrOutput)
}

func (o RoutingControlStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutingControlStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutingControlStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutingControlStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutingControlStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutingControlStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutingControlStatusPtrOutput struct{ *pulumi.OutputState }

func (RoutingControlStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingControlStatus)(nil)).Elem()
}

func (o RoutingControlStatusPtrOutput) ToRoutingControlStatusPtrOutput() RoutingControlStatusPtrOutput {
	return o
}

func (o RoutingControlStatusPtrOutput) ToRoutingControlStatusPtrOutputWithContext(ctx context.Context) RoutingControlStatusPtrOutput {
	return o
}

func (o RoutingControlStatusPtrOutput) Elem() RoutingControlStatusOutput {
	return o.ApplyT(func(v *RoutingControlStatus) RoutingControlStatus {
		if v != nil {
			return *v
		}
		var ret RoutingControlStatus
		return ret
	}).(RoutingControlStatusOutput)
}

func (o RoutingControlStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutingControlStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutingControlStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutingControlStatusInput is an input type that accepts RoutingControlStatusArgs and RoutingControlStatusOutput values.
// You can construct a concrete instance of `RoutingControlStatusInput` via:
//
//          RoutingControlStatusArgs{...}
type RoutingControlStatusInput interface {
	pulumi.Input

	ToRoutingControlStatusOutput() RoutingControlStatusOutput
	ToRoutingControlStatusOutputWithContext(context.Context) RoutingControlStatusOutput
}

var routingControlStatusPtrType = reflect.TypeOf((**RoutingControlStatus)(nil)).Elem()

type RoutingControlStatusPtrInput interface {
	pulumi.Input

	ToRoutingControlStatusPtrOutput() RoutingControlStatusPtrOutput
	ToRoutingControlStatusPtrOutputWithContext(context.Context) RoutingControlStatusPtrOutput
}

type routingControlStatusPtr string

func RoutingControlStatusPtr(v string) RoutingControlStatusPtrInput {
	return (*routingControlStatusPtr)(&v)
}

func (*routingControlStatusPtr) ElementType() reflect.Type {
	return routingControlStatusPtrType
}

func (in *routingControlStatusPtr) ToRoutingControlStatusPtrOutput() RoutingControlStatusPtrOutput {
	return pulumi.ToOutput(in).(RoutingControlStatusPtrOutput)
}

func (in *routingControlStatusPtr) ToRoutingControlStatusPtrOutputWithContext(ctx context.Context) RoutingControlStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutingControlStatusPtrOutput)
}

// A rule can be one of the following: ATLEAST, AND, or OR.
type SafetyRuleRuleType string

const (
	SafetyRuleRuleTypeAnd     = SafetyRuleRuleType("AND")
	SafetyRuleRuleTypeOr      = SafetyRuleRuleType("OR")
	SafetyRuleRuleTypeAtleast = SafetyRuleRuleType("ATLEAST")
)

func (SafetyRuleRuleType) ElementType() reflect.Type {
	return reflect.TypeOf((*SafetyRuleRuleType)(nil)).Elem()
}

func (e SafetyRuleRuleType) ToSafetyRuleRuleTypeOutput() SafetyRuleRuleTypeOutput {
	return pulumi.ToOutput(e).(SafetyRuleRuleTypeOutput)
}

func (e SafetyRuleRuleType) ToSafetyRuleRuleTypeOutputWithContext(ctx context.Context) SafetyRuleRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SafetyRuleRuleTypeOutput)
}

func (e SafetyRuleRuleType) ToSafetyRuleRuleTypePtrOutput() SafetyRuleRuleTypePtrOutput {
	return e.ToSafetyRuleRuleTypePtrOutputWithContext(context.Background())
}

func (e SafetyRuleRuleType) ToSafetyRuleRuleTypePtrOutputWithContext(ctx context.Context) SafetyRuleRuleTypePtrOutput {
	return SafetyRuleRuleType(e).ToSafetyRuleRuleTypeOutputWithContext(ctx).ToSafetyRuleRuleTypePtrOutputWithContext(ctx)
}

func (e SafetyRuleRuleType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SafetyRuleRuleType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SafetyRuleRuleType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SafetyRuleRuleType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SafetyRuleRuleTypeOutput struct{ *pulumi.OutputState }

func (SafetyRuleRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SafetyRuleRuleType)(nil)).Elem()
}

func (o SafetyRuleRuleTypeOutput) ToSafetyRuleRuleTypeOutput() SafetyRuleRuleTypeOutput {
	return o
}

func (o SafetyRuleRuleTypeOutput) ToSafetyRuleRuleTypeOutputWithContext(ctx context.Context) SafetyRuleRuleTypeOutput {
	return o
}

func (o SafetyRuleRuleTypeOutput) ToSafetyRuleRuleTypePtrOutput() SafetyRuleRuleTypePtrOutput {
	return o.ToSafetyRuleRuleTypePtrOutputWithContext(context.Background())
}

func (o SafetyRuleRuleTypeOutput) ToSafetyRuleRuleTypePtrOutputWithContext(ctx context.Context) SafetyRuleRuleTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SafetyRuleRuleType) *SafetyRuleRuleType {
		return &v
	}).(SafetyRuleRuleTypePtrOutput)
}

func (o SafetyRuleRuleTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SafetyRuleRuleTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SafetyRuleRuleType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SafetyRuleRuleTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SafetyRuleRuleTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SafetyRuleRuleType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SafetyRuleRuleTypePtrOutput struct{ *pulumi.OutputState }

func (SafetyRuleRuleTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SafetyRuleRuleType)(nil)).Elem()
}

func (o SafetyRuleRuleTypePtrOutput) ToSafetyRuleRuleTypePtrOutput() SafetyRuleRuleTypePtrOutput {
	return o
}

func (o SafetyRuleRuleTypePtrOutput) ToSafetyRuleRuleTypePtrOutputWithContext(ctx context.Context) SafetyRuleRuleTypePtrOutput {
	return o
}

func (o SafetyRuleRuleTypePtrOutput) Elem() SafetyRuleRuleTypeOutput {
	return o.ApplyT(func(v *SafetyRuleRuleType) SafetyRuleRuleType {
		if v != nil {
			return *v
		}
		var ret SafetyRuleRuleType
		return ret
	}).(SafetyRuleRuleTypeOutput)
}

func (o SafetyRuleRuleTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SafetyRuleRuleTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SafetyRuleRuleType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SafetyRuleRuleTypeInput is an input type that accepts SafetyRuleRuleTypeArgs and SafetyRuleRuleTypeOutput values.
// You can construct a concrete instance of `SafetyRuleRuleTypeInput` via:
//
//          SafetyRuleRuleTypeArgs{...}
type SafetyRuleRuleTypeInput interface {
	pulumi.Input

	ToSafetyRuleRuleTypeOutput() SafetyRuleRuleTypeOutput
	ToSafetyRuleRuleTypeOutputWithContext(context.Context) SafetyRuleRuleTypeOutput
}

var safetyRuleRuleTypePtrType = reflect.TypeOf((**SafetyRuleRuleType)(nil)).Elem()

type SafetyRuleRuleTypePtrInput interface {
	pulumi.Input

	ToSafetyRuleRuleTypePtrOutput() SafetyRuleRuleTypePtrOutput
	ToSafetyRuleRuleTypePtrOutputWithContext(context.Context) SafetyRuleRuleTypePtrOutput
}

type safetyRuleRuleTypePtr string

func SafetyRuleRuleTypePtr(v string) SafetyRuleRuleTypePtrInput {
	return (*safetyRuleRuleTypePtr)(&v)
}

func (*safetyRuleRuleTypePtr) ElementType() reflect.Type {
	return safetyRuleRuleTypePtrType
}

func (in *safetyRuleRuleTypePtr) ToSafetyRuleRuleTypePtrOutput() SafetyRuleRuleTypePtrOutput {
	return pulumi.ToOutput(in).(SafetyRuleRuleTypePtrOutput)
}

func (in *safetyRuleRuleTypePtr) ToSafetyRuleRuleTypePtrOutputWithContext(ctx context.Context) SafetyRuleRuleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SafetyRuleRuleTypePtrOutput)
}

// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
type SafetyRuleStatus string

const (
	SafetyRuleStatusPending         = SafetyRuleStatus("PENDING")
	SafetyRuleStatusDeployed        = SafetyRuleStatus("DEPLOYED")
	SafetyRuleStatusPendingDeletion = SafetyRuleStatus("PENDING_DELETION")
)

func (SafetyRuleStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*SafetyRuleStatus)(nil)).Elem()
}

func (e SafetyRuleStatus) ToSafetyRuleStatusOutput() SafetyRuleStatusOutput {
	return pulumi.ToOutput(e).(SafetyRuleStatusOutput)
}

func (e SafetyRuleStatus) ToSafetyRuleStatusOutputWithContext(ctx context.Context) SafetyRuleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SafetyRuleStatusOutput)
}

func (e SafetyRuleStatus) ToSafetyRuleStatusPtrOutput() SafetyRuleStatusPtrOutput {
	return e.ToSafetyRuleStatusPtrOutputWithContext(context.Background())
}

func (e SafetyRuleStatus) ToSafetyRuleStatusPtrOutputWithContext(ctx context.Context) SafetyRuleStatusPtrOutput {
	return SafetyRuleStatus(e).ToSafetyRuleStatusOutputWithContext(ctx).ToSafetyRuleStatusPtrOutputWithContext(ctx)
}

func (e SafetyRuleStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SafetyRuleStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SafetyRuleStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SafetyRuleStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SafetyRuleStatusOutput struct{ *pulumi.OutputState }

func (SafetyRuleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SafetyRuleStatus)(nil)).Elem()
}

func (o SafetyRuleStatusOutput) ToSafetyRuleStatusOutput() SafetyRuleStatusOutput {
	return o
}

func (o SafetyRuleStatusOutput) ToSafetyRuleStatusOutputWithContext(ctx context.Context) SafetyRuleStatusOutput {
	return o
}

func (o SafetyRuleStatusOutput) ToSafetyRuleStatusPtrOutput() SafetyRuleStatusPtrOutput {
	return o.ToSafetyRuleStatusPtrOutputWithContext(context.Background())
}

func (o SafetyRuleStatusOutput) ToSafetyRuleStatusPtrOutputWithContext(ctx context.Context) SafetyRuleStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SafetyRuleStatus) *SafetyRuleStatus {
		return &v
	}).(SafetyRuleStatusPtrOutput)
}

func (o SafetyRuleStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SafetyRuleStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SafetyRuleStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SafetyRuleStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SafetyRuleStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SafetyRuleStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SafetyRuleStatusPtrOutput struct{ *pulumi.OutputState }

func (SafetyRuleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SafetyRuleStatus)(nil)).Elem()
}

func (o SafetyRuleStatusPtrOutput) ToSafetyRuleStatusPtrOutput() SafetyRuleStatusPtrOutput {
	return o
}

func (o SafetyRuleStatusPtrOutput) ToSafetyRuleStatusPtrOutputWithContext(ctx context.Context) SafetyRuleStatusPtrOutput {
	return o
}

func (o SafetyRuleStatusPtrOutput) Elem() SafetyRuleStatusOutput {
	return o.ApplyT(func(v *SafetyRuleStatus) SafetyRuleStatus {
		if v != nil {
			return *v
		}
		var ret SafetyRuleStatus
		return ret
	}).(SafetyRuleStatusOutput)
}

func (o SafetyRuleStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SafetyRuleStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SafetyRuleStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SafetyRuleStatusInput is an input type that accepts SafetyRuleStatusArgs and SafetyRuleStatusOutput values.
// You can construct a concrete instance of `SafetyRuleStatusInput` via:
//
//          SafetyRuleStatusArgs{...}
type SafetyRuleStatusInput interface {
	pulumi.Input

	ToSafetyRuleStatusOutput() SafetyRuleStatusOutput
	ToSafetyRuleStatusOutputWithContext(context.Context) SafetyRuleStatusOutput
}

var safetyRuleStatusPtrType = reflect.TypeOf((**SafetyRuleStatus)(nil)).Elem()

type SafetyRuleStatusPtrInput interface {
	pulumi.Input

	ToSafetyRuleStatusPtrOutput() SafetyRuleStatusPtrOutput
	ToSafetyRuleStatusPtrOutputWithContext(context.Context) SafetyRuleStatusPtrOutput
}

type safetyRuleStatusPtr string

func SafetyRuleStatusPtr(v string) SafetyRuleStatusPtrInput {
	return (*safetyRuleStatusPtr)(&v)
}

func (*safetyRuleStatusPtr) ElementType() reflect.Type {
	return safetyRuleStatusPtrType
}

func (in *safetyRuleStatusPtr) ToSafetyRuleStatusPtrOutput() SafetyRuleStatusPtrOutput {
	return pulumi.ToOutput(in).(SafetyRuleStatusPtrOutput)
}

func (in *safetyRuleStatusPtr) ToSafetyRuleStatusPtrOutputWithContext(ctx context.Context) SafetyRuleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SafetyRuleStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterStatusOutput{})
	pulumi.RegisterOutputType(ClusterStatusPtrOutput{})
	pulumi.RegisterOutputType(ControlPanelStatusOutput{})
	pulumi.RegisterOutputType(ControlPanelStatusPtrOutput{})
	pulumi.RegisterOutputType(RoutingControlStatusOutput{})
	pulumi.RegisterOutputType(RoutingControlStatusPtrOutput{})
	pulumi.RegisterOutputType(SafetyRuleRuleTypeOutput{})
	pulumi.RegisterOutputType(SafetyRuleRuleTypePtrOutput{})
	pulumi.RegisterOutputType(SafetyRuleStatusOutput{})
	pulumi.RegisterOutputType(SafetyRuleStatusPtrOutput{})
}
