// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoverycontrol

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS Route53 Recovery Control basic constructs and validation rules.
func LookupSafetyRule(ctx *pulumi.Context, args *LookupSafetyRuleArgs, opts ...pulumi.InvokeOption) (*LookupSafetyRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSafetyRuleResult
	err := ctx.Invoke("aws-native:route53recoverycontrol:getSafetyRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSafetyRuleArgs struct {
	// The Amazon Resource Name (ARN) of the safety rule.
	SafetyRuleArn string `pulumi:"safetyRuleArn"`
}

type LookupSafetyRuleResult struct {
	// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
	AssertionRule *SafetyRuleAssertionRule `pulumi:"assertionRule"`
	// The Amazon Resource Name (ARN) of the control panel.
	ControlPanelArn *string `pulumi:"controlPanelArn"`
	// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
	//
	// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
	GatingRule *SafetyRuleGatingRule `pulumi:"gatingRule"`
	// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: & > < ' (single quote) " (double quote) ; (semicolon)
	Name *string `pulumi:"name"`
	// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
	RuleConfig *SafetyRuleRuleConfig `pulumi:"ruleConfig"`
	// The Amazon Resource Name (ARN) of the safety rule.
	SafetyRuleArn *string `pulumi:"safetyRuleArn"`
	// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
	Status *SafetyRuleStatus `pulumi:"status"`
}

func LookupSafetyRuleOutput(ctx *pulumi.Context, args LookupSafetyRuleOutputArgs, opts ...pulumi.InvokeOption) LookupSafetyRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSafetyRuleResult, error) {
			args := v.(LookupSafetyRuleArgs)
			r, err := LookupSafetyRule(ctx, &args, opts...)
			var s LookupSafetyRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSafetyRuleResultOutput)
}

type LookupSafetyRuleOutputArgs struct {
	// The Amazon Resource Name (ARN) of the safety rule.
	SafetyRuleArn pulumi.StringInput `pulumi:"safetyRuleArn"`
}

func (LookupSafetyRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSafetyRuleArgs)(nil)).Elem()
}

type LookupSafetyRuleResultOutput struct{ *pulumi.OutputState }

func (LookupSafetyRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSafetyRuleResult)(nil)).Elem()
}

func (o LookupSafetyRuleResultOutput) ToLookupSafetyRuleResultOutput() LookupSafetyRuleResultOutput {
	return o
}

func (o LookupSafetyRuleResultOutput) ToLookupSafetyRuleResultOutputWithContext(ctx context.Context) LookupSafetyRuleResultOutput {
	return o
}

// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
func (o LookupSafetyRuleResultOutput) AssertionRule() SafetyRuleAssertionRulePtrOutput {
	return o.ApplyT(func(v LookupSafetyRuleResult) *SafetyRuleAssertionRule { return v.AssertionRule }).(SafetyRuleAssertionRulePtrOutput)
}

// The Amazon Resource Name (ARN) of the control panel.
func (o LookupSafetyRuleResultOutput) ControlPanelArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSafetyRuleResult) *string { return v.ControlPanelArn }).(pulumi.StringPtrOutput)
}

// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
//
// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
func (o LookupSafetyRuleResultOutput) GatingRule() SafetyRuleGatingRulePtrOutput {
	return o.ApplyT(func(v LookupSafetyRuleResult) *SafetyRuleGatingRule { return v.GatingRule }).(SafetyRuleGatingRulePtrOutput)
}

// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: & > < ' (single quote) " (double quote) ; (semicolon)
func (o LookupSafetyRuleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSafetyRuleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
func (o LookupSafetyRuleResultOutput) RuleConfig() SafetyRuleRuleConfigPtrOutput {
	return o.ApplyT(func(v LookupSafetyRuleResult) *SafetyRuleRuleConfig { return v.RuleConfig }).(SafetyRuleRuleConfigPtrOutput)
}

// The Amazon Resource Name (ARN) of the safety rule.
func (o LookupSafetyRuleResultOutput) SafetyRuleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSafetyRuleResult) *string { return v.SafetyRuleArn }).(pulumi.StringPtrOutput)
}

// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
func (o LookupSafetyRuleResultOutput) Status() SafetyRuleStatusPtrOutput {
	return o.ApplyT(func(v LookupSafetyRuleResult) *SafetyRuleStatus { return v.Status }).(SafetyRuleStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSafetyRuleResultOutput{})
}
