// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wafv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains a list of IP addresses. This can be either IPV4 or IPV6. The list will be mutually
type IpSet struct {
	pulumi.CustomResourceState

	// List of IPAddresses.
	Addresses        pulumi.StringArrayOutput    `pulumi:"addresses"`
	Arn              pulumi.StringOutput         `pulumi:"arn"`
	Description      pulumi.StringPtrOutput      `pulumi:"description"`
	IpAddressVersion IpSetIpAddressVersionOutput `pulumi:"ipAddressVersion"`
	Name             pulumi.StringPtrOutput      `pulumi:"name"`
	Scope            IpSetScopeOutput            `pulumi:"scope"`
	Tags             IpSetTagArrayOutput         `pulumi:"tags"`
}

// NewIpSet registers a new resource with the given unique name, arguments, and options.
func NewIpSet(ctx *pulumi.Context,
	name string, args *IpSetArgs, opts ...pulumi.ResourceOption) (*IpSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Addresses == nil {
		return nil, errors.New("invalid value for required argument 'Addresses'")
	}
	if args.IpAddressVersion == nil {
		return nil, errors.New("invalid value for required argument 'IpAddressVersion'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"scope",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpSet
	err := ctx.RegisterResource("aws-native:wafv2:IpSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpSet gets an existing IpSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpSetState, opts ...pulumi.ResourceOption) (*IpSet, error) {
	var resource IpSet
	err := ctx.ReadResource("aws-native:wafv2:IpSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpSet resources.
type ipSetState struct {
}

type IpSetState struct {
}

func (IpSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSetState)(nil)).Elem()
}

type ipSetArgs struct {
	// List of IPAddresses.
	Addresses        []string              `pulumi:"addresses"`
	Description      *string               `pulumi:"description"`
	IpAddressVersion IpSetIpAddressVersion `pulumi:"ipAddressVersion"`
	Name             *string               `pulumi:"name"`
	Scope            IpSetScope            `pulumi:"scope"`
	Tags             []IpSetTag            `pulumi:"tags"`
}

// The set of arguments for constructing a IpSet resource.
type IpSetArgs struct {
	// List of IPAddresses.
	Addresses        pulumi.StringArrayInput
	Description      pulumi.StringPtrInput
	IpAddressVersion IpSetIpAddressVersionInput
	Name             pulumi.StringPtrInput
	Scope            IpSetScopeInput
	Tags             IpSetTagArrayInput
}

func (IpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSetArgs)(nil)).Elem()
}

type IpSetInput interface {
	pulumi.Input

	ToIpSetOutput() IpSetOutput
	ToIpSetOutputWithContext(ctx context.Context) IpSetOutput
}

func (*IpSet) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSet)(nil)).Elem()
}

func (i *IpSet) ToIpSetOutput() IpSetOutput {
	return i.ToIpSetOutputWithContext(context.Background())
}

func (i *IpSet) ToIpSetOutputWithContext(ctx context.Context) IpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSetOutput)
}

type IpSetOutput struct{ *pulumi.OutputState }

func (IpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSet)(nil)).Elem()
}

func (o IpSetOutput) ToIpSetOutput() IpSetOutput {
	return o
}

func (o IpSetOutput) ToIpSetOutputWithContext(ctx context.Context) IpSetOutput {
	return o
}

// List of IPAddresses.
func (o IpSetOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpSet) pulumi.StringArrayOutput { return v.Addresses }).(pulumi.StringArrayOutput)
}

func (o IpSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o IpSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IpSetOutput) IpAddressVersion() IpSetIpAddressVersionOutput {
	return o.ApplyT(func(v *IpSet) IpSetIpAddressVersionOutput { return v.IpAddressVersion }).(IpSetIpAddressVersionOutput)
}

func (o IpSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSet) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o IpSetOutput) Scope() IpSetScopeOutput {
	return o.ApplyT(func(v *IpSet) IpSetScopeOutput { return v.Scope }).(IpSetScopeOutput)
}

func (o IpSetOutput) Tags() IpSetTagArrayOutput {
	return o.ApplyT(func(v *IpSet) IpSetTagArrayOutput { return v.Tags }).(IpSetTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpSetInput)(nil)).Elem(), &IpSet{})
	pulumi.RegisterOutputType(IpSetOutput{})
}
