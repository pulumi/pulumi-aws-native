// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::Analysis Resource Type.
type Analysis struct {
	pulumi.CustomResourceState

	// The ID for the analysis that you're creating. This ID displays in the URL of the analysis.
	AnalysisId pulumi.StringOutput `pulumi:"analysisId"`
	// <p>The Amazon Resource Name (ARN) of the analysis.</p>
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the AWS account where you are creating an analysis.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// <p>The time that the analysis was created.</p>
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// <p>The ARNs of the datasets of the analysis.</p>
	DataSetArns pulumi.StringArrayOutput    `pulumi:"dataSetArns"`
	Definition  AnalysisDefinitionPtrOutput `pulumi:"definition"`
	// <p>Errors associated with the analysis.</p>
	Errors AnalysisErrorArrayOutput `pulumi:"errors"`
	// <p>The time that the analysis was last updated.</p>
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// <p>The descriptive name of the analysis.</p>
	Name pulumi.StringOutput `pulumi:"name"`
	// The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values.
	Parameters AnalysisParametersPtrOutput `pulumi:"parameters"`
	// A structure that describes the principals and the resource-level permissions on an analysis. You can use the `Permissions` structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN).
	//
	// To specify no permissions, omit `Permissions` .
	Permissions AnalysisResourcePermissionArrayOutput `pulumi:"permissions"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets AnalysisSheetArrayOutput `pulumi:"sheets"`
	// A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.
	//
	// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
	SourceEntity AnalysisSourceEntityPtrOutput `pulumi:"sourceEntity"`
	// Status associated with the analysis.
	Status AnalysisResourceStatusPtrOutput `pulumi:"status"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// <p>The ARN of the theme of the analysis.</p>
	ThemeArn pulumi.StringPtrOutput `pulumi:"themeArn"`
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy AnalysisValidationStrategyPtrOutput `pulumi:"validationStrategy"`
}

// NewAnalysis registers a new resource with the given unique name, arguments, and options.
func NewAnalysis(ctx *pulumi.Context,
	name string, args *AnalysisArgs, opts ...pulumi.ResourceOption) (*Analysis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnalysisId == nil {
		return nil, errors.New("invalid value for required argument 'AnalysisId'")
	}
	if args.AwsAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AwsAccountId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"analysisId",
		"awsAccountId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Analysis
	err := ctx.RegisterResource("aws-native:quicksight:Analysis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalysis gets an existing Analysis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalysis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalysisState, opts ...pulumi.ResourceOption) (*Analysis, error) {
	var resource Analysis
	err := ctx.ReadResource("aws-native:quicksight:Analysis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Analysis resources.
type analysisState struct {
}

type AnalysisState struct {
}

func (AnalysisState) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisState)(nil)).Elem()
}

type analysisArgs struct {
	// The ID for the analysis that you're creating. This ID displays in the URL of the analysis.
	AnalysisId string `pulumi:"analysisId"`
	// The ID of the AWS account where you are creating an analysis.
	AwsAccountId string              `pulumi:"awsAccountId"`
	Definition   *AnalysisDefinition `pulumi:"definition"`
	// <p>Errors associated with the analysis.</p>
	Errors []AnalysisError `pulumi:"errors"`
	// <p>The descriptive name of the analysis.</p>
	Name *string `pulumi:"name"`
	// The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values.
	Parameters *AnalysisParameters `pulumi:"parameters"`
	// A structure that describes the principals and the resource-level permissions on an analysis. You can use the `Permissions` structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN).
	//
	// To specify no permissions, omit `Permissions` .
	Permissions []AnalysisResourcePermission `pulumi:"permissions"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets []AnalysisSheet `pulumi:"sheets"`
	// A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.
	//
	// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
	SourceEntity *AnalysisSourceEntity `pulumi:"sourceEntity"`
	// Status associated with the analysis.
	Status *AnalysisResourceStatus `pulumi:"status"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
	Tags []aws.Tag `pulumi:"tags"`
	// <p>The ARN of the theme of the analysis.</p>
	ThemeArn *string `pulumi:"themeArn"`
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy *AnalysisValidationStrategy `pulumi:"validationStrategy"`
}

// The set of arguments for constructing a Analysis resource.
type AnalysisArgs struct {
	// The ID for the analysis that you're creating. This ID displays in the URL of the analysis.
	AnalysisId pulumi.StringInput
	// The ID of the AWS account where you are creating an analysis.
	AwsAccountId pulumi.StringInput
	Definition   AnalysisDefinitionPtrInput
	// <p>Errors associated with the analysis.</p>
	Errors AnalysisErrorArrayInput
	// <p>The descriptive name of the analysis.</p>
	Name pulumi.StringPtrInput
	// The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values.
	Parameters AnalysisParametersPtrInput
	// A structure that describes the principals and the resource-level permissions on an analysis. You can use the `Permissions` structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN).
	//
	// To specify no permissions, omit `Permissions` .
	Permissions AnalysisResourcePermissionArrayInput
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets AnalysisSheetArrayInput
	// A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.
	//
	// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
	SourceEntity AnalysisSourceEntityPtrInput
	// Status associated with the analysis.
	Status AnalysisResourceStatusPtrInput
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
	Tags aws.TagArrayInput
	// <p>The ARN of the theme of the analysis.</p>
	ThemeArn pulumi.StringPtrInput
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy AnalysisValidationStrategyPtrInput
}

func (AnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisArgs)(nil)).Elem()
}

type AnalysisInput interface {
	pulumi.Input

	ToAnalysisOutput() AnalysisOutput
	ToAnalysisOutputWithContext(ctx context.Context) AnalysisOutput
}

func (*Analysis) ElementType() reflect.Type {
	return reflect.TypeOf((**Analysis)(nil)).Elem()
}

func (i *Analysis) ToAnalysisOutput() AnalysisOutput {
	return i.ToAnalysisOutputWithContext(context.Background())
}

func (i *Analysis) ToAnalysisOutputWithContext(ctx context.Context) AnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisOutput)
}

type AnalysisOutput struct{ *pulumi.OutputState }

func (AnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Analysis)(nil)).Elem()
}

func (o AnalysisOutput) ToAnalysisOutput() AnalysisOutput {
	return o
}

func (o AnalysisOutput) ToAnalysisOutputWithContext(ctx context.Context) AnalysisOutput {
	return o
}

// The ID for the analysis that you're creating. This ID displays in the URL of the analysis.
func (o AnalysisOutput) AnalysisId() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.AnalysisId }).(pulumi.StringOutput)
}

// <p>The Amazon Resource Name (ARN) of the analysis.</p>
func (o AnalysisOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the AWS account where you are creating an analysis.
func (o AnalysisOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// <p>The time that the analysis was created.</p>
func (o AnalysisOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// <p>The ARNs of the datasets of the analysis.</p>
func (o AnalysisOutput) DataSetArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringArrayOutput { return v.DataSetArns }).(pulumi.StringArrayOutput)
}

func (o AnalysisOutput) Definition() AnalysisDefinitionPtrOutput {
	return o.ApplyT(func(v *Analysis) AnalysisDefinitionPtrOutput { return v.Definition }).(AnalysisDefinitionPtrOutput)
}

// <p>Errors associated with the analysis.</p>
func (o AnalysisOutput) Errors() AnalysisErrorArrayOutput {
	return o.ApplyT(func(v *Analysis) AnalysisErrorArrayOutput { return v.Errors }).(AnalysisErrorArrayOutput)
}

// <p>The time that the analysis was last updated.</p>
func (o AnalysisOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// <p>The descriptive name of the analysis.</p>
func (o AnalysisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values.
func (o AnalysisOutput) Parameters() AnalysisParametersPtrOutput {
	return o.ApplyT(func(v *Analysis) AnalysisParametersPtrOutput { return v.Parameters }).(AnalysisParametersPtrOutput)
}

// A structure that describes the principals and the resource-level permissions on an analysis. You can use the `Permissions` structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN).
//
// To specify no permissions, omit `Permissions` .
func (o AnalysisOutput) Permissions() AnalysisResourcePermissionArrayOutput {
	return o.ApplyT(func(v *Analysis) AnalysisResourcePermissionArrayOutput { return v.Permissions }).(AnalysisResourcePermissionArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o AnalysisOutput) Sheets() AnalysisSheetArrayOutput {
	return o.ApplyT(func(v *Analysis) AnalysisSheetArrayOutput { return v.Sheets }).(AnalysisSheetArrayOutput)
}

// A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.
//
// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
func (o AnalysisOutput) SourceEntity() AnalysisSourceEntityPtrOutput {
	return o.ApplyT(func(v *Analysis) AnalysisSourceEntityPtrOutput { return v.SourceEntity }).(AnalysisSourceEntityPtrOutput)
}

// Status associated with the analysis.
func (o AnalysisOutput) Status() AnalysisResourceStatusPtrOutput {
	return o.ApplyT(func(v *Analysis) AnalysisResourceStatusPtrOutput { return v.Status }).(AnalysisResourceStatusPtrOutput)
}

// Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
func (o AnalysisOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Analysis) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// <p>The ARN of the theme of the analysis.</p>
func (o AnalysisOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringPtrOutput { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
func (o AnalysisOutput) ValidationStrategy() AnalysisValidationStrategyPtrOutput {
	return o.ApplyT(func(v *Analysis) AnalysisValidationStrategyPtrOutput { return v.ValidationStrategy }).(AnalysisValidationStrategyPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisInput)(nil)).Elem(), &Analysis{})
	pulumi.RegisterOutputType(AnalysisOutput{})
}
