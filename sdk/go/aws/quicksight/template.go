// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::Template Resource Type.
type Template struct {
	pulumi.CustomResourceState

	// <p>The Amazon Resource Name (ARN) of the template.</p>
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID for the AWS account that the group is in. You use the ID for the AWS account that contains your Amazon Quick Sight account.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// <p>Time when this was created.</p>
	CreatedTime pulumi.StringOutput                `pulumi:"createdTime"`
	Definition  TemplateVersionDefinitionPtrOutput `pulumi:"definition"`
	// <p>Time when this was last updated.</p>
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// A display name for the template.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// A list of resource permissions to be set on the template.
	Permissions TemplateResourcePermissionArrayOutput `pulumi:"permissions"`
	// The entity that you are using as a source when you create the template. In `SourceEntity` , you specify the type of object you're using as source: `SourceTemplate` for a template or `SourceAnalysis` for an analysis. Both of these require an Amazon Resource Name (ARN). For `SourceTemplate` , specify the ARN of the source template. For `SourceAnalysis` , specify the ARN of the source analysis. The `SourceTemplate` ARN can contain any AWS account and any Quick Sight-supported AWS Region .
	//
	// Use the `DataSetReferences` entity within `SourceTemplate` or `SourceAnalysis` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
	//
	// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
	SourceEntity TemplateSourceEntityPtrOutput `pulumi:"sourceEntity"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// An ID for the template that you want to create. This template is unique per AWS Region ; in each AWS account.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy TemplateValidationStrategyPtrOutput `pulumi:"validationStrategy"`
	Version            TemplateVersionOutput               `pulumi:"version"`
	// A description of the current template version being created. This API operation creates the first version of the template. Every time `UpdateTemplate` is called, a new version is created. Each version of the template maintains a description of the version in the `VersionDescription` field.
	VersionDescription pulumi.StringPtrOutput `pulumi:"versionDescription"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AwsAccountId'")
	}
	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"awsAccountId",
		"templateId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("aws-native:quicksight:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("aws-native:quicksight:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
}

type TemplateState struct {
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	// The ID for the AWS account that the group is in. You use the ID for the AWS account that contains your Amazon Quick Sight account.
	AwsAccountId string                     `pulumi:"awsAccountId"`
	Definition   *TemplateVersionDefinition `pulumi:"definition"`
	// A display name for the template.
	Name *string `pulumi:"name"`
	// A list of resource permissions to be set on the template.
	Permissions []TemplateResourcePermission `pulumi:"permissions"`
	// The entity that you are using as a source when you create the template. In `SourceEntity` , you specify the type of object you're using as source: `SourceTemplate` for a template or `SourceAnalysis` for an analysis. Both of these require an Amazon Resource Name (ARN). For `SourceTemplate` , specify the ARN of the source template. For `SourceAnalysis` , specify the ARN of the source analysis. The `SourceTemplate` ARN can contain any AWS account and any Quick Sight-supported AWS Region .
	//
	// Use the `DataSetReferences` entity within `SourceTemplate` or `SourceAnalysis` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
	//
	// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
	SourceEntity *TemplateSourceEntity `pulumi:"sourceEntity"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
	Tags []aws.Tag `pulumi:"tags"`
	// An ID for the template that you want to create. This template is unique per AWS Region ; in each AWS account.
	TemplateId string `pulumi:"templateId"`
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy *TemplateValidationStrategy `pulumi:"validationStrategy"`
	// A description of the current template version being created. This API operation creates the first version of the template. Every time `UpdateTemplate` is called, a new version is created. Each version of the template maintains a description of the version in the `VersionDescription` field.
	VersionDescription *string `pulumi:"versionDescription"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	// The ID for the AWS account that the group is in. You use the ID for the AWS account that contains your Amazon Quick Sight account.
	AwsAccountId pulumi.StringInput
	Definition   TemplateVersionDefinitionPtrInput
	// A display name for the template.
	Name pulumi.StringPtrInput
	// A list of resource permissions to be set on the template.
	Permissions TemplateResourcePermissionArrayInput
	// The entity that you are using as a source when you create the template. In `SourceEntity` , you specify the type of object you're using as source: `SourceTemplate` for a template or `SourceAnalysis` for an analysis. Both of these require an Amazon Resource Name (ARN). For `SourceTemplate` , specify the ARN of the source template. For `SourceAnalysis` , specify the ARN of the source analysis. The `SourceTemplate` ARN can contain any AWS account and any Quick Sight-supported AWS Region .
	//
	// Use the `DataSetReferences` entity within `SourceTemplate` or `SourceAnalysis` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
	//
	// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
	SourceEntity TemplateSourceEntityPtrInput
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
	Tags aws.TagArrayInput
	// An ID for the template that you want to create. This template is unique per AWS Region ; in each AWS account.
	TemplateId pulumi.StringInput
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy TemplateValidationStrategyPtrInput
	// A description of the current template version being created. This API operation creates the first version of the template. Every time `UpdateTemplate` is called, a new version is created. Each version of the template maintains a description of the version in the `VersionDescription` field.
	VersionDescription pulumi.StringPtrInput
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the template.</p>
func (o TemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID for the AWS account that the group is in. You use the ID for the AWS account that contains your Amazon Quick Sight account.
func (o TemplateOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// <p>Time when this was created.</p>
func (o TemplateOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o TemplateOutput) Definition() TemplateVersionDefinitionPtrOutput {
	return o.ApplyT(func(v *Template) TemplateVersionDefinitionPtrOutput { return v.Definition }).(TemplateVersionDefinitionPtrOutput)
}

// <p>Time when this was last updated.</p>
func (o TemplateOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// A display name for the template.
func (o TemplateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of resource permissions to be set on the template.
func (o TemplateOutput) Permissions() TemplateResourcePermissionArrayOutput {
	return o.ApplyT(func(v *Template) TemplateResourcePermissionArrayOutput { return v.Permissions }).(TemplateResourcePermissionArrayOutput)
}

// The entity that you are using as a source when you create the template. In `SourceEntity` , you specify the type of object you're using as source: `SourceTemplate` for a template or `SourceAnalysis` for an analysis. Both of these require an Amazon Resource Name (ARN). For `SourceTemplate` , specify the ARN of the source template. For `SourceAnalysis` , specify the ARN of the source analysis. The `SourceTemplate` ARN can contain any AWS account and any Quick Sight-supported AWS Region .
//
// Use the `DataSetReferences` entity within `SourceTemplate` or `SourceAnalysis` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
//
// Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
func (o TemplateOutput) SourceEntity() TemplateSourceEntityPtrOutput {
	return o.ApplyT(func(v *Template) TemplateSourceEntityPtrOutput { return v.SourceEntity }).(TemplateSourceEntityPtrOutput)
}

// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
func (o TemplateOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Template) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// An ID for the template that you want to create. This template is unique per AWS Region ; in each AWS account.
func (o TemplateOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
func (o TemplateOutput) ValidationStrategy() TemplateValidationStrategyPtrOutput {
	return o.ApplyT(func(v *Template) TemplateValidationStrategyPtrOutput { return v.ValidationStrategy }).(TemplateValidationStrategyPtrOutput)
}

func (o TemplateOutput) Version() TemplateVersionOutput {
	return o.ApplyT(func(v *Template) TemplateVersionOutput { return v.Version }).(TemplateVersionOutput)
}

// A description of the current template version being created. This API operation creates the first version of the template. Every time `UpdateTemplate` is called, a new version is created. Each version of the template maintains a description of the version in the `VersionDescription` field.
func (o TemplateOutput) VersionDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.VersionDescription }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterOutputType(TemplateOutput{})
}
