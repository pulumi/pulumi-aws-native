// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::Theme Resource Type.
func LookupTheme(ctx *pulumi.Context, args *LookupThemeArgs, opts ...pulumi.InvokeOption) (*LookupThemeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupThemeResult
	err := ctx.Invoke("aws-native:quicksight:getTheme", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupThemeArgs struct {
	// The ID of the AWS account where you want to store the new theme.
	AwsAccountId string `pulumi:"awsAccountId"`
	// An ID for the theme that you want to create. The theme ID is unique per AWS Region in each AWS account.
	ThemeId string `pulumi:"themeId"`
}

type LookupThemeResult struct {
	// <p>The Amazon Resource Name (ARN) of the theme.</p>
	Arn *string `pulumi:"arn"`
	// The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use `ListThemes` or choose *Themes* from within an analysis.
	BaseThemeId *string `pulumi:"baseThemeId"`
	// The theme configuration, which contains the theme display properties.
	Configuration *ThemeConfiguration `pulumi:"configuration"`
	// <p>The date and time that the theme was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>The date and time that the theme was last updated.</p>
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// A display name for the theme.
	Name *string `pulumi:"name"`
	// A valid grouping of resource permissions to apply to the new theme.
	Permissions []ThemeResourcePermission `pulumi:"permissions"`
	// A map of the key-value pairs for the resource tag or tags that you want to add to the resource.
	Tags []aws.Tag `pulumi:"tags"`
	// Theme type.
	Type    *ThemeType    `pulumi:"type"`
	Version *ThemeVersion `pulumi:"version"`
	// A description of the first version of the theme that you're creating. Every time `UpdateTheme` is called, a new version is created. Each version of the theme has a description of the version in the `VersionDescription` field.
	VersionDescription *string `pulumi:"versionDescription"`
}

func LookupThemeOutput(ctx *pulumi.Context, args LookupThemeOutputArgs, opts ...pulumi.InvokeOption) LookupThemeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupThemeResultOutput, error) {
			args := v.(LookupThemeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:quicksight:getTheme", args, LookupThemeResultOutput{}, options).(LookupThemeResultOutput), nil
		}).(LookupThemeResultOutput)
}

type LookupThemeOutputArgs struct {
	// The ID of the AWS account where you want to store the new theme.
	AwsAccountId pulumi.StringInput `pulumi:"awsAccountId"`
	// An ID for the theme that you want to create. The theme ID is unique per AWS Region in each AWS account.
	ThemeId pulumi.StringInput `pulumi:"themeId"`
}

func (LookupThemeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThemeArgs)(nil)).Elem()
}

type LookupThemeResultOutput struct{ *pulumi.OutputState }

func (LookupThemeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThemeResult)(nil)).Elem()
}

func (o LookupThemeResultOutput) ToLookupThemeResultOutput() LookupThemeResultOutput {
	return o
}

func (o LookupThemeResultOutput) ToLookupThemeResultOutputWithContext(ctx context.Context) LookupThemeResultOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the theme.</p>
func (o LookupThemeResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use `ListThemes` or choose *Themes* from within an analysis.
func (o LookupThemeResultOutput) BaseThemeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.BaseThemeId }).(pulumi.StringPtrOutput)
}

// The theme configuration, which contains the theme display properties.
func (o LookupThemeResultOutput) Configuration() ThemeConfigurationPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *ThemeConfiguration { return v.Configuration }).(ThemeConfigurationPtrOutput)
}

// <p>The date and time that the theme was created.</p>
func (o LookupThemeResultOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>The date and time that the theme was last updated.</p>
func (o LookupThemeResultOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// A display name for the theme.
func (o LookupThemeResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A valid grouping of resource permissions to apply to the new theme.
func (o LookupThemeResultOutput) Permissions() ThemeResourcePermissionArrayOutput {
	return o.ApplyT(func(v LookupThemeResult) []ThemeResourcePermission { return v.Permissions }).(ThemeResourcePermissionArrayOutput)
}

// A map of the key-value pairs for the resource tag or tags that you want to add to the resource.
func (o LookupThemeResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupThemeResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// Theme type.
func (o LookupThemeResultOutput) Type() ThemeTypePtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *ThemeType { return v.Type }).(ThemeTypePtrOutput)
}

func (o LookupThemeResultOutput) Version() ThemeVersionPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *ThemeVersion { return v.Version }).(ThemeVersionPtrOutput)
}

// A description of the first version of the theme that you're creating. Every time `UpdateTheme` is called, a new version is created. Each version of the theme has a description of the version in the `VersionDescription` field.
func (o LookupThemeResultOutput) VersionDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.VersionDescription }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupThemeResultOutput{})
}
