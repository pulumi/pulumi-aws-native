// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <p>Dataset reference.</p>
type AnalysisDataSetReference struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn string `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

// AnalysisDataSetReferenceInput is an input type that accepts AnalysisDataSetReferenceArgs and AnalysisDataSetReferenceOutput values.
// You can construct a concrete instance of `AnalysisDataSetReferenceInput` via:
//
//          AnalysisDataSetReferenceArgs{...}
type AnalysisDataSetReferenceInput interface {
	pulumi.Input

	ToAnalysisDataSetReferenceOutput() AnalysisDataSetReferenceOutput
	ToAnalysisDataSetReferenceOutputWithContext(context.Context) AnalysisDataSetReferenceOutput
}

// <p>Dataset reference.</p>
type AnalysisDataSetReferenceArgs struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn pulumi.StringInput `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder pulumi.StringInput `pulumi:"dataSetPlaceholder"`
}

func (AnalysisDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisDataSetReference)(nil)).Elem()
}

func (i AnalysisDataSetReferenceArgs) ToAnalysisDataSetReferenceOutput() AnalysisDataSetReferenceOutput {
	return i.ToAnalysisDataSetReferenceOutputWithContext(context.Background())
}

func (i AnalysisDataSetReferenceArgs) ToAnalysisDataSetReferenceOutputWithContext(ctx context.Context) AnalysisDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisDataSetReferenceOutput)
}

// AnalysisDataSetReferenceArrayInput is an input type that accepts AnalysisDataSetReferenceArray and AnalysisDataSetReferenceArrayOutput values.
// You can construct a concrete instance of `AnalysisDataSetReferenceArrayInput` via:
//
//          AnalysisDataSetReferenceArray{ AnalysisDataSetReferenceArgs{...} }
type AnalysisDataSetReferenceArrayInput interface {
	pulumi.Input

	ToAnalysisDataSetReferenceArrayOutput() AnalysisDataSetReferenceArrayOutput
	ToAnalysisDataSetReferenceArrayOutputWithContext(context.Context) AnalysisDataSetReferenceArrayOutput
}

type AnalysisDataSetReferenceArray []AnalysisDataSetReferenceInput

func (AnalysisDataSetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisDataSetReference)(nil)).Elem()
}

func (i AnalysisDataSetReferenceArray) ToAnalysisDataSetReferenceArrayOutput() AnalysisDataSetReferenceArrayOutput {
	return i.ToAnalysisDataSetReferenceArrayOutputWithContext(context.Background())
}

func (i AnalysisDataSetReferenceArray) ToAnalysisDataSetReferenceArrayOutputWithContext(ctx context.Context) AnalysisDataSetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisDataSetReferenceArrayOutput)
}

// <p>Dataset reference.</p>
type AnalysisDataSetReferenceOutput struct{ *pulumi.OutputState }

func (AnalysisDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisDataSetReference)(nil)).Elem()
}

func (o AnalysisDataSetReferenceOutput) ToAnalysisDataSetReferenceOutput() AnalysisDataSetReferenceOutput {
	return o
}

func (o AnalysisDataSetReferenceOutput) ToAnalysisDataSetReferenceOutputWithContext(ctx context.Context) AnalysisDataSetReferenceOutput {
	return o
}

// <p>Dataset Amazon Resource Name (ARN).</p>
func (o AnalysisDataSetReferenceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisDataSetReference) string { return v.DataSetArn }).(pulumi.StringOutput)
}

// <p>Dataset placeholder.</p>
func (o AnalysisDataSetReferenceOutput) DataSetPlaceholder() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisDataSetReference) string { return v.DataSetPlaceholder }).(pulumi.StringOutput)
}

type AnalysisDataSetReferenceArrayOutput struct{ *pulumi.OutputState }

func (AnalysisDataSetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisDataSetReference)(nil)).Elem()
}

func (o AnalysisDataSetReferenceArrayOutput) ToAnalysisDataSetReferenceArrayOutput() AnalysisDataSetReferenceArrayOutput {
	return o
}

func (o AnalysisDataSetReferenceArrayOutput) ToAnalysisDataSetReferenceArrayOutputWithContext(ctx context.Context) AnalysisDataSetReferenceArrayOutput {
	return o
}

func (o AnalysisDataSetReferenceArrayOutput) Index(i pulumi.IntInput) AnalysisDataSetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisDataSetReference {
		return vs[0].([]AnalysisDataSetReference)[vs[1].(int)]
	}).(AnalysisDataSetReferenceOutput)
}

// <p>A date-time parameter.</p>
type AnalysisDateTimeParameter struct {
	// <p>A display name for the date-time parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values for the date-time parameter.</p>
	Values []string `pulumi:"values"`
}

// AnalysisDateTimeParameterInput is an input type that accepts AnalysisDateTimeParameterArgs and AnalysisDateTimeParameterOutput values.
// You can construct a concrete instance of `AnalysisDateTimeParameterInput` via:
//
//          AnalysisDateTimeParameterArgs{...}
type AnalysisDateTimeParameterInput interface {
	pulumi.Input

	ToAnalysisDateTimeParameterOutput() AnalysisDateTimeParameterOutput
	ToAnalysisDateTimeParameterOutputWithContext(context.Context) AnalysisDateTimeParameterOutput
}

// <p>A date-time parameter.</p>
type AnalysisDateTimeParameterArgs struct {
	// <p>A display name for the date-time parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values for the date-time parameter.</p>
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnalysisDateTimeParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisDateTimeParameter)(nil)).Elem()
}

func (i AnalysisDateTimeParameterArgs) ToAnalysisDateTimeParameterOutput() AnalysisDateTimeParameterOutput {
	return i.ToAnalysisDateTimeParameterOutputWithContext(context.Background())
}

func (i AnalysisDateTimeParameterArgs) ToAnalysisDateTimeParameterOutputWithContext(ctx context.Context) AnalysisDateTimeParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisDateTimeParameterOutput)
}

// AnalysisDateTimeParameterArrayInput is an input type that accepts AnalysisDateTimeParameterArray and AnalysisDateTimeParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisDateTimeParameterArrayInput` via:
//
//          AnalysisDateTimeParameterArray{ AnalysisDateTimeParameterArgs{...} }
type AnalysisDateTimeParameterArrayInput interface {
	pulumi.Input

	ToAnalysisDateTimeParameterArrayOutput() AnalysisDateTimeParameterArrayOutput
	ToAnalysisDateTimeParameterArrayOutputWithContext(context.Context) AnalysisDateTimeParameterArrayOutput
}

type AnalysisDateTimeParameterArray []AnalysisDateTimeParameterInput

func (AnalysisDateTimeParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisDateTimeParameter)(nil)).Elem()
}

func (i AnalysisDateTimeParameterArray) ToAnalysisDateTimeParameterArrayOutput() AnalysisDateTimeParameterArrayOutput {
	return i.ToAnalysisDateTimeParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisDateTimeParameterArray) ToAnalysisDateTimeParameterArrayOutputWithContext(ctx context.Context) AnalysisDateTimeParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisDateTimeParameterArrayOutput)
}

// <p>A date-time parameter.</p>
type AnalysisDateTimeParameterOutput struct{ *pulumi.OutputState }

func (AnalysisDateTimeParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisDateTimeParameter)(nil)).Elem()
}

func (o AnalysisDateTimeParameterOutput) ToAnalysisDateTimeParameterOutput() AnalysisDateTimeParameterOutput {
	return o
}

func (o AnalysisDateTimeParameterOutput) ToAnalysisDateTimeParameterOutputWithContext(ctx context.Context) AnalysisDateTimeParameterOutput {
	return o
}

// <p>A display name for the date-time parameter.</p>
func (o AnalysisDateTimeParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisDateTimeParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values for the date-time parameter.</p>
func (o AnalysisDateTimeParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisDateTimeParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnalysisDateTimeParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisDateTimeParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisDateTimeParameter)(nil)).Elem()
}

func (o AnalysisDateTimeParameterArrayOutput) ToAnalysisDateTimeParameterArrayOutput() AnalysisDateTimeParameterArrayOutput {
	return o
}

func (o AnalysisDateTimeParameterArrayOutput) ToAnalysisDateTimeParameterArrayOutputWithContext(ctx context.Context) AnalysisDateTimeParameterArrayOutput {
	return o
}

func (o AnalysisDateTimeParameterArrayOutput) Index(i pulumi.IntInput) AnalysisDateTimeParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisDateTimeParameter {
		return vs[0].([]AnalysisDateTimeParameter)[vs[1].(int)]
	}).(AnalysisDateTimeParameterOutput)
}

// <p>A decimal parameter.</p>
type AnalysisDecimalParameter struct {
	// <p>A display name for the decimal parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values for the decimal parameter.</p>
	Values []float64 `pulumi:"values"`
}

// AnalysisDecimalParameterInput is an input type that accepts AnalysisDecimalParameterArgs and AnalysisDecimalParameterOutput values.
// You can construct a concrete instance of `AnalysisDecimalParameterInput` via:
//
//          AnalysisDecimalParameterArgs{...}
type AnalysisDecimalParameterInput interface {
	pulumi.Input

	ToAnalysisDecimalParameterOutput() AnalysisDecimalParameterOutput
	ToAnalysisDecimalParameterOutputWithContext(context.Context) AnalysisDecimalParameterOutput
}

// <p>A decimal parameter.</p>
type AnalysisDecimalParameterArgs struct {
	// <p>A display name for the decimal parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values for the decimal parameter.</p>
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (AnalysisDecimalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisDecimalParameter)(nil)).Elem()
}

func (i AnalysisDecimalParameterArgs) ToAnalysisDecimalParameterOutput() AnalysisDecimalParameterOutput {
	return i.ToAnalysisDecimalParameterOutputWithContext(context.Background())
}

func (i AnalysisDecimalParameterArgs) ToAnalysisDecimalParameterOutputWithContext(ctx context.Context) AnalysisDecimalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisDecimalParameterOutput)
}

// AnalysisDecimalParameterArrayInput is an input type that accepts AnalysisDecimalParameterArray and AnalysisDecimalParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisDecimalParameterArrayInput` via:
//
//          AnalysisDecimalParameterArray{ AnalysisDecimalParameterArgs{...} }
type AnalysisDecimalParameterArrayInput interface {
	pulumi.Input

	ToAnalysisDecimalParameterArrayOutput() AnalysisDecimalParameterArrayOutput
	ToAnalysisDecimalParameterArrayOutputWithContext(context.Context) AnalysisDecimalParameterArrayOutput
}

type AnalysisDecimalParameterArray []AnalysisDecimalParameterInput

func (AnalysisDecimalParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisDecimalParameter)(nil)).Elem()
}

func (i AnalysisDecimalParameterArray) ToAnalysisDecimalParameterArrayOutput() AnalysisDecimalParameterArrayOutput {
	return i.ToAnalysisDecimalParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisDecimalParameterArray) ToAnalysisDecimalParameterArrayOutputWithContext(ctx context.Context) AnalysisDecimalParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisDecimalParameterArrayOutput)
}

// <p>A decimal parameter.</p>
type AnalysisDecimalParameterOutput struct{ *pulumi.OutputState }

func (AnalysisDecimalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisDecimalParameter)(nil)).Elem()
}

func (o AnalysisDecimalParameterOutput) ToAnalysisDecimalParameterOutput() AnalysisDecimalParameterOutput {
	return o
}

func (o AnalysisDecimalParameterOutput) ToAnalysisDecimalParameterOutputWithContext(ctx context.Context) AnalysisDecimalParameterOutput {
	return o
}

// <p>A display name for the decimal parameter.</p>
func (o AnalysisDecimalParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisDecimalParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values for the decimal parameter.</p>
func (o AnalysisDecimalParameterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v AnalysisDecimalParameter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type AnalysisDecimalParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisDecimalParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisDecimalParameter)(nil)).Elem()
}

func (o AnalysisDecimalParameterArrayOutput) ToAnalysisDecimalParameterArrayOutput() AnalysisDecimalParameterArrayOutput {
	return o
}

func (o AnalysisDecimalParameterArrayOutput) ToAnalysisDecimalParameterArrayOutputWithContext(ctx context.Context) AnalysisDecimalParameterArrayOutput {
	return o
}

func (o AnalysisDecimalParameterArrayOutput) Index(i pulumi.IntInput) AnalysisDecimalParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisDecimalParameter {
		return vs[0].([]AnalysisDecimalParameter)[vs[1].(int)]
	}).(AnalysisDecimalParameterOutput)
}

// <p>A metadata error structure for an analysis.</p>
type AnalysisError struct {
	// <p>The message associated with the analysis error.</p>
	Message *string            `pulumi:"message"`
	Type    *AnalysisErrorType `pulumi:"type"`
}

// AnalysisErrorInput is an input type that accepts AnalysisErrorArgs and AnalysisErrorOutput values.
// You can construct a concrete instance of `AnalysisErrorInput` via:
//
//          AnalysisErrorArgs{...}
type AnalysisErrorInput interface {
	pulumi.Input

	ToAnalysisErrorOutput() AnalysisErrorOutput
	ToAnalysisErrorOutputWithContext(context.Context) AnalysisErrorOutput
}

// <p>A metadata error structure for an analysis.</p>
type AnalysisErrorArgs struct {
	// <p>The message associated with the analysis error.</p>
	Message pulumi.StringPtrInput     `pulumi:"message"`
	Type    AnalysisErrorTypePtrInput `pulumi:"type"`
}

func (AnalysisErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisError)(nil)).Elem()
}

func (i AnalysisErrorArgs) ToAnalysisErrorOutput() AnalysisErrorOutput {
	return i.ToAnalysisErrorOutputWithContext(context.Background())
}

func (i AnalysisErrorArgs) ToAnalysisErrorOutputWithContext(ctx context.Context) AnalysisErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisErrorOutput)
}

// AnalysisErrorArrayInput is an input type that accepts AnalysisErrorArray and AnalysisErrorArrayOutput values.
// You can construct a concrete instance of `AnalysisErrorArrayInput` via:
//
//          AnalysisErrorArray{ AnalysisErrorArgs{...} }
type AnalysisErrorArrayInput interface {
	pulumi.Input

	ToAnalysisErrorArrayOutput() AnalysisErrorArrayOutput
	ToAnalysisErrorArrayOutputWithContext(context.Context) AnalysisErrorArrayOutput
}

type AnalysisErrorArray []AnalysisErrorInput

func (AnalysisErrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisError)(nil)).Elem()
}

func (i AnalysisErrorArray) ToAnalysisErrorArrayOutput() AnalysisErrorArrayOutput {
	return i.ToAnalysisErrorArrayOutputWithContext(context.Background())
}

func (i AnalysisErrorArray) ToAnalysisErrorArrayOutputWithContext(ctx context.Context) AnalysisErrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisErrorArrayOutput)
}

// <p>A metadata error structure for an analysis.</p>
type AnalysisErrorOutput struct{ *pulumi.OutputState }

func (AnalysisErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisError)(nil)).Elem()
}

func (o AnalysisErrorOutput) ToAnalysisErrorOutput() AnalysisErrorOutput {
	return o
}

func (o AnalysisErrorOutput) ToAnalysisErrorOutputWithContext(ctx context.Context) AnalysisErrorOutput {
	return o
}

// <p>The message associated with the analysis error.</p>
func (o AnalysisErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalysisError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o AnalysisErrorOutput) Type() AnalysisErrorTypePtrOutput {
	return o.ApplyT(func(v AnalysisError) *AnalysisErrorType { return v.Type }).(AnalysisErrorTypePtrOutput)
}

type AnalysisErrorArrayOutput struct{ *pulumi.OutputState }

func (AnalysisErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisError)(nil)).Elem()
}

func (o AnalysisErrorArrayOutput) ToAnalysisErrorArrayOutput() AnalysisErrorArrayOutput {
	return o
}

func (o AnalysisErrorArrayOutput) ToAnalysisErrorArrayOutputWithContext(ctx context.Context) AnalysisErrorArrayOutput {
	return o
}

func (o AnalysisErrorArrayOutput) Index(i pulumi.IntInput) AnalysisErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisError {
		return vs[0].([]AnalysisError)[vs[1].(int)]
	}).(AnalysisErrorOutput)
}

// <p>An integer parameter.</p>
type AnalysisIntegerParameter struct {
	// <p>The name of the integer parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values for the integer parameter.</p>
	Values []float64 `pulumi:"values"`
}

// AnalysisIntegerParameterInput is an input type that accepts AnalysisIntegerParameterArgs and AnalysisIntegerParameterOutput values.
// You can construct a concrete instance of `AnalysisIntegerParameterInput` via:
//
//          AnalysisIntegerParameterArgs{...}
type AnalysisIntegerParameterInput interface {
	pulumi.Input

	ToAnalysisIntegerParameterOutput() AnalysisIntegerParameterOutput
	ToAnalysisIntegerParameterOutputWithContext(context.Context) AnalysisIntegerParameterOutput
}

// <p>An integer parameter.</p>
type AnalysisIntegerParameterArgs struct {
	// <p>The name of the integer parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values for the integer parameter.</p>
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (AnalysisIntegerParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisIntegerParameter)(nil)).Elem()
}

func (i AnalysisIntegerParameterArgs) ToAnalysisIntegerParameterOutput() AnalysisIntegerParameterOutput {
	return i.ToAnalysisIntegerParameterOutputWithContext(context.Background())
}

func (i AnalysisIntegerParameterArgs) ToAnalysisIntegerParameterOutputWithContext(ctx context.Context) AnalysisIntegerParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisIntegerParameterOutput)
}

// AnalysisIntegerParameterArrayInput is an input type that accepts AnalysisIntegerParameterArray and AnalysisIntegerParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisIntegerParameterArrayInput` via:
//
//          AnalysisIntegerParameterArray{ AnalysisIntegerParameterArgs{...} }
type AnalysisIntegerParameterArrayInput interface {
	pulumi.Input

	ToAnalysisIntegerParameterArrayOutput() AnalysisIntegerParameterArrayOutput
	ToAnalysisIntegerParameterArrayOutputWithContext(context.Context) AnalysisIntegerParameterArrayOutput
}

type AnalysisIntegerParameterArray []AnalysisIntegerParameterInput

func (AnalysisIntegerParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisIntegerParameter)(nil)).Elem()
}

func (i AnalysisIntegerParameterArray) ToAnalysisIntegerParameterArrayOutput() AnalysisIntegerParameterArrayOutput {
	return i.ToAnalysisIntegerParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisIntegerParameterArray) ToAnalysisIntegerParameterArrayOutputWithContext(ctx context.Context) AnalysisIntegerParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisIntegerParameterArrayOutput)
}

// <p>An integer parameter.</p>
type AnalysisIntegerParameterOutput struct{ *pulumi.OutputState }

func (AnalysisIntegerParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisIntegerParameter)(nil)).Elem()
}

func (o AnalysisIntegerParameterOutput) ToAnalysisIntegerParameterOutput() AnalysisIntegerParameterOutput {
	return o
}

func (o AnalysisIntegerParameterOutput) ToAnalysisIntegerParameterOutputWithContext(ctx context.Context) AnalysisIntegerParameterOutput {
	return o
}

// <p>The name of the integer parameter.</p>
func (o AnalysisIntegerParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisIntegerParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values for the integer parameter.</p>
func (o AnalysisIntegerParameterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v AnalysisIntegerParameter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type AnalysisIntegerParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisIntegerParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisIntegerParameter)(nil)).Elem()
}

func (o AnalysisIntegerParameterArrayOutput) ToAnalysisIntegerParameterArrayOutput() AnalysisIntegerParameterArrayOutput {
	return o
}

func (o AnalysisIntegerParameterArrayOutput) ToAnalysisIntegerParameterArrayOutputWithContext(ctx context.Context) AnalysisIntegerParameterArrayOutput {
	return o
}

func (o AnalysisIntegerParameterArrayOutput) Index(i pulumi.IntInput) AnalysisIntegerParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisIntegerParameter {
		return vs[0].([]AnalysisIntegerParameter)[vs[1].(int)]
	}).(AnalysisIntegerParameterOutput)
}

// <p>A list of QuickSight parameters and the list's override values.</p>
type AnalysisParameters struct {
	// <p>Date-time parameters.</p>
	DateTimeParameters []AnalysisDateTimeParameter `pulumi:"dateTimeParameters"`
	// <p>Decimal parameters.</p>
	DecimalParameters []AnalysisDecimalParameter `pulumi:"decimalParameters"`
	// <p>Integer parameters.</p>
	IntegerParameters []AnalysisIntegerParameter `pulumi:"integerParameters"`
	// <p>String parameters.</p>
	StringParameters []AnalysisStringParameter `pulumi:"stringParameters"`
}

// AnalysisParametersInput is an input type that accepts AnalysisParametersArgs and AnalysisParametersOutput values.
// You can construct a concrete instance of `AnalysisParametersInput` via:
//
//          AnalysisParametersArgs{...}
type AnalysisParametersInput interface {
	pulumi.Input

	ToAnalysisParametersOutput() AnalysisParametersOutput
	ToAnalysisParametersOutputWithContext(context.Context) AnalysisParametersOutput
}

// <p>A list of QuickSight parameters and the list's override values.</p>
type AnalysisParametersArgs struct {
	// <p>Date-time parameters.</p>
	DateTimeParameters AnalysisDateTimeParameterArrayInput `pulumi:"dateTimeParameters"`
	// <p>Decimal parameters.</p>
	DecimalParameters AnalysisDecimalParameterArrayInput `pulumi:"decimalParameters"`
	// <p>Integer parameters.</p>
	IntegerParameters AnalysisIntegerParameterArrayInput `pulumi:"integerParameters"`
	// <p>String parameters.</p>
	StringParameters AnalysisStringParameterArrayInput `pulumi:"stringParameters"`
}

func (AnalysisParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParameters)(nil)).Elem()
}

func (i AnalysisParametersArgs) ToAnalysisParametersOutput() AnalysisParametersOutput {
	return i.ToAnalysisParametersOutputWithContext(context.Background())
}

func (i AnalysisParametersArgs) ToAnalysisParametersOutputWithContext(ctx context.Context) AnalysisParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersOutput)
}

func (i AnalysisParametersArgs) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return i.ToAnalysisParametersPtrOutputWithContext(context.Background())
}

func (i AnalysisParametersArgs) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersOutput).ToAnalysisParametersPtrOutputWithContext(ctx)
}

// AnalysisParametersPtrInput is an input type that accepts AnalysisParametersArgs, AnalysisParametersPtr and AnalysisParametersPtrOutput values.
// You can construct a concrete instance of `AnalysisParametersPtrInput` via:
//
//          AnalysisParametersArgs{...}
//
//  or:
//
//          nil
type AnalysisParametersPtrInput interface {
	pulumi.Input

	ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput
	ToAnalysisParametersPtrOutputWithContext(context.Context) AnalysisParametersPtrOutput
}

type analysisParametersPtrType AnalysisParametersArgs

func AnalysisParametersPtr(v *AnalysisParametersArgs) AnalysisParametersPtrInput {
	return (*analysisParametersPtrType)(v)
}

func (*analysisParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisParameters)(nil)).Elem()
}

func (i *analysisParametersPtrType) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return i.ToAnalysisParametersPtrOutputWithContext(context.Background())
}

func (i *analysisParametersPtrType) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisParametersPtrOutput)
}

// <p>A list of QuickSight parameters and the list's override values.</p>
type AnalysisParametersOutput struct{ *pulumi.OutputState }

func (AnalysisParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisParameters)(nil)).Elem()
}

func (o AnalysisParametersOutput) ToAnalysisParametersOutput() AnalysisParametersOutput {
	return o
}

func (o AnalysisParametersOutput) ToAnalysisParametersOutputWithContext(ctx context.Context) AnalysisParametersOutput {
	return o
}

func (o AnalysisParametersOutput) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return o.ToAnalysisParametersPtrOutputWithContext(context.Background())
}

func (o AnalysisParametersOutput) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisParameters) *AnalysisParameters {
		return &v
	}).(AnalysisParametersPtrOutput)
}

// <p>Date-time parameters.</p>
func (o AnalysisParametersOutput) DateTimeParameters() AnalysisDateTimeParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisDateTimeParameter { return v.DateTimeParameters }).(AnalysisDateTimeParameterArrayOutput)
}

// <p>Decimal parameters.</p>
func (o AnalysisParametersOutput) DecimalParameters() AnalysisDecimalParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisDecimalParameter { return v.DecimalParameters }).(AnalysisDecimalParameterArrayOutput)
}

// <p>Integer parameters.</p>
func (o AnalysisParametersOutput) IntegerParameters() AnalysisIntegerParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisIntegerParameter { return v.IntegerParameters }).(AnalysisIntegerParameterArrayOutput)
}

// <p>String parameters.</p>
func (o AnalysisParametersOutput) StringParameters() AnalysisStringParameterArrayOutput {
	return o.ApplyT(func(v AnalysisParameters) []AnalysisStringParameter { return v.StringParameters }).(AnalysisStringParameterArrayOutput)
}

type AnalysisParametersPtrOutput struct{ *pulumi.OutputState }

func (AnalysisParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisParameters)(nil)).Elem()
}

func (o AnalysisParametersPtrOutput) ToAnalysisParametersPtrOutput() AnalysisParametersPtrOutput {
	return o
}

func (o AnalysisParametersPtrOutput) ToAnalysisParametersPtrOutputWithContext(ctx context.Context) AnalysisParametersPtrOutput {
	return o
}

func (o AnalysisParametersPtrOutput) Elem() AnalysisParametersOutput {
	return o.ApplyT(func(v *AnalysisParameters) AnalysisParameters {
		if v != nil {
			return *v
		}
		var ret AnalysisParameters
		return ret
	}).(AnalysisParametersOutput)
}

// <p>Date-time parameters.</p>
func (o AnalysisParametersPtrOutput) DateTimeParameters() AnalysisDateTimeParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisDateTimeParameter {
		if v == nil {
			return nil
		}
		return v.DateTimeParameters
	}).(AnalysisDateTimeParameterArrayOutput)
}

// <p>Decimal parameters.</p>
func (o AnalysisParametersPtrOutput) DecimalParameters() AnalysisDecimalParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisDecimalParameter {
		if v == nil {
			return nil
		}
		return v.DecimalParameters
	}).(AnalysisDecimalParameterArrayOutput)
}

// <p>Integer parameters.</p>
func (o AnalysisParametersPtrOutput) IntegerParameters() AnalysisIntegerParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisIntegerParameter {
		if v == nil {
			return nil
		}
		return v.IntegerParameters
	}).(AnalysisIntegerParameterArrayOutput)
}

// <p>String parameters.</p>
func (o AnalysisParametersPtrOutput) StringParameters() AnalysisStringParameterArrayOutput {
	return o.ApplyT(func(v *AnalysisParameters) []AnalysisStringParameter {
		if v == nil {
			return nil
		}
		return v.StringParameters
	}).(AnalysisStringParameterArrayOutput)
}

// <p>Permission for the resource.</p>
type AnalysisResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// AnalysisResourcePermissionInput is an input type that accepts AnalysisResourcePermissionArgs and AnalysisResourcePermissionOutput values.
// You can construct a concrete instance of `AnalysisResourcePermissionInput` via:
//
//          AnalysisResourcePermissionArgs{...}
type AnalysisResourcePermissionInput interface {
	pulumi.Input

	ToAnalysisResourcePermissionOutput() AnalysisResourcePermissionOutput
	ToAnalysisResourcePermissionOutputWithContext(context.Context) AnalysisResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type AnalysisResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (AnalysisResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisResourcePermission)(nil)).Elem()
}

func (i AnalysisResourcePermissionArgs) ToAnalysisResourcePermissionOutput() AnalysisResourcePermissionOutput {
	return i.ToAnalysisResourcePermissionOutputWithContext(context.Background())
}

func (i AnalysisResourcePermissionArgs) ToAnalysisResourcePermissionOutputWithContext(ctx context.Context) AnalysisResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisResourcePermissionOutput)
}

// AnalysisResourcePermissionArrayInput is an input type that accepts AnalysisResourcePermissionArray and AnalysisResourcePermissionArrayOutput values.
// You can construct a concrete instance of `AnalysisResourcePermissionArrayInput` via:
//
//          AnalysisResourcePermissionArray{ AnalysisResourcePermissionArgs{...} }
type AnalysisResourcePermissionArrayInput interface {
	pulumi.Input

	ToAnalysisResourcePermissionArrayOutput() AnalysisResourcePermissionArrayOutput
	ToAnalysisResourcePermissionArrayOutputWithContext(context.Context) AnalysisResourcePermissionArrayOutput
}

type AnalysisResourcePermissionArray []AnalysisResourcePermissionInput

func (AnalysisResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisResourcePermission)(nil)).Elem()
}

func (i AnalysisResourcePermissionArray) ToAnalysisResourcePermissionArrayOutput() AnalysisResourcePermissionArrayOutput {
	return i.ToAnalysisResourcePermissionArrayOutputWithContext(context.Background())
}

func (i AnalysisResourcePermissionArray) ToAnalysisResourcePermissionArrayOutputWithContext(ctx context.Context) AnalysisResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type AnalysisResourcePermissionOutput struct{ *pulumi.OutputState }

func (AnalysisResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisResourcePermission)(nil)).Elem()
}

func (o AnalysisResourcePermissionOutput) ToAnalysisResourcePermissionOutput() AnalysisResourcePermissionOutput {
	return o
}

func (o AnalysisResourcePermissionOutput) ToAnalysisResourcePermissionOutputWithContext(ctx context.Context) AnalysisResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o AnalysisResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//             following:</p>
//         <ul>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
//                     ARN. Use this option only to share resources (templates) across AWS accounts.
//                     (This is less common.) </p>
//             </li>
//          </ul>
func (o AnalysisResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type AnalysisResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (AnalysisResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisResourcePermission)(nil)).Elem()
}

func (o AnalysisResourcePermissionArrayOutput) ToAnalysisResourcePermissionArrayOutput() AnalysisResourcePermissionArrayOutput {
	return o
}

func (o AnalysisResourcePermissionArrayOutput) ToAnalysisResourcePermissionArrayOutputWithContext(ctx context.Context) AnalysisResourcePermissionArrayOutput {
	return o
}

func (o AnalysisResourcePermissionArrayOutput) Index(i pulumi.IntInput) AnalysisResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisResourcePermission {
		return vs[0].([]AnalysisResourcePermission)[vs[1].(int)]
	}).(AnalysisResourcePermissionOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type AnalysisSheet struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
	//             console.</p>
	Name *string `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId *string `pulumi:"sheetId"`
}

// AnalysisSheetInput is an input type that accepts AnalysisSheetArgs and AnalysisSheetOutput values.
// You can construct a concrete instance of `AnalysisSheetInput` via:
//
//          AnalysisSheetArgs{...}
type AnalysisSheetInput interface {
	pulumi.Input

	ToAnalysisSheetOutput() AnalysisSheetOutput
	ToAnalysisSheetOutputWithContext(context.Context) AnalysisSheetOutput
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type AnalysisSheetArgs struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
	//             console.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId pulumi.StringPtrInput `pulumi:"sheetId"`
}

func (AnalysisSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSheet)(nil)).Elem()
}

func (i AnalysisSheetArgs) ToAnalysisSheetOutput() AnalysisSheetOutput {
	return i.ToAnalysisSheetOutputWithContext(context.Background())
}

func (i AnalysisSheetArgs) ToAnalysisSheetOutputWithContext(ctx context.Context) AnalysisSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSheetOutput)
}

// AnalysisSheetArrayInput is an input type that accepts AnalysisSheetArray and AnalysisSheetArrayOutput values.
// You can construct a concrete instance of `AnalysisSheetArrayInput` via:
//
//          AnalysisSheetArray{ AnalysisSheetArgs{...} }
type AnalysisSheetArrayInput interface {
	pulumi.Input

	ToAnalysisSheetArrayOutput() AnalysisSheetArrayOutput
	ToAnalysisSheetArrayOutputWithContext(context.Context) AnalysisSheetArrayOutput
}

type AnalysisSheetArray []AnalysisSheetInput

func (AnalysisSheetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisSheet)(nil)).Elem()
}

func (i AnalysisSheetArray) ToAnalysisSheetArrayOutput() AnalysisSheetArrayOutput {
	return i.ToAnalysisSheetArrayOutputWithContext(context.Background())
}

func (i AnalysisSheetArray) ToAnalysisSheetArrayOutputWithContext(ctx context.Context) AnalysisSheetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSheetArrayOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type AnalysisSheetOutput struct{ *pulumi.OutputState }

func (AnalysisSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSheet)(nil)).Elem()
}

func (o AnalysisSheetOutput) ToAnalysisSheetOutput() AnalysisSheetOutput {
	return o
}

func (o AnalysisSheetOutput) ToAnalysisSheetOutputWithContext(ctx context.Context) AnalysisSheetOutput {
	return o
}

// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
//             console.</p>
func (o AnalysisSheetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalysisSheet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The unique identifier associated with a sheet.</p>
func (o AnalysisSheetOutput) SheetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalysisSheet) *string { return v.SheetId }).(pulumi.StringPtrOutput)
}

type AnalysisSheetArrayOutput struct{ *pulumi.OutputState }

func (AnalysisSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisSheet)(nil)).Elem()
}

func (o AnalysisSheetArrayOutput) ToAnalysisSheetArrayOutput() AnalysisSheetArrayOutput {
	return o
}

func (o AnalysisSheetArrayOutput) ToAnalysisSheetArrayOutputWithContext(ctx context.Context) AnalysisSheetArrayOutput {
	return o
}

func (o AnalysisSheetArrayOutput) Index(i pulumi.IntInput) AnalysisSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisSheet {
		return vs[0].([]AnalysisSheet)[vs[1].(int)]
	}).(AnalysisSheetOutput)
}

// <p>The source entity of an analysis.</p>
type AnalysisSourceEntity struct {
	SourceTemplate *AnalysisSourceTemplate `pulumi:"sourceTemplate"`
}

// AnalysisSourceEntityInput is an input type that accepts AnalysisSourceEntityArgs and AnalysisSourceEntityOutput values.
// You can construct a concrete instance of `AnalysisSourceEntityInput` via:
//
//          AnalysisSourceEntityArgs{...}
type AnalysisSourceEntityInput interface {
	pulumi.Input

	ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput
	ToAnalysisSourceEntityOutputWithContext(context.Context) AnalysisSourceEntityOutput
}

// <p>The source entity of an analysis.</p>
type AnalysisSourceEntityArgs struct {
	SourceTemplate AnalysisSourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (AnalysisSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntity)(nil)).Elem()
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput {
	return i.ToAnalysisSourceEntityOutputWithContext(context.Background())
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityOutputWithContext(ctx context.Context) AnalysisSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntityOutput)
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return i.ToAnalysisSourceEntityPtrOutputWithContext(context.Background())
}

func (i AnalysisSourceEntityArgs) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntityOutput).ToAnalysisSourceEntityPtrOutputWithContext(ctx)
}

// AnalysisSourceEntityPtrInput is an input type that accepts AnalysisSourceEntityArgs, AnalysisSourceEntityPtr and AnalysisSourceEntityPtrOutput values.
// You can construct a concrete instance of `AnalysisSourceEntityPtrInput` via:
//
//          AnalysisSourceEntityArgs{...}
//
//  or:
//
//          nil
type AnalysisSourceEntityPtrInput interface {
	pulumi.Input

	ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput
	ToAnalysisSourceEntityPtrOutputWithContext(context.Context) AnalysisSourceEntityPtrOutput
}

type analysisSourceEntityPtrType AnalysisSourceEntityArgs

func AnalysisSourceEntityPtr(v *AnalysisSourceEntityArgs) AnalysisSourceEntityPtrInput {
	return (*analysisSourceEntityPtrType)(v)
}

func (*analysisSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceEntity)(nil)).Elem()
}

func (i *analysisSourceEntityPtrType) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return i.ToAnalysisSourceEntityPtrOutputWithContext(context.Background())
}

func (i *analysisSourceEntityPtrType) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceEntityPtrOutput)
}

// <p>The source entity of an analysis.</p>
type AnalysisSourceEntityOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceEntity)(nil)).Elem()
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityOutput() AnalysisSourceEntityOutput {
	return o
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityOutputWithContext(ctx context.Context) AnalysisSourceEntityOutput {
	return o
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return o.ToAnalysisSourceEntityPtrOutputWithContext(context.Background())
}

func (o AnalysisSourceEntityOutput) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisSourceEntity) *AnalysisSourceEntity {
		return &v
	}).(AnalysisSourceEntityPtrOutput)
}

func (o AnalysisSourceEntityOutput) SourceTemplate() AnalysisSourceTemplatePtrOutput {
	return o.ApplyT(func(v AnalysisSourceEntity) *AnalysisSourceTemplate { return v.SourceTemplate }).(AnalysisSourceTemplatePtrOutput)
}

type AnalysisSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (AnalysisSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceEntity)(nil)).Elem()
}

func (o AnalysisSourceEntityPtrOutput) ToAnalysisSourceEntityPtrOutput() AnalysisSourceEntityPtrOutput {
	return o
}

func (o AnalysisSourceEntityPtrOutput) ToAnalysisSourceEntityPtrOutputWithContext(ctx context.Context) AnalysisSourceEntityPtrOutput {
	return o
}

func (o AnalysisSourceEntityPtrOutput) Elem() AnalysisSourceEntityOutput {
	return o.ApplyT(func(v *AnalysisSourceEntity) AnalysisSourceEntity {
		if v != nil {
			return *v
		}
		var ret AnalysisSourceEntity
		return ret
	}).(AnalysisSourceEntityOutput)
}

func (o AnalysisSourceEntityPtrOutput) SourceTemplate() AnalysisSourceTemplatePtrOutput {
	return o.ApplyT(func(v *AnalysisSourceEntity) *AnalysisSourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(AnalysisSourceTemplatePtrOutput)
}

// <p>The source template of an analysis.</p>
type AnalysisSourceTemplate struct {
	// <p>The Amazon Resource Name (ARN) of the source template of an analysis.</p>
	Arn string `pulumi:"arn"`
	// <p>The dataset references of the source template of an analysis.</p>
	DataSetReferences []AnalysisDataSetReference `pulumi:"dataSetReferences"`
}

// AnalysisSourceTemplateInput is an input type that accepts AnalysisSourceTemplateArgs and AnalysisSourceTemplateOutput values.
// You can construct a concrete instance of `AnalysisSourceTemplateInput` via:
//
//          AnalysisSourceTemplateArgs{...}
type AnalysisSourceTemplateInput interface {
	pulumi.Input

	ToAnalysisSourceTemplateOutput() AnalysisSourceTemplateOutput
	ToAnalysisSourceTemplateOutputWithContext(context.Context) AnalysisSourceTemplateOutput
}

// <p>The source template of an analysis.</p>
type AnalysisSourceTemplateArgs struct {
	// <p>The Amazon Resource Name (ARN) of the source template of an analysis.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
	// <p>The dataset references of the source template of an analysis.</p>
	DataSetReferences AnalysisDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (AnalysisSourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceTemplate)(nil)).Elem()
}

func (i AnalysisSourceTemplateArgs) ToAnalysisSourceTemplateOutput() AnalysisSourceTemplateOutput {
	return i.ToAnalysisSourceTemplateOutputWithContext(context.Background())
}

func (i AnalysisSourceTemplateArgs) ToAnalysisSourceTemplateOutputWithContext(ctx context.Context) AnalysisSourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceTemplateOutput)
}

func (i AnalysisSourceTemplateArgs) ToAnalysisSourceTemplatePtrOutput() AnalysisSourceTemplatePtrOutput {
	return i.ToAnalysisSourceTemplatePtrOutputWithContext(context.Background())
}

func (i AnalysisSourceTemplateArgs) ToAnalysisSourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceTemplateOutput).ToAnalysisSourceTemplatePtrOutputWithContext(ctx)
}

// AnalysisSourceTemplatePtrInput is an input type that accepts AnalysisSourceTemplateArgs, AnalysisSourceTemplatePtr and AnalysisSourceTemplatePtrOutput values.
// You can construct a concrete instance of `AnalysisSourceTemplatePtrInput` via:
//
//          AnalysisSourceTemplateArgs{...}
//
//  or:
//
//          nil
type AnalysisSourceTemplatePtrInput interface {
	pulumi.Input

	ToAnalysisSourceTemplatePtrOutput() AnalysisSourceTemplatePtrOutput
	ToAnalysisSourceTemplatePtrOutputWithContext(context.Context) AnalysisSourceTemplatePtrOutput
}

type analysisSourceTemplatePtrType AnalysisSourceTemplateArgs

func AnalysisSourceTemplatePtr(v *AnalysisSourceTemplateArgs) AnalysisSourceTemplatePtrInput {
	return (*analysisSourceTemplatePtrType)(v)
}

func (*analysisSourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceTemplate)(nil)).Elem()
}

func (i *analysisSourceTemplatePtrType) ToAnalysisSourceTemplatePtrOutput() AnalysisSourceTemplatePtrOutput {
	return i.ToAnalysisSourceTemplatePtrOutputWithContext(context.Background())
}

func (i *analysisSourceTemplatePtrType) ToAnalysisSourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisSourceTemplatePtrOutput)
}

// <p>The source template of an analysis.</p>
type AnalysisSourceTemplateOutput struct{ *pulumi.OutputState }

func (AnalysisSourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisSourceTemplate)(nil)).Elem()
}

func (o AnalysisSourceTemplateOutput) ToAnalysisSourceTemplateOutput() AnalysisSourceTemplateOutput {
	return o
}

func (o AnalysisSourceTemplateOutput) ToAnalysisSourceTemplateOutputWithContext(ctx context.Context) AnalysisSourceTemplateOutput {
	return o
}

func (o AnalysisSourceTemplateOutput) ToAnalysisSourceTemplatePtrOutput() AnalysisSourceTemplatePtrOutput {
	return o.ToAnalysisSourceTemplatePtrOutputWithContext(context.Background())
}

func (o AnalysisSourceTemplateOutput) ToAnalysisSourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnalysisSourceTemplate) *AnalysisSourceTemplate {
		return &v
	}).(AnalysisSourceTemplatePtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the source template of an analysis.</p>
func (o AnalysisSourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisSourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

// <p>The dataset references of the source template of an analysis.</p>
func (o AnalysisSourceTemplateOutput) DataSetReferences() AnalysisDataSetReferenceArrayOutput {
	return o.ApplyT(func(v AnalysisSourceTemplate) []AnalysisDataSetReference { return v.DataSetReferences }).(AnalysisDataSetReferenceArrayOutput)
}

type AnalysisSourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (AnalysisSourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisSourceTemplate)(nil)).Elem()
}

func (o AnalysisSourceTemplatePtrOutput) ToAnalysisSourceTemplatePtrOutput() AnalysisSourceTemplatePtrOutput {
	return o
}

func (o AnalysisSourceTemplatePtrOutput) ToAnalysisSourceTemplatePtrOutputWithContext(ctx context.Context) AnalysisSourceTemplatePtrOutput {
	return o
}

func (o AnalysisSourceTemplatePtrOutput) Elem() AnalysisSourceTemplateOutput {
	return o.ApplyT(func(v *AnalysisSourceTemplate) AnalysisSourceTemplate {
		if v != nil {
			return *v
		}
		var ret AnalysisSourceTemplate
		return ret
	}).(AnalysisSourceTemplateOutput)
}

// <p>The Amazon Resource Name (ARN) of the source template of an analysis.</p>
func (o AnalysisSourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisSourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>The dataset references of the source template of an analysis.</p>
func (o AnalysisSourceTemplatePtrOutput) DataSetReferences() AnalysisDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *AnalysisSourceTemplate) []AnalysisDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(AnalysisDataSetReferenceArrayOutput)
}

// <p>A string parameter.</p>
type AnalysisStringParameter struct {
	// <p>A display name for a string parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values of a string parameter.</p>
	Values []string `pulumi:"values"`
}

// AnalysisStringParameterInput is an input type that accepts AnalysisStringParameterArgs and AnalysisStringParameterOutput values.
// You can construct a concrete instance of `AnalysisStringParameterInput` via:
//
//          AnalysisStringParameterArgs{...}
type AnalysisStringParameterInput interface {
	pulumi.Input

	ToAnalysisStringParameterOutput() AnalysisStringParameterOutput
	ToAnalysisStringParameterOutputWithContext(context.Context) AnalysisStringParameterOutput
}

// <p>A string parameter.</p>
type AnalysisStringParameterArgs struct {
	// <p>A display name for a string parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values of a string parameter.</p>
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AnalysisStringParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisStringParameter)(nil)).Elem()
}

func (i AnalysisStringParameterArgs) ToAnalysisStringParameterOutput() AnalysisStringParameterOutput {
	return i.ToAnalysisStringParameterOutputWithContext(context.Background())
}

func (i AnalysisStringParameterArgs) ToAnalysisStringParameterOutputWithContext(ctx context.Context) AnalysisStringParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisStringParameterOutput)
}

// AnalysisStringParameterArrayInput is an input type that accepts AnalysisStringParameterArray and AnalysisStringParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisStringParameterArrayInput` via:
//
//          AnalysisStringParameterArray{ AnalysisStringParameterArgs{...} }
type AnalysisStringParameterArrayInput interface {
	pulumi.Input

	ToAnalysisStringParameterArrayOutput() AnalysisStringParameterArrayOutput
	ToAnalysisStringParameterArrayOutputWithContext(context.Context) AnalysisStringParameterArrayOutput
}

type AnalysisStringParameterArray []AnalysisStringParameterInput

func (AnalysisStringParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisStringParameter)(nil)).Elem()
}

func (i AnalysisStringParameterArray) ToAnalysisStringParameterArrayOutput() AnalysisStringParameterArrayOutput {
	return i.ToAnalysisStringParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisStringParameterArray) ToAnalysisStringParameterArrayOutputWithContext(ctx context.Context) AnalysisStringParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisStringParameterArrayOutput)
}

// <p>A string parameter.</p>
type AnalysisStringParameterOutput struct{ *pulumi.OutputState }

func (AnalysisStringParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisStringParameter)(nil)).Elem()
}

func (o AnalysisStringParameterOutput) ToAnalysisStringParameterOutput() AnalysisStringParameterOutput {
	return o
}

func (o AnalysisStringParameterOutput) ToAnalysisStringParameterOutputWithContext(ctx context.Context) AnalysisStringParameterOutput {
	return o
}

// <p>A display name for a string parameter.</p>
func (o AnalysisStringParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisStringParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values of a string parameter.</p>
func (o AnalysisStringParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisStringParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AnalysisStringParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisStringParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisStringParameter)(nil)).Elem()
}

func (o AnalysisStringParameterArrayOutput) ToAnalysisStringParameterArrayOutput() AnalysisStringParameterArrayOutput {
	return o
}

func (o AnalysisStringParameterArrayOutput) ToAnalysisStringParameterArrayOutputWithContext(ctx context.Context) AnalysisStringParameterArrayOutput {
	return o
}

func (o AnalysisStringParameterArrayOutput) Index(i pulumi.IntInput) AnalysisStringParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisStringParameter {
		return vs[0].([]AnalysisStringParameter)[vs[1].(int)]
	}).(AnalysisStringParameterOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type AnalysisTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// AnalysisTagInput is an input type that accepts AnalysisTagArgs and AnalysisTagOutput values.
// You can construct a concrete instance of `AnalysisTagInput` via:
//
//          AnalysisTagArgs{...}
type AnalysisTagInput interface {
	pulumi.Input

	ToAnalysisTagOutput() AnalysisTagOutput
	ToAnalysisTagOutputWithContext(context.Context) AnalysisTagOutput
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type AnalysisTagArgs struct {
	// <p>Tag key.</p>
	Key pulumi.StringInput `pulumi:"key"`
	// <p>Tag value.</p>
	Value pulumi.StringInput `pulumi:"value"`
}

func (AnalysisTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTag)(nil)).Elem()
}

func (i AnalysisTagArgs) ToAnalysisTagOutput() AnalysisTagOutput {
	return i.ToAnalysisTagOutputWithContext(context.Background())
}

func (i AnalysisTagArgs) ToAnalysisTagOutputWithContext(ctx context.Context) AnalysisTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisTagOutput)
}

// AnalysisTagArrayInput is an input type that accepts AnalysisTagArray and AnalysisTagArrayOutput values.
// You can construct a concrete instance of `AnalysisTagArrayInput` via:
//
//          AnalysisTagArray{ AnalysisTagArgs{...} }
type AnalysisTagArrayInput interface {
	pulumi.Input

	ToAnalysisTagArrayOutput() AnalysisTagArrayOutput
	ToAnalysisTagArrayOutputWithContext(context.Context) AnalysisTagArrayOutput
}

type AnalysisTagArray []AnalysisTagInput

func (AnalysisTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisTag)(nil)).Elem()
}

func (i AnalysisTagArray) ToAnalysisTagArrayOutput() AnalysisTagArrayOutput {
	return i.ToAnalysisTagArrayOutputWithContext(context.Background())
}

func (i AnalysisTagArray) ToAnalysisTagArrayOutputWithContext(ctx context.Context) AnalysisTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisTagArrayOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type AnalysisTagOutput struct{ *pulumi.OutputState }

func (AnalysisTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTag)(nil)).Elem()
}

func (o AnalysisTagOutput) ToAnalysisTagOutput() AnalysisTagOutput {
	return o
}

func (o AnalysisTagOutput) ToAnalysisTagOutputWithContext(ctx context.Context) AnalysisTagOutput {
	return o
}

// <p>Tag key.</p>
func (o AnalysisTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisTag) string { return v.Key }).(pulumi.StringOutput)
}

// <p>Tag value.</p>
func (o AnalysisTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisTag) string { return v.Value }).(pulumi.StringOutput)
}

type AnalysisTagArrayOutput struct{ *pulumi.OutputState }

func (AnalysisTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisTag)(nil)).Elem()
}

func (o AnalysisTagArrayOutput) ToAnalysisTagArrayOutput() AnalysisTagArrayOutput {
	return o
}

func (o AnalysisTagArrayOutput) ToAnalysisTagArrayOutputWithContext(ctx context.Context) AnalysisTagArrayOutput {
	return o
}

func (o AnalysisTagArrayOutput) Index(i pulumi.IntInput) AnalysisTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisTag {
		return vs[0].([]AnalysisTag)[vs[1].(int)]
	}).(AnalysisTagOutput)
}

// <p>Ad hoc (one-time) filtering option.</p>
type DashboardAdHocFilteringOption struct {
	AvailabilityStatus *DashboardBehavior `pulumi:"availabilityStatus"`
}

// DashboardAdHocFilteringOptionInput is an input type that accepts DashboardAdHocFilteringOptionArgs and DashboardAdHocFilteringOptionOutput values.
// You can construct a concrete instance of `DashboardAdHocFilteringOptionInput` via:
//
//          DashboardAdHocFilteringOptionArgs{...}
type DashboardAdHocFilteringOptionInput interface {
	pulumi.Input

	ToDashboardAdHocFilteringOptionOutput() DashboardAdHocFilteringOptionOutput
	ToDashboardAdHocFilteringOptionOutputWithContext(context.Context) DashboardAdHocFilteringOptionOutput
}

// <p>Ad hoc (one-time) filtering option.</p>
type DashboardAdHocFilteringOptionArgs struct {
	AvailabilityStatus DashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardAdHocFilteringOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAdHocFilteringOption)(nil)).Elem()
}

func (i DashboardAdHocFilteringOptionArgs) ToDashboardAdHocFilteringOptionOutput() DashboardAdHocFilteringOptionOutput {
	return i.ToDashboardAdHocFilteringOptionOutputWithContext(context.Background())
}

func (i DashboardAdHocFilteringOptionArgs) ToDashboardAdHocFilteringOptionOutputWithContext(ctx context.Context) DashboardAdHocFilteringOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAdHocFilteringOptionOutput)
}

func (i DashboardAdHocFilteringOptionArgs) ToDashboardAdHocFilteringOptionPtrOutput() DashboardAdHocFilteringOptionPtrOutput {
	return i.ToDashboardAdHocFilteringOptionPtrOutputWithContext(context.Background())
}

func (i DashboardAdHocFilteringOptionArgs) ToDashboardAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardAdHocFilteringOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAdHocFilteringOptionOutput).ToDashboardAdHocFilteringOptionPtrOutputWithContext(ctx)
}

// DashboardAdHocFilteringOptionPtrInput is an input type that accepts DashboardAdHocFilteringOptionArgs, DashboardAdHocFilteringOptionPtr and DashboardAdHocFilteringOptionPtrOutput values.
// You can construct a concrete instance of `DashboardAdHocFilteringOptionPtrInput` via:
//
//          DashboardAdHocFilteringOptionArgs{...}
//
//  or:
//
//          nil
type DashboardAdHocFilteringOptionPtrInput interface {
	pulumi.Input

	ToDashboardAdHocFilteringOptionPtrOutput() DashboardAdHocFilteringOptionPtrOutput
	ToDashboardAdHocFilteringOptionPtrOutputWithContext(context.Context) DashboardAdHocFilteringOptionPtrOutput
}

type dashboardAdHocFilteringOptionPtrType DashboardAdHocFilteringOptionArgs

func DashboardAdHocFilteringOptionPtr(v *DashboardAdHocFilteringOptionArgs) DashboardAdHocFilteringOptionPtrInput {
	return (*dashboardAdHocFilteringOptionPtrType)(v)
}

func (*dashboardAdHocFilteringOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardAdHocFilteringOption)(nil)).Elem()
}

func (i *dashboardAdHocFilteringOptionPtrType) ToDashboardAdHocFilteringOptionPtrOutput() DashboardAdHocFilteringOptionPtrOutput {
	return i.ToDashboardAdHocFilteringOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardAdHocFilteringOptionPtrType) ToDashboardAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardAdHocFilteringOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardAdHocFilteringOptionPtrOutput)
}

// <p>Ad hoc (one-time) filtering option.</p>
type DashboardAdHocFilteringOptionOutput struct{ *pulumi.OutputState }

func (DashboardAdHocFilteringOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardAdHocFilteringOption)(nil)).Elem()
}

func (o DashboardAdHocFilteringOptionOutput) ToDashboardAdHocFilteringOptionOutput() DashboardAdHocFilteringOptionOutput {
	return o
}

func (o DashboardAdHocFilteringOptionOutput) ToDashboardAdHocFilteringOptionOutputWithContext(ctx context.Context) DashboardAdHocFilteringOptionOutput {
	return o
}

func (o DashboardAdHocFilteringOptionOutput) ToDashboardAdHocFilteringOptionPtrOutput() DashboardAdHocFilteringOptionPtrOutput {
	return o.ToDashboardAdHocFilteringOptionPtrOutputWithContext(context.Background())
}

func (o DashboardAdHocFilteringOptionOutput) ToDashboardAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardAdHocFilteringOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardAdHocFilteringOption) *DashboardAdHocFilteringOption {
		return &v
	}).(DashboardAdHocFilteringOptionPtrOutput)
}

func (o DashboardAdHocFilteringOptionOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v DashboardAdHocFilteringOption) *DashboardBehavior { return v.AvailabilityStatus }).(DashboardBehaviorPtrOutput)
}

type DashboardAdHocFilteringOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardAdHocFilteringOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardAdHocFilteringOption)(nil)).Elem()
}

func (o DashboardAdHocFilteringOptionPtrOutput) ToDashboardAdHocFilteringOptionPtrOutput() DashboardAdHocFilteringOptionPtrOutput {
	return o
}

func (o DashboardAdHocFilteringOptionPtrOutput) ToDashboardAdHocFilteringOptionPtrOutputWithContext(ctx context.Context) DashboardAdHocFilteringOptionPtrOutput {
	return o
}

func (o DashboardAdHocFilteringOptionPtrOutput) Elem() DashboardAdHocFilteringOptionOutput {
	return o.ApplyT(func(v *DashboardAdHocFilteringOption) DashboardAdHocFilteringOption {
		if v != nil {
			return *v
		}
		var ret DashboardAdHocFilteringOption
		return ret
	}).(DashboardAdHocFilteringOptionOutput)
}

func (o DashboardAdHocFilteringOptionPtrOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *DashboardAdHocFilteringOption) *DashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(DashboardBehaviorPtrOutput)
}

// <p>Dataset reference.</p>
type DashboardDataSetReference struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn string `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

// DashboardDataSetReferenceInput is an input type that accepts DashboardDataSetReferenceArgs and DashboardDataSetReferenceOutput values.
// You can construct a concrete instance of `DashboardDataSetReferenceInput` via:
//
//          DashboardDataSetReferenceArgs{...}
type DashboardDataSetReferenceInput interface {
	pulumi.Input

	ToDashboardDataSetReferenceOutput() DashboardDataSetReferenceOutput
	ToDashboardDataSetReferenceOutputWithContext(context.Context) DashboardDataSetReferenceOutput
}

// <p>Dataset reference.</p>
type DashboardDataSetReferenceArgs struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn pulumi.StringInput `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder pulumi.StringInput `pulumi:"dataSetPlaceholder"`
}

func (DashboardDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDataSetReference)(nil)).Elem()
}

func (i DashboardDataSetReferenceArgs) ToDashboardDataSetReferenceOutput() DashboardDataSetReferenceOutput {
	return i.ToDashboardDataSetReferenceOutputWithContext(context.Background())
}

func (i DashboardDataSetReferenceArgs) ToDashboardDataSetReferenceOutputWithContext(ctx context.Context) DashboardDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDataSetReferenceOutput)
}

// DashboardDataSetReferenceArrayInput is an input type that accepts DashboardDataSetReferenceArray and DashboardDataSetReferenceArrayOutput values.
// You can construct a concrete instance of `DashboardDataSetReferenceArrayInput` via:
//
//          DashboardDataSetReferenceArray{ DashboardDataSetReferenceArgs{...} }
type DashboardDataSetReferenceArrayInput interface {
	pulumi.Input

	ToDashboardDataSetReferenceArrayOutput() DashboardDataSetReferenceArrayOutput
	ToDashboardDataSetReferenceArrayOutputWithContext(context.Context) DashboardDataSetReferenceArrayOutput
}

type DashboardDataSetReferenceArray []DashboardDataSetReferenceInput

func (DashboardDataSetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardDataSetReference)(nil)).Elem()
}

func (i DashboardDataSetReferenceArray) ToDashboardDataSetReferenceArrayOutput() DashboardDataSetReferenceArrayOutput {
	return i.ToDashboardDataSetReferenceArrayOutputWithContext(context.Background())
}

func (i DashboardDataSetReferenceArray) ToDashboardDataSetReferenceArrayOutputWithContext(ctx context.Context) DashboardDataSetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDataSetReferenceArrayOutput)
}

// <p>Dataset reference.</p>
type DashboardDataSetReferenceOutput struct{ *pulumi.OutputState }

func (DashboardDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDataSetReference)(nil)).Elem()
}

func (o DashboardDataSetReferenceOutput) ToDashboardDataSetReferenceOutput() DashboardDataSetReferenceOutput {
	return o
}

func (o DashboardDataSetReferenceOutput) ToDashboardDataSetReferenceOutputWithContext(ctx context.Context) DashboardDataSetReferenceOutput {
	return o
}

// <p>Dataset Amazon Resource Name (ARN).</p>
func (o DashboardDataSetReferenceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardDataSetReference) string { return v.DataSetArn }).(pulumi.StringOutput)
}

// <p>Dataset placeholder.</p>
func (o DashboardDataSetReferenceOutput) DataSetPlaceholder() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardDataSetReference) string { return v.DataSetPlaceholder }).(pulumi.StringOutput)
}

type DashboardDataSetReferenceArrayOutput struct{ *pulumi.OutputState }

func (DashboardDataSetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardDataSetReference)(nil)).Elem()
}

func (o DashboardDataSetReferenceArrayOutput) ToDashboardDataSetReferenceArrayOutput() DashboardDataSetReferenceArrayOutput {
	return o
}

func (o DashboardDataSetReferenceArrayOutput) ToDashboardDataSetReferenceArrayOutputWithContext(ctx context.Context) DashboardDataSetReferenceArrayOutput {
	return o
}

func (o DashboardDataSetReferenceArrayOutput) Index(i pulumi.IntInput) DashboardDataSetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardDataSetReference {
		return vs[0].([]DashboardDataSetReference)[vs[1].(int)]
	}).(DashboardDataSetReferenceOutput)
}

// <p>A date-time parameter.</p>
type DashboardDateTimeParameter struct {
	// <p>A display name for the date-time parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values for the date-time parameter.</p>
	Values []string `pulumi:"values"`
}

// DashboardDateTimeParameterInput is an input type that accepts DashboardDateTimeParameterArgs and DashboardDateTimeParameterOutput values.
// You can construct a concrete instance of `DashboardDateTimeParameterInput` via:
//
//          DashboardDateTimeParameterArgs{...}
type DashboardDateTimeParameterInput interface {
	pulumi.Input

	ToDashboardDateTimeParameterOutput() DashboardDateTimeParameterOutput
	ToDashboardDateTimeParameterOutputWithContext(context.Context) DashboardDateTimeParameterOutput
}

// <p>A date-time parameter.</p>
type DashboardDateTimeParameterArgs struct {
	// <p>A display name for the date-time parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values for the date-time parameter.</p>
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardDateTimeParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDateTimeParameter)(nil)).Elem()
}

func (i DashboardDateTimeParameterArgs) ToDashboardDateTimeParameterOutput() DashboardDateTimeParameterOutput {
	return i.ToDashboardDateTimeParameterOutputWithContext(context.Background())
}

func (i DashboardDateTimeParameterArgs) ToDashboardDateTimeParameterOutputWithContext(ctx context.Context) DashboardDateTimeParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDateTimeParameterOutput)
}

// DashboardDateTimeParameterArrayInput is an input type that accepts DashboardDateTimeParameterArray and DashboardDateTimeParameterArrayOutput values.
// You can construct a concrete instance of `DashboardDateTimeParameterArrayInput` via:
//
//          DashboardDateTimeParameterArray{ DashboardDateTimeParameterArgs{...} }
type DashboardDateTimeParameterArrayInput interface {
	pulumi.Input

	ToDashboardDateTimeParameterArrayOutput() DashboardDateTimeParameterArrayOutput
	ToDashboardDateTimeParameterArrayOutputWithContext(context.Context) DashboardDateTimeParameterArrayOutput
}

type DashboardDateTimeParameterArray []DashboardDateTimeParameterInput

func (DashboardDateTimeParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardDateTimeParameter)(nil)).Elem()
}

func (i DashboardDateTimeParameterArray) ToDashboardDateTimeParameterArrayOutput() DashboardDateTimeParameterArrayOutput {
	return i.ToDashboardDateTimeParameterArrayOutputWithContext(context.Background())
}

func (i DashboardDateTimeParameterArray) ToDashboardDateTimeParameterArrayOutputWithContext(ctx context.Context) DashboardDateTimeParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDateTimeParameterArrayOutput)
}

// <p>A date-time parameter.</p>
type DashboardDateTimeParameterOutput struct{ *pulumi.OutputState }

func (DashboardDateTimeParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDateTimeParameter)(nil)).Elem()
}

func (o DashboardDateTimeParameterOutput) ToDashboardDateTimeParameterOutput() DashboardDateTimeParameterOutput {
	return o
}

func (o DashboardDateTimeParameterOutput) ToDashboardDateTimeParameterOutputWithContext(ctx context.Context) DashboardDateTimeParameterOutput {
	return o
}

// <p>A display name for the date-time parameter.</p>
func (o DashboardDateTimeParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardDateTimeParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values for the date-time parameter.</p>
func (o DashboardDateTimeParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardDateTimeParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardDateTimeParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardDateTimeParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardDateTimeParameter)(nil)).Elem()
}

func (o DashboardDateTimeParameterArrayOutput) ToDashboardDateTimeParameterArrayOutput() DashboardDateTimeParameterArrayOutput {
	return o
}

func (o DashboardDateTimeParameterArrayOutput) ToDashboardDateTimeParameterArrayOutputWithContext(ctx context.Context) DashboardDateTimeParameterArrayOutput {
	return o
}

func (o DashboardDateTimeParameterArrayOutput) Index(i pulumi.IntInput) DashboardDateTimeParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardDateTimeParameter {
		return vs[0].([]DashboardDateTimeParameter)[vs[1].(int)]
	}).(DashboardDateTimeParameterOutput)
}

// <p>A decimal parameter.</p>
type DashboardDecimalParameter struct {
	// <p>A display name for the decimal parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values for the decimal parameter.</p>
	Values []float64 `pulumi:"values"`
}

// DashboardDecimalParameterInput is an input type that accepts DashboardDecimalParameterArgs and DashboardDecimalParameterOutput values.
// You can construct a concrete instance of `DashboardDecimalParameterInput` via:
//
//          DashboardDecimalParameterArgs{...}
type DashboardDecimalParameterInput interface {
	pulumi.Input

	ToDashboardDecimalParameterOutput() DashboardDecimalParameterOutput
	ToDashboardDecimalParameterOutputWithContext(context.Context) DashboardDecimalParameterOutput
}

// <p>A decimal parameter.</p>
type DashboardDecimalParameterArgs struct {
	// <p>A display name for the decimal parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values for the decimal parameter.</p>
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (DashboardDecimalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDecimalParameter)(nil)).Elem()
}

func (i DashboardDecimalParameterArgs) ToDashboardDecimalParameterOutput() DashboardDecimalParameterOutput {
	return i.ToDashboardDecimalParameterOutputWithContext(context.Background())
}

func (i DashboardDecimalParameterArgs) ToDashboardDecimalParameterOutputWithContext(ctx context.Context) DashboardDecimalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDecimalParameterOutput)
}

// DashboardDecimalParameterArrayInput is an input type that accepts DashboardDecimalParameterArray and DashboardDecimalParameterArrayOutput values.
// You can construct a concrete instance of `DashboardDecimalParameterArrayInput` via:
//
//          DashboardDecimalParameterArray{ DashboardDecimalParameterArgs{...} }
type DashboardDecimalParameterArrayInput interface {
	pulumi.Input

	ToDashboardDecimalParameterArrayOutput() DashboardDecimalParameterArrayOutput
	ToDashboardDecimalParameterArrayOutputWithContext(context.Context) DashboardDecimalParameterArrayOutput
}

type DashboardDecimalParameterArray []DashboardDecimalParameterInput

func (DashboardDecimalParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardDecimalParameter)(nil)).Elem()
}

func (i DashboardDecimalParameterArray) ToDashboardDecimalParameterArrayOutput() DashboardDecimalParameterArrayOutput {
	return i.ToDashboardDecimalParameterArrayOutputWithContext(context.Background())
}

func (i DashboardDecimalParameterArray) ToDashboardDecimalParameterArrayOutputWithContext(ctx context.Context) DashboardDecimalParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardDecimalParameterArrayOutput)
}

// <p>A decimal parameter.</p>
type DashboardDecimalParameterOutput struct{ *pulumi.OutputState }

func (DashboardDecimalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardDecimalParameter)(nil)).Elem()
}

func (o DashboardDecimalParameterOutput) ToDashboardDecimalParameterOutput() DashboardDecimalParameterOutput {
	return o
}

func (o DashboardDecimalParameterOutput) ToDashboardDecimalParameterOutputWithContext(ctx context.Context) DashboardDecimalParameterOutput {
	return o
}

// <p>A display name for the decimal parameter.</p>
func (o DashboardDecimalParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardDecimalParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values for the decimal parameter.</p>
func (o DashboardDecimalParameterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DashboardDecimalParameter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type DashboardDecimalParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardDecimalParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardDecimalParameter)(nil)).Elem()
}

func (o DashboardDecimalParameterArrayOutput) ToDashboardDecimalParameterArrayOutput() DashboardDecimalParameterArrayOutput {
	return o
}

func (o DashboardDecimalParameterArrayOutput) ToDashboardDecimalParameterArrayOutputWithContext(ctx context.Context) DashboardDecimalParameterArrayOutput {
	return o
}

func (o DashboardDecimalParameterArrayOutput) Index(i pulumi.IntInput) DashboardDecimalParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardDecimalParameter {
		return vs[0].([]DashboardDecimalParameter)[vs[1].(int)]
	}).(DashboardDecimalParameterOutput)
}

// <p>Dashboard error.</p>
type DashboardError struct {
	// <p>Message.</p>
	Message *string             `pulumi:"message"`
	Type    *DashboardErrorType `pulumi:"type"`
}

// DashboardErrorInput is an input type that accepts DashboardErrorArgs and DashboardErrorOutput values.
// You can construct a concrete instance of `DashboardErrorInput` via:
//
//          DashboardErrorArgs{...}
type DashboardErrorInput interface {
	pulumi.Input

	ToDashboardErrorOutput() DashboardErrorOutput
	ToDashboardErrorOutputWithContext(context.Context) DashboardErrorOutput
}

// <p>Dashboard error.</p>
type DashboardErrorArgs struct {
	// <p>Message.</p>
	Message pulumi.StringPtrInput      `pulumi:"message"`
	Type    DashboardErrorTypePtrInput `pulumi:"type"`
}

func (DashboardErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardError)(nil)).Elem()
}

func (i DashboardErrorArgs) ToDashboardErrorOutput() DashboardErrorOutput {
	return i.ToDashboardErrorOutputWithContext(context.Background())
}

func (i DashboardErrorArgs) ToDashboardErrorOutputWithContext(ctx context.Context) DashboardErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardErrorOutput)
}

// DashboardErrorArrayInput is an input type that accepts DashboardErrorArray and DashboardErrorArrayOutput values.
// You can construct a concrete instance of `DashboardErrorArrayInput` via:
//
//          DashboardErrorArray{ DashboardErrorArgs{...} }
type DashboardErrorArrayInput interface {
	pulumi.Input

	ToDashboardErrorArrayOutput() DashboardErrorArrayOutput
	ToDashboardErrorArrayOutputWithContext(context.Context) DashboardErrorArrayOutput
}

type DashboardErrorArray []DashboardErrorInput

func (DashboardErrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardError)(nil)).Elem()
}

func (i DashboardErrorArray) ToDashboardErrorArrayOutput() DashboardErrorArrayOutput {
	return i.ToDashboardErrorArrayOutputWithContext(context.Background())
}

func (i DashboardErrorArray) ToDashboardErrorArrayOutputWithContext(ctx context.Context) DashboardErrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardErrorArrayOutput)
}

// <p>Dashboard error.</p>
type DashboardErrorOutput struct{ *pulumi.OutputState }

func (DashboardErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardError)(nil)).Elem()
}

func (o DashboardErrorOutput) ToDashboardErrorOutput() DashboardErrorOutput {
	return o
}

func (o DashboardErrorOutput) ToDashboardErrorOutputWithContext(ctx context.Context) DashboardErrorOutput {
	return o
}

// <p>Message.</p>
func (o DashboardErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o DashboardErrorOutput) Type() DashboardErrorTypePtrOutput {
	return o.ApplyT(func(v DashboardError) *DashboardErrorType { return v.Type }).(DashboardErrorTypePtrOutput)
}

type DashboardErrorArrayOutput struct{ *pulumi.OutputState }

func (DashboardErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardError)(nil)).Elem()
}

func (o DashboardErrorArrayOutput) ToDashboardErrorArrayOutput() DashboardErrorArrayOutput {
	return o
}

func (o DashboardErrorArrayOutput) ToDashboardErrorArrayOutputWithContext(ctx context.Context) DashboardErrorArrayOutput {
	return o
}

func (o DashboardErrorArrayOutput) Index(i pulumi.IntInput) DashboardErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardError {
		return vs[0].([]DashboardError)[vs[1].(int)]
	}).(DashboardErrorOutput)
}

// <p>Export to .csv option.</p>
type DashboardExportToCSVOption struct {
	AvailabilityStatus *DashboardBehavior `pulumi:"availabilityStatus"`
}

// DashboardExportToCSVOptionInput is an input type that accepts DashboardExportToCSVOptionArgs and DashboardExportToCSVOptionOutput values.
// You can construct a concrete instance of `DashboardExportToCSVOptionInput` via:
//
//          DashboardExportToCSVOptionArgs{...}
type DashboardExportToCSVOptionInput interface {
	pulumi.Input

	ToDashboardExportToCSVOptionOutput() DashboardExportToCSVOptionOutput
	ToDashboardExportToCSVOptionOutputWithContext(context.Context) DashboardExportToCSVOptionOutput
}

// <p>Export to .csv option.</p>
type DashboardExportToCSVOptionArgs struct {
	AvailabilityStatus DashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardExportToCSVOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardExportToCSVOption)(nil)).Elem()
}

func (i DashboardExportToCSVOptionArgs) ToDashboardExportToCSVOptionOutput() DashboardExportToCSVOptionOutput {
	return i.ToDashboardExportToCSVOptionOutputWithContext(context.Background())
}

func (i DashboardExportToCSVOptionArgs) ToDashboardExportToCSVOptionOutputWithContext(ctx context.Context) DashboardExportToCSVOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardExportToCSVOptionOutput)
}

func (i DashboardExportToCSVOptionArgs) ToDashboardExportToCSVOptionPtrOutput() DashboardExportToCSVOptionPtrOutput {
	return i.ToDashboardExportToCSVOptionPtrOutputWithContext(context.Background())
}

func (i DashboardExportToCSVOptionArgs) ToDashboardExportToCSVOptionPtrOutputWithContext(ctx context.Context) DashboardExportToCSVOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardExportToCSVOptionOutput).ToDashboardExportToCSVOptionPtrOutputWithContext(ctx)
}

// DashboardExportToCSVOptionPtrInput is an input type that accepts DashboardExportToCSVOptionArgs, DashboardExportToCSVOptionPtr and DashboardExportToCSVOptionPtrOutput values.
// You can construct a concrete instance of `DashboardExportToCSVOptionPtrInput` via:
//
//          DashboardExportToCSVOptionArgs{...}
//
//  or:
//
//          nil
type DashboardExportToCSVOptionPtrInput interface {
	pulumi.Input

	ToDashboardExportToCSVOptionPtrOutput() DashboardExportToCSVOptionPtrOutput
	ToDashboardExportToCSVOptionPtrOutputWithContext(context.Context) DashboardExportToCSVOptionPtrOutput
}

type dashboardExportToCSVOptionPtrType DashboardExportToCSVOptionArgs

func DashboardExportToCSVOptionPtr(v *DashboardExportToCSVOptionArgs) DashboardExportToCSVOptionPtrInput {
	return (*dashboardExportToCSVOptionPtrType)(v)
}

func (*dashboardExportToCSVOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardExportToCSVOption)(nil)).Elem()
}

func (i *dashboardExportToCSVOptionPtrType) ToDashboardExportToCSVOptionPtrOutput() DashboardExportToCSVOptionPtrOutput {
	return i.ToDashboardExportToCSVOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardExportToCSVOptionPtrType) ToDashboardExportToCSVOptionPtrOutputWithContext(ctx context.Context) DashboardExportToCSVOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardExportToCSVOptionPtrOutput)
}

// <p>Export to .csv option.</p>
type DashboardExportToCSVOptionOutput struct{ *pulumi.OutputState }

func (DashboardExportToCSVOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardExportToCSVOption)(nil)).Elem()
}

func (o DashboardExportToCSVOptionOutput) ToDashboardExportToCSVOptionOutput() DashboardExportToCSVOptionOutput {
	return o
}

func (o DashboardExportToCSVOptionOutput) ToDashboardExportToCSVOptionOutputWithContext(ctx context.Context) DashboardExportToCSVOptionOutput {
	return o
}

func (o DashboardExportToCSVOptionOutput) ToDashboardExportToCSVOptionPtrOutput() DashboardExportToCSVOptionPtrOutput {
	return o.ToDashboardExportToCSVOptionPtrOutputWithContext(context.Background())
}

func (o DashboardExportToCSVOptionOutput) ToDashboardExportToCSVOptionPtrOutputWithContext(ctx context.Context) DashboardExportToCSVOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardExportToCSVOption) *DashboardExportToCSVOption {
		return &v
	}).(DashboardExportToCSVOptionPtrOutput)
}

func (o DashboardExportToCSVOptionOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v DashboardExportToCSVOption) *DashboardBehavior { return v.AvailabilityStatus }).(DashboardBehaviorPtrOutput)
}

type DashboardExportToCSVOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardExportToCSVOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardExportToCSVOption)(nil)).Elem()
}

func (o DashboardExportToCSVOptionPtrOutput) ToDashboardExportToCSVOptionPtrOutput() DashboardExportToCSVOptionPtrOutput {
	return o
}

func (o DashboardExportToCSVOptionPtrOutput) ToDashboardExportToCSVOptionPtrOutputWithContext(ctx context.Context) DashboardExportToCSVOptionPtrOutput {
	return o
}

func (o DashboardExportToCSVOptionPtrOutput) Elem() DashboardExportToCSVOptionOutput {
	return o.ApplyT(func(v *DashboardExportToCSVOption) DashboardExportToCSVOption {
		if v != nil {
			return *v
		}
		var ret DashboardExportToCSVOption
		return ret
	}).(DashboardExportToCSVOptionOutput)
}

func (o DashboardExportToCSVOptionPtrOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *DashboardExportToCSVOption) *DashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(DashboardBehaviorPtrOutput)
}

// <p>An integer parameter.</p>
type DashboardIntegerParameter struct {
	// <p>The name of the integer parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values for the integer parameter.</p>
	Values []float64 `pulumi:"values"`
}

// DashboardIntegerParameterInput is an input type that accepts DashboardIntegerParameterArgs and DashboardIntegerParameterOutput values.
// You can construct a concrete instance of `DashboardIntegerParameterInput` via:
//
//          DashboardIntegerParameterArgs{...}
type DashboardIntegerParameterInput interface {
	pulumi.Input

	ToDashboardIntegerParameterOutput() DashboardIntegerParameterOutput
	ToDashboardIntegerParameterOutputWithContext(context.Context) DashboardIntegerParameterOutput
}

// <p>An integer parameter.</p>
type DashboardIntegerParameterArgs struct {
	// <p>The name of the integer parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values for the integer parameter.</p>
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (DashboardIntegerParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardIntegerParameter)(nil)).Elem()
}

func (i DashboardIntegerParameterArgs) ToDashboardIntegerParameterOutput() DashboardIntegerParameterOutput {
	return i.ToDashboardIntegerParameterOutputWithContext(context.Background())
}

func (i DashboardIntegerParameterArgs) ToDashboardIntegerParameterOutputWithContext(ctx context.Context) DashboardIntegerParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardIntegerParameterOutput)
}

// DashboardIntegerParameterArrayInput is an input type that accepts DashboardIntegerParameterArray and DashboardIntegerParameterArrayOutput values.
// You can construct a concrete instance of `DashboardIntegerParameterArrayInput` via:
//
//          DashboardIntegerParameterArray{ DashboardIntegerParameterArgs{...} }
type DashboardIntegerParameterArrayInput interface {
	pulumi.Input

	ToDashboardIntegerParameterArrayOutput() DashboardIntegerParameterArrayOutput
	ToDashboardIntegerParameterArrayOutputWithContext(context.Context) DashboardIntegerParameterArrayOutput
}

type DashboardIntegerParameterArray []DashboardIntegerParameterInput

func (DashboardIntegerParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardIntegerParameter)(nil)).Elem()
}

func (i DashboardIntegerParameterArray) ToDashboardIntegerParameterArrayOutput() DashboardIntegerParameterArrayOutput {
	return i.ToDashboardIntegerParameterArrayOutputWithContext(context.Background())
}

func (i DashboardIntegerParameterArray) ToDashboardIntegerParameterArrayOutputWithContext(ctx context.Context) DashboardIntegerParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardIntegerParameterArrayOutput)
}

// <p>An integer parameter.</p>
type DashboardIntegerParameterOutput struct{ *pulumi.OutputState }

func (DashboardIntegerParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardIntegerParameter)(nil)).Elem()
}

func (o DashboardIntegerParameterOutput) ToDashboardIntegerParameterOutput() DashboardIntegerParameterOutput {
	return o
}

func (o DashboardIntegerParameterOutput) ToDashboardIntegerParameterOutputWithContext(ctx context.Context) DashboardIntegerParameterOutput {
	return o
}

// <p>The name of the integer parameter.</p>
func (o DashboardIntegerParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardIntegerParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values for the integer parameter.</p>
func (o DashboardIntegerParameterOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DashboardIntegerParameter) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type DashboardIntegerParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardIntegerParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardIntegerParameter)(nil)).Elem()
}

func (o DashboardIntegerParameterArrayOutput) ToDashboardIntegerParameterArrayOutput() DashboardIntegerParameterArrayOutput {
	return o
}

func (o DashboardIntegerParameterArrayOutput) ToDashboardIntegerParameterArrayOutputWithContext(ctx context.Context) DashboardIntegerParameterArrayOutput {
	return o
}

func (o DashboardIntegerParameterArrayOutput) Index(i pulumi.IntInput) DashboardIntegerParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardIntegerParameter {
		return vs[0].([]DashboardIntegerParameter)[vs[1].(int)]
	}).(DashboardIntegerParameterOutput)
}

// <p>A list of QuickSight parameters and the list's override values.</p>
type DashboardParameters struct {
	// <p>Date-time parameters.</p>
	DateTimeParameters []DashboardDateTimeParameter `pulumi:"dateTimeParameters"`
	// <p>Decimal parameters.</p>
	DecimalParameters []DashboardDecimalParameter `pulumi:"decimalParameters"`
	// <p>Integer parameters.</p>
	IntegerParameters []DashboardIntegerParameter `pulumi:"integerParameters"`
	// <p>String parameters.</p>
	StringParameters []DashboardStringParameter `pulumi:"stringParameters"`
}

// DashboardParametersInput is an input type that accepts DashboardParametersArgs and DashboardParametersOutput values.
// You can construct a concrete instance of `DashboardParametersInput` via:
//
//          DashboardParametersArgs{...}
type DashboardParametersInput interface {
	pulumi.Input

	ToDashboardParametersOutput() DashboardParametersOutput
	ToDashboardParametersOutputWithContext(context.Context) DashboardParametersOutput
}

// <p>A list of QuickSight parameters and the list's override values.</p>
type DashboardParametersArgs struct {
	// <p>Date-time parameters.</p>
	DateTimeParameters DashboardDateTimeParameterArrayInput `pulumi:"dateTimeParameters"`
	// <p>Decimal parameters.</p>
	DecimalParameters DashboardDecimalParameterArrayInput `pulumi:"decimalParameters"`
	// <p>Integer parameters.</p>
	IntegerParameters DashboardIntegerParameterArrayInput `pulumi:"integerParameters"`
	// <p>String parameters.</p>
	StringParameters DashboardStringParameterArrayInput `pulumi:"stringParameters"`
}

func (DashboardParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameters)(nil)).Elem()
}

func (i DashboardParametersArgs) ToDashboardParametersOutput() DashboardParametersOutput {
	return i.ToDashboardParametersOutputWithContext(context.Background())
}

func (i DashboardParametersArgs) ToDashboardParametersOutputWithContext(ctx context.Context) DashboardParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersOutput)
}

func (i DashboardParametersArgs) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return i.ToDashboardParametersPtrOutputWithContext(context.Background())
}

func (i DashboardParametersArgs) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersOutput).ToDashboardParametersPtrOutputWithContext(ctx)
}

// DashboardParametersPtrInput is an input type that accepts DashboardParametersArgs, DashboardParametersPtr and DashboardParametersPtrOutput values.
// You can construct a concrete instance of `DashboardParametersPtrInput` via:
//
//          DashboardParametersArgs{...}
//
//  or:
//
//          nil
type DashboardParametersPtrInput interface {
	pulumi.Input

	ToDashboardParametersPtrOutput() DashboardParametersPtrOutput
	ToDashboardParametersPtrOutputWithContext(context.Context) DashboardParametersPtrOutput
}

type dashboardParametersPtrType DashboardParametersArgs

func DashboardParametersPtr(v *DashboardParametersArgs) DashboardParametersPtrInput {
	return (*dashboardParametersPtrType)(v)
}

func (*dashboardParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardParameters)(nil)).Elem()
}

func (i *dashboardParametersPtrType) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return i.ToDashboardParametersPtrOutputWithContext(context.Background())
}

func (i *dashboardParametersPtrType) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardParametersPtrOutput)
}

// <p>A list of QuickSight parameters and the list's override values.</p>
type DashboardParametersOutput struct{ *pulumi.OutputState }

func (DashboardParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardParameters)(nil)).Elem()
}

func (o DashboardParametersOutput) ToDashboardParametersOutput() DashboardParametersOutput {
	return o
}

func (o DashboardParametersOutput) ToDashboardParametersOutputWithContext(ctx context.Context) DashboardParametersOutput {
	return o
}

func (o DashboardParametersOutput) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return o.ToDashboardParametersPtrOutputWithContext(context.Background())
}

func (o DashboardParametersOutput) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardParameters) *DashboardParameters {
		return &v
	}).(DashboardParametersPtrOutput)
}

// <p>Date-time parameters.</p>
func (o DashboardParametersOutput) DateTimeParameters() DashboardDateTimeParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardDateTimeParameter { return v.DateTimeParameters }).(DashboardDateTimeParameterArrayOutput)
}

// <p>Decimal parameters.</p>
func (o DashboardParametersOutput) DecimalParameters() DashboardDecimalParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardDecimalParameter { return v.DecimalParameters }).(DashboardDecimalParameterArrayOutput)
}

// <p>Integer parameters.</p>
func (o DashboardParametersOutput) IntegerParameters() DashboardIntegerParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardIntegerParameter { return v.IntegerParameters }).(DashboardIntegerParameterArrayOutput)
}

// <p>String parameters.</p>
func (o DashboardParametersOutput) StringParameters() DashboardStringParameterArrayOutput {
	return o.ApplyT(func(v DashboardParameters) []DashboardStringParameter { return v.StringParameters }).(DashboardStringParameterArrayOutput)
}

type DashboardParametersPtrOutput struct{ *pulumi.OutputState }

func (DashboardParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardParameters)(nil)).Elem()
}

func (o DashboardParametersPtrOutput) ToDashboardParametersPtrOutput() DashboardParametersPtrOutput {
	return o
}

func (o DashboardParametersPtrOutput) ToDashboardParametersPtrOutputWithContext(ctx context.Context) DashboardParametersPtrOutput {
	return o
}

func (o DashboardParametersPtrOutput) Elem() DashboardParametersOutput {
	return o.ApplyT(func(v *DashboardParameters) DashboardParameters {
		if v != nil {
			return *v
		}
		var ret DashboardParameters
		return ret
	}).(DashboardParametersOutput)
}

// <p>Date-time parameters.</p>
func (o DashboardParametersPtrOutput) DateTimeParameters() DashboardDateTimeParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardDateTimeParameter {
		if v == nil {
			return nil
		}
		return v.DateTimeParameters
	}).(DashboardDateTimeParameterArrayOutput)
}

// <p>Decimal parameters.</p>
func (o DashboardParametersPtrOutput) DecimalParameters() DashboardDecimalParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardDecimalParameter {
		if v == nil {
			return nil
		}
		return v.DecimalParameters
	}).(DashboardDecimalParameterArrayOutput)
}

// <p>Integer parameters.</p>
func (o DashboardParametersPtrOutput) IntegerParameters() DashboardIntegerParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardIntegerParameter {
		if v == nil {
			return nil
		}
		return v.IntegerParameters
	}).(DashboardIntegerParameterArrayOutput)
}

// <p>String parameters.</p>
func (o DashboardParametersPtrOutput) StringParameters() DashboardStringParameterArrayOutput {
	return o.ApplyT(func(v *DashboardParameters) []DashboardStringParameter {
		if v == nil {
			return nil
		}
		return v.StringParameters
	}).(DashboardStringParameterArrayOutput)
}

// <p>Dashboard publish options.</p>
type DashboardPublishOptions struct {
	AdHocFilteringOption *DashboardAdHocFilteringOption `pulumi:"adHocFilteringOption"`
	ExportToCSVOption    *DashboardExportToCSVOption    `pulumi:"exportToCSVOption"`
	SheetControlsOption  *DashboardSheetControlsOption  `pulumi:"sheetControlsOption"`
}

// DashboardPublishOptionsInput is an input type that accepts DashboardPublishOptionsArgs and DashboardPublishOptionsOutput values.
// You can construct a concrete instance of `DashboardPublishOptionsInput` via:
//
//          DashboardPublishOptionsArgs{...}
type DashboardPublishOptionsInput interface {
	pulumi.Input

	ToDashboardPublishOptionsOutput() DashboardPublishOptionsOutput
	ToDashboardPublishOptionsOutputWithContext(context.Context) DashboardPublishOptionsOutput
}

// <p>Dashboard publish options.</p>
type DashboardPublishOptionsArgs struct {
	AdHocFilteringOption DashboardAdHocFilteringOptionPtrInput `pulumi:"adHocFilteringOption"`
	ExportToCSVOption    DashboardExportToCSVOptionPtrInput    `pulumi:"exportToCSVOption"`
	SheetControlsOption  DashboardSheetControlsOptionPtrInput  `pulumi:"sheetControlsOption"`
}

func (DashboardPublishOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPublishOptions)(nil)).Elem()
}

func (i DashboardPublishOptionsArgs) ToDashboardPublishOptionsOutput() DashboardPublishOptionsOutput {
	return i.ToDashboardPublishOptionsOutputWithContext(context.Background())
}

func (i DashboardPublishOptionsArgs) ToDashboardPublishOptionsOutputWithContext(ctx context.Context) DashboardPublishOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPublishOptionsOutput)
}

func (i DashboardPublishOptionsArgs) ToDashboardPublishOptionsPtrOutput() DashboardPublishOptionsPtrOutput {
	return i.ToDashboardPublishOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardPublishOptionsArgs) ToDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardPublishOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPublishOptionsOutput).ToDashboardPublishOptionsPtrOutputWithContext(ctx)
}

// DashboardPublishOptionsPtrInput is an input type that accepts DashboardPublishOptionsArgs, DashboardPublishOptionsPtr and DashboardPublishOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardPublishOptionsPtrInput` via:
//
//          DashboardPublishOptionsArgs{...}
//
//  or:
//
//          nil
type DashboardPublishOptionsPtrInput interface {
	pulumi.Input

	ToDashboardPublishOptionsPtrOutput() DashboardPublishOptionsPtrOutput
	ToDashboardPublishOptionsPtrOutputWithContext(context.Context) DashboardPublishOptionsPtrOutput
}

type dashboardPublishOptionsPtrType DashboardPublishOptionsArgs

func DashboardPublishOptionsPtr(v *DashboardPublishOptionsArgs) DashboardPublishOptionsPtrInput {
	return (*dashboardPublishOptionsPtrType)(v)
}

func (*dashboardPublishOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPublishOptions)(nil)).Elem()
}

func (i *dashboardPublishOptionsPtrType) ToDashboardPublishOptionsPtrOutput() DashboardPublishOptionsPtrOutput {
	return i.ToDashboardPublishOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardPublishOptionsPtrType) ToDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardPublishOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPublishOptionsPtrOutput)
}

// <p>Dashboard publish options.</p>
type DashboardPublishOptionsOutput struct{ *pulumi.OutputState }

func (DashboardPublishOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPublishOptions)(nil)).Elem()
}

func (o DashboardPublishOptionsOutput) ToDashboardPublishOptionsOutput() DashboardPublishOptionsOutput {
	return o
}

func (o DashboardPublishOptionsOutput) ToDashboardPublishOptionsOutputWithContext(ctx context.Context) DashboardPublishOptionsOutput {
	return o
}

func (o DashboardPublishOptionsOutput) ToDashboardPublishOptionsPtrOutput() DashboardPublishOptionsPtrOutput {
	return o.ToDashboardPublishOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardPublishOptionsOutput) ToDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardPublishOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardPublishOptions) *DashboardPublishOptions {
		return &v
	}).(DashboardPublishOptionsPtrOutput)
}

func (o DashboardPublishOptionsOutput) AdHocFilteringOption() DashboardAdHocFilteringOptionPtrOutput {
	return o.ApplyT(func(v DashboardPublishOptions) *DashboardAdHocFilteringOption { return v.AdHocFilteringOption }).(DashboardAdHocFilteringOptionPtrOutput)
}

func (o DashboardPublishOptionsOutput) ExportToCSVOption() DashboardExportToCSVOptionPtrOutput {
	return o.ApplyT(func(v DashboardPublishOptions) *DashboardExportToCSVOption { return v.ExportToCSVOption }).(DashboardExportToCSVOptionPtrOutput)
}

func (o DashboardPublishOptionsOutput) SheetControlsOption() DashboardSheetControlsOptionPtrOutput {
	return o.ApplyT(func(v DashboardPublishOptions) *DashboardSheetControlsOption { return v.SheetControlsOption }).(DashboardSheetControlsOptionPtrOutput)
}

type DashboardPublishOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardPublishOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPublishOptions)(nil)).Elem()
}

func (o DashboardPublishOptionsPtrOutput) ToDashboardPublishOptionsPtrOutput() DashboardPublishOptionsPtrOutput {
	return o
}

func (o DashboardPublishOptionsPtrOutput) ToDashboardPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardPublishOptionsPtrOutput {
	return o
}

func (o DashboardPublishOptionsPtrOutput) Elem() DashboardPublishOptionsOutput {
	return o.ApplyT(func(v *DashboardPublishOptions) DashboardPublishOptions {
		if v != nil {
			return *v
		}
		var ret DashboardPublishOptions
		return ret
	}).(DashboardPublishOptionsOutput)
}

func (o DashboardPublishOptionsPtrOutput) AdHocFilteringOption() DashboardAdHocFilteringOptionPtrOutput {
	return o.ApplyT(func(v *DashboardPublishOptions) *DashboardAdHocFilteringOption {
		if v == nil {
			return nil
		}
		return v.AdHocFilteringOption
	}).(DashboardAdHocFilteringOptionPtrOutput)
}

func (o DashboardPublishOptionsPtrOutput) ExportToCSVOption() DashboardExportToCSVOptionPtrOutput {
	return o.ApplyT(func(v *DashboardPublishOptions) *DashboardExportToCSVOption {
		if v == nil {
			return nil
		}
		return v.ExportToCSVOption
	}).(DashboardExportToCSVOptionPtrOutput)
}

func (o DashboardPublishOptionsPtrOutput) SheetControlsOption() DashboardSheetControlsOptionPtrOutput {
	return o.ApplyT(func(v *DashboardPublishOptions) *DashboardSheetControlsOption {
		if v == nil {
			return nil
		}
		return v.SheetControlsOption
	}).(DashboardSheetControlsOptionPtrOutput)
}

// <p>Permission for the resource.</p>
type DashboardResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// DashboardResourcePermissionInput is an input type that accepts DashboardResourcePermissionArgs and DashboardResourcePermissionOutput values.
// You can construct a concrete instance of `DashboardResourcePermissionInput` via:
//
//          DashboardResourcePermissionArgs{...}
type DashboardResourcePermissionInput interface {
	pulumi.Input

	ToDashboardResourcePermissionOutput() DashboardResourcePermissionOutput
	ToDashboardResourcePermissionOutputWithContext(context.Context) DashboardResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type DashboardResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DashboardResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardResourcePermission)(nil)).Elem()
}

func (i DashboardResourcePermissionArgs) ToDashboardResourcePermissionOutput() DashboardResourcePermissionOutput {
	return i.ToDashboardResourcePermissionOutputWithContext(context.Background())
}

func (i DashboardResourcePermissionArgs) ToDashboardResourcePermissionOutputWithContext(ctx context.Context) DashboardResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardResourcePermissionOutput)
}

// DashboardResourcePermissionArrayInput is an input type that accepts DashboardResourcePermissionArray and DashboardResourcePermissionArrayOutput values.
// You can construct a concrete instance of `DashboardResourcePermissionArrayInput` via:
//
//          DashboardResourcePermissionArray{ DashboardResourcePermissionArgs{...} }
type DashboardResourcePermissionArrayInput interface {
	pulumi.Input

	ToDashboardResourcePermissionArrayOutput() DashboardResourcePermissionArrayOutput
	ToDashboardResourcePermissionArrayOutputWithContext(context.Context) DashboardResourcePermissionArrayOutput
}

type DashboardResourcePermissionArray []DashboardResourcePermissionInput

func (DashboardResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardResourcePermission)(nil)).Elem()
}

func (i DashboardResourcePermissionArray) ToDashboardResourcePermissionArrayOutput() DashboardResourcePermissionArrayOutput {
	return i.ToDashboardResourcePermissionArrayOutputWithContext(context.Background())
}

func (i DashboardResourcePermissionArray) ToDashboardResourcePermissionArrayOutputWithContext(ctx context.Context) DashboardResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type DashboardResourcePermissionOutput struct{ *pulumi.OutputState }

func (DashboardResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardResourcePermission)(nil)).Elem()
}

func (o DashboardResourcePermissionOutput) ToDashboardResourcePermissionOutput() DashboardResourcePermissionOutput {
	return o
}

func (o DashboardResourcePermissionOutput) ToDashboardResourcePermissionOutputWithContext(ctx context.Context) DashboardResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o DashboardResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//             following:</p>
//         <ul>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
//                     ARN. Use this option only to share resources (templates) across AWS accounts.
//                     (This is less common.) </p>
//             </li>
//          </ul>
func (o DashboardResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DashboardResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (DashboardResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardResourcePermission)(nil)).Elem()
}

func (o DashboardResourcePermissionArrayOutput) ToDashboardResourcePermissionArrayOutput() DashboardResourcePermissionArrayOutput {
	return o
}

func (o DashboardResourcePermissionArrayOutput) ToDashboardResourcePermissionArrayOutputWithContext(ctx context.Context) DashboardResourcePermissionArrayOutput {
	return o
}

func (o DashboardResourcePermissionArrayOutput) Index(i pulumi.IntInput) DashboardResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardResourcePermission {
		return vs[0].([]DashboardResourcePermission)[vs[1].(int)]
	}).(DashboardResourcePermissionOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type DashboardSheet struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
	//             console.</p>
	Name *string `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId *string `pulumi:"sheetId"`
}

// DashboardSheetInput is an input type that accepts DashboardSheetArgs and DashboardSheetOutput values.
// You can construct a concrete instance of `DashboardSheetInput` via:
//
//          DashboardSheetArgs{...}
type DashboardSheetInput interface {
	pulumi.Input

	ToDashboardSheetOutput() DashboardSheetOutput
	ToDashboardSheetOutputWithContext(context.Context) DashboardSheetOutput
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type DashboardSheetArgs struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
	//             console.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId pulumi.StringPtrInput `pulumi:"sheetId"`
}

func (DashboardSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheet)(nil)).Elem()
}

func (i DashboardSheetArgs) ToDashboardSheetOutput() DashboardSheetOutput {
	return i.ToDashboardSheetOutputWithContext(context.Background())
}

func (i DashboardSheetArgs) ToDashboardSheetOutputWithContext(ctx context.Context) DashboardSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetOutput)
}

// DashboardSheetArrayInput is an input type that accepts DashboardSheetArray and DashboardSheetArrayOutput values.
// You can construct a concrete instance of `DashboardSheetArrayInput` via:
//
//          DashboardSheetArray{ DashboardSheetArgs{...} }
type DashboardSheetArrayInput interface {
	pulumi.Input

	ToDashboardSheetArrayOutput() DashboardSheetArrayOutput
	ToDashboardSheetArrayOutputWithContext(context.Context) DashboardSheetArrayOutput
}

type DashboardSheetArray []DashboardSheetInput

func (DashboardSheetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheet)(nil)).Elem()
}

func (i DashboardSheetArray) ToDashboardSheetArrayOutput() DashboardSheetArrayOutput {
	return i.ToDashboardSheetArrayOutputWithContext(context.Background())
}

func (i DashboardSheetArray) ToDashboardSheetArrayOutputWithContext(ctx context.Context) DashboardSheetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetArrayOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type DashboardSheetOutput struct{ *pulumi.OutputState }

func (DashboardSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheet)(nil)).Elem()
}

func (o DashboardSheetOutput) ToDashboardSheetOutput() DashboardSheetOutput {
	return o
}

func (o DashboardSheetOutput) ToDashboardSheetOutputWithContext(ctx context.Context) DashboardSheetOutput {
	return o
}

// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
//             console.</p>
func (o DashboardSheetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The unique identifier associated with a sheet.</p>
func (o DashboardSheetOutput) SheetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheet) *string { return v.SheetId }).(pulumi.StringPtrOutput)
}

type DashboardSheetArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheet)(nil)).Elem()
}

func (o DashboardSheetArrayOutput) ToDashboardSheetArrayOutput() DashboardSheetArrayOutput {
	return o
}

func (o DashboardSheetArrayOutput) ToDashboardSheetArrayOutputWithContext(ctx context.Context) DashboardSheetArrayOutput {
	return o
}

func (o DashboardSheetArrayOutput) Index(i pulumi.IntInput) DashboardSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheet {
		return vs[0].([]DashboardSheet)[vs[1].(int)]
	}).(DashboardSheetOutput)
}

// <p>Sheet controls option.</p>
type DashboardSheetControlsOption struct {
	VisibilityState *DashboardUIState `pulumi:"visibilityState"`
}

// DashboardSheetControlsOptionInput is an input type that accepts DashboardSheetControlsOptionArgs and DashboardSheetControlsOptionOutput values.
// You can construct a concrete instance of `DashboardSheetControlsOptionInput` via:
//
//          DashboardSheetControlsOptionArgs{...}
type DashboardSheetControlsOptionInput interface {
	pulumi.Input

	ToDashboardSheetControlsOptionOutput() DashboardSheetControlsOptionOutput
	ToDashboardSheetControlsOptionOutputWithContext(context.Context) DashboardSheetControlsOptionOutput
}

// <p>Sheet controls option.</p>
type DashboardSheetControlsOptionArgs struct {
	VisibilityState DashboardUIStatePtrInput `pulumi:"visibilityState"`
}

func (DashboardSheetControlsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlsOption)(nil)).Elem()
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionOutput() DashboardSheetControlsOptionOutput {
	return i.ToDashboardSheetControlsOptionOutputWithContext(context.Background())
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionOutputWithContext(ctx context.Context) DashboardSheetControlsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlsOptionOutput)
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return i.ToDashboardSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlsOptionOutput).ToDashboardSheetControlsOptionPtrOutputWithContext(ctx)
}

// DashboardSheetControlsOptionPtrInput is an input type that accepts DashboardSheetControlsOptionArgs, DashboardSheetControlsOptionPtr and DashboardSheetControlsOptionPtrOutput values.
// You can construct a concrete instance of `DashboardSheetControlsOptionPtrInput` via:
//
//          DashboardSheetControlsOptionArgs{...}
//
//  or:
//
//          nil
type DashboardSheetControlsOptionPtrInput interface {
	pulumi.Input

	ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput
	ToDashboardSheetControlsOptionPtrOutputWithContext(context.Context) DashboardSheetControlsOptionPtrOutput
}

type dashboardSheetControlsOptionPtrType DashboardSheetControlsOptionArgs

func DashboardSheetControlsOptionPtr(v *DashboardSheetControlsOptionArgs) DashboardSheetControlsOptionPtrInput {
	return (*dashboardSheetControlsOptionPtrType)(v)
}

func (*dashboardSheetControlsOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetControlsOption)(nil)).Elem()
}

func (i *dashboardSheetControlsOptionPtrType) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return i.ToDashboardSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardSheetControlsOptionPtrType) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlsOptionPtrOutput)
}

// <p>Sheet controls option.</p>
type DashboardSheetControlsOptionOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlsOption)(nil)).Elem()
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionOutput() DashboardSheetControlsOptionOutput {
	return o
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionOutputWithContext(ctx context.Context) DashboardSheetControlsOptionOutput {
	return o
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return o.ToDashboardSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetControlsOption) *DashboardSheetControlsOption {
		return &v
	}).(DashboardSheetControlsOptionPtrOutput)
}

func (o DashboardSheetControlsOptionOutput) VisibilityState() DashboardUIStatePtrOutput {
	return o.ApplyT(func(v DashboardSheetControlsOption) *DashboardUIState { return v.VisibilityState }).(DashboardUIStatePtrOutput)
}

type DashboardSheetControlsOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlsOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetControlsOption)(nil)).Elem()
}

func (o DashboardSheetControlsOptionPtrOutput) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return o
}

func (o DashboardSheetControlsOptionPtrOutput) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return o
}

func (o DashboardSheetControlsOptionPtrOutput) Elem() DashboardSheetControlsOptionOutput {
	return o.ApplyT(func(v *DashboardSheetControlsOption) DashboardSheetControlsOption {
		if v != nil {
			return *v
		}
		var ret DashboardSheetControlsOption
		return ret
	}).(DashboardSheetControlsOptionOutput)
}

func (o DashboardSheetControlsOptionPtrOutput) VisibilityState() DashboardUIStatePtrOutput {
	return o.ApplyT(func(v *DashboardSheetControlsOption) *DashboardUIState {
		if v == nil {
			return nil
		}
		return v.VisibilityState
	}).(DashboardUIStatePtrOutput)
}

// <p>Dashboard source entity.</p>
type DashboardSourceEntity struct {
	SourceTemplate *DashboardSourceTemplate `pulumi:"sourceTemplate"`
}

// DashboardSourceEntityInput is an input type that accepts DashboardSourceEntityArgs and DashboardSourceEntityOutput values.
// You can construct a concrete instance of `DashboardSourceEntityInput` via:
//
//          DashboardSourceEntityArgs{...}
type DashboardSourceEntityInput interface {
	pulumi.Input

	ToDashboardSourceEntityOutput() DashboardSourceEntityOutput
	ToDashboardSourceEntityOutputWithContext(context.Context) DashboardSourceEntityOutput
}

// <p>Dashboard source entity.</p>
type DashboardSourceEntityArgs struct {
	SourceTemplate DashboardSourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (DashboardSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return i.ToDashboardSourceEntityOutputWithContext(context.Background())
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityOutput)
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return i.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityOutput).ToDashboardSourceEntityPtrOutputWithContext(ctx)
}

// DashboardSourceEntityPtrInput is an input type that accepts DashboardSourceEntityArgs, DashboardSourceEntityPtr and DashboardSourceEntityPtrOutput values.
// You can construct a concrete instance of `DashboardSourceEntityPtrInput` via:
//
//          DashboardSourceEntityArgs{...}
//
//  or:
//
//          nil
type DashboardSourceEntityPtrInput interface {
	pulumi.Input

	ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput
	ToDashboardSourceEntityPtrOutputWithContext(context.Context) DashboardSourceEntityPtrOutput
}

type dashboardSourceEntityPtrType DashboardSourceEntityArgs

func DashboardSourceEntityPtr(v *DashboardSourceEntityArgs) DashboardSourceEntityPtrInput {
	return (*dashboardSourceEntityPtrType)(v)
}

func (*dashboardSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntity)(nil)).Elem()
}

func (i *dashboardSourceEntityPtrType) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return i.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (i *dashboardSourceEntityPtrType) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityPtrOutput)
}

// <p>Dashboard source entity.</p>
type DashboardSourceEntityOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return o.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSourceEntity) *DashboardSourceEntity {
		return &v
	}).(DashboardSourceEntityPtrOutput)
}

func (o DashboardSourceEntityOutput) SourceTemplate() DashboardSourceTemplatePtrOutput {
	return o.ApplyT(func(v DashboardSourceEntity) *DashboardSourceTemplate { return v.SourceTemplate }).(DashboardSourceTemplatePtrOutput)
}

type DashboardSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntity)(nil)).Elem()
}

func (o DashboardSourceEntityPtrOutput) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return o
}

func (o DashboardSourceEntityPtrOutput) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return o
}

func (o DashboardSourceEntityPtrOutput) Elem() DashboardSourceEntityOutput {
	return o.ApplyT(func(v *DashboardSourceEntity) DashboardSourceEntity {
		if v != nil {
			return *v
		}
		var ret DashboardSourceEntity
		return ret
	}).(DashboardSourceEntityOutput)
}

func (o DashboardSourceEntityPtrOutput) SourceTemplate() DashboardSourceTemplatePtrOutput {
	return o.ApplyT(func(v *DashboardSourceEntity) *DashboardSourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(DashboardSourceTemplatePtrOutput)
}

// <p>Dashboard source template.</p>
type DashboardSourceTemplate struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn string `pulumi:"arn"`
	// <p>Dataset references.</p>
	DataSetReferences []DashboardDataSetReference `pulumi:"dataSetReferences"`
}

// DashboardSourceTemplateInput is an input type that accepts DashboardSourceTemplateArgs and DashboardSourceTemplateOutput values.
// You can construct a concrete instance of `DashboardSourceTemplateInput` via:
//
//          DashboardSourceTemplateArgs{...}
type DashboardSourceTemplateInput interface {
	pulumi.Input

	ToDashboardSourceTemplateOutput() DashboardSourceTemplateOutput
	ToDashboardSourceTemplateOutputWithContext(context.Context) DashboardSourceTemplateOutput
}

// <p>Dashboard source template.</p>
type DashboardSourceTemplateArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
	// <p>Dataset references.</p>
	DataSetReferences DashboardDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (DashboardSourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceTemplate)(nil)).Elem()
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplateOutput() DashboardSourceTemplateOutput {
	return i.ToDashboardSourceTemplateOutputWithContext(context.Background())
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplateOutputWithContext(ctx context.Context) DashboardSourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceTemplateOutput)
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return i.ToDashboardSourceTemplatePtrOutputWithContext(context.Background())
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceTemplateOutput).ToDashboardSourceTemplatePtrOutputWithContext(ctx)
}

// DashboardSourceTemplatePtrInput is an input type that accepts DashboardSourceTemplateArgs, DashboardSourceTemplatePtr and DashboardSourceTemplatePtrOutput values.
// You can construct a concrete instance of `DashboardSourceTemplatePtrInput` via:
//
//          DashboardSourceTemplateArgs{...}
//
//  or:
//
//          nil
type DashboardSourceTemplatePtrInput interface {
	pulumi.Input

	ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput
	ToDashboardSourceTemplatePtrOutputWithContext(context.Context) DashboardSourceTemplatePtrOutput
}

type dashboardSourceTemplatePtrType DashboardSourceTemplateArgs

func DashboardSourceTemplatePtr(v *DashboardSourceTemplateArgs) DashboardSourceTemplatePtrInput {
	return (*dashboardSourceTemplatePtrType)(v)
}

func (*dashboardSourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceTemplate)(nil)).Elem()
}

func (i *dashboardSourceTemplatePtrType) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return i.ToDashboardSourceTemplatePtrOutputWithContext(context.Background())
}

func (i *dashboardSourceTemplatePtrType) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceTemplatePtrOutput)
}

// <p>Dashboard source template.</p>
type DashboardSourceTemplateOutput struct{ *pulumi.OutputState }

func (DashboardSourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceTemplate)(nil)).Elem()
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplateOutput() DashboardSourceTemplateOutput {
	return o
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplateOutputWithContext(ctx context.Context) DashboardSourceTemplateOutput {
	return o
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return o.ToDashboardSourceTemplatePtrOutputWithContext(context.Background())
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSourceTemplate) *DashboardSourceTemplate {
		return &v
	}).(DashboardSourceTemplatePtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardSourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

// <p>Dataset references.</p>
func (o DashboardSourceTemplateOutput) DataSetReferences() DashboardDataSetReferenceArrayOutput {
	return o.ApplyT(func(v DashboardSourceTemplate) []DashboardDataSetReference { return v.DataSetReferences }).(DashboardDataSetReferenceArrayOutput)
}

type DashboardSourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (DashboardSourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceTemplate)(nil)).Elem()
}

func (o DashboardSourceTemplatePtrOutput) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return o
}

func (o DashboardSourceTemplatePtrOutput) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return o
}

func (o DashboardSourceTemplatePtrOutput) Elem() DashboardSourceTemplateOutput {
	return o.ApplyT(func(v *DashboardSourceTemplate) DashboardSourceTemplate {
		if v != nil {
			return *v
		}
		var ret DashboardSourceTemplate
		return ret
	}).(DashboardSourceTemplateOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardSourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>Dataset references.</p>
func (o DashboardSourceTemplatePtrOutput) DataSetReferences() DashboardDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *DashboardSourceTemplate) []DashboardDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(DashboardDataSetReferenceArrayOutput)
}

// <p>A string parameter.</p>
type DashboardStringParameter struct {
	// <p>A display name for a string parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values of a string parameter.</p>
	Values []string `pulumi:"values"`
}

// DashboardStringParameterInput is an input type that accepts DashboardStringParameterArgs and DashboardStringParameterOutput values.
// You can construct a concrete instance of `DashboardStringParameterInput` via:
//
//          DashboardStringParameterArgs{...}
type DashboardStringParameterInput interface {
	pulumi.Input

	ToDashboardStringParameterOutput() DashboardStringParameterOutput
	ToDashboardStringParameterOutputWithContext(context.Context) DashboardStringParameterOutput
}

// <p>A string parameter.</p>
type DashboardStringParameterArgs struct {
	// <p>A display name for a string parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values of a string parameter.</p>
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardStringParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringParameter)(nil)).Elem()
}

func (i DashboardStringParameterArgs) ToDashboardStringParameterOutput() DashboardStringParameterOutput {
	return i.ToDashboardStringParameterOutputWithContext(context.Background())
}

func (i DashboardStringParameterArgs) ToDashboardStringParameterOutputWithContext(ctx context.Context) DashboardStringParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringParameterOutput)
}

// DashboardStringParameterArrayInput is an input type that accepts DashboardStringParameterArray and DashboardStringParameterArrayOutput values.
// You can construct a concrete instance of `DashboardStringParameterArrayInput` via:
//
//          DashboardStringParameterArray{ DashboardStringParameterArgs{...} }
type DashboardStringParameterArrayInput interface {
	pulumi.Input

	ToDashboardStringParameterArrayOutput() DashboardStringParameterArrayOutput
	ToDashboardStringParameterArrayOutputWithContext(context.Context) DashboardStringParameterArrayOutput
}

type DashboardStringParameterArray []DashboardStringParameterInput

func (DashboardStringParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStringParameter)(nil)).Elem()
}

func (i DashboardStringParameterArray) ToDashboardStringParameterArrayOutput() DashboardStringParameterArrayOutput {
	return i.ToDashboardStringParameterArrayOutputWithContext(context.Background())
}

func (i DashboardStringParameterArray) ToDashboardStringParameterArrayOutputWithContext(ctx context.Context) DashboardStringParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringParameterArrayOutput)
}

// <p>A string parameter.</p>
type DashboardStringParameterOutput struct{ *pulumi.OutputState }

func (DashboardStringParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringParameter)(nil)).Elem()
}

func (o DashboardStringParameterOutput) ToDashboardStringParameterOutput() DashboardStringParameterOutput {
	return o
}

func (o DashboardStringParameterOutput) ToDashboardStringParameterOutputWithContext(ctx context.Context) DashboardStringParameterOutput {
	return o
}

// <p>A display name for a string parameter.</p>
func (o DashboardStringParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStringParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values of a string parameter.</p>
func (o DashboardStringParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardStringParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardStringParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardStringParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStringParameter)(nil)).Elem()
}

func (o DashboardStringParameterArrayOutput) ToDashboardStringParameterArrayOutput() DashboardStringParameterArrayOutput {
	return o
}

func (o DashboardStringParameterArrayOutput) ToDashboardStringParameterArrayOutputWithContext(ctx context.Context) DashboardStringParameterArrayOutput {
	return o
}

func (o DashboardStringParameterArrayOutput) Index(i pulumi.IntInput) DashboardStringParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardStringParameter {
		return vs[0].([]DashboardStringParameter)[vs[1].(int)]
	}).(DashboardStringParameterOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DashboardTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// DashboardTagInput is an input type that accepts DashboardTagArgs and DashboardTagOutput values.
// You can construct a concrete instance of `DashboardTagInput` via:
//
//          DashboardTagArgs{...}
type DashboardTagInput interface {
	pulumi.Input

	ToDashboardTagOutput() DashboardTagOutput
	ToDashboardTagOutputWithContext(context.Context) DashboardTagOutput
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DashboardTagArgs struct {
	// <p>Tag key.</p>
	Key pulumi.StringInput `pulumi:"key"`
	// <p>Tag value.</p>
	Value pulumi.StringInput `pulumi:"value"`
}

func (DashboardTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTag)(nil)).Elem()
}

func (i DashboardTagArgs) ToDashboardTagOutput() DashboardTagOutput {
	return i.ToDashboardTagOutputWithContext(context.Background())
}

func (i DashboardTagArgs) ToDashboardTagOutputWithContext(ctx context.Context) DashboardTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTagOutput)
}

// DashboardTagArrayInput is an input type that accepts DashboardTagArray and DashboardTagArrayOutput values.
// You can construct a concrete instance of `DashboardTagArrayInput` via:
//
//          DashboardTagArray{ DashboardTagArgs{...} }
type DashboardTagArrayInput interface {
	pulumi.Input

	ToDashboardTagArrayOutput() DashboardTagArrayOutput
	ToDashboardTagArrayOutputWithContext(context.Context) DashboardTagArrayOutput
}

type DashboardTagArray []DashboardTagInput

func (DashboardTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTag)(nil)).Elem()
}

func (i DashboardTagArray) ToDashboardTagArrayOutput() DashboardTagArrayOutput {
	return i.ToDashboardTagArrayOutputWithContext(context.Background())
}

func (i DashboardTagArray) ToDashboardTagArrayOutputWithContext(ctx context.Context) DashboardTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTagArrayOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DashboardTagOutput struct{ *pulumi.OutputState }

func (DashboardTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTag)(nil)).Elem()
}

func (o DashboardTagOutput) ToDashboardTagOutput() DashboardTagOutput {
	return o
}

func (o DashboardTagOutput) ToDashboardTagOutputWithContext(ctx context.Context) DashboardTagOutput {
	return o
}

// <p>Tag key.</p>
func (o DashboardTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTag) string { return v.Key }).(pulumi.StringOutput)
}

// <p>Tag value.</p>
func (o DashboardTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTag) string { return v.Value }).(pulumi.StringOutput)
}

type DashboardTagArrayOutput struct{ *pulumi.OutputState }

func (DashboardTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTag)(nil)).Elem()
}

func (o DashboardTagArrayOutput) ToDashboardTagArrayOutput() DashboardTagArrayOutput {
	return o
}

func (o DashboardTagArrayOutput) ToDashboardTagArrayOutputWithContext(ctx context.Context) DashboardTagArrayOutput {
	return o
}

func (o DashboardTagArrayOutput) Index(i pulumi.IntInput) DashboardTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTag {
		return vs[0].([]DashboardTag)[vs[1].(int)]
	}).(DashboardTagOutput)
}

// <p>Dashboard version.</p>
type DashboardVersion struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn *string `pulumi:"arn"`
	// <p>The time that this dashboard version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
	//             version of the dashboard.</p>
	DataSetArns []string `pulumi:"dataSetArns"`
	// <p>Description.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with this dashboard version.</p>
	Errors []DashboardError `pulumi:"errors"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets []DashboardSheet `pulumi:"sheets"`
	// <p>Source entity ARN.</p>
	SourceEntityArn *string                  `pulumi:"sourceEntityArn"`
	Status          *DashboardResourceStatus `pulumi:"status"`
	// <p>The ARN of the theme associated with a version of the dashboard.</p>
	ThemeArn *string `pulumi:"themeArn"`
	// <p>Version number for this version of the dashboard.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// DashboardVersionInput is an input type that accepts DashboardVersionArgs and DashboardVersionOutput values.
// You can construct a concrete instance of `DashboardVersionInput` via:
//
//          DashboardVersionArgs{...}
type DashboardVersionInput interface {
	pulumi.Input

	ToDashboardVersionOutput() DashboardVersionOutput
	ToDashboardVersionOutputWithContext(context.Context) DashboardVersionOutput
}

// <p>Dashboard version.</p>
type DashboardVersionArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// <p>The time that this dashboard version was created.</p>
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
	//             version of the dashboard.</p>
	DataSetArns pulumi.StringArrayInput `pulumi:"dataSetArns"`
	// <p>Description.</p>
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <p>Errors associated with this dashboard version.</p>
	Errors DashboardErrorArrayInput `pulumi:"errors"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets DashboardSheetArrayInput `pulumi:"sheets"`
	// <p>Source entity ARN.</p>
	SourceEntityArn pulumi.StringPtrInput           `pulumi:"sourceEntityArn"`
	Status          DashboardResourceStatusPtrInput `pulumi:"status"`
	// <p>The ARN of the theme associated with a version of the dashboard.</p>
	ThemeArn pulumi.StringPtrInput `pulumi:"themeArn"`
	// <p>Version number for this version of the dashboard.</p>
	VersionNumber pulumi.Float64PtrInput `pulumi:"versionNumber"`
}

func (DashboardVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVersion)(nil)).Elem()
}

func (i DashboardVersionArgs) ToDashboardVersionOutput() DashboardVersionOutput {
	return i.ToDashboardVersionOutputWithContext(context.Background())
}

func (i DashboardVersionArgs) ToDashboardVersionOutputWithContext(ctx context.Context) DashboardVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVersionOutput)
}

func (i DashboardVersionArgs) ToDashboardVersionPtrOutput() DashboardVersionPtrOutput {
	return i.ToDashboardVersionPtrOutputWithContext(context.Background())
}

func (i DashboardVersionArgs) ToDashboardVersionPtrOutputWithContext(ctx context.Context) DashboardVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVersionOutput).ToDashboardVersionPtrOutputWithContext(ctx)
}

// DashboardVersionPtrInput is an input type that accepts DashboardVersionArgs, DashboardVersionPtr and DashboardVersionPtrOutput values.
// You can construct a concrete instance of `DashboardVersionPtrInput` via:
//
//          DashboardVersionArgs{...}
//
//  or:
//
//          nil
type DashboardVersionPtrInput interface {
	pulumi.Input

	ToDashboardVersionPtrOutput() DashboardVersionPtrOutput
	ToDashboardVersionPtrOutputWithContext(context.Context) DashboardVersionPtrOutput
}

type dashboardVersionPtrType DashboardVersionArgs

func DashboardVersionPtr(v *DashboardVersionArgs) DashboardVersionPtrInput {
	return (*dashboardVersionPtrType)(v)
}

func (*dashboardVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVersion)(nil)).Elem()
}

func (i *dashboardVersionPtrType) ToDashboardVersionPtrOutput() DashboardVersionPtrOutput {
	return i.ToDashboardVersionPtrOutputWithContext(context.Background())
}

func (i *dashboardVersionPtrType) ToDashboardVersionPtrOutputWithContext(ctx context.Context) DashboardVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVersionPtrOutput)
}

// <p>Dashboard version.</p>
type DashboardVersionOutput struct{ *pulumi.OutputState }

func (DashboardVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVersion)(nil)).Elem()
}

func (o DashboardVersionOutput) ToDashboardVersionOutput() DashboardVersionOutput {
	return o
}

func (o DashboardVersionOutput) ToDashboardVersionOutputWithContext(ctx context.Context) DashboardVersionOutput {
	return o
}

func (o DashboardVersionOutput) ToDashboardVersionPtrOutput() DashboardVersionPtrOutput {
	return o.ToDashboardVersionPtrOutputWithContext(context.Background())
}

func (o DashboardVersionOutput) ToDashboardVersionPtrOutputWithContext(ctx context.Context) DashboardVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVersion) *DashboardVersion {
		return &v
	}).(DashboardVersionPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardVersionOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// <p>The time that this dashboard version was created.</p>
func (o DashboardVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
//             version of the dashboard.</p>
func (o DashboardVersionOutput) DataSetArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardVersion) []string { return v.DataSetArns }).(pulumi.StringArrayOutput)
}

// <p>Description.</p>
func (o DashboardVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this dashboard version.</p>
func (o DashboardVersionOutput) Errors() DashboardErrorArrayOutput {
	return o.ApplyT(func(v DashboardVersion) []DashboardError { return v.Errors }).(DashboardErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o DashboardVersionOutput) Sheets() DashboardSheetArrayOutput {
	return o.ApplyT(func(v DashboardVersion) []DashboardSheet { return v.Sheets }).(DashboardSheetArrayOutput)
}

// <p>Source entity ARN.</p>
func (o DashboardVersionOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.SourceEntityArn }).(pulumi.StringPtrOutput)
}

func (o DashboardVersionOutput) Status() DashboardResourceStatusPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *DashboardResourceStatus { return v.Status }).(DashboardResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with a version of the dashboard.</p>
func (o DashboardVersionOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

// <p>Version number for this version of the dashboard.</p>
func (o DashboardVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type DashboardVersionPtrOutput struct{ *pulumi.OutputState }

func (DashboardVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVersion)(nil)).Elem()
}

func (o DashboardVersionPtrOutput) ToDashboardVersionPtrOutput() DashboardVersionPtrOutput {
	return o
}

func (o DashboardVersionPtrOutput) ToDashboardVersionPtrOutputWithContext(ctx context.Context) DashboardVersionPtrOutput {
	return o
}

func (o DashboardVersionPtrOutput) Elem() DashboardVersionOutput {
	return o.ApplyT(func(v *DashboardVersion) DashboardVersion {
		if v != nil {
			return *v
		}
		var ret DashboardVersion
		return ret
	}).(DashboardVersionOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardVersionPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>The time that this dashboard version was created.</p>
func (o DashboardVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
//             version of the dashboard.</p>
func (o DashboardVersionPtrOutput) DataSetArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardVersion) []string {
		if v == nil {
			return nil
		}
		return v.DataSetArns
	}).(pulumi.StringArrayOutput)
}

// <p>Description.</p>
func (o DashboardVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this dashboard version.</p>
func (o DashboardVersionPtrOutput) Errors() DashboardErrorArrayOutput {
	return o.ApplyT(func(v *DashboardVersion) []DashboardError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(DashboardErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o DashboardVersionPtrOutput) Sheets() DashboardSheetArrayOutput {
	return o.ApplyT(func(v *DashboardVersion) []DashboardSheet {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(DashboardSheetArrayOutput)
}

// <p>Source entity ARN.</p>
func (o DashboardVersionPtrOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.SourceEntityArn
	}).(pulumi.StringPtrOutput)
}

func (o DashboardVersionPtrOutput) Status() DashboardResourceStatusPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *DashboardResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DashboardResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with a version of the dashboard.</p>
func (o DashboardVersionPtrOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.ThemeArn
	}).(pulumi.StringPtrOutput)
}

// <p>Version number for this version of the dashboard.</p>
func (o DashboardVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

// <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
//             a variant type structure. For this structure to be valid, only one of the attributes can
//             be non-null.</p>
type DataSetColumnGroup struct {
	GeoSpatialColumnGroup *DataSetGeoSpatialColumnGroup `pulumi:"geoSpatialColumnGroup"`
}

// DataSetColumnGroupInput is an input type that accepts DataSetColumnGroupArgs and DataSetColumnGroupOutput values.
// You can construct a concrete instance of `DataSetColumnGroupInput` via:
//
//          DataSetColumnGroupArgs{...}
type DataSetColumnGroupInput interface {
	pulumi.Input

	ToDataSetColumnGroupOutput() DataSetColumnGroupOutput
	ToDataSetColumnGroupOutputWithContext(context.Context) DataSetColumnGroupOutput
}

// <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
//             a variant type structure. For this structure to be valid, only one of the attributes can
//             be non-null.</p>
type DataSetColumnGroupArgs struct {
	GeoSpatialColumnGroup DataSetGeoSpatialColumnGroupPtrInput `pulumi:"geoSpatialColumnGroup"`
}

func (DataSetColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return i.ToDataSetColumnGroupOutputWithContext(context.Background())
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupOutput)
}

// DataSetColumnGroupArrayInput is an input type that accepts DataSetColumnGroupArray and DataSetColumnGroupArrayOutput values.
// You can construct a concrete instance of `DataSetColumnGroupArrayInput` via:
//
//          DataSetColumnGroupArray{ DataSetColumnGroupArgs{...} }
type DataSetColumnGroupArrayInput interface {
	pulumi.Input

	ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput
	ToDataSetColumnGroupArrayOutputWithContext(context.Context) DataSetColumnGroupArrayOutput
}

type DataSetColumnGroupArray []DataSetColumnGroupInput

func (DataSetColumnGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupArray) ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput {
	return i.ToDataSetColumnGroupArrayOutputWithContext(context.Background())
}

func (i DataSetColumnGroupArray) ToDataSetColumnGroupArrayOutputWithContext(ctx context.Context) DataSetColumnGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupArrayOutput)
}

// <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
//             a variant type structure. For this structure to be valid, only one of the attributes can
//             be non-null.</p>
type DataSetColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupOutput) GeoSpatialColumnGroup() DataSetGeoSpatialColumnGroupPtrOutput {
	return o.ApplyT(func(v DataSetColumnGroup) *DataSetGeoSpatialColumnGroup { return v.GeoSpatialColumnGroup }).(DataSetGeoSpatialColumnGroupPtrOutput)
}

type DataSetColumnGroupArrayOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupArrayOutput) ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput {
	return o
}

func (o DataSetColumnGroupArrayOutput) ToDataSetColumnGroupArrayOutputWithContext(ctx context.Context) DataSetColumnGroupArrayOutput {
	return o
}

func (o DataSetColumnGroupArrayOutput) Index(i pulumi.IntInput) DataSetColumnGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetColumnGroup {
		return vs[0].([]DataSetColumnGroup)[vs[1].(int)]
	}).(DataSetColumnGroupOutput)
}

type DataSetColumnLevelPermissionRule struct {
	ColumnNames []string `pulumi:"columnNames"`
	Principals  []string `pulumi:"principals"`
}

// DataSetColumnLevelPermissionRuleInput is an input type that accepts DataSetColumnLevelPermissionRuleArgs and DataSetColumnLevelPermissionRuleOutput values.
// You can construct a concrete instance of `DataSetColumnLevelPermissionRuleInput` via:
//
//          DataSetColumnLevelPermissionRuleArgs{...}
type DataSetColumnLevelPermissionRuleInput interface {
	pulumi.Input

	ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput
	ToDataSetColumnLevelPermissionRuleOutputWithContext(context.Context) DataSetColumnLevelPermissionRuleOutput
}

type DataSetColumnLevelPermissionRuleArgs struct {
	ColumnNames pulumi.StringArrayInput `pulumi:"columnNames"`
	Principals  pulumi.StringArrayInput `pulumi:"principals"`
}

func (DataSetColumnLevelPermissionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return i.ToDataSetColumnLevelPermissionRuleOutputWithContext(context.Background())
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnLevelPermissionRuleOutput)
}

// DataSetColumnLevelPermissionRuleArrayInput is an input type that accepts DataSetColumnLevelPermissionRuleArray and DataSetColumnLevelPermissionRuleArrayOutput values.
// You can construct a concrete instance of `DataSetColumnLevelPermissionRuleArrayInput` via:
//
//          DataSetColumnLevelPermissionRuleArray{ DataSetColumnLevelPermissionRuleArgs{...} }
type DataSetColumnLevelPermissionRuleArrayInput interface {
	pulumi.Input

	ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput
	ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Context) DataSetColumnLevelPermissionRuleArrayOutput
}

type DataSetColumnLevelPermissionRuleArray []DataSetColumnLevelPermissionRuleInput

func (DataSetColumnLevelPermissionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i DataSetColumnLevelPermissionRuleArray) ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput {
	return i.ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Background())
}

func (i DataSetColumnLevelPermissionRuleArray) ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnLevelPermissionRuleArrayOutput)
}

type DataSetColumnLevelPermissionRuleOutput struct{ *pulumi.OutputState }

func (DataSetColumnLevelPermissionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetColumnLevelPermissionRule) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

func (o DataSetColumnLevelPermissionRuleOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetColumnLevelPermissionRule) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type DataSetColumnLevelPermissionRuleArrayOutput struct{ *pulumi.OutputState }

func (DataSetColumnLevelPermissionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) Index(i pulumi.IntInput) DataSetColumnLevelPermissionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetColumnLevelPermissionRule {
		return vs[0].([]DataSetColumnLevelPermissionRule)[vs[1].(int)]
	}).(DataSetColumnLevelPermissionRuleOutput)
}

type DataSetFieldFolderMap struct {
}

// DataSetFieldFolderMapInput is an input type that accepts DataSetFieldFolderMap and DataSetFieldFolderMapOutput values.
// You can construct a concrete instance of `DataSetFieldFolderMapInput` via:
//
//          DataSetFieldFolderMap{ "key": DataSetFieldFolderArgs{...} }
type DataSetFieldFolderMapInput interface {
	pulumi.Input

	ToDataSetFieldFolderMapOutput() DataSetFieldFolderMapOutput
	ToDataSetFieldFolderMapOutputWithContext(context.Context) DataSetFieldFolderMapOutput
}

type DataSetFieldFolderMapArgs struct {
}

func (DataSetFieldFolderMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolderMap)(nil)).Elem()
}

func (i DataSetFieldFolderMapArgs) ToDataSetFieldFolderMapOutput() DataSetFieldFolderMapOutput {
	return i.ToDataSetFieldFolderMapOutputWithContext(context.Background())
}

func (i DataSetFieldFolderMapArgs) ToDataSetFieldFolderMapOutputWithContext(ctx context.Context) DataSetFieldFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderMapOutput)
}

func (i DataSetFieldFolderMapArgs) ToDataSetFieldFolderMapPtrOutput() DataSetFieldFolderMapPtrOutput {
	return i.ToDataSetFieldFolderMapPtrOutputWithContext(context.Background())
}

func (i DataSetFieldFolderMapArgs) ToDataSetFieldFolderMapPtrOutputWithContext(ctx context.Context) DataSetFieldFolderMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderMapOutput).ToDataSetFieldFolderMapPtrOutputWithContext(ctx)
}

// DataSetFieldFolderMapPtrInput is an input type that accepts DataSetFieldFolderMapArgs, DataSetFieldFolderMapPtr and DataSetFieldFolderMapPtrOutput values.
// You can construct a concrete instance of `DataSetFieldFolderMapPtrInput` via:
//
//          DataSetFieldFolderMapArgs{...}
//
//  or:
//
//          nil
type DataSetFieldFolderMapPtrInput interface {
	pulumi.Input

	ToDataSetFieldFolderMapPtrOutput() DataSetFieldFolderMapPtrOutput
	ToDataSetFieldFolderMapPtrOutputWithContext(context.Context) DataSetFieldFolderMapPtrOutput
}

type dataSetFieldFolderMapPtrType DataSetFieldFolderMapArgs

func DataSetFieldFolderMapPtr(v *DataSetFieldFolderMapArgs) DataSetFieldFolderMapPtrInput {
	return (*dataSetFieldFolderMapPtrType)(v)
}

func (*dataSetFieldFolderMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetFieldFolderMap)(nil)).Elem()
}

func (i *dataSetFieldFolderMapPtrType) ToDataSetFieldFolderMapPtrOutput() DataSetFieldFolderMapPtrOutput {
	return i.ToDataSetFieldFolderMapPtrOutputWithContext(context.Background())
}

func (i *dataSetFieldFolderMapPtrType) ToDataSetFieldFolderMapPtrOutputWithContext(ctx context.Context) DataSetFieldFolderMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderMapPtrOutput)
}

type DataSetFieldFolderMapOutput struct{ *pulumi.OutputState }

func (DataSetFieldFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolderMap)(nil)).Elem()
}

func (o DataSetFieldFolderMapOutput) ToDataSetFieldFolderMapOutput() DataSetFieldFolderMapOutput {
	return o
}

func (o DataSetFieldFolderMapOutput) ToDataSetFieldFolderMapOutputWithContext(ctx context.Context) DataSetFieldFolderMapOutput {
	return o
}

func (o DataSetFieldFolderMapOutput) ToDataSetFieldFolderMapPtrOutput() DataSetFieldFolderMapPtrOutput {
	return o.ToDataSetFieldFolderMapPtrOutputWithContext(context.Background())
}

func (o DataSetFieldFolderMapOutput) ToDataSetFieldFolderMapPtrOutputWithContext(ctx context.Context) DataSetFieldFolderMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetFieldFolderMap) *DataSetFieldFolderMap {
		return &v
	}).(DataSetFieldFolderMapPtrOutput)
}

type DataSetFieldFolderMapPtrOutput struct{ *pulumi.OutputState }

func (DataSetFieldFolderMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetFieldFolderMap)(nil)).Elem()
}

func (o DataSetFieldFolderMapPtrOutput) ToDataSetFieldFolderMapPtrOutput() DataSetFieldFolderMapPtrOutput {
	return o
}

func (o DataSetFieldFolderMapPtrOutput) ToDataSetFieldFolderMapPtrOutputWithContext(ctx context.Context) DataSetFieldFolderMapPtrOutput {
	return o
}

func (o DataSetFieldFolderMapPtrOutput) Elem() DataSetFieldFolderMapOutput {
	return o.ApplyT(func(v *DataSetFieldFolderMap) DataSetFieldFolderMap {
		if v != nil {
			return *v
		}
		var ret DataSetFieldFolderMap
		return ret
	}).(DataSetFieldFolderMapOutput)
}

// <p>Geospatial column group that denotes a hierarchy.</p>
type DataSetGeoSpatialColumnGroup struct {
	// <p>Columns in this hierarchy.</p>
	Columns     []string                      `pulumi:"columns"`
	CountryCode *DataSetGeoSpatialCountryCode `pulumi:"countryCode"`
	// <p>A display name for the hierarchy.</p>
	Name string `pulumi:"name"`
}

// DataSetGeoSpatialColumnGroupInput is an input type that accepts DataSetGeoSpatialColumnGroupArgs and DataSetGeoSpatialColumnGroupOutput values.
// You can construct a concrete instance of `DataSetGeoSpatialColumnGroupInput` via:
//
//          DataSetGeoSpatialColumnGroupArgs{...}
type DataSetGeoSpatialColumnGroupInput interface {
	pulumi.Input

	ToDataSetGeoSpatialColumnGroupOutput() DataSetGeoSpatialColumnGroupOutput
	ToDataSetGeoSpatialColumnGroupOutputWithContext(context.Context) DataSetGeoSpatialColumnGroupOutput
}

// <p>Geospatial column group that denotes a hierarchy.</p>
type DataSetGeoSpatialColumnGroupArgs struct {
	// <p>Columns in this hierarchy.</p>
	Columns     pulumi.StringArrayInput              `pulumi:"columns"`
	CountryCode DataSetGeoSpatialCountryCodePtrInput `pulumi:"countryCode"`
	// <p>A display name for the hierarchy.</p>
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataSetGeoSpatialColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupOutput() DataSetGeoSpatialColumnGroupOutput {
	return i.ToDataSetGeoSpatialColumnGroupOutputWithContext(context.Background())
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetGeoSpatialColumnGroupOutput)
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return i.ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetGeoSpatialColumnGroupOutput).ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx)
}

// DataSetGeoSpatialColumnGroupPtrInput is an input type that accepts DataSetGeoSpatialColumnGroupArgs, DataSetGeoSpatialColumnGroupPtr and DataSetGeoSpatialColumnGroupPtrOutput values.
// You can construct a concrete instance of `DataSetGeoSpatialColumnGroupPtrInput` via:
//
//          DataSetGeoSpatialColumnGroupArgs{...}
//
//  or:
//
//          nil
type DataSetGeoSpatialColumnGroupPtrInput interface {
	pulumi.Input

	ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput
	ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Context) DataSetGeoSpatialColumnGroupPtrOutput
}

type dataSetGeoSpatialColumnGroupPtrType DataSetGeoSpatialColumnGroupArgs

func DataSetGeoSpatialColumnGroupPtr(v *DataSetGeoSpatialColumnGroupArgs) DataSetGeoSpatialColumnGroupPtrInput {
	return (*dataSetGeoSpatialColumnGroupPtrType)(v)
}

func (*dataSetGeoSpatialColumnGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (i *dataSetGeoSpatialColumnGroupPtrType) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return i.ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (i *dataSetGeoSpatialColumnGroupPtrType) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetGeoSpatialColumnGroupPtrOutput)
}

// <p>Geospatial column group that denotes a hierarchy.</p>
type DataSetGeoSpatialColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetGeoSpatialColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupOutput() DataSetGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return o.ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetGeoSpatialColumnGroup) *DataSetGeoSpatialColumnGroup {
		return &v
	}).(DataSetGeoSpatialColumnGroupPtrOutput)
}

// <p>Columns in this hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetGeoSpatialColumnGroup) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

func (o DataSetGeoSpatialColumnGroupOutput) CountryCode() DataSetGeoSpatialCountryCodePtrOutput {
	return o.ApplyT(func(v DataSetGeoSpatialColumnGroup) *DataSetGeoSpatialCountryCode { return v.CountryCode }).(DataSetGeoSpatialCountryCodePtrOutput)
}

// <p>A display name for the hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetGeoSpatialColumnGroup) string { return v.Name }).(pulumi.StringOutput)
}

type DataSetGeoSpatialColumnGroupPtrOutput struct{ *pulumi.OutputState }

func (DataSetGeoSpatialColumnGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (o DataSetGeoSpatialColumnGroupPtrOutput) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupPtrOutput) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupPtrOutput) Elem() DataSetGeoSpatialColumnGroupOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) DataSetGeoSpatialColumnGroup {
		if v != nil {
			return *v
		}
		var ret DataSetGeoSpatialColumnGroup
		return ret
	}).(DataSetGeoSpatialColumnGroupOutput)
}

// <p>Columns in this hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

func (o DataSetGeoSpatialColumnGroupPtrOutput) CountryCode() DataSetGeoSpatialCountryCodePtrOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) *DataSetGeoSpatialCountryCode {
		if v == nil {
			return nil
		}
		return v.CountryCode
	}).(DataSetGeoSpatialCountryCodePtrOutput)
}

// <p>A display name for the hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
type DataSetIngestionWaitPolicy struct {
	// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
	//  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
	IngestionWaitTimeInHours *float64 `pulumi:"ingestionWaitTimeInHours"`
	// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
	//   Applicable only when DataSetImportMode mode is set to SPICE.</p>
	WaitForSpiceIngestion *bool `pulumi:"waitForSpiceIngestion"`
}

// DataSetIngestionWaitPolicyInput is an input type that accepts DataSetIngestionWaitPolicyArgs and DataSetIngestionWaitPolicyOutput values.
// You can construct a concrete instance of `DataSetIngestionWaitPolicyInput` via:
//
//          DataSetIngestionWaitPolicyArgs{...}
type DataSetIngestionWaitPolicyInput interface {
	pulumi.Input

	ToDataSetIngestionWaitPolicyOutput() DataSetIngestionWaitPolicyOutput
	ToDataSetIngestionWaitPolicyOutputWithContext(context.Context) DataSetIngestionWaitPolicyOutput
}

// <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
type DataSetIngestionWaitPolicyArgs struct {
	// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
	//  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
	IngestionWaitTimeInHours pulumi.Float64PtrInput `pulumi:"ingestionWaitTimeInHours"`
	// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
	//   Applicable only when DataSetImportMode mode is set to SPICE.</p>
	WaitForSpiceIngestion pulumi.BoolPtrInput `pulumi:"waitForSpiceIngestion"`
}

func (DataSetIngestionWaitPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyOutput() DataSetIngestionWaitPolicyOutput {
	return i.ToDataSetIngestionWaitPolicyOutputWithContext(context.Background())
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIngestionWaitPolicyOutput)
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return i.ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Background())
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIngestionWaitPolicyOutput).ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx)
}

// DataSetIngestionWaitPolicyPtrInput is an input type that accepts DataSetIngestionWaitPolicyArgs, DataSetIngestionWaitPolicyPtr and DataSetIngestionWaitPolicyPtrOutput values.
// You can construct a concrete instance of `DataSetIngestionWaitPolicyPtrInput` via:
//
//          DataSetIngestionWaitPolicyArgs{...}
//
//  or:
//
//          nil
type DataSetIngestionWaitPolicyPtrInput interface {
	pulumi.Input

	ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput
	ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Context) DataSetIngestionWaitPolicyPtrOutput
}

type dataSetIngestionWaitPolicyPtrType DataSetIngestionWaitPolicyArgs

func DataSetIngestionWaitPolicyPtr(v *DataSetIngestionWaitPolicyArgs) DataSetIngestionWaitPolicyPtrInput {
	return (*dataSetIngestionWaitPolicyPtrType)(v)
}

func (*dataSetIngestionWaitPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (i *dataSetIngestionWaitPolicyPtrType) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return i.ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Background())
}

func (i *dataSetIngestionWaitPolicyPtrType) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIngestionWaitPolicyPtrOutput)
}

// <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
type DataSetIngestionWaitPolicyOutput struct{ *pulumi.OutputState }

func (DataSetIngestionWaitPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyOutput() DataSetIngestionWaitPolicyOutput {
	return o
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyOutput {
	return o
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return o.ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Background())
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetIngestionWaitPolicy) *DataSetIngestionWaitPolicy {
		return &v
	}).(DataSetIngestionWaitPolicyPtrOutput)
}

// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
//  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
func (o DataSetIngestionWaitPolicyOutput) IngestionWaitTimeInHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DataSetIngestionWaitPolicy) *float64 { return v.IngestionWaitTimeInHours }).(pulumi.Float64PtrOutput)
}

// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
//   Applicable only when DataSetImportMode mode is set to SPICE.</p>
func (o DataSetIngestionWaitPolicyOutput) WaitForSpiceIngestion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetIngestionWaitPolicy) *bool { return v.WaitForSpiceIngestion }).(pulumi.BoolPtrOutput)
}

type DataSetIngestionWaitPolicyPtrOutput struct{ *pulumi.OutputState }

func (DataSetIngestionWaitPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (o DataSetIngestionWaitPolicyPtrOutput) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return o
}

func (o DataSetIngestionWaitPolicyPtrOutput) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return o
}

func (o DataSetIngestionWaitPolicyPtrOutput) Elem() DataSetIngestionWaitPolicyOutput {
	return o.ApplyT(func(v *DataSetIngestionWaitPolicy) DataSetIngestionWaitPolicy {
		if v != nil {
			return *v
		}
		var ret DataSetIngestionWaitPolicy
		return ret
	}).(DataSetIngestionWaitPolicyOutput)
}

// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
//  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
func (o DataSetIngestionWaitPolicyPtrOutput) IngestionWaitTimeInHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSetIngestionWaitPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.IngestionWaitTimeInHours
	}).(pulumi.Float64PtrOutput)
}

// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
//   Applicable only when DataSetImportMode mode is set to SPICE.</p>
func (o DataSetIngestionWaitPolicyPtrOutput) WaitForSpiceIngestion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetIngestionWaitPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForSpiceIngestion
	}).(pulumi.BoolPtrOutput)
}

type DataSetLogicalTableMap struct {
}

// DataSetLogicalTableMapInput is an input type that accepts DataSetLogicalTableMap and DataSetLogicalTableMapOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapInput` via:
//
//          DataSetLogicalTableMap{ "key": DataSetLogicalTableArgs{...} }
type DataSetLogicalTableMapInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput
	ToDataSetLogicalTableMapOutputWithContext(context.Context) DataSetLogicalTableMapOutput
}

type DataSetLogicalTableMapArgs struct {
}

func (DataSetLogicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMap)(nil)).Elem()
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return i.ToDataSetLogicalTableMapOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapOutput)
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapPtrOutput() DataSetLogicalTableMapPtrOutput {
	return i.ToDataSetLogicalTableMapPtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMapArgs) ToDataSetLogicalTableMapPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapOutput).ToDataSetLogicalTableMapPtrOutputWithContext(ctx)
}

// DataSetLogicalTableMapPtrInput is an input type that accepts DataSetLogicalTableMapArgs, DataSetLogicalTableMapPtr and DataSetLogicalTableMapPtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapPtrInput` via:
//
//          DataSetLogicalTableMapArgs{...}
//
//  or:
//
//          nil
type DataSetLogicalTableMapPtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapPtrOutput() DataSetLogicalTableMapPtrOutput
	ToDataSetLogicalTableMapPtrOutputWithContext(context.Context) DataSetLogicalTableMapPtrOutput
}

type dataSetLogicalTableMapPtrType DataSetLogicalTableMapArgs

func DataSetLogicalTableMapPtr(v *DataSetLogicalTableMapArgs) DataSetLogicalTableMapPtrInput {
	return (*dataSetLogicalTableMapPtrType)(v)
}

func (*dataSetLogicalTableMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMap)(nil)).Elem()
}

func (i *dataSetLogicalTableMapPtrType) ToDataSetLogicalTableMapPtrOutput() DataSetLogicalTableMapPtrOutput {
	return i.ToDataSetLogicalTableMapPtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableMapPtrType) ToDataSetLogicalTableMapPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapPtrOutput)
}

type DataSetLogicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableMap)(nil)).Elem()
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return o
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return o
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapPtrOutput() DataSetLogicalTableMapPtrOutput {
	return o.ToDataSetLogicalTableMapPtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableMap) *DataSetLogicalTableMap {
		return &v
	}).(DataSetLogicalTableMapPtrOutput)
}

type DataSetLogicalTableMapPtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableMap)(nil)).Elem()
}

func (o DataSetLogicalTableMapPtrOutput) ToDataSetLogicalTableMapPtrOutput() DataSetLogicalTableMapPtrOutput {
	return o
}

func (o DataSetLogicalTableMapPtrOutput) ToDataSetLogicalTableMapPtrOutputWithContext(ctx context.Context) DataSetLogicalTableMapPtrOutput {
	return o
}

func (o DataSetLogicalTableMapPtrOutput) Elem() DataSetLogicalTableMapOutput {
	return o.ApplyT(func(v *DataSetLogicalTableMap) DataSetLogicalTableMap {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableMap
		return ret
	}).(DataSetLogicalTableMapOutput)
}

// <p>Output column.</p>
type DataSetOutputColumn struct {
	// <p>A description for a column.</p>
	Description *string `pulumi:"description"`
	// <p>A display name for the dataset.</p>
	Name *string                `pulumi:"name"`
	Type *DataSetColumnDataType `pulumi:"type"`
}

// DataSetOutputColumnInput is an input type that accepts DataSetOutputColumnArgs and DataSetOutputColumnOutput values.
// You can construct a concrete instance of `DataSetOutputColumnInput` via:
//
//          DataSetOutputColumnArgs{...}
type DataSetOutputColumnInput interface {
	pulumi.Input

	ToDataSetOutputColumnOutput() DataSetOutputColumnOutput
	ToDataSetOutputColumnOutputWithContext(context.Context) DataSetOutputColumnOutput
}

// <p>Output column.</p>
type DataSetOutputColumnArgs struct {
	// <p>A description for a column.</p>
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <p>A display name for the dataset.</p>
	Name pulumi.StringPtrInput         `pulumi:"name"`
	Type DataSetColumnDataTypePtrInput `pulumi:"type"`
}

func (DataSetOutputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOutputColumn)(nil)).Elem()
}

func (i DataSetOutputColumnArgs) ToDataSetOutputColumnOutput() DataSetOutputColumnOutput {
	return i.ToDataSetOutputColumnOutputWithContext(context.Background())
}

func (i DataSetOutputColumnArgs) ToDataSetOutputColumnOutputWithContext(ctx context.Context) DataSetOutputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOutputColumnOutput)
}

// DataSetOutputColumnArrayInput is an input type that accepts DataSetOutputColumnArray and DataSetOutputColumnArrayOutput values.
// You can construct a concrete instance of `DataSetOutputColumnArrayInput` via:
//
//          DataSetOutputColumnArray{ DataSetOutputColumnArgs{...} }
type DataSetOutputColumnArrayInput interface {
	pulumi.Input

	ToDataSetOutputColumnArrayOutput() DataSetOutputColumnArrayOutput
	ToDataSetOutputColumnArrayOutputWithContext(context.Context) DataSetOutputColumnArrayOutput
}

type DataSetOutputColumnArray []DataSetOutputColumnInput

func (DataSetOutputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetOutputColumn)(nil)).Elem()
}

func (i DataSetOutputColumnArray) ToDataSetOutputColumnArrayOutput() DataSetOutputColumnArrayOutput {
	return i.ToDataSetOutputColumnArrayOutputWithContext(context.Background())
}

func (i DataSetOutputColumnArray) ToDataSetOutputColumnArrayOutputWithContext(ctx context.Context) DataSetOutputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOutputColumnArrayOutput)
}

// <p>Output column.</p>
type DataSetOutputColumnOutput struct{ *pulumi.OutputState }

func (DataSetOutputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOutputColumn)(nil)).Elem()
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutput() DataSetOutputColumnOutput {
	return o
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutputWithContext(ctx context.Context) DataSetOutputColumnOutput {
	return o
}

// <p>A description for a column.</p>
func (o DataSetOutputColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>A display name for the dataset.</p>
func (o DataSetOutputColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DataSetOutputColumnOutput) Type() DataSetColumnDataTypePtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *DataSetColumnDataType { return v.Type }).(DataSetColumnDataTypePtrOutput)
}

type DataSetOutputColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetOutputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetOutputColumn)(nil)).Elem()
}

func (o DataSetOutputColumnArrayOutput) ToDataSetOutputColumnArrayOutput() DataSetOutputColumnArrayOutput {
	return o
}

func (o DataSetOutputColumnArrayOutput) ToDataSetOutputColumnArrayOutputWithContext(ctx context.Context) DataSetOutputColumnArrayOutput {
	return o
}

func (o DataSetOutputColumnArrayOutput) Index(i pulumi.IntInput) DataSetOutputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetOutputColumn {
		return vs[0].([]DataSetOutputColumn)[vs[1].(int)]
	}).(DataSetOutputColumnOutput)
}

type DataSetPhysicalTableMap struct {
}

// DataSetPhysicalTableMapInput is an input type that accepts DataSetPhysicalTableMap and DataSetPhysicalTableMapOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapInput` via:
//
//          DataSetPhysicalTableMap{ "key": DataSetPhysicalTableArgs{...} }
type DataSetPhysicalTableMapInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput
	ToDataSetPhysicalTableMapOutputWithContext(context.Context) DataSetPhysicalTableMapOutput
}

type DataSetPhysicalTableMapArgs struct {
}

func (DataSetPhysicalTableMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMap)(nil)).Elem()
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return i.ToDataSetPhysicalTableMapOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapOutput)
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapPtrOutput() DataSetPhysicalTableMapPtrOutput {
	return i.ToDataSetPhysicalTableMapPtrOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMapArgs) ToDataSetPhysicalTableMapPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapOutput).ToDataSetPhysicalTableMapPtrOutputWithContext(ctx)
}

// DataSetPhysicalTableMapPtrInput is an input type that accepts DataSetPhysicalTableMapArgs, DataSetPhysicalTableMapPtr and DataSetPhysicalTableMapPtrOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapPtrInput` via:
//
//          DataSetPhysicalTableMapArgs{...}
//
//  or:
//
//          nil
type DataSetPhysicalTableMapPtrInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapPtrOutput() DataSetPhysicalTableMapPtrOutput
	ToDataSetPhysicalTableMapPtrOutputWithContext(context.Context) DataSetPhysicalTableMapPtrOutput
}

type dataSetPhysicalTableMapPtrType DataSetPhysicalTableMapArgs

func DataSetPhysicalTableMapPtr(v *DataSetPhysicalTableMapArgs) DataSetPhysicalTableMapPtrInput {
	return (*dataSetPhysicalTableMapPtrType)(v)
}

func (*dataSetPhysicalTableMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMap)(nil)).Elem()
}

func (i *dataSetPhysicalTableMapPtrType) ToDataSetPhysicalTableMapPtrOutput() DataSetPhysicalTableMapPtrOutput {
	return i.ToDataSetPhysicalTableMapPtrOutputWithContext(context.Background())
}

func (i *dataSetPhysicalTableMapPtrType) ToDataSetPhysicalTableMapPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapPtrOutput)
}

type DataSetPhysicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTableMap)(nil)).Elem()
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return o
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return o
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapPtrOutput() DataSetPhysicalTableMapPtrOutput {
	return o.ToDataSetPhysicalTableMapPtrOutputWithContext(context.Background())
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetPhysicalTableMap) *DataSetPhysicalTableMap {
		return &v
	}).(DataSetPhysicalTableMapPtrOutput)
}

type DataSetPhysicalTableMapPtrOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPhysicalTableMap)(nil)).Elem()
}

func (o DataSetPhysicalTableMapPtrOutput) ToDataSetPhysicalTableMapPtrOutput() DataSetPhysicalTableMapPtrOutput {
	return o
}

func (o DataSetPhysicalTableMapPtrOutput) ToDataSetPhysicalTableMapPtrOutputWithContext(ctx context.Context) DataSetPhysicalTableMapPtrOutput {
	return o
}

func (o DataSetPhysicalTableMapPtrOutput) Elem() DataSetPhysicalTableMapOutput {
	return o.ApplyT(func(v *DataSetPhysicalTableMap) DataSetPhysicalTableMap {
		if v != nil {
			return *v
		}
		var ret DataSetPhysicalTableMap
		return ret
	}).(DataSetPhysicalTableMapOutput)
}

// <p>Permission for the resource.</p>
type DataSetResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// DataSetResourcePermissionInput is an input type that accepts DataSetResourcePermissionArgs and DataSetResourcePermissionOutput values.
// You can construct a concrete instance of `DataSetResourcePermissionInput` via:
//
//          DataSetResourcePermissionArgs{...}
type DataSetResourcePermissionInput interface {
	pulumi.Input

	ToDataSetResourcePermissionOutput() DataSetResourcePermissionOutput
	ToDataSetResourcePermissionOutputWithContext(context.Context) DataSetResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type DataSetResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DataSetResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetResourcePermission)(nil)).Elem()
}

func (i DataSetResourcePermissionArgs) ToDataSetResourcePermissionOutput() DataSetResourcePermissionOutput {
	return i.ToDataSetResourcePermissionOutputWithContext(context.Background())
}

func (i DataSetResourcePermissionArgs) ToDataSetResourcePermissionOutputWithContext(ctx context.Context) DataSetResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetResourcePermissionOutput)
}

// DataSetResourcePermissionArrayInput is an input type that accepts DataSetResourcePermissionArray and DataSetResourcePermissionArrayOutput values.
// You can construct a concrete instance of `DataSetResourcePermissionArrayInput` via:
//
//          DataSetResourcePermissionArray{ DataSetResourcePermissionArgs{...} }
type DataSetResourcePermissionArrayInput interface {
	pulumi.Input

	ToDataSetResourcePermissionArrayOutput() DataSetResourcePermissionArrayOutput
	ToDataSetResourcePermissionArrayOutputWithContext(context.Context) DataSetResourcePermissionArrayOutput
}

type DataSetResourcePermissionArray []DataSetResourcePermissionInput

func (DataSetResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetResourcePermission)(nil)).Elem()
}

func (i DataSetResourcePermissionArray) ToDataSetResourcePermissionArrayOutput() DataSetResourcePermissionArrayOutput {
	return i.ToDataSetResourcePermissionArrayOutputWithContext(context.Background())
}

func (i DataSetResourcePermissionArray) ToDataSetResourcePermissionArrayOutputWithContext(ctx context.Context) DataSetResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type DataSetResourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSetResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetResourcePermission)(nil)).Elem()
}

func (o DataSetResourcePermissionOutput) ToDataSetResourcePermissionOutput() DataSetResourcePermissionOutput {
	return o
}

func (o DataSetResourcePermissionOutput) ToDataSetResourcePermissionOutputWithContext(ctx context.Context) DataSetResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o DataSetResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//             following:</p>
//         <ul>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
//                     ARN. Use this option only to share resources (templates) across AWS accounts.
//                     (This is less common.) </p>
//             </li>
//          </ul>
func (o DataSetResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DataSetResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSetResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetResourcePermission)(nil)).Elem()
}

func (o DataSetResourcePermissionArrayOutput) ToDataSetResourcePermissionArrayOutput() DataSetResourcePermissionArrayOutput {
	return o
}

func (o DataSetResourcePermissionArrayOutput) ToDataSetResourcePermissionArrayOutputWithContext(ctx context.Context) DataSetResourcePermissionArrayOutput {
	return o
}

func (o DataSetResourcePermissionArrayOutput) Index(i pulumi.IntInput) DataSetResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetResourcePermission {
		return vs[0].([]DataSetResourcePermission)[vs[1].(int)]
	}).(DataSetResourcePermissionOutput)
}

// <p>The row-level security configuration for the dataset.</p>
type DataSetRowLevelPermissionDataSet struct {
	// <p>The Amazon Resource Name (ARN) of the permission dataset.</p>
	Arn           string                                  `pulumi:"arn"`
	FormatVersion *DataSetRowLevelPermissionFormatVersion `pulumi:"formatVersion"`
	// <p>The namespace associated with the row-level permissions dataset.</p>
	Namespace        *string                         `pulumi:"namespace"`
	PermissionPolicy DataSetRowLevelPermissionPolicy `pulumi:"permissionPolicy"`
}

// DataSetRowLevelPermissionDataSetInput is an input type that accepts DataSetRowLevelPermissionDataSetArgs and DataSetRowLevelPermissionDataSetOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionDataSetInput` via:
//
//          DataSetRowLevelPermissionDataSetArgs{...}
type DataSetRowLevelPermissionDataSetInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput
	ToDataSetRowLevelPermissionDataSetOutputWithContext(context.Context) DataSetRowLevelPermissionDataSetOutput
}

// <p>The row-level security configuration for the dataset.</p>
type DataSetRowLevelPermissionDataSetArgs struct {
	// <p>The Amazon Resource Name (ARN) of the permission dataset.</p>
	Arn           pulumi.StringInput                             `pulumi:"arn"`
	FormatVersion DataSetRowLevelPermissionFormatVersionPtrInput `pulumi:"formatVersion"`
	// <p>The namespace associated with the row-level permissions dataset.</p>
	Namespace        pulumi.StringPtrInput                `pulumi:"namespace"`
	PermissionPolicy DataSetRowLevelPermissionPolicyInput `pulumi:"permissionPolicy"`
}

func (DataSetRowLevelPermissionDataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return i.ToDataSetRowLevelPermissionDataSetOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetOutput)
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return i.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetOutput).ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx)
}

// DataSetRowLevelPermissionDataSetPtrInput is an input type that accepts DataSetRowLevelPermissionDataSetArgs, DataSetRowLevelPermissionDataSetPtr and DataSetRowLevelPermissionDataSetPtrOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionDataSetPtrInput` via:
//
//          DataSetRowLevelPermissionDataSetArgs{...}
//
//  or:
//
//          nil
type DataSetRowLevelPermissionDataSetPtrInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput
	ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Context) DataSetRowLevelPermissionDataSetPtrOutput
}

type dataSetRowLevelPermissionDataSetPtrType DataSetRowLevelPermissionDataSetArgs

func DataSetRowLevelPermissionDataSetPtr(v *DataSetRowLevelPermissionDataSetArgs) DataSetRowLevelPermissionDataSetPtrInput {
	return (*dataSetRowLevelPermissionDataSetPtrType)(v)
}

func (*dataSetRowLevelPermissionDataSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i *dataSetRowLevelPermissionDataSetPtrType) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return i.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (i *dataSetRowLevelPermissionDataSetPtrType) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetPtrOutput)
}

// <p>The row-level security configuration for the dataset.</p>
type DataSetRowLevelPermissionDataSetOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionDataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionDataSet {
		return &v
	}).(DataSetRowLevelPermissionDataSetPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the permission dataset.</p>
func (o DataSetRowLevelPermissionDataSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) string { return v.Arn }).(pulumi.StringOutput)
}

func (o DataSetRowLevelPermissionDataSetOutput) FormatVersion() DataSetRowLevelPermissionFormatVersionPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionFormatVersion {
		return v.FormatVersion
	}).(DataSetRowLevelPermissionFormatVersionPtrOutput)
}

// <p>The namespace associated with the row-level permissions dataset.</p>
func (o DataSetRowLevelPermissionDataSetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o DataSetRowLevelPermissionDataSetOutput) PermissionPolicy() DataSetRowLevelPermissionPolicyOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) DataSetRowLevelPermissionPolicy { return v.PermissionPolicy }).(DataSetRowLevelPermissionPolicyOutput)
}

type DataSetRowLevelPermissionDataSetPtrOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionDataSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) Elem() DataSetRowLevelPermissionDataSetOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) DataSetRowLevelPermissionDataSet {
		if v != nil {
			return *v
		}
		var ret DataSetRowLevelPermissionDataSet
		return ret
	}).(DataSetRowLevelPermissionDataSetOutput)
}

// <p>The Amazon Resource Name (ARN) of the permission dataset.</p>
func (o DataSetRowLevelPermissionDataSetPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) FormatVersion() DataSetRowLevelPermissionFormatVersionPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionFormatVersion {
		if v == nil {
			return nil
		}
		return v.FormatVersion
	}).(DataSetRowLevelPermissionFormatVersionPtrOutput)
}

// <p>The namespace associated with the row-level permissions dataset.</p>
func (o DataSetRowLevelPermissionDataSetPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) PermissionPolicy() DataSetRowLevelPermissionPolicyPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionPolicy {
		if v == nil {
			return nil
		}
		return &v.PermissionPolicy
	}).(DataSetRowLevelPermissionPolicyPtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DataSetTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// DataSetTagInput is an input type that accepts DataSetTagArgs and DataSetTagOutput values.
// You can construct a concrete instance of `DataSetTagInput` via:
//
//          DataSetTagArgs{...}
type DataSetTagInput interface {
	pulumi.Input

	ToDataSetTagOutput() DataSetTagOutput
	ToDataSetTagOutputWithContext(context.Context) DataSetTagOutput
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DataSetTagArgs struct {
	// <p>Tag key.</p>
	Key pulumi.StringInput `pulumi:"key"`
	// <p>Tag value.</p>
	Value pulumi.StringInput `pulumi:"value"`
}

func (DataSetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTag)(nil)).Elem()
}

func (i DataSetTagArgs) ToDataSetTagOutput() DataSetTagOutput {
	return i.ToDataSetTagOutputWithContext(context.Background())
}

func (i DataSetTagArgs) ToDataSetTagOutputWithContext(ctx context.Context) DataSetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetTagOutput)
}

// DataSetTagArrayInput is an input type that accepts DataSetTagArray and DataSetTagArrayOutput values.
// You can construct a concrete instance of `DataSetTagArrayInput` via:
//
//          DataSetTagArray{ DataSetTagArgs{...} }
type DataSetTagArrayInput interface {
	pulumi.Input

	ToDataSetTagArrayOutput() DataSetTagArrayOutput
	ToDataSetTagArrayOutputWithContext(context.Context) DataSetTagArrayOutput
}

type DataSetTagArray []DataSetTagInput

func (DataSetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetTag)(nil)).Elem()
}

func (i DataSetTagArray) ToDataSetTagArrayOutput() DataSetTagArrayOutput {
	return i.ToDataSetTagArrayOutputWithContext(context.Background())
}

func (i DataSetTagArray) ToDataSetTagArrayOutputWithContext(ctx context.Context) DataSetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetTagArrayOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DataSetTagOutput struct{ *pulumi.OutputState }

func (DataSetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTag)(nil)).Elem()
}

func (o DataSetTagOutput) ToDataSetTagOutput() DataSetTagOutput {
	return o
}

func (o DataSetTagOutput) ToDataSetTagOutputWithContext(ctx context.Context) DataSetTagOutput {
	return o
}

// <p>Tag key.</p>
func (o DataSetTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetTag) string { return v.Key }).(pulumi.StringOutput)
}

// <p>Tag value.</p>
func (o DataSetTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetTag) string { return v.Value }).(pulumi.StringOutput)
}

type DataSetTagArrayOutput struct{ *pulumi.OutputState }

func (DataSetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetTag)(nil)).Elem()
}

func (o DataSetTagArrayOutput) ToDataSetTagArrayOutput() DataSetTagArrayOutput {
	return o
}

func (o DataSetTagArrayOutput) ToDataSetTagArrayOutputWithContext(ctx context.Context) DataSetTagArrayOutput {
	return o
}

func (o DataSetTagArrayOutput) Index(i pulumi.IntInput) DataSetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetTag {
		return vs[0].([]DataSetTag)[vs[1].(int)]
	}).(DataSetTagOutput)
}

// <p>Amazon Elasticsearch Service parameters.</p>
type DataSourceAmazonElasticsearchParameters struct {
	// <p>The Amazon Elasticsearch Service domain.</p>
	Domain string `pulumi:"domain"`
}

// DataSourceAmazonElasticsearchParametersInput is an input type that accepts DataSourceAmazonElasticsearchParametersArgs and DataSourceAmazonElasticsearchParametersOutput values.
// You can construct a concrete instance of `DataSourceAmazonElasticsearchParametersInput` via:
//
//          DataSourceAmazonElasticsearchParametersArgs{...}
type DataSourceAmazonElasticsearchParametersInput interface {
	pulumi.Input

	ToDataSourceAmazonElasticsearchParametersOutput() DataSourceAmazonElasticsearchParametersOutput
	ToDataSourceAmazonElasticsearchParametersOutputWithContext(context.Context) DataSourceAmazonElasticsearchParametersOutput
}

// <p>Amazon Elasticsearch Service parameters.</p>
type DataSourceAmazonElasticsearchParametersArgs struct {
	// <p>The Amazon Elasticsearch Service domain.</p>
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (DataSourceAmazonElasticsearchParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersOutput() DataSourceAmazonElasticsearchParametersOutput {
	return i.ToDataSourceAmazonElasticsearchParametersOutputWithContext(context.Background())
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonElasticsearchParametersOutput)
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return i.ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonElasticsearchParametersOutput).ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx)
}

// DataSourceAmazonElasticsearchParametersPtrInput is an input type that accepts DataSourceAmazonElasticsearchParametersArgs, DataSourceAmazonElasticsearchParametersPtr and DataSourceAmazonElasticsearchParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAmazonElasticsearchParametersPtrInput` via:
//
//          DataSourceAmazonElasticsearchParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceAmazonElasticsearchParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput
	ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Context) DataSourceAmazonElasticsearchParametersPtrOutput
}

type dataSourceAmazonElasticsearchParametersPtrType DataSourceAmazonElasticsearchParametersArgs

func DataSourceAmazonElasticsearchParametersPtr(v *DataSourceAmazonElasticsearchParametersArgs) DataSourceAmazonElasticsearchParametersPtrInput {
	return (*dataSourceAmazonElasticsearchParametersPtrType)(v)
}

func (*dataSourceAmazonElasticsearchParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (i *dataSourceAmazonElasticsearchParametersPtrType) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return i.ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAmazonElasticsearchParametersPtrType) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

// <p>Amazon Elasticsearch Service parameters.</p>
type DataSourceAmazonElasticsearchParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonElasticsearchParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersOutput() DataSourceAmazonElasticsearchParametersOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAmazonElasticsearchParameters) *DataSourceAmazonElasticsearchParameters {
		return &v
	}).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

// <p>The Amazon Elasticsearch Service domain.</p>
func (o DataSourceAmazonElasticsearchParametersOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAmazonElasticsearchParameters) string { return v.Domain }).(pulumi.StringOutput)
}

type DataSourceAmazonElasticsearchParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonElasticsearchParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonElasticsearchParametersPtrOutput) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersPtrOutput) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersPtrOutput) Elem() DataSourceAmazonElasticsearchParametersOutput {
	return o.ApplyT(func(v *DataSourceAmazonElasticsearchParameters) DataSourceAmazonElasticsearchParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAmazonElasticsearchParameters
		return ret
	}).(DataSourceAmazonElasticsearchParametersOutput)
}

// <p>The Amazon Elasticsearch Service domain.</p>
func (o DataSourceAmazonElasticsearchParametersPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAmazonElasticsearchParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// <p>Amazon OpenSearch Service parameters.</p>
type DataSourceAmazonOpenSearchParameters struct {
	// <p>The Amazon OpenSearch Service domain.</p>
	Domain string `pulumi:"domain"`
}

// DataSourceAmazonOpenSearchParametersInput is an input type that accepts DataSourceAmazonOpenSearchParametersArgs and DataSourceAmazonOpenSearchParametersOutput values.
// You can construct a concrete instance of `DataSourceAmazonOpenSearchParametersInput` via:
//
//          DataSourceAmazonOpenSearchParametersArgs{...}
type DataSourceAmazonOpenSearchParametersInput interface {
	pulumi.Input

	ToDataSourceAmazonOpenSearchParametersOutput() DataSourceAmazonOpenSearchParametersOutput
	ToDataSourceAmazonOpenSearchParametersOutputWithContext(context.Context) DataSourceAmazonOpenSearchParametersOutput
}

// <p>Amazon OpenSearch Service parameters.</p>
type DataSourceAmazonOpenSearchParametersArgs struct {
	// <p>The Amazon OpenSearch Service domain.</p>
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (DataSourceAmazonOpenSearchParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersOutput() DataSourceAmazonOpenSearchParametersOutput {
	return i.ToDataSourceAmazonOpenSearchParametersOutputWithContext(context.Background())
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonOpenSearchParametersOutput)
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return i.ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonOpenSearchParametersOutput).ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx)
}

// DataSourceAmazonOpenSearchParametersPtrInput is an input type that accepts DataSourceAmazonOpenSearchParametersArgs, DataSourceAmazonOpenSearchParametersPtr and DataSourceAmazonOpenSearchParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAmazonOpenSearchParametersPtrInput` via:
//
//          DataSourceAmazonOpenSearchParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceAmazonOpenSearchParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput
	ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Context) DataSourceAmazonOpenSearchParametersPtrOutput
}

type dataSourceAmazonOpenSearchParametersPtrType DataSourceAmazonOpenSearchParametersArgs

func DataSourceAmazonOpenSearchParametersPtr(v *DataSourceAmazonOpenSearchParametersArgs) DataSourceAmazonOpenSearchParametersPtrInput {
	return (*dataSourceAmazonOpenSearchParametersPtrType)(v)
}

func (*dataSourceAmazonOpenSearchParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (i *dataSourceAmazonOpenSearchParametersPtrType) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return i.ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAmazonOpenSearchParametersPtrType) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

// <p>Amazon OpenSearch Service parameters.</p>
type DataSourceAmazonOpenSearchParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonOpenSearchParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersOutput() DataSourceAmazonOpenSearchParametersOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAmazonOpenSearchParameters) *DataSourceAmazonOpenSearchParameters {
		return &v
	}).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

// <p>The Amazon OpenSearch Service domain.</p>
func (o DataSourceAmazonOpenSearchParametersOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAmazonOpenSearchParameters) string { return v.Domain }).(pulumi.StringOutput)
}

type DataSourceAmazonOpenSearchParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonOpenSearchParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonOpenSearchParametersPtrOutput) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersPtrOutput) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersPtrOutput) Elem() DataSourceAmazonOpenSearchParametersOutput {
	return o.ApplyT(func(v *DataSourceAmazonOpenSearchParameters) DataSourceAmazonOpenSearchParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAmazonOpenSearchParameters
		return ret
	}).(DataSourceAmazonOpenSearchParametersOutput)
}

// <p>The Amazon OpenSearch Service domain.</p>
func (o DataSourceAmazonOpenSearchParametersPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAmazonOpenSearchParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// <p>Amazon Athena parameters.</p>
type DataSourceAthenaParameters struct {
	// <p>The workgroup that Amazon Athena uses.</p>
	WorkGroup *string `pulumi:"workGroup"`
}

// DataSourceAthenaParametersInput is an input type that accepts DataSourceAthenaParametersArgs and DataSourceAthenaParametersOutput values.
// You can construct a concrete instance of `DataSourceAthenaParametersInput` via:
//
//          DataSourceAthenaParametersArgs{...}
type DataSourceAthenaParametersInput interface {
	pulumi.Input

	ToDataSourceAthenaParametersOutput() DataSourceAthenaParametersOutput
	ToDataSourceAthenaParametersOutputWithContext(context.Context) DataSourceAthenaParametersOutput
}

// <p>Amazon Athena parameters.</p>
type DataSourceAthenaParametersArgs struct {
	// <p>The workgroup that Amazon Athena uses.</p>
	WorkGroup pulumi.StringPtrInput `pulumi:"workGroup"`
}

func (DataSourceAthenaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAthenaParameters)(nil)).Elem()
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersOutput() DataSourceAthenaParametersOutput {
	return i.ToDataSourceAthenaParametersOutputWithContext(context.Background())
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersOutputWithContext(ctx context.Context) DataSourceAthenaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAthenaParametersOutput)
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return i.ToDataSourceAthenaParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAthenaParametersOutput).ToDataSourceAthenaParametersPtrOutputWithContext(ctx)
}

// DataSourceAthenaParametersPtrInput is an input type that accepts DataSourceAthenaParametersArgs, DataSourceAthenaParametersPtr and DataSourceAthenaParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAthenaParametersPtrInput` via:
//
//          DataSourceAthenaParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceAthenaParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput
	ToDataSourceAthenaParametersPtrOutputWithContext(context.Context) DataSourceAthenaParametersPtrOutput
}

type dataSourceAthenaParametersPtrType DataSourceAthenaParametersArgs

func DataSourceAthenaParametersPtr(v *DataSourceAthenaParametersArgs) DataSourceAthenaParametersPtrInput {
	return (*dataSourceAthenaParametersPtrType)(v)
}

func (*dataSourceAthenaParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAthenaParameters)(nil)).Elem()
}

func (i *dataSourceAthenaParametersPtrType) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return i.ToDataSourceAthenaParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAthenaParametersPtrType) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAthenaParametersPtrOutput)
}

// <p>Amazon Athena parameters.</p>
type DataSourceAthenaParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAthenaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAthenaParameters)(nil)).Elem()
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersOutput() DataSourceAthenaParametersOutput {
	return o
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersOutputWithContext(ctx context.Context) DataSourceAthenaParametersOutput {
	return o
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return o.ToDataSourceAthenaParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAthenaParameters) *DataSourceAthenaParameters {
		return &v
	}).(DataSourceAthenaParametersPtrOutput)
}

// <p>The workgroup that Amazon Athena uses.</p>
func (o DataSourceAthenaParametersOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceAthenaParameters) *string { return v.WorkGroup }).(pulumi.StringPtrOutput)
}

type DataSourceAthenaParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAthenaParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAthenaParameters)(nil)).Elem()
}

func (o DataSourceAthenaParametersPtrOutput) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return o
}

func (o DataSourceAthenaParametersPtrOutput) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return o
}

func (o DataSourceAthenaParametersPtrOutput) Elem() DataSourceAthenaParametersOutput {
	return o.ApplyT(func(v *DataSourceAthenaParameters) DataSourceAthenaParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAthenaParameters
		return ret
	}).(DataSourceAthenaParametersOutput)
}

// <p>The workgroup that Amazon Athena uses.</p>
func (o DataSourceAthenaParametersPtrOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAthenaParameters) *string {
		if v == nil {
			return nil
		}
		return v.WorkGroup
	}).(pulumi.StringPtrOutput)
}

// <p>Amazon Aurora parameters.</p>
type DataSourceAuroraParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceAuroraParametersInput is an input type that accepts DataSourceAuroraParametersArgs and DataSourceAuroraParametersOutput values.
// You can construct a concrete instance of `DataSourceAuroraParametersInput` via:
//
//          DataSourceAuroraParametersArgs{...}
type DataSourceAuroraParametersInput interface {
	pulumi.Input

	ToDataSourceAuroraParametersOutput() DataSourceAuroraParametersOutput
	ToDataSourceAuroraParametersOutputWithContext(context.Context) DataSourceAuroraParametersOutput
}

// <p>Amazon Aurora parameters.</p>
type DataSourceAuroraParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceAuroraParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraParameters)(nil)).Elem()
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersOutput() DataSourceAuroraParametersOutput {
	return i.ToDataSourceAuroraParametersOutputWithContext(context.Background())
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersOutputWithContext(ctx context.Context) DataSourceAuroraParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraParametersOutput)
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return i.ToDataSourceAuroraParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraParametersOutput).ToDataSourceAuroraParametersPtrOutputWithContext(ctx)
}

// DataSourceAuroraParametersPtrInput is an input type that accepts DataSourceAuroraParametersArgs, DataSourceAuroraParametersPtr and DataSourceAuroraParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAuroraParametersPtrInput` via:
//
//          DataSourceAuroraParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceAuroraParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput
	ToDataSourceAuroraParametersPtrOutputWithContext(context.Context) DataSourceAuroraParametersPtrOutput
}

type dataSourceAuroraParametersPtrType DataSourceAuroraParametersArgs

func DataSourceAuroraParametersPtr(v *DataSourceAuroraParametersArgs) DataSourceAuroraParametersPtrInput {
	return (*dataSourceAuroraParametersPtrType)(v)
}

func (*dataSourceAuroraParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraParameters)(nil)).Elem()
}

func (i *dataSourceAuroraParametersPtrType) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return i.ToDataSourceAuroraParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAuroraParametersPtrType) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraParametersPtrOutput)
}

// <p>Amazon Aurora parameters.</p>
type DataSourceAuroraParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraParameters)(nil)).Elem()
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersOutput() DataSourceAuroraParametersOutput {
	return o
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersOutputWithContext(ctx context.Context) DataSourceAuroraParametersOutput {
	return o
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return o.ToDataSourceAuroraParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAuroraParameters) *DataSourceAuroraParameters {
		return &v
	}).(DataSourceAuroraParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceAuroraParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceAuroraParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceAuroraParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceAuroraParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceAuroraParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraParameters)(nil)).Elem()
}

func (o DataSourceAuroraParametersPtrOutput) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return o
}

func (o DataSourceAuroraParametersPtrOutput) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return o
}

func (o DataSourceAuroraParametersPtrOutput) Elem() DataSourceAuroraParametersOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) DataSourceAuroraParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAuroraParameters
		return ret
	}).(DataSourceAuroraParametersOutput)
}

// <p>Database.</p>
func (o DataSourceAuroraParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceAuroraParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceAuroraParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Amazon Aurora with PostgreSQL compatibility parameters.</p>
type DataSourceAuroraPostgreSqlParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceAuroraPostgreSqlParametersInput is an input type that accepts DataSourceAuroraPostgreSqlParametersArgs and DataSourceAuroraPostgreSqlParametersOutput values.
// You can construct a concrete instance of `DataSourceAuroraPostgreSqlParametersInput` via:
//
//          DataSourceAuroraPostgreSqlParametersArgs{...}
type DataSourceAuroraPostgreSqlParametersInput interface {
	pulumi.Input

	ToDataSourceAuroraPostgreSqlParametersOutput() DataSourceAuroraPostgreSqlParametersOutput
	ToDataSourceAuroraPostgreSqlParametersOutputWithContext(context.Context) DataSourceAuroraPostgreSqlParametersOutput
}

// <p>Amazon Aurora with PostgreSQL compatibility parameters.</p>
type DataSourceAuroraPostgreSqlParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceAuroraPostgreSqlParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersOutput() DataSourceAuroraPostgreSqlParametersOutput {
	return i.ToDataSourceAuroraPostgreSqlParametersOutputWithContext(context.Background())
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraPostgreSqlParametersOutput)
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return i.ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraPostgreSqlParametersOutput).ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx)
}

// DataSourceAuroraPostgreSqlParametersPtrInput is an input type that accepts DataSourceAuroraPostgreSqlParametersArgs, DataSourceAuroraPostgreSqlParametersPtr and DataSourceAuroraPostgreSqlParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAuroraPostgreSqlParametersPtrInput` via:
//
//          DataSourceAuroraPostgreSqlParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceAuroraPostgreSqlParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput
	ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput
}

type dataSourceAuroraPostgreSqlParametersPtrType DataSourceAuroraPostgreSqlParametersArgs

func DataSourceAuroraPostgreSqlParametersPtr(v *DataSourceAuroraPostgreSqlParametersArgs) DataSourceAuroraPostgreSqlParametersPtrInput {
	return (*dataSourceAuroraPostgreSqlParametersPtrType)(v)
}

func (*dataSourceAuroraPostgreSqlParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (i *dataSourceAuroraPostgreSqlParametersPtrType) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return i.ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAuroraPostgreSqlParametersPtrType) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

// <p>Amazon Aurora with PostgreSQL compatibility parameters.</p>
type DataSourceAuroraPostgreSqlParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraPostgreSqlParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersOutput() DataSourceAuroraPostgreSqlParametersOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAuroraPostgreSqlParameters) *DataSourceAuroraPostgreSqlParameters {
		return &v
	}).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceAuroraPostgreSqlParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraPostgreSqlParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceAuroraPostgreSqlParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraPostgreSqlParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceAuroraPostgreSqlParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceAuroraPostgreSqlParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceAuroraPostgreSqlParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraPostgreSqlParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (o DataSourceAuroraPostgreSqlParametersPtrOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersPtrOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Elem() DataSourceAuroraPostgreSqlParametersOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) DataSourceAuroraPostgreSqlParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAuroraPostgreSqlParameters
		return ret
	}).(DataSourceAuroraPostgreSqlParametersOutput)
}

// <p>Database.</p>
func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The combination of user name and password that are used as credentials.</p>
type DataSourceCredentialPair struct {
	// <p>A set of alternate data source parameters that you want to share for these
	//             credentials. The credentials are applied in tandem with the data source parameters when
	//             you copy a data source by using a create or update request. The API operation compares
	//             the <code>DataSourceParameters</code> structure that's in the request with the
	//             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
	//             structures are an exact match, the request is allowed to use the new data source with
	//             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
	//             null, the <code>DataSourceParameters</code> originally used with these
	//                 <code>Credentials</code> is automatically allowed.</p>
	AlternateDataSourceParameters []DataSourceParameters `pulumi:"alternateDataSourceParameters"`
	// <p>Password.</p>
	Password string `pulumi:"password"`
	// <p>User name.</p>
	Username string `pulumi:"username"`
}

// DataSourceCredentialPairInput is an input type that accepts DataSourceCredentialPairArgs and DataSourceCredentialPairOutput values.
// You can construct a concrete instance of `DataSourceCredentialPairInput` via:
//
//          DataSourceCredentialPairArgs{...}
type DataSourceCredentialPairInput interface {
	pulumi.Input

	ToDataSourceCredentialPairOutput() DataSourceCredentialPairOutput
	ToDataSourceCredentialPairOutputWithContext(context.Context) DataSourceCredentialPairOutput
}

// <p>The combination of user name and password that are used as credentials.</p>
type DataSourceCredentialPairArgs struct {
	// <p>A set of alternate data source parameters that you want to share for these
	//             credentials. The credentials are applied in tandem with the data source parameters when
	//             you copy a data source by using a create or update request. The API operation compares
	//             the <code>DataSourceParameters</code> structure that's in the request with the
	//             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
	//             structures are an exact match, the request is allowed to use the new data source with
	//             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
	//             null, the <code>DataSourceParameters</code> originally used with these
	//                 <code>Credentials</code> is automatically allowed.</p>
	AlternateDataSourceParameters DataSourceParametersArrayInput `pulumi:"alternateDataSourceParameters"`
	// <p>Password.</p>
	Password pulumi.StringInput `pulumi:"password"`
	// <p>User name.</p>
	Username pulumi.StringInput `pulumi:"username"`
}

func (DataSourceCredentialPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialPair)(nil)).Elem()
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairOutput() DataSourceCredentialPairOutput {
	return i.ToDataSourceCredentialPairOutputWithContext(context.Background())
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialPairOutput)
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return i.ToDataSourceCredentialPairPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialPairOutput).ToDataSourceCredentialPairPtrOutputWithContext(ctx)
}

// DataSourceCredentialPairPtrInput is an input type that accepts DataSourceCredentialPairArgs, DataSourceCredentialPairPtr and DataSourceCredentialPairPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialPairPtrInput` via:
//
//          DataSourceCredentialPairArgs{...}
//
//  or:
//
//          nil
type DataSourceCredentialPairPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput
	ToDataSourceCredentialPairPtrOutputWithContext(context.Context) DataSourceCredentialPairPtrOutput
}

type dataSourceCredentialPairPtrType DataSourceCredentialPairArgs

func DataSourceCredentialPairPtr(v *DataSourceCredentialPairArgs) DataSourceCredentialPairPtrInput {
	return (*dataSourceCredentialPairPtrType)(v)
}

func (*dataSourceCredentialPairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialPair)(nil)).Elem()
}

func (i *dataSourceCredentialPairPtrType) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return i.ToDataSourceCredentialPairPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialPairPtrType) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialPairPtrOutput)
}

// <p>The combination of user name and password that are used as credentials.</p>
type DataSourceCredentialPairOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairOutput() DataSourceCredentialPairOutput {
	return o
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialPairOutput {
	return o
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return o.ToDataSourceCredentialPairPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentialPair) *DataSourceCredentialPair {
		return &v
	}).(DataSourceCredentialPairPtrOutput)
}

// <p>A set of alternate data source parameters that you want to share for these
//             credentials. The credentials are applied in tandem with the data source parameters when
//             you copy a data source by using a create or update request. The API operation compares
//             the <code>DataSourceParameters</code> structure that's in the request with the
//             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
//             structures are an exact match, the request is allowed to use the new data source with
//             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
//             null, the <code>DataSourceParameters</code> originally used with these
//                 <code>Credentials</code> is automatically allowed.</p>
func (o DataSourceCredentialPairOutput) AlternateDataSourceParameters() DataSourceParametersArrayOutput {
	return o.ApplyT(func(v DataSourceCredentialPair) []DataSourceParameters { return v.AlternateDataSourceParameters }).(DataSourceParametersArrayOutput)
}

// <p>Password.</p>
func (o DataSourceCredentialPairOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialPair) string { return v.Password }).(pulumi.StringOutput)
}

// <p>User name.</p>
func (o DataSourceCredentialPairOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialPair) string { return v.Username }).(pulumi.StringOutput)
}

type DataSourceCredentialPairPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialPairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialPairPtrOutput) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialPairPtrOutput) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialPairPtrOutput) Elem() DataSourceCredentialPairOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) DataSourceCredentialPair {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentialPair
		return ret
	}).(DataSourceCredentialPairOutput)
}

// <p>A set of alternate data source parameters that you want to share for these
//             credentials. The credentials are applied in tandem with the data source parameters when
//             you copy a data source by using a create or update request. The API operation compares
//             the <code>DataSourceParameters</code> structure that's in the request with the
//             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
//             structures are an exact match, the request is allowed to use the new data source with
//             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
//             null, the <code>DataSourceParameters</code> originally used with these
//                 <code>Credentials</code> is automatically allowed.</p>
func (o DataSourceCredentialPairPtrOutput) AlternateDataSourceParameters() DataSourceParametersArrayOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) []DataSourceParameters {
		if v == nil {
			return nil
		}
		return v.AlternateDataSourceParameters
	}).(DataSourceParametersArrayOutput)
}

// <p>Password.</p>
func (o DataSourceCredentialPairPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// <p>User name.</p>
func (o DataSourceCredentialPairPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// <p>Data source credentials. This is a variant type structure. For this structure to be
//             valid, only one of the attributes can be non-null.</p>
type DataSourceCredentials struct {
	// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
	//             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
	//             data source in the ARN is used as the credentials for the
	//             <code>DataSourceCredentials</code> structure.</p>
	CopySourceArn  *string                   `pulumi:"copySourceArn"`
	CredentialPair *DataSourceCredentialPair `pulumi:"credentialPair"`
}

// DataSourceCredentialsInput is an input type that accepts DataSourceCredentialsArgs and DataSourceCredentialsOutput values.
// You can construct a concrete instance of `DataSourceCredentialsInput` via:
//
//          DataSourceCredentialsArgs{...}
type DataSourceCredentialsInput interface {
	pulumi.Input

	ToDataSourceCredentialsOutput() DataSourceCredentialsOutput
	ToDataSourceCredentialsOutputWithContext(context.Context) DataSourceCredentialsOutput
}

// <p>Data source credentials. This is a variant type structure. For this structure to be
//             valid, only one of the attributes can be non-null.</p>
type DataSourceCredentialsArgs struct {
	// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
	//             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
	//             data source in the ARN is used as the credentials for the
	//             <code>DataSourceCredentials</code> structure.</p>
	CopySourceArn  pulumi.StringPtrInput            `pulumi:"copySourceArn"`
	CredentialPair DataSourceCredentialPairPtrInput `pulumi:"credentialPair"`
}

func (DataSourceCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return i.ToDataSourceCredentialsOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput)
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput).ToDataSourceCredentialsPtrOutputWithContext(ctx)
}

// DataSourceCredentialsPtrInput is an input type that accepts DataSourceCredentialsArgs, DataSourceCredentialsPtr and DataSourceCredentialsPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialsPtrInput` via:
//
//          DataSourceCredentialsArgs{...}
//
//  or:
//
//          nil
type DataSourceCredentialsPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput
	ToDataSourceCredentialsPtrOutputWithContext(context.Context) DataSourceCredentialsPtrOutput
}

type dataSourceCredentialsPtrType DataSourceCredentialsArgs

func DataSourceCredentialsPtr(v *DataSourceCredentialsArgs) DataSourceCredentialsPtrInput {
	return (*dataSourceCredentialsPtrType)(v)
}

func (*dataSourceCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsPtrOutput)
}

// <p>Data source credentials. This is a variant type structure. For this structure to be
//             valid, only one of the attributes can be non-null.</p>
type DataSourceCredentialsOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentials) *DataSourceCredentials {
		return &v
	}).(DataSourceCredentialsPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
//             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
//             data source in the ARN is used as the credentials for the
//             <code>DataSourceCredentials</code> structure.</p>
func (o DataSourceCredentialsOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *string { return v.CopySourceArn }).(pulumi.StringPtrOutput)
}

func (o DataSourceCredentialsOutput) CredentialPair() DataSourceCredentialPairPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *DataSourceCredentialPair { return v.CredentialPair }).(DataSourceCredentialPairPtrOutput)
}

type DataSourceCredentialsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) Elem() DataSourceCredentialsOutput {
	return o.ApplyT(func(v *DataSourceCredentials) DataSourceCredentials {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentials
		return ret
	}).(DataSourceCredentialsOutput)
}

// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
//             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
//             data source in the ARN is used as the credentials for the
//             <code>DataSourceCredentials</code> structure.</p>
func (o DataSourceCredentialsPtrOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *string {
		if v == nil {
			return nil
		}
		return v.CopySourceArn
	}).(pulumi.StringPtrOutput)
}

func (o DataSourceCredentialsPtrOutput) CredentialPair() DataSourceCredentialPairPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *DataSourceCredentialPair {
		if v == nil {
			return nil
		}
		return v.CredentialPair
	}).(DataSourceCredentialPairPtrOutput)
}

// <p>Error information for the data source creation or update.</p>
type DataSourceErrorInfo struct {
	// <p>Error message.</p>
	Message *string                  `pulumi:"message"`
	Type    *DataSourceErrorInfoType `pulumi:"type"`
}

// DataSourceErrorInfoInput is an input type that accepts DataSourceErrorInfoArgs and DataSourceErrorInfoOutput values.
// You can construct a concrete instance of `DataSourceErrorInfoInput` via:
//
//          DataSourceErrorInfoArgs{...}
type DataSourceErrorInfoInput interface {
	pulumi.Input

	ToDataSourceErrorInfoOutput() DataSourceErrorInfoOutput
	ToDataSourceErrorInfoOutputWithContext(context.Context) DataSourceErrorInfoOutput
}

// <p>Error information for the data source creation or update.</p>
type DataSourceErrorInfoArgs struct {
	// <p>Error message.</p>
	Message pulumi.StringPtrInput           `pulumi:"message"`
	Type    DataSourceErrorInfoTypePtrInput `pulumi:"type"`
}

func (DataSourceErrorInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceErrorInfo)(nil)).Elem()
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoOutput() DataSourceErrorInfoOutput {
	return i.ToDataSourceErrorInfoOutputWithContext(context.Background())
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoOutputWithContext(ctx context.Context) DataSourceErrorInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceErrorInfoOutput)
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return i.ToDataSourceErrorInfoPtrOutputWithContext(context.Background())
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceErrorInfoOutput).ToDataSourceErrorInfoPtrOutputWithContext(ctx)
}

// DataSourceErrorInfoPtrInput is an input type that accepts DataSourceErrorInfoArgs, DataSourceErrorInfoPtr and DataSourceErrorInfoPtrOutput values.
// You can construct a concrete instance of `DataSourceErrorInfoPtrInput` via:
//
//          DataSourceErrorInfoArgs{...}
//
//  or:
//
//          nil
type DataSourceErrorInfoPtrInput interface {
	pulumi.Input

	ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput
	ToDataSourceErrorInfoPtrOutputWithContext(context.Context) DataSourceErrorInfoPtrOutput
}

type dataSourceErrorInfoPtrType DataSourceErrorInfoArgs

func DataSourceErrorInfoPtr(v *DataSourceErrorInfoArgs) DataSourceErrorInfoPtrInput {
	return (*dataSourceErrorInfoPtrType)(v)
}

func (*dataSourceErrorInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceErrorInfo)(nil)).Elem()
}

func (i *dataSourceErrorInfoPtrType) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return i.ToDataSourceErrorInfoPtrOutputWithContext(context.Background())
}

func (i *dataSourceErrorInfoPtrType) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceErrorInfoPtrOutput)
}

// <p>Error information for the data source creation or update.</p>
type DataSourceErrorInfoOutput struct{ *pulumi.OutputState }

func (DataSourceErrorInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceErrorInfo)(nil)).Elem()
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoOutput() DataSourceErrorInfoOutput {
	return o
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoOutputWithContext(ctx context.Context) DataSourceErrorInfoOutput {
	return o
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return o.ToDataSourceErrorInfoPtrOutputWithContext(context.Background())
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceErrorInfo) *DataSourceErrorInfo {
		return &v
	}).(DataSourceErrorInfoPtrOutput)
}

// <p>Error message.</p>
func (o DataSourceErrorInfoOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceErrorInfo) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o DataSourceErrorInfoOutput) Type() DataSourceErrorInfoTypePtrOutput {
	return o.ApplyT(func(v DataSourceErrorInfo) *DataSourceErrorInfoType { return v.Type }).(DataSourceErrorInfoTypePtrOutput)
}

type DataSourceErrorInfoPtrOutput struct{ *pulumi.OutputState }

func (DataSourceErrorInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceErrorInfo)(nil)).Elem()
}

func (o DataSourceErrorInfoPtrOutput) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return o
}

func (o DataSourceErrorInfoPtrOutput) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return o
}

func (o DataSourceErrorInfoPtrOutput) Elem() DataSourceErrorInfoOutput {
	return o.ApplyT(func(v *DataSourceErrorInfo) DataSourceErrorInfo {
		if v != nil {
			return *v
		}
		var ret DataSourceErrorInfo
		return ret
	}).(DataSourceErrorInfoOutput)
}

// <p>Error message.</p>
func (o DataSourceErrorInfoPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceErrorInfo) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o DataSourceErrorInfoPtrOutput) Type() DataSourceErrorInfoTypePtrOutput {
	return o.ApplyT(func(v *DataSourceErrorInfo) *DataSourceErrorInfoType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(DataSourceErrorInfoTypePtrOutput)
}

// <p>Amazon S3 manifest file location.</p>
type DataSourceManifestFileLocation struct {
	// <p>Amazon S3 bucket.</p>
	Bucket string `pulumi:"bucket"`
	// <p>Amazon S3 key that identifies an object.</p>
	Key string `pulumi:"key"`
}

// DataSourceManifestFileLocationInput is an input type that accepts DataSourceManifestFileLocationArgs and DataSourceManifestFileLocationOutput values.
// You can construct a concrete instance of `DataSourceManifestFileLocationInput` via:
//
//          DataSourceManifestFileLocationArgs{...}
type DataSourceManifestFileLocationInput interface {
	pulumi.Input

	ToDataSourceManifestFileLocationOutput() DataSourceManifestFileLocationOutput
	ToDataSourceManifestFileLocationOutputWithContext(context.Context) DataSourceManifestFileLocationOutput
}

// <p>Amazon S3 manifest file location.</p>
type DataSourceManifestFileLocationArgs struct {
	// <p>Amazon S3 bucket.</p>
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// <p>Amazon S3 key that identifies an object.</p>
	Key pulumi.StringInput `pulumi:"key"`
}

func (DataSourceManifestFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceManifestFileLocation)(nil)).Elem()
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationOutput() DataSourceManifestFileLocationOutput {
	return i.ToDataSourceManifestFileLocationOutputWithContext(context.Background())
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationOutputWithContext(ctx context.Context) DataSourceManifestFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceManifestFileLocationOutput)
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return i.ToDataSourceManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceManifestFileLocationOutput).ToDataSourceManifestFileLocationPtrOutputWithContext(ctx)
}

// DataSourceManifestFileLocationPtrInput is an input type that accepts DataSourceManifestFileLocationArgs, DataSourceManifestFileLocationPtr and DataSourceManifestFileLocationPtrOutput values.
// You can construct a concrete instance of `DataSourceManifestFileLocationPtrInput` via:
//
//          DataSourceManifestFileLocationArgs{...}
//
//  or:
//
//          nil
type DataSourceManifestFileLocationPtrInput interface {
	pulumi.Input

	ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput
	ToDataSourceManifestFileLocationPtrOutputWithContext(context.Context) DataSourceManifestFileLocationPtrOutput
}

type dataSourceManifestFileLocationPtrType DataSourceManifestFileLocationArgs

func DataSourceManifestFileLocationPtr(v *DataSourceManifestFileLocationArgs) DataSourceManifestFileLocationPtrInput {
	return (*dataSourceManifestFileLocationPtrType)(v)
}

func (*dataSourceManifestFileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceManifestFileLocation)(nil)).Elem()
}

func (i *dataSourceManifestFileLocationPtrType) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return i.ToDataSourceManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i *dataSourceManifestFileLocationPtrType) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceManifestFileLocationPtrOutput)
}

// <p>Amazon S3 manifest file location.</p>
type DataSourceManifestFileLocationOutput struct{ *pulumi.OutputState }

func (DataSourceManifestFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceManifestFileLocation)(nil)).Elem()
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationOutput() DataSourceManifestFileLocationOutput {
	return o
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationOutputWithContext(ctx context.Context) DataSourceManifestFileLocationOutput {
	return o
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return o.ToDataSourceManifestFileLocationPtrOutputWithContext(context.Background())
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceManifestFileLocation) *DataSourceManifestFileLocation {
		return &v
	}).(DataSourceManifestFileLocationPtrOutput)
}

// <p>Amazon S3 bucket.</p>
func (o DataSourceManifestFileLocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceManifestFileLocation) string { return v.Bucket }).(pulumi.StringOutput)
}

// <p>Amazon S3 key that identifies an object.</p>
func (o DataSourceManifestFileLocationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceManifestFileLocation) string { return v.Key }).(pulumi.StringOutput)
}

type DataSourceManifestFileLocationPtrOutput struct{ *pulumi.OutputState }

func (DataSourceManifestFileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceManifestFileLocation)(nil)).Elem()
}

func (o DataSourceManifestFileLocationPtrOutput) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceManifestFileLocationPtrOutput) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceManifestFileLocationPtrOutput) Elem() DataSourceManifestFileLocationOutput {
	return o.ApplyT(func(v *DataSourceManifestFileLocation) DataSourceManifestFileLocation {
		if v != nil {
			return *v
		}
		var ret DataSourceManifestFileLocation
		return ret
	}).(DataSourceManifestFileLocationOutput)
}

// <p>Amazon S3 bucket.</p>
func (o DataSourceManifestFileLocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// <p>Amazon S3 key that identifies an object.</p>
func (o DataSourceManifestFileLocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// <p>MariaDB parameters.</p>
type DataSourceMariaDbParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceMariaDbParametersInput is an input type that accepts DataSourceMariaDbParametersArgs and DataSourceMariaDbParametersOutput values.
// You can construct a concrete instance of `DataSourceMariaDbParametersInput` via:
//
//          DataSourceMariaDbParametersArgs{...}
type DataSourceMariaDbParametersInput interface {
	pulumi.Input

	ToDataSourceMariaDbParametersOutput() DataSourceMariaDbParametersOutput
	ToDataSourceMariaDbParametersOutputWithContext(context.Context) DataSourceMariaDbParametersOutput
}

// <p>MariaDB parameters.</p>
type DataSourceMariaDbParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceMariaDbParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMariaDbParameters)(nil)).Elem()
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersOutput() DataSourceMariaDbParametersOutput {
	return i.ToDataSourceMariaDbParametersOutputWithContext(context.Background())
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersOutputWithContext(ctx context.Context) DataSourceMariaDbParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMariaDbParametersOutput)
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return i.ToDataSourceMariaDbParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMariaDbParametersOutput).ToDataSourceMariaDbParametersPtrOutputWithContext(ctx)
}

// DataSourceMariaDbParametersPtrInput is an input type that accepts DataSourceMariaDbParametersArgs, DataSourceMariaDbParametersPtr and DataSourceMariaDbParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceMariaDbParametersPtrInput` via:
//
//          DataSourceMariaDbParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceMariaDbParametersPtrInput interface {
	pulumi.Input

	ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput
	ToDataSourceMariaDbParametersPtrOutputWithContext(context.Context) DataSourceMariaDbParametersPtrOutput
}

type dataSourceMariaDbParametersPtrType DataSourceMariaDbParametersArgs

func DataSourceMariaDbParametersPtr(v *DataSourceMariaDbParametersArgs) DataSourceMariaDbParametersPtrInput {
	return (*dataSourceMariaDbParametersPtrType)(v)
}

func (*dataSourceMariaDbParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMariaDbParameters)(nil)).Elem()
}

func (i *dataSourceMariaDbParametersPtrType) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return i.ToDataSourceMariaDbParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceMariaDbParametersPtrType) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMariaDbParametersPtrOutput)
}

// <p>MariaDB parameters.</p>
type DataSourceMariaDbParametersOutput struct{ *pulumi.OutputState }

func (DataSourceMariaDbParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMariaDbParameters)(nil)).Elem()
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersOutput() DataSourceMariaDbParametersOutput {
	return o
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersOutputWithContext(ctx context.Context) DataSourceMariaDbParametersOutput {
	return o
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return o.ToDataSourceMariaDbParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceMariaDbParameters) *DataSourceMariaDbParameters {
		return &v
	}).(DataSourceMariaDbParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceMariaDbParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMariaDbParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceMariaDbParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMariaDbParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceMariaDbParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceMariaDbParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceMariaDbParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceMariaDbParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMariaDbParameters)(nil)).Elem()
}

func (o DataSourceMariaDbParametersPtrOutput) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return o
}

func (o DataSourceMariaDbParametersPtrOutput) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return o
}

func (o DataSourceMariaDbParametersPtrOutput) Elem() DataSourceMariaDbParametersOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) DataSourceMariaDbParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceMariaDbParameters
		return ret
	}).(DataSourceMariaDbParametersOutput)
}

// <p>Database.</p>
func (o DataSourceMariaDbParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceMariaDbParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceMariaDbParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>MySQL parameters.</p>
type DataSourceMySqlParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceMySqlParametersInput is an input type that accepts DataSourceMySqlParametersArgs and DataSourceMySqlParametersOutput values.
// You can construct a concrete instance of `DataSourceMySqlParametersInput` via:
//
//          DataSourceMySqlParametersArgs{...}
type DataSourceMySqlParametersInput interface {
	pulumi.Input

	ToDataSourceMySqlParametersOutput() DataSourceMySqlParametersOutput
	ToDataSourceMySqlParametersOutputWithContext(context.Context) DataSourceMySqlParametersOutput
}

// <p>MySQL parameters.</p>
type DataSourceMySqlParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceMySqlParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMySqlParameters)(nil)).Elem()
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersOutput() DataSourceMySqlParametersOutput {
	return i.ToDataSourceMySqlParametersOutputWithContext(context.Background())
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersOutputWithContext(ctx context.Context) DataSourceMySqlParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMySqlParametersOutput)
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return i.ToDataSourceMySqlParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMySqlParametersOutput).ToDataSourceMySqlParametersPtrOutputWithContext(ctx)
}

// DataSourceMySqlParametersPtrInput is an input type that accepts DataSourceMySqlParametersArgs, DataSourceMySqlParametersPtr and DataSourceMySqlParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceMySqlParametersPtrInput` via:
//
//          DataSourceMySqlParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceMySqlParametersPtrInput interface {
	pulumi.Input

	ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput
	ToDataSourceMySqlParametersPtrOutputWithContext(context.Context) DataSourceMySqlParametersPtrOutput
}

type dataSourceMySqlParametersPtrType DataSourceMySqlParametersArgs

func DataSourceMySqlParametersPtr(v *DataSourceMySqlParametersArgs) DataSourceMySqlParametersPtrInput {
	return (*dataSourceMySqlParametersPtrType)(v)
}

func (*dataSourceMySqlParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMySqlParameters)(nil)).Elem()
}

func (i *dataSourceMySqlParametersPtrType) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return i.ToDataSourceMySqlParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceMySqlParametersPtrType) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMySqlParametersPtrOutput)
}

// <p>MySQL parameters.</p>
type DataSourceMySqlParametersOutput struct{ *pulumi.OutputState }

func (DataSourceMySqlParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMySqlParameters)(nil)).Elem()
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersOutput() DataSourceMySqlParametersOutput {
	return o
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersOutputWithContext(ctx context.Context) DataSourceMySqlParametersOutput {
	return o
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return o.ToDataSourceMySqlParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceMySqlParameters) *DataSourceMySqlParameters {
		return &v
	}).(DataSourceMySqlParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceMySqlParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMySqlParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceMySqlParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMySqlParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceMySqlParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceMySqlParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceMySqlParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceMySqlParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMySqlParameters)(nil)).Elem()
}

func (o DataSourceMySqlParametersPtrOutput) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return o
}

func (o DataSourceMySqlParametersPtrOutput) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return o
}

func (o DataSourceMySqlParametersPtrOutput) Elem() DataSourceMySqlParametersOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) DataSourceMySqlParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceMySqlParameters
		return ret
	}).(DataSourceMySqlParametersOutput)
}

// <p>Database.</p>
func (o DataSourceMySqlParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceMySqlParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceMySqlParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

type DataSourceOracleParameters struct {
	Database string  `pulumi:"database"`
	Host     string  `pulumi:"host"`
	Port     float64 `pulumi:"port"`
}

// DataSourceOracleParametersInput is an input type that accepts DataSourceOracleParametersArgs and DataSourceOracleParametersOutput values.
// You can construct a concrete instance of `DataSourceOracleParametersInput` via:
//
//          DataSourceOracleParametersArgs{...}
type DataSourceOracleParametersInput interface {
	pulumi.Input

	ToDataSourceOracleParametersOutput() DataSourceOracleParametersOutput
	ToDataSourceOracleParametersOutputWithContext(context.Context) DataSourceOracleParametersOutput
}

type DataSourceOracleParametersArgs struct {
	Database pulumi.StringInput  `pulumi:"database"`
	Host     pulumi.StringInput  `pulumi:"host"`
	Port     pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceOracleParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOracleParameters)(nil)).Elem()
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersOutput() DataSourceOracleParametersOutput {
	return i.ToDataSourceOracleParametersOutputWithContext(context.Background())
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersOutputWithContext(ctx context.Context) DataSourceOracleParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOracleParametersOutput)
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return i.ToDataSourceOracleParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOracleParametersOutput).ToDataSourceOracleParametersPtrOutputWithContext(ctx)
}

// DataSourceOracleParametersPtrInput is an input type that accepts DataSourceOracleParametersArgs, DataSourceOracleParametersPtr and DataSourceOracleParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceOracleParametersPtrInput` via:
//
//          DataSourceOracleParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceOracleParametersPtrInput interface {
	pulumi.Input

	ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput
	ToDataSourceOracleParametersPtrOutputWithContext(context.Context) DataSourceOracleParametersPtrOutput
}

type dataSourceOracleParametersPtrType DataSourceOracleParametersArgs

func DataSourceOracleParametersPtr(v *DataSourceOracleParametersArgs) DataSourceOracleParametersPtrInput {
	return (*dataSourceOracleParametersPtrType)(v)
}

func (*dataSourceOracleParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceOracleParameters)(nil)).Elem()
}

func (i *dataSourceOracleParametersPtrType) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return i.ToDataSourceOracleParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceOracleParametersPtrType) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOracleParametersPtrOutput)
}

type DataSourceOracleParametersOutput struct{ *pulumi.OutputState }

func (DataSourceOracleParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOracleParameters)(nil)).Elem()
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersOutput() DataSourceOracleParametersOutput {
	return o
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersOutputWithContext(ctx context.Context) DataSourceOracleParametersOutput {
	return o
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return o.ToDataSourceOracleParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceOracleParameters) *DataSourceOracleParameters {
		return &v
	}).(DataSourceOracleParametersPtrOutput)
}

func (o DataSourceOracleParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceOracleParameters) string { return v.Database }).(pulumi.StringOutput)
}

func (o DataSourceOracleParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceOracleParameters) string { return v.Host }).(pulumi.StringOutput)
}

func (o DataSourceOracleParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceOracleParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceOracleParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceOracleParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceOracleParameters)(nil)).Elem()
}

func (o DataSourceOracleParametersPtrOutput) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return o
}

func (o DataSourceOracleParametersPtrOutput) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return o
}

func (o DataSourceOracleParametersPtrOutput) Elem() DataSourceOracleParametersOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) DataSourceOracleParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceOracleParameters
		return ret
	}).(DataSourceOracleParametersOutput)
}

func (o DataSourceOracleParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

func (o DataSourceOracleParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

func (o DataSourceOracleParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
//             This is a variant type structure. For this structure to be valid, only one of the
//             attributes can be non-null.</p>
type DataSourceParameters struct {
	AmazonElasticsearchParameters *DataSourceAmazonElasticsearchParameters `pulumi:"amazonElasticsearchParameters"`
	AmazonOpenSearchParameters    *DataSourceAmazonOpenSearchParameters    `pulumi:"amazonOpenSearchParameters"`
	AthenaParameters              *DataSourceAthenaParameters              `pulumi:"athenaParameters"`
	AuroraParameters              *DataSourceAuroraParameters              `pulumi:"auroraParameters"`
	AuroraPostgreSqlParameters    *DataSourceAuroraPostgreSqlParameters    `pulumi:"auroraPostgreSqlParameters"`
	MariaDbParameters             *DataSourceMariaDbParameters             `pulumi:"mariaDbParameters"`
	MySqlParameters               *DataSourceMySqlParameters               `pulumi:"mySqlParameters"`
	OracleParameters              *DataSourceOracleParameters              `pulumi:"oracleParameters"`
	PostgreSqlParameters          *DataSourcePostgreSqlParameters          `pulumi:"postgreSqlParameters"`
	PrestoParameters              *DataSourcePrestoParameters              `pulumi:"prestoParameters"`
	RdsParameters                 *DataSourceRdsParameters                 `pulumi:"rdsParameters"`
	RedshiftParameters            *DataSourceRedshiftParameters            `pulumi:"redshiftParameters"`
	S3Parameters                  *DataSourceS3Parameters                  `pulumi:"s3Parameters"`
	SnowflakeParameters           *DataSourceSnowflakeParameters           `pulumi:"snowflakeParameters"`
	SparkParameters               *DataSourceSparkParameters               `pulumi:"sparkParameters"`
	SqlServerParameters           *DataSourceSqlServerParameters           `pulumi:"sqlServerParameters"`
	TeradataParameters            *DataSourceTeradataParameters            `pulumi:"teradataParameters"`
}

// DataSourceParametersInput is an input type that accepts DataSourceParametersArgs and DataSourceParametersOutput values.
// You can construct a concrete instance of `DataSourceParametersInput` via:
//
//          DataSourceParametersArgs{...}
type DataSourceParametersInput interface {
	pulumi.Input

	ToDataSourceParametersOutput() DataSourceParametersOutput
	ToDataSourceParametersOutputWithContext(context.Context) DataSourceParametersOutput
}

// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
//             This is a variant type structure. For this structure to be valid, only one of the
//             attributes can be non-null.</p>
type DataSourceParametersArgs struct {
	AmazonElasticsearchParameters DataSourceAmazonElasticsearchParametersPtrInput `pulumi:"amazonElasticsearchParameters"`
	AmazonOpenSearchParameters    DataSourceAmazonOpenSearchParametersPtrInput    `pulumi:"amazonOpenSearchParameters"`
	AthenaParameters              DataSourceAthenaParametersPtrInput              `pulumi:"athenaParameters"`
	AuroraParameters              DataSourceAuroraParametersPtrInput              `pulumi:"auroraParameters"`
	AuroraPostgreSqlParameters    DataSourceAuroraPostgreSqlParametersPtrInput    `pulumi:"auroraPostgreSqlParameters"`
	MariaDbParameters             DataSourceMariaDbParametersPtrInput             `pulumi:"mariaDbParameters"`
	MySqlParameters               DataSourceMySqlParametersPtrInput               `pulumi:"mySqlParameters"`
	OracleParameters              DataSourceOracleParametersPtrInput              `pulumi:"oracleParameters"`
	PostgreSqlParameters          DataSourcePostgreSqlParametersPtrInput          `pulumi:"postgreSqlParameters"`
	PrestoParameters              DataSourcePrestoParametersPtrInput              `pulumi:"prestoParameters"`
	RdsParameters                 DataSourceRdsParametersPtrInput                 `pulumi:"rdsParameters"`
	RedshiftParameters            DataSourceRedshiftParametersPtrInput            `pulumi:"redshiftParameters"`
	S3Parameters                  DataSourceS3ParametersPtrInput                  `pulumi:"s3Parameters"`
	SnowflakeParameters           DataSourceSnowflakeParametersPtrInput           `pulumi:"snowflakeParameters"`
	SparkParameters               DataSourceSparkParametersPtrInput               `pulumi:"sparkParameters"`
	SqlServerParameters           DataSourceSqlServerParametersPtrInput           `pulumi:"sqlServerParameters"`
	TeradataParameters            DataSourceTeradataParametersPtrInput            `pulumi:"teradataParameters"`
}

func (DataSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return i.ToDataSourceParametersOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput)
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput).ToDataSourceParametersPtrOutputWithContext(ctx)
}

// DataSourceParametersPtrInput is an input type that accepts DataSourceParametersArgs, DataSourceParametersPtr and DataSourceParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPtrInput` via:
//
//          DataSourceParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceParametersPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput
	ToDataSourceParametersPtrOutputWithContext(context.Context) DataSourceParametersPtrOutput
}

type dataSourceParametersPtrType DataSourceParametersArgs

func DataSourceParametersPtr(v *DataSourceParametersArgs) DataSourceParametersPtrInput {
	return (*dataSourceParametersPtrType)(v)
}

func (*dataSourceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPtrOutput)
}

// DataSourceParametersArrayInput is an input type that accepts DataSourceParametersArray and DataSourceParametersArrayOutput values.
// You can construct a concrete instance of `DataSourceParametersArrayInput` via:
//
//          DataSourceParametersArray{ DataSourceParametersArgs{...} }
type DataSourceParametersArrayInput interface {
	pulumi.Input

	ToDataSourceParametersArrayOutput() DataSourceParametersArrayOutput
	ToDataSourceParametersArrayOutputWithContext(context.Context) DataSourceParametersArrayOutput
}

type DataSourceParametersArray []DataSourceParametersInput

func (DataSourceParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceParameters)(nil)).Elem()
}

func (i DataSourceParametersArray) ToDataSourceParametersArrayOutput() DataSourceParametersArrayOutput {
	return i.ToDataSourceParametersArrayOutputWithContext(context.Background())
}

func (i DataSourceParametersArray) ToDataSourceParametersArrayOutputWithContext(ctx context.Context) DataSourceParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersArrayOutput)
}

// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
//             This is a variant type structure. For this structure to be valid, only one of the
//             attributes can be non-null.</p>
type DataSourceParametersOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParameters) *DataSourceParameters {
		return &v
	}).(DataSourceParametersPtrOutput)
}

func (o DataSourceParametersOutput) AmazonElasticsearchParameters() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAmazonElasticsearchParameters {
		return v.AmazonElasticsearchParameters
	}).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

func (o DataSourceParametersOutput) AmazonOpenSearchParameters() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAmazonOpenSearchParameters {
		return v.AmazonOpenSearchParameters
	}).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

func (o DataSourceParametersOutput) AthenaParameters() DataSourceAthenaParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAthenaParameters { return v.AthenaParameters }).(DataSourceAthenaParametersPtrOutput)
}

func (o DataSourceParametersOutput) AuroraParameters() DataSourceAuroraParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAuroraParameters { return v.AuroraParameters }).(DataSourceAuroraParametersPtrOutput)
}

func (o DataSourceParametersOutput) AuroraPostgreSqlParameters() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAuroraPostgreSqlParameters {
		return v.AuroraPostgreSqlParameters
	}).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

func (o DataSourceParametersOutput) MariaDbParameters() DataSourceMariaDbParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceMariaDbParameters { return v.MariaDbParameters }).(DataSourceMariaDbParametersPtrOutput)
}

func (o DataSourceParametersOutput) MySqlParameters() DataSourceMySqlParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceMySqlParameters { return v.MySqlParameters }).(DataSourceMySqlParametersPtrOutput)
}

func (o DataSourceParametersOutput) OracleParameters() DataSourceOracleParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceOracleParameters { return v.OracleParameters }).(DataSourceOracleParametersPtrOutput)
}

func (o DataSourceParametersOutput) PostgreSqlParameters() DataSourcePostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourcePostgreSqlParameters { return v.PostgreSqlParameters }).(DataSourcePostgreSqlParametersPtrOutput)
}

func (o DataSourceParametersOutput) PrestoParameters() DataSourcePrestoParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourcePrestoParameters { return v.PrestoParameters }).(DataSourcePrestoParametersPtrOutput)
}

func (o DataSourceParametersOutput) RdsParameters() DataSourceRdsParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceRdsParameters { return v.RdsParameters }).(DataSourceRdsParametersPtrOutput)
}

func (o DataSourceParametersOutput) RedshiftParameters() DataSourceRedshiftParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceRedshiftParameters { return v.RedshiftParameters }).(DataSourceRedshiftParametersPtrOutput)
}

func (o DataSourceParametersOutput) S3Parameters() DataSourceS3ParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceS3Parameters { return v.S3Parameters }).(DataSourceS3ParametersPtrOutput)
}

func (o DataSourceParametersOutput) SnowflakeParameters() DataSourceSnowflakeParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceSnowflakeParameters { return v.SnowflakeParameters }).(DataSourceSnowflakeParametersPtrOutput)
}

func (o DataSourceParametersOutput) SparkParameters() DataSourceSparkParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceSparkParameters { return v.SparkParameters }).(DataSourceSparkParametersPtrOutput)
}

func (o DataSourceParametersOutput) SqlServerParameters() DataSourceSqlServerParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceSqlServerParameters { return v.SqlServerParameters }).(DataSourceSqlServerParametersPtrOutput)
}

func (o DataSourceParametersOutput) TeradataParameters() DataSourceTeradataParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceTeradataParameters { return v.TeradataParameters }).(DataSourceTeradataParametersPtrOutput)
}

type DataSourceParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) Elem() DataSourceParametersOutput {
	return o.ApplyT(func(v *DataSourceParameters) DataSourceParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceParameters
		return ret
	}).(DataSourceParametersOutput)
}

func (o DataSourceParametersPtrOutput) AmazonElasticsearchParameters() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAmazonElasticsearchParameters {
		if v == nil {
			return nil
		}
		return v.AmazonElasticsearchParameters
	}).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) AmazonOpenSearchParameters() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAmazonOpenSearchParameters {
		if v == nil {
			return nil
		}
		return v.AmazonOpenSearchParameters
	}).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) AthenaParameters() DataSourceAthenaParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAthenaParameters {
		if v == nil {
			return nil
		}
		return v.AthenaParameters
	}).(DataSourceAthenaParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) AuroraParameters() DataSourceAuroraParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAuroraParameters {
		if v == nil {
			return nil
		}
		return v.AuroraParameters
	}).(DataSourceAuroraParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) AuroraPostgreSqlParameters() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAuroraPostgreSqlParameters {
		if v == nil {
			return nil
		}
		return v.AuroraPostgreSqlParameters
	}).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) MariaDbParameters() DataSourceMariaDbParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceMariaDbParameters {
		if v == nil {
			return nil
		}
		return v.MariaDbParameters
	}).(DataSourceMariaDbParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) MySqlParameters() DataSourceMySqlParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceMySqlParameters {
		if v == nil {
			return nil
		}
		return v.MySqlParameters
	}).(DataSourceMySqlParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) OracleParameters() DataSourceOracleParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceOracleParameters {
		if v == nil {
			return nil
		}
		return v.OracleParameters
	}).(DataSourceOracleParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) PostgreSqlParameters() DataSourcePostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourcePostgreSqlParameters {
		if v == nil {
			return nil
		}
		return v.PostgreSqlParameters
	}).(DataSourcePostgreSqlParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) PrestoParameters() DataSourcePrestoParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourcePrestoParameters {
		if v == nil {
			return nil
		}
		return v.PrestoParameters
	}).(DataSourcePrestoParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) RdsParameters() DataSourceRdsParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceRdsParameters {
		if v == nil {
			return nil
		}
		return v.RdsParameters
	}).(DataSourceRdsParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) RedshiftParameters() DataSourceRedshiftParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceRedshiftParameters {
		if v == nil {
			return nil
		}
		return v.RedshiftParameters
	}).(DataSourceRedshiftParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) S3Parameters() DataSourceS3ParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceS3Parameters {
		if v == nil {
			return nil
		}
		return v.S3Parameters
	}).(DataSourceS3ParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) SnowflakeParameters() DataSourceSnowflakeParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceSnowflakeParameters {
		if v == nil {
			return nil
		}
		return v.SnowflakeParameters
	}).(DataSourceSnowflakeParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) SparkParameters() DataSourceSparkParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceSparkParameters {
		if v == nil {
			return nil
		}
		return v.SparkParameters
	}).(DataSourceSparkParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) SqlServerParameters() DataSourceSqlServerParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceSqlServerParameters {
		if v == nil {
			return nil
		}
		return v.SqlServerParameters
	}).(DataSourceSqlServerParametersPtrOutput)
}

func (o DataSourceParametersPtrOutput) TeradataParameters() DataSourceTeradataParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceTeradataParameters {
		if v == nil {
			return nil
		}
		return v.TeradataParameters
	}).(DataSourceTeradataParametersPtrOutput)
}

type DataSourceParametersArrayOutput struct{ *pulumi.OutputState }

func (DataSourceParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersArrayOutput) ToDataSourceParametersArrayOutput() DataSourceParametersArrayOutput {
	return o
}

func (o DataSourceParametersArrayOutput) ToDataSourceParametersArrayOutputWithContext(ctx context.Context) DataSourceParametersArrayOutput {
	return o
}

func (o DataSourceParametersArrayOutput) Index(i pulumi.IntInput) DataSourceParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceParameters {
		return vs[0].([]DataSourceParameters)[vs[1].(int)]
	}).(DataSourceParametersOutput)
}

// <p>PostgreSQL parameters.</p>
type DataSourcePostgreSqlParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourcePostgreSqlParametersInput is an input type that accepts DataSourcePostgreSqlParametersArgs and DataSourcePostgreSqlParametersOutput values.
// You can construct a concrete instance of `DataSourcePostgreSqlParametersInput` via:
//
//          DataSourcePostgreSqlParametersArgs{...}
type DataSourcePostgreSqlParametersInput interface {
	pulumi.Input

	ToDataSourcePostgreSqlParametersOutput() DataSourcePostgreSqlParametersOutput
	ToDataSourcePostgreSqlParametersOutputWithContext(context.Context) DataSourcePostgreSqlParametersOutput
}

// <p>PostgreSQL parameters.</p>
type DataSourcePostgreSqlParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourcePostgreSqlParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersOutput() DataSourcePostgreSqlParametersOutput {
	return i.ToDataSourcePostgreSqlParametersOutputWithContext(context.Background())
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePostgreSqlParametersOutput)
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return i.ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePostgreSqlParametersOutput).ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx)
}

// DataSourcePostgreSqlParametersPtrInput is an input type that accepts DataSourcePostgreSqlParametersArgs, DataSourcePostgreSqlParametersPtr and DataSourcePostgreSqlParametersPtrOutput values.
// You can construct a concrete instance of `DataSourcePostgreSqlParametersPtrInput` via:
//
//          DataSourcePostgreSqlParametersArgs{...}
//
//  or:
//
//          nil
type DataSourcePostgreSqlParametersPtrInput interface {
	pulumi.Input

	ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput
	ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Context) DataSourcePostgreSqlParametersPtrOutput
}

type dataSourcePostgreSqlParametersPtrType DataSourcePostgreSqlParametersArgs

func DataSourcePostgreSqlParametersPtr(v *DataSourcePostgreSqlParametersArgs) DataSourcePostgreSqlParametersPtrInput {
	return (*dataSourcePostgreSqlParametersPtrType)(v)
}

func (*dataSourcePostgreSqlParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (i *dataSourcePostgreSqlParametersPtrType) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return i.ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourcePostgreSqlParametersPtrType) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePostgreSqlParametersPtrOutput)
}

// <p>PostgreSQL parameters.</p>
type DataSourcePostgreSqlParametersOutput struct{ *pulumi.OutputState }

func (DataSourcePostgreSqlParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersOutput() DataSourcePostgreSqlParametersOutput {
	return o
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersOutput {
	return o
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return o.ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourcePostgreSqlParameters) *DataSourcePostgreSqlParameters {
		return &v
	}).(DataSourcePostgreSqlParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourcePostgreSqlParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePostgreSqlParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourcePostgreSqlParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePostgreSqlParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourcePostgreSqlParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourcePostgreSqlParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourcePostgreSqlParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourcePostgreSqlParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (o DataSourcePostgreSqlParametersPtrOutput) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourcePostgreSqlParametersPtrOutput) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourcePostgreSqlParametersPtrOutput) Elem() DataSourcePostgreSqlParametersOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) DataSourcePostgreSqlParameters {
		if v != nil {
			return *v
		}
		var ret DataSourcePostgreSqlParameters
		return ret
	}).(DataSourcePostgreSqlParametersOutput)
}

// <p>Database.</p>
func (o DataSourcePostgreSqlParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourcePostgreSqlParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourcePostgreSqlParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Presto parameters.</p>
type DataSourcePrestoParameters struct {
	// <p>Catalog.</p>
	Catalog string `pulumi:"catalog"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourcePrestoParametersInput is an input type that accepts DataSourcePrestoParametersArgs and DataSourcePrestoParametersOutput values.
// You can construct a concrete instance of `DataSourcePrestoParametersInput` via:
//
//          DataSourcePrestoParametersArgs{...}
type DataSourcePrestoParametersInput interface {
	pulumi.Input

	ToDataSourcePrestoParametersOutput() DataSourcePrestoParametersOutput
	ToDataSourcePrestoParametersOutputWithContext(context.Context) DataSourcePrestoParametersOutput
}

// <p>Presto parameters.</p>
type DataSourcePrestoParametersArgs struct {
	// <p>Catalog.</p>
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourcePrestoParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePrestoParameters)(nil)).Elem()
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersOutput() DataSourcePrestoParametersOutput {
	return i.ToDataSourcePrestoParametersOutputWithContext(context.Background())
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersOutputWithContext(ctx context.Context) DataSourcePrestoParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrestoParametersOutput)
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return i.ToDataSourcePrestoParametersPtrOutputWithContext(context.Background())
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrestoParametersOutput).ToDataSourcePrestoParametersPtrOutputWithContext(ctx)
}

// DataSourcePrestoParametersPtrInput is an input type that accepts DataSourcePrestoParametersArgs, DataSourcePrestoParametersPtr and DataSourcePrestoParametersPtrOutput values.
// You can construct a concrete instance of `DataSourcePrestoParametersPtrInput` via:
//
//          DataSourcePrestoParametersArgs{...}
//
//  or:
//
//          nil
type DataSourcePrestoParametersPtrInput interface {
	pulumi.Input

	ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput
	ToDataSourcePrestoParametersPtrOutputWithContext(context.Context) DataSourcePrestoParametersPtrOutput
}

type dataSourcePrestoParametersPtrType DataSourcePrestoParametersArgs

func DataSourcePrestoParametersPtr(v *DataSourcePrestoParametersArgs) DataSourcePrestoParametersPtrInput {
	return (*dataSourcePrestoParametersPtrType)(v)
}

func (*dataSourcePrestoParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePrestoParameters)(nil)).Elem()
}

func (i *dataSourcePrestoParametersPtrType) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return i.ToDataSourcePrestoParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourcePrestoParametersPtrType) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrestoParametersPtrOutput)
}

// <p>Presto parameters.</p>
type DataSourcePrestoParametersOutput struct{ *pulumi.OutputState }

func (DataSourcePrestoParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePrestoParameters)(nil)).Elem()
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersOutput() DataSourcePrestoParametersOutput {
	return o
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersOutputWithContext(ctx context.Context) DataSourcePrestoParametersOutput {
	return o
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return o.ToDataSourcePrestoParametersPtrOutputWithContext(context.Background())
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourcePrestoParameters) *DataSourcePrestoParameters {
		return &v
	}).(DataSourcePrestoParametersPtrOutput)
}

// <p>Catalog.</p>
func (o DataSourcePrestoParametersOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePrestoParameters) string { return v.Catalog }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourcePrestoParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePrestoParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourcePrestoParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourcePrestoParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourcePrestoParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourcePrestoParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePrestoParameters)(nil)).Elem()
}

func (o DataSourcePrestoParametersPtrOutput) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return o
}

func (o DataSourcePrestoParametersPtrOutput) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return o
}

func (o DataSourcePrestoParametersPtrOutput) Elem() DataSourcePrestoParametersOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) DataSourcePrestoParameters {
		if v != nil {
			return *v
		}
		var ret DataSourcePrestoParameters
		return ret
	}).(DataSourcePrestoParametersOutput)
}

// <p>Catalog.</p>
func (o DataSourcePrestoParametersPtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Catalog
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourcePrestoParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourcePrestoParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Amazon RDS parameters.</p>
type DataSourceRdsParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Instance ID.</p>
	InstanceId string `pulumi:"instanceId"`
}

// DataSourceRdsParametersInput is an input type that accepts DataSourceRdsParametersArgs and DataSourceRdsParametersOutput values.
// You can construct a concrete instance of `DataSourceRdsParametersInput` via:
//
//          DataSourceRdsParametersArgs{...}
type DataSourceRdsParametersInput interface {
	pulumi.Input

	ToDataSourceRdsParametersOutput() DataSourceRdsParametersOutput
	ToDataSourceRdsParametersOutputWithContext(context.Context) DataSourceRdsParametersOutput
}

// <p>Amazon RDS parameters.</p>
type DataSourceRdsParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Instance ID.</p>
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (DataSourceRdsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRdsParameters)(nil)).Elem()
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersOutput() DataSourceRdsParametersOutput {
	return i.ToDataSourceRdsParametersOutputWithContext(context.Background())
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersOutputWithContext(ctx context.Context) DataSourceRdsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRdsParametersOutput)
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return i.ToDataSourceRdsParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRdsParametersOutput).ToDataSourceRdsParametersPtrOutputWithContext(ctx)
}

// DataSourceRdsParametersPtrInput is an input type that accepts DataSourceRdsParametersArgs, DataSourceRdsParametersPtr and DataSourceRdsParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceRdsParametersPtrInput` via:
//
//          DataSourceRdsParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceRdsParametersPtrInput interface {
	pulumi.Input

	ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput
	ToDataSourceRdsParametersPtrOutputWithContext(context.Context) DataSourceRdsParametersPtrOutput
}

type dataSourceRdsParametersPtrType DataSourceRdsParametersArgs

func DataSourceRdsParametersPtr(v *DataSourceRdsParametersArgs) DataSourceRdsParametersPtrInput {
	return (*dataSourceRdsParametersPtrType)(v)
}

func (*dataSourceRdsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRdsParameters)(nil)).Elem()
}

func (i *dataSourceRdsParametersPtrType) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return i.ToDataSourceRdsParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceRdsParametersPtrType) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRdsParametersPtrOutput)
}

// <p>Amazon RDS parameters.</p>
type DataSourceRdsParametersOutput struct{ *pulumi.OutputState }

func (DataSourceRdsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRdsParameters)(nil)).Elem()
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersOutput() DataSourceRdsParametersOutput {
	return o
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersOutputWithContext(ctx context.Context) DataSourceRdsParametersOutput {
	return o
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return o.ToDataSourceRdsParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceRdsParameters) *DataSourceRdsParameters {
		return &v
	}).(DataSourceRdsParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceRdsParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceRdsParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Instance ID.</p>
func (o DataSourceRdsParametersOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceRdsParameters) string { return v.InstanceId }).(pulumi.StringOutput)
}

type DataSourceRdsParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceRdsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRdsParameters)(nil)).Elem()
}

func (o DataSourceRdsParametersPtrOutput) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return o
}

func (o DataSourceRdsParametersPtrOutput) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return o
}

func (o DataSourceRdsParametersPtrOutput) Elem() DataSourceRdsParametersOutput {
	return o.ApplyT(func(v *DataSourceRdsParameters) DataSourceRdsParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceRdsParameters
		return ret
	}).(DataSourceRdsParametersOutput)
}

// <p>Database.</p>
func (o DataSourceRdsParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRdsParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Instance ID.</p>
func (o DataSourceRdsParametersPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRdsParameters) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// <p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if
//             <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and
//             <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
type DataSourceRedshiftParameters struct {
	// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
	//             provided.</p>
	ClusterId *string `pulumi:"clusterId"`
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
	Host *string `pulumi:"host"`
	// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
	Port *float64 `pulumi:"port"`
}

// DataSourceRedshiftParametersInput is an input type that accepts DataSourceRedshiftParametersArgs and DataSourceRedshiftParametersOutput values.
// You can construct a concrete instance of `DataSourceRedshiftParametersInput` via:
//
//          DataSourceRedshiftParametersArgs{...}
type DataSourceRedshiftParametersInput interface {
	pulumi.Input

	ToDataSourceRedshiftParametersOutput() DataSourceRedshiftParametersOutput
	ToDataSourceRedshiftParametersOutputWithContext(context.Context) DataSourceRedshiftParametersOutput
}

// <p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if
//             <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and
//             <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
type DataSourceRedshiftParametersArgs struct {
	// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
	//             provided.</p>
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
	Host pulumi.StringPtrInput `pulumi:"host"`
	// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
	Port pulumi.Float64PtrInput `pulumi:"port"`
}

func (DataSourceRedshiftParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRedshiftParameters)(nil)).Elem()
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersOutput() DataSourceRedshiftParametersOutput {
	return i.ToDataSourceRedshiftParametersOutputWithContext(context.Background())
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersOutputWithContext(ctx context.Context) DataSourceRedshiftParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftParametersOutput)
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return i.ToDataSourceRedshiftParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftParametersOutput).ToDataSourceRedshiftParametersPtrOutputWithContext(ctx)
}

// DataSourceRedshiftParametersPtrInput is an input type that accepts DataSourceRedshiftParametersArgs, DataSourceRedshiftParametersPtr and DataSourceRedshiftParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceRedshiftParametersPtrInput` via:
//
//          DataSourceRedshiftParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceRedshiftParametersPtrInput interface {
	pulumi.Input

	ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput
	ToDataSourceRedshiftParametersPtrOutputWithContext(context.Context) DataSourceRedshiftParametersPtrOutput
}

type dataSourceRedshiftParametersPtrType DataSourceRedshiftParametersArgs

func DataSourceRedshiftParametersPtr(v *DataSourceRedshiftParametersArgs) DataSourceRedshiftParametersPtrInput {
	return (*dataSourceRedshiftParametersPtrType)(v)
}

func (*dataSourceRedshiftParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRedshiftParameters)(nil)).Elem()
}

func (i *dataSourceRedshiftParametersPtrType) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return i.ToDataSourceRedshiftParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceRedshiftParametersPtrType) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftParametersPtrOutput)
}

// <p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if
//             <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and
//             <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
type DataSourceRedshiftParametersOutput struct{ *pulumi.OutputState }

func (DataSourceRedshiftParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRedshiftParameters)(nil)).Elem()
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersOutput() DataSourceRedshiftParametersOutput {
	return o
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersOutputWithContext(ctx context.Context) DataSourceRedshiftParametersOutput {
	return o
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return o.ToDataSourceRedshiftParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceRedshiftParameters) *DataSourceRedshiftParameters {
		return &v
	}).(DataSourceRedshiftParametersPtrOutput)
}

// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
//             provided.</p>
func (o DataSourceRedshiftParametersOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// <p>Database.</p>
func (o DataSourceRedshiftParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

type DataSourceRedshiftParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceRedshiftParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRedshiftParameters)(nil)).Elem()
}

func (o DataSourceRedshiftParametersPtrOutput) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return o
}

func (o DataSourceRedshiftParametersPtrOutput) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return o
}

func (o DataSourceRedshiftParametersPtrOutput) Elem() DataSourceRedshiftParametersOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) DataSourceRedshiftParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceRedshiftParameters
		return ret
	}).(DataSourceRedshiftParametersOutput)
}

// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
//             provided.</p>
func (o DataSourceRedshiftParametersPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// <p>Database.</p>
func (o DataSourceRedshiftParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Permission for the resource.</p>
type DataSourceResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// DataSourceResourcePermissionInput is an input type that accepts DataSourceResourcePermissionArgs and DataSourceResourcePermissionOutput values.
// You can construct a concrete instance of `DataSourceResourcePermissionInput` via:
//
//          DataSourceResourcePermissionArgs{...}
type DataSourceResourcePermissionInput interface {
	pulumi.Input

	ToDataSourceResourcePermissionOutput() DataSourceResourcePermissionOutput
	ToDataSourceResourcePermissionOutputWithContext(context.Context) DataSourceResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type DataSourceResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DataSourceResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceResourcePermission)(nil)).Elem()
}

func (i DataSourceResourcePermissionArgs) ToDataSourceResourcePermissionOutput() DataSourceResourcePermissionOutput {
	return i.ToDataSourceResourcePermissionOutputWithContext(context.Background())
}

func (i DataSourceResourcePermissionArgs) ToDataSourceResourcePermissionOutputWithContext(ctx context.Context) DataSourceResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceResourcePermissionOutput)
}

// DataSourceResourcePermissionArrayInput is an input type that accepts DataSourceResourcePermissionArray and DataSourceResourcePermissionArrayOutput values.
// You can construct a concrete instance of `DataSourceResourcePermissionArrayInput` via:
//
//          DataSourceResourcePermissionArray{ DataSourceResourcePermissionArgs{...} }
type DataSourceResourcePermissionArrayInput interface {
	pulumi.Input

	ToDataSourceResourcePermissionArrayOutput() DataSourceResourcePermissionArrayOutput
	ToDataSourceResourcePermissionArrayOutputWithContext(context.Context) DataSourceResourcePermissionArrayOutput
}

type DataSourceResourcePermissionArray []DataSourceResourcePermissionInput

func (DataSourceResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceResourcePermission)(nil)).Elem()
}

func (i DataSourceResourcePermissionArray) ToDataSourceResourcePermissionArrayOutput() DataSourceResourcePermissionArrayOutput {
	return i.ToDataSourceResourcePermissionArrayOutputWithContext(context.Background())
}

func (i DataSourceResourcePermissionArray) ToDataSourceResourcePermissionArrayOutputWithContext(ctx context.Context) DataSourceResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type DataSourceResourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSourceResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceResourcePermission)(nil)).Elem()
}

func (o DataSourceResourcePermissionOutput) ToDataSourceResourcePermissionOutput() DataSourceResourcePermissionOutput {
	return o
}

func (o DataSourceResourcePermissionOutput) ToDataSourceResourcePermissionOutputWithContext(ctx context.Context) DataSourceResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o DataSourceResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSourceResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//             following:</p>
//         <ul>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
//                     ARN. Use this option only to share resources (templates) across AWS accounts.
//                     (This is less common.) </p>
//             </li>
//          </ul>
func (o DataSourceResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DataSourceResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSourceResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceResourcePermission)(nil)).Elem()
}

func (o DataSourceResourcePermissionArrayOutput) ToDataSourceResourcePermissionArrayOutput() DataSourceResourcePermissionArrayOutput {
	return o
}

func (o DataSourceResourcePermissionArrayOutput) ToDataSourceResourcePermissionArrayOutputWithContext(ctx context.Context) DataSourceResourcePermissionArrayOutput {
	return o
}

func (o DataSourceResourcePermissionArrayOutput) Index(i pulumi.IntInput) DataSourceResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceResourcePermission {
		return vs[0].([]DataSourceResourcePermission)[vs[1].(int)]
	}).(DataSourceResourcePermissionOutput)
}

// <p>S3 parameters.</p>
type DataSourceS3Parameters struct {
	ManifestFileLocation DataSourceManifestFileLocation `pulumi:"manifestFileLocation"`
}

// DataSourceS3ParametersInput is an input type that accepts DataSourceS3ParametersArgs and DataSourceS3ParametersOutput values.
// You can construct a concrete instance of `DataSourceS3ParametersInput` via:
//
//          DataSourceS3ParametersArgs{...}
type DataSourceS3ParametersInput interface {
	pulumi.Input

	ToDataSourceS3ParametersOutput() DataSourceS3ParametersOutput
	ToDataSourceS3ParametersOutputWithContext(context.Context) DataSourceS3ParametersOutput
}

// <p>S3 parameters.</p>
type DataSourceS3ParametersArgs struct {
	ManifestFileLocation DataSourceManifestFileLocationInput `pulumi:"manifestFileLocation"`
}

func (DataSourceS3ParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceS3Parameters)(nil)).Elem()
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersOutput() DataSourceS3ParametersOutput {
	return i.ToDataSourceS3ParametersOutputWithContext(context.Background())
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersOutputWithContext(ctx context.Context) DataSourceS3ParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceS3ParametersOutput)
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return i.ToDataSourceS3ParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceS3ParametersOutput).ToDataSourceS3ParametersPtrOutputWithContext(ctx)
}

// DataSourceS3ParametersPtrInput is an input type that accepts DataSourceS3ParametersArgs, DataSourceS3ParametersPtr and DataSourceS3ParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceS3ParametersPtrInput` via:
//
//          DataSourceS3ParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceS3ParametersPtrInput interface {
	pulumi.Input

	ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput
	ToDataSourceS3ParametersPtrOutputWithContext(context.Context) DataSourceS3ParametersPtrOutput
}

type dataSourceS3ParametersPtrType DataSourceS3ParametersArgs

func DataSourceS3ParametersPtr(v *DataSourceS3ParametersArgs) DataSourceS3ParametersPtrInput {
	return (*dataSourceS3ParametersPtrType)(v)
}

func (*dataSourceS3ParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceS3Parameters)(nil)).Elem()
}

func (i *dataSourceS3ParametersPtrType) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return i.ToDataSourceS3ParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceS3ParametersPtrType) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceS3ParametersPtrOutput)
}

// <p>S3 parameters.</p>
type DataSourceS3ParametersOutput struct{ *pulumi.OutputState }

func (DataSourceS3ParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceS3Parameters)(nil)).Elem()
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersOutput() DataSourceS3ParametersOutput {
	return o
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersOutputWithContext(ctx context.Context) DataSourceS3ParametersOutput {
	return o
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return o.ToDataSourceS3ParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceS3Parameters) *DataSourceS3Parameters {
		return &v
	}).(DataSourceS3ParametersPtrOutput)
}

func (o DataSourceS3ParametersOutput) ManifestFileLocation() DataSourceManifestFileLocationOutput {
	return o.ApplyT(func(v DataSourceS3Parameters) DataSourceManifestFileLocation { return v.ManifestFileLocation }).(DataSourceManifestFileLocationOutput)
}

type DataSourceS3ParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceS3ParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceS3Parameters)(nil)).Elem()
}

func (o DataSourceS3ParametersPtrOutput) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return o
}

func (o DataSourceS3ParametersPtrOutput) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return o
}

func (o DataSourceS3ParametersPtrOutput) Elem() DataSourceS3ParametersOutput {
	return o.ApplyT(func(v *DataSourceS3Parameters) DataSourceS3Parameters {
		if v != nil {
			return *v
		}
		var ret DataSourceS3Parameters
		return ret
	}).(DataSourceS3ParametersOutput)
}

func (o DataSourceS3ParametersPtrOutput) ManifestFileLocation() DataSourceManifestFileLocationPtrOutput {
	return o.ApplyT(func(v *DataSourceS3Parameters) *DataSourceManifestFileLocation {
		if v == nil {
			return nil
		}
		return &v.ManifestFileLocation
	}).(DataSourceManifestFileLocationPtrOutput)
}

// <p>Snowflake parameters.</p>
type DataSourceSnowflakeParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Warehouse.</p>
	Warehouse string `pulumi:"warehouse"`
}

// DataSourceSnowflakeParametersInput is an input type that accepts DataSourceSnowflakeParametersArgs and DataSourceSnowflakeParametersOutput values.
// You can construct a concrete instance of `DataSourceSnowflakeParametersInput` via:
//
//          DataSourceSnowflakeParametersArgs{...}
type DataSourceSnowflakeParametersInput interface {
	pulumi.Input

	ToDataSourceSnowflakeParametersOutput() DataSourceSnowflakeParametersOutput
	ToDataSourceSnowflakeParametersOutputWithContext(context.Context) DataSourceSnowflakeParametersOutput
}

// <p>Snowflake parameters.</p>
type DataSourceSnowflakeParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Warehouse.</p>
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (DataSourceSnowflakeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSnowflakeParameters)(nil)).Elem()
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersOutput() DataSourceSnowflakeParametersOutput {
	return i.ToDataSourceSnowflakeParametersOutputWithContext(context.Background())
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSnowflakeParametersOutput)
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return i.ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSnowflakeParametersOutput).ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx)
}

// DataSourceSnowflakeParametersPtrInput is an input type that accepts DataSourceSnowflakeParametersArgs, DataSourceSnowflakeParametersPtr and DataSourceSnowflakeParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceSnowflakeParametersPtrInput` via:
//
//          DataSourceSnowflakeParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceSnowflakeParametersPtrInput interface {
	pulumi.Input

	ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput
	ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Context) DataSourceSnowflakeParametersPtrOutput
}

type dataSourceSnowflakeParametersPtrType DataSourceSnowflakeParametersArgs

func DataSourceSnowflakeParametersPtr(v *DataSourceSnowflakeParametersArgs) DataSourceSnowflakeParametersPtrInput {
	return (*dataSourceSnowflakeParametersPtrType)(v)
}

func (*dataSourceSnowflakeParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSnowflakeParameters)(nil)).Elem()
}

func (i *dataSourceSnowflakeParametersPtrType) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return i.ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceSnowflakeParametersPtrType) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSnowflakeParametersPtrOutput)
}

// <p>Snowflake parameters.</p>
type DataSourceSnowflakeParametersOutput struct{ *pulumi.OutputState }

func (DataSourceSnowflakeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSnowflakeParameters)(nil)).Elem()
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersOutput() DataSourceSnowflakeParametersOutput {
	return o
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersOutput {
	return o
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return o.ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSnowflakeParameters) *DataSourceSnowflakeParameters {
		return &v
	}).(DataSourceSnowflakeParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceSnowflakeParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceSnowflakeParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Warehouse.</p>
func (o DataSourceSnowflakeParametersOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) string { return v.Warehouse }).(pulumi.StringOutput)
}

type DataSourceSnowflakeParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSnowflakeParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSnowflakeParameters)(nil)).Elem()
}

func (o DataSourceSnowflakeParametersPtrOutput) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return o
}

func (o DataSourceSnowflakeParametersPtrOutput) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return o
}

func (o DataSourceSnowflakeParametersPtrOutput) Elem() DataSourceSnowflakeParametersOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) DataSourceSnowflakeParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceSnowflakeParameters
		return ret
	}).(DataSourceSnowflakeParametersOutput)
}

// <p>Database.</p>
func (o DataSourceSnowflakeParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceSnowflakeParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Warehouse.</p>
func (o DataSourceSnowflakeParametersPtrOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Warehouse
	}).(pulumi.StringPtrOutput)
}

// <p>Spark parameters.</p>
type DataSourceSparkParameters struct {
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceSparkParametersInput is an input type that accepts DataSourceSparkParametersArgs and DataSourceSparkParametersOutput values.
// You can construct a concrete instance of `DataSourceSparkParametersInput` via:
//
//          DataSourceSparkParametersArgs{...}
type DataSourceSparkParametersInput interface {
	pulumi.Input

	ToDataSourceSparkParametersOutput() DataSourceSparkParametersOutput
	ToDataSourceSparkParametersOutputWithContext(context.Context) DataSourceSparkParametersOutput
}

// <p>Spark parameters.</p>
type DataSourceSparkParametersArgs struct {
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceSparkParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSparkParameters)(nil)).Elem()
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersOutput() DataSourceSparkParametersOutput {
	return i.ToDataSourceSparkParametersOutputWithContext(context.Background())
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersOutputWithContext(ctx context.Context) DataSourceSparkParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSparkParametersOutput)
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return i.ToDataSourceSparkParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSparkParametersOutput).ToDataSourceSparkParametersPtrOutputWithContext(ctx)
}

// DataSourceSparkParametersPtrInput is an input type that accepts DataSourceSparkParametersArgs, DataSourceSparkParametersPtr and DataSourceSparkParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceSparkParametersPtrInput` via:
//
//          DataSourceSparkParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceSparkParametersPtrInput interface {
	pulumi.Input

	ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput
	ToDataSourceSparkParametersPtrOutputWithContext(context.Context) DataSourceSparkParametersPtrOutput
}

type dataSourceSparkParametersPtrType DataSourceSparkParametersArgs

func DataSourceSparkParametersPtr(v *DataSourceSparkParametersArgs) DataSourceSparkParametersPtrInput {
	return (*dataSourceSparkParametersPtrType)(v)
}

func (*dataSourceSparkParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSparkParameters)(nil)).Elem()
}

func (i *dataSourceSparkParametersPtrType) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return i.ToDataSourceSparkParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceSparkParametersPtrType) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSparkParametersPtrOutput)
}

// <p>Spark parameters.</p>
type DataSourceSparkParametersOutput struct{ *pulumi.OutputState }

func (DataSourceSparkParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSparkParameters)(nil)).Elem()
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersOutput() DataSourceSparkParametersOutput {
	return o
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersOutputWithContext(ctx context.Context) DataSourceSparkParametersOutput {
	return o
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return o.ToDataSourceSparkParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSparkParameters) *DataSourceSparkParameters {
		return &v
	}).(DataSourceSparkParametersPtrOutput)
}

// <p>Host.</p>
func (o DataSourceSparkParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSparkParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceSparkParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceSparkParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceSparkParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSparkParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSparkParameters)(nil)).Elem()
}

func (o DataSourceSparkParametersPtrOutput) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return o
}

func (o DataSourceSparkParametersPtrOutput) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return o
}

func (o DataSourceSparkParametersPtrOutput) Elem() DataSourceSparkParametersOutput {
	return o.ApplyT(func(v *DataSourceSparkParameters) DataSourceSparkParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceSparkParameters
		return ret
	}).(DataSourceSparkParametersOutput)
}

// <p>Host.</p>
func (o DataSourceSparkParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSparkParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceSparkParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceSparkParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>SQL Server parameters.</p>
type DataSourceSqlServerParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceSqlServerParametersInput is an input type that accepts DataSourceSqlServerParametersArgs and DataSourceSqlServerParametersOutput values.
// You can construct a concrete instance of `DataSourceSqlServerParametersInput` via:
//
//          DataSourceSqlServerParametersArgs{...}
type DataSourceSqlServerParametersInput interface {
	pulumi.Input

	ToDataSourceSqlServerParametersOutput() DataSourceSqlServerParametersOutput
	ToDataSourceSqlServerParametersOutputWithContext(context.Context) DataSourceSqlServerParametersOutput
}

// <p>SQL Server parameters.</p>
type DataSourceSqlServerParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceSqlServerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSqlServerParameters)(nil)).Elem()
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersOutput() DataSourceSqlServerParametersOutput {
	return i.ToDataSourceSqlServerParametersOutputWithContext(context.Background())
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersOutputWithContext(ctx context.Context) DataSourceSqlServerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSqlServerParametersOutput)
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return i.ToDataSourceSqlServerParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSqlServerParametersOutput).ToDataSourceSqlServerParametersPtrOutputWithContext(ctx)
}

// DataSourceSqlServerParametersPtrInput is an input type that accepts DataSourceSqlServerParametersArgs, DataSourceSqlServerParametersPtr and DataSourceSqlServerParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceSqlServerParametersPtrInput` via:
//
//          DataSourceSqlServerParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceSqlServerParametersPtrInput interface {
	pulumi.Input

	ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput
	ToDataSourceSqlServerParametersPtrOutputWithContext(context.Context) DataSourceSqlServerParametersPtrOutput
}

type dataSourceSqlServerParametersPtrType DataSourceSqlServerParametersArgs

func DataSourceSqlServerParametersPtr(v *DataSourceSqlServerParametersArgs) DataSourceSqlServerParametersPtrInput {
	return (*dataSourceSqlServerParametersPtrType)(v)
}

func (*dataSourceSqlServerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSqlServerParameters)(nil)).Elem()
}

func (i *dataSourceSqlServerParametersPtrType) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return i.ToDataSourceSqlServerParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceSqlServerParametersPtrType) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSqlServerParametersPtrOutput)
}

// <p>SQL Server parameters.</p>
type DataSourceSqlServerParametersOutput struct{ *pulumi.OutputState }

func (DataSourceSqlServerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSqlServerParameters)(nil)).Elem()
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersOutput() DataSourceSqlServerParametersOutput {
	return o
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersOutputWithContext(ctx context.Context) DataSourceSqlServerParametersOutput {
	return o
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return o.ToDataSourceSqlServerParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSqlServerParameters) *DataSourceSqlServerParameters {
		return &v
	}).(DataSourceSqlServerParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceSqlServerParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSqlServerParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceSqlServerParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSqlServerParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceSqlServerParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceSqlServerParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceSqlServerParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSqlServerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSqlServerParameters)(nil)).Elem()
}

func (o DataSourceSqlServerParametersPtrOutput) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return o
}

func (o DataSourceSqlServerParametersPtrOutput) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return o
}

func (o DataSourceSqlServerParametersPtrOutput) Elem() DataSourceSqlServerParametersOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) DataSourceSqlServerParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceSqlServerParameters
		return ret
	}).(DataSourceSqlServerParametersOutput)
}

// <p>Database.</p>
func (o DataSourceSqlServerParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceSqlServerParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceSqlServerParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
//             underlying data source.</p>
type DataSourceSslProperties struct {
	// <p>A Boolean option to control whether SSL should be disabled.</p>
	DisableSsl *bool `pulumi:"disableSsl"`
}

// DataSourceSslPropertiesInput is an input type that accepts DataSourceSslPropertiesArgs and DataSourceSslPropertiesOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesInput` via:
//
//          DataSourceSslPropertiesArgs{...}
type DataSourceSslPropertiesInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput
	ToDataSourceSslPropertiesOutputWithContext(context.Context) DataSourceSslPropertiesOutput
}

// <p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
//             underlying data source.</p>
type DataSourceSslPropertiesArgs struct {
	// <p>A Boolean option to control whether SSL should be disabled.</p>
	DisableSsl pulumi.BoolPtrInput `pulumi:"disableSsl"`
}

func (DataSourceSslPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return i.ToDataSourceSslPropertiesOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput)
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput).ToDataSourceSslPropertiesPtrOutputWithContext(ctx)
}

// DataSourceSslPropertiesPtrInput is an input type that accepts DataSourceSslPropertiesArgs, DataSourceSslPropertiesPtr and DataSourceSslPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesPtrInput` via:
//
//          DataSourceSslPropertiesArgs{...}
//
//  or:
//
//          nil
type DataSourceSslPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput
	ToDataSourceSslPropertiesPtrOutputWithContext(context.Context) DataSourceSslPropertiesPtrOutput
}

type dataSourceSslPropertiesPtrType DataSourceSslPropertiesArgs

func DataSourceSslPropertiesPtr(v *DataSourceSslPropertiesArgs) DataSourceSslPropertiesPtrInput {
	return (*dataSourceSslPropertiesPtrType)(v)
}

func (*dataSourceSslPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesPtrOutput)
}

// <p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
//             underlying data source.</p>
type DataSourceSslPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSslProperties) *DataSourceSslProperties {
		return &v
	}).(DataSourceSslPropertiesPtrOutput)
}

// <p>A Boolean option to control whether SSL should be disabled.</p>
func (o DataSourceSslPropertiesOutput) DisableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceSslProperties) *bool { return v.DisableSsl }).(pulumi.BoolPtrOutput)
}

type DataSourceSslPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) Elem() DataSourceSslPropertiesOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) DataSourceSslProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceSslProperties
		return ret
	}).(DataSourceSslPropertiesOutput)
}

// <p>A Boolean option to control whether SSL should be disabled.</p>
func (o DataSourceSslPropertiesPtrOutput) DisableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DisableSsl
	}).(pulumi.BoolPtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DataSourceTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// DataSourceTagInput is an input type that accepts DataSourceTagArgs and DataSourceTagOutput values.
// You can construct a concrete instance of `DataSourceTagInput` via:
//
//          DataSourceTagArgs{...}
type DataSourceTagInput interface {
	pulumi.Input

	ToDataSourceTagOutput() DataSourceTagOutput
	ToDataSourceTagOutputWithContext(context.Context) DataSourceTagOutput
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DataSourceTagArgs struct {
	// <p>Tag key.</p>
	Key pulumi.StringInput `pulumi:"key"`
	// <p>Tag value.</p>
	Value pulumi.StringInput `pulumi:"value"`
}

func (DataSourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTag)(nil)).Elem()
}

func (i DataSourceTagArgs) ToDataSourceTagOutput() DataSourceTagOutput {
	return i.ToDataSourceTagOutputWithContext(context.Background())
}

func (i DataSourceTagArgs) ToDataSourceTagOutputWithContext(ctx context.Context) DataSourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTagOutput)
}

// DataSourceTagArrayInput is an input type that accepts DataSourceTagArray and DataSourceTagArrayOutput values.
// You can construct a concrete instance of `DataSourceTagArrayInput` via:
//
//          DataSourceTagArray{ DataSourceTagArgs{...} }
type DataSourceTagArrayInput interface {
	pulumi.Input

	ToDataSourceTagArrayOutput() DataSourceTagArrayOutput
	ToDataSourceTagArrayOutputWithContext(context.Context) DataSourceTagArrayOutput
}

type DataSourceTagArray []DataSourceTagInput

func (DataSourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceTag)(nil)).Elem()
}

func (i DataSourceTagArray) ToDataSourceTagArrayOutput() DataSourceTagArrayOutput {
	return i.ToDataSourceTagArrayOutputWithContext(context.Background())
}

func (i DataSourceTagArray) ToDataSourceTagArrayOutputWithContext(ctx context.Context) DataSourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTagArrayOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type DataSourceTagOutput struct{ *pulumi.OutputState }

func (DataSourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTag)(nil)).Elem()
}

func (o DataSourceTagOutput) ToDataSourceTagOutput() DataSourceTagOutput {
	return o
}

func (o DataSourceTagOutput) ToDataSourceTagOutputWithContext(ctx context.Context) DataSourceTagOutput {
	return o
}

// <p>Tag key.</p>
func (o DataSourceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTag) string { return v.Key }).(pulumi.StringOutput)
}

// <p>Tag value.</p>
func (o DataSourceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTag) string { return v.Value }).(pulumi.StringOutput)
}

type DataSourceTagArrayOutput struct{ *pulumi.OutputState }

func (DataSourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceTag)(nil)).Elem()
}

func (o DataSourceTagArrayOutput) ToDataSourceTagArrayOutput() DataSourceTagArrayOutput {
	return o
}

func (o DataSourceTagArrayOutput) ToDataSourceTagArrayOutputWithContext(ctx context.Context) DataSourceTagArrayOutput {
	return o
}

func (o DataSourceTagArrayOutput) Index(i pulumi.IntInput) DataSourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceTag {
		return vs[0].([]DataSourceTag)[vs[1].(int)]
	}).(DataSourceTagOutput)
}

// <p>Teradata parameters.</p>
type DataSourceTeradataParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceTeradataParametersInput is an input type that accepts DataSourceTeradataParametersArgs and DataSourceTeradataParametersOutput values.
// You can construct a concrete instance of `DataSourceTeradataParametersInput` via:
//
//          DataSourceTeradataParametersArgs{...}
type DataSourceTeradataParametersInput interface {
	pulumi.Input

	ToDataSourceTeradataParametersOutput() DataSourceTeradataParametersOutput
	ToDataSourceTeradataParametersOutputWithContext(context.Context) DataSourceTeradataParametersOutput
}

// <p>Teradata parameters.</p>
type DataSourceTeradataParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceTeradataParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTeradataParameters)(nil)).Elem()
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersOutput() DataSourceTeradataParametersOutput {
	return i.ToDataSourceTeradataParametersOutputWithContext(context.Background())
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersOutputWithContext(ctx context.Context) DataSourceTeradataParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTeradataParametersOutput)
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return i.ToDataSourceTeradataParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTeradataParametersOutput).ToDataSourceTeradataParametersPtrOutputWithContext(ctx)
}

// DataSourceTeradataParametersPtrInput is an input type that accepts DataSourceTeradataParametersArgs, DataSourceTeradataParametersPtr and DataSourceTeradataParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceTeradataParametersPtrInput` via:
//
//          DataSourceTeradataParametersArgs{...}
//
//  or:
//
//          nil
type DataSourceTeradataParametersPtrInput interface {
	pulumi.Input

	ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput
	ToDataSourceTeradataParametersPtrOutputWithContext(context.Context) DataSourceTeradataParametersPtrOutput
}

type dataSourceTeradataParametersPtrType DataSourceTeradataParametersArgs

func DataSourceTeradataParametersPtr(v *DataSourceTeradataParametersArgs) DataSourceTeradataParametersPtrInput {
	return (*dataSourceTeradataParametersPtrType)(v)
}

func (*dataSourceTeradataParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceTeradataParameters)(nil)).Elem()
}

func (i *dataSourceTeradataParametersPtrType) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return i.ToDataSourceTeradataParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceTeradataParametersPtrType) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTeradataParametersPtrOutput)
}

// <p>Teradata parameters.</p>
type DataSourceTeradataParametersOutput struct{ *pulumi.OutputState }

func (DataSourceTeradataParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTeradataParameters)(nil)).Elem()
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersOutput() DataSourceTeradataParametersOutput {
	return o
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersOutputWithContext(ctx context.Context) DataSourceTeradataParametersOutput {
	return o
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return o.ToDataSourceTeradataParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceTeradataParameters) *DataSourceTeradataParameters {
		return &v
	}).(DataSourceTeradataParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceTeradataParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTeradataParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceTeradataParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTeradataParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceTeradataParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceTeradataParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceTeradataParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceTeradataParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceTeradataParameters)(nil)).Elem()
}

func (o DataSourceTeradataParametersPtrOutput) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return o
}

func (o DataSourceTeradataParametersPtrOutput) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return o
}

func (o DataSourceTeradataParametersPtrOutput) Elem() DataSourceTeradataParametersOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) DataSourceTeradataParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceTeradataParameters
		return ret
	}).(DataSourceTeradataParametersOutput)
}

// <p>Database.</p>
func (o DataSourceTeradataParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceTeradataParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceTeradataParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>VPC connection properties.</p>
type DataSourceVpcConnectionProperties struct {
	// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
	VpcConnectionArn string `pulumi:"vpcConnectionArn"`
}

// DataSourceVpcConnectionPropertiesInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs and DataSourceVpcConnectionPropertiesOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesInput` via:
//
//          DataSourceVpcConnectionPropertiesArgs{...}
type DataSourceVpcConnectionPropertiesInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput
	ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesOutput
}

// <p>VPC connection properties.</p>
type DataSourceVpcConnectionPropertiesArgs struct {
	// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
	VpcConnectionArn pulumi.StringInput `pulumi:"vpcConnectionArn"`
}

func (DataSourceVpcConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return i.ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput)
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput).ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx)
}

// DataSourceVpcConnectionPropertiesPtrInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs, DataSourceVpcConnectionPropertiesPtr and DataSourceVpcConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesPtrInput` via:
//
//          DataSourceVpcConnectionPropertiesArgs{...}
//
//  or:
//
//          nil
type DataSourceVpcConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput
	ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesPtrOutput
}

type dataSourceVpcConnectionPropertiesPtrType DataSourceVpcConnectionPropertiesArgs

func DataSourceVpcConnectionPropertiesPtr(v *DataSourceVpcConnectionPropertiesArgs) DataSourceVpcConnectionPropertiesPtrInput {
	return (*dataSourceVpcConnectionPropertiesPtrType)(v)
}

func (*dataSourceVpcConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// <p>VPC connection properties.</p>
type DataSourceVpcConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceVpcConnectionProperties) *DataSourceVpcConnectionProperties {
		return &v
	}).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
func (o DataSourceVpcConnectionPropertiesOutput) VpcConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceVpcConnectionProperties) string { return v.VpcConnectionArn }).(pulumi.StringOutput)
}

type DataSourceVpcConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) Elem() DataSourceVpcConnectionPropertiesOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) DataSourceVpcConnectionProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceVpcConnectionProperties
		return ret
	}).(DataSourceVpcConnectionPropertiesOutput)
}

// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
func (o DataSourceVpcConnectionPropertiesPtrOutput) VpcConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.VpcConnectionArn
	}).(pulumi.StringPtrOutput)
}

// <p>A structure describing the name, data type, and geographic role of the columns.</p>
type TemplateColumnGroupColumnSchema struct {
	// <p>The name of the column group's column schema.</p>
	Name *string `pulumi:"name"`
}

// TemplateColumnGroupColumnSchemaInput is an input type that accepts TemplateColumnGroupColumnSchemaArgs and TemplateColumnGroupColumnSchemaOutput values.
// You can construct a concrete instance of `TemplateColumnGroupColumnSchemaInput` via:
//
//          TemplateColumnGroupColumnSchemaArgs{...}
type TemplateColumnGroupColumnSchemaInput interface {
	pulumi.Input

	ToTemplateColumnGroupColumnSchemaOutput() TemplateColumnGroupColumnSchemaOutput
	ToTemplateColumnGroupColumnSchemaOutputWithContext(context.Context) TemplateColumnGroupColumnSchemaOutput
}

// <p>A structure describing the name, data type, and geographic role of the columns.</p>
type TemplateColumnGroupColumnSchemaArgs struct {
	// <p>The name of the column group's column schema.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateColumnGroupColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (i TemplateColumnGroupColumnSchemaArgs) ToTemplateColumnGroupColumnSchemaOutput() TemplateColumnGroupColumnSchemaOutput {
	return i.ToTemplateColumnGroupColumnSchemaOutputWithContext(context.Background())
}

func (i TemplateColumnGroupColumnSchemaArgs) ToTemplateColumnGroupColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupColumnSchemaOutput)
}

// TemplateColumnGroupColumnSchemaArrayInput is an input type that accepts TemplateColumnGroupColumnSchemaArray and TemplateColumnGroupColumnSchemaArrayOutput values.
// You can construct a concrete instance of `TemplateColumnGroupColumnSchemaArrayInput` via:
//
//          TemplateColumnGroupColumnSchemaArray{ TemplateColumnGroupColumnSchemaArgs{...} }
type TemplateColumnGroupColumnSchemaArrayInput interface {
	pulumi.Input

	ToTemplateColumnGroupColumnSchemaArrayOutput() TemplateColumnGroupColumnSchemaArrayOutput
	ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(context.Context) TemplateColumnGroupColumnSchemaArrayOutput
}

type TemplateColumnGroupColumnSchemaArray []TemplateColumnGroupColumnSchemaInput

func (TemplateColumnGroupColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (i TemplateColumnGroupColumnSchemaArray) ToTemplateColumnGroupColumnSchemaArrayOutput() TemplateColumnGroupColumnSchemaArrayOutput {
	return i.ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(context.Background())
}

func (i TemplateColumnGroupColumnSchemaArray) ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupColumnSchemaArrayOutput)
}

// <p>A structure describing the name, data type, and geographic role of the columns.</p>
type TemplateColumnGroupColumnSchemaOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (o TemplateColumnGroupColumnSchemaOutput) ToTemplateColumnGroupColumnSchemaOutput() TemplateColumnGroupColumnSchemaOutput {
	return o
}

func (o TemplateColumnGroupColumnSchemaOutput) ToTemplateColumnGroupColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaOutput {
	return o
}

// <p>The name of the column group's column schema.</p>
func (o TemplateColumnGroupColumnSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnGroupColumnSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateColumnGroupColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (o TemplateColumnGroupColumnSchemaArrayOutput) ToTemplateColumnGroupColumnSchemaArrayOutput() TemplateColumnGroupColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupColumnSchemaArrayOutput) ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupColumnSchemaArrayOutput) Index(i pulumi.IntInput) TemplateColumnGroupColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnGroupColumnSchema {
		return vs[0].([]TemplateColumnGroupColumnSchema)[vs[1].(int)]
	}).(TemplateColumnGroupColumnSchemaOutput)
}

// <p>The column group schema.</p>
type TemplateColumnGroupSchema struct {
	// <p>A structure containing the list of schemas for column group columns.</p>
	ColumnGroupColumnSchemaList []TemplateColumnGroupColumnSchema `pulumi:"columnGroupColumnSchemaList"`
	// <p>The name of the column group schema.</p>
	Name *string `pulumi:"name"`
}

// TemplateColumnGroupSchemaInput is an input type that accepts TemplateColumnGroupSchemaArgs and TemplateColumnGroupSchemaOutput values.
// You can construct a concrete instance of `TemplateColumnGroupSchemaInput` via:
//
//          TemplateColumnGroupSchemaArgs{...}
type TemplateColumnGroupSchemaInput interface {
	pulumi.Input

	ToTemplateColumnGroupSchemaOutput() TemplateColumnGroupSchemaOutput
	ToTemplateColumnGroupSchemaOutputWithContext(context.Context) TemplateColumnGroupSchemaOutput
}

// <p>The column group schema.</p>
type TemplateColumnGroupSchemaArgs struct {
	// <p>A structure containing the list of schemas for column group columns.</p>
	ColumnGroupColumnSchemaList TemplateColumnGroupColumnSchemaArrayInput `pulumi:"columnGroupColumnSchemaList"`
	// <p>The name of the column group schema.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateColumnGroupSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupSchema)(nil)).Elem()
}

func (i TemplateColumnGroupSchemaArgs) ToTemplateColumnGroupSchemaOutput() TemplateColumnGroupSchemaOutput {
	return i.ToTemplateColumnGroupSchemaOutputWithContext(context.Background())
}

func (i TemplateColumnGroupSchemaArgs) ToTemplateColumnGroupSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupSchemaOutput)
}

// TemplateColumnGroupSchemaArrayInput is an input type that accepts TemplateColumnGroupSchemaArray and TemplateColumnGroupSchemaArrayOutput values.
// You can construct a concrete instance of `TemplateColumnGroupSchemaArrayInput` via:
//
//          TemplateColumnGroupSchemaArray{ TemplateColumnGroupSchemaArgs{...} }
type TemplateColumnGroupSchemaArrayInput interface {
	pulumi.Input

	ToTemplateColumnGroupSchemaArrayOutput() TemplateColumnGroupSchemaArrayOutput
	ToTemplateColumnGroupSchemaArrayOutputWithContext(context.Context) TemplateColumnGroupSchemaArrayOutput
}

type TemplateColumnGroupSchemaArray []TemplateColumnGroupSchemaInput

func (TemplateColumnGroupSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupSchema)(nil)).Elem()
}

func (i TemplateColumnGroupSchemaArray) ToTemplateColumnGroupSchemaArrayOutput() TemplateColumnGroupSchemaArrayOutput {
	return i.ToTemplateColumnGroupSchemaArrayOutputWithContext(context.Background())
}

func (i TemplateColumnGroupSchemaArray) ToTemplateColumnGroupSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupSchemaArrayOutput)
}

// <p>The column group schema.</p>
type TemplateColumnGroupSchemaOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupSchema)(nil)).Elem()
}

func (o TemplateColumnGroupSchemaOutput) ToTemplateColumnGroupSchemaOutput() TemplateColumnGroupSchemaOutput {
	return o
}

func (o TemplateColumnGroupSchemaOutput) ToTemplateColumnGroupSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaOutput {
	return o
}

// <p>A structure containing the list of schemas for column group columns.</p>
func (o TemplateColumnGroupSchemaOutput) ColumnGroupColumnSchemaList() TemplateColumnGroupColumnSchemaArrayOutput {
	return o.ApplyT(func(v TemplateColumnGroupSchema) []TemplateColumnGroupColumnSchema {
		return v.ColumnGroupColumnSchemaList
	}).(TemplateColumnGroupColumnSchemaArrayOutput)
}

// <p>The name of the column group schema.</p>
func (o TemplateColumnGroupSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnGroupSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateColumnGroupSchemaArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupSchema)(nil)).Elem()
}

func (o TemplateColumnGroupSchemaArrayOutput) ToTemplateColumnGroupSchemaArrayOutput() TemplateColumnGroupSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupSchemaArrayOutput) ToTemplateColumnGroupSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupSchemaArrayOutput) Index(i pulumi.IntInput) TemplateColumnGroupSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnGroupSchema {
		return vs[0].([]TemplateColumnGroupSchema)[vs[1].(int)]
	}).(TemplateColumnGroupSchemaOutput)
}

// <p>The column schema.</p>
type TemplateColumnSchema struct {
	// <p>The data type of the column schema.</p>
	DataType *string `pulumi:"dataType"`
	// <p>The geographic role of the column schema.</p>
	GeographicRole *string `pulumi:"geographicRole"`
	// <p>The name of the column schema.</p>
	Name *string `pulumi:"name"`
}

// TemplateColumnSchemaInput is an input type that accepts TemplateColumnSchemaArgs and TemplateColumnSchemaOutput values.
// You can construct a concrete instance of `TemplateColumnSchemaInput` via:
//
//          TemplateColumnSchemaArgs{...}
type TemplateColumnSchemaInput interface {
	pulumi.Input

	ToTemplateColumnSchemaOutput() TemplateColumnSchemaOutput
	ToTemplateColumnSchemaOutputWithContext(context.Context) TemplateColumnSchemaOutput
}

// <p>The column schema.</p>
type TemplateColumnSchemaArgs struct {
	// <p>The data type of the column schema.</p>
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// <p>The geographic role of the column schema.</p>
	GeographicRole pulumi.StringPtrInput `pulumi:"geographicRole"`
	// <p>The name of the column schema.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnSchema)(nil)).Elem()
}

func (i TemplateColumnSchemaArgs) ToTemplateColumnSchemaOutput() TemplateColumnSchemaOutput {
	return i.ToTemplateColumnSchemaOutputWithContext(context.Background())
}

func (i TemplateColumnSchemaArgs) ToTemplateColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSchemaOutput)
}

// TemplateColumnSchemaArrayInput is an input type that accepts TemplateColumnSchemaArray and TemplateColumnSchemaArrayOutput values.
// You can construct a concrete instance of `TemplateColumnSchemaArrayInput` via:
//
//          TemplateColumnSchemaArray{ TemplateColumnSchemaArgs{...} }
type TemplateColumnSchemaArrayInput interface {
	pulumi.Input

	ToTemplateColumnSchemaArrayOutput() TemplateColumnSchemaArrayOutput
	ToTemplateColumnSchemaArrayOutputWithContext(context.Context) TemplateColumnSchemaArrayOutput
}

type TemplateColumnSchemaArray []TemplateColumnSchemaInput

func (TemplateColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnSchema)(nil)).Elem()
}

func (i TemplateColumnSchemaArray) ToTemplateColumnSchemaArrayOutput() TemplateColumnSchemaArrayOutput {
	return i.ToTemplateColumnSchemaArrayOutputWithContext(context.Background())
}

func (i TemplateColumnSchemaArray) ToTemplateColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSchemaArrayOutput)
}

// <p>The column schema.</p>
type TemplateColumnSchemaOutput struct{ *pulumi.OutputState }

func (TemplateColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnSchema)(nil)).Elem()
}

func (o TemplateColumnSchemaOutput) ToTemplateColumnSchemaOutput() TemplateColumnSchemaOutput {
	return o
}

func (o TemplateColumnSchemaOutput) ToTemplateColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnSchemaOutput {
	return o
}

// <p>The data type of the column schema.</p>
func (o TemplateColumnSchemaOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnSchema) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// <p>The geographic role of the column schema.</p>
func (o TemplateColumnSchemaOutput) GeographicRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnSchema) *string { return v.GeographicRole }).(pulumi.StringPtrOutput)
}

// <p>The name of the column schema.</p>
func (o TemplateColumnSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnSchema)(nil)).Elem()
}

func (o TemplateColumnSchemaArrayOutput) ToTemplateColumnSchemaArrayOutput() TemplateColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnSchemaArrayOutput) ToTemplateColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnSchemaArrayOutput) Index(i pulumi.IntInput) TemplateColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnSchema {
		return vs[0].([]TemplateColumnSchema)[vs[1].(int)]
	}).(TemplateColumnSchemaOutput)
}

// <p>Dataset configuration.</p>
type TemplateDataSetConfiguration struct {
	// <p>A structure containing the list of column group schemas.</p>
	ColumnGroupSchemaList []TemplateColumnGroupSchema `pulumi:"columnGroupSchemaList"`
	DataSetSchema         *TemplateDataSetSchema      `pulumi:"dataSetSchema"`
	// <p>Placeholder.</p>
	Placeholder *string `pulumi:"placeholder"`
}

// TemplateDataSetConfigurationInput is an input type that accepts TemplateDataSetConfigurationArgs and TemplateDataSetConfigurationOutput values.
// You can construct a concrete instance of `TemplateDataSetConfigurationInput` via:
//
//          TemplateDataSetConfigurationArgs{...}
type TemplateDataSetConfigurationInput interface {
	pulumi.Input

	ToTemplateDataSetConfigurationOutput() TemplateDataSetConfigurationOutput
	ToTemplateDataSetConfigurationOutputWithContext(context.Context) TemplateDataSetConfigurationOutput
}

// <p>Dataset configuration.</p>
type TemplateDataSetConfigurationArgs struct {
	// <p>A structure containing the list of column group schemas.</p>
	ColumnGroupSchemaList TemplateColumnGroupSchemaArrayInput `pulumi:"columnGroupSchemaList"`
	DataSetSchema         TemplateDataSetSchemaPtrInput       `pulumi:"dataSetSchema"`
	// <p>Placeholder.</p>
	Placeholder pulumi.StringPtrInput `pulumi:"placeholder"`
}

func (TemplateDataSetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetConfiguration)(nil)).Elem()
}

func (i TemplateDataSetConfigurationArgs) ToTemplateDataSetConfigurationOutput() TemplateDataSetConfigurationOutput {
	return i.ToTemplateDataSetConfigurationOutputWithContext(context.Background())
}

func (i TemplateDataSetConfigurationArgs) ToTemplateDataSetConfigurationOutputWithContext(ctx context.Context) TemplateDataSetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetConfigurationOutput)
}

// TemplateDataSetConfigurationArrayInput is an input type that accepts TemplateDataSetConfigurationArray and TemplateDataSetConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateDataSetConfigurationArrayInput` via:
//
//          TemplateDataSetConfigurationArray{ TemplateDataSetConfigurationArgs{...} }
type TemplateDataSetConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateDataSetConfigurationArrayOutput() TemplateDataSetConfigurationArrayOutput
	ToTemplateDataSetConfigurationArrayOutputWithContext(context.Context) TemplateDataSetConfigurationArrayOutput
}

type TemplateDataSetConfigurationArray []TemplateDataSetConfigurationInput

func (TemplateDataSetConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetConfiguration)(nil)).Elem()
}

func (i TemplateDataSetConfigurationArray) ToTemplateDataSetConfigurationArrayOutput() TemplateDataSetConfigurationArrayOutput {
	return i.ToTemplateDataSetConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateDataSetConfigurationArray) ToTemplateDataSetConfigurationArrayOutputWithContext(ctx context.Context) TemplateDataSetConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetConfigurationArrayOutput)
}

// <p>Dataset configuration.</p>
type TemplateDataSetConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDataSetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetConfiguration)(nil)).Elem()
}

func (o TemplateDataSetConfigurationOutput) ToTemplateDataSetConfigurationOutput() TemplateDataSetConfigurationOutput {
	return o
}

func (o TemplateDataSetConfigurationOutput) ToTemplateDataSetConfigurationOutputWithContext(ctx context.Context) TemplateDataSetConfigurationOutput {
	return o
}

// <p>A structure containing the list of column group schemas.</p>
func (o TemplateDataSetConfigurationOutput) ColumnGroupSchemaList() TemplateColumnGroupSchemaArrayOutput {
	return o.ApplyT(func(v TemplateDataSetConfiguration) []TemplateColumnGroupSchema { return v.ColumnGroupSchemaList }).(TemplateColumnGroupSchemaArrayOutput)
}

func (o TemplateDataSetConfigurationOutput) DataSetSchema() TemplateDataSetSchemaPtrOutput {
	return o.ApplyT(func(v TemplateDataSetConfiguration) *TemplateDataSetSchema { return v.DataSetSchema }).(TemplateDataSetSchemaPtrOutput)
}

// <p>Placeholder.</p>
func (o TemplateDataSetConfigurationOutput) Placeholder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataSetConfiguration) *string { return v.Placeholder }).(pulumi.StringPtrOutput)
}

type TemplateDataSetConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataSetConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetConfiguration)(nil)).Elem()
}

func (o TemplateDataSetConfigurationArrayOutput) ToTemplateDataSetConfigurationArrayOutput() TemplateDataSetConfigurationArrayOutput {
	return o
}

func (o TemplateDataSetConfigurationArrayOutput) ToTemplateDataSetConfigurationArrayOutputWithContext(ctx context.Context) TemplateDataSetConfigurationArrayOutput {
	return o
}

func (o TemplateDataSetConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateDataSetConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataSetConfiguration {
		return vs[0].([]TemplateDataSetConfiguration)[vs[1].(int)]
	}).(TemplateDataSetConfigurationOutput)
}

// <p>Dataset reference.</p>
type TemplateDataSetReference struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn string `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

// TemplateDataSetReferenceInput is an input type that accepts TemplateDataSetReferenceArgs and TemplateDataSetReferenceOutput values.
// You can construct a concrete instance of `TemplateDataSetReferenceInput` via:
//
//          TemplateDataSetReferenceArgs{...}
type TemplateDataSetReferenceInput interface {
	pulumi.Input

	ToTemplateDataSetReferenceOutput() TemplateDataSetReferenceOutput
	ToTemplateDataSetReferenceOutputWithContext(context.Context) TemplateDataSetReferenceOutput
}

// <p>Dataset reference.</p>
type TemplateDataSetReferenceArgs struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn pulumi.StringInput `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder pulumi.StringInput `pulumi:"dataSetPlaceholder"`
}

func (TemplateDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetReference)(nil)).Elem()
}

func (i TemplateDataSetReferenceArgs) ToTemplateDataSetReferenceOutput() TemplateDataSetReferenceOutput {
	return i.ToTemplateDataSetReferenceOutputWithContext(context.Background())
}

func (i TemplateDataSetReferenceArgs) ToTemplateDataSetReferenceOutputWithContext(ctx context.Context) TemplateDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetReferenceOutput)
}

// TemplateDataSetReferenceArrayInput is an input type that accepts TemplateDataSetReferenceArray and TemplateDataSetReferenceArrayOutput values.
// You can construct a concrete instance of `TemplateDataSetReferenceArrayInput` via:
//
//          TemplateDataSetReferenceArray{ TemplateDataSetReferenceArgs{...} }
type TemplateDataSetReferenceArrayInput interface {
	pulumi.Input

	ToTemplateDataSetReferenceArrayOutput() TemplateDataSetReferenceArrayOutput
	ToTemplateDataSetReferenceArrayOutputWithContext(context.Context) TemplateDataSetReferenceArrayOutput
}

type TemplateDataSetReferenceArray []TemplateDataSetReferenceInput

func (TemplateDataSetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetReference)(nil)).Elem()
}

func (i TemplateDataSetReferenceArray) ToTemplateDataSetReferenceArrayOutput() TemplateDataSetReferenceArrayOutput {
	return i.ToTemplateDataSetReferenceArrayOutputWithContext(context.Background())
}

func (i TemplateDataSetReferenceArray) ToTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) TemplateDataSetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetReferenceArrayOutput)
}

// <p>Dataset reference.</p>
type TemplateDataSetReferenceOutput struct{ *pulumi.OutputState }

func (TemplateDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetReference)(nil)).Elem()
}

func (o TemplateDataSetReferenceOutput) ToTemplateDataSetReferenceOutput() TemplateDataSetReferenceOutput {
	return o
}

func (o TemplateDataSetReferenceOutput) ToTemplateDataSetReferenceOutputWithContext(ctx context.Context) TemplateDataSetReferenceOutput {
	return o
}

// <p>Dataset Amazon Resource Name (ARN).</p>
func (o TemplateDataSetReferenceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDataSetReference) string { return v.DataSetArn }).(pulumi.StringOutput)
}

// <p>Dataset placeholder.</p>
func (o TemplateDataSetReferenceOutput) DataSetPlaceholder() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDataSetReference) string { return v.DataSetPlaceholder }).(pulumi.StringOutput)
}

type TemplateDataSetReferenceArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataSetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetReference)(nil)).Elem()
}

func (o TemplateDataSetReferenceArrayOutput) ToTemplateDataSetReferenceArrayOutput() TemplateDataSetReferenceArrayOutput {
	return o
}

func (o TemplateDataSetReferenceArrayOutput) ToTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) TemplateDataSetReferenceArrayOutput {
	return o
}

func (o TemplateDataSetReferenceArrayOutput) Index(i pulumi.IntInput) TemplateDataSetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataSetReference {
		return vs[0].([]TemplateDataSetReference)[vs[1].(int)]
	}).(TemplateDataSetReferenceOutput)
}

// <p>Dataset schema.</p>
type TemplateDataSetSchema struct {
	// <p>A structure containing the list of column schemas.</p>
	ColumnSchemaList []TemplateColumnSchema `pulumi:"columnSchemaList"`
}

// TemplateDataSetSchemaInput is an input type that accepts TemplateDataSetSchemaArgs and TemplateDataSetSchemaOutput values.
// You can construct a concrete instance of `TemplateDataSetSchemaInput` via:
//
//          TemplateDataSetSchemaArgs{...}
type TemplateDataSetSchemaInput interface {
	pulumi.Input

	ToTemplateDataSetSchemaOutput() TemplateDataSetSchemaOutput
	ToTemplateDataSetSchemaOutputWithContext(context.Context) TemplateDataSetSchemaOutput
}

// <p>Dataset schema.</p>
type TemplateDataSetSchemaArgs struct {
	// <p>A structure containing the list of column schemas.</p>
	ColumnSchemaList TemplateColumnSchemaArrayInput `pulumi:"columnSchemaList"`
}

func (TemplateDataSetSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetSchema)(nil)).Elem()
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaOutput() TemplateDataSetSchemaOutput {
	return i.ToTemplateDataSetSchemaOutputWithContext(context.Background())
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaOutputWithContext(ctx context.Context) TemplateDataSetSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetSchemaOutput)
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return i.ToTemplateDataSetSchemaPtrOutputWithContext(context.Background())
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetSchemaOutput).ToTemplateDataSetSchemaPtrOutputWithContext(ctx)
}

// TemplateDataSetSchemaPtrInput is an input type that accepts TemplateDataSetSchemaArgs, TemplateDataSetSchemaPtr and TemplateDataSetSchemaPtrOutput values.
// You can construct a concrete instance of `TemplateDataSetSchemaPtrInput` via:
//
//          TemplateDataSetSchemaArgs{...}
//
//  or:
//
//          nil
type TemplateDataSetSchemaPtrInput interface {
	pulumi.Input

	ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput
	ToTemplateDataSetSchemaPtrOutputWithContext(context.Context) TemplateDataSetSchemaPtrOutput
}

type templateDataSetSchemaPtrType TemplateDataSetSchemaArgs

func TemplateDataSetSchemaPtr(v *TemplateDataSetSchemaArgs) TemplateDataSetSchemaPtrInput {
	return (*templateDataSetSchemaPtrType)(v)
}

func (*templateDataSetSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataSetSchema)(nil)).Elem()
}

func (i *templateDataSetSchemaPtrType) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return i.ToTemplateDataSetSchemaPtrOutputWithContext(context.Background())
}

func (i *templateDataSetSchemaPtrType) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetSchemaPtrOutput)
}

// <p>Dataset schema.</p>
type TemplateDataSetSchemaOutput struct{ *pulumi.OutputState }

func (TemplateDataSetSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetSchema)(nil)).Elem()
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaOutput() TemplateDataSetSchemaOutput {
	return o
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaOutputWithContext(ctx context.Context) TemplateDataSetSchemaOutput {
	return o
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return o.ToTemplateDataSetSchemaPtrOutputWithContext(context.Background())
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataSetSchema) *TemplateDataSetSchema {
		return &v
	}).(TemplateDataSetSchemaPtrOutput)
}

// <p>A structure containing the list of column schemas.</p>
func (o TemplateDataSetSchemaOutput) ColumnSchemaList() TemplateColumnSchemaArrayOutput {
	return o.ApplyT(func(v TemplateDataSetSchema) []TemplateColumnSchema { return v.ColumnSchemaList }).(TemplateColumnSchemaArrayOutput)
}

type TemplateDataSetSchemaPtrOutput struct{ *pulumi.OutputState }

func (TemplateDataSetSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataSetSchema)(nil)).Elem()
}

func (o TemplateDataSetSchemaPtrOutput) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return o
}

func (o TemplateDataSetSchemaPtrOutput) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return o
}

func (o TemplateDataSetSchemaPtrOutput) Elem() TemplateDataSetSchemaOutput {
	return o.ApplyT(func(v *TemplateDataSetSchema) TemplateDataSetSchema {
		if v != nil {
			return *v
		}
		var ret TemplateDataSetSchema
		return ret
	}).(TemplateDataSetSchemaOutput)
}

// <p>A structure containing the list of column schemas.</p>
func (o TemplateDataSetSchemaPtrOutput) ColumnSchemaList() TemplateColumnSchemaArrayOutput {
	return o.ApplyT(func(v *TemplateDataSetSchema) []TemplateColumnSchema {
		if v == nil {
			return nil
		}
		return v.ColumnSchemaList
	}).(TemplateColumnSchemaArrayOutput)
}

// <p>List of errors that occurred when the template version creation failed.</p>
type TemplateError struct {
	// <p>Description of the error type.</p>
	Message *string            `pulumi:"message"`
	Type    *TemplateErrorType `pulumi:"type"`
}

// TemplateErrorInput is an input type that accepts TemplateErrorArgs and TemplateErrorOutput values.
// You can construct a concrete instance of `TemplateErrorInput` via:
//
//          TemplateErrorArgs{...}
type TemplateErrorInput interface {
	pulumi.Input

	ToTemplateErrorOutput() TemplateErrorOutput
	ToTemplateErrorOutputWithContext(context.Context) TemplateErrorOutput
}

// <p>List of errors that occurred when the template version creation failed.</p>
type TemplateErrorArgs struct {
	// <p>Description of the error type.</p>
	Message pulumi.StringPtrInput     `pulumi:"message"`
	Type    TemplateErrorTypePtrInput `pulumi:"type"`
}

func (TemplateErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateError)(nil)).Elem()
}

func (i TemplateErrorArgs) ToTemplateErrorOutput() TemplateErrorOutput {
	return i.ToTemplateErrorOutputWithContext(context.Background())
}

func (i TemplateErrorArgs) ToTemplateErrorOutputWithContext(ctx context.Context) TemplateErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateErrorOutput)
}

// TemplateErrorArrayInput is an input type that accepts TemplateErrorArray and TemplateErrorArrayOutput values.
// You can construct a concrete instance of `TemplateErrorArrayInput` via:
//
//          TemplateErrorArray{ TemplateErrorArgs{...} }
type TemplateErrorArrayInput interface {
	pulumi.Input

	ToTemplateErrorArrayOutput() TemplateErrorArrayOutput
	ToTemplateErrorArrayOutputWithContext(context.Context) TemplateErrorArrayOutput
}

type TemplateErrorArray []TemplateErrorInput

func (TemplateErrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateError)(nil)).Elem()
}

func (i TemplateErrorArray) ToTemplateErrorArrayOutput() TemplateErrorArrayOutput {
	return i.ToTemplateErrorArrayOutputWithContext(context.Background())
}

func (i TemplateErrorArray) ToTemplateErrorArrayOutputWithContext(ctx context.Context) TemplateErrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateErrorArrayOutput)
}

// <p>List of errors that occurred when the template version creation failed.</p>
type TemplateErrorOutput struct{ *pulumi.OutputState }

func (TemplateErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateError)(nil)).Elem()
}

func (o TemplateErrorOutput) ToTemplateErrorOutput() TemplateErrorOutput {
	return o
}

func (o TemplateErrorOutput) ToTemplateErrorOutputWithContext(ctx context.Context) TemplateErrorOutput {
	return o
}

// <p>Description of the error type.</p>
func (o TemplateErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o TemplateErrorOutput) Type() TemplateErrorTypePtrOutput {
	return o.ApplyT(func(v TemplateError) *TemplateErrorType { return v.Type }).(TemplateErrorTypePtrOutput)
}

type TemplateErrorArrayOutput struct{ *pulumi.OutputState }

func (TemplateErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateError)(nil)).Elem()
}

func (o TemplateErrorArrayOutput) ToTemplateErrorArrayOutput() TemplateErrorArrayOutput {
	return o
}

func (o TemplateErrorArrayOutput) ToTemplateErrorArrayOutputWithContext(ctx context.Context) TemplateErrorArrayOutput {
	return o
}

func (o TemplateErrorArrayOutput) Index(i pulumi.IntInput) TemplateErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateError {
		return vs[0].([]TemplateError)[vs[1].(int)]
	}).(TemplateErrorOutput)
}

// <p>Permission for the resource.</p>
type TemplateResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// TemplateResourcePermissionInput is an input type that accepts TemplateResourcePermissionArgs and TemplateResourcePermissionOutput values.
// You can construct a concrete instance of `TemplateResourcePermissionInput` via:
//
//          TemplateResourcePermissionArgs{...}
type TemplateResourcePermissionInput interface {
	pulumi.Input

	ToTemplateResourcePermissionOutput() TemplateResourcePermissionOutput
	ToTemplateResourcePermissionOutputWithContext(context.Context) TemplateResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type TemplateResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (TemplateResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateResourcePermission)(nil)).Elem()
}

func (i TemplateResourcePermissionArgs) ToTemplateResourcePermissionOutput() TemplateResourcePermissionOutput {
	return i.ToTemplateResourcePermissionOutputWithContext(context.Background())
}

func (i TemplateResourcePermissionArgs) ToTemplateResourcePermissionOutputWithContext(ctx context.Context) TemplateResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateResourcePermissionOutput)
}

// TemplateResourcePermissionArrayInput is an input type that accepts TemplateResourcePermissionArray and TemplateResourcePermissionArrayOutput values.
// You can construct a concrete instance of `TemplateResourcePermissionArrayInput` via:
//
//          TemplateResourcePermissionArray{ TemplateResourcePermissionArgs{...} }
type TemplateResourcePermissionArrayInput interface {
	pulumi.Input

	ToTemplateResourcePermissionArrayOutput() TemplateResourcePermissionArrayOutput
	ToTemplateResourcePermissionArrayOutputWithContext(context.Context) TemplateResourcePermissionArrayOutput
}

type TemplateResourcePermissionArray []TemplateResourcePermissionInput

func (TemplateResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateResourcePermission)(nil)).Elem()
}

func (i TemplateResourcePermissionArray) ToTemplateResourcePermissionArrayOutput() TemplateResourcePermissionArrayOutput {
	return i.ToTemplateResourcePermissionArrayOutputWithContext(context.Background())
}

func (i TemplateResourcePermissionArray) ToTemplateResourcePermissionArrayOutputWithContext(ctx context.Context) TemplateResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type TemplateResourcePermissionOutput struct{ *pulumi.OutputState }

func (TemplateResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateResourcePermission)(nil)).Elem()
}

func (o TemplateResourcePermissionOutput) ToTemplateResourcePermissionOutput() TemplateResourcePermissionOutput {
	return o
}

func (o TemplateResourcePermissionOutput) ToTemplateResourcePermissionOutputWithContext(ctx context.Context) TemplateResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o TemplateResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//             following:</p>
//         <ul>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
//                     ARN. Use this option only to share resources (templates) across AWS accounts.
//                     (This is less common.) </p>
//             </li>
//          </ul>
func (o TemplateResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type TemplateResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (TemplateResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateResourcePermission)(nil)).Elem()
}

func (o TemplateResourcePermissionArrayOutput) ToTemplateResourcePermissionArrayOutput() TemplateResourcePermissionArrayOutput {
	return o
}

func (o TemplateResourcePermissionArrayOutput) ToTemplateResourcePermissionArrayOutputWithContext(ctx context.Context) TemplateResourcePermissionArrayOutput {
	return o
}

func (o TemplateResourcePermissionArrayOutput) Index(i pulumi.IntInput) TemplateResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateResourcePermission {
		return vs[0].([]TemplateResourcePermission)[vs[1].(int)]
	}).(TemplateResourcePermissionOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type TemplateSheet struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
	//             console.</p>
	Name *string `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId *string `pulumi:"sheetId"`
}

// TemplateSheetInput is an input type that accepts TemplateSheetArgs and TemplateSheetOutput values.
// You can construct a concrete instance of `TemplateSheetInput` via:
//
//          TemplateSheetArgs{...}
type TemplateSheetInput interface {
	pulumi.Input

	ToTemplateSheetOutput() TemplateSheetOutput
	ToTemplateSheetOutputWithContext(context.Context) TemplateSheetOutput
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type TemplateSheetArgs struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
	//             console.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId pulumi.StringPtrInput `pulumi:"sheetId"`
}

func (TemplateSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheet)(nil)).Elem()
}

func (i TemplateSheetArgs) ToTemplateSheetOutput() TemplateSheetOutput {
	return i.ToTemplateSheetOutputWithContext(context.Background())
}

func (i TemplateSheetArgs) ToTemplateSheetOutputWithContext(ctx context.Context) TemplateSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetOutput)
}

// TemplateSheetArrayInput is an input type that accepts TemplateSheetArray and TemplateSheetArrayOutput values.
// You can construct a concrete instance of `TemplateSheetArrayInput` via:
//
//          TemplateSheetArray{ TemplateSheetArgs{...} }
type TemplateSheetArrayInput interface {
	pulumi.Input

	ToTemplateSheetArrayOutput() TemplateSheetArrayOutput
	ToTemplateSheetArrayOutputWithContext(context.Context) TemplateSheetArrayOutput
}

type TemplateSheetArray []TemplateSheetInput

func (TemplateSheetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheet)(nil)).Elem()
}

func (i TemplateSheetArray) ToTemplateSheetArrayOutput() TemplateSheetArrayOutput {
	return i.ToTemplateSheetArrayOutputWithContext(context.Background())
}

func (i TemplateSheetArray) ToTemplateSheetArrayOutputWithContext(ctx context.Context) TemplateSheetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetArrayOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//             are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard
//             contains at least one sheet. Each sheet contains at least one visualization widget, for
//             example a chart, pivot table, or narrative insight. Sheets can be associated with other
//             components, such as controls, filters, and so on.</p>
type TemplateSheetOutput struct{ *pulumi.OutputState }

func (TemplateSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheet)(nil)).Elem()
}

func (o TemplateSheetOutput) ToTemplateSheetOutput() TemplateSheetOutput {
	return o
}

func (o TemplateSheetOutput) ToTemplateSheetOutputWithContext(ctx context.Context) TemplateSheetOutput {
	return o
}

// <p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight
//             console.</p>
func (o TemplateSheetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The unique identifier associated with a sheet.</p>
func (o TemplateSheetOutput) SheetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheet) *string { return v.SheetId }).(pulumi.StringPtrOutput)
}

type TemplateSheetArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheet)(nil)).Elem()
}

func (o TemplateSheetArrayOutput) ToTemplateSheetArrayOutput() TemplateSheetArrayOutput {
	return o
}

func (o TemplateSheetArrayOutput) ToTemplateSheetArrayOutputWithContext(ctx context.Context) TemplateSheetArrayOutput {
	return o
}

func (o TemplateSheetArrayOutput) Index(i pulumi.IntInput) TemplateSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheet {
		return vs[0].([]TemplateSheet)[vs[1].(int)]
	}).(TemplateSheetOutput)
}

// <p>The source analysis of the template.</p>
type TemplateSourceAnalysis struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn string `pulumi:"arn"`
	// <p>A structure containing information about the dataset references used as placeholders
	//             in the template.</p>
	DataSetReferences []TemplateDataSetReference `pulumi:"dataSetReferences"`
}

// TemplateSourceAnalysisInput is an input type that accepts TemplateSourceAnalysisArgs and TemplateSourceAnalysisOutput values.
// You can construct a concrete instance of `TemplateSourceAnalysisInput` via:
//
//          TemplateSourceAnalysisArgs{...}
type TemplateSourceAnalysisInput interface {
	pulumi.Input

	ToTemplateSourceAnalysisOutput() TemplateSourceAnalysisOutput
	ToTemplateSourceAnalysisOutputWithContext(context.Context) TemplateSourceAnalysisOutput
}

// <p>The source analysis of the template.</p>
type TemplateSourceAnalysisArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
	// <p>A structure containing information about the dataset references used as placeholders
	//             in the template.</p>
	DataSetReferences TemplateDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (TemplateSourceAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceAnalysis)(nil)).Elem()
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisOutput() TemplateSourceAnalysisOutput {
	return i.ToTemplateSourceAnalysisOutputWithContext(context.Background())
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceAnalysisOutput)
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return i.ToTemplateSourceAnalysisPtrOutputWithContext(context.Background())
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceAnalysisOutput).ToTemplateSourceAnalysisPtrOutputWithContext(ctx)
}

// TemplateSourceAnalysisPtrInput is an input type that accepts TemplateSourceAnalysisArgs, TemplateSourceAnalysisPtr and TemplateSourceAnalysisPtrOutput values.
// You can construct a concrete instance of `TemplateSourceAnalysisPtrInput` via:
//
//          TemplateSourceAnalysisArgs{...}
//
//  or:
//
//          nil
type TemplateSourceAnalysisPtrInput interface {
	pulumi.Input

	ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput
	ToTemplateSourceAnalysisPtrOutputWithContext(context.Context) TemplateSourceAnalysisPtrOutput
}

type templateSourceAnalysisPtrType TemplateSourceAnalysisArgs

func TemplateSourceAnalysisPtr(v *TemplateSourceAnalysisArgs) TemplateSourceAnalysisPtrInput {
	return (*templateSourceAnalysisPtrType)(v)
}

func (*templateSourceAnalysisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceAnalysis)(nil)).Elem()
}

func (i *templateSourceAnalysisPtrType) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return i.ToTemplateSourceAnalysisPtrOutputWithContext(context.Background())
}

func (i *templateSourceAnalysisPtrType) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceAnalysisPtrOutput)
}

// <p>The source analysis of the template.</p>
type TemplateSourceAnalysisOutput struct{ *pulumi.OutputState }

func (TemplateSourceAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceAnalysis)(nil)).Elem()
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisOutput() TemplateSourceAnalysisOutput {
	return o
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceAnalysisOutput {
	return o
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return o.ToTemplateSourceAnalysisPtrOutputWithContext(context.Background())
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceAnalysis) *TemplateSourceAnalysis {
		return &v
	}).(TemplateSourceAnalysisPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceAnalysisOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceAnalysis) string { return v.Arn }).(pulumi.StringOutput)
}

// <p>A structure containing information about the dataset references used as placeholders
//             in the template.</p>
func (o TemplateSourceAnalysisOutput) DataSetReferences() TemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v TemplateSourceAnalysis) []TemplateDataSetReference { return v.DataSetReferences }).(TemplateDataSetReferenceArrayOutput)
}

type TemplateSourceAnalysisPtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceAnalysisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceAnalysis)(nil)).Elem()
}

func (o TemplateSourceAnalysisPtrOutput) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return o
}

func (o TemplateSourceAnalysisPtrOutput) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return o
}

func (o TemplateSourceAnalysisPtrOutput) Elem() TemplateSourceAnalysisOutput {
	return o.ApplyT(func(v *TemplateSourceAnalysis) TemplateSourceAnalysis {
		if v != nil {
			return *v
		}
		var ret TemplateSourceAnalysis
		return ret
	}).(TemplateSourceAnalysisOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceAnalysisPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSourceAnalysis) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>A structure containing information about the dataset references used as placeholders
//             in the template.</p>
func (o TemplateSourceAnalysisPtrOutput) DataSetReferences() TemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *TemplateSourceAnalysis) []TemplateDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(TemplateDataSetReferenceArrayOutput)
}

// <p>The source entity of the template.</p>
type TemplateSourceEntity struct {
	SourceAnalysis *TemplateSourceAnalysis `pulumi:"sourceAnalysis"`
	SourceTemplate *TemplateSourceTemplate `pulumi:"sourceTemplate"`
}

// TemplateSourceEntityInput is an input type that accepts TemplateSourceEntityArgs and TemplateSourceEntityOutput values.
// You can construct a concrete instance of `TemplateSourceEntityInput` via:
//
//          TemplateSourceEntityArgs{...}
type TemplateSourceEntityInput interface {
	pulumi.Input

	ToTemplateSourceEntityOutput() TemplateSourceEntityOutput
	ToTemplateSourceEntityOutputWithContext(context.Context) TemplateSourceEntityOutput
}

// <p>The source entity of the template.</p>
type TemplateSourceEntityArgs struct {
	SourceAnalysis TemplateSourceAnalysisPtrInput `pulumi:"sourceAnalysis"`
	SourceTemplate TemplateSourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (TemplateSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return i.ToTemplateSourceEntityOutputWithContext(context.Background())
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityOutput)
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return i.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityOutput).ToTemplateSourceEntityPtrOutputWithContext(ctx)
}

// TemplateSourceEntityPtrInput is an input type that accepts TemplateSourceEntityArgs, TemplateSourceEntityPtr and TemplateSourceEntityPtrOutput values.
// You can construct a concrete instance of `TemplateSourceEntityPtrInput` via:
//
//          TemplateSourceEntityArgs{...}
//
//  or:
//
//          nil
type TemplateSourceEntityPtrInput interface {
	pulumi.Input

	ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput
	ToTemplateSourceEntityPtrOutputWithContext(context.Context) TemplateSourceEntityPtrOutput
}

type templateSourceEntityPtrType TemplateSourceEntityArgs

func TemplateSourceEntityPtr(v *TemplateSourceEntityArgs) TemplateSourceEntityPtrInput {
	return (*templateSourceEntityPtrType)(v)
}

func (*templateSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntity)(nil)).Elem()
}

func (i *templateSourceEntityPtrType) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return i.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (i *templateSourceEntityPtrType) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityPtrOutput)
}

// <p>The source entity of the template.</p>
type TemplateSourceEntityOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return o.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceEntity) *TemplateSourceEntity {
		return &v
	}).(TemplateSourceEntityPtrOutput)
}

func (o TemplateSourceEntityOutput) SourceAnalysis() TemplateSourceAnalysisPtrOutput {
	return o.ApplyT(func(v TemplateSourceEntity) *TemplateSourceAnalysis { return v.SourceAnalysis }).(TemplateSourceAnalysisPtrOutput)
}

func (o TemplateSourceEntityOutput) SourceTemplate() TemplateSourceTemplatePtrOutput {
	return o.ApplyT(func(v TemplateSourceEntity) *TemplateSourceTemplate { return v.SourceTemplate }).(TemplateSourceTemplatePtrOutput)
}

type TemplateSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntity)(nil)).Elem()
}

func (o TemplateSourceEntityPtrOutput) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return o
}

func (o TemplateSourceEntityPtrOutput) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return o
}

func (o TemplateSourceEntityPtrOutput) Elem() TemplateSourceEntityOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) TemplateSourceEntity {
		if v != nil {
			return *v
		}
		var ret TemplateSourceEntity
		return ret
	}).(TemplateSourceEntityOutput)
}

func (o TemplateSourceEntityPtrOutput) SourceAnalysis() TemplateSourceAnalysisPtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) *TemplateSourceAnalysis {
		if v == nil {
			return nil
		}
		return v.SourceAnalysis
	}).(TemplateSourceAnalysisPtrOutput)
}

func (o TemplateSourceEntityPtrOutput) SourceTemplate() TemplateSourceTemplatePtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) *TemplateSourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(TemplateSourceTemplatePtrOutput)
}

// <p>The source template of the template.</p>
type TemplateSourceTemplate struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn string `pulumi:"arn"`
}

// TemplateSourceTemplateInput is an input type that accepts TemplateSourceTemplateArgs and TemplateSourceTemplateOutput values.
// You can construct a concrete instance of `TemplateSourceTemplateInput` via:
//
//          TemplateSourceTemplateArgs{...}
type TemplateSourceTemplateInput interface {
	pulumi.Input

	ToTemplateSourceTemplateOutput() TemplateSourceTemplateOutput
	ToTemplateSourceTemplateOutputWithContext(context.Context) TemplateSourceTemplateOutput
}

// <p>The source template of the template.</p>
type TemplateSourceTemplateArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (TemplateSourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceTemplate)(nil)).Elem()
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplateOutput() TemplateSourceTemplateOutput {
	return i.ToTemplateSourceTemplateOutputWithContext(context.Background())
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplateOutputWithContext(ctx context.Context) TemplateSourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceTemplateOutput)
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return i.ToTemplateSourceTemplatePtrOutputWithContext(context.Background())
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceTemplateOutput).ToTemplateSourceTemplatePtrOutputWithContext(ctx)
}

// TemplateSourceTemplatePtrInput is an input type that accepts TemplateSourceTemplateArgs, TemplateSourceTemplatePtr and TemplateSourceTemplatePtrOutput values.
// You can construct a concrete instance of `TemplateSourceTemplatePtrInput` via:
//
//          TemplateSourceTemplateArgs{...}
//
//  or:
//
//          nil
type TemplateSourceTemplatePtrInput interface {
	pulumi.Input

	ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput
	ToTemplateSourceTemplatePtrOutputWithContext(context.Context) TemplateSourceTemplatePtrOutput
}

type templateSourceTemplatePtrType TemplateSourceTemplateArgs

func TemplateSourceTemplatePtr(v *TemplateSourceTemplateArgs) TemplateSourceTemplatePtrInput {
	return (*templateSourceTemplatePtrType)(v)
}

func (*templateSourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceTemplate)(nil)).Elem()
}

func (i *templateSourceTemplatePtrType) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return i.ToTemplateSourceTemplatePtrOutputWithContext(context.Background())
}

func (i *templateSourceTemplatePtrType) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceTemplatePtrOutput)
}

// <p>The source template of the template.</p>
type TemplateSourceTemplateOutput struct{ *pulumi.OutputState }

func (TemplateSourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceTemplate)(nil)).Elem()
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplateOutput() TemplateSourceTemplateOutput {
	return o
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplateOutputWithContext(ctx context.Context) TemplateSourceTemplateOutput {
	return o
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return o.ToTemplateSourceTemplatePtrOutputWithContext(context.Background())
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceTemplate) *TemplateSourceTemplate {
		return &v
	}).(TemplateSourceTemplatePtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

type TemplateSourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceTemplate)(nil)).Elem()
}

func (o TemplateSourceTemplatePtrOutput) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return o
}

func (o TemplateSourceTemplatePtrOutput) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return o
}

func (o TemplateSourceTemplatePtrOutput) Elem() TemplateSourceTemplateOutput {
	return o.ApplyT(func(v *TemplateSourceTemplate) TemplateSourceTemplate {
		if v != nil {
			return *v
		}
		var ret TemplateSourceTemplate
		return ret
	}).(TemplateSourceTemplateOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type TemplateTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// TemplateTagInput is an input type that accepts TemplateTagArgs and TemplateTagOutput values.
// You can construct a concrete instance of `TemplateTagInput` via:
//
//          TemplateTagArgs{...}
type TemplateTagInput interface {
	pulumi.Input

	ToTemplateTagOutput() TemplateTagOutput
	ToTemplateTagOutputWithContext(context.Context) TemplateTagOutput
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type TemplateTagArgs struct {
	// <p>Tag key.</p>
	Key pulumi.StringInput `pulumi:"key"`
	// <p>Tag value.</p>
	Value pulumi.StringInput `pulumi:"value"`
}

func (TemplateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTag)(nil)).Elem()
}

func (i TemplateTagArgs) ToTemplateTagOutput() TemplateTagOutput {
	return i.ToTemplateTagOutputWithContext(context.Background())
}

func (i TemplateTagArgs) ToTemplateTagOutputWithContext(ctx context.Context) TemplateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTagOutput)
}

// TemplateTagArrayInput is an input type that accepts TemplateTagArray and TemplateTagArrayOutput values.
// You can construct a concrete instance of `TemplateTagArrayInput` via:
//
//          TemplateTagArray{ TemplateTagArgs{...} }
type TemplateTagArrayInput interface {
	pulumi.Input

	ToTemplateTagArrayOutput() TemplateTagArrayOutput
	ToTemplateTagArrayOutputWithContext(context.Context) TemplateTagArrayOutput
}

type TemplateTagArray []TemplateTagInput

func (TemplateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTag)(nil)).Elem()
}

func (i TemplateTagArray) ToTemplateTagArrayOutput() TemplateTagArrayOutput {
	return i.ToTemplateTagArrayOutputWithContext(context.Background())
}

func (i TemplateTagArray) ToTemplateTagArrayOutputWithContext(ctx context.Context) TemplateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTagArrayOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type TemplateTagOutput struct{ *pulumi.OutputState }

func (TemplateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTag)(nil)).Elem()
}

func (o TemplateTagOutput) ToTemplateTagOutput() TemplateTagOutput {
	return o
}

func (o TemplateTagOutput) ToTemplateTagOutputWithContext(ctx context.Context) TemplateTagOutput {
	return o
}

// <p>Tag key.</p>
func (o TemplateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTag) string { return v.Key }).(pulumi.StringOutput)
}

// <p>Tag value.</p>
func (o TemplateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTag) string { return v.Value }).(pulumi.StringOutput)
}

type TemplateTagArrayOutput struct{ *pulumi.OutputState }

func (TemplateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTag)(nil)).Elem()
}

func (o TemplateTagArrayOutput) ToTemplateTagArrayOutput() TemplateTagArrayOutput {
	return o
}

func (o TemplateTagArrayOutput) ToTemplateTagArrayOutputWithContext(ctx context.Context) TemplateTagArrayOutput {
	return o
}

func (o TemplateTagArrayOutput) Index(i pulumi.IntInput) TemplateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTag {
		return vs[0].([]TemplateTag)[vs[1].(int)]
	}).(TemplateTagOutput)
}

// <p>A version of a template.</p>
type TemplateVersion struct {
	// <p>The time that this template version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
	//             template should be bound to new datasets matching the same schema described through this
	//             API operation.</p>
	DataSetConfigurations []TemplateDataSetConfiguration `pulumi:"dataSetConfigurations"`
	// <p>The description of the template.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with this template version.</p>
	Errors []TemplateError `pulumi:"errors"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets []TemplateSheet `pulumi:"sheets"`
	// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
	//             template.</p>
	SourceEntityArn *string                 `pulumi:"sourceEntityArn"`
	Status          *TemplateResourceStatus `pulumi:"status"`
	// <p>The ARN of the theme associated with this version of the template.</p>
	ThemeArn *string `pulumi:"themeArn"`
	// <p>The version number of the template version.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// TemplateVersionInput is an input type that accepts TemplateVersionArgs and TemplateVersionOutput values.
// You can construct a concrete instance of `TemplateVersionInput` via:
//
//          TemplateVersionArgs{...}
type TemplateVersionInput interface {
	pulumi.Input

	ToTemplateVersionOutput() TemplateVersionOutput
	ToTemplateVersionOutputWithContext(context.Context) TemplateVersionOutput
}

// <p>A version of a template.</p>
type TemplateVersionArgs struct {
	// <p>The time that this template version was created.</p>
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
	//             template should be bound to new datasets matching the same schema described through this
	//             API operation.</p>
	DataSetConfigurations TemplateDataSetConfigurationArrayInput `pulumi:"dataSetConfigurations"`
	// <p>The description of the template.</p>
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <p>Errors associated with this template version.</p>
	Errors TemplateErrorArrayInput `pulumi:"errors"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets TemplateSheetArrayInput `pulumi:"sheets"`
	// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
	//             template.</p>
	SourceEntityArn pulumi.StringPtrInput          `pulumi:"sourceEntityArn"`
	Status          TemplateResourceStatusPtrInput `pulumi:"status"`
	// <p>The ARN of the theme associated with this version of the template.</p>
	ThemeArn pulumi.StringPtrInput `pulumi:"themeArn"`
	// <p>The version number of the template version.</p>
	VersionNumber pulumi.Float64PtrInput `pulumi:"versionNumber"`
}

func (TemplateVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersion)(nil)).Elem()
}

func (i TemplateVersionArgs) ToTemplateVersionOutput() TemplateVersionOutput {
	return i.ToTemplateVersionOutputWithContext(context.Background())
}

func (i TemplateVersionArgs) ToTemplateVersionOutputWithContext(ctx context.Context) TemplateVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionOutput)
}

func (i TemplateVersionArgs) ToTemplateVersionPtrOutput() TemplateVersionPtrOutput {
	return i.ToTemplateVersionPtrOutputWithContext(context.Background())
}

func (i TemplateVersionArgs) ToTemplateVersionPtrOutputWithContext(ctx context.Context) TemplateVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionOutput).ToTemplateVersionPtrOutputWithContext(ctx)
}

// TemplateVersionPtrInput is an input type that accepts TemplateVersionArgs, TemplateVersionPtr and TemplateVersionPtrOutput values.
// You can construct a concrete instance of `TemplateVersionPtrInput` via:
//
//          TemplateVersionArgs{...}
//
//  or:
//
//          nil
type TemplateVersionPtrInput interface {
	pulumi.Input

	ToTemplateVersionPtrOutput() TemplateVersionPtrOutput
	ToTemplateVersionPtrOutputWithContext(context.Context) TemplateVersionPtrOutput
}

type templateVersionPtrType TemplateVersionArgs

func TemplateVersionPtr(v *TemplateVersionArgs) TemplateVersionPtrInput {
	return (*templateVersionPtrType)(v)
}

func (*templateVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersion)(nil)).Elem()
}

func (i *templateVersionPtrType) ToTemplateVersionPtrOutput() TemplateVersionPtrOutput {
	return i.ToTemplateVersionPtrOutputWithContext(context.Background())
}

func (i *templateVersionPtrType) ToTemplateVersionPtrOutputWithContext(ctx context.Context) TemplateVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionPtrOutput)
}

// <p>A version of a template.</p>
type TemplateVersionOutput struct{ *pulumi.OutputState }

func (TemplateVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersion)(nil)).Elem()
}

func (o TemplateVersionOutput) ToTemplateVersionOutput() TemplateVersionOutput {
	return o
}

func (o TemplateVersionOutput) ToTemplateVersionOutputWithContext(ctx context.Context) TemplateVersionOutput {
	return o
}

func (o TemplateVersionOutput) ToTemplateVersionPtrOutput() TemplateVersionPtrOutput {
	return o.ToTemplateVersionPtrOutputWithContext(context.Background())
}

func (o TemplateVersionOutput) ToTemplateVersionPtrOutputWithContext(ctx context.Context) TemplateVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVersion) *TemplateVersion {
		return &v
	}).(TemplateVersionPtrOutput)
}

// <p>The time that this template version was created.</p>
func (o TemplateVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
//             template should be bound to new datasets matching the same schema described through this
//             API operation.</p>
func (o TemplateVersionOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateDataSetConfiguration { return v.DataSetConfigurations }).(TemplateDataSetConfigurationArrayOutput)
}

// <p>The description of the template.</p>
func (o TemplateVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this template version.</p>
func (o TemplateVersionOutput) Errors() TemplateErrorArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateError { return v.Errors }).(TemplateErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o TemplateVersionOutput) Sheets() TemplateSheetArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateSheet { return v.Sheets }).(TemplateSheetArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
//             template.</p>
func (o TemplateVersionOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.SourceEntityArn }).(pulumi.StringPtrOutput)
}

func (o TemplateVersionOutput) Status() TemplateResourceStatusPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *TemplateResourceStatus { return v.Status }).(TemplateResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with this version of the template.</p>
func (o TemplateVersionOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

// <p>The version number of the template version.</p>
func (o TemplateVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type TemplateVersionPtrOutput struct{ *pulumi.OutputState }

func (TemplateVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersion)(nil)).Elem()
}

func (o TemplateVersionPtrOutput) ToTemplateVersionPtrOutput() TemplateVersionPtrOutput {
	return o
}

func (o TemplateVersionPtrOutput) ToTemplateVersionPtrOutputWithContext(ctx context.Context) TemplateVersionPtrOutput {
	return o
}

func (o TemplateVersionPtrOutput) Elem() TemplateVersionOutput {
	return o.ApplyT(func(v *TemplateVersion) TemplateVersion {
		if v != nil {
			return *v
		}
		var ret TemplateVersion
		return ret
	}).(TemplateVersionOutput)
}

// <p>The time that this template version was created.</p>
func (o TemplateVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
//             template should be bound to new datasets matching the same schema described through this
//             API operation.</p>
func (o TemplateVersionPtrOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateDataSetConfiguration {
		if v == nil {
			return nil
		}
		return v.DataSetConfigurations
	}).(TemplateDataSetConfigurationArrayOutput)
}

// <p>The description of the template.</p>
func (o TemplateVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this template version.</p>
func (o TemplateVersionPtrOutput) Errors() TemplateErrorArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(TemplateErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o TemplateVersionPtrOutput) Sheets() TemplateSheetArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateSheet {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(TemplateSheetArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
//             template.</p>
func (o TemplateVersionPtrOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.SourceEntityArn
	}).(pulumi.StringPtrOutput)
}

func (o TemplateVersionPtrOutput) Status() TemplateResourceStatusPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *TemplateResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(TemplateResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with this version of the template.</p>
func (o TemplateVersionPtrOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.ThemeArn
	}).(pulumi.StringPtrOutput)
}

// <p>The version number of the template version.</p>
func (o TemplateVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyle struct {
	// <p>The option to enable display of borders for visuals.</p>
	Show *bool `pulumi:"show"`
}

// ThemeBorderStyleInput is an input type that accepts ThemeBorderStyleArgs and ThemeBorderStyleOutput values.
// You can construct a concrete instance of `ThemeBorderStyleInput` via:
//
//          ThemeBorderStyleArgs{...}
type ThemeBorderStyleInput interface {
	pulumi.Input

	ToThemeBorderStyleOutput() ThemeBorderStyleOutput
	ToThemeBorderStyleOutputWithContext(context.Context) ThemeBorderStyleOutput
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyleArgs struct {
	// <p>The option to enable display of borders for visuals.</p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeBorderStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeBorderStyle)(nil)).Elem()
}

func (i ThemeBorderStyleArgs) ToThemeBorderStyleOutput() ThemeBorderStyleOutput {
	return i.ToThemeBorderStyleOutputWithContext(context.Background())
}

func (i ThemeBorderStyleArgs) ToThemeBorderStyleOutputWithContext(ctx context.Context) ThemeBorderStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStyleOutput)
}

func (i ThemeBorderStyleArgs) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return i.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (i ThemeBorderStyleArgs) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStyleOutput).ToThemeBorderStylePtrOutputWithContext(ctx)
}

// ThemeBorderStylePtrInput is an input type that accepts ThemeBorderStyleArgs, ThemeBorderStylePtr and ThemeBorderStylePtrOutput values.
// You can construct a concrete instance of `ThemeBorderStylePtrInput` via:
//
//          ThemeBorderStyleArgs{...}
//
//  or:
//
//          nil
type ThemeBorderStylePtrInput interface {
	pulumi.Input

	ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput
	ToThemeBorderStylePtrOutputWithContext(context.Context) ThemeBorderStylePtrOutput
}

type themeBorderStylePtrType ThemeBorderStyleArgs

func ThemeBorderStylePtr(v *ThemeBorderStyleArgs) ThemeBorderStylePtrInput {
	return (*themeBorderStylePtrType)(v)
}

func (*themeBorderStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeBorderStyle)(nil)).Elem()
}

func (i *themeBorderStylePtrType) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return i.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (i *themeBorderStylePtrType) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStylePtrOutput)
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyleOutput struct{ *pulumi.OutputState }

func (ThemeBorderStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeBorderStyle)(nil)).Elem()
}

func (o ThemeBorderStyleOutput) ToThemeBorderStyleOutput() ThemeBorderStyleOutput {
	return o
}

func (o ThemeBorderStyleOutput) ToThemeBorderStyleOutputWithContext(ctx context.Context) ThemeBorderStyleOutput {
	return o
}

func (o ThemeBorderStyleOutput) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return o.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (o ThemeBorderStyleOutput) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeBorderStyle) *ThemeBorderStyle {
		return &v
	}).(ThemeBorderStylePtrOutput)
}

// <p>The option to enable display of borders for visuals.</p>
func (o ThemeBorderStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeBorderStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeBorderStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeBorderStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeBorderStyle)(nil)).Elem()
}

func (o ThemeBorderStylePtrOutput) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return o
}

func (o ThemeBorderStylePtrOutput) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return o
}

func (o ThemeBorderStylePtrOutput) Elem() ThemeBorderStyleOutput {
	return o.ApplyT(func(v *ThemeBorderStyle) ThemeBorderStyle {
		if v != nil {
			return *v
		}
		var ret ThemeBorderStyle
		return ret
	}).(ThemeBorderStyleOutput)
}

// <p>The option to enable display of borders for visuals.</p>
func (o ThemeBorderStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeBorderStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>The theme configuration. This configuration contains all of the display properties for
//             a theme.</p>
type ThemeConfiguration struct {
	DataColorPalette *ThemeDataColorPalette `pulumi:"dataColorPalette"`
	Sheet            *ThemeSheetStyle       `pulumi:"sheet"`
	Typography       *ThemeTypography       `pulumi:"typography"`
	UIColorPalette   *ThemeUIColorPalette   `pulumi:"uIColorPalette"`
}

// ThemeConfigurationInput is an input type that accepts ThemeConfigurationArgs and ThemeConfigurationOutput values.
// You can construct a concrete instance of `ThemeConfigurationInput` via:
//
//          ThemeConfigurationArgs{...}
type ThemeConfigurationInput interface {
	pulumi.Input

	ToThemeConfigurationOutput() ThemeConfigurationOutput
	ToThemeConfigurationOutputWithContext(context.Context) ThemeConfigurationOutput
}

// <p>The theme configuration. This configuration contains all of the display properties for
//             a theme.</p>
type ThemeConfigurationArgs struct {
	DataColorPalette ThemeDataColorPalettePtrInput `pulumi:"dataColorPalette"`
	Sheet            ThemeSheetStylePtrInput       `pulumi:"sheet"`
	Typography       ThemeTypographyPtrInput       `pulumi:"typography"`
	UIColorPalette   ThemeUIColorPalettePtrInput   `pulumi:"uIColorPalette"`
}

func (ThemeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return i.ToThemeConfigurationOutputWithContext(context.Background())
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationOutput)
}

func (i ThemeConfigurationArgs) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return i.ToThemeConfigurationPtrOutputWithContext(context.Background())
}

func (i ThemeConfigurationArgs) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationOutput).ToThemeConfigurationPtrOutputWithContext(ctx)
}

// ThemeConfigurationPtrInput is an input type that accepts ThemeConfigurationArgs, ThemeConfigurationPtr and ThemeConfigurationPtrOutput values.
// You can construct a concrete instance of `ThemeConfigurationPtrInput` via:
//
//          ThemeConfigurationArgs{...}
//
//  or:
//
//          nil
type ThemeConfigurationPtrInput interface {
	pulumi.Input

	ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput
	ToThemeConfigurationPtrOutputWithContext(context.Context) ThemeConfigurationPtrOutput
}

type themeConfigurationPtrType ThemeConfigurationArgs

func ThemeConfigurationPtr(v *ThemeConfigurationArgs) ThemeConfigurationPtrInput {
	return (*themeConfigurationPtrType)(v)
}

func (*themeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfiguration)(nil)).Elem()
}

func (i *themeConfigurationPtrType) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return i.ToThemeConfigurationPtrOutputWithContext(context.Background())
}

func (i *themeConfigurationPtrType) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationPtrOutput)
}

// <p>The theme configuration. This configuration contains all of the display properties for
//             a theme.</p>
type ThemeConfigurationOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return o.ToThemeConfigurationPtrOutputWithContext(context.Background())
}

func (o ThemeConfigurationOutput) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeConfiguration) *ThemeConfiguration {
		return &v
	}).(ThemeConfigurationPtrOutput)
}

func (o ThemeConfigurationOutput) DataColorPalette() ThemeDataColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeDataColorPalette { return v.DataColorPalette }).(ThemeDataColorPalettePtrOutput)
}

func (o ThemeConfigurationOutput) Sheet() ThemeSheetStylePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeSheetStyle { return v.Sheet }).(ThemeSheetStylePtrOutput)
}

func (o ThemeConfigurationOutput) Typography() ThemeTypographyPtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeTypography { return v.Typography }).(ThemeTypographyPtrOutput)
}

func (o ThemeConfigurationOutput) UIColorPalette() ThemeUIColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeUIColorPalette { return v.UIColorPalette }).(ThemeUIColorPalettePtrOutput)
}

type ThemeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) Elem() ThemeConfigurationOutput {
	return o.ApplyT(func(v *ThemeConfiguration) ThemeConfiguration {
		if v != nil {
			return *v
		}
		var ret ThemeConfiguration
		return ret
	}).(ThemeConfigurationOutput)
}

func (o ThemeConfigurationPtrOutput) DataColorPalette() ThemeDataColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeDataColorPalette {
		if v == nil {
			return nil
		}
		return v.DataColorPalette
	}).(ThemeDataColorPalettePtrOutput)
}

func (o ThemeConfigurationPtrOutput) Sheet() ThemeSheetStylePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeSheetStyle {
		if v == nil {
			return nil
		}
		return v.Sheet
	}).(ThemeSheetStylePtrOutput)
}

func (o ThemeConfigurationPtrOutput) Typography() ThemeTypographyPtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeTypography {
		if v == nil {
			return nil
		}
		return v.Typography
	}).(ThemeTypographyPtrOutput)
}

func (o ThemeConfigurationPtrOutput) UIColorPalette() ThemeUIColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeUIColorPalette {
		if v == nil {
			return nil
		}
		return v.UIColorPalette
	}).(ThemeUIColorPalettePtrOutput)
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//             hexadecimal color code that consists of six alphanumerical characters, prefixed with
//                 <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPalette struct {
	// <p>The hexadecimal codes for the colors.</p>
	Colors []string `pulumi:"colors"`
	// <p>The hexadecimal code of a color that applies to charts where a lack of data is
	//             highlighted.</p>
	EmptyFillColor *string `pulumi:"emptyFillColor"`
	// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
	MinMaxGradient []string `pulumi:"minMaxGradient"`
}

// ThemeDataColorPaletteInput is an input type that accepts ThemeDataColorPaletteArgs and ThemeDataColorPaletteOutput values.
// You can construct a concrete instance of `ThemeDataColorPaletteInput` via:
//
//          ThemeDataColorPaletteArgs{...}
type ThemeDataColorPaletteInput interface {
	pulumi.Input

	ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput
	ToThemeDataColorPaletteOutputWithContext(context.Context) ThemeDataColorPaletteOutput
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//             hexadecimal color code that consists of six alphanumerical characters, prefixed with
//                 <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPaletteArgs struct {
	// <p>The hexadecimal codes for the colors.</p>
	Colors pulumi.StringArrayInput `pulumi:"colors"`
	// <p>The hexadecimal code of a color that applies to charts where a lack of data is
	//             highlighted.</p>
	EmptyFillColor pulumi.StringPtrInput `pulumi:"emptyFillColor"`
	// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
	MinMaxGradient pulumi.StringArrayInput `pulumi:"minMaxGradient"`
}

func (ThemeDataColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeDataColorPalette)(nil)).Elem()
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput {
	return i.ToThemeDataColorPaletteOutputWithContext(context.Background())
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPaletteOutputWithContext(ctx context.Context) ThemeDataColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPaletteOutput)
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return i.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPaletteOutput).ToThemeDataColorPalettePtrOutputWithContext(ctx)
}

// ThemeDataColorPalettePtrInput is an input type that accepts ThemeDataColorPaletteArgs, ThemeDataColorPalettePtr and ThemeDataColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeDataColorPalettePtrInput` via:
//
//          ThemeDataColorPaletteArgs{...}
//
//  or:
//
//          nil
type ThemeDataColorPalettePtrInput interface {
	pulumi.Input

	ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput
	ToThemeDataColorPalettePtrOutputWithContext(context.Context) ThemeDataColorPalettePtrOutput
}

type themeDataColorPalettePtrType ThemeDataColorPaletteArgs

func ThemeDataColorPalettePtr(v *ThemeDataColorPaletteArgs) ThemeDataColorPalettePtrInput {
	return (*themeDataColorPalettePtrType)(v)
}

func (*themeDataColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeDataColorPalette)(nil)).Elem()
}

func (i *themeDataColorPalettePtrType) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return i.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeDataColorPalettePtrType) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPalettePtrOutput)
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//             hexadecimal color code that consists of six alphanumerical characters, prefixed with
//                 <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeDataColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeDataColorPalette)(nil)).Elem()
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput {
	return o
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPaletteOutputWithContext(ctx context.Context) ThemeDataColorPaletteOutput {
	return o
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return o.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeDataColorPalette) *ThemeDataColorPalette {
		return &v
	}).(ThemeDataColorPalettePtrOutput)
}

// <p>The hexadecimal codes for the colors.</p>
func (o ThemeDataColorPaletteOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) []string { return v.Colors }).(pulumi.StringArrayOutput)
}

// <p>The hexadecimal code of a color that applies to charts where a lack of data is
//             highlighted.</p>
func (o ThemeDataColorPaletteOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) *string { return v.EmptyFillColor }).(pulumi.StringPtrOutput)
}

// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
func (o ThemeDataColorPaletteOutput) MinMaxGradient() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) []string { return v.MinMaxGradient }).(pulumi.StringArrayOutput)
}

type ThemeDataColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeDataColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeDataColorPalette)(nil)).Elem()
}

func (o ThemeDataColorPalettePtrOutput) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return o
}

func (o ThemeDataColorPalettePtrOutput) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return o
}

func (o ThemeDataColorPalettePtrOutput) Elem() ThemeDataColorPaletteOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) ThemeDataColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeDataColorPalette
		return ret
	}).(ThemeDataColorPaletteOutput)
}

// <p>The hexadecimal codes for the colors.</p>
func (o ThemeDataColorPalettePtrOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(pulumi.StringArrayOutput)
}

// <p>The hexadecimal code of a color that applies to charts where a lack of data is
//             highlighted.</p>
func (o ThemeDataColorPalettePtrOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.EmptyFillColor
	}).(pulumi.StringPtrOutput)
}

// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
func (o ThemeDataColorPalettePtrOutput) MinMaxGradient() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.MinMaxGradient
	}).(pulumi.StringArrayOutput)
}

// <p>Theme error.</p>
type ThemeError struct {
	// <p>The error message.</p>
	Message *string         `pulumi:"message"`
	Type    *ThemeErrorType `pulumi:"type"`
}

// ThemeErrorInput is an input type that accepts ThemeErrorArgs and ThemeErrorOutput values.
// You can construct a concrete instance of `ThemeErrorInput` via:
//
//          ThemeErrorArgs{...}
type ThemeErrorInput interface {
	pulumi.Input

	ToThemeErrorOutput() ThemeErrorOutput
	ToThemeErrorOutputWithContext(context.Context) ThemeErrorOutput
}

// <p>Theme error.</p>
type ThemeErrorArgs struct {
	// <p>The error message.</p>
	Message pulumi.StringPtrInput  `pulumi:"message"`
	Type    ThemeErrorTypePtrInput `pulumi:"type"`
}

func (ThemeErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeError)(nil)).Elem()
}

func (i ThemeErrorArgs) ToThemeErrorOutput() ThemeErrorOutput {
	return i.ToThemeErrorOutputWithContext(context.Background())
}

func (i ThemeErrorArgs) ToThemeErrorOutputWithContext(ctx context.Context) ThemeErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeErrorOutput)
}

// ThemeErrorArrayInput is an input type that accepts ThemeErrorArray and ThemeErrorArrayOutput values.
// You can construct a concrete instance of `ThemeErrorArrayInput` via:
//
//          ThemeErrorArray{ ThemeErrorArgs{...} }
type ThemeErrorArrayInput interface {
	pulumi.Input

	ToThemeErrorArrayOutput() ThemeErrorArrayOutput
	ToThemeErrorArrayOutputWithContext(context.Context) ThemeErrorArrayOutput
}

type ThemeErrorArray []ThemeErrorInput

func (ThemeErrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeError)(nil)).Elem()
}

func (i ThemeErrorArray) ToThemeErrorArrayOutput() ThemeErrorArrayOutput {
	return i.ToThemeErrorArrayOutputWithContext(context.Background())
}

func (i ThemeErrorArray) ToThemeErrorArrayOutputWithContext(ctx context.Context) ThemeErrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeErrorArrayOutput)
}

// <p>Theme error.</p>
type ThemeErrorOutput struct{ *pulumi.OutputState }

func (ThemeErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeError)(nil)).Elem()
}

func (o ThemeErrorOutput) ToThemeErrorOutput() ThemeErrorOutput {
	return o
}

func (o ThemeErrorOutput) ToThemeErrorOutputWithContext(ctx context.Context) ThemeErrorOutput {
	return o
}

// <p>The error message.</p>
func (o ThemeErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ThemeErrorOutput) Type() ThemeErrorTypePtrOutput {
	return o.ApplyT(func(v ThemeError) *ThemeErrorType { return v.Type }).(ThemeErrorTypePtrOutput)
}

type ThemeErrorArrayOutput struct{ *pulumi.OutputState }

func (ThemeErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeError)(nil)).Elem()
}

func (o ThemeErrorArrayOutput) ToThemeErrorArrayOutput() ThemeErrorArrayOutput {
	return o
}

func (o ThemeErrorArrayOutput) ToThemeErrorArrayOutputWithContext(ctx context.Context) ThemeErrorArrayOutput {
	return o
}

func (o ThemeErrorArrayOutput) Index(i pulumi.IntInput) ThemeErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeError {
		return vs[0].([]ThemeError)[vs[1].(int)]
	}).(ThemeErrorOutput)
}

type ThemeFont struct {
	FontFamily *string `pulumi:"fontFamily"`
}

// ThemeFontInput is an input type that accepts ThemeFontArgs and ThemeFontOutput values.
// You can construct a concrete instance of `ThemeFontInput` via:
//
//          ThemeFontArgs{...}
type ThemeFontInput interface {
	pulumi.Input

	ToThemeFontOutput() ThemeFontOutput
	ToThemeFontOutputWithContext(context.Context) ThemeFontOutput
}

type ThemeFontArgs struct {
	FontFamily pulumi.StringPtrInput `pulumi:"fontFamily"`
}

func (ThemeFontArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeFont)(nil)).Elem()
}

func (i ThemeFontArgs) ToThemeFontOutput() ThemeFontOutput {
	return i.ToThemeFontOutputWithContext(context.Background())
}

func (i ThemeFontArgs) ToThemeFontOutputWithContext(ctx context.Context) ThemeFontOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeFontOutput)
}

// ThemeFontArrayInput is an input type that accepts ThemeFontArray and ThemeFontArrayOutput values.
// You can construct a concrete instance of `ThemeFontArrayInput` via:
//
//          ThemeFontArray{ ThemeFontArgs{...} }
type ThemeFontArrayInput interface {
	pulumi.Input

	ToThemeFontArrayOutput() ThemeFontArrayOutput
	ToThemeFontArrayOutputWithContext(context.Context) ThemeFontArrayOutput
}

type ThemeFontArray []ThemeFontInput

func (ThemeFontArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeFont)(nil)).Elem()
}

func (i ThemeFontArray) ToThemeFontArrayOutput() ThemeFontArrayOutput {
	return i.ToThemeFontArrayOutputWithContext(context.Background())
}

func (i ThemeFontArray) ToThemeFontArrayOutputWithContext(ctx context.Context) ThemeFontArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeFontArrayOutput)
}

type ThemeFontOutput struct{ *pulumi.OutputState }

func (ThemeFontOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeFont)(nil)).Elem()
}

func (o ThemeFontOutput) ToThemeFontOutput() ThemeFontOutput {
	return o
}

func (o ThemeFontOutput) ToThemeFontOutputWithContext(ctx context.Context) ThemeFontOutput {
	return o
}

func (o ThemeFontOutput) FontFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeFont) *string { return v.FontFamily }).(pulumi.StringPtrOutput)
}

type ThemeFontArrayOutput struct{ *pulumi.OutputState }

func (ThemeFontArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeFont)(nil)).Elem()
}

func (o ThemeFontArrayOutput) ToThemeFontArrayOutput() ThemeFontArrayOutput {
	return o
}

func (o ThemeFontArrayOutput) ToThemeFontArrayOutputWithContext(ctx context.Context) ThemeFontArrayOutput {
	return o
}

func (o ThemeFontArrayOutput) Index(i pulumi.IntInput) ThemeFontOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeFont {
		return vs[0].([]ThemeFont)[vs[1].(int)]
	}).(ThemeFontOutput)
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyle struct {
	// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
	//         </p>
	Show *bool `pulumi:"show"`
}

// ThemeGutterStyleInput is an input type that accepts ThemeGutterStyleArgs and ThemeGutterStyleOutput values.
// You can construct a concrete instance of `ThemeGutterStyleInput` via:
//
//          ThemeGutterStyleArgs{...}
type ThemeGutterStyleInput interface {
	pulumi.Input

	ToThemeGutterStyleOutput() ThemeGutterStyleOutput
	ToThemeGutterStyleOutputWithContext(context.Context) ThemeGutterStyleOutput
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyleArgs struct {
	// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
	//         </p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeGutterStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeGutterStyle)(nil)).Elem()
}

func (i ThemeGutterStyleArgs) ToThemeGutterStyleOutput() ThemeGutterStyleOutput {
	return i.ToThemeGutterStyleOutputWithContext(context.Background())
}

func (i ThemeGutterStyleArgs) ToThemeGutterStyleOutputWithContext(ctx context.Context) ThemeGutterStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStyleOutput)
}

func (i ThemeGutterStyleArgs) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return i.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (i ThemeGutterStyleArgs) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStyleOutput).ToThemeGutterStylePtrOutputWithContext(ctx)
}

// ThemeGutterStylePtrInput is an input type that accepts ThemeGutterStyleArgs, ThemeGutterStylePtr and ThemeGutterStylePtrOutput values.
// You can construct a concrete instance of `ThemeGutterStylePtrInput` via:
//
//          ThemeGutterStyleArgs{...}
//
//  or:
//
//          nil
type ThemeGutterStylePtrInput interface {
	pulumi.Input

	ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput
	ToThemeGutterStylePtrOutputWithContext(context.Context) ThemeGutterStylePtrOutput
}

type themeGutterStylePtrType ThemeGutterStyleArgs

func ThemeGutterStylePtr(v *ThemeGutterStyleArgs) ThemeGutterStylePtrInput {
	return (*themeGutterStylePtrType)(v)
}

func (*themeGutterStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeGutterStyle)(nil)).Elem()
}

func (i *themeGutterStylePtrType) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return i.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (i *themeGutterStylePtrType) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStylePtrOutput)
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyleOutput struct{ *pulumi.OutputState }

func (ThemeGutterStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeGutterStyle)(nil)).Elem()
}

func (o ThemeGutterStyleOutput) ToThemeGutterStyleOutput() ThemeGutterStyleOutput {
	return o
}

func (o ThemeGutterStyleOutput) ToThemeGutterStyleOutputWithContext(ctx context.Context) ThemeGutterStyleOutput {
	return o
}

func (o ThemeGutterStyleOutput) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return o.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (o ThemeGutterStyleOutput) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeGutterStyle) *ThemeGutterStyle {
		return &v
	}).(ThemeGutterStylePtrOutput)
}

// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
//         </p>
func (o ThemeGutterStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeGutterStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeGutterStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeGutterStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeGutterStyle)(nil)).Elem()
}

func (o ThemeGutterStylePtrOutput) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return o
}

func (o ThemeGutterStylePtrOutput) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return o
}

func (o ThemeGutterStylePtrOutput) Elem() ThemeGutterStyleOutput {
	return o.ApplyT(func(v *ThemeGutterStyle) ThemeGutterStyle {
		if v != nil {
			return *v
		}
		var ret ThemeGutterStyle
		return ret
	}).(ThemeGutterStyleOutput)
}

// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
//         </p>
func (o ThemeGutterStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeGutterStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyle struct {
	// <p>This Boolean value controls whether to display sheet margins.</p>
	Show *bool `pulumi:"show"`
}

// ThemeMarginStyleInput is an input type that accepts ThemeMarginStyleArgs and ThemeMarginStyleOutput values.
// You can construct a concrete instance of `ThemeMarginStyleInput` via:
//
//          ThemeMarginStyleArgs{...}
type ThemeMarginStyleInput interface {
	pulumi.Input

	ToThemeMarginStyleOutput() ThemeMarginStyleOutput
	ToThemeMarginStyleOutputWithContext(context.Context) ThemeMarginStyleOutput
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyleArgs struct {
	// <p>This Boolean value controls whether to display sheet margins.</p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeMarginStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeMarginStyle)(nil)).Elem()
}

func (i ThemeMarginStyleArgs) ToThemeMarginStyleOutput() ThemeMarginStyleOutput {
	return i.ToThemeMarginStyleOutputWithContext(context.Background())
}

func (i ThemeMarginStyleArgs) ToThemeMarginStyleOutputWithContext(ctx context.Context) ThemeMarginStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStyleOutput)
}

func (i ThemeMarginStyleArgs) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return i.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (i ThemeMarginStyleArgs) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStyleOutput).ToThemeMarginStylePtrOutputWithContext(ctx)
}

// ThemeMarginStylePtrInput is an input type that accepts ThemeMarginStyleArgs, ThemeMarginStylePtr and ThemeMarginStylePtrOutput values.
// You can construct a concrete instance of `ThemeMarginStylePtrInput` via:
//
//          ThemeMarginStyleArgs{...}
//
//  or:
//
//          nil
type ThemeMarginStylePtrInput interface {
	pulumi.Input

	ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput
	ToThemeMarginStylePtrOutputWithContext(context.Context) ThemeMarginStylePtrOutput
}

type themeMarginStylePtrType ThemeMarginStyleArgs

func ThemeMarginStylePtr(v *ThemeMarginStyleArgs) ThemeMarginStylePtrInput {
	return (*themeMarginStylePtrType)(v)
}

func (*themeMarginStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeMarginStyle)(nil)).Elem()
}

func (i *themeMarginStylePtrType) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return i.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (i *themeMarginStylePtrType) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStylePtrOutput)
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyleOutput struct{ *pulumi.OutputState }

func (ThemeMarginStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeMarginStyle)(nil)).Elem()
}

func (o ThemeMarginStyleOutput) ToThemeMarginStyleOutput() ThemeMarginStyleOutput {
	return o
}

func (o ThemeMarginStyleOutput) ToThemeMarginStyleOutputWithContext(ctx context.Context) ThemeMarginStyleOutput {
	return o
}

func (o ThemeMarginStyleOutput) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return o.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (o ThemeMarginStyleOutput) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeMarginStyle) *ThemeMarginStyle {
		return &v
	}).(ThemeMarginStylePtrOutput)
}

// <p>This Boolean value controls whether to display sheet margins.</p>
func (o ThemeMarginStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeMarginStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeMarginStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeMarginStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeMarginStyle)(nil)).Elem()
}

func (o ThemeMarginStylePtrOutput) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return o
}

func (o ThemeMarginStylePtrOutput) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return o
}

func (o ThemeMarginStylePtrOutput) Elem() ThemeMarginStyleOutput {
	return o.ApplyT(func(v *ThemeMarginStyle) ThemeMarginStyle {
		if v != nil {
			return *v
		}
		var ret ThemeMarginStyle
		return ret
	}).(ThemeMarginStyleOutput)
}

// <p>This Boolean value controls whether to display sheet margins.</p>
func (o ThemeMarginStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeMarginStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>Permission for the resource.</p>
type ThemeResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// ThemeResourcePermissionInput is an input type that accepts ThemeResourcePermissionArgs and ThemeResourcePermissionOutput values.
// You can construct a concrete instance of `ThemeResourcePermissionInput` via:
//
//          ThemeResourcePermissionArgs{...}
type ThemeResourcePermissionInput interface {
	pulumi.Input

	ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput
	ToThemeResourcePermissionOutputWithContext(context.Context) ThemeResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type ThemeResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//         <ul>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across AWS accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (ThemeResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeResourcePermission)(nil)).Elem()
}

func (i ThemeResourcePermissionArgs) ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput {
	return i.ToThemeResourcePermissionOutputWithContext(context.Background())
}

func (i ThemeResourcePermissionArgs) ToThemeResourcePermissionOutputWithContext(ctx context.Context) ThemeResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeResourcePermissionOutput)
}

// ThemeResourcePermissionArrayInput is an input type that accepts ThemeResourcePermissionArray and ThemeResourcePermissionArrayOutput values.
// You can construct a concrete instance of `ThemeResourcePermissionArrayInput` via:
//
//          ThemeResourcePermissionArray{ ThemeResourcePermissionArgs{...} }
type ThemeResourcePermissionArrayInput interface {
	pulumi.Input

	ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput
	ToThemeResourcePermissionArrayOutputWithContext(context.Context) ThemeResourcePermissionArrayOutput
}

type ThemeResourcePermissionArray []ThemeResourcePermissionInput

func (ThemeResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeResourcePermission)(nil)).Elem()
}

func (i ThemeResourcePermissionArray) ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput {
	return i.ToThemeResourcePermissionArrayOutputWithContext(context.Background())
}

func (i ThemeResourcePermissionArray) ToThemeResourcePermissionArrayOutputWithContext(ctx context.Context) ThemeResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type ThemeResourcePermissionOutput struct{ *pulumi.OutputState }

func (ThemeResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeResourcePermission)(nil)).Elem()
}

func (o ThemeResourcePermissionOutput) ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput {
	return o
}

func (o ThemeResourcePermissionOutput) ToThemeResourcePermissionOutputWithContext(ctx context.Context) ThemeResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o ThemeResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//             following:</p>
//         <ul>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//             </li>
//             <li>
//                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
//                     ARN. Use this option only to share resources (templates) across AWS accounts.
//                     (This is less common.) </p>
//             </li>
//          </ul>
func (o ThemeResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v ThemeResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type ThemeResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (ThemeResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeResourcePermission)(nil)).Elem()
}

func (o ThemeResourcePermissionArrayOutput) ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput {
	return o
}

func (o ThemeResourcePermissionArrayOutput) ToThemeResourcePermissionArrayOutputWithContext(ctx context.Context) ThemeResourcePermissionArrayOutput {
	return o
}

func (o ThemeResourcePermissionArrayOutput) Index(i pulumi.IntInput) ThemeResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeResourcePermission {
		return vs[0].([]ThemeResourcePermission)[vs[1].(int)]
	}).(ThemeResourcePermissionOutput)
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyle struct {
	Tile       *ThemeTileStyle       `pulumi:"tile"`
	TileLayout *ThemeTileLayoutStyle `pulumi:"tileLayout"`
}

// ThemeSheetStyleInput is an input type that accepts ThemeSheetStyleArgs and ThemeSheetStyleOutput values.
// You can construct a concrete instance of `ThemeSheetStyleInput` via:
//
//          ThemeSheetStyleArgs{...}
type ThemeSheetStyleInput interface {
	pulumi.Input

	ToThemeSheetStyleOutput() ThemeSheetStyleOutput
	ToThemeSheetStyleOutputWithContext(context.Context) ThemeSheetStyleOutput
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyleArgs struct {
	Tile       ThemeTileStylePtrInput       `pulumi:"tile"`
	TileLayout ThemeTileLayoutStylePtrInput `pulumi:"tileLayout"`
}

func (ThemeSheetStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeSheetStyle)(nil)).Elem()
}

func (i ThemeSheetStyleArgs) ToThemeSheetStyleOutput() ThemeSheetStyleOutput {
	return i.ToThemeSheetStyleOutputWithContext(context.Background())
}

func (i ThemeSheetStyleArgs) ToThemeSheetStyleOutputWithContext(ctx context.Context) ThemeSheetStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStyleOutput)
}

func (i ThemeSheetStyleArgs) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return i.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (i ThemeSheetStyleArgs) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStyleOutput).ToThemeSheetStylePtrOutputWithContext(ctx)
}

// ThemeSheetStylePtrInput is an input type that accepts ThemeSheetStyleArgs, ThemeSheetStylePtr and ThemeSheetStylePtrOutput values.
// You can construct a concrete instance of `ThemeSheetStylePtrInput` via:
//
//          ThemeSheetStyleArgs{...}
//
//  or:
//
//          nil
type ThemeSheetStylePtrInput interface {
	pulumi.Input

	ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput
	ToThemeSheetStylePtrOutputWithContext(context.Context) ThemeSheetStylePtrOutput
}

type themeSheetStylePtrType ThemeSheetStyleArgs

func ThemeSheetStylePtr(v *ThemeSheetStyleArgs) ThemeSheetStylePtrInput {
	return (*themeSheetStylePtrType)(v)
}

func (*themeSheetStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeSheetStyle)(nil)).Elem()
}

func (i *themeSheetStylePtrType) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return i.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (i *themeSheetStylePtrType) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStylePtrOutput)
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyleOutput struct{ *pulumi.OutputState }

func (ThemeSheetStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeSheetStyle)(nil)).Elem()
}

func (o ThemeSheetStyleOutput) ToThemeSheetStyleOutput() ThemeSheetStyleOutput {
	return o
}

func (o ThemeSheetStyleOutput) ToThemeSheetStyleOutputWithContext(ctx context.Context) ThemeSheetStyleOutput {
	return o
}

func (o ThemeSheetStyleOutput) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return o.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (o ThemeSheetStyleOutput) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeSheetStyle) *ThemeSheetStyle {
		return &v
	}).(ThemeSheetStylePtrOutput)
}

func (o ThemeSheetStyleOutput) Tile() ThemeTileStylePtrOutput {
	return o.ApplyT(func(v ThemeSheetStyle) *ThemeTileStyle { return v.Tile }).(ThemeTileStylePtrOutput)
}

func (o ThemeSheetStyleOutput) TileLayout() ThemeTileLayoutStylePtrOutput {
	return o.ApplyT(func(v ThemeSheetStyle) *ThemeTileLayoutStyle { return v.TileLayout }).(ThemeTileLayoutStylePtrOutput)
}

type ThemeSheetStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeSheetStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeSheetStyle)(nil)).Elem()
}

func (o ThemeSheetStylePtrOutput) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return o
}

func (o ThemeSheetStylePtrOutput) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return o
}

func (o ThemeSheetStylePtrOutput) Elem() ThemeSheetStyleOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) ThemeSheetStyle {
		if v != nil {
			return *v
		}
		var ret ThemeSheetStyle
		return ret
	}).(ThemeSheetStyleOutput)
}

func (o ThemeSheetStylePtrOutput) Tile() ThemeTileStylePtrOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) *ThemeTileStyle {
		if v == nil {
			return nil
		}
		return v.Tile
	}).(ThemeTileStylePtrOutput)
}

func (o ThemeSheetStylePtrOutput) TileLayout() ThemeTileLayoutStylePtrOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) *ThemeTileLayoutStyle {
		if v == nil {
			return nil
		}
		return v.TileLayout
	}).(ThemeTileLayoutStylePtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type ThemeTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// ThemeTagInput is an input type that accepts ThemeTagArgs and ThemeTagOutput values.
// You can construct a concrete instance of `ThemeTagInput` via:
//
//          ThemeTagArgs{...}
type ThemeTagInput interface {
	pulumi.Input

	ToThemeTagOutput() ThemeTagOutput
	ToThemeTagOutputWithContext(context.Context) ThemeTagOutput
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type ThemeTagArgs struct {
	// <p>Tag key.</p>
	Key pulumi.StringInput `pulumi:"key"`
	// <p>Tag value.</p>
	Value pulumi.StringInput `pulumi:"value"`
}

func (ThemeTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTag)(nil)).Elem()
}

func (i ThemeTagArgs) ToThemeTagOutput() ThemeTagOutput {
	return i.ToThemeTagOutputWithContext(context.Background())
}

func (i ThemeTagArgs) ToThemeTagOutputWithContext(ctx context.Context) ThemeTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagOutput)
}

// ThemeTagArrayInput is an input type that accepts ThemeTagArray and ThemeTagArrayOutput values.
// You can construct a concrete instance of `ThemeTagArrayInput` via:
//
//          ThemeTagArray{ ThemeTagArgs{...} }
type ThemeTagArrayInput interface {
	pulumi.Input

	ToThemeTagArrayOutput() ThemeTagArrayOutput
	ToThemeTagArrayOutputWithContext(context.Context) ThemeTagArrayOutput
}

type ThemeTagArray []ThemeTagInput

func (ThemeTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeTag)(nil)).Elem()
}

func (i ThemeTagArray) ToThemeTagArrayOutput() ThemeTagArrayOutput {
	return i.ToThemeTagArrayOutputWithContext(context.Background())
}

func (i ThemeTagArray) ToThemeTagArrayOutputWithContext(ctx context.Context) ThemeTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagArrayOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//             resource.</p>
type ThemeTagOutput struct{ *pulumi.OutputState }

func (ThemeTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTag)(nil)).Elem()
}

func (o ThemeTagOutput) ToThemeTagOutput() ThemeTagOutput {
	return o
}

func (o ThemeTagOutput) ToThemeTagOutputWithContext(ctx context.Context) ThemeTagOutput {
	return o
}

// <p>Tag key.</p>
func (o ThemeTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ThemeTag) string { return v.Key }).(pulumi.StringOutput)
}

// <p>Tag value.</p>
func (o ThemeTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ThemeTag) string { return v.Value }).(pulumi.StringOutput)
}

type ThemeTagArrayOutput struct{ *pulumi.OutputState }

func (ThemeTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeTag)(nil)).Elem()
}

func (o ThemeTagArrayOutput) ToThemeTagArrayOutput() ThemeTagArrayOutput {
	return o
}

func (o ThemeTagArrayOutput) ToThemeTagArrayOutputWithContext(ctx context.Context) ThemeTagArrayOutput {
	return o
}

func (o ThemeTagArrayOutput) Index(i pulumi.IntInput) ThemeTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeTag {
		return vs[0].([]ThemeTag)[vs[1].(int)]
	}).(ThemeTagOutput)
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyle struct {
	Gutter *ThemeGutterStyle `pulumi:"gutter"`
	Margin *ThemeMarginStyle `pulumi:"margin"`
}

// ThemeTileLayoutStyleInput is an input type that accepts ThemeTileLayoutStyleArgs and ThemeTileLayoutStyleOutput values.
// You can construct a concrete instance of `ThemeTileLayoutStyleInput` via:
//
//          ThemeTileLayoutStyleArgs{...}
type ThemeTileLayoutStyleInput interface {
	pulumi.Input

	ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput
	ToThemeTileLayoutStyleOutputWithContext(context.Context) ThemeTileLayoutStyleOutput
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyleArgs struct {
	Gutter ThemeGutterStylePtrInput `pulumi:"gutter"`
	Margin ThemeMarginStylePtrInput `pulumi:"margin"`
}

func (ThemeTileLayoutStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileLayoutStyle)(nil)).Elem()
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput {
	return i.ToThemeTileLayoutStyleOutputWithContext(context.Background())
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStyleOutputWithContext(ctx context.Context) ThemeTileLayoutStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStyleOutput)
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return i.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStyleOutput).ToThemeTileLayoutStylePtrOutputWithContext(ctx)
}

// ThemeTileLayoutStylePtrInput is an input type that accepts ThemeTileLayoutStyleArgs, ThemeTileLayoutStylePtr and ThemeTileLayoutStylePtrOutput values.
// You can construct a concrete instance of `ThemeTileLayoutStylePtrInput` via:
//
//          ThemeTileLayoutStyleArgs{...}
//
//  or:
//
//          nil
type ThemeTileLayoutStylePtrInput interface {
	pulumi.Input

	ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput
	ToThemeTileLayoutStylePtrOutputWithContext(context.Context) ThemeTileLayoutStylePtrOutput
}

type themeTileLayoutStylePtrType ThemeTileLayoutStyleArgs

func ThemeTileLayoutStylePtr(v *ThemeTileLayoutStyleArgs) ThemeTileLayoutStylePtrInput {
	return (*themeTileLayoutStylePtrType)(v)
}

func (*themeTileLayoutStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileLayoutStyle)(nil)).Elem()
}

func (i *themeTileLayoutStylePtrType) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return i.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (i *themeTileLayoutStylePtrType) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStylePtrOutput)
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyleOutput struct{ *pulumi.OutputState }

func (ThemeTileLayoutStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileLayoutStyle)(nil)).Elem()
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput {
	return o
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStyleOutputWithContext(ctx context.Context) ThemeTileLayoutStyleOutput {
	return o
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return o.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTileLayoutStyle) *ThemeTileLayoutStyle {
		return &v
	}).(ThemeTileLayoutStylePtrOutput)
}

func (o ThemeTileLayoutStyleOutput) Gutter() ThemeGutterStylePtrOutput {
	return o.ApplyT(func(v ThemeTileLayoutStyle) *ThemeGutterStyle { return v.Gutter }).(ThemeGutterStylePtrOutput)
}

func (o ThemeTileLayoutStyleOutput) Margin() ThemeMarginStylePtrOutput {
	return o.ApplyT(func(v ThemeTileLayoutStyle) *ThemeMarginStyle { return v.Margin }).(ThemeMarginStylePtrOutput)
}

type ThemeTileLayoutStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeTileLayoutStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileLayoutStyle)(nil)).Elem()
}

func (o ThemeTileLayoutStylePtrOutput) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return o
}

func (o ThemeTileLayoutStylePtrOutput) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return o
}

func (o ThemeTileLayoutStylePtrOutput) Elem() ThemeTileLayoutStyleOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) ThemeTileLayoutStyle {
		if v != nil {
			return *v
		}
		var ret ThemeTileLayoutStyle
		return ret
	}).(ThemeTileLayoutStyleOutput)
}

func (o ThemeTileLayoutStylePtrOutput) Gutter() ThemeGutterStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) *ThemeGutterStyle {
		if v == nil {
			return nil
		}
		return v.Gutter
	}).(ThemeGutterStylePtrOutput)
}

func (o ThemeTileLayoutStylePtrOutput) Margin() ThemeMarginStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) *ThemeMarginStyle {
		if v == nil {
			return nil
		}
		return v.Margin
	}).(ThemeMarginStylePtrOutput)
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyle struct {
	Border *ThemeBorderStyle `pulumi:"border"`
}

// ThemeTileStyleInput is an input type that accepts ThemeTileStyleArgs and ThemeTileStyleOutput values.
// You can construct a concrete instance of `ThemeTileStyleInput` via:
//
//          ThemeTileStyleArgs{...}
type ThemeTileStyleInput interface {
	pulumi.Input

	ToThemeTileStyleOutput() ThemeTileStyleOutput
	ToThemeTileStyleOutputWithContext(context.Context) ThemeTileStyleOutput
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyleArgs struct {
	Border ThemeBorderStylePtrInput `pulumi:"border"`
}

func (ThemeTileStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileStyle)(nil)).Elem()
}

func (i ThemeTileStyleArgs) ToThemeTileStyleOutput() ThemeTileStyleOutput {
	return i.ToThemeTileStyleOutputWithContext(context.Background())
}

func (i ThemeTileStyleArgs) ToThemeTileStyleOutputWithContext(ctx context.Context) ThemeTileStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStyleOutput)
}

func (i ThemeTileStyleArgs) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return i.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (i ThemeTileStyleArgs) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStyleOutput).ToThemeTileStylePtrOutputWithContext(ctx)
}

// ThemeTileStylePtrInput is an input type that accepts ThemeTileStyleArgs, ThemeTileStylePtr and ThemeTileStylePtrOutput values.
// You can construct a concrete instance of `ThemeTileStylePtrInput` via:
//
//          ThemeTileStyleArgs{...}
//
//  or:
//
//          nil
type ThemeTileStylePtrInput interface {
	pulumi.Input

	ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput
	ToThemeTileStylePtrOutputWithContext(context.Context) ThemeTileStylePtrOutput
}

type themeTileStylePtrType ThemeTileStyleArgs

func ThemeTileStylePtr(v *ThemeTileStyleArgs) ThemeTileStylePtrInput {
	return (*themeTileStylePtrType)(v)
}

func (*themeTileStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileStyle)(nil)).Elem()
}

func (i *themeTileStylePtrType) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return i.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (i *themeTileStylePtrType) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStylePtrOutput)
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyleOutput struct{ *pulumi.OutputState }

func (ThemeTileStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileStyle)(nil)).Elem()
}

func (o ThemeTileStyleOutput) ToThemeTileStyleOutput() ThemeTileStyleOutput {
	return o
}

func (o ThemeTileStyleOutput) ToThemeTileStyleOutputWithContext(ctx context.Context) ThemeTileStyleOutput {
	return o
}

func (o ThemeTileStyleOutput) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return o.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (o ThemeTileStyleOutput) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTileStyle) *ThemeTileStyle {
		return &v
	}).(ThemeTileStylePtrOutput)
}

func (o ThemeTileStyleOutput) Border() ThemeBorderStylePtrOutput {
	return o.ApplyT(func(v ThemeTileStyle) *ThemeBorderStyle { return v.Border }).(ThemeBorderStylePtrOutput)
}

type ThemeTileStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeTileStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileStyle)(nil)).Elem()
}

func (o ThemeTileStylePtrOutput) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return o
}

func (o ThemeTileStylePtrOutput) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return o
}

func (o ThemeTileStylePtrOutput) Elem() ThemeTileStyleOutput {
	return o.ApplyT(func(v *ThemeTileStyle) ThemeTileStyle {
		if v != nil {
			return *v
		}
		var ret ThemeTileStyle
		return ret
	}).(ThemeTileStyleOutput)
}

func (o ThemeTileStylePtrOutput) Border() ThemeBorderStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileStyle) *ThemeBorderStyle {
		if v == nil {
			return nil
		}
		return v.Border
	}).(ThemeBorderStylePtrOutput)
}

// <p>The typeface for the theme.</p>
type ThemeTypography struct {
	FontFamilies []ThemeFont `pulumi:"fontFamilies"`
}

// ThemeTypographyInput is an input type that accepts ThemeTypographyArgs and ThemeTypographyOutput values.
// You can construct a concrete instance of `ThemeTypographyInput` via:
//
//          ThemeTypographyArgs{...}
type ThemeTypographyInput interface {
	pulumi.Input

	ToThemeTypographyOutput() ThemeTypographyOutput
	ToThemeTypographyOutputWithContext(context.Context) ThemeTypographyOutput
}

// <p>The typeface for the theme.</p>
type ThemeTypographyArgs struct {
	FontFamilies ThemeFontArrayInput `pulumi:"fontFamilies"`
}

func (ThemeTypographyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTypography)(nil)).Elem()
}

func (i ThemeTypographyArgs) ToThemeTypographyOutput() ThemeTypographyOutput {
	return i.ToThemeTypographyOutputWithContext(context.Background())
}

func (i ThemeTypographyArgs) ToThemeTypographyOutputWithContext(ctx context.Context) ThemeTypographyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyOutput)
}

func (i ThemeTypographyArgs) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return i.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (i ThemeTypographyArgs) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyOutput).ToThemeTypographyPtrOutputWithContext(ctx)
}

// ThemeTypographyPtrInput is an input type that accepts ThemeTypographyArgs, ThemeTypographyPtr and ThemeTypographyPtrOutput values.
// You can construct a concrete instance of `ThemeTypographyPtrInput` via:
//
//          ThemeTypographyArgs{...}
//
//  or:
//
//          nil
type ThemeTypographyPtrInput interface {
	pulumi.Input

	ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput
	ToThemeTypographyPtrOutputWithContext(context.Context) ThemeTypographyPtrOutput
}

type themeTypographyPtrType ThemeTypographyArgs

func ThemeTypographyPtr(v *ThemeTypographyArgs) ThemeTypographyPtrInput {
	return (*themeTypographyPtrType)(v)
}

func (*themeTypographyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTypography)(nil)).Elem()
}

func (i *themeTypographyPtrType) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return i.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (i *themeTypographyPtrType) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyPtrOutput)
}

// <p>The typeface for the theme.</p>
type ThemeTypographyOutput struct{ *pulumi.OutputState }

func (ThemeTypographyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTypography)(nil)).Elem()
}

func (o ThemeTypographyOutput) ToThemeTypographyOutput() ThemeTypographyOutput {
	return o
}

func (o ThemeTypographyOutput) ToThemeTypographyOutputWithContext(ctx context.Context) ThemeTypographyOutput {
	return o
}

func (o ThemeTypographyOutput) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return o.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (o ThemeTypographyOutput) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTypography) *ThemeTypography {
		return &v
	}).(ThemeTypographyPtrOutput)
}

func (o ThemeTypographyOutput) FontFamilies() ThemeFontArrayOutput {
	return o.ApplyT(func(v ThemeTypography) []ThemeFont { return v.FontFamilies }).(ThemeFontArrayOutput)
}

type ThemeTypographyPtrOutput struct{ *pulumi.OutputState }

func (ThemeTypographyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTypography)(nil)).Elem()
}

func (o ThemeTypographyPtrOutput) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return o
}

func (o ThemeTypographyPtrOutput) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return o
}

func (o ThemeTypographyPtrOutput) Elem() ThemeTypographyOutput {
	return o.ApplyT(func(v *ThemeTypography) ThemeTypography {
		if v != nil {
			return *v
		}
		var ret ThemeTypography
		return ret
	}).(ThemeTypographyOutput)
}

func (o ThemeTypographyPtrOutput) FontFamilies() ThemeFontArrayOutput {
	return o.ApplyT(func(v *ThemeTypography) []ThemeFont {
		if v == nil {
			return nil
		}
		return v.FontFamilies
	}).(ThemeFontArrayOutput)
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//             description is a hexadecimal color code that consists of six alphanumerical characters,
//             prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//                 Guide.</i>
//         </p>
type ThemeUIColorPalette struct {
	// <p>This color is that applies to selected states and buttons.</p>
	Accent *string `pulumi:"accent"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             accent color.</p>
	AccentForeground *string `pulumi:"accentForeground"`
	// <p>The color that applies to error messages.</p>
	Danger *string `pulumi:"danger"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             error color.</p>
	DangerForeground *string `pulumi:"dangerForeground"`
	// <p>The color that applies to the names of fields that are identified as
	//             dimensions.</p>
	Dimension *string `pulumi:"dimension"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             dimension color.</p>
	DimensionForeground *string `pulumi:"dimensionForeground"`
	// <p>The color that applies to the names of fields that are identified as measures.</p>
	Measure *string `pulumi:"measure"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             measure color.</p>
	MeasureForeground *string `pulumi:"measureForeground"`
	// <p>The background color that applies to visuals and other high emphasis UI.</p>
	PrimaryBackground *string `pulumi:"primaryBackground"`
	// <p>The color of text and other foreground elements that appear over the primary
	//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
	PrimaryForeground *string `pulumi:"primaryForeground"`
	// <p>The background color that applies to the sheet background and sheet controls.</p>
	SecondaryBackground *string `pulumi:"secondaryBackground"`
	// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
	//             appears over the secondary background.</p>
	SecondaryForeground *string `pulumi:"secondaryForeground"`
	// <p>The color that applies to success messages, for example the check mark for a
	//             successful download.</p>
	Success *string `pulumi:"success"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             success color.</p>
	SuccessForeground *string `pulumi:"successForeground"`
	// <p>This color that applies to warning and informational messages.</p>
	Warning *string `pulumi:"warning"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             warning color.</p>
	WarningForeground *string `pulumi:"warningForeground"`
}

// ThemeUIColorPaletteInput is an input type that accepts ThemeUIColorPaletteArgs and ThemeUIColorPaletteOutput values.
// You can construct a concrete instance of `ThemeUIColorPaletteInput` via:
//
//          ThemeUIColorPaletteArgs{...}
type ThemeUIColorPaletteInput interface {
	pulumi.Input

	ToThemeUIColorPaletteOutput() ThemeUIColorPaletteOutput
	ToThemeUIColorPaletteOutputWithContext(context.Context) ThemeUIColorPaletteOutput
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//             description is a hexadecimal color code that consists of six alphanumerical characters,
//             prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//                 Guide.</i>
//         </p>
type ThemeUIColorPaletteArgs struct {
	// <p>This color is that applies to selected states and buttons.</p>
	Accent pulumi.StringPtrInput `pulumi:"accent"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             accent color.</p>
	AccentForeground pulumi.StringPtrInput `pulumi:"accentForeground"`
	// <p>The color that applies to error messages.</p>
	Danger pulumi.StringPtrInput `pulumi:"danger"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             error color.</p>
	DangerForeground pulumi.StringPtrInput `pulumi:"dangerForeground"`
	// <p>The color that applies to the names of fields that are identified as
	//             dimensions.</p>
	Dimension pulumi.StringPtrInput `pulumi:"dimension"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             dimension color.</p>
	DimensionForeground pulumi.StringPtrInput `pulumi:"dimensionForeground"`
	// <p>The color that applies to the names of fields that are identified as measures.</p>
	Measure pulumi.StringPtrInput `pulumi:"measure"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             measure color.</p>
	MeasureForeground pulumi.StringPtrInput `pulumi:"measureForeground"`
	// <p>The background color that applies to visuals and other high emphasis UI.</p>
	PrimaryBackground pulumi.StringPtrInput `pulumi:"primaryBackground"`
	// <p>The color of text and other foreground elements that appear over the primary
	//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
	PrimaryForeground pulumi.StringPtrInput `pulumi:"primaryForeground"`
	// <p>The background color that applies to the sheet background and sheet controls.</p>
	SecondaryBackground pulumi.StringPtrInput `pulumi:"secondaryBackground"`
	// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
	//             appears over the secondary background.</p>
	SecondaryForeground pulumi.StringPtrInput `pulumi:"secondaryForeground"`
	// <p>The color that applies to success messages, for example the check mark for a
	//             successful download.</p>
	Success pulumi.StringPtrInput `pulumi:"success"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             success color.</p>
	SuccessForeground pulumi.StringPtrInput `pulumi:"successForeground"`
	// <p>This color that applies to warning and informational messages.</p>
	Warning pulumi.StringPtrInput `pulumi:"warning"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             warning color.</p>
	WarningForeground pulumi.StringPtrInput `pulumi:"warningForeground"`
}

func (ThemeUIColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeUIColorPalette)(nil)).Elem()
}

func (i ThemeUIColorPaletteArgs) ToThemeUIColorPaletteOutput() ThemeUIColorPaletteOutput {
	return i.ToThemeUIColorPaletteOutputWithContext(context.Background())
}

func (i ThemeUIColorPaletteArgs) ToThemeUIColorPaletteOutputWithContext(ctx context.Context) ThemeUIColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUIColorPaletteOutput)
}

func (i ThemeUIColorPaletteArgs) ToThemeUIColorPalettePtrOutput() ThemeUIColorPalettePtrOutput {
	return i.ToThemeUIColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeUIColorPaletteArgs) ToThemeUIColorPalettePtrOutputWithContext(ctx context.Context) ThemeUIColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUIColorPaletteOutput).ToThemeUIColorPalettePtrOutputWithContext(ctx)
}

// ThemeUIColorPalettePtrInput is an input type that accepts ThemeUIColorPaletteArgs, ThemeUIColorPalettePtr and ThemeUIColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeUIColorPalettePtrInput` via:
//
//          ThemeUIColorPaletteArgs{...}
//
//  or:
//
//          nil
type ThemeUIColorPalettePtrInput interface {
	pulumi.Input

	ToThemeUIColorPalettePtrOutput() ThemeUIColorPalettePtrOutput
	ToThemeUIColorPalettePtrOutputWithContext(context.Context) ThemeUIColorPalettePtrOutput
}

type themeUIColorPalettePtrType ThemeUIColorPaletteArgs

func ThemeUIColorPalettePtr(v *ThemeUIColorPaletteArgs) ThemeUIColorPalettePtrInput {
	return (*themeUIColorPalettePtrType)(v)
}

func (*themeUIColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeUIColorPalette)(nil)).Elem()
}

func (i *themeUIColorPalettePtrType) ToThemeUIColorPalettePtrOutput() ThemeUIColorPalettePtrOutput {
	return i.ToThemeUIColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeUIColorPalettePtrType) ToThemeUIColorPalettePtrOutputWithContext(ctx context.Context) ThemeUIColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUIColorPalettePtrOutput)
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//             description is a hexadecimal color code that consists of six alphanumerical characters,
//             prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//                 Guide.</i>
//         </p>
type ThemeUIColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeUIColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeUIColorPalette)(nil)).Elem()
}

func (o ThemeUIColorPaletteOutput) ToThemeUIColorPaletteOutput() ThemeUIColorPaletteOutput {
	return o
}

func (o ThemeUIColorPaletteOutput) ToThemeUIColorPaletteOutputWithContext(ctx context.Context) ThemeUIColorPaletteOutput {
	return o
}

func (o ThemeUIColorPaletteOutput) ToThemeUIColorPalettePtrOutput() ThemeUIColorPalettePtrOutput {
	return o.ToThemeUIColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeUIColorPaletteOutput) ToThemeUIColorPalettePtrOutputWithContext(ctx context.Context) ThemeUIColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeUIColorPalette) *ThemeUIColorPalette {
		return &v
	}).(ThemeUIColorPalettePtrOutput)
}

// <p>This color is that applies to selected states and buttons.</p>
func (o ThemeUIColorPaletteOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.Accent }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             accent color.</p>
func (o ThemeUIColorPaletteOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.AccentForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to error messages.</p>
func (o ThemeUIColorPaletteOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.Danger }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             error color.</p>
func (o ThemeUIColorPaletteOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.DangerForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as
//             dimensions.</p>
func (o ThemeUIColorPaletteOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.Dimension }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             dimension color.</p>
func (o ThemeUIColorPaletteOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.DimensionForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as measures.</p>
func (o ThemeUIColorPaletteOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.Measure }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             measure color.</p>
func (o ThemeUIColorPaletteOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.MeasureForeground }).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to visuals and other high emphasis UI.</p>
func (o ThemeUIColorPaletteOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.PrimaryBackground }).(pulumi.StringPtrOutput)
}

// <p>The color of text and other foreground elements that appear over the primary
//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
func (o ThemeUIColorPaletteOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.PrimaryForeground }).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to the sheet background and sheet controls.</p>
func (o ThemeUIColorPaletteOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.SecondaryBackground }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
//             appears over the secondary background.</p>
func (o ThemeUIColorPaletteOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.SecondaryForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to success messages, for example the check mark for a
//             successful download.</p>
func (o ThemeUIColorPaletteOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.Success }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             success color.</p>
func (o ThemeUIColorPaletteOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.SuccessForeground }).(pulumi.StringPtrOutput)
}

// <p>This color that applies to warning and informational messages.</p>
func (o ThemeUIColorPaletteOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             warning color.</p>
func (o ThemeUIColorPaletteOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUIColorPalette) *string { return v.WarningForeground }).(pulumi.StringPtrOutput)
}

type ThemeUIColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeUIColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeUIColorPalette)(nil)).Elem()
}

func (o ThemeUIColorPalettePtrOutput) ToThemeUIColorPalettePtrOutput() ThemeUIColorPalettePtrOutput {
	return o
}

func (o ThemeUIColorPalettePtrOutput) ToThemeUIColorPalettePtrOutputWithContext(ctx context.Context) ThemeUIColorPalettePtrOutput {
	return o
}

func (o ThemeUIColorPalettePtrOutput) Elem() ThemeUIColorPaletteOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) ThemeUIColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeUIColorPalette
		return ret
	}).(ThemeUIColorPaletteOutput)
}

// <p>This color is that applies to selected states and buttons.</p>
func (o ThemeUIColorPalettePtrOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Accent
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             accent color.</p>
func (o ThemeUIColorPalettePtrOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.AccentForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to error messages.</p>
func (o ThemeUIColorPalettePtrOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Danger
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             error color.</p>
func (o ThemeUIColorPalettePtrOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DangerForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as
//             dimensions.</p>
func (o ThemeUIColorPalettePtrOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             dimension color.</p>
func (o ThemeUIColorPalettePtrOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DimensionForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as measures.</p>
func (o ThemeUIColorPalettePtrOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Measure
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             measure color.</p>
func (o ThemeUIColorPalettePtrOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.MeasureForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to visuals and other high emphasis UI.</p>
func (o ThemeUIColorPalettePtrOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryBackground
	}).(pulumi.StringPtrOutput)
}

// <p>The color of text and other foreground elements that appear over the primary
//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
func (o ThemeUIColorPalettePtrOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to the sheet background and sheet controls.</p>
func (o ThemeUIColorPalettePtrOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryBackground
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
//             appears over the secondary background.</p>
func (o ThemeUIColorPalettePtrOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to success messages, for example the check mark for a
//             successful download.</p>
func (o ThemeUIColorPalettePtrOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Success
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             success color.</p>
func (o ThemeUIColorPalettePtrOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SuccessForeground
	}).(pulumi.StringPtrOutput)
}

// <p>This color that applies to warning and informational messages.</p>
func (o ThemeUIColorPalettePtrOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//             warning color.</p>
func (o ThemeUIColorPalettePtrOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUIColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.WarningForeground
	}).(pulumi.StringPtrOutput)
}

// <p>A version of a theme.</p>
type ThemeVersion struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn *string `pulumi:"arn"`
	// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
	//             themes initially inherit from a default QuickSight theme.</p>
	BaseThemeId   *string             `pulumi:"baseThemeId"`
	Configuration *ThemeConfiguration `pulumi:"configuration"`
	// <p>The date and time that this theme version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>The description of the theme.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with the theme.</p>
	Errors []ThemeError         `pulumi:"errors"`
	Status *ThemeResourceStatus `pulumi:"status"`
	// <p>The version number of the theme.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// ThemeVersionInput is an input type that accepts ThemeVersionArgs and ThemeVersionOutput values.
// You can construct a concrete instance of `ThemeVersionInput` via:
//
//          ThemeVersionArgs{...}
type ThemeVersionInput interface {
	pulumi.Input

	ToThemeVersionOutput() ThemeVersionOutput
	ToThemeVersionOutputWithContext(context.Context) ThemeVersionOutput
}

// <p>A version of a theme.</p>
type ThemeVersionArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
	//             themes initially inherit from a default QuickSight theme.</p>
	BaseThemeId   pulumi.StringPtrInput      `pulumi:"baseThemeId"`
	Configuration ThemeConfigurationPtrInput `pulumi:"configuration"`
	// <p>The date and time that this theme version was created.</p>
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// <p>The description of the theme.</p>
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <p>Errors associated with the theme.</p>
	Errors ThemeErrorArrayInput        `pulumi:"errors"`
	Status ThemeResourceStatusPtrInput `pulumi:"status"`
	// <p>The version number of the theme.</p>
	VersionNumber pulumi.Float64PtrInput `pulumi:"versionNumber"`
}

func (ThemeVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeVersion)(nil)).Elem()
}

func (i ThemeVersionArgs) ToThemeVersionOutput() ThemeVersionOutput {
	return i.ToThemeVersionOutputWithContext(context.Background())
}

func (i ThemeVersionArgs) ToThemeVersionOutputWithContext(ctx context.Context) ThemeVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeVersionOutput)
}

func (i ThemeVersionArgs) ToThemeVersionPtrOutput() ThemeVersionPtrOutput {
	return i.ToThemeVersionPtrOutputWithContext(context.Background())
}

func (i ThemeVersionArgs) ToThemeVersionPtrOutputWithContext(ctx context.Context) ThemeVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeVersionOutput).ToThemeVersionPtrOutputWithContext(ctx)
}

// ThemeVersionPtrInput is an input type that accepts ThemeVersionArgs, ThemeVersionPtr and ThemeVersionPtrOutput values.
// You can construct a concrete instance of `ThemeVersionPtrInput` via:
//
//          ThemeVersionArgs{...}
//
//  or:
//
//          nil
type ThemeVersionPtrInput interface {
	pulumi.Input

	ToThemeVersionPtrOutput() ThemeVersionPtrOutput
	ToThemeVersionPtrOutputWithContext(context.Context) ThemeVersionPtrOutput
}

type themeVersionPtrType ThemeVersionArgs

func ThemeVersionPtr(v *ThemeVersionArgs) ThemeVersionPtrInput {
	return (*themeVersionPtrType)(v)
}

func (*themeVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeVersion)(nil)).Elem()
}

func (i *themeVersionPtrType) ToThemeVersionPtrOutput() ThemeVersionPtrOutput {
	return i.ToThemeVersionPtrOutputWithContext(context.Background())
}

func (i *themeVersionPtrType) ToThemeVersionPtrOutputWithContext(ctx context.Context) ThemeVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeVersionPtrOutput)
}

// <p>A version of a theme.</p>
type ThemeVersionOutput struct{ *pulumi.OutputState }

func (ThemeVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeVersion)(nil)).Elem()
}

func (o ThemeVersionOutput) ToThemeVersionOutput() ThemeVersionOutput {
	return o
}

func (o ThemeVersionOutput) ToThemeVersionOutputWithContext(ctx context.Context) ThemeVersionOutput {
	return o
}

func (o ThemeVersionOutput) ToThemeVersionPtrOutput() ThemeVersionPtrOutput {
	return o.ToThemeVersionPtrOutputWithContext(context.Background())
}

func (o ThemeVersionOutput) ToThemeVersionPtrOutputWithContext(ctx context.Context) ThemeVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeVersion) *ThemeVersion {
		return &v
	}).(ThemeVersionPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o ThemeVersionOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
//             themes initially inherit from a default QuickSight theme.</p>
func (o ThemeVersionOutput) BaseThemeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.BaseThemeId }).(pulumi.StringPtrOutput)
}

func (o ThemeVersionOutput) Configuration() ThemeConfigurationPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *ThemeConfiguration { return v.Configuration }).(ThemeConfigurationPtrOutput)
}

// <p>The date and time that this theme version was created.</p>
func (o ThemeVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>The description of the theme.</p>
func (o ThemeVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with the theme.</p>
func (o ThemeVersionOutput) Errors() ThemeErrorArrayOutput {
	return o.ApplyT(func(v ThemeVersion) []ThemeError { return v.Errors }).(ThemeErrorArrayOutput)
}

func (o ThemeVersionOutput) Status() ThemeResourceStatusPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *ThemeResourceStatus { return v.Status }).(ThemeResourceStatusPtrOutput)
}

// <p>The version number of the theme.</p>
func (o ThemeVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ThemeVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type ThemeVersionPtrOutput struct{ *pulumi.OutputState }

func (ThemeVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeVersion)(nil)).Elem()
}

func (o ThemeVersionPtrOutput) ToThemeVersionPtrOutput() ThemeVersionPtrOutput {
	return o
}

func (o ThemeVersionPtrOutput) ToThemeVersionPtrOutputWithContext(ctx context.Context) ThemeVersionPtrOutput {
	return o
}

func (o ThemeVersionPtrOutput) Elem() ThemeVersionOutput {
	return o.ApplyT(func(v *ThemeVersion) ThemeVersion {
		if v != nil {
			return *v
		}
		var ret ThemeVersion
		return ret
	}).(ThemeVersionOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o ThemeVersionPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
//             themes initially inherit from a default QuickSight theme.</p>
func (o ThemeVersionPtrOutput) BaseThemeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.BaseThemeId
	}).(pulumi.StringPtrOutput)
}

func (o ThemeVersionPtrOutput) Configuration() ThemeConfigurationPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *ThemeConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ThemeConfigurationPtrOutput)
}

// <p>The date and time that this theme version was created.</p>
func (o ThemeVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>The description of the theme.</p>
func (o ThemeVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with the theme.</p>
func (o ThemeVersionPtrOutput) Errors() ThemeErrorArrayOutput {
	return o.ApplyT(func(v *ThemeVersion) []ThemeError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ThemeErrorArrayOutput)
}

func (o ThemeVersionPtrOutput) Status() ThemeResourceStatusPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *ThemeResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ThemeResourceStatusPtrOutput)
}

// <p>The version number of the theme.</p>
func (o ThemeVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalysisDataSetReferenceOutput{})
	pulumi.RegisterOutputType(AnalysisDataSetReferenceArrayOutput{})
	pulumi.RegisterOutputType(AnalysisDateTimeParameterOutput{})
	pulumi.RegisterOutputType(AnalysisDateTimeParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisDecimalParameterOutput{})
	pulumi.RegisterOutputType(AnalysisDecimalParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisErrorOutput{})
	pulumi.RegisterOutputType(AnalysisErrorArrayOutput{})
	pulumi.RegisterOutputType(AnalysisIntegerParameterOutput{})
	pulumi.RegisterOutputType(AnalysisIntegerParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisParametersOutput{})
	pulumi.RegisterOutputType(AnalysisParametersPtrOutput{})
	pulumi.RegisterOutputType(AnalysisResourcePermissionOutput{})
	pulumi.RegisterOutputType(AnalysisResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(AnalysisSheetOutput{})
	pulumi.RegisterOutputType(AnalysisSheetArrayOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntityOutput{})
	pulumi.RegisterOutputType(AnalysisSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(AnalysisSourceTemplateOutput{})
	pulumi.RegisterOutputType(AnalysisSourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(AnalysisStringParameterOutput{})
	pulumi.RegisterOutputType(AnalysisStringParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisTagOutput{})
	pulumi.RegisterOutputType(AnalysisTagArrayOutput{})
	pulumi.RegisterOutputType(DashboardAdHocFilteringOptionOutput{})
	pulumi.RegisterOutputType(DashboardAdHocFilteringOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardDataSetReferenceOutput{})
	pulumi.RegisterOutputType(DashboardDataSetReferenceArrayOutput{})
	pulumi.RegisterOutputType(DashboardDateTimeParameterOutput{})
	pulumi.RegisterOutputType(DashboardDateTimeParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardDecimalParameterOutput{})
	pulumi.RegisterOutputType(DashboardDecimalParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardErrorOutput{})
	pulumi.RegisterOutputType(DashboardErrorArrayOutput{})
	pulumi.RegisterOutputType(DashboardExportToCSVOptionOutput{})
	pulumi.RegisterOutputType(DashboardExportToCSVOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardIntegerParameterOutput{})
	pulumi.RegisterOutputType(DashboardIntegerParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardParametersOutput{})
	pulumi.RegisterOutputType(DashboardParametersPtrOutput{})
	pulumi.RegisterOutputType(DashboardPublishOptionsOutput{})
	pulumi.RegisterOutputType(DashboardPublishOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardResourcePermissionOutput{})
	pulumi.RegisterOutputType(DashboardResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetOutput{})
	pulumi.RegisterOutputType(DashboardSheetArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlsOptionOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlsOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntityOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(DashboardSourceTemplateOutput{})
	pulumi.RegisterOutputType(DashboardSourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(DashboardStringParameterOutput{})
	pulumi.RegisterOutputType(DashboardStringParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardTagOutput{})
	pulumi.RegisterOutputType(DashboardTagArrayOutput{})
	pulumi.RegisterOutputType(DashboardVersionOutput{})
	pulumi.RegisterOutputType(DashboardVersionPtrOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupArrayOutput{})
	pulumi.RegisterOutputType(DataSetColumnLevelPermissionRuleOutput{})
	pulumi.RegisterOutputType(DataSetColumnLevelPermissionRuleArrayOutput{})
	pulumi.RegisterOutputType(DataSetFieldFolderMapOutput{})
	pulumi.RegisterOutputType(DataSetFieldFolderMapPtrOutput{})
	pulumi.RegisterOutputType(DataSetGeoSpatialColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetGeoSpatialColumnGroupPtrOutput{})
	pulumi.RegisterOutputType(DataSetIngestionWaitPolicyOutput{})
	pulumi.RegisterOutputType(DataSetIngestionWaitPolicyPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapPtrOutput{})
	pulumi.RegisterOutputType(DataSetOutputColumnOutput{})
	pulumi.RegisterOutputType(DataSetOutputColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapPtrOutput{})
	pulumi.RegisterOutputType(DataSetResourcePermissionOutput{})
	pulumi.RegisterOutputType(DataSetResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionDataSetOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionDataSetPtrOutput{})
	pulumi.RegisterOutputType(DataSetTagOutput{})
	pulumi.RegisterOutputType(DataSetTagArrayOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonElasticsearchParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonElasticsearchParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonOpenSearchParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonOpenSearchParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAthenaParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAthenaParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraPostgreSqlParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraPostgreSqlParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialPairOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialPairPtrOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceErrorInfoOutput{})
	pulumi.RegisterOutputType(DataSourceErrorInfoPtrOutput{})
	pulumi.RegisterOutputType(DataSourceManifestFileLocationOutput{})
	pulumi.RegisterOutputType(DataSourceManifestFileLocationPtrOutput{})
	pulumi.RegisterOutputType(DataSourceMariaDbParametersOutput{})
	pulumi.RegisterOutputType(DataSourceMariaDbParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceMySqlParametersOutput{})
	pulumi.RegisterOutputType(DataSourceMySqlParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceOracleParametersOutput{})
	pulumi.RegisterOutputType(DataSourceOracleParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersArrayOutput{})
	pulumi.RegisterOutputType(DataSourcePostgreSqlParametersOutput{})
	pulumi.RegisterOutputType(DataSourcePostgreSqlParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourcePrestoParametersOutput{})
	pulumi.RegisterOutputType(DataSourcePrestoParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceRdsParametersOutput{})
	pulumi.RegisterOutputType(DataSourceRdsParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceRedshiftParametersOutput{})
	pulumi.RegisterOutputType(DataSourceRedshiftParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceResourcePermissionOutput{})
	pulumi.RegisterOutputType(DataSourceResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSourceS3ParametersOutput{})
	pulumi.RegisterOutputType(DataSourceS3ParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSnowflakeParametersOutput{})
	pulumi.RegisterOutputType(DataSourceSnowflakeParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSparkParametersOutput{})
	pulumi.RegisterOutputType(DataSourceSparkParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSqlServerParametersOutput{})
	pulumi.RegisterOutputType(DataSourceSqlServerParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSourceTagOutput{})
	pulumi.RegisterOutputType(DataSourceTagArrayOutput{})
	pulumi.RegisterOutputType(DataSourceTeradataParametersOutput{})
	pulumi.RegisterOutputType(DataSourceTeradataParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupColumnSchemaOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupSchemaOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupSchemaArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnSchemaOutput{})
	pulumi.RegisterOutputType(TemplateColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataSetConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDataSetConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataSetReferenceOutput{})
	pulumi.RegisterOutputType(TemplateDataSetReferenceArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataSetSchemaOutput{})
	pulumi.RegisterOutputType(TemplateDataSetSchemaPtrOutput{})
	pulumi.RegisterOutputType(TemplateErrorOutput{})
	pulumi.RegisterOutputType(TemplateErrorArrayOutput{})
	pulumi.RegisterOutputType(TemplateResourcePermissionOutput{})
	pulumi.RegisterOutputType(TemplateResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(TemplateSheetOutput{})
	pulumi.RegisterOutputType(TemplateSheetArrayOutput{})
	pulumi.RegisterOutputType(TemplateSourceAnalysisOutput{})
	pulumi.RegisterOutputType(TemplateSourceAnalysisPtrOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntityOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(TemplateSourceTemplateOutput{})
	pulumi.RegisterOutputType(TemplateSourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(TemplateTagOutput{})
	pulumi.RegisterOutputType(TemplateTagArrayOutput{})
	pulumi.RegisterOutputType(TemplateVersionOutput{})
	pulumi.RegisterOutputType(TemplateVersionPtrOutput{})
	pulumi.RegisterOutputType(ThemeBorderStyleOutput{})
	pulumi.RegisterOutputType(ThemeBorderStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ThemeDataColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeDataColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemeErrorOutput{})
	pulumi.RegisterOutputType(ThemeErrorArrayOutput{})
	pulumi.RegisterOutputType(ThemeFontOutput{})
	pulumi.RegisterOutputType(ThemeFontArrayOutput{})
	pulumi.RegisterOutputType(ThemeGutterStyleOutput{})
	pulumi.RegisterOutputType(ThemeGutterStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeMarginStyleOutput{})
	pulumi.RegisterOutputType(ThemeMarginStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeResourcePermissionOutput{})
	pulumi.RegisterOutputType(ThemeResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(ThemeSheetStyleOutput{})
	pulumi.RegisterOutputType(ThemeSheetStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTagOutput{})
	pulumi.RegisterOutputType(ThemeTagArrayOutput{})
	pulumi.RegisterOutputType(ThemeTileLayoutStyleOutput{})
	pulumi.RegisterOutputType(ThemeTileLayoutStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTileStyleOutput{})
	pulumi.RegisterOutputType(ThemeTileStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTypographyOutput{})
	pulumi.RegisterOutputType(ThemeTypographyPtrOutput{})
	pulumi.RegisterOutputType(ThemeUIColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeUIColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemeVersionOutput{})
	pulumi.RegisterOutputType(ThemeVersionPtrOutput{})
}
