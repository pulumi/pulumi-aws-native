// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DashboardSectionPageBreakConfiguration struct {
	// The configuration of a page break after a section.
	After *DashboardSectionAfterPageBreak `pulumi:"after"`
}

// DashboardSectionPageBreakConfigurationInput is an input type that accepts DashboardSectionPageBreakConfigurationArgs and DashboardSectionPageBreakConfigurationOutput values.
// You can construct a concrete instance of `DashboardSectionPageBreakConfigurationInput` via:
//
//	DashboardSectionPageBreakConfigurationArgs{...}
type DashboardSectionPageBreakConfigurationInput interface {
	pulumi.Input

	ToDashboardSectionPageBreakConfigurationOutput() DashboardSectionPageBreakConfigurationOutput
	ToDashboardSectionPageBreakConfigurationOutputWithContext(context.Context) DashboardSectionPageBreakConfigurationOutput
}

type DashboardSectionPageBreakConfigurationArgs struct {
	// The configuration of a page break after a section.
	After DashboardSectionAfterPageBreakPtrInput `pulumi:"after"`
}

func (DashboardSectionPageBreakConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionPageBreakConfiguration)(nil)).Elem()
}

func (i DashboardSectionPageBreakConfigurationArgs) ToDashboardSectionPageBreakConfigurationOutput() DashboardSectionPageBreakConfigurationOutput {
	return i.ToDashboardSectionPageBreakConfigurationOutputWithContext(context.Background())
}

func (i DashboardSectionPageBreakConfigurationArgs) ToDashboardSectionPageBreakConfigurationOutputWithContext(ctx context.Context) DashboardSectionPageBreakConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionPageBreakConfigurationOutput)
}

func (i DashboardSectionPageBreakConfigurationArgs) ToDashboardSectionPageBreakConfigurationPtrOutput() DashboardSectionPageBreakConfigurationPtrOutput {
	return i.ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardSectionPageBreakConfigurationArgs) ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) DashboardSectionPageBreakConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionPageBreakConfigurationOutput).ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(ctx)
}

// DashboardSectionPageBreakConfigurationPtrInput is an input type that accepts DashboardSectionPageBreakConfigurationArgs, DashboardSectionPageBreakConfigurationPtr and DashboardSectionPageBreakConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardSectionPageBreakConfigurationPtrInput` via:
//
//	        DashboardSectionPageBreakConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardSectionPageBreakConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardSectionPageBreakConfigurationPtrOutput() DashboardSectionPageBreakConfigurationPtrOutput
	ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(context.Context) DashboardSectionPageBreakConfigurationPtrOutput
}

type dashboardSectionPageBreakConfigurationPtrType DashboardSectionPageBreakConfigurationArgs

func DashboardSectionPageBreakConfigurationPtr(v *DashboardSectionPageBreakConfigurationArgs) DashboardSectionPageBreakConfigurationPtrInput {
	return (*dashboardSectionPageBreakConfigurationPtrType)(v)
}

func (*dashboardSectionPageBreakConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSectionPageBreakConfiguration)(nil)).Elem()
}

func (i *dashboardSectionPageBreakConfigurationPtrType) ToDashboardSectionPageBreakConfigurationPtrOutput() DashboardSectionPageBreakConfigurationPtrOutput {
	return i.ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardSectionPageBreakConfigurationPtrType) ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) DashboardSectionPageBreakConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionPageBreakConfigurationPtrOutput)
}

type DashboardSectionPageBreakConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardSectionPageBreakConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionPageBreakConfiguration)(nil)).Elem()
}

func (o DashboardSectionPageBreakConfigurationOutput) ToDashboardSectionPageBreakConfigurationOutput() DashboardSectionPageBreakConfigurationOutput {
	return o
}

func (o DashboardSectionPageBreakConfigurationOutput) ToDashboardSectionPageBreakConfigurationOutputWithContext(ctx context.Context) DashboardSectionPageBreakConfigurationOutput {
	return o
}

func (o DashboardSectionPageBreakConfigurationOutput) ToDashboardSectionPageBreakConfigurationPtrOutput() DashboardSectionPageBreakConfigurationPtrOutput {
	return o.ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardSectionPageBreakConfigurationOutput) ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) DashboardSectionPageBreakConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSectionPageBreakConfiguration) *DashboardSectionPageBreakConfiguration {
		return &v
	}).(DashboardSectionPageBreakConfigurationPtrOutput)
}

// The configuration of a page break after a section.
func (o DashboardSectionPageBreakConfigurationOutput) After() DashboardSectionAfterPageBreakPtrOutput {
	return o.ApplyT(func(v DashboardSectionPageBreakConfiguration) *DashboardSectionAfterPageBreak { return v.After }).(DashboardSectionAfterPageBreakPtrOutput)
}

type DashboardSectionPageBreakConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardSectionPageBreakConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSectionPageBreakConfiguration)(nil)).Elem()
}

func (o DashboardSectionPageBreakConfigurationPtrOutput) ToDashboardSectionPageBreakConfigurationPtrOutput() DashboardSectionPageBreakConfigurationPtrOutput {
	return o
}

func (o DashboardSectionPageBreakConfigurationPtrOutput) ToDashboardSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) DashboardSectionPageBreakConfigurationPtrOutput {
	return o
}

func (o DashboardSectionPageBreakConfigurationPtrOutput) Elem() DashboardSectionPageBreakConfigurationOutput {
	return o.ApplyT(func(v *DashboardSectionPageBreakConfiguration) DashboardSectionPageBreakConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardSectionPageBreakConfiguration
		return ret
	}).(DashboardSectionPageBreakConfigurationOutput)
}

// The configuration of a page break after a section.
func (o DashboardSectionPageBreakConfigurationPtrOutput) After() DashboardSectionAfterPageBreakPtrOutput {
	return o.ApplyT(func(v *DashboardSectionPageBreakConfiguration) *DashboardSectionAfterPageBreak {
		if v == nil {
			return nil
		}
		return v.After
	}).(DashboardSectionAfterPageBreakPtrOutput)
}

type DashboardSectionStyle struct {
	// String based length that is composed of value and unit in px
	Height *string `pulumi:"height"`
	// The spacing between section content and its top, bottom, left, and right edges.
	//
	// There is no padding by default.
	Padding *DashboardSpacing `pulumi:"padding"`
}

// DashboardSectionStyleInput is an input type that accepts DashboardSectionStyleArgs and DashboardSectionStyleOutput values.
// You can construct a concrete instance of `DashboardSectionStyleInput` via:
//
//	DashboardSectionStyleArgs{...}
type DashboardSectionStyleInput interface {
	pulumi.Input

	ToDashboardSectionStyleOutput() DashboardSectionStyleOutput
	ToDashboardSectionStyleOutputWithContext(context.Context) DashboardSectionStyleOutput
}

type DashboardSectionStyleArgs struct {
	// String based length that is composed of value and unit in px
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The spacing between section content and its top, bottom, left, and right edges.
	//
	// There is no padding by default.
	Padding DashboardSpacingPtrInput `pulumi:"padding"`
}

func (DashboardSectionStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionStyle)(nil)).Elem()
}

func (i DashboardSectionStyleArgs) ToDashboardSectionStyleOutput() DashboardSectionStyleOutput {
	return i.ToDashboardSectionStyleOutputWithContext(context.Background())
}

func (i DashboardSectionStyleArgs) ToDashboardSectionStyleOutputWithContext(ctx context.Context) DashboardSectionStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionStyleOutput)
}

func (i DashboardSectionStyleArgs) ToDashboardSectionStylePtrOutput() DashboardSectionStylePtrOutput {
	return i.ToDashboardSectionStylePtrOutputWithContext(context.Background())
}

func (i DashboardSectionStyleArgs) ToDashboardSectionStylePtrOutputWithContext(ctx context.Context) DashboardSectionStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionStyleOutput).ToDashboardSectionStylePtrOutputWithContext(ctx)
}

// DashboardSectionStylePtrInput is an input type that accepts DashboardSectionStyleArgs, DashboardSectionStylePtr and DashboardSectionStylePtrOutput values.
// You can construct a concrete instance of `DashboardSectionStylePtrInput` via:
//
//	        DashboardSectionStyleArgs{...}
//
//	or:
//
//	        nil
type DashboardSectionStylePtrInput interface {
	pulumi.Input

	ToDashboardSectionStylePtrOutput() DashboardSectionStylePtrOutput
	ToDashboardSectionStylePtrOutputWithContext(context.Context) DashboardSectionStylePtrOutput
}

type dashboardSectionStylePtrType DashboardSectionStyleArgs

func DashboardSectionStylePtr(v *DashboardSectionStyleArgs) DashboardSectionStylePtrInput {
	return (*dashboardSectionStylePtrType)(v)
}

func (*dashboardSectionStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSectionStyle)(nil)).Elem()
}

func (i *dashboardSectionStylePtrType) ToDashboardSectionStylePtrOutput() DashboardSectionStylePtrOutput {
	return i.ToDashboardSectionStylePtrOutputWithContext(context.Background())
}

func (i *dashboardSectionStylePtrType) ToDashboardSectionStylePtrOutputWithContext(ctx context.Context) DashboardSectionStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSectionStylePtrOutput)
}

type DashboardSectionStyleOutput struct{ *pulumi.OutputState }

func (DashboardSectionStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSectionStyle)(nil)).Elem()
}

func (o DashboardSectionStyleOutput) ToDashboardSectionStyleOutput() DashboardSectionStyleOutput {
	return o
}

func (o DashboardSectionStyleOutput) ToDashboardSectionStyleOutputWithContext(ctx context.Context) DashboardSectionStyleOutput {
	return o
}

func (o DashboardSectionStyleOutput) ToDashboardSectionStylePtrOutput() DashboardSectionStylePtrOutput {
	return o.ToDashboardSectionStylePtrOutputWithContext(context.Background())
}

func (o DashboardSectionStyleOutput) ToDashboardSectionStylePtrOutputWithContext(ctx context.Context) DashboardSectionStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSectionStyle) *DashboardSectionStyle {
		return &v
	}).(DashboardSectionStylePtrOutput)
}

// String based length that is composed of value and unit in px
func (o DashboardSectionStyleOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSectionStyle) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The spacing between section content and its top, bottom, left, and right edges.
//
// There is no padding by default.
func (o DashboardSectionStyleOutput) Padding() DashboardSpacingPtrOutput {
	return o.ApplyT(func(v DashboardSectionStyle) *DashboardSpacing { return v.Padding }).(DashboardSpacingPtrOutput)
}

type DashboardSectionStylePtrOutput struct{ *pulumi.OutputState }

func (DashboardSectionStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSectionStyle)(nil)).Elem()
}

func (o DashboardSectionStylePtrOutput) ToDashboardSectionStylePtrOutput() DashboardSectionStylePtrOutput {
	return o
}

func (o DashboardSectionStylePtrOutput) ToDashboardSectionStylePtrOutputWithContext(ctx context.Context) DashboardSectionStylePtrOutput {
	return o
}

func (o DashboardSectionStylePtrOutput) Elem() DashboardSectionStyleOutput {
	return o.ApplyT(func(v *DashboardSectionStyle) DashboardSectionStyle {
		if v != nil {
			return *v
		}
		var ret DashboardSectionStyle
		return ret
	}).(DashboardSectionStyleOutput)
}

// String based length that is composed of value and unit in px
func (o DashboardSectionStylePtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSectionStyle) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The spacing between section content and its top, bottom, left, and right edges.
//
// There is no padding by default.
func (o DashboardSectionStylePtrOutput) Padding() DashboardSpacingPtrOutput {
	return o.ApplyT(func(v *DashboardSectionStyle) *DashboardSpacing {
		if v == nil {
			return nil
		}
		return v.Padding
	}).(DashboardSpacingPtrOutput)
}

type DashboardSelectedSheetsFilterScopeConfiguration struct {
	// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
	SheetVisualScopingConfigurations []DashboardSheetVisualScopingConfiguration `pulumi:"sheetVisualScopingConfigurations"`
}

// DashboardSelectedSheetsFilterScopeConfigurationInput is an input type that accepts DashboardSelectedSheetsFilterScopeConfigurationArgs and DashboardSelectedSheetsFilterScopeConfigurationOutput values.
// You can construct a concrete instance of `DashboardSelectedSheetsFilterScopeConfigurationInput` via:
//
//	DashboardSelectedSheetsFilterScopeConfigurationArgs{...}
type DashboardSelectedSheetsFilterScopeConfigurationInput interface {
	pulumi.Input

	ToDashboardSelectedSheetsFilterScopeConfigurationOutput() DashboardSelectedSheetsFilterScopeConfigurationOutput
	ToDashboardSelectedSheetsFilterScopeConfigurationOutputWithContext(context.Context) DashboardSelectedSheetsFilterScopeConfigurationOutput
}

type DashboardSelectedSheetsFilterScopeConfigurationArgs struct {
	// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
	SheetVisualScopingConfigurations DashboardSheetVisualScopingConfigurationArrayInput `pulumi:"sheetVisualScopingConfigurations"`
}

func (DashboardSelectedSheetsFilterScopeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (i DashboardSelectedSheetsFilterScopeConfigurationArgs) ToDashboardSelectedSheetsFilterScopeConfigurationOutput() DashboardSelectedSheetsFilterScopeConfigurationOutput {
	return i.ToDashboardSelectedSheetsFilterScopeConfigurationOutputWithContext(context.Background())
}

func (i DashboardSelectedSheetsFilterScopeConfigurationArgs) ToDashboardSelectedSheetsFilterScopeConfigurationOutputWithContext(ctx context.Context) DashboardSelectedSheetsFilterScopeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedSheetsFilterScopeConfigurationOutput)
}

func (i DashboardSelectedSheetsFilterScopeConfigurationArgs) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutput() DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return i.ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardSelectedSheetsFilterScopeConfigurationArgs) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedSheetsFilterScopeConfigurationOutput).ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx)
}

// DashboardSelectedSheetsFilterScopeConfigurationPtrInput is an input type that accepts DashboardSelectedSheetsFilterScopeConfigurationArgs, DashboardSelectedSheetsFilterScopeConfigurationPtr and DashboardSelectedSheetsFilterScopeConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardSelectedSheetsFilterScopeConfigurationPtrInput` via:
//
//	        DashboardSelectedSheetsFilterScopeConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardSelectedSheetsFilterScopeConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutput() DashboardSelectedSheetsFilterScopeConfigurationPtrOutput
	ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Context) DashboardSelectedSheetsFilterScopeConfigurationPtrOutput
}

type dashboardSelectedSheetsFilterScopeConfigurationPtrType DashboardSelectedSheetsFilterScopeConfigurationArgs

func DashboardSelectedSheetsFilterScopeConfigurationPtr(v *DashboardSelectedSheetsFilterScopeConfigurationArgs) DashboardSelectedSheetsFilterScopeConfigurationPtrInput {
	return (*dashboardSelectedSheetsFilterScopeConfigurationPtrType)(v)
}

func (*dashboardSelectedSheetsFilterScopeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (i *dashboardSelectedSheetsFilterScopeConfigurationPtrType) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutput() DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return i.ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardSelectedSheetsFilterScopeConfigurationPtrType) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSelectedSheetsFilterScopeConfigurationPtrOutput)
}

type DashboardSelectedSheetsFilterScopeConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardSelectedSheetsFilterScopeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (o DashboardSelectedSheetsFilterScopeConfigurationOutput) ToDashboardSelectedSheetsFilterScopeConfigurationOutput() DashboardSelectedSheetsFilterScopeConfigurationOutput {
	return o
}

func (o DashboardSelectedSheetsFilterScopeConfigurationOutput) ToDashboardSelectedSheetsFilterScopeConfigurationOutputWithContext(ctx context.Context) DashboardSelectedSheetsFilterScopeConfigurationOutput {
	return o
}

func (o DashboardSelectedSheetsFilterScopeConfigurationOutput) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutput() DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o.ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardSelectedSheetsFilterScopeConfigurationOutput) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSelectedSheetsFilterScopeConfiguration) *DashboardSelectedSheetsFilterScopeConfiguration {
		return &v
	}).(DashboardSelectedSheetsFilterScopeConfigurationPtrOutput)
}

// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
func (o DashboardSelectedSheetsFilterScopeConfigurationOutput) SheetVisualScopingConfigurations() DashboardSheetVisualScopingConfigurationArrayOutput {
	return o.ApplyT(func(v DashboardSelectedSheetsFilterScopeConfiguration) []DashboardSheetVisualScopingConfiguration {
		return v.SheetVisualScopingConfigurations
	}).(DashboardSheetVisualScopingConfigurationArrayOutput)
}

type DashboardSelectedSheetsFilterScopeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardSelectedSheetsFilterScopeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (o DashboardSelectedSheetsFilterScopeConfigurationPtrOutput) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutput() DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o
}

func (o DashboardSelectedSheetsFilterScopeConfigurationPtrOutput) ToDashboardSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) DashboardSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o
}

func (o DashboardSelectedSheetsFilterScopeConfigurationPtrOutput) Elem() DashboardSelectedSheetsFilterScopeConfigurationOutput {
	return o.ApplyT(func(v *DashboardSelectedSheetsFilterScopeConfiguration) DashboardSelectedSheetsFilterScopeConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardSelectedSheetsFilterScopeConfiguration
		return ret
	}).(DashboardSelectedSheetsFilterScopeConfigurationOutput)
}

// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
func (o DashboardSelectedSheetsFilterScopeConfigurationPtrOutput) SheetVisualScopingConfigurations() DashboardSheetVisualScopingConfigurationArrayOutput {
	return o.ApplyT(func(v *DashboardSelectedSheetsFilterScopeConfiguration) []DashboardSheetVisualScopingConfiguration {
		if v == nil {
			return nil
		}
		return v.SheetVisualScopingConfigurations
	}).(DashboardSheetVisualScopingConfigurationArrayOutput)
}

type DashboardSeriesItem struct {
	// The data field series item configuration of a line chart.
	DataFieldSeriesItem *DashboardDataFieldSeriesItem `pulumi:"dataFieldSeriesItem"`
	// The field series item configuration of a line chart.
	FieldSeriesItem *DashboardFieldSeriesItem `pulumi:"fieldSeriesItem"`
}

// DashboardSeriesItemInput is an input type that accepts DashboardSeriesItemArgs and DashboardSeriesItemOutput values.
// You can construct a concrete instance of `DashboardSeriesItemInput` via:
//
//	DashboardSeriesItemArgs{...}
type DashboardSeriesItemInput interface {
	pulumi.Input

	ToDashboardSeriesItemOutput() DashboardSeriesItemOutput
	ToDashboardSeriesItemOutputWithContext(context.Context) DashboardSeriesItemOutput
}

type DashboardSeriesItemArgs struct {
	// The data field series item configuration of a line chart.
	DataFieldSeriesItem DashboardDataFieldSeriesItemPtrInput `pulumi:"dataFieldSeriesItem"`
	// The field series item configuration of a line chart.
	FieldSeriesItem DashboardFieldSeriesItemPtrInput `pulumi:"fieldSeriesItem"`
}

func (DashboardSeriesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSeriesItem)(nil)).Elem()
}

func (i DashboardSeriesItemArgs) ToDashboardSeriesItemOutput() DashboardSeriesItemOutput {
	return i.ToDashboardSeriesItemOutputWithContext(context.Background())
}

func (i DashboardSeriesItemArgs) ToDashboardSeriesItemOutputWithContext(ctx context.Context) DashboardSeriesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSeriesItemOutput)
}

// DashboardSeriesItemArrayInput is an input type that accepts DashboardSeriesItemArray and DashboardSeriesItemArrayOutput values.
// You can construct a concrete instance of `DashboardSeriesItemArrayInput` via:
//
//	DashboardSeriesItemArray{ DashboardSeriesItemArgs{...} }
type DashboardSeriesItemArrayInput interface {
	pulumi.Input

	ToDashboardSeriesItemArrayOutput() DashboardSeriesItemArrayOutput
	ToDashboardSeriesItemArrayOutputWithContext(context.Context) DashboardSeriesItemArrayOutput
}

type DashboardSeriesItemArray []DashboardSeriesItemInput

func (DashboardSeriesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSeriesItem)(nil)).Elem()
}

func (i DashboardSeriesItemArray) ToDashboardSeriesItemArrayOutput() DashboardSeriesItemArrayOutput {
	return i.ToDashboardSeriesItemArrayOutputWithContext(context.Background())
}

func (i DashboardSeriesItemArray) ToDashboardSeriesItemArrayOutputWithContext(ctx context.Context) DashboardSeriesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSeriesItemArrayOutput)
}

type DashboardSeriesItemOutput struct{ *pulumi.OutputState }

func (DashboardSeriesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSeriesItem)(nil)).Elem()
}

func (o DashboardSeriesItemOutput) ToDashboardSeriesItemOutput() DashboardSeriesItemOutput {
	return o
}

func (o DashboardSeriesItemOutput) ToDashboardSeriesItemOutputWithContext(ctx context.Context) DashboardSeriesItemOutput {
	return o
}

// The data field series item configuration of a line chart.
func (o DashboardSeriesItemOutput) DataFieldSeriesItem() DashboardDataFieldSeriesItemPtrOutput {
	return o.ApplyT(func(v DashboardSeriesItem) *DashboardDataFieldSeriesItem { return v.DataFieldSeriesItem }).(DashboardDataFieldSeriesItemPtrOutput)
}

// The field series item configuration of a line chart.
func (o DashboardSeriesItemOutput) FieldSeriesItem() DashboardFieldSeriesItemPtrOutput {
	return o.ApplyT(func(v DashboardSeriesItem) *DashboardFieldSeriesItem { return v.FieldSeriesItem }).(DashboardFieldSeriesItemPtrOutput)
}

type DashboardSeriesItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardSeriesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSeriesItem)(nil)).Elem()
}

func (o DashboardSeriesItemArrayOutput) ToDashboardSeriesItemArrayOutput() DashboardSeriesItemArrayOutput {
	return o
}

func (o DashboardSeriesItemArrayOutput) ToDashboardSeriesItemArrayOutputWithContext(ctx context.Context) DashboardSeriesItemArrayOutput {
	return o
}

func (o DashboardSeriesItemArrayOutput) Index(i pulumi.IntInput) DashboardSeriesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSeriesItem {
		return vs[0].([]DashboardSeriesItem)[vs[1].(int)]
	}).(DashboardSeriesItemOutput)
}

type DashboardSetParameterValueConfiguration struct {
	// The destination parameter name of the `SetParameterValueConfiguration` .
	DestinationParameterName string                                          `pulumi:"destinationParameterName"`
	Value                    DashboardDestinationParameterValueConfiguration `pulumi:"value"`
}

// DashboardSetParameterValueConfigurationInput is an input type that accepts DashboardSetParameterValueConfigurationArgs and DashboardSetParameterValueConfigurationOutput values.
// You can construct a concrete instance of `DashboardSetParameterValueConfigurationInput` via:
//
//	DashboardSetParameterValueConfigurationArgs{...}
type DashboardSetParameterValueConfigurationInput interface {
	pulumi.Input

	ToDashboardSetParameterValueConfigurationOutput() DashboardSetParameterValueConfigurationOutput
	ToDashboardSetParameterValueConfigurationOutputWithContext(context.Context) DashboardSetParameterValueConfigurationOutput
}

type DashboardSetParameterValueConfigurationArgs struct {
	// The destination parameter name of the `SetParameterValueConfiguration` .
	DestinationParameterName pulumi.StringInput                                   `pulumi:"destinationParameterName"`
	Value                    DashboardDestinationParameterValueConfigurationInput `pulumi:"value"`
}

func (DashboardSetParameterValueConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSetParameterValueConfiguration)(nil)).Elem()
}

func (i DashboardSetParameterValueConfigurationArgs) ToDashboardSetParameterValueConfigurationOutput() DashboardSetParameterValueConfigurationOutput {
	return i.ToDashboardSetParameterValueConfigurationOutputWithContext(context.Background())
}

func (i DashboardSetParameterValueConfigurationArgs) ToDashboardSetParameterValueConfigurationOutputWithContext(ctx context.Context) DashboardSetParameterValueConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSetParameterValueConfigurationOutput)
}

// DashboardSetParameterValueConfigurationArrayInput is an input type that accepts DashboardSetParameterValueConfigurationArray and DashboardSetParameterValueConfigurationArrayOutput values.
// You can construct a concrete instance of `DashboardSetParameterValueConfigurationArrayInput` via:
//
//	DashboardSetParameterValueConfigurationArray{ DashboardSetParameterValueConfigurationArgs{...} }
type DashboardSetParameterValueConfigurationArrayInput interface {
	pulumi.Input

	ToDashboardSetParameterValueConfigurationArrayOutput() DashboardSetParameterValueConfigurationArrayOutput
	ToDashboardSetParameterValueConfigurationArrayOutputWithContext(context.Context) DashboardSetParameterValueConfigurationArrayOutput
}

type DashboardSetParameterValueConfigurationArray []DashboardSetParameterValueConfigurationInput

func (DashboardSetParameterValueConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSetParameterValueConfiguration)(nil)).Elem()
}

func (i DashboardSetParameterValueConfigurationArray) ToDashboardSetParameterValueConfigurationArrayOutput() DashboardSetParameterValueConfigurationArrayOutput {
	return i.ToDashboardSetParameterValueConfigurationArrayOutputWithContext(context.Background())
}

func (i DashboardSetParameterValueConfigurationArray) ToDashboardSetParameterValueConfigurationArrayOutputWithContext(ctx context.Context) DashboardSetParameterValueConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSetParameterValueConfigurationArrayOutput)
}

type DashboardSetParameterValueConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardSetParameterValueConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSetParameterValueConfiguration)(nil)).Elem()
}

func (o DashboardSetParameterValueConfigurationOutput) ToDashboardSetParameterValueConfigurationOutput() DashboardSetParameterValueConfigurationOutput {
	return o
}

func (o DashboardSetParameterValueConfigurationOutput) ToDashboardSetParameterValueConfigurationOutputWithContext(ctx context.Context) DashboardSetParameterValueConfigurationOutput {
	return o
}

// The destination parameter name of the `SetParameterValueConfiguration` .
func (o DashboardSetParameterValueConfigurationOutput) DestinationParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSetParameterValueConfiguration) string { return v.DestinationParameterName }).(pulumi.StringOutput)
}

func (o DashboardSetParameterValueConfigurationOutput) Value() DashboardDestinationParameterValueConfigurationOutput {
	return o.ApplyT(func(v DashboardSetParameterValueConfiguration) DashboardDestinationParameterValueConfiguration {
		return v.Value
	}).(DashboardDestinationParameterValueConfigurationOutput)
}

type DashboardSetParameterValueConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DashboardSetParameterValueConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSetParameterValueConfiguration)(nil)).Elem()
}

func (o DashboardSetParameterValueConfigurationArrayOutput) ToDashboardSetParameterValueConfigurationArrayOutput() DashboardSetParameterValueConfigurationArrayOutput {
	return o
}

func (o DashboardSetParameterValueConfigurationArrayOutput) ToDashboardSetParameterValueConfigurationArrayOutputWithContext(ctx context.Context) DashboardSetParameterValueConfigurationArrayOutput {
	return o
}

func (o DashboardSetParameterValueConfigurationArrayOutput) Index(i pulumi.IntInput) DashboardSetParameterValueConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSetParameterValueConfiguration {
		return vs[0].([]DashboardSetParameterValueConfiguration)[vs[1].(int)]
	}).(DashboardSetParameterValueConfigurationOutput)
}

type DashboardShapeConditionalFormat struct {
	// The conditional formatting for the shape background color of a filled map visual.
	BackgroundColor DashboardConditionalFormattingColor `pulumi:"backgroundColor"`
}

// DashboardShapeConditionalFormatInput is an input type that accepts DashboardShapeConditionalFormatArgs and DashboardShapeConditionalFormatOutput values.
// You can construct a concrete instance of `DashboardShapeConditionalFormatInput` via:
//
//	DashboardShapeConditionalFormatArgs{...}
type DashboardShapeConditionalFormatInput interface {
	pulumi.Input

	ToDashboardShapeConditionalFormatOutput() DashboardShapeConditionalFormatOutput
	ToDashboardShapeConditionalFormatOutputWithContext(context.Context) DashboardShapeConditionalFormatOutput
}

type DashboardShapeConditionalFormatArgs struct {
	// The conditional formatting for the shape background color of a filled map visual.
	BackgroundColor DashboardConditionalFormattingColorInput `pulumi:"backgroundColor"`
}

func (DashboardShapeConditionalFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardShapeConditionalFormat)(nil)).Elem()
}

func (i DashboardShapeConditionalFormatArgs) ToDashboardShapeConditionalFormatOutput() DashboardShapeConditionalFormatOutput {
	return i.ToDashboardShapeConditionalFormatOutputWithContext(context.Background())
}

func (i DashboardShapeConditionalFormatArgs) ToDashboardShapeConditionalFormatOutputWithContext(ctx context.Context) DashboardShapeConditionalFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardShapeConditionalFormatOutput)
}

func (i DashboardShapeConditionalFormatArgs) ToDashboardShapeConditionalFormatPtrOutput() DashboardShapeConditionalFormatPtrOutput {
	return i.ToDashboardShapeConditionalFormatPtrOutputWithContext(context.Background())
}

func (i DashboardShapeConditionalFormatArgs) ToDashboardShapeConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardShapeConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardShapeConditionalFormatOutput).ToDashboardShapeConditionalFormatPtrOutputWithContext(ctx)
}

// DashboardShapeConditionalFormatPtrInput is an input type that accepts DashboardShapeConditionalFormatArgs, DashboardShapeConditionalFormatPtr and DashboardShapeConditionalFormatPtrOutput values.
// You can construct a concrete instance of `DashboardShapeConditionalFormatPtrInput` via:
//
//	        DashboardShapeConditionalFormatArgs{...}
//
//	or:
//
//	        nil
type DashboardShapeConditionalFormatPtrInput interface {
	pulumi.Input

	ToDashboardShapeConditionalFormatPtrOutput() DashboardShapeConditionalFormatPtrOutput
	ToDashboardShapeConditionalFormatPtrOutputWithContext(context.Context) DashboardShapeConditionalFormatPtrOutput
}

type dashboardShapeConditionalFormatPtrType DashboardShapeConditionalFormatArgs

func DashboardShapeConditionalFormatPtr(v *DashboardShapeConditionalFormatArgs) DashboardShapeConditionalFormatPtrInput {
	return (*dashboardShapeConditionalFormatPtrType)(v)
}

func (*dashboardShapeConditionalFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardShapeConditionalFormat)(nil)).Elem()
}

func (i *dashboardShapeConditionalFormatPtrType) ToDashboardShapeConditionalFormatPtrOutput() DashboardShapeConditionalFormatPtrOutput {
	return i.ToDashboardShapeConditionalFormatPtrOutputWithContext(context.Background())
}

func (i *dashboardShapeConditionalFormatPtrType) ToDashboardShapeConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardShapeConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardShapeConditionalFormatPtrOutput)
}

type DashboardShapeConditionalFormatOutput struct{ *pulumi.OutputState }

func (DashboardShapeConditionalFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardShapeConditionalFormat)(nil)).Elem()
}

func (o DashboardShapeConditionalFormatOutput) ToDashboardShapeConditionalFormatOutput() DashboardShapeConditionalFormatOutput {
	return o
}

func (o DashboardShapeConditionalFormatOutput) ToDashboardShapeConditionalFormatOutputWithContext(ctx context.Context) DashboardShapeConditionalFormatOutput {
	return o
}

func (o DashboardShapeConditionalFormatOutput) ToDashboardShapeConditionalFormatPtrOutput() DashboardShapeConditionalFormatPtrOutput {
	return o.ToDashboardShapeConditionalFormatPtrOutputWithContext(context.Background())
}

func (o DashboardShapeConditionalFormatOutput) ToDashboardShapeConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardShapeConditionalFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardShapeConditionalFormat) *DashboardShapeConditionalFormat {
		return &v
	}).(DashboardShapeConditionalFormatPtrOutput)
}

// The conditional formatting for the shape background color of a filled map visual.
func (o DashboardShapeConditionalFormatOutput) BackgroundColor() DashboardConditionalFormattingColorOutput {
	return o.ApplyT(func(v DashboardShapeConditionalFormat) DashboardConditionalFormattingColor { return v.BackgroundColor }).(DashboardConditionalFormattingColorOutput)
}

type DashboardShapeConditionalFormatPtrOutput struct{ *pulumi.OutputState }

func (DashboardShapeConditionalFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardShapeConditionalFormat)(nil)).Elem()
}

func (o DashboardShapeConditionalFormatPtrOutput) ToDashboardShapeConditionalFormatPtrOutput() DashboardShapeConditionalFormatPtrOutput {
	return o
}

func (o DashboardShapeConditionalFormatPtrOutput) ToDashboardShapeConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardShapeConditionalFormatPtrOutput {
	return o
}

func (o DashboardShapeConditionalFormatPtrOutput) Elem() DashboardShapeConditionalFormatOutput {
	return o.ApplyT(func(v *DashboardShapeConditionalFormat) DashboardShapeConditionalFormat {
		if v != nil {
			return *v
		}
		var ret DashboardShapeConditionalFormat
		return ret
	}).(DashboardShapeConditionalFormatOutput)
}

// The conditional formatting for the shape background color of a filled map visual.
func (o DashboardShapeConditionalFormatPtrOutput) BackgroundColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *DashboardShapeConditionalFormat) *DashboardConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return &v.BackgroundColor
	}).(DashboardConditionalFormattingColorPtrOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//
//	are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
//	contains at least one sheet. Each sheet contains at least one visualization widget, for
//	example a chart, pivot table, or narrative insight. Sheets can be associated with other
//	components, such as controls, filters, and so on.</p>
type DashboardSheet struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
	//             console.</p>
	Name *string `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId *string `pulumi:"sheetId"`
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//
//	are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
//	contains at least one sheet. Each sheet contains at least one visualization widget, for
//	example a chart, pivot table, or narrative insight. Sheets can be associated with other
//	components, such as controls, filters, and so on.</p>
type DashboardSheetOutput struct{ *pulumi.OutputState }

func (DashboardSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheet)(nil)).Elem()
}

func (o DashboardSheetOutput) ToDashboardSheetOutput() DashboardSheetOutput {
	return o
}

func (o DashboardSheetOutput) ToDashboardSheetOutputWithContext(ctx context.Context) DashboardSheetOutput {
	return o
}

// <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
//
//	console.</p>
func (o DashboardSheetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The unique identifier associated with a sheet.</p>
func (o DashboardSheetOutput) SheetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheet) *string { return v.SheetId }).(pulumi.StringPtrOutput)
}

type DashboardSheetArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheet)(nil)).Elem()
}

func (o DashboardSheetArrayOutput) ToDashboardSheetArrayOutput() DashboardSheetArrayOutput {
	return o
}

func (o DashboardSheetArrayOutput) ToDashboardSheetArrayOutputWithContext(ctx context.Context) DashboardSheetArrayOutput {
	return o
}

func (o DashboardSheetArrayOutput) Index(i pulumi.IntInput) DashboardSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheet {
		return vs[0].([]DashboardSheet)[vs[1].(int)]
	}).(DashboardSheetOutput)
}

type DashboardSheetControlInfoIconLabelOptions struct {
	// The text content of info icon.
	InfoIconText *string `pulumi:"infoIconText"`
	// The visibility configuration of info icon label options.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardSheetControlInfoIconLabelOptionsInput is an input type that accepts DashboardSheetControlInfoIconLabelOptionsArgs and DashboardSheetControlInfoIconLabelOptionsOutput values.
// You can construct a concrete instance of `DashboardSheetControlInfoIconLabelOptionsInput` via:
//
//	DashboardSheetControlInfoIconLabelOptionsArgs{...}
type DashboardSheetControlInfoIconLabelOptionsInput interface {
	pulumi.Input

	ToDashboardSheetControlInfoIconLabelOptionsOutput() DashboardSheetControlInfoIconLabelOptionsOutput
	ToDashboardSheetControlInfoIconLabelOptionsOutputWithContext(context.Context) DashboardSheetControlInfoIconLabelOptionsOutput
}

type DashboardSheetControlInfoIconLabelOptionsArgs struct {
	// The text content of info icon.
	InfoIconText pulumi.StringPtrInput `pulumi:"infoIconText"`
	// The visibility configuration of info icon label options.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardSheetControlInfoIconLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (i DashboardSheetControlInfoIconLabelOptionsArgs) ToDashboardSheetControlInfoIconLabelOptionsOutput() DashboardSheetControlInfoIconLabelOptionsOutput {
	return i.ToDashboardSheetControlInfoIconLabelOptionsOutputWithContext(context.Background())
}

func (i DashboardSheetControlInfoIconLabelOptionsArgs) ToDashboardSheetControlInfoIconLabelOptionsOutputWithContext(ctx context.Context) DashboardSheetControlInfoIconLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlInfoIconLabelOptionsOutput)
}

func (i DashboardSheetControlInfoIconLabelOptionsArgs) ToDashboardSheetControlInfoIconLabelOptionsPtrOutput() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return i.ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardSheetControlInfoIconLabelOptionsArgs) ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlInfoIconLabelOptionsOutput).ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx)
}

// DashboardSheetControlInfoIconLabelOptionsPtrInput is an input type that accepts DashboardSheetControlInfoIconLabelOptionsArgs, DashboardSheetControlInfoIconLabelOptionsPtr and DashboardSheetControlInfoIconLabelOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardSheetControlInfoIconLabelOptionsPtrInput` via:
//
//	        DashboardSheetControlInfoIconLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardSheetControlInfoIconLabelOptionsPtrInput interface {
	pulumi.Input

	ToDashboardSheetControlInfoIconLabelOptionsPtrOutput() DashboardSheetControlInfoIconLabelOptionsPtrOutput
	ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Context) DashboardSheetControlInfoIconLabelOptionsPtrOutput
}

type dashboardSheetControlInfoIconLabelOptionsPtrType DashboardSheetControlInfoIconLabelOptionsArgs

func DashboardSheetControlInfoIconLabelOptionsPtr(v *DashboardSheetControlInfoIconLabelOptionsArgs) DashboardSheetControlInfoIconLabelOptionsPtrInput {
	return (*dashboardSheetControlInfoIconLabelOptionsPtrType)(v)
}

func (*dashboardSheetControlInfoIconLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (i *dashboardSheetControlInfoIconLabelOptionsPtrType) ToDashboardSheetControlInfoIconLabelOptionsPtrOutput() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return i.ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardSheetControlInfoIconLabelOptionsPtrType) ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

type DashboardSheetControlInfoIconLabelOptionsOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlInfoIconLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (o DashboardSheetControlInfoIconLabelOptionsOutput) ToDashboardSheetControlInfoIconLabelOptionsOutput() DashboardSheetControlInfoIconLabelOptionsOutput {
	return o
}

func (o DashboardSheetControlInfoIconLabelOptionsOutput) ToDashboardSheetControlInfoIconLabelOptionsOutputWithContext(ctx context.Context) DashboardSheetControlInfoIconLabelOptionsOutput {
	return o
}

func (o DashboardSheetControlInfoIconLabelOptionsOutput) ToDashboardSheetControlInfoIconLabelOptionsPtrOutput() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardSheetControlInfoIconLabelOptionsOutput) ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetControlInfoIconLabelOptions) *DashboardSheetControlInfoIconLabelOptions {
		return &v
	}).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

// The text content of info icon.
func (o DashboardSheetControlInfoIconLabelOptionsOutput) InfoIconText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheetControlInfoIconLabelOptions) *string { return v.InfoIconText }).(pulumi.StringPtrOutput)
}

// The visibility configuration of info icon label options.
func (o DashboardSheetControlInfoIconLabelOptionsOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardSheetControlInfoIconLabelOptions) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardSheetControlInfoIconLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlInfoIconLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (o DashboardSheetControlInfoIconLabelOptionsPtrOutput) ToDashboardSheetControlInfoIconLabelOptionsPtrOutput() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o
}

func (o DashboardSheetControlInfoIconLabelOptionsPtrOutput) ToDashboardSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o
}

func (o DashboardSheetControlInfoIconLabelOptionsPtrOutput) Elem() DashboardSheetControlInfoIconLabelOptionsOutput {
	return o.ApplyT(func(v *DashboardSheetControlInfoIconLabelOptions) DashboardSheetControlInfoIconLabelOptions {
		if v != nil {
			return *v
		}
		var ret DashboardSheetControlInfoIconLabelOptions
		return ret
	}).(DashboardSheetControlInfoIconLabelOptionsOutput)
}

// The text content of info icon.
func (o DashboardSheetControlInfoIconLabelOptionsPtrOutput) InfoIconText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSheetControlInfoIconLabelOptions) *string {
		if v == nil {
			return nil
		}
		return v.InfoIconText
	}).(pulumi.StringPtrOutput)
}

// The visibility configuration of info icon label options.
func (o DashboardSheetControlInfoIconLabelOptionsPtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardSheetControlInfoIconLabelOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardSheetControlLayout struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	Configuration DashboardSheetControlLayoutConfiguration `pulumi:"configuration"`
}

// DashboardSheetControlLayoutInput is an input type that accepts DashboardSheetControlLayoutArgs and DashboardSheetControlLayoutOutput values.
// You can construct a concrete instance of `DashboardSheetControlLayoutInput` via:
//
//	DashboardSheetControlLayoutArgs{...}
type DashboardSheetControlLayoutInput interface {
	pulumi.Input

	ToDashboardSheetControlLayoutOutput() DashboardSheetControlLayoutOutput
	ToDashboardSheetControlLayoutOutputWithContext(context.Context) DashboardSheetControlLayoutOutput
}

type DashboardSheetControlLayoutArgs struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	Configuration DashboardSheetControlLayoutConfigurationInput `pulumi:"configuration"`
}

func (DashboardSheetControlLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlLayout)(nil)).Elem()
}

func (i DashboardSheetControlLayoutArgs) ToDashboardSheetControlLayoutOutput() DashboardSheetControlLayoutOutput {
	return i.ToDashboardSheetControlLayoutOutputWithContext(context.Background())
}

func (i DashboardSheetControlLayoutArgs) ToDashboardSheetControlLayoutOutputWithContext(ctx context.Context) DashboardSheetControlLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlLayoutOutput)
}

// DashboardSheetControlLayoutArrayInput is an input type that accepts DashboardSheetControlLayoutArray and DashboardSheetControlLayoutArrayOutput values.
// You can construct a concrete instance of `DashboardSheetControlLayoutArrayInput` via:
//
//	DashboardSheetControlLayoutArray{ DashboardSheetControlLayoutArgs{...} }
type DashboardSheetControlLayoutArrayInput interface {
	pulumi.Input

	ToDashboardSheetControlLayoutArrayOutput() DashboardSheetControlLayoutArrayOutput
	ToDashboardSheetControlLayoutArrayOutputWithContext(context.Context) DashboardSheetControlLayoutArrayOutput
}

type DashboardSheetControlLayoutArray []DashboardSheetControlLayoutInput

func (DashboardSheetControlLayoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetControlLayout)(nil)).Elem()
}

func (i DashboardSheetControlLayoutArray) ToDashboardSheetControlLayoutArrayOutput() DashboardSheetControlLayoutArrayOutput {
	return i.ToDashboardSheetControlLayoutArrayOutputWithContext(context.Background())
}

func (i DashboardSheetControlLayoutArray) ToDashboardSheetControlLayoutArrayOutputWithContext(ctx context.Context) DashboardSheetControlLayoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlLayoutArrayOutput)
}

type DashboardSheetControlLayoutOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlLayout)(nil)).Elem()
}

func (o DashboardSheetControlLayoutOutput) ToDashboardSheetControlLayoutOutput() DashboardSheetControlLayoutOutput {
	return o
}

func (o DashboardSheetControlLayoutOutput) ToDashboardSheetControlLayoutOutputWithContext(ctx context.Context) DashboardSheetControlLayoutOutput {
	return o
}

// The configuration that determines the elements and canvas size options of sheet control.
func (o DashboardSheetControlLayoutOutput) Configuration() DashboardSheetControlLayoutConfigurationOutput {
	return o.ApplyT(func(v DashboardSheetControlLayout) DashboardSheetControlLayoutConfiguration { return v.Configuration }).(DashboardSheetControlLayoutConfigurationOutput)
}

type DashboardSheetControlLayoutArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlLayoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetControlLayout)(nil)).Elem()
}

func (o DashboardSheetControlLayoutArrayOutput) ToDashboardSheetControlLayoutArrayOutput() DashboardSheetControlLayoutArrayOutput {
	return o
}

func (o DashboardSheetControlLayoutArrayOutput) ToDashboardSheetControlLayoutArrayOutputWithContext(ctx context.Context) DashboardSheetControlLayoutArrayOutput {
	return o
}

func (o DashboardSheetControlLayoutArrayOutput) Index(i pulumi.IntInput) DashboardSheetControlLayoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheetControlLayout {
		return vs[0].([]DashboardSheetControlLayout)[vs[1].(int)]
	}).(DashboardSheetControlLayoutOutput)
}

type DashboardSheetControlLayoutConfiguration struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	GridLayout *DashboardGridLayoutConfiguration `pulumi:"gridLayout"`
}

// DashboardSheetControlLayoutConfigurationInput is an input type that accepts DashboardSheetControlLayoutConfigurationArgs and DashboardSheetControlLayoutConfigurationOutput values.
// You can construct a concrete instance of `DashboardSheetControlLayoutConfigurationInput` via:
//
//	DashboardSheetControlLayoutConfigurationArgs{...}
type DashboardSheetControlLayoutConfigurationInput interface {
	pulumi.Input

	ToDashboardSheetControlLayoutConfigurationOutput() DashboardSheetControlLayoutConfigurationOutput
	ToDashboardSheetControlLayoutConfigurationOutputWithContext(context.Context) DashboardSheetControlLayoutConfigurationOutput
}

type DashboardSheetControlLayoutConfigurationArgs struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	GridLayout DashboardGridLayoutConfigurationPtrInput `pulumi:"gridLayout"`
}

func (DashboardSheetControlLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlLayoutConfiguration)(nil)).Elem()
}

func (i DashboardSheetControlLayoutConfigurationArgs) ToDashboardSheetControlLayoutConfigurationOutput() DashboardSheetControlLayoutConfigurationOutput {
	return i.ToDashboardSheetControlLayoutConfigurationOutputWithContext(context.Background())
}

func (i DashboardSheetControlLayoutConfigurationArgs) ToDashboardSheetControlLayoutConfigurationOutputWithContext(ctx context.Context) DashboardSheetControlLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlLayoutConfigurationOutput)
}

type DashboardSheetControlLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlLayoutConfiguration)(nil)).Elem()
}

func (o DashboardSheetControlLayoutConfigurationOutput) ToDashboardSheetControlLayoutConfigurationOutput() DashboardSheetControlLayoutConfigurationOutput {
	return o
}

func (o DashboardSheetControlLayoutConfigurationOutput) ToDashboardSheetControlLayoutConfigurationOutputWithContext(ctx context.Context) DashboardSheetControlLayoutConfigurationOutput {
	return o
}

// The configuration that determines the elements and canvas size options of sheet control.
func (o DashboardSheetControlLayoutConfigurationOutput) GridLayout() DashboardGridLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardSheetControlLayoutConfiguration) *DashboardGridLayoutConfiguration {
		return v.GridLayout
	}).(DashboardGridLayoutConfigurationPtrOutput)
}

// <p>Sheet controls option.</p>
type DashboardSheetControlsOption struct {
	// Visibility state.
	VisibilityState *DashboardUiState `pulumi:"visibilityState"`
}

// DashboardSheetControlsOptionInput is an input type that accepts DashboardSheetControlsOptionArgs and DashboardSheetControlsOptionOutput values.
// You can construct a concrete instance of `DashboardSheetControlsOptionInput` via:
//
//	DashboardSheetControlsOptionArgs{...}
type DashboardSheetControlsOptionInput interface {
	pulumi.Input

	ToDashboardSheetControlsOptionOutput() DashboardSheetControlsOptionOutput
	ToDashboardSheetControlsOptionOutputWithContext(context.Context) DashboardSheetControlsOptionOutput
}

// <p>Sheet controls option.</p>
type DashboardSheetControlsOptionArgs struct {
	// Visibility state.
	VisibilityState DashboardUiStatePtrInput `pulumi:"visibilityState"`
}

func (DashboardSheetControlsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlsOption)(nil)).Elem()
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionOutput() DashboardSheetControlsOptionOutput {
	return i.ToDashboardSheetControlsOptionOutputWithContext(context.Background())
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionOutputWithContext(ctx context.Context) DashboardSheetControlsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlsOptionOutput)
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return i.ToDashboardSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (i DashboardSheetControlsOptionArgs) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlsOptionOutput).ToDashboardSheetControlsOptionPtrOutputWithContext(ctx)
}

// DashboardSheetControlsOptionPtrInput is an input type that accepts DashboardSheetControlsOptionArgs, DashboardSheetControlsOptionPtr and DashboardSheetControlsOptionPtrOutput values.
// You can construct a concrete instance of `DashboardSheetControlsOptionPtrInput` via:
//
//	        DashboardSheetControlsOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardSheetControlsOptionPtrInput interface {
	pulumi.Input

	ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput
	ToDashboardSheetControlsOptionPtrOutputWithContext(context.Context) DashboardSheetControlsOptionPtrOutput
}

type dashboardSheetControlsOptionPtrType DashboardSheetControlsOptionArgs

func DashboardSheetControlsOptionPtr(v *DashboardSheetControlsOptionArgs) DashboardSheetControlsOptionPtrInput {
	return (*dashboardSheetControlsOptionPtrType)(v)
}

func (*dashboardSheetControlsOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetControlsOption)(nil)).Elem()
}

func (i *dashboardSheetControlsOptionPtrType) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return i.ToDashboardSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardSheetControlsOptionPtrType) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetControlsOptionPtrOutput)
}

// <p>Sheet controls option.</p>
type DashboardSheetControlsOptionOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetControlsOption)(nil)).Elem()
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionOutput() DashboardSheetControlsOptionOutput {
	return o
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionOutputWithContext(ctx context.Context) DashboardSheetControlsOptionOutput {
	return o
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return o.ToDashboardSheetControlsOptionPtrOutputWithContext(context.Background())
}

func (o DashboardSheetControlsOptionOutput) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetControlsOption) *DashboardSheetControlsOption {
		return &v
	}).(DashboardSheetControlsOptionPtrOutput)
}

// Visibility state.
func (o DashboardSheetControlsOptionOutput) VisibilityState() DashboardUiStatePtrOutput {
	return o.ApplyT(func(v DashboardSheetControlsOption) *DashboardUiState { return v.VisibilityState }).(DashboardUiStatePtrOutput)
}

type DashboardSheetControlsOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetControlsOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetControlsOption)(nil)).Elem()
}

func (o DashboardSheetControlsOptionPtrOutput) ToDashboardSheetControlsOptionPtrOutput() DashboardSheetControlsOptionPtrOutput {
	return o
}

func (o DashboardSheetControlsOptionPtrOutput) ToDashboardSheetControlsOptionPtrOutputWithContext(ctx context.Context) DashboardSheetControlsOptionPtrOutput {
	return o
}

func (o DashboardSheetControlsOptionPtrOutput) Elem() DashboardSheetControlsOptionOutput {
	return o.ApplyT(func(v *DashboardSheetControlsOption) DashboardSheetControlsOption {
		if v != nil {
			return *v
		}
		var ret DashboardSheetControlsOption
		return ret
	}).(DashboardSheetControlsOptionOutput)
}

// Visibility state.
func (o DashboardSheetControlsOptionPtrOutput) VisibilityState() DashboardUiStatePtrOutput {
	return o.ApplyT(func(v *DashboardSheetControlsOption) *DashboardUiState {
		if v == nil {
			return nil
		}
		return v.VisibilityState
	}).(DashboardUiStatePtrOutput)
}

type DashboardSheetDefinition struct {
	// The layout content type of the sheet. Choose one of the following options:
	//
	// - `PAGINATED` : Creates a sheet for a paginated report.
	// - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
	ContentType *DashboardSheetContentType `pulumi:"contentType"`
	// A description of the sheet.
	Description *string `pulumi:"description"`
	// The list of filter controls that are on a sheet.
	//
	// For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
	FilterControls []DashboardFilterControl `pulumi:"filterControls"`
	// A list of images on a sheet.
	Images []DashboardSheetImage `pulumi:"images"`
	// Layouts define how the components of a sheet are arranged.
	//
	// For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
	Layouts []DashboardLayout `pulumi:"layouts"`
	// The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
	Name *string `pulumi:"name"`
	// The list of parameter controls that are on a sheet.
	//
	// For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
	ParameterControls []DashboardParameterControl `pulumi:"parameterControls"`
	// The control layouts of the sheet.
	SheetControlLayouts []DashboardSheetControlLayout `pulumi:"sheetControlLayouts"`
	// The unique identifier of a sheet.
	SheetId string `pulumi:"sheetId"`
	// The text boxes that are on a sheet.
	TextBoxes []DashboardSheetTextBox `pulumi:"textBoxes"`
	// The title of the sheet.
	Title *string `pulumi:"title"`
	// A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
	Visuals []DashboardVisual `pulumi:"visuals"`
}

// DashboardSheetDefinitionInput is an input type that accepts DashboardSheetDefinitionArgs and DashboardSheetDefinitionOutput values.
// You can construct a concrete instance of `DashboardSheetDefinitionInput` via:
//
//	DashboardSheetDefinitionArgs{...}
type DashboardSheetDefinitionInput interface {
	pulumi.Input

	ToDashboardSheetDefinitionOutput() DashboardSheetDefinitionOutput
	ToDashboardSheetDefinitionOutputWithContext(context.Context) DashboardSheetDefinitionOutput
}

type DashboardSheetDefinitionArgs struct {
	// The layout content type of the sheet. Choose one of the following options:
	//
	// - `PAGINATED` : Creates a sheet for a paginated report.
	// - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
	ContentType DashboardSheetContentTypePtrInput `pulumi:"contentType"`
	// A description of the sheet.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of filter controls that are on a sheet.
	//
	// For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
	FilterControls DashboardFilterControlArrayInput `pulumi:"filterControls"`
	// A list of images on a sheet.
	Images DashboardSheetImageArrayInput `pulumi:"images"`
	// Layouts define how the components of a sheet are arranged.
	//
	// For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
	Layouts DashboardLayoutArrayInput `pulumi:"layouts"`
	// The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The list of parameter controls that are on a sheet.
	//
	// For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
	ParameterControls DashboardParameterControlArrayInput `pulumi:"parameterControls"`
	// The control layouts of the sheet.
	SheetControlLayouts DashboardSheetControlLayoutArrayInput `pulumi:"sheetControlLayouts"`
	// The unique identifier of a sheet.
	SheetId pulumi.StringInput `pulumi:"sheetId"`
	// The text boxes that are on a sheet.
	TextBoxes DashboardSheetTextBoxArrayInput `pulumi:"textBoxes"`
	// The title of the sheet.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
	Visuals DashboardVisualArrayInput `pulumi:"visuals"`
}

func (DashboardSheetDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetDefinition)(nil)).Elem()
}

func (i DashboardSheetDefinitionArgs) ToDashboardSheetDefinitionOutput() DashboardSheetDefinitionOutput {
	return i.ToDashboardSheetDefinitionOutputWithContext(context.Background())
}

func (i DashboardSheetDefinitionArgs) ToDashboardSheetDefinitionOutputWithContext(ctx context.Context) DashboardSheetDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetDefinitionOutput)
}

// DashboardSheetDefinitionArrayInput is an input type that accepts DashboardSheetDefinitionArray and DashboardSheetDefinitionArrayOutput values.
// You can construct a concrete instance of `DashboardSheetDefinitionArrayInput` via:
//
//	DashboardSheetDefinitionArray{ DashboardSheetDefinitionArgs{...} }
type DashboardSheetDefinitionArrayInput interface {
	pulumi.Input

	ToDashboardSheetDefinitionArrayOutput() DashboardSheetDefinitionArrayOutput
	ToDashboardSheetDefinitionArrayOutputWithContext(context.Context) DashboardSheetDefinitionArrayOutput
}

type DashboardSheetDefinitionArray []DashboardSheetDefinitionInput

func (DashboardSheetDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetDefinition)(nil)).Elem()
}

func (i DashboardSheetDefinitionArray) ToDashboardSheetDefinitionArrayOutput() DashboardSheetDefinitionArrayOutput {
	return i.ToDashboardSheetDefinitionArrayOutputWithContext(context.Background())
}

func (i DashboardSheetDefinitionArray) ToDashboardSheetDefinitionArrayOutputWithContext(ctx context.Context) DashboardSheetDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetDefinitionArrayOutput)
}

type DashboardSheetDefinitionOutput struct{ *pulumi.OutputState }

func (DashboardSheetDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetDefinition)(nil)).Elem()
}

func (o DashboardSheetDefinitionOutput) ToDashboardSheetDefinitionOutput() DashboardSheetDefinitionOutput {
	return o
}

func (o DashboardSheetDefinitionOutput) ToDashboardSheetDefinitionOutputWithContext(ctx context.Context) DashboardSheetDefinitionOutput {
	return o
}

// The layout content type of the sheet. Choose one of the following options:
//
// - `PAGINATED` : Creates a sheet for a paginated report.
// - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
func (o DashboardSheetDefinitionOutput) ContentType() DashboardSheetContentTypePtrOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) *DashboardSheetContentType { return v.ContentType }).(DashboardSheetContentTypePtrOutput)
}

// A description of the sheet.
func (o DashboardSheetDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of filter controls that are on a sheet.
//
// For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
func (o DashboardSheetDefinitionOutput) FilterControls() DashboardFilterControlArrayOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) []DashboardFilterControl { return v.FilterControls }).(DashboardFilterControlArrayOutput)
}

// A list of images on a sheet.
func (o DashboardSheetDefinitionOutput) Images() DashboardSheetImageArrayOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) []DashboardSheetImage { return v.Images }).(DashboardSheetImageArrayOutput)
}

// Layouts define how the components of a sheet are arranged.
//
// For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
func (o DashboardSheetDefinitionOutput) Layouts() DashboardLayoutArrayOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) []DashboardLayout { return v.Layouts }).(DashboardLayoutArrayOutput)
}

// The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
func (o DashboardSheetDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of parameter controls that are on a sheet.
//
// For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
func (o DashboardSheetDefinitionOutput) ParameterControls() DashboardParameterControlArrayOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) []DashboardParameterControl { return v.ParameterControls }).(DashboardParameterControlArrayOutput)
}

// The control layouts of the sheet.
func (o DashboardSheetDefinitionOutput) SheetControlLayouts() DashboardSheetControlLayoutArrayOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) []DashboardSheetControlLayout { return v.SheetControlLayouts }).(DashboardSheetControlLayoutArrayOutput)
}

// The unique identifier of a sheet.
func (o DashboardSheetDefinitionOutput) SheetId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) string { return v.SheetId }).(pulumi.StringOutput)
}

// The text boxes that are on a sheet.
func (o DashboardSheetDefinitionOutput) TextBoxes() DashboardSheetTextBoxArrayOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) []DashboardSheetTextBox { return v.TextBoxes }).(DashboardSheetTextBoxArrayOutput)
}

// The title of the sheet.
func (o DashboardSheetDefinitionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
func (o DashboardSheetDefinitionOutput) Visuals() DashboardVisualArrayOutput {
	return o.ApplyT(func(v DashboardSheetDefinition) []DashboardVisual { return v.Visuals }).(DashboardVisualArrayOutput)
}

type DashboardSheetDefinitionArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetDefinition)(nil)).Elem()
}

func (o DashboardSheetDefinitionArrayOutput) ToDashboardSheetDefinitionArrayOutput() DashboardSheetDefinitionArrayOutput {
	return o
}

func (o DashboardSheetDefinitionArrayOutput) ToDashboardSheetDefinitionArrayOutputWithContext(ctx context.Context) DashboardSheetDefinitionArrayOutput {
	return o
}

func (o DashboardSheetDefinitionArrayOutput) Index(i pulumi.IntInput) DashboardSheetDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheetDefinition {
		return vs[0].([]DashboardSheetDefinition)[vs[1].(int)]
	}).(DashboardSheetDefinitionOutput)
}

type DashboardSheetElementConfigurationOverrides struct {
	// Determines whether or not the overrides are visible. Choose one of the following options:
	//
	// - `VISIBLE`
	// - `HIDDEN`
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardSheetElementConfigurationOverridesInput is an input type that accepts DashboardSheetElementConfigurationOverridesArgs and DashboardSheetElementConfigurationOverridesOutput values.
// You can construct a concrete instance of `DashboardSheetElementConfigurationOverridesInput` via:
//
//	DashboardSheetElementConfigurationOverridesArgs{...}
type DashboardSheetElementConfigurationOverridesInput interface {
	pulumi.Input

	ToDashboardSheetElementConfigurationOverridesOutput() DashboardSheetElementConfigurationOverridesOutput
	ToDashboardSheetElementConfigurationOverridesOutputWithContext(context.Context) DashboardSheetElementConfigurationOverridesOutput
}

type DashboardSheetElementConfigurationOverridesArgs struct {
	// Determines whether or not the overrides are visible. Choose one of the following options:
	//
	// - `VISIBLE`
	// - `HIDDEN`
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardSheetElementConfigurationOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetElementConfigurationOverrides)(nil)).Elem()
}

func (i DashboardSheetElementConfigurationOverridesArgs) ToDashboardSheetElementConfigurationOverridesOutput() DashboardSheetElementConfigurationOverridesOutput {
	return i.ToDashboardSheetElementConfigurationOverridesOutputWithContext(context.Background())
}

func (i DashboardSheetElementConfigurationOverridesArgs) ToDashboardSheetElementConfigurationOverridesOutputWithContext(ctx context.Context) DashboardSheetElementConfigurationOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetElementConfigurationOverridesOutput)
}

type DashboardSheetElementConfigurationOverridesOutput struct{ *pulumi.OutputState }

func (DashboardSheetElementConfigurationOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetElementConfigurationOverrides)(nil)).Elem()
}

func (o DashboardSheetElementConfigurationOverridesOutput) ToDashboardSheetElementConfigurationOverridesOutput() DashboardSheetElementConfigurationOverridesOutput {
	return o
}

func (o DashboardSheetElementConfigurationOverridesOutput) ToDashboardSheetElementConfigurationOverridesOutputWithContext(ctx context.Context) DashboardSheetElementConfigurationOverridesOutput {
	return o
}

// Determines whether or not the overrides are visible. Choose one of the following options:
//
// - `VISIBLE`
// - `HIDDEN`
func (o DashboardSheetElementConfigurationOverridesOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardSheetElementConfigurationOverrides) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardSheetElementRenderingRule struct {
	// The override configuration of the rendering rules of a sheet.
	ConfigurationOverrides DashboardSheetElementConfigurationOverrides `pulumi:"configurationOverrides"`
	// The expression of the rendering rules of a sheet.
	Expression string `pulumi:"expression"`
}

// DashboardSheetElementRenderingRuleInput is an input type that accepts DashboardSheetElementRenderingRuleArgs and DashboardSheetElementRenderingRuleOutput values.
// You can construct a concrete instance of `DashboardSheetElementRenderingRuleInput` via:
//
//	DashboardSheetElementRenderingRuleArgs{...}
type DashboardSheetElementRenderingRuleInput interface {
	pulumi.Input

	ToDashboardSheetElementRenderingRuleOutput() DashboardSheetElementRenderingRuleOutput
	ToDashboardSheetElementRenderingRuleOutputWithContext(context.Context) DashboardSheetElementRenderingRuleOutput
}

type DashboardSheetElementRenderingRuleArgs struct {
	// The override configuration of the rendering rules of a sheet.
	ConfigurationOverrides DashboardSheetElementConfigurationOverridesInput `pulumi:"configurationOverrides"`
	// The expression of the rendering rules of a sheet.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (DashboardSheetElementRenderingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetElementRenderingRule)(nil)).Elem()
}

func (i DashboardSheetElementRenderingRuleArgs) ToDashboardSheetElementRenderingRuleOutput() DashboardSheetElementRenderingRuleOutput {
	return i.ToDashboardSheetElementRenderingRuleOutputWithContext(context.Background())
}

func (i DashboardSheetElementRenderingRuleArgs) ToDashboardSheetElementRenderingRuleOutputWithContext(ctx context.Context) DashboardSheetElementRenderingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetElementRenderingRuleOutput)
}

// DashboardSheetElementRenderingRuleArrayInput is an input type that accepts DashboardSheetElementRenderingRuleArray and DashboardSheetElementRenderingRuleArrayOutput values.
// You can construct a concrete instance of `DashboardSheetElementRenderingRuleArrayInput` via:
//
//	DashboardSheetElementRenderingRuleArray{ DashboardSheetElementRenderingRuleArgs{...} }
type DashboardSheetElementRenderingRuleArrayInput interface {
	pulumi.Input

	ToDashboardSheetElementRenderingRuleArrayOutput() DashboardSheetElementRenderingRuleArrayOutput
	ToDashboardSheetElementRenderingRuleArrayOutputWithContext(context.Context) DashboardSheetElementRenderingRuleArrayOutput
}

type DashboardSheetElementRenderingRuleArray []DashboardSheetElementRenderingRuleInput

func (DashboardSheetElementRenderingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetElementRenderingRule)(nil)).Elem()
}

func (i DashboardSheetElementRenderingRuleArray) ToDashboardSheetElementRenderingRuleArrayOutput() DashboardSheetElementRenderingRuleArrayOutput {
	return i.ToDashboardSheetElementRenderingRuleArrayOutputWithContext(context.Background())
}

func (i DashboardSheetElementRenderingRuleArray) ToDashboardSheetElementRenderingRuleArrayOutputWithContext(ctx context.Context) DashboardSheetElementRenderingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetElementRenderingRuleArrayOutput)
}

type DashboardSheetElementRenderingRuleOutput struct{ *pulumi.OutputState }

func (DashboardSheetElementRenderingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetElementRenderingRule)(nil)).Elem()
}

func (o DashboardSheetElementRenderingRuleOutput) ToDashboardSheetElementRenderingRuleOutput() DashboardSheetElementRenderingRuleOutput {
	return o
}

func (o DashboardSheetElementRenderingRuleOutput) ToDashboardSheetElementRenderingRuleOutputWithContext(ctx context.Context) DashboardSheetElementRenderingRuleOutput {
	return o
}

// The override configuration of the rendering rules of a sheet.
func (o DashboardSheetElementRenderingRuleOutput) ConfigurationOverrides() DashboardSheetElementConfigurationOverridesOutput {
	return o.ApplyT(func(v DashboardSheetElementRenderingRule) DashboardSheetElementConfigurationOverrides {
		return v.ConfigurationOverrides
	}).(DashboardSheetElementConfigurationOverridesOutput)
}

// The expression of the rendering rules of a sheet.
func (o DashboardSheetElementRenderingRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSheetElementRenderingRule) string { return v.Expression }).(pulumi.StringOutput)
}

type DashboardSheetElementRenderingRuleArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetElementRenderingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetElementRenderingRule)(nil)).Elem()
}

func (o DashboardSheetElementRenderingRuleArrayOutput) ToDashboardSheetElementRenderingRuleArrayOutput() DashboardSheetElementRenderingRuleArrayOutput {
	return o
}

func (o DashboardSheetElementRenderingRuleArrayOutput) ToDashboardSheetElementRenderingRuleArrayOutputWithContext(ctx context.Context) DashboardSheetElementRenderingRuleArrayOutput {
	return o
}

func (o DashboardSheetElementRenderingRuleArrayOutput) Index(i pulumi.IntInput) DashboardSheetElementRenderingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheetElementRenderingRule {
		return vs[0].([]DashboardSheetElementRenderingRule)[vs[1].(int)]
	}).(DashboardSheetElementRenderingRuleOutput)
}

type DashboardSheetImage struct {
	// A list of custom actions that are configured for an image.
	Actions []DashboardImageCustomAction `pulumi:"actions"`
	// The alt text for the image.
	ImageContentAltText *string `pulumi:"imageContentAltText"`
	// The general image interactions setup for an image.
	Interactions *DashboardImageInteractionOptions `pulumi:"interactions"`
	// Determines how the image is scaled.
	Scaling *DashboardSheetImageScalingConfiguration `pulumi:"scaling"`
	// The ID of the sheet image.
	SheetImageId string `pulumi:"sheetImageId"`
	// The source of the image.
	Source DashboardSheetImageSource `pulumi:"source"`
	// The tooltip to be shown when hovering over the image.
	Tooltip *DashboardSheetImageTooltipConfiguration `pulumi:"tooltip"`
}

// DashboardSheetImageInput is an input type that accepts DashboardSheetImageArgs and DashboardSheetImageOutput values.
// You can construct a concrete instance of `DashboardSheetImageInput` via:
//
//	DashboardSheetImageArgs{...}
type DashboardSheetImageInput interface {
	pulumi.Input

	ToDashboardSheetImageOutput() DashboardSheetImageOutput
	ToDashboardSheetImageOutputWithContext(context.Context) DashboardSheetImageOutput
}

type DashboardSheetImageArgs struct {
	// A list of custom actions that are configured for an image.
	Actions DashboardImageCustomActionArrayInput `pulumi:"actions"`
	// The alt text for the image.
	ImageContentAltText pulumi.StringPtrInput `pulumi:"imageContentAltText"`
	// The general image interactions setup for an image.
	Interactions DashboardImageInteractionOptionsPtrInput `pulumi:"interactions"`
	// Determines how the image is scaled.
	Scaling DashboardSheetImageScalingConfigurationPtrInput `pulumi:"scaling"`
	// The ID of the sheet image.
	SheetImageId pulumi.StringInput `pulumi:"sheetImageId"`
	// The source of the image.
	Source DashboardSheetImageSourceInput `pulumi:"source"`
	// The tooltip to be shown when hovering over the image.
	Tooltip DashboardSheetImageTooltipConfigurationPtrInput `pulumi:"tooltip"`
}

func (DashboardSheetImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImage)(nil)).Elem()
}

func (i DashboardSheetImageArgs) ToDashboardSheetImageOutput() DashboardSheetImageOutput {
	return i.ToDashboardSheetImageOutputWithContext(context.Background())
}

func (i DashboardSheetImageArgs) ToDashboardSheetImageOutputWithContext(ctx context.Context) DashboardSheetImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageOutput)
}

// DashboardSheetImageArrayInput is an input type that accepts DashboardSheetImageArray and DashboardSheetImageArrayOutput values.
// You can construct a concrete instance of `DashboardSheetImageArrayInput` via:
//
//	DashboardSheetImageArray{ DashboardSheetImageArgs{...} }
type DashboardSheetImageArrayInput interface {
	pulumi.Input

	ToDashboardSheetImageArrayOutput() DashboardSheetImageArrayOutput
	ToDashboardSheetImageArrayOutputWithContext(context.Context) DashboardSheetImageArrayOutput
}

type DashboardSheetImageArray []DashboardSheetImageInput

func (DashboardSheetImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetImage)(nil)).Elem()
}

func (i DashboardSheetImageArray) ToDashboardSheetImageArrayOutput() DashboardSheetImageArrayOutput {
	return i.ToDashboardSheetImageArrayOutputWithContext(context.Background())
}

func (i DashboardSheetImageArray) ToDashboardSheetImageArrayOutputWithContext(ctx context.Context) DashboardSheetImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageArrayOutput)
}

type DashboardSheetImageOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImage)(nil)).Elem()
}

func (o DashboardSheetImageOutput) ToDashboardSheetImageOutput() DashboardSheetImageOutput {
	return o
}

func (o DashboardSheetImageOutput) ToDashboardSheetImageOutputWithContext(ctx context.Context) DashboardSheetImageOutput {
	return o
}

// A list of custom actions that are configured for an image.
func (o DashboardSheetImageOutput) Actions() DashboardImageCustomActionArrayOutput {
	return o.ApplyT(func(v DashboardSheetImage) []DashboardImageCustomAction { return v.Actions }).(DashboardImageCustomActionArrayOutput)
}

// The alt text for the image.
func (o DashboardSheetImageOutput) ImageContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheetImage) *string { return v.ImageContentAltText }).(pulumi.StringPtrOutput)
}

// The general image interactions setup for an image.
func (o DashboardSheetImageOutput) Interactions() DashboardImageInteractionOptionsPtrOutput {
	return o.ApplyT(func(v DashboardSheetImage) *DashboardImageInteractionOptions { return v.Interactions }).(DashboardImageInteractionOptionsPtrOutput)
}

// Determines how the image is scaled.
func (o DashboardSheetImageOutput) Scaling() DashboardSheetImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardSheetImage) *DashboardSheetImageScalingConfiguration { return v.Scaling }).(DashboardSheetImageScalingConfigurationPtrOutput)
}

// The ID of the sheet image.
func (o DashboardSheetImageOutput) SheetImageId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSheetImage) string { return v.SheetImageId }).(pulumi.StringOutput)
}

// The source of the image.
func (o DashboardSheetImageOutput) Source() DashboardSheetImageSourceOutput {
	return o.ApplyT(func(v DashboardSheetImage) DashboardSheetImageSource { return v.Source }).(DashboardSheetImageSourceOutput)
}

// The tooltip to be shown when hovering over the image.
func (o DashboardSheetImageOutput) Tooltip() DashboardSheetImageTooltipConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardSheetImage) *DashboardSheetImageTooltipConfiguration { return v.Tooltip }).(DashboardSheetImageTooltipConfigurationPtrOutput)
}

type DashboardSheetImageArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetImage)(nil)).Elem()
}

func (o DashboardSheetImageArrayOutput) ToDashboardSheetImageArrayOutput() DashboardSheetImageArrayOutput {
	return o
}

func (o DashboardSheetImageArrayOutput) ToDashboardSheetImageArrayOutputWithContext(ctx context.Context) DashboardSheetImageArrayOutput {
	return o
}

func (o DashboardSheetImageArrayOutput) Index(i pulumi.IntInput) DashboardSheetImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheetImage {
		return vs[0].([]DashboardSheetImage)[vs[1].(int)]
	}).(DashboardSheetImageOutput)
}

type DashboardSheetImageScalingConfiguration struct {
	// The scaling option to use when fitting the image inside the container.
	//
	// Valid values are defined as follows:
	//
	// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
	// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
	ScalingType *DashboardSheetImageScalingType `pulumi:"scalingType"`
}

// DashboardSheetImageScalingConfigurationInput is an input type that accepts DashboardSheetImageScalingConfigurationArgs and DashboardSheetImageScalingConfigurationOutput values.
// You can construct a concrete instance of `DashboardSheetImageScalingConfigurationInput` via:
//
//	DashboardSheetImageScalingConfigurationArgs{...}
type DashboardSheetImageScalingConfigurationInput interface {
	pulumi.Input

	ToDashboardSheetImageScalingConfigurationOutput() DashboardSheetImageScalingConfigurationOutput
	ToDashboardSheetImageScalingConfigurationOutputWithContext(context.Context) DashboardSheetImageScalingConfigurationOutput
}

type DashboardSheetImageScalingConfigurationArgs struct {
	// The scaling option to use when fitting the image inside the container.
	//
	// Valid values are defined as follows:
	//
	// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
	// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
	ScalingType DashboardSheetImageScalingTypePtrInput `pulumi:"scalingType"`
}

func (DashboardSheetImageScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageScalingConfiguration)(nil)).Elem()
}

func (i DashboardSheetImageScalingConfigurationArgs) ToDashboardSheetImageScalingConfigurationOutput() DashboardSheetImageScalingConfigurationOutput {
	return i.ToDashboardSheetImageScalingConfigurationOutputWithContext(context.Background())
}

func (i DashboardSheetImageScalingConfigurationArgs) ToDashboardSheetImageScalingConfigurationOutputWithContext(ctx context.Context) DashboardSheetImageScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageScalingConfigurationOutput)
}

func (i DashboardSheetImageScalingConfigurationArgs) ToDashboardSheetImageScalingConfigurationPtrOutput() DashboardSheetImageScalingConfigurationPtrOutput {
	return i.ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardSheetImageScalingConfigurationArgs) ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageScalingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageScalingConfigurationOutput).ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(ctx)
}

// DashboardSheetImageScalingConfigurationPtrInput is an input type that accepts DashboardSheetImageScalingConfigurationArgs, DashboardSheetImageScalingConfigurationPtr and DashboardSheetImageScalingConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardSheetImageScalingConfigurationPtrInput` via:
//
//	        DashboardSheetImageScalingConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardSheetImageScalingConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardSheetImageScalingConfigurationPtrOutput() DashboardSheetImageScalingConfigurationPtrOutput
	ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(context.Context) DashboardSheetImageScalingConfigurationPtrOutput
}

type dashboardSheetImageScalingConfigurationPtrType DashboardSheetImageScalingConfigurationArgs

func DashboardSheetImageScalingConfigurationPtr(v *DashboardSheetImageScalingConfigurationArgs) DashboardSheetImageScalingConfigurationPtrInput {
	return (*dashboardSheetImageScalingConfigurationPtrType)(v)
}

func (*dashboardSheetImageScalingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageScalingConfiguration)(nil)).Elem()
}

func (i *dashboardSheetImageScalingConfigurationPtrType) ToDashboardSheetImageScalingConfigurationPtrOutput() DashboardSheetImageScalingConfigurationPtrOutput {
	return i.ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardSheetImageScalingConfigurationPtrType) ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageScalingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageScalingConfigurationPtrOutput)
}

type DashboardSheetImageScalingConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageScalingConfiguration)(nil)).Elem()
}

func (o DashboardSheetImageScalingConfigurationOutput) ToDashboardSheetImageScalingConfigurationOutput() DashboardSheetImageScalingConfigurationOutput {
	return o
}

func (o DashboardSheetImageScalingConfigurationOutput) ToDashboardSheetImageScalingConfigurationOutputWithContext(ctx context.Context) DashboardSheetImageScalingConfigurationOutput {
	return o
}

func (o DashboardSheetImageScalingConfigurationOutput) ToDashboardSheetImageScalingConfigurationPtrOutput() DashboardSheetImageScalingConfigurationPtrOutput {
	return o.ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardSheetImageScalingConfigurationOutput) ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageScalingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetImageScalingConfiguration) *DashboardSheetImageScalingConfiguration {
		return &v
	}).(DashboardSheetImageScalingConfigurationPtrOutput)
}

// The scaling option to use when fitting the image inside the container.
//
// Valid values are defined as follows:
//
// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
func (o DashboardSheetImageScalingConfigurationOutput) ScalingType() DashboardSheetImageScalingTypePtrOutput {
	return o.ApplyT(func(v DashboardSheetImageScalingConfiguration) *DashboardSheetImageScalingType { return v.ScalingType }).(DashboardSheetImageScalingTypePtrOutput)
}

type DashboardSheetImageScalingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageScalingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageScalingConfiguration)(nil)).Elem()
}

func (o DashboardSheetImageScalingConfigurationPtrOutput) ToDashboardSheetImageScalingConfigurationPtrOutput() DashboardSheetImageScalingConfigurationPtrOutput {
	return o
}

func (o DashboardSheetImageScalingConfigurationPtrOutput) ToDashboardSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageScalingConfigurationPtrOutput {
	return o
}

func (o DashboardSheetImageScalingConfigurationPtrOutput) Elem() DashboardSheetImageScalingConfigurationOutput {
	return o.ApplyT(func(v *DashboardSheetImageScalingConfiguration) DashboardSheetImageScalingConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardSheetImageScalingConfiguration
		return ret
	}).(DashboardSheetImageScalingConfigurationOutput)
}

// The scaling option to use when fitting the image inside the container.
//
// Valid values are defined as follows:
//
// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
func (o DashboardSheetImageScalingConfigurationPtrOutput) ScalingType() DashboardSheetImageScalingTypePtrOutput {
	return o.ApplyT(func(v *DashboardSheetImageScalingConfiguration) *DashboardSheetImageScalingType {
		if v == nil {
			return nil
		}
		return v.ScalingType
	}).(DashboardSheetImageScalingTypePtrOutput)
}

type DashboardSheetImageSource struct {
	// The source of the static file that contains the image.
	SheetImageStaticFileSource *DashboardSheetImageStaticFileSource `pulumi:"sheetImageStaticFileSource"`
}

// DashboardSheetImageSourceInput is an input type that accepts DashboardSheetImageSourceArgs and DashboardSheetImageSourceOutput values.
// You can construct a concrete instance of `DashboardSheetImageSourceInput` via:
//
//	DashboardSheetImageSourceArgs{...}
type DashboardSheetImageSourceInput interface {
	pulumi.Input

	ToDashboardSheetImageSourceOutput() DashboardSheetImageSourceOutput
	ToDashboardSheetImageSourceOutputWithContext(context.Context) DashboardSheetImageSourceOutput
}

type DashboardSheetImageSourceArgs struct {
	// The source of the static file that contains the image.
	SheetImageStaticFileSource DashboardSheetImageStaticFileSourcePtrInput `pulumi:"sheetImageStaticFileSource"`
}

func (DashboardSheetImageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageSource)(nil)).Elem()
}

func (i DashboardSheetImageSourceArgs) ToDashboardSheetImageSourceOutput() DashboardSheetImageSourceOutput {
	return i.ToDashboardSheetImageSourceOutputWithContext(context.Background())
}

func (i DashboardSheetImageSourceArgs) ToDashboardSheetImageSourceOutputWithContext(ctx context.Context) DashboardSheetImageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageSourceOutput)
}

type DashboardSheetImageSourceOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageSource)(nil)).Elem()
}

func (o DashboardSheetImageSourceOutput) ToDashboardSheetImageSourceOutput() DashboardSheetImageSourceOutput {
	return o
}

func (o DashboardSheetImageSourceOutput) ToDashboardSheetImageSourceOutputWithContext(ctx context.Context) DashboardSheetImageSourceOutput {
	return o
}

// The source of the static file that contains the image.
func (o DashboardSheetImageSourceOutput) SheetImageStaticFileSource() DashboardSheetImageStaticFileSourcePtrOutput {
	return o.ApplyT(func(v DashboardSheetImageSource) *DashboardSheetImageStaticFileSource {
		return v.SheetImageStaticFileSource
	}).(DashboardSheetImageStaticFileSourcePtrOutput)
}

type DashboardSheetImageStaticFileSource struct {
	// The ID of the static file that contains the image.
	StaticFileId string `pulumi:"staticFileId"`
}

// DashboardSheetImageStaticFileSourceInput is an input type that accepts DashboardSheetImageStaticFileSourceArgs and DashboardSheetImageStaticFileSourceOutput values.
// You can construct a concrete instance of `DashboardSheetImageStaticFileSourceInput` via:
//
//	DashboardSheetImageStaticFileSourceArgs{...}
type DashboardSheetImageStaticFileSourceInput interface {
	pulumi.Input

	ToDashboardSheetImageStaticFileSourceOutput() DashboardSheetImageStaticFileSourceOutput
	ToDashboardSheetImageStaticFileSourceOutputWithContext(context.Context) DashboardSheetImageStaticFileSourceOutput
}

type DashboardSheetImageStaticFileSourceArgs struct {
	// The ID of the static file that contains the image.
	StaticFileId pulumi.StringInput `pulumi:"staticFileId"`
}

func (DashboardSheetImageStaticFileSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageStaticFileSource)(nil)).Elem()
}

func (i DashboardSheetImageStaticFileSourceArgs) ToDashboardSheetImageStaticFileSourceOutput() DashboardSheetImageStaticFileSourceOutput {
	return i.ToDashboardSheetImageStaticFileSourceOutputWithContext(context.Background())
}

func (i DashboardSheetImageStaticFileSourceArgs) ToDashboardSheetImageStaticFileSourceOutputWithContext(ctx context.Context) DashboardSheetImageStaticFileSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageStaticFileSourceOutput)
}

func (i DashboardSheetImageStaticFileSourceArgs) ToDashboardSheetImageStaticFileSourcePtrOutput() DashboardSheetImageStaticFileSourcePtrOutput {
	return i.ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(context.Background())
}

func (i DashboardSheetImageStaticFileSourceArgs) ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardSheetImageStaticFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageStaticFileSourceOutput).ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(ctx)
}

// DashboardSheetImageStaticFileSourcePtrInput is an input type that accepts DashboardSheetImageStaticFileSourceArgs, DashboardSheetImageStaticFileSourcePtr and DashboardSheetImageStaticFileSourcePtrOutput values.
// You can construct a concrete instance of `DashboardSheetImageStaticFileSourcePtrInput` via:
//
//	        DashboardSheetImageStaticFileSourceArgs{...}
//
//	or:
//
//	        nil
type DashboardSheetImageStaticFileSourcePtrInput interface {
	pulumi.Input

	ToDashboardSheetImageStaticFileSourcePtrOutput() DashboardSheetImageStaticFileSourcePtrOutput
	ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(context.Context) DashboardSheetImageStaticFileSourcePtrOutput
}

type dashboardSheetImageStaticFileSourcePtrType DashboardSheetImageStaticFileSourceArgs

func DashboardSheetImageStaticFileSourcePtr(v *DashboardSheetImageStaticFileSourceArgs) DashboardSheetImageStaticFileSourcePtrInput {
	return (*dashboardSheetImageStaticFileSourcePtrType)(v)
}

func (*dashboardSheetImageStaticFileSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageStaticFileSource)(nil)).Elem()
}

func (i *dashboardSheetImageStaticFileSourcePtrType) ToDashboardSheetImageStaticFileSourcePtrOutput() DashboardSheetImageStaticFileSourcePtrOutput {
	return i.ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(context.Background())
}

func (i *dashboardSheetImageStaticFileSourcePtrType) ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardSheetImageStaticFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageStaticFileSourcePtrOutput)
}

type DashboardSheetImageStaticFileSourceOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageStaticFileSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageStaticFileSource)(nil)).Elem()
}

func (o DashboardSheetImageStaticFileSourceOutput) ToDashboardSheetImageStaticFileSourceOutput() DashboardSheetImageStaticFileSourceOutput {
	return o
}

func (o DashboardSheetImageStaticFileSourceOutput) ToDashboardSheetImageStaticFileSourceOutputWithContext(ctx context.Context) DashboardSheetImageStaticFileSourceOutput {
	return o
}

func (o DashboardSheetImageStaticFileSourceOutput) ToDashboardSheetImageStaticFileSourcePtrOutput() DashboardSheetImageStaticFileSourcePtrOutput {
	return o.ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(context.Background())
}

func (o DashboardSheetImageStaticFileSourceOutput) ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardSheetImageStaticFileSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetImageStaticFileSource) *DashboardSheetImageStaticFileSource {
		return &v
	}).(DashboardSheetImageStaticFileSourcePtrOutput)
}

// The ID of the static file that contains the image.
func (o DashboardSheetImageStaticFileSourceOutput) StaticFileId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSheetImageStaticFileSource) string { return v.StaticFileId }).(pulumi.StringOutput)
}

type DashboardSheetImageStaticFileSourcePtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageStaticFileSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageStaticFileSource)(nil)).Elem()
}

func (o DashboardSheetImageStaticFileSourcePtrOutput) ToDashboardSheetImageStaticFileSourcePtrOutput() DashboardSheetImageStaticFileSourcePtrOutput {
	return o
}

func (o DashboardSheetImageStaticFileSourcePtrOutput) ToDashboardSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardSheetImageStaticFileSourcePtrOutput {
	return o
}

func (o DashboardSheetImageStaticFileSourcePtrOutput) Elem() DashboardSheetImageStaticFileSourceOutput {
	return o.ApplyT(func(v *DashboardSheetImageStaticFileSource) DashboardSheetImageStaticFileSource {
		if v != nil {
			return *v
		}
		var ret DashboardSheetImageStaticFileSource
		return ret
	}).(DashboardSheetImageStaticFileSourceOutput)
}

// The ID of the static file that contains the image.
func (o DashboardSheetImageStaticFileSourcePtrOutput) StaticFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSheetImageStaticFileSource) *string {
		if v == nil {
			return nil
		}
		return &v.StaticFileId
	}).(pulumi.StringPtrOutput)
}

type DashboardSheetImageTooltipConfiguration struct {
	// The text that appears in the tooltip.
	TooltipText *DashboardSheetImageTooltipText `pulumi:"tooltipText"`
	// The visibility of the tooltip.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardSheetImageTooltipConfigurationInput is an input type that accepts DashboardSheetImageTooltipConfigurationArgs and DashboardSheetImageTooltipConfigurationOutput values.
// You can construct a concrete instance of `DashboardSheetImageTooltipConfigurationInput` via:
//
//	DashboardSheetImageTooltipConfigurationArgs{...}
type DashboardSheetImageTooltipConfigurationInput interface {
	pulumi.Input

	ToDashboardSheetImageTooltipConfigurationOutput() DashboardSheetImageTooltipConfigurationOutput
	ToDashboardSheetImageTooltipConfigurationOutputWithContext(context.Context) DashboardSheetImageTooltipConfigurationOutput
}

type DashboardSheetImageTooltipConfigurationArgs struct {
	// The text that appears in the tooltip.
	TooltipText DashboardSheetImageTooltipTextPtrInput `pulumi:"tooltipText"`
	// The visibility of the tooltip.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardSheetImageTooltipConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageTooltipConfiguration)(nil)).Elem()
}

func (i DashboardSheetImageTooltipConfigurationArgs) ToDashboardSheetImageTooltipConfigurationOutput() DashboardSheetImageTooltipConfigurationOutput {
	return i.ToDashboardSheetImageTooltipConfigurationOutputWithContext(context.Background())
}

func (i DashboardSheetImageTooltipConfigurationArgs) ToDashboardSheetImageTooltipConfigurationOutputWithContext(ctx context.Context) DashboardSheetImageTooltipConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageTooltipConfigurationOutput)
}

func (i DashboardSheetImageTooltipConfigurationArgs) ToDashboardSheetImageTooltipConfigurationPtrOutput() DashboardSheetImageTooltipConfigurationPtrOutput {
	return i.ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardSheetImageTooltipConfigurationArgs) ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageTooltipConfigurationOutput).ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(ctx)
}

// DashboardSheetImageTooltipConfigurationPtrInput is an input type that accepts DashboardSheetImageTooltipConfigurationArgs, DashboardSheetImageTooltipConfigurationPtr and DashboardSheetImageTooltipConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardSheetImageTooltipConfigurationPtrInput` via:
//
//	        DashboardSheetImageTooltipConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardSheetImageTooltipConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardSheetImageTooltipConfigurationPtrOutput() DashboardSheetImageTooltipConfigurationPtrOutput
	ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(context.Context) DashboardSheetImageTooltipConfigurationPtrOutput
}

type dashboardSheetImageTooltipConfigurationPtrType DashboardSheetImageTooltipConfigurationArgs

func DashboardSheetImageTooltipConfigurationPtr(v *DashboardSheetImageTooltipConfigurationArgs) DashboardSheetImageTooltipConfigurationPtrInput {
	return (*dashboardSheetImageTooltipConfigurationPtrType)(v)
}

func (*dashboardSheetImageTooltipConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageTooltipConfiguration)(nil)).Elem()
}

func (i *dashboardSheetImageTooltipConfigurationPtrType) ToDashboardSheetImageTooltipConfigurationPtrOutput() DashboardSheetImageTooltipConfigurationPtrOutput {
	return i.ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardSheetImageTooltipConfigurationPtrType) ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageTooltipConfigurationPtrOutput)
}

type DashboardSheetImageTooltipConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageTooltipConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageTooltipConfiguration)(nil)).Elem()
}

func (o DashboardSheetImageTooltipConfigurationOutput) ToDashboardSheetImageTooltipConfigurationOutput() DashboardSheetImageTooltipConfigurationOutput {
	return o
}

func (o DashboardSheetImageTooltipConfigurationOutput) ToDashboardSheetImageTooltipConfigurationOutputWithContext(ctx context.Context) DashboardSheetImageTooltipConfigurationOutput {
	return o
}

func (o DashboardSheetImageTooltipConfigurationOutput) ToDashboardSheetImageTooltipConfigurationPtrOutput() DashboardSheetImageTooltipConfigurationPtrOutput {
	return o.ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardSheetImageTooltipConfigurationOutput) ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetImageTooltipConfiguration) *DashboardSheetImageTooltipConfiguration {
		return &v
	}).(DashboardSheetImageTooltipConfigurationPtrOutput)
}

// The text that appears in the tooltip.
func (o DashboardSheetImageTooltipConfigurationOutput) TooltipText() DashboardSheetImageTooltipTextPtrOutput {
	return o.ApplyT(func(v DashboardSheetImageTooltipConfiguration) *DashboardSheetImageTooltipText { return v.TooltipText }).(DashboardSheetImageTooltipTextPtrOutput)
}

// The visibility of the tooltip.
func (o DashboardSheetImageTooltipConfigurationOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardSheetImageTooltipConfiguration) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardSheetImageTooltipConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageTooltipConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageTooltipConfiguration)(nil)).Elem()
}

func (o DashboardSheetImageTooltipConfigurationPtrOutput) ToDashboardSheetImageTooltipConfigurationPtrOutput() DashboardSheetImageTooltipConfigurationPtrOutput {
	return o
}

func (o DashboardSheetImageTooltipConfigurationPtrOutput) ToDashboardSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipConfigurationPtrOutput {
	return o
}

func (o DashboardSheetImageTooltipConfigurationPtrOutput) Elem() DashboardSheetImageTooltipConfigurationOutput {
	return o.ApplyT(func(v *DashboardSheetImageTooltipConfiguration) DashboardSheetImageTooltipConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardSheetImageTooltipConfiguration
		return ret
	}).(DashboardSheetImageTooltipConfigurationOutput)
}

// The text that appears in the tooltip.
func (o DashboardSheetImageTooltipConfigurationPtrOutput) TooltipText() DashboardSheetImageTooltipTextPtrOutput {
	return o.ApplyT(func(v *DashboardSheetImageTooltipConfiguration) *DashboardSheetImageTooltipText {
		if v == nil {
			return nil
		}
		return v.TooltipText
	}).(DashboardSheetImageTooltipTextPtrOutput)
}

// The visibility of the tooltip.
func (o DashboardSheetImageTooltipConfigurationPtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardSheetImageTooltipConfiguration) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardSheetImageTooltipText struct {
	// The plain text format.
	PlainText *string `pulumi:"plainText"`
}

// DashboardSheetImageTooltipTextInput is an input type that accepts DashboardSheetImageTooltipTextArgs and DashboardSheetImageTooltipTextOutput values.
// You can construct a concrete instance of `DashboardSheetImageTooltipTextInput` via:
//
//	DashboardSheetImageTooltipTextArgs{...}
type DashboardSheetImageTooltipTextInput interface {
	pulumi.Input

	ToDashboardSheetImageTooltipTextOutput() DashboardSheetImageTooltipTextOutput
	ToDashboardSheetImageTooltipTextOutputWithContext(context.Context) DashboardSheetImageTooltipTextOutput
}

type DashboardSheetImageTooltipTextArgs struct {
	// The plain text format.
	PlainText pulumi.StringPtrInput `pulumi:"plainText"`
}

func (DashboardSheetImageTooltipTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageTooltipText)(nil)).Elem()
}

func (i DashboardSheetImageTooltipTextArgs) ToDashboardSheetImageTooltipTextOutput() DashboardSheetImageTooltipTextOutput {
	return i.ToDashboardSheetImageTooltipTextOutputWithContext(context.Background())
}

func (i DashboardSheetImageTooltipTextArgs) ToDashboardSheetImageTooltipTextOutputWithContext(ctx context.Context) DashboardSheetImageTooltipTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageTooltipTextOutput)
}

func (i DashboardSheetImageTooltipTextArgs) ToDashboardSheetImageTooltipTextPtrOutput() DashboardSheetImageTooltipTextPtrOutput {
	return i.ToDashboardSheetImageTooltipTextPtrOutputWithContext(context.Background())
}

func (i DashboardSheetImageTooltipTextArgs) ToDashboardSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageTooltipTextOutput).ToDashboardSheetImageTooltipTextPtrOutputWithContext(ctx)
}

// DashboardSheetImageTooltipTextPtrInput is an input type that accepts DashboardSheetImageTooltipTextArgs, DashboardSheetImageTooltipTextPtr and DashboardSheetImageTooltipTextPtrOutput values.
// You can construct a concrete instance of `DashboardSheetImageTooltipTextPtrInput` via:
//
//	        DashboardSheetImageTooltipTextArgs{...}
//
//	or:
//
//	        nil
type DashboardSheetImageTooltipTextPtrInput interface {
	pulumi.Input

	ToDashboardSheetImageTooltipTextPtrOutput() DashboardSheetImageTooltipTextPtrOutput
	ToDashboardSheetImageTooltipTextPtrOutputWithContext(context.Context) DashboardSheetImageTooltipTextPtrOutput
}

type dashboardSheetImageTooltipTextPtrType DashboardSheetImageTooltipTextArgs

func DashboardSheetImageTooltipTextPtr(v *DashboardSheetImageTooltipTextArgs) DashboardSheetImageTooltipTextPtrInput {
	return (*dashboardSheetImageTooltipTextPtrType)(v)
}

func (*dashboardSheetImageTooltipTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageTooltipText)(nil)).Elem()
}

func (i *dashboardSheetImageTooltipTextPtrType) ToDashboardSheetImageTooltipTextPtrOutput() DashboardSheetImageTooltipTextPtrOutput {
	return i.ToDashboardSheetImageTooltipTextPtrOutputWithContext(context.Background())
}

func (i *dashboardSheetImageTooltipTextPtrType) ToDashboardSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetImageTooltipTextPtrOutput)
}

type DashboardSheetImageTooltipTextOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageTooltipTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetImageTooltipText)(nil)).Elem()
}

func (o DashboardSheetImageTooltipTextOutput) ToDashboardSheetImageTooltipTextOutput() DashboardSheetImageTooltipTextOutput {
	return o
}

func (o DashboardSheetImageTooltipTextOutput) ToDashboardSheetImageTooltipTextOutputWithContext(ctx context.Context) DashboardSheetImageTooltipTextOutput {
	return o
}

func (o DashboardSheetImageTooltipTextOutput) ToDashboardSheetImageTooltipTextPtrOutput() DashboardSheetImageTooltipTextPtrOutput {
	return o.ToDashboardSheetImageTooltipTextPtrOutputWithContext(context.Background())
}

func (o DashboardSheetImageTooltipTextOutput) ToDashboardSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetImageTooltipText) *DashboardSheetImageTooltipText {
		return &v
	}).(DashboardSheetImageTooltipTextPtrOutput)
}

// The plain text format.
func (o DashboardSheetImageTooltipTextOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheetImageTooltipText) *string { return v.PlainText }).(pulumi.StringPtrOutput)
}

type DashboardSheetImageTooltipTextPtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetImageTooltipTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetImageTooltipText)(nil)).Elem()
}

func (o DashboardSheetImageTooltipTextPtrOutput) ToDashboardSheetImageTooltipTextPtrOutput() DashboardSheetImageTooltipTextPtrOutput {
	return o
}

func (o DashboardSheetImageTooltipTextPtrOutput) ToDashboardSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) DashboardSheetImageTooltipTextPtrOutput {
	return o
}

func (o DashboardSheetImageTooltipTextPtrOutput) Elem() DashboardSheetImageTooltipTextOutput {
	return o.ApplyT(func(v *DashboardSheetImageTooltipText) DashboardSheetImageTooltipText {
		if v != nil {
			return *v
		}
		var ret DashboardSheetImageTooltipText
		return ret
	}).(DashboardSheetImageTooltipTextOutput)
}

// The plain text format.
func (o DashboardSheetImageTooltipTextPtrOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSheetImageTooltipText) *string {
		if v == nil {
			return nil
		}
		return v.PlainText
	}).(pulumi.StringPtrOutput)
}

// <p>The sheet layout maximization options of a dashbaord.</p>
type DashboardSheetLayoutElementMaximizationOption struct {
	// The status of the sheet layout maximization options of a dashbaord.
	AvailabilityStatus *DashboardBehavior `pulumi:"availabilityStatus"`
}

// DashboardSheetLayoutElementMaximizationOptionInput is an input type that accepts DashboardSheetLayoutElementMaximizationOptionArgs and DashboardSheetLayoutElementMaximizationOptionOutput values.
// You can construct a concrete instance of `DashboardSheetLayoutElementMaximizationOptionInput` via:
//
//	DashboardSheetLayoutElementMaximizationOptionArgs{...}
type DashboardSheetLayoutElementMaximizationOptionInput interface {
	pulumi.Input

	ToDashboardSheetLayoutElementMaximizationOptionOutput() DashboardSheetLayoutElementMaximizationOptionOutput
	ToDashboardSheetLayoutElementMaximizationOptionOutputWithContext(context.Context) DashboardSheetLayoutElementMaximizationOptionOutput
}

// <p>The sheet layout maximization options of a dashbaord.</p>
type DashboardSheetLayoutElementMaximizationOptionArgs struct {
	// The status of the sheet layout maximization options of a dashbaord.
	AvailabilityStatus DashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardSheetLayoutElementMaximizationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (i DashboardSheetLayoutElementMaximizationOptionArgs) ToDashboardSheetLayoutElementMaximizationOptionOutput() DashboardSheetLayoutElementMaximizationOptionOutput {
	return i.ToDashboardSheetLayoutElementMaximizationOptionOutputWithContext(context.Background())
}

func (i DashboardSheetLayoutElementMaximizationOptionArgs) ToDashboardSheetLayoutElementMaximizationOptionOutputWithContext(ctx context.Context) DashboardSheetLayoutElementMaximizationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetLayoutElementMaximizationOptionOutput)
}

func (i DashboardSheetLayoutElementMaximizationOptionArgs) ToDashboardSheetLayoutElementMaximizationOptionPtrOutput() DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return i.ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Background())
}

func (i DashboardSheetLayoutElementMaximizationOptionArgs) ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetLayoutElementMaximizationOptionOutput).ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx)
}

// DashboardSheetLayoutElementMaximizationOptionPtrInput is an input type that accepts DashboardSheetLayoutElementMaximizationOptionArgs, DashboardSheetLayoutElementMaximizationOptionPtr and DashboardSheetLayoutElementMaximizationOptionPtrOutput values.
// You can construct a concrete instance of `DashboardSheetLayoutElementMaximizationOptionPtrInput` via:
//
//	        DashboardSheetLayoutElementMaximizationOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardSheetLayoutElementMaximizationOptionPtrInput interface {
	pulumi.Input

	ToDashboardSheetLayoutElementMaximizationOptionPtrOutput() DashboardSheetLayoutElementMaximizationOptionPtrOutput
	ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Context) DashboardSheetLayoutElementMaximizationOptionPtrOutput
}

type dashboardSheetLayoutElementMaximizationOptionPtrType DashboardSheetLayoutElementMaximizationOptionArgs

func DashboardSheetLayoutElementMaximizationOptionPtr(v *DashboardSheetLayoutElementMaximizationOptionArgs) DashboardSheetLayoutElementMaximizationOptionPtrInput {
	return (*dashboardSheetLayoutElementMaximizationOptionPtrType)(v)
}

func (*dashboardSheetLayoutElementMaximizationOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (i *dashboardSheetLayoutElementMaximizationOptionPtrType) ToDashboardSheetLayoutElementMaximizationOptionPtrOutput() DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return i.ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardSheetLayoutElementMaximizationOptionPtrType) ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetLayoutElementMaximizationOptionPtrOutput)
}

// <p>The sheet layout maximization options of a dashbaord.</p>
type DashboardSheetLayoutElementMaximizationOptionOutput struct{ *pulumi.OutputState }

func (DashboardSheetLayoutElementMaximizationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (o DashboardSheetLayoutElementMaximizationOptionOutput) ToDashboardSheetLayoutElementMaximizationOptionOutput() DashboardSheetLayoutElementMaximizationOptionOutput {
	return o
}

func (o DashboardSheetLayoutElementMaximizationOptionOutput) ToDashboardSheetLayoutElementMaximizationOptionOutputWithContext(ctx context.Context) DashboardSheetLayoutElementMaximizationOptionOutput {
	return o
}

func (o DashboardSheetLayoutElementMaximizationOptionOutput) ToDashboardSheetLayoutElementMaximizationOptionPtrOutput() DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return o.ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(context.Background())
}

func (o DashboardSheetLayoutElementMaximizationOptionOutput) ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSheetLayoutElementMaximizationOption) *DashboardSheetLayoutElementMaximizationOption {
		return &v
	}).(DashboardSheetLayoutElementMaximizationOptionPtrOutput)
}

// The status of the sheet layout maximization options of a dashbaord.
func (o DashboardSheetLayoutElementMaximizationOptionOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v DashboardSheetLayoutElementMaximizationOption) *DashboardBehavior { return v.AvailabilityStatus }).(DashboardBehaviorPtrOutput)
}

type DashboardSheetLayoutElementMaximizationOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardSheetLayoutElementMaximizationOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSheetLayoutElementMaximizationOption)(nil)).Elem()
}

func (o DashboardSheetLayoutElementMaximizationOptionPtrOutput) ToDashboardSheetLayoutElementMaximizationOptionPtrOutput() DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return o
}

func (o DashboardSheetLayoutElementMaximizationOptionPtrOutput) ToDashboardSheetLayoutElementMaximizationOptionPtrOutputWithContext(ctx context.Context) DashboardSheetLayoutElementMaximizationOptionPtrOutput {
	return o
}

func (o DashboardSheetLayoutElementMaximizationOptionPtrOutput) Elem() DashboardSheetLayoutElementMaximizationOptionOutput {
	return o.ApplyT(func(v *DashboardSheetLayoutElementMaximizationOption) DashboardSheetLayoutElementMaximizationOption {
		if v != nil {
			return *v
		}
		var ret DashboardSheetLayoutElementMaximizationOption
		return ret
	}).(DashboardSheetLayoutElementMaximizationOptionOutput)
}

// The status of the sheet layout maximization options of a dashbaord.
func (o DashboardSheetLayoutElementMaximizationOptionPtrOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *DashboardSheetLayoutElementMaximizationOption) *DashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(DashboardBehaviorPtrOutput)
}

type DashboardSheetTextBox struct {
	// The content that is displayed in the text box.
	Content      *string     `pulumi:"content"`
	Interactions interface{} `pulumi:"interactions"`
	// The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
	SheetTextBoxId string `pulumi:"sheetTextBoxId"`
}

// DashboardSheetTextBoxInput is an input type that accepts DashboardSheetTextBoxArgs and DashboardSheetTextBoxOutput values.
// You can construct a concrete instance of `DashboardSheetTextBoxInput` via:
//
//	DashboardSheetTextBoxArgs{...}
type DashboardSheetTextBoxInput interface {
	pulumi.Input

	ToDashboardSheetTextBoxOutput() DashboardSheetTextBoxOutput
	ToDashboardSheetTextBoxOutputWithContext(context.Context) DashboardSheetTextBoxOutput
}

type DashboardSheetTextBoxArgs struct {
	// The content that is displayed in the text box.
	Content      pulumi.StringPtrInput `pulumi:"content"`
	Interactions pulumi.Input          `pulumi:"interactions"`
	// The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
	SheetTextBoxId pulumi.StringInput `pulumi:"sheetTextBoxId"`
}

func (DashboardSheetTextBoxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetTextBox)(nil)).Elem()
}

func (i DashboardSheetTextBoxArgs) ToDashboardSheetTextBoxOutput() DashboardSheetTextBoxOutput {
	return i.ToDashboardSheetTextBoxOutputWithContext(context.Background())
}

func (i DashboardSheetTextBoxArgs) ToDashboardSheetTextBoxOutputWithContext(ctx context.Context) DashboardSheetTextBoxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetTextBoxOutput)
}

// DashboardSheetTextBoxArrayInput is an input type that accepts DashboardSheetTextBoxArray and DashboardSheetTextBoxArrayOutput values.
// You can construct a concrete instance of `DashboardSheetTextBoxArrayInput` via:
//
//	DashboardSheetTextBoxArray{ DashboardSheetTextBoxArgs{...} }
type DashboardSheetTextBoxArrayInput interface {
	pulumi.Input

	ToDashboardSheetTextBoxArrayOutput() DashboardSheetTextBoxArrayOutput
	ToDashboardSheetTextBoxArrayOutputWithContext(context.Context) DashboardSheetTextBoxArrayOutput
}

type DashboardSheetTextBoxArray []DashboardSheetTextBoxInput

func (DashboardSheetTextBoxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetTextBox)(nil)).Elem()
}

func (i DashboardSheetTextBoxArray) ToDashboardSheetTextBoxArrayOutput() DashboardSheetTextBoxArrayOutput {
	return i.ToDashboardSheetTextBoxArrayOutputWithContext(context.Background())
}

func (i DashboardSheetTextBoxArray) ToDashboardSheetTextBoxArrayOutputWithContext(ctx context.Context) DashboardSheetTextBoxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetTextBoxArrayOutput)
}

type DashboardSheetTextBoxOutput struct{ *pulumi.OutputState }

func (DashboardSheetTextBoxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetTextBox)(nil)).Elem()
}

func (o DashboardSheetTextBoxOutput) ToDashboardSheetTextBoxOutput() DashboardSheetTextBoxOutput {
	return o
}

func (o DashboardSheetTextBoxOutput) ToDashboardSheetTextBoxOutputWithContext(ctx context.Context) DashboardSheetTextBoxOutput {
	return o
}

// The content that is displayed in the text box.
func (o DashboardSheetTextBoxOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSheetTextBox) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o DashboardSheetTextBoxOutput) Interactions() pulumi.AnyOutput {
	return o.ApplyT(func(v DashboardSheetTextBox) interface{} { return v.Interactions }).(pulumi.AnyOutput)
}

// The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
func (o DashboardSheetTextBoxOutput) SheetTextBoxId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSheetTextBox) string { return v.SheetTextBoxId }).(pulumi.StringOutput)
}

type DashboardSheetTextBoxArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetTextBoxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetTextBox)(nil)).Elem()
}

func (o DashboardSheetTextBoxArrayOutput) ToDashboardSheetTextBoxArrayOutput() DashboardSheetTextBoxArrayOutput {
	return o
}

func (o DashboardSheetTextBoxArrayOutput) ToDashboardSheetTextBoxArrayOutputWithContext(ctx context.Context) DashboardSheetTextBoxArrayOutput {
	return o
}

func (o DashboardSheetTextBoxArrayOutput) Index(i pulumi.IntInput) DashboardSheetTextBoxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheetTextBox {
		return vs[0].([]DashboardSheetTextBox)[vs[1].(int)]
	}).(DashboardSheetTextBoxOutput)
}

type DashboardSheetVisualScopingConfiguration struct {
	// The scope of the applied entities. Choose one of the following options:
	//
	// - `ALL_VISUALS`
	// - `SELECTED_VISUALS`
	Scope DashboardFilterVisualScope `pulumi:"scope"`
	// The selected sheet that the filter is applied to.
	SheetId string `pulumi:"sheetId"`
	// The selected visuals that the filter is applied to.
	VisualIds []string `pulumi:"visualIds"`
}

// DashboardSheetVisualScopingConfigurationInput is an input type that accepts DashboardSheetVisualScopingConfigurationArgs and DashboardSheetVisualScopingConfigurationOutput values.
// You can construct a concrete instance of `DashboardSheetVisualScopingConfigurationInput` via:
//
//	DashboardSheetVisualScopingConfigurationArgs{...}
type DashboardSheetVisualScopingConfigurationInput interface {
	pulumi.Input

	ToDashboardSheetVisualScopingConfigurationOutput() DashboardSheetVisualScopingConfigurationOutput
	ToDashboardSheetVisualScopingConfigurationOutputWithContext(context.Context) DashboardSheetVisualScopingConfigurationOutput
}

type DashboardSheetVisualScopingConfigurationArgs struct {
	// The scope of the applied entities. Choose one of the following options:
	//
	// - `ALL_VISUALS`
	// - `SELECTED_VISUALS`
	Scope DashboardFilterVisualScopeInput `pulumi:"scope"`
	// The selected sheet that the filter is applied to.
	SheetId pulumi.StringInput `pulumi:"sheetId"`
	// The selected visuals that the filter is applied to.
	VisualIds pulumi.StringArrayInput `pulumi:"visualIds"`
}

func (DashboardSheetVisualScopingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetVisualScopingConfiguration)(nil)).Elem()
}

func (i DashboardSheetVisualScopingConfigurationArgs) ToDashboardSheetVisualScopingConfigurationOutput() DashboardSheetVisualScopingConfigurationOutput {
	return i.ToDashboardSheetVisualScopingConfigurationOutputWithContext(context.Background())
}

func (i DashboardSheetVisualScopingConfigurationArgs) ToDashboardSheetVisualScopingConfigurationOutputWithContext(ctx context.Context) DashboardSheetVisualScopingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetVisualScopingConfigurationOutput)
}

// DashboardSheetVisualScopingConfigurationArrayInput is an input type that accepts DashboardSheetVisualScopingConfigurationArray and DashboardSheetVisualScopingConfigurationArrayOutput values.
// You can construct a concrete instance of `DashboardSheetVisualScopingConfigurationArrayInput` via:
//
//	DashboardSheetVisualScopingConfigurationArray{ DashboardSheetVisualScopingConfigurationArgs{...} }
type DashboardSheetVisualScopingConfigurationArrayInput interface {
	pulumi.Input

	ToDashboardSheetVisualScopingConfigurationArrayOutput() DashboardSheetVisualScopingConfigurationArrayOutput
	ToDashboardSheetVisualScopingConfigurationArrayOutputWithContext(context.Context) DashboardSheetVisualScopingConfigurationArrayOutput
}

type DashboardSheetVisualScopingConfigurationArray []DashboardSheetVisualScopingConfigurationInput

func (DashboardSheetVisualScopingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetVisualScopingConfiguration)(nil)).Elem()
}

func (i DashboardSheetVisualScopingConfigurationArray) ToDashboardSheetVisualScopingConfigurationArrayOutput() DashboardSheetVisualScopingConfigurationArrayOutput {
	return i.ToDashboardSheetVisualScopingConfigurationArrayOutputWithContext(context.Background())
}

func (i DashboardSheetVisualScopingConfigurationArray) ToDashboardSheetVisualScopingConfigurationArrayOutputWithContext(ctx context.Context) DashboardSheetVisualScopingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSheetVisualScopingConfigurationArrayOutput)
}

type DashboardSheetVisualScopingConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardSheetVisualScopingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSheetVisualScopingConfiguration)(nil)).Elem()
}

func (o DashboardSheetVisualScopingConfigurationOutput) ToDashboardSheetVisualScopingConfigurationOutput() DashboardSheetVisualScopingConfigurationOutput {
	return o
}

func (o DashboardSheetVisualScopingConfigurationOutput) ToDashboardSheetVisualScopingConfigurationOutputWithContext(ctx context.Context) DashboardSheetVisualScopingConfigurationOutput {
	return o
}

// The scope of the applied entities. Choose one of the following options:
//
// - `ALL_VISUALS`
// - `SELECTED_VISUALS`
func (o DashboardSheetVisualScopingConfigurationOutput) Scope() DashboardFilterVisualScopeOutput {
	return o.ApplyT(func(v DashboardSheetVisualScopingConfiguration) DashboardFilterVisualScope { return v.Scope }).(DashboardFilterVisualScopeOutput)
}

// The selected sheet that the filter is applied to.
func (o DashboardSheetVisualScopingConfigurationOutput) SheetId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSheetVisualScopingConfiguration) string { return v.SheetId }).(pulumi.StringOutput)
}

// The selected visuals that the filter is applied to.
func (o DashboardSheetVisualScopingConfigurationOutput) VisualIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardSheetVisualScopingConfiguration) []string { return v.VisualIds }).(pulumi.StringArrayOutput)
}

type DashboardSheetVisualScopingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DashboardSheetVisualScopingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardSheetVisualScopingConfiguration)(nil)).Elem()
}

func (o DashboardSheetVisualScopingConfigurationArrayOutput) ToDashboardSheetVisualScopingConfigurationArrayOutput() DashboardSheetVisualScopingConfigurationArrayOutput {
	return o
}

func (o DashboardSheetVisualScopingConfigurationArrayOutput) ToDashboardSheetVisualScopingConfigurationArrayOutputWithContext(ctx context.Context) DashboardSheetVisualScopingConfigurationArrayOutput {
	return o
}

func (o DashboardSheetVisualScopingConfigurationArrayOutput) Index(i pulumi.IntInput) DashboardSheetVisualScopingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardSheetVisualScopingConfiguration {
		return vs[0].([]DashboardSheetVisualScopingConfiguration)[vs[1].(int)]
	}).(DashboardSheetVisualScopingConfigurationOutput)
}

type DashboardShortFormatText struct {
	// Plain text format.
	PlainText *string `pulumi:"plainText"`
	// Rich text. Examples of rich text include bold, underline, and italics.
	RichText *string `pulumi:"richText"`
}

// DashboardShortFormatTextInput is an input type that accepts DashboardShortFormatTextArgs and DashboardShortFormatTextOutput values.
// You can construct a concrete instance of `DashboardShortFormatTextInput` via:
//
//	DashboardShortFormatTextArgs{...}
type DashboardShortFormatTextInput interface {
	pulumi.Input

	ToDashboardShortFormatTextOutput() DashboardShortFormatTextOutput
	ToDashboardShortFormatTextOutputWithContext(context.Context) DashboardShortFormatTextOutput
}

type DashboardShortFormatTextArgs struct {
	// Plain text format.
	PlainText pulumi.StringPtrInput `pulumi:"plainText"`
	// Rich text. Examples of rich text include bold, underline, and italics.
	RichText pulumi.StringPtrInput `pulumi:"richText"`
}

func (DashboardShortFormatTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardShortFormatText)(nil)).Elem()
}

func (i DashboardShortFormatTextArgs) ToDashboardShortFormatTextOutput() DashboardShortFormatTextOutput {
	return i.ToDashboardShortFormatTextOutputWithContext(context.Background())
}

func (i DashboardShortFormatTextArgs) ToDashboardShortFormatTextOutputWithContext(ctx context.Context) DashboardShortFormatTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardShortFormatTextOutput)
}

func (i DashboardShortFormatTextArgs) ToDashboardShortFormatTextPtrOutput() DashboardShortFormatTextPtrOutput {
	return i.ToDashboardShortFormatTextPtrOutputWithContext(context.Background())
}

func (i DashboardShortFormatTextArgs) ToDashboardShortFormatTextPtrOutputWithContext(ctx context.Context) DashboardShortFormatTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardShortFormatTextOutput).ToDashboardShortFormatTextPtrOutputWithContext(ctx)
}

// DashboardShortFormatTextPtrInput is an input type that accepts DashboardShortFormatTextArgs, DashboardShortFormatTextPtr and DashboardShortFormatTextPtrOutput values.
// You can construct a concrete instance of `DashboardShortFormatTextPtrInput` via:
//
//	        DashboardShortFormatTextArgs{...}
//
//	or:
//
//	        nil
type DashboardShortFormatTextPtrInput interface {
	pulumi.Input

	ToDashboardShortFormatTextPtrOutput() DashboardShortFormatTextPtrOutput
	ToDashboardShortFormatTextPtrOutputWithContext(context.Context) DashboardShortFormatTextPtrOutput
}

type dashboardShortFormatTextPtrType DashboardShortFormatTextArgs

func DashboardShortFormatTextPtr(v *DashboardShortFormatTextArgs) DashboardShortFormatTextPtrInput {
	return (*dashboardShortFormatTextPtrType)(v)
}

func (*dashboardShortFormatTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardShortFormatText)(nil)).Elem()
}

func (i *dashboardShortFormatTextPtrType) ToDashboardShortFormatTextPtrOutput() DashboardShortFormatTextPtrOutput {
	return i.ToDashboardShortFormatTextPtrOutputWithContext(context.Background())
}

func (i *dashboardShortFormatTextPtrType) ToDashboardShortFormatTextPtrOutputWithContext(ctx context.Context) DashboardShortFormatTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardShortFormatTextPtrOutput)
}

type DashboardShortFormatTextOutput struct{ *pulumi.OutputState }

func (DashboardShortFormatTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardShortFormatText)(nil)).Elem()
}

func (o DashboardShortFormatTextOutput) ToDashboardShortFormatTextOutput() DashboardShortFormatTextOutput {
	return o
}

func (o DashboardShortFormatTextOutput) ToDashboardShortFormatTextOutputWithContext(ctx context.Context) DashboardShortFormatTextOutput {
	return o
}

func (o DashboardShortFormatTextOutput) ToDashboardShortFormatTextPtrOutput() DashboardShortFormatTextPtrOutput {
	return o.ToDashboardShortFormatTextPtrOutputWithContext(context.Background())
}

func (o DashboardShortFormatTextOutput) ToDashboardShortFormatTextPtrOutputWithContext(ctx context.Context) DashboardShortFormatTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardShortFormatText) *DashboardShortFormatText {
		return &v
	}).(DashboardShortFormatTextPtrOutput)
}

// Plain text format.
func (o DashboardShortFormatTextOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardShortFormatText) *string { return v.PlainText }).(pulumi.StringPtrOutput)
}

// Rich text. Examples of rich text include bold, underline, and italics.
func (o DashboardShortFormatTextOutput) RichText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardShortFormatText) *string { return v.RichText }).(pulumi.StringPtrOutput)
}

type DashboardShortFormatTextPtrOutput struct{ *pulumi.OutputState }

func (DashboardShortFormatTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardShortFormatText)(nil)).Elem()
}

func (o DashboardShortFormatTextPtrOutput) ToDashboardShortFormatTextPtrOutput() DashboardShortFormatTextPtrOutput {
	return o
}

func (o DashboardShortFormatTextPtrOutput) ToDashboardShortFormatTextPtrOutputWithContext(ctx context.Context) DashboardShortFormatTextPtrOutput {
	return o
}

func (o DashboardShortFormatTextPtrOutput) Elem() DashboardShortFormatTextOutput {
	return o.ApplyT(func(v *DashboardShortFormatText) DashboardShortFormatText {
		if v != nil {
			return *v
		}
		var ret DashboardShortFormatText
		return ret
	}).(DashboardShortFormatTextOutput)
}

// Plain text format.
func (o DashboardShortFormatTextPtrOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardShortFormatText) *string {
		if v == nil {
			return nil
		}
		return v.PlainText
	}).(pulumi.StringPtrOutput)
}

// Rich text. Examples of rich text include bold, underline, and italics.
func (o DashboardShortFormatTextPtrOutput) RichText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardShortFormatText) *string {
		if v == nil {
			return nil
		}
		return v.RichText
	}).(pulumi.StringPtrOutput)
}

type DashboardSimpleClusterMarker struct {
	// The color of the simple cluster marker.
	Color *string `pulumi:"color"`
}

// DashboardSimpleClusterMarkerInput is an input type that accepts DashboardSimpleClusterMarkerArgs and DashboardSimpleClusterMarkerOutput values.
// You can construct a concrete instance of `DashboardSimpleClusterMarkerInput` via:
//
//	DashboardSimpleClusterMarkerArgs{...}
type DashboardSimpleClusterMarkerInput interface {
	pulumi.Input

	ToDashboardSimpleClusterMarkerOutput() DashboardSimpleClusterMarkerOutput
	ToDashboardSimpleClusterMarkerOutputWithContext(context.Context) DashboardSimpleClusterMarkerOutput
}

type DashboardSimpleClusterMarkerArgs struct {
	// The color of the simple cluster marker.
	Color pulumi.StringPtrInput `pulumi:"color"`
}

func (DashboardSimpleClusterMarkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSimpleClusterMarker)(nil)).Elem()
}

func (i DashboardSimpleClusterMarkerArgs) ToDashboardSimpleClusterMarkerOutput() DashboardSimpleClusterMarkerOutput {
	return i.ToDashboardSimpleClusterMarkerOutputWithContext(context.Background())
}

func (i DashboardSimpleClusterMarkerArgs) ToDashboardSimpleClusterMarkerOutputWithContext(ctx context.Context) DashboardSimpleClusterMarkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSimpleClusterMarkerOutput)
}

func (i DashboardSimpleClusterMarkerArgs) ToDashboardSimpleClusterMarkerPtrOutput() DashboardSimpleClusterMarkerPtrOutput {
	return i.ToDashboardSimpleClusterMarkerPtrOutputWithContext(context.Background())
}

func (i DashboardSimpleClusterMarkerArgs) ToDashboardSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) DashboardSimpleClusterMarkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSimpleClusterMarkerOutput).ToDashboardSimpleClusterMarkerPtrOutputWithContext(ctx)
}

// DashboardSimpleClusterMarkerPtrInput is an input type that accepts DashboardSimpleClusterMarkerArgs, DashboardSimpleClusterMarkerPtr and DashboardSimpleClusterMarkerPtrOutput values.
// You can construct a concrete instance of `DashboardSimpleClusterMarkerPtrInput` via:
//
//	        DashboardSimpleClusterMarkerArgs{...}
//
//	or:
//
//	        nil
type DashboardSimpleClusterMarkerPtrInput interface {
	pulumi.Input

	ToDashboardSimpleClusterMarkerPtrOutput() DashboardSimpleClusterMarkerPtrOutput
	ToDashboardSimpleClusterMarkerPtrOutputWithContext(context.Context) DashboardSimpleClusterMarkerPtrOutput
}

type dashboardSimpleClusterMarkerPtrType DashboardSimpleClusterMarkerArgs

func DashboardSimpleClusterMarkerPtr(v *DashboardSimpleClusterMarkerArgs) DashboardSimpleClusterMarkerPtrInput {
	return (*dashboardSimpleClusterMarkerPtrType)(v)
}

func (*dashboardSimpleClusterMarkerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSimpleClusterMarker)(nil)).Elem()
}

func (i *dashboardSimpleClusterMarkerPtrType) ToDashboardSimpleClusterMarkerPtrOutput() DashboardSimpleClusterMarkerPtrOutput {
	return i.ToDashboardSimpleClusterMarkerPtrOutputWithContext(context.Background())
}

func (i *dashboardSimpleClusterMarkerPtrType) ToDashboardSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) DashboardSimpleClusterMarkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSimpleClusterMarkerPtrOutput)
}

type DashboardSimpleClusterMarkerOutput struct{ *pulumi.OutputState }

func (DashboardSimpleClusterMarkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSimpleClusterMarker)(nil)).Elem()
}

func (o DashboardSimpleClusterMarkerOutput) ToDashboardSimpleClusterMarkerOutput() DashboardSimpleClusterMarkerOutput {
	return o
}

func (o DashboardSimpleClusterMarkerOutput) ToDashboardSimpleClusterMarkerOutputWithContext(ctx context.Context) DashboardSimpleClusterMarkerOutput {
	return o
}

func (o DashboardSimpleClusterMarkerOutput) ToDashboardSimpleClusterMarkerPtrOutput() DashboardSimpleClusterMarkerPtrOutput {
	return o.ToDashboardSimpleClusterMarkerPtrOutputWithContext(context.Background())
}

func (o DashboardSimpleClusterMarkerOutput) ToDashboardSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) DashboardSimpleClusterMarkerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSimpleClusterMarker) *DashboardSimpleClusterMarker {
		return &v
	}).(DashboardSimpleClusterMarkerPtrOutput)
}

// The color of the simple cluster marker.
func (o DashboardSimpleClusterMarkerOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSimpleClusterMarker) *string { return v.Color }).(pulumi.StringPtrOutput)
}

type DashboardSimpleClusterMarkerPtrOutput struct{ *pulumi.OutputState }

func (DashboardSimpleClusterMarkerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSimpleClusterMarker)(nil)).Elem()
}

func (o DashboardSimpleClusterMarkerPtrOutput) ToDashboardSimpleClusterMarkerPtrOutput() DashboardSimpleClusterMarkerPtrOutput {
	return o
}

func (o DashboardSimpleClusterMarkerPtrOutput) ToDashboardSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) DashboardSimpleClusterMarkerPtrOutput {
	return o
}

func (o DashboardSimpleClusterMarkerPtrOutput) Elem() DashboardSimpleClusterMarkerOutput {
	return o.ApplyT(func(v *DashboardSimpleClusterMarker) DashboardSimpleClusterMarker {
		if v != nil {
			return *v
		}
		var ret DashboardSimpleClusterMarker
		return ret
	}).(DashboardSimpleClusterMarkerOutput)
}

// The color of the simple cluster marker.
func (o DashboardSimpleClusterMarkerPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSimpleClusterMarker) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

type DashboardSingleAxisOptions struct {
	// The Y axis options of a single axis configuration.
	YAxisOptions *DashboardYAxisOptions `pulumi:"yAxisOptions"`
}

// DashboardSingleAxisOptionsInput is an input type that accepts DashboardSingleAxisOptionsArgs and DashboardSingleAxisOptionsOutput values.
// You can construct a concrete instance of `DashboardSingleAxisOptionsInput` via:
//
//	DashboardSingleAxisOptionsArgs{...}
type DashboardSingleAxisOptionsInput interface {
	pulumi.Input

	ToDashboardSingleAxisOptionsOutput() DashboardSingleAxisOptionsOutput
	ToDashboardSingleAxisOptionsOutputWithContext(context.Context) DashboardSingleAxisOptionsOutput
}

type DashboardSingleAxisOptionsArgs struct {
	// The Y axis options of a single axis configuration.
	YAxisOptions DashboardYAxisOptionsPtrInput `pulumi:"yAxisOptions"`
}

func (DashboardSingleAxisOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSingleAxisOptions)(nil)).Elem()
}

func (i DashboardSingleAxisOptionsArgs) ToDashboardSingleAxisOptionsOutput() DashboardSingleAxisOptionsOutput {
	return i.ToDashboardSingleAxisOptionsOutputWithContext(context.Background())
}

func (i DashboardSingleAxisOptionsArgs) ToDashboardSingleAxisOptionsOutputWithContext(ctx context.Context) DashboardSingleAxisOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSingleAxisOptionsOutput)
}

func (i DashboardSingleAxisOptionsArgs) ToDashboardSingleAxisOptionsPtrOutput() DashboardSingleAxisOptionsPtrOutput {
	return i.ToDashboardSingleAxisOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardSingleAxisOptionsArgs) ToDashboardSingleAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardSingleAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSingleAxisOptionsOutput).ToDashboardSingleAxisOptionsPtrOutputWithContext(ctx)
}

// DashboardSingleAxisOptionsPtrInput is an input type that accepts DashboardSingleAxisOptionsArgs, DashboardSingleAxisOptionsPtr and DashboardSingleAxisOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardSingleAxisOptionsPtrInput` via:
//
//	        DashboardSingleAxisOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardSingleAxisOptionsPtrInput interface {
	pulumi.Input

	ToDashboardSingleAxisOptionsPtrOutput() DashboardSingleAxisOptionsPtrOutput
	ToDashboardSingleAxisOptionsPtrOutputWithContext(context.Context) DashboardSingleAxisOptionsPtrOutput
}

type dashboardSingleAxisOptionsPtrType DashboardSingleAxisOptionsArgs

func DashboardSingleAxisOptionsPtr(v *DashboardSingleAxisOptionsArgs) DashboardSingleAxisOptionsPtrInput {
	return (*dashboardSingleAxisOptionsPtrType)(v)
}

func (*dashboardSingleAxisOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSingleAxisOptions)(nil)).Elem()
}

func (i *dashboardSingleAxisOptionsPtrType) ToDashboardSingleAxisOptionsPtrOutput() DashboardSingleAxisOptionsPtrOutput {
	return i.ToDashboardSingleAxisOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardSingleAxisOptionsPtrType) ToDashboardSingleAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardSingleAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSingleAxisOptionsPtrOutput)
}

type DashboardSingleAxisOptionsOutput struct{ *pulumi.OutputState }

func (DashboardSingleAxisOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSingleAxisOptions)(nil)).Elem()
}

func (o DashboardSingleAxisOptionsOutput) ToDashboardSingleAxisOptionsOutput() DashboardSingleAxisOptionsOutput {
	return o
}

func (o DashboardSingleAxisOptionsOutput) ToDashboardSingleAxisOptionsOutputWithContext(ctx context.Context) DashboardSingleAxisOptionsOutput {
	return o
}

func (o DashboardSingleAxisOptionsOutput) ToDashboardSingleAxisOptionsPtrOutput() DashboardSingleAxisOptionsPtrOutput {
	return o.ToDashboardSingleAxisOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardSingleAxisOptionsOutput) ToDashboardSingleAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardSingleAxisOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSingleAxisOptions) *DashboardSingleAxisOptions {
		return &v
	}).(DashboardSingleAxisOptionsPtrOutput)
}

// The Y axis options of a single axis configuration.
func (o DashboardSingleAxisOptionsOutput) YAxisOptions() DashboardYAxisOptionsPtrOutput {
	return o.ApplyT(func(v DashboardSingleAxisOptions) *DashboardYAxisOptions { return v.YAxisOptions }).(DashboardYAxisOptionsPtrOutput)
}

type DashboardSingleAxisOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardSingleAxisOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSingleAxisOptions)(nil)).Elem()
}

func (o DashboardSingleAxisOptionsPtrOutput) ToDashboardSingleAxisOptionsPtrOutput() DashboardSingleAxisOptionsPtrOutput {
	return o
}

func (o DashboardSingleAxisOptionsPtrOutput) ToDashboardSingleAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardSingleAxisOptionsPtrOutput {
	return o
}

func (o DashboardSingleAxisOptionsPtrOutput) Elem() DashboardSingleAxisOptionsOutput {
	return o.ApplyT(func(v *DashboardSingleAxisOptions) DashboardSingleAxisOptions {
		if v != nil {
			return *v
		}
		var ret DashboardSingleAxisOptions
		return ret
	}).(DashboardSingleAxisOptionsOutput)
}

// The Y axis options of a single axis configuration.
func (o DashboardSingleAxisOptionsPtrOutput) YAxisOptions() DashboardYAxisOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardSingleAxisOptions) *DashboardYAxisOptions {
		if v == nil {
			return nil
		}
		return v.YAxisOptions
	}).(DashboardYAxisOptionsPtrOutput)
}

type DashboardSliderControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *DashboardSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *DashboardLabelOptions `pulumi:"titleOptions"`
}

// DashboardSliderControlDisplayOptionsInput is an input type that accepts DashboardSliderControlDisplayOptionsArgs and DashboardSliderControlDisplayOptionsOutput values.
// You can construct a concrete instance of `DashboardSliderControlDisplayOptionsInput` via:
//
//	DashboardSliderControlDisplayOptionsArgs{...}
type DashboardSliderControlDisplayOptionsInput interface {
	pulumi.Input

	ToDashboardSliderControlDisplayOptionsOutput() DashboardSliderControlDisplayOptionsOutput
	ToDashboardSliderControlDisplayOptionsOutputWithContext(context.Context) DashboardSliderControlDisplayOptionsOutput
}

type DashboardSliderControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions DashboardSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions DashboardLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (DashboardSliderControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSliderControlDisplayOptions)(nil)).Elem()
}

func (i DashboardSliderControlDisplayOptionsArgs) ToDashboardSliderControlDisplayOptionsOutput() DashboardSliderControlDisplayOptionsOutput {
	return i.ToDashboardSliderControlDisplayOptionsOutputWithContext(context.Background())
}

func (i DashboardSliderControlDisplayOptionsArgs) ToDashboardSliderControlDisplayOptionsOutputWithContext(ctx context.Context) DashboardSliderControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSliderControlDisplayOptionsOutput)
}

func (i DashboardSliderControlDisplayOptionsArgs) ToDashboardSliderControlDisplayOptionsPtrOutput() DashboardSliderControlDisplayOptionsPtrOutput {
	return i.ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardSliderControlDisplayOptionsArgs) ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardSliderControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSliderControlDisplayOptionsOutput).ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(ctx)
}

// DashboardSliderControlDisplayOptionsPtrInput is an input type that accepts DashboardSliderControlDisplayOptionsArgs, DashboardSliderControlDisplayOptionsPtr and DashboardSliderControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardSliderControlDisplayOptionsPtrInput` via:
//
//	        DashboardSliderControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardSliderControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToDashboardSliderControlDisplayOptionsPtrOutput() DashboardSliderControlDisplayOptionsPtrOutput
	ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(context.Context) DashboardSliderControlDisplayOptionsPtrOutput
}

type dashboardSliderControlDisplayOptionsPtrType DashboardSliderControlDisplayOptionsArgs

func DashboardSliderControlDisplayOptionsPtr(v *DashboardSliderControlDisplayOptionsArgs) DashboardSliderControlDisplayOptionsPtrInput {
	return (*dashboardSliderControlDisplayOptionsPtrType)(v)
}

func (*dashboardSliderControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSliderControlDisplayOptions)(nil)).Elem()
}

func (i *dashboardSliderControlDisplayOptionsPtrType) ToDashboardSliderControlDisplayOptionsPtrOutput() DashboardSliderControlDisplayOptionsPtrOutput {
	return i.ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardSliderControlDisplayOptionsPtrType) ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardSliderControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSliderControlDisplayOptionsPtrOutput)
}

type DashboardSliderControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (DashboardSliderControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSliderControlDisplayOptions)(nil)).Elem()
}

func (o DashboardSliderControlDisplayOptionsOutput) ToDashboardSliderControlDisplayOptionsOutput() DashboardSliderControlDisplayOptionsOutput {
	return o
}

func (o DashboardSliderControlDisplayOptionsOutput) ToDashboardSliderControlDisplayOptionsOutputWithContext(ctx context.Context) DashboardSliderControlDisplayOptionsOutput {
	return o
}

func (o DashboardSliderControlDisplayOptionsOutput) ToDashboardSliderControlDisplayOptionsPtrOutput() DashboardSliderControlDisplayOptionsPtrOutput {
	return o.ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardSliderControlDisplayOptionsOutput) ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardSliderControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSliderControlDisplayOptions) *DashboardSliderControlDisplayOptions {
		return &v
	}).(DashboardSliderControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o DashboardSliderControlDisplayOptionsOutput) InfoIconLabelOptions() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardSliderControlDisplayOptions) *DashboardSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o DashboardSliderControlDisplayOptionsOutput) TitleOptions() DashboardLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardSliderControlDisplayOptions) *DashboardLabelOptions { return v.TitleOptions }).(DashboardLabelOptionsPtrOutput)
}

type DashboardSliderControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardSliderControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSliderControlDisplayOptions)(nil)).Elem()
}

func (o DashboardSliderControlDisplayOptionsPtrOutput) ToDashboardSliderControlDisplayOptionsPtrOutput() DashboardSliderControlDisplayOptionsPtrOutput {
	return o
}

func (o DashboardSliderControlDisplayOptionsPtrOutput) ToDashboardSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardSliderControlDisplayOptionsPtrOutput {
	return o
}

func (o DashboardSliderControlDisplayOptionsPtrOutput) Elem() DashboardSliderControlDisplayOptionsOutput {
	return o.ApplyT(func(v *DashboardSliderControlDisplayOptions) DashboardSliderControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret DashboardSliderControlDisplayOptions
		return ret
	}).(DashboardSliderControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o DashboardSliderControlDisplayOptionsPtrOutput) InfoIconLabelOptions() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardSliderControlDisplayOptions) *DashboardSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o DashboardSliderControlDisplayOptionsPtrOutput) TitleOptions() DashboardLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardSliderControlDisplayOptions) *DashboardLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(DashboardLabelOptionsPtrOutput)
}

type DashboardSmallMultiplesAxisProperties struct {
	// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
	Placement *DashboardSmallMultiplesAxisPlacement `pulumi:"placement"`
	// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
	Scale *DashboardSmallMultiplesAxisScale `pulumi:"scale"`
}

// DashboardSmallMultiplesAxisPropertiesInput is an input type that accepts DashboardSmallMultiplesAxisPropertiesArgs and DashboardSmallMultiplesAxisPropertiesOutput values.
// You can construct a concrete instance of `DashboardSmallMultiplesAxisPropertiesInput` via:
//
//	DashboardSmallMultiplesAxisPropertiesArgs{...}
type DashboardSmallMultiplesAxisPropertiesInput interface {
	pulumi.Input

	ToDashboardSmallMultiplesAxisPropertiesOutput() DashboardSmallMultiplesAxisPropertiesOutput
	ToDashboardSmallMultiplesAxisPropertiesOutputWithContext(context.Context) DashboardSmallMultiplesAxisPropertiesOutput
}

type DashboardSmallMultiplesAxisPropertiesArgs struct {
	// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
	Placement DashboardSmallMultiplesAxisPlacementPtrInput `pulumi:"placement"`
	// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
	Scale DashboardSmallMultiplesAxisScalePtrInput `pulumi:"scale"`
}

func (DashboardSmallMultiplesAxisPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSmallMultiplesAxisProperties)(nil)).Elem()
}

func (i DashboardSmallMultiplesAxisPropertiesArgs) ToDashboardSmallMultiplesAxisPropertiesOutput() DashboardSmallMultiplesAxisPropertiesOutput {
	return i.ToDashboardSmallMultiplesAxisPropertiesOutputWithContext(context.Background())
}

func (i DashboardSmallMultiplesAxisPropertiesArgs) ToDashboardSmallMultiplesAxisPropertiesOutputWithContext(ctx context.Context) DashboardSmallMultiplesAxisPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSmallMultiplesAxisPropertiesOutput)
}

func (i DashboardSmallMultiplesAxisPropertiesArgs) ToDashboardSmallMultiplesAxisPropertiesPtrOutput() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return i.ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Background())
}

func (i DashboardSmallMultiplesAxisPropertiesArgs) ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSmallMultiplesAxisPropertiesOutput).ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx)
}

// DashboardSmallMultiplesAxisPropertiesPtrInput is an input type that accepts DashboardSmallMultiplesAxisPropertiesArgs, DashboardSmallMultiplesAxisPropertiesPtr and DashboardSmallMultiplesAxisPropertiesPtrOutput values.
// You can construct a concrete instance of `DashboardSmallMultiplesAxisPropertiesPtrInput` via:
//
//	        DashboardSmallMultiplesAxisPropertiesArgs{...}
//
//	or:
//
//	        nil
type DashboardSmallMultiplesAxisPropertiesPtrInput interface {
	pulumi.Input

	ToDashboardSmallMultiplesAxisPropertiesPtrOutput() DashboardSmallMultiplesAxisPropertiesPtrOutput
	ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Context) DashboardSmallMultiplesAxisPropertiesPtrOutput
}

type dashboardSmallMultiplesAxisPropertiesPtrType DashboardSmallMultiplesAxisPropertiesArgs

func DashboardSmallMultiplesAxisPropertiesPtr(v *DashboardSmallMultiplesAxisPropertiesArgs) DashboardSmallMultiplesAxisPropertiesPtrInput {
	return (*dashboardSmallMultiplesAxisPropertiesPtrType)(v)
}

func (*dashboardSmallMultiplesAxisPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSmallMultiplesAxisProperties)(nil)).Elem()
}

func (i *dashboardSmallMultiplesAxisPropertiesPtrType) ToDashboardSmallMultiplesAxisPropertiesPtrOutput() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return i.ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Background())
}

func (i *dashboardSmallMultiplesAxisPropertiesPtrType) ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSmallMultiplesAxisPropertiesPtrOutput)
}

type DashboardSmallMultiplesAxisPropertiesOutput struct{ *pulumi.OutputState }

func (DashboardSmallMultiplesAxisPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSmallMultiplesAxisProperties)(nil)).Elem()
}

func (o DashboardSmallMultiplesAxisPropertiesOutput) ToDashboardSmallMultiplesAxisPropertiesOutput() DashboardSmallMultiplesAxisPropertiesOutput {
	return o
}

func (o DashboardSmallMultiplesAxisPropertiesOutput) ToDashboardSmallMultiplesAxisPropertiesOutputWithContext(ctx context.Context) DashboardSmallMultiplesAxisPropertiesOutput {
	return o
}

func (o DashboardSmallMultiplesAxisPropertiesOutput) ToDashboardSmallMultiplesAxisPropertiesPtrOutput() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o.ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Background())
}

func (o DashboardSmallMultiplesAxisPropertiesOutput) ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSmallMultiplesAxisProperties) *DashboardSmallMultiplesAxisProperties {
		return &v
	}).(DashboardSmallMultiplesAxisPropertiesPtrOutput)
}

// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
func (o DashboardSmallMultiplesAxisPropertiesOutput) Placement() DashboardSmallMultiplesAxisPlacementPtrOutput {
	return o.ApplyT(func(v DashboardSmallMultiplesAxisProperties) *DashboardSmallMultiplesAxisPlacement {
		return v.Placement
	}).(DashboardSmallMultiplesAxisPlacementPtrOutput)
}

// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
func (o DashboardSmallMultiplesAxisPropertiesOutput) Scale() DashboardSmallMultiplesAxisScalePtrOutput {
	return o.ApplyT(func(v DashboardSmallMultiplesAxisProperties) *DashboardSmallMultiplesAxisScale { return v.Scale }).(DashboardSmallMultiplesAxisScalePtrOutput)
}

type DashboardSmallMultiplesAxisPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DashboardSmallMultiplesAxisPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSmallMultiplesAxisProperties)(nil)).Elem()
}

func (o DashboardSmallMultiplesAxisPropertiesPtrOutput) ToDashboardSmallMultiplesAxisPropertiesPtrOutput() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o
}

func (o DashboardSmallMultiplesAxisPropertiesPtrOutput) ToDashboardSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o
}

func (o DashboardSmallMultiplesAxisPropertiesPtrOutput) Elem() DashboardSmallMultiplesAxisPropertiesOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesAxisProperties) DashboardSmallMultiplesAxisProperties {
		if v != nil {
			return *v
		}
		var ret DashboardSmallMultiplesAxisProperties
		return ret
	}).(DashboardSmallMultiplesAxisPropertiesOutput)
}

// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
func (o DashboardSmallMultiplesAxisPropertiesPtrOutput) Placement() DashboardSmallMultiplesAxisPlacementPtrOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesAxisProperties) *DashboardSmallMultiplesAxisPlacement {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(DashboardSmallMultiplesAxisPlacementPtrOutput)
}

// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
func (o DashboardSmallMultiplesAxisPropertiesPtrOutput) Scale() DashboardSmallMultiplesAxisScalePtrOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesAxisProperties) *DashboardSmallMultiplesAxisScale {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(DashboardSmallMultiplesAxisScalePtrOutput)
}

type DashboardSmallMultiplesOptions struct {
	// Sets the maximum number of visible columns to display in the grid of small multiples panels.
	//
	// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
	MaxVisibleColumns *float64 `pulumi:"maxVisibleColumns"`
	// Sets the maximum number of visible rows to display in the grid of small multiples panels.
	//
	// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
	MaxVisibleRows *float64 `pulumi:"maxVisibleRows"`
	// Configures the display options for each small multiples panel.
	PanelConfiguration *DashboardPanelConfiguration `pulumi:"panelConfiguration"`
	// The properties of a small multiples X axis.
	XAxis *DashboardSmallMultiplesAxisProperties `pulumi:"xAxis"`
	// The properties of a small multiples Y axis.
	YAxis *DashboardSmallMultiplesAxisProperties `pulumi:"yAxis"`
}

// DashboardSmallMultiplesOptionsInput is an input type that accepts DashboardSmallMultiplesOptionsArgs and DashboardSmallMultiplesOptionsOutput values.
// You can construct a concrete instance of `DashboardSmallMultiplesOptionsInput` via:
//
//	DashboardSmallMultiplesOptionsArgs{...}
type DashboardSmallMultiplesOptionsInput interface {
	pulumi.Input

	ToDashboardSmallMultiplesOptionsOutput() DashboardSmallMultiplesOptionsOutput
	ToDashboardSmallMultiplesOptionsOutputWithContext(context.Context) DashboardSmallMultiplesOptionsOutput
}

type DashboardSmallMultiplesOptionsArgs struct {
	// Sets the maximum number of visible columns to display in the grid of small multiples panels.
	//
	// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
	MaxVisibleColumns pulumi.Float64PtrInput `pulumi:"maxVisibleColumns"`
	// Sets the maximum number of visible rows to display in the grid of small multiples panels.
	//
	// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
	MaxVisibleRows pulumi.Float64PtrInput `pulumi:"maxVisibleRows"`
	// Configures the display options for each small multiples panel.
	PanelConfiguration DashboardPanelConfigurationPtrInput `pulumi:"panelConfiguration"`
	// The properties of a small multiples X axis.
	XAxis DashboardSmallMultiplesAxisPropertiesPtrInput `pulumi:"xAxis"`
	// The properties of a small multiples Y axis.
	YAxis DashboardSmallMultiplesAxisPropertiesPtrInput `pulumi:"yAxis"`
}

func (DashboardSmallMultiplesOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSmallMultiplesOptions)(nil)).Elem()
}

func (i DashboardSmallMultiplesOptionsArgs) ToDashboardSmallMultiplesOptionsOutput() DashboardSmallMultiplesOptionsOutput {
	return i.ToDashboardSmallMultiplesOptionsOutputWithContext(context.Background())
}

func (i DashboardSmallMultiplesOptionsArgs) ToDashboardSmallMultiplesOptionsOutputWithContext(ctx context.Context) DashboardSmallMultiplesOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSmallMultiplesOptionsOutput)
}

func (i DashboardSmallMultiplesOptionsArgs) ToDashboardSmallMultiplesOptionsPtrOutput() DashboardSmallMultiplesOptionsPtrOutput {
	return i.ToDashboardSmallMultiplesOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardSmallMultiplesOptionsArgs) ToDashboardSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSmallMultiplesOptionsOutput).ToDashboardSmallMultiplesOptionsPtrOutputWithContext(ctx)
}

// DashboardSmallMultiplesOptionsPtrInput is an input type that accepts DashboardSmallMultiplesOptionsArgs, DashboardSmallMultiplesOptionsPtr and DashboardSmallMultiplesOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardSmallMultiplesOptionsPtrInput` via:
//
//	        DashboardSmallMultiplesOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardSmallMultiplesOptionsPtrInput interface {
	pulumi.Input

	ToDashboardSmallMultiplesOptionsPtrOutput() DashboardSmallMultiplesOptionsPtrOutput
	ToDashboardSmallMultiplesOptionsPtrOutputWithContext(context.Context) DashboardSmallMultiplesOptionsPtrOutput
}

type dashboardSmallMultiplesOptionsPtrType DashboardSmallMultiplesOptionsArgs

func DashboardSmallMultiplesOptionsPtr(v *DashboardSmallMultiplesOptionsArgs) DashboardSmallMultiplesOptionsPtrInput {
	return (*dashboardSmallMultiplesOptionsPtrType)(v)
}

func (*dashboardSmallMultiplesOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSmallMultiplesOptions)(nil)).Elem()
}

func (i *dashboardSmallMultiplesOptionsPtrType) ToDashboardSmallMultiplesOptionsPtrOutput() DashboardSmallMultiplesOptionsPtrOutput {
	return i.ToDashboardSmallMultiplesOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardSmallMultiplesOptionsPtrType) ToDashboardSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSmallMultiplesOptionsPtrOutput)
}

type DashboardSmallMultiplesOptionsOutput struct{ *pulumi.OutputState }

func (DashboardSmallMultiplesOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSmallMultiplesOptions)(nil)).Elem()
}

func (o DashboardSmallMultiplesOptionsOutput) ToDashboardSmallMultiplesOptionsOutput() DashboardSmallMultiplesOptionsOutput {
	return o
}

func (o DashboardSmallMultiplesOptionsOutput) ToDashboardSmallMultiplesOptionsOutputWithContext(ctx context.Context) DashboardSmallMultiplesOptionsOutput {
	return o
}

func (o DashboardSmallMultiplesOptionsOutput) ToDashboardSmallMultiplesOptionsPtrOutput() DashboardSmallMultiplesOptionsPtrOutput {
	return o.ToDashboardSmallMultiplesOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardSmallMultiplesOptionsOutput) ToDashboardSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSmallMultiplesOptions) *DashboardSmallMultiplesOptions {
		return &v
	}).(DashboardSmallMultiplesOptionsPtrOutput)
}

// Sets the maximum number of visible columns to display in the grid of small multiples panels.
//
// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
func (o DashboardSmallMultiplesOptionsOutput) MaxVisibleColumns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSmallMultiplesOptions) *float64 { return v.MaxVisibleColumns }).(pulumi.Float64PtrOutput)
}

// Sets the maximum number of visible rows to display in the grid of small multiples panels.
//
// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
func (o DashboardSmallMultiplesOptionsOutput) MaxVisibleRows() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardSmallMultiplesOptions) *float64 { return v.MaxVisibleRows }).(pulumi.Float64PtrOutput)
}

// Configures the display options for each small multiples panel.
func (o DashboardSmallMultiplesOptionsOutput) PanelConfiguration() DashboardPanelConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardSmallMultiplesOptions) *DashboardPanelConfiguration { return v.PanelConfiguration }).(DashboardPanelConfigurationPtrOutput)
}

// The properties of a small multiples X axis.
func (o DashboardSmallMultiplesOptionsOutput) XAxis() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v DashboardSmallMultiplesOptions) *DashboardSmallMultiplesAxisProperties { return v.XAxis }).(DashboardSmallMultiplesAxisPropertiesPtrOutput)
}

// The properties of a small multiples Y axis.
func (o DashboardSmallMultiplesOptionsOutput) YAxis() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v DashboardSmallMultiplesOptions) *DashboardSmallMultiplesAxisProperties { return v.YAxis }).(DashboardSmallMultiplesAxisPropertiesPtrOutput)
}

type DashboardSmallMultiplesOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardSmallMultiplesOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSmallMultiplesOptions)(nil)).Elem()
}

func (o DashboardSmallMultiplesOptionsPtrOutput) ToDashboardSmallMultiplesOptionsPtrOutput() DashboardSmallMultiplesOptionsPtrOutput {
	return o
}

func (o DashboardSmallMultiplesOptionsPtrOutput) ToDashboardSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) DashboardSmallMultiplesOptionsPtrOutput {
	return o
}

func (o DashboardSmallMultiplesOptionsPtrOutput) Elem() DashboardSmallMultiplesOptionsOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesOptions) DashboardSmallMultiplesOptions {
		if v != nil {
			return *v
		}
		var ret DashboardSmallMultiplesOptions
		return ret
	}).(DashboardSmallMultiplesOptionsOutput)
}

// Sets the maximum number of visible columns to display in the grid of small multiples panels.
//
// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
func (o DashboardSmallMultiplesOptionsPtrOutput) MaxVisibleColumns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxVisibleColumns
	}).(pulumi.Float64PtrOutput)
}

// Sets the maximum number of visible rows to display in the grid of small multiples panels.
//
// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
func (o DashboardSmallMultiplesOptionsPtrOutput) MaxVisibleRows() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxVisibleRows
	}).(pulumi.Float64PtrOutput)
}

// Configures the display options for each small multiples panel.
func (o DashboardSmallMultiplesOptionsPtrOutput) PanelConfiguration() DashboardPanelConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesOptions) *DashboardPanelConfiguration {
		if v == nil {
			return nil
		}
		return v.PanelConfiguration
	}).(DashboardPanelConfigurationPtrOutput)
}

// The properties of a small multiples X axis.
func (o DashboardSmallMultiplesOptionsPtrOutput) XAxis() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesOptions) *DashboardSmallMultiplesAxisProperties {
		if v == nil {
			return nil
		}
		return v.XAxis
	}).(DashboardSmallMultiplesAxisPropertiesPtrOutput)
}

// The properties of a small multiples Y axis.
func (o DashboardSmallMultiplesOptionsPtrOutput) YAxis() DashboardSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v *DashboardSmallMultiplesOptions) *DashboardSmallMultiplesAxisProperties {
		if v == nil {
			return nil
		}
		return v.YAxis
	}).(DashboardSmallMultiplesAxisPropertiesPtrOutput)
}

// <p>Dashboard source entity.</p>
type DashboardSourceEntity struct {
	// Source template.
	SourceTemplate *DashboardSourceTemplate `pulumi:"sourceTemplate"`
}

// DashboardSourceEntityInput is an input type that accepts DashboardSourceEntityArgs and DashboardSourceEntityOutput values.
// You can construct a concrete instance of `DashboardSourceEntityInput` via:
//
//	DashboardSourceEntityArgs{...}
type DashboardSourceEntityInput interface {
	pulumi.Input

	ToDashboardSourceEntityOutput() DashboardSourceEntityOutput
	ToDashboardSourceEntityOutputWithContext(context.Context) DashboardSourceEntityOutput
}

// <p>Dashboard source entity.</p>
type DashboardSourceEntityArgs struct {
	// Source template.
	SourceTemplate DashboardSourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (DashboardSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return i.ToDashboardSourceEntityOutputWithContext(context.Background())
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityOutput)
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return i.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (i DashboardSourceEntityArgs) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityOutput).ToDashboardSourceEntityPtrOutputWithContext(ctx)
}

// DashboardSourceEntityPtrInput is an input type that accepts DashboardSourceEntityArgs, DashboardSourceEntityPtr and DashboardSourceEntityPtrOutput values.
// You can construct a concrete instance of `DashboardSourceEntityPtrInput` via:
//
//	        DashboardSourceEntityArgs{...}
//
//	or:
//
//	        nil
type DashboardSourceEntityPtrInput interface {
	pulumi.Input

	ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput
	ToDashboardSourceEntityPtrOutputWithContext(context.Context) DashboardSourceEntityPtrOutput
}

type dashboardSourceEntityPtrType DashboardSourceEntityArgs

func DashboardSourceEntityPtr(v *DashboardSourceEntityArgs) DashboardSourceEntityPtrInput {
	return (*dashboardSourceEntityPtrType)(v)
}

func (*dashboardSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntity)(nil)).Elem()
}

func (i *dashboardSourceEntityPtrType) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return i.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (i *dashboardSourceEntityPtrType) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceEntityPtrOutput)
}

// <p>Dashboard source entity.</p>
type DashboardSourceEntityOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceEntity)(nil)).Elem()
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutput() DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityOutputWithContext(ctx context.Context) DashboardSourceEntityOutput {
	return o
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return o.ToDashboardSourceEntityPtrOutputWithContext(context.Background())
}

func (o DashboardSourceEntityOutput) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSourceEntity) *DashboardSourceEntity {
		return &v
	}).(DashboardSourceEntityPtrOutput)
}

// Source template.
func (o DashboardSourceEntityOutput) SourceTemplate() DashboardSourceTemplatePtrOutput {
	return o.ApplyT(func(v DashboardSourceEntity) *DashboardSourceTemplate { return v.SourceTemplate }).(DashboardSourceTemplatePtrOutput)
}

type DashboardSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (DashboardSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceEntity)(nil)).Elem()
}

func (o DashboardSourceEntityPtrOutput) ToDashboardSourceEntityPtrOutput() DashboardSourceEntityPtrOutput {
	return o
}

func (o DashboardSourceEntityPtrOutput) ToDashboardSourceEntityPtrOutputWithContext(ctx context.Context) DashboardSourceEntityPtrOutput {
	return o
}

func (o DashboardSourceEntityPtrOutput) Elem() DashboardSourceEntityOutput {
	return o.ApplyT(func(v *DashboardSourceEntity) DashboardSourceEntity {
		if v != nil {
			return *v
		}
		var ret DashboardSourceEntity
		return ret
	}).(DashboardSourceEntityOutput)
}

// Source template.
func (o DashboardSourceEntityPtrOutput) SourceTemplate() DashboardSourceTemplatePtrOutput {
	return o.ApplyT(func(v *DashboardSourceEntity) *DashboardSourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(DashboardSourceTemplatePtrOutput)
}

// <p>Dashboard source template.</p>
type DashboardSourceTemplate struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn string `pulumi:"arn"`
	// <p>Dataset references.</p>
	DataSetReferences []DashboardDataSetReference `pulumi:"dataSetReferences"`
}

// DashboardSourceTemplateInput is an input type that accepts DashboardSourceTemplateArgs and DashboardSourceTemplateOutput values.
// You can construct a concrete instance of `DashboardSourceTemplateInput` via:
//
//	DashboardSourceTemplateArgs{...}
type DashboardSourceTemplateInput interface {
	pulumi.Input

	ToDashboardSourceTemplateOutput() DashboardSourceTemplateOutput
	ToDashboardSourceTemplateOutputWithContext(context.Context) DashboardSourceTemplateOutput
}

// <p>Dashboard source template.</p>
type DashboardSourceTemplateArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
	// <p>Dataset references.</p>
	DataSetReferences DashboardDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (DashboardSourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceTemplate)(nil)).Elem()
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplateOutput() DashboardSourceTemplateOutput {
	return i.ToDashboardSourceTemplateOutputWithContext(context.Background())
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplateOutputWithContext(ctx context.Context) DashboardSourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceTemplateOutput)
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return i.ToDashboardSourceTemplatePtrOutputWithContext(context.Background())
}

func (i DashboardSourceTemplateArgs) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceTemplateOutput).ToDashboardSourceTemplatePtrOutputWithContext(ctx)
}

// DashboardSourceTemplatePtrInput is an input type that accepts DashboardSourceTemplateArgs, DashboardSourceTemplatePtr and DashboardSourceTemplatePtrOutput values.
// You can construct a concrete instance of `DashboardSourceTemplatePtrInput` via:
//
//	        DashboardSourceTemplateArgs{...}
//
//	or:
//
//	        nil
type DashboardSourceTemplatePtrInput interface {
	pulumi.Input

	ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput
	ToDashboardSourceTemplatePtrOutputWithContext(context.Context) DashboardSourceTemplatePtrOutput
}

type dashboardSourceTemplatePtrType DashboardSourceTemplateArgs

func DashboardSourceTemplatePtr(v *DashboardSourceTemplateArgs) DashboardSourceTemplatePtrInput {
	return (*dashboardSourceTemplatePtrType)(v)
}

func (*dashboardSourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceTemplate)(nil)).Elem()
}

func (i *dashboardSourceTemplatePtrType) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return i.ToDashboardSourceTemplatePtrOutputWithContext(context.Background())
}

func (i *dashboardSourceTemplatePtrType) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSourceTemplatePtrOutput)
}

// <p>Dashboard source template.</p>
type DashboardSourceTemplateOutput struct{ *pulumi.OutputState }

func (DashboardSourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSourceTemplate)(nil)).Elem()
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplateOutput() DashboardSourceTemplateOutput {
	return o
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplateOutputWithContext(ctx context.Context) DashboardSourceTemplateOutput {
	return o
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return o.ToDashboardSourceTemplatePtrOutputWithContext(context.Background())
}

func (o DashboardSourceTemplateOutput) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSourceTemplate) *DashboardSourceTemplate {
		return &v
	}).(DashboardSourceTemplatePtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardSourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

// <p>Dataset references.</p>
func (o DashboardSourceTemplateOutput) DataSetReferences() DashboardDataSetReferenceArrayOutput {
	return o.ApplyT(func(v DashboardSourceTemplate) []DashboardDataSetReference { return v.DataSetReferences }).(DashboardDataSetReferenceArrayOutput)
}

type DashboardSourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (DashboardSourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSourceTemplate)(nil)).Elem()
}

func (o DashboardSourceTemplatePtrOutput) ToDashboardSourceTemplatePtrOutput() DashboardSourceTemplatePtrOutput {
	return o
}

func (o DashboardSourceTemplatePtrOutput) ToDashboardSourceTemplatePtrOutputWithContext(ctx context.Context) DashboardSourceTemplatePtrOutput {
	return o
}

func (o DashboardSourceTemplatePtrOutput) Elem() DashboardSourceTemplateOutput {
	return o.ApplyT(func(v *DashboardSourceTemplate) DashboardSourceTemplate {
		if v != nil {
			return *v
		}
		var ret DashboardSourceTemplate
		return ret
	}).(DashboardSourceTemplateOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardSourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>Dataset references.</p>
func (o DashboardSourceTemplatePtrOutput) DataSetReferences() DashboardDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *DashboardSourceTemplate) []DashboardDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(DashboardDataSetReferenceArrayOutput)
}

type DashboardSpacing struct {
	// String based length that is composed of value and unit
	Bottom *string `pulumi:"bottom"`
	// String based length that is composed of value and unit
	Left *string `pulumi:"left"`
	// String based length that is composed of value and unit
	Right *string `pulumi:"right"`
	// String based length that is composed of value and unit
	Top *string `pulumi:"top"`
}

// DashboardSpacingInput is an input type that accepts DashboardSpacingArgs and DashboardSpacingOutput values.
// You can construct a concrete instance of `DashboardSpacingInput` via:
//
//	DashboardSpacingArgs{...}
type DashboardSpacingInput interface {
	pulumi.Input

	ToDashboardSpacingOutput() DashboardSpacingOutput
	ToDashboardSpacingOutputWithContext(context.Context) DashboardSpacingOutput
}

type DashboardSpacingArgs struct {
	// String based length that is composed of value and unit
	Bottom pulumi.StringPtrInput `pulumi:"bottom"`
	// String based length that is composed of value and unit
	Left pulumi.StringPtrInput `pulumi:"left"`
	// String based length that is composed of value and unit
	Right pulumi.StringPtrInput `pulumi:"right"`
	// String based length that is composed of value and unit
	Top pulumi.StringPtrInput `pulumi:"top"`
}

func (DashboardSpacingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSpacing)(nil)).Elem()
}

func (i DashboardSpacingArgs) ToDashboardSpacingOutput() DashboardSpacingOutput {
	return i.ToDashboardSpacingOutputWithContext(context.Background())
}

func (i DashboardSpacingArgs) ToDashboardSpacingOutputWithContext(ctx context.Context) DashboardSpacingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSpacingOutput)
}

func (i DashboardSpacingArgs) ToDashboardSpacingPtrOutput() DashboardSpacingPtrOutput {
	return i.ToDashboardSpacingPtrOutputWithContext(context.Background())
}

func (i DashboardSpacingArgs) ToDashboardSpacingPtrOutputWithContext(ctx context.Context) DashboardSpacingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSpacingOutput).ToDashboardSpacingPtrOutputWithContext(ctx)
}

// DashboardSpacingPtrInput is an input type that accepts DashboardSpacingArgs, DashboardSpacingPtr and DashboardSpacingPtrOutput values.
// You can construct a concrete instance of `DashboardSpacingPtrInput` via:
//
//	        DashboardSpacingArgs{...}
//
//	or:
//
//	        nil
type DashboardSpacingPtrInput interface {
	pulumi.Input

	ToDashboardSpacingPtrOutput() DashboardSpacingPtrOutput
	ToDashboardSpacingPtrOutputWithContext(context.Context) DashboardSpacingPtrOutput
}

type dashboardSpacingPtrType DashboardSpacingArgs

func DashboardSpacingPtr(v *DashboardSpacingArgs) DashboardSpacingPtrInput {
	return (*dashboardSpacingPtrType)(v)
}

func (*dashboardSpacingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSpacing)(nil)).Elem()
}

func (i *dashboardSpacingPtrType) ToDashboardSpacingPtrOutput() DashboardSpacingPtrOutput {
	return i.ToDashboardSpacingPtrOutputWithContext(context.Background())
}

func (i *dashboardSpacingPtrType) ToDashboardSpacingPtrOutputWithContext(ctx context.Context) DashboardSpacingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSpacingPtrOutput)
}

type DashboardSpacingOutput struct{ *pulumi.OutputState }

func (DashboardSpacingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSpacing)(nil)).Elem()
}

func (o DashboardSpacingOutput) ToDashboardSpacingOutput() DashboardSpacingOutput {
	return o
}

func (o DashboardSpacingOutput) ToDashboardSpacingOutputWithContext(ctx context.Context) DashboardSpacingOutput {
	return o
}

func (o DashboardSpacingOutput) ToDashboardSpacingPtrOutput() DashboardSpacingPtrOutput {
	return o.ToDashboardSpacingPtrOutputWithContext(context.Background())
}

func (o DashboardSpacingOutput) ToDashboardSpacingPtrOutputWithContext(ctx context.Context) DashboardSpacingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSpacing) *DashboardSpacing {
		return &v
	}).(DashboardSpacingPtrOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingOutput) Bottom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSpacing) *string { return v.Bottom }).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSpacing) *string { return v.Left }).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingOutput) Right() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSpacing) *string { return v.Right }).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSpacing) *string { return v.Top }).(pulumi.StringPtrOutput)
}

type DashboardSpacingPtrOutput struct{ *pulumi.OutputState }

func (DashboardSpacingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSpacing)(nil)).Elem()
}

func (o DashboardSpacingPtrOutput) ToDashboardSpacingPtrOutput() DashboardSpacingPtrOutput {
	return o
}

func (o DashboardSpacingPtrOutput) ToDashboardSpacingPtrOutputWithContext(ctx context.Context) DashboardSpacingPtrOutput {
	return o
}

func (o DashboardSpacingPtrOutput) Elem() DashboardSpacingOutput {
	return o.ApplyT(func(v *DashboardSpacing) DashboardSpacing {
		if v != nil {
			return *v
		}
		var ret DashboardSpacing
		return ret
	}).(DashboardSpacingOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingPtrOutput) Bottom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Bottom
	}).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingPtrOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Left
	}).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingPtrOutput) Right() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Right
	}).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o DashboardSpacingPtrOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.StringPtrOutput)
}

type DashboardSpatialStaticFile struct {
	// The source of the spatial static file.
	Source *DashboardStaticFileSource `pulumi:"source"`
	// The ID of the spatial static file.
	StaticFileId string `pulumi:"staticFileId"`
}

// DashboardSpatialStaticFileInput is an input type that accepts DashboardSpatialStaticFileArgs and DashboardSpatialStaticFileOutput values.
// You can construct a concrete instance of `DashboardSpatialStaticFileInput` via:
//
//	DashboardSpatialStaticFileArgs{...}
type DashboardSpatialStaticFileInput interface {
	pulumi.Input

	ToDashboardSpatialStaticFileOutput() DashboardSpatialStaticFileOutput
	ToDashboardSpatialStaticFileOutputWithContext(context.Context) DashboardSpatialStaticFileOutput
}

type DashboardSpatialStaticFileArgs struct {
	// The source of the spatial static file.
	Source DashboardStaticFileSourcePtrInput `pulumi:"source"`
	// The ID of the spatial static file.
	StaticFileId pulumi.StringInput `pulumi:"staticFileId"`
}

func (DashboardSpatialStaticFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSpatialStaticFile)(nil)).Elem()
}

func (i DashboardSpatialStaticFileArgs) ToDashboardSpatialStaticFileOutput() DashboardSpatialStaticFileOutput {
	return i.ToDashboardSpatialStaticFileOutputWithContext(context.Background())
}

func (i DashboardSpatialStaticFileArgs) ToDashboardSpatialStaticFileOutputWithContext(ctx context.Context) DashboardSpatialStaticFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSpatialStaticFileOutput)
}

func (i DashboardSpatialStaticFileArgs) ToDashboardSpatialStaticFilePtrOutput() DashboardSpatialStaticFilePtrOutput {
	return i.ToDashboardSpatialStaticFilePtrOutputWithContext(context.Background())
}

func (i DashboardSpatialStaticFileArgs) ToDashboardSpatialStaticFilePtrOutputWithContext(ctx context.Context) DashboardSpatialStaticFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSpatialStaticFileOutput).ToDashboardSpatialStaticFilePtrOutputWithContext(ctx)
}

// DashboardSpatialStaticFilePtrInput is an input type that accepts DashboardSpatialStaticFileArgs, DashboardSpatialStaticFilePtr and DashboardSpatialStaticFilePtrOutput values.
// You can construct a concrete instance of `DashboardSpatialStaticFilePtrInput` via:
//
//	        DashboardSpatialStaticFileArgs{...}
//
//	or:
//
//	        nil
type DashboardSpatialStaticFilePtrInput interface {
	pulumi.Input

	ToDashboardSpatialStaticFilePtrOutput() DashboardSpatialStaticFilePtrOutput
	ToDashboardSpatialStaticFilePtrOutputWithContext(context.Context) DashboardSpatialStaticFilePtrOutput
}

type dashboardSpatialStaticFilePtrType DashboardSpatialStaticFileArgs

func DashboardSpatialStaticFilePtr(v *DashboardSpatialStaticFileArgs) DashboardSpatialStaticFilePtrInput {
	return (*dashboardSpatialStaticFilePtrType)(v)
}

func (*dashboardSpatialStaticFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSpatialStaticFile)(nil)).Elem()
}

func (i *dashboardSpatialStaticFilePtrType) ToDashboardSpatialStaticFilePtrOutput() DashboardSpatialStaticFilePtrOutput {
	return i.ToDashboardSpatialStaticFilePtrOutputWithContext(context.Background())
}

func (i *dashboardSpatialStaticFilePtrType) ToDashboardSpatialStaticFilePtrOutputWithContext(ctx context.Context) DashboardSpatialStaticFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSpatialStaticFilePtrOutput)
}

type DashboardSpatialStaticFileOutput struct{ *pulumi.OutputState }

func (DashboardSpatialStaticFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSpatialStaticFile)(nil)).Elem()
}

func (o DashboardSpatialStaticFileOutput) ToDashboardSpatialStaticFileOutput() DashboardSpatialStaticFileOutput {
	return o
}

func (o DashboardSpatialStaticFileOutput) ToDashboardSpatialStaticFileOutputWithContext(ctx context.Context) DashboardSpatialStaticFileOutput {
	return o
}

func (o DashboardSpatialStaticFileOutput) ToDashboardSpatialStaticFilePtrOutput() DashboardSpatialStaticFilePtrOutput {
	return o.ToDashboardSpatialStaticFilePtrOutputWithContext(context.Background())
}

func (o DashboardSpatialStaticFileOutput) ToDashboardSpatialStaticFilePtrOutputWithContext(ctx context.Context) DashboardSpatialStaticFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSpatialStaticFile) *DashboardSpatialStaticFile {
		return &v
	}).(DashboardSpatialStaticFilePtrOutput)
}

// The source of the spatial static file.
func (o DashboardSpatialStaticFileOutput) Source() DashboardStaticFileSourcePtrOutput {
	return o.ApplyT(func(v DashboardSpatialStaticFile) *DashboardStaticFileSource { return v.Source }).(DashboardStaticFileSourcePtrOutput)
}

// The ID of the spatial static file.
func (o DashboardSpatialStaticFileOutput) StaticFileId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardSpatialStaticFile) string { return v.StaticFileId }).(pulumi.StringOutput)
}

type DashboardSpatialStaticFilePtrOutput struct{ *pulumi.OutputState }

func (DashboardSpatialStaticFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSpatialStaticFile)(nil)).Elem()
}

func (o DashboardSpatialStaticFilePtrOutput) ToDashboardSpatialStaticFilePtrOutput() DashboardSpatialStaticFilePtrOutput {
	return o
}

func (o DashboardSpatialStaticFilePtrOutput) ToDashboardSpatialStaticFilePtrOutputWithContext(ctx context.Context) DashboardSpatialStaticFilePtrOutput {
	return o
}

func (o DashboardSpatialStaticFilePtrOutput) Elem() DashboardSpatialStaticFileOutput {
	return o.ApplyT(func(v *DashboardSpatialStaticFile) DashboardSpatialStaticFile {
		if v != nil {
			return *v
		}
		var ret DashboardSpatialStaticFile
		return ret
	}).(DashboardSpatialStaticFileOutput)
}

// The source of the spatial static file.
func (o DashboardSpatialStaticFilePtrOutput) Source() DashboardStaticFileSourcePtrOutput {
	return o.ApplyT(func(v *DashboardSpatialStaticFile) *DashboardStaticFileSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(DashboardStaticFileSourcePtrOutput)
}

// The ID of the spatial static file.
func (o DashboardSpatialStaticFilePtrOutput) StaticFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSpatialStaticFile) *string {
		if v == nil {
			return nil
		}
		return &v.StaticFileId
	}).(pulumi.StringPtrOutput)
}

type DashboardStaticFile struct {
	// The image static file.
	ImageStaticFile *DashboardImageStaticFile `pulumi:"imageStaticFile"`
	// The spacial static file.
	SpatialStaticFile *DashboardSpatialStaticFile `pulumi:"spatialStaticFile"`
}

// DashboardStaticFileInput is an input type that accepts DashboardStaticFileArgs and DashboardStaticFileOutput values.
// You can construct a concrete instance of `DashboardStaticFileInput` via:
//
//	DashboardStaticFileArgs{...}
type DashboardStaticFileInput interface {
	pulumi.Input

	ToDashboardStaticFileOutput() DashboardStaticFileOutput
	ToDashboardStaticFileOutputWithContext(context.Context) DashboardStaticFileOutput
}

type DashboardStaticFileArgs struct {
	// The image static file.
	ImageStaticFile DashboardImageStaticFilePtrInput `pulumi:"imageStaticFile"`
	// The spacial static file.
	SpatialStaticFile DashboardSpatialStaticFilePtrInput `pulumi:"spatialStaticFile"`
}

func (DashboardStaticFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFile)(nil)).Elem()
}

func (i DashboardStaticFileArgs) ToDashboardStaticFileOutput() DashboardStaticFileOutput {
	return i.ToDashboardStaticFileOutputWithContext(context.Background())
}

func (i DashboardStaticFileArgs) ToDashboardStaticFileOutputWithContext(ctx context.Context) DashboardStaticFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileOutput)
}

// DashboardStaticFileArrayInput is an input type that accepts DashboardStaticFileArray and DashboardStaticFileArrayOutput values.
// You can construct a concrete instance of `DashboardStaticFileArrayInput` via:
//
//	DashboardStaticFileArray{ DashboardStaticFileArgs{...} }
type DashboardStaticFileArrayInput interface {
	pulumi.Input

	ToDashboardStaticFileArrayOutput() DashboardStaticFileArrayOutput
	ToDashboardStaticFileArrayOutputWithContext(context.Context) DashboardStaticFileArrayOutput
}

type DashboardStaticFileArray []DashboardStaticFileInput

func (DashboardStaticFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStaticFile)(nil)).Elem()
}

func (i DashboardStaticFileArray) ToDashboardStaticFileArrayOutput() DashboardStaticFileArrayOutput {
	return i.ToDashboardStaticFileArrayOutputWithContext(context.Background())
}

func (i DashboardStaticFileArray) ToDashboardStaticFileArrayOutputWithContext(ctx context.Context) DashboardStaticFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileArrayOutput)
}

type DashboardStaticFileOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFile)(nil)).Elem()
}

func (o DashboardStaticFileOutput) ToDashboardStaticFileOutput() DashboardStaticFileOutput {
	return o
}

func (o DashboardStaticFileOutput) ToDashboardStaticFileOutputWithContext(ctx context.Context) DashboardStaticFileOutput {
	return o
}

// The image static file.
func (o DashboardStaticFileOutput) ImageStaticFile() DashboardImageStaticFilePtrOutput {
	return o.ApplyT(func(v DashboardStaticFile) *DashboardImageStaticFile { return v.ImageStaticFile }).(DashboardImageStaticFilePtrOutput)
}

// The spacial static file.
func (o DashboardStaticFileOutput) SpatialStaticFile() DashboardSpatialStaticFilePtrOutput {
	return o.ApplyT(func(v DashboardStaticFile) *DashboardSpatialStaticFile { return v.SpatialStaticFile }).(DashboardSpatialStaticFilePtrOutput)
}

type DashboardStaticFileArrayOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStaticFile)(nil)).Elem()
}

func (o DashboardStaticFileArrayOutput) ToDashboardStaticFileArrayOutput() DashboardStaticFileArrayOutput {
	return o
}

func (o DashboardStaticFileArrayOutput) ToDashboardStaticFileArrayOutputWithContext(ctx context.Context) DashboardStaticFileArrayOutput {
	return o
}

func (o DashboardStaticFileArrayOutput) Index(i pulumi.IntInput) DashboardStaticFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardStaticFile {
		return vs[0].([]DashboardStaticFile)[vs[1].(int)]
	}).(DashboardStaticFileOutput)
}

type DashboardStaticFileS3SourceOptions struct {
	// The name of the Amazon S3 bucket.
	BucketName string `pulumi:"bucketName"`
	// The identifier of the static file in the Amazon S3 bucket.
	ObjectKey string `pulumi:"objectKey"`
	// The Region of the Amazon S3 account that contains the bucket.
	Region string `pulumi:"region"`
}

// DashboardStaticFileS3SourceOptionsInput is an input type that accepts DashboardStaticFileS3SourceOptionsArgs and DashboardStaticFileS3SourceOptionsOutput values.
// You can construct a concrete instance of `DashboardStaticFileS3SourceOptionsInput` via:
//
//	DashboardStaticFileS3SourceOptionsArgs{...}
type DashboardStaticFileS3SourceOptionsInput interface {
	pulumi.Input

	ToDashboardStaticFileS3SourceOptionsOutput() DashboardStaticFileS3SourceOptionsOutput
	ToDashboardStaticFileS3SourceOptionsOutputWithContext(context.Context) DashboardStaticFileS3SourceOptionsOutput
}

type DashboardStaticFileS3SourceOptionsArgs struct {
	// The name of the Amazon S3 bucket.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The identifier of the static file in the Amazon S3 bucket.
	ObjectKey pulumi.StringInput `pulumi:"objectKey"`
	// The Region of the Amazon S3 account that contains the bucket.
	Region pulumi.StringInput `pulumi:"region"`
}

func (DashboardStaticFileS3SourceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFileS3SourceOptions)(nil)).Elem()
}

func (i DashboardStaticFileS3SourceOptionsArgs) ToDashboardStaticFileS3SourceOptionsOutput() DashboardStaticFileS3SourceOptionsOutput {
	return i.ToDashboardStaticFileS3SourceOptionsOutputWithContext(context.Background())
}

func (i DashboardStaticFileS3SourceOptionsArgs) ToDashboardStaticFileS3SourceOptionsOutputWithContext(ctx context.Context) DashboardStaticFileS3SourceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileS3SourceOptionsOutput)
}

func (i DashboardStaticFileS3SourceOptionsArgs) ToDashboardStaticFileS3SourceOptionsPtrOutput() DashboardStaticFileS3SourceOptionsPtrOutput {
	return i.ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardStaticFileS3SourceOptionsArgs) ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileS3SourceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileS3SourceOptionsOutput).ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(ctx)
}

// DashboardStaticFileS3SourceOptionsPtrInput is an input type that accepts DashboardStaticFileS3SourceOptionsArgs, DashboardStaticFileS3SourceOptionsPtr and DashboardStaticFileS3SourceOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardStaticFileS3SourceOptionsPtrInput` via:
//
//	        DashboardStaticFileS3SourceOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardStaticFileS3SourceOptionsPtrInput interface {
	pulumi.Input

	ToDashboardStaticFileS3SourceOptionsPtrOutput() DashboardStaticFileS3SourceOptionsPtrOutput
	ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(context.Context) DashboardStaticFileS3SourceOptionsPtrOutput
}

type dashboardStaticFileS3SourceOptionsPtrType DashboardStaticFileS3SourceOptionsArgs

func DashboardStaticFileS3SourceOptionsPtr(v *DashboardStaticFileS3SourceOptionsArgs) DashboardStaticFileS3SourceOptionsPtrInput {
	return (*dashboardStaticFileS3SourceOptionsPtrType)(v)
}

func (*dashboardStaticFileS3SourceOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStaticFileS3SourceOptions)(nil)).Elem()
}

func (i *dashboardStaticFileS3SourceOptionsPtrType) ToDashboardStaticFileS3SourceOptionsPtrOutput() DashboardStaticFileS3SourceOptionsPtrOutput {
	return i.ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardStaticFileS3SourceOptionsPtrType) ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileS3SourceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileS3SourceOptionsPtrOutput)
}

type DashboardStaticFileS3SourceOptionsOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileS3SourceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFileS3SourceOptions)(nil)).Elem()
}

func (o DashboardStaticFileS3SourceOptionsOutput) ToDashboardStaticFileS3SourceOptionsOutput() DashboardStaticFileS3SourceOptionsOutput {
	return o
}

func (o DashboardStaticFileS3SourceOptionsOutput) ToDashboardStaticFileS3SourceOptionsOutputWithContext(ctx context.Context) DashboardStaticFileS3SourceOptionsOutput {
	return o
}

func (o DashboardStaticFileS3SourceOptionsOutput) ToDashboardStaticFileS3SourceOptionsPtrOutput() DashboardStaticFileS3SourceOptionsPtrOutput {
	return o.ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardStaticFileS3SourceOptionsOutput) ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileS3SourceOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStaticFileS3SourceOptions) *DashboardStaticFileS3SourceOptions {
		return &v
	}).(DashboardStaticFileS3SourceOptionsPtrOutput)
}

// The name of the Amazon S3 bucket.
func (o DashboardStaticFileS3SourceOptionsOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStaticFileS3SourceOptions) string { return v.BucketName }).(pulumi.StringOutput)
}

// The identifier of the static file in the Amazon S3 bucket.
func (o DashboardStaticFileS3SourceOptionsOutput) ObjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStaticFileS3SourceOptions) string { return v.ObjectKey }).(pulumi.StringOutput)
}

// The Region of the Amazon S3 account that contains the bucket.
func (o DashboardStaticFileS3SourceOptionsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStaticFileS3SourceOptions) string { return v.Region }).(pulumi.StringOutput)
}

type DashboardStaticFileS3SourceOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileS3SourceOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStaticFileS3SourceOptions)(nil)).Elem()
}

func (o DashboardStaticFileS3SourceOptionsPtrOutput) ToDashboardStaticFileS3SourceOptionsPtrOutput() DashboardStaticFileS3SourceOptionsPtrOutput {
	return o
}

func (o DashboardStaticFileS3SourceOptionsPtrOutput) ToDashboardStaticFileS3SourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileS3SourceOptionsPtrOutput {
	return o
}

func (o DashboardStaticFileS3SourceOptionsPtrOutput) Elem() DashboardStaticFileS3SourceOptionsOutput {
	return o.ApplyT(func(v *DashboardStaticFileS3SourceOptions) DashboardStaticFileS3SourceOptions {
		if v != nil {
			return *v
		}
		var ret DashboardStaticFileS3SourceOptions
		return ret
	}).(DashboardStaticFileS3SourceOptionsOutput)
}

// The name of the Amazon S3 bucket.
func (o DashboardStaticFileS3SourceOptionsPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardStaticFileS3SourceOptions) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The identifier of the static file in the Amazon S3 bucket.
func (o DashboardStaticFileS3SourceOptionsPtrOutput) ObjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardStaticFileS3SourceOptions) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectKey
	}).(pulumi.StringPtrOutput)
}

// The Region of the Amazon S3 account that contains the bucket.
func (o DashboardStaticFileS3SourceOptionsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardStaticFileS3SourceOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

type DashboardStaticFileSource struct {
	// The structure that contains the Amazon S3 location to download the static file from.
	S3Options *DashboardStaticFileS3SourceOptions `pulumi:"s3Options"`
	// The structure that contains the URL to download the static file from.
	UrlOptions *DashboardStaticFileUrlSourceOptions `pulumi:"urlOptions"`
}

// DashboardStaticFileSourceInput is an input type that accepts DashboardStaticFileSourceArgs and DashboardStaticFileSourceOutput values.
// You can construct a concrete instance of `DashboardStaticFileSourceInput` via:
//
//	DashboardStaticFileSourceArgs{...}
type DashboardStaticFileSourceInput interface {
	pulumi.Input

	ToDashboardStaticFileSourceOutput() DashboardStaticFileSourceOutput
	ToDashboardStaticFileSourceOutputWithContext(context.Context) DashboardStaticFileSourceOutput
}

type DashboardStaticFileSourceArgs struct {
	// The structure that contains the Amazon S3 location to download the static file from.
	S3Options DashboardStaticFileS3SourceOptionsPtrInput `pulumi:"s3Options"`
	// The structure that contains the URL to download the static file from.
	UrlOptions DashboardStaticFileUrlSourceOptionsPtrInput `pulumi:"urlOptions"`
}

func (DashboardStaticFileSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFileSource)(nil)).Elem()
}

func (i DashboardStaticFileSourceArgs) ToDashboardStaticFileSourceOutput() DashboardStaticFileSourceOutput {
	return i.ToDashboardStaticFileSourceOutputWithContext(context.Background())
}

func (i DashboardStaticFileSourceArgs) ToDashboardStaticFileSourceOutputWithContext(ctx context.Context) DashboardStaticFileSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileSourceOutput)
}

func (i DashboardStaticFileSourceArgs) ToDashboardStaticFileSourcePtrOutput() DashboardStaticFileSourcePtrOutput {
	return i.ToDashboardStaticFileSourcePtrOutputWithContext(context.Background())
}

func (i DashboardStaticFileSourceArgs) ToDashboardStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardStaticFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileSourceOutput).ToDashboardStaticFileSourcePtrOutputWithContext(ctx)
}

// DashboardStaticFileSourcePtrInput is an input type that accepts DashboardStaticFileSourceArgs, DashboardStaticFileSourcePtr and DashboardStaticFileSourcePtrOutput values.
// You can construct a concrete instance of `DashboardStaticFileSourcePtrInput` via:
//
//	        DashboardStaticFileSourceArgs{...}
//
//	or:
//
//	        nil
type DashboardStaticFileSourcePtrInput interface {
	pulumi.Input

	ToDashboardStaticFileSourcePtrOutput() DashboardStaticFileSourcePtrOutput
	ToDashboardStaticFileSourcePtrOutputWithContext(context.Context) DashboardStaticFileSourcePtrOutput
}

type dashboardStaticFileSourcePtrType DashboardStaticFileSourceArgs

func DashboardStaticFileSourcePtr(v *DashboardStaticFileSourceArgs) DashboardStaticFileSourcePtrInput {
	return (*dashboardStaticFileSourcePtrType)(v)
}

func (*dashboardStaticFileSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStaticFileSource)(nil)).Elem()
}

func (i *dashboardStaticFileSourcePtrType) ToDashboardStaticFileSourcePtrOutput() DashboardStaticFileSourcePtrOutput {
	return i.ToDashboardStaticFileSourcePtrOutputWithContext(context.Background())
}

func (i *dashboardStaticFileSourcePtrType) ToDashboardStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardStaticFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileSourcePtrOutput)
}

type DashboardStaticFileSourceOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFileSource)(nil)).Elem()
}

func (o DashboardStaticFileSourceOutput) ToDashboardStaticFileSourceOutput() DashboardStaticFileSourceOutput {
	return o
}

func (o DashboardStaticFileSourceOutput) ToDashboardStaticFileSourceOutputWithContext(ctx context.Context) DashboardStaticFileSourceOutput {
	return o
}

func (o DashboardStaticFileSourceOutput) ToDashboardStaticFileSourcePtrOutput() DashboardStaticFileSourcePtrOutput {
	return o.ToDashboardStaticFileSourcePtrOutputWithContext(context.Background())
}

func (o DashboardStaticFileSourceOutput) ToDashboardStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardStaticFileSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStaticFileSource) *DashboardStaticFileSource {
		return &v
	}).(DashboardStaticFileSourcePtrOutput)
}

// The structure that contains the Amazon S3 location to download the static file from.
func (o DashboardStaticFileSourceOutput) S3Options() DashboardStaticFileS3SourceOptionsPtrOutput {
	return o.ApplyT(func(v DashboardStaticFileSource) *DashboardStaticFileS3SourceOptions { return v.S3Options }).(DashboardStaticFileS3SourceOptionsPtrOutput)
}

// The structure that contains the URL to download the static file from.
func (o DashboardStaticFileSourceOutput) UrlOptions() DashboardStaticFileUrlSourceOptionsPtrOutput {
	return o.ApplyT(func(v DashboardStaticFileSource) *DashboardStaticFileUrlSourceOptions { return v.UrlOptions }).(DashboardStaticFileUrlSourceOptionsPtrOutput)
}

type DashboardStaticFileSourcePtrOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStaticFileSource)(nil)).Elem()
}

func (o DashboardStaticFileSourcePtrOutput) ToDashboardStaticFileSourcePtrOutput() DashboardStaticFileSourcePtrOutput {
	return o
}

func (o DashboardStaticFileSourcePtrOutput) ToDashboardStaticFileSourcePtrOutputWithContext(ctx context.Context) DashboardStaticFileSourcePtrOutput {
	return o
}

func (o DashboardStaticFileSourcePtrOutput) Elem() DashboardStaticFileSourceOutput {
	return o.ApplyT(func(v *DashboardStaticFileSource) DashboardStaticFileSource {
		if v != nil {
			return *v
		}
		var ret DashboardStaticFileSource
		return ret
	}).(DashboardStaticFileSourceOutput)
}

// The structure that contains the Amazon S3 location to download the static file from.
func (o DashboardStaticFileSourcePtrOutput) S3Options() DashboardStaticFileS3SourceOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardStaticFileSource) *DashboardStaticFileS3SourceOptions {
		if v == nil {
			return nil
		}
		return v.S3Options
	}).(DashboardStaticFileS3SourceOptionsPtrOutput)
}

// The structure that contains the URL to download the static file from.
func (o DashboardStaticFileSourcePtrOutput) UrlOptions() DashboardStaticFileUrlSourceOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardStaticFileSource) *DashboardStaticFileUrlSourceOptions {
		if v == nil {
			return nil
		}
		return v.UrlOptions
	}).(DashboardStaticFileUrlSourceOptionsPtrOutput)
}

type DashboardStaticFileUrlSourceOptions struct {
	// The URL to download the static file from.
	Url string `pulumi:"url"`
}

// DashboardStaticFileUrlSourceOptionsInput is an input type that accepts DashboardStaticFileUrlSourceOptionsArgs and DashboardStaticFileUrlSourceOptionsOutput values.
// You can construct a concrete instance of `DashboardStaticFileUrlSourceOptionsInput` via:
//
//	DashboardStaticFileUrlSourceOptionsArgs{...}
type DashboardStaticFileUrlSourceOptionsInput interface {
	pulumi.Input

	ToDashboardStaticFileUrlSourceOptionsOutput() DashboardStaticFileUrlSourceOptionsOutput
	ToDashboardStaticFileUrlSourceOptionsOutputWithContext(context.Context) DashboardStaticFileUrlSourceOptionsOutput
}

type DashboardStaticFileUrlSourceOptionsArgs struct {
	// The URL to download the static file from.
	Url pulumi.StringInput `pulumi:"url"`
}

func (DashboardStaticFileUrlSourceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFileUrlSourceOptions)(nil)).Elem()
}

func (i DashboardStaticFileUrlSourceOptionsArgs) ToDashboardStaticFileUrlSourceOptionsOutput() DashboardStaticFileUrlSourceOptionsOutput {
	return i.ToDashboardStaticFileUrlSourceOptionsOutputWithContext(context.Background())
}

func (i DashboardStaticFileUrlSourceOptionsArgs) ToDashboardStaticFileUrlSourceOptionsOutputWithContext(ctx context.Context) DashboardStaticFileUrlSourceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileUrlSourceOptionsOutput)
}

func (i DashboardStaticFileUrlSourceOptionsArgs) ToDashboardStaticFileUrlSourceOptionsPtrOutput() DashboardStaticFileUrlSourceOptionsPtrOutput {
	return i.ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardStaticFileUrlSourceOptionsArgs) ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileUrlSourceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileUrlSourceOptionsOutput).ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(ctx)
}

// DashboardStaticFileUrlSourceOptionsPtrInput is an input type that accepts DashboardStaticFileUrlSourceOptionsArgs, DashboardStaticFileUrlSourceOptionsPtr and DashboardStaticFileUrlSourceOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardStaticFileUrlSourceOptionsPtrInput` via:
//
//	        DashboardStaticFileUrlSourceOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardStaticFileUrlSourceOptionsPtrInput interface {
	pulumi.Input

	ToDashboardStaticFileUrlSourceOptionsPtrOutput() DashboardStaticFileUrlSourceOptionsPtrOutput
	ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(context.Context) DashboardStaticFileUrlSourceOptionsPtrOutput
}

type dashboardStaticFileUrlSourceOptionsPtrType DashboardStaticFileUrlSourceOptionsArgs

func DashboardStaticFileUrlSourceOptionsPtr(v *DashboardStaticFileUrlSourceOptionsArgs) DashboardStaticFileUrlSourceOptionsPtrInput {
	return (*dashboardStaticFileUrlSourceOptionsPtrType)(v)
}

func (*dashboardStaticFileUrlSourceOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStaticFileUrlSourceOptions)(nil)).Elem()
}

func (i *dashboardStaticFileUrlSourceOptionsPtrType) ToDashboardStaticFileUrlSourceOptionsPtrOutput() DashboardStaticFileUrlSourceOptionsPtrOutput {
	return i.ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardStaticFileUrlSourceOptionsPtrType) ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileUrlSourceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStaticFileUrlSourceOptionsPtrOutput)
}

type DashboardStaticFileUrlSourceOptionsOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileUrlSourceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStaticFileUrlSourceOptions)(nil)).Elem()
}

func (o DashboardStaticFileUrlSourceOptionsOutput) ToDashboardStaticFileUrlSourceOptionsOutput() DashboardStaticFileUrlSourceOptionsOutput {
	return o
}

func (o DashboardStaticFileUrlSourceOptionsOutput) ToDashboardStaticFileUrlSourceOptionsOutputWithContext(ctx context.Context) DashboardStaticFileUrlSourceOptionsOutput {
	return o
}

func (o DashboardStaticFileUrlSourceOptionsOutput) ToDashboardStaticFileUrlSourceOptionsPtrOutput() DashboardStaticFileUrlSourceOptionsPtrOutput {
	return o.ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardStaticFileUrlSourceOptionsOutput) ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileUrlSourceOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStaticFileUrlSourceOptions) *DashboardStaticFileUrlSourceOptions {
		return &v
	}).(DashboardStaticFileUrlSourceOptionsPtrOutput)
}

// The URL to download the static file from.
func (o DashboardStaticFileUrlSourceOptionsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStaticFileUrlSourceOptions) string { return v.Url }).(pulumi.StringOutput)
}

type DashboardStaticFileUrlSourceOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardStaticFileUrlSourceOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStaticFileUrlSourceOptions)(nil)).Elem()
}

func (o DashboardStaticFileUrlSourceOptionsPtrOutput) ToDashboardStaticFileUrlSourceOptionsPtrOutput() DashboardStaticFileUrlSourceOptionsPtrOutput {
	return o
}

func (o DashboardStaticFileUrlSourceOptionsPtrOutput) ToDashboardStaticFileUrlSourceOptionsPtrOutputWithContext(ctx context.Context) DashboardStaticFileUrlSourceOptionsPtrOutput {
	return o
}

func (o DashboardStaticFileUrlSourceOptionsPtrOutput) Elem() DashboardStaticFileUrlSourceOptionsOutput {
	return o.ApplyT(func(v *DashboardStaticFileUrlSourceOptions) DashboardStaticFileUrlSourceOptions {
		if v != nil {
			return *v
		}
		var ret DashboardStaticFileUrlSourceOptions
		return ret
	}).(DashboardStaticFileUrlSourceOptionsOutput)
}

// The URL to download the static file from.
func (o DashboardStaticFileUrlSourceOptionsPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardStaticFileUrlSourceOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type DashboardStringDefaultValues struct {
	// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
	DynamicValue *DashboardDynamicDefaultValue `pulumi:"dynamicValue"`
	// The static values of the `DecimalDefaultValues` .
	StaticValues []string `pulumi:"staticValues"`
}

// DashboardStringDefaultValuesInput is an input type that accepts DashboardStringDefaultValuesArgs and DashboardStringDefaultValuesOutput values.
// You can construct a concrete instance of `DashboardStringDefaultValuesInput` via:
//
//	DashboardStringDefaultValuesArgs{...}
type DashboardStringDefaultValuesInput interface {
	pulumi.Input

	ToDashboardStringDefaultValuesOutput() DashboardStringDefaultValuesOutput
	ToDashboardStringDefaultValuesOutputWithContext(context.Context) DashboardStringDefaultValuesOutput
}

type DashboardStringDefaultValuesArgs struct {
	// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
	DynamicValue DashboardDynamicDefaultValuePtrInput `pulumi:"dynamicValue"`
	// The static values of the `DecimalDefaultValues` .
	StaticValues pulumi.StringArrayInput `pulumi:"staticValues"`
}

func (DashboardStringDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringDefaultValues)(nil)).Elem()
}

func (i DashboardStringDefaultValuesArgs) ToDashboardStringDefaultValuesOutput() DashboardStringDefaultValuesOutput {
	return i.ToDashboardStringDefaultValuesOutputWithContext(context.Background())
}

func (i DashboardStringDefaultValuesArgs) ToDashboardStringDefaultValuesOutputWithContext(ctx context.Context) DashboardStringDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringDefaultValuesOutput)
}

func (i DashboardStringDefaultValuesArgs) ToDashboardStringDefaultValuesPtrOutput() DashboardStringDefaultValuesPtrOutput {
	return i.ToDashboardStringDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DashboardStringDefaultValuesArgs) ToDashboardStringDefaultValuesPtrOutputWithContext(ctx context.Context) DashboardStringDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringDefaultValuesOutput).ToDashboardStringDefaultValuesPtrOutputWithContext(ctx)
}

// DashboardStringDefaultValuesPtrInput is an input type that accepts DashboardStringDefaultValuesArgs, DashboardStringDefaultValuesPtr and DashboardStringDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DashboardStringDefaultValuesPtrInput` via:
//
//	        DashboardStringDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type DashboardStringDefaultValuesPtrInput interface {
	pulumi.Input

	ToDashboardStringDefaultValuesPtrOutput() DashboardStringDefaultValuesPtrOutput
	ToDashboardStringDefaultValuesPtrOutputWithContext(context.Context) DashboardStringDefaultValuesPtrOutput
}

type dashboardStringDefaultValuesPtrType DashboardStringDefaultValuesArgs

func DashboardStringDefaultValuesPtr(v *DashboardStringDefaultValuesArgs) DashboardStringDefaultValuesPtrInput {
	return (*dashboardStringDefaultValuesPtrType)(v)
}

func (*dashboardStringDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringDefaultValues)(nil)).Elem()
}

func (i *dashboardStringDefaultValuesPtrType) ToDashboardStringDefaultValuesPtrOutput() DashboardStringDefaultValuesPtrOutput {
	return i.ToDashboardStringDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *dashboardStringDefaultValuesPtrType) ToDashboardStringDefaultValuesPtrOutputWithContext(ctx context.Context) DashboardStringDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringDefaultValuesPtrOutput)
}

type DashboardStringDefaultValuesOutput struct{ *pulumi.OutputState }

func (DashboardStringDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringDefaultValues)(nil)).Elem()
}

func (o DashboardStringDefaultValuesOutput) ToDashboardStringDefaultValuesOutput() DashboardStringDefaultValuesOutput {
	return o
}

func (o DashboardStringDefaultValuesOutput) ToDashboardStringDefaultValuesOutputWithContext(ctx context.Context) DashboardStringDefaultValuesOutput {
	return o
}

func (o DashboardStringDefaultValuesOutput) ToDashboardStringDefaultValuesPtrOutput() DashboardStringDefaultValuesPtrOutput {
	return o.ToDashboardStringDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DashboardStringDefaultValuesOutput) ToDashboardStringDefaultValuesPtrOutputWithContext(ctx context.Context) DashboardStringDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStringDefaultValues) *DashboardStringDefaultValues {
		return &v
	}).(DashboardStringDefaultValuesPtrOutput)
}

// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
func (o DashboardStringDefaultValuesOutput) DynamicValue() DashboardDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v DashboardStringDefaultValues) *DashboardDynamicDefaultValue { return v.DynamicValue }).(DashboardDynamicDefaultValuePtrOutput)
}

// The static values of the `DecimalDefaultValues` .
func (o DashboardStringDefaultValuesOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardStringDefaultValues) []string { return v.StaticValues }).(pulumi.StringArrayOutput)
}

type DashboardStringDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DashboardStringDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringDefaultValues)(nil)).Elem()
}

func (o DashboardStringDefaultValuesPtrOutput) ToDashboardStringDefaultValuesPtrOutput() DashboardStringDefaultValuesPtrOutput {
	return o
}

func (o DashboardStringDefaultValuesPtrOutput) ToDashboardStringDefaultValuesPtrOutputWithContext(ctx context.Context) DashboardStringDefaultValuesPtrOutput {
	return o
}

func (o DashboardStringDefaultValuesPtrOutput) Elem() DashboardStringDefaultValuesOutput {
	return o.ApplyT(func(v *DashboardStringDefaultValues) DashboardStringDefaultValues {
		if v != nil {
			return *v
		}
		var ret DashboardStringDefaultValues
		return ret
	}).(DashboardStringDefaultValuesOutput)
}

// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
func (o DashboardStringDefaultValuesPtrOutput) DynamicValue() DashboardDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v *DashboardStringDefaultValues) *DashboardDynamicDefaultValue {
		if v == nil {
			return nil
		}
		return v.DynamicValue
	}).(DashboardDynamicDefaultValuePtrOutput)
}

// The static values of the `DecimalDefaultValues` .
func (o DashboardStringDefaultValuesPtrOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardStringDefaultValues) []string {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.StringArrayOutput)
}

type DashboardStringFormatConfiguration struct {
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration *DashboardNullValueFormatConfiguration `pulumi:"nullValueFormatConfiguration"`
	// The formatting configuration for numeric strings.
	NumericFormatConfiguration *DashboardNumericFormatConfiguration `pulumi:"numericFormatConfiguration"`
}

// DashboardStringFormatConfigurationInput is an input type that accepts DashboardStringFormatConfigurationArgs and DashboardStringFormatConfigurationOutput values.
// You can construct a concrete instance of `DashboardStringFormatConfigurationInput` via:
//
//	DashboardStringFormatConfigurationArgs{...}
type DashboardStringFormatConfigurationInput interface {
	pulumi.Input

	ToDashboardStringFormatConfigurationOutput() DashboardStringFormatConfigurationOutput
	ToDashboardStringFormatConfigurationOutputWithContext(context.Context) DashboardStringFormatConfigurationOutput
}

type DashboardStringFormatConfigurationArgs struct {
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration DashboardNullValueFormatConfigurationPtrInput `pulumi:"nullValueFormatConfiguration"`
	// The formatting configuration for numeric strings.
	NumericFormatConfiguration DashboardNumericFormatConfigurationPtrInput `pulumi:"numericFormatConfiguration"`
}

func (DashboardStringFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringFormatConfiguration)(nil)).Elem()
}

func (i DashboardStringFormatConfigurationArgs) ToDashboardStringFormatConfigurationOutput() DashboardStringFormatConfigurationOutput {
	return i.ToDashboardStringFormatConfigurationOutputWithContext(context.Background())
}

func (i DashboardStringFormatConfigurationArgs) ToDashboardStringFormatConfigurationOutputWithContext(ctx context.Context) DashboardStringFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringFormatConfigurationOutput)
}

func (i DashboardStringFormatConfigurationArgs) ToDashboardStringFormatConfigurationPtrOutput() DashboardStringFormatConfigurationPtrOutput {
	return i.ToDashboardStringFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardStringFormatConfigurationArgs) ToDashboardStringFormatConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringFormatConfigurationOutput).ToDashboardStringFormatConfigurationPtrOutputWithContext(ctx)
}

// DashboardStringFormatConfigurationPtrInput is an input type that accepts DashboardStringFormatConfigurationArgs, DashboardStringFormatConfigurationPtr and DashboardStringFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardStringFormatConfigurationPtrInput` via:
//
//	        DashboardStringFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardStringFormatConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardStringFormatConfigurationPtrOutput() DashboardStringFormatConfigurationPtrOutput
	ToDashboardStringFormatConfigurationPtrOutputWithContext(context.Context) DashboardStringFormatConfigurationPtrOutput
}

type dashboardStringFormatConfigurationPtrType DashboardStringFormatConfigurationArgs

func DashboardStringFormatConfigurationPtr(v *DashboardStringFormatConfigurationArgs) DashboardStringFormatConfigurationPtrInput {
	return (*dashboardStringFormatConfigurationPtrType)(v)
}

func (*dashboardStringFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringFormatConfiguration)(nil)).Elem()
}

func (i *dashboardStringFormatConfigurationPtrType) ToDashboardStringFormatConfigurationPtrOutput() DashboardStringFormatConfigurationPtrOutput {
	return i.ToDashboardStringFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardStringFormatConfigurationPtrType) ToDashboardStringFormatConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringFormatConfigurationPtrOutput)
}

type DashboardStringFormatConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardStringFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringFormatConfiguration)(nil)).Elem()
}

func (o DashboardStringFormatConfigurationOutput) ToDashboardStringFormatConfigurationOutput() DashboardStringFormatConfigurationOutput {
	return o
}

func (o DashboardStringFormatConfigurationOutput) ToDashboardStringFormatConfigurationOutputWithContext(ctx context.Context) DashboardStringFormatConfigurationOutput {
	return o
}

func (o DashboardStringFormatConfigurationOutput) ToDashboardStringFormatConfigurationPtrOutput() DashboardStringFormatConfigurationPtrOutput {
	return o.ToDashboardStringFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardStringFormatConfigurationOutput) ToDashboardStringFormatConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStringFormatConfiguration) *DashboardStringFormatConfiguration {
		return &v
	}).(DashboardStringFormatConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o DashboardStringFormatConfigurationOutput) NullValueFormatConfiguration() DashboardNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardStringFormatConfiguration) *DashboardNullValueFormatConfiguration {
		return v.NullValueFormatConfiguration
	}).(DashboardNullValueFormatConfigurationPtrOutput)
}

// The formatting configuration for numeric strings.
func (o DashboardStringFormatConfigurationOutput) NumericFormatConfiguration() DashboardNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardStringFormatConfiguration) *DashboardNumericFormatConfiguration {
		return v.NumericFormatConfiguration
	}).(DashboardNumericFormatConfigurationPtrOutput)
}

type DashboardStringFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardStringFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringFormatConfiguration)(nil)).Elem()
}

func (o DashboardStringFormatConfigurationPtrOutput) ToDashboardStringFormatConfigurationPtrOutput() DashboardStringFormatConfigurationPtrOutput {
	return o
}

func (o DashboardStringFormatConfigurationPtrOutput) ToDashboardStringFormatConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringFormatConfigurationPtrOutput {
	return o
}

func (o DashboardStringFormatConfigurationPtrOutput) Elem() DashboardStringFormatConfigurationOutput {
	return o.ApplyT(func(v *DashboardStringFormatConfiguration) DashboardStringFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardStringFormatConfiguration
		return ret
	}).(DashboardStringFormatConfigurationOutput)
}

// The options that determine the null value format configuration.
func (o DashboardStringFormatConfigurationPtrOutput) NullValueFormatConfiguration() DashboardNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardStringFormatConfiguration) *DashboardNullValueFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NullValueFormatConfiguration
	}).(DashboardNullValueFormatConfigurationPtrOutput)
}

// The formatting configuration for numeric strings.
func (o DashboardStringFormatConfigurationPtrOutput) NumericFormatConfiguration() DashboardNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardStringFormatConfiguration) *DashboardNumericFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NumericFormatConfiguration
	}).(DashboardNumericFormatConfigurationPtrOutput)
}

// <p>A string parameter.</p>
type DashboardStringParameter struct {
	// <p>A display name for a string parameter.</p>
	Name string `pulumi:"name"`
	// <p>The values of a string parameter.</p>
	Values []string `pulumi:"values"`
}

// DashboardStringParameterInput is an input type that accepts DashboardStringParameterArgs and DashboardStringParameterOutput values.
// You can construct a concrete instance of `DashboardStringParameterInput` via:
//
//	DashboardStringParameterArgs{...}
type DashboardStringParameterInput interface {
	pulumi.Input

	ToDashboardStringParameterOutput() DashboardStringParameterOutput
	ToDashboardStringParameterOutputWithContext(context.Context) DashboardStringParameterOutput
}

// <p>A string parameter.</p>
type DashboardStringParameterArgs struct {
	// <p>A display name for a string parameter.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The values of a string parameter.</p>
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardStringParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringParameter)(nil)).Elem()
}

func (i DashboardStringParameterArgs) ToDashboardStringParameterOutput() DashboardStringParameterOutput {
	return i.ToDashboardStringParameterOutputWithContext(context.Background())
}

func (i DashboardStringParameterArgs) ToDashboardStringParameterOutputWithContext(ctx context.Context) DashboardStringParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringParameterOutput)
}

// DashboardStringParameterArrayInput is an input type that accepts DashboardStringParameterArray and DashboardStringParameterArrayOutput values.
// You can construct a concrete instance of `DashboardStringParameterArrayInput` via:
//
//	DashboardStringParameterArray{ DashboardStringParameterArgs{...} }
type DashboardStringParameterArrayInput interface {
	pulumi.Input

	ToDashboardStringParameterArrayOutput() DashboardStringParameterArrayOutput
	ToDashboardStringParameterArrayOutputWithContext(context.Context) DashboardStringParameterArrayOutput
}

type DashboardStringParameterArray []DashboardStringParameterInput

func (DashboardStringParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStringParameter)(nil)).Elem()
}

func (i DashboardStringParameterArray) ToDashboardStringParameterArrayOutput() DashboardStringParameterArrayOutput {
	return i.ToDashboardStringParameterArrayOutputWithContext(context.Background())
}

func (i DashboardStringParameterArray) ToDashboardStringParameterArrayOutputWithContext(ctx context.Context) DashboardStringParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringParameterArrayOutput)
}

// <p>A string parameter.</p>
type DashboardStringParameterOutput struct{ *pulumi.OutputState }

func (DashboardStringParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringParameter)(nil)).Elem()
}

func (o DashboardStringParameterOutput) ToDashboardStringParameterOutput() DashboardStringParameterOutput {
	return o
}

func (o DashboardStringParameterOutput) ToDashboardStringParameterOutputWithContext(ctx context.Context) DashboardStringParameterOutput {
	return o
}

// <p>A display name for a string parameter.</p>
func (o DashboardStringParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStringParameter) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The values of a string parameter.</p>
func (o DashboardStringParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardStringParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardStringParameterArrayOutput struct{ *pulumi.OutputState }

func (DashboardStringParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardStringParameter)(nil)).Elem()
}

func (o DashboardStringParameterArrayOutput) ToDashboardStringParameterArrayOutput() DashboardStringParameterArrayOutput {
	return o
}

func (o DashboardStringParameterArrayOutput) ToDashboardStringParameterArrayOutputWithContext(ctx context.Context) DashboardStringParameterArrayOutput {
	return o
}

func (o DashboardStringParameterArrayOutput) Index(i pulumi.IntInput) DashboardStringParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardStringParameter {
		return vs[0].([]DashboardStringParameter)[vs[1].(int)]
	}).(DashboardStringParameterOutput)
}

type DashboardStringParameterDeclaration struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           *DashboardStringDefaultValues     `pulumi:"defaultValues"`
	MappedDataSetParameters []DashboardMappedDataSetParameter `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name string `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType DashboardParameterValueType `pulumi:"parameterValueType"`
	// The configuration that defines the default value of a `String` parameter when a value has not been set.
	ValueWhenUnset *DashboardStringValueWhenUnsetConfiguration `pulumi:"valueWhenUnset"`
}

// DashboardStringParameterDeclarationInput is an input type that accepts DashboardStringParameterDeclarationArgs and DashboardStringParameterDeclarationOutput values.
// You can construct a concrete instance of `DashboardStringParameterDeclarationInput` via:
//
//	DashboardStringParameterDeclarationArgs{...}
type DashboardStringParameterDeclarationInput interface {
	pulumi.Input

	ToDashboardStringParameterDeclarationOutput() DashboardStringParameterDeclarationOutput
	ToDashboardStringParameterDeclarationOutputWithContext(context.Context) DashboardStringParameterDeclarationOutput
}

type DashboardStringParameterDeclarationArgs struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           DashboardStringDefaultValuesPtrInput      `pulumi:"defaultValues"`
	MappedDataSetParameters DashboardMappedDataSetParameterArrayInput `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name pulumi.StringInput `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType DashboardParameterValueTypeInput `pulumi:"parameterValueType"`
	// The configuration that defines the default value of a `String` parameter when a value has not been set.
	ValueWhenUnset DashboardStringValueWhenUnsetConfigurationPtrInput `pulumi:"valueWhenUnset"`
}

func (DashboardStringParameterDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringParameterDeclaration)(nil)).Elem()
}

func (i DashboardStringParameterDeclarationArgs) ToDashboardStringParameterDeclarationOutput() DashboardStringParameterDeclarationOutput {
	return i.ToDashboardStringParameterDeclarationOutputWithContext(context.Background())
}

func (i DashboardStringParameterDeclarationArgs) ToDashboardStringParameterDeclarationOutputWithContext(ctx context.Context) DashboardStringParameterDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringParameterDeclarationOutput)
}

func (i DashboardStringParameterDeclarationArgs) ToDashboardStringParameterDeclarationPtrOutput() DashboardStringParameterDeclarationPtrOutput {
	return i.ToDashboardStringParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i DashboardStringParameterDeclarationArgs) ToDashboardStringParameterDeclarationPtrOutputWithContext(ctx context.Context) DashboardStringParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringParameterDeclarationOutput).ToDashboardStringParameterDeclarationPtrOutputWithContext(ctx)
}

// DashboardStringParameterDeclarationPtrInput is an input type that accepts DashboardStringParameterDeclarationArgs, DashboardStringParameterDeclarationPtr and DashboardStringParameterDeclarationPtrOutput values.
// You can construct a concrete instance of `DashboardStringParameterDeclarationPtrInput` via:
//
//	        DashboardStringParameterDeclarationArgs{...}
//
//	or:
//
//	        nil
type DashboardStringParameterDeclarationPtrInput interface {
	pulumi.Input

	ToDashboardStringParameterDeclarationPtrOutput() DashboardStringParameterDeclarationPtrOutput
	ToDashboardStringParameterDeclarationPtrOutputWithContext(context.Context) DashboardStringParameterDeclarationPtrOutput
}

type dashboardStringParameterDeclarationPtrType DashboardStringParameterDeclarationArgs

func DashboardStringParameterDeclarationPtr(v *DashboardStringParameterDeclarationArgs) DashboardStringParameterDeclarationPtrInput {
	return (*dashboardStringParameterDeclarationPtrType)(v)
}

func (*dashboardStringParameterDeclarationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringParameterDeclaration)(nil)).Elem()
}

func (i *dashboardStringParameterDeclarationPtrType) ToDashboardStringParameterDeclarationPtrOutput() DashboardStringParameterDeclarationPtrOutput {
	return i.ToDashboardStringParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i *dashboardStringParameterDeclarationPtrType) ToDashboardStringParameterDeclarationPtrOutputWithContext(ctx context.Context) DashboardStringParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringParameterDeclarationPtrOutput)
}

type DashboardStringParameterDeclarationOutput struct{ *pulumi.OutputState }

func (DashboardStringParameterDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringParameterDeclaration)(nil)).Elem()
}

func (o DashboardStringParameterDeclarationOutput) ToDashboardStringParameterDeclarationOutput() DashboardStringParameterDeclarationOutput {
	return o
}

func (o DashboardStringParameterDeclarationOutput) ToDashboardStringParameterDeclarationOutputWithContext(ctx context.Context) DashboardStringParameterDeclarationOutput {
	return o
}

func (o DashboardStringParameterDeclarationOutput) ToDashboardStringParameterDeclarationPtrOutput() DashboardStringParameterDeclarationPtrOutput {
	return o.ToDashboardStringParameterDeclarationPtrOutputWithContext(context.Background())
}

func (o DashboardStringParameterDeclarationOutput) ToDashboardStringParameterDeclarationPtrOutputWithContext(ctx context.Context) DashboardStringParameterDeclarationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStringParameterDeclaration) *DashboardStringParameterDeclaration {
		return &v
	}).(DashboardStringParameterDeclarationPtrOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o DashboardStringParameterDeclarationOutput) DefaultValues() DashboardStringDefaultValuesPtrOutput {
	return o.ApplyT(func(v DashboardStringParameterDeclaration) *DashboardStringDefaultValues { return v.DefaultValues }).(DashboardStringDefaultValuesPtrOutput)
}

func (o DashboardStringParameterDeclarationOutput) MappedDataSetParameters() DashboardMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v DashboardStringParameterDeclaration) []DashboardMappedDataSetParameter {
		return v.MappedDataSetParameters
	}).(DashboardMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o DashboardStringParameterDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardStringParameterDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o DashboardStringParameterDeclarationOutput) ParameterValueType() DashboardParameterValueTypeOutput {
	return o.ApplyT(func(v DashboardStringParameterDeclaration) DashboardParameterValueType { return v.ParameterValueType }).(DashboardParameterValueTypeOutput)
}

// The configuration that defines the default value of a `String` parameter when a value has not been set.
func (o DashboardStringParameterDeclarationOutput) ValueWhenUnset() DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardStringParameterDeclaration) *DashboardStringValueWhenUnsetConfiguration {
		return v.ValueWhenUnset
	}).(DashboardStringValueWhenUnsetConfigurationPtrOutput)
}

type DashboardStringParameterDeclarationPtrOutput struct{ *pulumi.OutputState }

func (DashboardStringParameterDeclarationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringParameterDeclaration)(nil)).Elem()
}

func (o DashboardStringParameterDeclarationPtrOutput) ToDashboardStringParameterDeclarationPtrOutput() DashboardStringParameterDeclarationPtrOutput {
	return o
}

func (o DashboardStringParameterDeclarationPtrOutput) ToDashboardStringParameterDeclarationPtrOutputWithContext(ctx context.Context) DashboardStringParameterDeclarationPtrOutput {
	return o
}

func (o DashboardStringParameterDeclarationPtrOutput) Elem() DashboardStringParameterDeclarationOutput {
	return o.ApplyT(func(v *DashboardStringParameterDeclaration) DashboardStringParameterDeclaration {
		if v != nil {
			return *v
		}
		var ret DashboardStringParameterDeclaration
		return ret
	}).(DashboardStringParameterDeclarationOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o DashboardStringParameterDeclarationPtrOutput) DefaultValues() DashboardStringDefaultValuesPtrOutput {
	return o.ApplyT(func(v *DashboardStringParameterDeclaration) *DashboardStringDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(DashboardStringDefaultValuesPtrOutput)
}

func (o DashboardStringParameterDeclarationPtrOutput) MappedDataSetParameters() DashboardMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v *DashboardStringParameterDeclaration) []DashboardMappedDataSetParameter {
		if v == nil {
			return nil
		}
		return v.MappedDataSetParameters
	}).(DashboardMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o DashboardStringParameterDeclarationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardStringParameterDeclaration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o DashboardStringParameterDeclarationPtrOutput) ParameterValueType() DashboardParameterValueTypePtrOutput {
	return o.ApplyT(func(v *DashboardStringParameterDeclaration) *DashboardParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ParameterValueType
	}).(DashboardParameterValueTypePtrOutput)
}

// The configuration that defines the default value of a `String` parameter when a value has not been set.
func (o DashboardStringParameterDeclarationPtrOutput) ValueWhenUnset() DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardStringParameterDeclaration) *DashboardStringValueWhenUnsetConfiguration {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnset
	}).(DashboardStringValueWhenUnsetConfigurationPtrOutput)
}

type DashboardStringValueWhenUnsetConfiguration struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue *string `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption *DashboardValueWhenUnsetOption `pulumi:"valueWhenUnsetOption"`
}

// DashboardStringValueWhenUnsetConfigurationInput is an input type that accepts DashboardStringValueWhenUnsetConfigurationArgs and DashboardStringValueWhenUnsetConfigurationOutput values.
// You can construct a concrete instance of `DashboardStringValueWhenUnsetConfigurationInput` via:
//
//	DashboardStringValueWhenUnsetConfigurationArgs{...}
type DashboardStringValueWhenUnsetConfigurationInput interface {
	pulumi.Input

	ToDashboardStringValueWhenUnsetConfigurationOutput() DashboardStringValueWhenUnsetConfigurationOutput
	ToDashboardStringValueWhenUnsetConfigurationOutputWithContext(context.Context) DashboardStringValueWhenUnsetConfigurationOutput
}

type DashboardStringValueWhenUnsetConfigurationArgs struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue pulumi.StringPtrInput `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption DashboardValueWhenUnsetOptionPtrInput `pulumi:"valueWhenUnsetOption"`
}

func (DashboardStringValueWhenUnsetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i DashboardStringValueWhenUnsetConfigurationArgs) ToDashboardStringValueWhenUnsetConfigurationOutput() DashboardStringValueWhenUnsetConfigurationOutput {
	return i.ToDashboardStringValueWhenUnsetConfigurationOutputWithContext(context.Background())
}

func (i DashboardStringValueWhenUnsetConfigurationArgs) ToDashboardStringValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) DashboardStringValueWhenUnsetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringValueWhenUnsetConfigurationOutput)
}

func (i DashboardStringValueWhenUnsetConfigurationArgs) ToDashboardStringValueWhenUnsetConfigurationPtrOutput() DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return i.ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardStringValueWhenUnsetConfigurationArgs) ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringValueWhenUnsetConfigurationOutput).ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx)
}

// DashboardStringValueWhenUnsetConfigurationPtrInput is an input type that accepts DashboardStringValueWhenUnsetConfigurationArgs, DashboardStringValueWhenUnsetConfigurationPtr and DashboardStringValueWhenUnsetConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardStringValueWhenUnsetConfigurationPtrInput` via:
//
//	        DashboardStringValueWhenUnsetConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardStringValueWhenUnsetConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardStringValueWhenUnsetConfigurationPtrOutput() DashboardStringValueWhenUnsetConfigurationPtrOutput
	ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Context) DashboardStringValueWhenUnsetConfigurationPtrOutput
}

type dashboardStringValueWhenUnsetConfigurationPtrType DashboardStringValueWhenUnsetConfigurationArgs

func DashboardStringValueWhenUnsetConfigurationPtr(v *DashboardStringValueWhenUnsetConfigurationArgs) DashboardStringValueWhenUnsetConfigurationPtrInput {
	return (*dashboardStringValueWhenUnsetConfigurationPtrType)(v)
}

func (*dashboardStringValueWhenUnsetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i *dashboardStringValueWhenUnsetConfigurationPtrType) ToDashboardStringValueWhenUnsetConfigurationPtrOutput() DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return i.ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardStringValueWhenUnsetConfigurationPtrType) ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardStringValueWhenUnsetConfigurationPtrOutput)
}

type DashboardStringValueWhenUnsetConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardStringValueWhenUnsetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o DashboardStringValueWhenUnsetConfigurationOutput) ToDashboardStringValueWhenUnsetConfigurationOutput() DashboardStringValueWhenUnsetConfigurationOutput {
	return o
}

func (o DashboardStringValueWhenUnsetConfigurationOutput) ToDashboardStringValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) DashboardStringValueWhenUnsetConfigurationOutput {
	return o
}

func (o DashboardStringValueWhenUnsetConfigurationOutput) ToDashboardStringValueWhenUnsetConfigurationPtrOutput() DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return o.ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardStringValueWhenUnsetConfigurationOutput) ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStringValueWhenUnsetConfiguration) *DashboardStringValueWhenUnsetConfiguration {
		return &v
	}).(DashboardStringValueWhenUnsetConfigurationPtrOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o DashboardStringValueWhenUnsetConfigurationOutput) CustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardStringValueWhenUnsetConfiguration) *string { return v.CustomValue }).(pulumi.StringPtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o DashboardStringValueWhenUnsetConfigurationOutput) ValueWhenUnsetOption() DashboardValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v DashboardStringValueWhenUnsetConfiguration) *DashboardValueWhenUnsetOption {
		return v.ValueWhenUnsetOption
	}).(DashboardValueWhenUnsetOptionPtrOutput)
}

type DashboardStringValueWhenUnsetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardStringValueWhenUnsetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o DashboardStringValueWhenUnsetConfigurationPtrOutput) ToDashboardStringValueWhenUnsetConfigurationPtrOutput() DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o DashboardStringValueWhenUnsetConfigurationPtrOutput) ToDashboardStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) DashboardStringValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o DashboardStringValueWhenUnsetConfigurationPtrOutput) Elem() DashboardStringValueWhenUnsetConfigurationOutput {
	return o.ApplyT(func(v *DashboardStringValueWhenUnsetConfiguration) DashboardStringValueWhenUnsetConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardStringValueWhenUnsetConfiguration
		return ret
	}).(DashboardStringValueWhenUnsetConfigurationOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o DashboardStringValueWhenUnsetConfigurationPtrOutput) CustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardStringValueWhenUnsetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomValue
	}).(pulumi.StringPtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o DashboardStringValueWhenUnsetConfigurationPtrOutput) ValueWhenUnsetOption() DashboardValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v *DashboardStringValueWhenUnsetConfiguration) *DashboardValueWhenUnsetOption {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnsetOption
	}).(DashboardValueWhenUnsetOptionPtrOutput)
}

type DashboardSubtotalOptions struct {
	// The custom label string for the subtotal cells.
	CustomLabel *string `pulumi:"customLabel"`
	// The field level (all, custom, last) for the subtotal cells.
	FieldLevel *DashboardPivotTableSubtotalLevel `pulumi:"fieldLevel"`
	// The optional configuration of subtotal cells.
	FieldLevelOptions []DashboardPivotTableFieldSubtotalOptions `pulumi:"fieldLevelOptions"`
	// The cell styling options for the subtotals of header cells.
	MetricHeaderCellStyle *DashboardTableCellStyle `pulumi:"metricHeaderCellStyle"`
	// The style targets options for subtotals.
	StyleTargets []DashboardTableStyleTarget `pulumi:"styleTargets"`
	// The cell styling options for the subtotal cells.
	TotalCellStyle *DashboardTableCellStyle `pulumi:"totalCellStyle"`
	// The visibility configuration for the subtotal cells.
	TotalsVisibility *DashboardVisibility `pulumi:"totalsVisibility"`
	// The cell styling options for the subtotals of value cells.
	ValueCellStyle *DashboardTableCellStyle `pulumi:"valueCellStyle"`
}

// DashboardSubtotalOptionsInput is an input type that accepts DashboardSubtotalOptionsArgs and DashboardSubtotalOptionsOutput values.
// You can construct a concrete instance of `DashboardSubtotalOptionsInput` via:
//
//	DashboardSubtotalOptionsArgs{...}
type DashboardSubtotalOptionsInput interface {
	pulumi.Input

	ToDashboardSubtotalOptionsOutput() DashboardSubtotalOptionsOutput
	ToDashboardSubtotalOptionsOutputWithContext(context.Context) DashboardSubtotalOptionsOutput
}

type DashboardSubtotalOptionsArgs struct {
	// The custom label string for the subtotal cells.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The field level (all, custom, last) for the subtotal cells.
	FieldLevel DashboardPivotTableSubtotalLevelPtrInput `pulumi:"fieldLevel"`
	// The optional configuration of subtotal cells.
	FieldLevelOptions DashboardPivotTableFieldSubtotalOptionsArrayInput `pulumi:"fieldLevelOptions"`
	// The cell styling options for the subtotals of header cells.
	MetricHeaderCellStyle DashboardTableCellStylePtrInput `pulumi:"metricHeaderCellStyle"`
	// The style targets options for subtotals.
	StyleTargets DashboardTableStyleTargetArrayInput `pulumi:"styleTargets"`
	// The cell styling options for the subtotal cells.
	TotalCellStyle DashboardTableCellStylePtrInput `pulumi:"totalCellStyle"`
	// The visibility configuration for the subtotal cells.
	TotalsVisibility DashboardVisibilityPtrInput `pulumi:"totalsVisibility"`
	// The cell styling options for the subtotals of value cells.
	ValueCellStyle DashboardTableCellStylePtrInput `pulumi:"valueCellStyle"`
}

func (DashboardSubtotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSubtotalOptions)(nil)).Elem()
}

func (i DashboardSubtotalOptionsArgs) ToDashboardSubtotalOptionsOutput() DashboardSubtotalOptionsOutput {
	return i.ToDashboardSubtotalOptionsOutputWithContext(context.Background())
}

func (i DashboardSubtotalOptionsArgs) ToDashboardSubtotalOptionsOutputWithContext(ctx context.Context) DashboardSubtotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSubtotalOptionsOutput)
}

func (i DashboardSubtotalOptionsArgs) ToDashboardSubtotalOptionsPtrOutput() DashboardSubtotalOptionsPtrOutput {
	return i.ToDashboardSubtotalOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardSubtotalOptionsArgs) ToDashboardSubtotalOptionsPtrOutputWithContext(ctx context.Context) DashboardSubtotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSubtotalOptionsOutput).ToDashboardSubtotalOptionsPtrOutputWithContext(ctx)
}

// DashboardSubtotalOptionsPtrInput is an input type that accepts DashboardSubtotalOptionsArgs, DashboardSubtotalOptionsPtr and DashboardSubtotalOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardSubtotalOptionsPtrInput` via:
//
//	        DashboardSubtotalOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardSubtotalOptionsPtrInput interface {
	pulumi.Input

	ToDashboardSubtotalOptionsPtrOutput() DashboardSubtotalOptionsPtrOutput
	ToDashboardSubtotalOptionsPtrOutputWithContext(context.Context) DashboardSubtotalOptionsPtrOutput
}

type dashboardSubtotalOptionsPtrType DashboardSubtotalOptionsArgs

func DashboardSubtotalOptionsPtr(v *DashboardSubtotalOptionsArgs) DashboardSubtotalOptionsPtrInput {
	return (*dashboardSubtotalOptionsPtrType)(v)
}

func (*dashboardSubtotalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSubtotalOptions)(nil)).Elem()
}

func (i *dashboardSubtotalOptionsPtrType) ToDashboardSubtotalOptionsPtrOutput() DashboardSubtotalOptionsPtrOutput {
	return i.ToDashboardSubtotalOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardSubtotalOptionsPtrType) ToDashboardSubtotalOptionsPtrOutputWithContext(ctx context.Context) DashboardSubtotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardSubtotalOptionsPtrOutput)
}

type DashboardSubtotalOptionsOutput struct{ *pulumi.OutputState }

func (DashboardSubtotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardSubtotalOptions)(nil)).Elem()
}

func (o DashboardSubtotalOptionsOutput) ToDashboardSubtotalOptionsOutput() DashboardSubtotalOptionsOutput {
	return o
}

func (o DashboardSubtotalOptionsOutput) ToDashboardSubtotalOptionsOutputWithContext(ctx context.Context) DashboardSubtotalOptionsOutput {
	return o
}

func (o DashboardSubtotalOptionsOutput) ToDashboardSubtotalOptionsPtrOutput() DashboardSubtotalOptionsPtrOutput {
	return o.ToDashboardSubtotalOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardSubtotalOptionsOutput) ToDashboardSubtotalOptionsPtrOutputWithContext(ctx context.Context) DashboardSubtotalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardSubtotalOptions) *DashboardSubtotalOptions {
		return &v
	}).(DashboardSubtotalOptionsPtrOutput)
}

// The custom label string for the subtotal cells.
func (o DashboardSubtotalOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The field level (all, custom, last) for the subtotal cells.
func (o DashboardSubtotalOptionsOutput) FieldLevel() DashboardPivotTableSubtotalLevelPtrOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) *DashboardPivotTableSubtotalLevel { return v.FieldLevel }).(DashboardPivotTableSubtotalLevelPtrOutput)
}

// The optional configuration of subtotal cells.
func (o DashboardSubtotalOptionsOutput) FieldLevelOptions() DashboardPivotTableFieldSubtotalOptionsArrayOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) []DashboardPivotTableFieldSubtotalOptions { return v.FieldLevelOptions }).(DashboardPivotTableFieldSubtotalOptionsArrayOutput)
}

// The cell styling options for the subtotals of header cells.
func (o DashboardSubtotalOptionsOutput) MetricHeaderCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) *DashboardTableCellStyle { return v.MetricHeaderCellStyle }).(DashboardTableCellStylePtrOutput)
}

// The style targets options for subtotals.
func (o DashboardSubtotalOptionsOutput) StyleTargets() DashboardTableStyleTargetArrayOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) []DashboardTableStyleTarget { return v.StyleTargets }).(DashboardTableStyleTargetArrayOutput)
}

// The cell styling options for the subtotal cells.
func (o DashboardSubtotalOptionsOutput) TotalCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) *DashboardTableCellStyle { return v.TotalCellStyle }).(DashboardTableCellStylePtrOutput)
}

// The visibility configuration for the subtotal cells.
func (o DashboardSubtotalOptionsOutput) TotalsVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) *DashboardVisibility { return v.TotalsVisibility }).(DashboardVisibilityPtrOutput)
}

// The cell styling options for the subtotals of value cells.
func (o DashboardSubtotalOptionsOutput) ValueCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v DashboardSubtotalOptions) *DashboardTableCellStyle { return v.ValueCellStyle }).(DashboardTableCellStylePtrOutput)
}

type DashboardSubtotalOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardSubtotalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardSubtotalOptions)(nil)).Elem()
}

func (o DashboardSubtotalOptionsPtrOutput) ToDashboardSubtotalOptionsPtrOutput() DashboardSubtotalOptionsPtrOutput {
	return o
}

func (o DashboardSubtotalOptionsPtrOutput) ToDashboardSubtotalOptionsPtrOutputWithContext(ctx context.Context) DashboardSubtotalOptionsPtrOutput {
	return o
}

func (o DashboardSubtotalOptionsPtrOutput) Elem() DashboardSubtotalOptionsOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) DashboardSubtotalOptions {
		if v != nil {
			return *v
		}
		var ret DashboardSubtotalOptions
		return ret
	}).(DashboardSubtotalOptionsOutput)
}

// The custom label string for the subtotal cells.
func (o DashboardSubtotalOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The field level (all, custom, last) for the subtotal cells.
func (o DashboardSubtotalOptionsPtrOutput) FieldLevel() DashboardPivotTableSubtotalLevelPtrOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) *DashboardPivotTableSubtotalLevel {
		if v == nil {
			return nil
		}
		return v.FieldLevel
	}).(DashboardPivotTableSubtotalLevelPtrOutput)
}

// The optional configuration of subtotal cells.
func (o DashboardSubtotalOptionsPtrOutput) FieldLevelOptions() DashboardPivotTableFieldSubtotalOptionsArrayOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) []DashboardPivotTableFieldSubtotalOptions {
		if v == nil {
			return nil
		}
		return v.FieldLevelOptions
	}).(DashboardPivotTableFieldSubtotalOptionsArrayOutput)
}

// The cell styling options for the subtotals of header cells.
func (o DashboardSubtotalOptionsPtrOutput) MetricHeaderCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) *DashboardTableCellStyle {
		if v == nil {
			return nil
		}
		return v.MetricHeaderCellStyle
	}).(DashboardTableCellStylePtrOutput)
}

// The style targets options for subtotals.
func (o DashboardSubtotalOptionsPtrOutput) StyleTargets() DashboardTableStyleTargetArrayOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) []DashboardTableStyleTarget {
		if v == nil {
			return nil
		}
		return v.StyleTargets
	}).(DashboardTableStyleTargetArrayOutput)
}

// The cell styling options for the subtotal cells.
func (o DashboardSubtotalOptionsPtrOutput) TotalCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) *DashboardTableCellStyle {
		if v == nil {
			return nil
		}
		return v.TotalCellStyle
	}).(DashboardTableCellStylePtrOutput)
}

// The visibility configuration for the subtotal cells.
func (o DashboardSubtotalOptionsPtrOutput) TotalsVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.TotalsVisibility
	}).(DashboardVisibilityPtrOutput)
}

// The cell styling options for the subtotals of value cells.
func (o DashboardSubtotalOptionsPtrOutput) ValueCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v *DashboardSubtotalOptions) *DashboardTableCellStyle {
		if v == nil {
			return nil
		}
		return v.ValueCellStyle
	}).(DashboardTableCellStylePtrOutput)
}

type DashboardTableAggregatedFieldWells struct {
	// The group by field well for a pivot table. Values are grouped by group by fields.
	GroupBy []DashboardDimensionField `pulumi:"groupBy"`
	// The values field well for a pivot table. Values are aggregated based on group by fields.
	Values []DashboardMeasureField `pulumi:"values"`
}

// DashboardTableAggregatedFieldWellsInput is an input type that accepts DashboardTableAggregatedFieldWellsArgs and DashboardTableAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `DashboardTableAggregatedFieldWellsInput` via:
//
//	DashboardTableAggregatedFieldWellsArgs{...}
type DashboardTableAggregatedFieldWellsInput interface {
	pulumi.Input

	ToDashboardTableAggregatedFieldWellsOutput() DashboardTableAggregatedFieldWellsOutput
	ToDashboardTableAggregatedFieldWellsOutputWithContext(context.Context) DashboardTableAggregatedFieldWellsOutput
}

type DashboardTableAggregatedFieldWellsArgs struct {
	// The group by field well for a pivot table. Values are grouped by group by fields.
	GroupBy DashboardDimensionFieldArrayInput `pulumi:"groupBy"`
	// The values field well for a pivot table. Values are aggregated based on group by fields.
	Values DashboardMeasureFieldArrayInput `pulumi:"values"`
}

func (DashboardTableAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableAggregatedFieldWells)(nil)).Elem()
}

func (i DashboardTableAggregatedFieldWellsArgs) ToDashboardTableAggregatedFieldWellsOutput() DashboardTableAggregatedFieldWellsOutput {
	return i.ToDashboardTableAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i DashboardTableAggregatedFieldWellsArgs) ToDashboardTableAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardTableAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableAggregatedFieldWellsOutput)
}

func (i DashboardTableAggregatedFieldWellsArgs) ToDashboardTableAggregatedFieldWellsPtrOutput() DashboardTableAggregatedFieldWellsPtrOutput {
	return i.ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardTableAggregatedFieldWellsArgs) ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableAggregatedFieldWellsOutput).ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// DashboardTableAggregatedFieldWellsPtrInput is an input type that accepts DashboardTableAggregatedFieldWellsArgs, DashboardTableAggregatedFieldWellsPtr and DashboardTableAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardTableAggregatedFieldWellsPtrInput` via:
//
//	        DashboardTableAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardTableAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardTableAggregatedFieldWellsPtrOutput() DashboardTableAggregatedFieldWellsPtrOutput
	ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(context.Context) DashboardTableAggregatedFieldWellsPtrOutput
}

type dashboardTableAggregatedFieldWellsPtrType DashboardTableAggregatedFieldWellsArgs

func DashboardTableAggregatedFieldWellsPtr(v *DashboardTableAggregatedFieldWellsArgs) DashboardTableAggregatedFieldWellsPtrInput {
	return (*dashboardTableAggregatedFieldWellsPtrType)(v)
}

func (*dashboardTableAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableAggregatedFieldWells)(nil)).Elem()
}

func (i *dashboardTableAggregatedFieldWellsPtrType) ToDashboardTableAggregatedFieldWellsPtrOutput() DashboardTableAggregatedFieldWellsPtrOutput {
	return i.ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardTableAggregatedFieldWellsPtrType) ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableAggregatedFieldWellsPtrOutput)
}

type DashboardTableAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardTableAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardTableAggregatedFieldWellsOutput) ToDashboardTableAggregatedFieldWellsOutput() DashboardTableAggregatedFieldWellsOutput {
	return o
}

func (o DashboardTableAggregatedFieldWellsOutput) ToDashboardTableAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardTableAggregatedFieldWellsOutput {
	return o
}

func (o DashboardTableAggregatedFieldWellsOutput) ToDashboardTableAggregatedFieldWellsPtrOutput() DashboardTableAggregatedFieldWellsPtrOutput {
	return o.ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardTableAggregatedFieldWellsOutput) ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableAggregatedFieldWells) *DashboardTableAggregatedFieldWells {
		return &v
	}).(DashboardTableAggregatedFieldWellsPtrOutput)
}

// The group by field well for a pivot table. Values are grouped by group by fields.
func (o DashboardTableAggregatedFieldWellsOutput) GroupBy() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v DashboardTableAggregatedFieldWells) []DashboardDimensionField { return v.GroupBy }).(DashboardDimensionFieldArrayOutput)
}

// The values field well for a pivot table. Values are aggregated based on group by fields.
func (o DashboardTableAggregatedFieldWellsOutput) Values() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v DashboardTableAggregatedFieldWells) []DashboardMeasureField { return v.Values }).(DashboardMeasureFieldArrayOutput)
}

type DashboardTableAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardTableAggregatedFieldWellsPtrOutput) ToDashboardTableAggregatedFieldWellsPtrOutput() DashboardTableAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardTableAggregatedFieldWellsPtrOutput) ToDashboardTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardTableAggregatedFieldWellsPtrOutput) Elem() DashboardTableAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *DashboardTableAggregatedFieldWells) DashboardTableAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardTableAggregatedFieldWells
		return ret
	}).(DashboardTableAggregatedFieldWellsOutput)
}

// The group by field well for a pivot table. Values are grouped by group by fields.
func (o DashboardTableAggregatedFieldWellsPtrOutput) GroupBy() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v *DashboardTableAggregatedFieldWells) []DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.GroupBy
	}).(DashboardDimensionFieldArrayOutput)
}

// The values field well for a pivot table. Values are aggregated based on group by fields.
func (o DashboardTableAggregatedFieldWellsPtrOutput) Values() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v *DashboardTableAggregatedFieldWells) []DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(DashboardMeasureFieldArrayOutput)
}

type DashboardTableBorderOptions struct {
	// The color of a table border.
	Color *string `pulumi:"color"`
	// The style (none, solid) of a table border.
	Style *DashboardTableBorderStyle `pulumi:"style"`
	// The thickness of a table border.
	Thickness *float64 `pulumi:"thickness"`
}

// DashboardTableBorderOptionsInput is an input type that accepts DashboardTableBorderOptionsArgs and DashboardTableBorderOptionsOutput values.
// You can construct a concrete instance of `DashboardTableBorderOptionsInput` via:
//
//	DashboardTableBorderOptionsArgs{...}
type DashboardTableBorderOptionsInput interface {
	pulumi.Input

	ToDashboardTableBorderOptionsOutput() DashboardTableBorderOptionsOutput
	ToDashboardTableBorderOptionsOutputWithContext(context.Context) DashboardTableBorderOptionsOutput
}

type DashboardTableBorderOptionsArgs struct {
	// The color of a table border.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The style (none, solid) of a table border.
	Style DashboardTableBorderStylePtrInput `pulumi:"style"`
	// The thickness of a table border.
	Thickness pulumi.Float64PtrInput `pulumi:"thickness"`
}

func (DashboardTableBorderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableBorderOptions)(nil)).Elem()
}

func (i DashboardTableBorderOptionsArgs) ToDashboardTableBorderOptionsOutput() DashboardTableBorderOptionsOutput {
	return i.ToDashboardTableBorderOptionsOutputWithContext(context.Background())
}

func (i DashboardTableBorderOptionsArgs) ToDashboardTableBorderOptionsOutputWithContext(ctx context.Context) DashboardTableBorderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableBorderOptionsOutput)
}

func (i DashboardTableBorderOptionsArgs) ToDashboardTableBorderOptionsPtrOutput() DashboardTableBorderOptionsPtrOutput {
	return i.ToDashboardTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTableBorderOptionsArgs) ToDashboardTableBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableBorderOptionsOutput).ToDashboardTableBorderOptionsPtrOutputWithContext(ctx)
}

// DashboardTableBorderOptionsPtrInput is an input type that accepts DashboardTableBorderOptionsArgs, DashboardTableBorderOptionsPtr and DashboardTableBorderOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTableBorderOptionsPtrInput` via:
//
//	        DashboardTableBorderOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTableBorderOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTableBorderOptionsPtrOutput() DashboardTableBorderOptionsPtrOutput
	ToDashboardTableBorderOptionsPtrOutputWithContext(context.Context) DashboardTableBorderOptionsPtrOutput
}

type dashboardTableBorderOptionsPtrType DashboardTableBorderOptionsArgs

func DashboardTableBorderOptionsPtr(v *DashboardTableBorderOptionsArgs) DashboardTableBorderOptionsPtrInput {
	return (*dashboardTableBorderOptionsPtrType)(v)
}

func (*dashboardTableBorderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableBorderOptions)(nil)).Elem()
}

func (i *dashboardTableBorderOptionsPtrType) ToDashboardTableBorderOptionsPtrOutput() DashboardTableBorderOptionsPtrOutput {
	return i.ToDashboardTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTableBorderOptionsPtrType) ToDashboardTableBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableBorderOptionsPtrOutput)
}

type DashboardTableBorderOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTableBorderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableBorderOptions)(nil)).Elem()
}

func (o DashboardTableBorderOptionsOutput) ToDashboardTableBorderOptionsOutput() DashboardTableBorderOptionsOutput {
	return o
}

func (o DashboardTableBorderOptionsOutput) ToDashboardTableBorderOptionsOutputWithContext(ctx context.Context) DashboardTableBorderOptionsOutput {
	return o
}

func (o DashboardTableBorderOptionsOutput) ToDashboardTableBorderOptionsPtrOutput() DashboardTableBorderOptionsPtrOutput {
	return o.ToDashboardTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTableBorderOptionsOutput) ToDashboardTableBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableBorderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableBorderOptions) *DashboardTableBorderOptions {
		return &v
	}).(DashboardTableBorderOptionsPtrOutput)
}

// The color of a table border.
func (o DashboardTableBorderOptionsOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableBorderOptions) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The style (none, solid) of a table border.
func (o DashboardTableBorderOptionsOutput) Style() DashboardTableBorderStylePtrOutput {
	return o.ApplyT(func(v DashboardTableBorderOptions) *DashboardTableBorderStyle { return v.Style }).(DashboardTableBorderStylePtrOutput)
}

// The thickness of a table border.
func (o DashboardTableBorderOptionsOutput) Thickness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTableBorderOptions) *float64 { return v.Thickness }).(pulumi.Float64PtrOutput)
}

type DashboardTableBorderOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableBorderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableBorderOptions)(nil)).Elem()
}

func (o DashboardTableBorderOptionsPtrOutput) ToDashboardTableBorderOptionsPtrOutput() DashboardTableBorderOptionsPtrOutput {
	return o
}

func (o DashboardTableBorderOptionsPtrOutput) ToDashboardTableBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableBorderOptionsPtrOutput {
	return o
}

func (o DashboardTableBorderOptionsPtrOutput) Elem() DashboardTableBorderOptionsOutput {
	return o.ApplyT(func(v *DashboardTableBorderOptions) DashboardTableBorderOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTableBorderOptions
		return ret
	}).(DashboardTableBorderOptionsOutput)
}

// The color of a table border.
func (o DashboardTableBorderOptionsPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTableBorderOptions) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The style (none, solid) of a table border.
func (o DashboardTableBorderOptionsPtrOutput) Style() DashboardTableBorderStylePtrOutput {
	return o.ApplyT(func(v *DashboardTableBorderOptions) *DashboardTableBorderStyle {
		if v == nil {
			return nil
		}
		return v.Style
	}).(DashboardTableBorderStylePtrOutput)
}

// The thickness of a table border.
func (o DashboardTableBorderOptionsPtrOutput) Thickness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTableBorderOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.Thickness
	}).(pulumi.Float64PtrOutput)
}

type DashboardTableCellConditionalFormatting struct {
	// The field ID of the cell for conditional formatting.
	FieldId string `pulumi:"fieldId"`
	// The text format of the cell for conditional formatting.
	TextFormat *DashboardTextConditionalFormat `pulumi:"textFormat"`
}

// DashboardTableCellConditionalFormattingInput is an input type that accepts DashboardTableCellConditionalFormattingArgs and DashboardTableCellConditionalFormattingOutput values.
// You can construct a concrete instance of `DashboardTableCellConditionalFormattingInput` via:
//
//	DashboardTableCellConditionalFormattingArgs{...}
type DashboardTableCellConditionalFormattingInput interface {
	pulumi.Input

	ToDashboardTableCellConditionalFormattingOutput() DashboardTableCellConditionalFormattingOutput
	ToDashboardTableCellConditionalFormattingOutputWithContext(context.Context) DashboardTableCellConditionalFormattingOutput
}

type DashboardTableCellConditionalFormattingArgs struct {
	// The field ID of the cell for conditional formatting.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The text format of the cell for conditional formatting.
	TextFormat DashboardTextConditionalFormatPtrInput `pulumi:"textFormat"`
}

func (DashboardTableCellConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableCellConditionalFormatting)(nil)).Elem()
}

func (i DashboardTableCellConditionalFormattingArgs) ToDashboardTableCellConditionalFormattingOutput() DashboardTableCellConditionalFormattingOutput {
	return i.ToDashboardTableCellConditionalFormattingOutputWithContext(context.Background())
}

func (i DashboardTableCellConditionalFormattingArgs) ToDashboardTableCellConditionalFormattingOutputWithContext(ctx context.Context) DashboardTableCellConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellConditionalFormattingOutput)
}

func (i DashboardTableCellConditionalFormattingArgs) ToDashboardTableCellConditionalFormattingPtrOutput() DashboardTableCellConditionalFormattingPtrOutput {
	return i.ToDashboardTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i DashboardTableCellConditionalFormattingArgs) ToDashboardTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableCellConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellConditionalFormattingOutput).ToDashboardTableCellConditionalFormattingPtrOutputWithContext(ctx)
}

// DashboardTableCellConditionalFormattingPtrInput is an input type that accepts DashboardTableCellConditionalFormattingArgs, DashboardTableCellConditionalFormattingPtr and DashboardTableCellConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `DashboardTableCellConditionalFormattingPtrInput` via:
//
//	        DashboardTableCellConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type DashboardTableCellConditionalFormattingPtrInput interface {
	pulumi.Input

	ToDashboardTableCellConditionalFormattingPtrOutput() DashboardTableCellConditionalFormattingPtrOutput
	ToDashboardTableCellConditionalFormattingPtrOutputWithContext(context.Context) DashboardTableCellConditionalFormattingPtrOutput
}

type dashboardTableCellConditionalFormattingPtrType DashboardTableCellConditionalFormattingArgs

func DashboardTableCellConditionalFormattingPtr(v *DashboardTableCellConditionalFormattingArgs) DashboardTableCellConditionalFormattingPtrInput {
	return (*dashboardTableCellConditionalFormattingPtrType)(v)
}

func (*dashboardTableCellConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableCellConditionalFormatting)(nil)).Elem()
}

func (i *dashboardTableCellConditionalFormattingPtrType) ToDashboardTableCellConditionalFormattingPtrOutput() DashboardTableCellConditionalFormattingPtrOutput {
	return i.ToDashboardTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *dashboardTableCellConditionalFormattingPtrType) ToDashboardTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableCellConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellConditionalFormattingPtrOutput)
}

type DashboardTableCellConditionalFormattingOutput struct{ *pulumi.OutputState }

func (DashboardTableCellConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableCellConditionalFormatting)(nil)).Elem()
}

func (o DashboardTableCellConditionalFormattingOutput) ToDashboardTableCellConditionalFormattingOutput() DashboardTableCellConditionalFormattingOutput {
	return o
}

func (o DashboardTableCellConditionalFormattingOutput) ToDashboardTableCellConditionalFormattingOutputWithContext(ctx context.Context) DashboardTableCellConditionalFormattingOutput {
	return o
}

func (o DashboardTableCellConditionalFormattingOutput) ToDashboardTableCellConditionalFormattingPtrOutput() DashboardTableCellConditionalFormattingPtrOutput {
	return o.ToDashboardTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o DashboardTableCellConditionalFormattingOutput) ToDashboardTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableCellConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableCellConditionalFormatting) *DashboardTableCellConditionalFormatting {
		return &v
	}).(DashboardTableCellConditionalFormattingPtrOutput)
}

// The field ID of the cell for conditional formatting.
func (o DashboardTableCellConditionalFormattingOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableCellConditionalFormatting) string { return v.FieldId }).(pulumi.StringOutput)
}

// The text format of the cell for conditional formatting.
func (o DashboardTableCellConditionalFormattingOutput) TextFormat() DashboardTextConditionalFormatPtrOutput {
	return o.ApplyT(func(v DashboardTableCellConditionalFormatting) *DashboardTextConditionalFormat { return v.TextFormat }).(DashboardTextConditionalFormatPtrOutput)
}

type DashboardTableCellConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableCellConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableCellConditionalFormatting)(nil)).Elem()
}

func (o DashboardTableCellConditionalFormattingPtrOutput) ToDashboardTableCellConditionalFormattingPtrOutput() DashboardTableCellConditionalFormattingPtrOutput {
	return o
}

func (o DashboardTableCellConditionalFormattingPtrOutput) ToDashboardTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableCellConditionalFormattingPtrOutput {
	return o
}

func (o DashboardTableCellConditionalFormattingPtrOutput) Elem() DashboardTableCellConditionalFormattingOutput {
	return o.ApplyT(func(v *DashboardTableCellConditionalFormatting) DashboardTableCellConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret DashboardTableCellConditionalFormatting
		return ret
	}).(DashboardTableCellConditionalFormattingOutput)
}

// The field ID of the cell for conditional formatting.
func (o DashboardTableCellConditionalFormattingPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellConditionalFormatting) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The text format of the cell for conditional formatting.
func (o DashboardTableCellConditionalFormattingPtrOutput) TextFormat() DashboardTextConditionalFormatPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellConditionalFormatting) *DashboardTextConditionalFormat {
		if v == nil {
			return nil
		}
		return v.TextFormat
	}).(DashboardTextConditionalFormatPtrOutput)
}

type DashboardTableCellImageSizingConfiguration struct {
	// The cell scaling configuration of the sizing options for the table image configuration.
	TableCellImageScalingConfiguration *DashboardTableCellImageScalingConfiguration `pulumi:"tableCellImageScalingConfiguration"`
}

// DashboardTableCellImageSizingConfigurationInput is an input type that accepts DashboardTableCellImageSizingConfigurationArgs and DashboardTableCellImageSizingConfigurationOutput values.
// You can construct a concrete instance of `DashboardTableCellImageSizingConfigurationInput` via:
//
//	DashboardTableCellImageSizingConfigurationArgs{...}
type DashboardTableCellImageSizingConfigurationInput interface {
	pulumi.Input

	ToDashboardTableCellImageSizingConfigurationOutput() DashboardTableCellImageSizingConfigurationOutput
	ToDashboardTableCellImageSizingConfigurationOutputWithContext(context.Context) DashboardTableCellImageSizingConfigurationOutput
}

type DashboardTableCellImageSizingConfigurationArgs struct {
	// The cell scaling configuration of the sizing options for the table image configuration.
	TableCellImageScalingConfiguration DashboardTableCellImageScalingConfigurationPtrInput `pulumi:"tableCellImageScalingConfiguration"`
}

func (DashboardTableCellImageSizingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableCellImageSizingConfiguration)(nil)).Elem()
}

func (i DashboardTableCellImageSizingConfigurationArgs) ToDashboardTableCellImageSizingConfigurationOutput() DashboardTableCellImageSizingConfigurationOutput {
	return i.ToDashboardTableCellImageSizingConfigurationOutputWithContext(context.Background())
}

func (i DashboardTableCellImageSizingConfigurationArgs) ToDashboardTableCellImageSizingConfigurationOutputWithContext(ctx context.Context) DashboardTableCellImageSizingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellImageSizingConfigurationOutput)
}

func (i DashboardTableCellImageSizingConfigurationArgs) ToDashboardTableCellImageSizingConfigurationPtrOutput() DashboardTableCellImageSizingConfigurationPtrOutput {
	return i.ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTableCellImageSizingConfigurationArgs) ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableCellImageSizingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellImageSizingConfigurationOutput).ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(ctx)
}

// DashboardTableCellImageSizingConfigurationPtrInput is an input type that accepts DashboardTableCellImageSizingConfigurationArgs, DashboardTableCellImageSizingConfigurationPtr and DashboardTableCellImageSizingConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTableCellImageSizingConfigurationPtrInput` via:
//
//	        DashboardTableCellImageSizingConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTableCellImageSizingConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTableCellImageSizingConfigurationPtrOutput() DashboardTableCellImageSizingConfigurationPtrOutput
	ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(context.Context) DashboardTableCellImageSizingConfigurationPtrOutput
}

type dashboardTableCellImageSizingConfigurationPtrType DashboardTableCellImageSizingConfigurationArgs

func DashboardTableCellImageSizingConfigurationPtr(v *DashboardTableCellImageSizingConfigurationArgs) DashboardTableCellImageSizingConfigurationPtrInput {
	return (*dashboardTableCellImageSizingConfigurationPtrType)(v)
}

func (*dashboardTableCellImageSizingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableCellImageSizingConfiguration)(nil)).Elem()
}

func (i *dashboardTableCellImageSizingConfigurationPtrType) ToDashboardTableCellImageSizingConfigurationPtrOutput() DashboardTableCellImageSizingConfigurationPtrOutput {
	return i.ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTableCellImageSizingConfigurationPtrType) ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableCellImageSizingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellImageSizingConfigurationPtrOutput)
}

type DashboardTableCellImageSizingConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTableCellImageSizingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableCellImageSizingConfiguration)(nil)).Elem()
}

func (o DashboardTableCellImageSizingConfigurationOutput) ToDashboardTableCellImageSizingConfigurationOutput() DashboardTableCellImageSizingConfigurationOutput {
	return o
}

func (o DashboardTableCellImageSizingConfigurationOutput) ToDashboardTableCellImageSizingConfigurationOutputWithContext(ctx context.Context) DashboardTableCellImageSizingConfigurationOutput {
	return o
}

func (o DashboardTableCellImageSizingConfigurationOutput) ToDashboardTableCellImageSizingConfigurationPtrOutput() DashboardTableCellImageSizingConfigurationPtrOutput {
	return o.ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTableCellImageSizingConfigurationOutput) ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableCellImageSizingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableCellImageSizingConfiguration) *DashboardTableCellImageSizingConfiguration {
		return &v
	}).(DashboardTableCellImageSizingConfigurationPtrOutput)
}

// The cell scaling configuration of the sizing options for the table image configuration.
func (o DashboardTableCellImageSizingConfigurationOutput) TableCellImageScalingConfiguration() DashboardTableCellImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableCellImageSizingConfiguration) *DashboardTableCellImageScalingConfiguration {
		return v.TableCellImageScalingConfiguration
	}).(DashboardTableCellImageScalingConfigurationPtrOutput)
}

type DashboardTableCellImageSizingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableCellImageSizingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableCellImageSizingConfiguration)(nil)).Elem()
}

func (o DashboardTableCellImageSizingConfigurationPtrOutput) ToDashboardTableCellImageSizingConfigurationPtrOutput() DashboardTableCellImageSizingConfigurationPtrOutput {
	return o
}

func (o DashboardTableCellImageSizingConfigurationPtrOutput) ToDashboardTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableCellImageSizingConfigurationPtrOutput {
	return o
}

func (o DashboardTableCellImageSizingConfigurationPtrOutput) Elem() DashboardTableCellImageSizingConfigurationOutput {
	return o.ApplyT(func(v *DashboardTableCellImageSizingConfiguration) DashboardTableCellImageSizingConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTableCellImageSizingConfiguration
		return ret
	}).(DashboardTableCellImageSizingConfigurationOutput)
}

// The cell scaling configuration of the sizing options for the table image configuration.
func (o DashboardTableCellImageSizingConfigurationPtrOutput) TableCellImageScalingConfiguration() DashboardTableCellImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellImageSizingConfiguration) *DashboardTableCellImageScalingConfiguration {
		if v == nil {
			return nil
		}
		return v.TableCellImageScalingConfiguration
	}).(DashboardTableCellImageScalingConfigurationPtrOutput)
}

type DashboardTableCellStyle struct {
	// The background color for the table cells.
	BackgroundColor *string `pulumi:"backgroundColor"`
	// The borders for the table cells.
	Border *DashboardGlobalTableBorderOptions `pulumi:"border"`
	// The font configuration of the table cells.
	FontConfiguration *DashboardFontConfiguration `pulumi:"fontConfiguration"`
	// The height color for the table cells.
	Height *float64 `pulumi:"height"`
	// The horizontal text alignment (left, center, right, auto) for the table cells.
	HorizontalTextAlignment *DashboardHorizontalTextAlignment `pulumi:"horizontalTextAlignment"`
	// The text wrap (none, wrap) for the table cells.
	TextWrap *DashboardTextWrap `pulumi:"textWrap"`
	// The vertical text alignment (top, middle, bottom) for the table cells.
	VerticalTextAlignment *DashboardVerticalTextAlignment `pulumi:"verticalTextAlignment"`
	// The visibility of the table cells.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardTableCellStyleInput is an input type that accepts DashboardTableCellStyleArgs and DashboardTableCellStyleOutput values.
// You can construct a concrete instance of `DashboardTableCellStyleInput` via:
//
//	DashboardTableCellStyleArgs{...}
type DashboardTableCellStyleInput interface {
	pulumi.Input

	ToDashboardTableCellStyleOutput() DashboardTableCellStyleOutput
	ToDashboardTableCellStyleOutputWithContext(context.Context) DashboardTableCellStyleOutput
}

type DashboardTableCellStyleArgs struct {
	// The background color for the table cells.
	BackgroundColor pulumi.StringPtrInput `pulumi:"backgroundColor"`
	// The borders for the table cells.
	Border DashboardGlobalTableBorderOptionsPtrInput `pulumi:"border"`
	// The font configuration of the table cells.
	FontConfiguration DashboardFontConfigurationPtrInput `pulumi:"fontConfiguration"`
	// The height color for the table cells.
	Height pulumi.Float64PtrInput `pulumi:"height"`
	// The horizontal text alignment (left, center, right, auto) for the table cells.
	HorizontalTextAlignment DashboardHorizontalTextAlignmentPtrInput `pulumi:"horizontalTextAlignment"`
	// The text wrap (none, wrap) for the table cells.
	TextWrap DashboardTextWrapPtrInput `pulumi:"textWrap"`
	// The vertical text alignment (top, middle, bottom) for the table cells.
	VerticalTextAlignment DashboardVerticalTextAlignmentPtrInput `pulumi:"verticalTextAlignment"`
	// The visibility of the table cells.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardTableCellStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableCellStyle)(nil)).Elem()
}

func (i DashboardTableCellStyleArgs) ToDashboardTableCellStyleOutput() DashboardTableCellStyleOutput {
	return i.ToDashboardTableCellStyleOutputWithContext(context.Background())
}

func (i DashboardTableCellStyleArgs) ToDashboardTableCellStyleOutputWithContext(ctx context.Context) DashboardTableCellStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellStyleOutput)
}

func (i DashboardTableCellStyleArgs) ToDashboardTableCellStylePtrOutput() DashboardTableCellStylePtrOutput {
	return i.ToDashboardTableCellStylePtrOutputWithContext(context.Background())
}

func (i DashboardTableCellStyleArgs) ToDashboardTableCellStylePtrOutputWithContext(ctx context.Context) DashboardTableCellStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellStyleOutput).ToDashboardTableCellStylePtrOutputWithContext(ctx)
}

// DashboardTableCellStylePtrInput is an input type that accepts DashboardTableCellStyleArgs, DashboardTableCellStylePtr and DashboardTableCellStylePtrOutput values.
// You can construct a concrete instance of `DashboardTableCellStylePtrInput` via:
//
//	        DashboardTableCellStyleArgs{...}
//
//	or:
//
//	        nil
type DashboardTableCellStylePtrInput interface {
	pulumi.Input

	ToDashboardTableCellStylePtrOutput() DashboardTableCellStylePtrOutput
	ToDashboardTableCellStylePtrOutputWithContext(context.Context) DashboardTableCellStylePtrOutput
}

type dashboardTableCellStylePtrType DashboardTableCellStyleArgs

func DashboardTableCellStylePtr(v *DashboardTableCellStyleArgs) DashboardTableCellStylePtrInput {
	return (*dashboardTableCellStylePtrType)(v)
}

func (*dashboardTableCellStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableCellStyle)(nil)).Elem()
}

func (i *dashboardTableCellStylePtrType) ToDashboardTableCellStylePtrOutput() DashboardTableCellStylePtrOutput {
	return i.ToDashboardTableCellStylePtrOutputWithContext(context.Background())
}

func (i *dashboardTableCellStylePtrType) ToDashboardTableCellStylePtrOutputWithContext(ctx context.Context) DashboardTableCellStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableCellStylePtrOutput)
}

type DashboardTableCellStyleOutput struct{ *pulumi.OutputState }

func (DashboardTableCellStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableCellStyle)(nil)).Elem()
}

func (o DashboardTableCellStyleOutput) ToDashboardTableCellStyleOutput() DashboardTableCellStyleOutput {
	return o
}

func (o DashboardTableCellStyleOutput) ToDashboardTableCellStyleOutputWithContext(ctx context.Context) DashboardTableCellStyleOutput {
	return o
}

func (o DashboardTableCellStyleOutput) ToDashboardTableCellStylePtrOutput() DashboardTableCellStylePtrOutput {
	return o.ToDashboardTableCellStylePtrOutputWithContext(context.Background())
}

func (o DashboardTableCellStyleOutput) ToDashboardTableCellStylePtrOutputWithContext(ctx context.Context) DashboardTableCellStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableCellStyle) *DashboardTableCellStyle {
		return &v
	}).(DashboardTableCellStylePtrOutput)
}

// The background color for the table cells.
func (o DashboardTableCellStyleOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *string { return v.BackgroundColor }).(pulumi.StringPtrOutput)
}

// The borders for the table cells.
func (o DashboardTableCellStyleOutput) Border() DashboardGlobalTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *DashboardGlobalTableBorderOptions { return v.Border }).(DashboardGlobalTableBorderOptionsPtrOutput)
}

// The font configuration of the table cells.
func (o DashboardTableCellStyleOutput) FontConfiguration() DashboardFontConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *DashboardFontConfiguration { return v.FontConfiguration }).(DashboardFontConfigurationPtrOutput)
}

// The height color for the table cells.
func (o DashboardTableCellStyleOutput) Height() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *float64 { return v.Height }).(pulumi.Float64PtrOutput)
}

// The horizontal text alignment (left, center, right, auto) for the table cells.
func (o DashboardTableCellStyleOutput) HorizontalTextAlignment() DashboardHorizontalTextAlignmentPtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *DashboardHorizontalTextAlignment { return v.HorizontalTextAlignment }).(DashboardHorizontalTextAlignmentPtrOutput)
}

// The text wrap (none, wrap) for the table cells.
func (o DashboardTableCellStyleOutput) TextWrap() DashboardTextWrapPtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *DashboardTextWrap { return v.TextWrap }).(DashboardTextWrapPtrOutput)
}

// The vertical text alignment (top, middle, bottom) for the table cells.
func (o DashboardTableCellStyleOutput) VerticalTextAlignment() DashboardVerticalTextAlignmentPtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *DashboardVerticalTextAlignment { return v.VerticalTextAlignment }).(DashboardVerticalTextAlignmentPtrOutput)
}

// The visibility of the table cells.
func (o DashboardTableCellStyleOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTableCellStyle) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardTableCellStylePtrOutput struct{ *pulumi.OutputState }

func (DashboardTableCellStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableCellStyle)(nil)).Elem()
}

func (o DashboardTableCellStylePtrOutput) ToDashboardTableCellStylePtrOutput() DashboardTableCellStylePtrOutput {
	return o
}

func (o DashboardTableCellStylePtrOutput) ToDashboardTableCellStylePtrOutputWithContext(ctx context.Context) DashboardTableCellStylePtrOutput {
	return o
}

func (o DashboardTableCellStylePtrOutput) Elem() DashboardTableCellStyleOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) DashboardTableCellStyle {
		if v != nil {
			return *v
		}
		var ret DashboardTableCellStyle
		return ret
	}).(DashboardTableCellStyleOutput)
}

// The background color for the table cells.
func (o DashboardTableCellStylePtrOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *string {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(pulumi.StringPtrOutput)
}

// The borders for the table cells.
func (o DashboardTableCellStylePtrOutput) Border() DashboardGlobalTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *DashboardGlobalTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Border
	}).(DashboardGlobalTableBorderOptionsPtrOutput)
}

// The font configuration of the table cells.
func (o DashboardTableCellStylePtrOutput) FontConfiguration() DashboardFontConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *DashboardFontConfiguration {
		if v == nil {
			return nil
		}
		return v.FontConfiguration
	}).(DashboardFontConfigurationPtrOutput)
}

// The height color for the table cells.
func (o DashboardTableCellStylePtrOutput) Height() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *float64 {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.Float64PtrOutput)
}

// The horizontal text alignment (left, center, right, auto) for the table cells.
func (o DashboardTableCellStylePtrOutput) HorizontalTextAlignment() DashboardHorizontalTextAlignmentPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *DashboardHorizontalTextAlignment {
		if v == nil {
			return nil
		}
		return v.HorizontalTextAlignment
	}).(DashboardHorizontalTextAlignmentPtrOutput)
}

// The text wrap (none, wrap) for the table cells.
func (o DashboardTableCellStylePtrOutput) TextWrap() DashboardTextWrapPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *DashboardTextWrap {
		if v == nil {
			return nil
		}
		return v.TextWrap
	}).(DashboardTextWrapPtrOutput)
}

// The vertical text alignment (top, middle, bottom) for the table cells.
func (o DashboardTableCellStylePtrOutput) VerticalTextAlignment() DashboardVerticalTextAlignmentPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *DashboardVerticalTextAlignment {
		if v == nil {
			return nil
		}
		return v.VerticalTextAlignment
	}).(DashboardVerticalTextAlignmentPtrOutput)
}

// The visibility of the table cells.
func (o DashboardTableCellStylePtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardTableCellStyle) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardTableConditionalFormatting struct {
	// Conditional formatting options for a `PivotTableVisual` .
	ConditionalFormattingOptions []DashboardTableConditionalFormattingOption `pulumi:"conditionalFormattingOptions"`
}

// DashboardTableConditionalFormattingInput is an input type that accepts DashboardTableConditionalFormattingArgs and DashboardTableConditionalFormattingOutput values.
// You can construct a concrete instance of `DashboardTableConditionalFormattingInput` via:
//
//	DashboardTableConditionalFormattingArgs{...}
type DashboardTableConditionalFormattingInput interface {
	pulumi.Input

	ToDashboardTableConditionalFormattingOutput() DashboardTableConditionalFormattingOutput
	ToDashboardTableConditionalFormattingOutputWithContext(context.Context) DashboardTableConditionalFormattingOutput
}

type DashboardTableConditionalFormattingArgs struct {
	// Conditional formatting options for a `PivotTableVisual` .
	ConditionalFormattingOptions DashboardTableConditionalFormattingOptionArrayInput `pulumi:"conditionalFormattingOptions"`
}

func (DashboardTableConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableConditionalFormatting)(nil)).Elem()
}

func (i DashboardTableConditionalFormattingArgs) ToDashboardTableConditionalFormattingOutput() DashboardTableConditionalFormattingOutput {
	return i.ToDashboardTableConditionalFormattingOutputWithContext(context.Background())
}

func (i DashboardTableConditionalFormattingArgs) ToDashboardTableConditionalFormattingOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConditionalFormattingOutput)
}

func (i DashboardTableConditionalFormattingArgs) ToDashboardTableConditionalFormattingPtrOutput() DashboardTableConditionalFormattingPtrOutput {
	return i.ToDashboardTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i DashboardTableConditionalFormattingArgs) ToDashboardTableConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConditionalFormattingOutput).ToDashboardTableConditionalFormattingPtrOutputWithContext(ctx)
}

// DashboardTableConditionalFormattingPtrInput is an input type that accepts DashboardTableConditionalFormattingArgs, DashboardTableConditionalFormattingPtr and DashboardTableConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `DashboardTableConditionalFormattingPtrInput` via:
//
//	        DashboardTableConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type DashboardTableConditionalFormattingPtrInput interface {
	pulumi.Input

	ToDashboardTableConditionalFormattingPtrOutput() DashboardTableConditionalFormattingPtrOutput
	ToDashboardTableConditionalFormattingPtrOutputWithContext(context.Context) DashboardTableConditionalFormattingPtrOutput
}

type dashboardTableConditionalFormattingPtrType DashboardTableConditionalFormattingArgs

func DashboardTableConditionalFormattingPtr(v *DashboardTableConditionalFormattingArgs) DashboardTableConditionalFormattingPtrInput {
	return (*dashboardTableConditionalFormattingPtrType)(v)
}

func (*dashboardTableConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableConditionalFormatting)(nil)).Elem()
}

func (i *dashboardTableConditionalFormattingPtrType) ToDashboardTableConditionalFormattingPtrOutput() DashboardTableConditionalFormattingPtrOutput {
	return i.ToDashboardTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *dashboardTableConditionalFormattingPtrType) ToDashboardTableConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConditionalFormattingPtrOutput)
}

type DashboardTableConditionalFormattingOutput struct{ *pulumi.OutputState }

func (DashboardTableConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableConditionalFormatting)(nil)).Elem()
}

func (o DashboardTableConditionalFormattingOutput) ToDashboardTableConditionalFormattingOutput() DashboardTableConditionalFormattingOutput {
	return o
}

func (o DashboardTableConditionalFormattingOutput) ToDashboardTableConditionalFormattingOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingOutput {
	return o
}

func (o DashboardTableConditionalFormattingOutput) ToDashboardTableConditionalFormattingPtrOutput() DashboardTableConditionalFormattingPtrOutput {
	return o.ToDashboardTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o DashboardTableConditionalFormattingOutput) ToDashboardTableConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableConditionalFormatting) *DashboardTableConditionalFormatting {
		return &v
	}).(DashboardTableConditionalFormattingPtrOutput)
}

// Conditional formatting options for a `PivotTableVisual` .
func (o DashboardTableConditionalFormattingOutput) ConditionalFormattingOptions() DashboardTableConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v DashboardTableConditionalFormatting) []DashboardTableConditionalFormattingOption {
		return v.ConditionalFormattingOptions
	}).(DashboardTableConditionalFormattingOptionArrayOutput)
}

type DashboardTableConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableConditionalFormatting)(nil)).Elem()
}

func (o DashboardTableConditionalFormattingPtrOutput) ToDashboardTableConditionalFormattingPtrOutput() DashboardTableConditionalFormattingPtrOutput {
	return o
}

func (o DashboardTableConditionalFormattingPtrOutput) ToDashboardTableConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingPtrOutput {
	return o
}

func (o DashboardTableConditionalFormattingPtrOutput) Elem() DashboardTableConditionalFormattingOutput {
	return o.ApplyT(func(v *DashboardTableConditionalFormatting) DashboardTableConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret DashboardTableConditionalFormatting
		return ret
	}).(DashboardTableConditionalFormattingOutput)
}

// Conditional formatting options for a `PivotTableVisual` .
func (o DashboardTableConditionalFormattingPtrOutput) ConditionalFormattingOptions() DashboardTableConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v *DashboardTableConditionalFormatting) []DashboardTableConditionalFormattingOption {
		if v == nil {
			return nil
		}
		return v.ConditionalFormattingOptions
	}).(DashboardTableConditionalFormattingOptionArrayOutput)
}

type DashboardTableConditionalFormattingOption struct {
	// The cell conditional formatting option for a table.
	Cell *DashboardTableCellConditionalFormatting `pulumi:"cell"`
	// The row conditional formatting option for a table.
	Row *DashboardTableRowConditionalFormatting `pulumi:"row"`
}

// DashboardTableConditionalFormattingOptionInput is an input type that accepts DashboardTableConditionalFormattingOptionArgs and DashboardTableConditionalFormattingOptionOutput values.
// You can construct a concrete instance of `DashboardTableConditionalFormattingOptionInput` via:
//
//	DashboardTableConditionalFormattingOptionArgs{...}
type DashboardTableConditionalFormattingOptionInput interface {
	pulumi.Input

	ToDashboardTableConditionalFormattingOptionOutput() DashboardTableConditionalFormattingOptionOutput
	ToDashboardTableConditionalFormattingOptionOutputWithContext(context.Context) DashboardTableConditionalFormattingOptionOutput
}

type DashboardTableConditionalFormattingOptionArgs struct {
	// The cell conditional formatting option for a table.
	Cell DashboardTableCellConditionalFormattingPtrInput `pulumi:"cell"`
	// The row conditional formatting option for a table.
	Row DashboardTableRowConditionalFormattingPtrInput `pulumi:"row"`
}

func (DashboardTableConditionalFormattingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableConditionalFormattingOption)(nil)).Elem()
}

func (i DashboardTableConditionalFormattingOptionArgs) ToDashboardTableConditionalFormattingOptionOutput() DashboardTableConditionalFormattingOptionOutput {
	return i.ToDashboardTableConditionalFormattingOptionOutputWithContext(context.Background())
}

func (i DashboardTableConditionalFormattingOptionArgs) ToDashboardTableConditionalFormattingOptionOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConditionalFormattingOptionOutput)
}

// DashboardTableConditionalFormattingOptionArrayInput is an input type that accepts DashboardTableConditionalFormattingOptionArray and DashboardTableConditionalFormattingOptionArrayOutput values.
// You can construct a concrete instance of `DashboardTableConditionalFormattingOptionArrayInput` via:
//
//	DashboardTableConditionalFormattingOptionArray{ DashboardTableConditionalFormattingOptionArgs{...} }
type DashboardTableConditionalFormattingOptionArrayInput interface {
	pulumi.Input

	ToDashboardTableConditionalFormattingOptionArrayOutput() DashboardTableConditionalFormattingOptionArrayOutput
	ToDashboardTableConditionalFormattingOptionArrayOutputWithContext(context.Context) DashboardTableConditionalFormattingOptionArrayOutput
}

type DashboardTableConditionalFormattingOptionArray []DashboardTableConditionalFormattingOptionInput

func (DashboardTableConditionalFormattingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableConditionalFormattingOption)(nil)).Elem()
}

func (i DashboardTableConditionalFormattingOptionArray) ToDashboardTableConditionalFormattingOptionArrayOutput() DashboardTableConditionalFormattingOptionArrayOutput {
	return i.ToDashboardTableConditionalFormattingOptionArrayOutputWithContext(context.Background())
}

func (i DashboardTableConditionalFormattingOptionArray) ToDashboardTableConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConditionalFormattingOptionArrayOutput)
}

type DashboardTableConditionalFormattingOptionOutput struct{ *pulumi.OutputState }

func (DashboardTableConditionalFormattingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableConditionalFormattingOption)(nil)).Elem()
}

func (o DashboardTableConditionalFormattingOptionOutput) ToDashboardTableConditionalFormattingOptionOutput() DashboardTableConditionalFormattingOptionOutput {
	return o
}

func (o DashboardTableConditionalFormattingOptionOutput) ToDashboardTableConditionalFormattingOptionOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingOptionOutput {
	return o
}

// The cell conditional formatting option for a table.
func (o DashboardTableConditionalFormattingOptionOutput) Cell() DashboardTableCellConditionalFormattingPtrOutput {
	return o.ApplyT(func(v DashboardTableConditionalFormattingOption) *DashboardTableCellConditionalFormatting {
		return v.Cell
	}).(DashboardTableCellConditionalFormattingPtrOutput)
}

// The row conditional formatting option for a table.
func (o DashboardTableConditionalFormattingOptionOutput) Row() DashboardTableRowConditionalFormattingPtrOutput {
	return o.ApplyT(func(v DashboardTableConditionalFormattingOption) *DashboardTableRowConditionalFormatting {
		return v.Row
	}).(DashboardTableRowConditionalFormattingPtrOutput)
}

type DashboardTableConditionalFormattingOptionArrayOutput struct{ *pulumi.OutputState }

func (DashboardTableConditionalFormattingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableConditionalFormattingOption)(nil)).Elem()
}

func (o DashboardTableConditionalFormattingOptionArrayOutput) ToDashboardTableConditionalFormattingOptionArrayOutput() DashboardTableConditionalFormattingOptionArrayOutput {
	return o
}

func (o DashboardTableConditionalFormattingOptionArrayOutput) ToDashboardTableConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) DashboardTableConditionalFormattingOptionArrayOutput {
	return o
}

func (o DashboardTableConditionalFormattingOptionArrayOutput) Index(i pulumi.IntInput) DashboardTableConditionalFormattingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTableConditionalFormattingOption {
		return vs[0].([]DashboardTableConditionalFormattingOption)[vs[1].(int)]
	}).(DashboardTableConditionalFormattingOptionOutput)
}

type DashboardTableConfiguration struct {
	// The field options for a table visual.
	FieldOptions *DashboardTableFieldOptions `pulumi:"fieldOptions"`
	// The field wells of the visual.
	FieldWells *DashboardTableFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *DashboardVisualInteractionOptions `pulumi:"interactions"`
	// The paginated report options for a table visual.
	PaginatedReportOptions *DashboardTablePaginatedReportOptions `pulumi:"paginatedReportOptions"`
	// The sort configuration for a `TableVisual` .
	SortConfiguration *DashboardTableSortConfiguration `pulumi:"sortConfiguration"`
	// A collection of inline visualizations to display within a chart.
	TableInlineVisualizations []DashboardTableInlineVisualization `pulumi:"tableInlineVisualizations"`
	// The table options for a table visual.
	TableOptions *DashboardTableOptions `pulumi:"tableOptions"`
	// The total options for a table visual.
	TotalOptions *DashboardTotalOptions `pulumi:"totalOptions"`
}

// DashboardTableConfigurationInput is an input type that accepts DashboardTableConfigurationArgs and DashboardTableConfigurationOutput values.
// You can construct a concrete instance of `DashboardTableConfigurationInput` via:
//
//	DashboardTableConfigurationArgs{...}
type DashboardTableConfigurationInput interface {
	pulumi.Input

	ToDashboardTableConfigurationOutput() DashboardTableConfigurationOutput
	ToDashboardTableConfigurationOutputWithContext(context.Context) DashboardTableConfigurationOutput
}

type DashboardTableConfigurationArgs struct {
	// The field options for a table visual.
	FieldOptions DashboardTableFieldOptionsPtrInput `pulumi:"fieldOptions"`
	// The field wells of the visual.
	FieldWells DashboardTableFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions DashboardVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The paginated report options for a table visual.
	PaginatedReportOptions DashboardTablePaginatedReportOptionsPtrInput `pulumi:"paginatedReportOptions"`
	// The sort configuration for a `TableVisual` .
	SortConfiguration DashboardTableSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// A collection of inline visualizations to display within a chart.
	TableInlineVisualizations DashboardTableInlineVisualizationArrayInput `pulumi:"tableInlineVisualizations"`
	// The table options for a table visual.
	TableOptions DashboardTableOptionsPtrInput `pulumi:"tableOptions"`
	// The total options for a table visual.
	TotalOptions DashboardTotalOptionsPtrInput `pulumi:"totalOptions"`
}

func (DashboardTableConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableConfiguration)(nil)).Elem()
}

func (i DashboardTableConfigurationArgs) ToDashboardTableConfigurationOutput() DashboardTableConfigurationOutput {
	return i.ToDashboardTableConfigurationOutputWithContext(context.Background())
}

func (i DashboardTableConfigurationArgs) ToDashboardTableConfigurationOutputWithContext(ctx context.Context) DashboardTableConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConfigurationOutput)
}

func (i DashboardTableConfigurationArgs) ToDashboardTableConfigurationPtrOutput() DashboardTableConfigurationPtrOutput {
	return i.ToDashboardTableConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTableConfigurationArgs) ToDashboardTableConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConfigurationOutput).ToDashboardTableConfigurationPtrOutputWithContext(ctx)
}

// DashboardTableConfigurationPtrInput is an input type that accepts DashboardTableConfigurationArgs, DashboardTableConfigurationPtr and DashboardTableConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTableConfigurationPtrInput` via:
//
//	        DashboardTableConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTableConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTableConfigurationPtrOutput() DashboardTableConfigurationPtrOutput
	ToDashboardTableConfigurationPtrOutputWithContext(context.Context) DashboardTableConfigurationPtrOutput
}

type dashboardTableConfigurationPtrType DashboardTableConfigurationArgs

func DashboardTableConfigurationPtr(v *DashboardTableConfigurationArgs) DashboardTableConfigurationPtrInput {
	return (*dashboardTableConfigurationPtrType)(v)
}

func (*dashboardTableConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableConfiguration)(nil)).Elem()
}

func (i *dashboardTableConfigurationPtrType) ToDashboardTableConfigurationPtrOutput() DashboardTableConfigurationPtrOutput {
	return i.ToDashboardTableConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTableConfigurationPtrType) ToDashboardTableConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableConfigurationPtrOutput)
}

type DashboardTableConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTableConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableConfiguration)(nil)).Elem()
}

func (o DashboardTableConfigurationOutput) ToDashboardTableConfigurationOutput() DashboardTableConfigurationOutput {
	return o
}

func (o DashboardTableConfigurationOutput) ToDashboardTableConfigurationOutputWithContext(ctx context.Context) DashboardTableConfigurationOutput {
	return o
}

func (o DashboardTableConfigurationOutput) ToDashboardTableConfigurationPtrOutput() DashboardTableConfigurationPtrOutput {
	return o.ToDashboardTableConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTableConfigurationOutput) ToDashboardTableConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableConfiguration) *DashboardTableConfiguration {
		return &v
	}).(DashboardTableConfigurationPtrOutput)
}

// The field options for a table visual.
func (o DashboardTableConfigurationOutput) FieldOptions() DashboardTableFieldOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) *DashboardTableFieldOptions { return v.FieldOptions }).(DashboardTableFieldOptionsPtrOutput)
}

// The field wells of the visual.
func (o DashboardTableConfigurationOutput) FieldWells() DashboardTableFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) *DashboardTableFieldWells { return v.FieldWells }).(DashboardTableFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardTableConfigurationOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) *DashboardVisualInteractionOptions { return v.Interactions }).(DashboardVisualInteractionOptionsPtrOutput)
}

// The paginated report options for a table visual.
func (o DashboardTableConfigurationOutput) PaginatedReportOptions() DashboardTablePaginatedReportOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) *DashboardTablePaginatedReportOptions {
		return v.PaginatedReportOptions
	}).(DashboardTablePaginatedReportOptionsPtrOutput)
}

// The sort configuration for a `TableVisual` .
func (o DashboardTableConfigurationOutput) SortConfiguration() DashboardTableSortConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) *DashboardTableSortConfiguration { return v.SortConfiguration }).(DashboardTableSortConfigurationPtrOutput)
}

// A collection of inline visualizations to display within a chart.
func (o DashboardTableConfigurationOutput) TableInlineVisualizations() DashboardTableInlineVisualizationArrayOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) []DashboardTableInlineVisualization {
		return v.TableInlineVisualizations
	}).(DashboardTableInlineVisualizationArrayOutput)
}

// The table options for a table visual.
func (o DashboardTableConfigurationOutput) TableOptions() DashboardTableOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) *DashboardTableOptions { return v.TableOptions }).(DashboardTableOptionsPtrOutput)
}

// The total options for a table visual.
func (o DashboardTableConfigurationOutput) TotalOptions() DashboardTotalOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableConfiguration) *DashboardTotalOptions { return v.TotalOptions }).(DashboardTotalOptionsPtrOutput)
}

type DashboardTableConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableConfiguration)(nil)).Elem()
}

func (o DashboardTableConfigurationPtrOutput) ToDashboardTableConfigurationPtrOutput() DashboardTableConfigurationPtrOutput {
	return o
}

func (o DashboardTableConfigurationPtrOutput) ToDashboardTableConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableConfigurationPtrOutput {
	return o
}

func (o DashboardTableConfigurationPtrOutput) Elem() DashboardTableConfigurationOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) DashboardTableConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTableConfiguration
		return ret
	}).(DashboardTableConfigurationOutput)
}

// The field options for a table visual.
func (o DashboardTableConfigurationPtrOutput) FieldOptions() DashboardTableFieldOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) *DashboardTableFieldOptions {
		if v == nil {
			return nil
		}
		return v.FieldOptions
	}).(DashboardTableFieldOptionsPtrOutput)
}

// The field wells of the visual.
func (o DashboardTableConfigurationPtrOutput) FieldWells() DashboardTableFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) *DashboardTableFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(DashboardTableFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardTableConfigurationPtrOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) *DashboardVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(DashboardVisualInteractionOptionsPtrOutput)
}

// The paginated report options for a table visual.
func (o DashboardTableConfigurationPtrOutput) PaginatedReportOptions() DashboardTablePaginatedReportOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) *DashboardTablePaginatedReportOptions {
		if v == nil {
			return nil
		}
		return v.PaginatedReportOptions
	}).(DashboardTablePaginatedReportOptionsPtrOutput)
}

// The sort configuration for a `TableVisual` .
func (o DashboardTableConfigurationPtrOutput) SortConfiguration() DashboardTableSortConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) *DashboardTableSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(DashboardTableSortConfigurationPtrOutput)
}

// A collection of inline visualizations to display within a chart.
func (o DashboardTableConfigurationPtrOutput) TableInlineVisualizations() DashboardTableInlineVisualizationArrayOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) []DashboardTableInlineVisualization {
		if v == nil {
			return nil
		}
		return v.TableInlineVisualizations
	}).(DashboardTableInlineVisualizationArrayOutput)
}

// The table options for a table visual.
func (o DashboardTableConfigurationPtrOutput) TableOptions() DashboardTableOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) *DashboardTableOptions {
		if v == nil {
			return nil
		}
		return v.TableOptions
	}).(DashboardTableOptionsPtrOutput)
}

// The total options for a table visual.
func (o DashboardTableConfigurationPtrOutput) TotalOptions() DashboardTotalOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableConfiguration) *DashboardTotalOptions {
		if v == nil {
			return nil
		}
		return v.TotalOptions
	}).(DashboardTotalOptionsPtrOutput)
}

type DashboardTableFieldCustomIconContent struct {
	// The icon set type (link) of the custom icon content for table URL link content.
	Icon *DashboardTableFieldIconSetType `pulumi:"icon"`
}

// DashboardTableFieldCustomIconContentInput is an input type that accepts DashboardTableFieldCustomIconContentArgs and DashboardTableFieldCustomIconContentOutput values.
// You can construct a concrete instance of `DashboardTableFieldCustomIconContentInput` via:
//
//	DashboardTableFieldCustomIconContentArgs{...}
type DashboardTableFieldCustomIconContentInput interface {
	pulumi.Input

	ToDashboardTableFieldCustomIconContentOutput() DashboardTableFieldCustomIconContentOutput
	ToDashboardTableFieldCustomIconContentOutputWithContext(context.Context) DashboardTableFieldCustomIconContentOutput
}

type DashboardTableFieldCustomIconContentArgs struct {
	// The icon set type (link) of the custom icon content for table URL link content.
	Icon DashboardTableFieldIconSetTypePtrInput `pulumi:"icon"`
}

func (DashboardTableFieldCustomIconContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldCustomIconContent)(nil)).Elem()
}

func (i DashboardTableFieldCustomIconContentArgs) ToDashboardTableFieldCustomIconContentOutput() DashboardTableFieldCustomIconContentOutput {
	return i.ToDashboardTableFieldCustomIconContentOutputWithContext(context.Background())
}

func (i DashboardTableFieldCustomIconContentArgs) ToDashboardTableFieldCustomIconContentOutputWithContext(ctx context.Context) DashboardTableFieldCustomIconContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldCustomIconContentOutput)
}

func (i DashboardTableFieldCustomIconContentArgs) ToDashboardTableFieldCustomIconContentPtrOutput() DashboardTableFieldCustomIconContentPtrOutput {
	return i.ToDashboardTableFieldCustomIconContentPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldCustomIconContentArgs) ToDashboardTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomIconContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldCustomIconContentOutput).ToDashboardTableFieldCustomIconContentPtrOutputWithContext(ctx)
}

// DashboardTableFieldCustomIconContentPtrInput is an input type that accepts DashboardTableFieldCustomIconContentArgs, DashboardTableFieldCustomIconContentPtr and DashboardTableFieldCustomIconContentPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldCustomIconContentPtrInput` via:
//
//	        DashboardTableFieldCustomIconContentArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldCustomIconContentPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldCustomIconContentPtrOutput() DashboardTableFieldCustomIconContentPtrOutput
	ToDashboardTableFieldCustomIconContentPtrOutputWithContext(context.Context) DashboardTableFieldCustomIconContentPtrOutput
}

type dashboardTableFieldCustomIconContentPtrType DashboardTableFieldCustomIconContentArgs

func DashboardTableFieldCustomIconContentPtr(v *DashboardTableFieldCustomIconContentArgs) DashboardTableFieldCustomIconContentPtrInput {
	return (*dashboardTableFieldCustomIconContentPtrType)(v)
}

func (*dashboardTableFieldCustomIconContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldCustomIconContent)(nil)).Elem()
}

func (i *dashboardTableFieldCustomIconContentPtrType) ToDashboardTableFieldCustomIconContentPtrOutput() DashboardTableFieldCustomIconContentPtrOutput {
	return i.ToDashboardTableFieldCustomIconContentPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldCustomIconContentPtrType) ToDashboardTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomIconContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldCustomIconContentPtrOutput)
}

type DashboardTableFieldCustomIconContentOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldCustomIconContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldCustomIconContent)(nil)).Elem()
}

func (o DashboardTableFieldCustomIconContentOutput) ToDashboardTableFieldCustomIconContentOutput() DashboardTableFieldCustomIconContentOutput {
	return o
}

func (o DashboardTableFieldCustomIconContentOutput) ToDashboardTableFieldCustomIconContentOutputWithContext(ctx context.Context) DashboardTableFieldCustomIconContentOutput {
	return o
}

func (o DashboardTableFieldCustomIconContentOutput) ToDashboardTableFieldCustomIconContentPtrOutput() DashboardTableFieldCustomIconContentPtrOutput {
	return o.ToDashboardTableFieldCustomIconContentPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldCustomIconContentOutput) ToDashboardTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomIconContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldCustomIconContent) *DashboardTableFieldCustomIconContent {
		return &v
	}).(DashboardTableFieldCustomIconContentPtrOutput)
}

// The icon set type (link) of the custom icon content for table URL link content.
func (o DashboardTableFieldCustomIconContentOutput) Icon() DashboardTableFieldIconSetTypePtrOutput {
	return o.ApplyT(func(v DashboardTableFieldCustomIconContent) *DashboardTableFieldIconSetType { return v.Icon }).(DashboardTableFieldIconSetTypePtrOutput)
}

type DashboardTableFieldCustomIconContentPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldCustomIconContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldCustomIconContent)(nil)).Elem()
}

func (o DashboardTableFieldCustomIconContentPtrOutput) ToDashboardTableFieldCustomIconContentPtrOutput() DashboardTableFieldCustomIconContentPtrOutput {
	return o
}

func (o DashboardTableFieldCustomIconContentPtrOutput) ToDashboardTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomIconContentPtrOutput {
	return o
}

func (o DashboardTableFieldCustomIconContentPtrOutput) Elem() DashboardTableFieldCustomIconContentOutput {
	return o.ApplyT(func(v *DashboardTableFieldCustomIconContent) DashboardTableFieldCustomIconContent {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldCustomIconContent
		return ret
	}).(DashboardTableFieldCustomIconContentOutput)
}

// The icon set type (link) of the custom icon content for table URL link content.
func (o DashboardTableFieldCustomIconContentPtrOutput) Icon() DashboardTableFieldIconSetTypePtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldCustomIconContent) *DashboardTableFieldIconSetType {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(DashboardTableFieldIconSetTypePtrOutput)
}

type DashboardTableFieldCustomTextContent struct {
	// The font configuration of the custom text content for the table URL link content.
	FontConfiguration DashboardFontConfiguration `pulumi:"fontConfiguration"`
	// The string value of the custom text content for the table URL link content.
	Value *string `pulumi:"value"`
}

// DashboardTableFieldCustomTextContentInput is an input type that accepts DashboardTableFieldCustomTextContentArgs and DashboardTableFieldCustomTextContentOutput values.
// You can construct a concrete instance of `DashboardTableFieldCustomTextContentInput` via:
//
//	DashboardTableFieldCustomTextContentArgs{...}
type DashboardTableFieldCustomTextContentInput interface {
	pulumi.Input

	ToDashboardTableFieldCustomTextContentOutput() DashboardTableFieldCustomTextContentOutput
	ToDashboardTableFieldCustomTextContentOutputWithContext(context.Context) DashboardTableFieldCustomTextContentOutput
}

type DashboardTableFieldCustomTextContentArgs struct {
	// The font configuration of the custom text content for the table URL link content.
	FontConfiguration DashboardFontConfigurationInput `pulumi:"fontConfiguration"`
	// The string value of the custom text content for the table URL link content.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DashboardTableFieldCustomTextContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldCustomTextContent)(nil)).Elem()
}

func (i DashboardTableFieldCustomTextContentArgs) ToDashboardTableFieldCustomTextContentOutput() DashboardTableFieldCustomTextContentOutput {
	return i.ToDashboardTableFieldCustomTextContentOutputWithContext(context.Background())
}

func (i DashboardTableFieldCustomTextContentArgs) ToDashboardTableFieldCustomTextContentOutputWithContext(ctx context.Context) DashboardTableFieldCustomTextContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldCustomTextContentOutput)
}

func (i DashboardTableFieldCustomTextContentArgs) ToDashboardTableFieldCustomTextContentPtrOutput() DashboardTableFieldCustomTextContentPtrOutput {
	return i.ToDashboardTableFieldCustomTextContentPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldCustomTextContentArgs) ToDashboardTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomTextContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldCustomTextContentOutput).ToDashboardTableFieldCustomTextContentPtrOutputWithContext(ctx)
}

// DashboardTableFieldCustomTextContentPtrInput is an input type that accepts DashboardTableFieldCustomTextContentArgs, DashboardTableFieldCustomTextContentPtr and DashboardTableFieldCustomTextContentPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldCustomTextContentPtrInput` via:
//
//	        DashboardTableFieldCustomTextContentArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldCustomTextContentPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldCustomTextContentPtrOutput() DashboardTableFieldCustomTextContentPtrOutput
	ToDashboardTableFieldCustomTextContentPtrOutputWithContext(context.Context) DashboardTableFieldCustomTextContentPtrOutput
}

type dashboardTableFieldCustomTextContentPtrType DashboardTableFieldCustomTextContentArgs

func DashboardTableFieldCustomTextContentPtr(v *DashboardTableFieldCustomTextContentArgs) DashboardTableFieldCustomTextContentPtrInput {
	return (*dashboardTableFieldCustomTextContentPtrType)(v)
}

func (*dashboardTableFieldCustomTextContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldCustomTextContent)(nil)).Elem()
}

func (i *dashboardTableFieldCustomTextContentPtrType) ToDashboardTableFieldCustomTextContentPtrOutput() DashboardTableFieldCustomTextContentPtrOutput {
	return i.ToDashboardTableFieldCustomTextContentPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldCustomTextContentPtrType) ToDashboardTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomTextContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldCustomTextContentPtrOutput)
}

type DashboardTableFieldCustomTextContentOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldCustomTextContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldCustomTextContent)(nil)).Elem()
}

func (o DashboardTableFieldCustomTextContentOutput) ToDashboardTableFieldCustomTextContentOutput() DashboardTableFieldCustomTextContentOutput {
	return o
}

func (o DashboardTableFieldCustomTextContentOutput) ToDashboardTableFieldCustomTextContentOutputWithContext(ctx context.Context) DashboardTableFieldCustomTextContentOutput {
	return o
}

func (o DashboardTableFieldCustomTextContentOutput) ToDashboardTableFieldCustomTextContentPtrOutput() DashboardTableFieldCustomTextContentPtrOutput {
	return o.ToDashboardTableFieldCustomTextContentPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldCustomTextContentOutput) ToDashboardTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomTextContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldCustomTextContent) *DashboardTableFieldCustomTextContent {
		return &v
	}).(DashboardTableFieldCustomTextContentPtrOutput)
}

// The font configuration of the custom text content for the table URL link content.
func (o DashboardTableFieldCustomTextContentOutput) FontConfiguration() DashboardFontConfigurationOutput {
	return o.ApplyT(func(v DashboardTableFieldCustomTextContent) DashboardFontConfiguration { return v.FontConfiguration }).(DashboardFontConfigurationOutput)
}

// The string value of the custom text content for the table URL link content.
func (o DashboardTableFieldCustomTextContentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldCustomTextContent) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DashboardTableFieldCustomTextContentPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldCustomTextContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldCustomTextContent)(nil)).Elem()
}

func (o DashboardTableFieldCustomTextContentPtrOutput) ToDashboardTableFieldCustomTextContentPtrOutput() DashboardTableFieldCustomTextContentPtrOutput {
	return o
}

func (o DashboardTableFieldCustomTextContentPtrOutput) ToDashboardTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) DashboardTableFieldCustomTextContentPtrOutput {
	return o
}

func (o DashboardTableFieldCustomTextContentPtrOutput) Elem() DashboardTableFieldCustomTextContentOutput {
	return o.ApplyT(func(v *DashboardTableFieldCustomTextContent) DashboardTableFieldCustomTextContent {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldCustomTextContent
		return ret
	}).(DashboardTableFieldCustomTextContentOutput)
}

// The font configuration of the custom text content for the table URL link content.
func (o DashboardTableFieldCustomTextContentPtrOutput) FontConfiguration() DashboardFontConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldCustomTextContent) *DashboardFontConfiguration {
		if v == nil {
			return nil
		}
		return &v.FontConfiguration
	}).(DashboardFontConfigurationPtrOutput)
}

// The string value of the custom text content for the table URL link content.
func (o DashboardTableFieldCustomTextContentPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldCustomTextContent) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type DashboardTableFieldImageConfiguration struct {
	// The sizing options for the table image configuration.
	SizingOptions *DashboardTableCellImageSizingConfiguration `pulumi:"sizingOptions"`
}

// DashboardTableFieldImageConfigurationInput is an input type that accepts DashboardTableFieldImageConfigurationArgs and DashboardTableFieldImageConfigurationOutput values.
// You can construct a concrete instance of `DashboardTableFieldImageConfigurationInput` via:
//
//	DashboardTableFieldImageConfigurationArgs{...}
type DashboardTableFieldImageConfigurationInput interface {
	pulumi.Input

	ToDashboardTableFieldImageConfigurationOutput() DashboardTableFieldImageConfigurationOutput
	ToDashboardTableFieldImageConfigurationOutputWithContext(context.Context) DashboardTableFieldImageConfigurationOutput
}

type DashboardTableFieldImageConfigurationArgs struct {
	// The sizing options for the table image configuration.
	SizingOptions DashboardTableCellImageSizingConfigurationPtrInput `pulumi:"sizingOptions"`
}

func (DashboardTableFieldImageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldImageConfiguration)(nil)).Elem()
}

func (i DashboardTableFieldImageConfigurationArgs) ToDashboardTableFieldImageConfigurationOutput() DashboardTableFieldImageConfigurationOutput {
	return i.ToDashboardTableFieldImageConfigurationOutputWithContext(context.Background())
}

func (i DashboardTableFieldImageConfigurationArgs) ToDashboardTableFieldImageConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldImageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldImageConfigurationOutput)
}

func (i DashboardTableFieldImageConfigurationArgs) ToDashboardTableFieldImageConfigurationPtrOutput() DashboardTableFieldImageConfigurationPtrOutput {
	return i.ToDashboardTableFieldImageConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldImageConfigurationArgs) ToDashboardTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldImageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldImageConfigurationOutput).ToDashboardTableFieldImageConfigurationPtrOutputWithContext(ctx)
}

// DashboardTableFieldImageConfigurationPtrInput is an input type that accepts DashboardTableFieldImageConfigurationArgs, DashboardTableFieldImageConfigurationPtr and DashboardTableFieldImageConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldImageConfigurationPtrInput` via:
//
//	        DashboardTableFieldImageConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldImageConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldImageConfigurationPtrOutput() DashboardTableFieldImageConfigurationPtrOutput
	ToDashboardTableFieldImageConfigurationPtrOutputWithContext(context.Context) DashboardTableFieldImageConfigurationPtrOutput
}

type dashboardTableFieldImageConfigurationPtrType DashboardTableFieldImageConfigurationArgs

func DashboardTableFieldImageConfigurationPtr(v *DashboardTableFieldImageConfigurationArgs) DashboardTableFieldImageConfigurationPtrInput {
	return (*dashboardTableFieldImageConfigurationPtrType)(v)
}

func (*dashboardTableFieldImageConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldImageConfiguration)(nil)).Elem()
}

func (i *dashboardTableFieldImageConfigurationPtrType) ToDashboardTableFieldImageConfigurationPtrOutput() DashboardTableFieldImageConfigurationPtrOutput {
	return i.ToDashboardTableFieldImageConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldImageConfigurationPtrType) ToDashboardTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldImageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldImageConfigurationPtrOutput)
}

type DashboardTableFieldImageConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldImageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldImageConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldImageConfigurationOutput) ToDashboardTableFieldImageConfigurationOutput() DashboardTableFieldImageConfigurationOutput {
	return o
}

func (o DashboardTableFieldImageConfigurationOutput) ToDashboardTableFieldImageConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldImageConfigurationOutput {
	return o
}

func (o DashboardTableFieldImageConfigurationOutput) ToDashboardTableFieldImageConfigurationPtrOutput() DashboardTableFieldImageConfigurationPtrOutput {
	return o.ToDashboardTableFieldImageConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldImageConfigurationOutput) ToDashboardTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldImageConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldImageConfiguration) *DashboardTableFieldImageConfiguration {
		return &v
	}).(DashboardTableFieldImageConfigurationPtrOutput)
}

// The sizing options for the table image configuration.
func (o DashboardTableFieldImageConfigurationOutput) SizingOptions() DashboardTableCellImageSizingConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldImageConfiguration) *DashboardTableCellImageSizingConfiguration {
		return v.SizingOptions
	}).(DashboardTableCellImageSizingConfigurationPtrOutput)
}

type DashboardTableFieldImageConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldImageConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldImageConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldImageConfigurationPtrOutput) ToDashboardTableFieldImageConfigurationPtrOutput() DashboardTableFieldImageConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldImageConfigurationPtrOutput) ToDashboardTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldImageConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldImageConfigurationPtrOutput) Elem() DashboardTableFieldImageConfigurationOutput {
	return o.ApplyT(func(v *DashboardTableFieldImageConfiguration) DashboardTableFieldImageConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldImageConfiguration
		return ret
	}).(DashboardTableFieldImageConfigurationOutput)
}

// The sizing options for the table image configuration.
func (o DashboardTableFieldImageConfigurationPtrOutput) SizingOptions() DashboardTableCellImageSizingConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldImageConfiguration) *DashboardTableCellImageSizingConfiguration {
		if v == nil {
			return nil
		}
		return v.SizingOptions
	}).(DashboardTableCellImageSizingConfigurationPtrOutput)
}

type DashboardTableFieldLinkConfiguration struct {
	// The URL content (text, icon) for the table link configuration.
	Content DashboardTableFieldLinkContentConfiguration `pulumi:"content"`
	// The URL target (new tab, new window, same tab) for the table link configuration.
	Target DashboardUrlTargetConfiguration `pulumi:"target"`
}

// DashboardTableFieldLinkConfigurationInput is an input type that accepts DashboardTableFieldLinkConfigurationArgs and DashboardTableFieldLinkConfigurationOutput values.
// You can construct a concrete instance of `DashboardTableFieldLinkConfigurationInput` via:
//
//	DashboardTableFieldLinkConfigurationArgs{...}
type DashboardTableFieldLinkConfigurationInput interface {
	pulumi.Input

	ToDashboardTableFieldLinkConfigurationOutput() DashboardTableFieldLinkConfigurationOutput
	ToDashboardTableFieldLinkConfigurationOutputWithContext(context.Context) DashboardTableFieldLinkConfigurationOutput
}

type DashboardTableFieldLinkConfigurationArgs struct {
	// The URL content (text, icon) for the table link configuration.
	Content DashboardTableFieldLinkContentConfigurationInput `pulumi:"content"`
	// The URL target (new tab, new window, same tab) for the table link configuration.
	Target DashboardUrlTargetConfigurationInput `pulumi:"target"`
}

func (DashboardTableFieldLinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldLinkConfiguration)(nil)).Elem()
}

func (i DashboardTableFieldLinkConfigurationArgs) ToDashboardTableFieldLinkConfigurationOutput() DashboardTableFieldLinkConfigurationOutput {
	return i.ToDashboardTableFieldLinkConfigurationOutputWithContext(context.Background())
}

func (i DashboardTableFieldLinkConfigurationArgs) ToDashboardTableFieldLinkConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldLinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldLinkConfigurationOutput)
}

func (i DashboardTableFieldLinkConfigurationArgs) ToDashboardTableFieldLinkConfigurationPtrOutput() DashboardTableFieldLinkConfigurationPtrOutput {
	return i.ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldLinkConfigurationArgs) ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldLinkConfigurationOutput).ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(ctx)
}

// DashboardTableFieldLinkConfigurationPtrInput is an input type that accepts DashboardTableFieldLinkConfigurationArgs, DashboardTableFieldLinkConfigurationPtr and DashboardTableFieldLinkConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldLinkConfigurationPtrInput` via:
//
//	        DashboardTableFieldLinkConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldLinkConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldLinkConfigurationPtrOutput() DashboardTableFieldLinkConfigurationPtrOutput
	ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(context.Context) DashboardTableFieldLinkConfigurationPtrOutput
}

type dashboardTableFieldLinkConfigurationPtrType DashboardTableFieldLinkConfigurationArgs

func DashboardTableFieldLinkConfigurationPtr(v *DashboardTableFieldLinkConfigurationArgs) DashboardTableFieldLinkConfigurationPtrInput {
	return (*dashboardTableFieldLinkConfigurationPtrType)(v)
}

func (*dashboardTableFieldLinkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldLinkConfiguration)(nil)).Elem()
}

func (i *dashboardTableFieldLinkConfigurationPtrType) ToDashboardTableFieldLinkConfigurationPtrOutput() DashboardTableFieldLinkConfigurationPtrOutput {
	return i.ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldLinkConfigurationPtrType) ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldLinkConfigurationPtrOutput)
}

type DashboardTableFieldLinkConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldLinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldLinkConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldLinkConfigurationOutput) ToDashboardTableFieldLinkConfigurationOutput() DashboardTableFieldLinkConfigurationOutput {
	return o
}

func (o DashboardTableFieldLinkConfigurationOutput) ToDashboardTableFieldLinkConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldLinkConfigurationOutput {
	return o
}

func (o DashboardTableFieldLinkConfigurationOutput) ToDashboardTableFieldLinkConfigurationPtrOutput() DashboardTableFieldLinkConfigurationPtrOutput {
	return o.ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldLinkConfigurationOutput) ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldLinkConfiguration) *DashboardTableFieldLinkConfiguration {
		return &v
	}).(DashboardTableFieldLinkConfigurationPtrOutput)
}

// The URL content (text, icon) for the table link configuration.
func (o DashboardTableFieldLinkConfigurationOutput) Content() DashboardTableFieldLinkContentConfigurationOutput {
	return o.ApplyT(func(v DashboardTableFieldLinkConfiguration) DashboardTableFieldLinkContentConfiguration {
		return v.Content
	}).(DashboardTableFieldLinkContentConfigurationOutput)
}

// The URL target (new tab, new window, same tab) for the table link configuration.
func (o DashboardTableFieldLinkConfigurationOutput) Target() DashboardUrlTargetConfigurationOutput {
	return o.ApplyT(func(v DashboardTableFieldLinkConfiguration) DashboardUrlTargetConfiguration { return v.Target }).(DashboardUrlTargetConfigurationOutput)
}

type DashboardTableFieldLinkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldLinkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldLinkConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldLinkConfigurationPtrOutput) ToDashboardTableFieldLinkConfigurationPtrOutput() DashboardTableFieldLinkConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldLinkConfigurationPtrOutput) ToDashboardTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldLinkConfigurationPtrOutput) Elem() DashboardTableFieldLinkConfigurationOutput {
	return o.ApplyT(func(v *DashboardTableFieldLinkConfiguration) DashboardTableFieldLinkConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldLinkConfiguration
		return ret
	}).(DashboardTableFieldLinkConfigurationOutput)
}

// The URL content (text, icon) for the table link configuration.
func (o DashboardTableFieldLinkConfigurationPtrOutput) Content() DashboardTableFieldLinkContentConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldLinkConfiguration) *DashboardTableFieldLinkContentConfiguration {
		if v == nil {
			return nil
		}
		return &v.Content
	}).(DashboardTableFieldLinkContentConfigurationPtrOutput)
}

// The URL target (new tab, new window, same tab) for the table link configuration.
func (o DashboardTableFieldLinkConfigurationPtrOutput) Target() DashboardUrlTargetConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldLinkConfiguration) *DashboardUrlTargetConfiguration {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(DashboardUrlTargetConfigurationPtrOutput)
}

type DashboardTableFieldLinkContentConfiguration struct {
	// The custom icon content for the table link content configuration.
	CustomIconContent *DashboardTableFieldCustomIconContent `pulumi:"customIconContent"`
	// The custom text content (value, font configuration) for the table link content configuration.
	CustomTextContent *DashboardTableFieldCustomTextContent `pulumi:"customTextContent"`
}

// DashboardTableFieldLinkContentConfigurationInput is an input type that accepts DashboardTableFieldLinkContentConfigurationArgs and DashboardTableFieldLinkContentConfigurationOutput values.
// You can construct a concrete instance of `DashboardTableFieldLinkContentConfigurationInput` via:
//
//	DashboardTableFieldLinkContentConfigurationArgs{...}
type DashboardTableFieldLinkContentConfigurationInput interface {
	pulumi.Input

	ToDashboardTableFieldLinkContentConfigurationOutput() DashboardTableFieldLinkContentConfigurationOutput
	ToDashboardTableFieldLinkContentConfigurationOutputWithContext(context.Context) DashboardTableFieldLinkContentConfigurationOutput
}

type DashboardTableFieldLinkContentConfigurationArgs struct {
	// The custom icon content for the table link content configuration.
	CustomIconContent DashboardTableFieldCustomIconContentPtrInput `pulumi:"customIconContent"`
	// The custom text content (value, font configuration) for the table link content configuration.
	CustomTextContent DashboardTableFieldCustomTextContentPtrInput `pulumi:"customTextContent"`
}

func (DashboardTableFieldLinkContentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (i DashboardTableFieldLinkContentConfigurationArgs) ToDashboardTableFieldLinkContentConfigurationOutput() DashboardTableFieldLinkContentConfigurationOutput {
	return i.ToDashboardTableFieldLinkContentConfigurationOutputWithContext(context.Background())
}

func (i DashboardTableFieldLinkContentConfigurationArgs) ToDashboardTableFieldLinkContentConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldLinkContentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldLinkContentConfigurationOutput)
}

func (i DashboardTableFieldLinkContentConfigurationArgs) ToDashboardTableFieldLinkContentConfigurationPtrOutput() DashboardTableFieldLinkContentConfigurationPtrOutput {
	return i.ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldLinkContentConfigurationArgs) ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkContentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldLinkContentConfigurationOutput).ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(ctx)
}

// DashboardTableFieldLinkContentConfigurationPtrInput is an input type that accepts DashboardTableFieldLinkContentConfigurationArgs, DashboardTableFieldLinkContentConfigurationPtr and DashboardTableFieldLinkContentConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldLinkContentConfigurationPtrInput` via:
//
//	        DashboardTableFieldLinkContentConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldLinkContentConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldLinkContentConfigurationPtrOutput() DashboardTableFieldLinkContentConfigurationPtrOutput
	ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(context.Context) DashboardTableFieldLinkContentConfigurationPtrOutput
}

type dashboardTableFieldLinkContentConfigurationPtrType DashboardTableFieldLinkContentConfigurationArgs

func DashboardTableFieldLinkContentConfigurationPtr(v *DashboardTableFieldLinkContentConfigurationArgs) DashboardTableFieldLinkContentConfigurationPtrInput {
	return (*dashboardTableFieldLinkContentConfigurationPtrType)(v)
}

func (*dashboardTableFieldLinkContentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (i *dashboardTableFieldLinkContentConfigurationPtrType) ToDashboardTableFieldLinkContentConfigurationPtrOutput() DashboardTableFieldLinkContentConfigurationPtrOutput {
	return i.ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldLinkContentConfigurationPtrType) ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkContentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldLinkContentConfigurationPtrOutput)
}

type DashboardTableFieldLinkContentConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldLinkContentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldLinkContentConfigurationOutput) ToDashboardTableFieldLinkContentConfigurationOutput() DashboardTableFieldLinkContentConfigurationOutput {
	return o
}

func (o DashboardTableFieldLinkContentConfigurationOutput) ToDashboardTableFieldLinkContentConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldLinkContentConfigurationOutput {
	return o
}

func (o DashboardTableFieldLinkContentConfigurationOutput) ToDashboardTableFieldLinkContentConfigurationPtrOutput() DashboardTableFieldLinkContentConfigurationPtrOutput {
	return o.ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldLinkContentConfigurationOutput) ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkContentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldLinkContentConfiguration) *DashboardTableFieldLinkContentConfiguration {
		return &v
	}).(DashboardTableFieldLinkContentConfigurationPtrOutput)
}

// The custom icon content for the table link content configuration.
func (o DashboardTableFieldLinkContentConfigurationOutput) CustomIconContent() DashboardTableFieldCustomIconContentPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldLinkContentConfiguration) *DashboardTableFieldCustomIconContent {
		return v.CustomIconContent
	}).(DashboardTableFieldCustomIconContentPtrOutput)
}

// The custom text content (value, font configuration) for the table link content configuration.
func (o DashboardTableFieldLinkContentConfigurationOutput) CustomTextContent() DashboardTableFieldCustomTextContentPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldLinkContentConfiguration) *DashboardTableFieldCustomTextContent {
		return v.CustomTextContent
	}).(DashboardTableFieldCustomTextContentPtrOutput)
}

type DashboardTableFieldLinkContentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldLinkContentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldLinkContentConfigurationPtrOutput) ToDashboardTableFieldLinkContentConfigurationPtrOutput() DashboardTableFieldLinkContentConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldLinkContentConfigurationPtrOutput) ToDashboardTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldLinkContentConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldLinkContentConfigurationPtrOutput) Elem() DashboardTableFieldLinkContentConfigurationOutput {
	return o.ApplyT(func(v *DashboardTableFieldLinkContentConfiguration) DashboardTableFieldLinkContentConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldLinkContentConfiguration
		return ret
	}).(DashboardTableFieldLinkContentConfigurationOutput)
}

// The custom icon content for the table link content configuration.
func (o DashboardTableFieldLinkContentConfigurationPtrOutput) CustomIconContent() DashboardTableFieldCustomIconContentPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldLinkContentConfiguration) *DashboardTableFieldCustomIconContent {
		if v == nil {
			return nil
		}
		return v.CustomIconContent
	}).(DashboardTableFieldCustomIconContentPtrOutput)
}

// The custom text content (value, font configuration) for the table link content configuration.
func (o DashboardTableFieldLinkContentConfigurationPtrOutput) CustomTextContent() DashboardTableFieldCustomTextContentPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldLinkContentConfiguration) *DashboardTableFieldCustomTextContent {
		if v == nil {
			return nil
		}
		return v.CustomTextContent
	}).(DashboardTableFieldCustomTextContentPtrOutput)
}

type DashboardTableFieldOption struct {
	// The custom label for a table field.
	CustomLabel *string `pulumi:"customLabel"`
	// The field ID for a table field.
	FieldId string `pulumi:"fieldId"`
	// The URL configuration for a table field.
	UrlStyling *DashboardTableFieldUrlConfiguration `pulumi:"urlStyling"`
	// The visibility of a table field.
	Visibility *DashboardVisibility `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width *string `pulumi:"width"`
}

// DashboardTableFieldOptionInput is an input type that accepts DashboardTableFieldOptionArgs and DashboardTableFieldOptionOutput values.
// You can construct a concrete instance of `DashboardTableFieldOptionInput` via:
//
//	DashboardTableFieldOptionArgs{...}
type DashboardTableFieldOptionInput interface {
	pulumi.Input

	ToDashboardTableFieldOptionOutput() DashboardTableFieldOptionOutput
	ToDashboardTableFieldOptionOutputWithContext(context.Context) DashboardTableFieldOptionOutput
}

type DashboardTableFieldOptionArgs struct {
	// The custom label for a table field.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The field ID for a table field.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The URL configuration for a table field.
	UrlStyling DashboardTableFieldUrlConfigurationPtrInput `pulumi:"urlStyling"`
	// The visibility of a table field.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (DashboardTableFieldOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldOption)(nil)).Elem()
}

func (i DashboardTableFieldOptionArgs) ToDashboardTableFieldOptionOutput() DashboardTableFieldOptionOutput {
	return i.ToDashboardTableFieldOptionOutputWithContext(context.Background())
}

func (i DashboardTableFieldOptionArgs) ToDashboardTableFieldOptionOutputWithContext(ctx context.Context) DashboardTableFieldOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldOptionOutput)
}

// DashboardTableFieldOptionArrayInput is an input type that accepts DashboardTableFieldOptionArray and DashboardTableFieldOptionArrayOutput values.
// You can construct a concrete instance of `DashboardTableFieldOptionArrayInput` via:
//
//	DashboardTableFieldOptionArray{ DashboardTableFieldOptionArgs{...} }
type DashboardTableFieldOptionArrayInput interface {
	pulumi.Input

	ToDashboardTableFieldOptionArrayOutput() DashboardTableFieldOptionArrayOutput
	ToDashboardTableFieldOptionArrayOutputWithContext(context.Context) DashboardTableFieldOptionArrayOutput
}

type DashboardTableFieldOptionArray []DashboardTableFieldOptionInput

func (DashboardTableFieldOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableFieldOption)(nil)).Elem()
}

func (i DashboardTableFieldOptionArray) ToDashboardTableFieldOptionArrayOutput() DashboardTableFieldOptionArrayOutput {
	return i.ToDashboardTableFieldOptionArrayOutputWithContext(context.Background())
}

func (i DashboardTableFieldOptionArray) ToDashboardTableFieldOptionArrayOutputWithContext(ctx context.Context) DashboardTableFieldOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldOptionArrayOutput)
}

type DashboardTableFieldOptionOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldOption)(nil)).Elem()
}

func (o DashboardTableFieldOptionOutput) ToDashboardTableFieldOptionOutput() DashboardTableFieldOptionOutput {
	return o
}

func (o DashboardTableFieldOptionOutput) ToDashboardTableFieldOptionOutputWithContext(ctx context.Context) DashboardTableFieldOptionOutput {
	return o
}

// The custom label for a table field.
func (o DashboardTableFieldOptionOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldOption) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The field ID for a table field.
func (o DashboardTableFieldOptionOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableFieldOption) string { return v.FieldId }).(pulumi.StringOutput)
}

// The URL configuration for a table field.
func (o DashboardTableFieldOptionOutput) UrlStyling() DashboardTableFieldUrlConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldOption) *DashboardTableFieldUrlConfiguration { return v.UrlStyling }).(DashboardTableFieldUrlConfigurationPtrOutput)
}

// The visibility of a table field.
func (o DashboardTableFieldOptionOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldOption) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

// String based length that is composed of value and unit in px
func (o DashboardTableFieldOptionOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldOption) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type DashboardTableFieldOptionArrayOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableFieldOption)(nil)).Elem()
}

func (o DashboardTableFieldOptionArrayOutput) ToDashboardTableFieldOptionArrayOutput() DashboardTableFieldOptionArrayOutput {
	return o
}

func (o DashboardTableFieldOptionArrayOutput) ToDashboardTableFieldOptionArrayOutputWithContext(ctx context.Context) DashboardTableFieldOptionArrayOutput {
	return o
}

func (o DashboardTableFieldOptionArrayOutput) Index(i pulumi.IntInput) DashboardTableFieldOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTableFieldOption {
		return vs[0].([]DashboardTableFieldOption)[vs[1].(int)]
	}).(DashboardTableFieldOptionOutput)
}

type DashboardTableFieldOptions struct {
	// The order of the field IDs that are configured as field options for a table visual.
	Order []string `pulumi:"order"`
	// The settings for the pinned columns of a table visual.
	PinnedFieldOptions *DashboardTablePinnedFieldOptions `pulumi:"pinnedFieldOptions"`
	// The field options to be configured to a table.
	SelectedFieldOptions []DashboardTableFieldOption `pulumi:"selectedFieldOptions"`
}

// DashboardTableFieldOptionsInput is an input type that accepts DashboardTableFieldOptionsArgs and DashboardTableFieldOptionsOutput values.
// You can construct a concrete instance of `DashboardTableFieldOptionsInput` via:
//
//	DashboardTableFieldOptionsArgs{...}
type DashboardTableFieldOptionsInput interface {
	pulumi.Input

	ToDashboardTableFieldOptionsOutput() DashboardTableFieldOptionsOutput
	ToDashboardTableFieldOptionsOutputWithContext(context.Context) DashboardTableFieldOptionsOutput
}

type DashboardTableFieldOptionsArgs struct {
	// The order of the field IDs that are configured as field options for a table visual.
	Order pulumi.StringArrayInput `pulumi:"order"`
	// The settings for the pinned columns of a table visual.
	PinnedFieldOptions DashboardTablePinnedFieldOptionsPtrInput `pulumi:"pinnedFieldOptions"`
	// The field options to be configured to a table.
	SelectedFieldOptions DashboardTableFieldOptionArrayInput `pulumi:"selectedFieldOptions"`
}

func (DashboardTableFieldOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldOptions)(nil)).Elem()
}

func (i DashboardTableFieldOptionsArgs) ToDashboardTableFieldOptionsOutput() DashboardTableFieldOptionsOutput {
	return i.ToDashboardTableFieldOptionsOutputWithContext(context.Background())
}

func (i DashboardTableFieldOptionsArgs) ToDashboardTableFieldOptionsOutputWithContext(ctx context.Context) DashboardTableFieldOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldOptionsOutput)
}

func (i DashboardTableFieldOptionsArgs) ToDashboardTableFieldOptionsPtrOutput() DashboardTableFieldOptionsPtrOutput {
	return i.ToDashboardTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldOptionsArgs) ToDashboardTableFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldOptionsOutput).ToDashboardTableFieldOptionsPtrOutputWithContext(ctx)
}

// DashboardTableFieldOptionsPtrInput is an input type that accepts DashboardTableFieldOptionsArgs, DashboardTableFieldOptionsPtr and DashboardTableFieldOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldOptionsPtrInput` via:
//
//	        DashboardTableFieldOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldOptionsPtrOutput() DashboardTableFieldOptionsPtrOutput
	ToDashboardTableFieldOptionsPtrOutputWithContext(context.Context) DashboardTableFieldOptionsPtrOutput
}

type dashboardTableFieldOptionsPtrType DashboardTableFieldOptionsArgs

func DashboardTableFieldOptionsPtr(v *DashboardTableFieldOptionsArgs) DashboardTableFieldOptionsPtrInput {
	return (*dashboardTableFieldOptionsPtrType)(v)
}

func (*dashboardTableFieldOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldOptions)(nil)).Elem()
}

func (i *dashboardTableFieldOptionsPtrType) ToDashboardTableFieldOptionsPtrOutput() DashboardTableFieldOptionsPtrOutput {
	return i.ToDashboardTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldOptionsPtrType) ToDashboardTableFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldOptionsPtrOutput)
}

type DashboardTableFieldOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldOptions)(nil)).Elem()
}

func (o DashboardTableFieldOptionsOutput) ToDashboardTableFieldOptionsOutput() DashboardTableFieldOptionsOutput {
	return o
}

func (o DashboardTableFieldOptionsOutput) ToDashboardTableFieldOptionsOutputWithContext(ctx context.Context) DashboardTableFieldOptionsOutput {
	return o
}

func (o DashboardTableFieldOptionsOutput) ToDashboardTableFieldOptionsPtrOutput() DashboardTableFieldOptionsPtrOutput {
	return o.ToDashboardTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldOptionsOutput) ToDashboardTableFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTableFieldOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldOptions) *DashboardTableFieldOptions {
		return &v
	}).(DashboardTableFieldOptionsPtrOutput)
}

// The order of the field IDs that are configured as field options for a table visual.
func (o DashboardTableFieldOptionsOutput) Order() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardTableFieldOptions) []string { return v.Order }).(pulumi.StringArrayOutput)
}

// The settings for the pinned columns of a table visual.
func (o DashboardTableFieldOptionsOutput) PinnedFieldOptions() DashboardTablePinnedFieldOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldOptions) *DashboardTablePinnedFieldOptions { return v.PinnedFieldOptions }).(DashboardTablePinnedFieldOptionsPtrOutput)
}

// The field options to be configured to a table.
func (o DashboardTableFieldOptionsOutput) SelectedFieldOptions() DashboardTableFieldOptionArrayOutput {
	return o.ApplyT(func(v DashboardTableFieldOptions) []DashboardTableFieldOption { return v.SelectedFieldOptions }).(DashboardTableFieldOptionArrayOutput)
}

type DashboardTableFieldOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldOptions)(nil)).Elem()
}

func (o DashboardTableFieldOptionsPtrOutput) ToDashboardTableFieldOptionsPtrOutput() DashboardTableFieldOptionsPtrOutput {
	return o
}

func (o DashboardTableFieldOptionsPtrOutput) ToDashboardTableFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTableFieldOptionsPtrOutput {
	return o
}

func (o DashboardTableFieldOptionsPtrOutput) Elem() DashboardTableFieldOptionsOutput {
	return o.ApplyT(func(v *DashboardTableFieldOptions) DashboardTableFieldOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldOptions
		return ret
	}).(DashboardTableFieldOptionsOutput)
}

// The order of the field IDs that are configured as field options for a table visual.
func (o DashboardTableFieldOptionsPtrOutput) Order() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardTableFieldOptions) []string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringArrayOutput)
}

// The settings for the pinned columns of a table visual.
func (o DashboardTableFieldOptionsPtrOutput) PinnedFieldOptions() DashboardTablePinnedFieldOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldOptions) *DashboardTablePinnedFieldOptions {
		if v == nil {
			return nil
		}
		return v.PinnedFieldOptions
	}).(DashboardTablePinnedFieldOptionsPtrOutput)
}

// The field options to be configured to a table.
func (o DashboardTableFieldOptionsPtrOutput) SelectedFieldOptions() DashboardTableFieldOptionArrayOutput {
	return o.ApplyT(func(v *DashboardTableFieldOptions) []DashboardTableFieldOption {
		if v == nil {
			return nil
		}
		return v.SelectedFieldOptions
	}).(DashboardTableFieldOptionArrayOutput)
}

type DashboardTableFieldUrlConfiguration struct {
	// The image configuration of a table field URL.
	ImageConfiguration *DashboardTableFieldImageConfiguration `pulumi:"imageConfiguration"`
	// The link configuration of a table field URL.
	LinkConfiguration *DashboardTableFieldLinkConfiguration `pulumi:"linkConfiguration"`
}

// DashboardTableFieldUrlConfigurationInput is an input type that accepts DashboardTableFieldUrlConfigurationArgs and DashboardTableFieldUrlConfigurationOutput values.
// You can construct a concrete instance of `DashboardTableFieldUrlConfigurationInput` via:
//
//	DashboardTableFieldUrlConfigurationArgs{...}
type DashboardTableFieldUrlConfigurationInput interface {
	pulumi.Input

	ToDashboardTableFieldUrlConfigurationOutput() DashboardTableFieldUrlConfigurationOutput
	ToDashboardTableFieldUrlConfigurationOutputWithContext(context.Context) DashboardTableFieldUrlConfigurationOutput
}

type DashboardTableFieldUrlConfigurationArgs struct {
	// The image configuration of a table field URL.
	ImageConfiguration DashboardTableFieldImageConfigurationPtrInput `pulumi:"imageConfiguration"`
	// The link configuration of a table field URL.
	LinkConfiguration DashboardTableFieldLinkConfigurationPtrInput `pulumi:"linkConfiguration"`
}

func (DashboardTableFieldUrlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldUrlConfiguration)(nil)).Elem()
}

func (i DashboardTableFieldUrlConfigurationArgs) ToDashboardTableFieldUrlConfigurationOutput() DashboardTableFieldUrlConfigurationOutput {
	return i.ToDashboardTableFieldUrlConfigurationOutputWithContext(context.Background())
}

func (i DashboardTableFieldUrlConfigurationArgs) ToDashboardTableFieldUrlConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldUrlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldUrlConfigurationOutput)
}

func (i DashboardTableFieldUrlConfigurationArgs) ToDashboardTableFieldUrlConfigurationPtrOutput() DashboardTableFieldUrlConfigurationPtrOutput {
	return i.ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldUrlConfigurationArgs) ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldUrlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldUrlConfigurationOutput).ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(ctx)
}

// DashboardTableFieldUrlConfigurationPtrInput is an input type that accepts DashboardTableFieldUrlConfigurationArgs, DashboardTableFieldUrlConfigurationPtr and DashboardTableFieldUrlConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldUrlConfigurationPtrInput` via:
//
//	        DashboardTableFieldUrlConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldUrlConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldUrlConfigurationPtrOutput() DashboardTableFieldUrlConfigurationPtrOutput
	ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(context.Context) DashboardTableFieldUrlConfigurationPtrOutput
}

type dashboardTableFieldUrlConfigurationPtrType DashboardTableFieldUrlConfigurationArgs

func DashboardTableFieldUrlConfigurationPtr(v *DashboardTableFieldUrlConfigurationArgs) DashboardTableFieldUrlConfigurationPtrInput {
	return (*dashboardTableFieldUrlConfigurationPtrType)(v)
}

func (*dashboardTableFieldUrlConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldUrlConfiguration)(nil)).Elem()
}

func (i *dashboardTableFieldUrlConfigurationPtrType) ToDashboardTableFieldUrlConfigurationPtrOutput() DashboardTableFieldUrlConfigurationPtrOutput {
	return i.ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldUrlConfigurationPtrType) ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldUrlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldUrlConfigurationPtrOutput)
}

type DashboardTableFieldUrlConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldUrlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldUrlConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldUrlConfigurationOutput) ToDashboardTableFieldUrlConfigurationOutput() DashboardTableFieldUrlConfigurationOutput {
	return o
}

func (o DashboardTableFieldUrlConfigurationOutput) ToDashboardTableFieldUrlConfigurationOutputWithContext(ctx context.Context) DashboardTableFieldUrlConfigurationOutput {
	return o
}

func (o DashboardTableFieldUrlConfigurationOutput) ToDashboardTableFieldUrlConfigurationPtrOutput() DashboardTableFieldUrlConfigurationPtrOutput {
	return o.ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldUrlConfigurationOutput) ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldUrlConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldUrlConfiguration) *DashboardTableFieldUrlConfiguration {
		return &v
	}).(DashboardTableFieldUrlConfigurationPtrOutput)
}

// The image configuration of a table field URL.
func (o DashboardTableFieldUrlConfigurationOutput) ImageConfiguration() DashboardTableFieldImageConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldUrlConfiguration) *DashboardTableFieldImageConfiguration {
		return v.ImageConfiguration
	}).(DashboardTableFieldImageConfigurationPtrOutput)
}

// The link configuration of a table field URL.
func (o DashboardTableFieldUrlConfigurationOutput) LinkConfiguration() DashboardTableFieldLinkConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldUrlConfiguration) *DashboardTableFieldLinkConfiguration {
		return v.LinkConfiguration
	}).(DashboardTableFieldLinkConfigurationPtrOutput)
}

type DashboardTableFieldUrlConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldUrlConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldUrlConfiguration)(nil)).Elem()
}

func (o DashboardTableFieldUrlConfigurationPtrOutput) ToDashboardTableFieldUrlConfigurationPtrOutput() DashboardTableFieldUrlConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldUrlConfigurationPtrOutput) ToDashboardTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableFieldUrlConfigurationPtrOutput {
	return o
}

func (o DashboardTableFieldUrlConfigurationPtrOutput) Elem() DashboardTableFieldUrlConfigurationOutput {
	return o.ApplyT(func(v *DashboardTableFieldUrlConfiguration) DashboardTableFieldUrlConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldUrlConfiguration
		return ret
	}).(DashboardTableFieldUrlConfigurationOutput)
}

// The image configuration of a table field URL.
func (o DashboardTableFieldUrlConfigurationPtrOutput) ImageConfiguration() DashboardTableFieldImageConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldUrlConfiguration) *DashboardTableFieldImageConfiguration {
		if v == nil {
			return nil
		}
		return v.ImageConfiguration
	}).(DashboardTableFieldImageConfigurationPtrOutput)
}

// The link configuration of a table field URL.
func (o DashboardTableFieldUrlConfigurationPtrOutput) LinkConfiguration() DashboardTableFieldLinkConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldUrlConfiguration) *DashboardTableFieldLinkConfiguration {
		if v == nil {
			return nil
		}
		return v.LinkConfiguration
	}).(DashboardTableFieldLinkConfigurationPtrOutput)
}

type DashboardTableFieldWells struct {
	// The aggregated field well for the table.
	TableAggregatedFieldWells *DashboardTableAggregatedFieldWells `pulumi:"tableAggregatedFieldWells"`
	// The unaggregated field well for the table.
	TableUnaggregatedFieldWells *DashboardTableUnaggregatedFieldWells `pulumi:"tableUnaggregatedFieldWells"`
}

// DashboardTableFieldWellsInput is an input type that accepts DashboardTableFieldWellsArgs and DashboardTableFieldWellsOutput values.
// You can construct a concrete instance of `DashboardTableFieldWellsInput` via:
//
//	DashboardTableFieldWellsArgs{...}
type DashboardTableFieldWellsInput interface {
	pulumi.Input

	ToDashboardTableFieldWellsOutput() DashboardTableFieldWellsOutput
	ToDashboardTableFieldWellsOutputWithContext(context.Context) DashboardTableFieldWellsOutput
}

type DashboardTableFieldWellsArgs struct {
	// The aggregated field well for the table.
	TableAggregatedFieldWells DashboardTableAggregatedFieldWellsPtrInput `pulumi:"tableAggregatedFieldWells"`
	// The unaggregated field well for the table.
	TableUnaggregatedFieldWells DashboardTableUnaggregatedFieldWellsPtrInput `pulumi:"tableUnaggregatedFieldWells"`
}

func (DashboardTableFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldWells)(nil)).Elem()
}

func (i DashboardTableFieldWellsArgs) ToDashboardTableFieldWellsOutput() DashboardTableFieldWellsOutput {
	return i.ToDashboardTableFieldWellsOutputWithContext(context.Background())
}

func (i DashboardTableFieldWellsArgs) ToDashboardTableFieldWellsOutputWithContext(ctx context.Context) DashboardTableFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldWellsOutput)
}

func (i DashboardTableFieldWellsArgs) ToDashboardTableFieldWellsPtrOutput() DashboardTableFieldWellsPtrOutput {
	return i.ToDashboardTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardTableFieldWellsArgs) ToDashboardTableFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldWellsOutput).ToDashboardTableFieldWellsPtrOutputWithContext(ctx)
}

// DashboardTableFieldWellsPtrInput is an input type that accepts DashboardTableFieldWellsArgs, DashboardTableFieldWellsPtr and DashboardTableFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardTableFieldWellsPtrInput` via:
//
//	        DashboardTableFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardTableFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardTableFieldWellsPtrOutput() DashboardTableFieldWellsPtrOutput
	ToDashboardTableFieldWellsPtrOutputWithContext(context.Context) DashboardTableFieldWellsPtrOutput
}

type dashboardTableFieldWellsPtrType DashboardTableFieldWellsArgs

func DashboardTableFieldWellsPtr(v *DashboardTableFieldWellsArgs) DashboardTableFieldWellsPtrInput {
	return (*dashboardTableFieldWellsPtrType)(v)
}

func (*dashboardTableFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldWells)(nil)).Elem()
}

func (i *dashboardTableFieldWellsPtrType) ToDashboardTableFieldWellsPtrOutput() DashboardTableFieldWellsPtrOutput {
	return i.ToDashboardTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardTableFieldWellsPtrType) ToDashboardTableFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableFieldWellsPtrOutput)
}

type DashboardTableFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableFieldWells)(nil)).Elem()
}

func (o DashboardTableFieldWellsOutput) ToDashboardTableFieldWellsOutput() DashboardTableFieldWellsOutput {
	return o
}

func (o DashboardTableFieldWellsOutput) ToDashboardTableFieldWellsOutputWithContext(ctx context.Context) DashboardTableFieldWellsOutput {
	return o
}

func (o DashboardTableFieldWellsOutput) ToDashboardTableFieldWellsPtrOutput() DashboardTableFieldWellsPtrOutput {
	return o.ToDashboardTableFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardTableFieldWellsOutput) ToDashboardTableFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableFieldWells) *DashboardTableFieldWells {
		return &v
	}).(DashboardTableFieldWellsPtrOutput)
}

// The aggregated field well for the table.
func (o DashboardTableFieldWellsOutput) TableAggregatedFieldWells() DashboardTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldWells) *DashboardTableAggregatedFieldWells {
		return v.TableAggregatedFieldWells
	}).(DashboardTableAggregatedFieldWellsPtrOutput)
}

// The unaggregated field well for the table.
func (o DashboardTableFieldWellsOutput) TableUnaggregatedFieldWells() DashboardTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardTableFieldWells) *DashboardTableUnaggregatedFieldWells {
		return v.TableUnaggregatedFieldWells
	}).(DashboardTableUnaggregatedFieldWellsPtrOutput)
}

type DashboardTableFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableFieldWells)(nil)).Elem()
}

func (o DashboardTableFieldWellsPtrOutput) ToDashboardTableFieldWellsPtrOutput() DashboardTableFieldWellsPtrOutput {
	return o
}

func (o DashboardTableFieldWellsPtrOutput) ToDashboardTableFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableFieldWellsPtrOutput {
	return o
}

func (o DashboardTableFieldWellsPtrOutput) Elem() DashboardTableFieldWellsOutput {
	return o.ApplyT(func(v *DashboardTableFieldWells) DashboardTableFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardTableFieldWells
		return ret
	}).(DashboardTableFieldWellsOutput)
}

// The aggregated field well for the table.
func (o DashboardTableFieldWellsPtrOutput) TableAggregatedFieldWells() DashboardTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldWells) *DashboardTableAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TableAggregatedFieldWells
	}).(DashboardTableAggregatedFieldWellsPtrOutput)
}

// The unaggregated field well for the table.
func (o DashboardTableFieldWellsPtrOutput) TableUnaggregatedFieldWells() DashboardTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardTableFieldWells) *DashboardTableUnaggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TableUnaggregatedFieldWells
	}).(DashboardTableUnaggregatedFieldWellsPtrOutput)
}

type DashboardTableInlineVisualization struct {
	// The configuration of the inline visualization of the data bars within a chart.
	DataBars *DashboardDataBarsOptions `pulumi:"dataBars"`
}

// DashboardTableInlineVisualizationInput is an input type that accepts DashboardTableInlineVisualizationArgs and DashboardTableInlineVisualizationOutput values.
// You can construct a concrete instance of `DashboardTableInlineVisualizationInput` via:
//
//	DashboardTableInlineVisualizationArgs{...}
type DashboardTableInlineVisualizationInput interface {
	pulumi.Input

	ToDashboardTableInlineVisualizationOutput() DashboardTableInlineVisualizationOutput
	ToDashboardTableInlineVisualizationOutputWithContext(context.Context) DashboardTableInlineVisualizationOutput
}

type DashboardTableInlineVisualizationArgs struct {
	// The configuration of the inline visualization of the data bars within a chart.
	DataBars DashboardDataBarsOptionsPtrInput `pulumi:"dataBars"`
}

func (DashboardTableInlineVisualizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableInlineVisualization)(nil)).Elem()
}

func (i DashboardTableInlineVisualizationArgs) ToDashboardTableInlineVisualizationOutput() DashboardTableInlineVisualizationOutput {
	return i.ToDashboardTableInlineVisualizationOutputWithContext(context.Background())
}

func (i DashboardTableInlineVisualizationArgs) ToDashboardTableInlineVisualizationOutputWithContext(ctx context.Context) DashboardTableInlineVisualizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableInlineVisualizationOutput)
}

// DashboardTableInlineVisualizationArrayInput is an input type that accepts DashboardTableInlineVisualizationArray and DashboardTableInlineVisualizationArrayOutput values.
// You can construct a concrete instance of `DashboardTableInlineVisualizationArrayInput` via:
//
//	DashboardTableInlineVisualizationArray{ DashboardTableInlineVisualizationArgs{...} }
type DashboardTableInlineVisualizationArrayInput interface {
	pulumi.Input

	ToDashboardTableInlineVisualizationArrayOutput() DashboardTableInlineVisualizationArrayOutput
	ToDashboardTableInlineVisualizationArrayOutputWithContext(context.Context) DashboardTableInlineVisualizationArrayOutput
}

type DashboardTableInlineVisualizationArray []DashboardTableInlineVisualizationInput

func (DashboardTableInlineVisualizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableInlineVisualization)(nil)).Elem()
}

func (i DashboardTableInlineVisualizationArray) ToDashboardTableInlineVisualizationArrayOutput() DashboardTableInlineVisualizationArrayOutput {
	return i.ToDashboardTableInlineVisualizationArrayOutputWithContext(context.Background())
}

func (i DashboardTableInlineVisualizationArray) ToDashboardTableInlineVisualizationArrayOutputWithContext(ctx context.Context) DashboardTableInlineVisualizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableInlineVisualizationArrayOutput)
}

type DashboardTableInlineVisualizationOutput struct{ *pulumi.OutputState }

func (DashboardTableInlineVisualizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableInlineVisualization)(nil)).Elem()
}

func (o DashboardTableInlineVisualizationOutput) ToDashboardTableInlineVisualizationOutput() DashboardTableInlineVisualizationOutput {
	return o
}

func (o DashboardTableInlineVisualizationOutput) ToDashboardTableInlineVisualizationOutputWithContext(ctx context.Context) DashboardTableInlineVisualizationOutput {
	return o
}

// The configuration of the inline visualization of the data bars within a chart.
func (o DashboardTableInlineVisualizationOutput) DataBars() DashboardDataBarsOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableInlineVisualization) *DashboardDataBarsOptions { return v.DataBars }).(DashboardDataBarsOptionsPtrOutput)
}

type DashboardTableInlineVisualizationArrayOutput struct{ *pulumi.OutputState }

func (DashboardTableInlineVisualizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableInlineVisualization)(nil)).Elem()
}

func (o DashboardTableInlineVisualizationArrayOutput) ToDashboardTableInlineVisualizationArrayOutput() DashboardTableInlineVisualizationArrayOutput {
	return o
}

func (o DashboardTableInlineVisualizationArrayOutput) ToDashboardTableInlineVisualizationArrayOutputWithContext(ctx context.Context) DashboardTableInlineVisualizationArrayOutput {
	return o
}

func (o DashboardTableInlineVisualizationArrayOutput) Index(i pulumi.IntInput) DashboardTableInlineVisualizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTableInlineVisualization {
		return vs[0].([]DashboardTableInlineVisualization)[vs[1].(int)]
	}).(DashboardTableInlineVisualizationOutput)
}

type DashboardTableOptions struct {
	// The table cell style of table cells.
	CellStyle *DashboardTableCellStyle `pulumi:"cellStyle"`
	// The table cell style of a table header.
	HeaderStyle *DashboardTableCellStyle `pulumi:"headerStyle"`
	// The orientation (vertical, horizontal) for a table.
	Orientation *DashboardTableOrientation `pulumi:"orientation"`
	// The row alternate color options (widget status, row alternate colors) for a table.
	RowAlternateColorOptions *DashboardRowAlternateColorOptions `pulumi:"rowAlternateColorOptions"`
}

// DashboardTableOptionsInput is an input type that accepts DashboardTableOptionsArgs and DashboardTableOptionsOutput values.
// You can construct a concrete instance of `DashboardTableOptionsInput` via:
//
//	DashboardTableOptionsArgs{...}
type DashboardTableOptionsInput interface {
	pulumi.Input

	ToDashboardTableOptionsOutput() DashboardTableOptionsOutput
	ToDashboardTableOptionsOutputWithContext(context.Context) DashboardTableOptionsOutput
}

type DashboardTableOptionsArgs struct {
	// The table cell style of table cells.
	CellStyle DashboardTableCellStylePtrInput `pulumi:"cellStyle"`
	// The table cell style of a table header.
	HeaderStyle DashboardTableCellStylePtrInput `pulumi:"headerStyle"`
	// The orientation (vertical, horizontal) for a table.
	Orientation DashboardTableOrientationPtrInput `pulumi:"orientation"`
	// The row alternate color options (widget status, row alternate colors) for a table.
	RowAlternateColorOptions DashboardRowAlternateColorOptionsPtrInput `pulumi:"rowAlternateColorOptions"`
}

func (DashboardTableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableOptions)(nil)).Elem()
}

func (i DashboardTableOptionsArgs) ToDashboardTableOptionsOutput() DashboardTableOptionsOutput {
	return i.ToDashboardTableOptionsOutputWithContext(context.Background())
}

func (i DashboardTableOptionsArgs) ToDashboardTableOptionsOutputWithContext(ctx context.Context) DashboardTableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableOptionsOutput)
}

func (i DashboardTableOptionsArgs) ToDashboardTableOptionsPtrOutput() DashboardTableOptionsPtrOutput {
	return i.ToDashboardTableOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTableOptionsArgs) ToDashboardTableOptionsPtrOutputWithContext(ctx context.Context) DashboardTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableOptionsOutput).ToDashboardTableOptionsPtrOutputWithContext(ctx)
}

// DashboardTableOptionsPtrInput is an input type that accepts DashboardTableOptionsArgs, DashboardTableOptionsPtr and DashboardTableOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTableOptionsPtrInput` via:
//
//	        DashboardTableOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTableOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTableOptionsPtrOutput() DashboardTableOptionsPtrOutput
	ToDashboardTableOptionsPtrOutputWithContext(context.Context) DashboardTableOptionsPtrOutput
}

type dashboardTableOptionsPtrType DashboardTableOptionsArgs

func DashboardTableOptionsPtr(v *DashboardTableOptionsArgs) DashboardTableOptionsPtrInput {
	return (*dashboardTableOptionsPtrType)(v)
}

func (*dashboardTableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableOptions)(nil)).Elem()
}

func (i *dashboardTableOptionsPtrType) ToDashboardTableOptionsPtrOutput() DashboardTableOptionsPtrOutput {
	return i.ToDashboardTableOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTableOptionsPtrType) ToDashboardTableOptionsPtrOutputWithContext(ctx context.Context) DashboardTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableOptionsPtrOutput)
}

type DashboardTableOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableOptions)(nil)).Elem()
}

func (o DashboardTableOptionsOutput) ToDashboardTableOptionsOutput() DashboardTableOptionsOutput {
	return o
}

func (o DashboardTableOptionsOutput) ToDashboardTableOptionsOutputWithContext(ctx context.Context) DashboardTableOptionsOutput {
	return o
}

func (o DashboardTableOptionsOutput) ToDashboardTableOptionsPtrOutput() DashboardTableOptionsPtrOutput {
	return o.ToDashboardTableOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTableOptionsOutput) ToDashboardTableOptionsPtrOutputWithContext(ctx context.Context) DashboardTableOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableOptions) *DashboardTableOptions {
		return &v
	}).(DashboardTableOptionsPtrOutput)
}

// The table cell style of table cells.
func (o DashboardTableOptionsOutput) CellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v DashboardTableOptions) *DashboardTableCellStyle { return v.CellStyle }).(DashboardTableCellStylePtrOutput)
}

// The table cell style of a table header.
func (o DashboardTableOptionsOutput) HeaderStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v DashboardTableOptions) *DashboardTableCellStyle { return v.HeaderStyle }).(DashboardTableCellStylePtrOutput)
}

// The orientation (vertical, horizontal) for a table.
func (o DashboardTableOptionsOutput) Orientation() DashboardTableOrientationPtrOutput {
	return o.ApplyT(func(v DashboardTableOptions) *DashboardTableOrientation { return v.Orientation }).(DashboardTableOrientationPtrOutput)
}

// The row alternate color options (widget status, row alternate colors) for a table.
func (o DashboardTableOptionsOutput) RowAlternateColorOptions() DashboardRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableOptions) *DashboardRowAlternateColorOptions { return v.RowAlternateColorOptions }).(DashboardRowAlternateColorOptionsPtrOutput)
}

type DashboardTableOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableOptions)(nil)).Elem()
}

func (o DashboardTableOptionsPtrOutput) ToDashboardTableOptionsPtrOutput() DashboardTableOptionsPtrOutput {
	return o
}

func (o DashboardTableOptionsPtrOutput) ToDashboardTableOptionsPtrOutputWithContext(ctx context.Context) DashboardTableOptionsPtrOutput {
	return o
}

func (o DashboardTableOptionsPtrOutput) Elem() DashboardTableOptionsOutput {
	return o.ApplyT(func(v *DashboardTableOptions) DashboardTableOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTableOptions
		return ret
	}).(DashboardTableOptionsOutput)
}

// The table cell style of table cells.
func (o DashboardTableOptionsPtrOutput) CellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v *DashboardTableOptions) *DashboardTableCellStyle {
		if v == nil {
			return nil
		}
		return v.CellStyle
	}).(DashboardTableCellStylePtrOutput)
}

// The table cell style of a table header.
func (o DashboardTableOptionsPtrOutput) HeaderStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v *DashboardTableOptions) *DashboardTableCellStyle {
		if v == nil {
			return nil
		}
		return v.HeaderStyle
	}).(DashboardTableCellStylePtrOutput)
}

// The orientation (vertical, horizontal) for a table.
func (o DashboardTableOptionsPtrOutput) Orientation() DashboardTableOrientationPtrOutput {
	return o.ApplyT(func(v *DashboardTableOptions) *DashboardTableOrientation {
		if v == nil {
			return nil
		}
		return v.Orientation
	}).(DashboardTableOrientationPtrOutput)
}

// The row alternate color options (widget status, row alternate colors) for a table.
func (o DashboardTableOptionsPtrOutput) RowAlternateColorOptions() DashboardRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableOptions) *DashboardRowAlternateColorOptions {
		if v == nil {
			return nil
		}
		return v.RowAlternateColorOptions
	}).(DashboardRowAlternateColorOptionsPtrOutput)
}

type DashboardTablePaginatedReportOptions struct {
	// The visibility of repeating header rows on each page.
	OverflowColumnHeaderVisibility *DashboardVisibility `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of printing table overflow across pages.
	VerticalOverflowVisibility *DashboardVisibility `pulumi:"verticalOverflowVisibility"`
}

// DashboardTablePaginatedReportOptionsInput is an input type that accepts DashboardTablePaginatedReportOptionsArgs and DashboardTablePaginatedReportOptionsOutput values.
// You can construct a concrete instance of `DashboardTablePaginatedReportOptionsInput` via:
//
//	DashboardTablePaginatedReportOptionsArgs{...}
type DashboardTablePaginatedReportOptionsInput interface {
	pulumi.Input

	ToDashboardTablePaginatedReportOptionsOutput() DashboardTablePaginatedReportOptionsOutput
	ToDashboardTablePaginatedReportOptionsOutputWithContext(context.Context) DashboardTablePaginatedReportOptionsOutput
}

type DashboardTablePaginatedReportOptionsArgs struct {
	// The visibility of repeating header rows on each page.
	OverflowColumnHeaderVisibility DashboardVisibilityPtrInput `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of printing table overflow across pages.
	VerticalOverflowVisibility DashboardVisibilityPtrInput `pulumi:"verticalOverflowVisibility"`
}

func (DashboardTablePaginatedReportOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTablePaginatedReportOptions)(nil)).Elem()
}

func (i DashboardTablePaginatedReportOptionsArgs) ToDashboardTablePaginatedReportOptionsOutput() DashboardTablePaginatedReportOptionsOutput {
	return i.ToDashboardTablePaginatedReportOptionsOutputWithContext(context.Background())
}

func (i DashboardTablePaginatedReportOptionsArgs) ToDashboardTablePaginatedReportOptionsOutputWithContext(ctx context.Context) DashboardTablePaginatedReportOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTablePaginatedReportOptionsOutput)
}

func (i DashboardTablePaginatedReportOptionsArgs) ToDashboardTablePaginatedReportOptionsPtrOutput() DashboardTablePaginatedReportOptionsPtrOutput {
	return i.ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTablePaginatedReportOptionsArgs) ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTablePaginatedReportOptionsOutput).ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(ctx)
}

// DashboardTablePaginatedReportOptionsPtrInput is an input type that accepts DashboardTablePaginatedReportOptionsArgs, DashboardTablePaginatedReportOptionsPtr and DashboardTablePaginatedReportOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTablePaginatedReportOptionsPtrInput` via:
//
//	        DashboardTablePaginatedReportOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTablePaginatedReportOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTablePaginatedReportOptionsPtrOutput() DashboardTablePaginatedReportOptionsPtrOutput
	ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(context.Context) DashboardTablePaginatedReportOptionsPtrOutput
}

type dashboardTablePaginatedReportOptionsPtrType DashboardTablePaginatedReportOptionsArgs

func DashboardTablePaginatedReportOptionsPtr(v *DashboardTablePaginatedReportOptionsArgs) DashboardTablePaginatedReportOptionsPtrInput {
	return (*dashboardTablePaginatedReportOptionsPtrType)(v)
}

func (*dashboardTablePaginatedReportOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTablePaginatedReportOptions)(nil)).Elem()
}

func (i *dashboardTablePaginatedReportOptionsPtrType) ToDashboardTablePaginatedReportOptionsPtrOutput() DashboardTablePaginatedReportOptionsPtrOutput {
	return i.ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTablePaginatedReportOptionsPtrType) ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTablePaginatedReportOptionsPtrOutput)
}

type DashboardTablePaginatedReportOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTablePaginatedReportOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTablePaginatedReportOptions)(nil)).Elem()
}

func (o DashboardTablePaginatedReportOptionsOutput) ToDashboardTablePaginatedReportOptionsOutput() DashboardTablePaginatedReportOptionsOutput {
	return o
}

func (o DashboardTablePaginatedReportOptionsOutput) ToDashboardTablePaginatedReportOptionsOutputWithContext(ctx context.Context) DashboardTablePaginatedReportOptionsOutput {
	return o
}

func (o DashboardTablePaginatedReportOptionsOutput) ToDashboardTablePaginatedReportOptionsPtrOutput() DashboardTablePaginatedReportOptionsPtrOutput {
	return o.ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTablePaginatedReportOptionsOutput) ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePaginatedReportOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTablePaginatedReportOptions) *DashboardTablePaginatedReportOptions {
		return &v
	}).(DashboardTablePaginatedReportOptionsPtrOutput)
}

// The visibility of repeating header rows on each page.
func (o DashboardTablePaginatedReportOptionsOutput) OverflowColumnHeaderVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTablePaginatedReportOptions) *DashboardVisibility {
		return v.OverflowColumnHeaderVisibility
	}).(DashboardVisibilityPtrOutput)
}

// The visibility of printing table overflow across pages.
func (o DashboardTablePaginatedReportOptionsOutput) VerticalOverflowVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTablePaginatedReportOptions) *DashboardVisibility { return v.VerticalOverflowVisibility }).(DashboardVisibilityPtrOutput)
}

type DashboardTablePaginatedReportOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTablePaginatedReportOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTablePaginatedReportOptions)(nil)).Elem()
}

func (o DashboardTablePaginatedReportOptionsPtrOutput) ToDashboardTablePaginatedReportOptionsPtrOutput() DashboardTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o DashboardTablePaginatedReportOptionsPtrOutput) ToDashboardTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o DashboardTablePaginatedReportOptionsPtrOutput) Elem() DashboardTablePaginatedReportOptionsOutput {
	return o.ApplyT(func(v *DashboardTablePaginatedReportOptions) DashboardTablePaginatedReportOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTablePaginatedReportOptions
		return ret
	}).(DashboardTablePaginatedReportOptionsOutput)
}

// The visibility of repeating header rows on each page.
func (o DashboardTablePaginatedReportOptionsPtrOutput) OverflowColumnHeaderVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardTablePaginatedReportOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.OverflowColumnHeaderVisibility
	}).(DashboardVisibilityPtrOutput)
}

// The visibility of printing table overflow across pages.
func (o DashboardTablePaginatedReportOptionsPtrOutput) VerticalOverflowVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardTablePaginatedReportOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.VerticalOverflowVisibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardTablePinnedFieldOptions struct {
	// A list of columns to be pinned to the left of a table visual.
	PinnedLeftFields []string `pulumi:"pinnedLeftFields"`
}

// DashboardTablePinnedFieldOptionsInput is an input type that accepts DashboardTablePinnedFieldOptionsArgs and DashboardTablePinnedFieldOptionsOutput values.
// You can construct a concrete instance of `DashboardTablePinnedFieldOptionsInput` via:
//
//	DashboardTablePinnedFieldOptionsArgs{...}
type DashboardTablePinnedFieldOptionsInput interface {
	pulumi.Input

	ToDashboardTablePinnedFieldOptionsOutput() DashboardTablePinnedFieldOptionsOutput
	ToDashboardTablePinnedFieldOptionsOutputWithContext(context.Context) DashboardTablePinnedFieldOptionsOutput
}

type DashboardTablePinnedFieldOptionsArgs struct {
	// A list of columns to be pinned to the left of a table visual.
	PinnedLeftFields pulumi.StringArrayInput `pulumi:"pinnedLeftFields"`
}

func (DashboardTablePinnedFieldOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTablePinnedFieldOptions)(nil)).Elem()
}

func (i DashboardTablePinnedFieldOptionsArgs) ToDashboardTablePinnedFieldOptionsOutput() DashboardTablePinnedFieldOptionsOutput {
	return i.ToDashboardTablePinnedFieldOptionsOutputWithContext(context.Background())
}

func (i DashboardTablePinnedFieldOptionsArgs) ToDashboardTablePinnedFieldOptionsOutputWithContext(ctx context.Context) DashboardTablePinnedFieldOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTablePinnedFieldOptionsOutput)
}

func (i DashboardTablePinnedFieldOptionsArgs) ToDashboardTablePinnedFieldOptionsPtrOutput() DashboardTablePinnedFieldOptionsPtrOutput {
	return i.ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTablePinnedFieldOptionsArgs) ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePinnedFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTablePinnedFieldOptionsOutput).ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(ctx)
}

// DashboardTablePinnedFieldOptionsPtrInput is an input type that accepts DashboardTablePinnedFieldOptionsArgs, DashboardTablePinnedFieldOptionsPtr and DashboardTablePinnedFieldOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTablePinnedFieldOptionsPtrInput` via:
//
//	        DashboardTablePinnedFieldOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTablePinnedFieldOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTablePinnedFieldOptionsPtrOutput() DashboardTablePinnedFieldOptionsPtrOutput
	ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(context.Context) DashboardTablePinnedFieldOptionsPtrOutput
}

type dashboardTablePinnedFieldOptionsPtrType DashboardTablePinnedFieldOptionsArgs

func DashboardTablePinnedFieldOptionsPtr(v *DashboardTablePinnedFieldOptionsArgs) DashboardTablePinnedFieldOptionsPtrInput {
	return (*dashboardTablePinnedFieldOptionsPtrType)(v)
}

func (*dashboardTablePinnedFieldOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTablePinnedFieldOptions)(nil)).Elem()
}

func (i *dashboardTablePinnedFieldOptionsPtrType) ToDashboardTablePinnedFieldOptionsPtrOutput() DashboardTablePinnedFieldOptionsPtrOutput {
	return i.ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTablePinnedFieldOptionsPtrType) ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePinnedFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTablePinnedFieldOptionsPtrOutput)
}

type DashboardTablePinnedFieldOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTablePinnedFieldOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTablePinnedFieldOptions)(nil)).Elem()
}

func (o DashboardTablePinnedFieldOptionsOutput) ToDashboardTablePinnedFieldOptionsOutput() DashboardTablePinnedFieldOptionsOutput {
	return o
}

func (o DashboardTablePinnedFieldOptionsOutput) ToDashboardTablePinnedFieldOptionsOutputWithContext(ctx context.Context) DashboardTablePinnedFieldOptionsOutput {
	return o
}

func (o DashboardTablePinnedFieldOptionsOutput) ToDashboardTablePinnedFieldOptionsPtrOutput() DashboardTablePinnedFieldOptionsPtrOutput {
	return o.ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTablePinnedFieldOptionsOutput) ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePinnedFieldOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTablePinnedFieldOptions) *DashboardTablePinnedFieldOptions {
		return &v
	}).(DashboardTablePinnedFieldOptionsPtrOutput)
}

// A list of columns to be pinned to the left of a table visual.
func (o DashboardTablePinnedFieldOptionsOutput) PinnedLeftFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardTablePinnedFieldOptions) []string { return v.PinnedLeftFields }).(pulumi.StringArrayOutput)
}

type DashboardTablePinnedFieldOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTablePinnedFieldOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTablePinnedFieldOptions)(nil)).Elem()
}

func (o DashboardTablePinnedFieldOptionsPtrOutput) ToDashboardTablePinnedFieldOptionsPtrOutput() DashboardTablePinnedFieldOptionsPtrOutput {
	return o
}

func (o DashboardTablePinnedFieldOptionsPtrOutput) ToDashboardTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) DashboardTablePinnedFieldOptionsPtrOutput {
	return o
}

func (o DashboardTablePinnedFieldOptionsPtrOutput) Elem() DashboardTablePinnedFieldOptionsOutput {
	return o.ApplyT(func(v *DashboardTablePinnedFieldOptions) DashboardTablePinnedFieldOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTablePinnedFieldOptions
		return ret
	}).(DashboardTablePinnedFieldOptionsOutput)
}

// A list of columns to be pinned to the left of a table visual.
func (o DashboardTablePinnedFieldOptionsPtrOutput) PinnedLeftFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardTablePinnedFieldOptions) []string {
		if v == nil {
			return nil
		}
		return v.PinnedLeftFields
	}).(pulumi.StringArrayOutput)
}

type DashboardTableRowConditionalFormatting struct {
	// The conditional formatting color (solid, gradient) of the background for a table row.
	BackgroundColor *DashboardConditionalFormattingColor `pulumi:"backgroundColor"`
	// The conditional formatting color (solid, gradient) of the text for a table row.
	TextColor *DashboardConditionalFormattingColor `pulumi:"textColor"`
}

// DashboardTableRowConditionalFormattingInput is an input type that accepts DashboardTableRowConditionalFormattingArgs and DashboardTableRowConditionalFormattingOutput values.
// You can construct a concrete instance of `DashboardTableRowConditionalFormattingInput` via:
//
//	DashboardTableRowConditionalFormattingArgs{...}
type DashboardTableRowConditionalFormattingInput interface {
	pulumi.Input

	ToDashboardTableRowConditionalFormattingOutput() DashboardTableRowConditionalFormattingOutput
	ToDashboardTableRowConditionalFormattingOutputWithContext(context.Context) DashboardTableRowConditionalFormattingOutput
}

type DashboardTableRowConditionalFormattingArgs struct {
	// The conditional formatting color (solid, gradient) of the background for a table row.
	BackgroundColor DashboardConditionalFormattingColorPtrInput `pulumi:"backgroundColor"`
	// The conditional formatting color (solid, gradient) of the text for a table row.
	TextColor DashboardConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (DashboardTableRowConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableRowConditionalFormatting)(nil)).Elem()
}

func (i DashboardTableRowConditionalFormattingArgs) ToDashboardTableRowConditionalFormattingOutput() DashboardTableRowConditionalFormattingOutput {
	return i.ToDashboardTableRowConditionalFormattingOutputWithContext(context.Background())
}

func (i DashboardTableRowConditionalFormattingArgs) ToDashboardTableRowConditionalFormattingOutputWithContext(ctx context.Context) DashboardTableRowConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableRowConditionalFormattingOutput)
}

func (i DashboardTableRowConditionalFormattingArgs) ToDashboardTableRowConditionalFormattingPtrOutput() DashboardTableRowConditionalFormattingPtrOutput {
	return i.ToDashboardTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i DashboardTableRowConditionalFormattingArgs) ToDashboardTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableRowConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableRowConditionalFormattingOutput).ToDashboardTableRowConditionalFormattingPtrOutputWithContext(ctx)
}

// DashboardTableRowConditionalFormattingPtrInput is an input type that accepts DashboardTableRowConditionalFormattingArgs, DashboardTableRowConditionalFormattingPtr and DashboardTableRowConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `DashboardTableRowConditionalFormattingPtrInput` via:
//
//	        DashboardTableRowConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type DashboardTableRowConditionalFormattingPtrInput interface {
	pulumi.Input

	ToDashboardTableRowConditionalFormattingPtrOutput() DashboardTableRowConditionalFormattingPtrOutput
	ToDashboardTableRowConditionalFormattingPtrOutputWithContext(context.Context) DashboardTableRowConditionalFormattingPtrOutput
}

type dashboardTableRowConditionalFormattingPtrType DashboardTableRowConditionalFormattingArgs

func DashboardTableRowConditionalFormattingPtr(v *DashboardTableRowConditionalFormattingArgs) DashboardTableRowConditionalFormattingPtrInput {
	return (*dashboardTableRowConditionalFormattingPtrType)(v)
}

func (*dashboardTableRowConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableRowConditionalFormatting)(nil)).Elem()
}

func (i *dashboardTableRowConditionalFormattingPtrType) ToDashboardTableRowConditionalFormattingPtrOutput() DashboardTableRowConditionalFormattingPtrOutput {
	return i.ToDashboardTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *dashboardTableRowConditionalFormattingPtrType) ToDashboardTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableRowConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableRowConditionalFormattingPtrOutput)
}

type DashboardTableRowConditionalFormattingOutput struct{ *pulumi.OutputState }

func (DashboardTableRowConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableRowConditionalFormatting)(nil)).Elem()
}

func (o DashboardTableRowConditionalFormattingOutput) ToDashboardTableRowConditionalFormattingOutput() DashboardTableRowConditionalFormattingOutput {
	return o
}

func (o DashboardTableRowConditionalFormattingOutput) ToDashboardTableRowConditionalFormattingOutputWithContext(ctx context.Context) DashboardTableRowConditionalFormattingOutput {
	return o
}

func (o DashboardTableRowConditionalFormattingOutput) ToDashboardTableRowConditionalFormattingPtrOutput() DashboardTableRowConditionalFormattingPtrOutput {
	return o.ToDashboardTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o DashboardTableRowConditionalFormattingOutput) ToDashboardTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableRowConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableRowConditionalFormatting) *DashboardTableRowConditionalFormatting {
		return &v
	}).(DashboardTableRowConditionalFormattingPtrOutput)
}

// The conditional formatting color (solid, gradient) of the background for a table row.
func (o DashboardTableRowConditionalFormattingOutput) BackgroundColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v DashboardTableRowConditionalFormatting) *DashboardConditionalFormattingColor {
		return v.BackgroundColor
	}).(DashboardConditionalFormattingColorPtrOutput)
}

// The conditional formatting color (solid, gradient) of the text for a table row.
func (o DashboardTableRowConditionalFormattingOutput) TextColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v DashboardTableRowConditionalFormatting) *DashboardConditionalFormattingColor {
		return v.TextColor
	}).(DashboardConditionalFormattingColorPtrOutput)
}

type DashboardTableRowConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableRowConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableRowConditionalFormatting)(nil)).Elem()
}

func (o DashboardTableRowConditionalFormattingPtrOutput) ToDashboardTableRowConditionalFormattingPtrOutput() DashboardTableRowConditionalFormattingPtrOutput {
	return o
}

func (o DashboardTableRowConditionalFormattingPtrOutput) ToDashboardTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) DashboardTableRowConditionalFormattingPtrOutput {
	return o
}

func (o DashboardTableRowConditionalFormattingPtrOutput) Elem() DashboardTableRowConditionalFormattingOutput {
	return o.ApplyT(func(v *DashboardTableRowConditionalFormatting) DashboardTableRowConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret DashboardTableRowConditionalFormatting
		return ret
	}).(DashboardTableRowConditionalFormattingOutput)
}

// The conditional formatting color (solid, gradient) of the background for a table row.
func (o DashboardTableRowConditionalFormattingPtrOutput) BackgroundColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *DashboardTableRowConditionalFormatting) *DashboardConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(DashboardConditionalFormattingColorPtrOutput)
}

// The conditional formatting color (solid, gradient) of the text for a table row.
func (o DashboardTableRowConditionalFormattingPtrOutput) TextColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *DashboardTableRowConditionalFormatting) *DashboardConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(DashboardConditionalFormattingColorPtrOutput)
}

type DashboardTableSideBorderOptions struct {
	// The table border options of the bottom border.
	Bottom *DashboardTableBorderOptions `pulumi:"bottom"`
	// The table border options of the inner horizontal border.
	InnerHorizontal *DashboardTableBorderOptions `pulumi:"innerHorizontal"`
	// The table border options of the inner vertical border.
	InnerVertical *DashboardTableBorderOptions `pulumi:"innerVertical"`
	// The table border options of the left border.
	Left *DashboardTableBorderOptions `pulumi:"left"`
	// The table border options of the right border.
	Right *DashboardTableBorderOptions `pulumi:"right"`
	// The table border options of the top border.
	Top *DashboardTableBorderOptions `pulumi:"top"`
}

// DashboardTableSideBorderOptionsInput is an input type that accepts DashboardTableSideBorderOptionsArgs and DashboardTableSideBorderOptionsOutput values.
// You can construct a concrete instance of `DashboardTableSideBorderOptionsInput` via:
//
//	DashboardTableSideBorderOptionsArgs{...}
type DashboardTableSideBorderOptionsInput interface {
	pulumi.Input

	ToDashboardTableSideBorderOptionsOutput() DashboardTableSideBorderOptionsOutput
	ToDashboardTableSideBorderOptionsOutputWithContext(context.Context) DashboardTableSideBorderOptionsOutput
}

type DashboardTableSideBorderOptionsArgs struct {
	// The table border options of the bottom border.
	Bottom DashboardTableBorderOptionsPtrInput `pulumi:"bottom"`
	// The table border options of the inner horizontal border.
	InnerHorizontal DashboardTableBorderOptionsPtrInput `pulumi:"innerHorizontal"`
	// The table border options of the inner vertical border.
	InnerVertical DashboardTableBorderOptionsPtrInput `pulumi:"innerVertical"`
	// The table border options of the left border.
	Left DashboardTableBorderOptionsPtrInput `pulumi:"left"`
	// The table border options of the right border.
	Right DashboardTableBorderOptionsPtrInput `pulumi:"right"`
	// The table border options of the top border.
	Top DashboardTableBorderOptionsPtrInput `pulumi:"top"`
}

func (DashboardTableSideBorderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableSideBorderOptions)(nil)).Elem()
}

func (i DashboardTableSideBorderOptionsArgs) ToDashboardTableSideBorderOptionsOutput() DashboardTableSideBorderOptionsOutput {
	return i.ToDashboardTableSideBorderOptionsOutputWithContext(context.Background())
}

func (i DashboardTableSideBorderOptionsArgs) ToDashboardTableSideBorderOptionsOutputWithContext(ctx context.Context) DashboardTableSideBorderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableSideBorderOptionsOutput)
}

func (i DashboardTableSideBorderOptionsArgs) ToDashboardTableSideBorderOptionsPtrOutput() DashboardTableSideBorderOptionsPtrOutput {
	return i.ToDashboardTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTableSideBorderOptionsArgs) ToDashboardTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableSideBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableSideBorderOptionsOutput).ToDashboardTableSideBorderOptionsPtrOutputWithContext(ctx)
}

// DashboardTableSideBorderOptionsPtrInput is an input type that accepts DashboardTableSideBorderOptionsArgs, DashboardTableSideBorderOptionsPtr and DashboardTableSideBorderOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTableSideBorderOptionsPtrInput` via:
//
//	        DashboardTableSideBorderOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTableSideBorderOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTableSideBorderOptionsPtrOutput() DashboardTableSideBorderOptionsPtrOutput
	ToDashboardTableSideBorderOptionsPtrOutputWithContext(context.Context) DashboardTableSideBorderOptionsPtrOutput
}

type dashboardTableSideBorderOptionsPtrType DashboardTableSideBorderOptionsArgs

func DashboardTableSideBorderOptionsPtr(v *DashboardTableSideBorderOptionsArgs) DashboardTableSideBorderOptionsPtrInput {
	return (*dashboardTableSideBorderOptionsPtrType)(v)
}

func (*dashboardTableSideBorderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableSideBorderOptions)(nil)).Elem()
}

func (i *dashboardTableSideBorderOptionsPtrType) ToDashboardTableSideBorderOptionsPtrOutput() DashboardTableSideBorderOptionsPtrOutput {
	return i.ToDashboardTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTableSideBorderOptionsPtrType) ToDashboardTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableSideBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableSideBorderOptionsPtrOutput)
}

type DashboardTableSideBorderOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTableSideBorderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableSideBorderOptions)(nil)).Elem()
}

func (o DashboardTableSideBorderOptionsOutput) ToDashboardTableSideBorderOptionsOutput() DashboardTableSideBorderOptionsOutput {
	return o
}

func (o DashboardTableSideBorderOptionsOutput) ToDashboardTableSideBorderOptionsOutputWithContext(ctx context.Context) DashboardTableSideBorderOptionsOutput {
	return o
}

func (o DashboardTableSideBorderOptionsOutput) ToDashboardTableSideBorderOptionsPtrOutput() DashboardTableSideBorderOptionsPtrOutput {
	return o.ToDashboardTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTableSideBorderOptionsOutput) ToDashboardTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableSideBorderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableSideBorderOptions) *DashboardTableSideBorderOptions {
		return &v
	}).(DashboardTableSideBorderOptionsPtrOutput)
}

// The table border options of the bottom border.
func (o DashboardTableSideBorderOptionsOutput) Bottom() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableSideBorderOptions) *DashboardTableBorderOptions { return v.Bottom }).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the inner horizontal border.
func (o DashboardTableSideBorderOptionsOutput) InnerHorizontal() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableSideBorderOptions) *DashboardTableBorderOptions { return v.InnerHorizontal }).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the inner vertical border.
func (o DashboardTableSideBorderOptionsOutput) InnerVertical() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableSideBorderOptions) *DashboardTableBorderOptions { return v.InnerVertical }).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the left border.
func (o DashboardTableSideBorderOptionsOutput) Left() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableSideBorderOptions) *DashboardTableBorderOptions { return v.Left }).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the right border.
func (o DashboardTableSideBorderOptionsOutput) Right() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableSideBorderOptions) *DashboardTableBorderOptions { return v.Right }).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the top border.
func (o DashboardTableSideBorderOptionsOutput) Top() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableSideBorderOptions) *DashboardTableBorderOptions { return v.Top }).(DashboardTableBorderOptionsPtrOutput)
}

type DashboardTableSideBorderOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableSideBorderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableSideBorderOptions)(nil)).Elem()
}

func (o DashboardTableSideBorderOptionsPtrOutput) ToDashboardTableSideBorderOptionsPtrOutput() DashboardTableSideBorderOptionsPtrOutput {
	return o
}

func (o DashboardTableSideBorderOptionsPtrOutput) ToDashboardTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) DashboardTableSideBorderOptionsPtrOutput {
	return o
}

func (o DashboardTableSideBorderOptionsPtrOutput) Elem() DashboardTableSideBorderOptionsOutput {
	return o.ApplyT(func(v *DashboardTableSideBorderOptions) DashboardTableSideBorderOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTableSideBorderOptions
		return ret
	}).(DashboardTableSideBorderOptionsOutput)
}

// The table border options of the bottom border.
func (o DashboardTableSideBorderOptionsPtrOutput) Bottom() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableSideBorderOptions) *DashboardTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Bottom
	}).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the inner horizontal border.
func (o DashboardTableSideBorderOptionsPtrOutput) InnerHorizontal() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableSideBorderOptions) *DashboardTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.InnerHorizontal
	}).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the inner vertical border.
func (o DashboardTableSideBorderOptionsPtrOutput) InnerVertical() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableSideBorderOptions) *DashboardTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.InnerVertical
	}).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the left border.
func (o DashboardTableSideBorderOptionsPtrOutput) Left() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableSideBorderOptions) *DashboardTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Left
	}).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the right border.
func (o DashboardTableSideBorderOptionsPtrOutput) Right() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableSideBorderOptions) *DashboardTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Right
	}).(DashboardTableBorderOptionsPtrOutput)
}

// The table border options of the top border.
func (o DashboardTableSideBorderOptionsPtrOutput) Top() DashboardTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableSideBorderOptions) *DashboardTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Top
	}).(DashboardTableBorderOptionsPtrOutput)
}

type DashboardTableSortConfiguration struct {
	// The pagination configuration (page size, page number) for the table.
	PaginationConfiguration *DashboardPaginationConfiguration `pulumi:"paginationConfiguration"`
	// The field sort options for rows in the table.
	RowSort []DashboardFieldSortOptions `pulumi:"rowSort"`
}

// DashboardTableSortConfigurationInput is an input type that accepts DashboardTableSortConfigurationArgs and DashboardTableSortConfigurationOutput values.
// You can construct a concrete instance of `DashboardTableSortConfigurationInput` via:
//
//	DashboardTableSortConfigurationArgs{...}
type DashboardTableSortConfigurationInput interface {
	pulumi.Input

	ToDashboardTableSortConfigurationOutput() DashboardTableSortConfigurationOutput
	ToDashboardTableSortConfigurationOutputWithContext(context.Context) DashboardTableSortConfigurationOutput
}

type DashboardTableSortConfigurationArgs struct {
	// The pagination configuration (page size, page number) for the table.
	PaginationConfiguration DashboardPaginationConfigurationPtrInput `pulumi:"paginationConfiguration"`
	// The field sort options for rows in the table.
	RowSort DashboardFieldSortOptionsArrayInput `pulumi:"rowSort"`
}

func (DashboardTableSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableSortConfiguration)(nil)).Elem()
}

func (i DashboardTableSortConfigurationArgs) ToDashboardTableSortConfigurationOutput() DashboardTableSortConfigurationOutput {
	return i.ToDashboardTableSortConfigurationOutputWithContext(context.Background())
}

func (i DashboardTableSortConfigurationArgs) ToDashboardTableSortConfigurationOutputWithContext(ctx context.Context) DashboardTableSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableSortConfigurationOutput)
}

func (i DashboardTableSortConfigurationArgs) ToDashboardTableSortConfigurationPtrOutput() DashboardTableSortConfigurationPtrOutput {
	return i.ToDashboardTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTableSortConfigurationArgs) ToDashboardTableSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableSortConfigurationOutput).ToDashboardTableSortConfigurationPtrOutputWithContext(ctx)
}

// DashboardTableSortConfigurationPtrInput is an input type that accepts DashboardTableSortConfigurationArgs, DashboardTableSortConfigurationPtr and DashboardTableSortConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTableSortConfigurationPtrInput` via:
//
//	        DashboardTableSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTableSortConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTableSortConfigurationPtrOutput() DashboardTableSortConfigurationPtrOutput
	ToDashboardTableSortConfigurationPtrOutputWithContext(context.Context) DashboardTableSortConfigurationPtrOutput
}

type dashboardTableSortConfigurationPtrType DashboardTableSortConfigurationArgs

func DashboardTableSortConfigurationPtr(v *DashboardTableSortConfigurationArgs) DashboardTableSortConfigurationPtrInput {
	return (*dashboardTableSortConfigurationPtrType)(v)
}

func (*dashboardTableSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableSortConfiguration)(nil)).Elem()
}

func (i *dashboardTableSortConfigurationPtrType) ToDashboardTableSortConfigurationPtrOutput() DashboardTableSortConfigurationPtrOutput {
	return i.ToDashboardTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTableSortConfigurationPtrType) ToDashboardTableSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableSortConfigurationPtrOutput)
}

type DashboardTableSortConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTableSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableSortConfiguration)(nil)).Elem()
}

func (o DashboardTableSortConfigurationOutput) ToDashboardTableSortConfigurationOutput() DashboardTableSortConfigurationOutput {
	return o
}

func (o DashboardTableSortConfigurationOutput) ToDashboardTableSortConfigurationOutputWithContext(ctx context.Context) DashboardTableSortConfigurationOutput {
	return o
}

func (o DashboardTableSortConfigurationOutput) ToDashboardTableSortConfigurationPtrOutput() DashboardTableSortConfigurationPtrOutput {
	return o.ToDashboardTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTableSortConfigurationOutput) ToDashboardTableSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableSortConfiguration) *DashboardTableSortConfiguration {
		return &v
	}).(DashboardTableSortConfigurationPtrOutput)
}

// The pagination configuration (page size, page number) for the table.
func (o DashboardTableSortConfigurationOutput) PaginationConfiguration() DashboardPaginationConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableSortConfiguration) *DashboardPaginationConfiguration {
		return v.PaginationConfiguration
	}).(DashboardPaginationConfigurationPtrOutput)
}

// The field sort options for rows in the table.
func (o DashboardTableSortConfigurationOutput) RowSort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v DashboardTableSortConfiguration) []DashboardFieldSortOptions { return v.RowSort }).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardTableSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableSortConfiguration)(nil)).Elem()
}

func (o DashboardTableSortConfigurationPtrOutput) ToDashboardTableSortConfigurationPtrOutput() DashboardTableSortConfigurationPtrOutput {
	return o
}

func (o DashboardTableSortConfigurationPtrOutput) ToDashboardTableSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTableSortConfigurationPtrOutput {
	return o
}

func (o DashboardTableSortConfigurationPtrOutput) Elem() DashboardTableSortConfigurationOutput {
	return o.ApplyT(func(v *DashboardTableSortConfiguration) DashboardTableSortConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTableSortConfiguration
		return ret
	}).(DashboardTableSortConfigurationOutput)
}

// The pagination configuration (page size, page number) for the table.
func (o DashboardTableSortConfigurationPtrOutput) PaginationConfiguration() DashboardPaginationConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableSortConfiguration) *DashboardPaginationConfiguration {
		if v == nil {
			return nil
		}
		return v.PaginationConfiguration
	}).(DashboardPaginationConfigurationPtrOutput)
}

// The field sort options for rows in the table.
func (o DashboardTableSortConfigurationPtrOutput) RowSort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *DashboardTableSortConfiguration) []DashboardFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.RowSort
	}).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardTableStyleTarget struct {
	// The cell type of the table style target.
	CellType DashboardStyledCellType `pulumi:"cellType"`
}

// DashboardTableStyleTargetInput is an input type that accepts DashboardTableStyleTargetArgs and DashboardTableStyleTargetOutput values.
// You can construct a concrete instance of `DashboardTableStyleTargetInput` via:
//
//	DashboardTableStyleTargetArgs{...}
type DashboardTableStyleTargetInput interface {
	pulumi.Input

	ToDashboardTableStyleTargetOutput() DashboardTableStyleTargetOutput
	ToDashboardTableStyleTargetOutputWithContext(context.Context) DashboardTableStyleTargetOutput
}

type DashboardTableStyleTargetArgs struct {
	// The cell type of the table style target.
	CellType DashboardStyledCellTypeInput `pulumi:"cellType"`
}

func (DashboardTableStyleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableStyleTarget)(nil)).Elem()
}

func (i DashboardTableStyleTargetArgs) ToDashboardTableStyleTargetOutput() DashboardTableStyleTargetOutput {
	return i.ToDashboardTableStyleTargetOutputWithContext(context.Background())
}

func (i DashboardTableStyleTargetArgs) ToDashboardTableStyleTargetOutputWithContext(ctx context.Context) DashboardTableStyleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableStyleTargetOutput)
}

// DashboardTableStyleTargetArrayInput is an input type that accepts DashboardTableStyleTargetArray and DashboardTableStyleTargetArrayOutput values.
// You can construct a concrete instance of `DashboardTableStyleTargetArrayInput` via:
//
//	DashboardTableStyleTargetArray{ DashboardTableStyleTargetArgs{...} }
type DashboardTableStyleTargetArrayInput interface {
	pulumi.Input

	ToDashboardTableStyleTargetArrayOutput() DashboardTableStyleTargetArrayOutput
	ToDashboardTableStyleTargetArrayOutputWithContext(context.Context) DashboardTableStyleTargetArrayOutput
}

type DashboardTableStyleTargetArray []DashboardTableStyleTargetInput

func (DashboardTableStyleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableStyleTarget)(nil)).Elem()
}

func (i DashboardTableStyleTargetArray) ToDashboardTableStyleTargetArrayOutput() DashboardTableStyleTargetArrayOutput {
	return i.ToDashboardTableStyleTargetArrayOutputWithContext(context.Background())
}

func (i DashboardTableStyleTargetArray) ToDashboardTableStyleTargetArrayOutputWithContext(ctx context.Context) DashboardTableStyleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableStyleTargetArrayOutput)
}

type DashboardTableStyleTargetOutput struct{ *pulumi.OutputState }

func (DashboardTableStyleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableStyleTarget)(nil)).Elem()
}

func (o DashboardTableStyleTargetOutput) ToDashboardTableStyleTargetOutput() DashboardTableStyleTargetOutput {
	return o
}

func (o DashboardTableStyleTargetOutput) ToDashboardTableStyleTargetOutputWithContext(ctx context.Context) DashboardTableStyleTargetOutput {
	return o
}

// The cell type of the table style target.
func (o DashboardTableStyleTargetOutput) CellType() DashboardStyledCellTypeOutput {
	return o.ApplyT(func(v DashboardTableStyleTarget) DashboardStyledCellType { return v.CellType }).(DashboardStyledCellTypeOutput)
}

type DashboardTableStyleTargetArrayOutput struct{ *pulumi.OutputState }

func (DashboardTableStyleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTableStyleTarget)(nil)).Elem()
}

func (o DashboardTableStyleTargetArrayOutput) ToDashboardTableStyleTargetArrayOutput() DashboardTableStyleTargetArrayOutput {
	return o
}

func (o DashboardTableStyleTargetArrayOutput) ToDashboardTableStyleTargetArrayOutputWithContext(ctx context.Context) DashboardTableStyleTargetArrayOutput {
	return o
}

func (o DashboardTableStyleTargetArrayOutput) Index(i pulumi.IntInput) DashboardTableStyleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTableStyleTarget {
		return vs[0].([]DashboardTableStyleTarget)[vs[1].(int)]
	}).(DashboardTableStyleTargetOutput)
}

type DashboardTableUnaggregatedFieldWells struct {
	// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
	Values []DashboardUnaggregatedField `pulumi:"values"`
}

// DashboardTableUnaggregatedFieldWellsInput is an input type that accepts DashboardTableUnaggregatedFieldWellsArgs and DashboardTableUnaggregatedFieldWellsOutput values.
// You can construct a concrete instance of `DashboardTableUnaggregatedFieldWellsInput` via:
//
//	DashboardTableUnaggregatedFieldWellsArgs{...}
type DashboardTableUnaggregatedFieldWellsInput interface {
	pulumi.Input

	ToDashboardTableUnaggregatedFieldWellsOutput() DashboardTableUnaggregatedFieldWellsOutput
	ToDashboardTableUnaggregatedFieldWellsOutputWithContext(context.Context) DashboardTableUnaggregatedFieldWellsOutput
}

type DashboardTableUnaggregatedFieldWellsArgs struct {
	// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
	Values DashboardUnaggregatedFieldArrayInput `pulumi:"values"`
}

func (DashboardTableUnaggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableUnaggregatedFieldWells)(nil)).Elem()
}

func (i DashboardTableUnaggregatedFieldWellsArgs) ToDashboardTableUnaggregatedFieldWellsOutput() DashboardTableUnaggregatedFieldWellsOutput {
	return i.ToDashboardTableUnaggregatedFieldWellsOutputWithContext(context.Background())
}

func (i DashboardTableUnaggregatedFieldWellsArgs) ToDashboardTableUnaggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardTableUnaggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableUnaggregatedFieldWellsOutput)
}

func (i DashboardTableUnaggregatedFieldWellsArgs) ToDashboardTableUnaggregatedFieldWellsPtrOutput() DashboardTableUnaggregatedFieldWellsPtrOutput {
	return i.ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardTableUnaggregatedFieldWellsArgs) ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableUnaggregatedFieldWellsOutput).ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(ctx)
}

// DashboardTableUnaggregatedFieldWellsPtrInput is an input type that accepts DashboardTableUnaggregatedFieldWellsArgs, DashboardTableUnaggregatedFieldWellsPtr and DashboardTableUnaggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardTableUnaggregatedFieldWellsPtrInput` via:
//
//	        DashboardTableUnaggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardTableUnaggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardTableUnaggregatedFieldWellsPtrOutput() DashboardTableUnaggregatedFieldWellsPtrOutput
	ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(context.Context) DashboardTableUnaggregatedFieldWellsPtrOutput
}

type dashboardTableUnaggregatedFieldWellsPtrType DashboardTableUnaggregatedFieldWellsArgs

func DashboardTableUnaggregatedFieldWellsPtr(v *DashboardTableUnaggregatedFieldWellsArgs) DashboardTableUnaggregatedFieldWellsPtrInput {
	return (*dashboardTableUnaggregatedFieldWellsPtrType)(v)
}

func (*dashboardTableUnaggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableUnaggregatedFieldWells)(nil)).Elem()
}

func (i *dashboardTableUnaggregatedFieldWellsPtrType) ToDashboardTableUnaggregatedFieldWellsPtrOutput() DashboardTableUnaggregatedFieldWellsPtrOutput {
	return i.ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardTableUnaggregatedFieldWellsPtrType) ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableUnaggregatedFieldWellsPtrOutput)
}

type DashboardTableUnaggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardTableUnaggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableUnaggregatedFieldWells)(nil)).Elem()
}

func (o DashboardTableUnaggregatedFieldWellsOutput) ToDashboardTableUnaggregatedFieldWellsOutput() DashboardTableUnaggregatedFieldWellsOutput {
	return o
}

func (o DashboardTableUnaggregatedFieldWellsOutput) ToDashboardTableUnaggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardTableUnaggregatedFieldWellsOutput {
	return o
}

func (o DashboardTableUnaggregatedFieldWellsOutput) ToDashboardTableUnaggregatedFieldWellsPtrOutput() DashboardTableUnaggregatedFieldWellsPtrOutput {
	return o.ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardTableUnaggregatedFieldWellsOutput) ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableUnaggregatedFieldWells) *DashboardTableUnaggregatedFieldWells {
		return &v
	}).(DashboardTableUnaggregatedFieldWellsPtrOutput)
}

// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
func (o DashboardTableUnaggregatedFieldWellsOutput) Values() DashboardUnaggregatedFieldArrayOutput {
	return o.ApplyT(func(v DashboardTableUnaggregatedFieldWells) []DashboardUnaggregatedField { return v.Values }).(DashboardUnaggregatedFieldArrayOutput)
}

type DashboardTableUnaggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableUnaggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableUnaggregatedFieldWells)(nil)).Elem()
}

func (o DashboardTableUnaggregatedFieldWellsPtrOutput) ToDashboardTableUnaggregatedFieldWellsPtrOutput() DashboardTableUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardTableUnaggregatedFieldWellsPtrOutput) ToDashboardTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTableUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardTableUnaggregatedFieldWellsPtrOutput) Elem() DashboardTableUnaggregatedFieldWellsOutput {
	return o.ApplyT(func(v *DashboardTableUnaggregatedFieldWells) DashboardTableUnaggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardTableUnaggregatedFieldWells
		return ret
	}).(DashboardTableUnaggregatedFieldWellsOutput)
}

// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
func (o DashboardTableUnaggregatedFieldWellsPtrOutput) Values() DashboardUnaggregatedFieldArrayOutput {
	return o.ApplyT(func(v *DashboardTableUnaggregatedFieldWells) []DashboardUnaggregatedField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(DashboardUnaggregatedFieldArrayOutput)
}

type DashboardTableVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []DashboardVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *DashboardTableConfiguration `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting *DashboardTableConditionalFormatting `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle *DashboardVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *DashboardVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// DashboardTableVisualInput is an input type that accepts DashboardTableVisualArgs and DashboardTableVisualOutput values.
// You can construct a concrete instance of `DashboardTableVisualInput` via:
//
//	DashboardTableVisualArgs{...}
type DashboardTableVisualInput interface {
	pulumi.Input

	ToDashboardTableVisualOutput() DashboardTableVisualOutput
	ToDashboardTableVisualOutputWithContext(context.Context) DashboardTableVisualOutput
}

type DashboardTableVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions DashboardVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration DashboardTableConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting DashboardTableConditionalFormattingPtrInput `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle DashboardVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title DashboardVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (DashboardTableVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableVisual)(nil)).Elem()
}

func (i DashboardTableVisualArgs) ToDashboardTableVisualOutput() DashboardTableVisualOutput {
	return i.ToDashboardTableVisualOutputWithContext(context.Background())
}

func (i DashboardTableVisualArgs) ToDashboardTableVisualOutputWithContext(ctx context.Context) DashboardTableVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableVisualOutput)
}

func (i DashboardTableVisualArgs) ToDashboardTableVisualPtrOutput() DashboardTableVisualPtrOutput {
	return i.ToDashboardTableVisualPtrOutputWithContext(context.Background())
}

func (i DashboardTableVisualArgs) ToDashboardTableVisualPtrOutputWithContext(ctx context.Context) DashboardTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableVisualOutput).ToDashboardTableVisualPtrOutputWithContext(ctx)
}

// DashboardTableVisualPtrInput is an input type that accepts DashboardTableVisualArgs, DashboardTableVisualPtr and DashboardTableVisualPtrOutput values.
// You can construct a concrete instance of `DashboardTableVisualPtrInput` via:
//
//	        DashboardTableVisualArgs{...}
//
//	or:
//
//	        nil
type DashboardTableVisualPtrInput interface {
	pulumi.Input

	ToDashboardTableVisualPtrOutput() DashboardTableVisualPtrOutput
	ToDashboardTableVisualPtrOutputWithContext(context.Context) DashboardTableVisualPtrOutput
}

type dashboardTableVisualPtrType DashboardTableVisualArgs

func DashboardTableVisualPtr(v *DashboardTableVisualArgs) DashboardTableVisualPtrInput {
	return (*dashboardTableVisualPtrType)(v)
}

func (*dashboardTableVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableVisual)(nil)).Elem()
}

func (i *dashboardTableVisualPtrType) ToDashboardTableVisualPtrOutput() DashboardTableVisualPtrOutput {
	return i.ToDashboardTableVisualPtrOutputWithContext(context.Background())
}

func (i *dashboardTableVisualPtrType) ToDashboardTableVisualPtrOutputWithContext(ctx context.Context) DashboardTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTableVisualPtrOutput)
}

type DashboardTableVisualOutput struct{ *pulumi.OutputState }

func (DashboardTableVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTableVisual)(nil)).Elem()
}

func (o DashboardTableVisualOutput) ToDashboardTableVisualOutput() DashboardTableVisualOutput {
	return o
}

func (o DashboardTableVisualOutput) ToDashboardTableVisualOutputWithContext(ctx context.Context) DashboardTableVisualOutput {
	return o
}

func (o DashboardTableVisualOutput) ToDashboardTableVisualPtrOutput() DashboardTableVisualPtrOutput {
	return o.ToDashboardTableVisualPtrOutputWithContext(context.Background())
}

func (o DashboardTableVisualOutput) ToDashboardTableVisualPtrOutputWithContext(ctx context.Context) DashboardTableVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTableVisual) *DashboardTableVisual {
		return &v
	}).(DashboardTableVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardTableVisualOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v DashboardTableVisual) []DashboardVisualCustomAction { return v.Actions }).(DashboardVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o DashboardTableVisualOutput) ChartConfiguration() DashboardTableConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTableVisual) *DashboardTableConfiguration { return v.ChartConfiguration }).(DashboardTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o DashboardTableVisualOutput) ConditionalFormatting() DashboardTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v DashboardTableVisual) *DashboardTableConditionalFormatting { return v.ConditionalFormatting }).(DashboardTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardTableVisualOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableVisual) *DashboardVisualSubtitleLabelOptions { return v.Subtitle }).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardTableVisualOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTableVisual) *DashboardVisualTitleLabelOptions { return v.Title }).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardTableVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTableVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o DashboardTableVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTableVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type DashboardTableVisualPtrOutput struct{ *pulumi.OutputState }

func (DashboardTableVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTableVisual)(nil)).Elem()
}

func (o DashboardTableVisualPtrOutput) ToDashboardTableVisualPtrOutput() DashboardTableVisualPtrOutput {
	return o
}

func (o DashboardTableVisualPtrOutput) ToDashboardTableVisualPtrOutputWithContext(ctx context.Context) DashboardTableVisualPtrOutput {
	return o
}

func (o DashboardTableVisualPtrOutput) Elem() DashboardTableVisualOutput {
	return o.ApplyT(func(v *DashboardTableVisual) DashboardTableVisual {
		if v != nil {
			return *v
		}
		var ret DashboardTableVisual
		return ret
	}).(DashboardTableVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardTableVisualPtrOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *DashboardTableVisual) []DashboardVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(DashboardVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o DashboardTableVisualPtrOutput) ChartConfiguration() DashboardTableConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTableVisual) *DashboardTableConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(DashboardTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o DashboardTableVisualPtrOutput) ConditionalFormatting() DashboardTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v *DashboardTableVisual) *DashboardTableConditionalFormatting {
		if v == nil {
			return nil
		}
		return v.ConditionalFormatting
	}).(DashboardTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardTableVisualPtrOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableVisual) *DashboardVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardTableVisualPtrOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTableVisual) *DashboardVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardTableVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTableVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o DashboardTableVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTableVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type DashboardTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

type DashboardTextAreaControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *DashboardSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text area control.
	PlaceholderOptions *DashboardTextControlPlaceholderOptions `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *DashboardLabelOptions `pulumi:"titleOptions"`
}

// DashboardTextAreaControlDisplayOptionsInput is an input type that accepts DashboardTextAreaControlDisplayOptionsArgs and DashboardTextAreaControlDisplayOptionsOutput values.
// You can construct a concrete instance of `DashboardTextAreaControlDisplayOptionsInput` via:
//
//	DashboardTextAreaControlDisplayOptionsArgs{...}
type DashboardTextAreaControlDisplayOptionsInput interface {
	pulumi.Input

	ToDashboardTextAreaControlDisplayOptionsOutput() DashboardTextAreaControlDisplayOptionsOutput
	ToDashboardTextAreaControlDisplayOptionsOutputWithContext(context.Context) DashboardTextAreaControlDisplayOptionsOutput
}

type DashboardTextAreaControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions DashboardSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text area control.
	PlaceholderOptions DashboardTextControlPlaceholderOptionsPtrInput `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions DashboardLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (DashboardTextAreaControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextAreaControlDisplayOptions)(nil)).Elem()
}

func (i DashboardTextAreaControlDisplayOptionsArgs) ToDashboardTextAreaControlDisplayOptionsOutput() DashboardTextAreaControlDisplayOptionsOutput {
	return i.ToDashboardTextAreaControlDisplayOptionsOutputWithContext(context.Background())
}

func (i DashboardTextAreaControlDisplayOptionsArgs) ToDashboardTextAreaControlDisplayOptionsOutputWithContext(ctx context.Context) DashboardTextAreaControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextAreaControlDisplayOptionsOutput)
}

func (i DashboardTextAreaControlDisplayOptionsArgs) ToDashboardTextAreaControlDisplayOptionsPtrOutput() DashboardTextAreaControlDisplayOptionsPtrOutput {
	return i.ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTextAreaControlDisplayOptionsArgs) ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextAreaControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextAreaControlDisplayOptionsOutput).ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(ctx)
}

// DashboardTextAreaControlDisplayOptionsPtrInput is an input type that accepts DashboardTextAreaControlDisplayOptionsArgs, DashboardTextAreaControlDisplayOptionsPtr and DashboardTextAreaControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTextAreaControlDisplayOptionsPtrInput` via:
//
//	        DashboardTextAreaControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTextAreaControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTextAreaControlDisplayOptionsPtrOutput() DashboardTextAreaControlDisplayOptionsPtrOutput
	ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(context.Context) DashboardTextAreaControlDisplayOptionsPtrOutput
}

type dashboardTextAreaControlDisplayOptionsPtrType DashboardTextAreaControlDisplayOptionsArgs

func DashboardTextAreaControlDisplayOptionsPtr(v *DashboardTextAreaControlDisplayOptionsArgs) DashboardTextAreaControlDisplayOptionsPtrInput {
	return (*dashboardTextAreaControlDisplayOptionsPtrType)(v)
}

func (*dashboardTextAreaControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextAreaControlDisplayOptions)(nil)).Elem()
}

func (i *dashboardTextAreaControlDisplayOptionsPtrType) ToDashboardTextAreaControlDisplayOptionsPtrOutput() DashboardTextAreaControlDisplayOptionsPtrOutput {
	return i.ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTextAreaControlDisplayOptionsPtrType) ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextAreaControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextAreaControlDisplayOptionsPtrOutput)
}

type DashboardTextAreaControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTextAreaControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextAreaControlDisplayOptions)(nil)).Elem()
}

func (o DashboardTextAreaControlDisplayOptionsOutput) ToDashboardTextAreaControlDisplayOptionsOutput() DashboardTextAreaControlDisplayOptionsOutput {
	return o
}

func (o DashboardTextAreaControlDisplayOptionsOutput) ToDashboardTextAreaControlDisplayOptionsOutputWithContext(ctx context.Context) DashboardTextAreaControlDisplayOptionsOutput {
	return o
}

func (o DashboardTextAreaControlDisplayOptionsOutput) ToDashboardTextAreaControlDisplayOptionsPtrOutput() DashboardTextAreaControlDisplayOptionsPtrOutput {
	return o.ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTextAreaControlDisplayOptionsOutput) ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTextAreaControlDisplayOptions) *DashboardTextAreaControlDisplayOptions {
		return &v
	}).(DashboardTextAreaControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o DashboardTextAreaControlDisplayOptionsOutput) InfoIconLabelOptions() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTextAreaControlDisplayOptions) *DashboardSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text area control.
func (o DashboardTextAreaControlDisplayOptionsOutput) PlaceholderOptions() DashboardTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTextAreaControlDisplayOptions) *DashboardTextControlPlaceholderOptions {
		return v.PlaceholderOptions
	}).(DashboardTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o DashboardTextAreaControlDisplayOptionsOutput) TitleOptions() DashboardLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTextAreaControlDisplayOptions) *DashboardLabelOptions { return v.TitleOptions }).(DashboardLabelOptionsPtrOutput)
}

type DashboardTextAreaControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTextAreaControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextAreaControlDisplayOptions)(nil)).Elem()
}

func (o DashboardTextAreaControlDisplayOptionsPtrOutput) ToDashboardTextAreaControlDisplayOptionsPtrOutput() DashboardTextAreaControlDisplayOptionsPtrOutput {
	return o
}

func (o DashboardTextAreaControlDisplayOptionsPtrOutput) ToDashboardTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextAreaControlDisplayOptionsPtrOutput {
	return o
}

func (o DashboardTextAreaControlDisplayOptionsPtrOutput) Elem() DashboardTextAreaControlDisplayOptionsOutput {
	return o.ApplyT(func(v *DashboardTextAreaControlDisplayOptions) DashboardTextAreaControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTextAreaControlDisplayOptions
		return ret
	}).(DashboardTextAreaControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o DashboardTextAreaControlDisplayOptionsPtrOutput) InfoIconLabelOptions() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTextAreaControlDisplayOptions) *DashboardSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text area control.
func (o DashboardTextAreaControlDisplayOptionsPtrOutput) PlaceholderOptions() DashboardTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTextAreaControlDisplayOptions) *DashboardTextControlPlaceholderOptions {
		if v == nil {
			return nil
		}
		return v.PlaceholderOptions
	}).(DashboardTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o DashboardTextAreaControlDisplayOptionsPtrOutput) TitleOptions() DashboardLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTextAreaControlDisplayOptions) *DashboardLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(DashboardLabelOptionsPtrOutput)
}

type DashboardTextConditionalFormat struct {
	// The conditional formatting for the text background color.
	BackgroundColor *DashboardConditionalFormattingColor `pulumi:"backgroundColor"`
	// The conditional formatting for the icon.
	Icon *DashboardConditionalFormattingIcon `pulumi:"icon"`
	// The conditional formatting for the text color.
	TextColor *DashboardConditionalFormattingColor `pulumi:"textColor"`
}

// DashboardTextConditionalFormatInput is an input type that accepts DashboardTextConditionalFormatArgs and DashboardTextConditionalFormatOutput values.
// You can construct a concrete instance of `DashboardTextConditionalFormatInput` via:
//
//	DashboardTextConditionalFormatArgs{...}
type DashboardTextConditionalFormatInput interface {
	pulumi.Input

	ToDashboardTextConditionalFormatOutput() DashboardTextConditionalFormatOutput
	ToDashboardTextConditionalFormatOutputWithContext(context.Context) DashboardTextConditionalFormatOutput
}

type DashboardTextConditionalFormatArgs struct {
	// The conditional formatting for the text background color.
	BackgroundColor DashboardConditionalFormattingColorPtrInput `pulumi:"backgroundColor"`
	// The conditional formatting for the icon.
	Icon DashboardConditionalFormattingIconPtrInput `pulumi:"icon"`
	// The conditional formatting for the text color.
	TextColor DashboardConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (DashboardTextConditionalFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextConditionalFormat)(nil)).Elem()
}

func (i DashboardTextConditionalFormatArgs) ToDashboardTextConditionalFormatOutput() DashboardTextConditionalFormatOutput {
	return i.ToDashboardTextConditionalFormatOutputWithContext(context.Background())
}

func (i DashboardTextConditionalFormatArgs) ToDashboardTextConditionalFormatOutputWithContext(ctx context.Context) DashboardTextConditionalFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextConditionalFormatOutput)
}

func (i DashboardTextConditionalFormatArgs) ToDashboardTextConditionalFormatPtrOutput() DashboardTextConditionalFormatPtrOutput {
	return i.ToDashboardTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (i DashboardTextConditionalFormatArgs) ToDashboardTextConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardTextConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextConditionalFormatOutput).ToDashboardTextConditionalFormatPtrOutputWithContext(ctx)
}

// DashboardTextConditionalFormatPtrInput is an input type that accepts DashboardTextConditionalFormatArgs, DashboardTextConditionalFormatPtr and DashboardTextConditionalFormatPtrOutput values.
// You can construct a concrete instance of `DashboardTextConditionalFormatPtrInput` via:
//
//	        DashboardTextConditionalFormatArgs{...}
//
//	or:
//
//	        nil
type DashboardTextConditionalFormatPtrInput interface {
	pulumi.Input

	ToDashboardTextConditionalFormatPtrOutput() DashboardTextConditionalFormatPtrOutput
	ToDashboardTextConditionalFormatPtrOutputWithContext(context.Context) DashboardTextConditionalFormatPtrOutput
}

type dashboardTextConditionalFormatPtrType DashboardTextConditionalFormatArgs

func DashboardTextConditionalFormatPtr(v *DashboardTextConditionalFormatArgs) DashboardTextConditionalFormatPtrInput {
	return (*dashboardTextConditionalFormatPtrType)(v)
}

func (*dashboardTextConditionalFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextConditionalFormat)(nil)).Elem()
}

func (i *dashboardTextConditionalFormatPtrType) ToDashboardTextConditionalFormatPtrOutput() DashboardTextConditionalFormatPtrOutput {
	return i.ToDashboardTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (i *dashboardTextConditionalFormatPtrType) ToDashboardTextConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardTextConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextConditionalFormatPtrOutput)
}

type DashboardTextConditionalFormatOutput struct{ *pulumi.OutputState }

func (DashboardTextConditionalFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextConditionalFormat)(nil)).Elem()
}

func (o DashboardTextConditionalFormatOutput) ToDashboardTextConditionalFormatOutput() DashboardTextConditionalFormatOutput {
	return o
}

func (o DashboardTextConditionalFormatOutput) ToDashboardTextConditionalFormatOutputWithContext(ctx context.Context) DashboardTextConditionalFormatOutput {
	return o
}

func (o DashboardTextConditionalFormatOutput) ToDashboardTextConditionalFormatPtrOutput() DashboardTextConditionalFormatPtrOutput {
	return o.ToDashboardTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (o DashboardTextConditionalFormatOutput) ToDashboardTextConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardTextConditionalFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTextConditionalFormat) *DashboardTextConditionalFormat {
		return &v
	}).(DashboardTextConditionalFormatPtrOutput)
}

// The conditional formatting for the text background color.
func (o DashboardTextConditionalFormatOutput) BackgroundColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v DashboardTextConditionalFormat) *DashboardConditionalFormattingColor { return v.BackgroundColor }).(DashboardConditionalFormattingColorPtrOutput)
}

// The conditional formatting for the icon.
func (o DashboardTextConditionalFormatOutput) Icon() DashboardConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v DashboardTextConditionalFormat) *DashboardConditionalFormattingIcon { return v.Icon }).(DashboardConditionalFormattingIconPtrOutput)
}

// The conditional formatting for the text color.
func (o DashboardTextConditionalFormatOutput) TextColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v DashboardTextConditionalFormat) *DashboardConditionalFormattingColor { return v.TextColor }).(DashboardConditionalFormattingColorPtrOutput)
}

type DashboardTextConditionalFormatPtrOutput struct{ *pulumi.OutputState }

func (DashboardTextConditionalFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextConditionalFormat)(nil)).Elem()
}

func (o DashboardTextConditionalFormatPtrOutput) ToDashboardTextConditionalFormatPtrOutput() DashboardTextConditionalFormatPtrOutput {
	return o
}

func (o DashboardTextConditionalFormatPtrOutput) ToDashboardTextConditionalFormatPtrOutputWithContext(ctx context.Context) DashboardTextConditionalFormatPtrOutput {
	return o
}

func (o DashboardTextConditionalFormatPtrOutput) Elem() DashboardTextConditionalFormatOutput {
	return o.ApplyT(func(v *DashboardTextConditionalFormat) DashboardTextConditionalFormat {
		if v != nil {
			return *v
		}
		var ret DashboardTextConditionalFormat
		return ret
	}).(DashboardTextConditionalFormatOutput)
}

// The conditional formatting for the text background color.
func (o DashboardTextConditionalFormatPtrOutput) BackgroundColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *DashboardTextConditionalFormat) *DashboardConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(DashboardConditionalFormattingColorPtrOutput)
}

// The conditional formatting for the icon.
func (o DashboardTextConditionalFormatPtrOutput) Icon() DashboardConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v *DashboardTextConditionalFormat) *DashboardConditionalFormattingIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(DashboardConditionalFormattingIconPtrOutput)
}

// The conditional formatting for the text color.
func (o DashboardTextConditionalFormatPtrOutput) TextColor() DashboardConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *DashboardTextConditionalFormat) *DashboardConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(DashboardConditionalFormattingColorPtrOutput)
}

type DashboardTextControlPlaceholderOptions struct {
	// The visibility configuration of the placeholder options in a text control.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardTextControlPlaceholderOptionsInput is an input type that accepts DashboardTextControlPlaceholderOptionsArgs and DashboardTextControlPlaceholderOptionsOutput values.
// You can construct a concrete instance of `DashboardTextControlPlaceholderOptionsInput` via:
//
//	DashboardTextControlPlaceholderOptionsArgs{...}
type DashboardTextControlPlaceholderOptionsInput interface {
	pulumi.Input

	ToDashboardTextControlPlaceholderOptionsOutput() DashboardTextControlPlaceholderOptionsOutput
	ToDashboardTextControlPlaceholderOptionsOutputWithContext(context.Context) DashboardTextControlPlaceholderOptionsOutput
}

type DashboardTextControlPlaceholderOptionsArgs struct {
	// The visibility configuration of the placeholder options in a text control.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardTextControlPlaceholderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextControlPlaceholderOptions)(nil)).Elem()
}

func (i DashboardTextControlPlaceholderOptionsArgs) ToDashboardTextControlPlaceholderOptionsOutput() DashboardTextControlPlaceholderOptionsOutput {
	return i.ToDashboardTextControlPlaceholderOptionsOutputWithContext(context.Background())
}

func (i DashboardTextControlPlaceholderOptionsArgs) ToDashboardTextControlPlaceholderOptionsOutputWithContext(ctx context.Context) DashboardTextControlPlaceholderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextControlPlaceholderOptionsOutput)
}

func (i DashboardTextControlPlaceholderOptionsArgs) ToDashboardTextControlPlaceholderOptionsPtrOutput() DashboardTextControlPlaceholderOptionsPtrOutput {
	return i.ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTextControlPlaceholderOptionsArgs) ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) DashboardTextControlPlaceholderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextControlPlaceholderOptionsOutput).ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(ctx)
}

// DashboardTextControlPlaceholderOptionsPtrInput is an input type that accepts DashboardTextControlPlaceholderOptionsArgs, DashboardTextControlPlaceholderOptionsPtr and DashboardTextControlPlaceholderOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTextControlPlaceholderOptionsPtrInput` via:
//
//	        DashboardTextControlPlaceholderOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTextControlPlaceholderOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTextControlPlaceholderOptionsPtrOutput() DashboardTextControlPlaceholderOptionsPtrOutput
	ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(context.Context) DashboardTextControlPlaceholderOptionsPtrOutput
}

type dashboardTextControlPlaceholderOptionsPtrType DashboardTextControlPlaceholderOptionsArgs

func DashboardTextControlPlaceholderOptionsPtr(v *DashboardTextControlPlaceholderOptionsArgs) DashboardTextControlPlaceholderOptionsPtrInput {
	return (*dashboardTextControlPlaceholderOptionsPtrType)(v)
}

func (*dashboardTextControlPlaceholderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextControlPlaceholderOptions)(nil)).Elem()
}

func (i *dashboardTextControlPlaceholderOptionsPtrType) ToDashboardTextControlPlaceholderOptionsPtrOutput() DashboardTextControlPlaceholderOptionsPtrOutput {
	return i.ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTextControlPlaceholderOptionsPtrType) ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) DashboardTextControlPlaceholderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextControlPlaceholderOptionsPtrOutput)
}

type DashboardTextControlPlaceholderOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTextControlPlaceholderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextControlPlaceholderOptions)(nil)).Elem()
}

func (o DashboardTextControlPlaceholderOptionsOutput) ToDashboardTextControlPlaceholderOptionsOutput() DashboardTextControlPlaceholderOptionsOutput {
	return o
}

func (o DashboardTextControlPlaceholderOptionsOutput) ToDashboardTextControlPlaceholderOptionsOutputWithContext(ctx context.Context) DashboardTextControlPlaceholderOptionsOutput {
	return o
}

func (o DashboardTextControlPlaceholderOptionsOutput) ToDashboardTextControlPlaceholderOptionsPtrOutput() DashboardTextControlPlaceholderOptionsPtrOutput {
	return o.ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTextControlPlaceholderOptionsOutput) ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) DashboardTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTextControlPlaceholderOptions) *DashboardTextControlPlaceholderOptions {
		return &v
	}).(DashboardTextControlPlaceholderOptionsPtrOutput)
}

// The visibility configuration of the placeholder options in a text control.
func (o DashboardTextControlPlaceholderOptionsOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTextControlPlaceholderOptions) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardTextControlPlaceholderOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTextControlPlaceholderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextControlPlaceholderOptions)(nil)).Elem()
}

func (o DashboardTextControlPlaceholderOptionsPtrOutput) ToDashboardTextControlPlaceholderOptionsPtrOutput() DashboardTextControlPlaceholderOptionsPtrOutput {
	return o
}

func (o DashboardTextControlPlaceholderOptionsPtrOutput) ToDashboardTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) DashboardTextControlPlaceholderOptionsPtrOutput {
	return o
}

func (o DashboardTextControlPlaceholderOptionsPtrOutput) Elem() DashboardTextControlPlaceholderOptionsOutput {
	return o.ApplyT(func(v *DashboardTextControlPlaceholderOptions) DashboardTextControlPlaceholderOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTextControlPlaceholderOptions
		return ret
	}).(DashboardTextControlPlaceholderOptionsOutput)
}

// The visibility configuration of the placeholder options in a text control.
func (o DashboardTextControlPlaceholderOptionsPtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardTextControlPlaceholderOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardTextFieldControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *DashboardSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text field control.
	PlaceholderOptions *DashboardTextControlPlaceholderOptions `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *DashboardLabelOptions `pulumi:"titleOptions"`
}

// DashboardTextFieldControlDisplayOptionsInput is an input type that accepts DashboardTextFieldControlDisplayOptionsArgs and DashboardTextFieldControlDisplayOptionsOutput values.
// You can construct a concrete instance of `DashboardTextFieldControlDisplayOptionsInput` via:
//
//	DashboardTextFieldControlDisplayOptionsArgs{...}
type DashboardTextFieldControlDisplayOptionsInput interface {
	pulumi.Input

	ToDashboardTextFieldControlDisplayOptionsOutput() DashboardTextFieldControlDisplayOptionsOutput
	ToDashboardTextFieldControlDisplayOptionsOutputWithContext(context.Context) DashboardTextFieldControlDisplayOptionsOutput
}

type DashboardTextFieldControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions DashboardSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text field control.
	PlaceholderOptions DashboardTextControlPlaceholderOptionsPtrInput `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions DashboardLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (DashboardTextFieldControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextFieldControlDisplayOptions)(nil)).Elem()
}

func (i DashboardTextFieldControlDisplayOptionsArgs) ToDashboardTextFieldControlDisplayOptionsOutput() DashboardTextFieldControlDisplayOptionsOutput {
	return i.ToDashboardTextFieldControlDisplayOptionsOutputWithContext(context.Background())
}

func (i DashboardTextFieldControlDisplayOptionsArgs) ToDashboardTextFieldControlDisplayOptionsOutputWithContext(ctx context.Context) DashboardTextFieldControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextFieldControlDisplayOptionsOutput)
}

func (i DashboardTextFieldControlDisplayOptionsArgs) ToDashboardTextFieldControlDisplayOptionsPtrOutput() DashboardTextFieldControlDisplayOptionsPtrOutput {
	return i.ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTextFieldControlDisplayOptionsArgs) ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextFieldControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextFieldControlDisplayOptionsOutput).ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(ctx)
}

// DashboardTextFieldControlDisplayOptionsPtrInput is an input type that accepts DashboardTextFieldControlDisplayOptionsArgs, DashboardTextFieldControlDisplayOptionsPtr and DashboardTextFieldControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTextFieldControlDisplayOptionsPtrInput` via:
//
//	        DashboardTextFieldControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTextFieldControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTextFieldControlDisplayOptionsPtrOutput() DashboardTextFieldControlDisplayOptionsPtrOutput
	ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(context.Context) DashboardTextFieldControlDisplayOptionsPtrOutput
}

type dashboardTextFieldControlDisplayOptionsPtrType DashboardTextFieldControlDisplayOptionsArgs

func DashboardTextFieldControlDisplayOptionsPtr(v *DashboardTextFieldControlDisplayOptionsArgs) DashboardTextFieldControlDisplayOptionsPtrInput {
	return (*dashboardTextFieldControlDisplayOptionsPtrType)(v)
}

func (*dashboardTextFieldControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextFieldControlDisplayOptions)(nil)).Elem()
}

func (i *dashboardTextFieldControlDisplayOptionsPtrType) ToDashboardTextFieldControlDisplayOptionsPtrOutput() DashboardTextFieldControlDisplayOptionsPtrOutput {
	return i.ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTextFieldControlDisplayOptionsPtrType) ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextFieldControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTextFieldControlDisplayOptionsPtrOutput)
}

type DashboardTextFieldControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTextFieldControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTextFieldControlDisplayOptions)(nil)).Elem()
}

func (o DashboardTextFieldControlDisplayOptionsOutput) ToDashboardTextFieldControlDisplayOptionsOutput() DashboardTextFieldControlDisplayOptionsOutput {
	return o
}

func (o DashboardTextFieldControlDisplayOptionsOutput) ToDashboardTextFieldControlDisplayOptionsOutputWithContext(ctx context.Context) DashboardTextFieldControlDisplayOptionsOutput {
	return o
}

func (o DashboardTextFieldControlDisplayOptionsOutput) ToDashboardTextFieldControlDisplayOptionsPtrOutput() DashboardTextFieldControlDisplayOptionsPtrOutput {
	return o.ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTextFieldControlDisplayOptionsOutput) ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTextFieldControlDisplayOptions) *DashboardTextFieldControlDisplayOptions {
		return &v
	}).(DashboardTextFieldControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o DashboardTextFieldControlDisplayOptionsOutput) InfoIconLabelOptions() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTextFieldControlDisplayOptions) *DashboardSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text field control.
func (o DashboardTextFieldControlDisplayOptionsOutput) PlaceholderOptions() DashboardTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTextFieldControlDisplayOptions) *DashboardTextControlPlaceholderOptions {
		return v.PlaceholderOptions
	}).(DashboardTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o DashboardTextFieldControlDisplayOptionsOutput) TitleOptions() DashboardLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTextFieldControlDisplayOptions) *DashboardLabelOptions { return v.TitleOptions }).(DashboardLabelOptionsPtrOutput)
}

type DashboardTextFieldControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTextFieldControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTextFieldControlDisplayOptions)(nil)).Elem()
}

func (o DashboardTextFieldControlDisplayOptionsPtrOutput) ToDashboardTextFieldControlDisplayOptionsPtrOutput() DashboardTextFieldControlDisplayOptionsPtrOutput {
	return o
}

func (o DashboardTextFieldControlDisplayOptionsPtrOutput) ToDashboardTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) DashboardTextFieldControlDisplayOptionsPtrOutput {
	return o
}

func (o DashboardTextFieldControlDisplayOptionsPtrOutput) Elem() DashboardTextFieldControlDisplayOptionsOutput {
	return o.ApplyT(func(v *DashboardTextFieldControlDisplayOptions) DashboardTextFieldControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTextFieldControlDisplayOptions
		return ret
	}).(DashboardTextFieldControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o DashboardTextFieldControlDisplayOptionsPtrOutput) InfoIconLabelOptions() DashboardSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTextFieldControlDisplayOptions) *DashboardSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(DashboardSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text field control.
func (o DashboardTextFieldControlDisplayOptionsPtrOutput) PlaceholderOptions() DashboardTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTextFieldControlDisplayOptions) *DashboardTextControlPlaceholderOptions {
		if v == nil {
			return nil
		}
		return v.PlaceholderOptions
	}).(DashboardTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o DashboardTextFieldControlDisplayOptionsPtrOutput) TitleOptions() DashboardLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTextFieldControlDisplayOptions) *DashboardLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(DashboardLabelOptionsPtrOutput)
}

type DashboardThousandSeparatorOptions struct {
	// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
	GroupingStyle *DashboardDigitGroupingStyle `pulumi:"groupingStyle"`
	// Determines the thousands separator symbol.
	Symbol *DashboardNumericSeparatorSymbol `pulumi:"symbol"`
	// Determines the visibility of the thousands separator.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardThousandSeparatorOptionsInput is an input type that accepts DashboardThousandSeparatorOptionsArgs and DashboardThousandSeparatorOptionsOutput values.
// You can construct a concrete instance of `DashboardThousandSeparatorOptionsInput` via:
//
//	DashboardThousandSeparatorOptionsArgs{...}
type DashboardThousandSeparatorOptionsInput interface {
	pulumi.Input

	ToDashboardThousandSeparatorOptionsOutput() DashboardThousandSeparatorOptionsOutput
	ToDashboardThousandSeparatorOptionsOutputWithContext(context.Context) DashboardThousandSeparatorOptionsOutput
}

type DashboardThousandSeparatorOptionsArgs struct {
	// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
	GroupingStyle DashboardDigitGroupingStylePtrInput `pulumi:"groupingStyle"`
	// Determines the thousands separator symbol.
	Symbol DashboardNumericSeparatorSymbolPtrInput `pulumi:"symbol"`
	// Determines the visibility of the thousands separator.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardThousandSeparatorOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardThousandSeparatorOptions)(nil)).Elem()
}

func (i DashboardThousandSeparatorOptionsArgs) ToDashboardThousandSeparatorOptionsOutput() DashboardThousandSeparatorOptionsOutput {
	return i.ToDashboardThousandSeparatorOptionsOutputWithContext(context.Background())
}

func (i DashboardThousandSeparatorOptionsArgs) ToDashboardThousandSeparatorOptionsOutputWithContext(ctx context.Context) DashboardThousandSeparatorOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardThousandSeparatorOptionsOutput)
}

func (i DashboardThousandSeparatorOptionsArgs) ToDashboardThousandSeparatorOptionsPtrOutput() DashboardThousandSeparatorOptionsPtrOutput {
	return i.ToDashboardThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardThousandSeparatorOptionsArgs) ToDashboardThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) DashboardThousandSeparatorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardThousandSeparatorOptionsOutput).ToDashboardThousandSeparatorOptionsPtrOutputWithContext(ctx)
}

// DashboardThousandSeparatorOptionsPtrInput is an input type that accepts DashboardThousandSeparatorOptionsArgs, DashboardThousandSeparatorOptionsPtr and DashboardThousandSeparatorOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardThousandSeparatorOptionsPtrInput` via:
//
//	        DashboardThousandSeparatorOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardThousandSeparatorOptionsPtrInput interface {
	pulumi.Input

	ToDashboardThousandSeparatorOptionsPtrOutput() DashboardThousandSeparatorOptionsPtrOutput
	ToDashboardThousandSeparatorOptionsPtrOutputWithContext(context.Context) DashboardThousandSeparatorOptionsPtrOutput
}

type dashboardThousandSeparatorOptionsPtrType DashboardThousandSeparatorOptionsArgs

func DashboardThousandSeparatorOptionsPtr(v *DashboardThousandSeparatorOptionsArgs) DashboardThousandSeparatorOptionsPtrInput {
	return (*dashboardThousandSeparatorOptionsPtrType)(v)
}

func (*dashboardThousandSeparatorOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardThousandSeparatorOptions)(nil)).Elem()
}

func (i *dashboardThousandSeparatorOptionsPtrType) ToDashboardThousandSeparatorOptionsPtrOutput() DashboardThousandSeparatorOptionsPtrOutput {
	return i.ToDashboardThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardThousandSeparatorOptionsPtrType) ToDashboardThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) DashboardThousandSeparatorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardThousandSeparatorOptionsPtrOutput)
}

type DashboardThousandSeparatorOptionsOutput struct{ *pulumi.OutputState }

func (DashboardThousandSeparatorOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardThousandSeparatorOptions)(nil)).Elem()
}

func (o DashboardThousandSeparatorOptionsOutput) ToDashboardThousandSeparatorOptionsOutput() DashboardThousandSeparatorOptionsOutput {
	return o
}

func (o DashboardThousandSeparatorOptionsOutput) ToDashboardThousandSeparatorOptionsOutputWithContext(ctx context.Context) DashboardThousandSeparatorOptionsOutput {
	return o
}

func (o DashboardThousandSeparatorOptionsOutput) ToDashboardThousandSeparatorOptionsPtrOutput() DashboardThousandSeparatorOptionsPtrOutput {
	return o.ToDashboardThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardThousandSeparatorOptionsOutput) ToDashboardThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) DashboardThousandSeparatorOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardThousandSeparatorOptions) *DashboardThousandSeparatorOptions {
		return &v
	}).(DashboardThousandSeparatorOptionsPtrOutput)
}

// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
func (o DashboardThousandSeparatorOptionsOutput) GroupingStyle() DashboardDigitGroupingStylePtrOutput {
	return o.ApplyT(func(v DashboardThousandSeparatorOptions) *DashboardDigitGroupingStyle { return v.GroupingStyle }).(DashboardDigitGroupingStylePtrOutput)
}

// Determines the thousands separator symbol.
func (o DashboardThousandSeparatorOptionsOutput) Symbol() DashboardNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v DashboardThousandSeparatorOptions) *DashboardNumericSeparatorSymbol { return v.Symbol }).(DashboardNumericSeparatorSymbolPtrOutput)
}

// Determines the visibility of the thousands separator.
func (o DashboardThousandSeparatorOptionsOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardThousandSeparatorOptions) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardThousandSeparatorOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardThousandSeparatorOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardThousandSeparatorOptions)(nil)).Elem()
}

func (o DashboardThousandSeparatorOptionsPtrOutput) ToDashboardThousandSeparatorOptionsPtrOutput() DashboardThousandSeparatorOptionsPtrOutput {
	return o
}

func (o DashboardThousandSeparatorOptionsPtrOutput) ToDashboardThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) DashboardThousandSeparatorOptionsPtrOutput {
	return o
}

func (o DashboardThousandSeparatorOptionsPtrOutput) Elem() DashboardThousandSeparatorOptionsOutput {
	return o.ApplyT(func(v *DashboardThousandSeparatorOptions) DashboardThousandSeparatorOptions {
		if v != nil {
			return *v
		}
		var ret DashboardThousandSeparatorOptions
		return ret
	}).(DashboardThousandSeparatorOptionsOutput)
}

// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
func (o DashboardThousandSeparatorOptionsPtrOutput) GroupingStyle() DashboardDigitGroupingStylePtrOutput {
	return o.ApplyT(func(v *DashboardThousandSeparatorOptions) *DashboardDigitGroupingStyle {
		if v == nil {
			return nil
		}
		return v.GroupingStyle
	}).(DashboardDigitGroupingStylePtrOutput)
}

// Determines the thousands separator symbol.
func (o DashboardThousandSeparatorOptionsPtrOutput) Symbol() DashboardNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v *DashboardThousandSeparatorOptions) *DashboardNumericSeparatorSymbol {
		if v == nil {
			return nil
		}
		return v.Symbol
	}).(DashboardNumericSeparatorSymbolPtrOutput)
}

// Determines the visibility of the thousands separator.
func (o DashboardThousandSeparatorOptionsPtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardThousandSeparatorOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardTimeBasedForecastProperties struct {
	// The lower boundary setup of a forecast computation.
	LowerBoundary *float64 `pulumi:"lowerBoundary"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward *float64 `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward *float64 `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval *float64 `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `NULL` : The input is set to `NULL` .
	// - `NON_NULL` : The input is set to a custom value.
	Seasonality *float64 `pulumi:"seasonality"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary *float64 `pulumi:"upperBoundary"`
}

// DashboardTimeBasedForecastPropertiesInput is an input type that accepts DashboardTimeBasedForecastPropertiesArgs and DashboardTimeBasedForecastPropertiesOutput values.
// You can construct a concrete instance of `DashboardTimeBasedForecastPropertiesInput` via:
//
//	DashboardTimeBasedForecastPropertiesArgs{...}
type DashboardTimeBasedForecastPropertiesInput interface {
	pulumi.Input

	ToDashboardTimeBasedForecastPropertiesOutput() DashboardTimeBasedForecastPropertiesOutput
	ToDashboardTimeBasedForecastPropertiesOutputWithContext(context.Context) DashboardTimeBasedForecastPropertiesOutput
}

type DashboardTimeBasedForecastPropertiesArgs struct {
	// The lower boundary setup of a forecast computation.
	LowerBoundary pulumi.Float64PtrInput `pulumi:"lowerBoundary"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward pulumi.Float64PtrInput `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward pulumi.Float64PtrInput `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval pulumi.Float64PtrInput `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `NULL` : The input is set to `NULL` .
	// - `NON_NULL` : The input is set to a custom value.
	Seasonality pulumi.Float64PtrInput `pulumi:"seasonality"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary pulumi.Float64PtrInput `pulumi:"upperBoundary"`
}

func (DashboardTimeBasedForecastPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeBasedForecastProperties)(nil)).Elem()
}

func (i DashboardTimeBasedForecastPropertiesArgs) ToDashboardTimeBasedForecastPropertiesOutput() DashboardTimeBasedForecastPropertiesOutput {
	return i.ToDashboardTimeBasedForecastPropertiesOutputWithContext(context.Background())
}

func (i DashboardTimeBasedForecastPropertiesArgs) ToDashboardTimeBasedForecastPropertiesOutputWithContext(ctx context.Context) DashboardTimeBasedForecastPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeBasedForecastPropertiesOutput)
}

func (i DashboardTimeBasedForecastPropertiesArgs) ToDashboardTimeBasedForecastPropertiesPtrOutput() DashboardTimeBasedForecastPropertiesPtrOutput {
	return i.ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (i DashboardTimeBasedForecastPropertiesArgs) ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) DashboardTimeBasedForecastPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeBasedForecastPropertiesOutput).ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(ctx)
}

// DashboardTimeBasedForecastPropertiesPtrInput is an input type that accepts DashboardTimeBasedForecastPropertiesArgs, DashboardTimeBasedForecastPropertiesPtr and DashboardTimeBasedForecastPropertiesPtrOutput values.
// You can construct a concrete instance of `DashboardTimeBasedForecastPropertiesPtrInput` via:
//
//	        DashboardTimeBasedForecastPropertiesArgs{...}
//
//	or:
//
//	        nil
type DashboardTimeBasedForecastPropertiesPtrInput interface {
	pulumi.Input

	ToDashboardTimeBasedForecastPropertiesPtrOutput() DashboardTimeBasedForecastPropertiesPtrOutput
	ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(context.Context) DashboardTimeBasedForecastPropertiesPtrOutput
}

type dashboardTimeBasedForecastPropertiesPtrType DashboardTimeBasedForecastPropertiesArgs

func DashboardTimeBasedForecastPropertiesPtr(v *DashboardTimeBasedForecastPropertiesArgs) DashboardTimeBasedForecastPropertiesPtrInput {
	return (*dashboardTimeBasedForecastPropertiesPtrType)(v)
}

func (*dashboardTimeBasedForecastPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeBasedForecastProperties)(nil)).Elem()
}

func (i *dashboardTimeBasedForecastPropertiesPtrType) ToDashboardTimeBasedForecastPropertiesPtrOutput() DashboardTimeBasedForecastPropertiesPtrOutput {
	return i.ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (i *dashboardTimeBasedForecastPropertiesPtrType) ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) DashboardTimeBasedForecastPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeBasedForecastPropertiesPtrOutput)
}

type DashboardTimeBasedForecastPropertiesOutput struct{ *pulumi.OutputState }

func (DashboardTimeBasedForecastPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeBasedForecastProperties)(nil)).Elem()
}

func (o DashboardTimeBasedForecastPropertiesOutput) ToDashboardTimeBasedForecastPropertiesOutput() DashboardTimeBasedForecastPropertiesOutput {
	return o
}

func (o DashboardTimeBasedForecastPropertiesOutput) ToDashboardTimeBasedForecastPropertiesOutputWithContext(ctx context.Context) DashboardTimeBasedForecastPropertiesOutput {
	return o
}

func (o DashboardTimeBasedForecastPropertiesOutput) ToDashboardTimeBasedForecastPropertiesPtrOutput() DashboardTimeBasedForecastPropertiesPtrOutput {
	return o.ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (o DashboardTimeBasedForecastPropertiesOutput) ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) DashboardTimeBasedForecastPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTimeBasedForecastProperties) *DashboardTimeBasedForecastProperties {
		return &v
	}).(DashboardTimeBasedForecastPropertiesPtrOutput)
}

// The lower boundary setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTimeBasedForecastProperties) *float64 { return v.LowerBoundary }).(pulumi.Float64PtrOutput)
}

// The periods backward setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTimeBasedForecastProperties) *float64 { return v.PeriodsBackward }).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTimeBasedForecastProperties) *float64 { return v.PeriodsForward }).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTimeBasedForecastProperties) *float64 { return v.PredictionInterval }).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `NULL` : The input is set to `NULL` .
// - `NON_NULL` : The input is set to a custom value.
func (o DashboardTimeBasedForecastPropertiesOutput) Seasonality() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTimeBasedForecastProperties) *float64 { return v.Seasonality }).(pulumi.Float64PtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTimeBasedForecastProperties) *float64 { return v.UpperBoundary }).(pulumi.Float64PtrOutput)
}

type DashboardTimeBasedForecastPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DashboardTimeBasedForecastPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeBasedForecastProperties)(nil)).Elem()
}

func (o DashboardTimeBasedForecastPropertiesPtrOutput) ToDashboardTimeBasedForecastPropertiesPtrOutput() DashboardTimeBasedForecastPropertiesPtrOutput {
	return o
}

func (o DashboardTimeBasedForecastPropertiesPtrOutput) ToDashboardTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) DashboardTimeBasedForecastPropertiesPtrOutput {
	return o
}

func (o DashboardTimeBasedForecastPropertiesPtrOutput) Elem() DashboardTimeBasedForecastPropertiesOutput {
	return o.ApplyT(func(v *DashboardTimeBasedForecastProperties) DashboardTimeBasedForecastProperties {
		if v != nil {
			return *v
		}
		var ret DashboardTimeBasedForecastProperties
		return ret
	}).(DashboardTimeBasedForecastPropertiesOutput)
}

// The lower boundary setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesPtrOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.LowerBoundary
	}).(pulumi.Float64PtrOutput)
}

// The periods backward setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesPtrOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsBackward
	}).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesPtrOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsForward
	}).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesPtrOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PredictionInterval
	}).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `NULL` : The input is set to `NULL` .
// - `NON_NULL` : The input is set to a custom value.
func (o DashboardTimeBasedForecastPropertiesPtrOutput) Seasonality() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.Float64PtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o DashboardTimeBasedForecastPropertiesPtrOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.UpperBoundary
	}).(pulumi.Float64PtrOutput)
}

type DashboardTimeEqualityFilter struct {
	// The column that the filter is applied to.
	Column DashboardColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *DashboardDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `Value` and `RollingDate` .
	ParameterName *string `pulumi:"parameterName"`
	// The rolling date input for the `TimeEquality` filter.
	//
	// This field is mutually exclusive to `Value` and `ParameterName` .
	RollingDate *DashboardRollingDateConfiguration `pulumi:"rollingDate"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *DashboardTimeGranularity `pulumi:"timeGranularity"`
	// The value of a `TimeEquality` filter.
	//
	// This field is mutually exclusive to `RollingDate` and `ParameterName` .
	Value *string `pulumi:"value"`
}

// DashboardTimeEqualityFilterInput is an input type that accepts DashboardTimeEqualityFilterArgs and DashboardTimeEqualityFilterOutput values.
// You can construct a concrete instance of `DashboardTimeEqualityFilterInput` via:
//
//	DashboardTimeEqualityFilterArgs{...}
type DashboardTimeEqualityFilterInput interface {
	pulumi.Input

	ToDashboardTimeEqualityFilterOutput() DashboardTimeEqualityFilterOutput
	ToDashboardTimeEqualityFilterOutputWithContext(context.Context) DashboardTimeEqualityFilterOutput
}

type DashboardTimeEqualityFilterArgs struct {
	// The column that the filter is applied to.
	Column DashboardColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration DashboardDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `Value` and `RollingDate` .
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// The rolling date input for the `TimeEquality` filter.
	//
	// This field is mutually exclusive to `Value` and `ParameterName` .
	RollingDate DashboardRollingDateConfigurationPtrInput `pulumi:"rollingDate"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity DashboardTimeGranularityPtrInput `pulumi:"timeGranularity"`
	// The value of a `TimeEquality` filter.
	//
	// This field is mutually exclusive to `RollingDate` and `ParameterName` .
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DashboardTimeEqualityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeEqualityFilter)(nil)).Elem()
}

func (i DashboardTimeEqualityFilterArgs) ToDashboardTimeEqualityFilterOutput() DashboardTimeEqualityFilterOutput {
	return i.ToDashboardTimeEqualityFilterOutputWithContext(context.Background())
}

func (i DashboardTimeEqualityFilterArgs) ToDashboardTimeEqualityFilterOutputWithContext(ctx context.Context) DashboardTimeEqualityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeEqualityFilterOutput)
}

func (i DashboardTimeEqualityFilterArgs) ToDashboardTimeEqualityFilterPtrOutput() DashboardTimeEqualityFilterPtrOutput {
	return i.ToDashboardTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (i DashboardTimeEqualityFilterArgs) ToDashboardTimeEqualityFilterPtrOutputWithContext(ctx context.Context) DashboardTimeEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeEqualityFilterOutput).ToDashboardTimeEqualityFilterPtrOutputWithContext(ctx)
}

// DashboardTimeEqualityFilterPtrInput is an input type that accepts DashboardTimeEqualityFilterArgs, DashboardTimeEqualityFilterPtr and DashboardTimeEqualityFilterPtrOutput values.
// You can construct a concrete instance of `DashboardTimeEqualityFilterPtrInput` via:
//
//	        DashboardTimeEqualityFilterArgs{...}
//
//	or:
//
//	        nil
type DashboardTimeEqualityFilterPtrInput interface {
	pulumi.Input

	ToDashboardTimeEqualityFilterPtrOutput() DashboardTimeEqualityFilterPtrOutput
	ToDashboardTimeEqualityFilterPtrOutputWithContext(context.Context) DashboardTimeEqualityFilterPtrOutput
}

type dashboardTimeEqualityFilterPtrType DashboardTimeEqualityFilterArgs

func DashboardTimeEqualityFilterPtr(v *DashboardTimeEqualityFilterArgs) DashboardTimeEqualityFilterPtrInput {
	return (*dashboardTimeEqualityFilterPtrType)(v)
}

func (*dashboardTimeEqualityFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeEqualityFilter)(nil)).Elem()
}

func (i *dashboardTimeEqualityFilterPtrType) ToDashboardTimeEqualityFilterPtrOutput() DashboardTimeEqualityFilterPtrOutput {
	return i.ToDashboardTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (i *dashboardTimeEqualityFilterPtrType) ToDashboardTimeEqualityFilterPtrOutputWithContext(ctx context.Context) DashboardTimeEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeEqualityFilterPtrOutput)
}

type DashboardTimeEqualityFilterOutput struct{ *pulumi.OutputState }

func (DashboardTimeEqualityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeEqualityFilter)(nil)).Elem()
}

func (o DashboardTimeEqualityFilterOutput) ToDashboardTimeEqualityFilterOutput() DashboardTimeEqualityFilterOutput {
	return o
}

func (o DashboardTimeEqualityFilterOutput) ToDashboardTimeEqualityFilterOutputWithContext(ctx context.Context) DashboardTimeEqualityFilterOutput {
	return o
}

func (o DashboardTimeEqualityFilterOutput) ToDashboardTimeEqualityFilterPtrOutput() DashboardTimeEqualityFilterPtrOutput {
	return o.ToDashboardTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (o DashboardTimeEqualityFilterOutput) ToDashboardTimeEqualityFilterPtrOutputWithContext(ctx context.Context) DashboardTimeEqualityFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTimeEqualityFilter) *DashboardTimeEqualityFilter {
		return &v
	}).(DashboardTimeEqualityFilterPtrOutput)
}

// The column that the filter is applied to.
func (o DashboardTimeEqualityFilterOutput) Column() DashboardColumnIdentifierOutput {
	return o.ApplyT(func(v DashboardTimeEqualityFilter) DashboardColumnIdentifier { return v.Column }).(DashboardColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o DashboardTimeEqualityFilterOutput) DefaultFilterControlConfiguration() DashboardDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTimeEqualityFilter) *DashboardDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(DashboardDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o DashboardTimeEqualityFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeEqualityFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `Value` and `RollingDate` .
func (o DashboardTimeEqualityFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeEqualityFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// The rolling date input for the `TimeEquality` filter.
//
// This field is mutually exclusive to `Value` and `ParameterName` .
func (o DashboardTimeEqualityFilterOutput) RollingDate() DashboardRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTimeEqualityFilter) *DashboardRollingDateConfiguration { return v.RollingDate }).(DashboardRollingDateConfigurationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTimeEqualityFilterOutput) TimeGranularity() DashboardTimeGranularityPtrOutput {
	return o.ApplyT(func(v DashboardTimeEqualityFilter) *DashboardTimeGranularity { return v.TimeGranularity }).(DashboardTimeGranularityPtrOutput)
}

// The value of a `TimeEquality` filter.
//
// This field is mutually exclusive to `RollingDate` and `ParameterName` .
func (o DashboardTimeEqualityFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeEqualityFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DashboardTimeEqualityFilterPtrOutput struct{ *pulumi.OutputState }

func (DashboardTimeEqualityFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeEqualityFilter)(nil)).Elem()
}

func (o DashboardTimeEqualityFilterPtrOutput) ToDashboardTimeEqualityFilterPtrOutput() DashboardTimeEqualityFilterPtrOutput {
	return o
}

func (o DashboardTimeEqualityFilterPtrOutput) ToDashboardTimeEqualityFilterPtrOutputWithContext(ctx context.Context) DashboardTimeEqualityFilterPtrOutput {
	return o
}

func (o DashboardTimeEqualityFilterPtrOutput) Elem() DashboardTimeEqualityFilterOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) DashboardTimeEqualityFilter {
		if v != nil {
			return *v
		}
		var ret DashboardTimeEqualityFilter
		return ret
	}).(DashboardTimeEqualityFilterOutput)
}

// The column that the filter is applied to.
func (o DashboardTimeEqualityFilterPtrOutput) Column() DashboardColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) *DashboardColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(DashboardColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o DashboardTimeEqualityFilterPtrOutput) DefaultFilterControlConfiguration() DashboardDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) *DashboardDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(DashboardDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o DashboardTimeEqualityFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `Value` and `RollingDate` .
func (o DashboardTimeEqualityFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// The rolling date input for the `TimeEquality` filter.
//
// This field is mutually exclusive to `Value` and `ParameterName` .
func (o DashboardTimeEqualityFilterPtrOutput) RollingDate() DashboardRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) *DashboardRollingDateConfiguration {
		if v == nil {
			return nil
		}
		return v.RollingDate
	}).(DashboardRollingDateConfigurationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTimeEqualityFilterPtrOutput) TimeGranularity() DashboardTimeGranularityPtrOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) *DashboardTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(DashboardTimeGranularityPtrOutput)
}

// The value of a `TimeEquality` filter.
//
// This field is mutually exclusive to `RollingDate` and `ParameterName` .
func (o DashboardTimeEqualityFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type DashboardTimeRangeDrillDownFilter struct {
	// The column that the filter is applied to.
	Column DashboardColumnIdentifier `pulumi:"column"`
	// The maximum value for the filter value range.
	RangeMaximum string `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum string `pulumi:"rangeMinimum"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity DashboardTimeGranularity `pulumi:"timeGranularity"`
}

// DashboardTimeRangeDrillDownFilterInput is an input type that accepts DashboardTimeRangeDrillDownFilterArgs and DashboardTimeRangeDrillDownFilterOutput values.
// You can construct a concrete instance of `DashboardTimeRangeDrillDownFilterInput` via:
//
//	DashboardTimeRangeDrillDownFilterArgs{...}
type DashboardTimeRangeDrillDownFilterInput interface {
	pulumi.Input

	ToDashboardTimeRangeDrillDownFilterOutput() DashboardTimeRangeDrillDownFilterOutput
	ToDashboardTimeRangeDrillDownFilterOutputWithContext(context.Context) DashboardTimeRangeDrillDownFilterOutput
}

type DashboardTimeRangeDrillDownFilterArgs struct {
	// The column that the filter is applied to.
	Column DashboardColumnIdentifierInput `pulumi:"column"`
	// The maximum value for the filter value range.
	RangeMaximum pulumi.StringInput `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum pulumi.StringInput `pulumi:"rangeMinimum"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity DashboardTimeGranularityInput `pulumi:"timeGranularity"`
}

func (DashboardTimeRangeDrillDownFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeRangeDrillDownFilter)(nil)).Elem()
}

func (i DashboardTimeRangeDrillDownFilterArgs) ToDashboardTimeRangeDrillDownFilterOutput() DashboardTimeRangeDrillDownFilterOutput {
	return i.ToDashboardTimeRangeDrillDownFilterOutputWithContext(context.Background())
}

func (i DashboardTimeRangeDrillDownFilterArgs) ToDashboardTimeRangeDrillDownFilterOutputWithContext(ctx context.Context) DashboardTimeRangeDrillDownFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeDrillDownFilterOutput)
}

func (i DashboardTimeRangeDrillDownFilterArgs) ToDashboardTimeRangeDrillDownFilterPtrOutput() DashboardTimeRangeDrillDownFilterPtrOutput {
	return i.ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i DashboardTimeRangeDrillDownFilterArgs) ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeDrillDownFilterOutput).ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(ctx)
}

// DashboardTimeRangeDrillDownFilterPtrInput is an input type that accepts DashboardTimeRangeDrillDownFilterArgs, DashboardTimeRangeDrillDownFilterPtr and DashboardTimeRangeDrillDownFilterPtrOutput values.
// You can construct a concrete instance of `DashboardTimeRangeDrillDownFilterPtrInput` via:
//
//	        DashboardTimeRangeDrillDownFilterArgs{...}
//
//	or:
//
//	        nil
type DashboardTimeRangeDrillDownFilterPtrInput interface {
	pulumi.Input

	ToDashboardTimeRangeDrillDownFilterPtrOutput() DashboardTimeRangeDrillDownFilterPtrOutput
	ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(context.Context) DashboardTimeRangeDrillDownFilterPtrOutput
}

type dashboardTimeRangeDrillDownFilterPtrType DashboardTimeRangeDrillDownFilterArgs

func DashboardTimeRangeDrillDownFilterPtr(v *DashboardTimeRangeDrillDownFilterArgs) DashboardTimeRangeDrillDownFilterPtrInput {
	return (*dashboardTimeRangeDrillDownFilterPtrType)(v)
}

func (*dashboardTimeRangeDrillDownFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeRangeDrillDownFilter)(nil)).Elem()
}

func (i *dashboardTimeRangeDrillDownFilterPtrType) ToDashboardTimeRangeDrillDownFilterPtrOutput() DashboardTimeRangeDrillDownFilterPtrOutput {
	return i.ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i *dashboardTimeRangeDrillDownFilterPtrType) ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeDrillDownFilterPtrOutput)
}

type DashboardTimeRangeDrillDownFilterOutput struct{ *pulumi.OutputState }

func (DashboardTimeRangeDrillDownFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeRangeDrillDownFilter)(nil)).Elem()
}

func (o DashboardTimeRangeDrillDownFilterOutput) ToDashboardTimeRangeDrillDownFilterOutput() DashboardTimeRangeDrillDownFilterOutput {
	return o
}

func (o DashboardTimeRangeDrillDownFilterOutput) ToDashboardTimeRangeDrillDownFilterOutputWithContext(ctx context.Context) DashboardTimeRangeDrillDownFilterOutput {
	return o
}

func (o DashboardTimeRangeDrillDownFilterOutput) ToDashboardTimeRangeDrillDownFilterPtrOutput() DashboardTimeRangeDrillDownFilterPtrOutput {
	return o.ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (o DashboardTimeRangeDrillDownFilterOutput) ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeDrillDownFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTimeRangeDrillDownFilter) *DashboardTimeRangeDrillDownFilter {
		return &v
	}).(DashboardTimeRangeDrillDownFilterPtrOutput)
}

// The column that the filter is applied to.
func (o DashboardTimeRangeDrillDownFilterOutput) Column() DashboardColumnIdentifierOutput {
	return o.ApplyT(func(v DashboardTimeRangeDrillDownFilter) DashboardColumnIdentifier { return v.Column }).(DashboardColumnIdentifierOutput)
}

// The maximum value for the filter value range.
func (o DashboardTimeRangeDrillDownFilterOutput) RangeMaximum() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeRangeDrillDownFilter) string { return v.RangeMaximum }).(pulumi.StringOutput)
}

// The minimum value for the filter value range.
func (o DashboardTimeRangeDrillDownFilterOutput) RangeMinimum() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeRangeDrillDownFilter) string { return v.RangeMinimum }).(pulumi.StringOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTimeRangeDrillDownFilterOutput) TimeGranularity() DashboardTimeGranularityOutput {
	return o.ApplyT(func(v DashboardTimeRangeDrillDownFilter) DashboardTimeGranularity { return v.TimeGranularity }).(DashboardTimeGranularityOutput)
}

type DashboardTimeRangeDrillDownFilterPtrOutput struct{ *pulumi.OutputState }

func (DashboardTimeRangeDrillDownFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeRangeDrillDownFilter)(nil)).Elem()
}

func (o DashboardTimeRangeDrillDownFilterPtrOutput) ToDashboardTimeRangeDrillDownFilterPtrOutput() DashboardTimeRangeDrillDownFilterPtrOutput {
	return o
}

func (o DashboardTimeRangeDrillDownFilterPtrOutput) ToDashboardTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeDrillDownFilterPtrOutput {
	return o
}

func (o DashboardTimeRangeDrillDownFilterPtrOutput) Elem() DashboardTimeRangeDrillDownFilterOutput {
	return o.ApplyT(func(v *DashboardTimeRangeDrillDownFilter) DashboardTimeRangeDrillDownFilter {
		if v != nil {
			return *v
		}
		var ret DashboardTimeRangeDrillDownFilter
		return ret
	}).(DashboardTimeRangeDrillDownFilterOutput)
}

// The column that the filter is applied to.
func (o DashboardTimeRangeDrillDownFilterPtrOutput) Column() DashboardColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeDrillDownFilter) *DashboardColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(DashboardColumnIdentifierPtrOutput)
}

// The maximum value for the filter value range.
func (o DashboardTimeRangeDrillDownFilterPtrOutput) RangeMaximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeDrillDownFilter) *string {
		if v == nil {
			return nil
		}
		return &v.RangeMaximum
	}).(pulumi.StringPtrOutput)
}

// The minimum value for the filter value range.
func (o DashboardTimeRangeDrillDownFilterPtrOutput) RangeMinimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeDrillDownFilter) *string {
		if v == nil {
			return nil
		}
		return &v.RangeMinimum
	}).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTimeRangeDrillDownFilterPtrOutput) TimeGranularity() DashboardTimeGranularityPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeDrillDownFilter) *DashboardTimeGranularity {
		if v == nil {
			return nil
		}
		return &v.TimeGranularity
	}).(DashboardTimeGranularityPtrOutput)
}

type DashboardTimeRangeFilter struct {
	// The column that the filter is applied to.
	Column DashboardColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *DashboardDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// The exclude period of the time range filter.
	ExcludePeriodConfiguration *DashboardExcludePeriodConfiguration `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum *bool `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum *bool `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption DashboardFilterNullOption `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximumValue *DashboardTimeRangeFilterValue `pulumi:"rangeMaximumValue"`
	// The minimum value for the filter value range.
	RangeMinimumValue *DashboardTimeRangeFilterValue `pulumi:"rangeMinimumValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *DashboardTimeGranularity `pulumi:"timeGranularity"`
}

// DashboardTimeRangeFilterInput is an input type that accepts DashboardTimeRangeFilterArgs and DashboardTimeRangeFilterOutput values.
// You can construct a concrete instance of `DashboardTimeRangeFilterInput` via:
//
//	DashboardTimeRangeFilterArgs{...}
type DashboardTimeRangeFilterInput interface {
	pulumi.Input

	ToDashboardTimeRangeFilterOutput() DashboardTimeRangeFilterOutput
	ToDashboardTimeRangeFilterOutputWithContext(context.Context) DashboardTimeRangeFilterOutput
}

type DashboardTimeRangeFilterArgs struct {
	// The column that the filter is applied to.
	Column DashboardColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration DashboardDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// The exclude period of the time range filter.
	ExcludePeriodConfiguration DashboardExcludePeriodConfigurationPtrInput `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum pulumi.BoolPtrInput `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum pulumi.BoolPtrInput `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption DashboardFilterNullOptionInput `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximumValue DashboardTimeRangeFilterValuePtrInput `pulumi:"rangeMaximumValue"`
	// The minimum value for the filter value range.
	RangeMinimumValue DashboardTimeRangeFilterValuePtrInput `pulumi:"rangeMinimumValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity DashboardTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (DashboardTimeRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeRangeFilter)(nil)).Elem()
}

func (i DashboardTimeRangeFilterArgs) ToDashboardTimeRangeFilterOutput() DashboardTimeRangeFilterOutput {
	return i.ToDashboardTimeRangeFilterOutputWithContext(context.Background())
}

func (i DashboardTimeRangeFilterArgs) ToDashboardTimeRangeFilterOutputWithContext(ctx context.Context) DashboardTimeRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeFilterOutput)
}

func (i DashboardTimeRangeFilterArgs) ToDashboardTimeRangeFilterPtrOutput() DashboardTimeRangeFilterPtrOutput {
	return i.ToDashboardTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (i DashboardTimeRangeFilterArgs) ToDashboardTimeRangeFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeFilterOutput).ToDashboardTimeRangeFilterPtrOutputWithContext(ctx)
}

// DashboardTimeRangeFilterPtrInput is an input type that accepts DashboardTimeRangeFilterArgs, DashboardTimeRangeFilterPtr and DashboardTimeRangeFilterPtrOutput values.
// You can construct a concrete instance of `DashboardTimeRangeFilterPtrInput` via:
//
//	        DashboardTimeRangeFilterArgs{...}
//
//	or:
//
//	        nil
type DashboardTimeRangeFilterPtrInput interface {
	pulumi.Input

	ToDashboardTimeRangeFilterPtrOutput() DashboardTimeRangeFilterPtrOutput
	ToDashboardTimeRangeFilterPtrOutputWithContext(context.Context) DashboardTimeRangeFilterPtrOutput
}

type dashboardTimeRangeFilterPtrType DashboardTimeRangeFilterArgs

func DashboardTimeRangeFilterPtr(v *DashboardTimeRangeFilterArgs) DashboardTimeRangeFilterPtrInput {
	return (*dashboardTimeRangeFilterPtrType)(v)
}

func (*dashboardTimeRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeRangeFilter)(nil)).Elem()
}

func (i *dashboardTimeRangeFilterPtrType) ToDashboardTimeRangeFilterPtrOutput() DashboardTimeRangeFilterPtrOutput {
	return i.ToDashboardTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (i *dashboardTimeRangeFilterPtrType) ToDashboardTimeRangeFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeFilterPtrOutput)
}

type DashboardTimeRangeFilterOutput struct{ *pulumi.OutputState }

func (DashboardTimeRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeRangeFilter)(nil)).Elem()
}

func (o DashboardTimeRangeFilterOutput) ToDashboardTimeRangeFilterOutput() DashboardTimeRangeFilterOutput {
	return o
}

func (o DashboardTimeRangeFilterOutput) ToDashboardTimeRangeFilterOutputWithContext(ctx context.Context) DashboardTimeRangeFilterOutput {
	return o
}

func (o DashboardTimeRangeFilterOutput) ToDashboardTimeRangeFilterPtrOutput() DashboardTimeRangeFilterPtrOutput {
	return o.ToDashboardTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (o DashboardTimeRangeFilterOutput) ToDashboardTimeRangeFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTimeRangeFilter) *DashboardTimeRangeFilter {
		return &v
	}).(DashboardTimeRangeFilterPtrOutput)
}

// The column that the filter is applied to.
func (o DashboardTimeRangeFilterOutput) Column() DashboardColumnIdentifierOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) DashboardColumnIdentifier { return v.Column }).(DashboardColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o DashboardTimeRangeFilterOutput) DefaultFilterControlConfiguration() DashboardDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) *DashboardDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(DashboardDefaultFilterControlConfigurationPtrOutput)
}

// The exclude period of the time range filter.
func (o DashboardTimeRangeFilterOutput) ExcludePeriodConfiguration() DashboardExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) *DashboardExcludePeriodConfiguration {
		return v.ExcludePeriodConfiguration
	}).(DashboardExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o DashboardTimeRangeFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o DashboardTimeRangeFilterOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) *bool { return v.IncludeMaximum }).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o DashboardTimeRangeFilterOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) *bool { return v.IncludeMinimum }).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o DashboardTimeRangeFilterOutput) NullOption() DashboardFilterNullOptionOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) DashboardFilterNullOption { return v.NullOption }).(DashboardFilterNullOptionOutput)
}

// The maximum value for the filter value range.
func (o DashboardTimeRangeFilterOutput) RangeMaximumValue() DashboardTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) *DashboardTimeRangeFilterValue { return v.RangeMaximumValue }).(DashboardTimeRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o DashboardTimeRangeFilterOutput) RangeMinimumValue() DashboardTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) *DashboardTimeRangeFilterValue { return v.RangeMinimumValue }).(DashboardTimeRangeFilterValuePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTimeRangeFilterOutput) TimeGranularity() DashboardTimeGranularityPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilter) *DashboardTimeGranularity { return v.TimeGranularity }).(DashboardTimeGranularityPtrOutput)
}

type DashboardTimeRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (DashboardTimeRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeRangeFilter)(nil)).Elem()
}

func (o DashboardTimeRangeFilterPtrOutput) ToDashboardTimeRangeFilterPtrOutput() DashboardTimeRangeFilterPtrOutput {
	return o
}

func (o DashboardTimeRangeFilterPtrOutput) ToDashboardTimeRangeFilterPtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterPtrOutput {
	return o
}

func (o DashboardTimeRangeFilterPtrOutput) Elem() DashboardTimeRangeFilterOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) DashboardTimeRangeFilter {
		if v != nil {
			return *v
		}
		var ret DashboardTimeRangeFilter
		return ret
	}).(DashboardTimeRangeFilterOutput)
}

// The column that the filter is applied to.
func (o DashboardTimeRangeFilterPtrOutput) Column() DashboardColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *DashboardColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(DashboardColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o DashboardTimeRangeFilterPtrOutput) DefaultFilterControlConfiguration() DashboardDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *DashboardDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(DashboardDefaultFilterControlConfigurationPtrOutput)
}

// The exclude period of the time range filter.
func (o DashboardTimeRangeFilterPtrOutput) ExcludePeriodConfiguration() DashboardExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *DashboardExcludePeriodConfiguration {
		if v == nil {
			return nil
		}
		return v.ExcludePeriodConfiguration
	}).(DashboardExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o DashboardTimeRangeFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o DashboardTimeRangeFilterPtrOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMaximum
	}).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o DashboardTimeRangeFilterPtrOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMinimum
	}).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o DashboardTimeRangeFilterPtrOutput) NullOption() DashboardFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *DashboardFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(DashboardFilterNullOptionPtrOutput)
}

// The maximum value for the filter value range.
func (o DashboardTimeRangeFilterPtrOutput) RangeMaximumValue() DashboardTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *DashboardTimeRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMaximumValue
	}).(DashboardTimeRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o DashboardTimeRangeFilterPtrOutput) RangeMinimumValue() DashboardTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *DashboardTimeRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMinimumValue
	}).(DashboardTimeRangeFilterValuePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTimeRangeFilterPtrOutput) TimeGranularity() DashboardTimeGranularityPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilter) *DashboardTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(DashboardTimeGranularityPtrOutput)
}

type DashboardTimeRangeFilterValue struct {
	// The parameter type input value.
	Parameter *string `pulumi:"parameter"`
	// The rolling date input value.
	RollingDate *DashboardRollingDateConfiguration `pulumi:"rollingDate"`
	// The static input value.
	StaticValue *string `pulumi:"staticValue"`
}

// DashboardTimeRangeFilterValueInput is an input type that accepts DashboardTimeRangeFilterValueArgs and DashboardTimeRangeFilterValueOutput values.
// You can construct a concrete instance of `DashboardTimeRangeFilterValueInput` via:
//
//	DashboardTimeRangeFilterValueArgs{...}
type DashboardTimeRangeFilterValueInput interface {
	pulumi.Input

	ToDashboardTimeRangeFilterValueOutput() DashboardTimeRangeFilterValueOutput
	ToDashboardTimeRangeFilterValueOutputWithContext(context.Context) DashboardTimeRangeFilterValueOutput
}

type DashboardTimeRangeFilterValueArgs struct {
	// The parameter type input value.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The rolling date input value.
	RollingDate DashboardRollingDateConfigurationPtrInput `pulumi:"rollingDate"`
	// The static input value.
	StaticValue pulumi.StringPtrInput `pulumi:"staticValue"`
}

func (DashboardTimeRangeFilterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeRangeFilterValue)(nil)).Elem()
}

func (i DashboardTimeRangeFilterValueArgs) ToDashboardTimeRangeFilterValueOutput() DashboardTimeRangeFilterValueOutput {
	return i.ToDashboardTimeRangeFilterValueOutputWithContext(context.Background())
}

func (i DashboardTimeRangeFilterValueArgs) ToDashboardTimeRangeFilterValueOutputWithContext(ctx context.Context) DashboardTimeRangeFilterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeFilterValueOutput)
}

func (i DashboardTimeRangeFilterValueArgs) ToDashboardTimeRangeFilterValuePtrOutput() DashboardTimeRangeFilterValuePtrOutput {
	return i.ToDashboardTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i DashboardTimeRangeFilterValueArgs) ToDashboardTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeFilterValueOutput).ToDashboardTimeRangeFilterValuePtrOutputWithContext(ctx)
}

// DashboardTimeRangeFilterValuePtrInput is an input type that accepts DashboardTimeRangeFilterValueArgs, DashboardTimeRangeFilterValuePtr and DashboardTimeRangeFilterValuePtrOutput values.
// You can construct a concrete instance of `DashboardTimeRangeFilterValuePtrInput` via:
//
//	        DashboardTimeRangeFilterValueArgs{...}
//
//	or:
//
//	        nil
type DashboardTimeRangeFilterValuePtrInput interface {
	pulumi.Input

	ToDashboardTimeRangeFilterValuePtrOutput() DashboardTimeRangeFilterValuePtrOutput
	ToDashboardTimeRangeFilterValuePtrOutputWithContext(context.Context) DashboardTimeRangeFilterValuePtrOutput
}

type dashboardTimeRangeFilterValuePtrType DashboardTimeRangeFilterValueArgs

func DashboardTimeRangeFilterValuePtr(v *DashboardTimeRangeFilterValueArgs) DashboardTimeRangeFilterValuePtrInput {
	return (*dashboardTimeRangeFilterValuePtrType)(v)
}

func (*dashboardTimeRangeFilterValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeRangeFilterValue)(nil)).Elem()
}

func (i *dashboardTimeRangeFilterValuePtrType) ToDashboardTimeRangeFilterValuePtrOutput() DashboardTimeRangeFilterValuePtrOutput {
	return i.ToDashboardTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i *dashboardTimeRangeFilterValuePtrType) ToDashboardTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTimeRangeFilterValuePtrOutput)
}

type DashboardTimeRangeFilterValueOutput struct{ *pulumi.OutputState }

func (DashboardTimeRangeFilterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTimeRangeFilterValue)(nil)).Elem()
}

func (o DashboardTimeRangeFilterValueOutput) ToDashboardTimeRangeFilterValueOutput() DashboardTimeRangeFilterValueOutput {
	return o
}

func (o DashboardTimeRangeFilterValueOutput) ToDashboardTimeRangeFilterValueOutputWithContext(ctx context.Context) DashboardTimeRangeFilterValueOutput {
	return o
}

func (o DashboardTimeRangeFilterValueOutput) ToDashboardTimeRangeFilterValuePtrOutput() DashboardTimeRangeFilterValuePtrOutput {
	return o.ToDashboardTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (o DashboardTimeRangeFilterValueOutput) ToDashboardTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTimeRangeFilterValue) *DashboardTimeRangeFilterValue {
		return &v
	}).(DashboardTimeRangeFilterValuePtrOutput)
}

// The parameter type input value.
func (o DashboardTimeRangeFilterValueOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilterValue) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The rolling date input value.
func (o DashboardTimeRangeFilterValueOutput) RollingDate() DashboardRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilterValue) *DashboardRollingDateConfiguration { return v.RollingDate }).(DashboardRollingDateConfigurationPtrOutput)
}

// The static input value.
func (o DashboardTimeRangeFilterValueOutput) StaticValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTimeRangeFilterValue) *string { return v.StaticValue }).(pulumi.StringPtrOutput)
}

type DashboardTimeRangeFilterValuePtrOutput struct{ *pulumi.OutputState }

func (DashboardTimeRangeFilterValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTimeRangeFilterValue)(nil)).Elem()
}

func (o DashboardTimeRangeFilterValuePtrOutput) ToDashboardTimeRangeFilterValuePtrOutput() DashboardTimeRangeFilterValuePtrOutput {
	return o
}

func (o DashboardTimeRangeFilterValuePtrOutput) ToDashboardTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) DashboardTimeRangeFilterValuePtrOutput {
	return o
}

func (o DashboardTimeRangeFilterValuePtrOutput) Elem() DashboardTimeRangeFilterValueOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilterValue) DashboardTimeRangeFilterValue {
		if v != nil {
			return *v
		}
		var ret DashboardTimeRangeFilterValue
		return ret
	}).(DashboardTimeRangeFilterValueOutput)
}

// The parameter type input value.
func (o DashboardTimeRangeFilterValuePtrOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilterValue) *string {
		if v == nil {
			return nil
		}
		return v.Parameter
	}).(pulumi.StringPtrOutput)
}

// The rolling date input value.
func (o DashboardTimeRangeFilterValuePtrOutput) RollingDate() DashboardRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilterValue) *DashboardRollingDateConfiguration {
		if v == nil {
			return nil
		}
		return v.RollingDate
	}).(DashboardRollingDateConfigurationPtrOutput)
}

// The static input value.
func (o DashboardTimeRangeFilterValuePtrOutput) StaticValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTimeRangeFilterValue) *string {
		if v == nil {
			return nil
		}
		return v.StaticValue
	}).(pulumi.StringPtrOutput)
}

type DashboardTooltipItem struct {
	// The tooltip item for the columns that are not part of a field well.
	ColumnTooltipItem *DashboardColumnTooltipItem `pulumi:"columnTooltipItem"`
	// The tooltip item for the fields.
	FieldTooltipItem *DashboardFieldTooltipItem `pulumi:"fieldTooltipItem"`
}

// DashboardTooltipItemInput is an input type that accepts DashboardTooltipItemArgs and DashboardTooltipItemOutput values.
// You can construct a concrete instance of `DashboardTooltipItemInput` via:
//
//	DashboardTooltipItemArgs{...}
type DashboardTooltipItemInput interface {
	pulumi.Input

	ToDashboardTooltipItemOutput() DashboardTooltipItemOutput
	ToDashboardTooltipItemOutputWithContext(context.Context) DashboardTooltipItemOutput
}

type DashboardTooltipItemArgs struct {
	// The tooltip item for the columns that are not part of a field well.
	ColumnTooltipItem DashboardColumnTooltipItemPtrInput `pulumi:"columnTooltipItem"`
	// The tooltip item for the fields.
	FieldTooltipItem DashboardFieldTooltipItemPtrInput `pulumi:"fieldTooltipItem"`
}

func (DashboardTooltipItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTooltipItem)(nil)).Elem()
}

func (i DashboardTooltipItemArgs) ToDashboardTooltipItemOutput() DashboardTooltipItemOutput {
	return i.ToDashboardTooltipItemOutputWithContext(context.Background())
}

func (i DashboardTooltipItemArgs) ToDashboardTooltipItemOutputWithContext(ctx context.Context) DashboardTooltipItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTooltipItemOutput)
}

// DashboardTooltipItemArrayInput is an input type that accepts DashboardTooltipItemArray and DashboardTooltipItemArrayOutput values.
// You can construct a concrete instance of `DashboardTooltipItemArrayInput` via:
//
//	DashboardTooltipItemArray{ DashboardTooltipItemArgs{...} }
type DashboardTooltipItemArrayInput interface {
	pulumi.Input

	ToDashboardTooltipItemArrayOutput() DashboardTooltipItemArrayOutput
	ToDashboardTooltipItemArrayOutputWithContext(context.Context) DashboardTooltipItemArrayOutput
}

type DashboardTooltipItemArray []DashboardTooltipItemInput

func (DashboardTooltipItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTooltipItem)(nil)).Elem()
}

func (i DashboardTooltipItemArray) ToDashboardTooltipItemArrayOutput() DashboardTooltipItemArrayOutput {
	return i.ToDashboardTooltipItemArrayOutputWithContext(context.Background())
}

func (i DashboardTooltipItemArray) ToDashboardTooltipItemArrayOutputWithContext(ctx context.Context) DashboardTooltipItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTooltipItemArrayOutput)
}

type DashboardTooltipItemOutput struct{ *pulumi.OutputState }

func (DashboardTooltipItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTooltipItem)(nil)).Elem()
}

func (o DashboardTooltipItemOutput) ToDashboardTooltipItemOutput() DashboardTooltipItemOutput {
	return o
}

func (o DashboardTooltipItemOutput) ToDashboardTooltipItemOutputWithContext(ctx context.Context) DashboardTooltipItemOutput {
	return o
}

// The tooltip item for the columns that are not part of a field well.
func (o DashboardTooltipItemOutput) ColumnTooltipItem() DashboardColumnTooltipItemPtrOutput {
	return o.ApplyT(func(v DashboardTooltipItem) *DashboardColumnTooltipItem { return v.ColumnTooltipItem }).(DashboardColumnTooltipItemPtrOutput)
}

// The tooltip item for the fields.
func (o DashboardTooltipItemOutput) FieldTooltipItem() DashboardFieldTooltipItemPtrOutput {
	return o.ApplyT(func(v DashboardTooltipItem) *DashboardFieldTooltipItem { return v.FieldTooltipItem }).(DashboardFieldTooltipItemPtrOutput)
}

type DashboardTooltipItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardTooltipItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTooltipItem)(nil)).Elem()
}

func (o DashboardTooltipItemArrayOutput) ToDashboardTooltipItemArrayOutput() DashboardTooltipItemArrayOutput {
	return o
}

func (o DashboardTooltipItemArrayOutput) ToDashboardTooltipItemArrayOutputWithContext(ctx context.Context) DashboardTooltipItemArrayOutput {
	return o
}

func (o DashboardTooltipItemArrayOutput) Index(i pulumi.IntInput) DashboardTooltipItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTooltipItem {
		return vs[0].([]DashboardTooltipItem)[vs[1].(int)]
	}).(DashboardTooltipItemOutput)
}

type DashboardTooltipOptions struct {
	// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
	FieldBasedTooltip *DashboardFieldBasedTooltip `pulumi:"fieldBasedTooltip"`
	// The selected type for the tooltip. Choose one of the following options:
	//
	// - `BASIC` : A basic tooltip.
	// - `DETAILED` : A detailed tooltip.
	SelectedTooltipType *DashboardSelectedTooltipType `pulumi:"selectedTooltipType"`
	// Determines whether or not the tooltip is visible.
	TooltipVisibility *DashboardVisibility `pulumi:"tooltipVisibility"`
}

// DashboardTooltipOptionsInput is an input type that accepts DashboardTooltipOptionsArgs and DashboardTooltipOptionsOutput values.
// You can construct a concrete instance of `DashboardTooltipOptionsInput` via:
//
//	DashboardTooltipOptionsArgs{...}
type DashboardTooltipOptionsInput interface {
	pulumi.Input

	ToDashboardTooltipOptionsOutput() DashboardTooltipOptionsOutput
	ToDashboardTooltipOptionsOutputWithContext(context.Context) DashboardTooltipOptionsOutput
}

type DashboardTooltipOptionsArgs struct {
	// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
	FieldBasedTooltip DashboardFieldBasedTooltipPtrInput `pulumi:"fieldBasedTooltip"`
	// The selected type for the tooltip. Choose one of the following options:
	//
	// - `BASIC` : A basic tooltip.
	// - `DETAILED` : A detailed tooltip.
	SelectedTooltipType DashboardSelectedTooltipTypePtrInput `pulumi:"selectedTooltipType"`
	// Determines whether or not the tooltip is visible.
	TooltipVisibility DashboardVisibilityPtrInput `pulumi:"tooltipVisibility"`
}

func (DashboardTooltipOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTooltipOptions)(nil)).Elem()
}

func (i DashboardTooltipOptionsArgs) ToDashboardTooltipOptionsOutput() DashboardTooltipOptionsOutput {
	return i.ToDashboardTooltipOptionsOutputWithContext(context.Background())
}

func (i DashboardTooltipOptionsArgs) ToDashboardTooltipOptionsOutputWithContext(ctx context.Context) DashboardTooltipOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTooltipOptionsOutput)
}

func (i DashboardTooltipOptionsArgs) ToDashboardTooltipOptionsPtrOutput() DashboardTooltipOptionsPtrOutput {
	return i.ToDashboardTooltipOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTooltipOptionsArgs) ToDashboardTooltipOptionsPtrOutputWithContext(ctx context.Context) DashboardTooltipOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTooltipOptionsOutput).ToDashboardTooltipOptionsPtrOutputWithContext(ctx)
}

// DashboardTooltipOptionsPtrInput is an input type that accepts DashboardTooltipOptionsArgs, DashboardTooltipOptionsPtr and DashboardTooltipOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTooltipOptionsPtrInput` via:
//
//	        DashboardTooltipOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTooltipOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTooltipOptionsPtrOutput() DashboardTooltipOptionsPtrOutput
	ToDashboardTooltipOptionsPtrOutputWithContext(context.Context) DashboardTooltipOptionsPtrOutput
}

type dashboardTooltipOptionsPtrType DashboardTooltipOptionsArgs

func DashboardTooltipOptionsPtr(v *DashboardTooltipOptionsArgs) DashboardTooltipOptionsPtrInput {
	return (*dashboardTooltipOptionsPtrType)(v)
}

func (*dashboardTooltipOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTooltipOptions)(nil)).Elem()
}

func (i *dashboardTooltipOptionsPtrType) ToDashboardTooltipOptionsPtrOutput() DashboardTooltipOptionsPtrOutput {
	return i.ToDashboardTooltipOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTooltipOptionsPtrType) ToDashboardTooltipOptionsPtrOutputWithContext(ctx context.Context) DashboardTooltipOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTooltipOptionsPtrOutput)
}

type DashboardTooltipOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTooltipOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTooltipOptions)(nil)).Elem()
}

func (o DashboardTooltipOptionsOutput) ToDashboardTooltipOptionsOutput() DashboardTooltipOptionsOutput {
	return o
}

func (o DashboardTooltipOptionsOutput) ToDashboardTooltipOptionsOutputWithContext(ctx context.Context) DashboardTooltipOptionsOutput {
	return o
}

func (o DashboardTooltipOptionsOutput) ToDashboardTooltipOptionsPtrOutput() DashboardTooltipOptionsPtrOutput {
	return o.ToDashboardTooltipOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTooltipOptionsOutput) ToDashboardTooltipOptionsPtrOutputWithContext(ctx context.Context) DashboardTooltipOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTooltipOptions) *DashboardTooltipOptions {
		return &v
	}).(DashboardTooltipOptionsPtrOutput)
}

// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
func (o DashboardTooltipOptionsOutput) FieldBasedTooltip() DashboardFieldBasedTooltipPtrOutput {
	return o.ApplyT(func(v DashboardTooltipOptions) *DashboardFieldBasedTooltip { return v.FieldBasedTooltip }).(DashboardFieldBasedTooltipPtrOutput)
}

// The selected type for the tooltip. Choose one of the following options:
//
// - `BASIC` : A basic tooltip.
// - `DETAILED` : A detailed tooltip.
func (o DashboardTooltipOptionsOutput) SelectedTooltipType() DashboardSelectedTooltipTypePtrOutput {
	return o.ApplyT(func(v DashboardTooltipOptions) *DashboardSelectedTooltipType { return v.SelectedTooltipType }).(DashboardSelectedTooltipTypePtrOutput)
}

// Determines whether or not the tooltip is visible.
func (o DashboardTooltipOptionsOutput) TooltipVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTooltipOptions) *DashboardVisibility { return v.TooltipVisibility }).(DashboardVisibilityPtrOutput)
}

type DashboardTooltipOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTooltipOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTooltipOptions)(nil)).Elem()
}

func (o DashboardTooltipOptionsPtrOutput) ToDashboardTooltipOptionsPtrOutput() DashboardTooltipOptionsPtrOutput {
	return o
}

func (o DashboardTooltipOptionsPtrOutput) ToDashboardTooltipOptionsPtrOutputWithContext(ctx context.Context) DashboardTooltipOptionsPtrOutput {
	return o
}

func (o DashboardTooltipOptionsPtrOutput) Elem() DashboardTooltipOptionsOutput {
	return o.ApplyT(func(v *DashboardTooltipOptions) DashboardTooltipOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTooltipOptions
		return ret
	}).(DashboardTooltipOptionsOutput)
}

// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
func (o DashboardTooltipOptionsPtrOutput) FieldBasedTooltip() DashboardFieldBasedTooltipPtrOutput {
	return o.ApplyT(func(v *DashboardTooltipOptions) *DashboardFieldBasedTooltip {
		if v == nil {
			return nil
		}
		return v.FieldBasedTooltip
	}).(DashboardFieldBasedTooltipPtrOutput)
}

// The selected type for the tooltip. Choose one of the following options:
//
// - `BASIC` : A basic tooltip.
// - `DETAILED` : A detailed tooltip.
func (o DashboardTooltipOptionsPtrOutput) SelectedTooltipType() DashboardSelectedTooltipTypePtrOutput {
	return o.ApplyT(func(v *DashboardTooltipOptions) *DashboardSelectedTooltipType {
		if v == nil {
			return nil
		}
		return v.SelectedTooltipType
	}).(DashboardSelectedTooltipTypePtrOutput)
}

// Determines whether or not the tooltip is visible.
func (o DashboardTooltipOptionsPtrOutput) TooltipVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardTooltipOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.TooltipVisibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardTopBottomFilter struct {
	// The aggregation and sort configuration of the top bottom filter.
	AggregationSortConfigurations []DashboardAggregationSortConfiguration `pulumi:"aggregationSortConfigurations"`
	// The column that the filter is applied to.
	Column DashboardColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *DashboardDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The number of items to include in the top bottom filter results.
	Limit *float64 `pulumi:"limit"`
	// The parameter whose value should be used for the filter value.
	ParameterName *string `pulumi:"parameterName"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *DashboardTimeGranularity `pulumi:"timeGranularity"`
}

// DashboardTopBottomFilterInput is an input type that accepts DashboardTopBottomFilterArgs and DashboardTopBottomFilterOutput values.
// You can construct a concrete instance of `DashboardTopBottomFilterInput` via:
//
//	DashboardTopBottomFilterArgs{...}
type DashboardTopBottomFilterInput interface {
	pulumi.Input

	ToDashboardTopBottomFilterOutput() DashboardTopBottomFilterOutput
	ToDashboardTopBottomFilterOutputWithContext(context.Context) DashboardTopBottomFilterOutput
}

type DashboardTopBottomFilterArgs struct {
	// The aggregation and sort configuration of the top bottom filter.
	AggregationSortConfigurations DashboardAggregationSortConfigurationArrayInput `pulumi:"aggregationSortConfigurations"`
	// The column that the filter is applied to.
	Column DashboardColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration DashboardDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The number of items to include in the top bottom filter results.
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// The parameter whose value should be used for the filter value.
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity DashboardTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (DashboardTopBottomFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTopBottomFilter)(nil)).Elem()
}

func (i DashboardTopBottomFilterArgs) ToDashboardTopBottomFilterOutput() DashboardTopBottomFilterOutput {
	return i.ToDashboardTopBottomFilterOutputWithContext(context.Background())
}

func (i DashboardTopBottomFilterArgs) ToDashboardTopBottomFilterOutputWithContext(ctx context.Context) DashboardTopBottomFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomFilterOutput)
}

func (i DashboardTopBottomFilterArgs) ToDashboardTopBottomFilterPtrOutput() DashboardTopBottomFilterPtrOutput {
	return i.ToDashboardTopBottomFilterPtrOutputWithContext(context.Background())
}

func (i DashboardTopBottomFilterArgs) ToDashboardTopBottomFilterPtrOutputWithContext(ctx context.Context) DashboardTopBottomFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomFilterOutput).ToDashboardTopBottomFilterPtrOutputWithContext(ctx)
}

// DashboardTopBottomFilterPtrInput is an input type that accepts DashboardTopBottomFilterArgs, DashboardTopBottomFilterPtr and DashboardTopBottomFilterPtrOutput values.
// You can construct a concrete instance of `DashboardTopBottomFilterPtrInput` via:
//
//	        DashboardTopBottomFilterArgs{...}
//
//	or:
//
//	        nil
type DashboardTopBottomFilterPtrInput interface {
	pulumi.Input

	ToDashboardTopBottomFilterPtrOutput() DashboardTopBottomFilterPtrOutput
	ToDashboardTopBottomFilterPtrOutputWithContext(context.Context) DashboardTopBottomFilterPtrOutput
}

type dashboardTopBottomFilterPtrType DashboardTopBottomFilterArgs

func DashboardTopBottomFilterPtr(v *DashboardTopBottomFilterArgs) DashboardTopBottomFilterPtrInput {
	return (*dashboardTopBottomFilterPtrType)(v)
}

func (*dashboardTopBottomFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTopBottomFilter)(nil)).Elem()
}

func (i *dashboardTopBottomFilterPtrType) ToDashboardTopBottomFilterPtrOutput() DashboardTopBottomFilterPtrOutput {
	return i.ToDashboardTopBottomFilterPtrOutputWithContext(context.Background())
}

func (i *dashboardTopBottomFilterPtrType) ToDashboardTopBottomFilterPtrOutputWithContext(ctx context.Context) DashboardTopBottomFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomFilterPtrOutput)
}

type DashboardTopBottomFilterOutput struct{ *pulumi.OutputState }

func (DashboardTopBottomFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTopBottomFilter)(nil)).Elem()
}

func (o DashboardTopBottomFilterOutput) ToDashboardTopBottomFilterOutput() DashboardTopBottomFilterOutput {
	return o
}

func (o DashboardTopBottomFilterOutput) ToDashboardTopBottomFilterOutputWithContext(ctx context.Context) DashboardTopBottomFilterOutput {
	return o
}

func (o DashboardTopBottomFilterOutput) ToDashboardTopBottomFilterPtrOutput() DashboardTopBottomFilterPtrOutput {
	return o.ToDashboardTopBottomFilterPtrOutputWithContext(context.Background())
}

func (o DashboardTopBottomFilterOutput) ToDashboardTopBottomFilterPtrOutputWithContext(ctx context.Context) DashboardTopBottomFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTopBottomFilter) *DashboardTopBottomFilter {
		return &v
	}).(DashboardTopBottomFilterPtrOutput)
}

// The aggregation and sort configuration of the top bottom filter.
func (o DashboardTopBottomFilterOutput) AggregationSortConfigurations() DashboardAggregationSortConfigurationArrayOutput {
	return o.ApplyT(func(v DashboardTopBottomFilter) []DashboardAggregationSortConfiguration {
		return v.AggregationSortConfigurations
	}).(DashboardAggregationSortConfigurationArrayOutput)
}

// The column that the filter is applied to.
func (o DashboardTopBottomFilterOutput) Column() DashboardColumnIdentifierOutput {
	return o.ApplyT(func(v DashboardTopBottomFilter) DashboardColumnIdentifier { return v.Column }).(DashboardColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o DashboardTopBottomFilterOutput) DefaultFilterControlConfiguration() DashboardDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomFilter) *DashboardDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(DashboardDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o DashboardTopBottomFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTopBottomFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The number of items to include in the top bottom filter results.
func (o DashboardTopBottomFilterOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTopBottomFilter) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o DashboardTopBottomFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTopBottomFilterOutput) TimeGranularity() DashboardTimeGranularityPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomFilter) *DashboardTimeGranularity { return v.TimeGranularity }).(DashboardTimeGranularityPtrOutput)
}

type DashboardTopBottomFilterPtrOutput struct{ *pulumi.OutputState }

func (DashboardTopBottomFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTopBottomFilter)(nil)).Elem()
}

func (o DashboardTopBottomFilterPtrOutput) ToDashboardTopBottomFilterPtrOutput() DashboardTopBottomFilterPtrOutput {
	return o
}

func (o DashboardTopBottomFilterPtrOutput) ToDashboardTopBottomFilterPtrOutputWithContext(ctx context.Context) DashboardTopBottomFilterPtrOutput {
	return o
}

func (o DashboardTopBottomFilterPtrOutput) Elem() DashboardTopBottomFilterOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) DashboardTopBottomFilter {
		if v != nil {
			return *v
		}
		var ret DashboardTopBottomFilter
		return ret
	}).(DashboardTopBottomFilterOutput)
}

// The aggregation and sort configuration of the top bottom filter.
func (o DashboardTopBottomFilterPtrOutput) AggregationSortConfigurations() DashboardAggregationSortConfigurationArrayOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) []DashboardAggregationSortConfiguration {
		if v == nil {
			return nil
		}
		return v.AggregationSortConfigurations
	}).(DashboardAggregationSortConfigurationArrayOutput)
}

// The column that the filter is applied to.
func (o DashboardTopBottomFilterPtrOutput) Column() DashboardColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) *DashboardColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(DashboardColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o DashboardTopBottomFilterPtrOutput) DefaultFilterControlConfiguration() DashboardDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) *DashboardDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(DashboardDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o DashboardTopBottomFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The number of items to include in the top bottom filter results.
func (o DashboardTopBottomFilterPtrOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) *float64 {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.Float64PtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o DashboardTopBottomFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o DashboardTopBottomFilterPtrOutput) TimeGranularity() DashboardTimeGranularityPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomFilter) *DashboardTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(DashboardTimeGranularityPtrOutput)
}

type DashboardTopBottomMoversComputation struct {
	// The category field that is used in a computation.
	Category *DashboardDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The mover size setup of the top and bottom movers computation.
	MoverSize *float64 `pulumi:"moverSize"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The sort order setup of the top and bottom movers computation.
	SortOrder *DashboardTopBottomSortOrder `pulumi:"sortOrder"`
	// The time field that is used in a computation.
	Time *DashboardDimensionField `pulumi:"time"`
	// The computation type. Choose from the following options:
	//
	// - TOP: Top movers computation.
	// - BOTTOM: Bottom movers computation.
	Type DashboardTopBottomComputationType `pulumi:"type"`
	// The value field that is used in a computation.
	Value *DashboardMeasureField `pulumi:"value"`
}

// DashboardTopBottomMoversComputationInput is an input type that accepts DashboardTopBottomMoversComputationArgs and DashboardTopBottomMoversComputationOutput values.
// You can construct a concrete instance of `DashboardTopBottomMoversComputationInput` via:
//
//	DashboardTopBottomMoversComputationArgs{...}
type DashboardTopBottomMoversComputationInput interface {
	pulumi.Input

	ToDashboardTopBottomMoversComputationOutput() DashboardTopBottomMoversComputationOutput
	ToDashboardTopBottomMoversComputationOutputWithContext(context.Context) DashboardTopBottomMoversComputationOutput
}

type DashboardTopBottomMoversComputationArgs struct {
	// The category field that is used in a computation.
	Category DashboardDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The mover size setup of the top and bottom movers computation.
	MoverSize pulumi.Float64PtrInput `pulumi:"moverSize"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sort order setup of the top and bottom movers computation.
	SortOrder DashboardTopBottomSortOrderPtrInput `pulumi:"sortOrder"`
	// The time field that is used in a computation.
	Time DashboardDimensionFieldPtrInput `pulumi:"time"`
	// The computation type. Choose from the following options:
	//
	// - TOP: Top movers computation.
	// - BOTTOM: Bottom movers computation.
	Type DashboardTopBottomComputationTypeInput `pulumi:"type"`
	// The value field that is used in a computation.
	Value DashboardMeasureFieldPtrInput `pulumi:"value"`
}

func (DashboardTopBottomMoversComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTopBottomMoversComputation)(nil)).Elem()
}

func (i DashboardTopBottomMoversComputationArgs) ToDashboardTopBottomMoversComputationOutput() DashboardTopBottomMoversComputationOutput {
	return i.ToDashboardTopBottomMoversComputationOutputWithContext(context.Background())
}

func (i DashboardTopBottomMoversComputationArgs) ToDashboardTopBottomMoversComputationOutputWithContext(ctx context.Context) DashboardTopBottomMoversComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomMoversComputationOutput)
}

func (i DashboardTopBottomMoversComputationArgs) ToDashboardTopBottomMoversComputationPtrOutput() DashboardTopBottomMoversComputationPtrOutput {
	return i.ToDashboardTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (i DashboardTopBottomMoversComputationArgs) ToDashboardTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomMoversComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomMoversComputationOutput).ToDashboardTopBottomMoversComputationPtrOutputWithContext(ctx)
}

// DashboardTopBottomMoversComputationPtrInput is an input type that accepts DashboardTopBottomMoversComputationArgs, DashboardTopBottomMoversComputationPtr and DashboardTopBottomMoversComputationPtrOutput values.
// You can construct a concrete instance of `DashboardTopBottomMoversComputationPtrInput` via:
//
//	        DashboardTopBottomMoversComputationArgs{...}
//
//	or:
//
//	        nil
type DashboardTopBottomMoversComputationPtrInput interface {
	pulumi.Input

	ToDashboardTopBottomMoversComputationPtrOutput() DashboardTopBottomMoversComputationPtrOutput
	ToDashboardTopBottomMoversComputationPtrOutputWithContext(context.Context) DashboardTopBottomMoversComputationPtrOutput
}

type dashboardTopBottomMoversComputationPtrType DashboardTopBottomMoversComputationArgs

func DashboardTopBottomMoversComputationPtr(v *DashboardTopBottomMoversComputationArgs) DashboardTopBottomMoversComputationPtrInput {
	return (*dashboardTopBottomMoversComputationPtrType)(v)
}

func (*dashboardTopBottomMoversComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTopBottomMoversComputation)(nil)).Elem()
}

func (i *dashboardTopBottomMoversComputationPtrType) ToDashboardTopBottomMoversComputationPtrOutput() DashboardTopBottomMoversComputationPtrOutput {
	return i.ToDashboardTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (i *dashboardTopBottomMoversComputationPtrType) ToDashboardTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomMoversComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomMoversComputationPtrOutput)
}

type DashboardTopBottomMoversComputationOutput struct{ *pulumi.OutputState }

func (DashboardTopBottomMoversComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTopBottomMoversComputation)(nil)).Elem()
}

func (o DashboardTopBottomMoversComputationOutput) ToDashboardTopBottomMoversComputationOutput() DashboardTopBottomMoversComputationOutput {
	return o
}

func (o DashboardTopBottomMoversComputationOutput) ToDashboardTopBottomMoversComputationOutputWithContext(ctx context.Context) DashboardTopBottomMoversComputationOutput {
	return o
}

func (o DashboardTopBottomMoversComputationOutput) ToDashboardTopBottomMoversComputationPtrOutput() DashboardTopBottomMoversComputationPtrOutput {
	return o.ToDashboardTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (o DashboardTopBottomMoversComputationOutput) ToDashboardTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomMoversComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTopBottomMoversComputation) *DashboardTopBottomMoversComputation {
		return &v
	}).(DashboardTopBottomMoversComputationPtrOutput)
}

// The category field that is used in a computation.
func (o DashboardTopBottomMoversComputationOutput) Category() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) *DashboardDimensionField { return v.Category }).(DashboardDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o DashboardTopBottomMoversComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The mover size setup of the top and bottom movers computation.
func (o DashboardTopBottomMoversComputationOutput) MoverSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) *float64 { return v.MoverSize }).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o DashboardTopBottomMoversComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sort order setup of the top and bottom movers computation.
func (o DashboardTopBottomMoversComputationOutput) SortOrder() DashboardTopBottomSortOrderPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) *DashboardTopBottomSortOrder { return v.SortOrder }).(DashboardTopBottomSortOrderPtrOutput)
}

// The time field that is used in a computation.
func (o DashboardTopBottomMoversComputationOutput) Time() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) *DashboardDimensionField { return v.Time }).(DashboardDimensionFieldPtrOutput)
}

// The computation type. Choose from the following options:
//
// - TOP: Top movers computation.
// - BOTTOM: Bottom movers computation.
func (o DashboardTopBottomMoversComputationOutput) Type() DashboardTopBottomComputationTypeOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) DashboardTopBottomComputationType { return v.Type }).(DashboardTopBottomComputationTypeOutput)
}

// The value field that is used in a computation.
func (o DashboardTopBottomMoversComputationOutput) Value() DashboardMeasureFieldPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomMoversComputation) *DashboardMeasureField { return v.Value }).(DashboardMeasureFieldPtrOutput)
}

type DashboardTopBottomMoversComputationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTopBottomMoversComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTopBottomMoversComputation)(nil)).Elem()
}

func (o DashboardTopBottomMoversComputationPtrOutput) ToDashboardTopBottomMoversComputationPtrOutput() DashboardTopBottomMoversComputationPtrOutput {
	return o
}

func (o DashboardTopBottomMoversComputationPtrOutput) ToDashboardTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomMoversComputationPtrOutput {
	return o
}

func (o DashboardTopBottomMoversComputationPtrOutput) Elem() DashboardTopBottomMoversComputationOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) DashboardTopBottomMoversComputation {
		if v != nil {
			return *v
		}
		var ret DashboardTopBottomMoversComputation
		return ret
	}).(DashboardTopBottomMoversComputationOutput)
}

// The category field that is used in a computation.
func (o DashboardTopBottomMoversComputationPtrOutput) Category() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(DashboardDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o DashboardTopBottomMoversComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The mover size setup of the top and bottom movers computation.
func (o DashboardTopBottomMoversComputationPtrOutput) MoverSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.MoverSize
	}).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o DashboardTopBottomMoversComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sort order setup of the top and bottom movers computation.
func (o DashboardTopBottomMoversComputationPtrOutput) SortOrder() DashboardTopBottomSortOrderPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *DashboardTopBottomSortOrder {
		if v == nil {
			return nil
		}
		return v.SortOrder
	}).(DashboardTopBottomSortOrderPtrOutput)
}

// The time field that is used in a computation.
func (o DashboardTopBottomMoversComputationPtrOutput) Time() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(DashboardDimensionFieldPtrOutput)
}

// The computation type. Choose from the following options:
//
// - TOP: Top movers computation.
// - BOTTOM: Bottom movers computation.
func (o DashboardTopBottomMoversComputationPtrOutput) Type() DashboardTopBottomComputationTypePtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *DashboardTopBottomComputationType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(DashboardTopBottomComputationTypePtrOutput)
}

// The value field that is used in a computation.
func (o DashboardTopBottomMoversComputationPtrOutput) Value() DashboardMeasureFieldPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomMoversComputation) *DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(DashboardMeasureFieldPtrOutput)
}

type DashboardTopBottomRankedComputation struct {
	// The category field that is used in a computation.
	Category *DashboardDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The result size of a top and bottom ranked computation.
	ResultSize *float64 `pulumi:"resultSize"`
	// The computation type. Choose one of the following options:
	//
	// - TOP: A top ranked computation.
	// - BOTTOM: A bottom ranked computation.
	Type DashboardTopBottomComputationType `pulumi:"type"`
	// The value field that is used in a computation.
	Value *DashboardMeasureField `pulumi:"value"`
}

// DashboardTopBottomRankedComputationInput is an input type that accepts DashboardTopBottomRankedComputationArgs and DashboardTopBottomRankedComputationOutput values.
// You can construct a concrete instance of `DashboardTopBottomRankedComputationInput` via:
//
//	DashboardTopBottomRankedComputationArgs{...}
type DashboardTopBottomRankedComputationInput interface {
	pulumi.Input

	ToDashboardTopBottomRankedComputationOutput() DashboardTopBottomRankedComputationOutput
	ToDashboardTopBottomRankedComputationOutputWithContext(context.Context) DashboardTopBottomRankedComputationOutput
}

type DashboardTopBottomRankedComputationArgs struct {
	// The category field that is used in a computation.
	Category DashboardDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The result size of a top and bottom ranked computation.
	ResultSize pulumi.Float64PtrInput `pulumi:"resultSize"`
	// The computation type. Choose one of the following options:
	//
	// - TOP: A top ranked computation.
	// - BOTTOM: A bottom ranked computation.
	Type DashboardTopBottomComputationTypeInput `pulumi:"type"`
	// The value field that is used in a computation.
	Value DashboardMeasureFieldPtrInput `pulumi:"value"`
}

func (DashboardTopBottomRankedComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTopBottomRankedComputation)(nil)).Elem()
}

func (i DashboardTopBottomRankedComputationArgs) ToDashboardTopBottomRankedComputationOutput() DashboardTopBottomRankedComputationOutput {
	return i.ToDashboardTopBottomRankedComputationOutputWithContext(context.Background())
}

func (i DashboardTopBottomRankedComputationArgs) ToDashboardTopBottomRankedComputationOutputWithContext(ctx context.Context) DashboardTopBottomRankedComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomRankedComputationOutput)
}

func (i DashboardTopBottomRankedComputationArgs) ToDashboardTopBottomRankedComputationPtrOutput() DashboardTopBottomRankedComputationPtrOutput {
	return i.ToDashboardTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (i DashboardTopBottomRankedComputationArgs) ToDashboardTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomRankedComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomRankedComputationOutput).ToDashboardTopBottomRankedComputationPtrOutputWithContext(ctx)
}

// DashboardTopBottomRankedComputationPtrInput is an input type that accepts DashboardTopBottomRankedComputationArgs, DashboardTopBottomRankedComputationPtr and DashboardTopBottomRankedComputationPtrOutput values.
// You can construct a concrete instance of `DashboardTopBottomRankedComputationPtrInput` via:
//
//	        DashboardTopBottomRankedComputationArgs{...}
//
//	or:
//
//	        nil
type DashboardTopBottomRankedComputationPtrInput interface {
	pulumi.Input

	ToDashboardTopBottomRankedComputationPtrOutput() DashboardTopBottomRankedComputationPtrOutput
	ToDashboardTopBottomRankedComputationPtrOutputWithContext(context.Context) DashboardTopBottomRankedComputationPtrOutput
}

type dashboardTopBottomRankedComputationPtrType DashboardTopBottomRankedComputationArgs

func DashboardTopBottomRankedComputationPtr(v *DashboardTopBottomRankedComputationArgs) DashboardTopBottomRankedComputationPtrInput {
	return (*dashboardTopBottomRankedComputationPtrType)(v)
}

func (*dashboardTopBottomRankedComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTopBottomRankedComputation)(nil)).Elem()
}

func (i *dashboardTopBottomRankedComputationPtrType) ToDashboardTopBottomRankedComputationPtrOutput() DashboardTopBottomRankedComputationPtrOutput {
	return i.ToDashboardTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (i *dashboardTopBottomRankedComputationPtrType) ToDashboardTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomRankedComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTopBottomRankedComputationPtrOutput)
}

type DashboardTopBottomRankedComputationOutput struct{ *pulumi.OutputState }

func (DashboardTopBottomRankedComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTopBottomRankedComputation)(nil)).Elem()
}

func (o DashboardTopBottomRankedComputationOutput) ToDashboardTopBottomRankedComputationOutput() DashboardTopBottomRankedComputationOutput {
	return o
}

func (o DashboardTopBottomRankedComputationOutput) ToDashboardTopBottomRankedComputationOutputWithContext(ctx context.Context) DashboardTopBottomRankedComputationOutput {
	return o
}

func (o DashboardTopBottomRankedComputationOutput) ToDashboardTopBottomRankedComputationPtrOutput() DashboardTopBottomRankedComputationPtrOutput {
	return o.ToDashboardTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (o DashboardTopBottomRankedComputationOutput) ToDashboardTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomRankedComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTopBottomRankedComputation) *DashboardTopBottomRankedComputation {
		return &v
	}).(DashboardTopBottomRankedComputationPtrOutput)
}

// The category field that is used in a computation.
func (o DashboardTopBottomRankedComputationOutput) Category() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomRankedComputation) *DashboardDimensionField { return v.Category }).(DashboardDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o DashboardTopBottomRankedComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTopBottomRankedComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o DashboardTopBottomRankedComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomRankedComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The result size of a top and bottom ranked computation.
func (o DashboardTopBottomRankedComputationOutput) ResultSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardTopBottomRankedComputation) *float64 { return v.ResultSize }).(pulumi.Float64PtrOutput)
}

// The computation type. Choose one of the following options:
//
// - TOP: A top ranked computation.
// - BOTTOM: A bottom ranked computation.
func (o DashboardTopBottomRankedComputationOutput) Type() DashboardTopBottomComputationTypeOutput {
	return o.ApplyT(func(v DashboardTopBottomRankedComputation) DashboardTopBottomComputationType { return v.Type }).(DashboardTopBottomComputationTypeOutput)
}

// The value field that is used in a computation.
func (o DashboardTopBottomRankedComputationOutput) Value() DashboardMeasureFieldPtrOutput {
	return o.ApplyT(func(v DashboardTopBottomRankedComputation) *DashboardMeasureField { return v.Value }).(DashboardMeasureFieldPtrOutput)
}

type DashboardTopBottomRankedComputationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTopBottomRankedComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTopBottomRankedComputation)(nil)).Elem()
}

func (o DashboardTopBottomRankedComputationPtrOutput) ToDashboardTopBottomRankedComputationPtrOutput() DashboardTopBottomRankedComputationPtrOutput {
	return o
}

func (o DashboardTopBottomRankedComputationPtrOutput) ToDashboardTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) DashboardTopBottomRankedComputationPtrOutput {
	return o
}

func (o DashboardTopBottomRankedComputationPtrOutput) Elem() DashboardTopBottomRankedComputationOutput {
	return o.ApplyT(func(v *DashboardTopBottomRankedComputation) DashboardTopBottomRankedComputation {
		if v != nil {
			return *v
		}
		var ret DashboardTopBottomRankedComputation
		return ret
	}).(DashboardTopBottomRankedComputationOutput)
}

// The category field that is used in a computation.
func (o DashboardTopBottomRankedComputationPtrOutput) Category() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomRankedComputation) *DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(DashboardDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o DashboardTopBottomRankedComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomRankedComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o DashboardTopBottomRankedComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomRankedComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The result size of a top and bottom ranked computation.
func (o DashboardTopBottomRankedComputationPtrOutput) ResultSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomRankedComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.ResultSize
	}).(pulumi.Float64PtrOutput)
}

// The computation type. Choose one of the following options:
//
// - TOP: A top ranked computation.
// - BOTTOM: A bottom ranked computation.
func (o DashboardTopBottomRankedComputationPtrOutput) Type() DashboardTopBottomComputationTypePtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomRankedComputation) *DashboardTopBottomComputationType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(DashboardTopBottomComputationTypePtrOutput)
}

// The value field that is used in a computation.
func (o DashboardTopBottomRankedComputationPtrOutput) Value() DashboardMeasureFieldPtrOutput {
	return o.ApplyT(func(v *DashboardTopBottomRankedComputation) *DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(DashboardMeasureFieldPtrOutput)
}

type DashboardTotalAggregationComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The value field that is used in a computation.
	Value *DashboardMeasureField `pulumi:"value"`
}

// DashboardTotalAggregationComputationInput is an input type that accepts DashboardTotalAggregationComputationArgs and DashboardTotalAggregationComputationOutput values.
// You can construct a concrete instance of `DashboardTotalAggregationComputationInput` via:
//
//	DashboardTotalAggregationComputationArgs{...}
type DashboardTotalAggregationComputationInput interface {
	pulumi.Input

	ToDashboardTotalAggregationComputationOutput() DashboardTotalAggregationComputationOutput
	ToDashboardTotalAggregationComputationOutputWithContext(context.Context) DashboardTotalAggregationComputationOutput
}

type DashboardTotalAggregationComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value field that is used in a computation.
	Value DashboardMeasureFieldPtrInput `pulumi:"value"`
}

func (DashboardTotalAggregationComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalAggregationComputation)(nil)).Elem()
}

func (i DashboardTotalAggregationComputationArgs) ToDashboardTotalAggregationComputationOutput() DashboardTotalAggregationComputationOutput {
	return i.ToDashboardTotalAggregationComputationOutputWithContext(context.Background())
}

func (i DashboardTotalAggregationComputationArgs) ToDashboardTotalAggregationComputationOutputWithContext(ctx context.Context) DashboardTotalAggregationComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalAggregationComputationOutput)
}

func (i DashboardTotalAggregationComputationArgs) ToDashboardTotalAggregationComputationPtrOutput() DashboardTotalAggregationComputationPtrOutput {
	return i.ToDashboardTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (i DashboardTotalAggregationComputationArgs) ToDashboardTotalAggregationComputationPtrOutputWithContext(ctx context.Context) DashboardTotalAggregationComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalAggregationComputationOutput).ToDashboardTotalAggregationComputationPtrOutputWithContext(ctx)
}

// DashboardTotalAggregationComputationPtrInput is an input type that accepts DashboardTotalAggregationComputationArgs, DashboardTotalAggregationComputationPtr and DashboardTotalAggregationComputationPtrOutput values.
// You can construct a concrete instance of `DashboardTotalAggregationComputationPtrInput` via:
//
//	        DashboardTotalAggregationComputationArgs{...}
//
//	or:
//
//	        nil
type DashboardTotalAggregationComputationPtrInput interface {
	pulumi.Input

	ToDashboardTotalAggregationComputationPtrOutput() DashboardTotalAggregationComputationPtrOutput
	ToDashboardTotalAggregationComputationPtrOutputWithContext(context.Context) DashboardTotalAggregationComputationPtrOutput
}

type dashboardTotalAggregationComputationPtrType DashboardTotalAggregationComputationArgs

func DashboardTotalAggregationComputationPtr(v *DashboardTotalAggregationComputationArgs) DashboardTotalAggregationComputationPtrInput {
	return (*dashboardTotalAggregationComputationPtrType)(v)
}

func (*dashboardTotalAggregationComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTotalAggregationComputation)(nil)).Elem()
}

func (i *dashboardTotalAggregationComputationPtrType) ToDashboardTotalAggregationComputationPtrOutput() DashboardTotalAggregationComputationPtrOutput {
	return i.ToDashboardTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (i *dashboardTotalAggregationComputationPtrType) ToDashboardTotalAggregationComputationPtrOutputWithContext(ctx context.Context) DashboardTotalAggregationComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalAggregationComputationPtrOutput)
}

type DashboardTotalAggregationComputationOutput struct{ *pulumi.OutputState }

func (DashboardTotalAggregationComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalAggregationComputation)(nil)).Elem()
}

func (o DashboardTotalAggregationComputationOutput) ToDashboardTotalAggregationComputationOutput() DashboardTotalAggregationComputationOutput {
	return o
}

func (o DashboardTotalAggregationComputationOutput) ToDashboardTotalAggregationComputationOutputWithContext(ctx context.Context) DashboardTotalAggregationComputationOutput {
	return o
}

func (o DashboardTotalAggregationComputationOutput) ToDashboardTotalAggregationComputationPtrOutput() DashboardTotalAggregationComputationPtrOutput {
	return o.ToDashboardTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (o DashboardTotalAggregationComputationOutput) ToDashboardTotalAggregationComputationPtrOutputWithContext(ctx context.Context) DashboardTotalAggregationComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTotalAggregationComputation) *DashboardTotalAggregationComputation {
		return &v
	}).(DashboardTotalAggregationComputationPtrOutput)
}

// The ID for a computation.
func (o DashboardTotalAggregationComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTotalAggregationComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o DashboardTotalAggregationComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTotalAggregationComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value field that is used in a computation.
func (o DashboardTotalAggregationComputationOutput) Value() DashboardMeasureFieldPtrOutput {
	return o.ApplyT(func(v DashboardTotalAggregationComputation) *DashboardMeasureField { return v.Value }).(DashboardMeasureFieldPtrOutput)
}

type DashboardTotalAggregationComputationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTotalAggregationComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTotalAggregationComputation)(nil)).Elem()
}

func (o DashboardTotalAggregationComputationPtrOutput) ToDashboardTotalAggregationComputationPtrOutput() DashboardTotalAggregationComputationPtrOutput {
	return o
}

func (o DashboardTotalAggregationComputationPtrOutput) ToDashboardTotalAggregationComputationPtrOutputWithContext(ctx context.Context) DashboardTotalAggregationComputationPtrOutput {
	return o
}

func (o DashboardTotalAggregationComputationPtrOutput) Elem() DashboardTotalAggregationComputationOutput {
	return o.ApplyT(func(v *DashboardTotalAggregationComputation) DashboardTotalAggregationComputation {
		if v != nil {
			return *v
		}
		var ret DashboardTotalAggregationComputation
		return ret
	}).(DashboardTotalAggregationComputationOutput)
}

// The ID for a computation.
func (o DashboardTotalAggregationComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTotalAggregationComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o DashboardTotalAggregationComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTotalAggregationComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The value field that is used in a computation.
func (o DashboardTotalAggregationComputationPtrOutput) Value() DashboardMeasureFieldPtrOutput {
	return o.ApplyT(func(v *DashboardTotalAggregationComputation) *DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(DashboardMeasureFieldPtrOutput)
}

type DashboardTotalAggregationFunction struct {
	// A built in aggregation function for total values.
	SimpleTotalAggregationFunction *DashboardSimpleTotalAggregationFunction `pulumi:"simpleTotalAggregationFunction"`
}

// DashboardTotalAggregationFunctionInput is an input type that accepts DashboardTotalAggregationFunctionArgs and DashboardTotalAggregationFunctionOutput values.
// You can construct a concrete instance of `DashboardTotalAggregationFunctionInput` via:
//
//	DashboardTotalAggregationFunctionArgs{...}
type DashboardTotalAggregationFunctionInput interface {
	pulumi.Input

	ToDashboardTotalAggregationFunctionOutput() DashboardTotalAggregationFunctionOutput
	ToDashboardTotalAggregationFunctionOutputWithContext(context.Context) DashboardTotalAggregationFunctionOutput
}

type DashboardTotalAggregationFunctionArgs struct {
	// A built in aggregation function for total values.
	SimpleTotalAggregationFunction DashboardSimpleTotalAggregationFunctionPtrInput `pulumi:"simpleTotalAggregationFunction"`
}

func (DashboardTotalAggregationFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalAggregationFunction)(nil)).Elem()
}

func (i DashboardTotalAggregationFunctionArgs) ToDashboardTotalAggregationFunctionOutput() DashboardTotalAggregationFunctionOutput {
	return i.ToDashboardTotalAggregationFunctionOutputWithContext(context.Background())
}

func (i DashboardTotalAggregationFunctionArgs) ToDashboardTotalAggregationFunctionOutputWithContext(ctx context.Context) DashboardTotalAggregationFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalAggregationFunctionOutput)
}

type DashboardTotalAggregationFunctionOutput struct{ *pulumi.OutputState }

func (DashboardTotalAggregationFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalAggregationFunction)(nil)).Elem()
}

func (o DashboardTotalAggregationFunctionOutput) ToDashboardTotalAggregationFunctionOutput() DashboardTotalAggregationFunctionOutput {
	return o
}

func (o DashboardTotalAggregationFunctionOutput) ToDashboardTotalAggregationFunctionOutputWithContext(ctx context.Context) DashboardTotalAggregationFunctionOutput {
	return o
}

// A built in aggregation function for total values.
func (o DashboardTotalAggregationFunctionOutput) SimpleTotalAggregationFunction() DashboardSimpleTotalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v DashboardTotalAggregationFunction) *DashboardSimpleTotalAggregationFunction {
		return v.SimpleTotalAggregationFunction
	}).(DashboardSimpleTotalAggregationFunctionPtrOutput)
}

type DashboardTotalAggregationOption struct {
	// The field id that's associated with the total aggregation option.
	FieldId string `pulumi:"fieldId"`
	// The total aggregation function that you want to set for a specified field id.
	TotalAggregationFunction DashboardTotalAggregationFunction `pulumi:"totalAggregationFunction"`
}

// DashboardTotalAggregationOptionInput is an input type that accepts DashboardTotalAggregationOptionArgs and DashboardTotalAggregationOptionOutput values.
// You can construct a concrete instance of `DashboardTotalAggregationOptionInput` via:
//
//	DashboardTotalAggregationOptionArgs{...}
type DashboardTotalAggregationOptionInput interface {
	pulumi.Input

	ToDashboardTotalAggregationOptionOutput() DashboardTotalAggregationOptionOutput
	ToDashboardTotalAggregationOptionOutputWithContext(context.Context) DashboardTotalAggregationOptionOutput
}

type DashboardTotalAggregationOptionArgs struct {
	// The field id that's associated with the total aggregation option.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The total aggregation function that you want to set for a specified field id.
	TotalAggregationFunction DashboardTotalAggregationFunctionInput `pulumi:"totalAggregationFunction"`
}

func (DashboardTotalAggregationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalAggregationOption)(nil)).Elem()
}

func (i DashboardTotalAggregationOptionArgs) ToDashboardTotalAggregationOptionOutput() DashboardTotalAggregationOptionOutput {
	return i.ToDashboardTotalAggregationOptionOutputWithContext(context.Background())
}

func (i DashboardTotalAggregationOptionArgs) ToDashboardTotalAggregationOptionOutputWithContext(ctx context.Context) DashboardTotalAggregationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalAggregationOptionOutput)
}

// DashboardTotalAggregationOptionArrayInput is an input type that accepts DashboardTotalAggregationOptionArray and DashboardTotalAggregationOptionArrayOutput values.
// You can construct a concrete instance of `DashboardTotalAggregationOptionArrayInput` via:
//
//	DashboardTotalAggregationOptionArray{ DashboardTotalAggregationOptionArgs{...} }
type DashboardTotalAggregationOptionArrayInput interface {
	pulumi.Input

	ToDashboardTotalAggregationOptionArrayOutput() DashboardTotalAggregationOptionArrayOutput
	ToDashboardTotalAggregationOptionArrayOutputWithContext(context.Context) DashboardTotalAggregationOptionArrayOutput
}

type DashboardTotalAggregationOptionArray []DashboardTotalAggregationOptionInput

func (DashboardTotalAggregationOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTotalAggregationOption)(nil)).Elem()
}

func (i DashboardTotalAggregationOptionArray) ToDashboardTotalAggregationOptionArrayOutput() DashboardTotalAggregationOptionArrayOutput {
	return i.ToDashboardTotalAggregationOptionArrayOutputWithContext(context.Background())
}

func (i DashboardTotalAggregationOptionArray) ToDashboardTotalAggregationOptionArrayOutputWithContext(ctx context.Context) DashboardTotalAggregationOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalAggregationOptionArrayOutput)
}

type DashboardTotalAggregationOptionOutput struct{ *pulumi.OutputState }

func (DashboardTotalAggregationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalAggregationOption)(nil)).Elem()
}

func (o DashboardTotalAggregationOptionOutput) ToDashboardTotalAggregationOptionOutput() DashboardTotalAggregationOptionOutput {
	return o
}

func (o DashboardTotalAggregationOptionOutput) ToDashboardTotalAggregationOptionOutputWithContext(ctx context.Context) DashboardTotalAggregationOptionOutput {
	return o
}

// The field id that's associated with the total aggregation option.
func (o DashboardTotalAggregationOptionOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTotalAggregationOption) string { return v.FieldId }).(pulumi.StringOutput)
}

// The total aggregation function that you want to set for a specified field id.
func (o DashboardTotalAggregationOptionOutput) TotalAggregationFunction() DashboardTotalAggregationFunctionOutput {
	return o.ApplyT(func(v DashboardTotalAggregationOption) DashboardTotalAggregationFunction {
		return v.TotalAggregationFunction
	}).(DashboardTotalAggregationFunctionOutput)
}

type DashboardTotalAggregationOptionArrayOutput struct{ *pulumi.OutputState }

func (DashboardTotalAggregationOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardTotalAggregationOption)(nil)).Elem()
}

func (o DashboardTotalAggregationOptionArrayOutput) ToDashboardTotalAggregationOptionArrayOutput() DashboardTotalAggregationOptionArrayOutput {
	return o
}

func (o DashboardTotalAggregationOptionArrayOutput) ToDashboardTotalAggregationOptionArrayOutputWithContext(ctx context.Context) DashboardTotalAggregationOptionArrayOutput {
	return o
}

func (o DashboardTotalAggregationOptionArrayOutput) Index(i pulumi.IntInput) DashboardTotalAggregationOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardTotalAggregationOption {
		return vs[0].([]DashboardTotalAggregationOption)[vs[1].(int)]
	}).(DashboardTotalAggregationOptionOutput)
}

type DashboardTotalOptions struct {
	// The custom label string for the total cells.
	CustomLabel *string `pulumi:"customLabel"`
	// The placement (start, end) for the total cells.
	Placement *DashboardTableTotalsPlacement `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus *DashboardTableTotalsScrollStatus `pulumi:"scrollStatus"`
	// The total aggregation settings for each value field.
	TotalAggregationOptions []DashboardTotalAggregationOption `pulumi:"totalAggregationOptions"`
	// Cell styling options for the total cells.
	TotalCellStyle *DashboardTableCellStyle `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility *DashboardVisibility `pulumi:"totalsVisibility"`
}

// DashboardTotalOptionsInput is an input type that accepts DashboardTotalOptionsArgs and DashboardTotalOptionsOutput values.
// You can construct a concrete instance of `DashboardTotalOptionsInput` via:
//
//	DashboardTotalOptionsArgs{...}
type DashboardTotalOptionsInput interface {
	pulumi.Input

	ToDashboardTotalOptionsOutput() DashboardTotalOptionsOutput
	ToDashboardTotalOptionsOutputWithContext(context.Context) DashboardTotalOptionsOutput
}

type DashboardTotalOptionsArgs struct {
	// The custom label string for the total cells.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The placement (start, end) for the total cells.
	Placement DashboardTableTotalsPlacementPtrInput `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus DashboardTableTotalsScrollStatusPtrInput `pulumi:"scrollStatus"`
	// The total aggregation settings for each value field.
	TotalAggregationOptions DashboardTotalAggregationOptionArrayInput `pulumi:"totalAggregationOptions"`
	// Cell styling options for the total cells.
	TotalCellStyle DashboardTableCellStylePtrInput `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility DashboardVisibilityPtrInput `pulumi:"totalsVisibility"`
}

func (DashboardTotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalOptions)(nil)).Elem()
}

func (i DashboardTotalOptionsArgs) ToDashboardTotalOptionsOutput() DashboardTotalOptionsOutput {
	return i.ToDashboardTotalOptionsOutputWithContext(context.Background())
}

func (i DashboardTotalOptionsArgs) ToDashboardTotalOptionsOutputWithContext(ctx context.Context) DashboardTotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalOptionsOutput)
}

func (i DashboardTotalOptionsArgs) ToDashboardTotalOptionsPtrOutput() DashboardTotalOptionsPtrOutput {
	return i.ToDashboardTotalOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTotalOptionsArgs) ToDashboardTotalOptionsPtrOutputWithContext(ctx context.Context) DashboardTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalOptionsOutput).ToDashboardTotalOptionsPtrOutputWithContext(ctx)
}

// DashboardTotalOptionsPtrInput is an input type that accepts DashboardTotalOptionsArgs, DashboardTotalOptionsPtr and DashboardTotalOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTotalOptionsPtrInput` via:
//
//	        DashboardTotalOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTotalOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTotalOptionsPtrOutput() DashboardTotalOptionsPtrOutput
	ToDashboardTotalOptionsPtrOutputWithContext(context.Context) DashboardTotalOptionsPtrOutput
}

type dashboardTotalOptionsPtrType DashboardTotalOptionsArgs

func DashboardTotalOptionsPtr(v *DashboardTotalOptionsArgs) DashboardTotalOptionsPtrInput {
	return (*dashboardTotalOptionsPtrType)(v)
}

func (*dashboardTotalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTotalOptions)(nil)).Elem()
}

func (i *dashboardTotalOptionsPtrType) ToDashboardTotalOptionsPtrOutput() DashboardTotalOptionsPtrOutput {
	return i.ToDashboardTotalOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTotalOptionsPtrType) ToDashboardTotalOptionsPtrOutputWithContext(ctx context.Context) DashboardTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTotalOptionsPtrOutput)
}

type DashboardTotalOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTotalOptions)(nil)).Elem()
}

func (o DashboardTotalOptionsOutput) ToDashboardTotalOptionsOutput() DashboardTotalOptionsOutput {
	return o
}

func (o DashboardTotalOptionsOutput) ToDashboardTotalOptionsOutputWithContext(ctx context.Context) DashboardTotalOptionsOutput {
	return o
}

func (o DashboardTotalOptionsOutput) ToDashboardTotalOptionsPtrOutput() DashboardTotalOptionsPtrOutput {
	return o.ToDashboardTotalOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTotalOptionsOutput) ToDashboardTotalOptionsPtrOutputWithContext(ctx context.Context) DashboardTotalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTotalOptions) *DashboardTotalOptions {
		return &v
	}).(DashboardTotalOptionsPtrOutput)
}

// The custom label string for the total cells.
func (o DashboardTotalOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTotalOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The placement (start, end) for the total cells.
func (o DashboardTotalOptionsOutput) Placement() DashboardTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v DashboardTotalOptions) *DashboardTableTotalsPlacement { return v.Placement }).(DashboardTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o DashboardTotalOptionsOutput) ScrollStatus() DashboardTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v DashboardTotalOptions) *DashboardTableTotalsScrollStatus { return v.ScrollStatus }).(DashboardTableTotalsScrollStatusPtrOutput)
}

// The total aggregation settings for each value field.
func (o DashboardTotalOptionsOutput) TotalAggregationOptions() DashboardTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v DashboardTotalOptions) []DashboardTotalAggregationOption { return v.TotalAggregationOptions }).(DashboardTotalAggregationOptionArrayOutput)
}

// Cell styling options for the total cells.
func (o DashboardTotalOptionsOutput) TotalCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v DashboardTotalOptions) *DashboardTableCellStyle { return v.TotalCellStyle }).(DashboardTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o DashboardTotalOptionsOutput) TotalsVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTotalOptions) *DashboardVisibility { return v.TotalsVisibility }).(DashboardVisibilityPtrOutput)
}

type DashboardTotalOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTotalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTotalOptions)(nil)).Elem()
}

func (o DashboardTotalOptionsPtrOutput) ToDashboardTotalOptionsPtrOutput() DashboardTotalOptionsPtrOutput {
	return o
}

func (o DashboardTotalOptionsPtrOutput) ToDashboardTotalOptionsPtrOutputWithContext(ctx context.Context) DashboardTotalOptionsPtrOutput {
	return o
}

func (o DashboardTotalOptionsPtrOutput) Elem() DashboardTotalOptionsOutput {
	return o.ApplyT(func(v *DashboardTotalOptions) DashboardTotalOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTotalOptions
		return ret
	}).(DashboardTotalOptionsOutput)
}

// The custom label string for the total cells.
func (o DashboardTotalOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTotalOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The placement (start, end) for the total cells.
func (o DashboardTotalOptionsPtrOutput) Placement() DashboardTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v *DashboardTotalOptions) *DashboardTableTotalsPlacement {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(DashboardTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o DashboardTotalOptionsPtrOutput) ScrollStatus() DashboardTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v *DashboardTotalOptions) *DashboardTableTotalsScrollStatus {
		if v == nil {
			return nil
		}
		return v.ScrollStatus
	}).(DashboardTableTotalsScrollStatusPtrOutput)
}

// The total aggregation settings for each value field.
func (o DashboardTotalOptionsPtrOutput) TotalAggregationOptions() DashboardTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v *DashboardTotalOptions) []DashboardTotalAggregationOption {
		if v == nil {
			return nil
		}
		return v.TotalAggregationOptions
	}).(DashboardTotalAggregationOptionArrayOutput)
}

// Cell styling options for the total cells.
func (o DashboardTotalOptionsPtrOutput) TotalCellStyle() DashboardTableCellStylePtrOutput {
	return o.ApplyT(func(v *DashboardTotalOptions) *DashboardTableCellStyle {
		if v == nil {
			return nil
		}
		return v.TotalCellStyle
	}).(DashboardTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o DashboardTotalOptionsPtrOutput) TotalsVisibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardTotalOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.TotalsVisibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardTreeMapAggregatedFieldWells struct {
	// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
	Colors []DashboardMeasureField `pulumi:"colors"`
	// The group by field well of a tree map. Values are grouped based on group by fields.
	Groups []DashboardDimensionField `pulumi:"groups"`
	// The size field well of a tree map. Values are aggregated based on group by fields.
	Sizes []DashboardMeasureField `pulumi:"sizes"`
}

// DashboardTreeMapAggregatedFieldWellsInput is an input type that accepts DashboardTreeMapAggregatedFieldWellsArgs and DashboardTreeMapAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `DashboardTreeMapAggregatedFieldWellsInput` via:
//
//	DashboardTreeMapAggregatedFieldWellsArgs{...}
type DashboardTreeMapAggregatedFieldWellsInput interface {
	pulumi.Input

	ToDashboardTreeMapAggregatedFieldWellsOutput() DashboardTreeMapAggregatedFieldWellsOutput
	ToDashboardTreeMapAggregatedFieldWellsOutputWithContext(context.Context) DashboardTreeMapAggregatedFieldWellsOutput
}

type DashboardTreeMapAggregatedFieldWellsArgs struct {
	// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
	Colors DashboardMeasureFieldArrayInput `pulumi:"colors"`
	// The group by field well of a tree map. Values are grouped based on group by fields.
	Groups DashboardDimensionFieldArrayInput `pulumi:"groups"`
	// The size field well of a tree map. Values are aggregated based on group by fields.
	Sizes DashboardMeasureFieldArrayInput `pulumi:"sizes"`
}

func (DashboardTreeMapAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (i DashboardTreeMapAggregatedFieldWellsArgs) ToDashboardTreeMapAggregatedFieldWellsOutput() DashboardTreeMapAggregatedFieldWellsOutput {
	return i.ToDashboardTreeMapAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i DashboardTreeMapAggregatedFieldWellsArgs) ToDashboardTreeMapAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardTreeMapAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapAggregatedFieldWellsOutput)
}

func (i DashboardTreeMapAggregatedFieldWellsArgs) ToDashboardTreeMapAggregatedFieldWellsPtrOutput() DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return i.ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardTreeMapAggregatedFieldWellsArgs) ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapAggregatedFieldWellsOutput).ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// DashboardTreeMapAggregatedFieldWellsPtrInput is an input type that accepts DashboardTreeMapAggregatedFieldWellsArgs, DashboardTreeMapAggregatedFieldWellsPtr and DashboardTreeMapAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardTreeMapAggregatedFieldWellsPtrInput` via:
//
//	        DashboardTreeMapAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardTreeMapAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardTreeMapAggregatedFieldWellsPtrOutput() DashboardTreeMapAggregatedFieldWellsPtrOutput
	ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Context) DashboardTreeMapAggregatedFieldWellsPtrOutput
}

type dashboardTreeMapAggregatedFieldWellsPtrType DashboardTreeMapAggregatedFieldWellsArgs

func DashboardTreeMapAggregatedFieldWellsPtr(v *DashboardTreeMapAggregatedFieldWellsArgs) DashboardTreeMapAggregatedFieldWellsPtrInput {
	return (*dashboardTreeMapAggregatedFieldWellsPtrType)(v)
}

func (*dashboardTreeMapAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (i *dashboardTreeMapAggregatedFieldWellsPtrType) ToDashboardTreeMapAggregatedFieldWellsPtrOutput() DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return i.ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardTreeMapAggregatedFieldWellsPtrType) ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapAggregatedFieldWellsPtrOutput)
}

type DashboardTreeMapAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardTreeMapAggregatedFieldWellsOutput) ToDashboardTreeMapAggregatedFieldWellsOutput() DashboardTreeMapAggregatedFieldWellsOutput {
	return o
}

func (o DashboardTreeMapAggregatedFieldWellsOutput) ToDashboardTreeMapAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardTreeMapAggregatedFieldWellsOutput {
	return o
}

func (o DashboardTreeMapAggregatedFieldWellsOutput) ToDashboardTreeMapAggregatedFieldWellsPtrOutput() DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return o.ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardTreeMapAggregatedFieldWellsOutput) ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTreeMapAggregatedFieldWells) *DashboardTreeMapAggregatedFieldWells {
		return &v
	}).(DashboardTreeMapAggregatedFieldWellsPtrOutput)
}

// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
func (o DashboardTreeMapAggregatedFieldWellsOutput) Colors() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v DashboardTreeMapAggregatedFieldWells) []DashboardMeasureField { return v.Colors }).(DashboardMeasureFieldArrayOutput)
}

// The group by field well of a tree map. Values are grouped based on group by fields.
func (o DashboardTreeMapAggregatedFieldWellsOutput) Groups() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v DashboardTreeMapAggregatedFieldWells) []DashboardDimensionField { return v.Groups }).(DashboardDimensionFieldArrayOutput)
}

// The size field well of a tree map. Values are aggregated based on group by fields.
func (o DashboardTreeMapAggregatedFieldWellsOutput) Sizes() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v DashboardTreeMapAggregatedFieldWells) []DashboardMeasureField { return v.Sizes }).(DashboardMeasureFieldArrayOutput)
}

type DashboardTreeMapAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardTreeMapAggregatedFieldWellsPtrOutput) ToDashboardTreeMapAggregatedFieldWellsPtrOutput() DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardTreeMapAggregatedFieldWellsPtrOutput) ToDashboardTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardTreeMapAggregatedFieldWellsPtrOutput) Elem() DashboardTreeMapAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *DashboardTreeMapAggregatedFieldWells) DashboardTreeMapAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardTreeMapAggregatedFieldWells
		return ret
	}).(DashboardTreeMapAggregatedFieldWellsOutput)
}

// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
func (o DashboardTreeMapAggregatedFieldWellsPtrOutput) Colors() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v *DashboardTreeMapAggregatedFieldWells) []DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(DashboardMeasureFieldArrayOutput)
}

// The group by field well of a tree map. Values are grouped based on group by fields.
func (o DashboardTreeMapAggregatedFieldWellsPtrOutput) Groups() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v *DashboardTreeMapAggregatedFieldWells) []DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(DashboardDimensionFieldArrayOutput)
}

// The size field well of a tree map. Values are aggregated based on group by fields.
func (o DashboardTreeMapAggregatedFieldWellsPtrOutput) Sizes() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v *DashboardTreeMapAggregatedFieldWells) []DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(DashboardMeasureFieldArrayOutput)
}

type DashboardTreeMapConfiguration struct {
	// The label options (label text, label visibility) for the colors displayed in a tree map.
	ColorLabelOptions *DashboardChartAxisLabelOptions `pulumi:"colorLabelOptions"`
	// The color options (gradient color, point of divergence) of a tree map.
	ColorScale *DashboardColorScale `pulumi:"colorScale"`
	// The options that determine if visual data labels are displayed.
	DataLabels *DashboardDataLabelOptions `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells *DashboardTreeMapFieldWells `pulumi:"fieldWells"`
	// The label options (label text, label visibility) of the groups that are displayed in a tree map.
	GroupLabelOptions *DashboardChartAxisLabelOptions `pulumi:"groupLabelOptions"`
	// The general visual interactions setup for a visual.
	Interactions *DashboardVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *DashboardLegendOptions `pulumi:"legend"`
	// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
	SizeLabelOptions *DashboardChartAxisLabelOptions `pulumi:"sizeLabelOptions"`
	// The sort configuration of a tree map.
	SortConfiguration *DashboardTreeMapSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *DashboardTooltipOptions `pulumi:"tooltip"`
}

// DashboardTreeMapConfigurationInput is an input type that accepts DashboardTreeMapConfigurationArgs and DashboardTreeMapConfigurationOutput values.
// You can construct a concrete instance of `DashboardTreeMapConfigurationInput` via:
//
//	DashboardTreeMapConfigurationArgs{...}
type DashboardTreeMapConfigurationInput interface {
	pulumi.Input

	ToDashboardTreeMapConfigurationOutput() DashboardTreeMapConfigurationOutput
	ToDashboardTreeMapConfigurationOutputWithContext(context.Context) DashboardTreeMapConfigurationOutput
}

type DashboardTreeMapConfigurationArgs struct {
	// The label options (label text, label visibility) for the colors displayed in a tree map.
	ColorLabelOptions DashboardChartAxisLabelOptionsPtrInput `pulumi:"colorLabelOptions"`
	// The color options (gradient color, point of divergence) of a tree map.
	ColorScale DashboardColorScalePtrInput `pulumi:"colorScale"`
	// The options that determine if visual data labels are displayed.
	DataLabels DashboardDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells DashboardTreeMapFieldWellsPtrInput `pulumi:"fieldWells"`
	// The label options (label text, label visibility) of the groups that are displayed in a tree map.
	GroupLabelOptions DashboardChartAxisLabelOptionsPtrInput `pulumi:"groupLabelOptions"`
	// The general visual interactions setup for a visual.
	Interactions DashboardVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend DashboardLegendOptionsPtrInput `pulumi:"legend"`
	// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
	SizeLabelOptions DashboardChartAxisLabelOptionsPtrInput `pulumi:"sizeLabelOptions"`
	// The sort configuration of a tree map.
	SortConfiguration DashboardTreeMapSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip DashboardTooltipOptionsPtrInput `pulumi:"tooltip"`
}

func (DashboardTreeMapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapConfiguration)(nil)).Elem()
}

func (i DashboardTreeMapConfigurationArgs) ToDashboardTreeMapConfigurationOutput() DashboardTreeMapConfigurationOutput {
	return i.ToDashboardTreeMapConfigurationOutputWithContext(context.Background())
}

func (i DashboardTreeMapConfigurationArgs) ToDashboardTreeMapConfigurationOutputWithContext(ctx context.Context) DashboardTreeMapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapConfigurationOutput)
}

func (i DashboardTreeMapConfigurationArgs) ToDashboardTreeMapConfigurationPtrOutput() DashboardTreeMapConfigurationPtrOutput {
	return i.ToDashboardTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTreeMapConfigurationArgs) ToDashboardTreeMapConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapConfigurationOutput).ToDashboardTreeMapConfigurationPtrOutputWithContext(ctx)
}

// DashboardTreeMapConfigurationPtrInput is an input type that accepts DashboardTreeMapConfigurationArgs, DashboardTreeMapConfigurationPtr and DashboardTreeMapConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTreeMapConfigurationPtrInput` via:
//
//	        DashboardTreeMapConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTreeMapConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTreeMapConfigurationPtrOutput() DashboardTreeMapConfigurationPtrOutput
	ToDashboardTreeMapConfigurationPtrOutputWithContext(context.Context) DashboardTreeMapConfigurationPtrOutput
}

type dashboardTreeMapConfigurationPtrType DashboardTreeMapConfigurationArgs

func DashboardTreeMapConfigurationPtr(v *DashboardTreeMapConfigurationArgs) DashboardTreeMapConfigurationPtrInput {
	return (*dashboardTreeMapConfigurationPtrType)(v)
}

func (*dashboardTreeMapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapConfiguration)(nil)).Elem()
}

func (i *dashboardTreeMapConfigurationPtrType) ToDashboardTreeMapConfigurationPtrOutput() DashboardTreeMapConfigurationPtrOutput {
	return i.ToDashboardTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTreeMapConfigurationPtrType) ToDashboardTreeMapConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapConfigurationPtrOutput)
}

type DashboardTreeMapConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapConfiguration)(nil)).Elem()
}

func (o DashboardTreeMapConfigurationOutput) ToDashboardTreeMapConfigurationOutput() DashboardTreeMapConfigurationOutput {
	return o
}

func (o DashboardTreeMapConfigurationOutput) ToDashboardTreeMapConfigurationOutputWithContext(ctx context.Context) DashboardTreeMapConfigurationOutput {
	return o
}

func (o DashboardTreeMapConfigurationOutput) ToDashboardTreeMapConfigurationPtrOutput() DashboardTreeMapConfigurationPtrOutput {
	return o.ToDashboardTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTreeMapConfigurationOutput) ToDashboardTreeMapConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTreeMapConfiguration) *DashboardTreeMapConfiguration {
		return &v
	}).(DashboardTreeMapConfigurationPtrOutput)
}

// The label options (label text, label visibility) for the colors displayed in a tree map.
func (o DashboardTreeMapConfigurationOutput) ColorLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardChartAxisLabelOptions { return v.ColorLabelOptions }).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The color options (gradient color, point of divergence) of a tree map.
func (o DashboardTreeMapConfigurationOutput) ColorScale() DashboardColorScalePtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardColorScale { return v.ColorScale }).(DashboardColorScalePtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o DashboardTreeMapConfigurationOutput) DataLabels() DashboardDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardDataLabelOptions { return v.DataLabels }).(DashboardDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o DashboardTreeMapConfigurationOutput) FieldWells() DashboardTreeMapFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardTreeMapFieldWells { return v.FieldWells }).(DashboardTreeMapFieldWellsPtrOutput)
}

// The label options (label text, label visibility) of the groups that are displayed in a tree map.
func (o DashboardTreeMapConfigurationOutput) GroupLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardChartAxisLabelOptions { return v.GroupLabelOptions }).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardTreeMapConfigurationOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardVisualInteractionOptions { return v.Interactions }).(DashboardVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o DashboardTreeMapConfigurationOutput) Legend() DashboardLegendOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardLegendOptions { return v.Legend }).(DashboardLegendOptionsPtrOutput)
}

// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
func (o DashboardTreeMapConfigurationOutput) SizeLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardChartAxisLabelOptions { return v.SizeLabelOptions }).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a tree map.
func (o DashboardTreeMapConfigurationOutput) SortConfiguration() DashboardTreeMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardTreeMapSortConfiguration { return v.SortConfiguration }).(DashboardTreeMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o DashboardTreeMapConfigurationOutput) Tooltip() DashboardTooltipOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapConfiguration) *DashboardTooltipOptions { return v.Tooltip }).(DashboardTooltipOptionsPtrOutput)
}

type DashboardTreeMapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapConfiguration)(nil)).Elem()
}

func (o DashboardTreeMapConfigurationPtrOutput) ToDashboardTreeMapConfigurationPtrOutput() DashboardTreeMapConfigurationPtrOutput {
	return o
}

func (o DashboardTreeMapConfigurationPtrOutput) ToDashboardTreeMapConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapConfigurationPtrOutput {
	return o
}

func (o DashboardTreeMapConfigurationPtrOutput) Elem() DashboardTreeMapConfigurationOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) DashboardTreeMapConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTreeMapConfiguration
		return ret
	}).(DashboardTreeMapConfigurationOutput)
}

// The label options (label text, label visibility) for the colors displayed in a tree map.
func (o DashboardTreeMapConfigurationPtrOutput) ColorLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ColorLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The color options (gradient color, point of divergence) of a tree map.
func (o DashboardTreeMapConfigurationPtrOutput) ColorScale() DashboardColorScalePtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardColorScale {
		if v == nil {
			return nil
		}
		return v.ColorScale
	}).(DashboardColorScalePtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o DashboardTreeMapConfigurationPtrOutput) DataLabels() DashboardDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(DashboardDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o DashboardTreeMapConfigurationPtrOutput) FieldWells() DashboardTreeMapFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardTreeMapFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(DashboardTreeMapFieldWellsPtrOutput)
}

// The label options (label text, label visibility) of the groups that are displayed in a tree map.
func (o DashboardTreeMapConfigurationPtrOutput) GroupLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.GroupLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardTreeMapConfigurationPtrOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(DashboardVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o DashboardTreeMapConfigurationPtrOutput) Legend() DashboardLegendOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(DashboardLegendOptionsPtrOutput)
}

// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
func (o DashboardTreeMapConfigurationPtrOutput) SizeLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.SizeLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a tree map.
func (o DashboardTreeMapConfigurationPtrOutput) SortConfiguration() DashboardTreeMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardTreeMapSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(DashboardTreeMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o DashboardTreeMapConfigurationPtrOutput) Tooltip() DashboardTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapConfiguration) *DashboardTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(DashboardTooltipOptionsPtrOutput)
}

type DashboardTreeMapFieldWells struct {
	// The aggregated field wells of a tree map.
	TreeMapAggregatedFieldWells *DashboardTreeMapAggregatedFieldWells `pulumi:"treeMapAggregatedFieldWells"`
}

// DashboardTreeMapFieldWellsInput is an input type that accepts DashboardTreeMapFieldWellsArgs and DashboardTreeMapFieldWellsOutput values.
// You can construct a concrete instance of `DashboardTreeMapFieldWellsInput` via:
//
//	DashboardTreeMapFieldWellsArgs{...}
type DashboardTreeMapFieldWellsInput interface {
	pulumi.Input

	ToDashboardTreeMapFieldWellsOutput() DashboardTreeMapFieldWellsOutput
	ToDashboardTreeMapFieldWellsOutputWithContext(context.Context) DashboardTreeMapFieldWellsOutput
}

type DashboardTreeMapFieldWellsArgs struct {
	// The aggregated field wells of a tree map.
	TreeMapAggregatedFieldWells DashboardTreeMapAggregatedFieldWellsPtrInput `pulumi:"treeMapAggregatedFieldWells"`
}

func (DashboardTreeMapFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapFieldWells)(nil)).Elem()
}

func (i DashboardTreeMapFieldWellsArgs) ToDashboardTreeMapFieldWellsOutput() DashboardTreeMapFieldWellsOutput {
	return i.ToDashboardTreeMapFieldWellsOutputWithContext(context.Background())
}

func (i DashboardTreeMapFieldWellsArgs) ToDashboardTreeMapFieldWellsOutputWithContext(ctx context.Context) DashboardTreeMapFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapFieldWellsOutput)
}

func (i DashboardTreeMapFieldWellsArgs) ToDashboardTreeMapFieldWellsPtrOutput() DashboardTreeMapFieldWellsPtrOutput {
	return i.ToDashboardTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardTreeMapFieldWellsArgs) ToDashboardTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapFieldWellsOutput).ToDashboardTreeMapFieldWellsPtrOutputWithContext(ctx)
}

// DashboardTreeMapFieldWellsPtrInput is an input type that accepts DashboardTreeMapFieldWellsArgs, DashboardTreeMapFieldWellsPtr and DashboardTreeMapFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardTreeMapFieldWellsPtrInput` via:
//
//	        DashboardTreeMapFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardTreeMapFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardTreeMapFieldWellsPtrOutput() DashboardTreeMapFieldWellsPtrOutput
	ToDashboardTreeMapFieldWellsPtrOutputWithContext(context.Context) DashboardTreeMapFieldWellsPtrOutput
}

type dashboardTreeMapFieldWellsPtrType DashboardTreeMapFieldWellsArgs

func DashboardTreeMapFieldWellsPtr(v *DashboardTreeMapFieldWellsArgs) DashboardTreeMapFieldWellsPtrInput {
	return (*dashboardTreeMapFieldWellsPtrType)(v)
}

func (*dashboardTreeMapFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapFieldWells)(nil)).Elem()
}

func (i *dashboardTreeMapFieldWellsPtrType) ToDashboardTreeMapFieldWellsPtrOutput() DashboardTreeMapFieldWellsPtrOutput {
	return i.ToDashboardTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardTreeMapFieldWellsPtrType) ToDashboardTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapFieldWellsPtrOutput)
}

type DashboardTreeMapFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapFieldWells)(nil)).Elem()
}

func (o DashboardTreeMapFieldWellsOutput) ToDashboardTreeMapFieldWellsOutput() DashboardTreeMapFieldWellsOutput {
	return o
}

func (o DashboardTreeMapFieldWellsOutput) ToDashboardTreeMapFieldWellsOutputWithContext(ctx context.Context) DashboardTreeMapFieldWellsOutput {
	return o
}

func (o DashboardTreeMapFieldWellsOutput) ToDashboardTreeMapFieldWellsPtrOutput() DashboardTreeMapFieldWellsPtrOutput {
	return o.ToDashboardTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardTreeMapFieldWellsOutput) ToDashboardTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTreeMapFieldWells) *DashboardTreeMapFieldWells {
		return &v
	}).(DashboardTreeMapFieldWellsPtrOutput)
}

// The aggregated field wells of a tree map.
func (o DashboardTreeMapFieldWellsOutput) TreeMapAggregatedFieldWells() DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapFieldWells) *DashboardTreeMapAggregatedFieldWells {
		return v.TreeMapAggregatedFieldWells
	}).(DashboardTreeMapAggregatedFieldWellsPtrOutput)
}

type DashboardTreeMapFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapFieldWells)(nil)).Elem()
}

func (o DashboardTreeMapFieldWellsPtrOutput) ToDashboardTreeMapFieldWellsPtrOutput() DashboardTreeMapFieldWellsPtrOutput {
	return o
}

func (o DashboardTreeMapFieldWellsPtrOutput) ToDashboardTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) DashboardTreeMapFieldWellsPtrOutput {
	return o
}

func (o DashboardTreeMapFieldWellsPtrOutput) Elem() DashboardTreeMapFieldWellsOutput {
	return o.ApplyT(func(v *DashboardTreeMapFieldWells) DashboardTreeMapFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardTreeMapFieldWells
		return ret
	}).(DashboardTreeMapFieldWellsOutput)
}

// The aggregated field wells of a tree map.
func (o DashboardTreeMapFieldWellsPtrOutput) TreeMapAggregatedFieldWells() DashboardTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapFieldWells) *DashboardTreeMapAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TreeMapAggregatedFieldWells
	}).(DashboardTreeMapAggregatedFieldWellsPtrOutput)
}

type DashboardTreeMapSortConfiguration struct {
	// The limit on the number of groups that are displayed.
	TreeMapGroupItemsLimitConfiguration *DashboardItemsLimitConfiguration `pulumi:"treeMapGroupItemsLimitConfiguration"`
	// The sort configuration of group by fields.
	TreeMapSort []DashboardFieldSortOptions `pulumi:"treeMapSort"`
}

// DashboardTreeMapSortConfigurationInput is an input type that accepts DashboardTreeMapSortConfigurationArgs and DashboardTreeMapSortConfigurationOutput values.
// You can construct a concrete instance of `DashboardTreeMapSortConfigurationInput` via:
//
//	DashboardTreeMapSortConfigurationArgs{...}
type DashboardTreeMapSortConfigurationInput interface {
	pulumi.Input

	ToDashboardTreeMapSortConfigurationOutput() DashboardTreeMapSortConfigurationOutput
	ToDashboardTreeMapSortConfigurationOutputWithContext(context.Context) DashboardTreeMapSortConfigurationOutput
}

type DashboardTreeMapSortConfigurationArgs struct {
	// The limit on the number of groups that are displayed.
	TreeMapGroupItemsLimitConfiguration DashboardItemsLimitConfigurationPtrInput `pulumi:"treeMapGroupItemsLimitConfiguration"`
	// The sort configuration of group by fields.
	TreeMapSort DashboardFieldSortOptionsArrayInput `pulumi:"treeMapSort"`
}

func (DashboardTreeMapSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapSortConfiguration)(nil)).Elem()
}

func (i DashboardTreeMapSortConfigurationArgs) ToDashboardTreeMapSortConfigurationOutput() DashboardTreeMapSortConfigurationOutput {
	return i.ToDashboardTreeMapSortConfigurationOutputWithContext(context.Background())
}

func (i DashboardTreeMapSortConfigurationArgs) ToDashboardTreeMapSortConfigurationOutputWithContext(ctx context.Context) DashboardTreeMapSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapSortConfigurationOutput)
}

func (i DashboardTreeMapSortConfigurationArgs) ToDashboardTreeMapSortConfigurationPtrOutput() DashboardTreeMapSortConfigurationPtrOutput {
	return i.ToDashboardTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardTreeMapSortConfigurationArgs) ToDashboardTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapSortConfigurationOutput).ToDashboardTreeMapSortConfigurationPtrOutputWithContext(ctx)
}

// DashboardTreeMapSortConfigurationPtrInput is an input type that accepts DashboardTreeMapSortConfigurationArgs, DashboardTreeMapSortConfigurationPtr and DashboardTreeMapSortConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardTreeMapSortConfigurationPtrInput` via:
//
//	        DashboardTreeMapSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardTreeMapSortConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardTreeMapSortConfigurationPtrOutput() DashboardTreeMapSortConfigurationPtrOutput
	ToDashboardTreeMapSortConfigurationPtrOutputWithContext(context.Context) DashboardTreeMapSortConfigurationPtrOutput
}

type dashboardTreeMapSortConfigurationPtrType DashboardTreeMapSortConfigurationArgs

func DashboardTreeMapSortConfigurationPtr(v *DashboardTreeMapSortConfigurationArgs) DashboardTreeMapSortConfigurationPtrInput {
	return (*dashboardTreeMapSortConfigurationPtrType)(v)
}

func (*dashboardTreeMapSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapSortConfiguration)(nil)).Elem()
}

func (i *dashboardTreeMapSortConfigurationPtrType) ToDashboardTreeMapSortConfigurationPtrOutput() DashboardTreeMapSortConfigurationPtrOutput {
	return i.ToDashboardTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardTreeMapSortConfigurationPtrType) ToDashboardTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapSortConfigurationPtrOutput)
}

type DashboardTreeMapSortConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapSortConfiguration)(nil)).Elem()
}

func (o DashboardTreeMapSortConfigurationOutput) ToDashboardTreeMapSortConfigurationOutput() DashboardTreeMapSortConfigurationOutput {
	return o
}

func (o DashboardTreeMapSortConfigurationOutput) ToDashboardTreeMapSortConfigurationOutputWithContext(ctx context.Context) DashboardTreeMapSortConfigurationOutput {
	return o
}

func (o DashboardTreeMapSortConfigurationOutput) ToDashboardTreeMapSortConfigurationPtrOutput() DashboardTreeMapSortConfigurationPtrOutput {
	return o.ToDashboardTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardTreeMapSortConfigurationOutput) ToDashboardTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTreeMapSortConfiguration) *DashboardTreeMapSortConfiguration {
		return &v
	}).(DashboardTreeMapSortConfigurationPtrOutput)
}

// The limit on the number of groups that are displayed.
func (o DashboardTreeMapSortConfigurationOutput) TreeMapGroupItemsLimitConfiguration() DashboardItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapSortConfiguration) *DashboardItemsLimitConfiguration {
		return v.TreeMapGroupItemsLimitConfiguration
	}).(DashboardItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o DashboardTreeMapSortConfigurationOutput) TreeMapSort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v DashboardTreeMapSortConfiguration) []DashboardFieldSortOptions { return v.TreeMapSort }).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardTreeMapSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapSortConfiguration)(nil)).Elem()
}

func (o DashboardTreeMapSortConfigurationPtrOutput) ToDashboardTreeMapSortConfigurationPtrOutput() DashboardTreeMapSortConfigurationPtrOutput {
	return o
}

func (o DashboardTreeMapSortConfigurationPtrOutput) ToDashboardTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardTreeMapSortConfigurationPtrOutput {
	return o
}

func (o DashboardTreeMapSortConfigurationPtrOutput) Elem() DashboardTreeMapSortConfigurationOutput {
	return o.ApplyT(func(v *DashboardTreeMapSortConfiguration) DashboardTreeMapSortConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardTreeMapSortConfiguration
		return ret
	}).(DashboardTreeMapSortConfigurationOutput)
}

// The limit on the number of groups that are displayed.
func (o DashboardTreeMapSortConfigurationPtrOutput) TreeMapGroupItemsLimitConfiguration() DashboardItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapSortConfiguration) *DashboardItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.TreeMapGroupItemsLimitConfiguration
	}).(DashboardItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o DashboardTreeMapSortConfigurationPtrOutput) TreeMapSort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *DashboardTreeMapSortConfiguration) []DashboardFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.TreeMapSort
	}).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardTreeMapVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []DashboardVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *DashboardTreeMapConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []DashboardColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *DashboardVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *DashboardVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// DashboardTreeMapVisualInput is an input type that accepts DashboardTreeMapVisualArgs and DashboardTreeMapVisualOutput values.
// You can construct a concrete instance of `DashboardTreeMapVisualInput` via:
//
//	DashboardTreeMapVisualArgs{...}
type DashboardTreeMapVisualInput interface {
	pulumi.Input

	ToDashboardTreeMapVisualOutput() DashboardTreeMapVisualOutput
	ToDashboardTreeMapVisualOutputWithContext(context.Context) DashboardTreeMapVisualOutput
}

type DashboardTreeMapVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions DashboardVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration DashboardTreeMapConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies DashboardColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle DashboardVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title DashboardVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (DashboardTreeMapVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapVisual)(nil)).Elem()
}

func (i DashboardTreeMapVisualArgs) ToDashboardTreeMapVisualOutput() DashboardTreeMapVisualOutput {
	return i.ToDashboardTreeMapVisualOutputWithContext(context.Background())
}

func (i DashboardTreeMapVisualArgs) ToDashboardTreeMapVisualOutputWithContext(ctx context.Context) DashboardTreeMapVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapVisualOutput)
}

func (i DashboardTreeMapVisualArgs) ToDashboardTreeMapVisualPtrOutput() DashboardTreeMapVisualPtrOutput {
	return i.ToDashboardTreeMapVisualPtrOutputWithContext(context.Background())
}

func (i DashboardTreeMapVisualArgs) ToDashboardTreeMapVisualPtrOutputWithContext(ctx context.Context) DashboardTreeMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapVisualOutput).ToDashboardTreeMapVisualPtrOutputWithContext(ctx)
}

// DashboardTreeMapVisualPtrInput is an input type that accepts DashboardTreeMapVisualArgs, DashboardTreeMapVisualPtr and DashboardTreeMapVisualPtrOutput values.
// You can construct a concrete instance of `DashboardTreeMapVisualPtrInput` via:
//
//	        DashboardTreeMapVisualArgs{...}
//
//	or:
//
//	        nil
type DashboardTreeMapVisualPtrInput interface {
	pulumi.Input

	ToDashboardTreeMapVisualPtrOutput() DashboardTreeMapVisualPtrOutput
	ToDashboardTreeMapVisualPtrOutputWithContext(context.Context) DashboardTreeMapVisualPtrOutput
}

type dashboardTreeMapVisualPtrType DashboardTreeMapVisualArgs

func DashboardTreeMapVisualPtr(v *DashboardTreeMapVisualArgs) DashboardTreeMapVisualPtrInput {
	return (*dashboardTreeMapVisualPtrType)(v)
}

func (*dashboardTreeMapVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapVisual)(nil)).Elem()
}

func (i *dashboardTreeMapVisualPtrType) ToDashboardTreeMapVisualPtrOutput() DashboardTreeMapVisualPtrOutput {
	return i.ToDashboardTreeMapVisualPtrOutputWithContext(context.Background())
}

func (i *dashboardTreeMapVisualPtrType) ToDashboardTreeMapVisualPtrOutputWithContext(ctx context.Context) DashboardTreeMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTreeMapVisualPtrOutput)
}

type DashboardTreeMapVisualOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTreeMapVisual)(nil)).Elem()
}

func (o DashboardTreeMapVisualOutput) ToDashboardTreeMapVisualOutput() DashboardTreeMapVisualOutput {
	return o
}

func (o DashboardTreeMapVisualOutput) ToDashboardTreeMapVisualOutputWithContext(ctx context.Context) DashboardTreeMapVisualOutput {
	return o
}

func (o DashboardTreeMapVisualOutput) ToDashboardTreeMapVisualPtrOutput() DashboardTreeMapVisualPtrOutput {
	return o.ToDashboardTreeMapVisualPtrOutputWithContext(context.Background())
}

func (o DashboardTreeMapVisualOutput) ToDashboardTreeMapVisualPtrOutputWithContext(ctx context.Context) DashboardTreeMapVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTreeMapVisual) *DashboardTreeMapVisual {
		return &v
	}).(DashboardTreeMapVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardTreeMapVisualOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v DashboardTreeMapVisual) []DashboardVisualCustomAction { return v.Actions }).(DashboardVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o DashboardTreeMapVisualOutput) ChartConfiguration() DashboardTreeMapConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapVisual) *DashboardTreeMapConfiguration { return v.ChartConfiguration }).(DashboardTreeMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o DashboardTreeMapVisualOutput) ColumnHierarchies() DashboardColumnHierarchyArrayOutput {
	return o.ApplyT(func(v DashboardTreeMapVisual) []DashboardColumnHierarchy { return v.ColumnHierarchies }).(DashboardColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardTreeMapVisualOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapVisual) *DashboardVisualSubtitleLabelOptions { return v.Subtitle }).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardTreeMapVisualOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapVisual) *DashboardVisualTitleLabelOptions { return v.Title }).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardTreeMapVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardTreeMapVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o DashboardTreeMapVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardTreeMapVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type DashboardTreeMapVisualPtrOutput struct{ *pulumi.OutputState }

func (DashboardTreeMapVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTreeMapVisual)(nil)).Elem()
}

func (o DashboardTreeMapVisualPtrOutput) ToDashboardTreeMapVisualPtrOutput() DashboardTreeMapVisualPtrOutput {
	return o
}

func (o DashboardTreeMapVisualPtrOutput) ToDashboardTreeMapVisualPtrOutputWithContext(ctx context.Context) DashboardTreeMapVisualPtrOutput {
	return o
}

func (o DashboardTreeMapVisualPtrOutput) Elem() DashboardTreeMapVisualOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) DashboardTreeMapVisual {
		if v != nil {
			return *v
		}
		var ret DashboardTreeMapVisual
		return ret
	}).(DashboardTreeMapVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardTreeMapVisualPtrOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) []DashboardVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(DashboardVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o DashboardTreeMapVisualPtrOutput) ChartConfiguration() DashboardTreeMapConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) *DashboardTreeMapConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(DashboardTreeMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o DashboardTreeMapVisualPtrOutput) ColumnHierarchies() DashboardColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) []DashboardColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(DashboardColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardTreeMapVisualPtrOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) *DashboardVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardTreeMapVisualPtrOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) *DashboardVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardTreeMapVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o DashboardTreeMapVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardTreeMapVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type DashboardTrendArrowOptions struct {
	// The visibility of the trend arrows.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardTrendArrowOptionsInput is an input type that accepts DashboardTrendArrowOptionsArgs and DashboardTrendArrowOptionsOutput values.
// You can construct a concrete instance of `DashboardTrendArrowOptionsInput` via:
//
//	DashboardTrendArrowOptionsArgs{...}
type DashboardTrendArrowOptionsInput interface {
	pulumi.Input

	ToDashboardTrendArrowOptionsOutput() DashboardTrendArrowOptionsOutput
	ToDashboardTrendArrowOptionsOutputWithContext(context.Context) DashboardTrendArrowOptionsOutput
}

type DashboardTrendArrowOptionsArgs struct {
	// The visibility of the trend arrows.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardTrendArrowOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTrendArrowOptions)(nil)).Elem()
}

func (i DashboardTrendArrowOptionsArgs) ToDashboardTrendArrowOptionsOutput() DashboardTrendArrowOptionsOutput {
	return i.ToDashboardTrendArrowOptionsOutputWithContext(context.Background())
}

func (i DashboardTrendArrowOptionsArgs) ToDashboardTrendArrowOptionsOutputWithContext(ctx context.Context) DashboardTrendArrowOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTrendArrowOptionsOutput)
}

func (i DashboardTrendArrowOptionsArgs) ToDashboardTrendArrowOptionsPtrOutput() DashboardTrendArrowOptionsPtrOutput {
	return i.ToDashboardTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardTrendArrowOptionsArgs) ToDashboardTrendArrowOptionsPtrOutputWithContext(ctx context.Context) DashboardTrendArrowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTrendArrowOptionsOutput).ToDashboardTrendArrowOptionsPtrOutputWithContext(ctx)
}

// DashboardTrendArrowOptionsPtrInput is an input type that accepts DashboardTrendArrowOptionsArgs, DashboardTrendArrowOptionsPtr and DashboardTrendArrowOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardTrendArrowOptionsPtrInput` via:
//
//	        DashboardTrendArrowOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardTrendArrowOptionsPtrInput interface {
	pulumi.Input

	ToDashboardTrendArrowOptionsPtrOutput() DashboardTrendArrowOptionsPtrOutput
	ToDashboardTrendArrowOptionsPtrOutputWithContext(context.Context) DashboardTrendArrowOptionsPtrOutput
}

type dashboardTrendArrowOptionsPtrType DashboardTrendArrowOptionsArgs

func DashboardTrendArrowOptionsPtr(v *DashboardTrendArrowOptionsArgs) DashboardTrendArrowOptionsPtrInput {
	return (*dashboardTrendArrowOptionsPtrType)(v)
}

func (*dashboardTrendArrowOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTrendArrowOptions)(nil)).Elem()
}

func (i *dashboardTrendArrowOptionsPtrType) ToDashboardTrendArrowOptionsPtrOutput() DashboardTrendArrowOptionsPtrOutput {
	return i.ToDashboardTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardTrendArrowOptionsPtrType) ToDashboardTrendArrowOptionsPtrOutputWithContext(ctx context.Context) DashboardTrendArrowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardTrendArrowOptionsPtrOutput)
}

type DashboardTrendArrowOptionsOutput struct{ *pulumi.OutputState }

func (DashboardTrendArrowOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardTrendArrowOptions)(nil)).Elem()
}

func (o DashboardTrendArrowOptionsOutput) ToDashboardTrendArrowOptionsOutput() DashboardTrendArrowOptionsOutput {
	return o
}

func (o DashboardTrendArrowOptionsOutput) ToDashboardTrendArrowOptionsOutputWithContext(ctx context.Context) DashboardTrendArrowOptionsOutput {
	return o
}

func (o DashboardTrendArrowOptionsOutput) ToDashboardTrendArrowOptionsPtrOutput() DashboardTrendArrowOptionsPtrOutput {
	return o.ToDashboardTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardTrendArrowOptionsOutput) ToDashboardTrendArrowOptionsPtrOutputWithContext(ctx context.Context) DashboardTrendArrowOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardTrendArrowOptions) *DashboardTrendArrowOptions {
		return &v
	}).(DashboardTrendArrowOptionsPtrOutput)
}

// The visibility of the trend arrows.
func (o DashboardTrendArrowOptionsOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardTrendArrowOptions) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardTrendArrowOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardTrendArrowOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardTrendArrowOptions)(nil)).Elem()
}

func (o DashboardTrendArrowOptionsPtrOutput) ToDashboardTrendArrowOptionsPtrOutput() DashboardTrendArrowOptionsPtrOutput {
	return o
}

func (o DashboardTrendArrowOptionsPtrOutput) ToDashboardTrendArrowOptionsPtrOutputWithContext(ctx context.Context) DashboardTrendArrowOptionsPtrOutput {
	return o
}

func (o DashboardTrendArrowOptionsPtrOutput) Elem() DashboardTrendArrowOptionsOutput {
	return o.ApplyT(func(v *DashboardTrendArrowOptions) DashboardTrendArrowOptions {
		if v != nil {
			return *v
		}
		var ret DashboardTrendArrowOptions
		return ret
	}).(DashboardTrendArrowOptionsOutput)
}

// The visibility of the trend arrows.
func (o DashboardTrendArrowOptionsPtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardTrendArrowOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardUnaggregatedField struct {
	// The column that is used in the `UnaggregatedField` .
	Column DashboardColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *DashboardFormatConfiguration `pulumi:"formatConfiguration"`
}

// DashboardUnaggregatedFieldInput is an input type that accepts DashboardUnaggregatedFieldArgs and DashboardUnaggregatedFieldOutput values.
// You can construct a concrete instance of `DashboardUnaggregatedFieldInput` via:
//
//	DashboardUnaggregatedFieldArgs{...}
type DashboardUnaggregatedFieldInput interface {
	pulumi.Input

	ToDashboardUnaggregatedFieldOutput() DashboardUnaggregatedFieldOutput
	ToDashboardUnaggregatedFieldOutputWithContext(context.Context) DashboardUnaggregatedFieldOutput
}

type DashboardUnaggregatedFieldArgs struct {
	// The column that is used in the `UnaggregatedField` .
	Column DashboardColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration DashboardFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
}

func (DashboardUnaggregatedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardUnaggregatedField)(nil)).Elem()
}

func (i DashboardUnaggregatedFieldArgs) ToDashboardUnaggregatedFieldOutput() DashboardUnaggregatedFieldOutput {
	return i.ToDashboardUnaggregatedFieldOutputWithContext(context.Background())
}

func (i DashboardUnaggregatedFieldArgs) ToDashboardUnaggregatedFieldOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardUnaggregatedFieldOutput)
}

func (i DashboardUnaggregatedFieldArgs) ToDashboardUnaggregatedFieldPtrOutput() DashboardUnaggregatedFieldPtrOutput {
	return i.ToDashboardUnaggregatedFieldPtrOutputWithContext(context.Background())
}

func (i DashboardUnaggregatedFieldArgs) ToDashboardUnaggregatedFieldPtrOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardUnaggregatedFieldOutput).ToDashboardUnaggregatedFieldPtrOutputWithContext(ctx)
}

// DashboardUnaggregatedFieldPtrInput is an input type that accepts DashboardUnaggregatedFieldArgs, DashboardUnaggregatedFieldPtr and DashboardUnaggregatedFieldPtrOutput values.
// You can construct a concrete instance of `DashboardUnaggregatedFieldPtrInput` via:
//
//	        DashboardUnaggregatedFieldArgs{...}
//
//	or:
//
//	        nil
type DashboardUnaggregatedFieldPtrInput interface {
	pulumi.Input

	ToDashboardUnaggregatedFieldPtrOutput() DashboardUnaggregatedFieldPtrOutput
	ToDashboardUnaggregatedFieldPtrOutputWithContext(context.Context) DashboardUnaggregatedFieldPtrOutput
}

type dashboardUnaggregatedFieldPtrType DashboardUnaggregatedFieldArgs

func DashboardUnaggregatedFieldPtr(v *DashboardUnaggregatedFieldArgs) DashboardUnaggregatedFieldPtrInput {
	return (*dashboardUnaggregatedFieldPtrType)(v)
}

func (*dashboardUnaggregatedFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardUnaggregatedField)(nil)).Elem()
}

func (i *dashboardUnaggregatedFieldPtrType) ToDashboardUnaggregatedFieldPtrOutput() DashboardUnaggregatedFieldPtrOutput {
	return i.ToDashboardUnaggregatedFieldPtrOutputWithContext(context.Background())
}

func (i *dashboardUnaggregatedFieldPtrType) ToDashboardUnaggregatedFieldPtrOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardUnaggregatedFieldPtrOutput)
}

// DashboardUnaggregatedFieldArrayInput is an input type that accepts DashboardUnaggregatedFieldArray and DashboardUnaggregatedFieldArrayOutput values.
// You can construct a concrete instance of `DashboardUnaggregatedFieldArrayInput` via:
//
//	DashboardUnaggregatedFieldArray{ DashboardUnaggregatedFieldArgs{...} }
type DashboardUnaggregatedFieldArrayInput interface {
	pulumi.Input

	ToDashboardUnaggregatedFieldArrayOutput() DashboardUnaggregatedFieldArrayOutput
	ToDashboardUnaggregatedFieldArrayOutputWithContext(context.Context) DashboardUnaggregatedFieldArrayOutput
}

type DashboardUnaggregatedFieldArray []DashboardUnaggregatedFieldInput

func (DashboardUnaggregatedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardUnaggregatedField)(nil)).Elem()
}

func (i DashboardUnaggregatedFieldArray) ToDashboardUnaggregatedFieldArrayOutput() DashboardUnaggregatedFieldArrayOutput {
	return i.ToDashboardUnaggregatedFieldArrayOutputWithContext(context.Background())
}

func (i DashboardUnaggregatedFieldArray) ToDashboardUnaggregatedFieldArrayOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardUnaggregatedFieldArrayOutput)
}

type DashboardUnaggregatedFieldOutput struct{ *pulumi.OutputState }

func (DashboardUnaggregatedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardUnaggregatedField)(nil)).Elem()
}

func (o DashboardUnaggregatedFieldOutput) ToDashboardUnaggregatedFieldOutput() DashboardUnaggregatedFieldOutput {
	return o
}

func (o DashboardUnaggregatedFieldOutput) ToDashboardUnaggregatedFieldOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldOutput {
	return o
}

func (o DashboardUnaggregatedFieldOutput) ToDashboardUnaggregatedFieldPtrOutput() DashboardUnaggregatedFieldPtrOutput {
	return o.ToDashboardUnaggregatedFieldPtrOutputWithContext(context.Background())
}

func (o DashboardUnaggregatedFieldOutput) ToDashboardUnaggregatedFieldPtrOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardUnaggregatedField) *DashboardUnaggregatedField {
		return &v
	}).(DashboardUnaggregatedFieldPtrOutput)
}

// The column that is used in the `UnaggregatedField` .
func (o DashboardUnaggregatedFieldOutput) Column() DashboardColumnIdentifierOutput {
	return o.ApplyT(func(v DashboardUnaggregatedField) DashboardColumnIdentifier { return v.Column }).(DashboardColumnIdentifierOutput)
}

// The custom field ID.
func (o DashboardUnaggregatedFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardUnaggregatedField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o DashboardUnaggregatedFieldOutput) FormatConfiguration() DashboardFormatConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardUnaggregatedField) *DashboardFormatConfiguration { return v.FormatConfiguration }).(DashboardFormatConfigurationPtrOutput)
}

type DashboardUnaggregatedFieldPtrOutput struct{ *pulumi.OutputState }

func (DashboardUnaggregatedFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardUnaggregatedField)(nil)).Elem()
}

func (o DashboardUnaggregatedFieldPtrOutput) ToDashboardUnaggregatedFieldPtrOutput() DashboardUnaggregatedFieldPtrOutput {
	return o
}

func (o DashboardUnaggregatedFieldPtrOutput) ToDashboardUnaggregatedFieldPtrOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldPtrOutput {
	return o
}

func (o DashboardUnaggregatedFieldPtrOutput) Elem() DashboardUnaggregatedFieldOutput {
	return o.ApplyT(func(v *DashboardUnaggregatedField) DashboardUnaggregatedField {
		if v != nil {
			return *v
		}
		var ret DashboardUnaggregatedField
		return ret
	}).(DashboardUnaggregatedFieldOutput)
}

// The column that is used in the `UnaggregatedField` .
func (o DashboardUnaggregatedFieldPtrOutput) Column() DashboardColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *DashboardUnaggregatedField) *DashboardColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(DashboardColumnIdentifierPtrOutput)
}

// The custom field ID.
func (o DashboardUnaggregatedFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardUnaggregatedField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The format configuration of the field.
func (o DashboardUnaggregatedFieldPtrOutput) FormatConfiguration() DashboardFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardUnaggregatedField) *DashboardFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(DashboardFormatConfigurationPtrOutput)
}

type DashboardUnaggregatedFieldArrayOutput struct{ *pulumi.OutputState }

func (DashboardUnaggregatedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardUnaggregatedField)(nil)).Elem()
}

func (o DashboardUnaggregatedFieldArrayOutput) ToDashboardUnaggregatedFieldArrayOutput() DashboardUnaggregatedFieldArrayOutput {
	return o
}

func (o DashboardUnaggregatedFieldArrayOutput) ToDashboardUnaggregatedFieldArrayOutputWithContext(ctx context.Context) DashboardUnaggregatedFieldArrayOutput {
	return o
}

func (o DashboardUnaggregatedFieldArrayOutput) Index(i pulumi.IntInput) DashboardUnaggregatedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardUnaggregatedField {
		return vs[0].([]DashboardUnaggregatedField)[vs[1].(int)]
	}).(DashboardUnaggregatedFieldOutput)
}

type DashboardUniqueValuesComputation struct {
	// The category field that is used in a computation.
	Category *DashboardDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
}

// DashboardUniqueValuesComputationInput is an input type that accepts DashboardUniqueValuesComputationArgs and DashboardUniqueValuesComputationOutput values.
// You can construct a concrete instance of `DashboardUniqueValuesComputationInput` via:
//
//	DashboardUniqueValuesComputationArgs{...}
type DashboardUniqueValuesComputationInput interface {
	pulumi.Input

	ToDashboardUniqueValuesComputationOutput() DashboardUniqueValuesComputationOutput
	ToDashboardUniqueValuesComputationOutputWithContext(context.Context) DashboardUniqueValuesComputationOutput
}

type DashboardUniqueValuesComputationArgs struct {
	// The category field that is used in a computation.
	Category DashboardDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DashboardUniqueValuesComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardUniqueValuesComputation)(nil)).Elem()
}

func (i DashboardUniqueValuesComputationArgs) ToDashboardUniqueValuesComputationOutput() DashboardUniqueValuesComputationOutput {
	return i.ToDashboardUniqueValuesComputationOutputWithContext(context.Background())
}

func (i DashboardUniqueValuesComputationArgs) ToDashboardUniqueValuesComputationOutputWithContext(ctx context.Context) DashboardUniqueValuesComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardUniqueValuesComputationOutput)
}

func (i DashboardUniqueValuesComputationArgs) ToDashboardUniqueValuesComputationPtrOutput() DashboardUniqueValuesComputationPtrOutput {
	return i.ToDashboardUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (i DashboardUniqueValuesComputationArgs) ToDashboardUniqueValuesComputationPtrOutputWithContext(ctx context.Context) DashboardUniqueValuesComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardUniqueValuesComputationOutput).ToDashboardUniqueValuesComputationPtrOutputWithContext(ctx)
}

// DashboardUniqueValuesComputationPtrInput is an input type that accepts DashboardUniqueValuesComputationArgs, DashboardUniqueValuesComputationPtr and DashboardUniqueValuesComputationPtrOutput values.
// You can construct a concrete instance of `DashboardUniqueValuesComputationPtrInput` via:
//
//	        DashboardUniqueValuesComputationArgs{...}
//
//	or:
//
//	        nil
type DashboardUniqueValuesComputationPtrInput interface {
	pulumi.Input

	ToDashboardUniqueValuesComputationPtrOutput() DashboardUniqueValuesComputationPtrOutput
	ToDashboardUniqueValuesComputationPtrOutputWithContext(context.Context) DashboardUniqueValuesComputationPtrOutput
}

type dashboardUniqueValuesComputationPtrType DashboardUniqueValuesComputationArgs

func DashboardUniqueValuesComputationPtr(v *DashboardUniqueValuesComputationArgs) DashboardUniqueValuesComputationPtrInput {
	return (*dashboardUniqueValuesComputationPtrType)(v)
}

func (*dashboardUniqueValuesComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardUniqueValuesComputation)(nil)).Elem()
}

func (i *dashboardUniqueValuesComputationPtrType) ToDashboardUniqueValuesComputationPtrOutput() DashboardUniqueValuesComputationPtrOutput {
	return i.ToDashboardUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (i *dashboardUniqueValuesComputationPtrType) ToDashboardUniqueValuesComputationPtrOutputWithContext(ctx context.Context) DashboardUniqueValuesComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardUniqueValuesComputationPtrOutput)
}

type DashboardUniqueValuesComputationOutput struct{ *pulumi.OutputState }

func (DashboardUniqueValuesComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardUniqueValuesComputation)(nil)).Elem()
}

func (o DashboardUniqueValuesComputationOutput) ToDashboardUniqueValuesComputationOutput() DashboardUniqueValuesComputationOutput {
	return o
}

func (o DashboardUniqueValuesComputationOutput) ToDashboardUniqueValuesComputationOutputWithContext(ctx context.Context) DashboardUniqueValuesComputationOutput {
	return o
}

func (o DashboardUniqueValuesComputationOutput) ToDashboardUniqueValuesComputationPtrOutput() DashboardUniqueValuesComputationPtrOutput {
	return o.ToDashboardUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (o DashboardUniqueValuesComputationOutput) ToDashboardUniqueValuesComputationPtrOutputWithContext(ctx context.Context) DashboardUniqueValuesComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardUniqueValuesComputation) *DashboardUniqueValuesComputation {
		return &v
	}).(DashboardUniqueValuesComputationPtrOutput)
}

// The category field that is used in a computation.
func (o DashboardUniqueValuesComputationOutput) Category() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v DashboardUniqueValuesComputation) *DashboardDimensionField { return v.Category }).(DashboardDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o DashboardUniqueValuesComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardUniqueValuesComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o DashboardUniqueValuesComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardUniqueValuesComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DashboardUniqueValuesComputationPtrOutput struct{ *pulumi.OutputState }

func (DashboardUniqueValuesComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardUniqueValuesComputation)(nil)).Elem()
}

func (o DashboardUniqueValuesComputationPtrOutput) ToDashboardUniqueValuesComputationPtrOutput() DashboardUniqueValuesComputationPtrOutput {
	return o
}

func (o DashboardUniqueValuesComputationPtrOutput) ToDashboardUniqueValuesComputationPtrOutputWithContext(ctx context.Context) DashboardUniqueValuesComputationPtrOutput {
	return o
}

func (o DashboardUniqueValuesComputationPtrOutput) Elem() DashboardUniqueValuesComputationOutput {
	return o.ApplyT(func(v *DashboardUniqueValuesComputation) DashboardUniqueValuesComputation {
		if v != nil {
			return *v
		}
		var ret DashboardUniqueValuesComputation
		return ret
	}).(DashboardUniqueValuesComputationOutput)
}

// The category field that is used in a computation.
func (o DashboardUniqueValuesComputationPtrOutput) Category() DashboardDimensionFieldPtrOutput {
	return o.ApplyT(func(v *DashboardUniqueValuesComputation) *DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(DashboardDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o DashboardUniqueValuesComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardUniqueValuesComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o DashboardUniqueValuesComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardUniqueValuesComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type DashboardValidationStrategy struct {
	// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
	Mode DashboardValidationStrategyMode `pulumi:"mode"`
}

// DashboardValidationStrategyInput is an input type that accepts DashboardValidationStrategyArgs and DashboardValidationStrategyOutput values.
// You can construct a concrete instance of `DashboardValidationStrategyInput` via:
//
//	DashboardValidationStrategyArgs{...}
type DashboardValidationStrategyInput interface {
	pulumi.Input

	ToDashboardValidationStrategyOutput() DashboardValidationStrategyOutput
	ToDashboardValidationStrategyOutputWithContext(context.Context) DashboardValidationStrategyOutput
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type DashboardValidationStrategyArgs struct {
	// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
	Mode DashboardValidationStrategyModeInput `pulumi:"mode"`
}

func (DashboardValidationStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardValidationStrategy)(nil)).Elem()
}

func (i DashboardValidationStrategyArgs) ToDashboardValidationStrategyOutput() DashboardValidationStrategyOutput {
	return i.ToDashboardValidationStrategyOutputWithContext(context.Background())
}

func (i DashboardValidationStrategyArgs) ToDashboardValidationStrategyOutputWithContext(ctx context.Context) DashboardValidationStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardValidationStrategyOutput)
}

func (i DashboardValidationStrategyArgs) ToDashboardValidationStrategyPtrOutput() DashboardValidationStrategyPtrOutput {
	return i.ToDashboardValidationStrategyPtrOutputWithContext(context.Background())
}

func (i DashboardValidationStrategyArgs) ToDashboardValidationStrategyPtrOutputWithContext(ctx context.Context) DashboardValidationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardValidationStrategyOutput).ToDashboardValidationStrategyPtrOutputWithContext(ctx)
}

// DashboardValidationStrategyPtrInput is an input type that accepts DashboardValidationStrategyArgs, DashboardValidationStrategyPtr and DashboardValidationStrategyPtrOutput values.
// You can construct a concrete instance of `DashboardValidationStrategyPtrInput` via:
//
//	        DashboardValidationStrategyArgs{...}
//
//	or:
//
//	        nil
type DashboardValidationStrategyPtrInput interface {
	pulumi.Input

	ToDashboardValidationStrategyPtrOutput() DashboardValidationStrategyPtrOutput
	ToDashboardValidationStrategyPtrOutputWithContext(context.Context) DashboardValidationStrategyPtrOutput
}

type dashboardValidationStrategyPtrType DashboardValidationStrategyArgs

func DashboardValidationStrategyPtr(v *DashboardValidationStrategyArgs) DashboardValidationStrategyPtrInput {
	return (*dashboardValidationStrategyPtrType)(v)
}

func (*dashboardValidationStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardValidationStrategy)(nil)).Elem()
}

func (i *dashboardValidationStrategyPtrType) ToDashboardValidationStrategyPtrOutput() DashboardValidationStrategyPtrOutput {
	return i.ToDashboardValidationStrategyPtrOutputWithContext(context.Background())
}

func (i *dashboardValidationStrategyPtrType) ToDashboardValidationStrategyPtrOutputWithContext(ctx context.Context) DashboardValidationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardValidationStrategyPtrOutput)
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type DashboardValidationStrategyOutput struct{ *pulumi.OutputState }

func (DashboardValidationStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardValidationStrategy)(nil)).Elem()
}

func (o DashboardValidationStrategyOutput) ToDashboardValidationStrategyOutput() DashboardValidationStrategyOutput {
	return o
}

func (o DashboardValidationStrategyOutput) ToDashboardValidationStrategyOutputWithContext(ctx context.Context) DashboardValidationStrategyOutput {
	return o
}

func (o DashboardValidationStrategyOutput) ToDashboardValidationStrategyPtrOutput() DashboardValidationStrategyPtrOutput {
	return o.ToDashboardValidationStrategyPtrOutputWithContext(context.Background())
}

func (o DashboardValidationStrategyOutput) ToDashboardValidationStrategyPtrOutputWithContext(ctx context.Context) DashboardValidationStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardValidationStrategy) *DashboardValidationStrategy {
		return &v
	}).(DashboardValidationStrategyPtrOutput)
}

// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
func (o DashboardValidationStrategyOutput) Mode() DashboardValidationStrategyModeOutput {
	return o.ApplyT(func(v DashboardValidationStrategy) DashboardValidationStrategyMode { return v.Mode }).(DashboardValidationStrategyModeOutput)
}

type DashboardValidationStrategyPtrOutput struct{ *pulumi.OutputState }

func (DashboardValidationStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardValidationStrategy)(nil)).Elem()
}

func (o DashboardValidationStrategyPtrOutput) ToDashboardValidationStrategyPtrOutput() DashboardValidationStrategyPtrOutput {
	return o
}

func (o DashboardValidationStrategyPtrOutput) ToDashboardValidationStrategyPtrOutputWithContext(ctx context.Context) DashboardValidationStrategyPtrOutput {
	return o
}

func (o DashboardValidationStrategyPtrOutput) Elem() DashboardValidationStrategyOutput {
	return o.ApplyT(func(v *DashboardValidationStrategy) DashboardValidationStrategy {
		if v != nil {
			return *v
		}
		var ret DashboardValidationStrategy
		return ret
	}).(DashboardValidationStrategyOutput)
}

// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
func (o DashboardValidationStrategyPtrOutput) Mode() DashboardValidationStrategyModePtrOutput {
	return o.ApplyT(func(v *DashboardValidationStrategy) *DashboardValidationStrategyMode {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(DashboardValidationStrategyModePtrOutput)
}

// <p>Dashboard version.</p>
type DashboardVersion struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn *string `pulumi:"arn"`
	// <p>The time that this dashboard version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
	//             version of the dashboard.</p>
	DataSetArns []string `pulumi:"dataSetArns"`
	// <p>Description.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with this dashboard version.</p>
	Errors []DashboardError `pulumi:"errors"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets []DashboardSheet `pulumi:"sheets"`
	// <p>Source entity ARN.</p>
	SourceEntityArn *string `pulumi:"sourceEntityArn"`
	// The HTTP status of the request.
	Status *DashboardResourceStatus `pulumi:"status"`
	// <p>The ARN of the theme associated with a version of the dashboard.</p>
	ThemeArn *string `pulumi:"themeArn"`
	// <p>Version number for this version of the dashboard.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// <p>Dashboard version.</p>
type DashboardVersionOutput struct{ *pulumi.OutputState }

func (DashboardVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVersion)(nil)).Elem()
}

func (o DashboardVersionOutput) ToDashboardVersionOutput() DashboardVersionOutput {
	return o
}

func (o DashboardVersionOutput) ToDashboardVersionOutputWithContext(ctx context.Context) DashboardVersionOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardVersionOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// <p>The time that this dashboard version was created.</p>
func (o DashboardVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
//
//	version of the dashboard.</p>
func (o DashboardVersionOutput) DataSetArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardVersion) []string { return v.DataSetArns }).(pulumi.StringArrayOutput)
}

// <p>Description.</p>
func (o DashboardVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this dashboard version.</p>
func (o DashboardVersionOutput) Errors() DashboardErrorArrayOutput {
	return o.ApplyT(func(v DashboardVersion) []DashboardError { return v.Errors }).(DashboardErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o DashboardVersionOutput) Sheets() DashboardSheetArrayOutput {
	return o.ApplyT(func(v DashboardVersion) []DashboardSheet { return v.Sheets }).(DashboardSheetArrayOutput)
}

// <p>Source entity ARN.</p>
func (o DashboardVersionOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.SourceEntityArn }).(pulumi.StringPtrOutput)
}

// The HTTP status of the request.
func (o DashboardVersionOutput) Status() DashboardResourceStatusPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *DashboardResourceStatus { return v.Status }).(DashboardResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with a version of the dashboard.</p>
func (o DashboardVersionOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVersion) *string { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

// <p>Version number for this version of the dashboard.</p>
func (o DashboardVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type DashboardVersionPtrOutput struct{ *pulumi.OutputState }

func (DashboardVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVersion)(nil)).Elem()
}

func (o DashboardVersionPtrOutput) ToDashboardVersionPtrOutput() DashboardVersionPtrOutput {
	return o
}

func (o DashboardVersionPtrOutput) ToDashboardVersionPtrOutputWithContext(ctx context.Context) DashboardVersionPtrOutput {
	return o
}

func (o DashboardVersionPtrOutput) Elem() DashboardVersionOutput {
	return o.ApplyT(func(v *DashboardVersion) DashboardVersion {
		if v != nil {
			return *v
		}
		var ret DashboardVersion
		return ret
	}).(DashboardVersionOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardVersionPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>The time that this dashboard version was created.</p>
func (o DashboardVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
//
//	version of the dashboard.</p>
func (o DashboardVersionPtrOutput) DataSetArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardVersion) []string {
		if v == nil {
			return nil
		}
		return v.DataSetArns
	}).(pulumi.StringArrayOutput)
}

// <p>Description.</p>
func (o DashboardVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this dashboard version.</p>
func (o DashboardVersionPtrOutput) Errors() DashboardErrorArrayOutput {
	return o.ApplyT(func(v *DashboardVersion) []DashboardError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(DashboardErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o DashboardVersionPtrOutput) Sheets() DashboardSheetArrayOutput {
	return o.ApplyT(func(v *DashboardVersion) []DashboardSheet {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(DashboardSheetArrayOutput)
}

// <p>Source entity ARN.</p>
func (o DashboardVersionPtrOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.SourceEntityArn
	}).(pulumi.StringPtrOutput)
}

// The HTTP status of the request.
func (o DashboardVersionPtrOutput) Status() DashboardResourceStatusPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *DashboardResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DashboardResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with a version of the dashboard.</p>
func (o DashboardVersionPtrOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *string {
		if v == nil {
			return nil
		}
		return v.ThemeArn
	}).(pulumi.StringPtrOutput)
}

// <p>Version number for this version of the dashboard.</p>
func (o DashboardVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

type DashboardVersionDefinition struct {
	AnalysisDefaults *DashboardAnalysisDefaults `pulumi:"analysisDefaults"`
	// An array of calculated field definitions for the dashboard.
	CalculatedFields []DashboardCalculatedField `pulumi:"calculatedFields"`
	// An array of dashboard-level column configurations. Column configurations are used to set the default formatting for a column that is used throughout a dashboard.
	ColumnConfigurations []DashboardColumnConfiguration `pulumi:"columnConfigurations"`
	// An array of dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures.
	DataSetIdentifierDeclarations []DashboardDataSetIdentifierDeclaration `pulumi:"dataSetIdentifierDeclarations"`
	// The filter definitions for a dashboard.
	//
	// For more information, see [Filtering Data in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the *Amazon QuickSight User Guide* .
	FilterGroups []DashboardFilterGroup `pulumi:"filterGroups"`
	// An array of option definitions for a dashboard.
	Options *DashboardAssetOptions `pulumi:"options"`
	// The parameter declarations for a dashboard. Parameters are named variables that can transfer a value for use by an action or an object.
	//
	// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
	ParameterDeclarations []DashboardParameterDeclaration `pulumi:"parameterDeclarations"`
	// An array of sheet definitions for a dashboard.
	Sheets []DashboardSheetDefinition `pulumi:"sheets"`
	// The static files for the definition.
	StaticFiles []DashboardStaticFile `pulumi:"staticFiles"`
}

// DashboardVersionDefinitionInput is an input type that accepts DashboardVersionDefinitionArgs and DashboardVersionDefinitionOutput values.
// You can construct a concrete instance of `DashboardVersionDefinitionInput` via:
//
//	DashboardVersionDefinitionArgs{...}
type DashboardVersionDefinitionInput interface {
	pulumi.Input

	ToDashboardVersionDefinitionOutput() DashboardVersionDefinitionOutput
	ToDashboardVersionDefinitionOutputWithContext(context.Context) DashboardVersionDefinitionOutput
}

type DashboardVersionDefinitionArgs struct {
	AnalysisDefaults DashboardAnalysisDefaultsPtrInput `pulumi:"analysisDefaults"`
	// An array of calculated field definitions for the dashboard.
	CalculatedFields DashboardCalculatedFieldArrayInput `pulumi:"calculatedFields"`
	// An array of dashboard-level column configurations. Column configurations are used to set the default formatting for a column that is used throughout a dashboard.
	ColumnConfigurations DashboardColumnConfigurationArrayInput `pulumi:"columnConfigurations"`
	// An array of dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures.
	DataSetIdentifierDeclarations DashboardDataSetIdentifierDeclarationArrayInput `pulumi:"dataSetIdentifierDeclarations"`
	// The filter definitions for a dashboard.
	//
	// For more information, see [Filtering Data in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the *Amazon QuickSight User Guide* .
	FilterGroups DashboardFilterGroupArrayInput `pulumi:"filterGroups"`
	// An array of option definitions for a dashboard.
	Options DashboardAssetOptionsPtrInput `pulumi:"options"`
	// The parameter declarations for a dashboard. Parameters are named variables that can transfer a value for use by an action or an object.
	//
	// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
	ParameterDeclarations DashboardParameterDeclarationArrayInput `pulumi:"parameterDeclarations"`
	// An array of sheet definitions for a dashboard.
	Sheets DashboardSheetDefinitionArrayInput `pulumi:"sheets"`
	// The static files for the definition.
	StaticFiles DashboardStaticFileArrayInput `pulumi:"staticFiles"`
}

func (DashboardVersionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVersionDefinition)(nil)).Elem()
}

func (i DashboardVersionDefinitionArgs) ToDashboardVersionDefinitionOutput() DashboardVersionDefinitionOutput {
	return i.ToDashboardVersionDefinitionOutputWithContext(context.Background())
}

func (i DashboardVersionDefinitionArgs) ToDashboardVersionDefinitionOutputWithContext(ctx context.Context) DashboardVersionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVersionDefinitionOutput)
}

func (i DashboardVersionDefinitionArgs) ToDashboardVersionDefinitionPtrOutput() DashboardVersionDefinitionPtrOutput {
	return i.ToDashboardVersionDefinitionPtrOutputWithContext(context.Background())
}

func (i DashboardVersionDefinitionArgs) ToDashboardVersionDefinitionPtrOutputWithContext(ctx context.Context) DashboardVersionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVersionDefinitionOutput).ToDashboardVersionDefinitionPtrOutputWithContext(ctx)
}

// DashboardVersionDefinitionPtrInput is an input type that accepts DashboardVersionDefinitionArgs, DashboardVersionDefinitionPtr and DashboardVersionDefinitionPtrOutput values.
// You can construct a concrete instance of `DashboardVersionDefinitionPtrInput` via:
//
//	        DashboardVersionDefinitionArgs{...}
//
//	or:
//
//	        nil
type DashboardVersionDefinitionPtrInput interface {
	pulumi.Input

	ToDashboardVersionDefinitionPtrOutput() DashboardVersionDefinitionPtrOutput
	ToDashboardVersionDefinitionPtrOutputWithContext(context.Context) DashboardVersionDefinitionPtrOutput
}

type dashboardVersionDefinitionPtrType DashboardVersionDefinitionArgs

func DashboardVersionDefinitionPtr(v *DashboardVersionDefinitionArgs) DashboardVersionDefinitionPtrInput {
	return (*dashboardVersionDefinitionPtrType)(v)
}

func (*dashboardVersionDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVersionDefinition)(nil)).Elem()
}

func (i *dashboardVersionDefinitionPtrType) ToDashboardVersionDefinitionPtrOutput() DashboardVersionDefinitionPtrOutput {
	return i.ToDashboardVersionDefinitionPtrOutputWithContext(context.Background())
}

func (i *dashboardVersionDefinitionPtrType) ToDashboardVersionDefinitionPtrOutputWithContext(ctx context.Context) DashboardVersionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVersionDefinitionPtrOutput)
}

type DashboardVersionDefinitionOutput struct{ *pulumi.OutputState }

func (DashboardVersionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVersionDefinition)(nil)).Elem()
}

func (o DashboardVersionDefinitionOutput) ToDashboardVersionDefinitionOutput() DashboardVersionDefinitionOutput {
	return o
}

func (o DashboardVersionDefinitionOutput) ToDashboardVersionDefinitionOutputWithContext(ctx context.Context) DashboardVersionDefinitionOutput {
	return o
}

func (o DashboardVersionDefinitionOutput) ToDashboardVersionDefinitionPtrOutput() DashboardVersionDefinitionPtrOutput {
	return o.ToDashboardVersionDefinitionPtrOutputWithContext(context.Background())
}

func (o DashboardVersionDefinitionOutput) ToDashboardVersionDefinitionPtrOutputWithContext(ctx context.Context) DashboardVersionDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVersionDefinition) *DashboardVersionDefinition {
		return &v
	}).(DashboardVersionDefinitionPtrOutput)
}

func (o DashboardVersionDefinitionOutput) AnalysisDefaults() DashboardAnalysisDefaultsPtrOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) *DashboardAnalysisDefaults { return v.AnalysisDefaults }).(DashboardAnalysisDefaultsPtrOutput)
}

// An array of calculated field definitions for the dashboard.
func (o DashboardVersionDefinitionOutput) CalculatedFields() DashboardCalculatedFieldArrayOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) []DashboardCalculatedField { return v.CalculatedFields }).(DashboardCalculatedFieldArrayOutput)
}

// An array of dashboard-level column configurations. Column configurations are used to set the default formatting for a column that is used throughout a dashboard.
func (o DashboardVersionDefinitionOutput) ColumnConfigurations() DashboardColumnConfigurationArrayOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) []DashboardColumnConfiguration { return v.ColumnConfigurations }).(DashboardColumnConfigurationArrayOutput)
}

// An array of dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures.
func (o DashboardVersionDefinitionOutput) DataSetIdentifierDeclarations() DashboardDataSetIdentifierDeclarationArrayOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) []DashboardDataSetIdentifierDeclaration {
		return v.DataSetIdentifierDeclarations
	}).(DashboardDataSetIdentifierDeclarationArrayOutput)
}

// The filter definitions for a dashboard.
//
// For more information, see [Filtering Data in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVersionDefinitionOutput) FilterGroups() DashboardFilterGroupArrayOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) []DashboardFilterGroup { return v.FilterGroups }).(DashboardFilterGroupArrayOutput)
}

// An array of option definitions for a dashboard.
func (o DashboardVersionDefinitionOutput) Options() DashboardAssetOptionsPtrOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) *DashboardAssetOptions { return v.Options }).(DashboardAssetOptionsPtrOutput)
}

// The parameter declarations for a dashboard. Parameters are named variables that can transfer a value for use by an action or an object.
//
// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVersionDefinitionOutput) ParameterDeclarations() DashboardParameterDeclarationArrayOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) []DashboardParameterDeclaration { return v.ParameterDeclarations }).(DashboardParameterDeclarationArrayOutput)
}

// An array of sheet definitions for a dashboard.
func (o DashboardVersionDefinitionOutput) Sheets() DashboardSheetDefinitionArrayOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) []DashboardSheetDefinition { return v.Sheets }).(DashboardSheetDefinitionArrayOutput)
}

// The static files for the definition.
func (o DashboardVersionDefinitionOutput) StaticFiles() DashboardStaticFileArrayOutput {
	return o.ApplyT(func(v DashboardVersionDefinition) []DashboardStaticFile { return v.StaticFiles }).(DashboardStaticFileArrayOutput)
}

type DashboardVersionDefinitionPtrOutput struct{ *pulumi.OutputState }

func (DashboardVersionDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVersionDefinition)(nil)).Elem()
}

func (o DashboardVersionDefinitionPtrOutput) ToDashboardVersionDefinitionPtrOutput() DashboardVersionDefinitionPtrOutput {
	return o
}

func (o DashboardVersionDefinitionPtrOutput) ToDashboardVersionDefinitionPtrOutputWithContext(ctx context.Context) DashboardVersionDefinitionPtrOutput {
	return o
}

func (o DashboardVersionDefinitionPtrOutput) Elem() DashboardVersionDefinitionOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) DashboardVersionDefinition {
		if v != nil {
			return *v
		}
		var ret DashboardVersionDefinition
		return ret
	}).(DashboardVersionDefinitionOutput)
}

func (o DashboardVersionDefinitionPtrOutput) AnalysisDefaults() DashboardAnalysisDefaultsPtrOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) *DashboardAnalysisDefaults {
		if v == nil {
			return nil
		}
		return v.AnalysisDefaults
	}).(DashboardAnalysisDefaultsPtrOutput)
}

// An array of calculated field definitions for the dashboard.
func (o DashboardVersionDefinitionPtrOutput) CalculatedFields() DashboardCalculatedFieldArrayOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) []DashboardCalculatedField {
		if v == nil {
			return nil
		}
		return v.CalculatedFields
	}).(DashboardCalculatedFieldArrayOutput)
}

// An array of dashboard-level column configurations. Column configurations are used to set the default formatting for a column that is used throughout a dashboard.
func (o DashboardVersionDefinitionPtrOutput) ColumnConfigurations() DashboardColumnConfigurationArrayOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) []DashboardColumnConfiguration {
		if v == nil {
			return nil
		}
		return v.ColumnConfigurations
	}).(DashboardColumnConfigurationArrayOutput)
}

// An array of dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures.
func (o DashboardVersionDefinitionPtrOutput) DataSetIdentifierDeclarations() DashboardDataSetIdentifierDeclarationArrayOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) []DashboardDataSetIdentifierDeclaration {
		if v == nil {
			return nil
		}
		return v.DataSetIdentifierDeclarations
	}).(DashboardDataSetIdentifierDeclarationArrayOutput)
}

// The filter definitions for a dashboard.
//
// For more information, see [Filtering Data in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVersionDefinitionPtrOutput) FilterGroups() DashboardFilterGroupArrayOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) []DashboardFilterGroup {
		if v == nil {
			return nil
		}
		return v.FilterGroups
	}).(DashboardFilterGroupArrayOutput)
}

// An array of option definitions for a dashboard.
func (o DashboardVersionDefinitionPtrOutput) Options() DashboardAssetOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) *DashboardAssetOptions {
		if v == nil {
			return nil
		}
		return v.Options
	}).(DashboardAssetOptionsPtrOutput)
}

// The parameter declarations for a dashboard. Parameters are named variables that can transfer a value for use by an action or an object.
//
// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVersionDefinitionPtrOutput) ParameterDeclarations() DashboardParameterDeclarationArrayOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) []DashboardParameterDeclaration {
		if v == nil {
			return nil
		}
		return v.ParameterDeclarations
	}).(DashboardParameterDeclarationArrayOutput)
}

// An array of sheet definitions for a dashboard.
func (o DashboardVersionDefinitionPtrOutput) Sheets() DashboardSheetDefinitionArrayOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) []DashboardSheetDefinition {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(DashboardSheetDefinitionArrayOutput)
}

// The static files for the definition.
func (o DashboardVersionDefinitionPtrOutput) StaticFiles() DashboardStaticFileArrayOutput {
	return o.ApplyT(func(v *DashboardVersionDefinition) []DashboardStaticFile {
		if v == nil {
			return nil
		}
		return v.StaticFiles
	}).(DashboardStaticFileArrayOutput)
}

type DashboardVisibleRangeOptions struct {
	// The percent range in the visible range.
	PercentRange *DashboardPercentVisibleRange `pulumi:"percentRange"`
}

// DashboardVisibleRangeOptionsInput is an input type that accepts DashboardVisibleRangeOptionsArgs and DashboardVisibleRangeOptionsOutput values.
// You can construct a concrete instance of `DashboardVisibleRangeOptionsInput` via:
//
//	DashboardVisibleRangeOptionsArgs{...}
type DashboardVisibleRangeOptionsInput interface {
	pulumi.Input

	ToDashboardVisibleRangeOptionsOutput() DashboardVisibleRangeOptionsOutput
	ToDashboardVisibleRangeOptionsOutputWithContext(context.Context) DashboardVisibleRangeOptionsOutput
}

type DashboardVisibleRangeOptionsArgs struct {
	// The percent range in the visible range.
	PercentRange DashboardPercentVisibleRangePtrInput `pulumi:"percentRange"`
}

func (DashboardVisibleRangeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisibleRangeOptions)(nil)).Elem()
}

func (i DashboardVisibleRangeOptionsArgs) ToDashboardVisibleRangeOptionsOutput() DashboardVisibleRangeOptionsOutput {
	return i.ToDashboardVisibleRangeOptionsOutputWithContext(context.Background())
}

func (i DashboardVisibleRangeOptionsArgs) ToDashboardVisibleRangeOptionsOutputWithContext(ctx context.Context) DashboardVisibleRangeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisibleRangeOptionsOutput)
}

func (i DashboardVisibleRangeOptionsArgs) ToDashboardVisibleRangeOptionsPtrOutput() DashboardVisibleRangeOptionsPtrOutput {
	return i.ToDashboardVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardVisibleRangeOptionsArgs) ToDashboardVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) DashboardVisibleRangeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisibleRangeOptionsOutput).ToDashboardVisibleRangeOptionsPtrOutputWithContext(ctx)
}

// DashboardVisibleRangeOptionsPtrInput is an input type that accepts DashboardVisibleRangeOptionsArgs, DashboardVisibleRangeOptionsPtr and DashboardVisibleRangeOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardVisibleRangeOptionsPtrInput` via:
//
//	        DashboardVisibleRangeOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardVisibleRangeOptionsPtrInput interface {
	pulumi.Input

	ToDashboardVisibleRangeOptionsPtrOutput() DashboardVisibleRangeOptionsPtrOutput
	ToDashboardVisibleRangeOptionsPtrOutputWithContext(context.Context) DashboardVisibleRangeOptionsPtrOutput
}

type dashboardVisibleRangeOptionsPtrType DashboardVisibleRangeOptionsArgs

func DashboardVisibleRangeOptionsPtr(v *DashboardVisibleRangeOptionsArgs) DashboardVisibleRangeOptionsPtrInput {
	return (*dashboardVisibleRangeOptionsPtrType)(v)
}

func (*dashboardVisibleRangeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisibleRangeOptions)(nil)).Elem()
}

func (i *dashboardVisibleRangeOptionsPtrType) ToDashboardVisibleRangeOptionsPtrOutput() DashboardVisibleRangeOptionsPtrOutput {
	return i.ToDashboardVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardVisibleRangeOptionsPtrType) ToDashboardVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) DashboardVisibleRangeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisibleRangeOptionsPtrOutput)
}

type DashboardVisibleRangeOptionsOutput struct{ *pulumi.OutputState }

func (DashboardVisibleRangeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisibleRangeOptions)(nil)).Elem()
}

func (o DashboardVisibleRangeOptionsOutput) ToDashboardVisibleRangeOptionsOutput() DashboardVisibleRangeOptionsOutput {
	return o
}

func (o DashboardVisibleRangeOptionsOutput) ToDashboardVisibleRangeOptionsOutputWithContext(ctx context.Context) DashboardVisibleRangeOptionsOutput {
	return o
}

func (o DashboardVisibleRangeOptionsOutput) ToDashboardVisibleRangeOptionsPtrOutput() DashboardVisibleRangeOptionsPtrOutput {
	return o.ToDashboardVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardVisibleRangeOptionsOutput) ToDashboardVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) DashboardVisibleRangeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisibleRangeOptions) *DashboardVisibleRangeOptions {
		return &v
	}).(DashboardVisibleRangeOptionsPtrOutput)
}

// The percent range in the visible range.
func (o DashboardVisibleRangeOptionsOutput) PercentRange() DashboardPercentVisibleRangePtrOutput {
	return o.ApplyT(func(v DashboardVisibleRangeOptions) *DashboardPercentVisibleRange { return v.PercentRange }).(DashboardPercentVisibleRangePtrOutput)
}

type DashboardVisibleRangeOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardVisibleRangeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisibleRangeOptions)(nil)).Elem()
}

func (o DashboardVisibleRangeOptionsPtrOutput) ToDashboardVisibleRangeOptionsPtrOutput() DashboardVisibleRangeOptionsPtrOutput {
	return o
}

func (o DashboardVisibleRangeOptionsPtrOutput) ToDashboardVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) DashboardVisibleRangeOptionsPtrOutput {
	return o
}

func (o DashboardVisibleRangeOptionsPtrOutput) Elem() DashboardVisibleRangeOptionsOutput {
	return o.ApplyT(func(v *DashboardVisibleRangeOptions) DashboardVisibleRangeOptions {
		if v != nil {
			return *v
		}
		var ret DashboardVisibleRangeOptions
		return ret
	}).(DashboardVisibleRangeOptionsOutput)
}

// The percent range in the visible range.
func (o DashboardVisibleRangeOptionsPtrOutput) PercentRange() DashboardPercentVisibleRangePtrOutput {
	return o.ApplyT(func(v *DashboardVisibleRangeOptions) *DashboardPercentVisibleRange {
		if v == nil {
			return nil
		}
		return v.PercentRange
	}).(DashboardPercentVisibleRangePtrOutput)
}

type DashboardVisual struct {
	// A bar chart.
	//
	// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
	BarChartVisual *DashboardBarChartVisual `pulumi:"barChartVisual"`
	// A box plot.
	//
	// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
	BoxPlotVisual *DashboardBoxPlotVisual `pulumi:"boxPlotVisual"`
	// A combo chart.
	//
	// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
	ComboChartVisual *DashboardComboChartVisual `pulumi:"comboChartVisual"`
	// A visual that contains custom content.
	//
	// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
	CustomContentVisual *DashboardCustomContentVisual `pulumi:"customContentVisual"`
	// An empty visual.
	EmptyVisual *DashboardEmptyVisual `pulumi:"emptyVisual"`
	// A filled map.
	//
	// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
	FilledMapVisual *DashboardFilledMapVisual `pulumi:"filledMapVisual"`
	// A funnel chart.
	//
	// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
	FunnelChartVisual *DashboardFunnelChartVisual `pulumi:"funnelChartVisual"`
	// A gauge chart.
	//
	// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
	GaugeChartVisual *DashboardGaugeChartVisual `pulumi:"gaugeChartVisual"`
	// A geospatial map or a points on map visual.
	//
	// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
	GeospatialMapVisual *DashboardGeospatialMapVisual `pulumi:"geospatialMapVisual"`
	// A heat map.
	//
	// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
	HeatMapVisual *DashboardHeatMapVisual `pulumi:"heatMapVisual"`
	// A histogram.
	//
	// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
	HistogramVisual *DashboardHistogramVisual `pulumi:"histogramVisual"`
	// An insight visual.
	//
	// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
	InsightVisual *DashboardInsightVisual `pulumi:"insightVisual"`
	// A key performance indicator (KPI).
	//
	// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
	KpiVisual *DashboardKpiVisual `pulumi:"kpiVisual"`
	// The properties for a layer map visual
	LayerMapVisual *DashboardLayerMapVisual `pulumi:"layerMapVisual"`
	// A line chart.
	//
	// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
	LineChartVisual *DashboardLineChartVisual `pulumi:"lineChartVisual"`
	// A pie or donut chart.
	//
	// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
	PieChartVisual *DashboardPieChartVisual `pulumi:"pieChartVisual"`
	// A pivot table.
	//
	// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
	PivotTableVisual *DashboardPivotTableVisual `pulumi:"pivotTableVisual"`
	// The custom plugin visual type.
	PluginVisual *DashboardPluginVisual `pulumi:"pluginVisual"`
	// A radar chart visual.
	//
	// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
	RadarChartVisual *DashboardRadarChartVisual `pulumi:"radarChartVisual"`
	// A sankey diagram.
	//
	// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
	SankeyDiagramVisual *DashboardSankeyDiagramVisual `pulumi:"sankeyDiagramVisual"`
	// A scatter plot.
	//
	// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
	ScatterPlotVisual *DashboardScatterPlotVisual `pulumi:"scatterPlotVisual"`
	// A table visual.
	//
	// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
	TableVisual *DashboardTableVisual `pulumi:"tableVisual"`
	// A tree map.
	//
	// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
	TreeMapVisual *DashboardTreeMapVisual `pulumi:"treeMapVisual"`
	// A waterfall chart.
	//
	// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
	WaterfallVisual *DashboardWaterfallVisual `pulumi:"waterfallVisual"`
	// A word cloud.
	//
	// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
	WordCloudVisual *DashboardWordCloudVisual `pulumi:"wordCloudVisual"`
}

// DashboardVisualInput is an input type that accepts DashboardVisualArgs and DashboardVisualOutput values.
// You can construct a concrete instance of `DashboardVisualInput` via:
//
//	DashboardVisualArgs{...}
type DashboardVisualInput interface {
	pulumi.Input

	ToDashboardVisualOutput() DashboardVisualOutput
	ToDashboardVisualOutputWithContext(context.Context) DashboardVisualOutput
}

type DashboardVisualArgs struct {
	// A bar chart.
	//
	// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
	BarChartVisual DashboardBarChartVisualPtrInput `pulumi:"barChartVisual"`
	// A box plot.
	//
	// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
	BoxPlotVisual DashboardBoxPlotVisualPtrInput `pulumi:"boxPlotVisual"`
	// A combo chart.
	//
	// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
	ComboChartVisual DashboardComboChartVisualPtrInput `pulumi:"comboChartVisual"`
	// A visual that contains custom content.
	//
	// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
	CustomContentVisual DashboardCustomContentVisualPtrInput `pulumi:"customContentVisual"`
	// An empty visual.
	EmptyVisual DashboardEmptyVisualPtrInput `pulumi:"emptyVisual"`
	// A filled map.
	//
	// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
	FilledMapVisual DashboardFilledMapVisualPtrInput `pulumi:"filledMapVisual"`
	// A funnel chart.
	//
	// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
	FunnelChartVisual DashboardFunnelChartVisualPtrInput `pulumi:"funnelChartVisual"`
	// A gauge chart.
	//
	// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
	GaugeChartVisual DashboardGaugeChartVisualPtrInput `pulumi:"gaugeChartVisual"`
	// A geospatial map or a points on map visual.
	//
	// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
	GeospatialMapVisual DashboardGeospatialMapVisualPtrInput `pulumi:"geospatialMapVisual"`
	// A heat map.
	//
	// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
	HeatMapVisual DashboardHeatMapVisualPtrInput `pulumi:"heatMapVisual"`
	// A histogram.
	//
	// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
	HistogramVisual DashboardHistogramVisualPtrInput `pulumi:"histogramVisual"`
	// An insight visual.
	//
	// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
	InsightVisual DashboardInsightVisualPtrInput `pulumi:"insightVisual"`
	// A key performance indicator (KPI).
	//
	// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
	KpiVisual DashboardKpiVisualPtrInput `pulumi:"kpiVisual"`
	// The properties for a layer map visual
	LayerMapVisual DashboardLayerMapVisualPtrInput `pulumi:"layerMapVisual"`
	// A line chart.
	//
	// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
	LineChartVisual DashboardLineChartVisualPtrInput `pulumi:"lineChartVisual"`
	// A pie or donut chart.
	//
	// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
	PieChartVisual DashboardPieChartVisualPtrInput `pulumi:"pieChartVisual"`
	// A pivot table.
	//
	// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
	PivotTableVisual DashboardPivotTableVisualPtrInput `pulumi:"pivotTableVisual"`
	// The custom plugin visual type.
	PluginVisual DashboardPluginVisualPtrInput `pulumi:"pluginVisual"`
	// A radar chart visual.
	//
	// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
	RadarChartVisual DashboardRadarChartVisualPtrInput `pulumi:"radarChartVisual"`
	// A sankey diagram.
	//
	// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
	SankeyDiagramVisual DashboardSankeyDiagramVisualPtrInput `pulumi:"sankeyDiagramVisual"`
	// A scatter plot.
	//
	// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
	ScatterPlotVisual DashboardScatterPlotVisualPtrInput `pulumi:"scatterPlotVisual"`
	// A table visual.
	//
	// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
	TableVisual DashboardTableVisualPtrInput `pulumi:"tableVisual"`
	// A tree map.
	//
	// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
	TreeMapVisual DashboardTreeMapVisualPtrInput `pulumi:"treeMapVisual"`
	// A waterfall chart.
	//
	// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
	WaterfallVisual DashboardWaterfallVisualPtrInput `pulumi:"waterfallVisual"`
	// A word cloud.
	//
	// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
	WordCloudVisual DashboardWordCloudVisualPtrInput `pulumi:"wordCloudVisual"`
}

func (DashboardVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisual)(nil)).Elem()
}

func (i DashboardVisualArgs) ToDashboardVisualOutput() DashboardVisualOutput {
	return i.ToDashboardVisualOutputWithContext(context.Background())
}

func (i DashboardVisualArgs) ToDashboardVisualOutputWithContext(ctx context.Context) DashboardVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualOutput)
}

// DashboardVisualArrayInput is an input type that accepts DashboardVisualArray and DashboardVisualArrayOutput values.
// You can construct a concrete instance of `DashboardVisualArrayInput` via:
//
//	DashboardVisualArray{ DashboardVisualArgs{...} }
type DashboardVisualArrayInput interface {
	pulumi.Input

	ToDashboardVisualArrayOutput() DashboardVisualArrayOutput
	ToDashboardVisualArrayOutputWithContext(context.Context) DashboardVisualArrayOutput
}

type DashboardVisualArray []DashboardVisualInput

func (DashboardVisualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVisual)(nil)).Elem()
}

func (i DashboardVisualArray) ToDashboardVisualArrayOutput() DashboardVisualArrayOutput {
	return i.ToDashboardVisualArrayOutputWithContext(context.Background())
}

func (i DashboardVisualArray) ToDashboardVisualArrayOutputWithContext(ctx context.Context) DashboardVisualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualArrayOutput)
}

type DashboardVisualOutput struct{ *pulumi.OutputState }

func (DashboardVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisual)(nil)).Elem()
}

func (o DashboardVisualOutput) ToDashboardVisualOutput() DashboardVisualOutput {
	return o
}

func (o DashboardVisualOutput) ToDashboardVisualOutputWithContext(ctx context.Context) DashboardVisualOutput {
	return o
}

// A bar chart.
//
// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) BarChartVisual() DashboardBarChartVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardBarChartVisual { return v.BarChartVisual }).(DashboardBarChartVisualPtrOutput)
}

// A box plot.
//
// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) BoxPlotVisual() DashboardBoxPlotVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardBoxPlotVisual { return v.BoxPlotVisual }).(DashboardBoxPlotVisualPtrOutput)
}

// A combo chart.
//
// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) ComboChartVisual() DashboardComboChartVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardComboChartVisual { return v.ComboChartVisual }).(DashboardComboChartVisualPtrOutput)
}

// A visual that contains custom content.
//
// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) CustomContentVisual() DashboardCustomContentVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardCustomContentVisual { return v.CustomContentVisual }).(DashboardCustomContentVisualPtrOutput)
}

// An empty visual.
func (o DashboardVisualOutput) EmptyVisual() DashboardEmptyVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardEmptyVisual { return v.EmptyVisual }).(DashboardEmptyVisualPtrOutput)
}

// A filled map.
//
// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) FilledMapVisual() DashboardFilledMapVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardFilledMapVisual { return v.FilledMapVisual }).(DashboardFilledMapVisualPtrOutput)
}

// A funnel chart.
//
// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) FunnelChartVisual() DashboardFunnelChartVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardFunnelChartVisual { return v.FunnelChartVisual }).(DashboardFunnelChartVisualPtrOutput)
}

// A gauge chart.
//
// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) GaugeChartVisual() DashboardGaugeChartVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardGaugeChartVisual { return v.GaugeChartVisual }).(DashboardGaugeChartVisualPtrOutput)
}

// A geospatial map or a points on map visual.
//
// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) GeospatialMapVisual() DashboardGeospatialMapVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardGeospatialMapVisual { return v.GeospatialMapVisual }).(DashboardGeospatialMapVisualPtrOutput)
}

// A heat map.
//
// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) HeatMapVisual() DashboardHeatMapVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardHeatMapVisual { return v.HeatMapVisual }).(DashboardHeatMapVisualPtrOutput)
}

// A histogram.
//
// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) HistogramVisual() DashboardHistogramVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardHistogramVisual { return v.HistogramVisual }).(DashboardHistogramVisualPtrOutput)
}

// An insight visual.
//
// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) InsightVisual() DashboardInsightVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardInsightVisual { return v.InsightVisual }).(DashboardInsightVisualPtrOutput)
}

// A key performance indicator (KPI).
//
// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) KpiVisual() DashboardKpiVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardKpiVisual { return v.KpiVisual }).(DashboardKpiVisualPtrOutput)
}

// The properties for a layer map visual
func (o DashboardVisualOutput) LayerMapVisual() DashboardLayerMapVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardLayerMapVisual { return v.LayerMapVisual }).(DashboardLayerMapVisualPtrOutput)
}

// A line chart.
//
// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) LineChartVisual() DashboardLineChartVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardLineChartVisual { return v.LineChartVisual }).(DashboardLineChartVisualPtrOutput)
}

// A pie or donut chart.
//
// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) PieChartVisual() DashboardPieChartVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardPieChartVisual { return v.PieChartVisual }).(DashboardPieChartVisualPtrOutput)
}

// A pivot table.
//
// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) PivotTableVisual() DashboardPivotTableVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardPivotTableVisual { return v.PivotTableVisual }).(DashboardPivotTableVisualPtrOutput)
}

// The custom plugin visual type.
func (o DashboardVisualOutput) PluginVisual() DashboardPluginVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardPluginVisual { return v.PluginVisual }).(DashboardPluginVisualPtrOutput)
}

// A radar chart visual.
//
// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) RadarChartVisual() DashboardRadarChartVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardRadarChartVisual { return v.RadarChartVisual }).(DashboardRadarChartVisualPtrOutput)
}

// A sankey diagram.
//
// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) SankeyDiagramVisual() DashboardSankeyDiagramVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardSankeyDiagramVisual { return v.SankeyDiagramVisual }).(DashboardSankeyDiagramVisualPtrOutput)
}

// A scatter plot.
//
// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) ScatterPlotVisual() DashboardScatterPlotVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardScatterPlotVisual { return v.ScatterPlotVisual }).(DashboardScatterPlotVisualPtrOutput)
}

// A table visual.
//
// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) TableVisual() DashboardTableVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardTableVisual { return v.TableVisual }).(DashboardTableVisualPtrOutput)
}

// A tree map.
//
// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) TreeMapVisual() DashboardTreeMapVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardTreeMapVisual { return v.TreeMapVisual }).(DashboardTreeMapVisualPtrOutput)
}

// A waterfall chart.
//
// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) WaterfallVisual() DashboardWaterfallVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardWaterfallVisual { return v.WaterfallVisual }).(DashboardWaterfallVisualPtrOutput)
}

// A word cloud.
//
// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
func (o DashboardVisualOutput) WordCloudVisual() DashboardWordCloudVisualPtrOutput {
	return o.ApplyT(func(v DashboardVisual) *DashboardWordCloudVisual { return v.WordCloudVisual }).(DashboardWordCloudVisualPtrOutput)
}

type DashboardVisualArrayOutput struct{ *pulumi.OutputState }

func (DashboardVisualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVisual)(nil)).Elem()
}

func (o DashboardVisualArrayOutput) ToDashboardVisualArrayOutput() DashboardVisualArrayOutput {
	return o
}

func (o DashboardVisualArrayOutput) ToDashboardVisualArrayOutputWithContext(ctx context.Context) DashboardVisualArrayOutput {
	return o
}

func (o DashboardVisualArrayOutput) Index(i pulumi.IntInput) DashboardVisualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardVisual {
		return vs[0].([]DashboardVisual)[vs[1].(int)]
	}).(DashboardVisualOutput)
}

type DashboardVisualAxisSortOption struct {
	// The availaiblity status of a visual's axis sort options.
	AvailabilityStatus *DashboardBehavior `pulumi:"availabilityStatus"`
}

// DashboardVisualAxisSortOptionInput is an input type that accepts DashboardVisualAxisSortOptionArgs and DashboardVisualAxisSortOptionOutput values.
// You can construct a concrete instance of `DashboardVisualAxisSortOptionInput` via:
//
//	DashboardVisualAxisSortOptionArgs{...}
type DashboardVisualAxisSortOptionInput interface {
	pulumi.Input

	ToDashboardVisualAxisSortOptionOutput() DashboardVisualAxisSortOptionOutput
	ToDashboardVisualAxisSortOptionOutputWithContext(context.Context) DashboardVisualAxisSortOptionOutput
}

type DashboardVisualAxisSortOptionArgs struct {
	// The availaiblity status of a visual's axis sort options.
	AvailabilityStatus DashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardVisualAxisSortOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualAxisSortOption)(nil)).Elem()
}

func (i DashboardVisualAxisSortOptionArgs) ToDashboardVisualAxisSortOptionOutput() DashboardVisualAxisSortOptionOutput {
	return i.ToDashboardVisualAxisSortOptionOutputWithContext(context.Background())
}

func (i DashboardVisualAxisSortOptionArgs) ToDashboardVisualAxisSortOptionOutputWithContext(ctx context.Context) DashboardVisualAxisSortOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualAxisSortOptionOutput)
}

func (i DashboardVisualAxisSortOptionArgs) ToDashboardVisualAxisSortOptionPtrOutput() DashboardVisualAxisSortOptionPtrOutput {
	return i.ToDashboardVisualAxisSortOptionPtrOutputWithContext(context.Background())
}

func (i DashboardVisualAxisSortOptionArgs) ToDashboardVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardVisualAxisSortOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualAxisSortOptionOutput).ToDashboardVisualAxisSortOptionPtrOutputWithContext(ctx)
}

// DashboardVisualAxisSortOptionPtrInput is an input type that accepts DashboardVisualAxisSortOptionArgs, DashboardVisualAxisSortOptionPtr and DashboardVisualAxisSortOptionPtrOutput values.
// You can construct a concrete instance of `DashboardVisualAxisSortOptionPtrInput` via:
//
//	        DashboardVisualAxisSortOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardVisualAxisSortOptionPtrInput interface {
	pulumi.Input

	ToDashboardVisualAxisSortOptionPtrOutput() DashboardVisualAxisSortOptionPtrOutput
	ToDashboardVisualAxisSortOptionPtrOutputWithContext(context.Context) DashboardVisualAxisSortOptionPtrOutput
}

type dashboardVisualAxisSortOptionPtrType DashboardVisualAxisSortOptionArgs

func DashboardVisualAxisSortOptionPtr(v *DashboardVisualAxisSortOptionArgs) DashboardVisualAxisSortOptionPtrInput {
	return (*dashboardVisualAxisSortOptionPtrType)(v)
}

func (*dashboardVisualAxisSortOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualAxisSortOption)(nil)).Elem()
}

func (i *dashboardVisualAxisSortOptionPtrType) ToDashboardVisualAxisSortOptionPtrOutput() DashboardVisualAxisSortOptionPtrOutput {
	return i.ToDashboardVisualAxisSortOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardVisualAxisSortOptionPtrType) ToDashboardVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardVisualAxisSortOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualAxisSortOptionPtrOutput)
}

type DashboardVisualAxisSortOptionOutput struct{ *pulumi.OutputState }

func (DashboardVisualAxisSortOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualAxisSortOption)(nil)).Elem()
}

func (o DashboardVisualAxisSortOptionOutput) ToDashboardVisualAxisSortOptionOutput() DashboardVisualAxisSortOptionOutput {
	return o
}

func (o DashboardVisualAxisSortOptionOutput) ToDashboardVisualAxisSortOptionOutputWithContext(ctx context.Context) DashboardVisualAxisSortOptionOutput {
	return o
}

func (o DashboardVisualAxisSortOptionOutput) ToDashboardVisualAxisSortOptionPtrOutput() DashboardVisualAxisSortOptionPtrOutput {
	return o.ToDashboardVisualAxisSortOptionPtrOutputWithContext(context.Background())
}

func (o DashboardVisualAxisSortOptionOutput) ToDashboardVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardVisualAxisSortOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisualAxisSortOption) *DashboardVisualAxisSortOption {
		return &v
	}).(DashboardVisualAxisSortOptionPtrOutput)
}

// The availaiblity status of a visual's axis sort options.
func (o DashboardVisualAxisSortOptionOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v DashboardVisualAxisSortOption) *DashboardBehavior { return v.AvailabilityStatus }).(DashboardBehaviorPtrOutput)
}

type DashboardVisualAxisSortOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardVisualAxisSortOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualAxisSortOption)(nil)).Elem()
}

func (o DashboardVisualAxisSortOptionPtrOutput) ToDashboardVisualAxisSortOptionPtrOutput() DashboardVisualAxisSortOptionPtrOutput {
	return o
}

func (o DashboardVisualAxisSortOptionPtrOutput) ToDashboardVisualAxisSortOptionPtrOutputWithContext(ctx context.Context) DashboardVisualAxisSortOptionPtrOutput {
	return o
}

func (o DashboardVisualAxisSortOptionPtrOutput) Elem() DashboardVisualAxisSortOptionOutput {
	return o.ApplyT(func(v *DashboardVisualAxisSortOption) DashboardVisualAxisSortOption {
		if v != nil {
			return *v
		}
		var ret DashboardVisualAxisSortOption
		return ret
	}).(DashboardVisualAxisSortOptionOutput)
}

// The availaiblity status of a visual's axis sort options.
func (o DashboardVisualAxisSortOptionPtrOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *DashboardVisualAxisSortOption) *DashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(DashboardBehaviorPtrOutput)
}

type DashboardVisualCustomAction struct {
	// A list of `VisualCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations []DashboardVisualCustomActionOperation `pulumi:"actionOperations"`
	// The ID of the `VisualCustomAction` .
	CustomActionId string `pulumi:"customActionId"`
	// The name of the `VisualCustomAction` .
	Name string `pulumi:"name"`
	// The status of the `VisualCustomAction` .
	Status *DashboardWidgetStatus `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger DashboardVisualCustomActionTrigger `pulumi:"trigger"`
}

// DashboardVisualCustomActionInput is an input type that accepts DashboardVisualCustomActionArgs and DashboardVisualCustomActionOutput values.
// You can construct a concrete instance of `DashboardVisualCustomActionInput` via:
//
//	DashboardVisualCustomActionArgs{...}
type DashboardVisualCustomActionInput interface {
	pulumi.Input

	ToDashboardVisualCustomActionOutput() DashboardVisualCustomActionOutput
	ToDashboardVisualCustomActionOutputWithContext(context.Context) DashboardVisualCustomActionOutput
}

type DashboardVisualCustomActionArgs struct {
	// A list of `VisualCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations DashboardVisualCustomActionOperationArrayInput `pulumi:"actionOperations"`
	// The ID of the `VisualCustomAction` .
	CustomActionId pulumi.StringInput `pulumi:"customActionId"`
	// The name of the `VisualCustomAction` .
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the `VisualCustomAction` .
	Status DashboardWidgetStatusPtrInput `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger DashboardVisualCustomActionTriggerInput `pulumi:"trigger"`
}

func (DashboardVisualCustomActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualCustomAction)(nil)).Elem()
}

func (i DashboardVisualCustomActionArgs) ToDashboardVisualCustomActionOutput() DashboardVisualCustomActionOutput {
	return i.ToDashboardVisualCustomActionOutputWithContext(context.Background())
}

func (i DashboardVisualCustomActionArgs) ToDashboardVisualCustomActionOutputWithContext(ctx context.Context) DashboardVisualCustomActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualCustomActionOutput)
}

// DashboardVisualCustomActionArrayInput is an input type that accepts DashboardVisualCustomActionArray and DashboardVisualCustomActionArrayOutput values.
// You can construct a concrete instance of `DashboardVisualCustomActionArrayInput` via:
//
//	DashboardVisualCustomActionArray{ DashboardVisualCustomActionArgs{...} }
type DashboardVisualCustomActionArrayInput interface {
	pulumi.Input

	ToDashboardVisualCustomActionArrayOutput() DashboardVisualCustomActionArrayOutput
	ToDashboardVisualCustomActionArrayOutputWithContext(context.Context) DashboardVisualCustomActionArrayOutput
}

type DashboardVisualCustomActionArray []DashboardVisualCustomActionInput

func (DashboardVisualCustomActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVisualCustomAction)(nil)).Elem()
}

func (i DashboardVisualCustomActionArray) ToDashboardVisualCustomActionArrayOutput() DashboardVisualCustomActionArrayOutput {
	return i.ToDashboardVisualCustomActionArrayOutputWithContext(context.Background())
}

func (i DashboardVisualCustomActionArray) ToDashboardVisualCustomActionArrayOutputWithContext(ctx context.Context) DashboardVisualCustomActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualCustomActionArrayOutput)
}

type DashboardVisualCustomActionOutput struct{ *pulumi.OutputState }

func (DashboardVisualCustomActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualCustomAction)(nil)).Elem()
}

func (o DashboardVisualCustomActionOutput) ToDashboardVisualCustomActionOutput() DashboardVisualCustomActionOutput {
	return o
}

func (o DashboardVisualCustomActionOutput) ToDashboardVisualCustomActionOutputWithContext(ctx context.Context) DashboardVisualCustomActionOutput {
	return o
}

// A list of `VisualCustomActionOperations` .
//
// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
func (o DashboardVisualCustomActionOutput) ActionOperations() DashboardVisualCustomActionOperationArrayOutput {
	return o.ApplyT(func(v DashboardVisualCustomAction) []DashboardVisualCustomActionOperation { return v.ActionOperations }).(DashboardVisualCustomActionOperationArrayOutput)
}

// The ID of the `VisualCustomAction` .
func (o DashboardVisualCustomActionOutput) CustomActionId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardVisualCustomAction) string { return v.CustomActionId }).(pulumi.StringOutput)
}

// The name of the `VisualCustomAction` .
func (o DashboardVisualCustomActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardVisualCustomAction) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the `VisualCustomAction` .
func (o DashboardVisualCustomActionOutput) Status() DashboardWidgetStatusPtrOutput {
	return o.ApplyT(func(v DashboardVisualCustomAction) *DashboardWidgetStatus { return v.Status }).(DashboardWidgetStatusPtrOutput)
}

// The trigger of the `VisualCustomAction` .
//
// Valid values are defined as follows:
//
// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
func (o DashboardVisualCustomActionOutput) Trigger() DashboardVisualCustomActionTriggerOutput {
	return o.ApplyT(func(v DashboardVisualCustomAction) DashboardVisualCustomActionTrigger { return v.Trigger }).(DashboardVisualCustomActionTriggerOutput)
}

type DashboardVisualCustomActionArrayOutput struct{ *pulumi.OutputState }

func (DashboardVisualCustomActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVisualCustomAction)(nil)).Elem()
}

func (o DashboardVisualCustomActionArrayOutput) ToDashboardVisualCustomActionArrayOutput() DashboardVisualCustomActionArrayOutput {
	return o
}

func (o DashboardVisualCustomActionArrayOutput) ToDashboardVisualCustomActionArrayOutputWithContext(ctx context.Context) DashboardVisualCustomActionArrayOutput {
	return o
}

func (o DashboardVisualCustomActionArrayOutput) Index(i pulumi.IntInput) DashboardVisualCustomActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardVisualCustomAction {
		return vs[0].([]DashboardVisualCustomAction)[vs[1].(int)]
	}).(DashboardVisualCustomActionOutput)
}

type DashboardVisualCustomActionOperation struct {
	// The filter operation that filters data included in a visual or in an entire sheet.
	FilterOperation *DashboardCustomActionFilterOperation `pulumi:"filterOperation"`
	// The navigation operation that navigates between different sheets in the same analysis.
	NavigationOperation *DashboardCustomActionNavigationOperation `pulumi:"navigationOperation"`
	// The set parameter operation that sets parameters in custom action.
	SetParametersOperation *DashboardCustomActionSetParametersOperation `pulumi:"setParametersOperation"`
	// The URL operation that opens a link to another webpage.
	UrlOperation *DashboardCustomActionUrlOperation `pulumi:"urlOperation"`
}

// DashboardVisualCustomActionOperationInput is an input type that accepts DashboardVisualCustomActionOperationArgs and DashboardVisualCustomActionOperationOutput values.
// You can construct a concrete instance of `DashboardVisualCustomActionOperationInput` via:
//
//	DashboardVisualCustomActionOperationArgs{...}
type DashboardVisualCustomActionOperationInput interface {
	pulumi.Input

	ToDashboardVisualCustomActionOperationOutput() DashboardVisualCustomActionOperationOutput
	ToDashboardVisualCustomActionOperationOutputWithContext(context.Context) DashboardVisualCustomActionOperationOutput
}

type DashboardVisualCustomActionOperationArgs struct {
	// The filter operation that filters data included in a visual or in an entire sheet.
	FilterOperation DashboardCustomActionFilterOperationPtrInput `pulumi:"filterOperation"`
	// The navigation operation that navigates between different sheets in the same analysis.
	NavigationOperation DashboardCustomActionNavigationOperationPtrInput `pulumi:"navigationOperation"`
	// The set parameter operation that sets parameters in custom action.
	SetParametersOperation DashboardCustomActionSetParametersOperationPtrInput `pulumi:"setParametersOperation"`
	// The URL operation that opens a link to another webpage.
	UrlOperation DashboardCustomActionUrlOperationPtrInput `pulumi:"urlOperation"`
}

func (DashboardVisualCustomActionOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualCustomActionOperation)(nil)).Elem()
}

func (i DashboardVisualCustomActionOperationArgs) ToDashboardVisualCustomActionOperationOutput() DashboardVisualCustomActionOperationOutput {
	return i.ToDashboardVisualCustomActionOperationOutputWithContext(context.Background())
}

func (i DashboardVisualCustomActionOperationArgs) ToDashboardVisualCustomActionOperationOutputWithContext(ctx context.Context) DashboardVisualCustomActionOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualCustomActionOperationOutput)
}

// DashboardVisualCustomActionOperationArrayInput is an input type that accepts DashboardVisualCustomActionOperationArray and DashboardVisualCustomActionOperationArrayOutput values.
// You can construct a concrete instance of `DashboardVisualCustomActionOperationArrayInput` via:
//
//	DashboardVisualCustomActionOperationArray{ DashboardVisualCustomActionOperationArgs{...} }
type DashboardVisualCustomActionOperationArrayInput interface {
	pulumi.Input

	ToDashboardVisualCustomActionOperationArrayOutput() DashboardVisualCustomActionOperationArrayOutput
	ToDashboardVisualCustomActionOperationArrayOutputWithContext(context.Context) DashboardVisualCustomActionOperationArrayOutput
}

type DashboardVisualCustomActionOperationArray []DashboardVisualCustomActionOperationInput

func (DashboardVisualCustomActionOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVisualCustomActionOperation)(nil)).Elem()
}

func (i DashboardVisualCustomActionOperationArray) ToDashboardVisualCustomActionOperationArrayOutput() DashboardVisualCustomActionOperationArrayOutput {
	return i.ToDashboardVisualCustomActionOperationArrayOutputWithContext(context.Background())
}

func (i DashboardVisualCustomActionOperationArray) ToDashboardVisualCustomActionOperationArrayOutputWithContext(ctx context.Context) DashboardVisualCustomActionOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualCustomActionOperationArrayOutput)
}

type DashboardVisualCustomActionOperationOutput struct{ *pulumi.OutputState }

func (DashboardVisualCustomActionOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualCustomActionOperation)(nil)).Elem()
}

func (o DashboardVisualCustomActionOperationOutput) ToDashboardVisualCustomActionOperationOutput() DashboardVisualCustomActionOperationOutput {
	return o
}

func (o DashboardVisualCustomActionOperationOutput) ToDashboardVisualCustomActionOperationOutputWithContext(ctx context.Context) DashboardVisualCustomActionOperationOutput {
	return o
}

// The filter operation that filters data included in a visual or in an entire sheet.
func (o DashboardVisualCustomActionOperationOutput) FilterOperation() DashboardCustomActionFilterOperationPtrOutput {
	return o.ApplyT(func(v DashboardVisualCustomActionOperation) *DashboardCustomActionFilterOperation {
		return v.FilterOperation
	}).(DashboardCustomActionFilterOperationPtrOutput)
}

// The navigation operation that navigates between different sheets in the same analysis.
func (o DashboardVisualCustomActionOperationOutput) NavigationOperation() DashboardCustomActionNavigationOperationPtrOutput {
	return o.ApplyT(func(v DashboardVisualCustomActionOperation) *DashboardCustomActionNavigationOperation {
		return v.NavigationOperation
	}).(DashboardCustomActionNavigationOperationPtrOutput)
}

// The set parameter operation that sets parameters in custom action.
func (o DashboardVisualCustomActionOperationOutput) SetParametersOperation() DashboardCustomActionSetParametersOperationPtrOutput {
	return o.ApplyT(func(v DashboardVisualCustomActionOperation) *DashboardCustomActionSetParametersOperation {
		return v.SetParametersOperation
	}).(DashboardCustomActionSetParametersOperationPtrOutput)
}

// The URL operation that opens a link to another webpage.
func (o DashboardVisualCustomActionOperationOutput) UrlOperation() DashboardCustomActionUrlOperationPtrOutput {
	return o.ApplyT(func(v DashboardVisualCustomActionOperation) *DashboardCustomActionUrlOperation { return v.UrlOperation }).(DashboardCustomActionUrlOperationPtrOutput)
}

type DashboardVisualCustomActionOperationArrayOutput struct{ *pulumi.OutputState }

func (DashboardVisualCustomActionOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardVisualCustomActionOperation)(nil)).Elem()
}

func (o DashboardVisualCustomActionOperationArrayOutput) ToDashboardVisualCustomActionOperationArrayOutput() DashboardVisualCustomActionOperationArrayOutput {
	return o
}

func (o DashboardVisualCustomActionOperationArrayOutput) ToDashboardVisualCustomActionOperationArrayOutputWithContext(ctx context.Context) DashboardVisualCustomActionOperationArrayOutput {
	return o
}

func (o DashboardVisualCustomActionOperationArrayOutput) Index(i pulumi.IntInput) DashboardVisualCustomActionOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardVisualCustomActionOperation {
		return vs[0].([]DashboardVisualCustomActionOperation)[vs[1].(int)]
	}).(DashboardVisualCustomActionOperationOutput)
}

type DashboardVisualInteractionOptions struct {
	// The context menu options for a visual.
	ContextMenuOption *DashboardContextMenuOption `pulumi:"contextMenuOption"`
	// The on-visual menu options for a visual.
	VisualMenuOption *DashboardVisualMenuOption `pulumi:"visualMenuOption"`
}

// DashboardVisualInteractionOptionsInput is an input type that accepts DashboardVisualInteractionOptionsArgs and DashboardVisualInteractionOptionsOutput values.
// You can construct a concrete instance of `DashboardVisualInteractionOptionsInput` via:
//
//	DashboardVisualInteractionOptionsArgs{...}
type DashboardVisualInteractionOptionsInput interface {
	pulumi.Input

	ToDashboardVisualInteractionOptionsOutput() DashboardVisualInteractionOptionsOutput
	ToDashboardVisualInteractionOptionsOutputWithContext(context.Context) DashboardVisualInteractionOptionsOutput
}

type DashboardVisualInteractionOptionsArgs struct {
	// The context menu options for a visual.
	ContextMenuOption DashboardContextMenuOptionPtrInput `pulumi:"contextMenuOption"`
	// The on-visual menu options for a visual.
	VisualMenuOption DashboardVisualMenuOptionPtrInput `pulumi:"visualMenuOption"`
}

func (DashboardVisualInteractionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualInteractionOptions)(nil)).Elem()
}

func (i DashboardVisualInteractionOptionsArgs) ToDashboardVisualInteractionOptionsOutput() DashboardVisualInteractionOptionsOutput {
	return i.ToDashboardVisualInteractionOptionsOutputWithContext(context.Background())
}

func (i DashboardVisualInteractionOptionsArgs) ToDashboardVisualInteractionOptionsOutputWithContext(ctx context.Context) DashboardVisualInteractionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualInteractionOptionsOutput)
}

func (i DashboardVisualInteractionOptionsArgs) ToDashboardVisualInteractionOptionsPtrOutput() DashboardVisualInteractionOptionsPtrOutput {
	return i.ToDashboardVisualInteractionOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardVisualInteractionOptionsArgs) ToDashboardVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualInteractionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualInteractionOptionsOutput).ToDashboardVisualInteractionOptionsPtrOutputWithContext(ctx)
}

// DashboardVisualInteractionOptionsPtrInput is an input type that accepts DashboardVisualInteractionOptionsArgs, DashboardVisualInteractionOptionsPtr and DashboardVisualInteractionOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardVisualInteractionOptionsPtrInput` via:
//
//	        DashboardVisualInteractionOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardVisualInteractionOptionsPtrInput interface {
	pulumi.Input

	ToDashboardVisualInteractionOptionsPtrOutput() DashboardVisualInteractionOptionsPtrOutput
	ToDashboardVisualInteractionOptionsPtrOutputWithContext(context.Context) DashboardVisualInteractionOptionsPtrOutput
}

type dashboardVisualInteractionOptionsPtrType DashboardVisualInteractionOptionsArgs

func DashboardVisualInteractionOptionsPtr(v *DashboardVisualInteractionOptionsArgs) DashboardVisualInteractionOptionsPtrInput {
	return (*dashboardVisualInteractionOptionsPtrType)(v)
}

func (*dashboardVisualInteractionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualInteractionOptions)(nil)).Elem()
}

func (i *dashboardVisualInteractionOptionsPtrType) ToDashboardVisualInteractionOptionsPtrOutput() DashboardVisualInteractionOptionsPtrOutput {
	return i.ToDashboardVisualInteractionOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardVisualInteractionOptionsPtrType) ToDashboardVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualInteractionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualInteractionOptionsPtrOutput)
}

type DashboardVisualInteractionOptionsOutput struct{ *pulumi.OutputState }

func (DashboardVisualInteractionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualInteractionOptions)(nil)).Elem()
}

func (o DashboardVisualInteractionOptionsOutput) ToDashboardVisualInteractionOptionsOutput() DashboardVisualInteractionOptionsOutput {
	return o
}

func (o DashboardVisualInteractionOptionsOutput) ToDashboardVisualInteractionOptionsOutputWithContext(ctx context.Context) DashboardVisualInteractionOptionsOutput {
	return o
}

func (o DashboardVisualInteractionOptionsOutput) ToDashboardVisualInteractionOptionsPtrOutput() DashboardVisualInteractionOptionsPtrOutput {
	return o.ToDashboardVisualInteractionOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardVisualInteractionOptionsOutput) ToDashboardVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisualInteractionOptions) *DashboardVisualInteractionOptions {
		return &v
	}).(DashboardVisualInteractionOptionsPtrOutput)
}

// The context menu options for a visual.
func (o DashboardVisualInteractionOptionsOutput) ContextMenuOption() DashboardContextMenuOptionPtrOutput {
	return o.ApplyT(func(v DashboardVisualInteractionOptions) *DashboardContextMenuOption { return v.ContextMenuOption }).(DashboardContextMenuOptionPtrOutput)
}

// The on-visual menu options for a visual.
func (o DashboardVisualInteractionOptionsOutput) VisualMenuOption() DashboardVisualMenuOptionPtrOutput {
	return o.ApplyT(func(v DashboardVisualInteractionOptions) *DashboardVisualMenuOption { return v.VisualMenuOption }).(DashboardVisualMenuOptionPtrOutput)
}

type DashboardVisualInteractionOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardVisualInteractionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualInteractionOptions)(nil)).Elem()
}

func (o DashboardVisualInteractionOptionsPtrOutput) ToDashboardVisualInteractionOptionsPtrOutput() DashboardVisualInteractionOptionsPtrOutput {
	return o
}

func (o DashboardVisualInteractionOptionsPtrOutput) ToDashboardVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualInteractionOptionsPtrOutput {
	return o
}

func (o DashboardVisualInteractionOptionsPtrOutput) Elem() DashboardVisualInteractionOptionsOutput {
	return o.ApplyT(func(v *DashboardVisualInteractionOptions) DashboardVisualInteractionOptions {
		if v != nil {
			return *v
		}
		var ret DashboardVisualInteractionOptions
		return ret
	}).(DashboardVisualInteractionOptionsOutput)
}

// The context menu options for a visual.
func (o DashboardVisualInteractionOptionsPtrOutput) ContextMenuOption() DashboardContextMenuOptionPtrOutput {
	return o.ApplyT(func(v *DashboardVisualInteractionOptions) *DashboardContextMenuOption {
		if v == nil {
			return nil
		}
		return v.ContextMenuOption
	}).(DashboardContextMenuOptionPtrOutput)
}

// The on-visual menu options for a visual.
func (o DashboardVisualInteractionOptionsPtrOutput) VisualMenuOption() DashboardVisualMenuOptionPtrOutput {
	return o.ApplyT(func(v *DashboardVisualInteractionOptions) *DashboardVisualMenuOption {
		if v == nil {
			return nil
		}
		return v.VisualMenuOption
	}).(DashboardVisualMenuOptionPtrOutput)
}

type DashboardVisualMenuOption struct {
	// The availaiblity status of a visual's menu options.
	AvailabilityStatus *DashboardBehavior `pulumi:"availabilityStatus"`
}

// DashboardVisualMenuOptionInput is an input type that accepts DashboardVisualMenuOptionArgs and DashboardVisualMenuOptionOutput values.
// You can construct a concrete instance of `DashboardVisualMenuOptionInput` via:
//
//	DashboardVisualMenuOptionArgs{...}
type DashboardVisualMenuOptionInput interface {
	pulumi.Input

	ToDashboardVisualMenuOptionOutput() DashboardVisualMenuOptionOutput
	ToDashboardVisualMenuOptionOutputWithContext(context.Context) DashboardVisualMenuOptionOutput
}

type DashboardVisualMenuOptionArgs struct {
	// The availaiblity status of a visual's menu options.
	AvailabilityStatus DashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (DashboardVisualMenuOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualMenuOption)(nil)).Elem()
}

func (i DashboardVisualMenuOptionArgs) ToDashboardVisualMenuOptionOutput() DashboardVisualMenuOptionOutput {
	return i.ToDashboardVisualMenuOptionOutputWithContext(context.Background())
}

func (i DashboardVisualMenuOptionArgs) ToDashboardVisualMenuOptionOutputWithContext(ctx context.Context) DashboardVisualMenuOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualMenuOptionOutput)
}

func (i DashboardVisualMenuOptionArgs) ToDashboardVisualMenuOptionPtrOutput() DashboardVisualMenuOptionPtrOutput {
	return i.ToDashboardVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (i DashboardVisualMenuOptionArgs) ToDashboardVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardVisualMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualMenuOptionOutput).ToDashboardVisualMenuOptionPtrOutputWithContext(ctx)
}

// DashboardVisualMenuOptionPtrInput is an input type that accepts DashboardVisualMenuOptionArgs, DashboardVisualMenuOptionPtr and DashboardVisualMenuOptionPtrOutput values.
// You can construct a concrete instance of `DashboardVisualMenuOptionPtrInput` via:
//
//	        DashboardVisualMenuOptionArgs{...}
//
//	or:
//
//	        nil
type DashboardVisualMenuOptionPtrInput interface {
	pulumi.Input

	ToDashboardVisualMenuOptionPtrOutput() DashboardVisualMenuOptionPtrOutput
	ToDashboardVisualMenuOptionPtrOutputWithContext(context.Context) DashboardVisualMenuOptionPtrOutput
}

type dashboardVisualMenuOptionPtrType DashboardVisualMenuOptionArgs

func DashboardVisualMenuOptionPtr(v *DashboardVisualMenuOptionArgs) DashboardVisualMenuOptionPtrInput {
	return (*dashboardVisualMenuOptionPtrType)(v)
}

func (*dashboardVisualMenuOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualMenuOption)(nil)).Elem()
}

func (i *dashboardVisualMenuOptionPtrType) ToDashboardVisualMenuOptionPtrOutput() DashboardVisualMenuOptionPtrOutput {
	return i.ToDashboardVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (i *dashboardVisualMenuOptionPtrType) ToDashboardVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardVisualMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualMenuOptionPtrOutput)
}

type DashboardVisualMenuOptionOutput struct{ *pulumi.OutputState }

func (DashboardVisualMenuOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualMenuOption)(nil)).Elem()
}

func (o DashboardVisualMenuOptionOutput) ToDashboardVisualMenuOptionOutput() DashboardVisualMenuOptionOutput {
	return o
}

func (o DashboardVisualMenuOptionOutput) ToDashboardVisualMenuOptionOutputWithContext(ctx context.Context) DashboardVisualMenuOptionOutput {
	return o
}

func (o DashboardVisualMenuOptionOutput) ToDashboardVisualMenuOptionPtrOutput() DashboardVisualMenuOptionPtrOutput {
	return o.ToDashboardVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (o DashboardVisualMenuOptionOutput) ToDashboardVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardVisualMenuOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisualMenuOption) *DashboardVisualMenuOption {
		return &v
	}).(DashboardVisualMenuOptionPtrOutput)
}

// The availaiblity status of a visual's menu options.
func (o DashboardVisualMenuOptionOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v DashboardVisualMenuOption) *DashboardBehavior { return v.AvailabilityStatus }).(DashboardBehaviorPtrOutput)
}

type DashboardVisualMenuOptionPtrOutput struct{ *pulumi.OutputState }

func (DashboardVisualMenuOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualMenuOption)(nil)).Elem()
}

func (o DashboardVisualMenuOptionPtrOutput) ToDashboardVisualMenuOptionPtrOutput() DashboardVisualMenuOptionPtrOutput {
	return o
}

func (o DashboardVisualMenuOptionPtrOutput) ToDashboardVisualMenuOptionPtrOutputWithContext(ctx context.Context) DashboardVisualMenuOptionPtrOutput {
	return o
}

func (o DashboardVisualMenuOptionPtrOutput) Elem() DashboardVisualMenuOptionOutput {
	return o.ApplyT(func(v *DashboardVisualMenuOption) DashboardVisualMenuOption {
		if v != nil {
			return *v
		}
		var ret DashboardVisualMenuOption
		return ret
	}).(DashboardVisualMenuOptionOutput)
}

// The availaiblity status of a visual's menu options.
func (o DashboardVisualMenuOptionPtrOutput) AvailabilityStatus() DashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *DashboardVisualMenuOption) *DashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(DashboardBehaviorPtrOutput)
}

type DashboardVisualPalette struct {
	// The chart color options for the visual palette.
	ChartColor *string `pulumi:"chartColor"`
	// The color map options for the visual palette.
	ColorMap []DashboardDataPathColor `pulumi:"colorMap"`
}

// DashboardVisualPaletteInput is an input type that accepts DashboardVisualPaletteArgs and DashboardVisualPaletteOutput values.
// You can construct a concrete instance of `DashboardVisualPaletteInput` via:
//
//	DashboardVisualPaletteArgs{...}
type DashboardVisualPaletteInput interface {
	pulumi.Input

	ToDashboardVisualPaletteOutput() DashboardVisualPaletteOutput
	ToDashboardVisualPaletteOutputWithContext(context.Context) DashboardVisualPaletteOutput
}

type DashboardVisualPaletteArgs struct {
	// The chart color options for the visual palette.
	ChartColor pulumi.StringPtrInput `pulumi:"chartColor"`
	// The color map options for the visual palette.
	ColorMap DashboardDataPathColorArrayInput `pulumi:"colorMap"`
}

func (DashboardVisualPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualPalette)(nil)).Elem()
}

func (i DashboardVisualPaletteArgs) ToDashboardVisualPaletteOutput() DashboardVisualPaletteOutput {
	return i.ToDashboardVisualPaletteOutputWithContext(context.Background())
}

func (i DashboardVisualPaletteArgs) ToDashboardVisualPaletteOutputWithContext(ctx context.Context) DashboardVisualPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualPaletteOutput)
}

func (i DashboardVisualPaletteArgs) ToDashboardVisualPalettePtrOutput() DashboardVisualPalettePtrOutput {
	return i.ToDashboardVisualPalettePtrOutputWithContext(context.Background())
}

func (i DashboardVisualPaletteArgs) ToDashboardVisualPalettePtrOutputWithContext(ctx context.Context) DashboardVisualPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualPaletteOutput).ToDashboardVisualPalettePtrOutputWithContext(ctx)
}

// DashboardVisualPalettePtrInput is an input type that accepts DashboardVisualPaletteArgs, DashboardVisualPalettePtr and DashboardVisualPalettePtrOutput values.
// You can construct a concrete instance of `DashboardVisualPalettePtrInput` via:
//
//	        DashboardVisualPaletteArgs{...}
//
//	or:
//
//	        nil
type DashboardVisualPalettePtrInput interface {
	pulumi.Input

	ToDashboardVisualPalettePtrOutput() DashboardVisualPalettePtrOutput
	ToDashboardVisualPalettePtrOutputWithContext(context.Context) DashboardVisualPalettePtrOutput
}

type dashboardVisualPalettePtrType DashboardVisualPaletteArgs

func DashboardVisualPalettePtr(v *DashboardVisualPaletteArgs) DashboardVisualPalettePtrInput {
	return (*dashboardVisualPalettePtrType)(v)
}

func (*dashboardVisualPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualPalette)(nil)).Elem()
}

func (i *dashboardVisualPalettePtrType) ToDashboardVisualPalettePtrOutput() DashboardVisualPalettePtrOutput {
	return i.ToDashboardVisualPalettePtrOutputWithContext(context.Background())
}

func (i *dashboardVisualPalettePtrType) ToDashboardVisualPalettePtrOutputWithContext(ctx context.Context) DashboardVisualPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualPalettePtrOutput)
}

type DashboardVisualPaletteOutput struct{ *pulumi.OutputState }

func (DashboardVisualPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualPalette)(nil)).Elem()
}

func (o DashboardVisualPaletteOutput) ToDashboardVisualPaletteOutput() DashboardVisualPaletteOutput {
	return o
}

func (o DashboardVisualPaletteOutput) ToDashboardVisualPaletteOutputWithContext(ctx context.Context) DashboardVisualPaletteOutput {
	return o
}

func (o DashboardVisualPaletteOutput) ToDashboardVisualPalettePtrOutput() DashboardVisualPalettePtrOutput {
	return o.ToDashboardVisualPalettePtrOutputWithContext(context.Background())
}

func (o DashboardVisualPaletteOutput) ToDashboardVisualPalettePtrOutputWithContext(ctx context.Context) DashboardVisualPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisualPalette) *DashboardVisualPalette {
		return &v
	}).(DashboardVisualPalettePtrOutput)
}

// The chart color options for the visual palette.
func (o DashboardVisualPaletteOutput) ChartColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardVisualPalette) *string { return v.ChartColor }).(pulumi.StringPtrOutput)
}

// The color map options for the visual palette.
func (o DashboardVisualPaletteOutput) ColorMap() DashboardDataPathColorArrayOutput {
	return o.ApplyT(func(v DashboardVisualPalette) []DashboardDataPathColor { return v.ColorMap }).(DashboardDataPathColorArrayOutput)
}

type DashboardVisualPalettePtrOutput struct{ *pulumi.OutputState }

func (DashboardVisualPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualPalette)(nil)).Elem()
}

func (o DashboardVisualPalettePtrOutput) ToDashboardVisualPalettePtrOutput() DashboardVisualPalettePtrOutput {
	return o
}

func (o DashboardVisualPalettePtrOutput) ToDashboardVisualPalettePtrOutputWithContext(ctx context.Context) DashboardVisualPalettePtrOutput {
	return o
}

func (o DashboardVisualPalettePtrOutput) Elem() DashboardVisualPaletteOutput {
	return o.ApplyT(func(v *DashboardVisualPalette) DashboardVisualPalette {
		if v != nil {
			return *v
		}
		var ret DashboardVisualPalette
		return ret
	}).(DashboardVisualPaletteOutput)
}

// The chart color options for the visual palette.
func (o DashboardVisualPalettePtrOutput) ChartColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardVisualPalette) *string {
		if v == nil {
			return nil
		}
		return v.ChartColor
	}).(pulumi.StringPtrOutput)
}

// The color map options for the visual palette.
func (o DashboardVisualPalettePtrOutput) ColorMap() DashboardDataPathColorArrayOutput {
	return o.ApplyT(func(v *DashboardVisualPalette) []DashboardDataPathColor {
		if v == nil {
			return nil
		}
		return v.ColorMap
	}).(DashboardDataPathColorArrayOutput)
}

// <p>The visual publish options of a visual in a dashboard</p>
type DashboardVisualPublishOptions struct {
	// Determines if hidden fields are included in an exported dashboard.
	ExportHiddenFieldsOption *DashboardExportHiddenFieldsOption `pulumi:"exportHiddenFieldsOption"`
}

// DashboardVisualPublishOptionsInput is an input type that accepts DashboardVisualPublishOptionsArgs and DashboardVisualPublishOptionsOutput values.
// You can construct a concrete instance of `DashboardVisualPublishOptionsInput` via:
//
//	DashboardVisualPublishOptionsArgs{...}
type DashboardVisualPublishOptionsInput interface {
	pulumi.Input

	ToDashboardVisualPublishOptionsOutput() DashboardVisualPublishOptionsOutput
	ToDashboardVisualPublishOptionsOutputWithContext(context.Context) DashboardVisualPublishOptionsOutput
}

// <p>The visual publish options of a visual in a dashboard</p>
type DashboardVisualPublishOptionsArgs struct {
	// Determines if hidden fields are included in an exported dashboard.
	ExportHiddenFieldsOption DashboardExportHiddenFieldsOptionPtrInput `pulumi:"exportHiddenFieldsOption"`
}

func (DashboardVisualPublishOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualPublishOptions)(nil)).Elem()
}

func (i DashboardVisualPublishOptionsArgs) ToDashboardVisualPublishOptionsOutput() DashboardVisualPublishOptionsOutput {
	return i.ToDashboardVisualPublishOptionsOutputWithContext(context.Background())
}

func (i DashboardVisualPublishOptionsArgs) ToDashboardVisualPublishOptionsOutputWithContext(ctx context.Context) DashboardVisualPublishOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualPublishOptionsOutput)
}

func (i DashboardVisualPublishOptionsArgs) ToDashboardVisualPublishOptionsPtrOutput() DashboardVisualPublishOptionsPtrOutput {
	return i.ToDashboardVisualPublishOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardVisualPublishOptionsArgs) ToDashboardVisualPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualPublishOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualPublishOptionsOutput).ToDashboardVisualPublishOptionsPtrOutputWithContext(ctx)
}

// DashboardVisualPublishOptionsPtrInput is an input type that accepts DashboardVisualPublishOptionsArgs, DashboardVisualPublishOptionsPtr and DashboardVisualPublishOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardVisualPublishOptionsPtrInput` via:
//
//	        DashboardVisualPublishOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardVisualPublishOptionsPtrInput interface {
	pulumi.Input

	ToDashboardVisualPublishOptionsPtrOutput() DashboardVisualPublishOptionsPtrOutput
	ToDashboardVisualPublishOptionsPtrOutputWithContext(context.Context) DashboardVisualPublishOptionsPtrOutput
}

type dashboardVisualPublishOptionsPtrType DashboardVisualPublishOptionsArgs

func DashboardVisualPublishOptionsPtr(v *DashboardVisualPublishOptionsArgs) DashboardVisualPublishOptionsPtrInput {
	return (*dashboardVisualPublishOptionsPtrType)(v)
}

func (*dashboardVisualPublishOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualPublishOptions)(nil)).Elem()
}

func (i *dashboardVisualPublishOptionsPtrType) ToDashboardVisualPublishOptionsPtrOutput() DashboardVisualPublishOptionsPtrOutput {
	return i.ToDashboardVisualPublishOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardVisualPublishOptionsPtrType) ToDashboardVisualPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualPublishOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualPublishOptionsPtrOutput)
}

// <p>The visual publish options of a visual in a dashboard</p>
type DashboardVisualPublishOptionsOutput struct{ *pulumi.OutputState }

func (DashboardVisualPublishOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualPublishOptions)(nil)).Elem()
}

func (o DashboardVisualPublishOptionsOutput) ToDashboardVisualPublishOptionsOutput() DashboardVisualPublishOptionsOutput {
	return o
}

func (o DashboardVisualPublishOptionsOutput) ToDashboardVisualPublishOptionsOutputWithContext(ctx context.Context) DashboardVisualPublishOptionsOutput {
	return o
}

func (o DashboardVisualPublishOptionsOutput) ToDashboardVisualPublishOptionsPtrOutput() DashboardVisualPublishOptionsPtrOutput {
	return o.ToDashboardVisualPublishOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardVisualPublishOptionsOutput) ToDashboardVisualPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualPublishOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisualPublishOptions) *DashboardVisualPublishOptions {
		return &v
	}).(DashboardVisualPublishOptionsPtrOutput)
}

// Determines if hidden fields are included in an exported dashboard.
func (o DashboardVisualPublishOptionsOutput) ExportHiddenFieldsOption() DashboardExportHiddenFieldsOptionPtrOutput {
	return o.ApplyT(func(v DashboardVisualPublishOptions) *DashboardExportHiddenFieldsOption {
		return v.ExportHiddenFieldsOption
	}).(DashboardExportHiddenFieldsOptionPtrOutput)
}

type DashboardVisualPublishOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardVisualPublishOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualPublishOptions)(nil)).Elem()
}

func (o DashboardVisualPublishOptionsPtrOutput) ToDashboardVisualPublishOptionsPtrOutput() DashboardVisualPublishOptionsPtrOutput {
	return o
}

func (o DashboardVisualPublishOptionsPtrOutput) ToDashboardVisualPublishOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualPublishOptionsPtrOutput {
	return o
}

func (o DashboardVisualPublishOptionsPtrOutput) Elem() DashboardVisualPublishOptionsOutput {
	return o.ApplyT(func(v *DashboardVisualPublishOptions) DashboardVisualPublishOptions {
		if v != nil {
			return *v
		}
		var ret DashboardVisualPublishOptions
		return ret
	}).(DashboardVisualPublishOptionsOutput)
}

// Determines if hidden fields are included in an exported dashboard.
func (o DashboardVisualPublishOptionsPtrOutput) ExportHiddenFieldsOption() DashboardExportHiddenFieldsOptionPtrOutput {
	return o.ApplyT(func(v *DashboardVisualPublishOptions) *DashboardExportHiddenFieldsOption {
		if v == nil {
			return nil
		}
		return v.ExportHiddenFieldsOption
	}).(DashboardExportHiddenFieldsOptionPtrOutput)
}

type DashboardVisualSubtitleLabelOptions struct {
	// The long text format of the subtitle label, such as plain text or rich text.
	FormatText *DashboardLongFormatText `pulumi:"formatText"`
	// The visibility of the subtitle label.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardVisualSubtitleLabelOptionsInput is an input type that accepts DashboardVisualSubtitleLabelOptionsArgs and DashboardVisualSubtitleLabelOptionsOutput values.
// You can construct a concrete instance of `DashboardVisualSubtitleLabelOptionsInput` via:
//
//	DashboardVisualSubtitleLabelOptionsArgs{...}
type DashboardVisualSubtitleLabelOptionsInput interface {
	pulumi.Input

	ToDashboardVisualSubtitleLabelOptionsOutput() DashboardVisualSubtitleLabelOptionsOutput
	ToDashboardVisualSubtitleLabelOptionsOutputWithContext(context.Context) DashboardVisualSubtitleLabelOptionsOutput
}

type DashboardVisualSubtitleLabelOptionsArgs struct {
	// The long text format of the subtitle label, such as plain text or rich text.
	FormatText DashboardLongFormatTextPtrInput `pulumi:"formatText"`
	// The visibility of the subtitle label.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardVisualSubtitleLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualSubtitleLabelOptions)(nil)).Elem()
}

func (i DashboardVisualSubtitleLabelOptionsArgs) ToDashboardVisualSubtitleLabelOptionsOutput() DashboardVisualSubtitleLabelOptionsOutput {
	return i.ToDashboardVisualSubtitleLabelOptionsOutputWithContext(context.Background())
}

func (i DashboardVisualSubtitleLabelOptionsArgs) ToDashboardVisualSubtitleLabelOptionsOutputWithContext(ctx context.Context) DashboardVisualSubtitleLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualSubtitleLabelOptionsOutput)
}

func (i DashboardVisualSubtitleLabelOptionsArgs) ToDashboardVisualSubtitleLabelOptionsPtrOutput() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return i.ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardVisualSubtitleLabelOptionsArgs) ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualSubtitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualSubtitleLabelOptionsOutput).ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(ctx)
}

// DashboardVisualSubtitleLabelOptionsPtrInput is an input type that accepts DashboardVisualSubtitleLabelOptionsArgs, DashboardVisualSubtitleLabelOptionsPtr and DashboardVisualSubtitleLabelOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardVisualSubtitleLabelOptionsPtrInput` via:
//
//	        DashboardVisualSubtitleLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardVisualSubtitleLabelOptionsPtrInput interface {
	pulumi.Input

	ToDashboardVisualSubtitleLabelOptionsPtrOutput() DashboardVisualSubtitleLabelOptionsPtrOutput
	ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(context.Context) DashboardVisualSubtitleLabelOptionsPtrOutput
}

type dashboardVisualSubtitleLabelOptionsPtrType DashboardVisualSubtitleLabelOptionsArgs

func DashboardVisualSubtitleLabelOptionsPtr(v *DashboardVisualSubtitleLabelOptionsArgs) DashboardVisualSubtitleLabelOptionsPtrInput {
	return (*dashboardVisualSubtitleLabelOptionsPtrType)(v)
}

func (*dashboardVisualSubtitleLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualSubtitleLabelOptions)(nil)).Elem()
}

func (i *dashboardVisualSubtitleLabelOptionsPtrType) ToDashboardVisualSubtitleLabelOptionsPtrOutput() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return i.ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardVisualSubtitleLabelOptionsPtrType) ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualSubtitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

type DashboardVisualSubtitleLabelOptionsOutput struct{ *pulumi.OutputState }

func (DashboardVisualSubtitleLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualSubtitleLabelOptions)(nil)).Elem()
}

func (o DashboardVisualSubtitleLabelOptionsOutput) ToDashboardVisualSubtitleLabelOptionsOutput() DashboardVisualSubtitleLabelOptionsOutput {
	return o
}

func (o DashboardVisualSubtitleLabelOptionsOutput) ToDashboardVisualSubtitleLabelOptionsOutputWithContext(ctx context.Context) DashboardVisualSubtitleLabelOptionsOutput {
	return o
}

func (o DashboardVisualSubtitleLabelOptionsOutput) ToDashboardVisualSubtitleLabelOptionsPtrOutput() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardVisualSubtitleLabelOptionsOutput) ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisualSubtitleLabelOptions) *DashboardVisualSubtitleLabelOptions {
		return &v
	}).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The long text format of the subtitle label, such as plain text or rich text.
func (o DashboardVisualSubtitleLabelOptionsOutput) FormatText() DashboardLongFormatTextPtrOutput {
	return o.ApplyT(func(v DashboardVisualSubtitleLabelOptions) *DashboardLongFormatText { return v.FormatText }).(DashboardLongFormatTextPtrOutput)
}

// The visibility of the subtitle label.
func (o DashboardVisualSubtitleLabelOptionsOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardVisualSubtitleLabelOptions) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardVisualSubtitleLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardVisualSubtitleLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualSubtitleLabelOptions)(nil)).Elem()
}

func (o DashboardVisualSubtitleLabelOptionsPtrOutput) ToDashboardVisualSubtitleLabelOptionsPtrOutput() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o
}

func (o DashboardVisualSubtitleLabelOptionsPtrOutput) ToDashboardVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o
}

func (o DashboardVisualSubtitleLabelOptionsPtrOutput) Elem() DashboardVisualSubtitleLabelOptionsOutput {
	return o.ApplyT(func(v *DashboardVisualSubtitleLabelOptions) DashboardVisualSubtitleLabelOptions {
		if v != nil {
			return *v
		}
		var ret DashboardVisualSubtitleLabelOptions
		return ret
	}).(DashboardVisualSubtitleLabelOptionsOutput)
}

// The long text format of the subtitle label, such as plain text or rich text.
func (o DashboardVisualSubtitleLabelOptionsPtrOutput) FormatText() DashboardLongFormatTextPtrOutput {
	return o.ApplyT(func(v *DashboardVisualSubtitleLabelOptions) *DashboardLongFormatText {
		if v == nil {
			return nil
		}
		return v.FormatText
	}).(DashboardLongFormatTextPtrOutput)
}

// The visibility of the subtitle label.
func (o DashboardVisualSubtitleLabelOptionsPtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardVisualSubtitleLabelOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardVisualTitleLabelOptions struct {
	// The short text format of the title label, such as plain text or rich text.
	FormatText *DashboardShortFormatText `pulumi:"formatText"`
	// The visibility of the title label.
	Visibility *DashboardVisibility `pulumi:"visibility"`
}

// DashboardVisualTitleLabelOptionsInput is an input type that accepts DashboardVisualTitleLabelOptionsArgs and DashboardVisualTitleLabelOptionsOutput values.
// You can construct a concrete instance of `DashboardVisualTitleLabelOptionsInput` via:
//
//	DashboardVisualTitleLabelOptionsArgs{...}
type DashboardVisualTitleLabelOptionsInput interface {
	pulumi.Input

	ToDashboardVisualTitleLabelOptionsOutput() DashboardVisualTitleLabelOptionsOutput
	ToDashboardVisualTitleLabelOptionsOutputWithContext(context.Context) DashboardVisualTitleLabelOptionsOutput
}

type DashboardVisualTitleLabelOptionsArgs struct {
	// The short text format of the title label, such as plain text or rich text.
	FormatText DashboardShortFormatTextPtrInput `pulumi:"formatText"`
	// The visibility of the title label.
	Visibility DashboardVisibilityPtrInput `pulumi:"visibility"`
}

func (DashboardVisualTitleLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualTitleLabelOptions)(nil)).Elem()
}

func (i DashboardVisualTitleLabelOptionsArgs) ToDashboardVisualTitleLabelOptionsOutput() DashboardVisualTitleLabelOptionsOutput {
	return i.ToDashboardVisualTitleLabelOptionsOutputWithContext(context.Background())
}

func (i DashboardVisualTitleLabelOptionsArgs) ToDashboardVisualTitleLabelOptionsOutputWithContext(ctx context.Context) DashboardVisualTitleLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualTitleLabelOptionsOutput)
}

func (i DashboardVisualTitleLabelOptionsArgs) ToDashboardVisualTitleLabelOptionsPtrOutput() DashboardVisualTitleLabelOptionsPtrOutput {
	return i.ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardVisualTitleLabelOptionsArgs) ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualTitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualTitleLabelOptionsOutput).ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(ctx)
}

// DashboardVisualTitleLabelOptionsPtrInput is an input type that accepts DashboardVisualTitleLabelOptionsArgs, DashboardVisualTitleLabelOptionsPtr and DashboardVisualTitleLabelOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardVisualTitleLabelOptionsPtrInput` via:
//
//	        DashboardVisualTitleLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardVisualTitleLabelOptionsPtrInput interface {
	pulumi.Input

	ToDashboardVisualTitleLabelOptionsPtrOutput() DashboardVisualTitleLabelOptionsPtrOutput
	ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(context.Context) DashboardVisualTitleLabelOptionsPtrOutput
}

type dashboardVisualTitleLabelOptionsPtrType DashboardVisualTitleLabelOptionsArgs

func DashboardVisualTitleLabelOptionsPtr(v *DashboardVisualTitleLabelOptionsArgs) DashboardVisualTitleLabelOptionsPtrInput {
	return (*dashboardVisualTitleLabelOptionsPtrType)(v)
}

func (*dashboardVisualTitleLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualTitleLabelOptions)(nil)).Elem()
}

func (i *dashboardVisualTitleLabelOptionsPtrType) ToDashboardVisualTitleLabelOptionsPtrOutput() DashboardVisualTitleLabelOptionsPtrOutput {
	return i.ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardVisualTitleLabelOptionsPtrType) ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualTitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardVisualTitleLabelOptionsPtrOutput)
}

type DashboardVisualTitleLabelOptionsOutput struct{ *pulumi.OutputState }

func (DashboardVisualTitleLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardVisualTitleLabelOptions)(nil)).Elem()
}

func (o DashboardVisualTitleLabelOptionsOutput) ToDashboardVisualTitleLabelOptionsOutput() DashboardVisualTitleLabelOptionsOutput {
	return o
}

func (o DashboardVisualTitleLabelOptionsOutput) ToDashboardVisualTitleLabelOptionsOutputWithContext(ctx context.Context) DashboardVisualTitleLabelOptionsOutput {
	return o
}

func (o DashboardVisualTitleLabelOptionsOutput) ToDashboardVisualTitleLabelOptionsPtrOutput() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardVisualTitleLabelOptionsOutput) ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardVisualTitleLabelOptions) *DashboardVisualTitleLabelOptions {
		return &v
	}).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The short text format of the title label, such as plain text or rich text.
func (o DashboardVisualTitleLabelOptionsOutput) FormatText() DashboardShortFormatTextPtrOutput {
	return o.ApplyT(func(v DashboardVisualTitleLabelOptions) *DashboardShortFormatText { return v.FormatText }).(DashboardShortFormatTextPtrOutput)
}

// The visibility of the title label.
func (o DashboardVisualTitleLabelOptionsOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v DashboardVisualTitleLabelOptions) *DashboardVisibility { return v.Visibility }).(DashboardVisibilityPtrOutput)
}

type DashboardVisualTitleLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardVisualTitleLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardVisualTitleLabelOptions)(nil)).Elem()
}

func (o DashboardVisualTitleLabelOptionsPtrOutput) ToDashboardVisualTitleLabelOptionsPtrOutput() DashboardVisualTitleLabelOptionsPtrOutput {
	return o
}

func (o DashboardVisualTitleLabelOptionsPtrOutput) ToDashboardVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) DashboardVisualTitleLabelOptionsPtrOutput {
	return o
}

func (o DashboardVisualTitleLabelOptionsPtrOutput) Elem() DashboardVisualTitleLabelOptionsOutput {
	return o.ApplyT(func(v *DashboardVisualTitleLabelOptions) DashboardVisualTitleLabelOptions {
		if v != nil {
			return *v
		}
		var ret DashboardVisualTitleLabelOptions
		return ret
	}).(DashboardVisualTitleLabelOptionsOutput)
}

// The short text format of the title label, such as plain text or rich text.
func (o DashboardVisualTitleLabelOptionsPtrOutput) FormatText() DashboardShortFormatTextPtrOutput {
	return o.ApplyT(func(v *DashboardVisualTitleLabelOptions) *DashboardShortFormatText {
		if v == nil {
			return nil
		}
		return v.FormatText
	}).(DashboardShortFormatTextPtrOutput)
}

// The visibility of the title label.
func (o DashboardVisualTitleLabelOptionsPtrOutput) Visibility() DashboardVisibilityPtrOutput {
	return o.ApplyT(func(v *DashboardVisualTitleLabelOptions) *DashboardVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(DashboardVisibilityPtrOutput)
}

type DashboardWaterfallChartAggregatedFieldWells struct {
	// The breakdown field wells of a waterfall visual.
	Breakdowns []DashboardDimensionField `pulumi:"breakdowns"`
	// The category field wells of a waterfall visual.
	Categories []DashboardDimensionField `pulumi:"categories"`
	// The value field wells of a waterfall visual.
	Values []DashboardMeasureField `pulumi:"values"`
}

// DashboardWaterfallChartAggregatedFieldWellsInput is an input type that accepts DashboardWaterfallChartAggregatedFieldWellsArgs and DashboardWaterfallChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartAggregatedFieldWellsInput` via:
//
//	DashboardWaterfallChartAggregatedFieldWellsArgs{...}
type DashboardWaterfallChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToDashboardWaterfallChartAggregatedFieldWellsOutput() DashboardWaterfallChartAggregatedFieldWellsOutput
	ToDashboardWaterfallChartAggregatedFieldWellsOutputWithContext(context.Context) DashboardWaterfallChartAggregatedFieldWellsOutput
}

type DashboardWaterfallChartAggregatedFieldWellsArgs struct {
	// The breakdown field wells of a waterfall visual.
	Breakdowns DashboardDimensionFieldArrayInput `pulumi:"breakdowns"`
	// The category field wells of a waterfall visual.
	Categories DashboardDimensionFieldArrayInput `pulumi:"categories"`
	// The value field wells of a waterfall visual.
	Values DashboardMeasureFieldArrayInput `pulumi:"values"`
}

func (DashboardWaterfallChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (i DashboardWaterfallChartAggregatedFieldWellsArgs) ToDashboardWaterfallChartAggregatedFieldWellsOutput() DashboardWaterfallChartAggregatedFieldWellsOutput {
	return i.ToDashboardWaterfallChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartAggregatedFieldWellsArgs) ToDashboardWaterfallChartAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardWaterfallChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartAggregatedFieldWellsOutput)
}

func (i DashboardWaterfallChartAggregatedFieldWellsArgs) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutput() DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return i.ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartAggregatedFieldWellsArgs) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartAggregatedFieldWellsOutput).ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// DashboardWaterfallChartAggregatedFieldWellsPtrInput is an input type that accepts DashboardWaterfallChartAggregatedFieldWellsArgs, DashboardWaterfallChartAggregatedFieldWellsPtr and DashboardWaterfallChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartAggregatedFieldWellsPtrInput` via:
//
//	        DashboardWaterfallChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallChartAggregatedFieldWellsPtrOutput() DashboardWaterfallChartAggregatedFieldWellsPtrOutput
	ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Context) DashboardWaterfallChartAggregatedFieldWellsPtrOutput
}

type dashboardWaterfallChartAggregatedFieldWellsPtrType DashboardWaterfallChartAggregatedFieldWellsArgs

func DashboardWaterfallChartAggregatedFieldWellsPtr(v *DashboardWaterfallChartAggregatedFieldWellsArgs) DashboardWaterfallChartAggregatedFieldWellsPtrInput {
	return (*dashboardWaterfallChartAggregatedFieldWellsPtrType)(v)
}

func (*dashboardWaterfallChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (i *dashboardWaterfallChartAggregatedFieldWellsPtrType) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutput() DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return i.ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallChartAggregatedFieldWellsPtrType) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartAggregatedFieldWellsPtrOutput)
}

type DashboardWaterfallChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardWaterfallChartAggregatedFieldWellsOutput) ToDashboardWaterfallChartAggregatedFieldWellsOutput() DashboardWaterfallChartAggregatedFieldWellsOutput {
	return o
}

func (o DashboardWaterfallChartAggregatedFieldWellsOutput) ToDashboardWaterfallChartAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardWaterfallChartAggregatedFieldWellsOutput {
	return o
}

func (o DashboardWaterfallChartAggregatedFieldWellsOutput) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutput() DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallChartAggregatedFieldWellsOutput) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallChartAggregatedFieldWells) *DashboardWaterfallChartAggregatedFieldWells {
		return &v
	}).(DashboardWaterfallChartAggregatedFieldWellsPtrOutput)
}

// The breakdown field wells of a waterfall visual.
func (o DashboardWaterfallChartAggregatedFieldWellsOutput) Breakdowns() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v DashboardWaterfallChartAggregatedFieldWells) []DashboardDimensionField { return v.Breakdowns }).(DashboardDimensionFieldArrayOutput)
}

// The category field wells of a waterfall visual.
func (o DashboardWaterfallChartAggregatedFieldWellsOutput) Categories() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v DashboardWaterfallChartAggregatedFieldWells) []DashboardDimensionField { return v.Categories }).(DashboardDimensionFieldArrayOutput)
}

// The value field wells of a waterfall visual.
func (o DashboardWaterfallChartAggregatedFieldWellsOutput) Values() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v DashboardWaterfallChartAggregatedFieldWells) []DashboardMeasureField { return v.Values }).(DashboardMeasureFieldArrayOutput)
}

type DashboardWaterfallChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardWaterfallChartAggregatedFieldWellsPtrOutput) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutput() DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardWaterfallChartAggregatedFieldWellsPtrOutput) ToDashboardWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardWaterfallChartAggregatedFieldWellsPtrOutput) Elem() DashboardWaterfallChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartAggregatedFieldWells) DashboardWaterfallChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallChartAggregatedFieldWells
		return ret
	}).(DashboardWaterfallChartAggregatedFieldWellsOutput)
}

// The breakdown field wells of a waterfall visual.
func (o DashboardWaterfallChartAggregatedFieldWellsPtrOutput) Breakdowns() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartAggregatedFieldWells) []DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.Breakdowns
	}).(DashboardDimensionFieldArrayOutput)
}

// The category field wells of a waterfall visual.
func (o DashboardWaterfallChartAggregatedFieldWellsPtrOutput) Categories() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartAggregatedFieldWells) []DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(DashboardDimensionFieldArrayOutput)
}

// The value field wells of a waterfall visual.
func (o DashboardWaterfallChartAggregatedFieldWellsPtrOutput) Values() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartAggregatedFieldWells) []DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(DashboardMeasureFieldArrayOutput)
}

type DashboardWaterfallChartColorConfiguration struct {
	// The color configuration for individual groups within a waterfall visual.
	GroupColorConfiguration *DashboardWaterfallChartGroupColorConfiguration `pulumi:"groupColorConfiguration"`
}

// DashboardWaterfallChartColorConfigurationInput is an input type that accepts DashboardWaterfallChartColorConfigurationArgs and DashboardWaterfallChartColorConfigurationOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartColorConfigurationInput` via:
//
//	DashboardWaterfallChartColorConfigurationArgs{...}
type DashboardWaterfallChartColorConfigurationInput interface {
	pulumi.Input

	ToDashboardWaterfallChartColorConfigurationOutput() DashboardWaterfallChartColorConfigurationOutput
	ToDashboardWaterfallChartColorConfigurationOutputWithContext(context.Context) DashboardWaterfallChartColorConfigurationOutput
}

type DashboardWaterfallChartColorConfigurationArgs struct {
	// The color configuration for individual groups within a waterfall visual.
	GroupColorConfiguration DashboardWaterfallChartGroupColorConfigurationPtrInput `pulumi:"groupColorConfiguration"`
}

func (DashboardWaterfallChartColorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartColorConfiguration)(nil)).Elem()
}

func (i DashboardWaterfallChartColorConfigurationArgs) ToDashboardWaterfallChartColorConfigurationOutput() DashboardWaterfallChartColorConfigurationOutput {
	return i.ToDashboardWaterfallChartColorConfigurationOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartColorConfigurationArgs) ToDashboardWaterfallChartColorConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartColorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartColorConfigurationOutput)
}

func (i DashboardWaterfallChartColorConfigurationArgs) ToDashboardWaterfallChartColorConfigurationPtrOutput() DashboardWaterfallChartColorConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartColorConfigurationArgs) ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartColorConfigurationOutput).ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(ctx)
}

// DashboardWaterfallChartColorConfigurationPtrInput is an input type that accepts DashboardWaterfallChartColorConfigurationArgs, DashboardWaterfallChartColorConfigurationPtr and DashboardWaterfallChartColorConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartColorConfigurationPtrInput` via:
//
//	        DashboardWaterfallChartColorConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallChartColorConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallChartColorConfigurationPtrOutput() DashboardWaterfallChartColorConfigurationPtrOutput
	ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(context.Context) DashboardWaterfallChartColorConfigurationPtrOutput
}

type dashboardWaterfallChartColorConfigurationPtrType DashboardWaterfallChartColorConfigurationArgs

func DashboardWaterfallChartColorConfigurationPtr(v *DashboardWaterfallChartColorConfigurationArgs) DashboardWaterfallChartColorConfigurationPtrInput {
	return (*dashboardWaterfallChartColorConfigurationPtrType)(v)
}

func (*dashboardWaterfallChartColorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartColorConfiguration)(nil)).Elem()
}

func (i *dashboardWaterfallChartColorConfigurationPtrType) ToDashboardWaterfallChartColorConfigurationPtrOutput() DashboardWaterfallChartColorConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallChartColorConfigurationPtrType) ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartColorConfigurationPtrOutput)
}

type DashboardWaterfallChartColorConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartColorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartColorConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartColorConfigurationOutput) ToDashboardWaterfallChartColorConfigurationOutput() DashboardWaterfallChartColorConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartColorConfigurationOutput) ToDashboardWaterfallChartColorConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartColorConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartColorConfigurationOutput) ToDashboardWaterfallChartColorConfigurationPtrOutput() DashboardWaterfallChartColorConfigurationPtrOutput {
	return o.ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallChartColorConfigurationOutput) ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallChartColorConfiguration) *DashboardWaterfallChartColorConfiguration {
		return &v
	}).(DashboardWaterfallChartColorConfigurationPtrOutput)
}

// The color configuration for individual groups within a waterfall visual.
func (o DashboardWaterfallChartColorConfigurationOutput) GroupColorConfiguration() DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartColorConfiguration) *DashboardWaterfallChartGroupColorConfiguration {
		return v.GroupColorConfiguration
	}).(DashboardWaterfallChartGroupColorConfigurationPtrOutput)
}

type DashboardWaterfallChartColorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartColorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartColorConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartColorConfigurationPtrOutput) ToDashboardWaterfallChartColorConfigurationPtrOutput() DashboardWaterfallChartColorConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartColorConfigurationPtrOutput) ToDashboardWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartColorConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartColorConfigurationPtrOutput) Elem() DashboardWaterfallChartColorConfigurationOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartColorConfiguration) DashboardWaterfallChartColorConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallChartColorConfiguration
		return ret
	}).(DashboardWaterfallChartColorConfigurationOutput)
}

// The color configuration for individual groups within a waterfall visual.
func (o DashboardWaterfallChartColorConfigurationPtrOutput) GroupColorConfiguration() DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartColorConfiguration) *DashboardWaterfallChartGroupColorConfiguration {
		if v == nil {
			return nil
		}
		return v.GroupColorConfiguration
	}).(DashboardWaterfallChartGroupColorConfigurationPtrOutput)
}

type DashboardWaterfallChartConfiguration struct {
	// The options that determine the presentation of the category axis.
	CategoryAxisDisplayOptions *DashboardAxisDisplayOptions `pulumi:"categoryAxisDisplayOptions"`
	// The options that determine the presentation of the category axis label.
	CategoryAxisLabelOptions *DashboardChartAxisLabelOptions `pulumi:"categoryAxisLabelOptions"`
	// The color configuration of a waterfall visual.
	ColorConfiguration *DashboardWaterfallChartColorConfiguration `pulumi:"colorConfiguration"`
	// The data label configuration of a waterfall visual.
	DataLabels *DashboardDataLabelOptions `pulumi:"dataLabels"`
	// The field well configuration of a waterfall visual.
	FieldWells *DashboardWaterfallChartFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *DashboardVisualInteractionOptions `pulumi:"interactions"`
	// The legend configuration of a waterfall visual.
	Legend *DashboardLegendOptions `pulumi:"legend"`
	// The options that determine the presentation of the y-axis.
	PrimaryYAxisDisplayOptions *DashboardAxisDisplayOptions `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions *DashboardChartAxisLabelOptions `pulumi:"primaryYAxisLabelOptions"`
	// The sort configuration of a waterfall visual.
	SortConfiguration *DashboardWaterfallChartSortConfiguration `pulumi:"sortConfiguration"`
	// The visual palette configuration of a waterfall visual.
	VisualPalette *DashboardVisualPalette `pulumi:"visualPalette"`
	// The options that determine the presentation of a waterfall visual.
	WaterfallChartOptions *DashboardWaterfallChartOptions `pulumi:"waterfallChartOptions"`
}

// DashboardWaterfallChartConfigurationInput is an input type that accepts DashboardWaterfallChartConfigurationArgs and DashboardWaterfallChartConfigurationOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartConfigurationInput` via:
//
//	DashboardWaterfallChartConfigurationArgs{...}
type DashboardWaterfallChartConfigurationInput interface {
	pulumi.Input

	ToDashboardWaterfallChartConfigurationOutput() DashboardWaterfallChartConfigurationOutput
	ToDashboardWaterfallChartConfigurationOutputWithContext(context.Context) DashboardWaterfallChartConfigurationOutput
}

type DashboardWaterfallChartConfigurationArgs struct {
	// The options that determine the presentation of the category axis.
	CategoryAxisDisplayOptions DashboardAxisDisplayOptionsPtrInput `pulumi:"categoryAxisDisplayOptions"`
	// The options that determine the presentation of the category axis label.
	CategoryAxisLabelOptions DashboardChartAxisLabelOptionsPtrInput `pulumi:"categoryAxisLabelOptions"`
	// The color configuration of a waterfall visual.
	ColorConfiguration DashboardWaterfallChartColorConfigurationPtrInput `pulumi:"colorConfiguration"`
	// The data label configuration of a waterfall visual.
	DataLabels DashboardDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field well configuration of a waterfall visual.
	FieldWells DashboardWaterfallChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions DashboardVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend configuration of a waterfall visual.
	Legend DashboardLegendOptionsPtrInput `pulumi:"legend"`
	// The options that determine the presentation of the y-axis.
	PrimaryYAxisDisplayOptions DashboardAxisDisplayOptionsPtrInput `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions DashboardChartAxisLabelOptionsPtrInput `pulumi:"primaryYAxisLabelOptions"`
	// The sort configuration of a waterfall visual.
	SortConfiguration DashboardWaterfallChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The visual palette configuration of a waterfall visual.
	VisualPalette DashboardVisualPalettePtrInput `pulumi:"visualPalette"`
	// The options that determine the presentation of a waterfall visual.
	WaterfallChartOptions DashboardWaterfallChartOptionsPtrInput `pulumi:"waterfallChartOptions"`
}

func (DashboardWaterfallChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartConfiguration)(nil)).Elem()
}

func (i DashboardWaterfallChartConfigurationArgs) ToDashboardWaterfallChartConfigurationOutput() DashboardWaterfallChartConfigurationOutput {
	return i.ToDashboardWaterfallChartConfigurationOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartConfigurationArgs) ToDashboardWaterfallChartConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartConfigurationOutput)
}

func (i DashboardWaterfallChartConfigurationArgs) ToDashboardWaterfallChartConfigurationPtrOutput() DashboardWaterfallChartConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartConfigurationArgs) ToDashboardWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartConfigurationOutput).ToDashboardWaterfallChartConfigurationPtrOutputWithContext(ctx)
}

// DashboardWaterfallChartConfigurationPtrInput is an input type that accepts DashboardWaterfallChartConfigurationArgs, DashboardWaterfallChartConfigurationPtr and DashboardWaterfallChartConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartConfigurationPtrInput` via:
//
//	        DashboardWaterfallChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallChartConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallChartConfigurationPtrOutput() DashboardWaterfallChartConfigurationPtrOutput
	ToDashboardWaterfallChartConfigurationPtrOutputWithContext(context.Context) DashboardWaterfallChartConfigurationPtrOutput
}

type dashboardWaterfallChartConfigurationPtrType DashboardWaterfallChartConfigurationArgs

func DashboardWaterfallChartConfigurationPtr(v *DashboardWaterfallChartConfigurationArgs) DashboardWaterfallChartConfigurationPtrInput {
	return (*dashboardWaterfallChartConfigurationPtrType)(v)
}

func (*dashboardWaterfallChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartConfiguration)(nil)).Elem()
}

func (i *dashboardWaterfallChartConfigurationPtrType) ToDashboardWaterfallChartConfigurationPtrOutput() DashboardWaterfallChartConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallChartConfigurationPtrType) ToDashboardWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartConfigurationPtrOutput)
}

type DashboardWaterfallChartConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartConfigurationOutput) ToDashboardWaterfallChartConfigurationOutput() DashboardWaterfallChartConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartConfigurationOutput) ToDashboardWaterfallChartConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartConfigurationOutput) ToDashboardWaterfallChartConfigurationPtrOutput() DashboardWaterfallChartConfigurationPtrOutput {
	return o.ToDashboardWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallChartConfigurationOutput) ToDashboardWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallChartConfiguration) *DashboardWaterfallChartConfiguration {
		return &v
	}).(DashboardWaterfallChartConfigurationPtrOutput)
}

// The options that determine the presentation of the category axis.
func (o DashboardWaterfallChartConfigurationOutput) CategoryAxisDisplayOptions() DashboardAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardAxisDisplayOptions {
		return v.CategoryAxisDisplayOptions
	}).(DashboardAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the category axis label.
func (o DashboardWaterfallChartConfigurationOutput) CategoryAxisLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardChartAxisLabelOptions {
		return v.CategoryAxisLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The color configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationOutput) ColorConfiguration() DashboardWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardWaterfallChartColorConfiguration {
		return v.ColorConfiguration
	}).(DashboardWaterfallChartColorConfigurationPtrOutput)
}

// The data label configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationOutput) DataLabels() DashboardDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardDataLabelOptions { return v.DataLabels }).(DashboardDataLabelOptionsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationOutput) FieldWells() DashboardWaterfallChartFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardWaterfallChartFieldWells { return v.FieldWells }).(DashboardWaterfallChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardWaterfallChartConfigurationOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardVisualInteractionOptions { return v.Interactions }).(DashboardVisualInteractionOptionsPtrOutput)
}

// The legend configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationOutput) Legend() DashboardLegendOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardLegendOptions { return v.Legend }).(DashboardLegendOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o DashboardWaterfallChartConfigurationOutput) PrimaryYAxisDisplayOptions() DashboardAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardAxisDisplayOptions {
		return v.PrimaryYAxisDisplayOptions
	}).(DashboardAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o DashboardWaterfallChartConfigurationOutput) PrimaryYAxisLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardChartAxisLabelOptions {
		return v.PrimaryYAxisLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationOutput) SortConfiguration() DashboardWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardWaterfallChartSortConfiguration {
		return v.SortConfiguration
	}).(DashboardWaterfallChartSortConfigurationPtrOutput)
}

// The visual palette configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationOutput) VisualPalette() DashboardVisualPalettePtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardVisualPalette { return v.VisualPalette }).(DashboardVisualPalettePtrOutput)
}

// The options that determine the presentation of a waterfall visual.
func (o DashboardWaterfallChartConfigurationOutput) WaterfallChartOptions() DashboardWaterfallChartOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartConfiguration) *DashboardWaterfallChartOptions {
		return v.WaterfallChartOptions
	}).(DashboardWaterfallChartOptionsPtrOutput)
}

type DashboardWaterfallChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartConfigurationPtrOutput) ToDashboardWaterfallChartConfigurationPtrOutput() DashboardWaterfallChartConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartConfigurationPtrOutput) ToDashboardWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartConfigurationPtrOutput) Elem() DashboardWaterfallChartConfigurationOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) DashboardWaterfallChartConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallChartConfiguration
		return ret
	}).(DashboardWaterfallChartConfigurationOutput)
}

// The options that determine the presentation of the category axis.
func (o DashboardWaterfallChartConfigurationPtrOutput) CategoryAxisDisplayOptions() DashboardAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxisDisplayOptions
	}).(DashboardAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the category axis label.
func (o DashboardWaterfallChartConfigurationPtrOutput) CategoryAxisLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxisLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The color configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) ColorConfiguration() DashboardWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardWaterfallChartColorConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorConfiguration
	}).(DashboardWaterfallChartColorConfigurationPtrOutput)
}

// The data label configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) DataLabels() DashboardDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(DashboardDataLabelOptionsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) FieldWells() DashboardWaterfallChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardWaterfallChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(DashboardWaterfallChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(DashboardVisualInteractionOptionsPtrOutput)
}

// The legend configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) Legend() DashboardLegendOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(DashboardLegendOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o DashboardWaterfallChartConfigurationPtrOutput) PrimaryYAxisDisplayOptions() DashboardAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisDisplayOptions
	}).(DashboardAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o DashboardWaterfallChartConfigurationPtrOutput) PrimaryYAxisLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) SortConfiguration() DashboardWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardWaterfallChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(DashboardWaterfallChartSortConfigurationPtrOutput)
}

// The visual palette configuration of a waterfall visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) VisualPalette() DashboardVisualPalettePtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(DashboardVisualPalettePtrOutput)
}

// The options that determine the presentation of a waterfall visual.
func (o DashboardWaterfallChartConfigurationPtrOutput) WaterfallChartOptions() DashboardWaterfallChartOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartConfiguration) *DashboardWaterfallChartOptions {
		if v == nil {
			return nil
		}
		return v.WaterfallChartOptions
	}).(DashboardWaterfallChartOptionsPtrOutput)
}

type DashboardWaterfallChartFieldWells struct {
	// The field well configuration of a waterfall visual.
	WaterfallChartAggregatedFieldWells *DashboardWaterfallChartAggregatedFieldWells `pulumi:"waterfallChartAggregatedFieldWells"`
}

// DashboardWaterfallChartFieldWellsInput is an input type that accepts DashboardWaterfallChartFieldWellsArgs and DashboardWaterfallChartFieldWellsOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartFieldWellsInput` via:
//
//	DashboardWaterfallChartFieldWellsArgs{...}
type DashboardWaterfallChartFieldWellsInput interface {
	pulumi.Input

	ToDashboardWaterfallChartFieldWellsOutput() DashboardWaterfallChartFieldWellsOutput
	ToDashboardWaterfallChartFieldWellsOutputWithContext(context.Context) DashboardWaterfallChartFieldWellsOutput
}

type DashboardWaterfallChartFieldWellsArgs struct {
	// The field well configuration of a waterfall visual.
	WaterfallChartAggregatedFieldWells DashboardWaterfallChartAggregatedFieldWellsPtrInput `pulumi:"waterfallChartAggregatedFieldWells"`
}

func (DashboardWaterfallChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartFieldWells)(nil)).Elem()
}

func (i DashboardWaterfallChartFieldWellsArgs) ToDashboardWaterfallChartFieldWellsOutput() DashboardWaterfallChartFieldWellsOutput {
	return i.ToDashboardWaterfallChartFieldWellsOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartFieldWellsArgs) ToDashboardWaterfallChartFieldWellsOutputWithContext(ctx context.Context) DashboardWaterfallChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartFieldWellsOutput)
}

func (i DashboardWaterfallChartFieldWellsArgs) ToDashboardWaterfallChartFieldWellsPtrOutput() DashboardWaterfallChartFieldWellsPtrOutput {
	return i.ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartFieldWellsArgs) ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartFieldWellsOutput).ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(ctx)
}

// DashboardWaterfallChartFieldWellsPtrInput is an input type that accepts DashboardWaterfallChartFieldWellsArgs, DashboardWaterfallChartFieldWellsPtr and DashboardWaterfallChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartFieldWellsPtrInput` via:
//
//	        DashboardWaterfallChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallChartFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallChartFieldWellsPtrOutput() DashboardWaterfallChartFieldWellsPtrOutput
	ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(context.Context) DashboardWaterfallChartFieldWellsPtrOutput
}

type dashboardWaterfallChartFieldWellsPtrType DashboardWaterfallChartFieldWellsArgs

func DashboardWaterfallChartFieldWellsPtr(v *DashboardWaterfallChartFieldWellsArgs) DashboardWaterfallChartFieldWellsPtrInput {
	return (*dashboardWaterfallChartFieldWellsPtrType)(v)
}

func (*dashboardWaterfallChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartFieldWells)(nil)).Elem()
}

func (i *dashboardWaterfallChartFieldWellsPtrType) ToDashboardWaterfallChartFieldWellsPtrOutput() DashboardWaterfallChartFieldWellsPtrOutput {
	return i.ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallChartFieldWellsPtrType) ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartFieldWellsPtrOutput)
}

type DashboardWaterfallChartFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartFieldWells)(nil)).Elem()
}

func (o DashboardWaterfallChartFieldWellsOutput) ToDashboardWaterfallChartFieldWellsOutput() DashboardWaterfallChartFieldWellsOutput {
	return o
}

func (o DashboardWaterfallChartFieldWellsOutput) ToDashboardWaterfallChartFieldWellsOutputWithContext(ctx context.Context) DashboardWaterfallChartFieldWellsOutput {
	return o
}

func (o DashboardWaterfallChartFieldWellsOutput) ToDashboardWaterfallChartFieldWellsPtrOutput() DashboardWaterfallChartFieldWellsPtrOutput {
	return o.ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallChartFieldWellsOutput) ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallChartFieldWells) *DashboardWaterfallChartFieldWells {
		return &v
	}).(DashboardWaterfallChartFieldWellsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o DashboardWaterfallChartFieldWellsOutput) WaterfallChartAggregatedFieldWells() DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartFieldWells) *DashboardWaterfallChartAggregatedFieldWells {
		return v.WaterfallChartAggregatedFieldWells
	}).(DashboardWaterfallChartAggregatedFieldWellsPtrOutput)
}

type DashboardWaterfallChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartFieldWells)(nil)).Elem()
}

func (o DashboardWaterfallChartFieldWellsPtrOutput) ToDashboardWaterfallChartFieldWellsPtrOutput() DashboardWaterfallChartFieldWellsPtrOutput {
	return o
}

func (o DashboardWaterfallChartFieldWellsPtrOutput) ToDashboardWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartFieldWellsPtrOutput {
	return o
}

func (o DashboardWaterfallChartFieldWellsPtrOutput) Elem() DashboardWaterfallChartFieldWellsOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartFieldWells) DashboardWaterfallChartFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallChartFieldWells
		return ret
	}).(DashboardWaterfallChartFieldWellsOutput)
}

// The field well configuration of a waterfall visual.
func (o DashboardWaterfallChartFieldWellsPtrOutput) WaterfallChartAggregatedFieldWells() DashboardWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartFieldWells) *DashboardWaterfallChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.WaterfallChartAggregatedFieldWells
	}).(DashboardWaterfallChartAggregatedFieldWellsPtrOutput)
}

type DashboardWaterfallChartGroupColorConfiguration struct {
	// Defines the color for the negative bars of a waterfall chart.
	NegativeBarColor *string `pulumi:"negativeBarColor"`
	// Defines the color for the positive bars of a waterfall chart.
	PositiveBarColor *string `pulumi:"positiveBarColor"`
	// Defines the color for the total bars of a waterfall chart.
	TotalBarColor *string `pulumi:"totalBarColor"`
}

// DashboardWaterfallChartGroupColorConfigurationInput is an input type that accepts DashboardWaterfallChartGroupColorConfigurationArgs and DashboardWaterfallChartGroupColorConfigurationOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartGroupColorConfigurationInput` via:
//
//	DashboardWaterfallChartGroupColorConfigurationArgs{...}
type DashboardWaterfallChartGroupColorConfigurationInput interface {
	pulumi.Input

	ToDashboardWaterfallChartGroupColorConfigurationOutput() DashboardWaterfallChartGroupColorConfigurationOutput
	ToDashboardWaterfallChartGroupColorConfigurationOutputWithContext(context.Context) DashboardWaterfallChartGroupColorConfigurationOutput
}

type DashboardWaterfallChartGroupColorConfigurationArgs struct {
	// Defines the color for the negative bars of a waterfall chart.
	NegativeBarColor pulumi.StringPtrInput `pulumi:"negativeBarColor"`
	// Defines the color for the positive bars of a waterfall chart.
	PositiveBarColor pulumi.StringPtrInput `pulumi:"positiveBarColor"`
	// Defines the color for the total bars of a waterfall chart.
	TotalBarColor pulumi.StringPtrInput `pulumi:"totalBarColor"`
}

func (DashboardWaterfallChartGroupColorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (i DashboardWaterfallChartGroupColorConfigurationArgs) ToDashboardWaterfallChartGroupColorConfigurationOutput() DashboardWaterfallChartGroupColorConfigurationOutput {
	return i.ToDashboardWaterfallChartGroupColorConfigurationOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartGroupColorConfigurationArgs) ToDashboardWaterfallChartGroupColorConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartGroupColorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartGroupColorConfigurationOutput)
}

func (i DashboardWaterfallChartGroupColorConfigurationArgs) ToDashboardWaterfallChartGroupColorConfigurationPtrOutput() DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartGroupColorConfigurationArgs) ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartGroupColorConfigurationOutput).ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx)
}

// DashboardWaterfallChartGroupColorConfigurationPtrInput is an input type that accepts DashboardWaterfallChartGroupColorConfigurationArgs, DashboardWaterfallChartGroupColorConfigurationPtr and DashboardWaterfallChartGroupColorConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartGroupColorConfigurationPtrInput` via:
//
//	        DashboardWaterfallChartGroupColorConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallChartGroupColorConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallChartGroupColorConfigurationPtrOutput() DashboardWaterfallChartGroupColorConfigurationPtrOutput
	ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Context) DashboardWaterfallChartGroupColorConfigurationPtrOutput
}

type dashboardWaterfallChartGroupColorConfigurationPtrType DashboardWaterfallChartGroupColorConfigurationArgs

func DashboardWaterfallChartGroupColorConfigurationPtr(v *DashboardWaterfallChartGroupColorConfigurationArgs) DashboardWaterfallChartGroupColorConfigurationPtrInput {
	return (*dashboardWaterfallChartGroupColorConfigurationPtrType)(v)
}

func (*dashboardWaterfallChartGroupColorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (i *dashboardWaterfallChartGroupColorConfigurationPtrType) ToDashboardWaterfallChartGroupColorConfigurationPtrOutput() DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallChartGroupColorConfigurationPtrType) ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartGroupColorConfigurationPtrOutput)
}

type DashboardWaterfallChartGroupColorConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartGroupColorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartGroupColorConfigurationOutput) ToDashboardWaterfallChartGroupColorConfigurationOutput() DashboardWaterfallChartGroupColorConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartGroupColorConfigurationOutput) ToDashboardWaterfallChartGroupColorConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartGroupColorConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartGroupColorConfigurationOutput) ToDashboardWaterfallChartGroupColorConfigurationPtrOutput() DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallChartGroupColorConfigurationOutput) ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallChartGroupColorConfiguration) *DashboardWaterfallChartGroupColorConfiguration {
		return &v
	}).(DashboardWaterfallChartGroupColorConfigurationPtrOutput)
}

// Defines the color for the negative bars of a waterfall chart.
func (o DashboardWaterfallChartGroupColorConfigurationOutput) NegativeBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartGroupColorConfiguration) *string { return v.NegativeBarColor }).(pulumi.StringPtrOutput)
}

// Defines the color for the positive bars of a waterfall chart.
func (o DashboardWaterfallChartGroupColorConfigurationOutput) PositiveBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartGroupColorConfiguration) *string { return v.PositiveBarColor }).(pulumi.StringPtrOutput)
}

// Defines the color for the total bars of a waterfall chart.
func (o DashboardWaterfallChartGroupColorConfigurationOutput) TotalBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartGroupColorConfiguration) *string { return v.TotalBarColor }).(pulumi.StringPtrOutput)
}

type DashboardWaterfallChartGroupColorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartGroupColorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartGroupColorConfigurationPtrOutput) ToDashboardWaterfallChartGroupColorConfigurationPtrOutput() DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartGroupColorConfigurationPtrOutput) ToDashboardWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartGroupColorConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartGroupColorConfigurationPtrOutput) Elem() DashboardWaterfallChartGroupColorConfigurationOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartGroupColorConfiguration) DashboardWaterfallChartGroupColorConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallChartGroupColorConfiguration
		return ret
	}).(DashboardWaterfallChartGroupColorConfigurationOutput)
}

// Defines the color for the negative bars of a waterfall chart.
func (o DashboardWaterfallChartGroupColorConfigurationPtrOutput) NegativeBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.NegativeBarColor
	}).(pulumi.StringPtrOutput)
}

// Defines the color for the positive bars of a waterfall chart.
func (o DashboardWaterfallChartGroupColorConfigurationPtrOutput) PositiveBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PositiveBarColor
	}).(pulumi.StringPtrOutput)
}

// Defines the color for the total bars of a waterfall chart.
func (o DashboardWaterfallChartGroupColorConfigurationPtrOutput) TotalBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TotalBarColor
	}).(pulumi.StringPtrOutput)
}

type DashboardWaterfallChartOptions struct {
	// This option determines the total bar label of a waterfall visual.
	TotalBarLabel *string `pulumi:"totalBarLabel"`
}

// DashboardWaterfallChartOptionsInput is an input type that accepts DashboardWaterfallChartOptionsArgs and DashboardWaterfallChartOptionsOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartOptionsInput` via:
//
//	DashboardWaterfallChartOptionsArgs{...}
type DashboardWaterfallChartOptionsInput interface {
	pulumi.Input

	ToDashboardWaterfallChartOptionsOutput() DashboardWaterfallChartOptionsOutput
	ToDashboardWaterfallChartOptionsOutputWithContext(context.Context) DashboardWaterfallChartOptionsOutput
}

type DashboardWaterfallChartOptionsArgs struct {
	// This option determines the total bar label of a waterfall visual.
	TotalBarLabel pulumi.StringPtrInput `pulumi:"totalBarLabel"`
}

func (DashboardWaterfallChartOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartOptions)(nil)).Elem()
}

func (i DashboardWaterfallChartOptionsArgs) ToDashboardWaterfallChartOptionsOutput() DashboardWaterfallChartOptionsOutput {
	return i.ToDashboardWaterfallChartOptionsOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartOptionsArgs) ToDashboardWaterfallChartOptionsOutputWithContext(ctx context.Context) DashboardWaterfallChartOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartOptionsOutput)
}

func (i DashboardWaterfallChartOptionsArgs) ToDashboardWaterfallChartOptionsPtrOutput() DashboardWaterfallChartOptionsPtrOutput {
	return i.ToDashboardWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartOptionsArgs) ToDashboardWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartOptionsOutput).ToDashboardWaterfallChartOptionsPtrOutputWithContext(ctx)
}

// DashboardWaterfallChartOptionsPtrInput is an input type that accepts DashboardWaterfallChartOptionsArgs, DashboardWaterfallChartOptionsPtr and DashboardWaterfallChartOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartOptionsPtrInput` via:
//
//	        DashboardWaterfallChartOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallChartOptionsPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallChartOptionsPtrOutput() DashboardWaterfallChartOptionsPtrOutput
	ToDashboardWaterfallChartOptionsPtrOutputWithContext(context.Context) DashboardWaterfallChartOptionsPtrOutput
}

type dashboardWaterfallChartOptionsPtrType DashboardWaterfallChartOptionsArgs

func DashboardWaterfallChartOptionsPtr(v *DashboardWaterfallChartOptionsArgs) DashboardWaterfallChartOptionsPtrInput {
	return (*dashboardWaterfallChartOptionsPtrType)(v)
}

func (*dashboardWaterfallChartOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartOptions)(nil)).Elem()
}

func (i *dashboardWaterfallChartOptionsPtrType) ToDashboardWaterfallChartOptionsPtrOutput() DashboardWaterfallChartOptionsPtrOutput {
	return i.ToDashboardWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallChartOptionsPtrType) ToDashboardWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartOptionsPtrOutput)
}

type DashboardWaterfallChartOptionsOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartOptions)(nil)).Elem()
}

func (o DashboardWaterfallChartOptionsOutput) ToDashboardWaterfallChartOptionsOutput() DashboardWaterfallChartOptionsOutput {
	return o
}

func (o DashboardWaterfallChartOptionsOutput) ToDashboardWaterfallChartOptionsOutputWithContext(ctx context.Context) DashboardWaterfallChartOptionsOutput {
	return o
}

func (o DashboardWaterfallChartOptionsOutput) ToDashboardWaterfallChartOptionsPtrOutput() DashboardWaterfallChartOptionsPtrOutput {
	return o.ToDashboardWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallChartOptionsOutput) ToDashboardWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallChartOptions) *DashboardWaterfallChartOptions {
		return &v
	}).(DashboardWaterfallChartOptionsPtrOutput)
}

// This option determines the total bar label of a waterfall visual.
func (o DashboardWaterfallChartOptionsOutput) TotalBarLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartOptions) *string { return v.TotalBarLabel }).(pulumi.StringPtrOutput)
}

type DashboardWaterfallChartOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartOptions)(nil)).Elem()
}

func (o DashboardWaterfallChartOptionsPtrOutput) ToDashboardWaterfallChartOptionsPtrOutput() DashboardWaterfallChartOptionsPtrOutput {
	return o
}

func (o DashboardWaterfallChartOptionsPtrOutput) ToDashboardWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartOptionsPtrOutput {
	return o
}

func (o DashboardWaterfallChartOptionsPtrOutput) Elem() DashboardWaterfallChartOptionsOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartOptions) DashboardWaterfallChartOptions {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallChartOptions
		return ret
	}).(DashboardWaterfallChartOptionsOutput)
}

// This option determines the total bar label of a waterfall visual.
func (o DashboardWaterfallChartOptionsPtrOutput) TotalBarLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartOptions) *string {
		if v == nil {
			return nil
		}
		return v.TotalBarLabel
	}).(pulumi.StringPtrOutput)
}

type DashboardWaterfallChartSortConfiguration struct {
	// The limit on the number of bar groups that are displayed.
	BreakdownItemsLimit *DashboardItemsLimitConfiguration `pulumi:"breakdownItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort []DashboardFieldSortOptions `pulumi:"categorySort"`
}

// DashboardWaterfallChartSortConfigurationInput is an input type that accepts DashboardWaterfallChartSortConfigurationArgs and DashboardWaterfallChartSortConfigurationOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartSortConfigurationInput` via:
//
//	DashboardWaterfallChartSortConfigurationArgs{...}
type DashboardWaterfallChartSortConfigurationInput interface {
	pulumi.Input

	ToDashboardWaterfallChartSortConfigurationOutput() DashboardWaterfallChartSortConfigurationOutput
	ToDashboardWaterfallChartSortConfigurationOutputWithContext(context.Context) DashboardWaterfallChartSortConfigurationOutput
}

type DashboardWaterfallChartSortConfigurationArgs struct {
	// The limit on the number of bar groups that are displayed.
	BreakdownItemsLimit DashboardItemsLimitConfigurationPtrInput `pulumi:"breakdownItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort DashboardFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (DashboardWaterfallChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartSortConfiguration)(nil)).Elem()
}

func (i DashboardWaterfallChartSortConfigurationArgs) ToDashboardWaterfallChartSortConfigurationOutput() DashboardWaterfallChartSortConfigurationOutput {
	return i.ToDashboardWaterfallChartSortConfigurationOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartSortConfigurationArgs) ToDashboardWaterfallChartSortConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartSortConfigurationOutput)
}

func (i DashboardWaterfallChartSortConfigurationArgs) ToDashboardWaterfallChartSortConfigurationPtrOutput() DashboardWaterfallChartSortConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallChartSortConfigurationArgs) ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartSortConfigurationOutput).ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(ctx)
}

// DashboardWaterfallChartSortConfigurationPtrInput is an input type that accepts DashboardWaterfallChartSortConfigurationArgs, DashboardWaterfallChartSortConfigurationPtr and DashboardWaterfallChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallChartSortConfigurationPtrInput` via:
//
//	        DashboardWaterfallChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallChartSortConfigurationPtrOutput() DashboardWaterfallChartSortConfigurationPtrOutput
	ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(context.Context) DashboardWaterfallChartSortConfigurationPtrOutput
}

type dashboardWaterfallChartSortConfigurationPtrType DashboardWaterfallChartSortConfigurationArgs

func DashboardWaterfallChartSortConfigurationPtr(v *DashboardWaterfallChartSortConfigurationArgs) DashboardWaterfallChartSortConfigurationPtrInput {
	return (*dashboardWaterfallChartSortConfigurationPtrType)(v)
}

func (*dashboardWaterfallChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartSortConfiguration)(nil)).Elem()
}

func (i *dashboardWaterfallChartSortConfigurationPtrType) ToDashboardWaterfallChartSortConfigurationPtrOutput() DashboardWaterfallChartSortConfigurationPtrOutput {
	return i.ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallChartSortConfigurationPtrType) ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallChartSortConfigurationPtrOutput)
}

type DashboardWaterfallChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallChartSortConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartSortConfigurationOutput) ToDashboardWaterfallChartSortConfigurationOutput() DashboardWaterfallChartSortConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartSortConfigurationOutput) ToDashboardWaterfallChartSortConfigurationOutputWithContext(ctx context.Context) DashboardWaterfallChartSortConfigurationOutput {
	return o
}

func (o DashboardWaterfallChartSortConfigurationOutput) ToDashboardWaterfallChartSortConfigurationPtrOutput() DashboardWaterfallChartSortConfigurationPtrOutput {
	return o.ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallChartSortConfigurationOutput) ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallChartSortConfiguration) *DashboardWaterfallChartSortConfiguration {
		return &v
	}).(DashboardWaterfallChartSortConfigurationPtrOutput)
}

// The limit on the number of bar groups that are displayed.
func (o DashboardWaterfallChartSortConfigurationOutput) BreakdownItemsLimit() DashboardItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallChartSortConfiguration) *DashboardItemsLimitConfiguration {
		return v.BreakdownItemsLimit
	}).(DashboardItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o DashboardWaterfallChartSortConfigurationOutput) CategorySort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v DashboardWaterfallChartSortConfiguration) []DashboardFieldSortOptions { return v.CategorySort }).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardWaterfallChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallChartSortConfiguration)(nil)).Elem()
}

func (o DashboardWaterfallChartSortConfigurationPtrOutput) ToDashboardWaterfallChartSortConfigurationPtrOutput() DashboardWaterfallChartSortConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartSortConfigurationPtrOutput) ToDashboardWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWaterfallChartSortConfigurationPtrOutput {
	return o
}

func (o DashboardWaterfallChartSortConfigurationPtrOutput) Elem() DashboardWaterfallChartSortConfigurationOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartSortConfiguration) DashboardWaterfallChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallChartSortConfiguration
		return ret
	}).(DashboardWaterfallChartSortConfigurationOutput)
}

// The limit on the number of bar groups that are displayed.
func (o DashboardWaterfallChartSortConfigurationPtrOutput) BreakdownItemsLimit() DashboardItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartSortConfiguration) *DashboardItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.BreakdownItemsLimit
	}).(DashboardItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o DashboardWaterfallChartSortConfigurationPtrOutput) CategorySort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *DashboardWaterfallChartSortConfiguration) []DashboardFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardWaterfallVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []DashboardVisualCustomAction `pulumi:"actions"`
	// The configuration for a waterfall visual.
	ChartConfiguration *DashboardWaterfallChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []DashboardColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *DashboardVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *DashboardVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// DashboardWaterfallVisualInput is an input type that accepts DashboardWaterfallVisualArgs and DashboardWaterfallVisualOutput values.
// You can construct a concrete instance of `DashboardWaterfallVisualInput` via:
//
//	DashboardWaterfallVisualArgs{...}
type DashboardWaterfallVisualInput interface {
	pulumi.Input

	ToDashboardWaterfallVisualOutput() DashboardWaterfallVisualOutput
	ToDashboardWaterfallVisualOutputWithContext(context.Context) DashboardWaterfallVisualOutput
}

type DashboardWaterfallVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions DashboardVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration for a waterfall visual.
	ChartConfiguration DashboardWaterfallChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies DashboardColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle DashboardVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title DashboardVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (DashboardWaterfallVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallVisual)(nil)).Elem()
}

func (i DashboardWaterfallVisualArgs) ToDashboardWaterfallVisualOutput() DashboardWaterfallVisualOutput {
	return i.ToDashboardWaterfallVisualOutputWithContext(context.Background())
}

func (i DashboardWaterfallVisualArgs) ToDashboardWaterfallVisualOutputWithContext(ctx context.Context) DashboardWaterfallVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallVisualOutput)
}

func (i DashboardWaterfallVisualArgs) ToDashboardWaterfallVisualPtrOutput() DashboardWaterfallVisualPtrOutput {
	return i.ToDashboardWaterfallVisualPtrOutputWithContext(context.Background())
}

func (i DashboardWaterfallVisualArgs) ToDashboardWaterfallVisualPtrOutputWithContext(ctx context.Context) DashboardWaterfallVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallVisualOutput).ToDashboardWaterfallVisualPtrOutputWithContext(ctx)
}

// DashboardWaterfallVisualPtrInput is an input type that accepts DashboardWaterfallVisualArgs, DashboardWaterfallVisualPtr and DashboardWaterfallVisualPtrOutput values.
// You can construct a concrete instance of `DashboardWaterfallVisualPtrInput` via:
//
//	        DashboardWaterfallVisualArgs{...}
//
//	or:
//
//	        nil
type DashboardWaterfallVisualPtrInput interface {
	pulumi.Input

	ToDashboardWaterfallVisualPtrOutput() DashboardWaterfallVisualPtrOutput
	ToDashboardWaterfallVisualPtrOutputWithContext(context.Context) DashboardWaterfallVisualPtrOutput
}

type dashboardWaterfallVisualPtrType DashboardWaterfallVisualArgs

func DashboardWaterfallVisualPtr(v *DashboardWaterfallVisualArgs) DashboardWaterfallVisualPtrInput {
	return (*dashboardWaterfallVisualPtrType)(v)
}

func (*dashboardWaterfallVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallVisual)(nil)).Elem()
}

func (i *dashboardWaterfallVisualPtrType) ToDashboardWaterfallVisualPtrOutput() DashboardWaterfallVisualPtrOutput {
	return i.ToDashboardWaterfallVisualPtrOutputWithContext(context.Background())
}

func (i *dashboardWaterfallVisualPtrType) ToDashboardWaterfallVisualPtrOutputWithContext(ctx context.Context) DashboardWaterfallVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWaterfallVisualPtrOutput)
}

type DashboardWaterfallVisualOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWaterfallVisual)(nil)).Elem()
}

func (o DashboardWaterfallVisualOutput) ToDashboardWaterfallVisualOutput() DashboardWaterfallVisualOutput {
	return o
}

func (o DashboardWaterfallVisualOutput) ToDashboardWaterfallVisualOutputWithContext(ctx context.Context) DashboardWaterfallVisualOutput {
	return o
}

func (o DashboardWaterfallVisualOutput) ToDashboardWaterfallVisualPtrOutput() DashboardWaterfallVisualPtrOutput {
	return o.ToDashboardWaterfallVisualPtrOutputWithContext(context.Background())
}

func (o DashboardWaterfallVisualOutput) ToDashboardWaterfallVisualPtrOutputWithContext(ctx context.Context) DashboardWaterfallVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWaterfallVisual) *DashboardWaterfallVisual {
		return &v
	}).(DashboardWaterfallVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardWaterfallVisualOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v DashboardWaterfallVisual) []DashboardVisualCustomAction { return v.Actions }).(DashboardVisualCustomActionArrayOutput)
}

// The configuration for a waterfall visual.
func (o DashboardWaterfallVisualOutput) ChartConfiguration() DashboardWaterfallChartConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallVisual) *DashboardWaterfallChartConfiguration { return v.ChartConfiguration }).(DashboardWaterfallChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o DashboardWaterfallVisualOutput) ColumnHierarchies() DashboardColumnHierarchyArrayOutput {
	return o.ApplyT(func(v DashboardWaterfallVisual) []DashboardColumnHierarchy { return v.ColumnHierarchies }).(DashboardColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardWaterfallVisualOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallVisual) *DashboardVisualSubtitleLabelOptions { return v.Subtitle }).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardWaterfallVisualOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallVisual) *DashboardVisualTitleLabelOptions { return v.Title }).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardWaterfallVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWaterfallVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o DashboardWaterfallVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWaterfallVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type DashboardWaterfallVisualPtrOutput struct{ *pulumi.OutputState }

func (DashboardWaterfallVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWaterfallVisual)(nil)).Elem()
}

func (o DashboardWaterfallVisualPtrOutput) ToDashboardWaterfallVisualPtrOutput() DashboardWaterfallVisualPtrOutput {
	return o
}

func (o DashboardWaterfallVisualPtrOutput) ToDashboardWaterfallVisualPtrOutputWithContext(ctx context.Context) DashboardWaterfallVisualPtrOutput {
	return o
}

func (o DashboardWaterfallVisualPtrOutput) Elem() DashboardWaterfallVisualOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) DashboardWaterfallVisual {
		if v != nil {
			return *v
		}
		var ret DashboardWaterfallVisual
		return ret
	}).(DashboardWaterfallVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardWaterfallVisualPtrOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) []DashboardVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(DashboardVisualCustomActionArrayOutput)
}

// The configuration for a waterfall visual.
func (o DashboardWaterfallVisualPtrOutput) ChartConfiguration() DashboardWaterfallChartConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) *DashboardWaterfallChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(DashboardWaterfallChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o DashboardWaterfallVisualPtrOutput) ColumnHierarchies() DashboardColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) []DashboardColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(DashboardColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardWaterfallVisualPtrOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) *DashboardVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardWaterfallVisualPtrOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) *DashboardVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardWaterfallVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o DashboardWaterfallVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWaterfallVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type DashboardWhatIfPointScenario struct {
	// The date that you need the forecast results for.
	Date string `pulumi:"date"`
	// The target value that you want to meet for the provided date.
	Value float64 `pulumi:"value"`
}

// DashboardWhatIfPointScenarioInput is an input type that accepts DashboardWhatIfPointScenarioArgs and DashboardWhatIfPointScenarioOutput values.
// You can construct a concrete instance of `DashboardWhatIfPointScenarioInput` via:
//
//	DashboardWhatIfPointScenarioArgs{...}
type DashboardWhatIfPointScenarioInput interface {
	pulumi.Input

	ToDashboardWhatIfPointScenarioOutput() DashboardWhatIfPointScenarioOutput
	ToDashboardWhatIfPointScenarioOutputWithContext(context.Context) DashboardWhatIfPointScenarioOutput
}

type DashboardWhatIfPointScenarioArgs struct {
	// The date that you need the forecast results for.
	Date pulumi.StringInput `pulumi:"date"`
	// The target value that you want to meet for the provided date.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (DashboardWhatIfPointScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWhatIfPointScenario)(nil)).Elem()
}

func (i DashboardWhatIfPointScenarioArgs) ToDashboardWhatIfPointScenarioOutput() DashboardWhatIfPointScenarioOutput {
	return i.ToDashboardWhatIfPointScenarioOutputWithContext(context.Background())
}

func (i DashboardWhatIfPointScenarioArgs) ToDashboardWhatIfPointScenarioOutputWithContext(ctx context.Context) DashboardWhatIfPointScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWhatIfPointScenarioOutput)
}

func (i DashboardWhatIfPointScenarioArgs) ToDashboardWhatIfPointScenarioPtrOutput() DashboardWhatIfPointScenarioPtrOutput {
	return i.ToDashboardWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (i DashboardWhatIfPointScenarioArgs) ToDashboardWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfPointScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWhatIfPointScenarioOutput).ToDashboardWhatIfPointScenarioPtrOutputWithContext(ctx)
}

// DashboardWhatIfPointScenarioPtrInput is an input type that accepts DashboardWhatIfPointScenarioArgs, DashboardWhatIfPointScenarioPtr and DashboardWhatIfPointScenarioPtrOutput values.
// You can construct a concrete instance of `DashboardWhatIfPointScenarioPtrInput` via:
//
//	        DashboardWhatIfPointScenarioArgs{...}
//
//	or:
//
//	        nil
type DashboardWhatIfPointScenarioPtrInput interface {
	pulumi.Input

	ToDashboardWhatIfPointScenarioPtrOutput() DashboardWhatIfPointScenarioPtrOutput
	ToDashboardWhatIfPointScenarioPtrOutputWithContext(context.Context) DashboardWhatIfPointScenarioPtrOutput
}

type dashboardWhatIfPointScenarioPtrType DashboardWhatIfPointScenarioArgs

func DashboardWhatIfPointScenarioPtr(v *DashboardWhatIfPointScenarioArgs) DashboardWhatIfPointScenarioPtrInput {
	return (*dashboardWhatIfPointScenarioPtrType)(v)
}

func (*dashboardWhatIfPointScenarioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWhatIfPointScenario)(nil)).Elem()
}

func (i *dashboardWhatIfPointScenarioPtrType) ToDashboardWhatIfPointScenarioPtrOutput() DashboardWhatIfPointScenarioPtrOutput {
	return i.ToDashboardWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (i *dashboardWhatIfPointScenarioPtrType) ToDashboardWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfPointScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWhatIfPointScenarioPtrOutput)
}

type DashboardWhatIfPointScenarioOutput struct{ *pulumi.OutputState }

func (DashboardWhatIfPointScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWhatIfPointScenario)(nil)).Elem()
}

func (o DashboardWhatIfPointScenarioOutput) ToDashboardWhatIfPointScenarioOutput() DashboardWhatIfPointScenarioOutput {
	return o
}

func (o DashboardWhatIfPointScenarioOutput) ToDashboardWhatIfPointScenarioOutputWithContext(ctx context.Context) DashboardWhatIfPointScenarioOutput {
	return o
}

func (o DashboardWhatIfPointScenarioOutput) ToDashboardWhatIfPointScenarioPtrOutput() DashboardWhatIfPointScenarioPtrOutput {
	return o.ToDashboardWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (o DashboardWhatIfPointScenarioOutput) ToDashboardWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfPointScenarioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWhatIfPointScenario) *DashboardWhatIfPointScenario {
		return &v
	}).(DashboardWhatIfPointScenarioPtrOutput)
}

// The date that you need the forecast results for.
func (o DashboardWhatIfPointScenarioOutput) Date() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWhatIfPointScenario) string { return v.Date }).(pulumi.StringOutput)
}

// The target value that you want to meet for the provided date.
func (o DashboardWhatIfPointScenarioOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardWhatIfPointScenario) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardWhatIfPointScenarioPtrOutput struct{ *pulumi.OutputState }

func (DashboardWhatIfPointScenarioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWhatIfPointScenario)(nil)).Elem()
}

func (o DashboardWhatIfPointScenarioPtrOutput) ToDashboardWhatIfPointScenarioPtrOutput() DashboardWhatIfPointScenarioPtrOutput {
	return o
}

func (o DashboardWhatIfPointScenarioPtrOutput) ToDashboardWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfPointScenarioPtrOutput {
	return o
}

func (o DashboardWhatIfPointScenarioPtrOutput) Elem() DashboardWhatIfPointScenarioOutput {
	return o.ApplyT(func(v *DashboardWhatIfPointScenario) DashboardWhatIfPointScenario {
		if v != nil {
			return *v
		}
		var ret DashboardWhatIfPointScenario
		return ret
	}).(DashboardWhatIfPointScenarioOutput)
}

// The date that you need the forecast results for.
func (o DashboardWhatIfPointScenarioPtrOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWhatIfPointScenario) *string {
		if v == nil {
			return nil
		}
		return &v.Date
	}).(pulumi.StringPtrOutput)
}

// The target value that you want to meet for the provided date.
func (o DashboardWhatIfPointScenarioPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardWhatIfPointScenario) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type DashboardWhatIfRangeScenario struct {
	// The end date in the date range that you need the forecast results for.
	EndDate string `pulumi:"endDate"`
	// The start date in the date range that you need the forecast results for.
	StartDate string `pulumi:"startDate"`
	// The target value that you want to meet for the provided date range.
	Value float64 `pulumi:"value"`
}

// DashboardWhatIfRangeScenarioInput is an input type that accepts DashboardWhatIfRangeScenarioArgs and DashboardWhatIfRangeScenarioOutput values.
// You can construct a concrete instance of `DashboardWhatIfRangeScenarioInput` via:
//
//	DashboardWhatIfRangeScenarioArgs{...}
type DashboardWhatIfRangeScenarioInput interface {
	pulumi.Input

	ToDashboardWhatIfRangeScenarioOutput() DashboardWhatIfRangeScenarioOutput
	ToDashboardWhatIfRangeScenarioOutputWithContext(context.Context) DashboardWhatIfRangeScenarioOutput
}

type DashboardWhatIfRangeScenarioArgs struct {
	// The end date in the date range that you need the forecast results for.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// The start date in the date range that you need the forecast results for.
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// The target value that you want to meet for the provided date range.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (DashboardWhatIfRangeScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWhatIfRangeScenario)(nil)).Elem()
}

func (i DashboardWhatIfRangeScenarioArgs) ToDashboardWhatIfRangeScenarioOutput() DashboardWhatIfRangeScenarioOutput {
	return i.ToDashboardWhatIfRangeScenarioOutputWithContext(context.Background())
}

func (i DashboardWhatIfRangeScenarioArgs) ToDashboardWhatIfRangeScenarioOutputWithContext(ctx context.Context) DashboardWhatIfRangeScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWhatIfRangeScenarioOutput)
}

func (i DashboardWhatIfRangeScenarioArgs) ToDashboardWhatIfRangeScenarioPtrOutput() DashboardWhatIfRangeScenarioPtrOutput {
	return i.ToDashboardWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (i DashboardWhatIfRangeScenarioArgs) ToDashboardWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfRangeScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWhatIfRangeScenarioOutput).ToDashboardWhatIfRangeScenarioPtrOutputWithContext(ctx)
}

// DashboardWhatIfRangeScenarioPtrInput is an input type that accepts DashboardWhatIfRangeScenarioArgs, DashboardWhatIfRangeScenarioPtr and DashboardWhatIfRangeScenarioPtrOutput values.
// You can construct a concrete instance of `DashboardWhatIfRangeScenarioPtrInput` via:
//
//	        DashboardWhatIfRangeScenarioArgs{...}
//
//	or:
//
//	        nil
type DashboardWhatIfRangeScenarioPtrInput interface {
	pulumi.Input

	ToDashboardWhatIfRangeScenarioPtrOutput() DashboardWhatIfRangeScenarioPtrOutput
	ToDashboardWhatIfRangeScenarioPtrOutputWithContext(context.Context) DashboardWhatIfRangeScenarioPtrOutput
}

type dashboardWhatIfRangeScenarioPtrType DashboardWhatIfRangeScenarioArgs

func DashboardWhatIfRangeScenarioPtr(v *DashboardWhatIfRangeScenarioArgs) DashboardWhatIfRangeScenarioPtrInput {
	return (*dashboardWhatIfRangeScenarioPtrType)(v)
}

func (*dashboardWhatIfRangeScenarioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWhatIfRangeScenario)(nil)).Elem()
}

func (i *dashboardWhatIfRangeScenarioPtrType) ToDashboardWhatIfRangeScenarioPtrOutput() DashboardWhatIfRangeScenarioPtrOutput {
	return i.ToDashboardWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (i *dashboardWhatIfRangeScenarioPtrType) ToDashboardWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfRangeScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWhatIfRangeScenarioPtrOutput)
}

type DashboardWhatIfRangeScenarioOutput struct{ *pulumi.OutputState }

func (DashboardWhatIfRangeScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWhatIfRangeScenario)(nil)).Elem()
}

func (o DashboardWhatIfRangeScenarioOutput) ToDashboardWhatIfRangeScenarioOutput() DashboardWhatIfRangeScenarioOutput {
	return o
}

func (o DashboardWhatIfRangeScenarioOutput) ToDashboardWhatIfRangeScenarioOutputWithContext(ctx context.Context) DashboardWhatIfRangeScenarioOutput {
	return o
}

func (o DashboardWhatIfRangeScenarioOutput) ToDashboardWhatIfRangeScenarioPtrOutput() DashboardWhatIfRangeScenarioPtrOutput {
	return o.ToDashboardWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (o DashboardWhatIfRangeScenarioOutput) ToDashboardWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfRangeScenarioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWhatIfRangeScenario) *DashboardWhatIfRangeScenario {
		return &v
	}).(DashboardWhatIfRangeScenarioPtrOutput)
}

// The end date in the date range that you need the forecast results for.
func (o DashboardWhatIfRangeScenarioOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWhatIfRangeScenario) string { return v.EndDate }).(pulumi.StringOutput)
}

// The start date in the date range that you need the forecast results for.
func (o DashboardWhatIfRangeScenarioOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWhatIfRangeScenario) string { return v.StartDate }).(pulumi.StringOutput)
}

// The target value that you want to meet for the provided date range.
func (o DashboardWhatIfRangeScenarioOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v DashboardWhatIfRangeScenario) float64 { return v.Value }).(pulumi.Float64Output)
}

type DashboardWhatIfRangeScenarioPtrOutput struct{ *pulumi.OutputState }

func (DashboardWhatIfRangeScenarioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWhatIfRangeScenario)(nil)).Elem()
}

func (o DashboardWhatIfRangeScenarioPtrOutput) ToDashboardWhatIfRangeScenarioPtrOutput() DashboardWhatIfRangeScenarioPtrOutput {
	return o
}

func (o DashboardWhatIfRangeScenarioPtrOutput) ToDashboardWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) DashboardWhatIfRangeScenarioPtrOutput {
	return o
}

func (o DashboardWhatIfRangeScenarioPtrOutput) Elem() DashboardWhatIfRangeScenarioOutput {
	return o.ApplyT(func(v *DashboardWhatIfRangeScenario) DashboardWhatIfRangeScenario {
		if v != nil {
			return *v
		}
		var ret DashboardWhatIfRangeScenario
		return ret
	}).(DashboardWhatIfRangeScenarioOutput)
}

// The end date in the date range that you need the forecast results for.
func (o DashboardWhatIfRangeScenarioPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWhatIfRangeScenario) *string {
		if v == nil {
			return nil
		}
		return &v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date in the date range that you need the forecast results for.
func (o DashboardWhatIfRangeScenarioPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWhatIfRangeScenario) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The target value that you want to meet for the provided date range.
func (o DashboardWhatIfRangeScenarioPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardWhatIfRangeScenario) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type DashboardWordCloudAggregatedFieldWells struct {
	// The group by field well of a word cloud. Values are grouped by group by fields.
	GroupBy []DashboardDimensionField `pulumi:"groupBy"`
	// The size field well of a word cloud. Values are aggregated based on group by fields.
	Size []DashboardMeasureField `pulumi:"size"`
}

// DashboardWordCloudAggregatedFieldWellsInput is an input type that accepts DashboardWordCloudAggregatedFieldWellsArgs and DashboardWordCloudAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `DashboardWordCloudAggregatedFieldWellsInput` via:
//
//	DashboardWordCloudAggregatedFieldWellsArgs{...}
type DashboardWordCloudAggregatedFieldWellsInput interface {
	pulumi.Input

	ToDashboardWordCloudAggregatedFieldWellsOutput() DashboardWordCloudAggregatedFieldWellsOutput
	ToDashboardWordCloudAggregatedFieldWellsOutputWithContext(context.Context) DashboardWordCloudAggregatedFieldWellsOutput
}

type DashboardWordCloudAggregatedFieldWellsArgs struct {
	// The group by field well of a word cloud. Values are grouped by group by fields.
	GroupBy DashboardDimensionFieldArrayInput `pulumi:"groupBy"`
	// The size field well of a word cloud. Values are aggregated based on group by fields.
	Size DashboardMeasureFieldArrayInput `pulumi:"size"`
}

func (DashboardWordCloudAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (i DashboardWordCloudAggregatedFieldWellsArgs) ToDashboardWordCloudAggregatedFieldWellsOutput() DashboardWordCloudAggregatedFieldWellsOutput {
	return i.ToDashboardWordCloudAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i DashboardWordCloudAggregatedFieldWellsArgs) ToDashboardWordCloudAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardWordCloudAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudAggregatedFieldWellsOutput)
}

func (i DashboardWordCloudAggregatedFieldWellsArgs) ToDashboardWordCloudAggregatedFieldWellsPtrOutput() DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return i.ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardWordCloudAggregatedFieldWellsArgs) ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudAggregatedFieldWellsOutput).ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// DashboardWordCloudAggregatedFieldWellsPtrInput is an input type that accepts DashboardWordCloudAggregatedFieldWellsArgs, DashboardWordCloudAggregatedFieldWellsPtr and DashboardWordCloudAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardWordCloudAggregatedFieldWellsPtrInput` via:
//
//	        DashboardWordCloudAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardWordCloudAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardWordCloudAggregatedFieldWellsPtrOutput() DashboardWordCloudAggregatedFieldWellsPtrOutput
	ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Context) DashboardWordCloudAggregatedFieldWellsPtrOutput
}

type dashboardWordCloudAggregatedFieldWellsPtrType DashboardWordCloudAggregatedFieldWellsArgs

func DashboardWordCloudAggregatedFieldWellsPtr(v *DashboardWordCloudAggregatedFieldWellsArgs) DashboardWordCloudAggregatedFieldWellsPtrInput {
	return (*dashboardWordCloudAggregatedFieldWellsPtrType)(v)
}

func (*dashboardWordCloudAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (i *dashboardWordCloudAggregatedFieldWellsPtrType) ToDashboardWordCloudAggregatedFieldWellsPtrOutput() DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return i.ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardWordCloudAggregatedFieldWellsPtrType) ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudAggregatedFieldWellsPtrOutput)
}

type DashboardWordCloudAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardWordCloudAggregatedFieldWellsOutput) ToDashboardWordCloudAggregatedFieldWellsOutput() DashboardWordCloudAggregatedFieldWellsOutput {
	return o
}

func (o DashboardWordCloudAggregatedFieldWellsOutput) ToDashboardWordCloudAggregatedFieldWellsOutputWithContext(ctx context.Context) DashboardWordCloudAggregatedFieldWellsOutput {
	return o
}

func (o DashboardWordCloudAggregatedFieldWellsOutput) ToDashboardWordCloudAggregatedFieldWellsPtrOutput() DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return o.ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardWordCloudAggregatedFieldWellsOutput) ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWordCloudAggregatedFieldWells) *DashboardWordCloudAggregatedFieldWells {
		return &v
	}).(DashboardWordCloudAggregatedFieldWellsPtrOutput)
}

// The group by field well of a word cloud. Values are grouped by group by fields.
func (o DashboardWordCloudAggregatedFieldWellsOutput) GroupBy() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v DashboardWordCloudAggregatedFieldWells) []DashboardDimensionField { return v.GroupBy }).(DashboardDimensionFieldArrayOutput)
}

// The size field well of a word cloud. Values are aggregated based on group by fields.
func (o DashboardWordCloudAggregatedFieldWellsOutput) Size() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v DashboardWordCloudAggregatedFieldWells) []DashboardMeasureField { return v.Size }).(DashboardMeasureFieldArrayOutput)
}

type DashboardWordCloudAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (o DashboardWordCloudAggregatedFieldWellsPtrOutput) ToDashboardWordCloudAggregatedFieldWellsPtrOutput() DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardWordCloudAggregatedFieldWellsPtrOutput) ToDashboardWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return o
}

func (o DashboardWordCloudAggregatedFieldWellsPtrOutput) Elem() DashboardWordCloudAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *DashboardWordCloudAggregatedFieldWells) DashboardWordCloudAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardWordCloudAggregatedFieldWells
		return ret
	}).(DashboardWordCloudAggregatedFieldWellsOutput)
}

// The group by field well of a word cloud. Values are grouped by group by fields.
func (o DashboardWordCloudAggregatedFieldWellsPtrOutput) GroupBy() DashboardDimensionFieldArrayOutput {
	return o.ApplyT(func(v *DashboardWordCloudAggregatedFieldWells) []DashboardDimensionField {
		if v == nil {
			return nil
		}
		return v.GroupBy
	}).(DashboardDimensionFieldArrayOutput)
}

// The size field well of a word cloud. Values are aggregated based on group by fields.
func (o DashboardWordCloudAggregatedFieldWellsPtrOutput) Size() DashboardMeasureFieldArrayOutput {
	return o.ApplyT(func(v *DashboardWordCloudAggregatedFieldWells) []DashboardMeasureField {
		if v == nil {
			return nil
		}
		return v.Size
	}).(DashboardMeasureFieldArrayOutput)
}

type DashboardWordCloudChartConfiguration struct {
	// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
	CategoryLabelOptions *DashboardChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells *DashboardWordCloudFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *DashboardVisualInteractionOptions `pulumi:"interactions"`
	// The sort configuration of a word cloud visual.
	SortConfiguration *DashboardWordCloudSortConfiguration `pulumi:"sortConfiguration"`
	// The options for a word cloud visual.
	WordCloudOptions *DashboardWordCloudOptions `pulumi:"wordCloudOptions"`
}

// DashboardWordCloudChartConfigurationInput is an input type that accepts DashboardWordCloudChartConfigurationArgs and DashboardWordCloudChartConfigurationOutput values.
// You can construct a concrete instance of `DashboardWordCloudChartConfigurationInput` via:
//
//	DashboardWordCloudChartConfigurationArgs{...}
type DashboardWordCloudChartConfigurationInput interface {
	pulumi.Input

	ToDashboardWordCloudChartConfigurationOutput() DashboardWordCloudChartConfigurationOutput
	ToDashboardWordCloudChartConfigurationOutputWithContext(context.Context) DashboardWordCloudChartConfigurationOutput
}

type DashboardWordCloudChartConfigurationArgs struct {
	// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
	CategoryLabelOptions DashboardChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells DashboardWordCloudFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions DashboardVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The sort configuration of a word cloud visual.
	SortConfiguration DashboardWordCloudSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The options for a word cloud visual.
	WordCloudOptions DashboardWordCloudOptionsPtrInput `pulumi:"wordCloudOptions"`
}

func (DashboardWordCloudChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudChartConfiguration)(nil)).Elem()
}

func (i DashboardWordCloudChartConfigurationArgs) ToDashboardWordCloudChartConfigurationOutput() DashboardWordCloudChartConfigurationOutput {
	return i.ToDashboardWordCloudChartConfigurationOutputWithContext(context.Background())
}

func (i DashboardWordCloudChartConfigurationArgs) ToDashboardWordCloudChartConfigurationOutputWithContext(ctx context.Context) DashboardWordCloudChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudChartConfigurationOutput)
}

func (i DashboardWordCloudChartConfigurationArgs) ToDashboardWordCloudChartConfigurationPtrOutput() DashboardWordCloudChartConfigurationPtrOutput {
	return i.ToDashboardWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardWordCloudChartConfigurationArgs) ToDashboardWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudChartConfigurationOutput).ToDashboardWordCloudChartConfigurationPtrOutputWithContext(ctx)
}

// DashboardWordCloudChartConfigurationPtrInput is an input type that accepts DashboardWordCloudChartConfigurationArgs, DashboardWordCloudChartConfigurationPtr and DashboardWordCloudChartConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardWordCloudChartConfigurationPtrInput` via:
//
//	        DashboardWordCloudChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardWordCloudChartConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardWordCloudChartConfigurationPtrOutput() DashboardWordCloudChartConfigurationPtrOutput
	ToDashboardWordCloudChartConfigurationPtrOutputWithContext(context.Context) DashboardWordCloudChartConfigurationPtrOutput
}

type dashboardWordCloudChartConfigurationPtrType DashboardWordCloudChartConfigurationArgs

func DashboardWordCloudChartConfigurationPtr(v *DashboardWordCloudChartConfigurationArgs) DashboardWordCloudChartConfigurationPtrInput {
	return (*dashboardWordCloudChartConfigurationPtrType)(v)
}

func (*dashboardWordCloudChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudChartConfiguration)(nil)).Elem()
}

func (i *dashboardWordCloudChartConfigurationPtrType) ToDashboardWordCloudChartConfigurationPtrOutput() DashboardWordCloudChartConfigurationPtrOutput {
	return i.ToDashboardWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardWordCloudChartConfigurationPtrType) ToDashboardWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudChartConfigurationPtrOutput)
}

type DashboardWordCloudChartConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudChartConfiguration)(nil)).Elem()
}

func (o DashboardWordCloudChartConfigurationOutput) ToDashboardWordCloudChartConfigurationOutput() DashboardWordCloudChartConfigurationOutput {
	return o
}

func (o DashboardWordCloudChartConfigurationOutput) ToDashboardWordCloudChartConfigurationOutputWithContext(ctx context.Context) DashboardWordCloudChartConfigurationOutput {
	return o
}

func (o DashboardWordCloudChartConfigurationOutput) ToDashboardWordCloudChartConfigurationPtrOutput() DashboardWordCloudChartConfigurationPtrOutput {
	return o.ToDashboardWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardWordCloudChartConfigurationOutput) ToDashboardWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWordCloudChartConfiguration) *DashboardWordCloudChartConfiguration {
		return &v
	}).(DashboardWordCloudChartConfigurationPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
func (o DashboardWordCloudChartConfigurationOutput) CategoryLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudChartConfiguration) *DashboardChartAxisLabelOptions {
		return v.CategoryLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o DashboardWordCloudChartConfigurationOutput) FieldWells() DashboardWordCloudFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudChartConfiguration) *DashboardWordCloudFieldWells { return v.FieldWells }).(DashboardWordCloudFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardWordCloudChartConfigurationOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudChartConfiguration) *DashboardVisualInteractionOptions { return v.Interactions }).(DashboardVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a word cloud visual.
func (o DashboardWordCloudChartConfigurationOutput) SortConfiguration() DashboardWordCloudSortConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudChartConfiguration) *DashboardWordCloudSortConfiguration {
		return v.SortConfiguration
	}).(DashboardWordCloudSortConfigurationPtrOutput)
}

// The options for a word cloud visual.
func (o DashboardWordCloudChartConfigurationOutput) WordCloudOptions() DashboardWordCloudOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudChartConfiguration) *DashboardWordCloudOptions { return v.WordCloudOptions }).(DashboardWordCloudOptionsPtrOutput)
}

type DashboardWordCloudChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudChartConfiguration)(nil)).Elem()
}

func (o DashboardWordCloudChartConfigurationPtrOutput) ToDashboardWordCloudChartConfigurationPtrOutput() DashboardWordCloudChartConfigurationPtrOutput {
	return o
}

func (o DashboardWordCloudChartConfigurationPtrOutput) ToDashboardWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudChartConfigurationPtrOutput {
	return o
}

func (o DashboardWordCloudChartConfigurationPtrOutput) Elem() DashboardWordCloudChartConfigurationOutput {
	return o.ApplyT(func(v *DashboardWordCloudChartConfiguration) DashboardWordCloudChartConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardWordCloudChartConfiguration
		return ret
	}).(DashboardWordCloudChartConfigurationOutput)
}

// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
func (o DashboardWordCloudChartConfigurationPtrOutput) CategoryLabelOptions() DashboardChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudChartConfiguration) *DashboardChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(DashboardChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o DashboardWordCloudChartConfigurationPtrOutput) FieldWells() DashboardWordCloudFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudChartConfiguration) *DashboardWordCloudFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(DashboardWordCloudFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o DashboardWordCloudChartConfigurationPtrOutput) Interactions() DashboardVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudChartConfiguration) *DashboardVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(DashboardVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a word cloud visual.
func (o DashboardWordCloudChartConfigurationPtrOutput) SortConfiguration() DashboardWordCloudSortConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudChartConfiguration) *DashboardWordCloudSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(DashboardWordCloudSortConfigurationPtrOutput)
}

// The options for a word cloud visual.
func (o DashboardWordCloudChartConfigurationPtrOutput) WordCloudOptions() DashboardWordCloudOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudChartConfiguration) *DashboardWordCloudOptions {
		if v == nil {
			return nil
		}
		return v.WordCloudOptions
	}).(DashboardWordCloudOptionsPtrOutput)
}

type DashboardWordCloudFieldWells struct {
	// The aggregated field wells of a word cloud.
	WordCloudAggregatedFieldWells *DashboardWordCloudAggregatedFieldWells `pulumi:"wordCloudAggregatedFieldWells"`
}

// DashboardWordCloudFieldWellsInput is an input type that accepts DashboardWordCloudFieldWellsArgs and DashboardWordCloudFieldWellsOutput values.
// You can construct a concrete instance of `DashboardWordCloudFieldWellsInput` via:
//
//	DashboardWordCloudFieldWellsArgs{...}
type DashboardWordCloudFieldWellsInput interface {
	pulumi.Input

	ToDashboardWordCloudFieldWellsOutput() DashboardWordCloudFieldWellsOutput
	ToDashboardWordCloudFieldWellsOutputWithContext(context.Context) DashboardWordCloudFieldWellsOutput
}

type DashboardWordCloudFieldWellsArgs struct {
	// The aggregated field wells of a word cloud.
	WordCloudAggregatedFieldWells DashboardWordCloudAggregatedFieldWellsPtrInput `pulumi:"wordCloudAggregatedFieldWells"`
}

func (DashboardWordCloudFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudFieldWells)(nil)).Elem()
}

func (i DashboardWordCloudFieldWellsArgs) ToDashboardWordCloudFieldWellsOutput() DashboardWordCloudFieldWellsOutput {
	return i.ToDashboardWordCloudFieldWellsOutputWithContext(context.Background())
}

func (i DashboardWordCloudFieldWellsArgs) ToDashboardWordCloudFieldWellsOutputWithContext(ctx context.Context) DashboardWordCloudFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudFieldWellsOutput)
}

func (i DashboardWordCloudFieldWellsArgs) ToDashboardWordCloudFieldWellsPtrOutput() DashboardWordCloudFieldWellsPtrOutput {
	return i.ToDashboardWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (i DashboardWordCloudFieldWellsArgs) ToDashboardWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudFieldWellsOutput).ToDashboardWordCloudFieldWellsPtrOutputWithContext(ctx)
}

// DashboardWordCloudFieldWellsPtrInput is an input type that accepts DashboardWordCloudFieldWellsArgs, DashboardWordCloudFieldWellsPtr and DashboardWordCloudFieldWellsPtrOutput values.
// You can construct a concrete instance of `DashboardWordCloudFieldWellsPtrInput` via:
//
//	        DashboardWordCloudFieldWellsArgs{...}
//
//	or:
//
//	        nil
type DashboardWordCloudFieldWellsPtrInput interface {
	pulumi.Input

	ToDashboardWordCloudFieldWellsPtrOutput() DashboardWordCloudFieldWellsPtrOutput
	ToDashboardWordCloudFieldWellsPtrOutputWithContext(context.Context) DashboardWordCloudFieldWellsPtrOutput
}

type dashboardWordCloudFieldWellsPtrType DashboardWordCloudFieldWellsArgs

func DashboardWordCloudFieldWellsPtr(v *DashboardWordCloudFieldWellsArgs) DashboardWordCloudFieldWellsPtrInput {
	return (*dashboardWordCloudFieldWellsPtrType)(v)
}

func (*dashboardWordCloudFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudFieldWells)(nil)).Elem()
}

func (i *dashboardWordCloudFieldWellsPtrType) ToDashboardWordCloudFieldWellsPtrOutput() DashboardWordCloudFieldWellsPtrOutput {
	return i.ToDashboardWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (i *dashboardWordCloudFieldWellsPtrType) ToDashboardWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudFieldWellsPtrOutput)
}

type DashboardWordCloudFieldWellsOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudFieldWells)(nil)).Elem()
}

func (o DashboardWordCloudFieldWellsOutput) ToDashboardWordCloudFieldWellsOutput() DashboardWordCloudFieldWellsOutput {
	return o
}

func (o DashboardWordCloudFieldWellsOutput) ToDashboardWordCloudFieldWellsOutputWithContext(ctx context.Context) DashboardWordCloudFieldWellsOutput {
	return o
}

func (o DashboardWordCloudFieldWellsOutput) ToDashboardWordCloudFieldWellsPtrOutput() DashboardWordCloudFieldWellsPtrOutput {
	return o.ToDashboardWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (o DashboardWordCloudFieldWellsOutput) ToDashboardWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWordCloudFieldWells) *DashboardWordCloudFieldWells {
		return &v
	}).(DashboardWordCloudFieldWellsPtrOutput)
}

// The aggregated field wells of a word cloud.
func (o DashboardWordCloudFieldWellsOutput) WordCloudAggregatedFieldWells() DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudFieldWells) *DashboardWordCloudAggregatedFieldWells {
		return v.WordCloudAggregatedFieldWells
	}).(DashboardWordCloudAggregatedFieldWellsPtrOutput)
}

type DashboardWordCloudFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudFieldWells)(nil)).Elem()
}

func (o DashboardWordCloudFieldWellsPtrOutput) ToDashboardWordCloudFieldWellsPtrOutput() DashboardWordCloudFieldWellsPtrOutput {
	return o
}

func (o DashboardWordCloudFieldWellsPtrOutput) ToDashboardWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) DashboardWordCloudFieldWellsPtrOutput {
	return o
}

func (o DashboardWordCloudFieldWellsPtrOutput) Elem() DashboardWordCloudFieldWellsOutput {
	return o.ApplyT(func(v *DashboardWordCloudFieldWells) DashboardWordCloudFieldWells {
		if v != nil {
			return *v
		}
		var ret DashboardWordCloudFieldWells
		return ret
	}).(DashboardWordCloudFieldWellsOutput)
}

// The aggregated field wells of a word cloud.
func (o DashboardWordCloudFieldWellsPtrOutput) WordCloudAggregatedFieldWells() DashboardWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudFieldWells) *DashboardWordCloudAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.WordCloudAggregatedFieldWells
	}).(DashboardWordCloudAggregatedFieldWellsPtrOutput)
}

type DashboardWordCloudOptions struct {
	// The cloud layout options (fluid, normal) of a word cloud.
	CloudLayout *DashboardWordCloudCloudLayout `pulumi:"cloudLayout"`
	// The length limit of each word from 1-100.
	MaximumStringLength *float64 `pulumi:"maximumStringLength"`
	// The word casing options (lower_case, existing_case) for the words in a word cloud.
	WordCasing *DashboardWordCloudWordCasing `pulumi:"wordCasing"`
	// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
	WordOrientation *DashboardWordCloudWordOrientation `pulumi:"wordOrientation"`
	// The word padding options (none, small, medium, large) for the words in a word cloud.
	WordPadding *DashboardWordCloudWordPadding `pulumi:"wordPadding"`
	// The word scaling options (emphasize, normal) for the words in a word cloud.
	WordScaling *DashboardWordCloudWordScaling `pulumi:"wordScaling"`
}

// DashboardWordCloudOptionsInput is an input type that accepts DashboardWordCloudOptionsArgs and DashboardWordCloudOptionsOutput values.
// You can construct a concrete instance of `DashboardWordCloudOptionsInput` via:
//
//	DashboardWordCloudOptionsArgs{...}
type DashboardWordCloudOptionsInput interface {
	pulumi.Input

	ToDashboardWordCloudOptionsOutput() DashboardWordCloudOptionsOutput
	ToDashboardWordCloudOptionsOutputWithContext(context.Context) DashboardWordCloudOptionsOutput
}

type DashboardWordCloudOptionsArgs struct {
	// The cloud layout options (fluid, normal) of a word cloud.
	CloudLayout DashboardWordCloudCloudLayoutPtrInput `pulumi:"cloudLayout"`
	// The length limit of each word from 1-100.
	MaximumStringLength pulumi.Float64PtrInput `pulumi:"maximumStringLength"`
	// The word casing options (lower_case, existing_case) for the words in a word cloud.
	WordCasing DashboardWordCloudWordCasingPtrInput `pulumi:"wordCasing"`
	// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
	WordOrientation DashboardWordCloudWordOrientationPtrInput `pulumi:"wordOrientation"`
	// The word padding options (none, small, medium, large) for the words in a word cloud.
	WordPadding DashboardWordCloudWordPaddingPtrInput `pulumi:"wordPadding"`
	// The word scaling options (emphasize, normal) for the words in a word cloud.
	WordScaling DashboardWordCloudWordScalingPtrInput `pulumi:"wordScaling"`
}

func (DashboardWordCloudOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudOptions)(nil)).Elem()
}

func (i DashboardWordCloudOptionsArgs) ToDashboardWordCloudOptionsOutput() DashboardWordCloudOptionsOutput {
	return i.ToDashboardWordCloudOptionsOutputWithContext(context.Background())
}

func (i DashboardWordCloudOptionsArgs) ToDashboardWordCloudOptionsOutputWithContext(ctx context.Context) DashboardWordCloudOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudOptionsOutput)
}

func (i DashboardWordCloudOptionsArgs) ToDashboardWordCloudOptionsPtrOutput() DashboardWordCloudOptionsPtrOutput {
	return i.ToDashboardWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardWordCloudOptionsArgs) ToDashboardWordCloudOptionsPtrOutputWithContext(ctx context.Context) DashboardWordCloudOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudOptionsOutput).ToDashboardWordCloudOptionsPtrOutputWithContext(ctx)
}

// DashboardWordCloudOptionsPtrInput is an input type that accepts DashboardWordCloudOptionsArgs, DashboardWordCloudOptionsPtr and DashboardWordCloudOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardWordCloudOptionsPtrInput` via:
//
//	        DashboardWordCloudOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardWordCloudOptionsPtrInput interface {
	pulumi.Input

	ToDashboardWordCloudOptionsPtrOutput() DashboardWordCloudOptionsPtrOutput
	ToDashboardWordCloudOptionsPtrOutputWithContext(context.Context) DashboardWordCloudOptionsPtrOutput
}

type dashboardWordCloudOptionsPtrType DashboardWordCloudOptionsArgs

func DashboardWordCloudOptionsPtr(v *DashboardWordCloudOptionsArgs) DashboardWordCloudOptionsPtrInput {
	return (*dashboardWordCloudOptionsPtrType)(v)
}

func (*dashboardWordCloudOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudOptions)(nil)).Elem()
}

func (i *dashboardWordCloudOptionsPtrType) ToDashboardWordCloudOptionsPtrOutput() DashboardWordCloudOptionsPtrOutput {
	return i.ToDashboardWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardWordCloudOptionsPtrType) ToDashboardWordCloudOptionsPtrOutputWithContext(ctx context.Context) DashboardWordCloudOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudOptionsPtrOutput)
}

type DashboardWordCloudOptionsOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudOptions)(nil)).Elem()
}

func (o DashboardWordCloudOptionsOutput) ToDashboardWordCloudOptionsOutput() DashboardWordCloudOptionsOutput {
	return o
}

func (o DashboardWordCloudOptionsOutput) ToDashboardWordCloudOptionsOutputWithContext(ctx context.Context) DashboardWordCloudOptionsOutput {
	return o
}

func (o DashboardWordCloudOptionsOutput) ToDashboardWordCloudOptionsPtrOutput() DashboardWordCloudOptionsPtrOutput {
	return o.ToDashboardWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardWordCloudOptionsOutput) ToDashboardWordCloudOptionsPtrOutputWithContext(ctx context.Context) DashboardWordCloudOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWordCloudOptions) *DashboardWordCloudOptions {
		return &v
	}).(DashboardWordCloudOptionsPtrOutput)
}

// The cloud layout options (fluid, normal) of a word cloud.
func (o DashboardWordCloudOptionsOutput) CloudLayout() DashboardWordCloudCloudLayoutPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudOptions) *DashboardWordCloudCloudLayout { return v.CloudLayout }).(DashboardWordCloudCloudLayoutPtrOutput)
}

// The length limit of each word from 1-100.
func (o DashboardWordCloudOptionsOutput) MaximumStringLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardWordCloudOptions) *float64 { return v.MaximumStringLength }).(pulumi.Float64PtrOutput)
}

// The word casing options (lower_case, existing_case) for the words in a word cloud.
func (o DashboardWordCloudOptionsOutput) WordCasing() DashboardWordCloudWordCasingPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudOptions) *DashboardWordCloudWordCasing { return v.WordCasing }).(DashboardWordCloudWordCasingPtrOutput)
}

// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
func (o DashboardWordCloudOptionsOutput) WordOrientation() DashboardWordCloudWordOrientationPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudOptions) *DashboardWordCloudWordOrientation { return v.WordOrientation }).(DashboardWordCloudWordOrientationPtrOutput)
}

// The word padding options (none, small, medium, large) for the words in a word cloud.
func (o DashboardWordCloudOptionsOutput) WordPadding() DashboardWordCloudWordPaddingPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudOptions) *DashboardWordCloudWordPadding { return v.WordPadding }).(DashboardWordCloudWordPaddingPtrOutput)
}

// The word scaling options (emphasize, normal) for the words in a word cloud.
func (o DashboardWordCloudOptionsOutput) WordScaling() DashboardWordCloudWordScalingPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudOptions) *DashboardWordCloudWordScaling { return v.WordScaling }).(DashboardWordCloudWordScalingPtrOutput)
}

type DashboardWordCloudOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudOptions)(nil)).Elem()
}

func (o DashboardWordCloudOptionsPtrOutput) ToDashboardWordCloudOptionsPtrOutput() DashboardWordCloudOptionsPtrOutput {
	return o
}

func (o DashboardWordCloudOptionsPtrOutput) ToDashboardWordCloudOptionsPtrOutputWithContext(ctx context.Context) DashboardWordCloudOptionsPtrOutput {
	return o
}

func (o DashboardWordCloudOptionsPtrOutput) Elem() DashboardWordCloudOptionsOutput {
	return o.ApplyT(func(v *DashboardWordCloudOptions) DashboardWordCloudOptions {
		if v != nil {
			return *v
		}
		var ret DashboardWordCloudOptions
		return ret
	}).(DashboardWordCloudOptionsOutput)
}

// The cloud layout options (fluid, normal) of a word cloud.
func (o DashboardWordCloudOptionsPtrOutput) CloudLayout() DashboardWordCloudCloudLayoutPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudOptions) *DashboardWordCloudCloudLayout {
		if v == nil {
			return nil
		}
		return v.CloudLayout
	}).(DashboardWordCloudCloudLayoutPtrOutput)
}

// The length limit of each word from 1-100.
func (o DashboardWordCloudOptionsPtrOutput) MaximumStringLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MaximumStringLength
	}).(pulumi.Float64PtrOutput)
}

// The word casing options (lower_case, existing_case) for the words in a word cloud.
func (o DashboardWordCloudOptionsPtrOutput) WordCasing() DashboardWordCloudWordCasingPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudOptions) *DashboardWordCloudWordCasing {
		if v == nil {
			return nil
		}
		return v.WordCasing
	}).(DashboardWordCloudWordCasingPtrOutput)
}

// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
func (o DashboardWordCloudOptionsPtrOutput) WordOrientation() DashboardWordCloudWordOrientationPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudOptions) *DashboardWordCloudWordOrientation {
		if v == nil {
			return nil
		}
		return v.WordOrientation
	}).(DashboardWordCloudWordOrientationPtrOutput)
}

// The word padding options (none, small, medium, large) for the words in a word cloud.
func (o DashboardWordCloudOptionsPtrOutput) WordPadding() DashboardWordCloudWordPaddingPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudOptions) *DashboardWordCloudWordPadding {
		if v == nil {
			return nil
		}
		return v.WordPadding
	}).(DashboardWordCloudWordPaddingPtrOutput)
}

// The word scaling options (emphasize, normal) for the words in a word cloud.
func (o DashboardWordCloudOptionsPtrOutput) WordScaling() DashboardWordCloudWordScalingPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudOptions) *DashboardWordCloudWordScaling {
		if v == nil {
			return nil
		}
		return v.WordScaling
	}).(DashboardWordCloudWordScalingPtrOutput)
}

type DashboardWordCloudSortConfiguration struct {
	// The limit on the number of groups that are displayed in a word cloud.
	CategoryItemsLimit *DashboardItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The sort configuration of group by fields.
	CategorySort []DashboardFieldSortOptions `pulumi:"categorySort"`
}

// DashboardWordCloudSortConfigurationInput is an input type that accepts DashboardWordCloudSortConfigurationArgs and DashboardWordCloudSortConfigurationOutput values.
// You can construct a concrete instance of `DashboardWordCloudSortConfigurationInput` via:
//
//	DashboardWordCloudSortConfigurationArgs{...}
type DashboardWordCloudSortConfigurationInput interface {
	pulumi.Input

	ToDashboardWordCloudSortConfigurationOutput() DashboardWordCloudSortConfigurationOutput
	ToDashboardWordCloudSortConfigurationOutputWithContext(context.Context) DashboardWordCloudSortConfigurationOutput
}

type DashboardWordCloudSortConfigurationArgs struct {
	// The limit on the number of groups that are displayed in a word cloud.
	CategoryItemsLimit DashboardItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The sort configuration of group by fields.
	CategorySort DashboardFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (DashboardWordCloudSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudSortConfiguration)(nil)).Elem()
}

func (i DashboardWordCloudSortConfigurationArgs) ToDashboardWordCloudSortConfigurationOutput() DashboardWordCloudSortConfigurationOutput {
	return i.ToDashboardWordCloudSortConfigurationOutputWithContext(context.Background())
}

func (i DashboardWordCloudSortConfigurationArgs) ToDashboardWordCloudSortConfigurationOutputWithContext(ctx context.Context) DashboardWordCloudSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudSortConfigurationOutput)
}

func (i DashboardWordCloudSortConfigurationArgs) ToDashboardWordCloudSortConfigurationPtrOutput() DashboardWordCloudSortConfigurationPtrOutput {
	return i.ToDashboardWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (i DashboardWordCloudSortConfigurationArgs) ToDashboardWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudSortConfigurationOutput).ToDashboardWordCloudSortConfigurationPtrOutputWithContext(ctx)
}

// DashboardWordCloudSortConfigurationPtrInput is an input type that accepts DashboardWordCloudSortConfigurationArgs, DashboardWordCloudSortConfigurationPtr and DashboardWordCloudSortConfigurationPtrOutput values.
// You can construct a concrete instance of `DashboardWordCloudSortConfigurationPtrInput` via:
//
//	        DashboardWordCloudSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type DashboardWordCloudSortConfigurationPtrInput interface {
	pulumi.Input

	ToDashboardWordCloudSortConfigurationPtrOutput() DashboardWordCloudSortConfigurationPtrOutput
	ToDashboardWordCloudSortConfigurationPtrOutputWithContext(context.Context) DashboardWordCloudSortConfigurationPtrOutput
}

type dashboardWordCloudSortConfigurationPtrType DashboardWordCloudSortConfigurationArgs

func DashboardWordCloudSortConfigurationPtr(v *DashboardWordCloudSortConfigurationArgs) DashboardWordCloudSortConfigurationPtrInput {
	return (*dashboardWordCloudSortConfigurationPtrType)(v)
}

func (*dashboardWordCloudSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudSortConfiguration)(nil)).Elem()
}

func (i *dashboardWordCloudSortConfigurationPtrType) ToDashboardWordCloudSortConfigurationPtrOutput() DashboardWordCloudSortConfigurationPtrOutput {
	return i.ToDashboardWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *dashboardWordCloudSortConfigurationPtrType) ToDashboardWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudSortConfigurationPtrOutput)
}

type DashboardWordCloudSortConfigurationOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudSortConfiguration)(nil)).Elem()
}

func (o DashboardWordCloudSortConfigurationOutput) ToDashboardWordCloudSortConfigurationOutput() DashboardWordCloudSortConfigurationOutput {
	return o
}

func (o DashboardWordCloudSortConfigurationOutput) ToDashboardWordCloudSortConfigurationOutputWithContext(ctx context.Context) DashboardWordCloudSortConfigurationOutput {
	return o
}

func (o DashboardWordCloudSortConfigurationOutput) ToDashboardWordCloudSortConfigurationPtrOutput() DashboardWordCloudSortConfigurationPtrOutput {
	return o.ToDashboardWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (o DashboardWordCloudSortConfigurationOutput) ToDashboardWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWordCloudSortConfiguration) *DashboardWordCloudSortConfiguration {
		return &v
	}).(DashboardWordCloudSortConfigurationPtrOutput)
}

// The limit on the number of groups that are displayed in a word cloud.
func (o DashboardWordCloudSortConfigurationOutput) CategoryItemsLimit() DashboardItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudSortConfiguration) *DashboardItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(DashboardItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o DashboardWordCloudSortConfigurationOutput) CategorySort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v DashboardWordCloudSortConfiguration) []DashboardFieldSortOptions { return v.CategorySort }).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardWordCloudSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudSortConfiguration)(nil)).Elem()
}

func (o DashboardWordCloudSortConfigurationPtrOutput) ToDashboardWordCloudSortConfigurationPtrOutput() DashboardWordCloudSortConfigurationPtrOutput {
	return o
}

func (o DashboardWordCloudSortConfigurationPtrOutput) ToDashboardWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) DashboardWordCloudSortConfigurationPtrOutput {
	return o
}

func (o DashboardWordCloudSortConfigurationPtrOutput) Elem() DashboardWordCloudSortConfigurationOutput {
	return o.ApplyT(func(v *DashboardWordCloudSortConfiguration) DashboardWordCloudSortConfiguration {
		if v != nil {
			return *v
		}
		var ret DashboardWordCloudSortConfiguration
		return ret
	}).(DashboardWordCloudSortConfigurationOutput)
}

// The limit on the number of groups that are displayed in a word cloud.
func (o DashboardWordCloudSortConfigurationPtrOutput) CategoryItemsLimit() DashboardItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudSortConfiguration) *DashboardItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(DashboardItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o DashboardWordCloudSortConfigurationPtrOutput) CategorySort() DashboardFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *DashboardWordCloudSortConfiguration) []DashboardFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(DashboardFieldSortOptionsArrayOutput)
}

type DashboardWordCloudVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []DashboardVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *DashboardWordCloudChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []DashboardColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *DashboardVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *DashboardVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// DashboardWordCloudVisualInput is an input type that accepts DashboardWordCloudVisualArgs and DashboardWordCloudVisualOutput values.
// You can construct a concrete instance of `DashboardWordCloudVisualInput` via:
//
//	DashboardWordCloudVisualArgs{...}
type DashboardWordCloudVisualInput interface {
	pulumi.Input

	ToDashboardWordCloudVisualOutput() DashboardWordCloudVisualOutput
	ToDashboardWordCloudVisualOutputWithContext(context.Context) DashboardWordCloudVisualOutput
}

type DashboardWordCloudVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions DashboardVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration DashboardWordCloudChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies DashboardColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle DashboardVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title DashboardVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (DashboardWordCloudVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudVisual)(nil)).Elem()
}

func (i DashboardWordCloudVisualArgs) ToDashboardWordCloudVisualOutput() DashboardWordCloudVisualOutput {
	return i.ToDashboardWordCloudVisualOutputWithContext(context.Background())
}

func (i DashboardWordCloudVisualArgs) ToDashboardWordCloudVisualOutputWithContext(ctx context.Context) DashboardWordCloudVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudVisualOutput)
}

func (i DashboardWordCloudVisualArgs) ToDashboardWordCloudVisualPtrOutput() DashboardWordCloudVisualPtrOutput {
	return i.ToDashboardWordCloudVisualPtrOutputWithContext(context.Background())
}

func (i DashboardWordCloudVisualArgs) ToDashboardWordCloudVisualPtrOutputWithContext(ctx context.Context) DashboardWordCloudVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudVisualOutput).ToDashboardWordCloudVisualPtrOutputWithContext(ctx)
}

// DashboardWordCloudVisualPtrInput is an input type that accepts DashboardWordCloudVisualArgs, DashboardWordCloudVisualPtr and DashboardWordCloudVisualPtrOutput values.
// You can construct a concrete instance of `DashboardWordCloudVisualPtrInput` via:
//
//	        DashboardWordCloudVisualArgs{...}
//
//	or:
//
//	        nil
type DashboardWordCloudVisualPtrInput interface {
	pulumi.Input

	ToDashboardWordCloudVisualPtrOutput() DashboardWordCloudVisualPtrOutput
	ToDashboardWordCloudVisualPtrOutputWithContext(context.Context) DashboardWordCloudVisualPtrOutput
}

type dashboardWordCloudVisualPtrType DashboardWordCloudVisualArgs

func DashboardWordCloudVisualPtr(v *DashboardWordCloudVisualArgs) DashboardWordCloudVisualPtrInput {
	return (*dashboardWordCloudVisualPtrType)(v)
}

func (*dashboardWordCloudVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudVisual)(nil)).Elem()
}

func (i *dashboardWordCloudVisualPtrType) ToDashboardWordCloudVisualPtrOutput() DashboardWordCloudVisualPtrOutput {
	return i.ToDashboardWordCloudVisualPtrOutputWithContext(context.Background())
}

func (i *dashboardWordCloudVisualPtrType) ToDashboardWordCloudVisualPtrOutputWithContext(ctx context.Context) DashboardWordCloudVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWordCloudVisualPtrOutput)
}

type DashboardWordCloudVisualOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWordCloudVisual)(nil)).Elem()
}

func (o DashboardWordCloudVisualOutput) ToDashboardWordCloudVisualOutput() DashboardWordCloudVisualOutput {
	return o
}

func (o DashboardWordCloudVisualOutput) ToDashboardWordCloudVisualOutputWithContext(ctx context.Context) DashboardWordCloudVisualOutput {
	return o
}

func (o DashboardWordCloudVisualOutput) ToDashboardWordCloudVisualPtrOutput() DashboardWordCloudVisualPtrOutput {
	return o.ToDashboardWordCloudVisualPtrOutputWithContext(context.Background())
}

func (o DashboardWordCloudVisualOutput) ToDashboardWordCloudVisualPtrOutputWithContext(ctx context.Context) DashboardWordCloudVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardWordCloudVisual) *DashboardWordCloudVisual {
		return &v
	}).(DashboardWordCloudVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardWordCloudVisualOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v DashboardWordCloudVisual) []DashboardVisualCustomAction { return v.Actions }).(DashboardVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o DashboardWordCloudVisualOutput) ChartConfiguration() DashboardWordCloudChartConfigurationPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudVisual) *DashboardWordCloudChartConfiguration { return v.ChartConfiguration }).(DashboardWordCloudChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o DashboardWordCloudVisualOutput) ColumnHierarchies() DashboardColumnHierarchyArrayOutput {
	return o.ApplyT(func(v DashboardWordCloudVisual) []DashboardColumnHierarchy { return v.ColumnHierarchies }).(DashboardColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardWordCloudVisualOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudVisual) *DashboardVisualSubtitleLabelOptions { return v.Subtitle }).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardWordCloudVisualOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudVisual) *DashboardVisualTitleLabelOptions { return v.Title }).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardWordCloudVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWordCloudVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o DashboardWordCloudVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWordCloudVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type DashboardWordCloudVisualPtrOutput struct{ *pulumi.OutputState }

func (DashboardWordCloudVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardWordCloudVisual)(nil)).Elem()
}

func (o DashboardWordCloudVisualPtrOutput) ToDashboardWordCloudVisualPtrOutput() DashboardWordCloudVisualPtrOutput {
	return o
}

func (o DashboardWordCloudVisualPtrOutput) ToDashboardWordCloudVisualPtrOutputWithContext(ctx context.Context) DashboardWordCloudVisualPtrOutput {
	return o
}

func (o DashboardWordCloudVisualPtrOutput) Elem() DashboardWordCloudVisualOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) DashboardWordCloudVisual {
		if v != nil {
			return *v
		}
		var ret DashboardWordCloudVisual
		return ret
	}).(DashboardWordCloudVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o DashboardWordCloudVisualPtrOutput) Actions() DashboardVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) []DashboardVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(DashboardVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o DashboardWordCloudVisualPtrOutput) ChartConfiguration() DashboardWordCloudChartConfigurationPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) *DashboardWordCloudChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(DashboardWordCloudChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o DashboardWordCloudVisualPtrOutput) ColumnHierarchies() DashboardColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) []DashboardColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(DashboardColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o DashboardWordCloudVisualPtrOutput) Subtitle() DashboardVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) *DashboardVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(DashboardVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o DashboardWordCloudVisualPtrOutput) Title() DashboardVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) *DashboardVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(DashboardVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o DashboardWordCloudVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o DashboardWordCloudVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardWordCloudVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type DashboardYAxisOptions struct {
	// The Y axis type to be used in the chart.
	//
	// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
	YAxis DashboardSingleYAxisOption `pulumi:"yAxis"`
}

// DashboardYAxisOptionsInput is an input type that accepts DashboardYAxisOptionsArgs and DashboardYAxisOptionsOutput values.
// You can construct a concrete instance of `DashboardYAxisOptionsInput` via:
//
//	DashboardYAxisOptionsArgs{...}
type DashboardYAxisOptionsInput interface {
	pulumi.Input

	ToDashboardYAxisOptionsOutput() DashboardYAxisOptionsOutput
	ToDashboardYAxisOptionsOutputWithContext(context.Context) DashboardYAxisOptionsOutput
}

type DashboardYAxisOptionsArgs struct {
	// The Y axis type to be used in the chart.
	//
	// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
	YAxis DashboardSingleYAxisOptionInput `pulumi:"yAxis"`
}

func (DashboardYAxisOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardYAxisOptions)(nil)).Elem()
}

func (i DashboardYAxisOptionsArgs) ToDashboardYAxisOptionsOutput() DashboardYAxisOptionsOutput {
	return i.ToDashboardYAxisOptionsOutputWithContext(context.Background())
}

func (i DashboardYAxisOptionsArgs) ToDashboardYAxisOptionsOutputWithContext(ctx context.Context) DashboardYAxisOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardYAxisOptionsOutput)
}

func (i DashboardYAxisOptionsArgs) ToDashboardYAxisOptionsPtrOutput() DashboardYAxisOptionsPtrOutput {
	return i.ToDashboardYAxisOptionsPtrOutputWithContext(context.Background())
}

func (i DashboardYAxisOptionsArgs) ToDashboardYAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardYAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardYAxisOptionsOutput).ToDashboardYAxisOptionsPtrOutputWithContext(ctx)
}

// DashboardYAxisOptionsPtrInput is an input type that accepts DashboardYAxisOptionsArgs, DashboardYAxisOptionsPtr and DashboardYAxisOptionsPtrOutput values.
// You can construct a concrete instance of `DashboardYAxisOptionsPtrInput` via:
//
//	        DashboardYAxisOptionsArgs{...}
//
//	or:
//
//	        nil
type DashboardYAxisOptionsPtrInput interface {
	pulumi.Input

	ToDashboardYAxisOptionsPtrOutput() DashboardYAxisOptionsPtrOutput
	ToDashboardYAxisOptionsPtrOutputWithContext(context.Context) DashboardYAxisOptionsPtrOutput
}

type dashboardYAxisOptionsPtrType DashboardYAxisOptionsArgs

func DashboardYAxisOptionsPtr(v *DashboardYAxisOptionsArgs) DashboardYAxisOptionsPtrInput {
	return (*dashboardYAxisOptionsPtrType)(v)
}

func (*dashboardYAxisOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardYAxisOptions)(nil)).Elem()
}

func (i *dashboardYAxisOptionsPtrType) ToDashboardYAxisOptionsPtrOutput() DashboardYAxisOptionsPtrOutput {
	return i.ToDashboardYAxisOptionsPtrOutputWithContext(context.Background())
}

func (i *dashboardYAxisOptionsPtrType) ToDashboardYAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardYAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardYAxisOptionsPtrOutput)
}

type DashboardYAxisOptionsOutput struct{ *pulumi.OutputState }

func (DashboardYAxisOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardYAxisOptions)(nil)).Elem()
}

func (o DashboardYAxisOptionsOutput) ToDashboardYAxisOptionsOutput() DashboardYAxisOptionsOutput {
	return o
}

func (o DashboardYAxisOptionsOutput) ToDashboardYAxisOptionsOutputWithContext(ctx context.Context) DashboardYAxisOptionsOutput {
	return o
}

func (o DashboardYAxisOptionsOutput) ToDashboardYAxisOptionsPtrOutput() DashboardYAxisOptionsPtrOutput {
	return o.ToDashboardYAxisOptionsPtrOutputWithContext(context.Background())
}

func (o DashboardYAxisOptionsOutput) ToDashboardYAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardYAxisOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardYAxisOptions) *DashboardYAxisOptions {
		return &v
	}).(DashboardYAxisOptionsPtrOutput)
}

// The Y axis type to be used in the chart.
//
// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
func (o DashboardYAxisOptionsOutput) YAxis() DashboardSingleYAxisOptionOutput {
	return o.ApplyT(func(v DashboardYAxisOptions) DashboardSingleYAxisOption { return v.YAxis }).(DashboardSingleYAxisOptionOutput)
}

type DashboardYAxisOptionsPtrOutput struct{ *pulumi.OutputState }

func (DashboardYAxisOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardYAxisOptions)(nil)).Elem()
}

func (o DashboardYAxisOptionsPtrOutput) ToDashboardYAxisOptionsPtrOutput() DashboardYAxisOptionsPtrOutput {
	return o
}

func (o DashboardYAxisOptionsPtrOutput) ToDashboardYAxisOptionsPtrOutputWithContext(ctx context.Context) DashboardYAxisOptionsPtrOutput {
	return o
}

func (o DashboardYAxisOptionsPtrOutput) Elem() DashboardYAxisOptionsOutput {
	return o.ApplyT(func(v *DashboardYAxisOptions) DashboardYAxisOptions {
		if v != nil {
			return *v
		}
		var ret DashboardYAxisOptions
		return ret
	}).(DashboardYAxisOptionsOutput)
}

// The Y axis type to be used in the chart.
//
// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
func (o DashboardYAxisOptionsPtrOutput) YAxis() DashboardSingleYAxisOptionPtrOutput {
	return o.ApplyT(func(v *DashboardYAxisOptions) *DashboardSingleYAxisOption {
		if v == nil {
			return nil
		}
		return &v.YAxis
	}).(DashboardSingleYAxisOptionPtrOutput)
}

// <p>A calculated column for a dataset.</p>
type DataSetCalculatedColumn struct {
	// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID
	//             of a calculated column matches that of an existing calculated column, Amazon QuickSight
	//             preserves the existing calculated column.</p>
	ColumnId string `pulumi:"columnId"`
	// <p>Column name.</p>
	ColumnName string `pulumi:"columnName"`
	// <p>An expression that defines the calculated column.</p>
	Expression string `pulumi:"expression"`
}

// DataSetCalculatedColumnInput is an input type that accepts DataSetCalculatedColumnArgs and DataSetCalculatedColumnOutput values.
// You can construct a concrete instance of `DataSetCalculatedColumnInput` via:
//
//	DataSetCalculatedColumnArgs{...}
type DataSetCalculatedColumnInput interface {
	pulumi.Input

	ToDataSetCalculatedColumnOutput() DataSetCalculatedColumnOutput
	ToDataSetCalculatedColumnOutputWithContext(context.Context) DataSetCalculatedColumnOutput
}

// <p>A calculated column for a dataset.</p>
type DataSetCalculatedColumnArgs struct {
	// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID
	//             of a calculated column matches that of an existing calculated column, Amazon QuickSight
	//             preserves the existing calculated column.</p>
	ColumnId pulumi.StringInput `pulumi:"columnId"`
	// <p>Column name.</p>
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// <p>An expression that defines the calculated column.</p>
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (DataSetCalculatedColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCalculatedColumn)(nil)).Elem()
}

func (i DataSetCalculatedColumnArgs) ToDataSetCalculatedColumnOutput() DataSetCalculatedColumnOutput {
	return i.ToDataSetCalculatedColumnOutputWithContext(context.Background())
}

func (i DataSetCalculatedColumnArgs) ToDataSetCalculatedColumnOutputWithContext(ctx context.Context) DataSetCalculatedColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCalculatedColumnOutput)
}

// DataSetCalculatedColumnArrayInput is an input type that accepts DataSetCalculatedColumnArray and DataSetCalculatedColumnArrayOutput values.
// You can construct a concrete instance of `DataSetCalculatedColumnArrayInput` via:
//
//	DataSetCalculatedColumnArray{ DataSetCalculatedColumnArgs{...} }
type DataSetCalculatedColumnArrayInput interface {
	pulumi.Input

	ToDataSetCalculatedColumnArrayOutput() DataSetCalculatedColumnArrayOutput
	ToDataSetCalculatedColumnArrayOutputWithContext(context.Context) DataSetCalculatedColumnArrayOutput
}

type DataSetCalculatedColumnArray []DataSetCalculatedColumnInput

func (DataSetCalculatedColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetCalculatedColumn)(nil)).Elem()
}

func (i DataSetCalculatedColumnArray) ToDataSetCalculatedColumnArrayOutput() DataSetCalculatedColumnArrayOutput {
	return i.ToDataSetCalculatedColumnArrayOutputWithContext(context.Background())
}

func (i DataSetCalculatedColumnArray) ToDataSetCalculatedColumnArrayOutputWithContext(ctx context.Context) DataSetCalculatedColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCalculatedColumnArrayOutput)
}

// <p>A calculated column for a dataset.</p>
type DataSetCalculatedColumnOutput struct{ *pulumi.OutputState }

func (DataSetCalculatedColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCalculatedColumn)(nil)).Elem()
}

func (o DataSetCalculatedColumnOutput) ToDataSetCalculatedColumnOutput() DataSetCalculatedColumnOutput {
	return o
}

func (o DataSetCalculatedColumnOutput) ToDataSetCalculatedColumnOutputWithContext(ctx context.Context) DataSetCalculatedColumnOutput {
	return o
}

// <p>A unique ID to identify a calculated column. During a dataset update, if the column ID
//
//	of a calculated column matches that of an existing calculated column, Amazon QuickSight
//	preserves the existing calculated column.</p>
func (o DataSetCalculatedColumnOutput) ColumnId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetCalculatedColumn) string { return v.ColumnId }).(pulumi.StringOutput)
}

// <p>Column name.</p>
func (o DataSetCalculatedColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetCalculatedColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

// <p>An expression that defines the calculated column.</p>
func (o DataSetCalculatedColumnOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetCalculatedColumn) string { return v.Expression }).(pulumi.StringOutput)
}

type DataSetCalculatedColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetCalculatedColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetCalculatedColumn)(nil)).Elem()
}

func (o DataSetCalculatedColumnArrayOutput) ToDataSetCalculatedColumnArrayOutput() DataSetCalculatedColumnArrayOutput {
	return o
}

func (o DataSetCalculatedColumnArrayOutput) ToDataSetCalculatedColumnArrayOutputWithContext(ctx context.Context) DataSetCalculatedColumnArrayOutput {
	return o
}

func (o DataSetCalculatedColumnArrayOutput) Index(i pulumi.IntInput) DataSetCalculatedColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetCalculatedColumn {
		return vs[0].([]DataSetCalculatedColumn)[vs[1].(int)]
	}).(DataSetCalculatedColumnOutput)
}

// <p>A transform operation that casts a column to a different type.</p>
type DataSetCastColumnTypeOperation struct {
	// <p>Column name.</p>
	ColumnName string `pulumi:"columnName"`
	// <p>When casting a column from string to datetime type, you can supply a string in a
	//             format supported by Amazon QuickSight to denote the source data format.</p>
	Format *string `pulumi:"format"`
	// New column data type.
	NewColumnType DataSetColumnDataType `pulumi:"newColumnType"`
	// The sub data type of the new column. Sub types are only available for decimal columns that are part of a SPICE dataset.
	SubType *DataSetColumnDataSubType `pulumi:"subType"`
}

// DataSetCastColumnTypeOperationInput is an input type that accepts DataSetCastColumnTypeOperationArgs and DataSetCastColumnTypeOperationOutput values.
// You can construct a concrete instance of `DataSetCastColumnTypeOperationInput` via:
//
//	DataSetCastColumnTypeOperationArgs{...}
type DataSetCastColumnTypeOperationInput interface {
	pulumi.Input

	ToDataSetCastColumnTypeOperationOutput() DataSetCastColumnTypeOperationOutput
	ToDataSetCastColumnTypeOperationOutputWithContext(context.Context) DataSetCastColumnTypeOperationOutput
}

// <p>A transform operation that casts a column to a different type.</p>
type DataSetCastColumnTypeOperationArgs struct {
	// <p>Column name.</p>
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// <p>When casting a column from string to datetime type, you can supply a string in a
	//             format supported by Amazon QuickSight to denote the source data format.</p>
	Format pulumi.StringPtrInput `pulumi:"format"`
	// New column data type.
	NewColumnType DataSetColumnDataTypeInput `pulumi:"newColumnType"`
	// The sub data type of the new column. Sub types are only available for decimal columns that are part of a SPICE dataset.
	SubType DataSetColumnDataSubTypePtrInput `pulumi:"subType"`
}

func (DataSetCastColumnTypeOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCastColumnTypeOperation)(nil)).Elem()
}

func (i DataSetCastColumnTypeOperationArgs) ToDataSetCastColumnTypeOperationOutput() DataSetCastColumnTypeOperationOutput {
	return i.ToDataSetCastColumnTypeOperationOutputWithContext(context.Background())
}

func (i DataSetCastColumnTypeOperationArgs) ToDataSetCastColumnTypeOperationOutputWithContext(ctx context.Context) DataSetCastColumnTypeOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCastColumnTypeOperationOutput)
}

func (i DataSetCastColumnTypeOperationArgs) ToDataSetCastColumnTypeOperationPtrOutput() DataSetCastColumnTypeOperationPtrOutput {
	return i.ToDataSetCastColumnTypeOperationPtrOutputWithContext(context.Background())
}

func (i DataSetCastColumnTypeOperationArgs) ToDataSetCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetCastColumnTypeOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCastColumnTypeOperationOutput).ToDataSetCastColumnTypeOperationPtrOutputWithContext(ctx)
}

// DataSetCastColumnTypeOperationPtrInput is an input type that accepts DataSetCastColumnTypeOperationArgs, DataSetCastColumnTypeOperationPtr and DataSetCastColumnTypeOperationPtrOutput values.
// You can construct a concrete instance of `DataSetCastColumnTypeOperationPtrInput` via:
//
//	        DataSetCastColumnTypeOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetCastColumnTypeOperationPtrInput interface {
	pulumi.Input

	ToDataSetCastColumnTypeOperationPtrOutput() DataSetCastColumnTypeOperationPtrOutput
	ToDataSetCastColumnTypeOperationPtrOutputWithContext(context.Context) DataSetCastColumnTypeOperationPtrOutput
}

type dataSetCastColumnTypeOperationPtrType DataSetCastColumnTypeOperationArgs

func DataSetCastColumnTypeOperationPtr(v *DataSetCastColumnTypeOperationArgs) DataSetCastColumnTypeOperationPtrInput {
	return (*dataSetCastColumnTypeOperationPtrType)(v)
}

func (*dataSetCastColumnTypeOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetCastColumnTypeOperation)(nil)).Elem()
}

func (i *dataSetCastColumnTypeOperationPtrType) ToDataSetCastColumnTypeOperationPtrOutput() DataSetCastColumnTypeOperationPtrOutput {
	return i.ToDataSetCastColumnTypeOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetCastColumnTypeOperationPtrType) ToDataSetCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetCastColumnTypeOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCastColumnTypeOperationPtrOutput)
}

// <p>A transform operation that casts a column to a different type.</p>
type DataSetCastColumnTypeOperationOutput struct{ *pulumi.OutputState }

func (DataSetCastColumnTypeOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCastColumnTypeOperation)(nil)).Elem()
}

func (o DataSetCastColumnTypeOperationOutput) ToDataSetCastColumnTypeOperationOutput() DataSetCastColumnTypeOperationOutput {
	return o
}

func (o DataSetCastColumnTypeOperationOutput) ToDataSetCastColumnTypeOperationOutputWithContext(ctx context.Context) DataSetCastColumnTypeOperationOutput {
	return o
}

func (o DataSetCastColumnTypeOperationOutput) ToDataSetCastColumnTypeOperationPtrOutput() DataSetCastColumnTypeOperationPtrOutput {
	return o.ToDataSetCastColumnTypeOperationPtrOutputWithContext(context.Background())
}

func (o DataSetCastColumnTypeOperationOutput) ToDataSetCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetCastColumnTypeOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetCastColumnTypeOperation) *DataSetCastColumnTypeOperation {
		return &v
	}).(DataSetCastColumnTypeOperationPtrOutput)
}

// <p>Column name.</p>
func (o DataSetCastColumnTypeOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetCastColumnTypeOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// <p>When casting a column from string to datetime type, you can supply a string in a
//
//	format supported by Amazon QuickSight to denote the source data format.</p>
func (o DataSetCastColumnTypeOperationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetCastColumnTypeOperation) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// New column data type.
func (o DataSetCastColumnTypeOperationOutput) NewColumnType() DataSetColumnDataTypeOutput {
	return o.ApplyT(func(v DataSetCastColumnTypeOperation) DataSetColumnDataType { return v.NewColumnType }).(DataSetColumnDataTypeOutput)
}

// The sub data type of the new column. Sub types are only available for decimal columns that are part of a SPICE dataset.
func (o DataSetCastColumnTypeOperationOutput) SubType() DataSetColumnDataSubTypePtrOutput {
	return o.ApplyT(func(v DataSetCastColumnTypeOperation) *DataSetColumnDataSubType { return v.SubType }).(DataSetColumnDataSubTypePtrOutput)
}

type DataSetCastColumnTypeOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetCastColumnTypeOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetCastColumnTypeOperation)(nil)).Elem()
}

func (o DataSetCastColumnTypeOperationPtrOutput) ToDataSetCastColumnTypeOperationPtrOutput() DataSetCastColumnTypeOperationPtrOutput {
	return o
}

func (o DataSetCastColumnTypeOperationPtrOutput) ToDataSetCastColumnTypeOperationPtrOutputWithContext(ctx context.Context) DataSetCastColumnTypeOperationPtrOutput {
	return o
}

func (o DataSetCastColumnTypeOperationPtrOutput) Elem() DataSetCastColumnTypeOperationOutput {
	return o.ApplyT(func(v *DataSetCastColumnTypeOperation) DataSetCastColumnTypeOperation {
		if v != nil {
			return *v
		}
		var ret DataSetCastColumnTypeOperation
		return ret
	}).(DataSetCastColumnTypeOperationOutput)
}

// <p>Column name.</p>
func (o DataSetCastColumnTypeOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetCastColumnTypeOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// <p>When casting a column from string to datetime type, you can supply a string in a
//
//	format supported by Amazon QuickSight to denote the source data format.</p>
func (o DataSetCastColumnTypeOperationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetCastColumnTypeOperation) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// New column data type.
func (o DataSetCastColumnTypeOperationPtrOutput) NewColumnType() DataSetColumnDataTypePtrOutput {
	return o.ApplyT(func(v *DataSetCastColumnTypeOperation) *DataSetColumnDataType {
		if v == nil {
			return nil
		}
		return &v.NewColumnType
	}).(DataSetColumnDataTypePtrOutput)
}

// The sub data type of the new column. Sub types are only available for decimal columns that are part of a SPICE dataset.
func (o DataSetCastColumnTypeOperationPtrOutput) SubType() DataSetColumnDataSubTypePtrOutput {
	return o.ApplyT(func(v *DataSetCastColumnTypeOperation) *DataSetColumnDataSubType {
		if v == nil {
			return nil
		}
		return v.SubType
	}).(DataSetColumnDataSubTypePtrOutput)
}

// <p>Metadata that contains a description for a column.</p>
type DataSetColumnDescription struct {
	// <p>The text of a description for a column.</p>
	Text *string `pulumi:"text"`
}

// DataSetColumnDescriptionInput is an input type that accepts DataSetColumnDescriptionArgs and DataSetColumnDescriptionOutput values.
// You can construct a concrete instance of `DataSetColumnDescriptionInput` via:
//
//	DataSetColumnDescriptionArgs{...}
type DataSetColumnDescriptionInput interface {
	pulumi.Input

	ToDataSetColumnDescriptionOutput() DataSetColumnDescriptionOutput
	ToDataSetColumnDescriptionOutputWithContext(context.Context) DataSetColumnDescriptionOutput
}

// <p>Metadata that contains a description for a column.</p>
type DataSetColumnDescriptionArgs struct {
	// <p>The text of a description for a column.</p>
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (DataSetColumnDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnDescription)(nil)).Elem()
}

func (i DataSetColumnDescriptionArgs) ToDataSetColumnDescriptionOutput() DataSetColumnDescriptionOutput {
	return i.ToDataSetColumnDescriptionOutputWithContext(context.Background())
}

func (i DataSetColumnDescriptionArgs) ToDataSetColumnDescriptionOutputWithContext(ctx context.Context) DataSetColumnDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnDescriptionOutput)
}

func (i DataSetColumnDescriptionArgs) ToDataSetColumnDescriptionPtrOutput() DataSetColumnDescriptionPtrOutput {
	return i.ToDataSetColumnDescriptionPtrOutputWithContext(context.Background())
}

func (i DataSetColumnDescriptionArgs) ToDataSetColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetColumnDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnDescriptionOutput).ToDataSetColumnDescriptionPtrOutputWithContext(ctx)
}

// DataSetColumnDescriptionPtrInput is an input type that accepts DataSetColumnDescriptionArgs, DataSetColumnDescriptionPtr and DataSetColumnDescriptionPtrOutput values.
// You can construct a concrete instance of `DataSetColumnDescriptionPtrInput` via:
//
//	        DataSetColumnDescriptionArgs{...}
//
//	or:
//
//	        nil
type DataSetColumnDescriptionPtrInput interface {
	pulumi.Input

	ToDataSetColumnDescriptionPtrOutput() DataSetColumnDescriptionPtrOutput
	ToDataSetColumnDescriptionPtrOutputWithContext(context.Context) DataSetColumnDescriptionPtrOutput
}

type dataSetColumnDescriptionPtrType DataSetColumnDescriptionArgs

func DataSetColumnDescriptionPtr(v *DataSetColumnDescriptionArgs) DataSetColumnDescriptionPtrInput {
	return (*dataSetColumnDescriptionPtrType)(v)
}

func (*dataSetColumnDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetColumnDescription)(nil)).Elem()
}

func (i *dataSetColumnDescriptionPtrType) ToDataSetColumnDescriptionPtrOutput() DataSetColumnDescriptionPtrOutput {
	return i.ToDataSetColumnDescriptionPtrOutputWithContext(context.Background())
}

func (i *dataSetColumnDescriptionPtrType) ToDataSetColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetColumnDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnDescriptionPtrOutput)
}

// <p>Metadata that contains a description for a column.</p>
type DataSetColumnDescriptionOutput struct{ *pulumi.OutputState }

func (DataSetColumnDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnDescription)(nil)).Elem()
}

func (o DataSetColumnDescriptionOutput) ToDataSetColumnDescriptionOutput() DataSetColumnDescriptionOutput {
	return o
}

func (o DataSetColumnDescriptionOutput) ToDataSetColumnDescriptionOutputWithContext(ctx context.Context) DataSetColumnDescriptionOutput {
	return o
}

func (o DataSetColumnDescriptionOutput) ToDataSetColumnDescriptionPtrOutput() DataSetColumnDescriptionPtrOutput {
	return o.ToDataSetColumnDescriptionPtrOutputWithContext(context.Background())
}

func (o DataSetColumnDescriptionOutput) ToDataSetColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetColumnDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetColumnDescription) *DataSetColumnDescription {
		return &v
	}).(DataSetColumnDescriptionPtrOutput)
}

// <p>The text of a description for a column.</p>
func (o DataSetColumnDescriptionOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetColumnDescription) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type DataSetColumnDescriptionPtrOutput struct{ *pulumi.OutputState }

func (DataSetColumnDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetColumnDescription)(nil)).Elem()
}

func (o DataSetColumnDescriptionPtrOutput) ToDataSetColumnDescriptionPtrOutput() DataSetColumnDescriptionPtrOutput {
	return o
}

func (o DataSetColumnDescriptionPtrOutput) ToDataSetColumnDescriptionPtrOutputWithContext(ctx context.Context) DataSetColumnDescriptionPtrOutput {
	return o
}

func (o DataSetColumnDescriptionPtrOutput) Elem() DataSetColumnDescriptionOutput {
	return o.ApplyT(func(v *DataSetColumnDescription) DataSetColumnDescription {
		if v != nil {
			return *v
		}
		var ret DataSetColumnDescription
		return ret
	}).(DataSetColumnDescriptionOutput)
}

// <p>The text of a description for a column.</p>
func (o DataSetColumnDescriptionPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetColumnDescription) *string {
		if v == nil {
			return nil
		}
		return v.Text
	}).(pulumi.StringPtrOutput)
}

// <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
//
//	a variant type structure. For this structure to be valid, only one of the attributes can
//	be non-null.</p>
type DataSetColumnGroup struct {
	// Geospatial column group that denotes a hierarchy.
	GeoSpatialColumnGroup *DataSetGeoSpatialColumnGroup `pulumi:"geoSpatialColumnGroup"`
}

// DataSetColumnGroupInput is an input type that accepts DataSetColumnGroupArgs and DataSetColumnGroupOutput values.
// You can construct a concrete instance of `DataSetColumnGroupInput` via:
//
//	DataSetColumnGroupArgs{...}
type DataSetColumnGroupInput interface {
	pulumi.Input

	ToDataSetColumnGroupOutput() DataSetColumnGroupOutput
	ToDataSetColumnGroupOutputWithContext(context.Context) DataSetColumnGroupOutput
}

// <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
//
//	a variant type structure. For this structure to be valid, only one of the attributes can
//	be non-null.</p>
type DataSetColumnGroupArgs struct {
	// Geospatial column group that denotes a hierarchy.
	GeoSpatialColumnGroup DataSetGeoSpatialColumnGroupPtrInput `pulumi:"geoSpatialColumnGroup"`
}

func (DataSetColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return i.ToDataSetColumnGroupOutputWithContext(context.Background())
}

func (i DataSetColumnGroupArgs) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupOutput)
}

// DataSetColumnGroupArrayInput is an input type that accepts DataSetColumnGroupArray and DataSetColumnGroupArrayOutput values.
// You can construct a concrete instance of `DataSetColumnGroupArrayInput` via:
//
//	DataSetColumnGroupArray{ DataSetColumnGroupArgs{...} }
type DataSetColumnGroupArrayInput interface {
	pulumi.Input

	ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput
	ToDataSetColumnGroupArrayOutputWithContext(context.Context) DataSetColumnGroupArrayOutput
}

type DataSetColumnGroupArray []DataSetColumnGroupInput

func (DataSetColumnGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnGroup)(nil)).Elem()
}

func (i DataSetColumnGroupArray) ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput {
	return i.ToDataSetColumnGroupArrayOutputWithContext(context.Background())
}

func (i DataSetColumnGroupArray) ToDataSetColumnGroupArrayOutputWithContext(ctx context.Context) DataSetColumnGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnGroupArrayOutput)
}

// <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
//
//	a variant type structure. For this structure to be valid, only one of the attributes can
//	be non-null.</p>
type DataSetColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutput() DataSetColumnGroupOutput {
	return o
}

func (o DataSetColumnGroupOutput) ToDataSetColumnGroupOutputWithContext(ctx context.Context) DataSetColumnGroupOutput {
	return o
}

// Geospatial column group that denotes a hierarchy.
func (o DataSetColumnGroupOutput) GeoSpatialColumnGroup() DataSetGeoSpatialColumnGroupPtrOutput {
	return o.ApplyT(func(v DataSetColumnGroup) *DataSetGeoSpatialColumnGroup { return v.GeoSpatialColumnGroup }).(DataSetGeoSpatialColumnGroupPtrOutput)
}

type DataSetColumnGroupArrayOutput struct{ *pulumi.OutputState }

func (DataSetColumnGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnGroup)(nil)).Elem()
}

func (o DataSetColumnGroupArrayOutput) ToDataSetColumnGroupArrayOutput() DataSetColumnGroupArrayOutput {
	return o
}

func (o DataSetColumnGroupArrayOutput) ToDataSetColumnGroupArrayOutputWithContext(ctx context.Context) DataSetColumnGroupArrayOutput {
	return o
}

func (o DataSetColumnGroupArrayOutput) Index(i pulumi.IntInput) DataSetColumnGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetColumnGroup {
		return vs[0].([]DataSetColumnGroup)[vs[1].(int)]
	}).(DataSetColumnGroupOutput)
}

// <p>A rule defined to grant access on one or more restricted columns.
//
//	Each dataset can have multiple rules.
//	To create a restricted column, you add it to one or more rules.
//	Each rule must contain at least one column and at least one user or group.
//	To be able to see a restricted column, a user or group needs to be added
//	to a rule for that column.</p>
type DataSetColumnLevelPermissionRule struct {
	// <p>An array of column names.</p>
	ColumnNames []string `pulumi:"columnNames"`
	// <p>An array of Amazon Resource Names (ARNs) for Amazon QuickSight users or groups.</p>
	Principals []string `pulumi:"principals"`
}

// DataSetColumnLevelPermissionRuleInput is an input type that accepts DataSetColumnLevelPermissionRuleArgs and DataSetColumnLevelPermissionRuleOutput values.
// You can construct a concrete instance of `DataSetColumnLevelPermissionRuleInput` via:
//
//	DataSetColumnLevelPermissionRuleArgs{...}
type DataSetColumnLevelPermissionRuleInput interface {
	pulumi.Input

	ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput
	ToDataSetColumnLevelPermissionRuleOutputWithContext(context.Context) DataSetColumnLevelPermissionRuleOutput
}

// <p>A rule defined to grant access on one or more restricted columns.
//
//	Each dataset can have multiple rules.
//	To create a restricted column, you add it to one or more rules.
//	Each rule must contain at least one column and at least one user or group.
//	To be able to see a restricted column, a user or group needs to be added
//	to a rule for that column.</p>
type DataSetColumnLevelPermissionRuleArgs struct {
	// <p>An array of column names.</p>
	ColumnNames pulumi.StringArrayInput `pulumi:"columnNames"`
	// <p>An array of Amazon Resource Names (ARNs) for Amazon QuickSight users or groups.</p>
	Principals pulumi.StringArrayInput `pulumi:"principals"`
}

func (DataSetColumnLevelPermissionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return i.ToDataSetColumnLevelPermissionRuleOutputWithContext(context.Background())
}

func (i DataSetColumnLevelPermissionRuleArgs) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnLevelPermissionRuleOutput)
}

// DataSetColumnLevelPermissionRuleArrayInput is an input type that accepts DataSetColumnLevelPermissionRuleArray and DataSetColumnLevelPermissionRuleArrayOutput values.
// You can construct a concrete instance of `DataSetColumnLevelPermissionRuleArrayInput` via:
//
//	DataSetColumnLevelPermissionRuleArray{ DataSetColumnLevelPermissionRuleArgs{...} }
type DataSetColumnLevelPermissionRuleArrayInput interface {
	pulumi.Input

	ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput
	ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Context) DataSetColumnLevelPermissionRuleArrayOutput
}

type DataSetColumnLevelPermissionRuleArray []DataSetColumnLevelPermissionRuleInput

func (DataSetColumnLevelPermissionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (i DataSetColumnLevelPermissionRuleArray) ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput {
	return i.ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(context.Background())
}

func (i DataSetColumnLevelPermissionRuleArray) ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnLevelPermissionRuleArrayOutput)
}

// <p>A rule defined to grant access on one or more restricted columns.
//
//	Each dataset can have multiple rules.
//	To create a restricted column, you add it to one or more rules.
//	Each rule must contain at least one column and at least one user or group.
//	To be able to see a restricted column, a user or group needs to be added
//	to a rule for that column.</p>
type DataSetColumnLevelPermissionRuleOutput struct{ *pulumi.OutputState }

func (DataSetColumnLevelPermissionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutput() DataSetColumnLevelPermissionRuleOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleOutput) ToDataSetColumnLevelPermissionRuleOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleOutput {
	return o
}

// <p>An array of column names.</p>
func (o DataSetColumnLevelPermissionRuleOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetColumnLevelPermissionRule) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

// <p>An array of Amazon Resource Names (ARNs) for Amazon QuickSight users or groups.</p>
func (o DataSetColumnLevelPermissionRuleOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetColumnLevelPermissionRule) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type DataSetColumnLevelPermissionRuleArrayOutput struct{ *pulumi.OutputState }

func (DataSetColumnLevelPermissionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnLevelPermissionRule)(nil)).Elem()
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) ToDataSetColumnLevelPermissionRuleArrayOutput() DataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) ToDataSetColumnLevelPermissionRuleArrayOutputWithContext(ctx context.Context) DataSetColumnLevelPermissionRuleArrayOutput {
	return o
}

func (o DataSetColumnLevelPermissionRuleArrayOutput) Index(i pulumi.IntInput) DataSetColumnLevelPermissionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetColumnLevelPermissionRule {
		return vs[0].([]DataSetColumnLevelPermissionRule)[vs[1].(int)]
	}).(DataSetColumnLevelPermissionRuleOutput)
}

// <p>A tag for a column in a
//
//	<code>
//	   <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html">TagColumnOperation</a>
//	</code>
//	structure. This is a
//	variant type structure. For this structure to be valid, only one of the attributes can
//	be non-null.</p>
type DataSetColumnTag struct {
	// A description for a column.
	ColumnDescription *DataSetColumnDescription `pulumi:"columnDescription"`
	// A geospatial role for a column.
	ColumnGeographicRole *DataSetGeoSpatialDataRole `pulumi:"columnGeographicRole"`
}

// DataSetColumnTagInput is an input type that accepts DataSetColumnTagArgs and DataSetColumnTagOutput values.
// You can construct a concrete instance of `DataSetColumnTagInput` via:
//
//	DataSetColumnTagArgs{...}
type DataSetColumnTagInput interface {
	pulumi.Input

	ToDataSetColumnTagOutput() DataSetColumnTagOutput
	ToDataSetColumnTagOutputWithContext(context.Context) DataSetColumnTagOutput
}

// <p>A tag for a column in a
//
//	<code>
//	   <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html">TagColumnOperation</a>
//	</code>
//	structure. This is a
//	variant type structure. For this structure to be valid, only one of the attributes can
//	be non-null.</p>
type DataSetColumnTagArgs struct {
	// A description for a column.
	ColumnDescription DataSetColumnDescriptionPtrInput `pulumi:"columnDescription"`
	// A geospatial role for a column.
	ColumnGeographicRole DataSetGeoSpatialDataRolePtrInput `pulumi:"columnGeographicRole"`
}

func (DataSetColumnTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnTag)(nil)).Elem()
}

func (i DataSetColumnTagArgs) ToDataSetColumnTagOutput() DataSetColumnTagOutput {
	return i.ToDataSetColumnTagOutputWithContext(context.Background())
}

func (i DataSetColumnTagArgs) ToDataSetColumnTagOutputWithContext(ctx context.Context) DataSetColumnTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnTagOutput)
}

// DataSetColumnTagArrayInput is an input type that accepts DataSetColumnTagArray and DataSetColumnTagArrayOutput values.
// You can construct a concrete instance of `DataSetColumnTagArrayInput` via:
//
//	DataSetColumnTagArray{ DataSetColumnTagArgs{...} }
type DataSetColumnTagArrayInput interface {
	pulumi.Input

	ToDataSetColumnTagArrayOutput() DataSetColumnTagArrayOutput
	ToDataSetColumnTagArrayOutputWithContext(context.Context) DataSetColumnTagArrayOutput
}

type DataSetColumnTagArray []DataSetColumnTagInput

func (DataSetColumnTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnTag)(nil)).Elem()
}

func (i DataSetColumnTagArray) ToDataSetColumnTagArrayOutput() DataSetColumnTagArrayOutput {
	return i.ToDataSetColumnTagArrayOutputWithContext(context.Background())
}

func (i DataSetColumnTagArray) ToDataSetColumnTagArrayOutputWithContext(ctx context.Context) DataSetColumnTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetColumnTagArrayOutput)
}

// <p>A tag for a column in a
//
//	<code>
//	   <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html">TagColumnOperation</a>
//	</code>
//	structure. This is a
//	variant type structure. For this structure to be valid, only one of the attributes can
//	be non-null.</p>
type DataSetColumnTagOutput struct{ *pulumi.OutputState }

func (DataSetColumnTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetColumnTag)(nil)).Elem()
}

func (o DataSetColumnTagOutput) ToDataSetColumnTagOutput() DataSetColumnTagOutput {
	return o
}

func (o DataSetColumnTagOutput) ToDataSetColumnTagOutputWithContext(ctx context.Context) DataSetColumnTagOutput {
	return o
}

// A description for a column.
func (o DataSetColumnTagOutput) ColumnDescription() DataSetColumnDescriptionPtrOutput {
	return o.ApplyT(func(v DataSetColumnTag) *DataSetColumnDescription { return v.ColumnDescription }).(DataSetColumnDescriptionPtrOutput)
}

// A geospatial role for a column.
func (o DataSetColumnTagOutput) ColumnGeographicRole() DataSetGeoSpatialDataRolePtrOutput {
	return o.ApplyT(func(v DataSetColumnTag) *DataSetGeoSpatialDataRole { return v.ColumnGeographicRole }).(DataSetGeoSpatialDataRolePtrOutput)
}

type DataSetColumnTagArrayOutput struct{ *pulumi.OutputState }

func (DataSetColumnTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetColumnTag)(nil)).Elem()
}

func (o DataSetColumnTagArrayOutput) ToDataSetColumnTagArrayOutput() DataSetColumnTagArrayOutput {
	return o
}

func (o DataSetColumnTagArrayOutput) ToDataSetColumnTagArrayOutputWithContext(ctx context.Context) DataSetColumnTagArrayOutput {
	return o
}

func (o DataSetColumnTagArrayOutput) Index(i pulumi.IntInput) DataSetColumnTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetColumnTag {
		return vs[0].([]DataSetColumnTag)[vs[1].(int)]
	}).(DataSetColumnTagOutput)
}

// <p>A transform operation that creates calculated columns. Columns created in one such
//
//	operation form a lexical closure.</p>
type DataSetCreateColumnsOperation struct {
	// <p>Calculated columns to create.</p>
	Columns []DataSetCalculatedColumn `pulumi:"columns"`
}

// DataSetCreateColumnsOperationInput is an input type that accepts DataSetCreateColumnsOperationArgs and DataSetCreateColumnsOperationOutput values.
// You can construct a concrete instance of `DataSetCreateColumnsOperationInput` via:
//
//	DataSetCreateColumnsOperationArgs{...}
type DataSetCreateColumnsOperationInput interface {
	pulumi.Input

	ToDataSetCreateColumnsOperationOutput() DataSetCreateColumnsOperationOutput
	ToDataSetCreateColumnsOperationOutputWithContext(context.Context) DataSetCreateColumnsOperationOutput
}

// <p>A transform operation that creates calculated columns. Columns created in one such
//
//	operation form a lexical closure.</p>
type DataSetCreateColumnsOperationArgs struct {
	// <p>Calculated columns to create.</p>
	Columns DataSetCalculatedColumnArrayInput `pulumi:"columns"`
}

func (DataSetCreateColumnsOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCreateColumnsOperation)(nil)).Elem()
}

func (i DataSetCreateColumnsOperationArgs) ToDataSetCreateColumnsOperationOutput() DataSetCreateColumnsOperationOutput {
	return i.ToDataSetCreateColumnsOperationOutputWithContext(context.Background())
}

func (i DataSetCreateColumnsOperationArgs) ToDataSetCreateColumnsOperationOutputWithContext(ctx context.Context) DataSetCreateColumnsOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCreateColumnsOperationOutput)
}

func (i DataSetCreateColumnsOperationArgs) ToDataSetCreateColumnsOperationPtrOutput() DataSetCreateColumnsOperationPtrOutput {
	return i.ToDataSetCreateColumnsOperationPtrOutputWithContext(context.Background())
}

func (i DataSetCreateColumnsOperationArgs) ToDataSetCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetCreateColumnsOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCreateColumnsOperationOutput).ToDataSetCreateColumnsOperationPtrOutputWithContext(ctx)
}

// DataSetCreateColumnsOperationPtrInput is an input type that accepts DataSetCreateColumnsOperationArgs, DataSetCreateColumnsOperationPtr and DataSetCreateColumnsOperationPtrOutput values.
// You can construct a concrete instance of `DataSetCreateColumnsOperationPtrInput` via:
//
//	        DataSetCreateColumnsOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetCreateColumnsOperationPtrInput interface {
	pulumi.Input

	ToDataSetCreateColumnsOperationPtrOutput() DataSetCreateColumnsOperationPtrOutput
	ToDataSetCreateColumnsOperationPtrOutputWithContext(context.Context) DataSetCreateColumnsOperationPtrOutput
}

type dataSetCreateColumnsOperationPtrType DataSetCreateColumnsOperationArgs

func DataSetCreateColumnsOperationPtr(v *DataSetCreateColumnsOperationArgs) DataSetCreateColumnsOperationPtrInput {
	return (*dataSetCreateColumnsOperationPtrType)(v)
}

func (*dataSetCreateColumnsOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetCreateColumnsOperation)(nil)).Elem()
}

func (i *dataSetCreateColumnsOperationPtrType) ToDataSetCreateColumnsOperationPtrOutput() DataSetCreateColumnsOperationPtrOutput {
	return i.ToDataSetCreateColumnsOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetCreateColumnsOperationPtrType) ToDataSetCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetCreateColumnsOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCreateColumnsOperationPtrOutput)
}

// <p>A transform operation that creates calculated columns. Columns created in one such
//
//	operation form a lexical closure.</p>
type DataSetCreateColumnsOperationOutput struct{ *pulumi.OutputState }

func (DataSetCreateColumnsOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCreateColumnsOperation)(nil)).Elem()
}

func (o DataSetCreateColumnsOperationOutput) ToDataSetCreateColumnsOperationOutput() DataSetCreateColumnsOperationOutput {
	return o
}

func (o DataSetCreateColumnsOperationOutput) ToDataSetCreateColumnsOperationOutputWithContext(ctx context.Context) DataSetCreateColumnsOperationOutput {
	return o
}

func (o DataSetCreateColumnsOperationOutput) ToDataSetCreateColumnsOperationPtrOutput() DataSetCreateColumnsOperationPtrOutput {
	return o.ToDataSetCreateColumnsOperationPtrOutputWithContext(context.Background())
}

func (o DataSetCreateColumnsOperationOutput) ToDataSetCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetCreateColumnsOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetCreateColumnsOperation) *DataSetCreateColumnsOperation {
		return &v
	}).(DataSetCreateColumnsOperationPtrOutput)
}

// <p>Calculated columns to create.</p>
func (o DataSetCreateColumnsOperationOutput) Columns() DataSetCalculatedColumnArrayOutput {
	return o.ApplyT(func(v DataSetCreateColumnsOperation) []DataSetCalculatedColumn { return v.Columns }).(DataSetCalculatedColumnArrayOutput)
}

type DataSetCreateColumnsOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetCreateColumnsOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetCreateColumnsOperation)(nil)).Elem()
}

func (o DataSetCreateColumnsOperationPtrOutput) ToDataSetCreateColumnsOperationPtrOutput() DataSetCreateColumnsOperationPtrOutput {
	return o
}

func (o DataSetCreateColumnsOperationPtrOutput) ToDataSetCreateColumnsOperationPtrOutputWithContext(ctx context.Context) DataSetCreateColumnsOperationPtrOutput {
	return o
}

func (o DataSetCreateColumnsOperationPtrOutput) Elem() DataSetCreateColumnsOperationOutput {
	return o.ApplyT(func(v *DataSetCreateColumnsOperation) DataSetCreateColumnsOperation {
		if v != nil {
			return *v
		}
		var ret DataSetCreateColumnsOperation
		return ret
	}).(DataSetCreateColumnsOperationOutput)
}

// <p>Calculated columns to create.</p>
func (o DataSetCreateColumnsOperationPtrOutput) Columns() DataSetCalculatedColumnArrayOutput {
	return o.ApplyT(func(v *DataSetCreateColumnsOperation) []DataSetCalculatedColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(DataSetCalculatedColumnArrayOutput)
}

// <p>A physical table type built from the results of the custom SQL query.</p>
type DataSetCustomSql struct {
	// <p>The column schema from the SQL query result set.</p>
	Columns []DataSetInputColumn `pulumi:"columns"`
	// <p>The Amazon Resource Name (ARN) of the data source.</p>
	DataSourceArn string `pulumi:"dataSourceArn"`
	// <p>A display name for the SQL query result.</p>
	Name string `pulumi:"name"`
	// <p>The SQL query.</p>
	SqlQuery string `pulumi:"sqlQuery"`
}

// DataSetCustomSqlInput is an input type that accepts DataSetCustomSqlArgs and DataSetCustomSqlOutput values.
// You can construct a concrete instance of `DataSetCustomSqlInput` via:
//
//	DataSetCustomSqlArgs{...}
type DataSetCustomSqlInput interface {
	pulumi.Input

	ToDataSetCustomSqlOutput() DataSetCustomSqlOutput
	ToDataSetCustomSqlOutputWithContext(context.Context) DataSetCustomSqlOutput
}

// <p>A physical table type built from the results of the custom SQL query.</p>
type DataSetCustomSqlArgs struct {
	// <p>The column schema from the SQL query result set.</p>
	Columns DataSetInputColumnArrayInput `pulumi:"columns"`
	// <p>The Amazon Resource Name (ARN) of the data source.</p>
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// <p>A display name for the SQL query result.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The SQL query.</p>
	SqlQuery pulumi.StringInput `pulumi:"sqlQuery"`
}

func (DataSetCustomSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCustomSql)(nil)).Elem()
}

func (i DataSetCustomSqlArgs) ToDataSetCustomSqlOutput() DataSetCustomSqlOutput {
	return i.ToDataSetCustomSqlOutputWithContext(context.Background())
}

func (i DataSetCustomSqlArgs) ToDataSetCustomSqlOutputWithContext(ctx context.Context) DataSetCustomSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCustomSqlOutput)
}

func (i DataSetCustomSqlArgs) ToDataSetCustomSqlPtrOutput() DataSetCustomSqlPtrOutput {
	return i.ToDataSetCustomSqlPtrOutputWithContext(context.Background())
}

func (i DataSetCustomSqlArgs) ToDataSetCustomSqlPtrOutputWithContext(ctx context.Context) DataSetCustomSqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCustomSqlOutput).ToDataSetCustomSqlPtrOutputWithContext(ctx)
}

// DataSetCustomSqlPtrInput is an input type that accepts DataSetCustomSqlArgs, DataSetCustomSqlPtr and DataSetCustomSqlPtrOutput values.
// You can construct a concrete instance of `DataSetCustomSqlPtrInput` via:
//
//	        DataSetCustomSqlArgs{...}
//
//	or:
//
//	        nil
type DataSetCustomSqlPtrInput interface {
	pulumi.Input

	ToDataSetCustomSqlPtrOutput() DataSetCustomSqlPtrOutput
	ToDataSetCustomSqlPtrOutputWithContext(context.Context) DataSetCustomSqlPtrOutput
}

type dataSetCustomSqlPtrType DataSetCustomSqlArgs

func DataSetCustomSqlPtr(v *DataSetCustomSqlArgs) DataSetCustomSqlPtrInput {
	return (*dataSetCustomSqlPtrType)(v)
}

func (*dataSetCustomSqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetCustomSql)(nil)).Elem()
}

func (i *dataSetCustomSqlPtrType) ToDataSetCustomSqlPtrOutput() DataSetCustomSqlPtrOutput {
	return i.ToDataSetCustomSqlPtrOutputWithContext(context.Background())
}

func (i *dataSetCustomSqlPtrType) ToDataSetCustomSqlPtrOutputWithContext(ctx context.Context) DataSetCustomSqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetCustomSqlPtrOutput)
}

// <p>A physical table type built from the results of the custom SQL query.</p>
type DataSetCustomSqlOutput struct{ *pulumi.OutputState }

func (DataSetCustomSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetCustomSql)(nil)).Elem()
}

func (o DataSetCustomSqlOutput) ToDataSetCustomSqlOutput() DataSetCustomSqlOutput {
	return o
}

func (o DataSetCustomSqlOutput) ToDataSetCustomSqlOutputWithContext(ctx context.Context) DataSetCustomSqlOutput {
	return o
}

func (o DataSetCustomSqlOutput) ToDataSetCustomSqlPtrOutput() DataSetCustomSqlPtrOutput {
	return o.ToDataSetCustomSqlPtrOutputWithContext(context.Background())
}

func (o DataSetCustomSqlOutput) ToDataSetCustomSqlPtrOutputWithContext(ctx context.Context) DataSetCustomSqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetCustomSql) *DataSetCustomSql {
		return &v
	}).(DataSetCustomSqlPtrOutput)
}

// <p>The column schema from the SQL query result set.</p>
func (o DataSetCustomSqlOutput) Columns() DataSetInputColumnArrayOutput {
	return o.ApplyT(func(v DataSetCustomSql) []DataSetInputColumn { return v.Columns }).(DataSetInputColumnArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the data source.</p>
func (o DataSetCustomSqlOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetCustomSql) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

// <p>A display name for the SQL query result.</p>
func (o DataSetCustomSqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetCustomSql) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The SQL query.</p>
func (o DataSetCustomSqlOutput) SqlQuery() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetCustomSql) string { return v.SqlQuery }).(pulumi.StringOutput)
}

type DataSetCustomSqlPtrOutput struct{ *pulumi.OutputState }

func (DataSetCustomSqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetCustomSql)(nil)).Elem()
}

func (o DataSetCustomSqlPtrOutput) ToDataSetCustomSqlPtrOutput() DataSetCustomSqlPtrOutput {
	return o
}

func (o DataSetCustomSqlPtrOutput) ToDataSetCustomSqlPtrOutputWithContext(ctx context.Context) DataSetCustomSqlPtrOutput {
	return o
}

func (o DataSetCustomSqlPtrOutput) Elem() DataSetCustomSqlOutput {
	return o.ApplyT(func(v *DataSetCustomSql) DataSetCustomSql {
		if v != nil {
			return *v
		}
		var ret DataSetCustomSql
		return ret
	}).(DataSetCustomSqlOutput)
}

// <p>The column schema from the SQL query result set.</p>
func (o DataSetCustomSqlPtrOutput) Columns() DataSetInputColumnArrayOutput {
	return o.ApplyT(func(v *DataSetCustomSql) []DataSetInputColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(DataSetInputColumnArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the data source.</p>
func (o DataSetCustomSqlPtrOutput) DataSourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetCustomSql) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceArn
	}).(pulumi.StringPtrOutput)
}

// <p>A display name for the SQL query result.</p>
func (o DataSetCustomSqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetCustomSql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// <p>The SQL query.</p>
func (o DataSetCustomSqlPtrOutput) SqlQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetCustomSql) *string {
		if v == nil {
			return nil
		}
		return &v.SqlQuery
	}).(pulumi.StringPtrOutput)
}

// <p>A dataset parameter.</p>
type DataSetDatasetParameter struct {
	// A date time parameter that is created in the dataset.
	DateTimeDatasetParameter *DataSetDateTimeDatasetParameter `pulumi:"dateTimeDatasetParameter"`
	// A decimal parameter that is created in the dataset.
	DecimalDatasetParameter *DataSetDecimalDatasetParameter `pulumi:"decimalDatasetParameter"`
	// An integer parameter that is created in the dataset.
	IntegerDatasetParameter *DataSetIntegerDatasetParameter `pulumi:"integerDatasetParameter"`
	// A string parameter that is created in the dataset.
	StringDatasetParameter *DataSetStringDatasetParameter `pulumi:"stringDatasetParameter"`
}

// DataSetDatasetParameterInput is an input type that accepts DataSetDatasetParameterArgs and DataSetDatasetParameterOutput values.
// You can construct a concrete instance of `DataSetDatasetParameterInput` via:
//
//	DataSetDatasetParameterArgs{...}
type DataSetDatasetParameterInput interface {
	pulumi.Input

	ToDataSetDatasetParameterOutput() DataSetDatasetParameterOutput
	ToDataSetDatasetParameterOutputWithContext(context.Context) DataSetDatasetParameterOutput
}

// <p>A dataset parameter.</p>
type DataSetDatasetParameterArgs struct {
	// A date time parameter that is created in the dataset.
	DateTimeDatasetParameter DataSetDateTimeDatasetParameterPtrInput `pulumi:"dateTimeDatasetParameter"`
	// A decimal parameter that is created in the dataset.
	DecimalDatasetParameter DataSetDecimalDatasetParameterPtrInput `pulumi:"decimalDatasetParameter"`
	// An integer parameter that is created in the dataset.
	IntegerDatasetParameter DataSetIntegerDatasetParameterPtrInput `pulumi:"integerDatasetParameter"`
	// A string parameter that is created in the dataset.
	StringDatasetParameter DataSetStringDatasetParameterPtrInput `pulumi:"stringDatasetParameter"`
}

func (DataSetDatasetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDatasetParameter)(nil)).Elem()
}

func (i DataSetDatasetParameterArgs) ToDataSetDatasetParameterOutput() DataSetDatasetParameterOutput {
	return i.ToDataSetDatasetParameterOutputWithContext(context.Background())
}

func (i DataSetDatasetParameterArgs) ToDataSetDatasetParameterOutputWithContext(ctx context.Context) DataSetDatasetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDatasetParameterOutput)
}

// DataSetDatasetParameterArrayInput is an input type that accepts DataSetDatasetParameterArray and DataSetDatasetParameterArrayOutput values.
// You can construct a concrete instance of `DataSetDatasetParameterArrayInput` via:
//
//	DataSetDatasetParameterArray{ DataSetDatasetParameterArgs{...} }
type DataSetDatasetParameterArrayInput interface {
	pulumi.Input

	ToDataSetDatasetParameterArrayOutput() DataSetDatasetParameterArrayOutput
	ToDataSetDatasetParameterArrayOutputWithContext(context.Context) DataSetDatasetParameterArrayOutput
}

type DataSetDatasetParameterArray []DataSetDatasetParameterInput

func (DataSetDatasetParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetDatasetParameter)(nil)).Elem()
}

func (i DataSetDatasetParameterArray) ToDataSetDatasetParameterArrayOutput() DataSetDatasetParameterArrayOutput {
	return i.ToDataSetDatasetParameterArrayOutputWithContext(context.Background())
}

func (i DataSetDatasetParameterArray) ToDataSetDatasetParameterArrayOutputWithContext(ctx context.Context) DataSetDatasetParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDatasetParameterArrayOutput)
}

// <p>A dataset parameter.</p>
type DataSetDatasetParameterOutput struct{ *pulumi.OutputState }

func (DataSetDatasetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDatasetParameter)(nil)).Elem()
}

func (o DataSetDatasetParameterOutput) ToDataSetDatasetParameterOutput() DataSetDatasetParameterOutput {
	return o
}

func (o DataSetDatasetParameterOutput) ToDataSetDatasetParameterOutputWithContext(ctx context.Context) DataSetDatasetParameterOutput {
	return o
}

// A date time parameter that is created in the dataset.
func (o DataSetDatasetParameterOutput) DateTimeDatasetParameter() DataSetDateTimeDatasetParameterPtrOutput {
	return o.ApplyT(func(v DataSetDatasetParameter) *DataSetDateTimeDatasetParameter { return v.DateTimeDatasetParameter }).(DataSetDateTimeDatasetParameterPtrOutput)
}

// A decimal parameter that is created in the dataset.
func (o DataSetDatasetParameterOutput) DecimalDatasetParameter() DataSetDecimalDatasetParameterPtrOutput {
	return o.ApplyT(func(v DataSetDatasetParameter) *DataSetDecimalDatasetParameter { return v.DecimalDatasetParameter }).(DataSetDecimalDatasetParameterPtrOutput)
}

// An integer parameter that is created in the dataset.
func (o DataSetDatasetParameterOutput) IntegerDatasetParameter() DataSetIntegerDatasetParameterPtrOutput {
	return o.ApplyT(func(v DataSetDatasetParameter) *DataSetIntegerDatasetParameter { return v.IntegerDatasetParameter }).(DataSetIntegerDatasetParameterPtrOutput)
}

// A string parameter that is created in the dataset.
func (o DataSetDatasetParameterOutput) StringDatasetParameter() DataSetStringDatasetParameterPtrOutput {
	return o.ApplyT(func(v DataSetDatasetParameter) *DataSetStringDatasetParameter { return v.StringDatasetParameter }).(DataSetStringDatasetParameterPtrOutput)
}

type DataSetDatasetParameterArrayOutput struct{ *pulumi.OutputState }

func (DataSetDatasetParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetDatasetParameter)(nil)).Elem()
}

func (o DataSetDatasetParameterArrayOutput) ToDataSetDatasetParameterArrayOutput() DataSetDatasetParameterArrayOutput {
	return o
}

func (o DataSetDatasetParameterArrayOutput) ToDataSetDatasetParameterArrayOutputWithContext(ctx context.Context) DataSetDatasetParameterArrayOutput {
	return o
}

func (o DataSetDatasetParameterArrayOutput) Index(i pulumi.IntInput) DataSetDatasetParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetDatasetParameter {
		return vs[0].([]DataSetDatasetParameter)[vs[1].(int)]
	}).(DataSetDatasetParameterOutput)
}

// <p>A date time parameter for a dataset.</p>
type DataSetDateTimeDatasetParameter struct {
	// A list of default values for a given date time parameter. This structure only accepts static values.
	DefaultValues *DataSetDateTimeDatasetParameterDefaultValues `pulumi:"defaultValues"`
	// <p>An identifier for the parameter that is created in the dataset.</p>
	Id string `pulumi:"id"`
	// <p>The name of the date time parameter that is created in the dataset.</p>
	Name string `pulumi:"name"`
	// The time granularity of the date time parameter.
	TimeGranularity *DataSetTimeGranularity `pulumi:"timeGranularity"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueType `pulumi:"valueType"`
}

// DataSetDateTimeDatasetParameterInput is an input type that accepts DataSetDateTimeDatasetParameterArgs and DataSetDateTimeDatasetParameterOutput values.
// You can construct a concrete instance of `DataSetDateTimeDatasetParameterInput` via:
//
//	DataSetDateTimeDatasetParameterArgs{...}
type DataSetDateTimeDatasetParameterInput interface {
	pulumi.Input

	ToDataSetDateTimeDatasetParameterOutput() DataSetDateTimeDatasetParameterOutput
	ToDataSetDateTimeDatasetParameterOutputWithContext(context.Context) DataSetDateTimeDatasetParameterOutput
}

// <p>A date time parameter for a dataset.</p>
type DataSetDateTimeDatasetParameterArgs struct {
	// A list of default values for a given date time parameter. This structure only accepts static values.
	DefaultValues DataSetDateTimeDatasetParameterDefaultValuesPtrInput `pulumi:"defaultValues"`
	// <p>An identifier for the parameter that is created in the dataset.</p>
	Id pulumi.StringInput `pulumi:"id"`
	// <p>The name of the date time parameter that is created in the dataset.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// The time granularity of the date time parameter.
	TimeGranularity DataSetTimeGranularityPtrInput `pulumi:"timeGranularity"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueTypeInput `pulumi:"valueType"`
}

func (DataSetDateTimeDatasetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDateTimeDatasetParameter)(nil)).Elem()
}

func (i DataSetDateTimeDatasetParameterArgs) ToDataSetDateTimeDatasetParameterOutput() DataSetDateTimeDatasetParameterOutput {
	return i.ToDataSetDateTimeDatasetParameterOutputWithContext(context.Background())
}

func (i DataSetDateTimeDatasetParameterArgs) ToDataSetDateTimeDatasetParameterOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDateTimeDatasetParameterOutput)
}

func (i DataSetDateTimeDatasetParameterArgs) ToDataSetDateTimeDatasetParameterPtrOutput() DataSetDateTimeDatasetParameterPtrOutput {
	return i.ToDataSetDateTimeDatasetParameterPtrOutputWithContext(context.Background())
}

func (i DataSetDateTimeDatasetParameterArgs) ToDataSetDateTimeDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDateTimeDatasetParameterOutput).ToDataSetDateTimeDatasetParameterPtrOutputWithContext(ctx)
}

// DataSetDateTimeDatasetParameterPtrInput is an input type that accepts DataSetDateTimeDatasetParameterArgs, DataSetDateTimeDatasetParameterPtr and DataSetDateTimeDatasetParameterPtrOutput values.
// You can construct a concrete instance of `DataSetDateTimeDatasetParameterPtrInput` via:
//
//	        DataSetDateTimeDatasetParameterArgs{...}
//
//	or:
//
//	        nil
type DataSetDateTimeDatasetParameterPtrInput interface {
	pulumi.Input

	ToDataSetDateTimeDatasetParameterPtrOutput() DataSetDateTimeDatasetParameterPtrOutput
	ToDataSetDateTimeDatasetParameterPtrOutputWithContext(context.Context) DataSetDateTimeDatasetParameterPtrOutput
}

type dataSetDateTimeDatasetParameterPtrType DataSetDateTimeDatasetParameterArgs

func DataSetDateTimeDatasetParameterPtr(v *DataSetDateTimeDatasetParameterArgs) DataSetDateTimeDatasetParameterPtrInput {
	return (*dataSetDateTimeDatasetParameterPtrType)(v)
}

func (*dataSetDateTimeDatasetParameterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDateTimeDatasetParameter)(nil)).Elem()
}

func (i *dataSetDateTimeDatasetParameterPtrType) ToDataSetDateTimeDatasetParameterPtrOutput() DataSetDateTimeDatasetParameterPtrOutput {
	return i.ToDataSetDateTimeDatasetParameterPtrOutputWithContext(context.Background())
}

func (i *dataSetDateTimeDatasetParameterPtrType) ToDataSetDateTimeDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDateTimeDatasetParameterPtrOutput)
}

// <p>A date time parameter for a dataset.</p>
type DataSetDateTimeDatasetParameterOutput struct{ *pulumi.OutputState }

func (DataSetDateTimeDatasetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDateTimeDatasetParameter)(nil)).Elem()
}

func (o DataSetDateTimeDatasetParameterOutput) ToDataSetDateTimeDatasetParameterOutput() DataSetDateTimeDatasetParameterOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterOutput) ToDataSetDateTimeDatasetParameterOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterOutput) ToDataSetDateTimeDatasetParameterPtrOutput() DataSetDateTimeDatasetParameterPtrOutput {
	return o.ToDataSetDateTimeDatasetParameterPtrOutputWithContext(context.Background())
}

func (o DataSetDateTimeDatasetParameterOutput) ToDataSetDateTimeDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetDateTimeDatasetParameter) *DataSetDateTimeDatasetParameter {
		return &v
	}).(DataSetDateTimeDatasetParameterPtrOutput)
}

// A list of default values for a given date time parameter. This structure only accepts static values.
func (o DataSetDateTimeDatasetParameterOutput) DefaultValues() DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v DataSetDateTimeDatasetParameter) *DataSetDateTimeDatasetParameterDefaultValues {
		return v.DefaultValues
	}).(DataSetDateTimeDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the parameter that is created in the dataset.</p>
func (o DataSetDateTimeDatasetParameterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetDateTimeDatasetParameter) string { return v.Id }).(pulumi.StringOutput)
}

// <p>The name of the date time parameter that is created in the dataset.</p>
func (o DataSetDateTimeDatasetParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetDateTimeDatasetParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The time granularity of the date time parameter.
func (o DataSetDateTimeDatasetParameterOutput) TimeGranularity() DataSetTimeGranularityPtrOutput {
	return o.ApplyT(func(v DataSetDateTimeDatasetParameter) *DataSetTimeGranularity { return v.TimeGranularity }).(DataSetTimeGranularityPtrOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetDateTimeDatasetParameterOutput) ValueType() DataSetDatasetParameterValueTypeOutput {
	return o.ApplyT(func(v DataSetDateTimeDatasetParameter) DataSetDatasetParameterValueType { return v.ValueType }).(DataSetDatasetParameterValueTypeOutput)
}

type DataSetDateTimeDatasetParameterPtrOutput struct{ *pulumi.OutputState }

func (DataSetDateTimeDatasetParameterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDateTimeDatasetParameter)(nil)).Elem()
}

func (o DataSetDateTimeDatasetParameterPtrOutput) ToDataSetDateTimeDatasetParameterPtrOutput() DataSetDateTimeDatasetParameterPtrOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterPtrOutput) ToDataSetDateTimeDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterPtrOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterPtrOutput) Elem() DataSetDateTimeDatasetParameterOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameter) DataSetDateTimeDatasetParameter {
		if v != nil {
			return *v
		}
		var ret DataSetDateTimeDatasetParameter
		return ret
	}).(DataSetDateTimeDatasetParameterOutput)
}

// A list of default values for a given date time parameter. This structure only accepts static values.
func (o DataSetDateTimeDatasetParameterPtrOutput) DefaultValues() DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameter) *DataSetDateTimeDatasetParameterDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(DataSetDateTimeDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the parameter that is created in the dataset.</p>
func (o DataSetDateTimeDatasetParameterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// <p>The name of the date time parameter that is created in the dataset.</p>
func (o DataSetDateTimeDatasetParameterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The time granularity of the date time parameter.
func (o DataSetDateTimeDatasetParameterPtrOutput) TimeGranularity() DataSetTimeGranularityPtrOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameter) *DataSetTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(DataSetTimeGranularityPtrOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetDateTimeDatasetParameterPtrOutput) ValueType() DataSetDatasetParameterValueTypePtrOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameter) *DataSetDatasetParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ValueType
	}).(DataSetDatasetParameterValueTypePtrOutput)
}

// <p>The default values of a date time parameter.</p>
type DataSetDateTimeDatasetParameterDefaultValues struct {
	// <p>A list of static default values for a given date time parameter.</p>
	StaticValues []string `pulumi:"staticValues"`
}

// DataSetDateTimeDatasetParameterDefaultValuesInput is an input type that accepts DataSetDateTimeDatasetParameterDefaultValuesArgs and DataSetDateTimeDatasetParameterDefaultValuesOutput values.
// You can construct a concrete instance of `DataSetDateTimeDatasetParameterDefaultValuesInput` via:
//
//	DataSetDateTimeDatasetParameterDefaultValuesArgs{...}
type DataSetDateTimeDatasetParameterDefaultValuesInput interface {
	pulumi.Input

	ToDataSetDateTimeDatasetParameterDefaultValuesOutput() DataSetDateTimeDatasetParameterDefaultValuesOutput
	ToDataSetDateTimeDatasetParameterDefaultValuesOutputWithContext(context.Context) DataSetDateTimeDatasetParameterDefaultValuesOutput
}

// <p>The default values of a date time parameter.</p>
type DataSetDateTimeDatasetParameterDefaultValuesArgs struct {
	// <p>A list of static default values for a given date time parameter.</p>
	StaticValues pulumi.StringArrayInput `pulumi:"staticValues"`
}

func (DataSetDateTimeDatasetParameterDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDateTimeDatasetParameterDefaultValues)(nil)).Elem()
}

func (i DataSetDateTimeDatasetParameterDefaultValuesArgs) ToDataSetDateTimeDatasetParameterDefaultValuesOutput() DataSetDateTimeDatasetParameterDefaultValuesOutput {
	return i.ToDataSetDateTimeDatasetParameterDefaultValuesOutputWithContext(context.Background())
}

func (i DataSetDateTimeDatasetParameterDefaultValuesArgs) ToDataSetDateTimeDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDateTimeDatasetParameterDefaultValuesOutput)
}

func (i DataSetDateTimeDatasetParameterDefaultValuesArgs) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutput() DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DataSetDateTimeDatasetParameterDefaultValuesArgs) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDateTimeDatasetParameterDefaultValuesOutput).ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(ctx)
}

// DataSetDateTimeDatasetParameterDefaultValuesPtrInput is an input type that accepts DataSetDateTimeDatasetParameterDefaultValuesArgs, DataSetDateTimeDatasetParameterDefaultValuesPtr and DataSetDateTimeDatasetParameterDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DataSetDateTimeDatasetParameterDefaultValuesPtrInput` via:
//
//	        DataSetDateTimeDatasetParameterDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type DataSetDateTimeDatasetParameterDefaultValuesPtrInput interface {
	pulumi.Input

	ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutput() DataSetDateTimeDatasetParameterDefaultValuesPtrOutput
	ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(context.Context) DataSetDateTimeDatasetParameterDefaultValuesPtrOutput
}

type dataSetDateTimeDatasetParameterDefaultValuesPtrType DataSetDateTimeDatasetParameterDefaultValuesArgs

func DataSetDateTimeDatasetParameterDefaultValuesPtr(v *DataSetDateTimeDatasetParameterDefaultValuesArgs) DataSetDateTimeDatasetParameterDefaultValuesPtrInput {
	return (*dataSetDateTimeDatasetParameterDefaultValuesPtrType)(v)
}

func (*dataSetDateTimeDatasetParameterDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDateTimeDatasetParameterDefaultValues)(nil)).Elem()
}

func (i *dataSetDateTimeDatasetParameterDefaultValuesPtrType) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutput() DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *dataSetDateTimeDatasetParameterDefaultValuesPtrType) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDateTimeDatasetParameterDefaultValuesPtrOutput)
}

// <p>The default values of a date time parameter.</p>
type DataSetDateTimeDatasetParameterDefaultValuesOutput struct{ *pulumi.OutputState }

func (DataSetDateTimeDatasetParameterDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDateTimeDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetDateTimeDatasetParameterDefaultValuesOutput) ToDataSetDateTimeDatasetParameterDefaultValuesOutput() DataSetDateTimeDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterDefaultValuesOutput) ToDataSetDateTimeDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterDefaultValuesOutput) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutput() DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return o.ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DataSetDateTimeDatasetParameterDefaultValuesOutput) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetDateTimeDatasetParameterDefaultValues) *DataSetDateTimeDatasetParameterDefaultValues {
		return &v
	}).(DataSetDateTimeDatasetParameterDefaultValuesPtrOutput)
}

// <p>A list of static default values for a given date time parameter.</p>
func (o DataSetDateTimeDatasetParameterDefaultValuesOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetDateTimeDatasetParameterDefaultValues) []string { return v.StaticValues }).(pulumi.StringArrayOutput)
}

type DataSetDateTimeDatasetParameterDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DataSetDateTimeDatasetParameterDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDateTimeDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetDateTimeDatasetParameterDefaultValuesPtrOutput) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutput() DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterDefaultValuesPtrOutput) ToDataSetDateTimeDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDateTimeDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetDateTimeDatasetParameterDefaultValuesPtrOutput) Elem() DataSetDateTimeDatasetParameterDefaultValuesOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameterDefaultValues) DataSetDateTimeDatasetParameterDefaultValues {
		if v != nil {
			return *v
		}
		var ret DataSetDateTimeDatasetParameterDefaultValues
		return ret
	}).(DataSetDateTimeDatasetParameterDefaultValuesOutput)
}

// <p>A list of static default values for a given date time parameter.</p>
func (o DataSetDateTimeDatasetParameterDefaultValuesPtrOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetDateTimeDatasetParameterDefaultValues) []string {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.StringArrayOutput)
}

// <p>A decimal parameter for a dataset.</p>
type DataSetDecimalDatasetParameter struct {
	// A list of default values for a given decimal parameter. This structure only accepts static values.
	DefaultValues *DataSetDecimalDatasetParameterDefaultValues `pulumi:"defaultValues"`
	// <p>An identifier for the decimal parameter created in the dataset.</p>
	Id string `pulumi:"id"`
	// <p>The name of the decimal parameter that is created in the dataset.</p>
	Name string `pulumi:"name"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueType `pulumi:"valueType"`
}

// DataSetDecimalDatasetParameterInput is an input type that accepts DataSetDecimalDatasetParameterArgs and DataSetDecimalDatasetParameterOutput values.
// You can construct a concrete instance of `DataSetDecimalDatasetParameterInput` via:
//
//	DataSetDecimalDatasetParameterArgs{...}
type DataSetDecimalDatasetParameterInput interface {
	pulumi.Input

	ToDataSetDecimalDatasetParameterOutput() DataSetDecimalDatasetParameterOutput
	ToDataSetDecimalDatasetParameterOutputWithContext(context.Context) DataSetDecimalDatasetParameterOutput
}

// <p>A decimal parameter for a dataset.</p>
type DataSetDecimalDatasetParameterArgs struct {
	// A list of default values for a given decimal parameter. This structure only accepts static values.
	DefaultValues DataSetDecimalDatasetParameterDefaultValuesPtrInput `pulumi:"defaultValues"`
	// <p>An identifier for the decimal parameter created in the dataset.</p>
	Id pulumi.StringInput `pulumi:"id"`
	// <p>The name of the decimal parameter that is created in the dataset.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueTypeInput `pulumi:"valueType"`
}

func (DataSetDecimalDatasetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDecimalDatasetParameter)(nil)).Elem()
}

func (i DataSetDecimalDatasetParameterArgs) ToDataSetDecimalDatasetParameterOutput() DataSetDecimalDatasetParameterOutput {
	return i.ToDataSetDecimalDatasetParameterOutputWithContext(context.Background())
}

func (i DataSetDecimalDatasetParameterArgs) ToDataSetDecimalDatasetParameterOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDecimalDatasetParameterOutput)
}

func (i DataSetDecimalDatasetParameterArgs) ToDataSetDecimalDatasetParameterPtrOutput() DataSetDecimalDatasetParameterPtrOutput {
	return i.ToDataSetDecimalDatasetParameterPtrOutputWithContext(context.Background())
}

func (i DataSetDecimalDatasetParameterArgs) ToDataSetDecimalDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDecimalDatasetParameterOutput).ToDataSetDecimalDatasetParameterPtrOutputWithContext(ctx)
}

// DataSetDecimalDatasetParameterPtrInput is an input type that accepts DataSetDecimalDatasetParameterArgs, DataSetDecimalDatasetParameterPtr and DataSetDecimalDatasetParameterPtrOutput values.
// You can construct a concrete instance of `DataSetDecimalDatasetParameterPtrInput` via:
//
//	        DataSetDecimalDatasetParameterArgs{...}
//
//	or:
//
//	        nil
type DataSetDecimalDatasetParameterPtrInput interface {
	pulumi.Input

	ToDataSetDecimalDatasetParameterPtrOutput() DataSetDecimalDatasetParameterPtrOutput
	ToDataSetDecimalDatasetParameterPtrOutputWithContext(context.Context) DataSetDecimalDatasetParameterPtrOutput
}

type dataSetDecimalDatasetParameterPtrType DataSetDecimalDatasetParameterArgs

func DataSetDecimalDatasetParameterPtr(v *DataSetDecimalDatasetParameterArgs) DataSetDecimalDatasetParameterPtrInput {
	return (*dataSetDecimalDatasetParameterPtrType)(v)
}

func (*dataSetDecimalDatasetParameterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDecimalDatasetParameter)(nil)).Elem()
}

func (i *dataSetDecimalDatasetParameterPtrType) ToDataSetDecimalDatasetParameterPtrOutput() DataSetDecimalDatasetParameterPtrOutput {
	return i.ToDataSetDecimalDatasetParameterPtrOutputWithContext(context.Background())
}

func (i *dataSetDecimalDatasetParameterPtrType) ToDataSetDecimalDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDecimalDatasetParameterPtrOutput)
}

// <p>A decimal parameter for a dataset.</p>
type DataSetDecimalDatasetParameterOutput struct{ *pulumi.OutputState }

func (DataSetDecimalDatasetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDecimalDatasetParameter)(nil)).Elem()
}

func (o DataSetDecimalDatasetParameterOutput) ToDataSetDecimalDatasetParameterOutput() DataSetDecimalDatasetParameterOutput {
	return o
}

func (o DataSetDecimalDatasetParameterOutput) ToDataSetDecimalDatasetParameterOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterOutput {
	return o
}

func (o DataSetDecimalDatasetParameterOutput) ToDataSetDecimalDatasetParameterPtrOutput() DataSetDecimalDatasetParameterPtrOutput {
	return o.ToDataSetDecimalDatasetParameterPtrOutputWithContext(context.Background())
}

func (o DataSetDecimalDatasetParameterOutput) ToDataSetDecimalDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetDecimalDatasetParameter) *DataSetDecimalDatasetParameter {
		return &v
	}).(DataSetDecimalDatasetParameterPtrOutput)
}

// A list of default values for a given decimal parameter. This structure only accepts static values.
func (o DataSetDecimalDatasetParameterOutput) DefaultValues() DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v DataSetDecimalDatasetParameter) *DataSetDecimalDatasetParameterDefaultValues {
		return v.DefaultValues
	}).(DataSetDecimalDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the decimal parameter created in the dataset.</p>
func (o DataSetDecimalDatasetParameterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetDecimalDatasetParameter) string { return v.Id }).(pulumi.StringOutput)
}

// <p>The name of the decimal parameter that is created in the dataset.</p>
func (o DataSetDecimalDatasetParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetDecimalDatasetParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetDecimalDatasetParameterOutput) ValueType() DataSetDatasetParameterValueTypeOutput {
	return o.ApplyT(func(v DataSetDecimalDatasetParameter) DataSetDatasetParameterValueType { return v.ValueType }).(DataSetDatasetParameterValueTypeOutput)
}

type DataSetDecimalDatasetParameterPtrOutput struct{ *pulumi.OutputState }

func (DataSetDecimalDatasetParameterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDecimalDatasetParameter)(nil)).Elem()
}

func (o DataSetDecimalDatasetParameterPtrOutput) ToDataSetDecimalDatasetParameterPtrOutput() DataSetDecimalDatasetParameterPtrOutput {
	return o
}

func (o DataSetDecimalDatasetParameterPtrOutput) ToDataSetDecimalDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterPtrOutput {
	return o
}

func (o DataSetDecimalDatasetParameterPtrOutput) Elem() DataSetDecimalDatasetParameterOutput {
	return o.ApplyT(func(v *DataSetDecimalDatasetParameter) DataSetDecimalDatasetParameter {
		if v != nil {
			return *v
		}
		var ret DataSetDecimalDatasetParameter
		return ret
	}).(DataSetDecimalDatasetParameterOutput)
}

// A list of default values for a given decimal parameter. This structure only accepts static values.
func (o DataSetDecimalDatasetParameterPtrOutput) DefaultValues() DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v *DataSetDecimalDatasetParameter) *DataSetDecimalDatasetParameterDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(DataSetDecimalDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the decimal parameter created in the dataset.</p>
func (o DataSetDecimalDatasetParameterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetDecimalDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// <p>The name of the decimal parameter that is created in the dataset.</p>
func (o DataSetDecimalDatasetParameterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetDecimalDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetDecimalDatasetParameterPtrOutput) ValueType() DataSetDatasetParameterValueTypePtrOutput {
	return o.ApplyT(func(v *DataSetDecimalDatasetParameter) *DataSetDatasetParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ValueType
	}).(DataSetDatasetParameterValueTypePtrOutput)
}

// <p>The default values of a decimal parameter.</p>
type DataSetDecimalDatasetParameterDefaultValues struct {
	// <p>A list of static default values for a given decimal parameter.</p>
	StaticValues []float64 `pulumi:"staticValues"`
}

// DataSetDecimalDatasetParameterDefaultValuesInput is an input type that accepts DataSetDecimalDatasetParameterDefaultValuesArgs and DataSetDecimalDatasetParameterDefaultValuesOutput values.
// You can construct a concrete instance of `DataSetDecimalDatasetParameterDefaultValuesInput` via:
//
//	DataSetDecimalDatasetParameterDefaultValuesArgs{...}
type DataSetDecimalDatasetParameterDefaultValuesInput interface {
	pulumi.Input

	ToDataSetDecimalDatasetParameterDefaultValuesOutput() DataSetDecimalDatasetParameterDefaultValuesOutput
	ToDataSetDecimalDatasetParameterDefaultValuesOutputWithContext(context.Context) DataSetDecimalDatasetParameterDefaultValuesOutput
}

// <p>The default values of a decimal parameter.</p>
type DataSetDecimalDatasetParameterDefaultValuesArgs struct {
	// <p>A list of static default values for a given decimal parameter.</p>
	StaticValues pulumi.Float64ArrayInput `pulumi:"staticValues"`
}

func (DataSetDecimalDatasetParameterDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDecimalDatasetParameterDefaultValues)(nil)).Elem()
}

func (i DataSetDecimalDatasetParameterDefaultValuesArgs) ToDataSetDecimalDatasetParameterDefaultValuesOutput() DataSetDecimalDatasetParameterDefaultValuesOutput {
	return i.ToDataSetDecimalDatasetParameterDefaultValuesOutputWithContext(context.Background())
}

func (i DataSetDecimalDatasetParameterDefaultValuesArgs) ToDataSetDecimalDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDecimalDatasetParameterDefaultValuesOutput)
}

func (i DataSetDecimalDatasetParameterDefaultValuesArgs) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutput() DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DataSetDecimalDatasetParameterDefaultValuesArgs) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDecimalDatasetParameterDefaultValuesOutput).ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(ctx)
}

// DataSetDecimalDatasetParameterDefaultValuesPtrInput is an input type that accepts DataSetDecimalDatasetParameterDefaultValuesArgs, DataSetDecimalDatasetParameterDefaultValuesPtr and DataSetDecimalDatasetParameterDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DataSetDecimalDatasetParameterDefaultValuesPtrInput` via:
//
//	        DataSetDecimalDatasetParameterDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type DataSetDecimalDatasetParameterDefaultValuesPtrInput interface {
	pulumi.Input

	ToDataSetDecimalDatasetParameterDefaultValuesPtrOutput() DataSetDecimalDatasetParameterDefaultValuesPtrOutput
	ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(context.Context) DataSetDecimalDatasetParameterDefaultValuesPtrOutput
}

type dataSetDecimalDatasetParameterDefaultValuesPtrType DataSetDecimalDatasetParameterDefaultValuesArgs

func DataSetDecimalDatasetParameterDefaultValuesPtr(v *DataSetDecimalDatasetParameterDefaultValuesArgs) DataSetDecimalDatasetParameterDefaultValuesPtrInput {
	return (*dataSetDecimalDatasetParameterDefaultValuesPtrType)(v)
}

func (*dataSetDecimalDatasetParameterDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDecimalDatasetParameterDefaultValues)(nil)).Elem()
}

func (i *dataSetDecimalDatasetParameterDefaultValuesPtrType) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutput() DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *dataSetDecimalDatasetParameterDefaultValuesPtrType) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetDecimalDatasetParameterDefaultValuesPtrOutput)
}

// <p>The default values of a decimal parameter.</p>
type DataSetDecimalDatasetParameterDefaultValuesOutput struct{ *pulumi.OutputState }

func (DataSetDecimalDatasetParameterDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetDecimalDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetDecimalDatasetParameterDefaultValuesOutput) ToDataSetDecimalDatasetParameterDefaultValuesOutput() DataSetDecimalDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetDecimalDatasetParameterDefaultValuesOutput) ToDataSetDecimalDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetDecimalDatasetParameterDefaultValuesOutput) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutput() DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return o.ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DataSetDecimalDatasetParameterDefaultValuesOutput) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetDecimalDatasetParameterDefaultValues) *DataSetDecimalDatasetParameterDefaultValues {
		return &v
	}).(DataSetDecimalDatasetParameterDefaultValuesPtrOutput)
}

// <p>A list of static default values for a given decimal parameter.</p>
func (o DataSetDecimalDatasetParameterDefaultValuesOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DataSetDecimalDatasetParameterDefaultValues) []float64 { return v.StaticValues }).(pulumi.Float64ArrayOutput)
}

type DataSetDecimalDatasetParameterDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DataSetDecimalDatasetParameterDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetDecimalDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetDecimalDatasetParameterDefaultValuesPtrOutput) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutput() DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetDecimalDatasetParameterDefaultValuesPtrOutput) ToDataSetDecimalDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetDecimalDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetDecimalDatasetParameterDefaultValuesPtrOutput) Elem() DataSetDecimalDatasetParameterDefaultValuesOutput {
	return o.ApplyT(func(v *DataSetDecimalDatasetParameterDefaultValues) DataSetDecimalDatasetParameterDefaultValues {
		if v != nil {
			return *v
		}
		var ret DataSetDecimalDatasetParameterDefaultValues
		return ret
	}).(DataSetDecimalDatasetParameterDefaultValuesOutput)
}

// <p>A list of static default values for a given decimal parameter.</p>
func (o DataSetDecimalDatasetParameterDefaultValuesPtrOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *DataSetDecimalDatasetParameterDefaultValues) []float64 {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.Float64ArrayOutput)
}

// <p>A FieldFolder element is a folder that contains fields and nested subfolders.</p>
type DataSetFieldFolder struct {
	// <p>A folder has a list of columns. A column can only be in one folder.</p>
	Columns []string `pulumi:"columns"`
	// <p>The description for a field folder.</p>
	Description *string `pulumi:"description"`
}

// DataSetFieldFolderInput is an input type that accepts DataSetFieldFolderArgs and DataSetFieldFolderOutput values.
// You can construct a concrete instance of `DataSetFieldFolderInput` via:
//
//	DataSetFieldFolderArgs{...}
type DataSetFieldFolderInput interface {
	pulumi.Input

	ToDataSetFieldFolderOutput() DataSetFieldFolderOutput
	ToDataSetFieldFolderOutputWithContext(context.Context) DataSetFieldFolderOutput
}

// <p>A FieldFolder element is a folder that contains fields and nested subfolders.</p>
type DataSetFieldFolderArgs struct {
	// <p>A folder has a list of columns. A column can only be in one folder.</p>
	Columns pulumi.StringArrayInput `pulumi:"columns"`
	// <p>The description for a field folder.</p>
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (DataSetFieldFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolder)(nil)).Elem()
}

func (i DataSetFieldFolderArgs) ToDataSetFieldFolderOutput() DataSetFieldFolderOutput {
	return i.ToDataSetFieldFolderOutputWithContext(context.Background())
}

func (i DataSetFieldFolderArgs) ToDataSetFieldFolderOutputWithContext(ctx context.Context) DataSetFieldFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderOutput)
}

// DataSetFieldFolderMapInput is an input type that accepts DataSetFieldFolderMap and DataSetFieldFolderMapOutput values.
// You can construct a concrete instance of `DataSetFieldFolderMapInput` via:
//
//	DataSetFieldFolderMap{ "key": DataSetFieldFolderArgs{...} }
type DataSetFieldFolderMapInput interface {
	pulumi.Input

	ToDataSetFieldFolderMapOutput() DataSetFieldFolderMapOutput
	ToDataSetFieldFolderMapOutputWithContext(context.Context) DataSetFieldFolderMapOutput
}

type DataSetFieldFolderMap map[string]DataSetFieldFolderInput

func (DataSetFieldFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSetFieldFolder)(nil)).Elem()
}

func (i DataSetFieldFolderMap) ToDataSetFieldFolderMapOutput() DataSetFieldFolderMapOutput {
	return i.ToDataSetFieldFolderMapOutputWithContext(context.Background())
}

func (i DataSetFieldFolderMap) ToDataSetFieldFolderMapOutputWithContext(ctx context.Context) DataSetFieldFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFieldFolderMapOutput)
}

// <p>A FieldFolder element is a folder that contains fields and nested subfolders.</p>
type DataSetFieldFolderOutput struct{ *pulumi.OutputState }

func (DataSetFieldFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFieldFolder)(nil)).Elem()
}

func (o DataSetFieldFolderOutput) ToDataSetFieldFolderOutput() DataSetFieldFolderOutput {
	return o
}

func (o DataSetFieldFolderOutput) ToDataSetFieldFolderOutputWithContext(ctx context.Context) DataSetFieldFolderOutput {
	return o
}

// <p>A folder has a list of columns. A column can only be in one folder.</p>
func (o DataSetFieldFolderOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetFieldFolder) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

// <p>The description for a field folder.</p>
func (o DataSetFieldFolderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetFieldFolder) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type DataSetFieldFolderMapOutput struct{ *pulumi.OutputState }

func (DataSetFieldFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSetFieldFolder)(nil)).Elem()
}

func (o DataSetFieldFolderMapOutput) ToDataSetFieldFolderMapOutput() DataSetFieldFolderMapOutput {
	return o
}

func (o DataSetFieldFolderMapOutput) ToDataSetFieldFolderMapOutputWithContext(ctx context.Context) DataSetFieldFolderMapOutput {
	return o
}

func (o DataSetFieldFolderMapOutput) MapIndex(k pulumi.StringInput) DataSetFieldFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataSetFieldFolder {
		return vs[0].(map[string]DataSetFieldFolder)[vs[1].(string)]
	}).(DataSetFieldFolderOutput)
}

// <p>A transform operation that filters rows based on a condition.</p>
type DataSetFilterOperation struct {
	// <p>An expression that must evaluate to a Boolean value. Rows for which the expression
	//             evaluates to true are kept in the dataset.</p>
	ConditionExpression string `pulumi:"conditionExpression"`
}

// DataSetFilterOperationInput is an input type that accepts DataSetFilterOperationArgs and DataSetFilterOperationOutput values.
// You can construct a concrete instance of `DataSetFilterOperationInput` via:
//
//	DataSetFilterOperationArgs{...}
type DataSetFilterOperationInput interface {
	pulumi.Input

	ToDataSetFilterOperationOutput() DataSetFilterOperationOutput
	ToDataSetFilterOperationOutputWithContext(context.Context) DataSetFilterOperationOutput
}

// <p>A transform operation that filters rows based on a condition.</p>
type DataSetFilterOperationArgs struct {
	// <p>An expression that must evaluate to a Boolean value. Rows for which the expression
	//             evaluates to true are kept in the dataset.</p>
	ConditionExpression pulumi.StringInput `pulumi:"conditionExpression"`
}

func (DataSetFilterOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFilterOperation)(nil)).Elem()
}

func (i DataSetFilterOperationArgs) ToDataSetFilterOperationOutput() DataSetFilterOperationOutput {
	return i.ToDataSetFilterOperationOutputWithContext(context.Background())
}

func (i DataSetFilterOperationArgs) ToDataSetFilterOperationOutputWithContext(ctx context.Context) DataSetFilterOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFilterOperationOutput)
}

func (i DataSetFilterOperationArgs) ToDataSetFilterOperationPtrOutput() DataSetFilterOperationPtrOutput {
	return i.ToDataSetFilterOperationPtrOutputWithContext(context.Background())
}

func (i DataSetFilterOperationArgs) ToDataSetFilterOperationPtrOutputWithContext(ctx context.Context) DataSetFilterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFilterOperationOutput).ToDataSetFilterOperationPtrOutputWithContext(ctx)
}

// DataSetFilterOperationPtrInput is an input type that accepts DataSetFilterOperationArgs, DataSetFilterOperationPtr and DataSetFilterOperationPtrOutput values.
// You can construct a concrete instance of `DataSetFilterOperationPtrInput` via:
//
//	        DataSetFilterOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetFilterOperationPtrInput interface {
	pulumi.Input

	ToDataSetFilterOperationPtrOutput() DataSetFilterOperationPtrOutput
	ToDataSetFilterOperationPtrOutputWithContext(context.Context) DataSetFilterOperationPtrOutput
}

type dataSetFilterOperationPtrType DataSetFilterOperationArgs

func DataSetFilterOperationPtr(v *DataSetFilterOperationArgs) DataSetFilterOperationPtrInput {
	return (*dataSetFilterOperationPtrType)(v)
}

func (*dataSetFilterOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetFilterOperation)(nil)).Elem()
}

func (i *dataSetFilterOperationPtrType) ToDataSetFilterOperationPtrOutput() DataSetFilterOperationPtrOutput {
	return i.ToDataSetFilterOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetFilterOperationPtrType) ToDataSetFilterOperationPtrOutputWithContext(ctx context.Context) DataSetFilterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetFilterOperationPtrOutput)
}

// <p>A transform operation that filters rows based on a condition.</p>
type DataSetFilterOperationOutput struct{ *pulumi.OutputState }

func (DataSetFilterOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetFilterOperation)(nil)).Elem()
}

func (o DataSetFilterOperationOutput) ToDataSetFilterOperationOutput() DataSetFilterOperationOutput {
	return o
}

func (o DataSetFilterOperationOutput) ToDataSetFilterOperationOutputWithContext(ctx context.Context) DataSetFilterOperationOutput {
	return o
}

func (o DataSetFilterOperationOutput) ToDataSetFilterOperationPtrOutput() DataSetFilterOperationPtrOutput {
	return o.ToDataSetFilterOperationPtrOutputWithContext(context.Background())
}

func (o DataSetFilterOperationOutput) ToDataSetFilterOperationPtrOutputWithContext(ctx context.Context) DataSetFilterOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetFilterOperation) *DataSetFilterOperation {
		return &v
	}).(DataSetFilterOperationPtrOutput)
}

// <p>An expression that must evaluate to a Boolean value. Rows for which the expression
//
//	evaluates to true are kept in the dataset.</p>
func (o DataSetFilterOperationOutput) ConditionExpression() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetFilterOperation) string { return v.ConditionExpression }).(pulumi.StringOutput)
}

type DataSetFilterOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetFilterOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetFilterOperation)(nil)).Elem()
}

func (o DataSetFilterOperationPtrOutput) ToDataSetFilterOperationPtrOutput() DataSetFilterOperationPtrOutput {
	return o
}

func (o DataSetFilterOperationPtrOutput) ToDataSetFilterOperationPtrOutputWithContext(ctx context.Context) DataSetFilterOperationPtrOutput {
	return o
}

func (o DataSetFilterOperationPtrOutput) Elem() DataSetFilterOperationOutput {
	return o.ApplyT(func(v *DataSetFilterOperation) DataSetFilterOperation {
		if v != nil {
			return *v
		}
		var ret DataSetFilterOperation
		return ret
	}).(DataSetFilterOperationOutput)
}

// <p>An expression that must evaluate to a Boolean value. Rows for which the expression
//
//	evaluates to true are kept in the dataset.</p>
func (o DataSetFilterOperationPtrOutput) ConditionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetFilterOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ConditionExpression
	}).(pulumi.StringPtrOutput)
}

// <p>Geospatial column group that denotes a hierarchy.</p>
type DataSetGeoSpatialColumnGroup struct {
	// <p>Columns in this hierarchy.</p>
	Columns []string `pulumi:"columns"`
	// Country code.
	CountryCode *DataSetGeoSpatialCountryCode `pulumi:"countryCode"`
	// <p>A display name for the hierarchy.</p>
	Name string `pulumi:"name"`
}

// DataSetGeoSpatialColumnGroupInput is an input type that accepts DataSetGeoSpatialColumnGroupArgs and DataSetGeoSpatialColumnGroupOutput values.
// You can construct a concrete instance of `DataSetGeoSpatialColumnGroupInput` via:
//
//	DataSetGeoSpatialColumnGroupArgs{...}
type DataSetGeoSpatialColumnGroupInput interface {
	pulumi.Input

	ToDataSetGeoSpatialColumnGroupOutput() DataSetGeoSpatialColumnGroupOutput
	ToDataSetGeoSpatialColumnGroupOutputWithContext(context.Context) DataSetGeoSpatialColumnGroupOutput
}

// <p>Geospatial column group that denotes a hierarchy.</p>
type DataSetGeoSpatialColumnGroupArgs struct {
	// <p>Columns in this hierarchy.</p>
	Columns pulumi.StringArrayInput `pulumi:"columns"`
	// Country code.
	CountryCode DataSetGeoSpatialCountryCodePtrInput `pulumi:"countryCode"`
	// <p>A display name for the hierarchy.</p>
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataSetGeoSpatialColumnGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupOutput() DataSetGeoSpatialColumnGroupOutput {
	return i.ToDataSetGeoSpatialColumnGroupOutputWithContext(context.Background())
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetGeoSpatialColumnGroupOutput)
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return i.ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (i DataSetGeoSpatialColumnGroupArgs) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetGeoSpatialColumnGroupOutput).ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx)
}

// DataSetGeoSpatialColumnGroupPtrInput is an input type that accepts DataSetGeoSpatialColumnGroupArgs, DataSetGeoSpatialColumnGroupPtr and DataSetGeoSpatialColumnGroupPtrOutput values.
// You can construct a concrete instance of `DataSetGeoSpatialColumnGroupPtrInput` via:
//
//	        DataSetGeoSpatialColumnGroupArgs{...}
//
//	or:
//
//	        nil
type DataSetGeoSpatialColumnGroupPtrInput interface {
	pulumi.Input

	ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput
	ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Context) DataSetGeoSpatialColumnGroupPtrOutput
}

type dataSetGeoSpatialColumnGroupPtrType DataSetGeoSpatialColumnGroupArgs

func DataSetGeoSpatialColumnGroupPtr(v *DataSetGeoSpatialColumnGroupArgs) DataSetGeoSpatialColumnGroupPtrInput {
	return (*dataSetGeoSpatialColumnGroupPtrType)(v)
}

func (*dataSetGeoSpatialColumnGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (i *dataSetGeoSpatialColumnGroupPtrType) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return i.ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (i *dataSetGeoSpatialColumnGroupPtrType) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetGeoSpatialColumnGroupPtrOutput)
}

// <p>Geospatial column group that denotes a hierarchy.</p>
type DataSetGeoSpatialColumnGroupOutput struct{ *pulumi.OutputState }

func (DataSetGeoSpatialColumnGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupOutput() DataSetGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return o.ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(context.Background())
}

func (o DataSetGeoSpatialColumnGroupOutput) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetGeoSpatialColumnGroup) *DataSetGeoSpatialColumnGroup {
		return &v
	}).(DataSetGeoSpatialColumnGroupPtrOutput)
}

// <p>Columns in this hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetGeoSpatialColumnGroup) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

// Country code.
func (o DataSetGeoSpatialColumnGroupOutput) CountryCode() DataSetGeoSpatialCountryCodePtrOutput {
	return o.ApplyT(func(v DataSetGeoSpatialColumnGroup) *DataSetGeoSpatialCountryCode { return v.CountryCode }).(DataSetGeoSpatialCountryCodePtrOutput)
}

// <p>A display name for the hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetGeoSpatialColumnGroup) string { return v.Name }).(pulumi.StringOutput)
}

type DataSetGeoSpatialColumnGroupPtrOutput struct{ *pulumi.OutputState }

func (DataSetGeoSpatialColumnGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetGeoSpatialColumnGroup)(nil)).Elem()
}

func (o DataSetGeoSpatialColumnGroupPtrOutput) ToDataSetGeoSpatialColumnGroupPtrOutput() DataSetGeoSpatialColumnGroupPtrOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupPtrOutput) ToDataSetGeoSpatialColumnGroupPtrOutputWithContext(ctx context.Context) DataSetGeoSpatialColumnGroupPtrOutput {
	return o
}

func (o DataSetGeoSpatialColumnGroupPtrOutput) Elem() DataSetGeoSpatialColumnGroupOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) DataSetGeoSpatialColumnGroup {
		if v != nil {
			return *v
		}
		var ret DataSetGeoSpatialColumnGroup
		return ret
	}).(DataSetGeoSpatialColumnGroupOutput)
}

// <p>Columns in this hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// Country code.
func (o DataSetGeoSpatialColumnGroupPtrOutput) CountryCode() DataSetGeoSpatialCountryCodePtrOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) *DataSetGeoSpatialCountryCode {
		if v == nil {
			return nil
		}
		return v.CountryCode
	}).(DataSetGeoSpatialCountryCodePtrOutput)
}

// <p>A display name for the hierarchy.</p>
func (o DataSetGeoSpatialColumnGroupPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetGeoSpatialColumnGroup) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// <p>The incremental refresh configuration for a dataset.</p>
type DataSetIncrementalRefresh struct {
	// The lookback window setup for an incremental refresh configuration.
	LookbackWindow DataSetLookbackWindow `pulumi:"lookbackWindow"`
}

// DataSetIncrementalRefreshInput is an input type that accepts DataSetIncrementalRefreshArgs and DataSetIncrementalRefreshOutput values.
// You can construct a concrete instance of `DataSetIncrementalRefreshInput` via:
//
//	DataSetIncrementalRefreshArgs{...}
type DataSetIncrementalRefreshInput interface {
	pulumi.Input

	ToDataSetIncrementalRefreshOutput() DataSetIncrementalRefreshOutput
	ToDataSetIncrementalRefreshOutputWithContext(context.Context) DataSetIncrementalRefreshOutput
}

// <p>The incremental refresh configuration for a dataset.</p>
type DataSetIncrementalRefreshArgs struct {
	// The lookback window setup for an incremental refresh configuration.
	LookbackWindow DataSetLookbackWindowInput `pulumi:"lookbackWindow"`
}

func (DataSetIncrementalRefreshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIncrementalRefresh)(nil)).Elem()
}

func (i DataSetIncrementalRefreshArgs) ToDataSetIncrementalRefreshOutput() DataSetIncrementalRefreshOutput {
	return i.ToDataSetIncrementalRefreshOutputWithContext(context.Background())
}

func (i DataSetIncrementalRefreshArgs) ToDataSetIncrementalRefreshOutputWithContext(ctx context.Context) DataSetIncrementalRefreshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIncrementalRefreshOutput)
}

func (i DataSetIncrementalRefreshArgs) ToDataSetIncrementalRefreshPtrOutput() DataSetIncrementalRefreshPtrOutput {
	return i.ToDataSetIncrementalRefreshPtrOutputWithContext(context.Background())
}

func (i DataSetIncrementalRefreshArgs) ToDataSetIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetIncrementalRefreshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIncrementalRefreshOutput).ToDataSetIncrementalRefreshPtrOutputWithContext(ctx)
}

// DataSetIncrementalRefreshPtrInput is an input type that accepts DataSetIncrementalRefreshArgs, DataSetIncrementalRefreshPtr and DataSetIncrementalRefreshPtrOutput values.
// You can construct a concrete instance of `DataSetIncrementalRefreshPtrInput` via:
//
//	        DataSetIncrementalRefreshArgs{...}
//
//	or:
//
//	        nil
type DataSetIncrementalRefreshPtrInput interface {
	pulumi.Input

	ToDataSetIncrementalRefreshPtrOutput() DataSetIncrementalRefreshPtrOutput
	ToDataSetIncrementalRefreshPtrOutputWithContext(context.Context) DataSetIncrementalRefreshPtrOutput
}

type dataSetIncrementalRefreshPtrType DataSetIncrementalRefreshArgs

func DataSetIncrementalRefreshPtr(v *DataSetIncrementalRefreshArgs) DataSetIncrementalRefreshPtrInput {
	return (*dataSetIncrementalRefreshPtrType)(v)
}

func (*dataSetIncrementalRefreshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIncrementalRefresh)(nil)).Elem()
}

func (i *dataSetIncrementalRefreshPtrType) ToDataSetIncrementalRefreshPtrOutput() DataSetIncrementalRefreshPtrOutput {
	return i.ToDataSetIncrementalRefreshPtrOutputWithContext(context.Background())
}

func (i *dataSetIncrementalRefreshPtrType) ToDataSetIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetIncrementalRefreshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIncrementalRefreshPtrOutput)
}

// <p>The incremental refresh configuration for a dataset.</p>
type DataSetIncrementalRefreshOutput struct{ *pulumi.OutputState }

func (DataSetIncrementalRefreshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIncrementalRefresh)(nil)).Elem()
}

func (o DataSetIncrementalRefreshOutput) ToDataSetIncrementalRefreshOutput() DataSetIncrementalRefreshOutput {
	return o
}

func (o DataSetIncrementalRefreshOutput) ToDataSetIncrementalRefreshOutputWithContext(ctx context.Context) DataSetIncrementalRefreshOutput {
	return o
}

func (o DataSetIncrementalRefreshOutput) ToDataSetIncrementalRefreshPtrOutput() DataSetIncrementalRefreshPtrOutput {
	return o.ToDataSetIncrementalRefreshPtrOutputWithContext(context.Background())
}

func (o DataSetIncrementalRefreshOutput) ToDataSetIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetIncrementalRefreshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetIncrementalRefresh) *DataSetIncrementalRefresh {
		return &v
	}).(DataSetIncrementalRefreshPtrOutput)
}

// The lookback window setup for an incremental refresh configuration.
func (o DataSetIncrementalRefreshOutput) LookbackWindow() DataSetLookbackWindowOutput {
	return o.ApplyT(func(v DataSetIncrementalRefresh) DataSetLookbackWindow { return v.LookbackWindow }).(DataSetLookbackWindowOutput)
}

type DataSetIncrementalRefreshPtrOutput struct{ *pulumi.OutputState }

func (DataSetIncrementalRefreshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIncrementalRefresh)(nil)).Elem()
}

func (o DataSetIncrementalRefreshPtrOutput) ToDataSetIncrementalRefreshPtrOutput() DataSetIncrementalRefreshPtrOutput {
	return o
}

func (o DataSetIncrementalRefreshPtrOutput) ToDataSetIncrementalRefreshPtrOutputWithContext(ctx context.Context) DataSetIncrementalRefreshPtrOutput {
	return o
}

func (o DataSetIncrementalRefreshPtrOutput) Elem() DataSetIncrementalRefreshOutput {
	return o.ApplyT(func(v *DataSetIncrementalRefresh) DataSetIncrementalRefresh {
		if v != nil {
			return *v
		}
		var ret DataSetIncrementalRefresh
		return ret
	}).(DataSetIncrementalRefreshOutput)
}

// The lookback window setup for an incremental refresh configuration.
func (o DataSetIncrementalRefreshPtrOutput) LookbackWindow() DataSetLookbackWindowPtrOutput {
	return o.ApplyT(func(v *DataSetIncrementalRefresh) *DataSetLookbackWindow {
		if v == nil {
			return nil
		}
		return &v.LookbackWindow
	}).(DataSetLookbackWindowPtrOutput)
}

// <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
type DataSetIngestionWaitPolicy struct {
	// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
	//  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
	IngestionWaitTimeInHours *float64 `pulumi:"ingestionWaitTimeInHours"`
	// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
	//   Applicable only when DataSetImportMode mode is set to SPICE.</p>
	WaitForSpiceIngestion *bool `pulumi:"waitForSpiceIngestion"`
}

// DataSetIngestionWaitPolicyInput is an input type that accepts DataSetIngestionWaitPolicyArgs and DataSetIngestionWaitPolicyOutput values.
// You can construct a concrete instance of `DataSetIngestionWaitPolicyInput` via:
//
//	DataSetIngestionWaitPolicyArgs{...}
type DataSetIngestionWaitPolicyInput interface {
	pulumi.Input

	ToDataSetIngestionWaitPolicyOutput() DataSetIngestionWaitPolicyOutput
	ToDataSetIngestionWaitPolicyOutputWithContext(context.Context) DataSetIngestionWaitPolicyOutput
}

// <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
type DataSetIngestionWaitPolicyArgs struct {
	// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
	//  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
	IngestionWaitTimeInHours pulumi.Float64PtrInput `pulumi:"ingestionWaitTimeInHours"`
	// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
	//   Applicable only when DataSetImportMode mode is set to SPICE.</p>
	WaitForSpiceIngestion pulumi.BoolPtrInput `pulumi:"waitForSpiceIngestion"`
}

func (DataSetIngestionWaitPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyOutput() DataSetIngestionWaitPolicyOutput {
	return i.ToDataSetIngestionWaitPolicyOutputWithContext(context.Background())
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIngestionWaitPolicyOutput)
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return i.ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Background())
}

func (i DataSetIngestionWaitPolicyArgs) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIngestionWaitPolicyOutput).ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx)
}

// DataSetIngestionWaitPolicyPtrInput is an input type that accepts DataSetIngestionWaitPolicyArgs, DataSetIngestionWaitPolicyPtr and DataSetIngestionWaitPolicyPtrOutput values.
// You can construct a concrete instance of `DataSetIngestionWaitPolicyPtrInput` via:
//
//	        DataSetIngestionWaitPolicyArgs{...}
//
//	or:
//
//	        nil
type DataSetIngestionWaitPolicyPtrInput interface {
	pulumi.Input

	ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput
	ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Context) DataSetIngestionWaitPolicyPtrOutput
}

type dataSetIngestionWaitPolicyPtrType DataSetIngestionWaitPolicyArgs

func DataSetIngestionWaitPolicyPtr(v *DataSetIngestionWaitPolicyArgs) DataSetIngestionWaitPolicyPtrInput {
	return (*dataSetIngestionWaitPolicyPtrType)(v)
}

func (*dataSetIngestionWaitPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (i *dataSetIngestionWaitPolicyPtrType) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return i.ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Background())
}

func (i *dataSetIngestionWaitPolicyPtrType) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIngestionWaitPolicyPtrOutput)
}

// <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
type DataSetIngestionWaitPolicyOutput struct{ *pulumi.OutputState }

func (DataSetIngestionWaitPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyOutput() DataSetIngestionWaitPolicyOutput {
	return o
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyOutput {
	return o
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return o.ToDataSetIngestionWaitPolicyPtrOutputWithContext(context.Background())
}

func (o DataSetIngestionWaitPolicyOutput) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetIngestionWaitPolicy) *DataSetIngestionWaitPolicy {
		return &v
	}).(DataSetIngestionWaitPolicyPtrOutput)
}

// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
//
//	Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
func (o DataSetIngestionWaitPolicyOutput) IngestionWaitTimeInHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DataSetIngestionWaitPolicy) *float64 { return v.IngestionWaitTimeInHours }).(pulumi.Float64PtrOutput)
}

// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
//
//	Applicable only when DataSetImportMode mode is set to SPICE.</p>
func (o DataSetIngestionWaitPolicyOutput) WaitForSpiceIngestion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetIngestionWaitPolicy) *bool { return v.WaitForSpiceIngestion }).(pulumi.BoolPtrOutput)
}

type DataSetIngestionWaitPolicyPtrOutput struct{ *pulumi.OutputState }

func (DataSetIngestionWaitPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIngestionWaitPolicy)(nil)).Elem()
}

func (o DataSetIngestionWaitPolicyPtrOutput) ToDataSetIngestionWaitPolicyPtrOutput() DataSetIngestionWaitPolicyPtrOutput {
	return o
}

func (o DataSetIngestionWaitPolicyPtrOutput) ToDataSetIngestionWaitPolicyPtrOutputWithContext(ctx context.Context) DataSetIngestionWaitPolicyPtrOutput {
	return o
}

func (o DataSetIngestionWaitPolicyPtrOutput) Elem() DataSetIngestionWaitPolicyOutput {
	return o.ApplyT(func(v *DataSetIngestionWaitPolicy) DataSetIngestionWaitPolicy {
		if v != nil {
			return *v
		}
		var ret DataSetIngestionWaitPolicy
		return ret
	}).(DataSetIngestionWaitPolicyOutput)
}

// <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
//
//	Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
func (o DataSetIngestionWaitPolicyPtrOutput) IngestionWaitTimeInHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSetIngestionWaitPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.IngestionWaitTimeInHours
	}).(pulumi.Float64PtrOutput)
}

// <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
//
//	Applicable only when DataSetImportMode mode is set to SPICE.</p>
func (o DataSetIngestionWaitPolicyPtrOutput) WaitForSpiceIngestion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetIngestionWaitPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForSpiceIngestion
	}).(pulumi.BoolPtrOutput)
}

// <p>Metadata for a column that is used as the input of a transform operation.</p>
type DataSetInputColumn struct {
	// <p>The name of this column in the underlying data source.</p>
	Name string `pulumi:"name"`
	// The sub data type of the column. Sub types are only available for decimal columns that are part of a SPICE dataset.
	SubType *DataSetColumnDataSubType `pulumi:"subType"`
	// The data type of the column.
	Type DataSetInputColumnDataType `pulumi:"type"`
}

// DataSetInputColumnInput is an input type that accepts DataSetInputColumnArgs and DataSetInputColumnOutput values.
// You can construct a concrete instance of `DataSetInputColumnInput` via:
//
//	DataSetInputColumnArgs{...}
type DataSetInputColumnInput interface {
	pulumi.Input

	ToDataSetInputColumnOutput() DataSetInputColumnOutput
	ToDataSetInputColumnOutputWithContext(context.Context) DataSetInputColumnOutput
}

// <p>Metadata for a column that is used as the input of a transform operation.</p>
type DataSetInputColumnArgs struct {
	// <p>The name of this column in the underlying data source.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// The sub data type of the column. Sub types are only available for decimal columns that are part of a SPICE dataset.
	SubType DataSetColumnDataSubTypePtrInput `pulumi:"subType"`
	// The data type of the column.
	Type DataSetInputColumnDataTypeInput `pulumi:"type"`
}

func (DataSetInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetInputColumn)(nil)).Elem()
}

func (i DataSetInputColumnArgs) ToDataSetInputColumnOutput() DataSetInputColumnOutput {
	return i.ToDataSetInputColumnOutputWithContext(context.Background())
}

func (i DataSetInputColumnArgs) ToDataSetInputColumnOutputWithContext(ctx context.Context) DataSetInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetInputColumnOutput)
}

// DataSetInputColumnArrayInput is an input type that accepts DataSetInputColumnArray and DataSetInputColumnArrayOutput values.
// You can construct a concrete instance of `DataSetInputColumnArrayInput` via:
//
//	DataSetInputColumnArray{ DataSetInputColumnArgs{...} }
type DataSetInputColumnArrayInput interface {
	pulumi.Input

	ToDataSetInputColumnArrayOutput() DataSetInputColumnArrayOutput
	ToDataSetInputColumnArrayOutputWithContext(context.Context) DataSetInputColumnArrayOutput
}

type DataSetInputColumnArray []DataSetInputColumnInput

func (DataSetInputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetInputColumn)(nil)).Elem()
}

func (i DataSetInputColumnArray) ToDataSetInputColumnArrayOutput() DataSetInputColumnArrayOutput {
	return i.ToDataSetInputColumnArrayOutputWithContext(context.Background())
}

func (i DataSetInputColumnArray) ToDataSetInputColumnArrayOutputWithContext(ctx context.Context) DataSetInputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetInputColumnArrayOutput)
}

// <p>Metadata for a column that is used as the input of a transform operation.</p>
type DataSetInputColumnOutput struct{ *pulumi.OutputState }

func (DataSetInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetInputColumn)(nil)).Elem()
}

func (o DataSetInputColumnOutput) ToDataSetInputColumnOutput() DataSetInputColumnOutput {
	return o
}

func (o DataSetInputColumnOutput) ToDataSetInputColumnOutputWithContext(ctx context.Context) DataSetInputColumnOutput {
	return o
}

// <p>The name of this column in the underlying data source.</p>
func (o DataSetInputColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetInputColumn) string { return v.Name }).(pulumi.StringOutput)
}

// The sub data type of the column. Sub types are only available for decimal columns that are part of a SPICE dataset.
func (o DataSetInputColumnOutput) SubType() DataSetColumnDataSubTypePtrOutput {
	return o.ApplyT(func(v DataSetInputColumn) *DataSetColumnDataSubType { return v.SubType }).(DataSetColumnDataSubTypePtrOutput)
}

// The data type of the column.
func (o DataSetInputColumnOutput) Type() DataSetInputColumnDataTypeOutput {
	return o.ApplyT(func(v DataSetInputColumn) DataSetInputColumnDataType { return v.Type }).(DataSetInputColumnDataTypeOutput)
}

type DataSetInputColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetInputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetInputColumn)(nil)).Elem()
}

func (o DataSetInputColumnArrayOutput) ToDataSetInputColumnArrayOutput() DataSetInputColumnArrayOutput {
	return o
}

func (o DataSetInputColumnArrayOutput) ToDataSetInputColumnArrayOutputWithContext(ctx context.Context) DataSetInputColumnArrayOutput {
	return o
}

func (o DataSetInputColumnArrayOutput) Index(i pulumi.IntInput) DataSetInputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetInputColumn {
		return vs[0].([]DataSetInputColumn)[vs[1].(int)]
	}).(DataSetInputColumnOutput)
}

// <p>An integer parameter for a dataset.</p>
type DataSetIntegerDatasetParameter struct {
	// A list of default values for a given integer parameter. This structure only accepts static values.
	DefaultValues *DataSetIntegerDatasetParameterDefaultValues `pulumi:"defaultValues"`
	// <p>An identifier for the integer parameter created in the dataset.</p>
	Id string `pulumi:"id"`
	// <p>The name of the integer parameter that is created in the dataset.</p>
	Name string `pulumi:"name"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueType `pulumi:"valueType"`
}

// DataSetIntegerDatasetParameterInput is an input type that accepts DataSetIntegerDatasetParameterArgs and DataSetIntegerDatasetParameterOutput values.
// You can construct a concrete instance of `DataSetIntegerDatasetParameterInput` via:
//
//	DataSetIntegerDatasetParameterArgs{...}
type DataSetIntegerDatasetParameterInput interface {
	pulumi.Input

	ToDataSetIntegerDatasetParameterOutput() DataSetIntegerDatasetParameterOutput
	ToDataSetIntegerDatasetParameterOutputWithContext(context.Context) DataSetIntegerDatasetParameterOutput
}

// <p>An integer parameter for a dataset.</p>
type DataSetIntegerDatasetParameterArgs struct {
	// A list of default values for a given integer parameter. This structure only accepts static values.
	DefaultValues DataSetIntegerDatasetParameterDefaultValuesPtrInput `pulumi:"defaultValues"`
	// <p>An identifier for the integer parameter created in the dataset.</p>
	Id pulumi.StringInput `pulumi:"id"`
	// <p>The name of the integer parameter that is created in the dataset.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueTypeInput `pulumi:"valueType"`
}

func (DataSetIntegerDatasetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIntegerDatasetParameter)(nil)).Elem()
}

func (i DataSetIntegerDatasetParameterArgs) ToDataSetIntegerDatasetParameterOutput() DataSetIntegerDatasetParameterOutput {
	return i.ToDataSetIntegerDatasetParameterOutputWithContext(context.Background())
}

func (i DataSetIntegerDatasetParameterArgs) ToDataSetIntegerDatasetParameterOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIntegerDatasetParameterOutput)
}

func (i DataSetIntegerDatasetParameterArgs) ToDataSetIntegerDatasetParameterPtrOutput() DataSetIntegerDatasetParameterPtrOutput {
	return i.ToDataSetIntegerDatasetParameterPtrOutputWithContext(context.Background())
}

func (i DataSetIntegerDatasetParameterArgs) ToDataSetIntegerDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIntegerDatasetParameterOutput).ToDataSetIntegerDatasetParameterPtrOutputWithContext(ctx)
}

// DataSetIntegerDatasetParameterPtrInput is an input type that accepts DataSetIntegerDatasetParameterArgs, DataSetIntegerDatasetParameterPtr and DataSetIntegerDatasetParameterPtrOutput values.
// You can construct a concrete instance of `DataSetIntegerDatasetParameterPtrInput` via:
//
//	        DataSetIntegerDatasetParameterArgs{...}
//
//	or:
//
//	        nil
type DataSetIntegerDatasetParameterPtrInput interface {
	pulumi.Input

	ToDataSetIntegerDatasetParameterPtrOutput() DataSetIntegerDatasetParameterPtrOutput
	ToDataSetIntegerDatasetParameterPtrOutputWithContext(context.Context) DataSetIntegerDatasetParameterPtrOutput
}

type dataSetIntegerDatasetParameterPtrType DataSetIntegerDatasetParameterArgs

func DataSetIntegerDatasetParameterPtr(v *DataSetIntegerDatasetParameterArgs) DataSetIntegerDatasetParameterPtrInput {
	return (*dataSetIntegerDatasetParameterPtrType)(v)
}

func (*dataSetIntegerDatasetParameterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIntegerDatasetParameter)(nil)).Elem()
}

func (i *dataSetIntegerDatasetParameterPtrType) ToDataSetIntegerDatasetParameterPtrOutput() DataSetIntegerDatasetParameterPtrOutput {
	return i.ToDataSetIntegerDatasetParameterPtrOutputWithContext(context.Background())
}

func (i *dataSetIntegerDatasetParameterPtrType) ToDataSetIntegerDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIntegerDatasetParameterPtrOutput)
}

// <p>An integer parameter for a dataset.</p>
type DataSetIntegerDatasetParameterOutput struct{ *pulumi.OutputState }

func (DataSetIntegerDatasetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIntegerDatasetParameter)(nil)).Elem()
}

func (o DataSetIntegerDatasetParameterOutput) ToDataSetIntegerDatasetParameterOutput() DataSetIntegerDatasetParameterOutput {
	return o
}

func (o DataSetIntegerDatasetParameterOutput) ToDataSetIntegerDatasetParameterOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterOutput {
	return o
}

func (o DataSetIntegerDatasetParameterOutput) ToDataSetIntegerDatasetParameterPtrOutput() DataSetIntegerDatasetParameterPtrOutput {
	return o.ToDataSetIntegerDatasetParameterPtrOutputWithContext(context.Background())
}

func (o DataSetIntegerDatasetParameterOutput) ToDataSetIntegerDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetIntegerDatasetParameter) *DataSetIntegerDatasetParameter {
		return &v
	}).(DataSetIntegerDatasetParameterPtrOutput)
}

// A list of default values for a given integer parameter. This structure only accepts static values.
func (o DataSetIntegerDatasetParameterOutput) DefaultValues() DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v DataSetIntegerDatasetParameter) *DataSetIntegerDatasetParameterDefaultValues {
		return v.DefaultValues
	}).(DataSetIntegerDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the integer parameter created in the dataset.</p>
func (o DataSetIntegerDatasetParameterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetIntegerDatasetParameter) string { return v.Id }).(pulumi.StringOutput)
}

// <p>The name of the integer parameter that is created in the dataset.</p>
func (o DataSetIntegerDatasetParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetIntegerDatasetParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetIntegerDatasetParameterOutput) ValueType() DataSetDatasetParameterValueTypeOutput {
	return o.ApplyT(func(v DataSetIntegerDatasetParameter) DataSetDatasetParameterValueType { return v.ValueType }).(DataSetDatasetParameterValueTypeOutput)
}

type DataSetIntegerDatasetParameterPtrOutput struct{ *pulumi.OutputState }

func (DataSetIntegerDatasetParameterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIntegerDatasetParameter)(nil)).Elem()
}

func (o DataSetIntegerDatasetParameterPtrOutput) ToDataSetIntegerDatasetParameterPtrOutput() DataSetIntegerDatasetParameterPtrOutput {
	return o
}

func (o DataSetIntegerDatasetParameterPtrOutput) ToDataSetIntegerDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterPtrOutput {
	return o
}

func (o DataSetIntegerDatasetParameterPtrOutput) Elem() DataSetIntegerDatasetParameterOutput {
	return o.ApplyT(func(v *DataSetIntegerDatasetParameter) DataSetIntegerDatasetParameter {
		if v != nil {
			return *v
		}
		var ret DataSetIntegerDatasetParameter
		return ret
	}).(DataSetIntegerDatasetParameterOutput)
}

// A list of default values for a given integer parameter. This structure only accepts static values.
func (o DataSetIntegerDatasetParameterPtrOutput) DefaultValues() DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v *DataSetIntegerDatasetParameter) *DataSetIntegerDatasetParameterDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(DataSetIntegerDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the integer parameter created in the dataset.</p>
func (o DataSetIntegerDatasetParameterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetIntegerDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// <p>The name of the integer parameter that is created in the dataset.</p>
func (o DataSetIntegerDatasetParameterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetIntegerDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetIntegerDatasetParameterPtrOutput) ValueType() DataSetDatasetParameterValueTypePtrOutput {
	return o.ApplyT(func(v *DataSetIntegerDatasetParameter) *DataSetDatasetParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ValueType
	}).(DataSetDatasetParameterValueTypePtrOutput)
}

// <p>The default values of an integer parameter.</p>
type DataSetIntegerDatasetParameterDefaultValues struct {
	// <p>A list of static default values for a given integer parameter.</p>
	StaticValues []float64 `pulumi:"staticValues"`
}

// DataSetIntegerDatasetParameterDefaultValuesInput is an input type that accepts DataSetIntegerDatasetParameterDefaultValuesArgs and DataSetIntegerDatasetParameterDefaultValuesOutput values.
// You can construct a concrete instance of `DataSetIntegerDatasetParameterDefaultValuesInput` via:
//
//	DataSetIntegerDatasetParameterDefaultValuesArgs{...}
type DataSetIntegerDatasetParameterDefaultValuesInput interface {
	pulumi.Input

	ToDataSetIntegerDatasetParameterDefaultValuesOutput() DataSetIntegerDatasetParameterDefaultValuesOutput
	ToDataSetIntegerDatasetParameterDefaultValuesOutputWithContext(context.Context) DataSetIntegerDatasetParameterDefaultValuesOutput
}

// <p>The default values of an integer parameter.</p>
type DataSetIntegerDatasetParameterDefaultValuesArgs struct {
	// <p>A list of static default values for a given integer parameter.</p>
	StaticValues pulumi.Float64ArrayInput `pulumi:"staticValues"`
}

func (DataSetIntegerDatasetParameterDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIntegerDatasetParameterDefaultValues)(nil)).Elem()
}

func (i DataSetIntegerDatasetParameterDefaultValuesArgs) ToDataSetIntegerDatasetParameterDefaultValuesOutput() DataSetIntegerDatasetParameterDefaultValuesOutput {
	return i.ToDataSetIntegerDatasetParameterDefaultValuesOutputWithContext(context.Background())
}

func (i DataSetIntegerDatasetParameterDefaultValuesArgs) ToDataSetIntegerDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIntegerDatasetParameterDefaultValuesOutput)
}

func (i DataSetIntegerDatasetParameterDefaultValuesArgs) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutput() DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DataSetIntegerDatasetParameterDefaultValuesArgs) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIntegerDatasetParameterDefaultValuesOutput).ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(ctx)
}

// DataSetIntegerDatasetParameterDefaultValuesPtrInput is an input type that accepts DataSetIntegerDatasetParameterDefaultValuesArgs, DataSetIntegerDatasetParameterDefaultValuesPtr and DataSetIntegerDatasetParameterDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DataSetIntegerDatasetParameterDefaultValuesPtrInput` via:
//
//	        DataSetIntegerDatasetParameterDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type DataSetIntegerDatasetParameterDefaultValuesPtrInput interface {
	pulumi.Input

	ToDataSetIntegerDatasetParameterDefaultValuesPtrOutput() DataSetIntegerDatasetParameterDefaultValuesPtrOutput
	ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(context.Context) DataSetIntegerDatasetParameterDefaultValuesPtrOutput
}

type dataSetIntegerDatasetParameterDefaultValuesPtrType DataSetIntegerDatasetParameterDefaultValuesArgs

func DataSetIntegerDatasetParameterDefaultValuesPtr(v *DataSetIntegerDatasetParameterDefaultValuesArgs) DataSetIntegerDatasetParameterDefaultValuesPtrInput {
	return (*dataSetIntegerDatasetParameterDefaultValuesPtrType)(v)
}

func (*dataSetIntegerDatasetParameterDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIntegerDatasetParameterDefaultValues)(nil)).Elem()
}

func (i *dataSetIntegerDatasetParameterDefaultValuesPtrType) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutput() DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *dataSetIntegerDatasetParameterDefaultValuesPtrType) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetIntegerDatasetParameterDefaultValuesPtrOutput)
}

// <p>The default values of an integer parameter.</p>
type DataSetIntegerDatasetParameterDefaultValuesOutput struct{ *pulumi.OutputState }

func (DataSetIntegerDatasetParameterDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetIntegerDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetIntegerDatasetParameterDefaultValuesOutput) ToDataSetIntegerDatasetParameterDefaultValuesOutput() DataSetIntegerDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetIntegerDatasetParameterDefaultValuesOutput) ToDataSetIntegerDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetIntegerDatasetParameterDefaultValuesOutput) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutput() DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return o.ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DataSetIntegerDatasetParameterDefaultValuesOutput) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetIntegerDatasetParameterDefaultValues) *DataSetIntegerDatasetParameterDefaultValues {
		return &v
	}).(DataSetIntegerDatasetParameterDefaultValuesPtrOutput)
}

// <p>A list of static default values for a given integer parameter.</p>
func (o DataSetIntegerDatasetParameterDefaultValuesOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DataSetIntegerDatasetParameterDefaultValues) []float64 { return v.StaticValues }).(pulumi.Float64ArrayOutput)
}

type DataSetIntegerDatasetParameterDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DataSetIntegerDatasetParameterDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetIntegerDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetIntegerDatasetParameterDefaultValuesPtrOutput) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutput() DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetIntegerDatasetParameterDefaultValuesPtrOutput) ToDataSetIntegerDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetIntegerDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetIntegerDatasetParameterDefaultValuesPtrOutput) Elem() DataSetIntegerDatasetParameterDefaultValuesOutput {
	return o.ApplyT(func(v *DataSetIntegerDatasetParameterDefaultValues) DataSetIntegerDatasetParameterDefaultValues {
		if v != nil {
			return *v
		}
		var ret DataSetIntegerDatasetParameterDefaultValues
		return ret
	}).(DataSetIntegerDatasetParameterDefaultValuesOutput)
}

// <p>A list of static default values for a given integer parameter.</p>
func (o DataSetIntegerDatasetParameterDefaultValuesPtrOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *DataSetIntegerDatasetParameterDefaultValues) []float64 {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.Float64ArrayOutput)
}

// <p>The instructions associated with a join. </p>
type DataSetJoinInstruction struct {
	// Join key properties of the left operand.
	LeftJoinKeyProperties *DataSetJoinKeyProperties `pulumi:"leftJoinKeyProperties"`
	// <p>The operand on the left side of a join.</p>
	LeftOperand string `pulumi:"leftOperand"`
	// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
	OnClause string `pulumi:"onClause"`
	// Join key properties of the right operand.
	RightJoinKeyProperties *DataSetJoinKeyProperties `pulumi:"rightJoinKeyProperties"`
	// <p>The operand on the right side of a join.</p>
	RightOperand string `pulumi:"rightOperand"`
	// The type of join that it is.
	Type DataSetJoinType `pulumi:"type"`
}

// DataSetJoinInstructionInput is an input type that accepts DataSetJoinInstructionArgs and DataSetJoinInstructionOutput values.
// You can construct a concrete instance of `DataSetJoinInstructionInput` via:
//
//	DataSetJoinInstructionArgs{...}
type DataSetJoinInstructionInput interface {
	pulumi.Input

	ToDataSetJoinInstructionOutput() DataSetJoinInstructionOutput
	ToDataSetJoinInstructionOutputWithContext(context.Context) DataSetJoinInstructionOutput
}

// <p>The instructions associated with a join. </p>
type DataSetJoinInstructionArgs struct {
	// Join key properties of the left operand.
	LeftJoinKeyProperties DataSetJoinKeyPropertiesPtrInput `pulumi:"leftJoinKeyProperties"`
	// <p>The operand on the left side of a join.</p>
	LeftOperand pulumi.StringInput `pulumi:"leftOperand"`
	// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
	OnClause pulumi.StringInput `pulumi:"onClause"`
	// Join key properties of the right operand.
	RightJoinKeyProperties DataSetJoinKeyPropertiesPtrInput `pulumi:"rightJoinKeyProperties"`
	// <p>The operand on the right side of a join.</p>
	RightOperand pulumi.StringInput `pulumi:"rightOperand"`
	// The type of join that it is.
	Type DataSetJoinTypeInput `pulumi:"type"`
}

func (DataSetJoinInstructionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetJoinInstruction)(nil)).Elem()
}

func (i DataSetJoinInstructionArgs) ToDataSetJoinInstructionOutput() DataSetJoinInstructionOutput {
	return i.ToDataSetJoinInstructionOutputWithContext(context.Background())
}

func (i DataSetJoinInstructionArgs) ToDataSetJoinInstructionOutputWithContext(ctx context.Context) DataSetJoinInstructionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetJoinInstructionOutput)
}

func (i DataSetJoinInstructionArgs) ToDataSetJoinInstructionPtrOutput() DataSetJoinInstructionPtrOutput {
	return i.ToDataSetJoinInstructionPtrOutputWithContext(context.Background())
}

func (i DataSetJoinInstructionArgs) ToDataSetJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetJoinInstructionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetJoinInstructionOutput).ToDataSetJoinInstructionPtrOutputWithContext(ctx)
}

// DataSetJoinInstructionPtrInput is an input type that accepts DataSetJoinInstructionArgs, DataSetJoinInstructionPtr and DataSetJoinInstructionPtrOutput values.
// You can construct a concrete instance of `DataSetJoinInstructionPtrInput` via:
//
//	        DataSetJoinInstructionArgs{...}
//
//	or:
//
//	        nil
type DataSetJoinInstructionPtrInput interface {
	pulumi.Input

	ToDataSetJoinInstructionPtrOutput() DataSetJoinInstructionPtrOutput
	ToDataSetJoinInstructionPtrOutputWithContext(context.Context) DataSetJoinInstructionPtrOutput
}

type dataSetJoinInstructionPtrType DataSetJoinInstructionArgs

func DataSetJoinInstructionPtr(v *DataSetJoinInstructionArgs) DataSetJoinInstructionPtrInput {
	return (*dataSetJoinInstructionPtrType)(v)
}

func (*dataSetJoinInstructionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetJoinInstruction)(nil)).Elem()
}

func (i *dataSetJoinInstructionPtrType) ToDataSetJoinInstructionPtrOutput() DataSetJoinInstructionPtrOutput {
	return i.ToDataSetJoinInstructionPtrOutputWithContext(context.Background())
}

func (i *dataSetJoinInstructionPtrType) ToDataSetJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetJoinInstructionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetJoinInstructionPtrOutput)
}

// <p>The instructions associated with a join. </p>
type DataSetJoinInstructionOutput struct{ *pulumi.OutputState }

func (DataSetJoinInstructionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetJoinInstruction)(nil)).Elem()
}

func (o DataSetJoinInstructionOutput) ToDataSetJoinInstructionOutput() DataSetJoinInstructionOutput {
	return o
}

func (o DataSetJoinInstructionOutput) ToDataSetJoinInstructionOutputWithContext(ctx context.Context) DataSetJoinInstructionOutput {
	return o
}

func (o DataSetJoinInstructionOutput) ToDataSetJoinInstructionPtrOutput() DataSetJoinInstructionPtrOutput {
	return o.ToDataSetJoinInstructionPtrOutputWithContext(context.Background())
}

func (o DataSetJoinInstructionOutput) ToDataSetJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetJoinInstructionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetJoinInstruction) *DataSetJoinInstruction {
		return &v
	}).(DataSetJoinInstructionPtrOutput)
}

// Join key properties of the left operand.
func (o DataSetJoinInstructionOutput) LeftJoinKeyProperties() DataSetJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v DataSetJoinInstruction) *DataSetJoinKeyProperties { return v.LeftJoinKeyProperties }).(DataSetJoinKeyPropertiesPtrOutput)
}

// <p>The operand on the left side of a join.</p>
func (o DataSetJoinInstructionOutput) LeftOperand() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetJoinInstruction) string { return v.LeftOperand }).(pulumi.StringOutput)
}

// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
func (o DataSetJoinInstructionOutput) OnClause() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetJoinInstruction) string { return v.OnClause }).(pulumi.StringOutput)
}

// Join key properties of the right operand.
func (o DataSetJoinInstructionOutput) RightJoinKeyProperties() DataSetJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v DataSetJoinInstruction) *DataSetJoinKeyProperties { return v.RightJoinKeyProperties }).(DataSetJoinKeyPropertiesPtrOutput)
}

// <p>The operand on the right side of a join.</p>
func (o DataSetJoinInstructionOutput) RightOperand() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetJoinInstruction) string { return v.RightOperand }).(pulumi.StringOutput)
}

// The type of join that it is.
func (o DataSetJoinInstructionOutput) Type() DataSetJoinTypeOutput {
	return o.ApplyT(func(v DataSetJoinInstruction) DataSetJoinType { return v.Type }).(DataSetJoinTypeOutput)
}

type DataSetJoinInstructionPtrOutput struct{ *pulumi.OutputState }

func (DataSetJoinInstructionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetJoinInstruction)(nil)).Elem()
}

func (o DataSetJoinInstructionPtrOutput) ToDataSetJoinInstructionPtrOutput() DataSetJoinInstructionPtrOutput {
	return o
}

func (o DataSetJoinInstructionPtrOutput) ToDataSetJoinInstructionPtrOutputWithContext(ctx context.Context) DataSetJoinInstructionPtrOutput {
	return o
}

func (o DataSetJoinInstructionPtrOutput) Elem() DataSetJoinInstructionOutput {
	return o.ApplyT(func(v *DataSetJoinInstruction) DataSetJoinInstruction {
		if v != nil {
			return *v
		}
		var ret DataSetJoinInstruction
		return ret
	}).(DataSetJoinInstructionOutput)
}

// Join key properties of the left operand.
func (o DataSetJoinInstructionPtrOutput) LeftJoinKeyProperties() DataSetJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSetJoinInstruction) *DataSetJoinKeyProperties {
		if v == nil {
			return nil
		}
		return v.LeftJoinKeyProperties
	}).(DataSetJoinKeyPropertiesPtrOutput)
}

// <p>The operand on the left side of a join.</p>
func (o DataSetJoinInstructionPtrOutput) LeftOperand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetJoinInstruction) *string {
		if v == nil {
			return nil
		}
		return &v.LeftOperand
	}).(pulumi.StringPtrOutput)
}

// <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
func (o DataSetJoinInstructionPtrOutput) OnClause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetJoinInstruction) *string {
		if v == nil {
			return nil
		}
		return &v.OnClause
	}).(pulumi.StringPtrOutput)
}

// Join key properties of the right operand.
func (o DataSetJoinInstructionPtrOutput) RightJoinKeyProperties() DataSetJoinKeyPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSetJoinInstruction) *DataSetJoinKeyProperties {
		if v == nil {
			return nil
		}
		return v.RightJoinKeyProperties
	}).(DataSetJoinKeyPropertiesPtrOutput)
}

// <p>The operand on the right side of a join.</p>
func (o DataSetJoinInstructionPtrOutput) RightOperand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetJoinInstruction) *string {
		if v == nil {
			return nil
		}
		return &v.RightOperand
	}).(pulumi.StringPtrOutput)
}

// The type of join that it is.
func (o DataSetJoinInstructionPtrOutput) Type() DataSetJoinTypePtrOutput {
	return o.ApplyT(func(v *DataSetJoinInstruction) *DataSetJoinType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(DataSetJoinTypePtrOutput)
}

// <p>Properties associated with the columns participating in a join.</p>
type DataSetJoinKeyProperties struct {
	// <p>A value that indicates that a row in a table is uniquely identified by the columns in
	//             a join key. This is used by Amazon QuickSight to optimize query performance.</p>
	UniqueKey *bool `pulumi:"uniqueKey"`
}

// DataSetJoinKeyPropertiesInput is an input type that accepts DataSetJoinKeyPropertiesArgs and DataSetJoinKeyPropertiesOutput values.
// You can construct a concrete instance of `DataSetJoinKeyPropertiesInput` via:
//
//	DataSetJoinKeyPropertiesArgs{...}
type DataSetJoinKeyPropertiesInput interface {
	pulumi.Input

	ToDataSetJoinKeyPropertiesOutput() DataSetJoinKeyPropertiesOutput
	ToDataSetJoinKeyPropertiesOutputWithContext(context.Context) DataSetJoinKeyPropertiesOutput
}

// <p>Properties associated with the columns participating in a join.</p>
type DataSetJoinKeyPropertiesArgs struct {
	// <p>A value that indicates that a row in a table is uniquely identified by the columns in
	//             a join key. This is used by Amazon QuickSight to optimize query performance.</p>
	UniqueKey pulumi.BoolPtrInput `pulumi:"uniqueKey"`
}

func (DataSetJoinKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetJoinKeyProperties)(nil)).Elem()
}

func (i DataSetJoinKeyPropertiesArgs) ToDataSetJoinKeyPropertiesOutput() DataSetJoinKeyPropertiesOutput {
	return i.ToDataSetJoinKeyPropertiesOutputWithContext(context.Background())
}

func (i DataSetJoinKeyPropertiesArgs) ToDataSetJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetJoinKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetJoinKeyPropertiesOutput)
}

func (i DataSetJoinKeyPropertiesArgs) ToDataSetJoinKeyPropertiesPtrOutput() DataSetJoinKeyPropertiesPtrOutput {
	return i.ToDataSetJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSetJoinKeyPropertiesArgs) ToDataSetJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetJoinKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetJoinKeyPropertiesOutput).ToDataSetJoinKeyPropertiesPtrOutputWithContext(ctx)
}

// DataSetJoinKeyPropertiesPtrInput is an input type that accepts DataSetJoinKeyPropertiesArgs, DataSetJoinKeyPropertiesPtr and DataSetJoinKeyPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSetJoinKeyPropertiesPtrInput` via:
//
//	        DataSetJoinKeyPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSetJoinKeyPropertiesPtrInput interface {
	pulumi.Input

	ToDataSetJoinKeyPropertiesPtrOutput() DataSetJoinKeyPropertiesPtrOutput
	ToDataSetJoinKeyPropertiesPtrOutputWithContext(context.Context) DataSetJoinKeyPropertiesPtrOutput
}

type dataSetJoinKeyPropertiesPtrType DataSetJoinKeyPropertiesArgs

func DataSetJoinKeyPropertiesPtr(v *DataSetJoinKeyPropertiesArgs) DataSetJoinKeyPropertiesPtrInput {
	return (*dataSetJoinKeyPropertiesPtrType)(v)
}

func (*dataSetJoinKeyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetJoinKeyProperties)(nil)).Elem()
}

func (i *dataSetJoinKeyPropertiesPtrType) ToDataSetJoinKeyPropertiesPtrOutput() DataSetJoinKeyPropertiesPtrOutput {
	return i.ToDataSetJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSetJoinKeyPropertiesPtrType) ToDataSetJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetJoinKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetJoinKeyPropertiesPtrOutput)
}

// <p>Properties associated with the columns participating in a join.</p>
type DataSetJoinKeyPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetJoinKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetJoinKeyProperties)(nil)).Elem()
}

func (o DataSetJoinKeyPropertiesOutput) ToDataSetJoinKeyPropertiesOutput() DataSetJoinKeyPropertiesOutput {
	return o
}

func (o DataSetJoinKeyPropertiesOutput) ToDataSetJoinKeyPropertiesOutputWithContext(ctx context.Context) DataSetJoinKeyPropertiesOutput {
	return o
}

func (o DataSetJoinKeyPropertiesOutput) ToDataSetJoinKeyPropertiesPtrOutput() DataSetJoinKeyPropertiesPtrOutput {
	return o.ToDataSetJoinKeyPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSetJoinKeyPropertiesOutput) ToDataSetJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetJoinKeyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetJoinKeyProperties) *DataSetJoinKeyProperties {
		return &v
	}).(DataSetJoinKeyPropertiesPtrOutput)
}

// <p>A value that indicates that a row in a table is uniquely identified by the columns in
//
//	a join key. This is used by Amazon QuickSight to optimize query performance.</p>
func (o DataSetJoinKeyPropertiesOutput) UniqueKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetJoinKeyProperties) *bool { return v.UniqueKey }).(pulumi.BoolPtrOutput)
}

type DataSetJoinKeyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSetJoinKeyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetJoinKeyProperties)(nil)).Elem()
}

func (o DataSetJoinKeyPropertiesPtrOutput) ToDataSetJoinKeyPropertiesPtrOutput() DataSetJoinKeyPropertiesPtrOutput {
	return o
}

func (o DataSetJoinKeyPropertiesPtrOutput) ToDataSetJoinKeyPropertiesPtrOutputWithContext(ctx context.Context) DataSetJoinKeyPropertiesPtrOutput {
	return o
}

func (o DataSetJoinKeyPropertiesPtrOutput) Elem() DataSetJoinKeyPropertiesOutput {
	return o.ApplyT(func(v *DataSetJoinKeyProperties) DataSetJoinKeyProperties {
		if v != nil {
			return *v
		}
		var ret DataSetJoinKeyProperties
		return ret
	}).(DataSetJoinKeyPropertiesOutput)
}

// <p>A value that indicates that a row in a table is uniquely identified by the columns in
//
//	a join key. This is used by Amazon QuickSight to optimize query performance.</p>
func (o DataSetJoinKeyPropertiesPtrOutput) UniqueKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetJoinKeyProperties) *bool {
		if v == nil {
			return nil
		}
		return v.UniqueKey
	}).(pulumi.BoolPtrOutput)
}

// <p>A <i>logical table</i> is a unit that joins and that data
//
//	transformations operate on. A logical table has a source, which can be either a physical
//	table or result of a join. When a logical table points to a physical table, the logical
//	table acts as a mutable copy of that physical table through transform operations.</p>
type DataSetLogicalTable struct {
	// <p>A display name for the logical table.</p>
	Alias string `pulumi:"alias"`
	// <p>Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. </p>
	DataTransforms []DataSetTransformOperation `pulumi:"dataTransforms"`
	// Source of this logical table.
	Source *DataSetLogicalTableSource `pulumi:"source"`
}

// DataSetLogicalTableInput is an input type that accepts DataSetLogicalTableArgs and DataSetLogicalTableOutput values.
// You can construct a concrete instance of `DataSetLogicalTableInput` via:
//
//	DataSetLogicalTableArgs{...}
type DataSetLogicalTableInput interface {
	pulumi.Input

	ToDataSetLogicalTableOutput() DataSetLogicalTableOutput
	ToDataSetLogicalTableOutputWithContext(context.Context) DataSetLogicalTableOutput
}

// <p>A <i>logical table</i> is a unit that joins and that data
//
//	transformations operate on. A logical table has a source, which can be either a physical
//	table or result of a join. When a logical table points to a physical table, the logical
//	table acts as a mutable copy of that physical table through transform operations.</p>
type DataSetLogicalTableArgs struct {
	// <p>A display name for the logical table.</p>
	Alias pulumi.StringInput `pulumi:"alias"`
	// <p>Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. </p>
	DataTransforms DataSetTransformOperationArrayInput `pulumi:"dataTransforms"`
	// Source of this logical table.
	Source DataSetLogicalTableSourcePtrInput `pulumi:"source"`
}

func (DataSetLogicalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTable)(nil)).Elem()
}

func (i DataSetLogicalTableArgs) ToDataSetLogicalTableOutput() DataSetLogicalTableOutput {
	return i.ToDataSetLogicalTableOutputWithContext(context.Background())
}

func (i DataSetLogicalTableArgs) ToDataSetLogicalTableOutputWithContext(ctx context.Context) DataSetLogicalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableOutput)
}

// DataSetLogicalTableMapInput is an input type that accepts DataSetLogicalTableMap and DataSetLogicalTableMapOutput values.
// You can construct a concrete instance of `DataSetLogicalTableMapInput` via:
//
//	DataSetLogicalTableMap{ "key": DataSetLogicalTableArgs{...} }
type DataSetLogicalTableMapInput interface {
	pulumi.Input

	ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput
	ToDataSetLogicalTableMapOutputWithContext(context.Context) DataSetLogicalTableMapOutput
}

type DataSetLogicalTableMap map[string]DataSetLogicalTableInput

func (DataSetLogicalTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSetLogicalTable)(nil)).Elem()
}

func (i DataSetLogicalTableMap) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return i.ToDataSetLogicalTableMapOutputWithContext(context.Background())
}

func (i DataSetLogicalTableMap) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableMapOutput)
}

// <p>A <i>logical table</i> is a unit that joins and that data
//
//	transformations operate on. A logical table has a source, which can be either a physical
//	table or result of a join. When a logical table points to a physical table, the logical
//	table acts as a mutable copy of that physical table through transform operations.</p>
type DataSetLogicalTableOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTable)(nil)).Elem()
}

func (o DataSetLogicalTableOutput) ToDataSetLogicalTableOutput() DataSetLogicalTableOutput {
	return o
}

func (o DataSetLogicalTableOutput) ToDataSetLogicalTableOutputWithContext(ctx context.Context) DataSetLogicalTableOutput {
	return o
}

// <p>A display name for the logical table.</p>
func (o DataSetLogicalTableOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLogicalTable) string { return v.Alias }).(pulumi.StringOutput)
}

// <p>Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. </p>
func (o DataSetLogicalTableOutput) DataTransforms() DataSetTransformOperationArrayOutput {
	return o.ApplyT(func(v DataSetLogicalTable) []DataSetTransformOperation { return v.DataTransforms }).(DataSetTransformOperationArrayOutput)
}

// Source of this logical table.
func (o DataSetLogicalTableOutput) Source() DataSetLogicalTableSourcePtrOutput {
	return o.ApplyT(func(v DataSetLogicalTable) *DataSetLogicalTableSource { return v.Source }).(DataSetLogicalTableSourcePtrOutput)
}

type DataSetLogicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSetLogicalTable)(nil)).Elem()
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutput() DataSetLogicalTableMapOutput {
	return o
}

func (o DataSetLogicalTableMapOutput) ToDataSetLogicalTableMapOutputWithContext(ctx context.Context) DataSetLogicalTableMapOutput {
	return o
}

func (o DataSetLogicalTableMapOutput) MapIndex(k pulumi.StringInput) DataSetLogicalTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataSetLogicalTable {
		return vs[0].(map[string]DataSetLogicalTable)[vs[1].(string)]
	}).(DataSetLogicalTableOutput)
}

// <p>Information about the source of a logical table. This is a variant type structure. For
//
//	this structure to be valid, only one of the attributes can be non-null.</p>
type DataSetLogicalTableSource struct {
	// <p>The Amazon Resource Number (ARN) of the parent dataset.</p>
	DataSetArn *string `pulumi:"dataSetArn"`
	// Specifies the result of a join of two logical tables.
	JoinInstruction *DataSetJoinInstruction `pulumi:"joinInstruction"`
	// <p>Physical table ID.</p>
	PhysicalTableId *string `pulumi:"physicalTableId"`
}

// DataSetLogicalTableSourceInput is an input type that accepts DataSetLogicalTableSourceArgs and DataSetLogicalTableSourceOutput values.
// You can construct a concrete instance of `DataSetLogicalTableSourceInput` via:
//
//	DataSetLogicalTableSourceArgs{...}
type DataSetLogicalTableSourceInput interface {
	pulumi.Input

	ToDataSetLogicalTableSourceOutput() DataSetLogicalTableSourceOutput
	ToDataSetLogicalTableSourceOutputWithContext(context.Context) DataSetLogicalTableSourceOutput
}

// <p>Information about the source of a logical table. This is a variant type structure. For
//
//	this structure to be valid, only one of the attributes can be non-null.</p>
type DataSetLogicalTableSourceArgs struct {
	// <p>The Amazon Resource Number (ARN) of the parent dataset.</p>
	DataSetArn pulumi.StringPtrInput `pulumi:"dataSetArn"`
	// Specifies the result of a join of two logical tables.
	JoinInstruction DataSetJoinInstructionPtrInput `pulumi:"joinInstruction"`
	// <p>Physical table ID.</p>
	PhysicalTableId pulumi.StringPtrInput `pulumi:"physicalTableId"`
}

func (DataSetLogicalTableSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableSource)(nil)).Elem()
}

func (i DataSetLogicalTableSourceArgs) ToDataSetLogicalTableSourceOutput() DataSetLogicalTableSourceOutput {
	return i.ToDataSetLogicalTableSourceOutputWithContext(context.Background())
}

func (i DataSetLogicalTableSourceArgs) ToDataSetLogicalTableSourceOutputWithContext(ctx context.Context) DataSetLogicalTableSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableSourceOutput)
}

func (i DataSetLogicalTableSourceArgs) ToDataSetLogicalTableSourcePtrOutput() DataSetLogicalTableSourcePtrOutput {
	return i.ToDataSetLogicalTableSourcePtrOutputWithContext(context.Background())
}

func (i DataSetLogicalTableSourceArgs) ToDataSetLogicalTableSourcePtrOutputWithContext(ctx context.Context) DataSetLogicalTableSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableSourceOutput).ToDataSetLogicalTableSourcePtrOutputWithContext(ctx)
}

// DataSetLogicalTableSourcePtrInput is an input type that accepts DataSetLogicalTableSourceArgs, DataSetLogicalTableSourcePtr and DataSetLogicalTableSourcePtrOutput values.
// You can construct a concrete instance of `DataSetLogicalTableSourcePtrInput` via:
//
//	        DataSetLogicalTableSourceArgs{...}
//
//	or:
//
//	        nil
type DataSetLogicalTableSourcePtrInput interface {
	pulumi.Input

	ToDataSetLogicalTableSourcePtrOutput() DataSetLogicalTableSourcePtrOutput
	ToDataSetLogicalTableSourcePtrOutputWithContext(context.Context) DataSetLogicalTableSourcePtrOutput
}

type dataSetLogicalTableSourcePtrType DataSetLogicalTableSourceArgs

func DataSetLogicalTableSourcePtr(v *DataSetLogicalTableSourceArgs) DataSetLogicalTableSourcePtrInput {
	return (*dataSetLogicalTableSourcePtrType)(v)
}

func (*dataSetLogicalTableSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableSource)(nil)).Elem()
}

func (i *dataSetLogicalTableSourcePtrType) ToDataSetLogicalTableSourcePtrOutput() DataSetLogicalTableSourcePtrOutput {
	return i.ToDataSetLogicalTableSourcePtrOutputWithContext(context.Background())
}

func (i *dataSetLogicalTableSourcePtrType) ToDataSetLogicalTableSourcePtrOutputWithContext(ctx context.Context) DataSetLogicalTableSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLogicalTableSourcePtrOutput)
}

// <p>Information about the source of a logical table. This is a variant type structure. For
//
//	this structure to be valid, only one of the attributes can be non-null.</p>
type DataSetLogicalTableSourceOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLogicalTableSource)(nil)).Elem()
}

func (o DataSetLogicalTableSourceOutput) ToDataSetLogicalTableSourceOutput() DataSetLogicalTableSourceOutput {
	return o
}

func (o DataSetLogicalTableSourceOutput) ToDataSetLogicalTableSourceOutputWithContext(ctx context.Context) DataSetLogicalTableSourceOutput {
	return o
}

func (o DataSetLogicalTableSourceOutput) ToDataSetLogicalTableSourcePtrOutput() DataSetLogicalTableSourcePtrOutput {
	return o.ToDataSetLogicalTableSourcePtrOutputWithContext(context.Background())
}

func (o DataSetLogicalTableSourceOutput) ToDataSetLogicalTableSourcePtrOutputWithContext(ctx context.Context) DataSetLogicalTableSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLogicalTableSource) *DataSetLogicalTableSource {
		return &v
	}).(DataSetLogicalTableSourcePtrOutput)
}

// <p>The Amazon Resource Number (ARN) of the parent dataset.</p>
func (o DataSetLogicalTableSourceOutput) DataSetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableSource) *string { return v.DataSetArn }).(pulumi.StringPtrOutput)
}

// Specifies the result of a join of two logical tables.
func (o DataSetLogicalTableSourceOutput) JoinInstruction() DataSetJoinInstructionPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableSource) *DataSetJoinInstruction { return v.JoinInstruction }).(DataSetJoinInstructionPtrOutput)
}

// <p>Physical table ID.</p>
func (o DataSetLogicalTableSourceOutput) PhysicalTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetLogicalTableSource) *string { return v.PhysicalTableId }).(pulumi.StringPtrOutput)
}

type DataSetLogicalTableSourcePtrOutput struct{ *pulumi.OutputState }

func (DataSetLogicalTableSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLogicalTableSource)(nil)).Elem()
}

func (o DataSetLogicalTableSourcePtrOutput) ToDataSetLogicalTableSourcePtrOutput() DataSetLogicalTableSourcePtrOutput {
	return o
}

func (o DataSetLogicalTableSourcePtrOutput) ToDataSetLogicalTableSourcePtrOutputWithContext(ctx context.Context) DataSetLogicalTableSourcePtrOutput {
	return o
}

func (o DataSetLogicalTableSourcePtrOutput) Elem() DataSetLogicalTableSourceOutput {
	return o.ApplyT(func(v *DataSetLogicalTableSource) DataSetLogicalTableSource {
		if v != nil {
			return *v
		}
		var ret DataSetLogicalTableSource
		return ret
	}).(DataSetLogicalTableSourceOutput)
}

// <p>The Amazon Resource Number (ARN) of the parent dataset.</p>
func (o DataSetLogicalTableSourcePtrOutput) DataSetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableSource) *string {
		if v == nil {
			return nil
		}
		return v.DataSetArn
	}).(pulumi.StringPtrOutput)
}

// Specifies the result of a join of two logical tables.
func (o DataSetLogicalTableSourcePtrOutput) JoinInstruction() DataSetJoinInstructionPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableSource) *DataSetJoinInstruction {
		if v == nil {
			return nil
		}
		return v.JoinInstruction
	}).(DataSetJoinInstructionPtrOutput)
}

// <p>Physical table ID.</p>
func (o DataSetLogicalTableSourcePtrOutput) PhysicalTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLogicalTableSource) *string {
		if v == nil {
			return nil
		}
		return v.PhysicalTableId
	}).(pulumi.StringPtrOutput)
}

// <p>The lookback window setup of an incremental refresh configuration.</p>
type DataSetLookbackWindow struct {
	// <p>The name of the lookback window column.</p>
	ColumnName string `pulumi:"columnName"`
	// <p>The lookback window column size.</p>
	Size float64 `pulumi:"size"`
	// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR` , `DAY` , and `WEEK` .
	SizeUnit DataSetLookbackWindowSizeUnit `pulumi:"sizeUnit"`
}

// DataSetLookbackWindowInput is an input type that accepts DataSetLookbackWindowArgs and DataSetLookbackWindowOutput values.
// You can construct a concrete instance of `DataSetLookbackWindowInput` via:
//
//	DataSetLookbackWindowArgs{...}
type DataSetLookbackWindowInput interface {
	pulumi.Input

	ToDataSetLookbackWindowOutput() DataSetLookbackWindowOutput
	ToDataSetLookbackWindowOutputWithContext(context.Context) DataSetLookbackWindowOutput
}

// <p>The lookback window setup of an incremental refresh configuration.</p>
type DataSetLookbackWindowArgs struct {
	// <p>The name of the lookback window column.</p>
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// <p>The lookback window column size.</p>
	Size pulumi.Float64Input `pulumi:"size"`
	// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR` , `DAY` , and `WEEK` .
	SizeUnit DataSetLookbackWindowSizeUnitInput `pulumi:"sizeUnit"`
}

func (DataSetLookbackWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLookbackWindow)(nil)).Elem()
}

func (i DataSetLookbackWindowArgs) ToDataSetLookbackWindowOutput() DataSetLookbackWindowOutput {
	return i.ToDataSetLookbackWindowOutputWithContext(context.Background())
}

func (i DataSetLookbackWindowArgs) ToDataSetLookbackWindowOutputWithContext(ctx context.Context) DataSetLookbackWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLookbackWindowOutput)
}

func (i DataSetLookbackWindowArgs) ToDataSetLookbackWindowPtrOutput() DataSetLookbackWindowPtrOutput {
	return i.ToDataSetLookbackWindowPtrOutputWithContext(context.Background())
}

func (i DataSetLookbackWindowArgs) ToDataSetLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetLookbackWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLookbackWindowOutput).ToDataSetLookbackWindowPtrOutputWithContext(ctx)
}

// DataSetLookbackWindowPtrInput is an input type that accepts DataSetLookbackWindowArgs, DataSetLookbackWindowPtr and DataSetLookbackWindowPtrOutput values.
// You can construct a concrete instance of `DataSetLookbackWindowPtrInput` via:
//
//	        DataSetLookbackWindowArgs{...}
//
//	or:
//
//	        nil
type DataSetLookbackWindowPtrInput interface {
	pulumi.Input

	ToDataSetLookbackWindowPtrOutput() DataSetLookbackWindowPtrOutput
	ToDataSetLookbackWindowPtrOutputWithContext(context.Context) DataSetLookbackWindowPtrOutput
}

type dataSetLookbackWindowPtrType DataSetLookbackWindowArgs

func DataSetLookbackWindowPtr(v *DataSetLookbackWindowArgs) DataSetLookbackWindowPtrInput {
	return (*dataSetLookbackWindowPtrType)(v)
}

func (*dataSetLookbackWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLookbackWindow)(nil)).Elem()
}

func (i *dataSetLookbackWindowPtrType) ToDataSetLookbackWindowPtrOutput() DataSetLookbackWindowPtrOutput {
	return i.ToDataSetLookbackWindowPtrOutputWithContext(context.Background())
}

func (i *dataSetLookbackWindowPtrType) ToDataSetLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetLookbackWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetLookbackWindowPtrOutput)
}

// <p>The lookback window setup of an incremental refresh configuration.</p>
type DataSetLookbackWindowOutput struct{ *pulumi.OutputState }

func (DataSetLookbackWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetLookbackWindow)(nil)).Elem()
}

func (o DataSetLookbackWindowOutput) ToDataSetLookbackWindowOutput() DataSetLookbackWindowOutput {
	return o
}

func (o DataSetLookbackWindowOutput) ToDataSetLookbackWindowOutputWithContext(ctx context.Context) DataSetLookbackWindowOutput {
	return o
}

func (o DataSetLookbackWindowOutput) ToDataSetLookbackWindowPtrOutput() DataSetLookbackWindowPtrOutput {
	return o.ToDataSetLookbackWindowPtrOutputWithContext(context.Background())
}

func (o DataSetLookbackWindowOutput) ToDataSetLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetLookbackWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetLookbackWindow) *DataSetLookbackWindow {
		return &v
	}).(DataSetLookbackWindowPtrOutput)
}

// <p>The name of the lookback window column.</p>
func (o DataSetLookbackWindowOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetLookbackWindow) string { return v.ColumnName }).(pulumi.StringOutput)
}

// <p>The lookback window column size.</p>
func (o DataSetLookbackWindowOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v DataSetLookbackWindow) float64 { return v.Size }).(pulumi.Float64Output)
}

// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR` , `DAY` , and `WEEK` .
func (o DataSetLookbackWindowOutput) SizeUnit() DataSetLookbackWindowSizeUnitOutput {
	return o.ApplyT(func(v DataSetLookbackWindow) DataSetLookbackWindowSizeUnit { return v.SizeUnit }).(DataSetLookbackWindowSizeUnitOutput)
}

type DataSetLookbackWindowPtrOutput struct{ *pulumi.OutputState }

func (DataSetLookbackWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetLookbackWindow)(nil)).Elem()
}

func (o DataSetLookbackWindowPtrOutput) ToDataSetLookbackWindowPtrOutput() DataSetLookbackWindowPtrOutput {
	return o
}

func (o DataSetLookbackWindowPtrOutput) ToDataSetLookbackWindowPtrOutputWithContext(ctx context.Context) DataSetLookbackWindowPtrOutput {
	return o
}

func (o DataSetLookbackWindowPtrOutput) Elem() DataSetLookbackWindowOutput {
	return o.ApplyT(func(v *DataSetLookbackWindow) DataSetLookbackWindow {
		if v != nil {
			return *v
		}
		var ret DataSetLookbackWindow
		return ret
	}).(DataSetLookbackWindowOutput)
}

// <p>The name of the lookback window column.</p>
func (o DataSetLookbackWindowPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetLookbackWindow) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// <p>The lookback window column size.</p>
func (o DataSetLookbackWindowPtrOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSetLookbackWindow) *float64 {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.Float64PtrOutput)
}

// The size unit that is used for the lookback window column. Valid values for this structure are `HOUR` , `DAY` , and `WEEK` .
func (o DataSetLookbackWindowPtrOutput) SizeUnit() DataSetLookbackWindowSizeUnitPtrOutput {
	return o.ApplyT(func(v *DataSetLookbackWindow) *DataSetLookbackWindowSizeUnit {
		if v == nil {
			return nil
		}
		return &v.SizeUnit
	}).(DataSetLookbackWindowSizeUnitPtrOutput)
}

// <p>The configuration that overrides the existing default values for a dataset parameter that is inherited from another dataset.</p>
type DataSetNewDefaultValues struct {
	// <p>A list of static default values for a given date time parameter.</p>
	DateTimeStaticValues []string `pulumi:"dateTimeStaticValues"`
	// <p>A list of static default values for a given decimal parameter.</p>
	DecimalStaticValues []float64 `pulumi:"decimalStaticValues"`
	// <p>A list of static default values for a given integer parameter.</p>
	IntegerStaticValues []float64 `pulumi:"integerStaticValues"`
	// <p>A list of static default values for a given string parameter.</p>
	StringStaticValues []string `pulumi:"stringStaticValues"`
}

// DataSetNewDefaultValuesInput is an input type that accepts DataSetNewDefaultValuesArgs and DataSetNewDefaultValuesOutput values.
// You can construct a concrete instance of `DataSetNewDefaultValuesInput` via:
//
//	DataSetNewDefaultValuesArgs{...}
type DataSetNewDefaultValuesInput interface {
	pulumi.Input

	ToDataSetNewDefaultValuesOutput() DataSetNewDefaultValuesOutput
	ToDataSetNewDefaultValuesOutputWithContext(context.Context) DataSetNewDefaultValuesOutput
}

// <p>The configuration that overrides the existing default values for a dataset parameter that is inherited from another dataset.</p>
type DataSetNewDefaultValuesArgs struct {
	// <p>A list of static default values for a given date time parameter.</p>
	DateTimeStaticValues pulumi.StringArrayInput `pulumi:"dateTimeStaticValues"`
	// <p>A list of static default values for a given decimal parameter.</p>
	DecimalStaticValues pulumi.Float64ArrayInput `pulumi:"decimalStaticValues"`
	// <p>A list of static default values for a given integer parameter.</p>
	IntegerStaticValues pulumi.Float64ArrayInput `pulumi:"integerStaticValues"`
	// <p>A list of static default values for a given string parameter.</p>
	StringStaticValues pulumi.StringArrayInput `pulumi:"stringStaticValues"`
}

func (DataSetNewDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetNewDefaultValues)(nil)).Elem()
}

func (i DataSetNewDefaultValuesArgs) ToDataSetNewDefaultValuesOutput() DataSetNewDefaultValuesOutput {
	return i.ToDataSetNewDefaultValuesOutputWithContext(context.Background())
}

func (i DataSetNewDefaultValuesArgs) ToDataSetNewDefaultValuesOutputWithContext(ctx context.Context) DataSetNewDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetNewDefaultValuesOutput)
}

func (i DataSetNewDefaultValuesArgs) ToDataSetNewDefaultValuesPtrOutput() DataSetNewDefaultValuesPtrOutput {
	return i.ToDataSetNewDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DataSetNewDefaultValuesArgs) ToDataSetNewDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetNewDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetNewDefaultValuesOutput).ToDataSetNewDefaultValuesPtrOutputWithContext(ctx)
}

// DataSetNewDefaultValuesPtrInput is an input type that accepts DataSetNewDefaultValuesArgs, DataSetNewDefaultValuesPtr and DataSetNewDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DataSetNewDefaultValuesPtrInput` via:
//
//	        DataSetNewDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type DataSetNewDefaultValuesPtrInput interface {
	pulumi.Input

	ToDataSetNewDefaultValuesPtrOutput() DataSetNewDefaultValuesPtrOutput
	ToDataSetNewDefaultValuesPtrOutputWithContext(context.Context) DataSetNewDefaultValuesPtrOutput
}

type dataSetNewDefaultValuesPtrType DataSetNewDefaultValuesArgs

func DataSetNewDefaultValuesPtr(v *DataSetNewDefaultValuesArgs) DataSetNewDefaultValuesPtrInput {
	return (*dataSetNewDefaultValuesPtrType)(v)
}

func (*dataSetNewDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetNewDefaultValues)(nil)).Elem()
}

func (i *dataSetNewDefaultValuesPtrType) ToDataSetNewDefaultValuesPtrOutput() DataSetNewDefaultValuesPtrOutput {
	return i.ToDataSetNewDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *dataSetNewDefaultValuesPtrType) ToDataSetNewDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetNewDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetNewDefaultValuesPtrOutput)
}

// <p>The configuration that overrides the existing default values for a dataset parameter that is inherited from another dataset.</p>
type DataSetNewDefaultValuesOutput struct{ *pulumi.OutputState }

func (DataSetNewDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetNewDefaultValues)(nil)).Elem()
}

func (o DataSetNewDefaultValuesOutput) ToDataSetNewDefaultValuesOutput() DataSetNewDefaultValuesOutput {
	return o
}

func (o DataSetNewDefaultValuesOutput) ToDataSetNewDefaultValuesOutputWithContext(ctx context.Context) DataSetNewDefaultValuesOutput {
	return o
}

func (o DataSetNewDefaultValuesOutput) ToDataSetNewDefaultValuesPtrOutput() DataSetNewDefaultValuesPtrOutput {
	return o.ToDataSetNewDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DataSetNewDefaultValuesOutput) ToDataSetNewDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetNewDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetNewDefaultValues) *DataSetNewDefaultValues {
		return &v
	}).(DataSetNewDefaultValuesPtrOutput)
}

// <p>A list of static default values for a given date time parameter.</p>
func (o DataSetNewDefaultValuesOutput) DateTimeStaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetNewDefaultValues) []string { return v.DateTimeStaticValues }).(pulumi.StringArrayOutput)
}

// <p>A list of static default values for a given decimal parameter.</p>
func (o DataSetNewDefaultValuesOutput) DecimalStaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DataSetNewDefaultValues) []float64 { return v.DecimalStaticValues }).(pulumi.Float64ArrayOutput)
}

// <p>A list of static default values for a given integer parameter.</p>
func (o DataSetNewDefaultValuesOutput) IntegerStaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v DataSetNewDefaultValues) []float64 { return v.IntegerStaticValues }).(pulumi.Float64ArrayOutput)
}

// <p>A list of static default values for a given string parameter.</p>
func (o DataSetNewDefaultValuesOutput) StringStaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetNewDefaultValues) []string { return v.StringStaticValues }).(pulumi.StringArrayOutput)
}

type DataSetNewDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DataSetNewDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetNewDefaultValues)(nil)).Elem()
}

func (o DataSetNewDefaultValuesPtrOutput) ToDataSetNewDefaultValuesPtrOutput() DataSetNewDefaultValuesPtrOutput {
	return o
}

func (o DataSetNewDefaultValuesPtrOutput) ToDataSetNewDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetNewDefaultValuesPtrOutput {
	return o
}

func (o DataSetNewDefaultValuesPtrOutput) Elem() DataSetNewDefaultValuesOutput {
	return o.ApplyT(func(v *DataSetNewDefaultValues) DataSetNewDefaultValues {
		if v != nil {
			return *v
		}
		var ret DataSetNewDefaultValues
		return ret
	}).(DataSetNewDefaultValuesOutput)
}

// <p>A list of static default values for a given date time parameter.</p>
func (o DataSetNewDefaultValuesPtrOutput) DateTimeStaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetNewDefaultValues) []string {
		if v == nil {
			return nil
		}
		return v.DateTimeStaticValues
	}).(pulumi.StringArrayOutput)
}

// <p>A list of static default values for a given decimal parameter.</p>
func (o DataSetNewDefaultValuesPtrOutput) DecimalStaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *DataSetNewDefaultValues) []float64 {
		if v == nil {
			return nil
		}
		return v.DecimalStaticValues
	}).(pulumi.Float64ArrayOutput)
}

// <p>A list of static default values for a given integer parameter.</p>
func (o DataSetNewDefaultValuesPtrOutput) IntegerStaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *DataSetNewDefaultValues) []float64 {
		if v == nil {
			return nil
		}
		return v.IntegerStaticValues
	}).(pulumi.Float64ArrayOutput)
}

// <p>A list of static default values for a given string parameter.</p>
func (o DataSetNewDefaultValuesPtrOutput) StringStaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetNewDefaultValues) []string {
		if v == nil {
			return nil
		}
		return v.StringStaticValues
	}).(pulumi.StringArrayOutput)
}

// <p>Output column.</p>
type DataSetOutputColumn struct {
	// <p>A description for a column.</p>
	Description *string `pulumi:"description"`
	// <p>The display name of the column..</p>
	Name *string `pulumi:"name"`
	// The sub data type of the column.
	SubType *DataSetColumnDataSubType `pulumi:"subType"`
	// The data type of the column.
	Type *DataSetColumnDataType `pulumi:"type"`
}

// <p>Output column.</p>
type DataSetOutputColumnOutput struct{ *pulumi.OutputState }

func (DataSetOutputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOutputColumn)(nil)).Elem()
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutput() DataSetOutputColumnOutput {
	return o
}

func (o DataSetOutputColumnOutput) ToDataSetOutputColumnOutputWithContext(ctx context.Context) DataSetOutputColumnOutput {
	return o
}

// <p>A description for a column.</p>
func (o DataSetOutputColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>The display name of the column..</p>
func (o DataSetOutputColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sub data type of the column.
func (o DataSetOutputColumnOutput) SubType() DataSetColumnDataSubTypePtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *DataSetColumnDataSubType { return v.SubType }).(DataSetColumnDataSubTypePtrOutput)
}

// The data type of the column.
func (o DataSetOutputColumnOutput) Type() DataSetColumnDataTypePtrOutput {
	return o.ApplyT(func(v DataSetOutputColumn) *DataSetColumnDataType { return v.Type }).(DataSetColumnDataTypePtrOutput)
}

type DataSetOutputColumnArrayOutput struct{ *pulumi.OutputState }

func (DataSetOutputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetOutputColumn)(nil)).Elem()
}

func (o DataSetOutputColumnArrayOutput) ToDataSetOutputColumnArrayOutput() DataSetOutputColumnArrayOutput {
	return o
}

func (o DataSetOutputColumnArrayOutput) ToDataSetOutputColumnArrayOutputWithContext(ctx context.Context) DataSetOutputColumnArrayOutput {
	return o
}

func (o DataSetOutputColumnArrayOutput) Index(i pulumi.IntInput) DataSetOutputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetOutputColumn {
		return vs[0].([]DataSetOutputColumn)[vs[1].(int)]
	}).(DataSetOutputColumnOutput)
}

// <p>A transform operation that overrides the dataset parameter values that are defined in another dataset.</p>
type DataSetOverrideDatasetParameterOperation struct {
	// The new default values for the parameter.
	NewDefaultValues *DataSetNewDefaultValues `pulumi:"newDefaultValues"`
	// <p>The new name for the parameter.</p>
	NewParameterName *string `pulumi:"newParameterName"`
	// <p>The name of the parameter to be overridden with different values.</p>
	ParameterName string `pulumi:"parameterName"`
}

// DataSetOverrideDatasetParameterOperationInput is an input type that accepts DataSetOverrideDatasetParameterOperationArgs and DataSetOverrideDatasetParameterOperationOutput values.
// You can construct a concrete instance of `DataSetOverrideDatasetParameterOperationInput` via:
//
//	DataSetOverrideDatasetParameterOperationArgs{...}
type DataSetOverrideDatasetParameterOperationInput interface {
	pulumi.Input

	ToDataSetOverrideDatasetParameterOperationOutput() DataSetOverrideDatasetParameterOperationOutput
	ToDataSetOverrideDatasetParameterOperationOutputWithContext(context.Context) DataSetOverrideDatasetParameterOperationOutput
}

// <p>A transform operation that overrides the dataset parameter values that are defined in another dataset.</p>
type DataSetOverrideDatasetParameterOperationArgs struct {
	// The new default values for the parameter.
	NewDefaultValues DataSetNewDefaultValuesPtrInput `pulumi:"newDefaultValues"`
	// <p>The new name for the parameter.</p>
	NewParameterName pulumi.StringPtrInput `pulumi:"newParameterName"`
	// <p>The name of the parameter to be overridden with different values.</p>
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
}

func (DataSetOverrideDatasetParameterOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOverrideDatasetParameterOperation)(nil)).Elem()
}

func (i DataSetOverrideDatasetParameterOperationArgs) ToDataSetOverrideDatasetParameterOperationOutput() DataSetOverrideDatasetParameterOperationOutput {
	return i.ToDataSetOverrideDatasetParameterOperationOutputWithContext(context.Background())
}

func (i DataSetOverrideDatasetParameterOperationArgs) ToDataSetOverrideDatasetParameterOperationOutputWithContext(ctx context.Context) DataSetOverrideDatasetParameterOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOverrideDatasetParameterOperationOutput)
}

func (i DataSetOverrideDatasetParameterOperationArgs) ToDataSetOverrideDatasetParameterOperationPtrOutput() DataSetOverrideDatasetParameterOperationPtrOutput {
	return i.ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(context.Background())
}

func (i DataSetOverrideDatasetParameterOperationArgs) ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(ctx context.Context) DataSetOverrideDatasetParameterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOverrideDatasetParameterOperationOutput).ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(ctx)
}

// DataSetOverrideDatasetParameterOperationPtrInput is an input type that accepts DataSetOverrideDatasetParameterOperationArgs, DataSetOverrideDatasetParameterOperationPtr and DataSetOverrideDatasetParameterOperationPtrOutput values.
// You can construct a concrete instance of `DataSetOverrideDatasetParameterOperationPtrInput` via:
//
//	        DataSetOverrideDatasetParameterOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetOverrideDatasetParameterOperationPtrInput interface {
	pulumi.Input

	ToDataSetOverrideDatasetParameterOperationPtrOutput() DataSetOverrideDatasetParameterOperationPtrOutput
	ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(context.Context) DataSetOverrideDatasetParameterOperationPtrOutput
}

type dataSetOverrideDatasetParameterOperationPtrType DataSetOverrideDatasetParameterOperationArgs

func DataSetOverrideDatasetParameterOperationPtr(v *DataSetOverrideDatasetParameterOperationArgs) DataSetOverrideDatasetParameterOperationPtrInput {
	return (*dataSetOverrideDatasetParameterOperationPtrType)(v)
}

func (*dataSetOverrideDatasetParameterOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetOverrideDatasetParameterOperation)(nil)).Elem()
}

func (i *dataSetOverrideDatasetParameterOperationPtrType) ToDataSetOverrideDatasetParameterOperationPtrOutput() DataSetOverrideDatasetParameterOperationPtrOutput {
	return i.ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetOverrideDatasetParameterOperationPtrType) ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(ctx context.Context) DataSetOverrideDatasetParameterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOverrideDatasetParameterOperationPtrOutput)
}

// <p>A transform operation that overrides the dataset parameter values that are defined in another dataset.</p>
type DataSetOverrideDatasetParameterOperationOutput struct{ *pulumi.OutputState }

func (DataSetOverrideDatasetParameterOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetOverrideDatasetParameterOperation)(nil)).Elem()
}

func (o DataSetOverrideDatasetParameterOperationOutput) ToDataSetOverrideDatasetParameterOperationOutput() DataSetOverrideDatasetParameterOperationOutput {
	return o
}

func (o DataSetOverrideDatasetParameterOperationOutput) ToDataSetOverrideDatasetParameterOperationOutputWithContext(ctx context.Context) DataSetOverrideDatasetParameterOperationOutput {
	return o
}

func (o DataSetOverrideDatasetParameterOperationOutput) ToDataSetOverrideDatasetParameterOperationPtrOutput() DataSetOverrideDatasetParameterOperationPtrOutput {
	return o.ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(context.Background())
}

func (o DataSetOverrideDatasetParameterOperationOutput) ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(ctx context.Context) DataSetOverrideDatasetParameterOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetOverrideDatasetParameterOperation) *DataSetOverrideDatasetParameterOperation {
		return &v
	}).(DataSetOverrideDatasetParameterOperationPtrOutput)
}

// The new default values for the parameter.
func (o DataSetOverrideDatasetParameterOperationOutput) NewDefaultValues() DataSetNewDefaultValuesPtrOutput {
	return o.ApplyT(func(v DataSetOverrideDatasetParameterOperation) *DataSetNewDefaultValues { return v.NewDefaultValues }).(DataSetNewDefaultValuesPtrOutput)
}

// <p>The new name for the parameter.</p>
func (o DataSetOverrideDatasetParameterOperationOutput) NewParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetOverrideDatasetParameterOperation) *string { return v.NewParameterName }).(pulumi.StringPtrOutput)
}

// <p>The name of the parameter to be overridden with different values.</p>
func (o DataSetOverrideDatasetParameterOperationOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetOverrideDatasetParameterOperation) string { return v.ParameterName }).(pulumi.StringOutput)
}

type DataSetOverrideDatasetParameterOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetOverrideDatasetParameterOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetOverrideDatasetParameterOperation)(nil)).Elem()
}

func (o DataSetOverrideDatasetParameterOperationPtrOutput) ToDataSetOverrideDatasetParameterOperationPtrOutput() DataSetOverrideDatasetParameterOperationPtrOutput {
	return o
}

func (o DataSetOverrideDatasetParameterOperationPtrOutput) ToDataSetOverrideDatasetParameterOperationPtrOutputWithContext(ctx context.Context) DataSetOverrideDatasetParameterOperationPtrOutput {
	return o
}

func (o DataSetOverrideDatasetParameterOperationPtrOutput) Elem() DataSetOverrideDatasetParameterOperationOutput {
	return o.ApplyT(func(v *DataSetOverrideDatasetParameterOperation) DataSetOverrideDatasetParameterOperation {
		if v != nil {
			return *v
		}
		var ret DataSetOverrideDatasetParameterOperation
		return ret
	}).(DataSetOverrideDatasetParameterOperationOutput)
}

// The new default values for the parameter.
func (o DataSetOverrideDatasetParameterOperationPtrOutput) NewDefaultValues() DataSetNewDefaultValuesPtrOutput {
	return o.ApplyT(func(v *DataSetOverrideDatasetParameterOperation) *DataSetNewDefaultValues {
		if v == nil {
			return nil
		}
		return v.NewDefaultValues
	}).(DataSetNewDefaultValuesPtrOutput)
}

// <p>The new name for the parameter.</p>
func (o DataSetOverrideDatasetParameterOperationPtrOutput) NewParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetOverrideDatasetParameterOperation) *string {
		if v == nil {
			return nil
		}
		return v.NewParameterName
	}).(pulumi.StringPtrOutput)
}

// <p>The name of the parameter to be overridden with different values.</p>
func (o DataSetOverrideDatasetParameterOperationPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetOverrideDatasetParameterOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ParameterName
	}).(pulumi.StringPtrOutput)
}

type DataSetPerformanceConfiguration struct {
	UniqueKeys []DataSetUniqueKey `pulumi:"uniqueKeys"`
}

// DataSetPerformanceConfigurationInput is an input type that accepts DataSetPerformanceConfigurationArgs and DataSetPerformanceConfigurationOutput values.
// You can construct a concrete instance of `DataSetPerformanceConfigurationInput` via:
//
//	DataSetPerformanceConfigurationArgs{...}
type DataSetPerformanceConfigurationInput interface {
	pulumi.Input

	ToDataSetPerformanceConfigurationOutput() DataSetPerformanceConfigurationOutput
	ToDataSetPerformanceConfigurationOutputWithContext(context.Context) DataSetPerformanceConfigurationOutput
}

type DataSetPerformanceConfigurationArgs struct {
	UniqueKeys DataSetUniqueKeyArrayInput `pulumi:"uniqueKeys"`
}

func (DataSetPerformanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPerformanceConfiguration)(nil)).Elem()
}

func (i DataSetPerformanceConfigurationArgs) ToDataSetPerformanceConfigurationOutput() DataSetPerformanceConfigurationOutput {
	return i.ToDataSetPerformanceConfigurationOutputWithContext(context.Background())
}

func (i DataSetPerformanceConfigurationArgs) ToDataSetPerformanceConfigurationOutputWithContext(ctx context.Context) DataSetPerformanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPerformanceConfigurationOutput)
}

func (i DataSetPerformanceConfigurationArgs) ToDataSetPerformanceConfigurationPtrOutput() DataSetPerformanceConfigurationPtrOutput {
	return i.ToDataSetPerformanceConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSetPerformanceConfigurationArgs) ToDataSetPerformanceConfigurationPtrOutputWithContext(ctx context.Context) DataSetPerformanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPerformanceConfigurationOutput).ToDataSetPerformanceConfigurationPtrOutputWithContext(ctx)
}

// DataSetPerformanceConfigurationPtrInput is an input type that accepts DataSetPerformanceConfigurationArgs, DataSetPerformanceConfigurationPtr and DataSetPerformanceConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSetPerformanceConfigurationPtrInput` via:
//
//	        DataSetPerformanceConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSetPerformanceConfigurationPtrInput interface {
	pulumi.Input

	ToDataSetPerformanceConfigurationPtrOutput() DataSetPerformanceConfigurationPtrOutput
	ToDataSetPerformanceConfigurationPtrOutputWithContext(context.Context) DataSetPerformanceConfigurationPtrOutput
}

type dataSetPerformanceConfigurationPtrType DataSetPerformanceConfigurationArgs

func DataSetPerformanceConfigurationPtr(v *DataSetPerformanceConfigurationArgs) DataSetPerformanceConfigurationPtrInput {
	return (*dataSetPerformanceConfigurationPtrType)(v)
}

func (*dataSetPerformanceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPerformanceConfiguration)(nil)).Elem()
}

func (i *dataSetPerformanceConfigurationPtrType) ToDataSetPerformanceConfigurationPtrOutput() DataSetPerformanceConfigurationPtrOutput {
	return i.ToDataSetPerformanceConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSetPerformanceConfigurationPtrType) ToDataSetPerformanceConfigurationPtrOutputWithContext(ctx context.Context) DataSetPerformanceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPerformanceConfigurationPtrOutput)
}

type DataSetPerformanceConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetPerformanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPerformanceConfiguration)(nil)).Elem()
}

func (o DataSetPerformanceConfigurationOutput) ToDataSetPerformanceConfigurationOutput() DataSetPerformanceConfigurationOutput {
	return o
}

func (o DataSetPerformanceConfigurationOutput) ToDataSetPerformanceConfigurationOutputWithContext(ctx context.Context) DataSetPerformanceConfigurationOutput {
	return o
}

func (o DataSetPerformanceConfigurationOutput) ToDataSetPerformanceConfigurationPtrOutput() DataSetPerformanceConfigurationPtrOutput {
	return o.ToDataSetPerformanceConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSetPerformanceConfigurationOutput) ToDataSetPerformanceConfigurationPtrOutputWithContext(ctx context.Context) DataSetPerformanceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetPerformanceConfiguration) *DataSetPerformanceConfiguration {
		return &v
	}).(DataSetPerformanceConfigurationPtrOutput)
}

func (o DataSetPerformanceConfigurationOutput) UniqueKeys() DataSetUniqueKeyArrayOutput {
	return o.ApplyT(func(v DataSetPerformanceConfiguration) []DataSetUniqueKey { return v.UniqueKeys }).(DataSetUniqueKeyArrayOutput)
}

type DataSetPerformanceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSetPerformanceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPerformanceConfiguration)(nil)).Elem()
}

func (o DataSetPerformanceConfigurationPtrOutput) ToDataSetPerformanceConfigurationPtrOutput() DataSetPerformanceConfigurationPtrOutput {
	return o
}

func (o DataSetPerformanceConfigurationPtrOutput) ToDataSetPerformanceConfigurationPtrOutputWithContext(ctx context.Context) DataSetPerformanceConfigurationPtrOutput {
	return o
}

func (o DataSetPerformanceConfigurationPtrOutput) Elem() DataSetPerformanceConfigurationOutput {
	return o.ApplyT(func(v *DataSetPerformanceConfiguration) DataSetPerformanceConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSetPerformanceConfiguration
		return ret
	}).(DataSetPerformanceConfigurationOutput)
}

func (o DataSetPerformanceConfigurationPtrOutput) UniqueKeys() DataSetUniqueKeyArrayOutput {
	return o.ApplyT(func(v *DataSetPerformanceConfiguration) []DataSetUniqueKey {
		if v == nil {
			return nil
		}
		return v.UniqueKeys
	}).(DataSetUniqueKeyArrayOutput)
}

// <p>A view of a data source that contains information about the shape of the data in the
//
//	underlying source. This is a variant type structure. For this structure to be valid,
//	only one of the attributes can be non-null.</p>
type DataSetPhysicalTable struct {
	// A physical table type built from the results of the custom SQL query.
	CustomSql *DataSetCustomSql `pulumi:"customSql"`
	// A physical table type for relational data sources.
	RelationalTable *DataSetRelationalTable `pulumi:"relationalTable"`
	// A physical table type for as S3 data source.
	S3Source *DataSetS3Source `pulumi:"s3Source"`
}

// DataSetPhysicalTableInput is an input type that accepts DataSetPhysicalTableArgs and DataSetPhysicalTableOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableInput` via:
//
//	DataSetPhysicalTableArgs{...}
type DataSetPhysicalTableInput interface {
	pulumi.Input

	ToDataSetPhysicalTableOutput() DataSetPhysicalTableOutput
	ToDataSetPhysicalTableOutputWithContext(context.Context) DataSetPhysicalTableOutput
}

// <p>A view of a data source that contains information about the shape of the data in the
//
//	underlying source. This is a variant type structure. For this structure to be valid,
//	only one of the attributes can be non-null.</p>
type DataSetPhysicalTableArgs struct {
	// A physical table type built from the results of the custom SQL query.
	CustomSql DataSetCustomSqlPtrInput `pulumi:"customSql"`
	// A physical table type for relational data sources.
	RelationalTable DataSetRelationalTablePtrInput `pulumi:"relationalTable"`
	// A physical table type for as S3 data source.
	S3Source DataSetS3SourcePtrInput `pulumi:"s3Source"`
}

func (DataSetPhysicalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTable)(nil)).Elem()
}

func (i DataSetPhysicalTableArgs) ToDataSetPhysicalTableOutput() DataSetPhysicalTableOutput {
	return i.ToDataSetPhysicalTableOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableArgs) ToDataSetPhysicalTableOutputWithContext(ctx context.Context) DataSetPhysicalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableOutput)
}

// DataSetPhysicalTableMapInput is an input type that accepts DataSetPhysicalTableMap and DataSetPhysicalTableMapOutput values.
// You can construct a concrete instance of `DataSetPhysicalTableMapInput` via:
//
//	DataSetPhysicalTableMap{ "key": DataSetPhysicalTableArgs{...} }
type DataSetPhysicalTableMapInput interface {
	pulumi.Input

	ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput
	ToDataSetPhysicalTableMapOutputWithContext(context.Context) DataSetPhysicalTableMapOutput
}

type DataSetPhysicalTableMap map[string]DataSetPhysicalTableInput

func (DataSetPhysicalTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSetPhysicalTable)(nil)).Elem()
}

func (i DataSetPhysicalTableMap) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return i.ToDataSetPhysicalTableMapOutputWithContext(context.Background())
}

func (i DataSetPhysicalTableMap) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetPhysicalTableMapOutput)
}

// <p>A view of a data source that contains information about the shape of the data in the
//
//	underlying source. This is a variant type structure. For this structure to be valid,
//	only one of the attributes can be non-null.</p>
type DataSetPhysicalTableOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPhysicalTable)(nil)).Elem()
}

func (o DataSetPhysicalTableOutput) ToDataSetPhysicalTableOutput() DataSetPhysicalTableOutput {
	return o
}

func (o DataSetPhysicalTableOutput) ToDataSetPhysicalTableOutputWithContext(ctx context.Context) DataSetPhysicalTableOutput {
	return o
}

// A physical table type built from the results of the custom SQL query.
func (o DataSetPhysicalTableOutput) CustomSql() DataSetCustomSqlPtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTable) *DataSetCustomSql { return v.CustomSql }).(DataSetCustomSqlPtrOutput)
}

// A physical table type for relational data sources.
func (o DataSetPhysicalTableOutput) RelationalTable() DataSetRelationalTablePtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTable) *DataSetRelationalTable { return v.RelationalTable }).(DataSetRelationalTablePtrOutput)
}

// A physical table type for as S3 data source.
func (o DataSetPhysicalTableOutput) S3Source() DataSetS3SourcePtrOutput {
	return o.ApplyT(func(v DataSetPhysicalTable) *DataSetS3Source { return v.S3Source }).(DataSetS3SourcePtrOutput)
}

type DataSetPhysicalTableMapOutput struct{ *pulumi.OutputState }

func (DataSetPhysicalTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSetPhysicalTable)(nil)).Elem()
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutput() DataSetPhysicalTableMapOutput {
	return o
}

func (o DataSetPhysicalTableMapOutput) ToDataSetPhysicalTableMapOutputWithContext(ctx context.Context) DataSetPhysicalTableMapOutput {
	return o
}

func (o DataSetPhysicalTableMapOutput) MapIndex(k pulumi.StringInput) DataSetPhysicalTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataSetPhysicalTable {
		return vs[0].(map[string]DataSetPhysicalTable)[vs[1].(string)]
	}).(DataSetPhysicalTableOutput)
}

// <p>A transform operation that projects columns. Operations that come after a projection
//
//	can only refer to projected columns.</p>
type DataSetProjectOperation struct {
	// <p>Projected columns.</p>
	ProjectedColumns []string `pulumi:"projectedColumns"`
}

// DataSetProjectOperationInput is an input type that accepts DataSetProjectOperationArgs and DataSetProjectOperationOutput values.
// You can construct a concrete instance of `DataSetProjectOperationInput` via:
//
//	DataSetProjectOperationArgs{...}
type DataSetProjectOperationInput interface {
	pulumi.Input

	ToDataSetProjectOperationOutput() DataSetProjectOperationOutput
	ToDataSetProjectOperationOutputWithContext(context.Context) DataSetProjectOperationOutput
}

// <p>A transform operation that projects columns. Operations that come after a projection
//
//	can only refer to projected columns.</p>
type DataSetProjectOperationArgs struct {
	// <p>Projected columns.</p>
	ProjectedColumns pulumi.StringArrayInput `pulumi:"projectedColumns"`
}

func (DataSetProjectOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetProjectOperation)(nil)).Elem()
}

func (i DataSetProjectOperationArgs) ToDataSetProjectOperationOutput() DataSetProjectOperationOutput {
	return i.ToDataSetProjectOperationOutputWithContext(context.Background())
}

func (i DataSetProjectOperationArgs) ToDataSetProjectOperationOutputWithContext(ctx context.Context) DataSetProjectOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetProjectOperationOutput)
}

func (i DataSetProjectOperationArgs) ToDataSetProjectOperationPtrOutput() DataSetProjectOperationPtrOutput {
	return i.ToDataSetProjectOperationPtrOutputWithContext(context.Background())
}

func (i DataSetProjectOperationArgs) ToDataSetProjectOperationPtrOutputWithContext(ctx context.Context) DataSetProjectOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetProjectOperationOutput).ToDataSetProjectOperationPtrOutputWithContext(ctx)
}

// DataSetProjectOperationPtrInput is an input type that accepts DataSetProjectOperationArgs, DataSetProjectOperationPtr and DataSetProjectOperationPtrOutput values.
// You can construct a concrete instance of `DataSetProjectOperationPtrInput` via:
//
//	        DataSetProjectOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetProjectOperationPtrInput interface {
	pulumi.Input

	ToDataSetProjectOperationPtrOutput() DataSetProjectOperationPtrOutput
	ToDataSetProjectOperationPtrOutputWithContext(context.Context) DataSetProjectOperationPtrOutput
}

type dataSetProjectOperationPtrType DataSetProjectOperationArgs

func DataSetProjectOperationPtr(v *DataSetProjectOperationArgs) DataSetProjectOperationPtrInput {
	return (*dataSetProjectOperationPtrType)(v)
}

func (*dataSetProjectOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetProjectOperation)(nil)).Elem()
}

func (i *dataSetProjectOperationPtrType) ToDataSetProjectOperationPtrOutput() DataSetProjectOperationPtrOutput {
	return i.ToDataSetProjectOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetProjectOperationPtrType) ToDataSetProjectOperationPtrOutputWithContext(ctx context.Context) DataSetProjectOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetProjectOperationPtrOutput)
}

// <p>A transform operation that projects columns. Operations that come after a projection
//
//	can only refer to projected columns.</p>
type DataSetProjectOperationOutput struct{ *pulumi.OutputState }

func (DataSetProjectOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetProjectOperation)(nil)).Elem()
}

func (o DataSetProjectOperationOutput) ToDataSetProjectOperationOutput() DataSetProjectOperationOutput {
	return o
}

func (o DataSetProjectOperationOutput) ToDataSetProjectOperationOutputWithContext(ctx context.Context) DataSetProjectOperationOutput {
	return o
}

func (o DataSetProjectOperationOutput) ToDataSetProjectOperationPtrOutput() DataSetProjectOperationPtrOutput {
	return o.ToDataSetProjectOperationPtrOutputWithContext(context.Background())
}

func (o DataSetProjectOperationOutput) ToDataSetProjectOperationPtrOutputWithContext(ctx context.Context) DataSetProjectOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetProjectOperation) *DataSetProjectOperation {
		return &v
	}).(DataSetProjectOperationPtrOutput)
}

// <p>Projected columns.</p>
func (o DataSetProjectOperationOutput) ProjectedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetProjectOperation) []string { return v.ProjectedColumns }).(pulumi.StringArrayOutput)
}

type DataSetProjectOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetProjectOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetProjectOperation)(nil)).Elem()
}

func (o DataSetProjectOperationPtrOutput) ToDataSetProjectOperationPtrOutput() DataSetProjectOperationPtrOutput {
	return o
}

func (o DataSetProjectOperationPtrOutput) ToDataSetProjectOperationPtrOutputWithContext(ctx context.Context) DataSetProjectOperationPtrOutput {
	return o
}

func (o DataSetProjectOperationPtrOutput) Elem() DataSetProjectOperationOutput {
	return o.ApplyT(func(v *DataSetProjectOperation) DataSetProjectOperation {
		if v != nil {
			return *v
		}
		var ret DataSetProjectOperation
		return ret
	}).(DataSetProjectOperationOutput)
}

// <p>Projected columns.</p>
func (o DataSetProjectOperationPtrOutput) ProjectedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetProjectOperation) []string {
		if v == nil {
			return nil
		}
		return v.ProjectedColumns
	}).(pulumi.StringArrayOutput)
}

// <p>The refresh configuration of a dataset.</p>
type DataSetRefreshConfiguration struct {
	// The incremental refresh for the dataset.
	IncrementalRefresh DataSetIncrementalRefresh `pulumi:"incrementalRefresh"`
}

// DataSetRefreshConfigurationInput is an input type that accepts DataSetRefreshConfigurationArgs and DataSetRefreshConfigurationOutput values.
// You can construct a concrete instance of `DataSetRefreshConfigurationInput` via:
//
//	DataSetRefreshConfigurationArgs{...}
type DataSetRefreshConfigurationInput interface {
	pulumi.Input

	ToDataSetRefreshConfigurationOutput() DataSetRefreshConfigurationOutput
	ToDataSetRefreshConfigurationOutputWithContext(context.Context) DataSetRefreshConfigurationOutput
}

// <p>The refresh configuration of a dataset.</p>
type DataSetRefreshConfigurationArgs struct {
	// The incremental refresh for the dataset.
	IncrementalRefresh DataSetIncrementalRefreshInput `pulumi:"incrementalRefresh"`
}

func (DataSetRefreshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshConfiguration)(nil)).Elem()
}

func (i DataSetRefreshConfigurationArgs) ToDataSetRefreshConfigurationOutput() DataSetRefreshConfigurationOutput {
	return i.ToDataSetRefreshConfigurationOutputWithContext(context.Background())
}

func (i DataSetRefreshConfigurationArgs) ToDataSetRefreshConfigurationOutputWithContext(ctx context.Context) DataSetRefreshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshConfigurationOutput)
}

func (i DataSetRefreshConfigurationArgs) ToDataSetRefreshConfigurationPtrOutput() DataSetRefreshConfigurationPtrOutput {
	return i.ToDataSetRefreshConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSetRefreshConfigurationArgs) ToDataSetRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshConfigurationOutput).ToDataSetRefreshConfigurationPtrOutputWithContext(ctx)
}

// DataSetRefreshConfigurationPtrInput is an input type that accepts DataSetRefreshConfigurationArgs, DataSetRefreshConfigurationPtr and DataSetRefreshConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSetRefreshConfigurationPtrInput` via:
//
//	        DataSetRefreshConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSetRefreshConfigurationPtrInput interface {
	pulumi.Input

	ToDataSetRefreshConfigurationPtrOutput() DataSetRefreshConfigurationPtrOutput
	ToDataSetRefreshConfigurationPtrOutputWithContext(context.Context) DataSetRefreshConfigurationPtrOutput
}

type dataSetRefreshConfigurationPtrType DataSetRefreshConfigurationArgs

func DataSetRefreshConfigurationPtr(v *DataSetRefreshConfigurationArgs) DataSetRefreshConfigurationPtrInput {
	return (*dataSetRefreshConfigurationPtrType)(v)
}

func (*dataSetRefreshConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshConfiguration)(nil)).Elem()
}

func (i *dataSetRefreshConfigurationPtrType) ToDataSetRefreshConfigurationPtrOutput() DataSetRefreshConfigurationPtrOutput {
	return i.ToDataSetRefreshConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSetRefreshConfigurationPtrType) ToDataSetRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshConfigurationPtrOutput)
}

// <p>The refresh configuration of a dataset.</p>
type DataSetRefreshConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetRefreshConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshConfiguration)(nil)).Elem()
}

func (o DataSetRefreshConfigurationOutput) ToDataSetRefreshConfigurationOutput() DataSetRefreshConfigurationOutput {
	return o
}

func (o DataSetRefreshConfigurationOutput) ToDataSetRefreshConfigurationOutputWithContext(ctx context.Context) DataSetRefreshConfigurationOutput {
	return o
}

func (o DataSetRefreshConfigurationOutput) ToDataSetRefreshConfigurationPtrOutput() DataSetRefreshConfigurationPtrOutput {
	return o.ToDataSetRefreshConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSetRefreshConfigurationOutput) ToDataSetRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRefreshConfiguration) *DataSetRefreshConfiguration {
		return &v
	}).(DataSetRefreshConfigurationPtrOutput)
}

// The incremental refresh for the dataset.
func (o DataSetRefreshConfigurationOutput) IncrementalRefresh() DataSetIncrementalRefreshOutput {
	return o.ApplyT(func(v DataSetRefreshConfiguration) DataSetIncrementalRefresh { return v.IncrementalRefresh }).(DataSetIncrementalRefreshOutput)
}

type DataSetRefreshConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSetRefreshConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshConfiguration)(nil)).Elem()
}

func (o DataSetRefreshConfigurationPtrOutput) ToDataSetRefreshConfigurationPtrOutput() DataSetRefreshConfigurationPtrOutput {
	return o
}

func (o DataSetRefreshConfigurationPtrOutput) ToDataSetRefreshConfigurationPtrOutputWithContext(ctx context.Context) DataSetRefreshConfigurationPtrOutput {
	return o
}

func (o DataSetRefreshConfigurationPtrOutput) Elem() DataSetRefreshConfigurationOutput {
	return o.ApplyT(func(v *DataSetRefreshConfiguration) DataSetRefreshConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSetRefreshConfiguration
		return ret
	}).(DataSetRefreshConfigurationOutput)
}

// The incremental refresh for the dataset.
func (o DataSetRefreshConfigurationPtrOutput) IncrementalRefresh() DataSetIncrementalRefreshPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshConfiguration) *DataSetIncrementalRefresh {
		if v == nil {
			return nil
		}
		return &v.IncrementalRefresh
	}).(DataSetIncrementalRefreshPtrOutput)
}

// <p>The refresh properties of a dataset.</p>
type DataSetRefreshProperties struct {
	// The refresh configuration for a dataset.
	RefreshConfiguration *DataSetRefreshConfiguration `pulumi:"refreshConfiguration"`
}

// DataSetRefreshPropertiesInput is an input type that accepts DataSetRefreshPropertiesArgs and DataSetRefreshPropertiesOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesInput` via:
//
//	DataSetRefreshPropertiesArgs{...}
type DataSetRefreshPropertiesInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput
	ToDataSetRefreshPropertiesOutputWithContext(context.Context) DataSetRefreshPropertiesOutput
}

// <p>The refresh properties of a dataset.</p>
type DataSetRefreshPropertiesArgs struct {
	// The refresh configuration for a dataset.
	RefreshConfiguration DataSetRefreshConfigurationPtrInput `pulumi:"refreshConfiguration"`
}

func (DataSetRefreshPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshProperties)(nil)).Elem()
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput {
	return i.ToDataSetRefreshPropertiesOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesOutputWithContext(ctx context.Context) DataSetRefreshPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesOutput)
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return i.ToDataSetRefreshPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSetRefreshPropertiesArgs) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesOutput).ToDataSetRefreshPropertiesPtrOutputWithContext(ctx)
}

// DataSetRefreshPropertiesPtrInput is an input type that accepts DataSetRefreshPropertiesArgs, DataSetRefreshPropertiesPtr and DataSetRefreshPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSetRefreshPropertiesPtrInput` via:
//
//	        DataSetRefreshPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSetRefreshPropertiesPtrInput interface {
	pulumi.Input

	ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput
	ToDataSetRefreshPropertiesPtrOutputWithContext(context.Context) DataSetRefreshPropertiesPtrOutput
}

type dataSetRefreshPropertiesPtrType DataSetRefreshPropertiesArgs

func DataSetRefreshPropertiesPtr(v *DataSetRefreshPropertiesArgs) DataSetRefreshPropertiesPtrInput {
	return (*dataSetRefreshPropertiesPtrType)(v)
}

func (*dataSetRefreshPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshProperties)(nil)).Elem()
}

func (i *dataSetRefreshPropertiesPtrType) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return i.ToDataSetRefreshPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSetRefreshPropertiesPtrType) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRefreshPropertiesPtrOutput)
}

// <p>The refresh properties of a dataset.</p>
type DataSetRefreshPropertiesOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRefreshProperties)(nil)).Elem()
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesOutput() DataSetRefreshPropertiesOutput {
	return o
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesOutputWithContext(ctx context.Context) DataSetRefreshPropertiesOutput {
	return o
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return o.ToDataSetRefreshPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSetRefreshPropertiesOutput) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRefreshProperties) *DataSetRefreshProperties {
		return &v
	}).(DataSetRefreshPropertiesPtrOutput)
}

// The refresh configuration for a dataset.
func (o DataSetRefreshPropertiesOutput) RefreshConfiguration() DataSetRefreshConfigurationPtrOutput {
	return o.ApplyT(func(v DataSetRefreshProperties) *DataSetRefreshConfiguration { return v.RefreshConfiguration }).(DataSetRefreshConfigurationPtrOutput)
}

type DataSetRefreshPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSetRefreshPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRefreshProperties)(nil)).Elem()
}

func (o DataSetRefreshPropertiesPtrOutput) ToDataSetRefreshPropertiesPtrOutput() DataSetRefreshPropertiesPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesPtrOutput) ToDataSetRefreshPropertiesPtrOutputWithContext(ctx context.Context) DataSetRefreshPropertiesPtrOutput {
	return o
}

func (o DataSetRefreshPropertiesPtrOutput) Elem() DataSetRefreshPropertiesOutput {
	return o.ApplyT(func(v *DataSetRefreshProperties) DataSetRefreshProperties {
		if v != nil {
			return *v
		}
		var ret DataSetRefreshProperties
		return ret
	}).(DataSetRefreshPropertiesOutput)
}

// The refresh configuration for a dataset.
func (o DataSetRefreshPropertiesPtrOutput) RefreshConfiguration() DataSetRefreshConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSetRefreshProperties) *DataSetRefreshConfiguration {
		if v == nil {
			return nil
		}
		return v.RefreshConfiguration
	}).(DataSetRefreshConfigurationPtrOutput)
}

// <p>A physical table type for relational data sources.</p>
type DataSetRelationalTable struct {
	// <p>The catalog associated with a table.</p>
	Catalog *string `pulumi:"catalog"`
	// <p>The Amazon Resource Name (ARN) for the data source.</p>
	DataSourceArn string `pulumi:"dataSourceArn"`
	// <p>The column schema of the table.</p>
	InputColumns []DataSetInputColumn `pulumi:"inputColumns"`
	// <p>The name of the relational table.</p>
	Name string `pulumi:"name"`
	// <p>The schema name. This name applies to certain relational database engines.</p>
	Schema *string `pulumi:"schema"`
}

// DataSetRelationalTableInput is an input type that accepts DataSetRelationalTableArgs and DataSetRelationalTableOutput values.
// You can construct a concrete instance of `DataSetRelationalTableInput` via:
//
//	DataSetRelationalTableArgs{...}
type DataSetRelationalTableInput interface {
	pulumi.Input

	ToDataSetRelationalTableOutput() DataSetRelationalTableOutput
	ToDataSetRelationalTableOutputWithContext(context.Context) DataSetRelationalTableOutput
}

// <p>A physical table type for relational data sources.</p>
type DataSetRelationalTableArgs struct {
	// <p>The catalog associated with a table.</p>
	Catalog pulumi.StringPtrInput `pulumi:"catalog"`
	// <p>The Amazon Resource Name (ARN) for the data source.</p>
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// <p>The column schema of the table.</p>
	InputColumns DataSetInputColumnArrayInput `pulumi:"inputColumns"`
	// <p>The name of the relational table.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// <p>The schema name. This name applies to certain relational database engines.</p>
	Schema pulumi.StringPtrInput `pulumi:"schema"`
}

func (DataSetRelationalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRelationalTable)(nil)).Elem()
}

func (i DataSetRelationalTableArgs) ToDataSetRelationalTableOutput() DataSetRelationalTableOutput {
	return i.ToDataSetRelationalTableOutputWithContext(context.Background())
}

func (i DataSetRelationalTableArgs) ToDataSetRelationalTableOutputWithContext(ctx context.Context) DataSetRelationalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRelationalTableOutput)
}

func (i DataSetRelationalTableArgs) ToDataSetRelationalTablePtrOutput() DataSetRelationalTablePtrOutput {
	return i.ToDataSetRelationalTablePtrOutputWithContext(context.Background())
}

func (i DataSetRelationalTableArgs) ToDataSetRelationalTablePtrOutputWithContext(ctx context.Context) DataSetRelationalTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRelationalTableOutput).ToDataSetRelationalTablePtrOutputWithContext(ctx)
}

// DataSetRelationalTablePtrInput is an input type that accepts DataSetRelationalTableArgs, DataSetRelationalTablePtr and DataSetRelationalTablePtrOutput values.
// You can construct a concrete instance of `DataSetRelationalTablePtrInput` via:
//
//	        DataSetRelationalTableArgs{...}
//
//	or:
//
//	        nil
type DataSetRelationalTablePtrInput interface {
	pulumi.Input

	ToDataSetRelationalTablePtrOutput() DataSetRelationalTablePtrOutput
	ToDataSetRelationalTablePtrOutputWithContext(context.Context) DataSetRelationalTablePtrOutput
}

type dataSetRelationalTablePtrType DataSetRelationalTableArgs

func DataSetRelationalTablePtr(v *DataSetRelationalTableArgs) DataSetRelationalTablePtrInput {
	return (*dataSetRelationalTablePtrType)(v)
}

func (*dataSetRelationalTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRelationalTable)(nil)).Elem()
}

func (i *dataSetRelationalTablePtrType) ToDataSetRelationalTablePtrOutput() DataSetRelationalTablePtrOutput {
	return i.ToDataSetRelationalTablePtrOutputWithContext(context.Background())
}

func (i *dataSetRelationalTablePtrType) ToDataSetRelationalTablePtrOutputWithContext(ctx context.Context) DataSetRelationalTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRelationalTablePtrOutput)
}

// <p>A physical table type for relational data sources.</p>
type DataSetRelationalTableOutput struct{ *pulumi.OutputState }

func (DataSetRelationalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRelationalTable)(nil)).Elem()
}

func (o DataSetRelationalTableOutput) ToDataSetRelationalTableOutput() DataSetRelationalTableOutput {
	return o
}

func (o DataSetRelationalTableOutput) ToDataSetRelationalTableOutputWithContext(ctx context.Context) DataSetRelationalTableOutput {
	return o
}

func (o DataSetRelationalTableOutput) ToDataSetRelationalTablePtrOutput() DataSetRelationalTablePtrOutput {
	return o.ToDataSetRelationalTablePtrOutputWithContext(context.Background())
}

func (o DataSetRelationalTableOutput) ToDataSetRelationalTablePtrOutputWithContext(ctx context.Context) DataSetRelationalTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRelationalTable) *DataSetRelationalTable {
		return &v
	}).(DataSetRelationalTablePtrOutput)
}

// <p>The catalog associated with a table.</p>
func (o DataSetRelationalTableOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRelationalTable) *string { return v.Catalog }).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Name (ARN) for the data source.</p>
func (o DataSetRelationalTableOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRelationalTable) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

// <p>The column schema of the table.</p>
func (o DataSetRelationalTableOutput) InputColumns() DataSetInputColumnArrayOutput {
	return o.ApplyT(func(v DataSetRelationalTable) []DataSetInputColumn { return v.InputColumns }).(DataSetInputColumnArrayOutput)
}

// <p>The name of the relational table.</p>
func (o DataSetRelationalTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRelationalTable) string { return v.Name }).(pulumi.StringOutput)
}

// <p>The schema name. This name applies to certain relational database engines.</p>
func (o DataSetRelationalTableOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRelationalTable) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

type DataSetRelationalTablePtrOutput struct{ *pulumi.OutputState }

func (DataSetRelationalTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRelationalTable)(nil)).Elem()
}

func (o DataSetRelationalTablePtrOutput) ToDataSetRelationalTablePtrOutput() DataSetRelationalTablePtrOutput {
	return o
}

func (o DataSetRelationalTablePtrOutput) ToDataSetRelationalTablePtrOutputWithContext(ctx context.Context) DataSetRelationalTablePtrOutput {
	return o
}

func (o DataSetRelationalTablePtrOutput) Elem() DataSetRelationalTableOutput {
	return o.ApplyT(func(v *DataSetRelationalTable) DataSetRelationalTable {
		if v != nil {
			return *v
		}
		var ret DataSetRelationalTable
		return ret
	}).(DataSetRelationalTableOutput)
}

// <p>The catalog associated with a table.</p>
func (o DataSetRelationalTablePtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRelationalTable) *string {
		if v == nil {
			return nil
		}
		return v.Catalog
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Name (ARN) for the data source.</p>
func (o DataSetRelationalTablePtrOutput) DataSourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRelationalTable) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceArn
	}).(pulumi.StringPtrOutput)
}

// <p>The column schema of the table.</p>
func (o DataSetRelationalTablePtrOutput) InputColumns() DataSetInputColumnArrayOutput {
	return o.ApplyT(func(v *DataSetRelationalTable) []DataSetInputColumn {
		if v == nil {
			return nil
		}
		return v.InputColumns
	}).(DataSetInputColumnArrayOutput)
}

// <p>The name of the relational table.</p>
func (o DataSetRelationalTablePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRelationalTable) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// <p>The schema name. This name applies to certain relational database engines.</p>
func (o DataSetRelationalTablePtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRelationalTable) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

// <p>A transform operation that renames a column.</p>
type DataSetRenameColumnOperation struct {
	// <p>The name of the column to be renamed.</p>
	ColumnName string `pulumi:"columnName"`
	// <p>The new name for the column.</p>
	NewColumnName string `pulumi:"newColumnName"`
}

// DataSetRenameColumnOperationInput is an input type that accepts DataSetRenameColumnOperationArgs and DataSetRenameColumnOperationOutput values.
// You can construct a concrete instance of `DataSetRenameColumnOperationInput` via:
//
//	DataSetRenameColumnOperationArgs{...}
type DataSetRenameColumnOperationInput interface {
	pulumi.Input

	ToDataSetRenameColumnOperationOutput() DataSetRenameColumnOperationOutput
	ToDataSetRenameColumnOperationOutputWithContext(context.Context) DataSetRenameColumnOperationOutput
}

// <p>A transform operation that renames a column.</p>
type DataSetRenameColumnOperationArgs struct {
	// <p>The name of the column to be renamed.</p>
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// <p>The new name for the column.</p>
	NewColumnName pulumi.StringInput `pulumi:"newColumnName"`
}

func (DataSetRenameColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRenameColumnOperation)(nil)).Elem()
}

func (i DataSetRenameColumnOperationArgs) ToDataSetRenameColumnOperationOutput() DataSetRenameColumnOperationOutput {
	return i.ToDataSetRenameColumnOperationOutputWithContext(context.Background())
}

func (i DataSetRenameColumnOperationArgs) ToDataSetRenameColumnOperationOutputWithContext(ctx context.Context) DataSetRenameColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRenameColumnOperationOutput)
}

func (i DataSetRenameColumnOperationArgs) ToDataSetRenameColumnOperationPtrOutput() DataSetRenameColumnOperationPtrOutput {
	return i.ToDataSetRenameColumnOperationPtrOutputWithContext(context.Background())
}

func (i DataSetRenameColumnOperationArgs) ToDataSetRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetRenameColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRenameColumnOperationOutput).ToDataSetRenameColumnOperationPtrOutputWithContext(ctx)
}

// DataSetRenameColumnOperationPtrInput is an input type that accepts DataSetRenameColumnOperationArgs, DataSetRenameColumnOperationPtr and DataSetRenameColumnOperationPtrOutput values.
// You can construct a concrete instance of `DataSetRenameColumnOperationPtrInput` via:
//
//	        DataSetRenameColumnOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetRenameColumnOperationPtrInput interface {
	pulumi.Input

	ToDataSetRenameColumnOperationPtrOutput() DataSetRenameColumnOperationPtrOutput
	ToDataSetRenameColumnOperationPtrOutputWithContext(context.Context) DataSetRenameColumnOperationPtrOutput
}

type dataSetRenameColumnOperationPtrType DataSetRenameColumnOperationArgs

func DataSetRenameColumnOperationPtr(v *DataSetRenameColumnOperationArgs) DataSetRenameColumnOperationPtrInput {
	return (*dataSetRenameColumnOperationPtrType)(v)
}

func (*dataSetRenameColumnOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRenameColumnOperation)(nil)).Elem()
}

func (i *dataSetRenameColumnOperationPtrType) ToDataSetRenameColumnOperationPtrOutput() DataSetRenameColumnOperationPtrOutput {
	return i.ToDataSetRenameColumnOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetRenameColumnOperationPtrType) ToDataSetRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetRenameColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRenameColumnOperationPtrOutput)
}

// <p>A transform operation that renames a column.</p>
type DataSetRenameColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetRenameColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRenameColumnOperation)(nil)).Elem()
}

func (o DataSetRenameColumnOperationOutput) ToDataSetRenameColumnOperationOutput() DataSetRenameColumnOperationOutput {
	return o
}

func (o DataSetRenameColumnOperationOutput) ToDataSetRenameColumnOperationOutputWithContext(ctx context.Context) DataSetRenameColumnOperationOutput {
	return o
}

func (o DataSetRenameColumnOperationOutput) ToDataSetRenameColumnOperationPtrOutput() DataSetRenameColumnOperationPtrOutput {
	return o.ToDataSetRenameColumnOperationPtrOutputWithContext(context.Background())
}

func (o DataSetRenameColumnOperationOutput) ToDataSetRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetRenameColumnOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRenameColumnOperation) *DataSetRenameColumnOperation {
		return &v
	}).(DataSetRenameColumnOperationPtrOutput)
}

// <p>The name of the column to be renamed.</p>
func (o DataSetRenameColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRenameColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// <p>The new name for the column.</p>
func (o DataSetRenameColumnOperationOutput) NewColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRenameColumnOperation) string { return v.NewColumnName }).(pulumi.StringOutput)
}

type DataSetRenameColumnOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetRenameColumnOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRenameColumnOperation)(nil)).Elem()
}

func (o DataSetRenameColumnOperationPtrOutput) ToDataSetRenameColumnOperationPtrOutput() DataSetRenameColumnOperationPtrOutput {
	return o
}

func (o DataSetRenameColumnOperationPtrOutput) ToDataSetRenameColumnOperationPtrOutputWithContext(ctx context.Context) DataSetRenameColumnOperationPtrOutput {
	return o
}

func (o DataSetRenameColumnOperationPtrOutput) Elem() DataSetRenameColumnOperationOutput {
	return o.ApplyT(func(v *DataSetRenameColumnOperation) DataSetRenameColumnOperation {
		if v != nil {
			return *v
		}
		var ret DataSetRenameColumnOperation
		return ret
	}).(DataSetRenameColumnOperationOutput)
}

// <p>The name of the column to be renamed.</p>
func (o DataSetRenameColumnOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRenameColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// <p>The new name for the column.</p>
func (o DataSetRenameColumnOperationPtrOutput) NewColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRenameColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.NewColumnName
	}).(pulumi.StringPtrOutput)
}

// <p>Permission for the resource.</p>
type DataSetResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// DataSetResourcePermissionInput is an input type that accepts DataSetResourcePermissionArgs and DataSetResourcePermissionOutput values.
// You can construct a concrete instance of `DataSetResourcePermissionInput` via:
//
//	DataSetResourcePermissionArgs{...}
type DataSetResourcePermissionInput interface {
	pulumi.Input

	ToDataSetResourcePermissionOutput() DataSetResourcePermissionOutput
	ToDataSetResourcePermissionOutputWithContext(context.Context) DataSetResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type DataSetResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (DataSetResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetResourcePermission)(nil)).Elem()
}

func (i DataSetResourcePermissionArgs) ToDataSetResourcePermissionOutput() DataSetResourcePermissionOutput {
	return i.ToDataSetResourcePermissionOutputWithContext(context.Background())
}

func (i DataSetResourcePermissionArgs) ToDataSetResourcePermissionOutputWithContext(ctx context.Context) DataSetResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetResourcePermissionOutput)
}

// DataSetResourcePermissionArrayInput is an input type that accepts DataSetResourcePermissionArray and DataSetResourcePermissionArrayOutput values.
// You can construct a concrete instance of `DataSetResourcePermissionArrayInput` via:
//
//	DataSetResourcePermissionArray{ DataSetResourcePermissionArgs{...} }
type DataSetResourcePermissionArrayInput interface {
	pulumi.Input

	ToDataSetResourcePermissionArrayOutput() DataSetResourcePermissionArrayOutput
	ToDataSetResourcePermissionArrayOutputWithContext(context.Context) DataSetResourcePermissionArrayOutput
}

type DataSetResourcePermissionArray []DataSetResourcePermissionInput

func (DataSetResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetResourcePermission)(nil)).Elem()
}

func (i DataSetResourcePermissionArray) ToDataSetResourcePermissionArrayOutput() DataSetResourcePermissionArrayOutput {
	return i.ToDataSetResourcePermissionArrayOutputWithContext(context.Background())
}

func (i DataSetResourcePermissionArray) ToDataSetResourcePermissionArrayOutputWithContext(ctx context.Context) DataSetResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type DataSetResourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSetResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetResourcePermission)(nil)).Elem()
}

func (o DataSetResourcePermissionOutput) ToDataSetResourcePermissionOutput() DataSetResourcePermissionOutput {
	return o
}

func (o DataSetResourcePermissionOutput) ToDataSetResourcePermissionOutputWithContext(ctx context.Context) DataSetResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o DataSetResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//
//	   following:</p>
//	<ul>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
//	           ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
//	           (This is less common.) </p>
//	   </li>
//	</ul>
func (o DataSetResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type DataSetResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSetResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetResourcePermission)(nil)).Elem()
}

func (o DataSetResourcePermissionArrayOutput) ToDataSetResourcePermissionArrayOutput() DataSetResourcePermissionArrayOutput {
	return o
}

func (o DataSetResourcePermissionArrayOutput) ToDataSetResourcePermissionArrayOutputWithContext(ctx context.Context) DataSetResourcePermissionArrayOutput {
	return o
}

func (o DataSetResourcePermissionArrayOutput) Index(i pulumi.IntInput) DataSetResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetResourcePermission {
		return vs[0].([]DataSetResourcePermission)[vs[1].(int)]
	}).(DataSetResourcePermissionOutput)
}

// <p>Information about a dataset that contains permissions for row-level security (RLS).
//
//	   The permissions dataset maps fields to users or groups. For more information, see
//	   <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User
//	       Guide</i>.</p>
//	<p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is
//	   not supported for new RLS datasets.</p>
type DataSetRowLevelPermissionDataSet struct {
	// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
	Arn string `pulumi:"arn"`
	// The user or group rules associated with the dataset that contains permissions for RLS.
	//
	// By default, `FormatVersion` is `VERSION_1` . When `FormatVersion` is `VERSION_1` , `UserName` and `GroupName` are required. When `FormatVersion` is `VERSION_2` , `UserARN` and `GroupARN` are required, and `Namespace` must not exist.
	FormatVersion *DataSetRowLevelPermissionFormatVersion `pulumi:"formatVersion"`
	// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
	Namespace *string `pulumi:"namespace"`
	// The type of permissions to use when interpreting the permissions for RLS. `DENY_ACCESS` is included for backward compatibility only.
	PermissionPolicy DataSetRowLevelPermissionPolicy `pulumi:"permissionPolicy"`
	// The status of the row-level security permission dataset. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
	Status *DataSetStatus `pulumi:"status"`
}

// DataSetRowLevelPermissionDataSetInput is an input type that accepts DataSetRowLevelPermissionDataSetArgs and DataSetRowLevelPermissionDataSetOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionDataSetInput` via:
//
//	DataSetRowLevelPermissionDataSetArgs{...}
type DataSetRowLevelPermissionDataSetInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput
	ToDataSetRowLevelPermissionDataSetOutputWithContext(context.Context) DataSetRowLevelPermissionDataSetOutput
}

// <p>Information about a dataset that contains permissions for row-level security (RLS).
//
//	   The permissions dataset maps fields to users or groups. For more information, see
//	   <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User
//	       Guide</i>.</p>
//	<p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is
//	   not supported for new RLS datasets.</p>
type DataSetRowLevelPermissionDataSetArgs struct {
	// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
	// The user or group rules associated with the dataset that contains permissions for RLS.
	//
	// By default, `FormatVersion` is `VERSION_1` . When `FormatVersion` is `VERSION_1` , `UserName` and `GroupName` are required. When `FormatVersion` is `VERSION_2` , `UserARN` and `GroupARN` are required, and `Namespace` must not exist.
	FormatVersion DataSetRowLevelPermissionFormatVersionPtrInput `pulumi:"formatVersion"`
	// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of permissions to use when interpreting the permissions for RLS. `DENY_ACCESS` is included for backward compatibility only.
	PermissionPolicy DataSetRowLevelPermissionPolicyInput `pulumi:"permissionPolicy"`
	// The status of the row-level security permission dataset. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
	Status DataSetStatusPtrInput `pulumi:"status"`
}

func (DataSetRowLevelPermissionDataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return i.ToDataSetRowLevelPermissionDataSetOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetOutput)
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return i.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionDataSetArgs) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetOutput).ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx)
}

// DataSetRowLevelPermissionDataSetPtrInput is an input type that accepts DataSetRowLevelPermissionDataSetArgs, DataSetRowLevelPermissionDataSetPtr and DataSetRowLevelPermissionDataSetPtrOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionDataSetPtrInput` via:
//
//	        DataSetRowLevelPermissionDataSetArgs{...}
//
//	or:
//
//	        nil
type DataSetRowLevelPermissionDataSetPtrInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput
	ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Context) DataSetRowLevelPermissionDataSetPtrOutput
}

type dataSetRowLevelPermissionDataSetPtrType DataSetRowLevelPermissionDataSetArgs

func DataSetRowLevelPermissionDataSetPtr(v *DataSetRowLevelPermissionDataSetArgs) DataSetRowLevelPermissionDataSetPtrInput {
	return (*dataSetRowLevelPermissionDataSetPtrType)(v)
}

func (*dataSetRowLevelPermissionDataSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (i *dataSetRowLevelPermissionDataSetPtrType) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return i.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (i *dataSetRowLevelPermissionDataSetPtrType) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionDataSetPtrOutput)
}

// <p>Information about a dataset that contains permissions for row-level security (RLS).
//
//	   The permissions dataset maps fields to users or groups. For more information, see
//	   <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User
//	       Guide</i>.</p>
//	<p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is
//	   not supported for new RLS datasets.</p>
type DataSetRowLevelPermissionDataSetOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionDataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutput() DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(context.Background())
}

func (o DataSetRowLevelPermissionDataSetOutput) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionDataSet {
		return &v
	}).(DataSetRowLevelPermissionDataSetPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
func (o DataSetRowLevelPermissionDataSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) string { return v.Arn }).(pulumi.StringOutput)
}

// The user or group rules associated with the dataset that contains permissions for RLS.
//
// By default, `FormatVersion` is `VERSION_1` . When `FormatVersion` is `VERSION_1` , `UserName` and `GroupName` are required. When `FormatVersion` is `VERSION_2` , `UserARN` and `GroupARN` are required, and `Namespace` must not exist.
func (o DataSetRowLevelPermissionDataSetOutput) FormatVersion() DataSetRowLevelPermissionFormatVersionPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionFormatVersion {
		return v.FormatVersion
	}).(DataSetRowLevelPermissionFormatVersionPtrOutput)
}

// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
func (o DataSetRowLevelPermissionDataSetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of permissions to use when interpreting the permissions for RLS. `DENY_ACCESS` is included for backward compatibility only.
func (o DataSetRowLevelPermissionDataSetOutput) PermissionPolicy() DataSetRowLevelPermissionPolicyOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) DataSetRowLevelPermissionPolicy { return v.PermissionPolicy }).(DataSetRowLevelPermissionPolicyOutput)
}

// The status of the row-level security permission dataset. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
func (o DataSetRowLevelPermissionDataSetOutput) Status() DataSetStatusPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionDataSet) *DataSetStatus { return v.Status }).(DataSetStatusPtrOutput)
}

type DataSetRowLevelPermissionDataSetPtrOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionDataSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionDataSet)(nil)).Elem()
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) ToDataSetRowLevelPermissionDataSetPtrOutput() DataSetRowLevelPermissionDataSetPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) ToDataSetRowLevelPermissionDataSetPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionDataSetPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionDataSetPtrOutput) Elem() DataSetRowLevelPermissionDataSetOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) DataSetRowLevelPermissionDataSet {
		if v != nil {
			return *v
		}
		var ret DataSetRowLevelPermissionDataSet
		return ret
	}).(DataSetRowLevelPermissionDataSetOutput)
}

// <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
func (o DataSetRowLevelPermissionDataSetPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// The user or group rules associated with the dataset that contains permissions for RLS.
//
// By default, `FormatVersion` is `VERSION_1` . When `FormatVersion` is `VERSION_1` , `UserName` and `GroupName` are required. When `FormatVersion` is `VERSION_2` , `UserARN` and `GroupARN` are required, and `Namespace` must not exist.
func (o DataSetRowLevelPermissionDataSetPtrOutput) FormatVersion() DataSetRowLevelPermissionFormatVersionPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionFormatVersion {
		if v == nil {
			return nil
		}
		return v.FormatVersion
	}).(DataSetRowLevelPermissionFormatVersionPtrOutput)
}

// <p>The namespace associated with the dataset that contains permissions for RLS.</p>
func (o DataSetRowLevelPermissionDataSetPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The type of permissions to use when interpreting the permissions for RLS. `DENY_ACCESS` is included for backward compatibility only.
func (o DataSetRowLevelPermissionDataSetPtrOutput) PermissionPolicy() DataSetRowLevelPermissionPolicyPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *DataSetRowLevelPermissionPolicy {
		if v == nil {
			return nil
		}
		return &v.PermissionPolicy
	}).(DataSetRowLevelPermissionPolicyPtrOutput)
}

// The status of the row-level security permission dataset. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
func (o DataSetRowLevelPermissionDataSetPtrOutput) Status() DataSetStatusPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionDataSet) *DataSetStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DataSetStatusPtrOutput)
}

// <p>The configuration of tags on a dataset to set row-level security. </p>
type DataSetRowLevelPermissionTagConfiguration struct {
	// The status of row-level security tags. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
	Status *DataSetStatus `pulumi:"status"`
	// <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
	TagRuleConfigurations [][]string `pulumi:"tagRuleConfigurations"`
	// <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
	TagRules []DataSetRowLevelPermissionTagRule `pulumi:"tagRules"`
}

// DataSetRowLevelPermissionTagConfigurationInput is an input type that accepts DataSetRowLevelPermissionTagConfigurationArgs and DataSetRowLevelPermissionTagConfigurationOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagConfigurationInput` via:
//
//	DataSetRowLevelPermissionTagConfigurationArgs{...}
type DataSetRowLevelPermissionTagConfigurationInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput
	ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Context) DataSetRowLevelPermissionTagConfigurationOutput
}

// <p>The configuration of tags on a dataset to set row-level security. </p>
type DataSetRowLevelPermissionTagConfigurationArgs struct {
	// The status of row-level security tags. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
	Status DataSetStatusPtrInput `pulumi:"status"`
	// <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
	TagRuleConfigurations pulumi.StringArrayArrayInput `pulumi:"tagRuleConfigurations"`
	// <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
	TagRules DataSetRowLevelPermissionTagRuleArrayInput `pulumi:"tagRules"`
}

func (DataSetRowLevelPermissionTagConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationOutput)
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagConfigurationArgs) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationOutput).ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx)
}

// DataSetRowLevelPermissionTagConfigurationPtrInput is an input type that accepts DataSetRowLevelPermissionTagConfigurationArgs, DataSetRowLevelPermissionTagConfigurationPtr and DataSetRowLevelPermissionTagConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagConfigurationPtrInput` via:
//
//	        DataSetRowLevelPermissionTagConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSetRowLevelPermissionTagConfigurationPtrInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput
	ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput
}

type dataSetRowLevelPermissionTagConfigurationPtrType DataSetRowLevelPermissionTagConfigurationArgs

func DataSetRowLevelPermissionTagConfigurationPtr(v *DataSetRowLevelPermissionTagConfigurationArgs) DataSetRowLevelPermissionTagConfigurationPtrInput {
	return (*dataSetRowLevelPermissionTagConfigurationPtrType)(v)
}

func (*dataSetRowLevelPermissionTagConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (i *dataSetRowLevelPermissionTagConfigurationPtrType) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return i.ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSetRowLevelPermissionTagConfigurationPtrType) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagConfigurationPtrOutput)
}

// <p>The configuration of tags on a dataset to set row-level security. </p>
type DataSetRowLevelPermissionTagConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationOutput() DataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o.ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSetRowLevelPermissionTagConfigurationOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetRowLevelPermissionTagConfiguration) *DataSetRowLevelPermissionTagConfiguration {
		return &v
	}).(DataSetRowLevelPermissionTagConfigurationPtrOutput)
}

// The status of row-level security tags. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
func (o DataSetRowLevelPermissionTagConfigurationOutput) Status() DataSetStatusPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfiguration) *DataSetStatus { return v.Status }).(DataSetStatusPtrOutput)
}

// <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
func (o DataSetRowLevelPermissionTagConfigurationOutput) TagRuleConfigurations() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfiguration) [][]string { return v.TagRuleConfigurations }).(pulumi.StringArrayArrayOutput)
}

// <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
func (o DataSetRowLevelPermissionTagConfigurationOutput) TagRules() DataSetRowLevelPermissionTagRuleArrayOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagConfiguration) []DataSetRowLevelPermissionTagRule {
		return v.TagRules
	}).(DataSetRowLevelPermissionTagRuleArrayOutput)
}

type DataSetRowLevelPermissionTagConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetRowLevelPermissionTagConfiguration)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutput() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) ToDataSetRowLevelPermissionTagConfigurationPtrOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o
}

func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) Elem() DataSetRowLevelPermissionTagConfigurationOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionTagConfiguration) DataSetRowLevelPermissionTagConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSetRowLevelPermissionTagConfiguration
		return ret
	}).(DataSetRowLevelPermissionTagConfigurationOutput)
}

// The status of row-level security tags. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) Status() DataSetStatusPtrOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionTagConfiguration) *DataSetStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DataSetStatusPtrOutput)
}

// <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) TagRuleConfigurations() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionTagConfiguration) [][]string {
		if v == nil {
			return nil
		}
		return v.TagRuleConfigurations
	}).(pulumi.StringArrayArrayOutput)
}

// <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
func (o DataSetRowLevelPermissionTagConfigurationPtrOutput) TagRules() DataSetRowLevelPermissionTagRuleArrayOutput {
	return o.ApplyT(func(v *DataSetRowLevelPermissionTagConfiguration) []DataSetRowLevelPermissionTagRule {
		if v == nil {
			return nil
		}
		return v.TagRules
	}).(DataSetRowLevelPermissionTagRuleArrayOutput)
}

// <p>A set of rules associated with a tag.</p>
type DataSetRowLevelPermissionTagRule struct {
	// <p>The column name that a tag key is assigned to.</p>
	ColumnName string `pulumi:"columnName"`
	// <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
	MatchAllValue *string `pulumi:"matchAllValue"`
	// <p>The unique key for a tag.</p>
	TagKey string `pulumi:"tagKey"`
	// <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
	TagMultiValueDelimiter *string `pulumi:"tagMultiValueDelimiter"`
}

// DataSetRowLevelPermissionTagRuleInput is an input type that accepts DataSetRowLevelPermissionTagRuleArgs and DataSetRowLevelPermissionTagRuleOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagRuleInput` via:
//
//	DataSetRowLevelPermissionTagRuleArgs{...}
type DataSetRowLevelPermissionTagRuleInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagRuleOutput() DataSetRowLevelPermissionTagRuleOutput
	ToDataSetRowLevelPermissionTagRuleOutputWithContext(context.Context) DataSetRowLevelPermissionTagRuleOutput
}

// <p>A set of rules associated with a tag.</p>
type DataSetRowLevelPermissionTagRuleArgs struct {
	// <p>The column name that a tag key is assigned to.</p>
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
	MatchAllValue pulumi.StringPtrInput `pulumi:"matchAllValue"`
	// <p>The unique key for a tag.</p>
	TagKey pulumi.StringInput `pulumi:"tagKey"`
	// <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
	TagMultiValueDelimiter pulumi.StringPtrInput `pulumi:"tagMultiValueDelimiter"`
}

func (DataSetRowLevelPermissionTagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagRule)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagRuleArgs) ToDataSetRowLevelPermissionTagRuleOutput() DataSetRowLevelPermissionTagRuleOutput {
	return i.ToDataSetRowLevelPermissionTagRuleOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagRuleArgs) ToDataSetRowLevelPermissionTagRuleOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagRuleOutput)
}

// DataSetRowLevelPermissionTagRuleArrayInput is an input type that accepts DataSetRowLevelPermissionTagRuleArray and DataSetRowLevelPermissionTagRuleArrayOutput values.
// You can construct a concrete instance of `DataSetRowLevelPermissionTagRuleArrayInput` via:
//
//	DataSetRowLevelPermissionTagRuleArray{ DataSetRowLevelPermissionTagRuleArgs{...} }
type DataSetRowLevelPermissionTagRuleArrayInput interface {
	pulumi.Input

	ToDataSetRowLevelPermissionTagRuleArrayOutput() DataSetRowLevelPermissionTagRuleArrayOutput
	ToDataSetRowLevelPermissionTagRuleArrayOutputWithContext(context.Context) DataSetRowLevelPermissionTagRuleArrayOutput
}

type DataSetRowLevelPermissionTagRuleArray []DataSetRowLevelPermissionTagRuleInput

func (DataSetRowLevelPermissionTagRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetRowLevelPermissionTagRule)(nil)).Elem()
}

func (i DataSetRowLevelPermissionTagRuleArray) ToDataSetRowLevelPermissionTagRuleArrayOutput() DataSetRowLevelPermissionTagRuleArrayOutput {
	return i.ToDataSetRowLevelPermissionTagRuleArrayOutputWithContext(context.Background())
}

func (i DataSetRowLevelPermissionTagRuleArray) ToDataSetRowLevelPermissionTagRuleArrayOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetRowLevelPermissionTagRuleArrayOutput)
}

// <p>A set of rules associated with a tag.</p>
type DataSetRowLevelPermissionTagRuleOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetRowLevelPermissionTagRule)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagRuleOutput) ToDataSetRowLevelPermissionTagRuleOutput() DataSetRowLevelPermissionTagRuleOutput {
	return o
}

func (o DataSetRowLevelPermissionTagRuleOutput) ToDataSetRowLevelPermissionTagRuleOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagRuleOutput {
	return o
}

// <p>The column name that a tag key is assigned to.</p>
func (o DataSetRowLevelPermissionTagRuleOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagRule) string { return v.ColumnName }).(pulumi.StringOutput)
}

// <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
func (o DataSetRowLevelPermissionTagRuleOutput) MatchAllValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagRule) *string { return v.MatchAllValue }).(pulumi.StringPtrOutput)
}

// <p>The unique key for a tag.</p>
func (o DataSetRowLevelPermissionTagRuleOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagRule) string { return v.TagKey }).(pulumi.StringOutput)
}

// <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
func (o DataSetRowLevelPermissionTagRuleOutput) TagMultiValueDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSetRowLevelPermissionTagRule) *string { return v.TagMultiValueDelimiter }).(pulumi.StringPtrOutput)
}

type DataSetRowLevelPermissionTagRuleArrayOutput struct{ *pulumi.OutputState }

func (DataSetRowLevelPermissionTagRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetRowLevelPermissionTagRule)(nil)).Elem()
}

func (o DataSetRowLevelPermissionTagRuleArrayOutput) ToDataSetRowLevelPermissionTagRuleArrayOutput() DataSetRowLevelPermissionTagRuleArrayOutput {
	return o
}

func (o DataSetRowLevelPermissionTagRuleArrayOutput) ToDataSetRowLevelPermissionTagRuleArrayOutputWithContext(ctx context.Context) DataSetRowLevelPermissionTagRuleArrayOutput {
	return o
}

func (o DataSetRowLevelPermissionTagRuleArrayOutput) Index(i pulumi.IntInput) DataSetRowLevelPermissionTagRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetRowLevelPermissionTagRule {
		return vs[0].([]DataSetRowLevelPermissionTagRule)[vs[1].(int)]
	}).(DataSetRowLevelPermissionTagRuleOutput)
}

// <p>A physical table type for an S3 data source.</p>
type DataSetS3Source struct {
	// <p>The Amazon Resource Name (ARN) for the data source.</p>
	DataSourceArn string `pulumi:"dataSourceArn"`
	// <p>A physical table type for an S3 data source.</p>
	//          <note>
	//             <p>For files that aren't JSON, only <code>STRING</code> data types are supported in input columns.</p>
	//          </note>
	InputColumns []DataSetInputColumn `pulumi:"inputColumns"`
	// Information about the format for the S3 source file or files.
	UploadSettings interface{} `pulumi:"uploadSettings"`
}

// DataSetS3SourceInput is an input type that accepts DataSetS3SourceArgs and DataSetS3SourceOutput values.
// You can construct a concrete instance of `DataSetS3SourceInput` via:
//
//	DataSetS3SourceArgs{...}
type DataSetS3SourceInput interface {
	pulumi.Input

	ToDataSetS3SourceOutput() DataSetS3SourceOutput
	ToDataSetS3SourceOutputWithContext(context.Context) DataSetS3SourceOutput
}

// <p>A physical table type for an S3 data source.</p>
type DataSetS3SourceArgs struct {
	// <p>The Amazon Resource Name (ARN) for the data source.</p>
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// <p>A physical table type for an S3 data source.</p>
	//          <note>
	//             <p>For files that aren't JSON, only <code>STRING</code> data types are supported in input columns.</p>
	//          </note>
	InputColumns DataSetInputColumnArrayInput `pulumi:"inputColumns"`
	// Information about the format for the S3 source file or files.
	UploadSettings pulumi.Input `pulumi:"uploadSettings"`
}

func (DataSetS3SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetS3Source)(nil)).Elem()
}

func (i DataSetS3SourceArgs) ToDataSetS3SourceOutput() DataSetS3SourceOutput {
	return i.ToDataSetS3SourceOutputWithContext(context.Background())
}

func (i DataSetS3SourceArgs) ToDataSetS3SourceOutputWithContext(ctx context.Context) DataSetS3SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetS3SourceOutput)
}

func (i DataSetS3SourceArgs) ToDataSetS3SourcePtrOutput() DataSetS3SourcePtrOutput {
	return i.ToDataSetS3SourcePtrOutputWithContext(context.Background())
}

func (i DataSetS3SourceArgs) ToDataSetS3SourcePtrOutputWithContext(ctx context.Context) DataSetS3SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetS3SourceOutput).ToDataSetS3SourcePtrOutputWithContext(ctx)
}

// DataSetS3SourcePtrInput is an input type that accepts DataSetS3SourceArgs, DataSetS3SourcePtr and DataSetS3SourcePtrOutput values.
// You can construct a concrete instance of `DataSetS3SourcePtrInput` via:
//
//	        DataSetS3SourceArgs{...}
//
//	or:
//
//	        nil
type DataSetS3SourcePtrInput interface {
	pulumi.Input

	ToDataSetS3SourcePtrOutput() DataSetS3SourcePtrOutput
	ToDataSetS3SourcePtrOutputWithContext(context.Context) DataSetS3SourcePtrOutput
}

type dataSetS3SourcePtrType DataSetS3SourceArgs

func DataSetS3SourcePtr(v *DataSetS3SourceArgs) DataSetS3SourcePtrInput {
	return (*dataSetS3SourcePtrType)(v)
}

func (*dataSetS3SourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetS3Source)(nil)).Elem()
}

func (i *dataSetS3SourcePtrType) ToDataSetS3SourcePtrOutput() DataSetS3SourcePtrOutput {
	return i.ToDataSetS3SourcePtrOutputWithContext(context.Background())
}

func (i *dataSetS3SourcePtrType) ToDataSetS3SourcePtrOutputWithContext(ctx context.Context) DataSetS3SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetS3SourcePtrOutput)
}

// <p>A physical table type for an S3 data source.</p>
type DataSetS3SourceOutput struct{ *pulumi.OutputState }

func (DataSetS3SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetS3Source)(nil)).Elem()
}

func (o DataSetS3SourceOutput) ToDataSetS3SourceOutput() DataSetS3SourceOutput {
	return o
}

func (o DataSetS3SourceOutput) ToDataSetS3SourceOutputWithContext(ctx context.Context) DataSetS3SourceOutput {
	return o
}

func (o DataSetS3SourceOutput) ToDataSetS3SourcePtrOutput() DataSetS3SourcePtrOutput {
	return o.ToDataSetS3SourcePtrOutputWithContext(context.Background())
}

func (o DataSetS3SourceOutput) ToDataSetS3SourcePtrOutputWithContext(ctx context.Context) DataSetS3SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetS3Source) *DataSetS3Source {
		return &v
	}).(DataSetS3SourcePtrOutput)
}

// <p>The Amazon Resource Name (ARN) for the data source.</p>
func (o DataSetS3SourceOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetS3Source) string { return v.DataSourceArn }).(pulumi.StringOutput)
}

// <p>A physical table type for an S3 data source.</p>
//
//	<note>
//	   <p>For files that aren't JSON, only <code>STRING</code> data types are supported in input columns.</p>
//	</note>
func (o DataSetS3SourceOutput) InputColumns() DataSetInputColumnArrayOutput {
	return o.ApplyT(func(v DataSetS3Source) []DataSetInputColumn { return v.InputColumns }).(DataSetInputColumnArrayOutput)
}

// Information about the format for the S3 source file or files.
func (o DataSetS3SourceOutput) UploadSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DataSetS3Source) interface{} { return v.UploadSettings }).(pulumi.AnyOutput)
}

type DataSetS3SourcePtrOutput struct{ *pulumi.OutputState }

func (DataSetS3SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetS3Source)(nil)).Elem()
}

func (o DataSetS3SourcePtrOutput) ToDataSetS3SourcePtrOutput() DataSetS3SourcePtrOutput {
	return o
}

func (o DataSetS3SourcePtrOutput) ToDataSetS3SourcePtrOutputWithContext(ctx context.Context) DataSetS3SourcePtrOutput {
	return o
}

func (o DataSetS3SourcePtrOutput) Elem() DataSetS3SourceOutput {
	return o.ApplyT(func(v *DataSetS3Source) DataSetS3Source {
		if v != nil {
			return *v
		}
		var ret DataSetS3Source
		return ret
	}).(DataSetS3SourceOutput)
}

// <p>The Amazon Resource Name (ARN) for the data source.</p>
func (o DataSetS3SourcePtrOutput) DataSourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetS3Source) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceArn
	}).(pulumi.StringPtrOutput)
}

// <p>A physical table type for an S3 data source.</p>
//
//	<note>
//	   <p>For files that aren't JSON, only <code>STRING</code> data types are supported in input columns.</p>
//	</note>
func (o DataSetS3SourcePtrOutput) InputColumns() DataSetInputColumnArrayOutput {
	return o.ApplyT(func(v *DataSetS3Source) []DataSetInputColumn {
		if v == nil {
			return nil
		}
		return v.InputColumns
	}).(DataSetInputColumnArrayOutput)
}

// Information about the format for the S3 source file or files.
func (o DataSetS3SourcePtrOutput) UploadSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataSetS3Source) interface{} {
		if v == nil {
			return nil
		}
		return v.UploadSettings
	}).(pulumi.AnyOutput)
}

// <p>A string parameter for a dataset.</p>
type DataSetStringDatasetParameter struct {
	// A list of default values for a given string dataset parameter type. This structure only accepts static values.
	DefaultValues *DataSetStringDatasetParameterDefaultValues `pulumi:"defaultValues"`
	// <p>An identifier for the string parameter that is created in the dataset.</p>
	Id string `pulumi:"id"`
	// <p>The name of the string parameter that is created in the dataset.</p>
	Name string `pulumi:"name"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueType `pulumi:"valueType"`
}

// DataSetStringDatasetParameterInput is an input type that accepts DataSetStringDatasetParameterArgs and DataSetStringDatasetParameterOutput values.
// You can construct a concrete instance of `DataSetStringDatasetParameterInput` via:
//
//	DataSetStringDatasetParameterArgs{...}
type DataSetStringDatasetParameterInput interface {
	pulumi.Input

	ToDataSetStringDatasetParameterOutput() DataSetStringDatasetParameterOutput
	ToDataSetStringDatasetParameterOutputWithContext(context.Context) DataSetStringDatasetParameterOutput
}

// <p>A string parameter for a dataset.</p>
type DataSetStringDatasetParameterArgs struct {
	// A list of default values for a given string dataset parameter type. This structure only accepts static values.
	DefaultValues DataSetStringDatasetParameterDefaultValuesPtrInput `pulumi:"defaultValues"`
	// <p>An identifier for the string parameter that is created in the dataset.</p>
	Id pulumi.StringInput `pulumi:"id"`
	// <p>The name of the string parameter that is created in the dataset.</p>
	Name pulumi.StringInput `pulumi:"name"`
	// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
	ValueType DataSetDatasetParameterValueTypeInput `pulumi:"valueType"`
}

func (DataSetStringDatasetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetStringDatasetParameter)(nil)).Elem()
}

func (i DataSetStringDatasetParameterArgs) ToDataSetStringDatasetParameterOutput() DataSetStringDatasetParameterOutput {
	return i.ToDataSetStringDatasetParameterOutputWithContext(context.Background())
}

func (i DataSetStringDatasetParameterArgs) ToDataSetStringDatasetParameterOutputWithContext(ctx context.Context) DataSetStringDatasetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetStringDatasetParameterOutput)
}

func (i DataSetStringDatasetParameterArgs) ToDataSetStringDatasetParameterPtrOutput() DataSetStringDatasetParameterPtrOutput {
	return i.ToDataSetStringDatasetParameterPtrOutputWithContext(context.Background())
}

func (i DataSetStringDatasetParameterArgs) ToDataSetStringDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetStringDatasetParameterOutput).ToDataSetStringDatasetParameterPtrOutputWithContext(ctx)
}

// DataSetStringDatasetParameterPtrInput is an input type that accepts DataSetStringDatasetParameterArgs, DataSetStringDatasetParameterPtr and DataSetStringDatasetParameterPtrOutput values.
// You can construct a concrete instance of `DataSetStringDatasetParameterPtrInput` via:
//
//	        DataSetStringDatasetParameterArgs{...}
//
//	or:
//
//	        nil
type DataSetStringDatasetParameterPtrInput interface {
	pulumi.Input

	ToDataSetStringDatasetParameterPtrOutput() DataSetStringDatasetParameterPtrOutput
	ToDataSetStringDatasetParameterPtrOutputWithContext(context.Context) DataSetStringDatasetParameterPtrOutput
}

type dataSetStringDatasetParameterPtrType DataSetStringDatasetParameterArgs

func DataSetStringDatasetParameterPtr(v *DataSetStringDatasetParameterArgs) DataSetStringDatasetParameterPtrInput {
	return (*dataSetStringDatasetParameterPtrType)(v)
}

func (*dataSetStringDatasetParameterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetStringDatasetParameter)(nil)).Elem()
}

func (i *dataSetStringDatasetParameterPtrType) ToDataSetStringDatasetParameterPtrOutput() DataSetStringDatasetParameterPtrOutput {
	return i.ToDataSetStringDatasetParameterPtrOutputWithContext(context.Background())
}

func (i *dataSetStringDatasetParameterPtrType) ToDataSetStringDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetStringDatasetParameterPtrOutput)
}

// <p>A string parameter for a dataset.</p>
type DataSetStringDatasetParameterOutput struct{ *pulumi.OutputState }

func (DataSetStringDatasetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetStringDatasetParameter)(nil)).Elem()
}

func (o DataSetStringDatasetParameterOutput) ToDataSetStringDatasetParameterOutput() DataSetStringDatasetParameterOutput {
	return o
}

func (o DataSetStringDatasetParameterOutput) ToDataSetStringDatasetParameterOutputWithContext(ctx context.Context) DataSetStringDatasetParameterOutput {
	return o
}

func (o DataSetStringDatasetParameterOutput) ToDataSetStringDatasetParameterPtrOutput() DataSetStringDatasetParameterPtrOutput {
	return o.ToDataSetStringDatasetParameterPtrOutputWithContext(context.Background())
}

func (o DataSetStringDatasetParameterOutput) ToDataSetStringDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetStringDatasetParameter) *DataSetStringDatasetParameter {
		return &v
	}).(DataSetStringDatasetParameterPtrOutput)
}

// A list of default values for a given string dataset parameter type. This structure only accepts static values.
func (o DataSetStringDatasetParameterOutput) DefaultValues() DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v DataSetStringDatasetParameter) *DataSetStringDatasetParameterDefaultValues {
		return v.DefaultValues
	}).(DataSetStringDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the string parameter that is created in the dataset.</p>
func (o DataSetStringDatasetParameterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetStringDatasetParameter) string { return v.Id }).(pulumi.StringOutput)
}

// <p>The name of the string parameter that is created in the dataset.</p>
func (o DataSetStringDatasetParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetStringDatasetParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetStringDatasetParameterOutput) ValueType() DataSetDatasetParameterValueTypeOutput {
	return o.ApplyT(func(v DataSetStringDatasetParameter) DataSetDatasetParameterValueType { return v.ValueType }).(DataSetDatasetParameterValueTypeOutput)
}

type DataSetStringDatasetParameterPtrOutput struct{ *pulumi.OutputState }

func (DataSetStringDatasetParameterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetStringDatasetParameter)(nil)).Elem()
}

func (o DataSetStringDatasetParameterPtrOutput) ToDataSetStringDatasetParameterPtrOutput() DataSetStringDatasetParameterPtrOutput {
	return o
}

func (o DataSetStringDatasetParameterPtrOutput) ToDataSetStringDatasetParameterPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterPtrOutput {
	return o
}

func (o DataSetStringDatasetParameterPtrOutput) Elem() DataSetStringDatasetParameterOutput {
	return o.ApplyT(func(v *DataSetStringDatasetParameter) DataSetStringDatasetParameter {
		if v != nil {
			return *v
		}
		var ret DataSetStringDatasetParameter
		return ret
	}).(DataSetStringDatasetParameterOutput)
}

// A list of default values for a given string dataset parameter type. This structure only accepts static values.
func (o DataSetStringDatasetParameterPtrOutput) DefaultValues() DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyT(func(v *DataSetStringDatasetParameter) *DataSetStringDatasetParameterDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(DataSetStringDatasetParameterDefaultValuesPtrOutput)
}

// <p>An identifier for the string parameter that is created in the dataset.</p>
func (o DataSetStringDatasetParameterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetStringDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// <p>The name of the string parameter that is created in the dataset.</p>
func (o DataSetStringDatasetParameterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetStringDatasetParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value type of the dataset parameter. Valid values are `single value` or `multi value` .
func (o DataSetStringDatasetParameterPtrOutput) ValueType() DataSetDatasetParameterValueTypePtrOutput {
	return o.ApplyT(func(v *DataSetStringDatasetParameter) *DataSetDatasetParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ValueType
	}).(DataSetDatasetParameterValueTypePtrOutput)
}

// <p>The default values of a string parameter.</p>
type DataSetStringDatasetParameterDefaultValues struct {
	// <p>A list of static default values for a given string parameter.</p>
	StaticValues []string `pulumi:"staticValues"`
}

// DataSetStringDatasetParameterDefaultValuesInput is an input type that accepts DataSetStringDatasetParameterDefaultValuesArgs and DataSetStringDatasetParameterDefaultValuesOutput values.
// You can construct a concrete instance of `DataSetStringDatasetParameterDefaultValuesInput` via:
//
//	DataSetStringDatasetParameterDefaultValuesArgs{...}
type DataSetStringDatasetParameterDefaultValuesInput interface {
	pulumi.Input

	ToDataSetStringDatasetParameterDefaultValuesOutput() DataSetStringDatasetParameterDefaultValuesOutput
	ToDataSetStringDatasetParameterDefaultValuesOutputWithContext(context.Context) DataSetStringDatasetParameterDefaultValuesOutput
}

// <p>The default values of a string parameter.</p>
type DataSetStringDatasetParameterDefaultValuesArgs struct {
	// <p>A list of static default values for a given string parameter.</p>
	StaticValues pulumi.StringArrayInput `pulumi:"staticValues"`
}

func (DataSetStringDatasetParameterDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetStringDatasetParameterDefaultValues)(nil)).Elem()
}

func (i DataSetStringDatasetParameterDefaultValuesArgs) ToDataSetStringDatasetParameterDefaultValuesOutput() DataSetStringDatasetParameterDefaultValuesOutput {
	return i.ToDataSetStringDatasetParameterDefaultValuesOutputWithContext(context.Background())
}

func (i DataSetStringDatasetParameterDefaultValuesArgs) ToDataSetStringDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetStringDatasetParameterDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetStringDatasetParameterDefaultValuesOutput)
}

func (i DataSetStringDatasetParameterDefaultValuesArgs) ToDataSetStringDatasetParameterDefaultValuesPtrOutput() DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DataSetStringDatasetParameterDefaultValuesArgs) ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetStringDatasetParameterDefaultValuesOutput).ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(ctx)
}

// DataSetStringDatasetParameterDefaultValuesPtrInput is an input type that accepts DataSetStringDatasetParameterDefaultValuesArgs, DataSetStringDatasetParameterDefaultValuesPtr and DataSetStringDatasetParameterDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DataSetStringDatasetParameterDefaultValuesPtrInput` via:
//
//	        DataSetStringDatasetParameterDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type DataSetStringDatasetParameterDefaultValuesPtrInput interface {
	pulumi.Input

	ToDataSetStringDatasetParameterDefaultValuesPtrOutput() DataSetStringDatasetParameterDefaultValuesPtrOutput
	ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(context.Context) DataSetStringDatasetParameterDefaultValuesPtrOutput
}

type dataSetStringDatasetParameterDefaultValuesPtrType DataSetStringDatasetParameterDefaultValuesArgs

func DataSetStringDatasetParameterDefaultValuesPtr(v *DataSetStringDatasetParameterDefaultValuesArgs) DataSetStringDatasetParameterDefaultValuesPtrInput {
	return (*dataSetStringDatasetParameterDefaultValuesPtrType)(v)
}

func (*dataSetStringDatasetParameterDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetStringDatasetParameterDefaultValues)(nil)).Elem()
}

func (i *dataSetStringDatasetParameterDefaultValuesPtrType) ToDataSetStringDatasetParameterDefaultValuesPtrOutput() DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return i.ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *dataSetStringDatasetParameterDefaultValuesPtrType) ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetStringDatasetParameterDefaultValuesPtrOutput)
}

// <p>The default values of a string parameter.</p>
type DataSetStringDatasetParameterDefaultValuesOutput struct{ *pulumi.OutputState }

func (DataSetStringDatasetParameterDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetStringDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetStringDatasetParameterDefaultValuesOutput) ToDataSetStringDatasetParameterDefaultValuesOutput() DataSetStringDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetStringDatasetParameterDefaultValuesOutput) ToDataSetStringDatasetParameterDefaultValuesOutputWithContext(ctx context.Context) DataSetStringDatasetParameterDefaultValuesOutput {
	return o
}

func (o DataSetStringDatasetParameterDefaultValuesOutput) ToDataSetStringDatasetParameterDefaultValuesPtrOutput() DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return o.ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DataSetStringDatasetParameterDefaultValuesOutput) ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetStringDatasetParameterDefaultValues) *DataSetStringDatasetParameterDefaultValues {
		return &v
	}).(DataSetStringDatasetParameterDefaultValuesPtrOutput)
}

// <p>A list of static default values for a given string parameter.</p>
func (o DataSetStringDatasetParameterDefaultValuesOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetStringDatasetParameterDefaultValues) []string { return v.StaticValues }).(pulumi.StringArrayOutput)
}

type DataSetStringDatasetParameterDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DataSetStringDatasetParameterDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetStringDatasetParameterDefaultValues)(nil)).Elem()
}

func (o DataSetStringDatasetParameterDefaultValuesPtrOutput) ToDataSetStringDatasetParameterDefaultValuesPtrOutput() DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetStringDatasetParameterDefaultValuesPtrOutput) ToDataSetStringDatasetParameterDefaultValuesPtrOutputWithContext(ctx context.Context) DataSetStringDatasetParameterDefaultValuesPtrOutput {
	return o
}

func (o DataSetStringDatasetParameterDefaultValuesPtrOutput) Elem() DataSetStringDatasetParameterDefaultValuesOutput {
	return o.ApplyT(func(v *DataSetStringDatasetParameterDefaultValues) DataSetStringDatasetParameterDefaultValues {
		if v != nil {
			return *v
		}
		var ret DataSetStringDatasetParameterDefaultValues
		return ret
	}).(DataSetStringDatasetParameterDefaultValuesOutput)
}

// <p>A list of static default values for a given string parameter.</p>
func (o DataSetStringDatasetParameterDefaultValuesPtrOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSetStringDatasetParameterDefaultValues) []string {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.StringArrayOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type DataSetTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// <p>A transform operation that tags a column with additional information.</p>
type DataSetTagColumnOperation struct {
	// <p>The column that this operation acts on.</p>
	ColumnName string `pulumi:"columnName"`
	// <p>The dataset column tag, currently only used for geospatial type tagging.</p>
	//          <note>
	//             <p>This is not tags for the Amazon Web Services tagging feature.</p>
	//          </note>
	Tags []DataSetColumnTag `pulumi:"tags"`
}

// DataSetTagColumnOperationInput is an input type that accepts DataSetTagColumnOperationArgs and DataSetTagColumnOperationOutput values.
// You can construct a concrete instance of `DataSetTagColumnOperationInput` via:
//
//	DataSetTagColumnOperationArgs{...}
type DataSetTagColumnOperationInput interface {
	pulumi.Input

	ToDataSetTagColumnOperationOutput() DataSetTagColumnOperationOutput
	ToDataSetTagColumnOperationOutputWithContext(context.Context) DataSetTagColumnOperationOutput
}

// <p>A transform operation that tags a column with additional information.</p>
type DataSetTagColumnOperationArgs struct {
	// <p>The column that this operation acts on.</p>
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// <p>The dataset column tag, currently only used for geospatial type tagging.</p>
	//          <note>
	//             <p>This is not tags for the Amazon Web Services tagging feature.</p>
	//          </note>
	Tags DataSetColumnTagArrayInput `pulumi:"tags"`
}

func (DataSetTagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTagColumnOperation)(nil)).Elem()
}

func (i DataSetTagColumnOperationArgs) ToDataSetTagColumnOperationOutput() DataSetTagColumnOperationOutput {
	return i.ToDataSetTagColumnOperationOutputWithContext(context.Background())
}

func (i DataSetTagColumnOperationArgs) ToDataSetTagColumnOperationOutputWithContext(ctx context.Context) DataSetTagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetTagColumnOperationOutput)
}

func (i DataSetTagColumnOperationArgs) ToDataSetTagColumnOperationPtrOutput() DataSetTagColumnOperationPtrOutput {
	return i.ToDataSetTagColumnOperationPtrOutputWithContext(context.Background())
}

func (i DataSetTagColumnOperationArgs) ToDataSetTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetTagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetTagColumnOperationOutput).ToDataSetTagColumnOperationPtrOutputWithContext(ctx)
}

// DataSetTagColumnOperationPtrInput is an input type that accepts DataSetTagColumnOperationArgs, DataSetTagColumnOperationPtr and DataSetTagColumnOperationPtrOutput values.
// You can construct a concrete instance of `DataSetTagColumnOperationPtrInput` via:
//
//	        DataSetTagColumnOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetTagColumnOperationPtrInput interface {
	pulumi.Input

	ToDataSetTagColumnOperationPtrOutput() DataSetTagColumnOperationPtrOutput
	ToDataSetTagColumnOperationPtrOutputWithContext(context.Context) DataSetTagColumnOperationPtrOutput
}

type dataSetTagColumnOperationPtrType DataSetTagColumnOperationArgs

func DataSetTagColumnOperationPtr(v *DataSetTagColumnOperationArgs) DataSetTagColumnOperationPtrInput {
	return (*dataSetTagColumnOperationPtrType)(v)
}

func (*dataSetTagColumnOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetTagColumnOperation)(nil)).Elem()
}

func (i *dataSetTagColumnOperationPtrType) ToDataSetTagColumnOperationPtrOutput() DataSetTagColumnOperationPtrOutput {
	return i.ToDataSetTagColumnOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetTagColumnOperationPtrType) ToDataSetTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetTagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetTagColumnOperationPtrOutput)
}

// <p>A transform operation that tags a column with additional information.</p>
type DataSetTagColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetTagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTagColumnOperation)(nil)).Elem()
}

func (o DataSetTagColumnOperationOutput) ToDataSetTagColumnOperationOutput() DataSetTagColumnOperationOutput {
	return o
}

func (o DataSetTagColumnOperationOutput) ToDataSetTagColumnOperationOutputWithContext(ctx context.Context) DataSetTagColumnOperationOutput {
	return o
}

func (o DataSetTagColumnOperationOutput) ToDataSetTagColumnOperationPtrOutput() DataSetTagColumnOperationPtrOutput {
	return o.ToDataSetTagColumnOperationPtrOutputWithContext(context.Background())
}

func (o DataSetTagColumnOperationOutput) ToDataSetTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetTagColumnOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetTagColumnOperation) *DataSetTagColumnOperation {
		return &v
	}).(DataSetTagColumnOperationPtrOutput)
}

// <p>The column that this operation acts on.</p>
func (o DataSetTagColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetTagColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// <p>The dataset column tag, currently only used for geospatial type tagging.</p>
//
//	<note>
//	   <p>This is not tags for the Amazon Web Services tagging feature.</p>
//	</note>
func (o DataSetTagColumnOperationOutput) Tags() DataSetColumnTagArrayOutput {
	return o.ApplyT(func(v DataSetTagColumnOperation) []DataSetColumnTag { return v.Tags }).(DataSetColumnTagArrayOutput)
}

type DataSetTagColumnOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetTagColumnOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetTagColumnOperation)(nil)).Elem()
}

func (o DataSetTagColumnOperationPtrOutput) ToDataSetTagColumnOperationPtrOutput() DataSetTagColumnOperationPtrOutput {
	return o
}

func (o DataSetTagColumnOperationPtrOutput) ToDataSetTagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetTagColumnOperationPtrOutput {
	return o
}

func (o DataSetTagColumnOperationPtrOutput) Elem() DataSetTagColumnOperationOutput {
	return o.ApplyT(func(v *DataSetTagColumnOperation) DataSetTagColumnOperation {
		if v != nil {
			return *v
		}
		var ret DataSetTagColumnOperation
		return ret
	}).(DataSetTagColumnOperationOutput)
}

// <p>The column that this operation acts on.</p>
func (o DataSetTagColumnOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetTagColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// <p>The dataset column tag, currently only used for geospatial type tagging.</p>
//
//	<note>
//	   <p>This is not tags for the Amazon Web Services tagging feature.</p>
//	</note>
func (o DataSetTagColumnOperationPtrOutput) Tags() DataSetColumnTagArrayOutput {
	return o.ApplyT(func(v *DataSetTagColumnOperation) []DataSetColumnTag {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(DataSetColumnTagArrayOutput)
}

// <p>A data transformation on a logical table. This is a variant type structure. For this
//
//	structure to be valid, only one of the attributes can be non-null.</p>
type DataSetTransformOperation struct {
	// A transform operation that casts a column to a different type.
	CastColumnTypeOperation *DataSetCastColumnTypeOperation `pulumi:"castColumnTypeOperation"`
	// An operation that creates calculated columns. Columns created in one such operation form a lexical closure.
	CreateColumnsOperation *DataSetCreateColumnsOperation `pulumi:"createColumnsOperation"`
	// An operation that filters rows based on some condition.
	FilterOperation *DataSetFilterOperation `pulumi:"filterOperation"`
	// A transform operation that overrides the dataset parameter values that are defined in another dataset.
	OverrideDatasetParameterOperation *DataSetOverrideDatasetParameterOperation `pulumi:"overrideDatasetParameterOperation"`
	// An operation that projects columns. Operations that come after a projection can only refer to projected columns.
	ProjectOperation *DataSetProjectOperation `pulumi:"projectOperation"`
	// An operation that renames a column.
	RenameColumnOperation *DataSetRenameColumnOperation `pulumi:"renameColumnOperation"`
	// An operation that tags a column with additional information.
	TagColumnOperation   *DataSetTagColumnOperation   `pulumi:"tagColumnOperation"`
	UntagColumnOperation *DataSetUntagColumnOperation `pulumi:"untagColumnOperation"`
}

// DataSetTransformOperationInput is an input type that accepts DataSetTransformOperationArgs and DataSetTransformOperationOutput values.
// You can construct a concrete instance of `DataSetTransformOperationInput` via:
//
//	DataSetTransformOperationArgs{...}
type DataSetTransformOperationInput interface {
	pulumi.Input

	ToDataSetTransformOperationOutput() DataSetTransformOperationOutput
	ToDataSetTransformOperationOutputWithContext(context.Context) DataSetTransformOperationOutput
}

// <p>A data transformation on a logical table. This is a variant type structure. For this
//
//	structure to be valid, only one of the attributes can be non-null.</p>
type DataSetTransformOperationArgs struct {
	// A transform operation that casts a column to a different type.
	CastColumnTypeOperation DataSetCastColumnTypeOperationPtrInput `pulumi:"castColumnTypeOperation"`
	// An operation that creates calculated columns. Columns created in one such operation form a lexical closure.
	CreateColumnsOperation DataSetCreateColumnsOperationPtrInput `pulumi:"createColumnsOperation"`
	// An operation that filters rows based on some condition.
	FilterOperation DataSetFilterOperationPtrInput `pulumi:"filterOperation"`
	// A transform operation that overrides the dataset parameter values that are defined in another dataset.
	OverrideDatasetParameterOperation DataSetOverrideDatasetParameterOperationPtrInput `pulumi:"overrideDatasetParameterOperation"`
	// An operation that projects columns. Operations that come after a projection can only refer to projected columns.
	ProjectOperation DataSetProjectOperationPtrInput `pulumi:"projectOperation"`
	// An operation that renames a column.
	RenameColumnOperation DataSetRenameColumnOperationPtrInput `pulumi:"renameColumnOperation"`
	// An operation that tags a column with additional information.
	TagColumnOperation   DataSetTagColumnOperationPtrInput   `pulumi:"tagColumnOperation"`
	UntagColumnOperation DataSetUntagColumnOperationPtrInput `pulumi:"untagColumnOperation"`
}

func (DataSetTransformOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTransformOperation)(nil)).Elem()
}

func (i DataSetTransformOperationArgs) ToDataSetTransformOperationOutput() DataSetTransformOperationOutput {
	return i.ToDataSetTransformOperationOutputWithContext(context.Background())
}

func (i DataSetTransformOperationArgs) ToDataSetTransformOperationOutputWithContext(ctx context.Context) DataSetTransformOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetTransformOperationOutput)
}

// DataSetTransformOperationArrayInput is an input type that accepts DataSetTransformOperationArray and DataSetTransformOperationArrayOutput values.
// You can construct a concrete instance of `DataSetTransformOperationArrayInput` via:
//
//	DataSetTransformOperationArray{ DataSetTransformOperationArgs{...} }
type DataSetTransformOperationArrayInput interface {
	pulumi.Input

	ToDataSetTransformOperationArrayOutput() DataSetTransformOperationArrayOutput
	ToDataSetTransformOperationArrayOutputWithContext(context.Context) DataSetTransformOperationArrayOutput
}

type DataSetTransformOperationArray []DataSetTransformOperationInput

func (DataSetTransformOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetTransformOperation)(nil)).Elem()
}

func (i DataSetTransformOperationArray) ToDataSetTransformOperationArrayOutput() DataSetTransformOperationArrayOutput {
	return i.ToDataSetTransformOperationArrayOutputWithContext(context.Background())
}

func (i DataSetTransformOperationArray) ToDataSetTransformOperationArrayOutputWithContext(ctx context.Context) DataSetTransformOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetTransformOperationArrayOutput)
}

// <p>A data transformation on a logical table. This is a variant type structure. For this
//
//	structure to be valid, only one of the attributes can be non-null.</p>
type DataSetTransformOperationOutput struct{ *pulumi.OutputState }

func (DataSetTransformOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTransformOperation)(nil)).Elem()
}

func (o DataSetTransformOperationOutput) ToDataSetTransformOperationOutput() DataSetTransformOperationOutput {
	return o
}

func (o DataSetTransformOperationOutput) ToDataSetTransformOperationOutputWithContext(ctx context.Context) DataSetTransformOperationOutput {
	return o
}

// A transform operation that casts a column to a different type.
func (o DataSetTransformOperationOutput) CastColumnTypeOperation() DataSetCastColumnTypeOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetCastColumnTypeOperation { return v.CastColumnTypeOperation }).(DataSetCastColumnTypeOperationPtrOutput)
}

// An operation that creates calculated columns. Columns created in one such operation form a lexical closure.
func (o DataSetTransformOperationOutput) CreateColumnsOperation() DataSetCreateColumnsOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetCreateColumnsOperation { return v.CreateColumnsOperation }).(DataSetCreateColumnsOperationPtrOutput)
}

// An operation that filters rows based on some condition.
func (o DataSetTransformOperationOutput) FilterOperation() DataSetFilterOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetFilterOperation { return v.FilterOperation }).(DataSetFilterOperationPtrOutput)
}

// A transform operation that overrides the dataset parameter values that are defined in another dataset.
func (o DataSetTransformOperationOutput) OverrideDatasetParameterOperation() DataSetOverrideDatasetParameterOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetOverrideDatasetParameterOperation {
		return v.OverrideDatasetParameterOperation
	}).(DataSetOverrideDatasetParameterOperationPtrOutput)
}

// An operation that projects columns. Operations that come after a projection can only refer to projected columns.
func (o DataSetTransformOperationOutput) ProjectOperation() DataSetProjectOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetProjectOperation { return v.ProjectOperation }).(DataSetProjectOperationPtrOutput)
}

// An operation that renames a column.
func (o DataSetTransformOperationOutput) RenameColumnOperation() DataSetRenameColumnOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetRenameColumnOperation { return v.RenameColumnOperation }).(DataSetRenameColumnOperationPtrOutput)
}

// An operation that tags a column with additional information.
func (o DataSetTransformOperationOutput) TagColumnOperation() DataSetTagColumnOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetTagColumnOperation { return v.TagColumnOperation }).(DataSetTagColumnOperationPtrOutput)
}

func (o DataSetTransformOperationOutput) UntagColumnOperation() DataSetUntagColumnOperationPtrOutput {
	return o.ApplyT(func(v DataSetTransformOperation) *DataSetUntagColumnOperation { return v.UntagColumnOperation }).(DataSetUntagColumnOperationPtrOutput)
}

type DataSetTransformOperationArrayOutput struct{ *pulumi.OutputState }

func (DataSetTransformOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetTransformOperation)(nil)).Elem()
}

func (o DataSetTransformOperationArrayOutput) ToDataSetTransformOperationArrayOutput() DataSetTransformOperationArrayOutput {
	return o
}

func (o DataSetTransformOperationArrayOutput) ToDataSetTransformOperationArrayOutputWithContext(ctx context.Context) DataSetTransformOperationArrayOutput {
	return o
}

func (o DataSetTransformOperationArrayOutput) Index(i pulumi.IntInput) DataSetTransformOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetTransformOperation {
		return vs[0].([]DataSetTransformOperation)[vs[1].(int)]
	}).(DataSetTransformOperationOutput)
}

type DataSetUniqueKey struct {
	ColumnNames []string `pulumi:"columnNames"`
}

// DataSetUniqueKeyInput is an input type that accepts DataSetUniqueKeyArgs and DataSetUniqueKeyOutput values.
// You can construct a concrete instance of `DataSetUniqueKeyInput` via:
//
//	DataSetUniqueKeyArgs{...}
type DataSetUniqueKeyInput interface {
	pulumi.Input

	ToDataSetUniqueKeyOutput() DataSetUniqueKeyOutput
	ToDataSetUniqueKeyOutputWithContext(context.Context) DataSetUniqueKeyOutput
}

type DataSetUniqueKeyArgs struct {
	ColumnNames pulumi.StringArrayInput `pulumi:"columnNames"`
}

func (DataSetUniqueKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetUniqueKey)(nil)).Elem()
}

func (i DataSetUniqueKeyArgs) ToDataSetUniqueKeyOutput() DataSetUniqueKeyOutput {
	return i.ToDataSetUniqueKeyOutputWithContext(context.Background())
}

func (i DataSetUniqueKeyArgs) ToDataSetUniqueKeyOutputWithContext(ctx context.Context) DataSetUniqueKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUniqueKeyOutput)
}

// DataSetUniqueKeyArrayInput is an input type that accepts DataSetUniqueKeyArray and DataSetUniqueKeyArrayOutput values.
// You can construct a concrete instance of `DataSetUniqueKeyArrayInput` via:
//
//	DataSetUniqueKeyArray{ DataSetUniqueKeyArgs{...} }
type DataSetUniqueKeyArrayInput interface {
	pulumi.Input

	ToDataSetUniqueKeyArrayOutput() DataSetUniqueKeyArrayOutput
	ToDataSetUniqueKeyArrayOutputWithContext(context.Context) DataSetUniqueKeyArrayOutput
}

type DataSetUniqueKeyArray []DataSetUniqueKeyInput

func (DataSetUniqueKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetUniqueKey)(nil)).Elem()
}

func (i DataSetUniqueKeyArray) ToDataSetUniqueKeyArrayOutput() DataSetUniqueKeyArrayOutput {
	return i.ToDataSetUniqueKeyArrayOutputWithContext(context.Background())
}

func (i DataSetUniqueKeyArray) ToDataSetUniqueKeyArrayOutputWithContext(ctx context.Context) DataSetUniqueKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUniqueKeyArrayOutput)
}

type DataSetUniqueKeyOutput struct{ *pulumi.OutputState }

func (DataSetUniqueKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetUniqueKey)(nil)).Elem()
}

func (o DataSetUniqueKeyOutput) ToDataSetUniqueKeyOutput() DataSetUniqueKeyOutput {
	return o
}

func (o DataSetUniqueKeyOutput) ToDataSetUniqueKeyOutputWithContext(ctx context.Context) DataSetUniqueKeyOutput {
	return o
}

func (o DataSetUniqueKeyOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSetUniqueKey) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

type DataSetUniqueKeyArrayOutput struct{ *pulumi.OutputState }

func (DataSetUniqueKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSetUniqueKey)(nil)).Elem()
}

func (o DataSetUniqueKeyArrayOutput) ToDataSetUniqueKeyArrayOutput() DataSetUniqueKeyArrayOutput {
	return o
}

func (o DataSetUniqueKeyArrayOutput) ToDataSetUniqueKeyArrayOutputWithContext(ctx context.Context) DataSetUniqueKeyArrayOutput {
	return o
}

func (o DataSetUniqueKeyArrayOutput) Index(i pulumi.IntInput) DataSetUniqueKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSetUniqueKey {
		return vs[0].([]DataSetUniqueKey)[vs[1].(int)]
	}).(DataSetUniqueKeyOutput)
}

// <p>A transform operation that removes tags associated with a column.</p>
type DataSetUntagColumnOperation struct {
	// <p>The column that this operation acts on.</p>
	ColumnName string `pulumi:"columnName"`
	// <p>The column tags to remove from this column.</p>
	TagNames []DataSetColumnTagName `pulumi:"tagNames"`
}

// DataSetUntagColumnOperationInput is an input type that accepts DataSetUntagColumnOperationArgs and DataSetUntagColumnOperationOutput values.
// You can construct a concrete instance of `DataSetUntagColumnOperationInput` via:
//
//	DataSetUntagColumnOperationArgs{...}
type DataSetUntagColumnOperationInput interface {
	pulumi.Input

	ToDataSetUntagColumnOperationOutput() DataSetUntagColumnOperationOutput
	ToDataSetUntagColumnOperationOutputWithContext(context.Context) DataSetUntagColumnOperationOutput
}

// <p>A transform operation that removes tags associated with a column.</p>
type DataSetUntagColumnOperationArgs struct {
	// <p>The column that this operation acts on.</p>
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// <p>The column tags to remove from this column.</p>
	TagNames DataSetColumnTagNameArrayInput `pulumi:"tagNames"`
}

func (DataSetUntagColumnOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetUntagColumnOperation)(nil)).Elem()
}

func (i DataSetUntagColumnOperationArgs) ToDataSetUntagColumnOperationOutput() DataSetUntagColumnOperationOutput {
	return i.ToDataSetUntagColumnOperationOutputWithContext(context.Background())
}

func (i DataSetUntagColumnOperationArgs) ToDataSetUntagColumnOperationOutputWithContext(ctx context.Context) DataSetUntagColumnOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUntagColumnOperationOutput)
}

func (i DataSetUntagColumnOperationArgs) ToDataSetUntagColumnOperationPtrOutput() DataSetUntagColumnOperationPtrOutput {
	return i.ToDataSetUntagColumnOperationPtrOutputWithContext(context.Background())
}

func (i DataSetUntagColumnOperationArgs) ToDataSetUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetUntagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUntagColumnOperationOutput).ToDataSetUntagColumnOperationPtrOutputWithContext(ctx)
}

// DataSetUntagColumnOperationPtrInput is an input type that accepts DataSetUntagColumnOperationArgs, DataSetUntagColumnOperationPtr and DataSetUntagColumnOperationPtrOutput values.
// You can construct a concrete instance of `DataSetUntagColumnOperationPtrInput` via:
//
//	        DataSetUntagColumnOperationArgs{...}
//
//	or:
//
//	        nil
type DataSetUntagColumnOperationPtrInput interface {
	pulumi.Input

	ToDataSetUntagColumnOperationPtrOutput() DataSetUntagColumnOperationPtrOutput
	ToDataSetUntagColumnOperationPtrOutputWithContext(context.Context) DataSetUntagColumnOperationPtrOutput
}

type dataSetUntagColumnOperationPtrType DataSetUntagColumnOperationArgs

func DataSetUntagColumnOperationPtr(v *DataSetUntagColumnOperationArgs) DataSetUntagColumnOperationPtrInput {
	return (*dataSetUntagColumnOperationPtrType)(v)
}

func (*dataSetUntagColumnOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetUntagColumnOperation)(nil)).Elem()
}

func (i *dataSetUntagColumnOperationPtrType) ToDataSetUntagColumnOperationPtrOutput() DataSetUntagColumnOperationPtrOutput {
	return i.ToDataSetUntagColumnOperationPtrOutputWithContext(context.Background())
}

func (i *dataSetUntagColumnOperationPtrType) ToDataSetUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetUntagColumnOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUntagColumnOperationPtrOutput)
}

// <p>A transform operation that removes tags associated with a column.</p>
type DataSetUntagColumnOperationOutput struct{ *pulumi.OutputState }

func (DataSetUntagColumnOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetUntagColumnOperation)(nil)).Elem()
}

func (o DataSetUntagColumnOperationOutput) ToDataSetUntagColumnOperationOutput() DataSetUntagColumnOperationOutput {
	return o
}

func (o DataSetUntagColumnOperationOutput) ToDataSetUntagColumnOperationOutputWithContext(ctx context.Context) DataSetUntagColumnOperationOutput {
	return o
}

func (o DataSetUntagColumnOperationOutput) ToDataSetUntagColumnOperationPtrOutput() DataSetUntagColumnOperationPtrOutput {
	return o.ToDataSetUntagColumnOperationPtrOutputWithContext(context.Background())
}

func (o DataSetUntagColumnOperationOutput) ToDataSetUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetUntagColumnOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetUntagColumnOperation) *DataSetUntagColumnOperation {
		return &v
	}).(DataSetUntagColumnOperationPtrOutput)
}

// <p>The column that this operation acts on.</p>
func (o DataSetUntagColumnOperationOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v DataSetUntagColumnOperation) string { return v.ColumnName }).(pulumi.StringOutput)
}

// <p>The column tags to remove from this column.</p>
func (o DataSetUntagColumnOperationOutput) TagNames() DataSetColumnTagNameArrayOutput {
	return o.ApplyT(func(v DataSetUntagColumnOperation) []DataSetColumnTagName { return v.TagNames }).(DataSetColumnTagNameArrayOutput)
}

type DataSetUntagColumnOperationPtrOutput struct{ *pulumi.OutputState }

func (DataSetUntagColumnOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetUntagColumnOperation)(nil)).Elem()
}

func (o DataSetUntagColumnOperationPtrOutput) ToDataSetUntagColumnOperationPtrOutput() DataSetUntagColumnOperationPtrOutput {
	return o
}

func (o DataSetUntagColumnOperationPtrOutput) ToDataSetUntagColumnOperationPtrOutputWithContext(ctx context.Context) DataSetUntagColumnOperationPtrOutput {
	return o
}

func (o DataSetUntagColumnOperationPtrOutput) Elem() DataSetUntagColumnOperationOutput {
	return o.ApplyT(func(v *DataSetUntagColumnOperation) DataSetUntagColumnOperation {
		if v != nil {
			return *v
		}
		var ret DataSetUntagColumnOperation
		return ret
	}).(DataSetUntagColumnOperationOutput)
}

// <p>The column that this operation acts on.</p>
func (o DataSetUntagColumnOperationPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSetUntagColumnOperation) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// <p>The column tags to remove from this column.</p>
func (o DataSetUntagColumnOperationPtrOutput) TagNames() DataSetColumnTagNameArrayOutput {
	return o.ApplyT(func(v *DataSetUntagColumnOperation) []DataSetColumnTagName {
		if v == nil {
			return nil
		}
		return v.TagNames
	}).(DataSetColumnTagNameArrayOutput)
}

// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
type DataSetUsageConfiguration struct {
	// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
	DisableUseAsDirectQuerySource *bool `pulumi:"disableUseAsDirectQuerySource"`
	// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
	DisableUseAsImportedSource *bool `pulumi:"disableUseAsImportedSource"`
}

// DataSetUsageConfigurationInput is an input type that accepts DataSetUsageConfigurationArgs and DataSetUsageConfigurationOutput values.
// You can construct a concrete instance of `DataSetUsageConfigurationInput` via:
//
//	DataSetUsageConfigurationArgs{...}
type DataSetUsageConfigurationInput interface {
	pulumi.Input

	ToDataSetUsageConfigurationOutput() DataSetUsageConfigurationOutput
	ToDataSetUsageConfigurationOutputWithContext(context.Context) DataSetUsageConfigurationOutput
}

// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
type DataSetUsageConfigurationArgs struct {
	// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
	DisableUseAsDirectQuerySource pulumi.BoolPtrInput `pulumi:"disableUseAsDirectQuerySource"`
	// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
	DisableUseAsImportedSource pulumi.BoolPtrInput `pulumi:"disableUseAsImportedSource"`
}

func (DataSetUsageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetUsageConfiguration)(nil)).Elem()
}

func (i DataSetUsageConfigurationArgs) ToDataSetUsageConfigurationOutput() DataSetUsageConfigurationOutput {
	return i.ToDataSetUsageConfigurationOutputWithContext(context.Background())
}

func (i DataSetUsageConfigurationArgs) ToDataSetUsageConfigurationOutputWithContext(ctx context.Context) DataSetUsageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUsageConfigurationOutput)
}

func (i DataSetUsageConfigurationArgs) ToDataSetUsageConfigurationPtrOutput() DataSetUsageConfigurationPtrOutput {
	return i.ToDataSetUsageConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSetUsageConfigurationArgs) ToDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetUsageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUsageConfigurationOutput).ToDataSetUsageConfigurationPtrOutputWithContext(ctx)
}

// DataSetUsageConfigurationPtrInput is an input type that accepts DataSetUsageConfigurationArgs, DataSetUsageConfigurationPtr and DataSetUsageConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSetUsageConfigurationPtrInput` via:
//
//	        DataSetUsageConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSetUsageConfigurationPtrInput interface {
	pulumi.Input

	ToDataSetUsageConfigurationPtrOutput() DataSetUsageConfigurationPtrOutput
	ToDataSetUsageConfigurationPtrOutputWithContext(context.Context) DataSetUsageConfigurationPtrOutput
}

type dataSetUsageConfigurationPtrType DataSetUsageConfigurationArgs

func DataSetUsageConfigurationPtr(v *DataSetUsageConfigurationArgs) DataSetUsageConfigurationPtrInput {
	return (*dataSetUsageConfigurationPtrType)(v)
}

func (*dataSetUsageConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetUsageConfiguration)(nil)).Elem()
}

func (i *dataSetUsageConfigurationPtrType) ToDataSetUsageConfigurationPtrOutput() DataSetUsageConfigurationPtrOutput {
	return i.ToDataSetUsageConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSetUsageConfigurationPtrType) ToDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetUsageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetUsageConfigurationPtrOutput)
}

// <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
type DataSetUsageConfigurationOutput struct{ *pulumi.OutputState }

func (DataSetUsageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetUsageConfiguration)(nil)).Elem()
}

func (o DataSetUsageConfigurationOutput) ToDataSetUsageConfigurationOutput() DataSetUsageConfigurationOutput {
	return o
}

func (o DataSetUsageConfigurationOutput) ToDataSetUsageConfigurationOutputWithContext(ctx context.Context) DataSetUsageConfigurationOutput {
	return o
}

func (o DataSetUsageConfigurationOutput) ToDataSetUsageConfigurationPtrOutput() DataSetUsageConfigurationPtrOutput {
	return o.ToDataSetUsageConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSetUsageConfigurationOutput) ToDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetUsageConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetUsageConfiguration) *DataSetUsageConfiguration {
		return &v
	}).(DataSetUsageConfigurationPtrOutput)
}

// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
func (o DataSetUsageConfigurationOutput) DisableUseAsDirectQuerySource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetUsageConfiguration) *bool { return v.DisableUseAsDirectQuerySource }).(pulumi.BoolPtrOutput)
}

// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
func (o DataSetUsageConfigurationOutput) DisableUseAsImportedSource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSetUsageConfiguration) *bool { return v.DisableUseAsImportedSource }).(pulumi.BoolPtrOutput)
}

type DataSetUsageConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSetUsageConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetUsageConfiguration)(nil)).Elem()
}

func (o DataSetUsageConfigurationPtrOutput) ToDataSetUsageConfigurationPtrOutput() DataSetUsageConfigurationPtrOutput {
	return o
}

func (o DataSetUsageConfigurationPtrOutput) ToDataSetUsageConfigurationPtrOutputWithContext(ctx context.Context) DataSetUsageConfigurationPtrOutput {
	return o
}

func (o DataSetUsageConfigurationPtrOutput) Elem() DataSetUsageConfigurationOutput {
	return o.ApplyT(func(v *DataSetUsageConfiguration) DataSetUsageConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSetUsageConfiguration
		return ret
	}).(DataSetUsageConfigurationOutput)
}

// <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
func (o DataSetUsageConfigurationPtrOutput) DisableUseAsDirectQuerySource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetUsageConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisableUseAsDirectQuerySource
	}).(pulumi.BoolPtrOutput)
}

// <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
func (o DataSetUsageConfigurationPtrOutput) DisableUseAsImportedSource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSetUsageConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisableUseAsImportedSource
	}).(pulumi.BoolPtrOutput)
}

// <p>The parameters for OpenSearch.</p>
type DataSourceAmazonElasticsearchParameters struct {
	// <p>The OpenSearch domain.</p>
	Domain string `pulumi:"domain"`
}

// DataSourceAmazonElasticsearchParametersInput is an input type that accepts DataSourceAmazonElasticsearchParametersArgs and DataSourceAmazonElasticsearchParametersOutput values.
// You can construct a concrete instance of `DataSourceAmazonElasticsearchParametersInput` via:
//
//	DataSourceAmazonElasticsearchParametersArgs{...}
type DataSourceAmazonElasticsearchParametersInput interface {
	pulumi.Input

	ToDataSourceAmazonElasticsearchParametersOutput() DataSourceAmazonElasticsearchParametersOutput
	ToDataSourceAmazonElasticsearchParametersOutputWithContext(context.Context) DataSourceAmazonElasticsearchParametersOutput
}

// <p>The parameters for OpenSearch.</p>
type DataSourceAmazonElasticsearchParametersArgs struct {
	// <p>The OpenSearch domain.</p>
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (DataSourceAmazonElasticsearchParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersOutput() DataSourceAmazonElasticsearchParametersOutput {
	return i.ToDataSourceAmazonElasticsearchParametersOutputWithContext(context.Background())
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonElasticsearchParametersOutput)
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return i.ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAmazonElasticsearchParametersArgs) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonElasticsearchParametersOutput).ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx)
}

// DataSourceAmazonElasticsearchParametersPtrInput is an input type that accepts DataSourceAmazonElasticsearchParametersArgs, DataSourceAmazonElasticsearchParametersPtr and DataSourceAmazonElasticsearchParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAmazonElasticsearchParametersPtrInput` via:
//
//	        DataSourceAmazonElasticsearchParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceAmazonElasticsearchParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput
	ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Context) DataSourceAmazonElasticsearchParametersPtrOutput
}

type dataSourceAmazonElasticsearchParametersPtrType DataSourceAmazonElasticsearchParametersArgs

func DataSourceAmazonElasticsearchParametersPtr(v *DataSourceAmazonElasticsearchParametersArgs) DataSourceAmazonElasticsearchParametersPtrInput {
	return (*dataSourceAmazonElasticsearchParametersPtrType)(v)
}

func (*dataSourceAmazonElasticsearchParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (i *dataSourceAmazonElasticsearchParametersPtrType) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return i.ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAmazonElasticsearchParametersPtrType) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

// <p>The parameters for OpenSearch.</p>
type DataSourceAmazonElasticsearchParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonElasticsearchParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersOutput() DataSourceAmazonElasticsearchParametersOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAmazonElasticsearchParametersOutput) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAmazonElasticsearchParameters) *DataSourceAmazonElasticsearchParameters {
		return &v
	}).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

// <p>The OpenSearch domain.</p>
func (o DataSourceAmazonElasticsearchParametersOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAmazonElasticsearchParameters) string { return v.Domain }).(pulumi.StringOutput)
}

type DataSourceAmazonElasticsearchParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonElasticsearchParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonElasticsearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonElasticsearchParametersPtrOutput) ToDataSourceAmazonElasticsearchParametersPtrOutput() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersPtrOutput) ToDataSourceAmazonElasticsearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonElasticsearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonElasticsearchParametersPtrOutput) Elem() DataSourceAmazonElasticsearchParametersOutput {
	return o.ApplyT(func(v *DataSourceAmazonElasticsearchParameters) DataSourceAmazonElasticsearchParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAmazonElasticsearchParameters
		return ret
	}).(DataSourceAmazonElasticsearchParametersOutput)
}

// <p>The OpenSearch domain.</p>
func (o DataSourceAmazonElasticsearchParametersPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAmazonElasticsearchParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters for OpenSearch.</p>
type DataSourceAmazonOpenSearchParameters struct {
	// <p>The OpenSearch domain.</p>
	Domain string `pulumi:"domain"`
}

// DataSourceAmazonOpenSearchParametersInput is an input type that accepts DataSourceAmazonOpenSearchParametersArgs and DataSourceAmazonOpenSearchParametersOutput values.
// You can construct a concrete instance of `DataSourceAmazonOpenSearchParametersInput` via:
//
//	DataSourceAmazonOpenSearchParametersArgs{...}
type DataSourceAmazonOpenSearchParametersInput interface {
	pulumi.Input

	ToDataSourceAmazonOpenSearchParametersOutput() DataSourceAmazonOpenSearchParametersOutput
	ToDataSourceAmazonOpenSearchParametersOutputWithContext(context.Context) DataSourceAmazonOpenSearchParametersOutput
}

// <p>The parameters for OpenSearch.</p>
type DataSourceAmazonOpenSearchParametersArgs struct {
	// <p>The OpenSearch domain.</p>
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (DataSourceAmazonOpenSearchParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersOutput() DataSourceAmazonOpenSearchParametersOutput {
	return i.ToDataSourceAmazonOpenSearchParametersOutputWithContext(context.Background())
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonOpenSearchParametersOutput)
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return i.ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAmazonOpenSearchParametersArgs) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonOpenSearchParametersOutput).ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx)
}

// DataSourceAmazonOpenSearchParametersPtrInput is an input type that accepts DataSourceAmazonOpenSearchParametersArgs, DataSourceAmazonOpenSearchParametersPtr and DataSourceAmazonOpenSearchParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAmazonOpenSearchParametersPtrInput` via:
//
//	        DataSourceAmazonOpenSearchParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceAmazonOpenSearchParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput
	ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Context) DataSourceAmazonOpenSearchParametersPtrOutput
}

type dataSourceAmazonOpenSearchParametersPtrType DataSourceAmazonOpenSearchParametersArgs

func DataSourceAmazonOpenSearchParametersPtr(v *DataSourceAmazonOpenSearchParametersArgs) DataSourceAmazonOpenSearchParametersPtrInput {
	return (*dataSourceAmazonOpenSearchParametersPtrType)(v)
}

func (*dataSourceAmazonOpenSearchParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (i *dataSourceAmazonOpenSearchParametersPtrType) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return i.ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAmazonOpenSearchParametersPtrType) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

// <p>The parameters for OpenSearch.</p>
type DataSourceAmazonOpenSearchParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonOpenSearchParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersOutput() DataSourceAmazonOpenSearchParametersOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAmazonOpenSearchParametersOutput) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAmazonOpenSearchParameters) *DataSourceAmazonOpenSearchParameters {
		return &v
	}).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

// <p>The OpenSearch domain.</p>
func (o DataSourceAmazonOpenSearchParametersOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAmazonOpenSearchParameters) string { return v.Domain }).(pulumi.StringOutput)
}

type DataSourceAmazonOpenSearchParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAmazonOpenSearchParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAmazonOpenSearchParameters)(nil)).Elem()
}

func (o DataSourceAmazonOpenSearchParametersPtrOutput) ToDataSourceAmazonOpenSearchParametersPtrOutput() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersPtrOutput) ToDataSourceAmazonOpenSearchParametersPtrOutputWithContext(ctx context.Context) DataSourceAmazonOpenSearchParametersPtrOutput {
	return o
}

func (o DataSourceAmazonOpenSearchParametersPtrOutput) Elem() DataSourceAmazonOpenSearchParametersOutput {
	return o.ApplyT(func(v *DataSourceAmazonOpenSearchParameters) DataSourceAmazonOpenSearchParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAmazonOpenSearchParameters
		return ret
	}).(DataSourceAmazonOpenSearchParametersOutput)
}

// <p>The OpenSearch domain.</p>
func (o DataSourceAmazonOpenSearchParametersPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAmazonOpenSearchParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// <p>Parameters for Amazon Athena.</p>
type DataSourceAthenaParameters struct {
	// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
	RoleArn *string `pulumi:"roleArn"`
	// <p>The workgroup that Amazon Athena uses.</p>
	WorkGroup *string `pulumi:"workGroup"`
}

// DataSourceAthenaParametersInput is an input type that accepts DataSourceAthenaParametersArgs and DataSourceAthenaParametersOutput values.
// You can construct a concrete instance of `DataSourceAthenaParametersInput` via:
//
//	DataSourceAthenaParametersArgs{...}
type DataSourceAthenaParametersInput interface {
	pulumi.Input

	ToDataSourceAthenaParametersOutput() DataSourceAthenaParametersOutput
	ToDataSourceAthenaParametersOutputWithContext(context.Context) DataSourceAthenaParametersOutput
}

// <p>Parameters for Amazon Athena.</p>
type DataSourceAthenaParametersArgs struct {
	// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// <p>The workgroup that Amazon Athena uses.</p>
	WorkGroup pulumi.StringPtrInput `pulumi:"workGroup"`
}

func (DataSourceAthenaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAthenaParameters)(nil)).Elem()
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersOutput() DataSourceAthenaParametersOutput {
	return i.ToDataSourceAthenaParametersOutputWithContext(context.Background())
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersOutputWithContext(ctx context.Context) DataSourceAthenaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAthenaParametersOutput)
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return i.ToDataSourceAthenaParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAthenaParametersArgs) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAthenaParametersOutput).ToDataSourceAthenaParametersPtrOutputWithContext(ctx)
}

// DataSourceAthenaParametersPtrInput is an input type that accepts DataSourceAthenaParametersArgs, DataSourceAthenaParametersPtr and DataSourceAthenaParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAthenaParametersPtrInput` via:
//
//	        DataSourceAthenaParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceAthenaParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput
	ToDataSourceAthenaParametersPtrOutputWithContext(context.Context) DataSourceAthenaParametersPtrOutput
}

type dataSourceAthenaParametersPtrType DataSourceAthenaParametersArgs

func DataSourceAthenaParametersPtr(v *DataSourceAthenaParametersArgs) DataSourceAthenaParametersPtrInput {
	return (*dataSourceAthenaParametersPtrType)(v)
}

func (*dataSourceAthenaParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAthenaParameters)(nil)).Elem()
}

func (i *dataSourceAthenaParametersPtrType) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return i.ToDataSourceAthenaParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAthenaParametersPtrType) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAthenaParametersPtrOutput)
}

// <p>Parameters for Amazon Athena.</p>
type DataSourceAthenaParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAthenaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAthenaParameters)(nil)).Elem()
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersOutput() DataSourceAthenaParametersOutput {
	return o
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersOutputWithContext(ctx context.Context) DataSourceAthenaParametersOutput {
	return o
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return o.ToDataSourceAthenaParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAthenaParametersOutput) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAthenaParameters) *DataSourceAthenaParameters {
		return &v
	}).(DataSourceAthenaParametersPtrOutput)
}

// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
func (o DataSourceAthenaParametersOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceAthenaParameters) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// <p>The workgroup that Amazon Athena uses.</p>
func (o DataSourceAthenaParametersOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceAthenaParameters) *string { return v.WorkGroup }).(pulumi.StringPtrOutput)
}

type DataSourceAthenaParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAthenaParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAthenaParameters)(nil)).Elem()
}

func (o DataSourceAthenaParametersPtrOutput) ToDataSourceAthenaParametersPtrOutput() DataSourceAthenaParametersPtrOutput {
	return o
}

func (o DataSourceAthenaParametersPtrOutput) ToDataSourceAthenaParametersPtrOutputWithContext(ctx context.Context) DataSourceAthenaParametersPtrOutput {
	return o
}

func (o DataSourceAthenaParametersPtrOutput) Elem() DataSourceAthenaParametersOutput {
	return o.ApplyT(func(v *DataSourceAthenaParameters) DataSourceAthenaParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAthenaParameters
		return ret
	}).(DataSourceAthenaParametersOutput)
}

// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
func (o DataSourceAthenaParametersPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAthenaParameters) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// <p>The workgroup that Amazon Athena uses.</p>
func (o DataSourceAthenaParametersPtrOutput) WorkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAthenaParameters) *string {
		if v == nil {
			return nil
		}
		return v.WorkGroup
	}).(pulumi.StringPtrOutput)
}

// <p>Parameters for Amazon Aurora.</p>
type DataSourceAuroraParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceAuroraParametersInput is an input type that accepts DataSourceAuroraParametersArgs and DataSourceAuroraParametersOutput values.
// You can construct a concrete instance of `DataSourceAuroraParametersInput` via:
//
//	DataSourceAuroraParametersArgs{...}
type DataSourceAuroraParametersInput interface {
	pulumi.Input

	ToDataSourceAuroraParametersOutput() DataSourceAuroraParametersOutput
	ToDataSourceAuroraParametersOutputWithContext(context.Context) DataSourceAuroraParametersOutput
}

// <p>Parameters for Amazon Aurora.</p>
type DataSourceAuroraParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceAuroraParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraParameters)(nil)).Elem()
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersOutput() DataSourceAuroraParametersOutput {
	return i.ToDataSourceAuroraParametersOutputWithContext(context.Background())
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersOutputWithContext(ctx context.Context) DataSourceAuroraParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraParametersOutput)
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return i.ToDataSourceAuroraParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAuroraParametersArgs) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraParametersOutput).ToDataSourceAuroraParametersPtrOutputWithContext(ctx)
}

// DataSourceAuroraParametersPtrInput is an input type that accepts DataSourceAuroraParametersArgs, DataSourceAuroraParametersPtr and DataSourceAuroraParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAuroraParametersPtrInput` via:
//
//	        DataSourceAuroraParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceAuroraParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput
	ToDataSourceAuroraParametersPtrOutputWithContext(context.Context) DataSourceAuroraParametersPtrOutput
}

type dataSourceAuroraParametersPtrType DataSourceAuroraParametersArgs

func DataSourceAuroraParametersPtr(v *DataSourceAuroraParametersArgs) DataSourceAuroraParametersPtrInput {
	return (*dataSourceAuroraParametersPtrType)(v)
}

func (*dataSourceAuroraParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraParameters)(nil)).Elem()
}

func (i *dataSourceAuroraParametersPtrType) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return i.ToDataSourceAuroraParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAuroraParametersPtrType) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraParametersPtrOutput)
}

// <p>Parameters for Amazon Aurora.</p>
type DataSourceAuroraParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraParameters)(nil)).Elem()
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersOutput() DataSourceAuroraParametersOutput {
	return o
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersOutputWithContext(ctx context.Context) DataSourceAuroraParametersOutput {
	return o
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return o.ToDataSourceAuroraParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAuroraParametersOutput) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAuroraParameters) *DataSourceAuroraParameters {
		return &v
	}).(DataSourceAuroraParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceAuroraParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceAuroraParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceAuroraParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceAuroraParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceAuroraParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraParameters)(nil)).Elem()
}

func (o DataSourceAuroraParametersPtrOutput) ToDataSourceAuroraParametersPtrOutput() DataSourceAuroraParametersPtrOutput {
	return o
}

func (o DataSourceAuroraParametersPtrOutput) ToDataSourceAuroraParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraParametersPtrOutput {
	return o
}

func (o DataSourceAuroraParametersPtrOutput) Elem() DataSourceAuroraParametersOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) DataSourceAuroraParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAuroraParameters
		return ret
	}).(DataSourceAuroraParametersOutput)
}

// <p>Database.</p>
func (o DataSourceAuroraParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceAuroraParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceAuroraParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Parameters for Amazon Aurora PostgreSQL-Compatible Edition.</p>
type DataSourceAuroraPostgreSqlParameters struct {
	// <p>The Amazon Aurora PostgreSQL database to connect to.</p>
	Database string `pulumi:"database"`
	// <p>The Amazon Aurora PostgreSQL-Compatible host to connect to.</p>
	Host string `pulumi:"host"`
	// <p>The port that Amazon Aurora PostgreSQL is listening on.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceAuroraPostgreSqlParametersInput is an input type that accepts DataSourceAuroraPostgreSqlParametersArgs and DataSourceAuroraPostgreSqlParametersOutput values.
// You can construct a concrete instance of `DataSourceAuroraPostgreSqlParametersInput` via:
//
//	DataSourceAuroraPostgreSqlParametersArgs{...}
type DataSourceAuroraPostgreSqlParametersInput interface {
	pulumi.Input

	ToDataSourceAuroraPostgreSqlParametersOutput() DataSourceAuroraPostgreSqlParametersOutput
	ToDataSourceAuroraPostgreSqlParametersOutputWithContext(context.Context) DataSourceAuroraPostgreSqlParametersOutput
}

// <p>Parameters for Amazon Aurora PostgreSQL-Compatible Edition.</p>
type DataSourceAuroraPostgreSqlParametersArgs struct {
	// <p>The Amazon Aurora PostgreSQL database to connect to.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>The Amazon Aurora PostgreSQL-Compatible host to connect to.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>The port that Amazon Aurora PostgreSQL is listening on.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceAuroraPostgreSqlParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersOutput() DataSourceAuroraPostgreSqlParametersOutput {
	return i.ToDataSourceAuroraPostgreSqlParametersOutputWithContext(context.Background())
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraPostgreSqlParametersOutput)
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return i.ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceAuroraPostgreSqlParametersArgs) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraPostgreSqlParametersOutput).ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx)
}

// DataSourceAuroraPostgreSqlParametersPtrInput is an input type that accepts DataSourceAuroraPostgreSqlParametersArgs, DataSourceAuroraPostgreSqlParametersPtr and DataSourceAuroraPostgreSqlParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceAuroraPostgreSqlParametersPtrInput` via:
//
//	        DataSourceAuroraPostgreSqlParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceAuroraPostgreSqlParametersPtrInput interface {
	pulumi.Input

	ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput
	ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput
}

type dataSourceAuroraPostgreSqlParametersPtrType DataSourceAuroraPostgreSqlParametersArgs

func DataSourceAuroraPostgreSqlParametersPtr(v *DataSourceAuroraPostgreSqlParametersArgs) DataSourceAuroraPostgreSqlParametersPtrInput {
	return (*dataSourceAuroraPostgreSqlParametersPtrType)(v)
}

func (*dataSourceAuroraPostgreSqlParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (i *dataSourceAuroraPostgreSqlParametersPtrType) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return i.ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceAuroraPostgreSqlParametersPtrType) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

// <p>Parameters for Amazon Aurora PostgreSQL-Compatible Edition.</p>
type DataSourceAuroraPostgreSqlParametersOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraPostgreSqlParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersOutput() DataSourceAuroraPostgreSqlParametersOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceAuroraPostgreSqlParametersOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceAuroraPostgreSqlParameters) *DataSourceAuroraPostgreSqlParameters {
		return &v
	}).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

// <p>The Amazon Aurora PostgreSQL database to connect to.</p>
func (o DataSourceAuroraPostgreSqlParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraPostgreSqlParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>The Amazon Aurora PostgreSQL-Compatible host to connect to.</p>
func (o DataSourceAuroraPostgreSqlParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceAuroraPostgreSqlParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>The port that Amazon Aurora PostgreSQL is listening on.</p>
func (o DataSourceAuroraPostgreSqlParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceAuroraPostgreSqlParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceAuroraPostgreSqlParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceAuroraPostgreSqlParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceAuroraPostgreSqlParameters)(nil)).Elem()
}

func (o DataSourceAuroraPostgreSqlParametersPtrOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutput() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersPtrOutput) ToDataSourceAuroraPostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Elem() DataSourceAuroraPostgreSqlParametersOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) DataSourceAuroraPostgreSqlParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceAuroraPostgreSqlParameters
		return ret
	}).(DataSourceAuroraPostgreSqlParametersOutput)
}

// <p>The Amazon Aurora PostgreSQL database to connect to.</p>
func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon Aurora PostgreSQL-Compatible host to connect to.</p>
func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>The port that Amazon Aurora PostgreSQL is listening on.</p>
func (o DataSourceAuroraPostgreSqlParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceAuroraPostgreSqlParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The combination of user name and password that are used as credentials.</p>
type DataSourceCredentialPair struct {
	// <p>A set of alternate data source parameters that you want to share for these
	//             credentials. The credentials are applied in tandem with the data source parameters when
	//             you copy a data source by using a create or update request. The API operation compares
	//             the <code>DataSourceParameters</code> structure that's in the request with the
	//             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
	//             structures are an exact match, the request is allowed to use the new data source with
	//             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
	//             null, the <code>DataSourceParameters</code> originally used with these
	//                 <code>Credentials</code> is automatically allowed.</p>
	AlternateDataSourceParameters []DataSourceParameters `pulumi:"alternateDataSourceParameters"`
	// <p>Password.</p>
	Password string `pulumi:"password"`
	// <p>User name.</p>
	Username string `pulumi:"username"`
}

// DataSourceCredentialPairInput is an input type that accepts DataSourceCredentialPairArgs and DataSourceCredentialPairOutput values.
// You can construct a concrete instance of `DataSourceCredentialPairInput` via:
//
//	DataSourceCredentialPairArgs{...}
type DataSourceCredentialPairInput interface {
	pulumi.Input

	ToDataSourceCredentialPairOutput() DataSourceCredentialPairOutput
	ToDataSourceCredentialPairOutputWithContext(context.Context) DataSourceCredentialPairOutput
}

// <p>The combination of user name and password that are used as credentials.</p>
type DataSourceCredentialPairArgs struct {
	// <p>A set of alternate data source parameters that you want to share for these
	//             credentials. The credentials are applied in tandem with the data source parameters when
	//             you copy a data source by using a create or update request. The API operation compares
	//             the <code>DataSourceParameters</code> structure that's in the request with the
	//             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
	//             structures are an exact match, the request is allowed to use the new data source with
	//             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
	//             null, the <code>DataSourceParameters</code> originally used with these
	//                 <code>Credentials</code> is automatically allowed.</p>
	AlternateDataSourceParameters DataSourceParametersArrayInput `pulumi:"alternateDataSourceParameters"`
	// <p>Password.</p>
	Password pulumi.StringInput `pulumi:"password"`
	// <p>User name.</p>
	Username pulumi.StringInput `pulumi:"username"`
}

func (DataSourceCredentialPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialPair)(nil)).Elem()
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairOutput() DataSourceCredentialPairOutput {
	return i.ToDataSourceCredentialPairOutputWithContext(context.Background())
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialPairOutput)
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return i.ToDataSourceCredentialPairPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialPairArgs) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialPairOutput).ToDataSourceCredentialPairPtrOutputWithContext(ctx)
}

// DataSourceCredentialPairPtrInput is an input type that accepts DataSourceCredentialPairArgs, DataSourceCredentialPairPtr and DataSourceCredentialPairPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialPairPtrInput` via:
//
//	        DataSourceCredentialPairArgs{...}
//
//	or:
//
//	        nil
type DataSourceCredentialPairPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput
	ToDataSourceCredentialPairPtrOutputWithContext(context.Context) DataSourceCredentialPairPtrOutput
}

type dataSourceCredentialPairPtrType DataSourceCredentialPairArgs

func DataSourceCredentialPairPtr(v *DataSourceCredentialPairArgs) DataSourceCredentialPairPtrInput {
	return (*dataSourceCredentialPairPtrType)(v)
}

func (*dataSourceCredentialPairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialPair)(nil)).Elem()
}

func (i *dataSourceCredentialPairPtrType) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return i.ToDataSourceCredentialPairPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialPairPtrType) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialPairPtrOutput)
}

// <p>The combination of user name and password that are used as credentials.</p>
type DataSourceCredentialPairOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairOutput() DataSourceCredentialPairOutput {
	return o
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairOutputWithContext(ctx context.Context) DataSourceCredentialPairOutput {
	return o
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return o.ToDataSourceCredentialPairPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialPairOutput) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentialPair) *DataSourceCredentialPair {
		return &v
	}).(DataSourceCredentialPairPtrOutput)
}

// <p>A set of alternate data source parameters that you want to share for these
//
//	credentials. The credentials are applied in tandem with the data source parameters when
//	you copy a data source by using a create or update request. The API operation compares
//	the <code>DataSourceParameters</code> structure that's in the request with the
//	structures in the <code>AlternateDataSourceParameters</code> allow list. If the
//	structures are an exact match, the request is allowed to use the new data source with
//	the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
//	null, the <code>DataSourceParameters</code> originally used with these
//	    <code>Credentials</code> is automatically allowed.</p>
func (o DataSourceCredentialPairOutput) AlternateDataSourceParameters() DataSourceParametersArrayOutput {
	return o.ApplyT(func(v DataSourceCredentialPair) []DataSourceParameters { return v.AlternateDataSourceParameters }).(DataSourceParametersArrayOutput)
}

// <p>Password.</p>
func (o DataSourceCredentialPairOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialPair) string { return v.Password }).(pulumi.StringOutput)
}

// <p>User name.</p>
func (o DataSourceCredentialPairOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceCredentialPair) string { return v.Username }).(pulumi.StringOutput)
}

type DataSourceCredentialPairPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialPairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentialPair)(nil)).Elem()
}

func (o DataSourceCredentialPairPtrOutput) ToDataSourceCredentialPairPtrOutput() DataSourceCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialPairPtrOutput) ToDataSourceCredentialPairPtrOutputWithContext(ctx context.Context) DataSourceCredentialPairPtrOutput {
	return o
}

func (o DataSourceCredentialPairPtrOutput) Elem() DataSourceCredentialPairOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) DataSourceCredentialPair {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentialPair
		return ret
	}).(DataSourceCredentialPairOutput)
}

// <p>A set of alternate data source parameters that you want to share for these
//
//	credentials. The credentials are applied in tandem with the data source parameters when
//	you copy a data source by using a create or update request. The API operation compares
//	the <code>DataSourceParameters</code> structure that's in the request with the
//	structures in the <code>AlternateDataSourceParameters</code> allow list. If the
//	structures are an exact match, the request is allowed to use the new data source with
//	the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
//	null, the <code>DataSourceParameters</code> originally used with these
//	    <code>Credentials</code> is automatically allowed.</p>
func (o DataSourceCredentialPairPtrOutput) AlternateDataSourceParameters() DataSourceParametersArrayOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) []DataSourceParameters {
		if v == nil {
			return nil
		}
		return v.AlternateDataSourceParameters
	}).(DataSourceParametersArrayOutput)
}

// <p>Password.</p>
func (o DataSourceCredentialPairPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// <p>User name.</p>
func (o DataSourceCredentialPairPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentialPair) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// <p>Data source credentials. This is a variant type structure. For this structure to be
//
//	valid, only one of the attributes can be non-null.</p>
type DataSourceCredentials struct {
	// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
	//             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
	//             data source in the ARN is used as the credentials for the
	//             <code>DataSourceCredentials</code> structure.</p>
	CopySourceArn *string `pulumi:"copySourceArn"`
	// Credential pair. For more information, see `[CredentialPair](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CredentialPair.html)` .
	CredentialPair *DataSourceCredentialPair `pulumi:"credentialPair"`
	// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
	SecretArn *string `pulumi:"secretArn"`
}

// DataSourceCredentialsInput is an input type that accepts DataSourceCredentialsArgs and DataSourceCredentialsOutput values.
// You can construct a concrete instance of `DataSourceCredentialsInput` via:
//
//	DataSourceCredentialsArgs{...}
type DataSourceCredentialsInput interface {
	pulumi.Input

	ToDataSourceCredentialsOutput() DataSourceCredentialsOutput
	ToDataSourceCredentialsOutputWithContext(context.Context) DataSourceCredentialsOutput
}

// <p>Data source credentials. This is a variant type structure. For this structure to be
//
//	valid, only one of the attributes can be non-null.</p>
type DataSourceCredentialsArgs struct {
	// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
	//             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
	//             data source in the ARN is used as the credentials for the
	//             <code>DataSourceCredentials</code> structure.</p>
	CopySourceArn pulumi.StringPtrInput `pulumi:"copySourceArn"`
	// Credential pair. For more information, see `[CredentialPair](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CredentialPair.html)` .
	CredentialPair DataSourceCredentialPairPtrInput `pulumi:"credentialPair"`
	// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
}

func (DataSourceCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return i.ToDataSourceCredentialsOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput)
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i DataSourceCredentialsArgs) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsOutput).ToDataSourceCredentialsPtrOutputWithContext(ctx)
}

// DataSourceCredentialsPtrInput is an input type that accepts DataSourceCredentialsArgs, DataSourceCredentialsPtr and DataSourceCredentialsPtrOutput values.
// You can construct a concrete instance of `DataSourceCredentialsPtrInput` via:
//
//	        DataSourceCredentialsArgs{...}
//
//	or:
//
//	        nil
type DataSourceCredentialsPtrInput interface {
	pulumi.Input

	ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput
	ToDataSourceCredentialsPtrOutputWithContext(context.Context) DataSourceCredentialsPtrOutput
}

type dataSourceCredentialsPtrType DataSourceCredentialsArgs

func DataSourceCredentialsPtr(v *DataSourceCredentialsArgs) DataSourceCredentialsPtrInput {
	return (*dataSourceCredentialsPtrType)(v)
}

func (*dataSourceCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return i.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (i *dataSourceCredentialsPtrType) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceCredentialsPtrOutput)
}

// <p>Data source credentials. This is a variant type structure. For this structure to be
//
//	valid, only one of the attributes can be non-null.</p>
type DataSourceCredentialsOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutput() DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsOutputWithContext(ctx context.Context) DataSourceCredentialsOutput {
	return o
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o.ToDataSourceCredentialsPtrOutputWithContext(context.Background())
}

func (o DataSourceCredentialsOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceCredentials) *DataSourceCredentials {
		return &v
	}).(DataSourceCredentialsPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
//
//	want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
//	data source in the ARN is used as the credentials for the
//	<code>DataSourceCredentials</code> structure.</p>
func (o DataSourceCredentialsOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *string { return v.CopySourceArn }).(pulumi.StringPtrOutput)
}

// Credential pair. For more information, see `[CredentialPair](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CredentialPair.html)` .
func (o DataSourceCredentialsOutput) CredentialPair() DataSourceCredentialPairPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *DataSourceCredentialPair { return v.CredentialPair }).(DataSourceCredentialPairPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
func (o DataSourceCredentialsOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceCredentials) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

type DataSourceCredentialsPtrOutput struct{ *pulumi.OutputState }

func (DataSourceCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceCredentials)(nil)).Elem()
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutput() DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) ToDataSourceCredentialsPtrOutputWithContext(ctx context.Context) DataSourceCredentialsPtrOutput {
	return o
}

func (o DataSourceCredentialsPtrOutput) Elem() DataSourceCredentialsOutput {
	return o.ApplyT(func(v *DataSourceCredentials) DataSourceCredentials {
		if v != nil {
			return *v
		}
		var ret DataSourceCredentials
		return ret
	}).(DataSourceCredentialsOutput)
}

// <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
//
//	want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
//	data source in the ARN is used as the credentials for the
//	<code>DataSourceCredentials</code> structure.</p>
func (o DataSourceCredentialsPtrOutput) CopySourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *string {
		if v == nil {
			return nil
		}
		return v.CopySourceArn
	}).(pulumi.StringPtrOutput)
}

// Credential pair. For more information, see `[CredentialPair](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CredentialPair.html)` .
func (o DataSourceCredentialsPtrOutput) CredentialPair() DataSourceCredentialPairPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *DataSourceCredentialPair {
		if v == nil {
			return nil
		}
		return v.CredentialPair
	}).(DataSourceCredentialPairPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
func (o DataSourceCredentialsPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters that are required to connect to a Databricks data source.</p>
type DataSourceDatabricksParameters struct {
	// <p>The host name of the Databricks data source.</p>
	Host string `pulumi:"host"`
	// <p>The port for the Databricks data source.</p>
	Port float64 `pulumi:"port"`
	// <p>The HTTP path of the Databricks data source.</p>
	SqlEndpointPath string `pulumi:"sqlEndpointPath"`
}

// DataSourceDatabricksParametersInput is an input type that accepts DataSourceDatabricksParametersArgs and DataSourceDatabricksParametersOutput values.
// You can construct a concrete instance of `DataSourceDatabricksParametersInput` via:
//
//	DataSourceDatabricksParametersArgs{...}
type DataSourceDatabricksParametersInput interface {
	pulumi.Input

	ToDataSourceDatabricksParametersOutput() DataSourceDatabricksParametersOutput
	ToDataSourceDatabricksParametersOutputWithContext(context.Context) DataSourceDatabricksParametersOutput
}

// <p>The parameters that are required to connect to a Databricks data source.</p>
type DataSourceDatabricksParametersArgs struct {
	// <p>The host name of the Databricks data source.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>The port for the Databricks data source.</p>
	Port pulumi.Float64Input `pulumi:"port"`
	// <p>The HTTP path of the Databricks data source.</p>
	SqlEndpointPath pulumi.StringInput `pulumi:"sqlEndpointPath"`
}

func (DataSourceDatabricksParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceDatabricksParameters)(nil)).Elem()
}

func (i DataSourceDatabricksParametersArgs) ToDataSourceDatabricksParametersOutput() DataSourceDatabricksParametersOutput {
	return i.ToDataSourceDatabricksParametersOutputWithContext(context.Background())
}

func (i DataSourceDatabricksParametersArgs) ToDataSourceDatabricksParametersOutputWithContext(ctx context.Context) DataSourceDatabricksParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceDatabricksParametersOutput)
}

func (i DataSourceDatabricksParametersArgs) ToDataSourceDatabricksParametersPtrOutput() DataSourceDatabricksParametersPtrOutput {
	return i.ToDataSourceDatabricksParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceDatabricksParametersArgs) ToDataSourceDatabricksParametersPtrOutputWithContext(ctx context.Context) DataSourceDatabricksParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceDatabricksParametersOutput).ToDataSourceDatabricksParametersPtrOutputWithContext(ctx)
}

// DataSourceDatabricksParametersPtrInput is an input type that accepts DataSourceDatabricksParametersArgs, DataSourceDatabricksParametersPtr and DataSourceDatabricksParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceDatabricksParametersPtrInput` via:
//
//	        DataSourceDatabricksParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceDatabricksParametersPtrInput interface {
	pulumi.Input

	ToDataSourceDatabricksParametersPtrOutput() DataSourceDatabricksParametersPtrOutput
	ToDataSourceDatabricksParametersPtrOutputWithContext(context.Context) DataSourceDatabricksParametersPtrOutput
}

type dataSourceDatabricksParametersPtrType DataSourceDatabricksParametersArgs

func DataSourceDatabricksParametersPtr(v *DataSourceDatabricksParametersArgs) DataSourceDatabricksParametersPtrInput {
	return (*dataSourceDatabricksParametersPtrType)(v)
}

func (*dataSourceDatabricksParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceDatabricksParameters)(nil)).Elem()
}

func (i *dataSourceDatabricksParametersPtrType) ToDataSourceDatabricksParametersPtrOutput() DataSourceDatabricksParametersPtrOutput {
	return i.ToDataSourceDatabricksParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceDatabricksParametersPtrType) ToDataSourceDatabricksParametersPtrOutputWithContext(ctx context.Context) DataSourceDatabricksParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceDatabricksParametersPtrOutput)
}

// <p>The parameters that are required to connect to a Databricks data source.</p>
type DataSourceDatabricksParametersOutput struct{ *pulumi.OutputState }

func (DataSourceDatabricksParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceDatabricksParameters)(nil)).Elem()
}

func (o DataSourceDatabricksParametersOutput) ToDataSourceDatabricksParametersOutput() DataSourceDatabricksParametersOutput {
	return o
}

func (o DataSourceDatabricksParametersOutput) ToDataSourceDatabricksParametersOutputWithContext(ctx context.Context) DataSourceDatabricksParametersOutput {
	return o
}

func (o DataSourceDatabricksParametersOutput) ToDataSourceDatabricksParametersPtrOutput() DataSourceDatabricksParametersPtrOutput {
	return o.ToDataSourceDatabricksParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceDatabricksParametersOutput) ToDataSourceDatabricksParametersPtrOutputWithContext(ctx context.Context) DataSourceDatabricksParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceDatabricksParameters) *DataSourceDatabricksParameters {
		return &v
	}).(DataSourceDatabricksParametersPtrOutput)
}

// <p>The host name of the Databricks data source.</p>
func (o DataSourceDatabricksParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceDatabricksParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>The port for the Databricks data source.</p>
func (o DataSourceDatabricksParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceDatabricksParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

// <p>The HTTP path of the Databricks data source.</p>
func (o DataSourceDatabricksParametersOutput) SqlEndpointPath() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceDatabricksParameters) string { return v.SqlEndpointPath }).(pulumi.StringOutput)
}

type DataSourceDatabricksParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceDatabricksParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceDatabricksParameters)(nil)).Elem()
}

func (o DataSourceDatabricksParametersPtrOutput) ToDataSourceDatabricksParametersPtrOutput() DataSourceDatabricksParametersPtrOutput {
	return o
}

func (o DataSourceDatabricksParametersPtrOutput) ToDataSourceDatabricksParametersPtrOutputWithContext(ctx context.Context) DataSourceDatabricksParametersPtrOutput {
	return o
}

func (o DataSourceDatabricksParametersPtrOutput) Elem() DataSourceDatabricksParametersOutput {
	return o.ApplyT(func(v *DataSourceDatabricksParameters) DataSourceDatabricksParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceDatabricksParameters
		return ret
	}).(DataSourceDatabricksParametersOutput)
}

// <p>The host name of the Databricks data source.</p>
func (o DataSourceDatabricksParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceDatabricksParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>The port for the Databricks data source.</p>
func (o DataSourceDatabricksParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceDatabricksParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The HTTP path of the Databricks data source.</p>
func (o DataSourceDatabricksParametersPtrOutput) SqlEndpointPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceDatabricksParameters) *string {
		if v == nil {
			return nil
		}
		return &v.SqlEndpointPath
	}).(pulumi.StringPtrOutput)
}

// <p>Error information for the data source creation or update.</p>
type DataSourceErrorInfo struct {
	// <p>Error message.</p>
	Message *string `pulumi:"message"`
	// Error type.
	Type *DataSourceErrorInfoType `pulumi:"type"`
}

// DataSourceErrorInfoInput is an input type that accepts DataSourceErrorInfoArgs and DataSourceErrorInfoOutput values.
// You can construct a concrete instance of `DataSourceErrorInfoInput` via:
//
//	DataSourceErrorInfoArgs{...}
type DataSourceErrorInfoInput interface {
	pulumi.Input

	ToDataSourceErrorInfoOutput() DataSourceErrorInfoOutput
	ToDataSourceErrorInfoOutputWithContext(context.Context) DataSourceErrorInfoOutput
}

// <p>Error information for the data source creation or update.</p>
type DataSourceErrorInfoArgs struct {
	// <p>Error message.</p>
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Error type.
	Type DataSourceErrorInfoTypePtrInput `pulumi:"type"`
}

func (DataSourceErrorInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceErrorInfo)(nil)).Elem()
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoOutput() DataSourceErrorInfoOutput {
	return i.ToDataSourceErrorInfoOutputWithContext(context.Background())
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoOutputWithContext(ctx context.Context) DataSourceErrorInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceErrorInfoOutput)
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return i.ToDataSourceErrorInfoPtrOutputWithContext(context.Background())
}

func (i DataSourceErrorInfoArgs) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceErrorInfoOutput).ToDataSourceErrorInfoPtrOutputWithContext(ctx)
}

// DataSourceErrorInfoPtrInput is an input type that accepts DataSourceErrorInfoArgs, DataSourceErrorInfoPtr and DataSourceErrorInfoPtrOutput values.
// You can construct a concrete instance of `DataSourceErrorInfoPtrInput` via:
//
//	        DataSourceErrorInfoArgs{...}
//
//	or:
//
//	        nil
type DataSourceErrorInfoPtrInput interface {
	pulumi.Input

	ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput
	ToDataSourceErrorInfoPtrOutputWithContext(context.Context) DataSourceErrorInfoPtrOutput
}

type dataSourceErrorInfoPtrType DataSourceErrorInfoArgs

func DataSourceErrorInfoPtr(v *DataSourceErrorInfoArgs) DataSourceErrorInfoPtrInput {
	return (*dataSourceErrorInfoPtrType)(v)
}

func (*dataSourceErrorInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceErrorInfo)(nil)).Elem()
}

func (i *dataSourceErrorInfoPtrType) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return i.ToDataSourceErrorInfoPtrOutputWithContext(context.Background())
}

func (i *dataSourceErrorInfoPtrType) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceErrorInfoPtrOutput)
}

// <p>Error information for the data source creation or update.</p>
type DataSourceErrorInfoOutput struct{ *pulumi.OutputState }

func (DataSourceErrorInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceErrorInfo)(nil)).Elem()
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoOutput() DataSourceErrorInfoOutput {
	return o
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoOutputWithContext(ctx context.Context) DataSourceErrorInfoOutput {
	return o
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return o.ToDataSourceErrorInfoPtrOutputWithContext(context.Background())
}

func (o DataSourceErrorInfoOutput) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceErrorInfo) *DataSourceErrorInfo {
		return &v
	}).(DataSourceErrorInfoPtrOutput)
}

// <p>Error message.</p>
func (o DataSourceErrorInfoOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceErrorInfo) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Error type.
func (o DataSourceErrorInfoOutput) Type() DataSourceErrorInfoTypePtrOutput {
	return o.ApplyT(func(v DataSourceErrorInfo) *DataSourceErrorInfoType { return v.Type }).(DataSourceErrorInfoTypePtrOutput)
}

type DataSourceErrorInfoPtrOutput struct{ *pulumi.OutputState }

func (DataSourceErrorInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceErrorInfo)(nil)).Elem()
}

func (o DataSourceErrorInfoPtrOutput) ToDataSourceErrorInfoPtrOutput() DataSourceErrorInfoPtrOutput {
	return o
}

func (o DataSourceErrorInfoPtrOutput) ToDataSourceErrorInfoPtrOutputWithContext(ctx context.Context) DataSourceErrorInfoPtrOutput {
	return o
}

func (o DataSourceErrorInfoPtrOutput) Elem() DataSourceErrorInfoOutput {
	return o.ApplyT(func(v *DataSourceErrorInfo) DataSourceErrorInfo {
		if v != nil {
			return *v
		}
		var ret DataSourceErrorInfo
		return ret
	}).(DataSourceErrorInfoOutput)
}

// <p>Error message.</p>
func (o DataSourceErrorInfoPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceErrorInfo) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Error type.
func (o DataSourceErrorInfoPtrOutput) Type() DataSourceErrorInfoTypePtrOutput {
	return o.ApplyT(func(v *DataSourceErrorInfo) *DataSourceErrorInfoType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(DataSourceErrorInfoTypePtrOutput)
}

// <p>The parameters for an IAM Identity Center configuration.</p>
type DataSourceIdentityCenterConfiguration struct {
	// <p>A Boolean option that controls whether Trusted Identity Propagation should be used.</p>
	EnableIdentityPropagation *bool `pulumi:"enableIdentityPropagation"`
}

// DataSourceIdentityCenterConfigurationInput is an input type that accepts DataSourceIdentityCenterConfigurationArgs and DataSourceIdentityCenterConfigurationOutput values.
// You can construct a concrete instance of `DataSourceIdentityCenterConfigurationInput` via:
//
//	DataSourceIdentityCenterConfigurationArgs{...}
type DataSourceIdentityCenterConfigurationInput interface {
	pulumi.Input

	ToDataSourceIdentityCenterConfigurationOutput() DataSourceIdentityCenterConfigurationOutput
	ToDataSourceIdentityCenterConfigurationOutputWithContext(context.Context) DataSourceIdentityCenterConfigurationOutput
}

// <p>The parameters for an IAM Identity Center configuration.</p>
type DataSourceIdentityCenterConfigurationArgs struct {
	// <p>A Boolean option that controls whether Trusted Identity Propagation should be used.</p>
	EnableIdentityPropagation pulumi.BoolPtrInput `pulumi:"enableIdentityPropagation"`
}

func (DataSourceIdentityCenterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceIdentityCenterConfiguration)(nil)).Elem()
}

func (i DataSourceIdentityCenterConfigurationArgs) ToDataSourceIdentityCenterConfigurationOutput() DataSourceIdentityCenterConfigurationOutput {
	return i.ToDataSourceIdentityCenterConfigurationOutputWithContext(context.Background())
}

func (i DataSourceIdentityCenterConfigurationArgs) ToDataSourceIdentityCenterConfigurationOutputWithContext(ctx context.Context) DataSourceIdentityCenterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceIdentityCenterConfigurationOutput)
}

func (i DataSourceIdentityCenterConfigurationArgs) ToDataSourceIdentityCenterConfigurationPtrOutput() DataSourceIdentityCenterConfigurationPtrOutput {
	return i.ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(context.Background())
}

func (i DataSourceIdentityCenterConfigurationArgs) ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(ctx context.Context) DataSourceIdentityCenterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceIdentityCenterConfigurationOutput).ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(ctx)
}

// DataSourceIdentityCenterConfigurationPtrInput is an input type that accepts DataSourceIdentityCenterConfigurationArgs, DataSourceIdentityCenterConfigurationPtr and DataSourceIdentityCenterConfigurationPtrOutput values.
// You can construct a concrete instance of `DataSourceIdentityCenterConfigurationPtrInput` via:
//
//	        DataSourceIdentityCenterConfigurationArgs{...}
//
//	or:
//
//	        nil
type DataSourceIdentityCenterConfigurationPtrInput interface {
	pulumi.Input

	ToDataSourceIdentityCenterConfigurationPtrOutput() DataSourceIdentityCenterConfigurationPtrOutput
	ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(context.Context) DataSourceIdentityCenterConfigurationPtrOutput
}

type dataSourceIdentityCenterConfigurationPtrType DataSourceIdentityCenterConfigurationArgs

func DataSourceIdentityCenterConfigurationPtr(v *DataSourceIdentityCenterConfigurationArgs) DataSourceIdentityCenterConfigurationPtrInput {
	return (*dataSourceIdentityCenterConfigurationPtrType)(v)
}

func (*dataSourceIdentityCenterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceIdentityCenterConfiguration)(nil)).Elem()
}

func (i *dataSourceIdentityCenterConfigurationPtrType) ToDataSourceIdentityCenterConfigurationPtrOutput() DataSourceIdentityCenterConfigurationPtrOutput {
	return i.ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(context.Background())
}

func (i *dataSourceIdentityCenterConfigurationPtrType) ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(ctx context.Context) DataSourceIdentityCenterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceIdentityCenterConfigurationPtrOutput)
}

// <p>The parameters for an IAM Identity Center configuration.</p>
type DataSourceIdentityCenterConfigurationOutput struct{ *pulumi.OutputState }

func (DataSourceIdentityCenterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceIdentityCenterConfiguration)(nil)).Elem()
}

func (o DataSourceIdentityCenterConfigurationOutput) ToDataSourceIdentityCenterConfigurationOutput() DataSourceIdentityCenterConfigurationOutput {
	return o
}

func (o DataSourceIdentityCenterConfigurationOutput) ToDataSourceIdentityCenterConfigurationOutputWithContext(ctx context.Context) DataSourceIdentityCenterConfigurationOutput {
	return o
}

func (o DataSourceIdentityCenterConfigurationOutput) ToDataSourceIdentityCenterConfigurationPtrOutput() DataSourceIdentityCenterConfigurationPtrOutput {
	return o.ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(context.Background())
}

func (o DataSourceIdentityCenterConfigurationOutput) ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(ctx context.Context) DataSourceIdentityCenterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceIdentityCenterConfiguration) *DataSourceIdentityCenterConfiguration {
		return &v
	}).(DataSourceIdentityCenterConfigurationPtrOutput)
}

// <p>A Boolean option that controls whether Trusted Identity Propagation should be used.</p>
func (o DataSourceIdentityCenterConfigurationOutput) EnableIdentityPropagation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceIdentityCenterConfiguration) *bool { return v.EnableIdentityPropagation }).(pulumi.BoolPtrOutput)
}

type DataSourceIdentityCenterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DataSourceIdentityCenterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceIdentityCenterConfiguration)(nil)).Elem()
}

func (o DataSourceIdentityCenterConfigurationPtrOutput) ToDataSourceIdentityCenterConfigurationPtrOutput() DataSourceIdentityCenterConfigurationPtrOutput {
	return o
}

func (o DataSourceIdentityCenterConfigurationPtrOutput) ToDataSourceIdentityCenterConfigurationPtrOutputWithContext(ctx context.Context) DataSourceIdentityCenterConfigurationPtrOutput {
	return o
}

func (o DataSourceIdentityCenterConfigurationPtrOutput) Elem() DataSourceIdentityCenterConfigurationOutput {
	return o.ApplyT(func(v *DataSourceIdentityCenterConfiguration) DataSourceIdentityCenterConfiguration {
		if v != nil {
			return *v
		}
		var ret DataSourceIdentityCenterConfiguration
		return ret
	}).(DataSourceIdentityCenterConfigurationOutput)
}

// <p>A Boolean option that controls whether Trusted Identity Propagation should be used.</p>
func (o DataSourceIdentityCenterConfigurationPtrOutput) EnableIdentityPropagation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSourceIdentityCenterConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIdentityPropagation
	}).(pulumi.BoolPtrOutput)
}

// <p>Amazon S3 manifest file location.</p>
type DataSourceManifestFileLocation struct {
	// <p>Amazon S3 bucket.</p>
	Bucket string `pulumi:"bucket"`
	// <p>Amazon S3 key that identifies an object.</p>
	Key string `pulumi:"key"`
}

// DataSourceManifestFileLocationInput is an input type that accepts DataSourceManifestFileLocationArgs and DataSourceManifestFileLocationOutput values.
// You can construct a concrete instance of `DataSourceManifestFileLocationInput` via:
//
//	DataSourceManifestFileLocationArgs{...}
type DataSourceManifestFileLocationInput interface {
	pulumi.Input

	ToDataSourceManifestFileLocationOutput() DataSourceManifestFileLocationOutput
	ToDataSourceManifestFileLocationOutputWithContext(context.Context) DataSourceManifestFileLocationOutput
}

// <p>Amazon S3 manifest file location.</p>
type DataSourceManifestFileLocationArgs struct {
	// <p>Amazon S3 bucket.</p>
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// <p>Amazon S3 key that identifies an object.</p>
	Key pulumi.StringInput `pulumi:"key"`
}

func (DataSourceManifestFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceManifestFileLocation)(nil)).Elem()
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationOutput() DataSourceManifestFileLocationOutput {
	return i.ToDataSourceManifestFileLocationOutputWithContext(context.Background())
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationOutputWithContext(ctx context.Context) DataSourceManifestFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceManifestFileLocationOutput)
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return i.ToDataSourceManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i DataSourceManifestFileLocationArgs) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceManifestFileLocationOutput).ToDataSourceManifestFileLocationPtrOutputWithContext(ctx)
}

// DataSourceManifestFileLocationPtrInput is an input type that accepts DataSourceManifestFileLocationArgs, DataSourceManifestFileLocationPtr and DataSourceManifestFileLocationPtrOutput values.
// You can construct a concrete instance of `DataSourceManifestFileLocationPtrInput` via:
//
//	        DataSourceManifestFileLocationArgs{...}
//
//	or:
//
//	        nil
type DataSourceManifestFileLocationPtrInput interface {
	pulumi.Input

	ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput
	ToDataSourceManifestFileLocationPtrOutputWithContext(context.Context) DataSourceManifestFileLocationPtrOutput
}

type dataSourceManifestFileLocationPtrType DataSourceManifestFileLocationArgs

func DataSourceManifestFileLocationPtr(v *DataSourceManifestFileLocationArgs) DataSourceManifestFileLocationPtrInput {
	return (*dataSourceManifestFileLocationPtrType)(v)
}

func (*dataSourceManifestFileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceManifestFileLocation)(nil)).Elem()
}

func (i *dataSourceManifestFileLocationPtrType) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return i.ToDataSourceManifestFileLocationPtrOutputWithContext(context.Background())
}

func (i *dataSourceManifestFileLocationPtrType) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceManifestFileLocationPtrOutput)
}

// <p>Amazon S3 manifest file location.</p>
type DataSourceManifestFileLocationOutput struct{ *pulumi.OutputState }

func (DataSourceManifestFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceManifestFileLocation)(nil)).Elem()
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationOutput() DataSourceManifestFileLocationOutput {
	return o
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationOutputWithContext(ctx context.Context) DataSourceManifestFileLocationOutput {
	return o
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return o.ToDataSourceManifestFileLocationPtrOutputWithContext(context.Background())
}

func (o DataSourceManifestFileLocationOutput) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceManifestFileLocation) *DataSourceManifestFileLocation {
		return &v
	}).(DataSourceManifestFileLocationPtrOutput)
}

// <p>Amazon S3 bucket.</p>
func (o DataSourceManifestFileLocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceManifestFileLocation) string { return v.Bucket }).(pulumi.StringOutput)
}

// <p>Amazon S3 key that identifies an object.</p>
func (o DataSourceManifestFileLocationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceManifestFileLocation) string { return v.Key }).(pulumi.StringOutput)
}

type DataSourceManifestFileLocationPtrOutput struct{ *pulumi.OutputState }

func (DataSourceManifestFileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceManifestFileLocation)(nil)).Elem()
}

func (o DataSourceManifestFileLocationPtrOutput) ToDataSourceManifestFileLocationPtrOutput() DataSourceManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceManifestFileLocationPtrOutput) ToDataSourceManifestFileLocationPtrOutputWithContext(ctx context.Context) DataSourceManifestFileLocationPtrOutput {
	return o
}

func (o DataSourceManifestFileLocationPtrOutput) Elem() DataSourceManifestFileLocationOutput {
	return o.ApplyT(func(v *DataSourceManifestFileLocation) DataSourceManifestFileLocation {
		if v != nil {
			return *v
		}
		var ret DataSourceManifestFileLocation
		return ret
	}).(DataSourceManifestFileLocationOutput)
}

// <p>Amazon S3 bucket.</p>
func (o DataSourceManifestFileLocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// <p>Amazon S3 key that identifies an object.</p>
func (o DataSourceManifestFileLocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceManifestFileLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters for MariaDB.</p>
type DataSourceMariaDbParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceMariaDbParametersInput is an input type that accepts DataSourceMariaDbParametersArgs and DataSourceMariaDbParametersOutput values.
// You can construct a concrete instance of `DataSourceMariaDbParametersInput` via:
//
//	DataSourceMariaDbParametersArgs{...}
type DataSourceMariaDbParametersInput interface {
	pulumi.Input

	ToDataSourceMariaDbParametersOutput() DataSourceMariaDbParametersOutput
	ToDataSourceMariaDbParametersOutputWithContext(context.Context) DataSourceMariaDbParametersOutput
}

// <p>The parameters for MariaDB.</p>
type DataSourceMariaDbParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceMariaDbParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMariaDbParameters)(nil)).Elem()
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersOutput() DataSourceMariaDbParametersOutput {
	return i.ToDataSourceMariaDbParametersOutputWithContext(context.Background())
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersOutputWithContext(ctx context.Context) DataSourceMariaDbParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMariaDbParametersOutput)
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return i.ToDataSourceMariaDbParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceMariaDbParametersArgs) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMariaDbParametersOutput).ToDataSourceMariaDbParametersPtrOutputWithContext(ctx)
}

// DataSourceMariaDbParametersPtrInput is an input type that accepts DataSourceMariaDbParametersArgs, DataSourceMariaDbParametersPtr and DataSourceMariaDbParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceMariaDbParametersPtrInput` via:
//
//	        DataSourceMariaDbParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceMariaDbParametersPtrInput interface {
	pulumi.Input

	ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput
	ToDataSourceMariaDbParametersPtrOutputWithContext(context.Context) DataSourceMariaDbParametersPtrOutput
}

type dataSourceMariaDbParametersPtrType DataSourceMariaDbParametersArgs

func DataSourceMariaDbParametersPtr(v *DataSourceMariaDbParametersArgs) DataSourceMariaDbParametersPtrInput {
	return (*dataSourceMariaDbParametersPtrType)(v)
}

func (*dataSourceMariaDbParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMariaDbParameters)(nil)).Elem()
}

func (i *dataSourceMariaDbParametersPtrType) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return i.ToDataSourceMariaDbParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceMariaDbParametersPtrType) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMariaDbParametersPtrOutput)
}

// <p>The parameters for MariaDB.</p>
type DataSourceMariaDbParametersOutput struct{ *pulumi.OutputState }

func (DataSourceMariaDbParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMariaDbParameters)(nil)).Elem()
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersOutput() DataSourceMariaDbParametersOutput {
	return o
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersOutputWithContext(ctx context.Context) DataSourceMariaDbParametersOutput {
	return o
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return o.ToDataSourceMariaDbParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceMariaDbParametersOutput) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceMariaDbParameters) *DataSourceMariaDbParameters {
		return &v
	}).(DataSourceMariaDbParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceMariaDbParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMariaDbParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceMariaDbParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMariaDbParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceMariaDbParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceMariaDbParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceMariaDbParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceMariaDbParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMariaDbParameters)(nil)).Elem()
}

func (o DataSourceMariaDbParametersPtrOutput) ToDataSourceMariaDbParametersPtrOutput() DataSourceMariaDbParametersPtrOutput {
	return o
}

func (o DataSourceMariaDbParametersPtrOutput) ToDataSourceMariaDbParametersPtrOutputWithContext(ctx context.Context) DataSourceMariaDbParametersPtrOutput {
	return o
}

func (o DataSourceMariaDbParametersPtrOutput) Elem() DataSourceMariaDbParametersOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) DataSourceMariaDbParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceMariaDbParameters
		return ret
	}).(DataSourceMariaDbParametersOutput)
}

// <p>Database.</p>
func (o DataSourceMariaDbParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceMariaDbParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceMariaDbParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceMariaDbParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The parameters for MySQL.</p>
type DataSourceMySqlParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceMySqlParametersInput is an input type that accepts DataSourceMySqlParametersArgs and DataSourceMySqlParametersOutput values.
// You can construct a concrete instance of `DataSourceMySqlParametersInput` via:
//
//	DataSourceMySqlParametersArgs{...}
type DataSourceMySqlParametersInput interface {
	pulumi.Input

	ToDataSourceMySqlParametersOutput() DataSourceMySqlParametersOutput
	ToDataSourceMySqlParametersOutputWithContext(context.Context) DataSourceMySqlParametersOutput
}

// <p>The parameters for MySQL.</p>
type DataSourceMySqlParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceMySqlParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMySqlParameters)(nil)).Elem()
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersOutput() DataSourceMySqlParametersOutput {
	return i.ToDataSourceMySqlParametersOutputWithContext(context.Background())
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersOutputWithContext(ctx context.Context) DataSourceMySqlParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMySqlParametersOutput)
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return i.ToDataSourceMySqlParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceMySqlParametersArgs) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMySqlParametersOutput).ToDataSourceMySqlParametersPtrOutputWithContext(ctx)
}

// DataSourceMySqlParametersPtrInput is an input type that accepts DataSourceMySqlParametersArgs, DataSourceMySqlParametersPtr and DataSourceMySqlParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceMySqlParametersPtrInput` via:
//
//	        DataSourceMySqlParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceMySqlParametersPtrInput interface {
	pulumi.Input

	ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput
	ToDataSourceMySqlParametersPtrOutputWithContext(context.Context) DataSourceMySqlParametersPtrOutput
}

type dataSourceMySqlParametersPtrType DataSourceMySqlParametersArgs

func DataSourceMySqlParametersPtr(v *DataSourceMySqlParametersArgs) DataSourceMySqlParametersPtrInput {
	return (*dataSourceMySqlParametersPtrType)(v)
}

func (*dataSourceMySqlParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMySqlParameters)(nil)).Elem()
}

func (i *dataSourceMySqlParametersPtrType) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return i.ToDataSourceMySqlParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceMySqlParametersPtrType) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceMySqlParametersPtrOutput)
}

// <p>The parameters for MySQL.</p>
type DataSourceMySqlParametersOutput struct{ *pulumi.OutputState }

func (DataSourceMySqlParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceMySqlParameters)(nil)).Elem()
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersOutput() DataSourceMySqlParametersOutput {
	return o
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersOutputWithContext(ctx context.Context) DataSourceMySqlParametersOutput {
	return o
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return o.ToDataSourceMySqlParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceMySqlParametersOutput) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceMySqlParameters) *DataSourceMySqlParameters {
		return &v
	}).(DataSourceMySqlParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceMySqlParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMySqlParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceMySqlParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceMySqlParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceMySqlParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceMySqlParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceMySqlParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceMySqlParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceMySqlParameters)(nil)).Elem()
}

func (o DataSourceMySqlParametersPtrOutput) ToDataSourceMySqlParametersPtrOutput() DataSourceMySqlParametersPtrOutput {
	return o
}

func (o DataSourceMySqlParametersPtrOutput) ToDataSourceMySqlParametersPtrOutputWithContext(ctx context.Context) DataSourceMySqlParametersPtrOutput {
	return o
}

func (o DataSourceMySqlParametersPtrOutput) Elem() DataSourceMySqlParametersOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) DataSourceMySqlParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceMySqlParameters
		return ret
	}).(DataSourceMySqlParametersOutput)
}

// <p>Database.</p>
func (o DataSourceMySqlParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceMySqlParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceMySqlParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceMySqlParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

type DataSourceOAuthParameters struct {
	// The resource uri of the identity provider.
	IdentityProviderResourceUri             *string                            `pulumi:"identityProviderResourceUri"`
	IdentityProviderVpcConnectionProperties *DataSourceVpcConnectionProperties `pulumi:"identityProviderVpcConnectionProperties"`
	// The OAuth scope.
	OAuthScope *string `pulumi:"oAuthScope"`
	// The token endpoint URL of the identity provider.
	TokenProviderUrl string `pulumi:"tokenProviderUrl"`
}

// DataSourceOAuthParametersInput is an input type that accepts DataSourceOAuthParametersArgs and DataSourceOAuthParametersOutput values.
// You can construct a concrete instance of `DataSourceOAuthParametersInput` via:
//
//	DataSourceOAuthParametersArgs{...}
type DataSourceOAuthParametersInput interface {
	pulumi.Input

	ToDataSourceOAuthParametersOutput() DataSourceOAuthParametersOutput
	ToDataSourceOAuthParametersOutputWithContext(context.Context) DataSourceOAuthParametersOutput
}

type DataSourceOAuthParametersArgs struct {
	// The resource uri of the identity provider.
	IdentityProviderResourceUri             pulumi.StringPtrInput                     `pulumi:"identityProviderResourceUri"`
	IdentityProviderVpcConnectionProperties DataSourceVpcConnectionPropertiesPtrInput `pulumi:"identityProviderVpcConnectionProperties"`
	// The OAuth scope.
	OAuthScope pulumi.StringPtrInput `pulumi:"oAuthScope"`
	// The token endpoint URL of the identity provider.
	TokenProviderUrl pulumi.StringInput `pulumi:"tokenProviderUrl"`
}

func (DataSourceOAuthParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOAuthParameters)(nil)).Elem()
}

func (i DataSourceOAuthParametersArgs) ToDataSourceOAuthParametersOutput() DataSourceOAuthParametersOutput {
	return i.ToDataSourceOAuthParametersOutputWithContext(context.Background())
}

func (i DataSourceOAuthParametersArgs) ToDataSourceOAuthParametersOutputWithContext(ctx context.Context) DataSourceOAuthParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOAuthParametersOutput)
}

func (i DataSourceOAuthParametersArgs) ToDataSourceOAuthParametersPtrOutput() DataSourceOAuthParametersPtrOutput {
	return i.ToDataSourceOAuthParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceOAuthParametersArgs) ToDataSourceOAuthParametersPtrOutputWithContext(ctx context.Context) DataSourceOAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOAuthParametersOutput).ToDataSourceOAuthParametersPtrOutputWithContext(ctx)
}

// DataSourceOAuthParametersPtrInput is an input type that accepts DataSourceOAuthParametersArgs, DataSourceOAuthParametersPtr and DataSourceOAuthParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceOAuthParametersPtrInput` via:
//
//	        DataSourceOAuthParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceOAuthParametersPtrInput interface {
	pulumi.Input

	ToDataSourceOAuthParametersPtrOutput() DataSourceOAuthParametersPtrOutput
	ToDataSourceOAuthParametersPtrOutputWithContext(context.Context) DataSourceOAuthParametersPtrOutput
}

type dataSourceOAuthParametersPtrType DataSourceOAuthParametersArgs

func DataSourceOAuthParametersPtr(v *DataSourceOAuthParametersArgs) DataSourceOAuthParametersPtrInput {
	return (*dataSourceOAuthParametersPtrType)(v)
}

func (*dataSourceOAuthParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceOAuthParameters)(nil)).Elem()
}

func (i *dataSourceOAuthParametersPtrType) ToDataSourceOAuthParametersPtrOutput() DataSourceOAuthParametersPtrOutput {
	return i.ToDataSourceOAuthParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceOAuthParametersPtrType) ToDataSourceOAuthParametersPtrOutputWithContext(ctx context.Context) DataSourceOAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOAuthParametersPtrOutput)
}

type DataSourceOAuthParametersOutput struct{ *pulumi.OutputState }

func (DataSourceOAuthParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOAuthParameters)(nil)).Elem()
}

func (o DataSourceOAuthParametersOutput) ToDataSourceOAuthParametersOutput() DataSourceOAuthParametersOutput {
	return o
}

func (o DataSourceOAuthParametersOutput) ToDataSourceOAuthParametersOutputWithContext(ctx context.Context) DataSourceOAuthParametersOutput {
	return o
}

func (o DataSourceOAuthParametersOutput) ToDataSourceOAuthParametersPtrOutput() DataSourceOAuthParametersPtrOutput {
	return o.ToDataSourceOAuthParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceOAuthParametersOutput) ToDataSourceOAuthParametersPtrOutputWithContext(ctx context.Context) DataSourceOAuthParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceOAuthParameters) *DataSourceOAuthParameters {
		return &v
	}).(DataSourceOAuthParametersPtrOutput)
}

// The resource uri of the identity provider.
func (o DataSourceOAuthParametersOutput) IdentityProviderResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceOAuthParameters) *string { return v.IdentityProviderResourceUri }).(pulumi.StringPtrOutput)
}

func (o DataSourceOAuthParametersOutput) IdentityProviderVpcConnectionProperties() DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v DataSourceOAuthParameters) *DataSourceVpcConnectionProperties {
		return v.IdentityProviderVpcConnectionProperties
	}).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// The OAuth scope.
func (o DataSourceOAuthParametersOutput) OAuthScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceOAuthParameters) *string { return v.OAuthScope }).(pulumi.StringPtrOutput)
}

// The token endpoint URL of the identity provider.
func (o DataSourceOAuthParametersOutput) TokenProviderUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceOAuthParameters) string { return v.TokenProviderUrl }).(pulumi.StringOutput)
}

type DataSourceOAuthParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceOAuthParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceOAuthParameters)(nil)).Elem()
}

func (o DataSourceOAuthParametersPtrOutput) ToDataSourceOAuthParametersPtrOutput() DataSourceOAuthParametersPtrOutput {
	return o
}

func (o DataSourceOAuthParametersPtrOutput) ToDataSourceOAuthParametersPtrOutputWithContext(ctx context.Context) DataSourceOAuthParametersPtrOutput {
	return o
}

func (o DataSourceOAuthParametersPtrOutput) Elem() DataSourceOAuthParametersOutput {
	return o.ApplyT(func(v *DataSourceOAuthParameters) DataSourceOAuthParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceOAuthParameters
		return ret
	}).(DataSourceOAuthParametersOutput)
}

// The resource uri of the identity provider.
func (o DataSourceOAuthParametersPtrOutput) IdentityProviderResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceOAuthParameters) *string {
		if v == nil {
			return nil
		}
		return v.IdentityProviderResourceUri
	}).(pulumi.StringPtrOutput)
}

func (o DataSourceOAuthParametersPtrOutput) IdentityProviderVpcConnectionProperties() DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSourceOAuthParameters) *DataSourceVpcConnectionProperties {
		if v == nil {
			return nil
		}
		return v.IdentityProviderVpcConnectionProperties
	}).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// The OAuth scope.
func (o DataSourceOAuthParametersPtrOutput) OAuthScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceOAuthParameters) *string {
		if v == nil {
			return nil
		}
		return v.OAuthScope
	}).(pulumi.StringPtrOutput)
}

// The token endpoint URL of the identity provider.
func (o DataSourceOAuthParametersPtrOutput) TokenProviderUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceOAuthParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TokenProviderUrl
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters for Oracle.</p>
type DataSourceOracleParameters struct {
	// <p>The database.</p>
	Database string `pulumi:"database"`
	// <p>An Oracle host.</p>
	Host string `pulumi:"host"`
	// <p>The port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceOracleParametersInput is an input type that accepts DataSourceOracleParametersArgs and DataSourceOracleParametersOutput values.
// You can construct a concrete instance of `DataSourceOracleParametersInput` via:
//
//	DataSourceOracleParametersArgs{...}
type DataSourceOracleParametersInput interface {
	pulumi.Input

	ToDataSourceOracleParametersOutput() DataSourceOracleParametersOutput
	ToDataSourceOracleParametersOutputWithContext(context.Context) DataSourceOracleParametersOutput
}

// <p>The parameters for Oracle.</p>
type DataSourceOracleParametersArgs struct {
	// <p>The database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>An Oracle host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>The port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceOracleParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOracleParameters)(nil)).Elem()
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersOutput() DataSourceOracleParametersOutput {
	return i.ToDataSourceOracleParametersOutputWithContext(context.Background())
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersOutputWithContext(ctx context.Context) DataSourceOracleParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOracleParametersOutput)
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return i.ToDataSourceOracleParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceOracleParametersArgs) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOracleParametersOutput).ToDataSourceOracleParametersPtrOutputWithContext(ctx)
}

// DataSourceOracleParametersPtrInput is an input type that accepts DataSourceOracleParametersArgs, DataSourceOracleParametersPtr and DataSourceOracleParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceOracleParametersPtrInput` via:
//
//	        DataSourceOracleParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceOracleParametersPtrInput interface {
	pulumi.Input

	ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput
	ToDataSourceOracleParametersPtrOutputWithContext(context.Context) DataSourceOracleParametersPtrOutput
}

type dataSourceOracleParametersPtrType DataSourceOracleParametersArgs

func DataSourceOracleParametersPtr(v *DataSourceOracleParametersArgs) DataSourceOracleParametersPtrInput {
	return (*dataSourceOracleParametersPtrType)(v)
}

func (*dataSourceOracleParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceOracleParameters)(nil)).Elem()
}

func (i *dataSourceOracleParametersPtrType) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return i.ToDataSourceOracleParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceOracleParametersPtrType) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOracleParametersPtrOutput)
}

// <p>The parameters for Oracle.</p>
type DataSourceOracleParametersOutput struct{ *pulumi.OutputState }

func (DataSourceOracleParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceOracleParameters)(nil)).Elem()
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersOutput() DataSourceOracleParametersOutput {
	return o
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersOutputWithContext(ctx context.Context) DataSourceOracleParametersOutput {
	return o
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return o.ToDataSourceOracleParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceOracleParametersOutput) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceOracleParameters) *DataSourceOracleParameters {
		return &v
	}).(DataSourceOracleParametersPtrOutput)
}

// <p>The database.</p>
func (o DataSourceOracleParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceOracleParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>An Oracle host.</p>
func (o DataSourceOracleParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceOracleParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>The port.</p>
func (o DataSourceOracleParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceOracleParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceOracleParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceOracleParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceOracleParameters)(nil)).Elem()
}

func (o DataSourceOracleParametersPtrOutput) ToDataSourceOracleParametersPtrOutput() DataSourceOracleParametersPtrOutput {
	return o
}

func (o DataSourceOracleParametersPtrOutput) ToDataSourceOracleParametersPtrOutputWithContext(ctx context.Context) DataSourceOracleParametersPtrOutput {
	return o
}

func (o DataSourceOracleParametersPtrOutput) Elem() DataSourceOracleParametersOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) DataSourceOracleParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceOracleParameters
		return ret
	}).(DataSourceOracleParametersOutput)
}

// <p>The database.</p>
func (o DataSourceOracleParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>An Oracle host.</p>
func (o DataSourceOracleParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>The port.</p>
func (o DataSourceOracleParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceOracleParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
//
//	This is a variant type structure. For this structure to be valid, only one of the
//	attributes can be non-null.</p>
type DataSourceParameters struct {
	// The parameters for OpenSearch.
	AmazonElasticsearchParameters *DataSourceAmazonElasticsearchParameters `pulumi:"amazonElasticsearchParameters"`
	// The parameters for OpenSearch.
	AmazonOpenSearchParameters *DataSourceAmazonOpenSearchParameters `pulumi:"amazonOpenSearchParameters"`
	// The parameters for Amazon Athena.
	AthenaParameters *DataSourceAthenaParameters `pulumi:"athenaParameters"`
	// The parameters for Amazon Aurora MySQL.
	AuroraParameters *DataSourceAuroraParameters `pulumi:"auroraParameters"`
	// The parameters for Amazon Aurora.
	AuroraPostgreSqlParameters *DataSourceAuroraPostgreSqlParameters `pulumi:"auroraPostgreSqlParameters"`
	// The required parameters that are needed to connect to a Databricks data source.
	DatabricksParameters *DataSourceDatabricksParameters `pulumi:"databricksParameters"`
	// The parameters for MariaDB.
	MariaDbParameters *DataSourceMariaDbParameters `pulumi:"mariaDbParameters"`
	// The parameters for MySQL.
	MySqlParameters *DataSourceMySqlParameters `pulumi:"mySqlParameters"`
	// Oracle parameters.
	OracleParameters *DataSourceOracleParameters `pulumi:"oracleParameters"`
	// The parameters for PostgreSQL.
	PostgreSqlParameters *DataSourcePostgreSqlParameters `pulumi:"postgreSqlParameters"`
	// The parameters for Presto.
	PrestoParameters *DataSourcePrestoParameters `pulumi:"prestoParameters"`
	// The parameters for Amazon RDS.
	RdsParameters *DataSourceRdsParameters `pulumi:"rdsParameters"`
	// The parameters for Amazon Redshift.
	RedshiftParameters *DataSourceRedshiftParameters `pulumi:"redshiftParameters"`
	// The parameters for S3.
	S3Parameters *DataSourceS3Parameters `pulumi:"s3Parameters"`
	// The parameters for Snowflake.
	SnowflakeParameters *DataSourceSnowflakeParameters `pulumi:"snowflakeParameters"`
	// The parameters for Spark.
	SparkParameters *DataSourceSparkParameters `pulumi:"sparkParameters"`
	// The parameters for SQL Server.
	SqlServerParameters *DataSourceSqlServerParameters `pulumi:"sqlServerParameters"`
	// The parameters that are required to connect to a Starburst data source.
	StarburstParameters *DataSourceStarburstParameters `pulumi:"starburstParameters"`
	// The parameters for Teradata.
	TeradataParameters *DataSourceTeradataParameters `pulumi:"teradataParameters"`
	// The parameters that are required to connect to a Trino data source.
	TrinoParameters *DataSourceTrinoParameters `pulumi:"trinoParameters"`
}

// DataSourceParametersInput is an input type that accepts DataSourceParametersArgs and DataSourceParametersOutput values.
// You can construct a concrete instance of `DataSourceParametersInput` via:
//
//	DataSourceParametersArgs{...}
type DataSourceParametersInput interface {
	pulumi.Input

	ToDataSourceParametersOutput() DataSourceParametersOutput
	ToDataSourceParametersOutputWithContext(context.Context) DataSourceParametersOutput
}

// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
//
//	This is a variant type structure. For this structure to be valid, only one of the
//	attributes can be non-null.</p>
type DataSourceParametersArgs struct {
	// The parameters for OpenSearch.
	AmazonElasticsearchParameters DataSourceAmazonElasticsearchParametersPtrInput `pulumi:"amazonElasticsearchParameters"`
	// The parameters for OpenSearch.
	AmazonOpenSearchParameters DataSourceAmazonOpenSearchParametersPtrInput `pulumi:"amazonOpenSearchParameters"`
	// The parameters for Amazon Athena.
	AthenaParameters DataSourceAthenaParametersPtrInput `pulumi:"athenaParameters"`
	// The parameters for Amazon Aurora MySQL.
	AuroraParameters DataSourceAuroraParametersPtrInput `pulumi:"auroraParameters"`
	// The parameters for Amazon Aurora.
	AuroraPostgreSqlParameters DataSourceAuroraPostgreSqlParametersPtrInput `pulumi:"auroraPostgreSqlParameters"`
	// The required parameters that are needed to connect to a Databricks data source.
	DatabricksParameters DataSourceDatabricksParametersPtrInput `pulumi:"databricksParameters"`
	// The parameters for MariaDB.
	MariaDbParameters DataSourceMariaDbParametersPtrInput `pulumi:"mariaDbParameters"`
	// The parameters for MySQL.
	MySqlParameters DataSourceMySqlParametersPtrInput `pulumi:"mySqlParameters"`
	// Oracle parameters.
	OracleParameters DataSourceOracleParametersPtrInput `pulumi:"oracleParameters"`
	// The parameters for PostgreSQL.
	PostgreSqlParameters DataSourcePostgreSqlParametersPtrInput `pulumi:"postgreSqlParameters"`
	// The parameters for Presto.
	PrestoParameters DataSourcePrestoParametersPtrInput `pulumi:"prestoParameters"`
	// The parameters for Amazon RDS.
	RdsParameters DataSourceRdsParametersPtrInput `pulumi:"rdsParameters"`
	// The parameters for Amazon Redshift.
	RedshiftParameters DataSourceRedshiftParametersPtrInput `pulumi:"redshiftParameters"`
	// The parameters for S3.
	S3Parameters DataSourceS3ParametersPtrInput `pulumi:"s3Parameters"`
	// The parameters for Snowflake.
	SnowflakeParameters DataSourceSnowflakeParametersPtrInput `pulumi:"snowflakeParameters"`
	// The parameters for Spark.
	SparkParameters DataSourceSparkParametersPtrInput `pulumi:"sparkParameters"`
	// The parameters for SQL Server.
	SqlServerParameters DataSourceSqlServerParametersPtrInput `pulumi:"sqlServerParameters"`
	// The parameters that are required to connect to a Starburst data source.
	StarburstParameters DataSourceStarburstParametersPtrInput `pulumi:"starburstParameters"`
	// The parameters for Teradata.
	TeradataParameters DataSourceTeradataParametersPtrInput `pulumi:"teradataParameters"`
	// The parameters that are required to connect to a Trino data source.
	TrinoParameters DataSourceTrinoParametersPtrInput `pulumi:"trinoParameters"`
}

func (DataSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return i.ToDataSourceParametersOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput)
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceParametersArgs) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersOutput).ToDataSourceParametersPtrOutputWithContext(ctx)
}

// DataSourceParametersPtrInput is an input type that accepts DataSourceParametersArgs, DataSourceParametersPtr and DataSourceParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceParametersPtrInput` via:
//
//	        DataSourceParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceParametersPtrInput interface {
	pulumi.Input

	ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput
	ToDataSourceParametersPtrOutputWithContext(context.Context) DataSourceParametersPtrOutput
}

type dataSourceParametersPtrType DataSourceParametersArgs

func DataSourceParametersPtr(v *DataSourceParametersArgs) DataSourceParametersPtrInput {
	return (*dataSourceParametersPtrType)(v)
}

func (*dataSourceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return i.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceParametersPtrType) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersPtrOutput)
}

// DataSourceParametersArrayInput is an input type that accepts DataSourceParametersArray and DataSourceParametersArrayOutput values.
// You can construct a concrete instance of `DataSourceParametersArrayInput` via:
//
//	DataSourceParametersArray{ DataSourceParametersArgs{...} }
type DataSourceParametersArrayInput interface {
	pulumi.Input

	ToDataSourceParametersArrayOutput() DataSourceParametersArrayOutput
	ToDataSourceParametersArrayOutputWithContext(context.Context) DataSourceParametersArrayOutput
}

type DataSourceParametersArray []DataSourceParametersInput

func (DataSourceParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceParameters)(nil)).Elem()
}

func (i DataSourceParametersArray) ToDataSourceParametersArrayOutput() DataSourceParametersArrayOutput {
	return i.ToDataSourceParametersArrayOutputWithContext(context.Background())
}

func (i DataSourceParametersArray) ToDataSourceParametersArrayOutputWithContext(ctx context.Context) DataSourceParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceParametersArrayOutput)
}

// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
//
//	This is a variant type structure. For this structure to be valid, only one of the
//	attributes can be non-null.</p>
type DataSourceParametersOutput struct{ *pulumi.OutputState }

func (DataSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutput() DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersOutputWithContext(ctx context.Context) DataSourceParametersOutput {
	return o
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o.ToDataSourceParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceParametersOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceParameters) *DataSourceParameters {
		return &v
	}).(DataSourceParametersPtrOutput)
}

// The parameters for OpenSearch.
func (o DataSourceParametersOutput) AmazonElasticsearchParameters() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAmazonElasticsearchParameters {
		return v.AmazonElasticsearchParameters
	}).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

// The parameters for OpenSearch.
func (o DataSourceParametersOutput) AmazonOpenSearchParameters() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAmazonOpenSearchParameters {
		return v.AmazonOpenSearchParameters
	}).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

// The parameters for Amazon Athena.
func (o DataSourceParametersOutput) AthenaParameters() DataSourceAthenaParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAthenaParameters { return v.AthenaParameters }).(DataSourceAthenaParametersPtrOutput)
}

// The parameters for Amazon Aurora MySQL.
func (o DataSourceParametersOutput) AuroraParameters() DataSourceAuroraParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAuroraParameters { return v.AuroraParameters }).(DataSourceAuroraParametersPtrOutput)
}

// The parameters for Amazon Aurora.
func (o DataSourceParametersOutput) AuroraPostgreSqlParameters() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceAuroraPostgreSqlParameters {
		return v.AuroraPostgreSqlParameters
	}).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

// The required parameters that are needed to connect to a Databricks data source.
func (o DataSourceParametersOutput) DatabricksParameters() DataSourceDatabricksParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceDatabricksParameters { return v.DatabricksParameters }).(DataSourceDatabricksParametersPtrOutput)
}

// The parameters for MariaDB.
func (o DataSourceParametersOutput) MariaDbParameters() DataSourceMariaDbParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceMariaDbParameters { return v.MariaDbParameters }).(DataSourceMariaDbParametersPtrOutput)
}

// The parameters for MySQL.
func (o DataSourceParametersOutput) MySqlParameters() DataSourceMySqlParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceMySqlParameters { return v.MySqlParameters }).(DataSourceMySqlParametersPtrOutput)
}

// Oracle parameters.
func (o DataSourceParametersOutput) OracleParameters() DataSourceOracleParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceOracleParameters { return v.OracleParameters }).(DataSourceOracleParametersPtrOutput)
}

// The parameters for PostgreSQL.
func (o DataSourceParametersOutput) PostgreSqlParameters() DataSourcePostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourcePostgreSqlParameters { return v.PostgreSqlParameters }).(DataSourcePostgreSqlParametersPtrOutput)
}

// The parameters for Presto.
func (o DataSourceParametersOutput) PrestoParameters() DataSourcePrestoParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourcePrestoParameters { return v.PrestoParameters }).(DataSourcePrestoParametersPtrOutput)
}

// The parameters for Amazon RDS.
func (o DataSourceParametersOutput) RdsParameters() DataSourceRdsParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceRdsParameters { return v.RdsParameters }).(DataSourceRdsParametersPtrOutput)
}

// The parameters for Amazon Redshift.
func (o DataSourceParametersOutput) RedshiftParameters() DataSourceRedshiftParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceRedshiftParameters { return v.RedshiftParameters }).(DataSourceRedshiftParametersPtrOutput)
}

// The parameters for S3.
func (o DataSourceParametersOutput) S3Parameters() DataSourceS3ParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceS3Parameters { return v.S3Parameters }).(DataSourceS3ParametersPtrOutput)
}

// The parameters for Snowflake.
func (o DataSourceParametersOutput) SnowflakeParameters() DataSourceSnowflakeParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceSnowflakeParameters { return v.SnowflakeParameters }).(DataSourceSnowflakeParametersPtrOutput)
}

// The parameters for Spark.
func (o DataSourceParametersOutput) SparkParameters() DataSourceSparkParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceSparkParameters { return v.SparkParameters }).(DataSourceSparkParametersPtrOutput)
}

// The parameters for SQL Server.
func (o DataSourceParametersOutput) SqlServerParameters() DataSourceSqlServerParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceSqlServerParameters { return v.SqlServerParameters }).(DataSourceSqlServerParametersPtrOutput)
}

// The parameters that are required to connect to a Starburst data source.
func (o DataSourceParametersOutput) StarburstParameters() DataSourceStarburstParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceStarburstParameters { return v.StarburstParameters }).(DataSourceStarburstParametersPtrOutput)
}

// The parameters for Teradata.
func (o DataSourceParametersOutput) TeradataParameters() DataSourceTeradataParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceTeradataParameters { return v.TeradataParameters }).(DataSourceTeradataParametersPtrOutput)
}

// The parameters that are required to connect to a Trino data source.
func (o DataSourceParametersOutput) TrinoParameters() DataSourceTrinoParametersPtrOutput {
	return o.ApplyT(func(v DataSourceParameters) *DataSourceTrinoParameters { return v.TrinoParameters }).(DataSourceTrinoParametersPtrOutput)
}

type DataSourceParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutput() DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) ToDataSourceParametersPtrOutputWithContext(ctx context.Context) DataSourceParametersPtrOutput {
	return o
}

func (o DataSourceParametersPtrOutput) Elem() DataSourceParametersOutput {
	return o.ApplyT(func(v *DataSourceParameters) DataSourceParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceParameters
		return ret
	}).(DataSourceParametersOutput)
}

// The parameters for OpenSearch.
func (o DataSourceParametersPtrOutput) AmazonElasticsearchParameters() DataSourceAmazonElasticsearchParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAmazonElasticsearchParameters {
		if v == nil {
			return nil
		}
		return v.AmazonElasticsearchParameters
	}).(DataSourceAmazonElasticsearchParametersPtrOutput)
}

// The parameters for OpenSearch.
func (o DataSourceParametersPtrOutput) AmazonOpenSearchParameters() DataSourceAmazonOpenSearchParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAmazonOpenSearchParameters {
		if v == nil {
			return nil
		}
		return v.AmazonOpenSearchParameters
	}).(DataSourceAmazonOpenSearchParametersPtrOutput)
}

// The parameters for Amazon Athena.
func (o DataSourceParametersPtrOutput) AthenaParameters() DataSourceAthenaParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAthenaParameters {
		if v == nil {
			return nil
		}
		return v.AthenaParameters
	}).(DataSourceAthenaParametersPtrOutput)
}

// The parameters for Amazon Aurora MySQL.
func (o DataSourceParametersPtrOutput) AuroraParameters() DataSourceAuroraParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAuroraParameters {
		if v == nil {
			return nil
		}
		return v.AuroraParameters
	}).(DataSourceAuroraParametersPtrOutput)
}

// The parameters for Amazon Aurora.
func (o DataSourceParametersPtrOutput) AuroraPostgreSqlParameters() DataSourceAuroraPostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceAuroraPostgreSqlParameters {
		if v == nil {
			return nil
		}
		return v.AuroraPostgreSqlParameters
	}).(DataSourceAuroraPostgreSqlParametersPtrOutput)
}

// The required parameters that are needed to connect to a Databricks data source.
func (o DataSourceParametersPtrOutput) DatabricksParameters() DataSourceDatabricksParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceDatabricksParameters {
		if v == nil {
			return nil
		}
		return v.DatabricksParameters
	}).(DataSourceDatabricksParametersPtrOutput)
}

// The parameters for MariaDB.
func (o DataSourceParametersPtrOutput) MariaDbParameters() DataSourceMariaDbParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceMariaDbParameters {
		if v == nil {
			return nil
		}
		return v.MariaDbParameters
	}).(DataSourceMariaDbParametersPtrOutput)
}

// The parameters for MySQL.
func (o DataSourceParametersPtrOutput) MySqlParameters() DataSourceMySqlParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceMySqlParameters {
		if v == nil {
			return nil
		}
		return v.MySqlParameters
	}).(DataSourceMySqlParametersPtrOutput)
}

// Oracle parameters.
func (o DataSourceParametersPtrOutput) OracleParameters() DataSourceOracleParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceOracleParameters {
		if v == nil {
			return nil
		}
		return v.OracleParameters
	}).(DataSourceOracleParametersPtrOutput)
}

// The parameters for PostgreSQL.
func (o DataSourceParametersPtrOutput) PostgreSqlParameters() DataSourcePostgreSqlParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourcePostgreSqlParameters {
		if v == nil {
			return nil
		}
		return v.PostgreSqlParameters
	}).(DataSourcePostgreSqlParametersPtrOutput)
}

// The parameters for Presto.
func (o DataSourceParametersPtrOutput) PrestoParameters() DataSourcePrestoParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourcePrestoParameters {
		if v == nil {
			return nil
		}
		return v.PrestoParameters
	}).(DataSourcePrestoParametersPtrOutput)
}

// The parameters for Amazon RDS.
func (o DataSourceParametersPtrOutput) RdsParameters() DataSourceRdsParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceRdsParameters {
		if v == nil {
			return nil
		}
		return v.RdsParameters
	}).(DataSourceRdsParametersPtrOutput)
}

// The parameters for Amazon Redshift.
func (o DataSourceParametersPtrOutput) RedshiftParameters() DataSourceRedshiftParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceRedshiftParameters {
		if v == nil {
			return nil
		}
		return v.RedshiftParameters
	}).(DataSourceRedshiftParametersPtrOutput)
}

// The parameters for S3.
func (o DataSourceParametersPtrOutput) S3Parameters() DataSourceS3ParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceS3Parameters {
		if v == nil {
			return nil
		}
		return v.S3Parameters
	}).(DataSourceS3ParametersPtrOutput)
}

// The parameters for Snowflake.
func (o DataSourceParametersPtrOutput) SnowflakeParameters() DataSourceSnowflakeParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceSnowflakeParameters {
		if v == nil {
			return nil
		}
		return v.SnowflakeParameters
	}).(DataSourceSnowflakeParametersPtrOutput)
}

// The parameters for Spark.
func (o DataSourceParametersPtrOutput) SparkParameters() DataSourceSparkParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceSparkParameters {
		if v == nil {
			return nil
		}
		return v.SparkParameters
	}).(DataSourceSparkParametersPtrOutput)
}

// The parameters for SQL Server.
func (o DataSourceParametersPtrOutput) SqlServerParameters() DataSourceSqlServerParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceSqlServerParameters {
		if v == nil {
			return nil
		}
		return v.SqlServerParameters
	}).(DataSourceSqlServerParametersPtrOutput)
}

// The parameters that are required to connect to a Starburst data source.
func (o DataSourceParametersPtrOutput) StarburstParameters() DataSourceStarburstParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceStarburstParameters {
		if v == nil {
			return nil
		}
		return v.StarburstParameters
	}).(DataSourceStarburstParametersPtrOutput)
}

// The parameters for Teradata.
func (o DataSourceParametersPtrOutput) TeradataParameters() DataSourceTeradataParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceTeradataParameters {
		if v == nil {
			return nil
		}
		return v.TeradataParameters
	}).(DataSourceTeradataParametersPtrOutput)
}

// The parameters that are required to connect to a Trino data source.
func (o DataSourceParametersPtrOutput) TrinoParameters() DataSourceTrinoParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceParameters) *DataSourceTrinoParameters {
		if v == nil {
			return nil
		}
		return v.TrinoParameters
	}).(DataSourceTrinoParametersPtrOutput)
}

type DataSourceParametersArrayOutput struct{ *pulumi.OutputState }

func (DataSourceParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceParameters)(nil)).Elem()
}

func (o DataSourceParametersArrayOutput) ToDataSourceParametersArrayOutput() DataSourceParametersArrayOutput {
	return o
}

func (o DataSourceParametersArrayOutput) ToDataSourceParametersArrayOutputWithContext(ctx context.Context) DataSourceParametersArrayOutput {
	return o
}

func (o DataSourceParametersArrayOutput) Index(i pulumi.IntInput) DataSourceParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceParameters {
		return vs[0].([]DataSourceParameters)[vs[1].(int)]
	}).(DataSourceParametersOutput)
}

// <p>The parameters for PostgreSQL.</p>
type DataSourcePostgreSqlParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourcePostgreSqlParametersInput is an input type that accepts DataSourcePostgreSqlParametersArgs and DataSourcePostgreSqlParametersOutput values.
// You can construct a concrete instance of `DataSourcePostgreSqlParametersInput` via:
//
//	DataSourcePostgreSqlParametersArgs{...}
type DataSourcePostgreSqlParametersInput interface {
	pulumi.Input

	ToDataSourcePostgreSqlParametersOutput() DataSourcePostgreSqlParametersOutput
	ToDataSourcePostgreSqlParametersOutputWithContext(context.Context) DataSourcePostgreSqlParametersOutput
}

// <p>The parameters for PostgreSQL.</p>
type DataSourcePostgreSqlParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourcePostgreSqlParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersOutput() DataSourcePostgreSqlParametersOutput {
	return i.ToDataSourcePostgreSqlParametersOutputWithContext(context.Background())
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePostgreSqlParametersOutput)
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return i.ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i DataSourcePostgreSqlParametersArgs) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePostgreSqlParametersOutput).ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx)
}

// DataSourcePostgreSqlParametersPtrInput is an input type that accepts DataSourcePostgreSqlParametersArgs, DataSourcePostgreSqlParametersPtr and DataSourcePostgreSqlParametersPtrOutput values.
// You can construct a concrete instance of `DataSourcePostgreSqlParametersPtrInput` via:
//
//	        DataSourcePostgreSqlParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourcePostgreSqlParametersPtrInput interface {
	pulumi.Input

	ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput
	ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Context) DataSourcePostgreSqlParametersPtrOutput
}

type dataSourcePostgreSqlParametersPtrType DataSourcePostgreSqlParametersArgs

func DataSourcePostgreSqlParametersPtr(v *DataSourcePostgreSqlParametersArgs) DataSourcePostgreSqlParametersPtrInput {
	return (*dataSourcePostgreSqlParametersPtrType)(v)
}

func (*dataSourcePostgreSqlParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (i *dataSourcePostgreSqlParametersPtrType) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return i.ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourcePostgreSqlParametersPtrType) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePostgreSqlParametersPtrOutput)
}

// <p>The parameters for PostgreSQL.</p>
type DataSourcePostgreSqlParametersOutput struct{ *pulumi.OutputState }

func (DataSourcePostgreSqlParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersOutput() DataSourcePostgreSqlParametersOutput {
	return o
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersOutput {
	return o
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return o.ToDataSourcePostgreSqlParametersPtrOutputWithContext(context.Background())
}

func (o DataSourcePostgreSqlParametersOutput) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourcePostgreSqlParameters) *DataSourcePostgreSqlParameters {
		return &v
	}).(DataSourcePostgreSqlParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourcePostgreSqlParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePostgreSqlParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourcePostgreSqlParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePostgreSqlParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourcePostgreSqlParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourcePostgreSqlParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourcePostgreSqlParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourcePostgreSqlParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePostgreSqlParameters)(nil)).Elem()
}

func (o DataSourcePostgreSqlParametersPtrOutput) ToDataSourcePostgreSqlParametersPtrOutput() DataSourcePostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourcePostgreSqlParametersPtrOutput) ToDataSourcePostgreSqlParametersPtrOutputWithContext(ctx context.Context) DataSourcePostgreSqlParametersPtrOutput {
	return o
}

func (o DataSourcePostgreSqlParametersPtrOutput) Elem() DataSourcePostgreSqlParametersOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) DataSourcePostgreSqlParameters {
		if v != nil {
			return *v
		}
		var ret DataSourcePostgreSqlParameters
		return ret
	}).(DataSourcePostgreSqlParametersOutput)
}

// <p>Database.</p>
func (o DataSourcePostgreSqlParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourcePostgreSqlParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourcePostgreSqlParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourcePostgreSqlParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The parameters for Presto.</p>
type DataSourcePrestoParameters struct {
	// <p>Catalog.</p>
	Catalog string `pulumi:"catalog"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourcePrestoParametersInput is an input type that accepts DataSourcePrestoParametersArgs and DataSourcePrestoParametersOutput values.
// You can construct a concrete instance of `DataSourcePrestoParametersInput` via:
//
//	DataSourcePrestoParametersArgs{...}
type DataSourcePrestoParametersInput interface {
	pulumi.Input

	ToDataSourcePrestoParametersOutput() DataSourcePrestoParametersOutput
	ToDataSourcePrestoParametersOutputWithContext(context.Context) DataSourcePrestoParametersOutput
}

// <p>The parameters for Presto.</p>
type DataSourcePrestoParametersArgs struct {
	// <p>Catalog.</p>
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourcePrestoParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePrestoParameters)(nil)).Elem()
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersOutput() DataSourcePrestoParametersOutput {
	return i.ToDataSourcePrestoParametersOutputWithContext(context.Background())
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersOutputWithContext(ctx context.Context) DataSourcePrestoParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrestoParametersOutput)
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return i.ToDataSourcePrestoParametersPtrOutputWithContext(context.Background())
}

func (i DataSourcePrestoParametersArgs) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrestoParametersOutput).ToDataSourcePrestoParametersPtrOutputWithContext(ctx)
}

// DataSourcePrestoParametersPtrInput is an input type that accepts DataSourcePrestoParametersArgs, DataSourcePrestoParametersPtr and DataSourcePrestoParametersPtrOutput values.
// You can construct a concrete instance of `DataSourcePrestoParametersPtrInput` via:
//
//	        DataSourcePrestoParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourcePrestoParametersPtrInput interface {
	pulumi.Input

	ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput
	ToDataSourcePrestoParametersPtrOutputWithContext(context.Context) DataSourcePrestoParametersPtrOutput
}

type dataSourcePrestoParametersPtrType DataSourcePrestoParametersArgs

func DataSourcePrestoParametersPtr(v *DataSourcePrestoParametersArgs) DataSourcePrestoParametersPtrInput {
	return (*dataSourcePrestoParametersPtrType)(v)
}

func (*dataSourcePrestoParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePrestoParameters)(nil)).Elem()
}

func (i *dataSourcePrestoParametersPtrType) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return i.ToDataSourcePrestoParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourcePrestoParametersPtrType) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrestoParametersPtrOutput)
}

// <p>The parameters for Presto.</p>
type DataSourcePrestoParametersOutput struct{ *pulumi.OutputState }

func (DataSourcePrestoParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePrestoParameters)(nil)).Elem()
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersOutput() DataSourcePrestoParametersOutput {
	return o
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersOutputWithContext(ctx context.Context) DataSourcePrestoParametersOutput {
	return o
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return o.ToDataSourcePrestoParametersPtrOutputWithContext(context.Background())
}

func (o DataSourcePrestoParametersOutput) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourcePrestoParameters) *DataSourcePrestoParameters {
		return &v
	}).(DataSourcePrestoParametersPtrOutput)
}

// <p>Catalog.</p>
func (o DataSourcePrestoParametersOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePrestoParameters) string { return v.Catalog }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourcePrestoParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePrestoParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourcePrestoParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourcePrestoParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourcePrestoParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourcePrestoParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcePrestoParameters)(nil)).Elem()
}

func (o DataSourcePrestoParametersPtrOutput) ToDataSourcePrestoParametersPtrOutput() DataSourcePrestoParametersPtrOutput {
	return o
}

func (o DataSourcePrestoParametersPtrOutput) ToDataSourcePrestoParametersPtrOutputWithContext(ctx context.Context) DataSourcePrestoParametersPtrOutput {
	return o
}

func (o DataSourcePrestoParametersPtrOutput) Elem() DataSourcePrestoParametersOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) DataSourcePrestoParameters {
		if v != nil {
			return *v
		}
		var ret DataSourcePrestoParameters
		return ret
	}).(DataSourcePrestoParametersOutput)
}

// <p>Catalog.</p>
func (o DataSourcePrestoParametersPtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Catalog
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourcePrestoParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourcePrestoParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourcePrestoParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The parameters for Amazon RDS.</p>
type DataSourceRdsParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Instance ID.</p>
	InstanceId string `pulumi:"instanceId"`
}

// DataSourceRdsParametersInput is an input type that accepts DataSourceRdsParametersArgs and DataSourceRdsParametersOutput values.
// You can construct a concrete instance of `DataSourceRdsParametersInput` via:
//
//	DataSourceRdsParametersArgs{...}
type DataSourceRdsParametersInput interface {
	pulumi.Input

	ToDataSourceRdsParametersOutput() DataSourceRdsParametersOutput
	ToDataSourceRdsParametersOutputWithContext(context.Context) DataSourceRdsParametersOutput
}

// <p>The parameters for Amazon RDS.</p>
type DataSourceRdsParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Instance ID.</p>
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
}

func (DataSourceRdsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRdsParameters)(nil)).Elem()
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersOutput() DataSourceRdsParametersOutput {
	return i.ToDataSourceRdsParametersOutputWithContext(context.Background())
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersOutputWithContext(ctx context.Context) DataSourceRdsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRdsParametersOutput)
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return i.ToDataSourceRdsParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceRdsParametersArgs) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRdsParametersOutput).ToDataSourceRdsParametersPtrOutputWithContext(ctx)
}

// DataSourceRdsParametersPtrInput is an input type that accepts DataSourceRdsParametersArgs, DataSourceRdsParametersPtr and DataSourceRdsParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceRdsParametersPtrInput` via:
//
//	        DataSourceRdsParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceRdsParametersPtrInput interface {
	pulumi.Input

	ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput
	ToDataSourceRdsParametersPtrOutputWithContext(context.Context) DataSourceRdsParametersPtrOutput
}

type dataSourceRdsParametersPtrType DataSourceRdsParametersArgs

func DataSourceRdsParametersPtr(v *DataSourceRdsParametersArgs) DataSourceRdsParametersPtrInput {
	return (*dataSourceRdsParametersPtrType)(v)
}

func (*dataSourceRdsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRdsParameters)(nil)).Elem()
}

func (i *dataSourceRdsParametersPtrType) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return i.ToDataSourceRdsParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceRdsParametersPtrType) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRdsParametersPtrOutput)
}

// <p>The parameters for Amazon RDS.</p>
type DataSourceRdsParametersOutput struct{ *pulumi.OutputState }

func (DataSourceRdsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRdsParameters)(nil)).Elem()
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersOutput() DataSourceRdsParametersOutput {
	return o
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersOutputWithContext(ctx context.Context) DataSourceRdsParametersOutput {
	return o
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return o.ToDataSourceRdsParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceRdsParametersOutput) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceRdsParameters) *DataSourceRdsParameters {
		return &v
	}).(DataSourceRdsParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceRdsParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceRdsParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Instance ID.</p>
func (o DataSourceRdsParametersOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceRdsParameters) string { return v.InstanceId }).(pulumi.StringOutput)
}

type DataSourceRdsParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceRdsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRdsParameters)(nil)).Elem()
}

func (o DataSourceRdsParametersPtrOutput) ToDataSourceRdsParametersPtrOutput() DataSourceRdsParametersPtrOutput {
	return o
}

func (o DataSourceRdsParametersPtrOutput) ToDataSourceRdsParametersPtrOutputWithContext(ctx context.Context) DataSourceRdsParametersPtrOutput {
	return o
}

func (o DataSourceRdsParametersPtrOutput) Elem() DataSourceRdsParametersOutput {
	return o.ApplyT(func(v *DataSourceRdsParameters) DataSourceRdsParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceRdsParameters
		return ret
	}).(DataSourceRdsParametersOutput)
}

// <p>Database.</p>
func (o DataSourceRdsParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRdsParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Instance ID.</p>
func (o DataSourceRdsParametersPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRdsParameters) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// <p>A structure that grants Amazon QuickSight access to your cluster and make a call to the <code>redshift:GetClusterCredentials</code> API. For more information on the <code>redshift:GetClusterCredentials</code> API, see <a href="https://docs.aws.amazon.com/redshift/latest/APIReference/API_GetClusterCredentials.html">
//
//	   <code>GetClusterCredentials</code>
//	</a>.</p>
type DataSourceRedshiftIamParameters struct {
	// <p>Automatically creates a database user. If your database doesn't have a <code>DatabaseUser</code>, set this parameter to <code>True</code>. If there is no <code>DatabaseUser</code>, Amazon QuickSight can't connect to your cluster. The <code>RoleArn</code> that you use for this operation must grant access to <code>redshift:CreateClusterUser</code> to successfully create the user.</p>
	AutoCreateDatabaseUser *bool `pulumi:"autoCreateDatabaseUser"`
	// <p>A list of groups whose permissions will be granted to Amazon QuickSight to access the cluster. These permissions are combined with the permissions granted to Amazon QuickSight by the <code>DatabaseUser</code>. If you choose to include this parameter, the <code>RoleArn</code> must grant access to <code>redshift:JoinGroup</code>.</p>
	DatabaseGroups []string `pulumi:"databaseGroups"`
	// <p>The user whose permissions and group memberships will be used by Amazon QuickSight to access the cluster. If this user already exists in your database, Amazon QuickSight is granted the same permissions that the user has. If the user doesn't exist, set the value of <code>AutoCreateDatabaseUser</code> to <code>True</code> to create a new user with PUBLIC permissions.</p>
	DatabaseUser *string `pulumi:"databaseUser"`
	// <p>Use the <code>RoleArn</code> structure to allow Amazon QuickSight to call <code>redshift:GetClusterCredentials</code> on your cluster. The calling principal must have <code>iam:PassRole</code> access to pass the role to Amazon QuickSight. The role's trust policy must allow the Amazon QuickSight service principal to assume the role.</p>
	RoleArn string `pulumi:"roleArn"`
}

// DataSourceRedshiftIamParametersInput is an input type that accepts DataSourceRedshiftIamParametersArgs and DataSourceRedshiftIamParametersOutput values.
// You can construct a concrete instance of `DataSourceRedshiftIamParametersInput` via:
//
//	DataSourceRedshiftIamParametersArgs{...}
type DataSourceRedshiftIamParametersInput interface {
	pulumi.Input

	ToDataSourceRedshiftIamParametersOutput() DataSourceRedshiftIamParametersOutput
	ToDataSourceRedshiftIamParametersOutputWithContext(context.Context) DataSourceRedshiftIamParametersOutput
}

// <p>A structure that grants Amazon QuickSight access to your cluster and make a call to the <code>redshift:GetClusterCredentials</code> API. For more information on the <code>redshift:GetClusterCredentials</code> API, see <a href="https://docs.aws.amazon.com/redshift/latest/APIReference/API_GetClusterCredentials.html">
//
//	   <code>GetClusterCredentials</code>
//	</a>.</p>
type DataSourceRedshiftIamParametersArgs struct {
	// <p>Automatically creates a database user. If your database doesn't have a <code>DatabaseUser</code>, set this parameter to <code>True</code>. If there is no <code>DatabaseUser</code>, Amazon QuickSight can't connect to your cluster. The <code>RoleArn</code> that you use for this operation must grant access to <code>redshift:CreateClusterUser</code> to successfully create the user.</p>
	AutoCreateDatabaseUser pulumi.BoolPtrInput `pulumi:"autoCreateDatabaseUser"`
	// <p>A list of groups whose permissions will be granted to Amazon QuickSight to access the cluster. These permissions are combined with the permissions granted to Amazon QuickSight by the <code>DatabaseUser</code>. If you choose to include this parameter, the <code>RoleArn</code> must grant access to <code>redshift:JoinGroup</code>.</p>
	DatabaseGroups pulumi.StringArrayInput `pulumi:"databaseGroups"`
	// <p>The user whose permissions and group memberships will be used by Amazon QuickSight to access the cluster. If this user already exists in your database, Amazon QuickSight is granted the same permissions that the user has. If the user doesn't exist, set the value of <code>AutoCreateDatabaseUser</code> to <code>True</code> to create a new user with PUBLIC permissions.</p>
	DatabaseUser pulumi.StringPtrInput `pulumi:"databaseUser"`
	// <p>Use the <code>RoleArn</code> structure to allow Amazon QuickSight to call <code>redshift:GetClusterCredentials</code> on your cluster. The calling principal must have <code>iam:PassRole</code> access to pass the role to Amazon QuickSight. The role's trust policy must allow the Amazon QuickSight service principal to assume the role.</p>
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (DataSourceRedshiftIamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRedshiftIamParameters)(nil)).Elem()
}

func (i DataSourceRedshiftIamParametersArgs) ToDataSourceRedshiftIamParametersOutput() DataSourceRedshiftIamParametersOutput {
	return i.ToDataSourceRedshiftIamParametersOutputWithContext(context.Background())
}

func (i DataSourceRedshiftIamParametersArgs) ToDataSourceRedshiftIamParametersOutputWithContext(ctx context.Context) DataSourceRedshiftIamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftIamParametersOutput)
}

func (i DataSourceRedshiftIamParametersArgs) ToDataSourceRedshiftIamParametersPtrOutput() DataSourceRedshiftIamParametersPtrOutput {
	return i.ToDataSourceRedshiftIamParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceRedshiftIamParametersArgs) ToDataSourceRedshiftIamParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftIamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftIamParametersOutput).ToDataSourceRedshiftIamParametersPtrOutputWithContext(ctx)
}

// DataSourceRedshiftIamParametersPtrInput is an input type that accepts DataSourceRedshiftIamParametersArgs, DataSourceRedshiftIamParametersPtr and DataSourceRedshiftIamParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceRedshiftIamParametersPtrInput` via:
//
//	        DataSourceRedshiftIamParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceRedshiftIamParametersPtrInput interface {
	pulumi.Input

	ToDataSourceRedshiftIamParametersPtrOutput() DataSourceRedshiftIamParametersPtrOutput
	ToDataSourceRedshiftIamParametersPtrOutputWithContext(context.Context) DataSourceRedshiftIamParametersPtrOutput
}

type dataSourceRedshiftIamParametersPtrType DataSourceRedshiftIamParametersArgs

func DataSourceRedshiftIamParametersPtr(v *DataSourceRedshiftIamParametersArgs) DataSourceRedshiftIamParametersPtrInput {
	return (*dataSourceRedshiftIamParametersPtrType)(v)
}

func (*dataSourceRedshiftIamParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRedshiftIamParameters)(nil)).Elem()
}

func (i *dataSourceRedshiftIamParametersPtrType) ToDataSourceRedshiftIamParametersPtrOutput() DataSourceRedshiftIamParametersPtrOutput {
	return i.ToDataSourceRedshiftIamParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceRedshiftIamParametersPtrType) ToDataSourceRedshiftIamParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftIamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftIamParametersPtrOutput)
}

// <p>A structure that grants Amazon QuickSight access to your cluster and make a call to the <code>redshift:GetClusterCredentials</code> API. For more information on the <code>redshift:GetClusterCredentials</code> API, see <a href="https://docs.aws.amazon.com/redshift/latest/APIReference/API_GetClusterCredentials.html">
//
//	   <code>GetClusterCredentials</code>
//	</a>.</p>
type DataSourceRedshiftIamParametersOutput struct{ *pulumi.OutputState }

func (DataSourceRedshiftIamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRedshiftIamParameters)(nil)).Elem()
}

func (o DataSourceRedshiftIamParametersOutput) ToDataSourceRedshiftIamParametersOutput() DataSourceRedshiftIamParametersOutput {
	return o
}

func (o DataSourceRedshiftIamParametersOutput) ToDataSourceRedshiftIamParametersOutputWithContext(ctx context.Context) DataSourceRedshiftIamParametersOutput {
	return o
}

func (o DataSourceRedshiftIamParametersOutput) ToDataSourceRedshiftIamParametersPtrOutput() DataSourceRedshiftIamParametersPtrOutput {
	return o.ToDataSourceRedshiftIamParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceRedshiftIamParametersOutput) ToDataSourceRedshiftIamParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftIamParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceRedshiftIamParameters) *DataSourceRedshiftIamParameters {
		return &v
	}).(DataSourceRedshiftIamParametersPtrOutput)
}

// <p>Automatically creates a database user. If your database doesn't have a <code>DatabaseUser</code>, set this parameter to <code>True</code>. If there is no <code>DatabaseUser</code>, Amazon QuickSight can't connect to your cluster. The <code>RoleArn</code> that you use for this operation must grant access to <code>redshift:CreateClusterUser</code> to successfully create the user.</p>
func (o DataSourceRedshiftIamParametersOutput) AutoCreateDatabaseUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftIamParameters) *bool { return v.AutoCreateDatabaseUser }).(pulumi.BoolPtrOutput)
}

// <p>A list of groups whose permissions will be granted to Amazon QuickSight to access the cluster. These permissions are combined with the permissions granted to Amazon QuickSight by the <code>DatabaseUser</code>. If you choose to include this parameter, the <code>RoleArn</code> must grant access to <code>redshift:JoinGroup</code>.</p>
func (o DataSourceRedshiftIamParametersOutput) DatabaseGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSourceRedshiftIamParameters) []string { return v.DatabaseGroups }).(pulumi.StringArrayOutput)
}

// <p>The user whose permissions and group memberships will be used by Amazon QuickSight to access the cluster. If this user already exists in your database, Amazon QuickSight is granted the same permissions that the user has. If the user doesn't exist, set the value of <code>AutoCreateDatabaseUser</code> to <code>True</code> to create a new user with PUBLIC permissions.</p>
func (o DataSourceRedshiftIamParametersOutput) DatabaseUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftIamParameters) *string { return v.DatabaseUser }).(pulumi.StringPtrOutput)
}

// <p>Use the <code>RoleArn</code> structure to allow Amazon QuickSight to call <code>redshift:GetClusterCredentials</code> on your cluster. The calling principal must have <code>iam:PassRole</code> access to pass the role to Amazon QuickSight. The role's trust policy must allow the Amazon QuickSight service principal to assume the role.</p>
func (o DataSourceRedshiftIamParametersOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceRedshiftIamParameters) string { return v.RoleArn }).(pulumi.StringOutput)
}

type DataSourceRedshiftIamParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceRedshiftIamParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRedshiftIamParameters)(nil)).Elem()
}

func (o DataSourceRedshiftIamParametersPtrOutput) ToDataSourceRedshiftIamParametersPtrOutput() DataSourceRedshiftIamParametersPtrOutput {
	return o
}

func (o DataSourceRedshiftIamParametersPtrOutput) ToDataSourceRedshiftIamParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftIamParametersPtrOutput {
	return o
}

func (o DataSourceRedshiftIamParametersPtrOutput) Elem() DataSourceRedshiftIamParametersOutput {
	return o.ApplyT(func(v *DataSourceRedshiftIamParameters) DataSourceRedshiftIamParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceRedshiftIamParameters
		return ret
	}).(DataSourceRedshiftIamParametersOutput)
}

// <p>Automatically creates a database user. If your database doesn't have a <code>DatabaseUser</code>, set this parameter to <code>True</code>. If there is no <code>DatabaseUser</code>, Amazon QuickSight can't connect to your cluster. The <code>RoleArn</code> that you use for this operation must grant access to <code>redshift:CreateClusterUser</code> to successfully create the user.</p>
func (o DataSourceRedshiftIamParametersPtrOutput) AutoCreateDatabaseUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftIamParameters) *bool {
		if v == nil {
			return nil
		}
		return v.AutoCreateDatabaseUser
	}).(pulumi.BoolPtrOutput)
}

// <p>A list of groups whose permissions will be granted to Amazon QuickSight to access the cluster. These permissions are combined with the permissions granted to Amazon QuickSight by the <code>DatabaseUser</code>. If you choose to include this parameter, the <code>RoleArn</code> must grant access to <code>redshift:JoinGroup</code>.</p>
func (o DataSourceRedshiftIamParametersPtrOutput) DatabaseGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataSourceRedshiftIamParameters) []string {
		if v == nil {
			return nil
		}
		return v.DatabaseGroups
	}).(pulumi.StringArrayOutput)
}

// <p>The user whose permissions and group memberships will be used by Amazon QuickSight to access the cluster. If this user already exists in your database, Amazon QuickSight is granted the same permissions that the user has. If the user doesn't exist, set the value of <code>AutoCreateDatabaseUser</code> to <code>True</code> to create a new user with PUBLIC permissions.</p>
func (o DataSourceRedshiftIamParametersPtrOutput) DatabaseUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftIamParameters) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseUser
	}).(pulumi.StringPtrOutput)
}

// <p>Use the <code>RoleArn</code> structure to allow Amazon QuickSight to call <code>redshift:GetClusterCredentials</code> on your cluster. The calling principal must have <code>iam:PassRole</code> access to pass the role to Amazon QuickSight. The role's trust policy must allow the Amazon QuickSight service principal to assume the role.</p>
func (o DataSourceRedshiftIamParametersPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftIamParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if
//
//	<code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
type DataSourceRedshiftParameters struct {
	// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
	//             provided.</p>
	ClusterId *string `pulumi:"clusterId"`
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
	Host *string `pulumi:"host"`
	// An optional parameter that uses IAM authentication to grant Amazon QuickSight access to your cluster. This parameter can be used instead of [DataSourceCredentials](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSourceCredentials.html) .
	IamParameters *DataSourceRedshiftIamParameters `pulumi:"iamParameters"`
	// An optional parameter that configures IAM Identity Center authentication to grant Amazon QuickSight access to your cluster.
	//
	// This parameter can only be specified if your Amazon QuickSight account is configured with IAM Identity Center.
	IdentityCenterConfiguration *DataSourceIdentityCenterConfiguration `pulumi:"identityCenterConfiguration"`
	// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
	Port *float64 `pulumi:"port"`
}

// DataSourceRedshiftParametersInput is an input type that accepts DataSourceRedshiftParametersArgs and DataSourceRedshiftParametersOutput values.
// You can construct a concrete instance of `DataSourceRedshiftParametersInput` via:
//
//	DataSourceRedshiftParametersArgs{...}
type DataSourceRedshiftParametersInput interface {
	pulumi.Input

	ToDataSourceRedshiftParametersOutput() DataSourceRedshiftParametersOutput
	ToDataSourceRedshiftParametersOutputWithContext(context.Context) DataSourceRedshiftParametersOutput
}

// <p>The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if
//
//	<code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
type DataSourceRedshiftParametersArgs struct {
	// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
	//             provided.</p>
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
	Host pulumi.StringPtrInput `pulumi:"host"`
	// An optional parameter that uses IAM authentication to grant Amazon QuickSight access to your cluster. This parameter can be used instead of [DataSourceCredentials](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSourceCredentials.html) .
	IamParameters DataSourceRedshiftIamParametersPtrInput `pulumi:"iamParameters"`
	// An optional parameter that configures IAM Identity Center authentication to grant Amazon QuickSight access to your cluster.
	//
	// This parameter can only be specified if your Amazon QuickSight account is configured with IAM Identity Center.
	IdentityCenterConfiguration DataSourceIdentityCenterConfigurationPtrInput `pulumi:"identityCenterConfiguration"`
	// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
	Port pulumi.Float64PtrInput `pulumi:"port"`
}

func (DataSourceRedshiftParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRedshiftParameters)(nil)).Elem()
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersOutput() DataSourceRedshiftParametersOutput {
	return i.ToDataSourceRedshiftParametersOutputWithContext(context.Background())
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersOutputWithContext(ctx context.Context) DataSourceRedshiftParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftParametersOutput)
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return i.ToDataSourceRedshiftParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceRedshiftParametersArgs) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftParametersOutput).ToDataSourceRedshiftParametersPtrOutputWithContext(ctx)
}

// DataSourceRedshiftParametersPtrInput is an input type that accepts DataSourceRedshiftParametersArgs, DataSourceRedshiftParametersPtr and DataSourceRedshiftParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceRedshiftParametersPtrInput` via:
//
//	        DataSourceRedshiftParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceRedshiftParametersPtrInput interface {
	pulumi.Input

	ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput
	ToDataSourceRedshiftParametersPtrOutputWithContext(context.Context) DataSourceRedshiftParametersPtrOutput
}

type dataSourceRedshiftParametersPtrType DataSourceRedshiftParametersArgs

func DataSourceRedshiftParametersPtr(v *DataSourceRedshiftParametersArgs) DataSourceRedshiftParametersPtrInput {
	return (*dataSourceRedshiftParametersPtrType)(v)
}

func (*dataSourceRedshiftParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRedshiftParameters)(nil)).Elem()
}

func (i *dataSourceRedshiftParametersPtrType) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return i.ToDataSourceRedshiftParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceRedshiftParametersPtrType) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceRedshiftParametersPtrOutput)
}

// <p>The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if
//
//	<code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
type DataSourceRedshiftParametersOutput struct{ *pulumi.OutputState }

func (DataSourceRedshiftParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceRedshiftParameters)(nil)).Elem()
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersOutput() DataSourceRedshiftParametersOutput {
	return o
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersOutputWithContext(ctx context.Context) DataSourceRedshiftParametersOutput {
	return o
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return o.ToDataSourceRedshiftParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceRedshiftParametersOutput) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceRedshiftParameters) *DataSourceRedshiftParameters {
		return &v
	}).(DataSourceRedshiftParametersPtrOutput)
}

// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
//
//	provided.</p>
func (o DataSourceRedshiftParametersOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// <p>Database.</p>
func (o DataSourceRedshiftParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// An optional parameter that uses IAM authentication to grant Amazon QuickSight access to your cluster. This parameter can be used instead of [DataSourceCredentials](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSourceCredentials.html) .
func (o DataSourceRedshiftParametersOutput) IamParameters() DataSourceRedshiftIamParametersPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *DataSourceRedshiftIamParameters { return v.IamParameters }).(DataSourceRedshiftIamParametersPtrOutput)
}

// An optional parameter that configures IAM Identity Center authentication to grant Amazon QuickSight access to your cluster.
//
// This parameter can only be specified if your Amazon QuickSight account is configured with IAM Identity Center.
func (o DataSourceRedshiftParametersOutput) IdentityCenterConfiguration() DataSourceIdentityCenterConfigurationPtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *DataSourceIdentityCenterConfiguration {
		return v.IdentityCenterConfiguration
	}).(DataSourceIdentityCenterConfigurationPtrOutput)
}

// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DataSourceRedshiftParameters) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

type DataSourceRedshiftParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceRedshiftParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceRedshiftParameters)(nil)).Elem()
}

func (o DataSourceRedshiftParametersPtrOutput) ToDataSourceRedshiftParametersPtrOutput() DataSourceRedshiftParametersPtrOutput {
	return o
}

func (o DataSourceRedshiftParametersPtrOutput) ToDataSourceRedshiftParametersPtrOutputWithContext(ctx context.Context) DataSourceRedshiftParametersPtrOutput {
	return o
}

func (o DataSourceRedshiftParametersPtrOutput) Elem() DataSourceRedshiftParametersOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) DataSourceRedshiftParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceRedshiftParameters
		return ret
	}).(DataSourceRedshiftParametersOutput)
}

// <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
//
//	provided.</p>
func (o DataSourceRedshiftParametersPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// <p>Database.</p>
func (o DataSourceRedshiftParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// An optional parameter that uses IAM authentication to grant Amazon QuickSight access to your cluster. This parameter can be used instead of [DataSourceCredentials](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSourceCredentials.html) .
func (o DataSourceRedshiftParametersPtrOutput) IamParameters() DataSourceRedshiftIamParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *DataSourceRedshiftIamParameters {
		if v == nil {
			return nil
		}
		return v.IamParameters
	}).(DataSourceRedshiftIamParametersPtrOutput)
}

// An optional parameter that configures IAM Identity Center authentication to grant Amazon QuickSight access to your cluster.
//
// This parameter can only be specified if your Amazon QuickSight account is configured with IAM Identity Center.
func (o DataSourceRedshiftParametersPtrOutput) IdentityCenterConfiguration() DataSourceIdentityCenterConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *DataSourceIdentityCenterConfiguration {
		if v == nil {
			return nil
		}
		return v.IdentityCenterConfiguration
	}).(DataSourceIdentityCenterConfigurationPtrOutput)
}

// <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
func (o DataSourceRedshiftParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceRedshiftParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Permission for the resource.</p>
type DataSourceResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string  `pulumi:"principal"`
	Resource  *string `pulumi:"resource"`
}

// DataSourceResourcePermissionInput is an input type that accepts DataSourceResourcePermissionArgs and DataSourceResourcePermissionOutput values.
// You can construct a concrete instance of `DataSourceResourcePermissionInput` via:
//
//	DataSourceResourcePermissionArgs{...}
type DataSourceResourcePermissionInput interface {
	pulumi.Input

	ToDataSourceResourcePermissionOutput() DataSourceResourcePermissionOutput
	ToDataSourceResourcePermissionOutputWithContext(context.Context) DataSourceResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type DataSourceResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput    `pulumi:"principal"`
	Resource  pulumi.StringPtrInput `pulumi:"resource"`
}

func (DataSourceResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceResourcePermission)(nil)).Elem()
}

func (i DataSourceResourcePermissionArgs) ToDataSourceResourcePermissionOutput() DataSourceResourcePermissionOutput {
	return i.ToDataSourceResourcePermissionOutputWithContext(context.Background())
}

func (i DataSourceResourcePermissionArgs) ToDataSourceResourcePermissionOutputWithContext(ctx context.Context) DataSourceResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceResourcePermissionOutput)
}

// DataSourceResourcePermissionArrayInput is an input type that accepts DataSourceResourcePermissionArray and DataSourceResourcePermissionArrayOutput values.
// You can construct a concrete instance of `DataSourceResourcePermissionArrayInput` via:
//
//	DataSourceResourcePermissionArray{ DataSourceResourcePermissionArgs{...} }
type DataSourceResourcePermissionArrayInput interface {
	pulumi.Input

	ToDataSourceResourcePermissionArrayOutput() DataSourceResourcePermissionArrayOutput
	ToDataSourceResourcePermissionArrayOutputWithContext(context.Context) DataSourceResourcePermissionArrayOutput
}

type DataSourceResourcePermissionArray []DataSourceResourcePermissionInput

func (DataSourceResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceResourcePermission)(nil)).Elem()
}

func (i DataSourceResourcePermissionArray) ToDataSourceResourcePermissionArrayOutput() DataSourceResourcePermissionArrayOutput {
	return i.ToDataSourceResourcePermissionArrayOutputWithContext(context.Background())
}

func (i DataSourceResourcePermissionArray) ToDataSourceResourcePermissionArrayOutputWithContext(ctx context.Context) DataSourceResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type DataSourceResourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSourceResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceResourcePermission)(nil)).Elem()
}

func (o DataSourceResourcePermissionOutput) ToDataSourceResourcePermissionOutput() DataSourceResourcePermissionOutput {
	return o
}

func (o DataSourceResourcePermissionOutput) ToDataSourceResourcePermissionOutputWithContext(ctx context.Context) DataSourceResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o DataSourceResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSourceResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//
//	   following:</p>
//	<ul>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
//	           ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
//	           (This is less common.) </p>
//	   </li>
//	</ul>
func (o DataSourceResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

func (o DataSourceResourcePermissionOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceResourcePermission) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type DataSourceResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSourceResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceResourcePermission)(nil)).Elem()
}

func (o DataSourceResourcePermissionArrayOutput) ToDataSourceResourcePermissionArrayOutput() DataSourceResourcePermissionArrayOutput {
	return o
}

func (o DataSourceResourcePermissionArrayOutput) ToDataSourceResourcePermissionArrayOutputWithContext(ctx context.Context) DataSourceResourcePermissionArrayOutput {
	return o
}

func (o DataSourceResourcePermissionArrayOutput) Index(i pulumi.IntInput) DataSourceResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceResourcePermission {
		return vs[0].([]DataSourceResourcePermission)[vs[1].(int)]
	}).(DataSourceResourcePermissionOutput)
}

// <p>The parameters for S3.</p>
type DataSourceS3Parameters struct {
	// Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.
	ManifestFileLocation DataSourceManifestFileLocation `pulumi:"manifestFileLocation"`
	// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
	RoleArn *string `pulumi:"roleArn"`
}

// DataSourceS3ParametersInput is an input type that accepts DataSourceS3ParametersArgs and DataSourceS3ParametersOutput values.
// You can construct a concrete instance of `DataSourceS3ParametersInput` via:
//
//	DataSourceS3ParametersArgs{...}
type DataSourceS3ParametersInput interface {
	pulumi.Input

	ToDataSourceS3ParametersOutput() DataSourceS3ParametersOutput
	ToDataSourceS3ParametersOutputWithContext(context.Context) DataSourceS3ParametersOutput
}

// <p>The parameters for S3.</p>
type DataSourceS3ParametersArgs struct {
	// Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.
	ManifestFileLocation DataSourceManifestFileLocationInput `pulumi:"manifestFileLocation"`
	// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
}

func (DataSourceS3ParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceS3Parameters)(nil)).Elem()
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersOutput() DataSourceS3ParametersOutput {
	return i.ToDataSourceS3ParametersOutputWithContext(context.Background())
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersOutputWithContext(ctx context.Context) DataSourceS3ParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceS3ParametersOutput)
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return i.ToDataSourceS3ParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceS3ParametersArgs) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceS3ParametersOutput).ToDataSourceS3ParametersPtrOutputWithContext(ctx)
}

// DataSourceS3ParametersPtrInput is an input type that accepts DataSourceS3ParametersArgs, DataSourceS3ParametersPtr and DataSourceS3ParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceS3ParametersPtrInput` via:
//
//	        DataSourceS3ParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceS3ParametersPtrInput interface {
	pulumi.Input

	ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput
	ToDataSourceS3ParametersPtrOutputWithContext(context.Context) DataSourceS3ParametersPtrOutput
}

type dataSourceS3ParametersPtrType DataSourceS3ParametersArgs

func DataSourceS3ParametersPtr(v *DataSourceS3ParametersArgs) DataSourceS3ParametersPtrInput {
	return (*dataSourceS3ParametersPtrType)(v)
}

func (*dataSourceS3ParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceS3Parameters)(nil)).Elem()
}

func (i *dataSourceS3ParametersPtrType) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return i.ToDataSourceS3ParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceS3ParametersPtrType) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceS3ParametersPtrOutput)
}

// <p>The parameters for S3.</p>
type DataSourceS3ParametersOutput struct{ *pulumi.OutputState }

func (DataSourceS3ParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceS3Parameters)(nil)).Elem()
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersOutput() DataSourceS3ParametersOutput {
	return o
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersOutputWithContext(ctx context.Context) DataSourceS3ParametersOutput {
	return o
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return o.ToDataSourceS3ParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceS3ParametersOutput) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceS3Parameters) *DataSourceS3Parameters {
		return &v
	}).(DataSourceS3ParametersPtrOutput)
}

// Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.
func (o DataSourceS3ParametersOutput) ManifestFileLocation() DataSourceManifestFileLocationOutput {
	return o.ApplyT(func(v DataSourceS3Parameters) DataSourceManifestFileLocation { return v.ManifestFileLocation }).(DataSourceManifestFileLocationOutput)
}

// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
func (o DataSourceS3ParametersOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceS3Parameters) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

type DataSourceS3ParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceS3ParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceS3Parameters)(nil)).Elem()
}

func (o DataSourceS3ParametersPtrOutput) ToDataSourceS3ParametersPtrOutput() DataSourceS3ParametersPtrOutput {
	return o
}

func (o DataSourceS3ParametersPtrOutput) ToDataSourceS3ParametersPtrOutputWithContext(ctx context.Context) DataSourceS3ParametersPtrOutput {
	return o
}

func (o DataSourceS3ParametersPtrOutput) Elem() DataSourceS3ParametersOutput {
	return o.ApplyT(func(v *DataSourceS3Parameters) DataSourceS3Parameters {
		if v != nil {
			return *v
		}
		var ret DataSourceS3Parameters
		return ret
	}).(DataSourceS3ParametersOutput)
}

// Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.
func (o DataSourceS3ParametersPtrOutput) ManifestFileLocation() DataSourceManifestFileLocationPtrOutput {
	return o.ApplyT(func(v *DataSourceS3Parameters) *DataSourceManifestFileLocation {
		if v == nil {
			return nil
		}
		return &v.ManifestFileLocation
	}).(DataSourceManifestFileLocationPtrOutput)
}

// <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
func (o DataSourceS3ParametersPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceS3Parameters) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters for Snowflake.</p>
type DataSourceSnowflakeParameters struct {
	// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
	AuthenticationType *DataSourceAuthenticationType `pulumi:"authenticationType"`
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// The database access control role.
	DatabaseAccessControlRole *string `pulumi:"databaseAccessControlRole"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Snowflake.
	OAuthParameters *DataSourceOAuthParameters `pulumi:"oAuthParameters"`
	// <p>Warehouse.</p>
	Warehouse string `pulumi:"warehouse"`
}

// DataSourceSnowflakeParametersInput is an input type that accepts DataSourceSnowflakeParametersArgs and DataSourceSnowflakeParametersOutput values.
// You can construct a concrete instance of `DataSourceSnowflakeParametersInput` via:
//
//	DataSourceSnowflakeParametersArgs{...}
type DataSourceSnowflakeParametersInput interface {
	pulumi.Input

	ToDataSourceSnowflakeParametersOutput() DataSourceSnowflakeParametersOutput
	ToDataSourceSnowflakeParametersOutputWithContext(context.Context) DataSourceSnowflakeParametersOutput
}

// <p>The parameters for Snowflake.</p>
type DataSourceSnowflakeParametersArgs struct {
	// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
	AuthenticationType DataSourceAuthenticationTypePtrInput `pulumi:"authenticationType"`
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// The database access control role.
	DatabaseAccessControlRole pulumi.StringPtrInput `pulumi:"databaseAccessControlRole"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Snowflake.
	OAuthParameters DataSourceOAuthParametersPtrInput `pulumi:"oAuthParameters"`
	// <p>Warehouse.</p>
	Warehouse pulumi.StringInput `pulumi:"warehouse"`
}

func (DataSourceSnowflakeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSnowflakeParameters)(nil)).Elem()
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersOutput() DataSourceSnowflakeParametersOutput {
	return i.ToDataSourceSnowflakeParametersOutputWithContext(context.Background())
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSnowflakeParametersOutput)
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return i.ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceSnowflakeParametersArgs) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSnowflakeParametersOutput).ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx)
}

// DataSourceSnowflakeParametersPtrInput is an input type that accepts DataSourceSnowflakeParametersArgs, DataSourceSnowflakeParametersPtr and DataSourceSnowflakeParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceSnowflakeParametersPtrInput` via:
//
//	        DataSourceSnowflakeParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceSnowflakeParametersPtrInput interface {
	pulumi.Input

	ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput
	ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Context) DataSourceSnowflakeParametersPtrOutput
}

type dataSourceSnowflakeParametersPtrType DataSourceSnowflakeParametersArgs

func DataSourceSnowflakeParametersPtr(v *DataSourceSnowflakeParametersArgs) DataSourceSnowflakeParametersPtrInput {
	return (*dataSourceSnowflakeParametersPtrType)(v)
}

func (*dataSourceSnowflakeParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSnowflakeParameters)(nil)).Elem()
}

func (i *dataSourceSnowflakeParametersPtrType) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return i.ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceSnowflakeParametersPtrType) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSnowflakeParametersPtrOutput)
}

// <p>The parameters for Snowflake.</p>
type DataSourceSnowflakeParametersOutput struct{ *pulumi.OutputState }

func (DataSourceSnowflakeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSnowflakeParameters)(nil)).Elem()
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersOutput() DataSourceSnowflakeParametersOutput {
	return o
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersOutput {
	return o
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return o.ToDataSourceSnowflakeParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceSnowflakeParametersOutput) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSnowflakeParameters) *DataSourceSnowflakeParameters {
		return &v
	}).(DataSourceSnowflakeParametersPtrOutput)
}

// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
func (o DataSourceSnowflakeParametersOutput) AuthenticationType() DataSourceAuthenticationTypePtrOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) *DataSourceAuthenticationType { return v.AuthenticationType }).(DataSourceAuthenticationTypePtrOutput)
}

// <p>Database.</p>
func (o DataSourceSnowflakeParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) string { return v.Database }).(pulumi.StringOutput)
}

// The database access control role.
func (o DataSourceSnowflakeParametersOutput) DatabaseAccessControlRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) *string { return v.DatabaseAccessControlRole }).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceSnowflakeParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) string { return v.Host }).(pulumi.StringOutput)
}

// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Snowflake.
func (o DataSourceSnowflakeParametersOutput) OAuthParameters() DataSourceOAuthParametersPtrOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) *DataSourceOAuthParameters { return v.OAuthParameters }).(DataSourceOAuthParametersPtrOutput)
}

// <p>Warehouse.</p>
func (o DataSourceSnowflakeParametersOutput) Warehouse() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSnowflakeParameters) string { return v.Warehouse }).(pulumi.StringOutput)
}

type DataSourceSnowflakeParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSnowflakeParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSnowflakeParameters)(nil)).Elem()
}

func (o DataSourceSnowflakeParametersPtrOutput) ToDataSourceSnowflakeParametersPtrOutput() DataSourceSnowflakeParametersPtrOutput {
	return o
}

func (o DataSourceSnowflakeParametersPtrOutput) ToDataSourceSnowflakeParametersPtrOutputWithContext(ctx context.Context) DataSourceSnowflakeParametersPtrOutput {
	return o
}

func (o DataSourceSnowflakeParametersPtrOutput) Elem() DataSourceSnowflakeParametersOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) DataSourceSnowflakeParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceSnowflakeParameters
		return ret
	}).(DataSourceSnowflakeParametersOutput)
}

// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
func (o DataSourceSnowflakeParametersPtrOutput) AuthenticationType() DataSourceAuthenticationTypePtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *DataSourceAuthenticationType {
		if v == nil {
			return nil
		}
		return v.AuthenticationType
	}).(DataSourceAuthenticationTypePtrOutput)
}

// <p>Database.</p>
func (o DataSourceSnowflakeParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The database access control role.
func (o DataSourceSnowflakeParametersPtrOutput) DatabaseAccessControlRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseAccessControlRole
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceSnowflakeParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Snowflake.
func (o DataSourceSnowflakeParametersPtrOutput) OAuthParameters() DataSourceOAuthParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *DataSourceOAuthParameters {
		if v == nil {
			return nil
		}
		return v.OAuthParameters
	}).(DataSourceOAuthParametersPtrOutput)
}

// <p>Warehouse.</p>
func (o DataSourceSnowflakeParametersPtrOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSnowflakeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Warehouse
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters for Spark.</p>
type DataSourceSparkParameters struct {
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceSparkParametersInput is an input type that accepts DataSourceSparkParametersArgs and DataSourceSparkParametersOutput values.
// You can construct a concrete instance of `DataSourceSparkParametersInput` via:
//
//	DataSourceSparkParametersArgs{...}
type DataSourceSparkParametersInput interface {
	pulumi.Input

	ToDataSourceSparkParametersOutput() DataSourceSparkParametersOutput
	ToDataSourceSparkParametersOutputWithContext(context.Context) DataSourceSparkParametersOutput
}

// <p>The parameters for Spark.</p>
type DataSourceSparkParametersArgs struct {
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceSparkParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSparkParameters)(nil)).Elem()
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersOutput() DataSourceSparkParametersOutput {
	return i.ToDataSourceSparkParametersOutputWithContext(context.Background())
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersOutputWithContext(ctx context.Context) DataSourceSparkParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSparkParametersOutput)
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return i.ToDataSourceSparkParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceSparkParametersArgs) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSparkParametersOutput).ToDataSourceSparkParametersPtrOutputWithContext(ctx)
}

// DataSourceSparkParametersPtrInput is an input type that accepts DataSourceSparkParametersArgs, DataSourceSparkParametersPtr and DataSourceSparkParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceSparkParametersPtrInput` via:
//
//	        DataSourceSparkParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceSparkParametersPtrInput interface {
	pulumi.Input

	ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput
	ToDataSourceSparkParametersPtrOutputWithContext(context.Context) DataSourceSparkParametersPtrOutput
}

type dataSourceSparkParametersPtrType DataSourceSparkParametersArgs

func DataSourceSparkParametersPtr(v *DataSourceSparkParametersArgs) DataSourceSparkParametersPtrInput {
	return (*dataSourceSparkParametersPtrType)(v)
}

func (*dataSourceSparkParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSparkParameters)(nil)).Elem()
}

func (i *dataSourceSparkParametersPtrType) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return i.ToDataSourceSparkParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceSparkParametersPtrType) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSparkParametersPtrOutput)
}

// <p>The parameters for Spark.</p>
type DataSourceSparkParametersOutput struct{ *pulumi.OutputState }

func (DataSourceSparkParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSparkParameters)(nil)).Elem()
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersOutput() DataSourceSparkParametersOutput {
	return o
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersOutputWithContext(ctx context.Context) DataSourceSparkParametersOutput {
	return o
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return o.ToDataSourceSparkParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceSparkParametersOutput) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSparkParameters) *DataSourceSparkParameters {
		return &v
	}).(DataSourceSparkParametersPtrOutput)
}

// <p>Host.</p>
func (o DataSourceSparkParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSparkParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceSparkParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceSparkParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceSparkParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSparkParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSparkParameters)(nil)).Elem()
}

func (o DataSourceSparkParametersPtrOutput) ToDataSourceSparkParametersPtrOutput() DataSourceSparkParametersPtrOutput {
	return o
}

func (o DataSourceSparkParametersPtrOutput) ToDataSourceSparkParametersPtrOutputWithContext(ctx context.Context) DataSourceSparkParametersPtrOutput {
	return o
}

func (o DataSourceSparkParametersPtrOutput) Elem() DataSourceSparkParametersOutput {
	return o.ApplyT(func(v *DataSourceSparkParameters) DataSourceSparkParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceSparkParameters
		return ret
	}).(DataSourceSparkParametersOutput)
}

// <p>Host.</p>
func (o DataSourceSparkParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSparkParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceSparkParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceSparkParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The parameters for SQL Server.</p>
type DataSourceSqlServerParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceSqlServerParametersInput is an input type that accepts DataSourceSqlServerParametersArgs and DataSourceSqlServerParametersOutput values.
// You can construct a concrete instance of `DataSourceSqlServerParametersInput` via:
//
//	DataSourceSqlServerParametersArgs{...}
type DataSourceSqlServerParametersInput interface {
	pulumi.Input

	ToDataSourceSqlServerParametersOutput() DataSourceSqlServerParametersOutput
	ToDataSourceSqlServerParametersOutputWithContext(context.Context) DataSourceSqlServerParametersOutput
}

// <p>The parameters for SQL Server.</p>
type DataSourceSqlServerParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceSqlServerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSqlServerParameters)(nil)).Elem()
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersOutput() DataSourceSqlServerParametersOutput {
	return i.ToDataSourceSqlServerParametersOutputWithContext(context.Background())
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersOutputWithContext(ctx context.Context) DataSourceSqlServerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSqlServerParametersOutput)
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return i.ToDataSourceSqlServerParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceSqlServerParametersArgs) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSqlServerParametersOutput).ToDataSourceSqlServerParametersPtrOutputWithContext(ctx)
}

// DataSourceSqlServerParametersPtrInput is an input type that accepts DataSourceSqlServerParametersArgs, DataSourceSqlServerParametersPtr and DataSourceSqlServerParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceSqlServerParametersPtrInput` via:
//
//	        DataSourceSqlServerParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceSqlServerParametersPtrInput interface {
	pulumi.Input

	ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput
	ToDataSourceSqlServerParametersPtrOutputWithContext(context.Context) DataSourceSqlServerParametersPtrOutput
}

type dataSourceSqlServerParametersPtrType DataSourceSqlServerParametersArgs

func DataSourceSqlServerParametersPtr(v *DataSourceSqlServerParametersArgs) DataSourceSqlServerParametersPtrInput {
	return (*dataSourceSqlServerParametersPtrType)(v)
}

func (*dataSourceSqlServerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSqlServerParameters)(nil)).Elem()
}

func (i *dataSourceSqlServerParametersPtrType) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return i.ToDataSourceSqlServerParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceSqlServerParametersPtrType) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSqlServerParametersPtrOutput)
}

// <p>The parameters for SQL Server.</p>
type DataSourceSqlServerParametersOutput struct{ *pulumi.OutputState }

func (DataSourceSqlServerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSqlServerParameters)(nil)).Elem()
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersOutput() DataSourceSqlServerParametersOutput {
	return o
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersOutputWithContext(ctx context.Context) DataSourceSqlServerParametersOutput {
	return o
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return o.ToDataSourceSqlServerParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceSqlServerParametersOutput) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSqlServerParameters) *DataSourceSqlServerParameters {
		return &v
	}).(DataSourceSqlServerParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceSqlServerParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSqlServerParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceSqlServerParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceSqlServerParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceSqlServerParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceSqlServerParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceSqlServerParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSqlServerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSqlServerParameters)(nil)).Elem()
}

func (o DataSourceSqlServerParametersPtrOutput) ToDataSourceSqlServerParametersPtrOutput() DataSourceSqlServerParametersPtrOutput {
	return o
}

func (o DataSourceSqlServerParametersPtrOutput) ToDataSourceSqlServerParametersPtrOutputWithContext(ctx context.Context) DataSourceSqlServerParametersPtrOutput {
	return o
}

func (o DataSourceSqlServerParametersPtrOutput) Elem() DataSourceSqlServerParametersOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) DataSourceSqlServerParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceSqlServerParameters
		return ret
	}).(DataSourceSqlServerParametersOutput)
}

// <p>Database.</p>
func (o DataSourceSqlServerParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceSqlServerParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceSqlServerParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceSqlServerParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your
//
//	underlying data source.</p>
type DataSourceSslProperties struct {
	// <p>A Boolean option to control whether SSL should be disabled.</p>
	DisableSsl *bool `pulumi:"disableSsl"`
}

// DataSourceSslPropertiesInput is an input type that accepts DataSourceSslPropertiesArgs and DataSourceSslPropertiesOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesInput` via:
//
//	DataSourceSslPropertiesArgs{...}
type DataSourceSslPropertiesInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput
	ToDataSourceSslPropertiesOutputWithContext(context.Context) DataSourceSslPropertiesOutput
}

// <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your
//
//	underlying data source.</p>
type DataSourceSslPropertiesArgs struct {
	// <p>A Boolean option to control whether SSL should be disabled.</p>
	DisableSsl pulumi.BoolPtrInput `pulumi:"disableSsl"`
}

func (DataSourceSslPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return i.ToDataSourceSslPropertiesOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput)
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceSslPropertiesArgs) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesOutput).ToDataSourceSslPropertiesPtrOutputWithContext(ctx)
}

// DataSourceSslPropertiesPtrInput is an input type that accepts DataSourceSslPropertiesArgs, DataSourceSslPropertiesPtr and DataSourceSslPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceSslPropertiesPtrInput` via:
//
//	        DataSourceSslPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSourceSslPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput
	ToDataSourceSslPropertiesPtrOutputWithContext(context.Context) DataSourceSslPropertiesPtrOutput
}

type dataSourceSslPropertiesPtrType DataSourceSslPropertiesArgs

func DataSourceSslPropertiesPtr(v *DataSourceSslPropertiesArgs) DataSourceSslPropertiesPtrInput {
	return (*dataSourceSslPropertiesPtrType)(v)
}

func (*dataSourceSslPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return i.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceSslPropertiesPtrType) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceSslPropertiesPtrOutput)
}

// <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your
//
//	underlying data source.</p>
type DataSourceSslPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutput() DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesOutputWithContext(ctx context.Context) DataSourceSslPropertiesOutput {
	return o
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o.ToDataSourceSslPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceSslPropertiesOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceSslProperties) *DataSourceSslProperties {
		return &v
	}).(DataSourceSslPropertiesPtrOutput)
}

// <p>A Boolean option to control whether SSL should be disabled.</p>
func (o DataSourceSslPropertiesOutput) DisableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataSourceSslProperties) *bool { return v.DisableSsl }).(pulumi.BoolPtrOutput)
}

type DataSourceSslPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceSslPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceSslProperties)(nil)).Elem()
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutput() DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) ToDataSourceSslPropertiesPtrOutputWithContext(ctx context.Context) DataSourceSslPropertiesPtrOutput {
	return o
}

func (o DataSourceSslPropertiesPtrOutput) Elem() DataSourceSslPropertiesOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) DataSourceSslProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceSslProperties
		return ret
	}).(DataSourceSslPropertiesOutput)
}

// <p>A Boolean option to control whether SSL should be disabled.</p>
func (o DataSourceSslPropertiesPtrOutput) DisableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSourceSslProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DisableSsl
	}).(pulumi.BoolPtrOutput)
}

// <p>The parameters that are required to connect to a Starburst data source.</p>
type DataSourceStarburstParameters struct {
	// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
	AuthenticationType *DataSourceAuthenticationType `pulumi:"authenticationType"`
	// <p>The catalog name for the Starburst data source.</p>
	Catalog string `pulumi:"catalog"`
	// The database access control role.
	DatabaseAccessControlRole *string `pulumi:"databaseAccessControlRole"`
	// <p>The host name of the Starburst data source.</p>
	Host string `pulumi:"host"`
	// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Starburst.
	OAuthParameters *DataSourceOAuthParameters `pulumi:"oAuthParameters"`
	// <p>The port for the Starburst data source.</p>
	Port float64 `pulumi:"port"`
	// The product type for the Starburst data source.
	ProductType *DataSourceStarburstProductType `pulumi:"productType"`
}

// DataSourceStarburstParametersInput is an input type that accepts DataSourceStarburstParametersArgs and DataSourceStarburstParametersOutput values.
// You can construct a concrete instance of `DataSourceStarburstParametersInput` via:
//
//	DataSourceStarburstParametersArgs{...}
type DataSourceStarburstParametersInput interface {
	pulumi.Input

	ToDataSourceStarburstParametersOutput() DataSourceStarburstParametersOutput
	ToDataSourceStarburstParametersOutputWithContext(context.Context) DataSourceStarburstParametersOutput
}

// <p>The parameters that are required to connect to a Starburst data source.</p>
type DataSourceStarburstParametersArgs struct {
	// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
	AuthenticationType DataSourceAuthenticationTypePtrInput `pulumi:"authenticationType"`
	// <p>The catalog name for the Starburst data source.</p>
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// The database access control role.
	DatabaseAccessControlRole pulumi.StringPtrInput `pulumi:"databaseAccessControlRole"`
	// <p>The host name of the Starburst data source.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Starburst.
	OAuthParameters DataSourceOAuthParametersPtrInput `pulumi:"oAuthParameters"`
	// <p>The port for the Starburst data source.</p>
	Port pulumi.Float64Input `pulumi:"port"`
	// The product type for the Starburst data source.
	ProductType DataSourceStarburstProductTypePtrInput `pulumi:"productType"`
}

func (DataSourceStarburstParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceStarburstParameters)(nil)).Elem()
}

func (i DataSourceStarburstParametersArgs) ToDataSourceStarburstParametersOutput() DataSourceStarburstParametersOutput {
	return i.ToDataSourceStarburstParametersOutputWithContext(context.Background())
}

func (i DataSourceStarburstParametersArgs) ToDataSourceStarburstParametersOutputWithContext(ctx context.Context) DataSourceStarburstParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceStarburstParametersOutput)
}

func (i DataSourceStarburstParametersArgs) ToDataSourceStarburstParametersPtrOutput() DataSourceStarburstParametersPtrOutput {
	return i.ToDataSourceStarburstParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceStarburstParametersArgs) ToDataSourceStarburstParametersPtrOutputWithContext(ctx context.Context) DataSourceStarburstParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceStarburstParametersOutput).ToDataSourceStarburstParametersPtrOutputWithContext(ctx)
}

// DataSourceStarburstParametersPtrInput is an input type that accepts DataSourceStarburstParametersArgs, DataSourceStarburstParametersPtr and DataSourceStarburstParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceStarburstParametersPtrInput` via:
//
//	        DataSourceStarburstParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceStarburstParametersPtrInput interface {
	pulumi.Input

	ToDataSourceStarburstParametersPtrOutput() DataSourceStarburstParametersPtrOutput
	ToDataSourceStarburstParametersPtrOutputWithContext(context.Context) DataSourceStarburstParametersPtrOutput
}

type dataSourceStarburstParametersPtrType DataSourceStarburstParametersArgs

func DataSourceStarburstParametersPtr(v *DataSourceStarburstParametersArgs) DataSourceStarburstParametersPtrInput {
	return (*dataSourceStarburstParametersPtrType)(v)
}

func (*dataSourceStarburstParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceStarburstParameters)(nil)).Elem()
}

func (i *dataSourceStarburstParametersPtrType) ToDataSourceStarburstParametersPtrOutput() DataSourceStarburstParametersPtrOutput {
	return i.ToDataSourceStarburstParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceStarburstParametersPtrType) ToDataSourceStarburstParametersPtrOutputWithContext(ctx context.Context) DataSourceStarburstParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceStarburstParametersPtrOutput)
}

// <p>The parameters that are required to connect to a Starburst data source.</p>
type DataSourceStarburstParametersOutput struct{ *pulumi.OutputState }

func (DataSourceStarburstParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceStarburstParameters)(nil)).Elem()
}

func (o DataSourceStarburstParametersOutput) ToDataSourceStarburstParametersOutput() DataSourceStarburstParametersOutput {
	return o
}

func (o DataSourceStarburstParametersOutput) ToDataSourceStarburstParametersOutputWithContext(ctx context.Context) DataSourceStarburstParametersOutput {
	return o
}

func (o DataSourceStarburstParametersOutput) ToDataSourceStarburstParametersPtrOutput() DataSourceStarburstParametersPtrOutput {
	return o.ToDataSourceStarburstParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceStarburstParametersOutput) ToDataSourceStarburstParametersPtrOutputWithContext(ctx context.Context) DataSourceStarburstParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceStarburstParameters) *DataSourceStarburstParameters {
		return &v
	}).(DataSourceStarburstParametersPtrOutput)
}

// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
func (o DataSourceStarburstParametersOutput) AuthenticationType() DataSourceAuthenticationTypePtrOutput {
	return o.ApplyT(func(v DataSourceStarburstParameters) *DataSourceAuthenticationType { return v.AuthenticationType }).(DataSourceAuthenticationTypePtrOutput)
}

// <p>The catalog name for the Starburst data source.</p>
func (o DataSourceStarburstParametersOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceStarburstParameters) string { return v.Catalog }).(pulumi.StringOutput)
}

// The database access control role.
func (o DataSourceStarburstParametersOutput) DatabaseAccessControlRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourceStarburstParameters) *string { return v.DatabaseAccessControlRole }).(pulumi.StringPtrOutput)
}

// <p>The host name of the Starburst data source.</p>
func (o DataSourceStarburstParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceStarburstParameters) string { return v.Host }).(pulumi.StringOutput)
}

// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Starburst.
func (o DataSourceStarburstParametersOutput) OAuthParameters() DataSourceOAuthParametersPtrOutput {
	return o.ApplyT(func(v DataSourceStarburstParameters) *DataSourceOAuthParameters { return v.OAuthParameters }).(DataSourceOAuthParametersPtrOutput)
}

// <p>The port for the Starburst data source.</p>
func (o DataSourceStarburstParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceStarburstParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

// The product type for the Starburst data source.
func (o DataSourceStarburstParametersOutput) ProductType() DataSourceStarburstProductTypePtrOutput {
	return o.ApplyT(func(v DataSourceStarburstParameters) *DataSourceStarburstProductType { return v.ProductType }).(DataSourceStarburstProductTypePtrOutput)
}

type DataSourceStarburstParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceStarburstParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceStarburstParameters)(nil)).Elem()
}

func (o DataSourceStarburstParametersPtrOutput) ToDataSourceStarburstParametersPtrOutput() DataSourceStarburstParametersPtrOutput {
	return o
}

func (o DataSourceStarburstParametersPtrOutput) ToDataSourceStarburstParametersPtrOutputWithContext(ctx context.Context) DataSourceStarburstParametersPtrOutput {
	return o
}

func (o DataSourceStarburstParametersPtrOutput) Elem() DataSourceStarburstParametersOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) DataSourceStarburstParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceStarburstParameters
		return ret
	}).(DataSourceStarburstParametersOutput)
}

// The authentication type that you want to use for your connection. This parameter accepts OAuth and non-OAuth authentication types.
func (o DataSourceStarburstParametersPtrOutput) AuthenticationType() DataSourceAuthenticationTypePtrOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) *DataSourceAuthenticationType {
		if v == nil {
			return nil
		}
		return v.AuthenticationType
	}).(DataSourceAuthenticationTypePtrOutput)
}

// <p>The catalog name for the Starburst data source.</p>
func (o DataSourceStarburstParametersPtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Catalog
	}).(pulumi.StringPtrOutput)
}

// The database access control role.
func (o DataSourceStarburstParametersPtrOutput) DatabaseAccessControlRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseAccessControlRole
	}).(pulumi.StringPtrOutput)
}

// <p>The host name of the Starburst data source.</p>
func (o DataSourceStarburstParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// An object that contains information needed to create a data source connection between an Amazon QuickSight account and Starburst.
func (o DataSourceStarburstParametersPtrOutput) OAuthParameters() DataSourceOAuthParametersPtrOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) *DataSourceOAuthParameters {
		if v == nil {
			return nil
		}
		return v.OAuthParameters
	}).(DataSourceOAuthParametersPtrOutput)
}

// <p>The port for the Starburst data source.</p>
func (o DataSourceStarburstParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// The product type for the Starburst data source.
func (o DataSourceStarburstParametersPtrOutput) ProductType() DataSourceStarburstProductTypePtrOutput {
	return o.ApplyT(func(v *DataSourceStarburstParameters) *DataSourceStarburstProductType {
		if v == nil {
			return nil
		}
		return v.ProductType
	}).(DataSourceStarburstProductTypePtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type DataSourceTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// <p>The parameters for Teradata.</p>
type DataSourceTeradataParameters struct {
	// <p>Database.</p>
	Database string `pulumi:"database"`
	// <p>Host.</p>
	Host string `pulumi:"host"`
	// <p>Port.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceTeradataParametersInput is an input type that accepts DataSourceTeradataParametersArgs and DataSourceTeradataParametersOutput values.
// You can construct a concrete instance of `DataSourceTeradataParametersInput` via:
//
//	DataSourceTeradataParametersArgs{...}
type DataSourceTeradataParametersInput interface {
	pulumi.Input

	ToDataSourceTeradataParametersOutput() DataSourceTeradataParametersOutput
	ToDataSourceTeradataParametersOutputWithContext(context.Context) DataSourceTeradataParametersOutput
}

// <p>The parameters for Teradata.</p>
type DataSourceTeradataParametersArgs struct {
	// <p>Database.</p>
	Database pulumi.StringInput `pulumi:"database"`
	// <p>Host.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>Port.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceTeradataParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTeradataParameters)(nil)).Elem()
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersOutput() DataSourceTeradataParametersOutput {
	return i.ToDataSourceTeradataParametersOutputWithContext(context.Background())
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersOutputWithContext(ctx context.Context) DataSourceTeradataParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTeradataParametersOutput)
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return i.ToDataSourceTeradataParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceTeradataParametersArgs) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTeradataParametersOutput).ToDataSourceTeradataParametersPtrOutputWithContext(ctx)
}

// DataSourceTeradataParametersPtrInput is an input type that accepts DataSourceTeradataParametersArgs, DataSourceTeradataParametersPtr and DataSourceTeradataParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceTeradataParametersPtrInput` via:
//
//	        DataSourceTeradataParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceTeradataParametersPtrInput interface {
	pulumi.Input

	ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput
	ToDataSourceTeradataParametersPtrOutputWithContext(context.Context) DataSourceTeradataParametersPtrOutput
}

type dataSourceTeradataParametersPtrType DataSourceTeradataParametersArgs

func DataSourceTeradataParametersPtr(v *DataSourceTeradataParametersArgs) DataSourceTeradataParametersPtrInput {
	return (*dataSourceTeradataParametersPtrType)(v)
}

func (*dataSourceTeradataParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceTeradataParameters)(nil)).Elem()
}

func (i *dataSourceTeradataParametersPtrType) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return i.ToDataSourceTeradataParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceTeradataParametersPtrType) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTeradataParametersPtrOutput)
}

// <p>The parameters for Teradata.</p>
type DataSourceTeradataParametersOutput struct{ *pulumi.OutputState }

func (DataSourceTeradataParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTeradataParameters)(nil)).Elem()
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersOutput() DataSourceTeradataParametersOutput {
	return o
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersOutputWithContext(ctx context.Context) DataSourceTeradataParametersOutput {
	return o
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return o.ToDataSourceTeradataParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceTeradataParametersOutput) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceTeradataParameters) *DataSourceTeradataParameters {
		return &v
	}).(DataSourceTeradataParametersPtrOutput)
}

// <p>Database.</p>
func (o DataSourceTeradataParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTeradataParameters) string { return v.Database }).(pulumi.StringOutput)
}

// <p>Host.</p>
func (o DataSourceTeradataParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTeradataParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>Port.</p>
func (o DataSourceTeradataParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceTeradataParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceTeradataParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceTeradataParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceTeradataParameters)(nil)).Elem()
}

func (o DataSourceTeradataParametersPtrOutput) ToDataSourceTeradataParametersPtrOutput() DataSourceTeradataParametersPtrOutput {
	return o
}

func (o DataSourceTeradataParametersPtrOutput) ToDataSourceTeradataParametersPtrOutputWithContext(ctx context.Context) DataSourceTeradataParametersPtrOutput {
	return o
}

func (o DataSourceTeradataParametersPtrOutput) Elem() DataSourceTeradataParametersOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) DataSourceTeradataParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceTeradataParameters
		return ret
	}).(DataSourceTeradataParametersOutput)
}

// <p>Database.</p>
func (o DataSourceTeradataParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// <p>Host.</p>
func (o DataSourceTeradataParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>Port.</p>
func (o DataSourceTeradataParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceTeradataParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>The parameters that are required to connect to a Trino data source.</p>
type DataSourceTrinoParameters struct {
	// <p>The catalog name for the Trino data source.</p>
	Catalog string `pulumi:"catalog"`
	// <p>The host name of the Trino data source.</p>
	Host string `pulumi:"host"`
	// <p>The port for the Trino data source.</p>
	Port float64 `pulumi:"port"`
}

// DataSourceTrinoParametersInput is an input type that accepts DataSourceTrinoParametersArgs and DataSourceTrinoParametersOutput values.
// You can construct a concrete instance of `DataSourceTrinoParametersInput` via:
//
//	DataSourceTrinoParametersArgs{...}
type DataSourceTrinoParametersInput interface {
	pulumi.Input

	ToDataSourceTrinoParametersOutput() DataSourceTrinoParametersOutput
	ToDataSourceTrinoParametersOutputWithContext(context.Context) DataSourceTrinoParametersOutput
}

// <p>The parameters that are required to connect to a Trino data source.</p>
type DataSourceTrinoParametersArgs struct {
	// <p>The catalog name for the Trino data source.</p>
	Catalog pulumi.StringInput `pulumi:"catalog"`
	// <p>The host name of the Trino data source.</p>
	Host pulumi.StringInput `pulumi:"host"`
	// <p>The port for the Trino data source.</p>
	Port pulumi.Float64Input `pulumi:"port"`
}

func (DataSourceTrinoParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTrinoParameters)(nil)).Elem()
}

func (i DataSourceTrinoParametersArgs) ToDataSourceTrinoParametersOutput() DataSourceTrinoParametersOutput {
	return i.ToDataSourceTrinoParametersOutputWithContext(context.Background())
}

func (i DataSourceTrinoParametersArgs) ToDataSourceTrinoParametersOutputWithContext(ctx context.Context) DataSourceTrinoParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTrinoParametersOutput)
}

func (i DataSourceTrinoParametersArgs) ToDataSourceTrinoParametersPtrOutput() DataSourceTrinoParametersPtrOutput {
	return i.ToDataSourceTrinoParametersPtrOutputWithContext(context.Background())
}

func (i DataSourceTrinoParametersArgs) ToDataSourceTrinoParametersPtrOutputWithContext(ctx context.Context) DataSourceTrinoParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTrinoParametersOutput).ToDataSourceTrinoParametersPtrOutputWithContext(ctx)
}

// DataSourceTrinoParametersPtrInput is an input type that accepts DataSourceTrinoParametersArgs, DataSourceTrinoParametersPtr and DataSourceTrinoParametersPtrOutput values.
// You can construct a concrete instance of `DataSourceTrinoParametersPtrInput` via:
//
//	        DataSourceTrinoParametersArgs{...}
//
//	or:
//
//	        nil
type DataSourceTrinoParametersPtrInput interface {
	pulumi.Input

	ToDataSourceTrinoParametersPtrOutput() DataSourceTrinoParametersPtrOutput
	ToDataSourceTrinoParametersPtrOutputWithContext(context.Context) DataSourceTrinoParametersPtrOutput
}

type dataSourceTrinoParametersPtrType DataSourceTrinoParametersArgs

func DataSourceTrinoParametersPtr(v *DataSourceTrinoParametersArgs) DataSourceTrinoParametersPtrInput {
	return (*dataSourceTrinoParametersPtrType)(v)
}

func (*dataSourceTrinoParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceTrinoParameters)(nil)).Elem()
}

func (i *dataSourceTrinoParametersPtrType) ToDataSourceTrinoParametersPtrOutput() DataSourceTrinoParametersPtrOutput {
	return i.ToDataSourceTrinoParametersPtrOutputWithContext(context.Background())
}

func (i *dataSourceTrinoParametersPtrType) ToDataSourceTrinoParametersPtrOutputWithContext(ctx context.Context) DataSourceTrinoParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceTrinoParametersPtrOutput)
}

// <p>The parameters that are required to connect to a Trino data source.</p>
type DataSourceTrinoParametersOutput struct{ *pulumi.OutputState }

func (DataSourceTrinoParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceTrinoParameters)(nil)).Elem()
}

func (o DataSourceTrinoParametersOutput) ToDataSourceTrinoParametersOutput() DataSourceTrinoParametersOutput {
	return o
}

func (o DataSourceTrinoParametersOutput) ToDataSourceTrinoParametersOutputWithContext(ctx context.Context) DataSourceTrinoParametersOutput {
	return o
}

func (o DataSourceTrinoParametersOutput) ToDataSourceTrinoParametersPtrOutput() DataSourceTrinoParametersPtrOutput {
	return o.ToDataSourceTrinoParametersPtrOutputWithContext(context.Background())
}

func (o DataSourceTrinoParametersOutput) ToDataSourceTrinoParametersPtrOutputWithContext(ctx context.Context) DataSourceTrinoParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceTrinoParameters) *DataSourceTrinoParameters {
		return &v
	}).(DataSourceTrinoParametersPtrOutput)
}

// <p>The catalog name for the Trino data source.</p>
func (o DataSourceTrinoParametersOutput) Catalog() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTrinoParameters) string { return v.Catalog }).(pulumi.StringOutput)
}

// <p>The host name of the Trino data source.</p>
func (o DataSourceTrinoParametersOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceTrinoParameters) string { return v.Host }).(pulumi.StringOutput)
}

// <p>The port for the Trino data source.</p>
func (o DataSourceTrinoParametersOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v DataSourceTrinoParameters) float64 { return v.Port }).(pulumi.Float64Output)
}

type DataSourceTrinoParametersPtrOutput struct{ *pulumi.OutputState }

func (DataSourceTrinoParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceTrinoParameters)(nil)).Elem()
}

func (o DataSourceTrinoParametersPtrOutput) ToDataSourceTrinoParametersPtrOutput() DataSourceTrinoParametersPtrOutput {
	return o
}

func (o DataSourceTrinoParametersPtrOutput) ToDataSourceTrinoParametersPtrOutputWithContext(ctx context.Context) DataSourceTrinoParametersPtrOutput {
	return o
}

func (o DataSourceTrinoParametersPtrOutput) Elem() DataSourceTrinoParametersOutput {
	return o.ApplyT(func(v *DataSourceTrinoParameters) DataSourceTrinoParameters {
		if v != nil {
			return *v
		}
		var ret DataSourceTrinoParameters
		return ret
	}).(DataSourceTrinoParametersOutput)
}

// <p>The catalog name for the Trino data source.</p>
func (o DataSourceTrinoParametersPtrOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceTrinoParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Catalog
	}).(pulumi.StringPtrOutput)
}

// <p>The host name of the Trino data source.</p>
func (o DataSourceTrinoParametersPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceTrinoParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// <p>The port for the Trino data source.</p>
func (o DataSourceTrinoParametersPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DataSourceTrinoParameters) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// <p>VPC connection properties.</p>
type DataSourceVpcConnectionProperties struct {
	// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
	VpcConnectionArn string `pulumi:"vpcConnectionArn"`
}

// DataSourceVpcConnectionPropertiesInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs and DataSourceVpcConnectionPropertiesOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesInput` via:
//
//	DataSourceVpcConnectionPropertiesArgs{...}
type DataSourceVpcConnectionPropertiesInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput
	ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesOutput
}

// <p>VPC connection properties.</p>
type DataSourceVpcConnectionPropertiesArgs struct {
	// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
	VpcConnectionArn pulumi.StringInput `pulumi:"vpcConnectionArn"`
}

func (DataSourceVpcConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return i.ToDataSourceVpcConnectionPropertiesOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput)
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i DataSourceVpcConnectionPropertiesArgs) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesOutput).ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx)
}

// DataSourceVpcConnectionPropertiesPtrInput is an input type that accepts DataSourceVpcConnectionPropertiesArgs, DataSourceVpcConnectionPropertiesPtr and DataSourceVpcConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `DataSourceVpcConnectionPropertiesPtrInput` via:
//
//	        DataSourceVpcConnectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataSourceVpcConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput
	ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Context) DataSourceVpcConnectionPropertiesPtrOutput
}

type dataSourceVpcConnectionPropertiesPtrType DataSourceVpcConnectionPropertiesArgs

func DataSourceVpcConnectionPropertiesPtr(v *DataSourceVpcConnectionPropertiesArgs) DataSourceVpcConnectionPropertiesPtrInput {
	return (*dataSourceVpcConnectionPropertiesPtrType)(v)
}

func (*dataSourceVpcConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return i.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataSourceVpcConnectionPropertiesPtrType) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// <p>VPC connection properties.</p>
type DataSourceVpcConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutput() DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o DataSourceVpcConnectionPropertiesOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourceVpcConnectionProperties) *DataSourceVpcConnectionProperties {
		return &v
	}).(DataSourceVpcConnectionPropertiesPtrOutput)
}

// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
func (o DataSourceVpcConnectionPropertiesOutput) VpcConnectionArn() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceVpcConnectionProperties) string { return v.VpcConnectionArn }).(pulumi.StringOutput)
}

type DataSourceVpcConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataSourceVpcConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceVpcConnectionProperties)(nil)).Elem()
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutput() DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) ToDataSourceVpcConnectionPropertiesPtrOutputWithContext(ctx context.Context) DataSourceVpcConnectionPropertiesPtrOutput {
	return o
}

func (o DataSourceVpcConnectionPropertiesPtrOutput) Elem() DataSourceVpcConnectionPropertiesOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) DataSourceVpcConnectionProperties {
		if v != nil {
			return *v
		}
		var ret DataSourceVpcConnectionProperties
		return ret
	}).(DataSourceVpcConnectionPropertiesOutput)
}

// <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
func (o DataSourceVpcConnectionPropertiesPtrOutput) VpcConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceVpcConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.VpcConnectionArn
	}).(pulumi.StringPtrOutput)
}

// <p>Permission for the resource.</p>
type FolderResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// FolderResourcePermissionInput is an input type that accepts FolderResourcePermissionArgs and FolderResourcePermissionOutput values.
// You can construct a concrete instance of `FolderResourcePermissionInput` via:
//
//	FolderResourcePermissionArgs{...}
type FolderResourcePermissionInput interface {
	pulumi.Input

	ToFolderResourcePermissionOutput() FolderResourcePermissionOutput
	ToFolderResourcePermissionOutputWithContext(context.Context) FolderResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type FolderResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (FolderResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderResourcePermission)(nil)).Elem()
}

func (i FolderResourcePermissionArgs) ToFolderResourcePermissionOutput() FolderResourcePermissionOutput {
	return i.ToFolderResourcePermissionOutputWithContext(context.Background())
}

func (i FolderResourcePermissionArgs) ToFolderResourcePermissionOutputWithContext(ctx context.Context) FolderResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderResourcePermissionOutput)
}

// FolderResourcePermissionArrayInput is an input type that accepts FolderResourcePermissionArray and FolderResourcePermissionArrayOutput values.
// You can construct a concrete instance of `FolderResourcePermissionArrayInput` via:
//
//	FolderResourcePermissionArray{ FolderResourcePermissionArgs{...} }
type FolderResourcePermissionArrayInput interface {
	pulumi.Input

	ToFolderResourcePermissionArrayOutput() FolderResourcePermissionArrayOutput
	ToFolderResourcePermissionArrayOutputWithContext(context.Context) FolderResourcePermissionArrayOutput
}

type FolderResourcePermissionArray []FolderResourcePermissionInput

func (FolderResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderResourcePermission)(nil)).Elem()
}

func (i FolderResourcePermissionArray) ToFolderResourcePermissionArrayOutput() FolderResourcePermissionArrayOutput {
	return i.ToFolderResourcePermissionArrayOutputWithContext(context.Background())
}

func (i FolderResourcePermissionArray) ToFolderResourcePermissionArrayOutputWithContext(ctx context.Context) FolderResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type FolderResourcePermissionOutput struct{ *pulumi.OutputState }

func (FolderResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderResourcePermission)(nil)).Elem()
}

func (o FolderResourcePermissionOutput) ToFolderResourcePermissionOutput() FolderResourcePermissionOutput {
	return o
}

func (o FolderResourcePermissionOutput) ToFolderResourcePermissionOutputWithContext(ctx context.Context) FolderResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o FolderResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FolderResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//
//	   following:</p>
//	<ul>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
//	           ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
//	           (This is less common.) </p>
//	   </li>
//	</ul>
func (o FolderResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v FolderResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type FolderResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderResourcePermission)(nil)).Elem()
}

func (o FolderResourcePermissionArrayOutput) ToFolderResourcePermissionArrayOutput() FolderResourcePermissionArrayOutput {
	return o
}

func (o FolderResourcePermissionArrayOutput) ToFolderResourcePermissionArrayOutputWithContext(ctx context.Context) FolderResourcePermissionArrayOutput {
	return o
}

func (o FolderResourcePermissionArrayOutput) Index(i pulumi.IntInput) FolderResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FolderResourcePermission {
		return vs[0].([]FolderResourcePermission)[vs[1].(int)]
	}).(FolderResourcePermissionOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type FolderTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

type RefreshScheduleMap struct {
	// The type of refresh that a dataset undergoes. Valid values are as follows:
	//
	// - `FULL_REFRESH` : A complete refresh of a dataset.
	// - `INCREMENTAL_REFRESH` : A partial refresh of some rows of a dataset, based on the time window specified.
	//
	// For more information on full and incremental refreshes, see [Refreshing SPICE data](https://docs.aws.amazon.com/quicksight/latest/user/refreshing-imported-data.html) in the *Amazon QuickSight User Guide* .
	RefreshType *RefreshScheduleMapRefreshType `pulumi:"refreshType"`
	// <p>Information about the schedule frequency.</p>
	ScheduleFrequency *RefreshScheduleMapScheduleFrequencyProperties `pulumi:"scheduleFrequency"`
	// <p>An unique identifier for the refresh schedule.</p>
	ScheduleId *string `pulumi:"scheduleId"`
	// <p>The date time after which refresh is to be scheduled</p>
	StartAfterDateTime *string `pulumi:"startAfterDateTime"`
}

// RefreshScheduleMapInput is an input type that accepts RefreshScheduleMap and RefreshScheduleMapOutput values.
// You can construct a concrete instance of `RefreshScheduleMapInput` via:
//
//	RefreshScheduleMap{ "key": RefreshScheduleArgs{...} }
type RefreshScheduleMapInput interface {
	pulumi.Input

	ToRefreshScheduleMapOutput() RefreshScheduleMapOutput
	ToRefreshScheduleMapOutputWithContext(context.Context) RefreshScheduleMapOutput
}

type RefreshScheduleMapArgs struct {
	// The type of refresh that a dataset undergoes. Valid values are as follows:
	//
	// - `FULL_REFRESH` : A complete refresh of a dataset.
	// - `INCREMENTAL_REFRESH` : A partial refresh of some rows of a dataset, based on the time window specified.
	//
	// For more information on full and incremental refreshes, see [Refreshing SPICE data](https://docs.aws.amazon.com/quicksight/latest/user/refreshing-imported-data.html) in the *Amazon QuickSight User Guide* .
	RefreshType RefreshScheduleMapRefreshTypePtrInput `pulumi:"refreshType"`
	// <p>Information about the schedule frequency.</p>
	ScheduleFrequency RefreshScheduleMapScheduleFrequencyPropertiesPtrInput `pulumi:"scheduleFrequency"`
	// <p>An unique identifier for the refresh schedule.</p>
	ScheduleId pulumi.StringPtrInput `pulumi:"scheduleId"`
	// <p>The date time after which refresh is to be scheduled</p>
	StartAfterDateTime pulumi.StringPtrInput `pulumi:"startAfterDateTime"`
}

func (RefreshScheduleMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleMap)(nil)).Elem()
}

func (i RefreshScheduleMapArgs) ToRefreshScheduleMapOutput() RefreshScheduleMapOutput {
	return i.ToRefreshScheduleMapOutputWithContext(context.Background())
}

func (i RefreshScheduleMapArgs) ToRefreshScheduleMapOutputWithContext(ctx context.Context) RefreshScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapOutput)
}

func (i RefreshScheduleMapArgs) ToRefreshScheduleMapPtrOutput() RefreshScheduleMapPtrOutput {
	return i.ToRefreshScheduleMapPtrOutputWithContext(context.Background())
}

func (i RefreshScheduleMapArgs) ToRefreshScheduleMapPtrOutputWithContext(ctx context.Context) RefreshScheduleMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapOutput).ToRefreshScheduleMapPtrOutputWithContext(ctx)
}

// RefreshScheduleMapPtrInput is an input type that accepts RefreshScheduleMapArgs, RefreshScheduleMapPtr and RefreshScheduleMapPtrOutput values.
// You can construct a concrete instance of `RefreshScheduleMapPtrInput` via:
//
//	        RefreshScheduleMapArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleMapPtrInput interface {
	pulumi.Input

	ToRefreshScheduleMapPtrOutput() RefreshScheduleMapPtrOutput
	ToRefreshScheduleMapPtrOutputWithContext(context.Context) RefreshScheduleMapPtrOutput
}

type refreshScheduleMapPtrType RefreshScheduleMapArgs

func RefreshScheduleMapPtr(v *RefreshScheduleMapArgs) RefreshScheduleMapPtrInput {
	return (*refreshScheduleMapPtrType)(v)
}

func (*refreshScheduleMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleMap)(nil)).Elem()
}

func (i *refreshScheduleMapPtrType) ToRefreshScheduleMapPtrOutput() RefreshScheduleMapPtrOutput {
	return i.ToRefreshScheduleMapPtrOutputWithContext(context.Background())
}

func (i *refreshScheduleMapPtrType) ToRefreshScheduleMapPtrOutputWithContext(ctx context.Context) RefreshScheduleMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapPtrOutput)
}

type RefreshScheduleMapOutput struct{ *pulumi.OutputState }

func (RefreshScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleMap)(nil)).Elem()
}

func (o RefreshScheduleMapOutput) ToRefreshScheduleMapOutput() RefreshScheduleMapOutput {
	return o
}

func (o RefreshScheduleMapOutput) ToRefreshScheduleMapOutputWithContext(ctx context.Context) RefreshScheduleMapOutput {
	return o
}

func (o RefreshScheduleMapOutput) ToRefreshScheduleMapPtrOutput() RefreshScheduleMapPtrOutput {
	return o.ToRefreshScheduleMapPtrOutputWithContext(context.Background())
}

func (o RefreshScheduleMapOutput) ToRefreshScheduleMapPtrOutputWithContext(ctx context.Context) RefreshScheduleMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleMap) *RefreshScheduleMap {
		return &v
	}).(RefreshScheduleMapPtrOutput)
}

// The type of refresh that a dataset undergoes. Valid values are as follows:
//
// - `FULL_REFRESH` : A complete refresh of a dataset.
// - `INCREMENTAL_REFRESH` : A partial refresh of some rows of a dataset, based on the time window specified.
//
// For more information on full and incremental refreshes, see [Refreshing SPICE data](https://docs.aws.amazon.com/quicksight/latest/user/refreshing-imported-data.html) in the *Amazon QuickSight User Guide* .
func (o RefreshScheduleMapOutput) RefreshType() RefreshScheduleMapRefreshTypePtrOutput {
	return o.ApplyT(func(v RefreshScheduleMap) *RefreshScheduleMapRefreshType { return v.RefreshType }).(RefreshScheduleMapRefreshTypePtrOutput)
}

// <p>Information about the schedule frequency.</p>
func (o RefreshScheduleMapOutput) ScheduleFrequency() RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMap) *RefreshScheduleMapScheduleFrequencyProperties { return v.ScheduleFrequency }).(RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput)
}

// <p>An unique identifier for the refresh schedule.</p>
func (o RefreshScheduleMapOutput) ScheduleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMap) *string { return v.ScheduleId }).(pulumi.StringPtrOutput)
}

// <p>The date time after which refresh is to be scheduled</p>
func (o RefreshScheduleMapOutput) StartAfterDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMap) *string { return v.StartAfterDateTime }).(pulumi.StringPtrOutput)
}

type RefreshScheduleMapPtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleMap)(nil)).Elem()
}

func (o RefreshScheduleMapPtrOutput) ToRefreshScheduleMapPtrOutput() RefreshScheduleMapPtrOutput {
	return o
}

func (o RefreshScheduleMapPtrOutput) ToRefreshScheduleMapPtrOutputWithContext(ctx context.Context) RefreshScheduleMapPtrOutput {
	return o
}

func (o RefreshScheduleMapPtrOutput) Elem() RefreshScheduleMapOutput {
	return o.ApplyT(func(v *RefreshScheduleMap) RefreshScheduleMap {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleMap
		return ret
	}).(RefreshScheduleMapOutput)
}

// The type of refresh that a dataset undergoes. Valid values are as follows:
//
// - `FULL_REFRESH` : A complete refresh of a dataset.
// - `INCREMENTAL_REFRESH` : A partial refresh of some rows of a dataset, based on the time window specified.
//
// For more information on full and incremental refreshes, see [Refreshing SPICE data](https://docs.aws.amazon.com/quicksight/latest/user/refreshing-imported-data.html) in the *Amazon QuickSight User Guide* .
func (o RefreshScheduleMapPtrOutput) RefreshType() RefreshScheduleMapRefreshTypePtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMap) *RefreshScheduleMapRefreshType {
		if v == nil {
			return nil
		}
		return v.RefreshType
	}).(RefreshScheduleMapRefreshTypePtrOutput)
}

// <p>Information about the schedule frequency.</p>
func (o RefreshScheduleMapPtrOutput) ScheduleFrequency() RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMap) *RefreshScheduleMapScheduleFrequencyProperties {
		if v == nil {
			return nil
		}
		return v.ScheduleFrequency
	}).(RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput)
}

// <p>An unique identifier for the refresh schedule.</p>
func (o RefreshScheduleMapPtrOutput) ScheduleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMap) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleId
	}).(pulumi.StringPtrOutput)
}

// <p>The date time after which refresh is to be scheduled</p>
func (o RefreshScheduleMapPtrOutput) StartAfterDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMap) *string {
		if v == nil {
			return nil
		}
		return v.StartAfterDateTime
	}).(pulumi.StringPtrOutput)
}

// <p>Information about the schedule frequency.</p>
type RefreshScheduleMapScheduleFrequencyProperties struct {
	Interval *RefreshScheduleMapScheduleFrequencyPropertiesInterval `pulumi:"interval"`
	// <p>The day scheduled for refresh.</p>
	RefreshOnDay *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties `pulumi:"refreshOnDay"`
	// <p>The time of the day for scheduled refresh.</p>
	TimeOfTheDay *string `pulumi:"timeOfTheDay"`
	// <p>The timezone for scheduled refresh.</p>
	TimeZone *string `pulumi:"timeZone"`
}

// RefreshScheduleMapScheduleFrequencyPropertiesInput is an input type that accepts RefreshScheduleMapScheduleFrequencyPropertiesArgs and RefreshScheduleMapScheduleFrequencyPropertiesOutput values.
// You can construct a concrete instance of `RefreshScheduleMapScheduleFrequencyPropertiesInput` via:
//
//	RefreshScheduleMapScheduleFrequencyPropertiesArgs{...}
type RefreshScheduleMapScheduleFrequencyPropertiesInput interface {
	pulumi.Input

	ToRefreshScheduleMapScheduleFrequencyPropertiesOutput() RefreshScheduleMapScheduleFrequencyPropertiesOutput
	ToRefreshScheduleMapScheduleFrequencyPropertiesOutputWithContext(context.Context) RefreshScheduleMapScheduleFrequencyPropertiesOutput
}

// <p>Information about the schedule frequency.</p>
type RefreshScheduleMapScheduleFrequencyPropertiesArgs struct {
	Interval RefreshScheduleMapScheduleFrequencyPropertiesIntervalPtrInput `pulumi:"interval"`
	// <p>The day scheduled for refresh.</p>
	RefreshOnDay RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrInput `pulumi:"refreshOnDay"`
	// <p>The time of the day for scheduled refresh.</p>
	TimeOfTheDay pulumi.StringPtrInput `pulumi:"timeOfTheDay"`
	// <p>The timezone for scheduled refresh.</p>
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (RefreshScheduleMapScheduleFrequencyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyProperties)(nil)).Elem()
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesOutput() RefreshScheduleMapScheduleFrequencyPropertiesOutput {
	return i.ToRefreshScheduleMapScheduleFrequencyPropertiesOutputWithContext(context.Background())
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapScheduleFrequencyPropertiesOutput)
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return i.ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(context.Background())
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapScheduleFrequencyPropertiesOutput).ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(ctx)
}

// RefreshScheduleMapScheduleFrequencyPropertiesPtrInput is an input type that accepts RefreshScheduleMapScheduleFrequencyPropertiesArgs, RefreshScheduleMapScheduleFrequencyPropertiesPtr and RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput values.
// You can construct a concrete instance of `RefreshScheduleMapScheduleFrequencyPropertiesPtrInput` via:
//
//	        RefreshScheduleMapScheduleFrequencyPropertiesArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleMapScheduleFrequencyPropertiesPtrInput interface {
	pulumi.Input

	ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput
	ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(context.Context) RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput
}

type refreshScheduleMapScheduleFrequencyPropertiesPtrType RefreshScheduleMapScheduleFrequencyPropertiesArgs

func RefreshScheduleMapScheduleFrequencyPropertiesPtr(v *RefreshScheduleMapScheduleFrequencyPropertiesArgs) RefreshScheduleMapScheduleFrequencyPropertiesPtrInput {
	return (*refreshScheduleMapScheduleFrequencyPropertiesPtrType)(v)
}

func (*refreshScheduleMapScheduleFrequencyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleMapScheduleFrequencyProperties)(nil)).Elem()
}

func (i *refreshScheduleMapScheduleFrequencyPropertiesPtrType) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return i.ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(context.Background())
}

func (i *refreshScheduleMapScheduleFrequencyPropertiesPtrType) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput)
}

// <p>Information about the schedule frequency.</p>
type RefreshScheduleMapScheduleFrequencyPropertiesOutput struct{ *pulumi.OutputState }

func (RefreshScheduleMapScheduleFrequencyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyProperties)(nil)).Elem()
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesOutput() RefreshScheduleMapScheduleFrequencyPropertiesOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return o.ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(context.Background())
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleMapScheduleFrequencyProperties) *RefreshScheduleMapScheduleFrequencyProperties {
		return &v
	}).(RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput)
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) Interval() RefreshScheduleMapScheduleFrequencyPropertiesIntervalPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMapScheduleFrequencyProperties) *RefreshScheduleMapScheduleFrequencyPropertiesInterval {
		return v.Interval
	}).(RefreshScheduleMapScheduleFrequencyPropertiesIntervalPtrOutput)
}

// <p>The day scheduled for refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) RefreshOnDay() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMapScheduleFrequencyProperties) *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties {
		return v.RefreshOnDay
	}).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput)
}

// <p>The time of the day for scheduled refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) TimeOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMapScheduleFrequencyProperties) *string { return v.TimeOfTheDay }).(pulumi.StringPtrOutput)
}

// <p>The timezone for scheduled refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMapScheduleFrequencyProperties) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleMapScheduleFrequencyProperties)(nil)).Elem()
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) Elem() RefreshScheduleMapScheduleFrequencyPropertiesOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyProperties) RefreshScheduleMapScheduleFrequencyProperties {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleMapScheduleFrequencyProperties
		return ret
	}).(RefreshScheduleMapScheduleFrequencyPropertiesOutput)
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) Interval() RefreshScheduleMapScheduleFrequencyPropertiesIntervalPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyProperties) *RefreshScheduleMapScheduleFrequencyPropertiesInterval {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(RefreshScheduleMapScheduleFrequencyPropertiesIntervalPtrOutput)
}

// <p>The day scheduled for refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) RefreshOnDay() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyProperties) *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties {
		if v == nil {
			return nil
		}
		return v.RefreshOnDay
	}).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput)
}

// <p>The time of the day for scheduled refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) TimeOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyProperties) *string {
		if v == nil {
			return nil
		}
		return v.TimeOfTheDay
	}).(pulumi.StringPtrOutput)
}

// <p>The timezone for scheduled refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyProperties) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// <p>The day scheduled for refresh.</p>
type RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties struct {
	// <p>The Day Of Month for scheduled refresh.</p>
	DayOfMonth *string                                                                       `pulumi:"dayOfMonth"`
	DayOfWeek  *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek `pulumi:"dayOfWeek"`
}

// RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesInput is an input type that accepts RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs and RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput values.
// You can construct a concrete instance of `RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesInput` via:
//
//	RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs{...}
type RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesInput interface {
	pulumi.Input

	ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput
	ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutputWithContext(context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput
}

// <p>The day scheduled for refresh.</p>
type RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs struct {
	// <p>The Day Of Month for scheduled refresh.</p>
	DayOfMonth pulumi.StringPtrInput                                                                `pulumi:"dayOfMonth"`
	DayOfWeek  RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeekPtrInput `pulumi:"dayOfWeek"`
}

func (RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties)(nil)).Elem()
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput {
	return i.ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutputWithContext(context.Background())
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput)
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return i.ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(context.Background())
}

func (i RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput).ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(ctx)
}

// RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrInput is an input type that accepts RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs, RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtr and RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput values.
// You can construct a concrete instance of `RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrInput` via:
//
//	        RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs{...}
//
//	or:
//
//	        nil
type RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrInput interface {
	pulumi.Input

	ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput
	ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput
}

type refreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrType RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs

func RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtr(v *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrInput {
	return (*refreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrType)(v)
}

func (*refreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties)(nil)).Elem()
}

func (i *refreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrType) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return i.ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(context.Background())
}

func (i *refreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrType) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput)
}

// <p>The day scheduled for refresh.</p>
type RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput struct{ *pulumi.OutputState }

func (RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties)(nil)).Elem()
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return o.ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(context.Background())
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties) *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties {
		return &v
	}).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput)
}

// <p>The Day Of Month for scheduled refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput) DayOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties) *string {
		return v.DayOfMonth
	}).(pulumi.StringPtrOutput)
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput) DayOfWeek() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeekPtrOutput {
	return o.ApplyT(func(v RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties) *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek {
		return v.DayOfWeek
	}).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeekPtrOutput)
}

type RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties)(nil)).Elem()
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput) ToRefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutputWithContext(ctx context.Context) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput {
	return o
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput) Elem() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties) RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties {
		if v != nil {
			return *v
		}
		var ret RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties
		return ret
	}).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput)
}

// <p>The Day Of Month for scheduled refresh.</p>
func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput) DayOfMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties) *string {
		if v == nil {
			return nil
		}
		return v.DayOfMonth
	}).(pulumi.StringPtrOutput)
}

func (o RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput) DayOfWeek() RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeekPtrOutput {
	return o.ApplyT(func(v *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties) *RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeekPtrOutput)
}

type TemplateAggregationFunction struct {
	// Aggregation for attributes.
	AttributeAggregationFunction *TemplateAttributeAggregationFunction `pulumi:"attributeAggregationFunction"`
	// Aggregation for categorical values.
	//
	// - `COUNT` : Aggregate by the total number of values, including duplicates.
	// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
	CategoricalAggregationFunction *TemplateCategoricalAggregationFunction `pulumi:"categoricalAggregationFunction"`
	// Aggregation for date values.
	//
	// - `COUNT` : Aggregate by the total number of values, including duplicates.
	// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
	// - `MIN` : Select the smallest date value.
	// - `MAX` : Select the largest date value.
	DateAggregationFunction *TemplateDateAggregationFunction `pulumi:"dateAggregationFunction"`
	// Aggregation for numerical values.
	NumericalAggregationFunction *TemplateNumericalAggregationFunction `pulumi:"numericalAggregationFunction"`
}

// TemplateAggregationFunctionInput is an input type that accepts TemplateAggregationFunctionArgs and TemplateAggregationFunctionOutput values.
// You can construct a concrete instance of `TemplateAggregationFunctionInput` via:
//
//	TemplateAggregationFunctionArgs{...}
type TemplateAggregationFunctionInput interface {
	pulumi.Input

	ToTemplateAggregationFunctionOutput() TemplateAggregationFunctionOutput
	ToTemplateAggregationFunctionOutputWithContext(context.Context) TemplateAggregationFunctionOutput
}

type TemplateAggregationFunctionArgs struct {
	// Aggregation for attributes.
	AttributeAggregationFunction TemplateAttributeAggregationFunctionPtrInput `pulumi:"attributeAggregationFunction"`
	// Aggregation for categorical values.
	//
	// - `COUNT` : Aggregate by the total number of values, including duplicates.
	// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
	CategoricalAggregationFunction TemplateCategoricalAggregationFunctionPtrInput `pulumi:"categoricalAggregationFunction"`
	// Aggregation for date values.
	//
	// - `COUNT` : Aggregate by the total number of values, including duplicates.
	// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
	// - `MIN` : Select the smallest date value.
	// - `MAX` : Select the largest date value.
	DateAggregationFunction TemplateDateAggregationFunctionPtrInput `pulumi:"dateAggregationFunction"`
	// Aggregation for numerical values.
	NumericalAggregationFunction TemplateNumericalAggregationFunctionPtrInput `pulumi:"numericalAggregationFunction"`
}

func (TemplateAggregationFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAggregationFunction)(nil)).Elem()
}

func (i TemplateAggregationFunctionArgs) ToTemplateAggregationFunctionOutput() TemplateAggregationFunctionOutput {
	return i.ToTemplateAggregationFunctionOutputWithContext(context.Background())
}

func (i TemplateAggregationFunctionArgs) ToTemplateAggregationFunctionOutputWithContext(ctx context.Context) TemplateAggregationFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAggregationFunctionOutput)
}

func (i TemplateAggregationFunctionArgs) ToTemplateAggregationFunctionPtrOutput() TemplateAggregationFunctionPtrOutput {
	return i.ToTemplateAggregationFunctionPtrOutputWithContext(context.Background())
}

func (i TemplateAggregationFunctionArgs) ToTemplateAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAggregationFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAggregationFunctionOutput).ToTemplateAggregationFunctionPtrOutputWithContext(ctx)
}

// TemplateAggregationFunctionPtrInput is an input type that accepts TemplateAggregationFunctionArgs, TemplateAggregationFunctionPtr and TemplateAggregationFunctionPtrOutput values.
// You can construct a concrete instance of `TemplateAggregationFunctionPtrInput` via:
//
//	        TemplateAggregationFunctionArgs{...}
//
//	or:
//
//	        nil
type TemplateAggregationFunctionPtrInput interface {
	pulumi.Input

	ToTemplateAggregationFunctionPtrOutput() TemplateAggregationFunctionPtrOutput
	ToTemplateAggregationFunctionPtrOutputWithContext(context.Context) TemplateAggregationFunctionPtrOutput
}

type templateAggregationFunctionPtrType TemplateAggregationFunctionArgs

func TemplateAggregationFunctionPtr(v *TemplateAggregationFunctionArgs) TemplateAggregationFunctionPtrInput {
	return (*templateAggregationFunctionPtrType)(v)
}

func (*templateAggregationFunctionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAggregationFunction)(nil)).Elem()
}

func (i *templateAggregationFunctionPtrType) ToTemplateAggregationFunctionPtrOutput() TemplateAggregationFunctionPtrOutput {
	return i.ToTemplateAggregationFunctionPtrOutputWithContext(context.Background())
}

func (i *templateAggregationFunctionPtrType) ToTemplateAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAggregationFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAggregationFunctionPtrOutput)
}

type TemplateAggregationFunctionOutput struct{ *pulumi.OutputState }

func (TemplateAggregationFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAggregationFunction)(nil)).Elem()
}

func (o TemplateAggregationFunctionOutput) ToTemplateAggregationFunctionOutput() TemplateAggregationFunctionOutput {
	return o
}

func (o TemplateAggregationFunctionOutput) ToTemplateAggregationFunctionOutputWithContext(ctx context.Context) TemplateAggregationFunctionOutput {
	return o
}

func (o TemplateAggregationFunctionOutput) ToTemplateAggregationFunctionPtrOutput() TemplateAggregationFunctionPtrOutput {
	return o.ToTemplateAggregationFunctionPtrOutputWithContext(context.Background())
}

func (o TemplateAggregationFunctionOutput) ToTemplateAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAggregationFunctionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAggregationFunction) *TemplateAggregationFunction {
		return &v
	}).(TemplateAggregationFunctionPtrOutput)
}

// Aggregation for attributes.
func (o TemplateAggregationFunctionOutput) AttributeAggregationFunction() TemplateAttributeAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateAggregationFunction) *TemplateAttributeAggregationFunction {
		return v.AttributeAggregationFunction
	}).(TemplateAttributeAggregationFunctionPtrOutput)
}

// Aggregation for categorical values.
//
// - `COUNT` : Aggregate by the total number of values, including duplicates.
// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
func (o TemplateAggregationFunctionOutput) CategoricalAggregationFunction() TemplateCategoricalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateAggregationFunction) *TemplateCategoricalAggregationFunction {
		return v.CategoricalAggregationFunction
	}).(TemplateCategoricalAggregationFunctionPtrOutput)
}

// Aggregation for date values.
//
// - `COUNT` : Aggregate by the total number of values, including duplicates.
// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
// - `MIN` : Select the smallest date value.
// - `MAX` : Select the largest date value.
func (o TemplateAggregationFunctionOutput) DateAggregationFunction() TemplateDateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateAggregationFunction) *TemplateDateAggregationFunction { return v.DateAggregationFunction }).(TemplateDateAggregationFunctionPtrOutput)
}

// Aggregation for numerical values.
func (o TemplateAggregationFunctionOutput) NumericalAggregationFunction() TemplateNumericalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateAggregationFunction) *TemplateNumericalAggregationFunction {
		return v.NumericalAggregationFunction
	}).(TemplateNumericalAggregationFunctionPtrOutput)
}

type TemplateAggregationFunctionPtrOutput struct{ *pulumi.OutputState }

func (TemplateAggregationFunctionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAggregationFunction)(nil)).Elem()
}

func (o TemplateAggregationFunctionPtrOutput) ToTemplateAggregationFunctionPtrOutput() TemplateAggregationFunctionPtrOutput {
	return o
}

func (o TemplateAggregationFunctionPtrOutput) ToTemplateAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAggregationFunctionPtrOutput {
	return o
}

func (o TemplateAggregationFunctionPtrOutput) Elem() TemplateAggregationFunctionOutput {
	return o.ApplyT(func(v *TemplateAggregationFunction) TemplateAggregationFunction {
		if v != nil {
			return *v
		}
		var ret TemplateAggregationFunction
		return ret
	}).(TemplateAggregationFunctionOutput)
}

// Aggregation for attributes.
func (o TemplateAggregationFunctionPtrOutput) AttributeAggregationFunction() TemplateAttributeAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateAggregationFunction) *TemplateAttributeAggregationFunction {
		if v == nil {
			return nil
		}
		return v.AttributeAggregationFunction
	}).(TemplateAttributeAggregationFunctionPtrOutput)
}

// Aggregation for categorical values.
//
// - `COUNT` : Aggregate by the total number of values, including duplicates.
// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
func (o TemplateAggregationFunctionPtrOutput) CategoricalAggregationFunction() TemplateCategoricalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateAggregationFunction) *TemplateCategoricalAggregationFunction {
		if v == nil {
			return nil
		}
		return v.CategoricalAggregationFunction
	}).(TemplateCategoricalAggregationFunctionPtrOutput)
}

// Aggregation for date values.
//
// - `COUNT` : Aggregate by the total number of values, including duplicates.
// - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
// - `MIN` : Select the smallest date value.
// - `MAX` : Select the largest date value.
func (o TemplateAggregationFunctionPtrOutput) DateAggregationFunction() TemplateDateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateAggregationFunction) *TemplateDateAggregationFunction {
		if v == nil {
			return nil
		}
		return v.DateAggregationFunction
	}).(TemplateDateAggregationFunctionPtrOutput)
}

// Aggregation for numerical values.
func (o TemplateAggregationFunctionPtrOutput) NumericalAggregationFunction() TemplateNumericalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateAggregationFunction) *TemplateNumericalAggregationFunction {
		if v == nil {
			return nil
		}
		return v.NumericalAggregationFunction
	}).(TemplateNumericalAggregationFunctionPtrOutput)
}

type TemplateAggregationSortConfiguration struct {
	// The function that aggregates the values in `Column` .
	AggregationFunction *TemplateAggregationFunction `pulumi:"aggregationFunction"`
	// The column that determines the sort order of aggregated values.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The sort direction of values.
	//
	// - `ASC` : Sort in ascending order.
	// - `DESC` : Sort in descending order.
	SortDirection TemplateSortDirection `pulumi:"sortDirection"`
}

// TemplateAggregationSortConfigurationInput is an input type that accepts TemplateAggregationSortConfigurationArgs and TemplateAggregationSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateAggregationSortConfigurationInput` via:
//
//	TemplateAggregationSortConfigurationArgs{...}
type TemplateAggregationSortConfigurationInput interface {
	pulumi.Input

	ToTemplateAggregationSortConfigurationOutput() TemplateAggregationSortConfigurationOutput
	ToTemplateAggregationSortConfigurationOutputWithContext(context.Context) TemplateAggregationSortConfigurationOutput
}

type TemplateAggregationSortConfigurationArgs struct {
	// The function that aggregates the values in `Column` .
	AggregationFunction TemplateAggregationFunctionPtrInput `pulumi:"aggregationFunction"`
	// The column that determines the sort order of aggregated values.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The sort direction of values.
	//
	// - `ASC` : Sort in ascending order.
	// - `DESC` : Sort in descending order.
	SortDirection TemplateSortDirectionInput `pulumi:"sortDirection"`
}

func (TemplateAggregationSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAggregationSortConfiguration)(nil)).Elem()
}

func (i TemplateAggregationSortConfigurationArgs) ToTemplateAggregationSortConfigurationOutput() TemplateAggregationSortConfigurationOutput {
	return i.ToTemplateAggregationSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateAggregationSortConfigurationArgs) ToTemplateAggregationSortConfigurationOutputWithContext(ctx context.Context) TemplateAggregationSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAggregationSortConfigurationOutput)
}

// TemplateAggregationSortConfigurationArrayInput is an input type that accepts TemplateAggregationSortConfigurationArray and TemplateAggregationSortConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateAggregationSortConfigurationArrayInput` via:
//
//	TemplateAggregationSortConfigurationArray{ TemplateAggregationSortConfigurationArgs{...} }
type TemplateAggregationSortConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateAggregationSortConfigurationArrayOutput() TemplateAggregationSortConfigurationArrayOutput
	ToTemplateAggregationSortConfigurationArrayOutputWithContext(context.Context) TemplateAggregationSortConfigurationArrayOutput
}

type TemplateAggregationSortConfigurationArray []TemplateAggregationSortConfigurationInput

func (TemplateAggregationSortConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateAggregationSortConfiguration)(nil)).Elem()
}

func (i TemplateAggregationSortConfigurationArray) ToTemplateAggregationSortConfigurationArrayOutput() TemplateAggregationSortConfigurationArrayOutput {
	return i.ToTemplateAggregationSortConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateAggregationSortConfigurationArray) ToTemplateAggregationSortConfigurationArrayOutputWithContext(ctx context.Context) TemplateAggregationSortConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAggregationSortConfigurationArrayOutput)
}

type TemplateAggregationSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateAggregationSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAggregationSortConfiguration)(nil)).Elem()
}

func (o TemplateAggregationSortConfigurationOutput) ToTemplateAggregationSortConfigurationOutput() TemplateAggregationSortConfigurationOutput {
	return o
}

func (o TemplateAggregationSortConfigurationOutput) ToTemplateAggregationSortConfigurationOutputWithContext(ctx context.Context) TemplateAggregationSortConfigurationOutput {
	return o
}

// The function that aggregates the values in `Column` .
func (o TemplateAggregationSortConfigurationOutput) AggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateAggregationSortConfiguration) *TemplateAggregationFunction {
		return v.AggregationFunction
	}).(TemplateAggregationFunctionPtrOutput)
}

// The column that determines the sort order of aggregated values.
func (o TemplateAggregationSortConfigurationOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateAggregationSortConfiguration) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The sort direction of values.
//
// - `ASC` : Sort in ascending order.
// - `DESC` : Sort in descending order.
func (o TemplateAggregationSortConfigurationOutput) SortDirection() TemplateSortDirectionOutput {
	return o.ApplyT(func(v TemplateAggregationSortConfiguration) TemplateSortDirection { return v.SortDirection }).(TemplateSortDirectionOutput)
}

type TemplateAggregationSortConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateAggregationSortConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateAggregationSortConfiguration)(nil)).Elem()
}

func (o TemplateAggregationSortConfigurationArrayOutput) ToTemplateAggregationSortConfigurationArrayOutput() TemplateAggregationSortConfigurationArrayOutput {
	return o
}

func (o TemplateAggregationSortConfigurationArrayOutput) ToTemplateAggregationSortConfigurationArrayOutputWithContext(ctx context.Context) TemplateAggregationSortConfigurationArrayOutput {
	return o
}

func (o TemplateAggregationSortConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateAggregationSortConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateAggregationSortConfiguration {
		return vs[0].([]TemplateAggregationSortConfiguration)[vs[1].(int)]
	}).(TemplateAggregationSortConfigurationOutput)
}

type TemplateAllSheetsFilterScopeConfiguration struct {
}

// TemplateAllSheetsFilterScopeConfigurationInput is an input type that accepts TemplateAllSheetsFilterScopeConfigurationArgs and TemplateAllSheetsFilterScopeConfigurationOutput values.
// You can construct a concrete instance of `TemplateAllSheetsFilterScopeConfigurationInput` via:
//
//	TemplateAllSheetsFilterScopeConfigurationArgs{...}
type TemplateAllSheetsFilterScopeConfigurationInput interface {
	pulumi.Input

	ToTemplateAllSheetsFilterScopeConfigurationOutput() TemplateAllSheetsFilterScopeConfigurationOutput
	ToTemplateAllSheetsFilterScopeConfigurationOutputWithContext(context.Context) TemplateAllSheetsFilterScopeConfigurationOutput
}

type TemplateAllSheetsFilterScopeConfigurationArgs struct {
}

func (TemplateAllSheetsFilterScopeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAllSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (i TemplateAllSheetsFilterScopeConfigurationArgs) ToTemplateAllSheetsFilterScopeConfigurationOutput() TemplateAllSheetsFilterScopeConfigurationOutput {
	return i.ToTemplateAllSheetsFilterScopeConfigurationOutputWithContext(context.Background())
}

func (i TemplateAllSheetsFilterScopeConfigurationArgs) ToTemplateAllSheetsFilterScopeConfigurationOutputWithContext(ctx context.Context) TemplateAllSheetsFilterScopeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAllSheetsFilterScopeConfigurationOutput)
}

func (i TemplateAllSheetsFilterScopeConfigurationArgs) ToTemplateAllSheetsFilterScopeConfigurationPtrOutput() TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return i.ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateAllSheetsFilterScopeConfigurationArgs) ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAllSheetsFilterScopeConfigurationOutput).ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(ctx)
}

// TemplateAllSheetsFilterScopeConfigurationPtrInput is an input type that accepts TemplateAllSheetsFilterScopeConfigurationArgs, TemplateAllSheetsFilterScopeConfigurationPtr and TemplateAllSheetsFilterScopeConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateAllSheetsFilterScopeConfigurationPtrInput` via:
//
//	        TemplateAllSheetsFilterScopeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateAllSheetsFilterScopeConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateAllSheetsFilterScopeConfigurationPtrOutput() TemplateAllSheetsFilterScopeConfigurationPtrOutput
	ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(context.Context) TemplateAllSheetsFilterScopeConfigurationPtrOutput
}

type templateAllSheetsFilterScopeConfigurationPtrType TemplateAllSheetsFilterScopeConfigurationArgs

func TemplateAllSheetsFilterScopeConfigurationPtr(v *TemplateAllSheetsFilterScopeConfigurationArgs) TemplateAllSheetsFilterScopeConfigurationPtrInput {
	return (*templateAllSheetsFilterScopeConfigurationPtrType)(v)
}

func (*templateAllSheetsFilterScopeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAllSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (i *templateAllSheetsFilterScopeConfigurationPtrType) ToTemplateAllSheetsFilterScopeConfigurationPtrOutput() TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return i.ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateAllSheetsFilterScopeConfigurationPtrType) ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAllSheetsFilterScopeConfigurationPtrOutput)
}

type TemplateAllSheetsFilterScopeConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateAllSheetsFilterScopeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAllSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (o TemplateAllSheetsFilterScopeConfigurationOutput) ToTemplateAllSheetsFilterScopeConfigurationOutput() TemplateAllSheetsFilterScopeConfigurationOutput {
	return o
}

func (o TemplateAllSheetsFilterScopeConfigurationOutput) ToTemplateAllSheetsFilterScopeConfigurationOutputWithContext(ctx context.Context) TemplateAllSheetsFilterScopeConfigurationOutput {
	return o
}

func (o TemplateAllSheetsFilterScopeConfigurationOutput) ToTemplateAllSheetsFilterScopeConfigurationPtrOutput() TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return o.ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateAllSheetsFilterScopeConfigurationOutput) ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAllSheetsFilterScopeConfiguration) *TemplateAllSheetsFilterScopeConfiguration {
		return &v
	}).(TemplateAllSheetsFilterScopeConfigurationPtrOutput)
}

type TemplateAllSheetsFilterScopeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateAllSheetsFilterScopeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAllSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (o TemplateAllSheetsFilterScopeConfigurationPtrOutput) ToTemplateAllSheetsFilterScopeConfigurationPtrOutput() TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return o
}

func (o TemplateAllSheetsFilterScopeConfigurationPtrOutput) ToTemplateAllSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return o
}

func (o TemplateAllSheetsFilterScopeConfigurationPtrOutput) Elem() TemplateAllSheetsFilterScopeConfigurationOutput {
	return o.ApplyT(func(v *TemplateAllSheetsFilterScopeConfiguration) TemplateAllSheetsFilterScopeConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateAllSheetsFilterScopeConfiguration
		return ret
	}).(TemplateAllSheetsFilterScopeConfigurationOutput)
}

type TemplateAnalysisDefaults struct {
	// The configuration for default new sheet settings.
	DefaultNewSheetConfiguration TemplateDefaultNewSheetConfiguration `pulumi:"defaultNewSheetConfiguration"`
}

// TemplateAnalysisDefaultsInput is an input type that accepts TemplateAnalysisDefaultsArgs and TemplateAnalysisDefaultsOutput values.
// You can construct a concrete instance of `TemplateAnalysisDefaultsInput` via:
//
//	TemplateAnalysisDefaultsArgs{...}
type TemplateAnalysisDefaultsInput interface {
	pulumi.Input

	ToTemplateAnalysisDefaultsOutput() TemplateAnalysisDefaultsOutput
	ToTemplateAnalysisDefaultsOutputWithContext(context.Context) TemplateAnalysisDefaultsOutput
}

type TemplateAnalysisDefaultsArgs struct {
	// The configuration for default new sheet settings.
	DefaultNewSheetConfiguration TemplateDefaultNewSheetConfigurationInput `pulumi:"defaultNewSheetConfiguration"`
}

func (TemplateAnalysisDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAnalysisDefaults)(nil)).Elem()
}

func (i TemplateAnalysisDefaultsArgs) ToTemplateAnalysisDefaultsOutput() TemplateAnalysisDefaultsOutput {
	return i.ToTemplateAnalysisDefaultsOutputWithContext(context.Background())
}

func (i TemplateAnalysisDefaultsArgs) ToTemplateAnalysisDefaultsOutputWithContext(ctx context.Context) TemplateAnalysisDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAnalysisDefaultsOutput)
}

func (i TemplateAnalysisDefaultsArgs) ToTemplateAnalysisDefaultsPtrOutput() TemplateAnalysisDefaultsPtrOutput {
	return i.ToTemplateAnalysisDefaultsPtrOutputWithContext(context.Background())
}

func (i TemplateAnalysisDefaultsArgs) ToTemplateAnalysisDefaultsPtrOutputWithContext(ctx context.Context) TemplateAnalysisDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAnalysisDefaultsOutput).ToTemplateAnalysisDefaultsPtrOutputWithContext(ctx)
}

// TemplateAnalysisDefaultsPtrInput is an input type that accepts TemplateAnalysisDefaultsArgs, TemplateAnalysisDefaultsPtr and TemplateAnalysisDefaultsPtrOutput values.
// You can construct a concrete instance of `TemplateAnalysisDefaultsPtrInput` via:
//
//	        TemplateAnalysisDefaultsArgs{...}
//
//	or:
//
//	        nil
type TemplateAnalysisDefaultsPtrInput interface {
	pulumi.Input

	ToTemplateAnalysisDefaultsPtrOutput() TemplateAnalysisDefaultsPtrOutput
	ToTemplateAnalysisDefaultsPtrOutputWithContext(context.Context) TemplateAnalysisDefaultsPtrOutput
}

type templateAnalysisDefaultsPtrType TemplateAnalysisDefaultsArgs

func TemplateAnalysisDefaultsPtr(v *TemplateAnalysisDefaultsArgs) TemplateAnalysisDefaultsPtrInput {
	return (*templateAnalysisDefaultsPtrType)(v)
}

func (*templateAnalysisDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAnalysisDefaults)(nil)).Elem()
}

func (i *templateAnalysisDefaultsPtrType) ToTemplateAnalysisDefaultsPtrOutput() TemplateAnalysisDefaultsPtrOutput {
	return i.ToTemplateAnalysisDefaultsPtrOutputWithContext(context.Background())
}

func (i *templateAnalysisDefaultsPtrType) ToTemplateAnalysisDefaultsPtrOutputWithContext(ctx context.Context) TemplateAnalysisDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAnalysisDefaultsPtrOutput)
}

type TemplateAnalysisDefaultsOutput struct{ *pulumi.OutputState }

func (TemplateAnalysisDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAnalysisDefaults)(nil)).Elem()
}

func (o TemplateAnalysisDefaultsOutput) ToTemplateAnalysisDefaultsOutput() TemplateAnalysisDefaultsOutput {
	return o
}

func (o TemplateAnalysisDefaultsOutput) ToTemplateAnalysisDefaultsOutputWithContext(ctx context.Context) TemplateAnalysisDefaultsOutput {
	return o
}

func (o TemplateAnalysisDefaultsOutput) ToTemplateAnalysisDefaultsPtrOutput() TemplateAnalysisDefaultsPtrOutput {
	return o.ToTemplateAnalysisDefaultsPtrOutputWithContext(context.Background())
}

func (o TemplateAnalysisDefaultsOutput) ToTemplateAnalysisDefaultsPtrOutputWithContext(ctx context.Context) TemplateAnalysisDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAnalysisDefaults) *TemplateAnalysisDefaults {
		return &v
	}).(TemplateAnalysisDefaultsPtrOutput)
}

// The configuration for default new sheet settings.
func (o TemplateAnalysisDefaultsOutput) DefaultNewSheetConfiguration() TemplateDefaultNewSheetConfigurationOutput {
	return o.ApplyT(func(v TemplateAnalysisDefaults) TemplateDefaultNewSheetConfiguration {
		return v.DefaultNewSheetConfiguration
	}).(TemplateDefaultNewSheetConfigurationOutput)
}

type TemplateAnalysisDefaultsPtrOutput struct{ *pulumi.OutputState }

func (TemplateAnalysisDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAnalysisDefaults)(nil)).Elem()
}

func (o TemplateAnalysisDefaultsPtrOutput) ToTemplateAnalysisDefaultsPtrOutput() TemplateAnalysisDefaultsPtrOutput {
	return o
}

func (o TemplateAnalysisDefaultsPtrOutput) ToTemplateAnalysisDefaultsPtrOutputWithContext(ctx context.Context) TemplateAnalysisDefaultsPtrOutput {
	return o
}

func (o TemplateAnalysisDefaultsPtrOutput) Elem() TemplateAnalysisDefaultsOutput {
	return o.ApplyT(func(v *TemplateAnalysisDefaults) TemplateAnalysisDefaults {
		if v != nil {
			return *v
		}
		var ret TemplateAnalysisDefaults
		return ret
	}).(TemplateAnalysisDefaultsOutput)
}

// The configuration for default new sheet settings.
func (o TemplateAnalysisDefaultsPtrOutput) DefaultNewSheetConfiguration() TemplateDefaultNewSheetConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateAnalysisDefaults) *TemplateDefaultNewSheetConfiguration {
		if v == nil {
			return nil
		}
		return &v.DefaultNewSheetConfiguration
	}).(TemplateDefaultNewSheetConfigurationPtrOutput)
}

type TemplateAnchorDateConfiguration struct {
	// The options for the date configuration. Choose one of the options below:
	//
	// - `NOW`
	AnchorOption *TemplateAnchorOption `pulumi:"anchorOption"`
	// The name of the parameter that is used for the anchor date configuration.
	ParameterName *string `pulumi:"parameterName"`
}

// TemplateAnchorDateConfigurationInput is an input type that accepts TemplateAnchorDateConfigurationArgs and TemplateAnchorDateConfigurationOutput values.
// You can construct a concrete instance of `TemplateAnchorDateConfigurationInput` via:
//
//	TemplateAnchorDateConfigurationArgs{...}
type TemplateAnchorDateConfigurationInput interface {
	pulumi.Input

	ToTemplateAnchorDateConfigurationOutput() TemplateAnchorDateConfigurationOutput
	ToTemplateAnchorDateConfigurationOutputWithContext(context.Context) TemplateAnchorDateConfigurationOutput
}

type TemplateAnchorDateConfigurationArgs struct {
	// The options for the date configuration. Choose one of the options below:
	//
	// - `NOW`
	AnchorOption TemplateAnchorOptionPtrInput `pulumi:"anchorOption"`
	// The name of the parameter that is used for the anchor date configuration.
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
}

func (TemplateAnchorDateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAnchorDateConfiguration)(nil)).Elem()
}

func (i TemplateAnchorDateConfigurationArgs) ToTemplateAnchorDateConfigurationOutput() TemplateAnchorDateConfigurationOutput {
	return i.ToTemplateAnchorDateConfigurationOutputWithContext(context.Background())
}

func (i TemplateAnchorDateConfigurationArgs) ToTemplateAnchorDateConfigurationOutputWithContext(ctx context.Context) TemplateAnchorDateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAnchorDateConfigurationOutput)
}

func (i TemplateAnchorDateConfigurationArgs) ToTemplateAnchorDateConfigurationPtrOutput() TemplateAnchorDateConfigurationPtrOutput {
	return i.ToTemplateAnchorDateConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateAnchorDateConfigurationArgs) ToTemplateAnchorDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateAnchorDateConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAnchorDateConfigurationOutput).ToTemplateAnchorDateConfigurationPtrOutputWithContext(ctx)
}

// TemplateAnchorDateConfigurationPtrInput is an input type that accepts TemplateAnchorDateConfigurationArgs, TemplateAnchorDateConfigurationPtr and TemplateAnchorDateConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateAnchorDateConfigurationPtrInput` via:
//
//	        TemplateAnchorDateConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateAnchorDateConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateAnchorDateConfigurationPtrOutput() TemplateAnchorDateConfigurationPtrOutput
	ToTemplateAnchorDateConfigurationPtrOutputWithContext(context.Context) TemplateAnchorDateConfigurationPtrOutput
}

type templateAnchorDateConfigurationPtrType TemplateAnchorDateConfigurationArgs

func TemplateAnchorDateConfigurationPtr(v *TemplateAnchorDateConfigurationArgs) TemplateAnchorDateConfigurationPtrInput {
	return (*templateAnchorDateConfigurationPtrType)(v)
}

func (*templateAnchorDateConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAnchorDateConfiguration)(nil)).Elem()
}

func (i *templateAnchorDateConfigurationPtrType) ToTemplateAnchorDateConfigurationPtrOutput() TemplateAnchorDateConfigurationPtrOutput {
	return i.ToTemplateAnchorDateConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateAnchorDateConfigurationPtrType) ToTemplateAnchorDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateAnchorDateConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAnchorDateConfigurationPtrOutput)
}

type TemplateAnchorDateConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateAnchorDateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAnchorDateConfiguration)(nil)).Elem()
}

func (o TemplateAnchorDateConfigurationOutput) ToTemplateAnchorDateConfigurationOutput() TemplateAnchorDateConfigurationOutput {
	return o
}

func (o TemplateAnchorDateConfigurationOutput) ToTemplateAnchorDateConfigurationOutputWithContext(ctx context.Context) TemplateAnchorDateConfigurationOutput {
	return o
}

func (o TemplateAnchorDateConfigurationOutput) ToTemplateAnchorDateConfigurationPtrOutput() TemplateAnchorDateConfigurationPtrOutput {
	return o.ToTemplateAnchorDateConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateAnchorDateConfigurationOutput) ToTemplateAnchorDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateAnchorDateConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAnchorDateConfiguration) *TemplateAnchorDateConfiguration {
		return &v
	}).(TemplateAnchorDateConfigurationPtrOutput)
}

// The options for the date configuration. Choose one of the options below:
//
// - `NOW`
func (o TemplateAnchorDateConfigurationOutput) AnchorOption() TemplateAnchorOptionPtrOutput {
	return o.ApplyT(func(v TemplateAnchorDateConfiguration) *TemplateAnchorOption { return v.AnchorOption }).(TemplateAnchorOptionPtrOutput)
}

// The name of the parameter that is used for the anchor date configuration.
func (o TemplateAnchorDateConfigurationOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateAnchorDateConfiguration) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

type TemplateAnchorDateConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateAnchorDateConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAnchorDateConfiguration)(nil)).Elem()
}

func (o TemplateAnchorDateConfigurationPtrOutput) ToTemplateAnchorDateConfigurationPtrOutput() TemplateAnchorDateConfigurationPtrOutput {
	return o
}

func (o TemplateAnchorDateConfigurationPtrOutput) ToTemplateAnchorDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateAnchorDateConfigurationPtrOutput {
	return o
}

func (o TemplateAnchorDateConfigurationPtrOutput) Elem() TemplateAnchorDateConfigurationOutput {
	return o.ApplyT(func(v *TemplateAnchorDateConfiguration) TemplateAnchorDateConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateAnchorDateConfiguration
		return ret
	}).(TemplateAnchorDateConfigurationOutput)
}

// The options for the date configuration. Choose one of the options below:
//
// - `NOW`
func (o TemplateAnchorDateConfigurationPtrOutput) AnchorOption() TemplateAnchorOptionPtrOutput {
	return o.ApplyT(func(v *TemplateAnchorDateConfiguration) *TemplateAnchorOption {
		if v == nil {
			return nil
		}
		return v.AnchorOption
	}).(TemplateAnchorOptionPtrOutput)
}

// The name of the parameter that is used for the anchor date configuration.
func (o TemplateAnchorDateConfigurationPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateAnchorDateConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

type TemplateArcAxisConfiguration struct {
	// The arc axis range of a `GaugeChartVisual` .
	Range *TemplateArcAxisDisplayRange `pulumi:"range"`
	// The reserved range of the arc axis.
	ReserveRange *float64 `pulumi:"reserveRange"`
}

// TemplateArcAxisConfigurationInput is an input type that accepts TemplateArcAxisConfigurationArgs and TemplateArcAxisConfigurationOutput values.
// You can construct a concrete instance of `TemplateArcAxisConfigurationInput` via:
//
//	TemplateArcAxisConfigurationArgs{...}
type TemplateArcAxisConfigurationInput interface {
	pulumi.Input

	ToTemplateArcAxisConfigurationOutput() TemplateArcAxisConfigurationOutput
	ToTemplateArcAxisConfigurationOutputWithContext(context.Context) TemplateArcAxisConfigurationOutput
}

type TemplateArcAxisConfigurationArgs struct {
	// The arc axis range of a `GaugeChartVisual` .
	Range TemplateArcAxisDisplayRangePtrInput `pulumi:"range"`
	// The reserved range of the arc axis.
	ReserveRange pulumi.Float64PtrInput `pulumi:"reserveRange"`
}

func (TemplateArcAxisConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcAxisConfiguration)(nil)).Elem()
}

func (i TemplateArcAxisConfigurationArgs) ToTemplateArcAxisConfigurationOutput() TemplateArcAxisConfigurationOutput {
	return i.ToTemplateArcAxisConfigurationOutputWithContext(context.Background())
}

func (i TemplateArcAxisConfigurationArgs) ToTemplateArcAxisConfigurationOutputWithContext(ctx context.Context) TemplateArcAxisConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcAxisConfigurationOutput)
}

func (i TemplateArcAxisConfigurationArgs) ToTemplateArcAxisConfigurationPtrOutput() TemplateArcAxisConfigurationPtrOutput {
	return i.ToTemplateArcAxisConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateArcAxisConfigurationArgs) ToTemplateArcAxisConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcAxisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcAxisConfigurationOutput).ToTemplateArcAxisConfigurationPtrOutputWithContext(ctx)
}

// TemplateArcAxisConfigurationPtrInput is an input type that accepts TemplateArcAxisConfigurationArgs, TemplateArcAxisConfigurationPtr and TemplateArcAxisConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateArcAxisConfigurationPtrInput` via:
//
//	        TemplateArcAxisConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateArcAxisConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateArcAxisConfigurationPtrOutput() TemplateArcAxisConfigurationPtrOutput
	ToTemplateArcAxisConfigurationPtrOutputWithContext(context.Context) TemplateArcAxisConfigurationPtrOutput
}

type templateArcAxisConfigurationPtrType TemplateArcAxisConfigurationArgs

func TemplateArcAxisConfigurationPtr(v *TemplateArcAxisConfigurationArgs) TemplateArcAxisConfigurationPtrInput {
	return (*templateArcAxisConfigurationPtrType)(v)
}

func (*templateArcAxisConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcAxisConfiguration)(nil)).Elem()
}

func (i *templateArcAxisConfigurationPtrType) ToTemplateArcAxisConfigurationPtrOutput() TemplateArcAxisConfigurationPtrOutput {
	return i.ToTemplateArcAxisConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateArcAxisConfigurationPtrType) ToTemplateArcAxisConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcAxisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcAxisConfigurationPtrOutput)
}

type TemplateArcAxisConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateArcAxisConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcAxisConfiguration)(nil)).Elem()
}

func (o TemplateArcAxisConfigurationOutput) ToTemplateArcAxisConfigurationOutput() TemplateArcAxisConfigurationOutput {
	return o
}

func (o TemplateArcAxisConfigurationOutput) ToTemplateArcAxisConfigurationOutputWithContext(ctx context.Context) TemplateArcAxisConfigurationOutput {
	return o
}

func (o TemplateArcAxisConfigurationOutput) ToTemplateArcAxisConfigurationPtrOutput() TemplateArcAxisConfigurationPtrOutput {
	return o.ToTemplateArcAxisConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateArcAxisConfigurationOutput) ToTemplateArcAxisConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcAxisConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateArcAxisConfiguration) *TemplateArcAxisConfiguration {
		return &v
	}).(TemplateArcAxisConfigurationPtrOutput)
}

// The arc axis range of a `GaugeChartVisual` .
func (o TemplateArcAxisConfigurationOutput) Range() TemplateArcAxisDisplayRangePtrOutput {
	return o.ApplyT(func(v TemplateArcAxisConfiguration) *TemplateArcAxisDisplayRange { return v.Range }).(TemplateArcAxisDisplayRangePtrOutput)
}

// The reserved range of the arc axis.
func (o TemplateArcAxisConfigurationOutput) ReserveRange() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateArcAxisConfiguration) *float64 { return v.ReserveRange }).(pulumi.Float64PtrOutput)
}

type TemplateArcAxisConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateArcAxisConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcAxisConfiguration)(nil)).Elem()
}

func (o TemplateArcAxisConfigurationPtrOutput) ToTemplateArcAxisConfigurationPtrOutput() TemplateArcAxisConfigurationPtrOutput {
	return o
}

func (o TemplateArcAxisConfigurationPtrOutput) ToTemplateArcAxisConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcAxisConfigurationPtrOutput {
	return o
}

func (o TemplateArcAxisConfigurationPtrOutput) Elem() TemplateArcAxisConfigurationOutput {
	return o.ApplyT(func(v *TemplateArcAxisConfiguration) TemplateArcAxisConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateArcAxisConfiguration
		return ret
	}).(TemplateArcAxisConfigurationOutput)
}

// The arc axis range of a `GaugeChartVisual` .
func (o TemplateArcAxisConfigurationPtrOutput) Range() TemplateArcAxisDisplayRangePtrOutput {
	return o.ApplyT(func(v *TemplateArcAxisConfiguration) *TemplateArcAxisDisplayRange {
		if v == nil {
			return nil
		}
		return v.Range
	}).(TemplateArcAxisDisplayRangePtrOutput)
}

// The reserved range of the arc axis.
func (o TemplateArcAxisConfigurationPtrOutput) ReserveRange() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateArcAxisConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.ReserveRange
	}).(pulumi.Float64PtrOutput)
}

type TemplateArcAxisDisplayRange struct {
	// The maximum value of the arc axis range.
	Max *float64 `pulumi:"max"`
	// The minimum value of the arc axis range.
	Min *float64 `pulumi:"min"`
}

// TemplateArcAxisDisplayRangeInput is an input type that accepts TemplateArcAxisDisplayRangeArgs and TemplateArcAxisDisplayRangeOutput values.
// You can construct a concrete instance of `TemplateArcAxisDisplayRangeInput` via:
//
//	TemplateArcAxisDisplayRangeArgs{...}
type TemplateArcAxisDisplayRangeInput interface {
	pulumi.Input

	ToTemplateArcAxisDisplayRangeOutput() TemplateArcAxisDisplayRangeOutput
	ToTemplateArcAxisDisplayRangeOutputWithContext(context.Context) TemplateArcAxisDisplayRangeOutput
}

type TemplateArcAxisDisplayRangeArgs struct {
	// The maximum value of the arc axis range.
	Max pulumi.Float64PtrInput `pulumi:"max"`
	// The minimum value of the arc axis range.
	Min pulumi.Float64PtrInput `pulumi:"min"`
}

func (TemplateArcAxisDisplayRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcAxisDisplayRange)(nil)).Elem()
}

func (i TemplateArcAxisDisplayRangeArgs) ToTemplateArcAxisDisplayRangeOutput() TemplateArcAxisDisplayRangeOutput {
	return i.ToTemplateArcAxisDisplayRangeOutputWithContext(context.Background())
}

func (i TemplateArcAxisDisplayRangeArgs) ToTemplateArcAxisDisplayRangeOutputWithContext(ctx context.Context) TemplateArcAxisDisplayRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcAxisDisplayRangeOutput)
}

func (i TemplateArcAxisDisplayRangeArgs) ToTemplateArcAxisDisplayRangePtrOutput() TemplateArcAxisDisplayRangePtrOutput {
	return i.ToTemplateArcAxisDisplayRangePtrOutputWithContext(context.Background())
}

func (i TemplateArcAxisDisplayRangeArgs) ToTemplateArcAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateArcAxisDisplayRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcAxisDisplayRangeOutput).ToTemplateArcAxisDisplayRangePtrOutputWithContext(ctx)
}

// TemplateArcAxisDisplayRangePtrInput is an input type that accepts TemplateArcAxisDisplayRangeArgs, TemplateArcAxisDisplayRangePtr and TemplateArcAxisDisplayRangePtrOutput values.
// You can construct a concrete instance of `TemplateArcAxisDisplayRangePtrInput` via:
//
//	        TemplateArcAxisDisplayRangeArgs{...}
//
//	or:
//
//	        nil
type TemplateArcAxisDisplayRangePtrInput interface {
	pulumi.Input

	ToTemplateArcAxisDisplayRangePtrOutput() TemplateArcAxisDisplayRangePtrOutput
	ToTemplateArcAxisDisplayRangePtrOutputWithContext(context.Context) TemplateArcAxisDisplayRangePtrOutput
}

type templateArcAxisDisplayRangePtrType TemplateArcAxisDisplayRangeArgs

func TemplateArcAxisDisplayRangePtr(v *TemplateArcAxisDisplayRangeArgs) TemplateArcAxisDisplayRangePtrInput {
	return (*templateArcAxisDisplayRangePtrType)(v)
}

func (*templateArcAxisDisplayRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcAxisDisplayRange)(nil)).Elem()
}

func (i *templateArcAxisDisplayRangePtrType) ToTemplateArcAxisDisplayRangePtrOutput() TemplateArcAxisDisplayRangePtrOutput {
	return i.ToTemplateArcAxisDisplayRangePtrOutputWithContext(context.Background())
}

func (i *templateArcAxisDisplayRangePtrType) ToTemplateArcAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateArcAxisDisplayRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcAxisDisplayRangePtrOutput)
}

type TemplateArcAxisDisplayRangeOutput struct{ *pulumi.OutputState }

func (TemplateArcAxisDisplayRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcAxisDisplayRange)(nil)).Elem()
}

func (o TemplateArcAxisDisplayRangeOutput) ToTemplateArcAxisDisplayRangeOutput() TemplateArcAxisDisplayRangeOutput {
	return o
}

func (o TemplateArcAxisDisplayRangeOutput) ToTemplateArcAxisDisplayRangeOutputWithContext(ctx context.Context) TemplateArcAxisDisplayRangeOutput {
	return o
}

func (o TemplateArcAxisDisplayRangeOutput) ToTemplateArcAxisDisplayRangePtrOutput() TemplateArcAxisDisplayRangePtrOutput {
	return o.ToTemplateArcAxisDisplayRangePtrOutputWithContext(context.Background())
}

func (o TemplateArcAxisDisplayRangeOutput) ToTemplateArcAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateArcAxisDisplayRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateArcAxisDisplayRange) *TemplateArcAxisDisplayRange {
		return &v
	}).(TemplateArcAxisDisplayRangePtrOutput)
}

// The maximum value of the arc axis range.
func (o TemplateArcAxisDisplayRangeOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateArcAxisDisplayRange) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

// The minimum value of the arc axis range.
func (o TemplateArcAxisDisplayRangeOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateArcAxisDisplayRange) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

type TemplateArcAxisDisplayRangePtrOutput struct{ *pulumi.OutputState }

func (TemplateArcAxisDisplayRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcAxisDisplayRange)(nil)).Elem()
}

func (o TemplateArcAxisDisplayRangePtrOutput) ToTemplateArcAxisDisplayRangePtrOutput() TemplateArcAxisDisplayRangePtrOutput {
	return o
}

func (o TemplateArcAxisDisplayRangePtrOutput) ToTemplateArcAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateArcAxisDisplayRangePtrOutput {
	return o
}

func (o TemplateArcAxisDisplayRangePtrOutput) Elem() TemplateArcAxisDisplayRangeOutput {
	return o.ApplyT(func(v *TemplateArcAxisDisplayRange) TemplateArcAxisDisplayRange {
		if v != nil {
			return *v
		}
		var ret TemplateArcAxisDisplayRange
		return ret
	}).(TemplateArcAxisDisplayRangeOutput)
}

// The maximum value of the arc axis range.
func (o TemplateArcAxisDisplayRangePtrOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateArcAxisDisplayRange) *float64 {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.Float64PtrOutput)
}

// The minimum value of the arc axis range.
func (o TemplateArcAxisDisplayRangePtrOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateArcAxisDisplayRange) *float64 {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.Float64PtrOutput)
}

type TemplateArcConfiguration struct {
	// The option that determines the arc angle of a `GaugeChartVisual` .
	ArcAngle *float64 `pulumi:"arcAngle"`
	// The options that determine the arc thickness of a `GaugeChartVisual` .
	ArcThickness *TemplateArcThicknessOptions `pulumi:"arcThickness"`
}

// TemplateArcConfigurationInput is an input type that accepts TemplateArcConfigurationArgs and TemplateArcConfigurationOutput values.
// You can construct a concrete instance of `TemplateArcConfigurationInput` via:
//
//	TemplateArcConfigurationArgs{...}
type TemplateArcConfigurationInput interface {
	pulumi.Input

	ToTemplateArcConfigurationOutput() TemplateArcConfigurationOutput
	ToTemplateArcConfigurationOutputWithContext(context.Context) TemplateArcConfigurationOutput
}

type TemplateArcConfigurationArgs struct {
	// The option that determines the arc angle of a `GaugeChartVisual` .
	ArcAngle pulumi.Float64PtrInput `pulumi:"arcAngle"`
	// The options that determine the arc thickness of a `GaugeChartVisual` .
	ArcThickness TemplateArcThicknessOptionsPtrInput `pulumi:"arcThickness"`
}

func (TemplateArcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcConfiguration)(nil)).Elem()
}

func (i TemplateArcConfigurationArgs) ToTemplateArcConfigurationOutput() TemplateArcConfigurationOutput {
	return i.ToTemplateArcConfigurationOutputWithContext(context.Background())
}

func (i TemplateArcConfigurationArgs) ToTemplateArcConfigurationOutputWithContext(ctx context.Context) TemplateArcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcConfigurationOutput)
}

func (i TemplateArcConfigurationArgs) ToTemplateArcConfigurationPtrOutput() TemplateArcConfigurationPtrOutput {
	return i.ToTemplateArcConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateArcConfigurationArgs) ToTemplateArcConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcConfigurationOutput).ToTemplateArcConfigurationPtrOutputWithContext(ctx)
}

// TemplateArcConfigurationPtrInput is an input type that accepts TemplateArcConfigurationArgs, TemplateArcConfigurationPtr and TemplateArcConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateArcConfigurationPtrInput` via:
//
//	        TemplateArcConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateArcConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateArcConfigurationPtrOutput() TemplateArcConfigurationPtrOutput
	ToTemplateArcConfigurationPtrOutputWithContext(context.Context) TemplateArcConfigurationPtrOutput
}

type templateArcConfigurationPtrType TemplateArcConfigurationArgs

func TemplateArcConfigurationPtr(v *TemplateArcConfigurationArgs) TemplateArcConfigurationPtrInput {
	return (*templateArcConfigurationPtrType)(v)
}

func (*templateArcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcConfiguration)(nil)).Elem()
}

func (i *templateArcConfigurationPtrType) ToTemplateArcConfigurationPtrOutput() TemplateArcConfigurationPtrOutput {
	return i.ToTemplateArcConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateArcConfigurationPtrType) ToTemplateArcConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcConfigurationPtrOutput)
}

type TemplateArcConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateArcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcConfiguration)(nil)).Elem()
}

func (o TemplateArcConfigurationOutput) ToTemplateArcConfigurationOutput() TemplateArcConfigurationOutput {
	return o
}

func (o TemplateArcConfigurationOutput) ToTemplateArcConfigurationOutputWithContext(ctx context.Context) TemplateArcConfigurationOutput {
	return o
}

func (o TemplateArcConfigurationOutput) ToTemplateArcConfigurationPtrOutput() TemplateArcConfigurationPtrOutput {
	return o.ToTemplateArcConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateArcConfigurationOutput) ToTemplateArcConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateArcConfiguration) *TemplateArcConfiguration {
		return &v
	}).(TemplateArcConfigurationPtrOutput)
}

// The option that determines the arc angle of a `GaugeChartVisual` .
func (o TemplateArcConfigurationOutput) ArcAngle() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateArcConfiguration) *float64 { return v.ArcAngle }).(pulumi.Float64PtrOutput)
}

// The options that determine the arc thickness of a `GaugeChartVisual` .
func (o TemplateArcConfigurationOutput) ArcThickness() TemplateArcThicknessOptionsPtrOutput {
	return o.ApplyT(func(v TemplateArcConfiguration) *TemplateArcThicknessOptions { return v.ArcThickness }).(TemplateArcThicknessOptionsPtrOutput)
}

type TemplateArcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateArcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcConfiguration)(nil)).Elem()
}

func (o TemplateArcConfigurationPtrOutput) ToTemplateArcConfigurationPtrOutput() TemplateArcConfigurationPtrOutput {
	return o
}

func (o TemplateArcConfigurationPtrOutput) ToTemplateArcConfigurationPtrOutputWithContext(ctx context.Context) TemplateArcConfigurationPtrOutput {
	return o
}

func (o TemplateArcConfigurationPtrOutput) Elem() TemplateArcConfigurationOutput {
	return o.ApplyT(func(v *TemplateArcConfiguration) TemplateArcConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateArcConfiguration
		return ret
	}).(TemplateArcConfigurationOutput)
}

// The option that determines the arc angle of a `GaugeChartVisual` .
func (o TemplateArcConfigurationPtrOutput) ArcAngle() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateArcConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.ArcAngle
	}).(pulumi.Float64PtrOutput)
}

// The options that determine the arc thickness of a `GaugeChartVisual` .
func (o TemplateArcConfigurationPtrOutput) ArcThickness() TemplateArcThicknessOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateArcConfiguration) *TemplateArcThicknessOptions {
		if v == nil {
			return nil
		}
		return v.ArcThickness
	}).(TemplateArcThicknessOptionsPtrOutput)
}

type TemplateArcOptions struct {
	// The arc thickness of a `GaugeChartVisual` .
	ArcThickness *TemplateArcThickness `pulumi:"arcThickness"`
}

// TemplateArcOptionsInput is an input type that accepts TemplateArcOptionsArgs and TemplateArcOptionsOutput values.
// You can construct a concrete instance of `TemplateArcOptionsInput` via:
//
//	TemplateArcOptionsArgs{...}
type TemplateArcOptionsInput interface {
	pulumi.Input

	ToTemplateArcOptionsOutput() TemplateArcOptionsOutput
	ToTemplateArcOptionsOutputWithContext(context.Context) TemplateArcOptionsOutput
}

type TemplateArcOptionsArgs struct {
	// The arc thickness of a `GaugeChartVisual` .
	ArcThickness TemplateArcThicknessPtrInput `pulumi:"arcThickness"`
}

func (TemplateArcOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcOptions)(nil)).Elem()
}

func (i TemplateArcOptionsArgs) ToTemplateArcOptionsOutput() TemplateArcOptionsOutput {
	return i.ToTemplateArcOptionsOutputWithContext(context.Background())
}

func (i TemplateArcOptionsArgs) ToTemplateArcOptionsOutputWithContext(ctx context.Context) TemplateArcOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcOptionsOutput)
}

func (i TemplateArcOptionsArgs) ToTemplateArcOptionsPtrOutput() TemplateArcOptionsPtrOutput {
	return i.ToTemplateArcOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateArcOptionsArgs) ToTemplateArcOptionsPtrOutputWithContext(ctx context.Context) TemplateArcOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcOptionsOutput).ToTemplateArcOptionsPtrOutputWithContext(ctx)
}

// TemplateArcOptionsPtrInput is an input type that accepts TemplateArcOptionsArgs, TemplateArcOptionsPtr and TemplateArcOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateArcOptionsPtrInput` via:
//
//	        TemplateArcOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateArcOptionsPtrInput interface {
	pulumi.Input

	ToTemplateArcOptionsPtrOutput() TemplateArcOptionsPtrOutput
	ToTemplateArcOptionsPtrOutputWithContext(context.Context) TemplateArcOptionsPtrOutput
}

type templateArcOptionsPtrType TemplateArcOptionsArgs

func TemplateArcOptionsPtr(v *TemplateArcOptionsArgs) TemplateArcOptionsPtrInput {
	return (*templateArcOptionsPtrType)(v)
}

func (*templateArcOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcOptions)(nil)).Elem()
}

func (i *templateArcOptionsPtrType) ToTemplateArcOptionsPtrOutput() TemplateArcOptionsPtrOutput {
	return i.ToTemplateArcOptionsPtrOutputWithContext(context.Background())
}

func (i *templateArcOptionsPtrType) ToTemplateArcOptionsPtrOutputWithContext(ctx context.Context) TemplateArcOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArcOptionsPtrOutput)
}

type TemplateArcOptionsOutput struct{ *pulumi.OutputState }

func (TemplateArcOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateArcOptions)(nil)).Elem()
}

func (o TemplateArcOptionsOutput) ToTemplateArcOptionsOutput() TemplateArcOptionsOutput {
	return o
}

func (o TemplateArcOptionsOutput) ToTemplateArcOptionsOutputWithContext(ctx context.Context) TemplateArcOptionsOutput {
	return o
}

func (o TemplateArcOptionsOutput) ToTemplateArcOptionsPtrOutput() TemplateArcOptionsPtrOutput {
	return o.ToTemplateArcOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateArcOptionsOutput) ToTemplateArcOptionsPtrOutputWithContext(ctx context.Context) TemplateArcOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateArcOptions) *TemplateArcOptions {
		return &v
	}).(TemplateArcOptionsPtrOutput)
}

// The arc thickness of a `GaugeChartVisual` .
func (o TemplateArcOptionsOutput) ArcThickness() TemplateArcThicknessPtrOutput {
	return o.ApplyT(func(v TemplateArcOptions) *TemplateArcThickness { return v.ArcThickness }).(TemplateArcThicknessPtrOutput)
}

type TemplateArcOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateArcOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateArcOptions)(nil)).Elem()
}

func (o TemplateArcOptionsPtrOutput) ToTemplateArcOptionsPtrOutput() TemplateArcOptionsPtrOutput {
	return o
}

func (o TemplateArcOptionsPtrOutput) ToTemplateArcOptionsPtrOutputWithContext(ctx context.Context) TemplateArcOptionsPtrOutput {
	return o
}

func (o TemplateArcOptionsPtrOutput) Elem() TemplateArcOptionsOutput {
	return o.ApplyT(func(v *TemplateArcOptions) TemplateArcOptions {
		if v != nil {
			return *v
		}
		var ret TemplateArcOptions
		return ret
	}).(TemplateArcOptionsOutput)
}

// The arc thickness of a `GaugeChartVisual` .
func (o TemplateArcOptionsPtrOutput) ArcThickness() TemplateArcThicknessPtrOutput {
	return o.ApplyT(func(v *TemplateArcOptions) *TemplateArcThickness {
		if v == nil {
			return nil
		}
		return v.ArcThickness
	}).(TemplateArcThicknessPtrOutput)
}

type TemplateAssetOptions struct {
	// Determines the timezone for the analysis.
	Timezone *string `pulumi:"timezone"`
	// Determines the week start day for an analysis.
	WeekStart *TemplateDayOfTheWeek `pulumi:"weekStart"`
}

// TemplateAssetOptionsInput is an input type that accepts TemplateAssetOptionsArgs and TemplateAssetOptionsOutput values.
// You can construct a concrete instance of `TemplateAssetOptionsInput` via:
//
//	TemplateAssetOptionsArgs{...}
type TemplateAssetOptionsInput interface {
	pulumi.Input

	ToTemplateAssetOptionsOutput() TemplateAssetOptionsOutput
	ToTemplateAssetOptionsOutputWithContext(context.Context) TemplateAssetOptionsOutput
}

type TemplateAssetOptionsArgs struct {
	// Determines the timezone for the analysis.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// Determines the week start day for an analysis.
	WeekStart TemplateDayOfTheWeekPtrInput `pulumi:"weekStart"`
}

func (TemplateAssetOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAssetOptions)(nil)).Elem()
}

func (i TemplateAssetOptionsArgs) ToTemplateAssetOptionsOutput() TemplateAssetOptionsOutput {
	return i.ToTemplateAssetOptionsOutputWithContext(context.Background())
}

func (i TemplateAssetOptionsArgs) ToTemplateAssetOptionsOutputWithContext(ctx context.Context) TemplateAssetOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAssetOptionsOutput)
}

func (i TemplateAssetOptionsArgs) ToTemplateAssetOptionsPtrOutput() TemplateAssetOptionsPtrOutput {
	return i.ToTemplateAssetOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateAssetOptionsArgs) ToTemplateAssetOptionsPtrOutputWithContext(ctx context.Context) TemplateAssetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAssetOptionsOutput).ToTemplateAssetOptionsPtrOutputWithContext(ctx)
}

// TemplateAssetOptionsPtrInput is an input type that accepts TemplateAssetOptionsArgs, TemplateAssetOptionsPtr and TemplateAssetOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateAssetOptionsPtrInput` via:
//
//	        TemplateAssetOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateAssetOptionsPtrInput interface {
	pulumi.Input

	ToTemplateAssetOptionsPtrOutput() TemplateAssetOptionsPtrOutput
	ToTemplateAssetOptionsPtrOutputWithContext(context.Context) TemplateAssetOptionsPtrOutput
}

type templateAssetOptionsPtrType TemplateAssetOptionsArgs

func TemplateAssetOptionsPtr(v *TemplateAssetOptionsArgs) TemplateAssetOptionsPtrInput {
	return (*templateAssetOptionsPtrType)(v)
}

func (*templateAssetOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAssetOptions)(nil)).Elem()
}

func (i *templateAssetOptionsPtrType) ToTemplateAssetOptionsPtrOutput() TemplateAssetOptionsPtrOutput {
	return i.ToTemplateAssetOptionsPtrOutputWithContext(context.Background())
}

func (i *templateAssetOptionsPtrType) ToTemplateAssetOptionsPtrOutputWithContext(ctx context.Context) TemplateAssetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAssetOptionsPtrOutput)
}

type TemplateAssetOptionsOutput struct{ *pulumi.OutputState }

func (TemplateAssetOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAssetOptions)(nil)).Elem()
}

func (o TemplateAssetOptionsOutput) ToTemplateAssetOptionsOutput() TemplateAssetOptionsOutput {
	return o
}

func (o TemplateAssetOptionsOutput) ToTemplateAssetOptionsOutputWithContext(ctx context.Context) TemplateAssetOptionsOutput {
	return o
}

func (o TemplateAssetOptionsOutput) ToTemplateAssetOptionsPtrOutput() TemplateAssetOptionsPtrOutput {
	return o.ToTemplateAssetOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateAssetOptionsOutput) ToTemplateAssetOptionsPtrOutputWithContext(ctx context.Context) TemplateAssetOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAssetOptions) *TemplateAssetOptions {
		return &v
	}).(TemplateAssetOptionsPtrOutput)
}

// Determines the timezone for the analysis.
func (o TemplateAssetOptionsOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateAssetOptions) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// Determines the week start day for an analysis.
func (o TemplateAssetOptionsOutput) WeekStart() TemplateDayOfTheWeekPtrOutput {
	return o.ApplyT(func(v TemplateAssetOptions) *TemplateDayOfTheWeek { return v.WeekStart }).(TemplateDayOfTheWeekPtrOutput)
}

type TemplateAssetOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateAssetOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAssetOptions)(nil)).Elem()
}

func (o TemplateAssetOptionsPtrOutput) ToTemplateAssetOptionsPtrOutput() TemplateAssetOptionsPtrOutput {
	return o
}

func (o TemplateAssetOptionsPtrOutput) ToTemplateAssetOptionsPtrOutputWithContext(ctx context.Context) TemplateAssetOptionsPtrOutput {
	return o
}

func (o TemplateAssetOptionsPtrOutput) Elem() TemplateAssetOptionsOutput {
	return o.ApplyT(func(v *TemplateAssetOptions) TemplateAssetOptions {
		if v != nil {
			return *v
		}
		var ret TemplateAssetOptions
		return ret
	}).(TemplateAssetOptionsOutput)
}

// Determines the timezone for the analysis.
func (o TemplateAssetOptionsPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateAssetOptions) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

// Determines the week start day for an analysis.
func (o TemplateAssetOptionsPtrOutput) WeekStart() TemplateDayOfTheWeekPtrOutput {
	return o.ApplyT(func(v *TemplateAssetOptions) *TemplateDayOfTheWeek {
		if v == nil {
			return nil
		}
		return v.WeekStart
	}).(TemplateDayOfTheWeekPtrOutput)
}

type TemplateAttributeAggregationFunction struct {
	// The built-in aggregation functions for attributes.
	//
	// - `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
	SimpleAttributeAggregation *TemplateSimpleAttributeAggregationFunction `pulumi:"simpleAttributeAggregation"`
	// Used by the `UNIQUE_VALUE` aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.
	ValueForMultipleValues *string `pulumi:"valueForMultipleValues"`
}

// TemplateAttributeAggregationFunctionInput is an input type that accepts TemplateAttributeAggregationFunctionArgs and TemplateAttributeAggregationFunctionOutput values.
// You can construct a concrete instance of `TemplateAttributeAggregationFunctionInput` via:
//
//	TemplateAttributeAggregationFunctionArgs{...}
type TemplateAttributeAggregationFunctionInput interface {
	pulumi.Input

	ToTemplateAttributeAggregationFunctionOutput() TemplateAttributeAggregationFunctionOutput
	ToTemplateAttributeAggregationFunctionOutputWithContext(context.Context) TemplateAttributeAggregationFunctionOutput
}

type TemplateAttributeAggregationFunctionArgs struct {
	// The built-in aggregation functions for attributes.
	//
	// - `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
	SimpleAttributeAggregation TemplateSimpleAttributeAggregationFunctionPtrInput `pulumi:"simpleAttributeAggregation"`
	// Used by the `UNIQUE_VALUE` aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.
	ValueForMultipleValues pulumi.StringPtrInput `pulumi:"valueForMultipleValues"`
}

func (TemplateAttributeAggregationFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAttributeAggregationFunction)(nil)).Elem()
}

func (i TemplateAttributeAggregationFunctionArgs) ToTemplateAttributeAggregationFunctionOutput() TemplateAttributeAggregationFunctionOutput {
	return i.ToTemplateAttributeAggregationFunctionOutputWithContext(context.Background())
}

func (i TemplateAttributeAggregationFunctionArgs) ToTemplateAttributeAggregationFunctionOutputWithContext(ctx context.Context) TemplateAttributeAggregationFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAttributeAggregationFunctionOutput)
}

func (i TemplateAttributeAggregationFunctionArgs) ToTemplateAttributeAggregationFunctionPtrOutput() TemplateAttributeAggregationFunctionPtrOutput {
	return i.ToTemplateAttributeAggregationFunctionPtrOutputWithContext(context.Background())
}

func (i TemplateAttributeAggregationFunctionArgs) ToTemplateAttributeAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAttributeAggregationFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAttributeAggregationFunctionOutput).ToTemplateAttributeAggregationFunctionPtrOutputWithContext(ctx)
}

// TemplateAttributeAggregationFunctionPtrInput is an input type that accepts TemplateAttributeAggregationFunctionArgs, TemplateAttributeAggregationFunctionPtr and TemplateAttributeAggregationFunctionPtrOutput values.
// You can construct a concrete instance of `TemplateAttributeAggregationFunctionPtrInput` via:
//
//	        TemplateAttributeAggregationFunctionArgs{...}
//
//	or:
//
//	        nil
type TemplateAttributeAggregationFunctionPtrInput interface {
	pulumi.Input

	ToTemplateAttributeAggregationFunctionPtrOutput() TemplateAttributeAggregationFunctionPtrOutput
	ToTemplateAttributeAggregationFunctionPtrOutputWithContext(context.Context) TemplateAttributeAggregationFunctionPtrOutput
}

type templateAttributeAggregationFunctionPtrType TemplateAttributeAggregationFunctionArgs

func TemplateAttributeAggregationFunctionPtr(v *TemplateAttributeAggregationFunctionArgs) TemplateAttributeAggregationFunctionPtrInput {
	return (*templateAttributeAggregationFunctionPtrType)(v)
}

func (*templateAttributeAggregationFunctionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAttributeAggregationFunction)(nil)).Elem()
}

func (i *templateAttributeAggregationFunctionPtrType) ToTemplateAttributeAggregationFunctionPtrOutput() TemplateAttributeAggregationFunctionPtrOutput {
	return i.ToTemplateAttributeAggregationFunctionPtrOutputWithContext(context.Background())
}

func (i *templateAttributeAggregationFunctionPtrType) ToTemplateAttributeAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAttributeAggregationFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAttributeAggregationFunctionPtrOutput)
}

type TemplateAttributeAggregationFunctionOutput struct{ *pulumi.OutputState }

func (TemplateAttributeAggregationFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAttributeAggregationFunction)(nil)).Elem()
}

func (o TemplateAttributeAggregationFunctionOutput) ToTemplateAttributeAggregationFunctionOutput() TemplateAttributeAggregationFunctionOutput {
	return o
}

func (o TemplateAttributeAggregationFunctionOutput) ToTemplateAttributeAggregationFunctionOutputWithContext(ctx context.Context) TemplateAttributeAggregationFunctionOutput {
	return o
}

func (o TemplateAttributeAggregationFunctionOutput) ToTemplateAttributeAggregationFunctionPtrOutput() TemplateAttributeAggregationFunctionPtrOutput {
	return o.ToTemplateAttributeAggregationFunctionPtrOutputWithContext(context.Background())
}

func (o TemplateAttributeAggregationFunctionOutput) ToTemplateAttributeAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAttributeAggregationFunctionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAttributeAggregationFunction) *TemplateAttributeAggregationFunction {
		return &v
	}).(TemplateAttributeAggregationFunctionPtrOutput)
}

// The built-in aggregation functions for attributes.
//
// - `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
func (o TemplateAttributeAggregationFunctionOutput) SimpleAttributeAggregation() TemplateSimpleAttributeAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateAttributeAggregationFunction) *TemplateSimpleAttributeAggregationFunction {
		return v.SimpleAttributeAggregation
	}).(TemplateSimpleAttributeAggregationFunctionPtrOutput)
}

// Used by the `UNIQUE_VALUE` aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.
func (o TemplateAttributeAggregationFunctionOutput) ValueForMultipleValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateAttributeAggregationFunction) *string { return v.ValueForMultipleValues }).(pulumi.StringPtrOutput)
}

type TemplateAttributeAggregationFunctionPtrOutput struct{ *pulumi.OutputState }

func (TemplateAttributeAggregationFunctionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAttributeAggregationFunction)(nil)).Elem()
}

func (o TemplateAttributeAggregationFunctionPtrOutput) ToTemplateAttributeAggregationFunctionPtrOutput() TemplateAttributeAggregationFunctionPtrOutput {
	return o
}

func (o TemplateAttributeAggregationFunctionPtrOutput) ToTemplateAttributeAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateAttributeAggregationFunctionPtrOutput {
	return o
}

func (o TemplateAttributeAggregationFunctionPtrOutput) Elem() TemplateAttributeAggregationFunctionOutput {
	return o.ApplyT(func(v *TemplateAttributeAggregationFunction) TemplateAttributeAggregationFunction {
		if v != nil {
			return *v
		}
		var ret TemplateAttributeAggregationFunction
		return ret
	}).(TemplateAttributeAggregationFunctionOutput)
}

// The built-in aggregation functions for attributes.
//
// - `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
func (o TemplateAttributeAggregationFunctionPtrOutput) SimpleAttributeAggregation() TemplateSimpleAttributeAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateAttributeAggregationFunction) *TemplateSimpleAttributeAggregationFunction {
		if v == nil {
			return nil
		}
		return v.SimpleAttributeAggregation
	}).(TemplateSimpleAttributeAggregationFunctionPtrOutput)
}

// Used by the `UNIQUE_VALUE` aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.
func (o TemplateAttributeAggregationFunctionPtrOutput) ValueForMultipleValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateAttributeAggregationFunction) *string {
		if v == nil {
			return nil
		}
		return v.ValueForMultipleValues
	}).(pulumi.StringPtrOutput)
}

type TemplateAxisDataOptions struct {
	// The options for an axis with a date field.
	DateAxisOptions *TemplateDateAxisOptions `pulumi:"dateAxisOptions"`
	// The options for an axis with a numeric field.
	NumericAxisOptions *TemplateNumericAxisOptions `pulumi:"numericAxisOptions"`
}

// TemplateAxisDataOptionsInput is an input type that accepts TemplateAxisDataOptionsArgs and TemplateAxisDataOptionsOutput values.
// You can construct a concrete instance of `TemplateAxisDataOptionsInput` via:
//
//	TemplateAxisDataOptionsArgs{...}
type TemplateAxisDataOptionsInput interface {
	pulumi.Input

	ToTemplateAxisDataOptionsOutput() TemplateAxisDataOptionsOutput
	ToTemplateAxisDataOptionsOutputWithContext(context.Context) TemplateAxisDataOptionsOutput
}

type TemplateAxisDataOptionsArgs struct {
	// The options for an axis with a date field.
	DateAxisOptions TemplateDateAxisOptionsPtrInput `pulumi:"dateAxisOptions"`
	// The options for an axis with a numeric field.
	NumericAxisOptions TemplateNumericAxisOptionsPtrInput `pulumi:"numericAxisOptions"`
}

func (TemplateAxisDataOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDataOptions)(nil)).Elem()
}

func (i TemplateAxisDataOptionsArgs) ToTemplateAxisDataOptionsOutput() TemplateAxisDataOptionsOutput {
	return i.ToTemplateAxisDataOptionsOutputWithContext(context.Background())
}

func (i TemplateAxisDataOptionsArgs) ToTemplateAxisDataOptionsOutputWithContext(ctx context.Context) TemplateAxisDataOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDataOptionsOutput)
}

func (i TemplateAxisDataOptionsArgs) ToTemplateAxisDataOptionsPtrOutput() TemplateAxisDataOptionsPtrOutput {
	return i.ToTemplateAxisDataOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateAxisDataOptionsArgs) ToTemplateAxisDataOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDataOptionsOutput).ToTemplateAxisDataOptionsPtrOutputWithContext(ctx)
}

// TemplateAxisDataOptionsPtrInput is an input type that accepts TemplateAxisDataOptionsArgs, TemplateAxisDataOptionsPtr and TemplateAxisDataOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateAxisDataOptionsPtrInput` via:
//
//	        TemplateAxisDataOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisDataOptionsPtrInput interface {
	pulumi.Input

	ToTemplateAxisDataOptionsPtrOutput() TemplateAxisDataOptionsPtrOutput
	ToTemplateAxisDataOptionsPtrOutputWithContext(context.Context) TemplateAxisDataOptionsPtrOutput
}

type templateAxisDataOptionsPtrType TemplateAxisDataOptionsArgs

func TemplateAxisDataOptionsPtr(v *TemplateAxisDataOptionsArgs) TemplateAxisDataOptionsPtrInput {
	return (*templateAxisDataOptionsPtrType)(v)
}

func (*templateAxisDataOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDataOptions)(nil)).Elem()
}

func (i *templateAxisDataOptionsPtrType) ToTemplateAxisDataOptionsPtrOutput() TemplateAxisDataOptionsPtrOutput {
	return i.ToTemplateAxisDataOptionsPtrOutputWithContext(context.Background())
}

func (i *templateAxisDataOptionsPtrType) ToTemplateAxisDataOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDataOptionsPtrOutput)
}

type TemplateAxisDataOptionsOutput struct{ *pulumi.OutputState }

func (TemplateAxisDataOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDataOptions)(nil)).Elem()
}

func (o TemplateAxisDataOptionsOutput) ToTemplateAxisDataOptionsOutput() TemplateAxisDataOptionsOutput {
	return o
}

func (o TemplateAxisDataOptionsOutput) ToTemplateAxisDataOptionsOutputWithContext(ctx context.Context) TemplateAxisDataOptionsOutput {
	return o
}

func (o TemplateAxisDataOptionsOutput) ToTemplateAxisDataOptionsPtrOutput() TemplateAxisDataOptionsPtrOutput {
	return o.ToTemplateAxisDataOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateAxisDataOptionsOutput) ToTemplateAxisDataOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDataOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisDataOptions) *TemplateAxisDataOptions {
		return &v
	}).(TemplateAxisDataOptionsPtrOutput)
}

// The options for an axis with a date field.
func (o TemplateAxisDataOptionsOutput) DateAxisOptions() TemplateDateAxisOptionsPtrOutput {
	return o.ApplyT(func(v TemplateAxisDataOptions) *TemplateDateAxisOptions { return v.DateAxisOptions }).(TemplateDateAxisOptionsPtrOutput)
}

// The options for an axis with a numeric field.
func (o TemplateAxisDataOptionsOutput) NumericAxisOptions() TemplateNumericAxisOptionsPtrOutput {
	return o.ApplyT(func(v TemplateAxisDataOptions) *TemplateNumericAxisOptions { return v.NumericAxisOptions }).(TemplateNumericAxisOptionsPtrOutput)
}

type TemplateAxisDataOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisDataOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDataOptions)(nil)).Elem()
}

func (o TemplateAxisDataOptionsPtrOutput) ToTemplateAxisDataOptionsPtrOutput() TemplateAxisDataOptionsPtrOutput {
	return o
}

func (o TemplateAxisDataOptionsPtrOutput) ToTemplateAxisDataOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDataOptionsPtrOutput {
	return o
}

func (o TemplateAxisDataOptionsPtrOutput) Elem() TemplateAxisDataOptionsOutput {
	return o.ApplyT(func(v *TemplateAxisDataOptions) TemplateAxisDataOptions {
		if v != nil {
			return *v
		}
		var ret TemplateAxisDataOptions
		return ret
	}).(TemplateAxisDataOptionsOutput)
}

// The options for an axis with a date field.
func (o TemplateAxisDataOptionsPtrOutput) DateAxisOptions() TemplateDateAxisOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateAxisDataOptions) *TemplateDateAxisOptions {
		if v == nil {
			return nil
		}
		return v.DateAxisOptions
	}).(TemplateDateAxisOptionsPtrOutput)
}

// The options for an axis with a numeric field.
func (o TemplateAxisDataOptionsPtrOutput) NumericAxisOptions() TemplateNumericAxisOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateAxisDataOptions) *TemplateNumericAxisOptions {
		if v == nil {
			return nil
		}
		return v.NumericAxisOptions
	}).(TemplateNumericAxisOptionsPtrOutput)
}

type TemplateAxisDisplayDataDrivenRange struct {
}

// TemplateAxisDisplayDataDrivenRangeInput is an input type that accepts TemplateAxisDisplayDataDrivenRangeArgs and TemplateAxisDisplayDataDrivenRangeOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayDataDrivenRangeInput` via:
//
//	TemplateAxisDisplayDataDrivenRangeArgs{...}
type TemplateAxisDisplayDataDrivenRangeInput interface {
	pulumi.Input

	ToTemplateAxisDisplayDataDrivenRangeOutput() TemplateAxisDisplayDataDrivenRangeOutput
	ToTemplateAxisDisplayDataDrivenRangeOutputWithContext(context.Context) TemplateAxisDisplayDataDrivenRangeOutput
}

type TemplateAxisDisplayDataDrivenRangeArgs struct {
}

func (TemplateAxisDisplayDataDrivenRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayDataDrivenRange)(nil)).Elem()
}

func (i TemplateAxisDisplayDataDrivenRangeArgs) ToTemplateAxisDisplayDataDrivenRangeOutput() TemplateAxisDisplayDataDrivenRangeOutput {
	return i.ToTemplateAxisDisplayDataDrivenRangeOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayDataDrivenRangeArgs) ToTemplateAxisDisplayDataDrivenRangeOutputWithContext(ctx context.Context) TemplateAxisDisplayDataDrivenRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayDataDrivenRangeOutput)
}

func (i TemplateAxisDisplayDataDrivenRangeArgs) ToTemplateAxisDisplayDataDrivenRangePtrOutput() TemplateAxisDisplayDataDrivenRangePtrOutput {
	return i.ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayDataDrivenRangeArgs) ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayDataDrivenRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayDataDrivenRangeOutput).ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(ctx)
}

// TemplateAxisDisplayDataDrivenRangePtrInput is an input type that accepts TemplateAxisDisplayDataDrivenRangeArgs, TemplateAxisDisplayDataDrivenRangePtr and TemplateAxisDisplayDataDrivenRangePtrOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayDataDrivenRangePtrInput` via:
//
//	        TemplateAxisDisplayDataDrivenRangeArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisDisplayDataDrivenRangePtrInput interface {
	pulumi.Input

	ToTemplateAxisDisplayDataDrivenRangePtrOutput() TemplateAxisDisplayDataDrivenRangePtrOutput
	ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(context.Context) TemplateAxisDisplayDataDrivenRangePtrOutput
}

type templateAxisDisplayDataDrivenRangePtrType TemplateAxisDisplayDataDrivenRangeArgs

func TemplateAxisDisplayDataDrivenRangePtr(v *TemplateAxisDisplayDataDrivenRangeArgs) TemplateAxisDisplayDataDrivenRangePtrInput {
	return (*templateAxisDisplayDataDrivenRangePtrType)(v)
}

func (*templateAxisDisplayDataDrivenRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayDataDrivenRange)(nil)).Elem()
}

func (i *templateAxisDisplayDataDrivenRangePtrType) ToTemplateAxisDisplayDataDrivenRangePtrOutput() TemplateAxisDisplayDataDrivenRangePtrOutput {
	return i.ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(context.Background())
}

func (i *templateAxisDisplayDataDrivenRangePtrType) ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayDataDrivenRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayDataDrivenRangePtrOutput)
}

type TemplateAxisDisplayDataDrivenRangeOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayDataDrivenRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayDataDrivenRange)(nil)).Elem()
}

func (o TemplateAxisDisplayDataDrivenRangeOutput) ToTemplateAxisDisplayDataDrivenRangeOutput() TemplateAxisDisplayDataDrivenRangeOutput {
	return o
}

func (o TemplateAxisDisplayDataDrivenRangeOutput) ToTemplateAxisDisplayDataDrivenRangeOutputWithContext(ctx context.Context) TemplateAxisDisplayDataDrivenRangeOutput {
	return o
}

func (o TemplateAxisDisplayDataDrivenRangeOutput) ToTemplateAxisDisplayDataDrivenRangePtrOutput() TemplateAxisDisplayDataDrivenRangePtrOutput {
	return o.ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(context.Background())
}

func (o TemplateAxisDisplayDataDrivenRangeOutput) ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayDataDrivenRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisDisplayDataDrivenRange) *TemplateAxisDisplayDataDrivenRange {
		return &v
	}).(TemplateAxisDisplayDataDrivenRangePtrOutput)
}

type TemplateAxisDisplayDataDrivenRangePtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayDataDrivenRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayDataDrivenRange)(nil)).Elem()
}

func (o TemplateAxisDisplayDataDrivenRangePtrOutput) ToTemplateAxisDisplayDataDrivenRangePtrOutput() TemplateAxisDisplayDataDrivenRangePtrOutput {
	return o
}

func (o TemplateAxisDisplayDataDrivenRangePtrOutput) ToTemplateAxisDisplayDataDrivenRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayDataDrivenRangePtrOutput {
	return o
}

func (o TemplateAxisDisplayDataDrivenRangePtrOutput) Elem() TemplateAxisDisplayDataDrivenRangeOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayDataDrivenRange) TemplateAxisDisplayDataDrivenRange {
		if v != nil {
			return *v
		}
		var ret TemplateAxisDisplayDataDrivenRange
		return ret
	}).(TemplateAxisDisplayDataDrivenRangeOutput)
}

type TemplateAxisDisplayMinMaxRange struct {
	// The maximum setup for an axis display range.
	Maximum *float64 `pulumi:"maximum"`
	// The minimum setup for an axis display range.
	Minimum *float64 `pulumi:"minimum"`
}

// TemplateAxisDisplayMinMaxRangeInput is an input type that accepts TemplateAxisDisplayMinMaxRangeArgs and TemplateAxisDisplayMinMaxRangeOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayMinMaxRangeInput` via:
//
//	TemplateAxisDisplayMinMaxRangeArgs{...}
type TemplateAxisDisplayMinMaxRangeInput interface {
	pulumi.Input

	ToTemplateAxisDisplayMinMaxRangeOutput() TemplateAxisDisplayMinMaxRangeOutput
	ToTemplateAxisDisplayMinMaxRangeOutputWithContext(context.Context) TemplateAxisDisplayMinMaxRangeOutput
}

type TemplateAxisDisplayMinMaxRangeArgs struct {
	// The maximum setup for an axis display range.
	Maximum pulumi.Float64PtrInput `pulumi:"maximum"`
	// The minimum setup for an axis display range.
	Minimum pulumi.Float64PtrInput `pulumi:"minimum"`
}

func (TemplateAxisDisplayMinMaxRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayMinMaxRange)(nil)).Elem()
}

func (i TemplateAxisDisplayMinMaxRangeArgs) ToTemplateAxisDisplayMinMaxRangeOutput() TemplateAxisDisplayMinMaxRangeOutput {
	return i.ToTemplateAxisDisplayMinMaxRangeOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayMinMaxRangeArgs) ToTemplateAxisDisplayMinMaxRangeOutputWithContext(ctx context.Context) TemplateAxisDisplayMinMaxRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayMinMaxRangeOutput)
}

func (i TemplateAxisDisplayMinMaxRangeArgs) ToTemplateAxisDisplayMinMaxRangePtrOutput() TemplateAxisDisplayMinMaxRangePtrOutput {
	return i.ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayMinMaxRangeArgs) ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayMinMaxRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayMinMaxRangeOutput).ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(ctx)
}

// TemplateAxisDisplayMinMaxRangePtrInput is an input type that accepts TemplateAxisDisplayMinMaxRangeArgs, TemplateAxisDisplayMinMaxRangePtr and TemplateAxisDisplayMinMaxRangePtrOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayMinMaxRangePtrInput` via:
//
//	        TemplateAxisDisplayMinMaxRangeArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisDisplayMinMaxRangePtrInput interface {
	pulumi.Input

	ToTemplateAxisDisplayMinMaxRangePtrOutput() TemplateAxisDisplayMinMaxRangePtrOutput
	ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(context.Context) TemplateAxisDisplayMinMaxRangePtrOutput
}

type templateAxisDisplayMinMaxRangePtrType TemplateAxisDisplayMinMaxRangeArgs

func TemplateAxisDisplayMinMaxRangePtr(v *TemplateAxisDisplayMinMaxRangeArgs) TemplateAxisDisplayMinMaxRangePtrInput {
	return (*templateAxisDisplayMinMaxRangePtrType)(v)
}

func (*templateAxisDisplayMinMaxRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayMinMaxRange)(nil)).Elem()
}

func (i *templateAxisDisplayMinMaxRangePtrType) ToTemplateAxisDisplayMinMaxRangePtrOutput() TemplateAxisDisplayMinMaxRangePtrOutput {
	return i.ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(context.Background())
}

func (i *templateAxisDisplayMinMaxRangePtrType) ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayMinMaxRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayMinMaxRangePtrOutput)
}

type TemplateAxisDisplayMinMaxRangeOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayMinMaxRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayMinMaxRange)(nil)).Elem()
}

func (o TemplateAxisDisplayMinMaxRangeOutput) ToTemplateAxisDisplayMinMaxRangeOutput() TemplateAxisDisplayMinMaxRangeOutput {
	return o
}

func (o TemplateAxisDisplayMinMaxRangeOutput) ToTemplateAxisDisplayMinMaxRangeOutputWithContext(ctx context.Context) TemplateAxisDisplayMinMaxRangeOutput {
	return o
}

func (o TemplateAxisDisplayMinMaxRangeOutput) ToTemplateAxisDisplayMinMaxRangePtrOutput() TemplateAxisDisplayMinMaxRangePtrOutput {
	return o.ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(context.Background())
}

func (o TemplateAxisDisplayMinMaxRangeOutput) ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayMinMaxRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisDisplayMinMaxRange) *TemplateAxisDisplayMinMaxRange {
		return &v
	}).(TemplateAxisDisplayMinMaxRangePtrOutput)
}

// The maximum setup for an axis display range.
func (o TemplateAxisDisplayMinMaxRangeOutput) Maximum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayMinMaxRange) *float64 { return v.Maximum }).(pulumi.Float64PtrOutput)
}

// The minimum setup for an axis display range.
func (o TemplateAxisDisplayMinMaxRangeOutput) Minimum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayMinMaxRange) *float64 { return v.Minimum }).(pulumi.Float64PtrOutput)
}

type TemplateAxisDisplayMinMaxRangePtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayMinMaxRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayMinMaxRange)(nil)).Elem()
}

func (o TemplateAxisDisplayMinMaxRangePtrOutput) ToTemplateAxisDisplayMinMaxRangePtrOutput() TemplateAxisDisplayMinMaxRangePtrOutput {
	return o
}

func (o TemplateAxisDisplayMinMaxRangePtrOutput) ToTemplateAxisDisplayMinMaxRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayMinMaxRangePtrOutput {
	return o
}

func (o TemplateAxisDisplayMinMaxRangePtrOutput) Elem() TemplateAxisDisplayMinMaxRangeOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayMinMaxRange) TemplateAxisDisplayMinMaxRange {
		if v != nil {
			return *v
		}
		var ret TemplateAxisDisplayMinMaxRange
		return ret
	}).(TemplateAxisDisplayMinMaxRangeOutput)
}

// The maximum setup for an axis display range.
func (o TemplateAxisDisplayMinMaxRangePtrOutput) Maximum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayMinMaxRange) *float64 {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.Float64PtrOutput)
}

// The minimum setup for an axis display range.
func (o TemplateAxisDisplayMinMaxRangePtrOutput) Minimum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayMinMaxRange) *float64 {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.Float64PtrOutput)
}

type TemplateAxisDisplayOptions struct {
	// Determines whether or not the axis line is visible.
	AxisLineVisibility interface{} `pulumi:"axisLineVisibility"`
	// String based length that is composed of value and unit in px
	AxisOffset *string `pulumi:"axisOffset"`
	// The data options for an axis.
	DataOptions *TemplateAxisDataOptions `pulumi:"dataOptions"`
	// Determines whether or not the grid line is visible.
	GridLineVisibility interface{} `pulumi:"gridLineVisibility"`
	// The scroll bar options for an axis.
	ScrollbarOptions *TemplateScrollBarOptions `pulumi:"scrollbarOptions"`
	// The tick label options of an axis.
	TickLabelOptions *TemplateAxisTickLabelOptions `pulumi:"tickLabelOptions"`
}

// TemplateAxisDisplayOptionsInput is an input type that accepts TemplateAxisDisplayOptionsArgs and TemplateAxisDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayOptionsInput` via:
//
//	TemplateAxisDisplayOptionsArgs{...}
type TemplateAxisDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateAxisDisplayOptionsOutput() TemplateAxisDisplayOptionsOutput
	ToTemplateAxisDisplayOptionsOutputWithContext(context.Context) TemplateAxisDisplayOptionsOutput
}

type TemplateAxisDisplayOptionsArgs struct {
	// Determines whether or not the axis line is visible.
	AxisLineVisibility pulumi.Input `pulumi:"axisLineVisibility"`
	// String based length that is composed of value and unit in px
	AxisOffset pulumi.StringPtrInput `pulumi:"axisOffset"`
	// The data options for an axis.
	DataOptions TemplateAxisDataOptionsPtrInput `pulumi:"dataOptions"`
	// Determines whether or not the grid line is visible.
	GridLineVisibility pulumi.Input `pulumi:"gridLineVisibility"`
	// The scroll bar options for an axis.
	ScrollbarOptions TemplateScrollBarOptionsPtrInput `pulumi:"scrollbarOptions"`
	// The tick label options of an axis.
	TickLabelOptions TemplateAxisTickLabelOptionsPtrInput `pulumi:"tickLabelOptions"`
}

func (TemplateAxisDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayOptions)(nil)).Elem()
}

func (i TemplateAxisDisplayOptionsArgs) ToTemplateAxisDisplayOptionsOutput() TemplateAxisDisplayOptionsOutput {
	return i.ToTemplateAxisDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayOptionsArgs) ToTemplateAxisDisplayOptionsOutputWithContext(ctx context.Context) TemplateAxisDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayOptionsOutput)
}

func (i TemplateAxisDisplayOptionsArgs) ToTemplateAxisDisplayOptionsPtrOutput() TemplateAxisDisplayOptionsPtrOutput {
	return i.ToTemplateAxisDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayOptionsArgs) ToTemplateAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayOptionsOutput).ToTemplateAxisDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateAxisDisplayOptionsPtrInput is an input type that accepts TemplateAxisDisplayOptionsArgs, TemplateAxisDisplayOptionsPtr and TemplateAxisDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayOptionsPtrInput` via:
//
//	        TemplateAxisDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateAxisDisplayOptionsPtrOutput() TemplateAxisDisplayOptionsPtrOutput
	ToTemplateAxisDisplayOptionsPtrOutputWithContext(context.Context) TemplateAxisDisplayOptionsPtrOutput
}

type templateAxisDisplayOptionsPtrType TemplateAxisDisplayOptionsArgs

func TemplateAxisDisplayOptionsPtr(v *TemplateAxisDisplayOptionsArgs) TemplateAxisDisplayOptionsPtrInput {
	return (*templateAxisDisplayOptionsPtrType)(v)
}

func (*templateAxisDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayOptions)(nil)).Elem()
}

func (i *templateAxisDisplayOptionsPtrType) ToTemplateAxisDisplayOptionsPtrOutput() TemplateAxisDisplayOptionsPtrOutput {
	return i.ToTemplateAxisDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateAxisDisplayOptionsPtrType) ToTemplateAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayOptionsPtrOutput)
}

type TemplateAxisDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayOptions)(nil)).Elem()
}

func (o TemplateAxisDisplayOptionsOutput) ToTemplateAxisDisplayOptionsOutput() TemplateAxisDisplayOptionsOutput {
	return o
}

func (o TemplateAxisDisplayOptionsOutput) ToTemplateAxisDisplayOptionsOutputWithContext(ctx context.Context) TemplateAxisDisplayOptionsOutput {
	return o
}

func (o TemplateAxisDisplayOptionsOutput) ToTemplateAxisDisplayOptionsPtrOutput() TemplateAxisDisplayOptionsPtrOutput {
	return o.ToTemplateAxisDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateAxisDisplayOptionsOutput) ToTemplateAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisDisplayOptions) *TemplateAxisDisplayOptions {
		return &v
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// Determines whether or not the axis line is visible.
func (o TemplateAxisDisplayOptionsOutput) AxisLineVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateAxisDisplayOptions) interface{} { return v.AxisLineVisibility }).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateAxisDisplayOptionsOutput) AxisOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayOptions) *string { return v.AxisOffset }).(pulumi.StringPtrOutput)
}

// The data options for an axis.
func (o TemplateAxisDisplayOptionsOutput) DataOptions() TemplateAxisDataOptionsPtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayOptions) *TemplateAxisDataOptions { return v.DataOptions }).(TemplateAxisDataOptionsPtrOutput)
}

// Determines whether or not the grid line is visible.
func (o TemplateAxisDisplayOptionsOutput) GridLineVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateAxisDisplayOptions) interface{} { return v.GridLineVisibility }).(pulumi.AnyOutput)
}

// The scroll bar options for an axis.
func (o TemplateAxisDisplayOptionsOutput) ScrollbarOptions() TemplateScrollBarOptionsPtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayOptions) *TemplateScrollBarOptions { return v.ScrollbarOptions }).(TemplateScrollBarOptionsPtrOutput)
}

// The tick label options of an axis.
func (o TemplateAxisDisplayOptionsOutput) TickLabelOptions() TemplateAxisTickLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayOptions) *TemplateAxisTickLabelOptions { return v.TickLabelOptions }).(TemplateAxisTickLabelOptionsPtrOutput)
}

type TemplateAxisDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayOptions)(nil)).Elem()
}

func (o TemplateAxisDisplayOptionsPtrOutput) ToTemplateAxisDisplayOptionsPtrOutput() TemplateAxisDisplayOptionsPtrOutput {
	return o
}

func (o TemplateAxisDisplayOptionsPtrOutput) ToTemplateAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisDisplayOptionsPtrOutput {
	return o
}

func (o TemplateAxisDisplayOptionsPtrOutput) Elem() TemplateAxisDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayOptions) TemplateAxisDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateAxisDisplayOptions
		return ret
	}).(TemplateAxisDisplayOptionsOutput)
}

// Determines whether or not the axis line is visible.
func (o TemplateAxisDisplayOptionsPtrOutput) AxisLineVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.AxisLineVisibility
	}).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateAxisDisplayOptionsPtrOutput) AxisOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayOptions) *string {
		if v == nil {
			return nil
		}
		return v.AxisOffset
	}).(pulumi.StringPtrOutput)
}

// The data options for an axis.
func (o TemplateAxisDisplayOptionsPtrOutput) DataOptions() TemplateAxisDataOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayOptions) *TemplateAxisDataOptions {
		if v == nil {
			return nil
		}
		return v.DataOptions
	}).(TemplateAxisDataOptionsPtrOutput)
}

// Determines whether or not the grid line is visible.
func (o TemplateAxisDisplayOptionsPtrOutput) GridLineVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.GridLineVisibility
	}).(pulumi.AnyOutput)
}

// The scroll bar options for an axis.
func (o TemplateAxisDisplayOptionsPtrOutput) ScrollbarOptions() TemplateScrollBarOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayOptions) *TemplateScrollBarOptions {
		if v == nil {
			return nil
		}
		return v.ScrollbarOptions
	}).(TemplateScrollBarOptionsPtrOutput)
}

// The tick label options of an axis.
func (o TemplateAxisDisplayOptionsPtrOutput) TickLabelOptions() TemplateAxisTickLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayOptions) *TemplateAxisTickLabelOptions {
		if v == nil {
			return nil
		}
		return v.TickLabelOptions
	}).(TemplateAxisTickLabelOptionsPtrOutput)
}

type TemplateAxisDisplayRange struct {
	// The data-driven setup of an axis display range.
	DataDriven *TemplateAxisDisplayDataDrivenRange `pulumi:"dataDriven"`
	// The minimum and maximum setup of an axis display range.
	MinMax *TemplateAxisDisplayMinMaxRange `pulumi:"minMax"`
}

// TemplateAxisDisplayRangeInput is an input type that accepts TemplateAxisDisplayRangeArgs and TemplateAxisDisplayRangeOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayRangeInput` via:
//
//	TemplateAxisDisplayRangeArgs{...}
type TemplateAxisDisplayRangeInput interface {
	pulumi.Input

	ToTemplateAxisDisplayRangeOutput() TemplateAxisDisplayRangeOutput
	ToTemplateAxisDisplayRangeOutputWithContext(context.Context) TemplateAxisDisplayRangeOutput
}

type TemplateAxisDisplayRangeArgs struct {
	// The data-driven setup of an axis display range.
	DataDriven TemplateAxisDisplayDataDrivenRangePtrInput `pulumi:"dataDriven"`
	// The minimum and maximum setup of an axis display range.
	MinMax TemplateAxisDisplayMinMaxRangePtrInput `pulumi:"minMax"`
}

func (TemplateAxisDisplayRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayRange)(nil)).Elem()
}

func (i TemplateAxisDisplayRangeArgs) ToTemplateAxisDisplayRangeOutput() TemplateAxisDisplayRangeOutput {
	return i.ToTemplateAxisDisplayRangeOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayRangeArgs) ToTemplateAxisDisplayRangeOutputWithContext(ctx context.Context) TemplateAxisDisplayRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayRangeOutput)
}

func (i TemplateAxisDisplayRangeArgs) ToTemplateAxisDisplayRangePtrOutput() TemplateAxisDisplayRangePtrOutput {
	return i.ToTemplateAxisDisplayRangePtrOutputWithContext(context.Background())
}

func (i TemplateAxisDisplayRangeArgs) ToTemplateAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayRangeOutput).ToTemplateAxisDisplayRangePtrOutputWithContext(ctx)
}

// TemplateAxisDisplayRangePtrInput is an input type that accepts TemplateAxisDisplayRangeArgs, TemplateAxisDisplayRangePtr and TemplateAxisDisplayRangePtrOutput values.
// You can construct a concrete instance of `TemplateAxisDisplayRangePtrInput` via:
//
//	        TemplateAxisDisplayRangeArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisDisplayRangePtrInput interface {
	pulumi.Input

	ToTemplateAxisDisplayRangePtrOutput() TemplateAxisDisplayRangePtrOutput
	ToTemplateAxisDisplayRangePtrOutputWithContext(context.Context) TemplateAxisDisplayRangePtrOutput
}

type templateAxisDisplayRangePtrType TemplateAxisDisplayRangeArgs

func TemplateAxisDisplayRangePtr(v *TemplateAxisDisplayRangeArgs) TemplateAxisDisplayRangePtrInput {
	return (*templateAxisDisplayRangePtrType)(v)
}

func (*templateAxisDisplayRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayRange)(nil)).Elem()
}

func (i *templateAxisDisplayRangePtrType) ToTemplateAxisDisplayRangePtrOutput() TemplateAxisDisplayRangePtrOutput {
	return i.ToTemplateAxisDisplayRangePtrOutputWithContext(context.Background())
}

func (i *templateAxisDisplayRangePtrType) ToTemplateAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisDisplayRangePtrOutput)
}

type TemplateAxisDisplayRangeOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisDisplayRange)(nil)).Elem()
}

func (o TemplateAxisDisplayRangeOutput) ToTemplateAxisDisplayRangeOutput() TemplateAxisDisplayRangeOutput {
	return o
}

func (o TemplateAxisDisplayRangeOutput) ToTemplateAxisDisplayRangeOutputWithContext(ctx context.Context) TemplateAxisDisplayRangeOutput {
	return o
}

func (o TemplateAxisDisplayRangeOutput) ToTemplateAxisDisplayRangePtrOutput() TemplateAxisDisplayRangePtrOutput {
	return o.ToTemplateAxisDisplayRangePtrOutputWithContext(context.Background())
}

func (o TemplateAxisDisplayRangeOutput) ToTemplateAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisDisplayRange) *TemplateAxisDisplayRange {
		return &v
	}).(TemplateAxisDisplayRangePtrOutput)
}

// The data-driven setup of an axis display range.
func (o TemplateAxisDisplayRangeOutput) DataDriven() TemplateAxisDisplayDataDrivenRangePtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayRange) *TemplateAxisDisplayDataDrivenRange { return v.DataDriven }).(TemplateAxisDisplayDataDrivenRangePtrOutput)
}

// The minimum and maximum setup of an axis display range.
func (o TemplateAxisDisplayRangeOutput) MinMax() TemplateAxisDisplayMinMaxRangePtrOutput {
	return o.ApplyT(func(v TemplateAxisDisplayRange) *TemplateAxisDisplayMinMaxRange { return v.MinMax }).(TemplateAxisDisplayMinMaxRangePtrOutput)
}

type TemplateAxisDisplayRangePtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisDisplayRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisDisplayRange)(nil)).Elem()
}

func (o TemplateAxisDisplayRangePtrOutput) ToTemplateAxisDisplayRangePtrOutput() TemplateAxisDisplayRangePtrOutput {
	return o
}

func (o TemplateAxisDisplayRangePtrOutput) ToTemplateAxisDisplayRangePtrOutputWithContext(ctx context.Context) TemplateAxisDisplayRangePtrOutput {
	return o
}

func (o TemplateAxisDisplayRangePtrOutput) Elem() TemplateAxisDisplayRangeOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayRange) TemplateAxisDisplayRange {
		if v != nil {
			return *v
		}
		var ret TemplateAxisDisplayRange
		return ret
	}).(TemplateAxisDisplayRangeOutput)
}

// The data-driven setup of an axis display range.
func (o TemplateAxisDisplayRangePtrOutput) DataDriven() TemplateAxisDisplayDataDrivenRangePtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayRange) *TemplateAxisDisplayDataDrivenRange {
		if v == nil {
			return nil
		}
		return v.DataDriven
	}).(TemplateAxisDisplayDataDrivenRangePtrOutput)
}

// The minimum and maximum setup of an axis display range.
func (o TemplateAxisDisplayRangePtrOutput) MinMax() TemplateAxisDisplayMinMaxRangePtrOutput {
	return o.ApplyT(func(v *TemplateAxisDisplayRange) *TemplateAxisDisplayMinMaxRange {
		if v == nil {
			return nil
		}
		return v.MinMax
	}).(TemplateAxisDisplayMinMaxRangePtrOutput)
}

type TemplateAxisLabelOptions struct {
	// The options that indicate which field the label belongs to.
	ApplyTo *TemplateAxisLabelReferenceOptions `pulumi:"applyTo"`
	// The text for the axis label.
	CustomLabel *string `pulumi:"customLabel"`
	// The font configuration of the axis label.
	FontConfiguration *TemplateFontConfiguration `pulumi:"fontConfiguration"`
}

// TemplateAxisLabelOptionsInput is an input type that accepts TemplateAxisLabelOptionsArgs and TemplateAxisLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateAxisLabelOptionsInput` via:
//
//	TemplateAxisLabelOptionsArgs{...}
type TemplateAxisLabelOptionsInput interface {
	pulumi.Input

	ToTemplateAxisLabelOptionsOutput() TemplateAxisLabelOptionsOutput
	ToTemplateAxisLabelOptionsOutputWithContext(context.Context) TemplateAxisLabelOptionsOutput
}

type TemplateAxisLabelOptionsArgs struct {
	// The options that indicate which field the label belongs to.
	ApplyTo TemplateAxisLabelReferenceOptionsPtrInput `pulumi:"applyTo"`
	// The text for the axis label.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The font configuration of the axis label.
	FontConfiguration TemplateFontConfigurationPtrInput `pulumi:"fontConfiguration"`
}

func (TemplateAxisLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLabelOptions)(nil)).Elem()
}

func (i TemplateAxisLabelOptionsArgs) ToTemplateAxisLabelOptionsOutput() TemplateAxisLabelOptionsOutput {
	return i.ToTemplateAxisLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateAxisLabelOptionsArgs) ToTemplateAxisLabelOptionsOutputWithContext(ctx context.Context) TemplateAxisLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLabelOptionsOutput)
}

// TemplateAxisLabelOptionsArrayInput is an input type that accepts TemplateAxisLabelOptionsArray and TemplateAxisLabelOptionsArrayOutput values.
// You can construct a concrete instance of `TemplateAxisLabelOptionsArrayInput` via:
//
//	TemplateAxisLabelOptionsArray{ TemplateAxisLabelOptionsArgs{...} }
type TemplateAxisLabelOptionsArrayInput interface {
	pulumi.Input

	ToTemplateAxisLabelOptionsArrayOutput() TemplateAxisLabelOptionsArrayOutput
	ToTemplateAxisLabelOptionsArrayOutputWithContext(context.Context) TemplateAxisLabelOptionsArrayOutput
}

type TemplateAxisLabelOptionsArray []TemplateAxisLabelOptionsInput

func (TemplateAxisLabelOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateAxisLabelOptions)(nil)).Elem()
}

func (i TemplateAxisLabelOptionsArray) ToTemplateAxisLabelOptionsArrayOutput() TemplateAxisLabelOptionsArrayOutput {
	return i.ToTemplateAxisLabelOptionsArrayOutputWithContext(context.Background())
}

func (i TemplateAxisLabelOptionsArray) ToTemplateAxisLabelOptionsArrayOutputWithContext(ctx context.Context) TemplateAxisLabelOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLabelOptionsArrayOutput)
}

type TemplateAxisLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateAxisLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLabelOptions)(nil)).Elem()
}

func (o TemplateAxisLabelOptionsOutput) ToTemplateAxisLabelOptionsOutput() TemplateAxisLabelOptionsOutput {
	return o
}

func (o TemplateAxisLabelOptionsOutput) ToTemplateAxisLabelOptionsOutputWithContext(ctx context.Context) TemplateAxisLabelOptionsOutput {
	return o
}

// The options that indicate which field the label belongs to.
func (o TemplateAxisLabelOptionsOutput) ApplyTo() TemplateAxisLabelReferenceOptionsPtrOutput {
	return o.ApplyT(func(v TemplateAxisLabelOptions) *TemplateAxisLabelReferenceOptions { return v.ApplyTo }).(TemplateAxisLabelReferenceOptionsPtrOutput)
}

// The text for the axis label.
func (o TemplateAxisLabelOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateAxisLabelOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The font configuration of the axis label.
func (o TemplateAxisLabelOptionsOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateAxisLabelOptions) *TemplateFontConfiguration { return v.FontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

type TemplateAxisLabelOptionsArrayOutput struct{ *pulumi.OutputState }

func (TemplateAxisLabelOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateAxisLabelOptions)(nil)).Elem()
}

func (o TemplateAxisLabelOptionsArrayOutput) ToTemplateAxisLabelOptionsArrayOutput() TemplateAxisLabelOptionsArrayOutput {
	return o
}

func (o TemplateAxisLabelOptionsArrayOutput) ToTemplateAxisLabelOptionsArrayOutputWithContext(ctx context.Context) TemplateAxisLabelOptionsArrayOutput {
	return o
}

func (o TemplateAxisLabelOptionsArrayOutput) Index(i pulumi.IntInput) TemplateAxisLabelOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateAxisLabelOptions {
		return vs[0].([]TemplateAxisLabelOptions)[vs[1].(int)]
	}).(TemplateAxisLabelOptionsOutput)
}

type TemplateAxisLabelReferenceOptions struct {
	// The column that the axis label is targeted to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The field that the axis label is targeted to.
	FieldId string `pulumi:"fieldId"`
}

// TemplateAxisLabelReferenceOptionsInput is an input type that accepts TemplateAxisLabelReferenceOptionsArgs and TemplateAxisLabelReferenceOptionsOutput values.
// You can construct a concrete instance of `TemplateAxisLabelReferenceOptionsInput` via:
//
//	TemplateAxisLabelReferenceOptionsArgs{...}
type TemplateAxisLabelReferenceOptionsInput interface {
	pulumi.Input

	ToTemplateAxisLabelReferenceOptionsOutput() TemplateAxisLabelReferenceOptionsOutput
	ToTemplateAxisLabelReferenceOptionsOutputWithContext(context.Context) TemplateAxisLabelReferenceOptionsOutput
}

type TemplateAxisLabelReferenceOptionsArgs struct {
	// The column that the axis label is targeted to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The field that the axis label is targeted to.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
}

func (TemplateAxisLabelReferenceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLabelReferenceOptions)(nil)).Elem()
}

func (i TemplateAxisLabelReferenceOptionsArgs) ToTemplateAxisLabelReferenceOptionsOutput() TemplateAxisLabelReferenceOptionsOutput {
	return i.ToTemplateAxisLabelReferenceOptionsOutputWithContext(context.Background())
}

func (i TemplateAxisLabelReferenceOptionsArgs) ToTemplateAxisLabelReferenceOptionsOutputWithContext(ctx context.Context) TemplateAxisLabelReferenceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLabelReferenceOptionsOutput)
}

func (i TemplateAxisLabelReferenceOptionsArgs) ToTemplateAxisLabelReferenceOptionsPtrOutput() TemplateAxisLabelReferenceOptionsPtrOutput {
	return i.ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateAxisLabelReferenceOptionsArgs) ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisLabelReferenceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLabelReferenceOptionsOutput).ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(ctx)
}

// TemplateAxisLabelReferenceOptionsPtrInput is an input type that accepts TemplateAxisLabelReferenceOptionsArgs, TemplateAxisLabelReferenceOptionsPtr and TemplateAxisLabelReferenceOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateAxisLabelReferenceOptionsPtrInput` via:
//
//	        TemplateAxisLabelReferenceOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisLabelReferenceOptionsPtrInput interface {
	pulumi.Input

	ToTemplateAxisLabelReferenceOptionsPtrOutput() TemplateAxisLabelReferenceOptionsPtrOutput
	ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(context.Context) TemplateAxisLabelReferenceOptionsPtrOutput
}

type templateAxisLabelReferenceOptionsPtrType TemplateAxisLabelReferenceOptionsArgs

func TemplateAxisLabelReferenceOptionsPtr(v *TemplateAxisLabelReferenceOptionsArgs) TemplateAxisLabelReferenceOptionsPtrInput {
	return (*templateAxisLabelReferenceOptionsPtrType)(v)
}

func (*templateAxisLabelReferenceOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisLabelReferenceOptions)(nil)).Elem()
}

func (i *templateAxisLabelReferenceOptionsPtrType) ToTemplateAxisLabelReferenceOptionsPtrOutput() TemplateAxisLabelReferenceOptionsPtrOutput {
	return i.ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(context.Background())
}

func (i *templateAxisLabelReferenceOptionsPtrType) ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisLabelReferenceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLabelReferenceOptionsPtrOutput)
}

type TemplateAxisLabelReferenceOptionsOutput struct{ *pulumi.OutputState }

func (TemplateAxisLabelReferenceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLabelReferenceOptions)(nil)).Elem()
}

func (o TemplateAxisLabelReferenceOptionsOutput) ToTemplateAxisLabelReferenceOptionsOutput() TemplateAxisLabelReferenceOptionsOutput {
	return o
}

func (o TemplateAxisLabelReferenceOptionsOutput) ToTemplateAxisLabelReferenceOptionsOutputWithContext(ctx context.Context) TemplateAxisLabelReferenceOptionsOutput {
	return o
}

func (o TemplateAxisLabelReferenceOptionsOutput) ToTemplateAxisLabelReferenceOptionsPtrOutput() TemplateAxisLabelReferenceOptionsPtrOutput {
	return o.ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateAxisLabelReferenceOptionsOutput) ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisLabelReferenceOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisLabelReferenceOptions) *TemplateAxisLabelReferenceOptions {
		return &v
	}).(TemplateAxisLabelReferenceOptionsPtrOutput)
}

// The column that the axis label is targeted to.
func (o TemplateAxisLabelReferenceOptionsOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateAxisLabelReferenceOptions) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The field that the axis label is targeted to.
func (o TemplateAxisLabelReferenceOptionsOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateAxisLabelReferenceOptions) string { return v.FieldId }).(pulumi.StringOutput)
}

type TemplateAxisLabelReferenceOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisLabelReferenceOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisLabelReferenceOptions)(nil)).Elem()
}

func (o TemplateAxisLabelReferenceOptionsPtrOutput) ToTemplateAxisLabelReferenceOptionsPtrOutput() TemplateAxisLabelReferenceOptionsPtrOutput {
	return o
}

func (o TemplateAxisLabelReferenceOptionsPtrOutput) ToTemplateAxisLabelReferenceOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisLabelReferenceOptionsPtrOutput {
	return o
}

func (o TemplateAxisLabelReferenceOptionsPtrOutput) Elem() TemplateAxisLabelReferenceOptionsOutput {
	return o.ApplyT(func(v *TemplateAxisLabelReferenceOptions) TemplateAxisLabelReferenceOptions {
		if v != nil {
			return *v
		}
		var ret TemplateAxisLabelReferenceOptions
		return ret
	}).(TemplateAxisLabelReferenceOptionsOutput)
}

// The column that the axis label is targeted to.
func (o TemplateAxisLabelReferenceOptionsPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateAxisLabelReferenceOptions) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The field that the axis label is targeted to.
func (o TemplateAxisLabelReferenceOptionsPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateAxisLabelReferenceOptions) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

type TemplateAxisLinearScale struct {
	// The step count setup of a linear axis.
	StepCount *float64 `pulumi:"stepCount"`
	// The step size setup of a linear axis.
	StepSize *float64 `pulumi:"stepSize"`
}

// TemplateAxisLinearScaleInput is an input type that accepts TemplateAxisLinearScaleArgs and TemplateAxisLinearScaleOutput values.
// You can construct a concrete instance of `TemplateAxisLinearScaleInput` via:
//
//	TemplateAxisLinearScaleArgs{...}
type TemplateAxisLinearScaleInput interface {
	pulumi.Input

	ToTemplateAxisLinearScaleOutput() TemplateAxisLinearScaleOutput
	ToTemplateAxisLinearScaleOutputWithContext(context.Context) TemplateAxisLinearScaleOutput
}

type TemplateAxisLinearScaleArgs struct {
	// The step count setup of a linear axis.
	StepCount pulumi.Float64PtrInput `pulumi:"stepCount"`
	// The step size setup of a linear axis.
	StepSize pulumi.Float64PtrInput `pulumi:"stepSize"`
}

func (TemplateAxisLinearScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLinearScale)(nil)).Elem()
}

func (i TemplateAxisLinearScaleArgs) ToTemplateAxisLinearScaleOutput() TemplateAxisLinearScaleOutput {
	return i.ToTemplateAxisLinearScaleOutputWithContext(context.Background())
}

func (i TemplateAxisLinearScaleArgs) ToTemplateAxisLinearScaleOutputWithContext(ctx context.Context) TemplateAxisLinearScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLinearScaleOutput)
}

func (i TemplateAxisLinearScaleArgs) ToTemplateAxisLinearScalePtrOutput() TemplateAxisLinearScalePtrOutput {
	return i.ToTemplateAxisLinearScalePtrOutputWithContext(context.Background())
}

func (i TemplateAxisLinearScaleArgs) ToTemplateAxisLinearScalePtrOutputWithContext(ctx context.Context) TemplateAxisLinearScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLinearScaleOutput).ToTemplateAxisLinearScalePtrOutputWithContext(ctx)
}

// TemplateAxisLinearScalePtrInput is an input type that accepts TemplateAxisLinearScaleArgs, TemplateAxisLinearScalePtr and TemplateAxisLinearScalePtrOutput values.
// You can construct a concrete instance of `TemplateAxisLinearScalePtrInput` via:
//
//	        TemplateAxisLinearScaleArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisLinearScalePtrInput interface {
	pulumi.Input

	ToTemplateAxisLinearScalePtrOutput() TemplateAxisLinearScalePtrOutput
	ToTemplateAxisLinearScalePtrOutputWithContext(context.Context) TemplateAxisLinearScalePtrOutput
}

type templateAxisLinearScalePtrType TemplateAxisLinearScaleArgs

func TemplateAxisLinearScalePtr(v *TemplateAxisLinearScaleArgs) TemplateAxisLinearScalePtrInput {
	return (*templateAxisLinearScalePtrType)(v)
}

func (*templateAxisLinearScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisLinearScale)(nil)).Elem()
}

func (i *templateAxisLinearScalePtrType) ToTemplateAxisLinearScalePtrOutput() TemplateAxisLinearScalePtrOutput {
	return i.ToTemplateAxisLinearScalePtrOutputWithContext(context.Background())
}

func (i *templateAxisLinearScalePtrType) ToTemplateAxisLinearScalePtrOutputWithContext(ctx context.Context) TemplateAxisLinearScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLinearScalePtrOutput)
}

type TemplateAxisLinearScaleOutput struct{ *pulumi.OutputState }

func (TemplateAxisLinearScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLinearScale)(nil)).Elem()
}

func (o TemplateAxisLinearScaleOutput) ToTemplateAxisLinearScaleOutput() TemplateAxisLinearScaleOutput {
	return o
}

func (o TemplateAxisLinearScaleOutput) ToTemplateAxisLinearScaleOutputWithContext(ctx context.Context) TemplateAxisLinearScaleOutput {
	return o
}

func (o TemplateAxisLinearScaleOutput) ToTemplateAxisLinearScalePtrOutput() TemplateAxisLinearScalePtrOutput {
	return o.ToTemplateAxisLinearScalePtrOutputWithContext(context.Background())
}

func (o TemplateAxisLinearScaleOutput) ToTemplateAxisLinearScalePtrOutputWithContext(ctx context.Context) TemplateAxisLinearScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisLinearScale) *TemplateAxisLinearScale {
		return &v
	}).(TemplateAxisLinearScalePtrOutput)
}

// The step count setup of a linear axis.
func (o TemplateAxisLinearScaleOutput) StepCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateAxisLinearScale) *float64 { return v.StepCount }).(pulumi.Float64PtrOutput)
}

// The step size setup of a linear axis.
func (o TemplateAxisLinearScaleOutput) StepSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateAxisLinearScale) *float64 { return v.StepSize }).(pulumi.Float64PtrOutput)
}

type TemplateAxisLinearScalePtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisLinearScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisLinearScale)(nil)).Elem()
}

func (o TemplateAxisLinearScalePtrOutput) ToTemplateAxisLinearScalePtrOutput() TemplateAxisLinearScalePtrOutput {
	return o
}

func (o TemplateAxisLinearScalePtrOutput) ToTemplateAxisLinearScalePtrOutputWithContext(ctx context.Context) TemplateAxisLinearScalePtrOutput {
	return o
}

func (o TemplateAxisLinearScalePtrOutput) Elem() TemplateAxisLinearScaleOutput {
	return o.ApplyT(func(v *TemplateAxisLinearScale) TemplateAxisLinearScale {
		if v != nil {
			return *v
		}
		var ret TemplateAxisLinearScale
		return ret
	}).(TemplateAxisLinearScaleOutput)
}

// The step count setup of a linear axis.
func (o TemplateAxisLinearScalePtrOutput) StepCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateAxisLinearScale) *float64 {
		if v == nil {
			return nil
		}
		return v.StepCount
	}).(pulumi.Float64PtrOutput)
}

// The step size setup of a linear axis.
func (o TemplateAxisLinearScalePtrOutput) StepSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateAxisLinearScale) *float64 {
		if v == nil {
			return nil
		}
		return v.StepSize
	}).(pulumi.Float64PtrOutput)
}

type TemplateAxisLogarithmicScale struct {
	// The base setup of a logarithmic axis scale.
	Base *float64 `pulumi:"base"`
}

// TemplateAxisLogarithmicScaleInput is an input type that accepts TemplateAxisLogarithmicScaleArgs and TemplateAxisLogarithmicScaleOutput values.
// You can construct a concrete instance of `TemplateAxisLogarithmicScaleInput` via:
//
//	TemplateAxisLogarithmicScaleArgs{...}
type TemplateAxisLogarithmicScaleInput interface {
	pulumi.Input

	ToTemplateAxisLogarithmicScaleOutput() TemplateAxisLogarithmicScaleOutput
	ToTemplateAxisLogarithmicScaleOutputWithContext(context.Context) TemplateAxisLogarithmicScaleOutput
}

type TemplateAxisLogarithmicScaleArgs struct {
	// The base setup of a logarithmic axis scale.
	Base pulumi.Float64PtrInput `pulumi:"base"`
}

func (TemplateAxisLogarithmicScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLogarithmicScale)(nil)).Elem()
}

func (i TemplateAxisLogarithmicScaleArgs) ToTemplateAxisLogarithmicScaleOutput() TemplateAxisLogarithmicScaleOutput {
	return i.ToTemplateAxisLogarithmicScaleOutputWithContext(context.Background())
}

func (i TemplateAxisLogarithmicScaleArgs) ToTemplateAxisLogarithmicScaleOutputWithContext(ctx context.Context) TemplateAxisLogarithmicScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLogarithmicScaleOutput)
}

func (i TemplateAxisLogarithmicScaleArgs) ToTemplateAxisLogarithmicScalePtrOutput() TemplateAxisLogarithmicScalePtrOutput {
	return i.ToTemplateAxisLogarithmicScalePtrOutputWithContext(context.Background())
}

func (i TemplateAxisLogarithmicScaleArgs) ToTemplateAxisLogarithmicScalePtrOutputWithContext(ctx context.Context) TemplateAxisLogarithmicScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLogarithmicScaleOutput).ToTemplateAxisLogarithmicScalePtrOutputWithContext(ctx)
}

// TemplateAxisLogarithmicScalePtrInput is an input type that accepts TemplateAxisLogarithmicScaleArgs, TemplateAxisLogarithmicScalePtr and TemplateAxisLogarithmicScalePtrOutput values.
// You can construct a concrete instance of `TemplateAxisLogarithmicScalePtrInput` via:
//
//	        TemplateAxisLogarithmicScaleArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisLogarithmicScalePtrInput interface {
	pulumi.Input

	ToTemplateAxisLogarithmicScalePtrOutput() TemplateAxisLogarithmicScalePtrOutput
	ToTemplateAxisLogarithmicScalePtrOutputWithContext(context.Context) TemplateAxisLogarithmicScalePtrOutput
}

type templateAxisLogarithmicScalePtrType TemplateAxisLogarithmicScaleArgs

func TemplateAxisLogarithmicScalePtr(v *TemplateAxisLogarithmicScaleArgs) TemplateAxisLogarithmicScalePtrInput {
	return (*templateAxisLogarithmicScalePtrType)(v)
}

func (*templateAxisLogarithmicScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisLogarithmicScale)(nil)).Elem()
}

func (i *templateAxisLogarithmicScalePtrType) ToTemplateAxisLogarithmicScalePtrOutput() TemplateAxisLogarithmicScalePtrOutput {
	return i.ToTemplateAxisLogarithmicScalePtrOutputWithContext(context.Background())
}

func (i *templateAxisLogarithmicScalePtrType) ToTemplateAxisLogarithmicScalePtrOutputWithContext(ctx context.Context) TemplateAxisLogarithmicScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisLogarithmicScalePtrOutput)
}

type TemplateAxisLogarithmicScaleOutput struct{ *pulumi.OutputState }

func (TemplateAxisLogarithmicScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisLogarithmicScale)(nil)).Elem()
}

func (o TemplateAxisLogarithmicScaleOutput) ToTemplateAxisLogarithmicScaleOutput() TemplateAxisLogarithmicScaleOutput {
	return o
}

func (o TemplateAxisLogarithmicScaleOutput) ToTemplateAxisLogarithmicScaleOutputWithContext(ctx context.Context) TemplateAxisLogarithmicScaleOutput {
	return o
}

func (o TemplateAxisLogarithmicScaleOutput) ToTemplateAxisLogarithmicScalePtrOutput() TemplateAxisLogarithmicScalePtrOutput {
	return o.ToTemplateAxisLogarithmicScalePtrOutputWithContext(context.Background())
}

func (o TemplateAxisLogarithmicScaleOutput) ToTemplateAxisLogarithmicScalePtrOutputWithContext(ctx context.Context) TemplateAxisLogarithmicScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisLogarithmicScale) *TemplateAxisLogarithmicScale {
		return &v
	}).(TemplateAxisLogarithmicScalePtrOutput)
}

// The base setup of a logarithmic axis scale.
func (o TemplateAxisLogarithmicScaleOutput) Base() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateAxisLogarithmicScale) *float64 { return v.Base }).(pulumi.Float64PtrOutput)
}

type TemplateAxisLogarithmicScalePtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisLogarithmicScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisLogarithmicScale)(nil)).Elem()
}

func (o TemplateAxisLogarithmicScalePtrOutput) ToTemplateAxisLogarithmicScalePtrOutput() TemplateAxisLogarithmicScalePtrOutput {
	return o
}

func (o TemplateAxisLogarithmicScalePtrOutput) ToTemplateAxisLogarithmicScalePtrOutputWithContext(ctx context.Context) TemplateAxisLogarithmicScalePtrOutput {
	return o
}

func (o TemplateAxisLogarithmicScalePtrOutput) Elem() TemplateAxisLogarithmicScaleOutput {
	return o.ApplyT(func(v *TemplateAxisLogarithmicScale) TemplateAxisLogarithmicScale {
		if v != nil {
			return *v
		}
		var ret TemplateAxisLogarithmicScale
		return ret
	}).(TemplateAxisLogarithmicScaleOutput)
}

// The base setup of a logarithmic axis scale.
func (o TemplateAxisLogarithmicScalePtrOutput) Base() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateAxisLogarithmicScale) *float64 {
		if v == nil {
			return nil
		}
		return v.Base
	}).(pulumi.Float64PtrOutput)
}

type TemplateAxisScale struct {
	// The linear axis scale setup.
	Linear *TemplateAxisLinearScale `pulumi:"linear"`
	// The logarithmic axis scale setup.
	Logarithmic *TemplateAxisLogarithmicScale `pulumi:"logarithmic"`
}

// TemplateAxisScaleInput is an input type that accepts TemplateAxisScaleArgs and TemplateAxisScaleOutput values.
// You can construct a concrete instance of `TemplateAxisScaleInput` via:
//
//	TemplateAxisScaleArgs{...}
type TemplateAxisScaleInput interface {
	pulumi.Input

	ToTemplateAxisScaleOutput() TemplateAxisScaleOutput
	ToTemplateAxisScaleOutputWithContext(context.Context) TemplateAxisScaleOutput
}

type TemplateAxisScaleArgs struct {
	// The linear axis scale setup.
	Linear TemplateAxisLinearScalePtrInput `pulumi:"linear"`
	// The logarithmic axis scale setup.
	Logarithmic TemplateAxisLogarithmicScalePtrInput `pulumi:"logarithmic"`
}

func (TemplateAxisScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisScale)(nil)).Elem()
}

func (i TemplateAxisScaleArgs) ToTemplateAxisScaleOutput() TemplateAxisScaleOutput {
	return i.ToTemplateAxisScaleOutputWithContext(context.Background())
}

func (i TemplateAxisScaleArgs) ToTemplateAxisScaleOutputWithContext(ctx context.Context) TemplateAxisScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisScaleOutput)
}

func (i TemplateAxisScaleArgs) ToTemplateAxisScalePtrOutput() TemplateAxisScalePtrOutput {
	return i.ToTemplateAxisScalePtrOutputWithContext(context.Background())
}

func (i TemplateAxisScaleArgs) ToTemplateAxisScalePtrOutputWithContext(ctx context.Context) TemplateAxisScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisScaleOutput).ToTemplateAxisScalePtrOutputWithContext(ctx)
}

// TemplateAxisScalePtrInput is an input type that accepts TemplateAxisScaleArgs, TemplateAxisScalePtr and TemplateAxisScalePtrOutput values.
// You can construct a concrete instance of `TemplateAxisScalePtrInput` via:
//
//	        TemplateAxisScaleArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisScalePtrInput interface {
	pulumi.Input

	ToTemplateAxisScalePtrOutput() TemplateAxisScalePtrOutput
	ToTemplateAxisScalePtrOutputWithContext(context.Context) TemplateAxisScalePtrOutput
}

type templateAxisScalePtrType TemplateAxisScaleArgs

func TemplateAxisScalePtr(v *TemplateAxisScaleArgs) TemplateAxisScalePtrInput {
	return (*templateAxisScalePtrType)(v)
}

func (*templateAxisScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisScale)(nil)).Elem()
}

func (i *templateAxisScalePtrType) ToTemplateAxisScalePtrOutput() TemplateAxisScalePtrOutput {
	return i.ToTemplateAxisScalePtrOutputWithContext(context.Background())
}

func (i *templateAxisScalePtrType) ToTemplateAxisScalePtrOutputWithContext(ctx context.Context) TemplateAxisScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisScalePtrOutput)
}

type TemplateAxisScaleOutput struct{ *pulumi.OutputState }

func (TemplateAxisScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisScale)(nil)).Elem()
}

func (o TemplateAxisScaleOutput) ToTemplateAxisScaleOutput() TemplateAxisScaleOutput {
	return o
}

func (o TemplateAxisScaleOutput) ToTemplateAxisScaleOutputWithContext(ctx context.Context) TemplateAxisScaleOutput {
	return o
}

func (o TemplateAxisScaleOutput) ToTemplateAxisScalePtrOutput() TemplateAxisScalePtrOutput {
	return o.ToTemplateAxisScalePtrOutputWithContext(context.Background())
}

func (o TemplateAxisScaleOutput) ToTemplateAxisScalePtrOutputWithContext(ctx context.Context) TemplateAxisScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisScale) *TemplateAxisScale {
		return &v
	}).(TemplateAxisScalePtrOutput)
}

// The linear axis scale setup.
func (o TemplateAxisScaleOutput) Linear() TemplateAxisLinearScalePtrOutput {
	return o.ApplyT(func(v TemplateAxisScale) *TemplateAxisLinearScale { return v.Linear }).(TemplateAxisLinearScalePtrOutput)
}

// The logarithmic axis scale setup.
func (o TemplateAxisScaleOutput) Logarithmic() TemplateAxisLogarithmicScalePtrOutput {
	return o.ApplyT(func(v TemplateAxisScale) *TemplateAxisLogarithmicScale { return v.Logarithmic }).(TemplateAxisLogarithmicScalePtrOutput)
}

type TemplateAxisScalePtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisScale)(nil)).Elem()
}

func (o TemplateAxisScalePtrOutput) ToTemplateAxisScalePtrOutput() TemplateAxisScalePtrOutput {
	return o
}

func (o TemplateAxisScalePtrOutput) ToTemplateAxisScalePtrOutputWithContext(ctx context.Context) TemplateAxisScalePtrOutput {
	return o
}

func (o TemplateAxisScalePtrOutput) Elem() TemplateAxisScaleOutput {
	return o.ApplyT(func(v *TemplateAxisScale) TemplateAxisScale {
		if v != nil {
			return *v
		}
		var ret TemplateAxisScale
		return ret
	}).(TemplateAxisScaleOutput)
}

// The linear axis scale setup.
func (o TemplateAxisScalePtrOutput) Linear() TemplateAxisLinearScalePtrOutput {
	return o.ApplyT(func(v *TemplateAxisScale) *TemplateAxisLinearScale {
		if v == nil {
			return nil
		}
		return v.Linear
	}).(TemplateAxisLinearScalePtrOutput)
}

// The logarithmic axis scale setup.
func (o TemplateAxisScalePtrOutput) Logarithmic() TemplateAxisLogarithmicScalePtrOutput {
	return o.ApplyT(func(v *TemplateAxisScale) *TemplateAxisLogarithmicScale {
		if v == nil {
			return nil
		}
		return v.Logarithmic
	}).(TemplateAxisLogarithmicScalePtrOutput)
}

type TemplateAxisTickLabelOptions struct {
	// Determines whether or not the axis ticks are visible.
	LabelOptions *TemplateLabelOptions `pulumi:"labelOptions"`
	// The rotation angle of the axis tick labels.
	RotationAngle *float64 `pulumi:"rotationAngle"`
}

// TemplateAxisTickLabelOptionsInput is an input type that accepts TemplateAxisTickLabelOptionsArgs and TemplateAxisTickLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateAxisTickLabelOptionsInput` via:
//
//	TemplateAxisTickLabelOptionsArgs{...}
type TemplateAxisTickLabelOptionsInput interface {
	pulumi.Input

	ToTemplateAxisTickLabelOptionsOutput() TemplateAxisTickLabelOptionsOutput
	ToTemplateAxisTickLabelOptionsOutputWithContext(context.Context) TemplateAxisTickLabelOptionsOutput
}

type TemplateAxisTickLabelOptionsArgs struct {
	// Determines whether or not the axis ticks are visible.
	LabelOptions TemplateLabelOptionsPtrInput `pulumi:"labelOptions"`
	// The rotation angle of the axis tick labels.
	RotationAngle pulumi.Float64PtrInput `pulumi:"rotationAngle"`
}

func (TemplateAxisTickLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisTickLabelOptions)(nil)).Elem()
}

func (i TemplateAxisTickLabelOptionsArgs) ToTemplateAxisTickLabelOptionsOutput() TemplateAxisTickLabelOptionsOutput {
	return i.ToTemplateAxisTickLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateAxisTickLabelOptionsArgs) ToTemplateAxisTickLabelOptionsOutputWithContext(ctx context.Context) TemplateAxisTickLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisTickLabelOptionsOutput)
}

func (i TemplateAxisTickLabelOptionsArgs) ToTemplateAxisTickLabelOptionsPtrOutput() TemplateAxisTickLabelOptionsPtrOutput {
	return i.ToTemplateAxisTickLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateAxisTickLabelOptionsArgs) ToTemplateAxisTickLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisTickLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisTickLabelOptionsOutput).ToTemplateAxisTickLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateAxisTickLabelOptionsPtrInput is an input type that accepts TemplateAxisTickLabelOptionsArgs, TemplateAxisTickLabelOptionsPtr and TemplateAxisTickLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateAxisTickLabelOptionsPtrInput` via:
//
//	        TemplateAxisTickLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateAxisTickLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateAxisTickLabelOptionsPtrOutput() TemplateAxisTickLabelOptionsPtrOutput
	ToTemplateAxisTickLabelOptionsPtrOutputWithContext(context.Context) TemplateAxisTickLabelOptionsPtrOutput
}

type templateAxisTickLabelOptionsPtrType TemplateAxisTickLabelOptionsArgs

func TemplateAxisTickLabelOptionsPtr(v *TemplateAxisTickLabelOptionsArgs) TemplateAxisTickLabelOptionsPtrInput {
	return (*templateAxisTickLabelOptionsPtrType)(v)
}

func (*templateAxisTickLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisTickLabelOptions)(nil)).Elem()
}

func (i *templateAxisTickLabelOptionsPtrType) ToTemplateAxisTickLabelOptionsPtrOutput() TemplateAxisTickLabelOptionsPtrOutput {
	return i.ToTemplateAxisTickLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateAxisTickLabelOptionsPtrType) ToTemplateAxisTickLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisTickLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateAxisTickLabelOptionsPtrOutput)
}

type TemplateAxisTickLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateAxisTickLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateAxisTickLabelOptions)(nil)).Elem()
}

func (o TemplateAxisTickLabelOptionsOutput) ToTemplateAxisTickLabelOptionsOutput() TemplateAxisTickLabelOptionsOutput {
	return o
}

func (o TemplateAxisTickLabelOptionsOutput) ToTemplateAxisTickLabelOptionsOutputWithContext(ctx context.Context) TemplateAxisTickLabelOptionsOutput {
	return o
}

func (o TemplateAxisTickLabelOptionsOutput) ToTemplateAxisTickLabelOptionsPtrOutput() TemplateAxisTickLabelOptionsPtrOutput {
	return o.ToTemplateAxisTickLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateAxisTickLabelOptionsOutput) ToTemplateAxisTickLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisTickLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateAxisTickLabelOptions) *TemplateAxisTickLabelOptions {
		return &v
	}).(TemplateAxisTickLabelOptionsPtrOutput)
}

// Determines whether or not the axis ticks are visible.
func (o TemplateAxisTickLabelOptionsOutput) LabelOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateAxisTickLabelOptions) *TemplateLabelOptions { return v.LabelOptions }).(TemplateLabelOptionsPtrOutput)
}

// The rotation angle of the axis tick labels.
func (o TemplateAxisTickLabelOptionsOutput) RotationAngle() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateAxisTickLabelOptions) *float64 { return v.RotationAngle }).(pulumi.Float64PtrOutput)
}

type TemplateAxisTickLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateAxisTickLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateAxisTickLabelOptions)(nil)).Elem()
}

func (o TemplateAxisTickLabelOptionsPtrOutput) ToTemplateAxisTickLabelOptionsPtrOutput() TemplateAxisTickLabelOptionsPtrOutput {
	return o
}

func (o TemplateAxisTickLabelOptionsPtrOutput) ToTemplateAxisTickLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateAxisTickLabelOptionsPtrOutput {
	return o
}

func (o TemplateAxisTickLabelOptionsPtrOutput) Elem() TemplateAxisTickLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateAxisTickLabelOptions) TemplateAxisTickLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateAxisTickLabelOptions
		return ret
	}).(TemplateAxisTickLabelOptionsOutput)
}

// Determines whether or not the axis ticks are visible.
func (o TemplateAxisTickLabelOptionsPtrOutput) LabelOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateAxisTickLabelOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.LabelOptions
	}).(TemplateLabelOptionsPtrOutput)
}

// The rotation angle of the axis tick labels.
func (o TemplateAxisTickLabelOptionsPtrOutput) RotationAngle() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateAxisTickLabelOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.RotationAngle
	}).(pulumi.Float64PtrOutput)
}

type TemplateBarChartAggregatedFieldWells struct {
	// The category (y-axis) field well of a bar chart.
	Category []TemplateDimensionField `pulumi:"category"`
	// The color (group/color) field well of a bar chart.
	Colors []TemplateDimensionField `pulumi:"colors"`
	// The small multiples field well of a bar chart.
	SmallMultiples []TemplateDimensionField `pulumi:"smallMultiples"`
	// The value field wells of a bar chart. Values are aggregated by category.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateBarChartAggregatedFieldWellsInput is an input type that accepts TemplateBarChartAggregatedFieldWellsArgs and TemplateBarChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateBarChartAggregatedFieldWellsInput` via:
//
//	TemplateBarChartAggregatedFieldWellsArgs{...}
type TemplateBarChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateBarChartAggregatedFieldWellsOutput() TemplateBarChartAggregatedFieldWellsOutput
	ToTemplateBarChartAggregatedFieldWellsOutputWithContext(context.Context) TemplateBarChartAggregatedFieldWellsOutput
}

type TemplateBarChartAggregatedFieldWellsArgs struct {
	// The category (y-axis) field well of a bar chart.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The color (group/color) field well of a bar chart.
	Colors TemplateDimensionFieldArrayInput `pulumi:"colors"`
	// The small multiples field well of a bar chart.
	SmallMultiples TemplateDimensionFieldArrayInput `pulumi:"smallMultiples"`
	// The value field wells of a bar chart. Values are aggregated by category.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateBarChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateBarChartAggregatedFieldWellsArgs) ToTemplateBarChartAggregatedFieldWellsOutput() TemplateBarChartAggregatedFieldWellsOutput {
	return i.ToTemplateBarChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateBarChartAggregatedFieldWellsArgs) ToTemplateBarChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateBarChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartAggregatedFieldWellsOutput)
}

func (i TemplateBarChartAggregatedFieldWellsArgs) ToTemplateBarChartAggregatedFieldWellsPtrOutput() TemplateBarChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateBarChartAggregatedFieldWellsArgs) ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartAggregatedFieldWellsOutput).ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateBarChartAggregatedFieldWellsPtrInput is an input type that accepts TemplateBarChartAggregatedFieldWellsArgs, TemplateBarChartAggregatedFieldWellsPtr and TemplateBarChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateBarChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplateBarChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateBarChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateBarChartAggregatedFieldWellsPtrOutput() TemplateBarChartAggregatedFieldWellsPtrOutput
	ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateBarChartAggregatedFieldWellsPtrOutput
}

type templateBarChartAggregatedFieldWellsPtrType TemplateBarChartAggregatedFieldWellsArgs

func TemplateBarChartAggregatedFieldWellsPtr(v *TemplateBarChartAggregatedFieldWellsArgs) TemplateBarChartAggregatedFieldWellsPtrInput {
	return (*templateBarChartAggregatedFieldWellsPtrType)(v)
}

func (*templateBarChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templateBarChartAggregatedFieldWellsPtrType) ToTemplateBarChartAggregatedFieldWellsPtrOutput() TemplateBarChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateBarChartAggregatedFieldWellsPtrType) ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartAggregatedFieldWellsPtrOutput)
}

type TemplateBarChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateBarChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateBarChartAggregatedFieldWellsOutput) ToTemplateBarChartAggregatedFieldWellsOutput() TemplateBarChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateBarChartAggregatedFieldWellsOutput) ToTemplateBarChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateBarChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateBarChartAggregatedFieldWellsOutput) ToTemplateBarChartAggregatedFieldWellsPtrOutput() TemplateBarChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateBarChartAggregatedFieldWellsOutput) ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBarChartAggregatedFieldWells) *TemplateBarChartAggregatedFieldWells {
		return &v
	}).(TemplateBarChartAggregatedFieldWellsPtrOutput)
}

// The category (y-axis) field well of a bar chart.
func (o TemplateBarChartAggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateBarChartAggregatedFieldWells) []TemplateDimensionField { return v.Category }).(TemplateDimensionFieldArrayOutput)
}

// The color (group/color) field well of a bar chart.
func (o TemplateBarChartAggregatedFieldWellsOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateBarChartAggregatedFieldWells) []TemplateDimensionField { return v.Colors }).(TemplateDimensionFieldArrayOutput)
}

// The small multiples field well of a bar chart.
func (o TemplateBarChartAggregatedFieldWellsOutput) SmallMultiples() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateBarChartAggregatedFieldWells) []TemplateDimensionField { return v.SmallMultiples }).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a bar chart. Values are aggregated by category.
func (o TemplateBarChartAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateBarChartAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateBarChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBarChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateBarChartAggregatedFieldWellsPtrOutput) ToTemplateBarChartAggregatedFieldWellsPtrOutput() TemplateBarChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateBarChartAggregatedFieldWellsPtrOutput) ToTemplateBarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateBarChartAggregatedFieldWellsPtrOutput) Elem() TemplateBarChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateBarChartAggregatedFieldWells) TemplateBarChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateBarChartAggregatedFieldWells
		return ret
	}).(TemplateBarChartAggregatedFieldWellsOutput)
}

// The category (y-axis) field well of a bar chart.
func (o TemplateBarChartAggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The color (group/color) field well of a bar chart.
func (o TemplateBarChartAggregatedFieldWellsPtrOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateDimensionFieldArrayOutput)
}

// The small multiples field well of a bar chart.
func (o TemplateBarChartAggregatedFieldWellsPtrOutput) SmallMultiples() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.SmallMultiples
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a bar chart. Values are aggregated by category.
func (o TemplateBarChartAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateBarChartConfiguration struct {
	// Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.
	BarsArrangement *TemplateBarsArrangement `pulumi:"barsArrangement"`
	// The label display options (grid line, range, scale, axis step) for bar chart category.
	CategoryAxis *TemplateAxisDisplayOptions `pulumi:"categoryAxis"`
	// The label options (label text, label visibility and sort icon visibility) for a bar chart.
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.
	ColorLabelOptions *TemplateChartAxisLabelOptions `pulumi:"colorLabelOptions"`
	// The contribution analysis (anomaly configuration) setup of the visual.
	ContributionAnalysisDefaults []TemplateContributionAnalysisDefault `pulumi:"contributionAnalysisDefaults"`
	// The options that determine if visual data labels are displayed.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells *TemplateBarChartFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The orientation of the bars in a bar chart visual. There are two valid values in this structure:
	//
	// - `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
	// - `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
	Orientation *TemplateBarChartOrientation `pulumi:"orientation"`
	// The reference line setup of the visual.
	ReferenceLines []TemplateReferenceLine `pulumi:"referenceLines"`
	// The small multiples setup for the visual.
	SmallMultiplesOptions *TemplateSmallMultiplesOptions `pulumi:"smallMultiplesOptions"`
	// The sort configuration of a `BarChartVisual` .
	SortConfiguration *TemplateBarChartSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The label display options (grid line, range, scale, axis step) for a bar chart value.
	ValueAxis *TemplateAxisDisplayOptions `pulumi:"valueAxis"`
	// The label options (label text, label visibility and sort icon visibility) for a bar chart value.
	ValueLabelOptions *TemplateChartAxisLabelOptions `pulumi:"valueLabelOptions"`
	// The palette (chart color) display setup of the visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
}

// TemplateBarChartConfigurationInput is an input type that accepts TemplateBarChartConfigurationArgs and TemplateBarChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateBarChartConfigurationInput` via:
//
//	TemplateBarChartConfigurationArgs{...}
type TemplateBarChartConfigurationInput interface {
	pulumi.Input

	ToTemplateBarChartConfigurationOutput() TemplateBarChartConfigurationOutput
	ToTemplateBarChartConfigurationOutputWithContext(context.Context) TemplateBarChartConfigurationOutput
}

type TemplateBarChartConfigurationArgs struct {
	// Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.
	BarsArrangement TemplateBarsArrangementPtrInput `pulumi:"barsArrangement"`
	// The label display options (grid line, range, scale, axis step) for bar chart category.
	CategoryAxis TemplateAxisDisplayOptionsPtrInput `pulumi:"categoryAxis"`
	// The label options (label text, label visibility and sort icon visibility) for a bar chart.
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.
	ColorLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"colorLabelOptions"`
	// The contribution analysis (anomaly configuration) setup of the visual.
	ContributionAnalysisDefaults TemplateContributionAnalysisDefaultArrayInput `pulumi:"contributionAnalysisDefaults"`
	// The options that determine if visual data labels are displayed.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells TemplateBarChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The orientation of the bars in a bar chart visual. There are two valid values in this structure:
	//
	// - `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
	// - `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
	Orientation TemplateBarChartOrientationPtrInput `pulumi:"orientation"`
	// The reference line setup of the visual.
	ReferenceLines TemplateReferenceLineArrayInput `pulumi:"referenceLines"`
	// The small multiples setup for the visual.
	SmallMultiplesOptions TemplateSmallMultiplesOptionsPtrInput `pulumi:"smallMultiplesOptions"`
	// The sort configuration of a `BarChartVisual` .
	SortConfiguration TemplateBarChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The label display options (grid line, range, scale, axis step) for a bar chart value.
	ValueAxis TemplateAxisDisplayOptionsPtrInput `pulumi:"valueAxis"`
	// The label options (label text, label visibility and sort icon visibility) for a bar chart value.
	ValueLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"valueLabelOptions"`
	// The palette (chart color) display setup of the visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
}

func (TemplateBarChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartConfiguration)(nil)).Elem()
}

func (i TemplateBarChartConfigurationArgs) ToTemplateBarChartConfigurationOutput() TemplateBarChartConfigurationOutput {
	return i.ToTemplateBarChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateBarChartConfigurationArgs) ToTemplateBarChartConfigurationOutputWithContext(ctx context.Context) TemplateBarChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartConfigurationOutput)
}

func (i TemplateBarChartConfigurationArgs) ToTemplateBarChartConfigurationPtrOutput() TemplateBarChartConfigurationPtrOutput {
	return i.ToTemplateBarChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBarChartConfigurationArgs) ToTemplateBarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartConfigurationOutput).ToTemplateBarChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateBarChartConfigurationPtrInput is an input type that accepts TemplateBarChartConfigurationArgs, TemplateBarChartConfigurationPtr and TemplateBarChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBarChartConfigurationPtrInput` via:
//
//	        TemplateBarChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBarChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBarChartConfigurationPtrOutput() TemplateBarChartConfigurationPtrOutput
	ToTemplateBarChartConfigurationPtrOutputWithContext(context.Context) TemplateBarChartConfigurationPtrOutput
}

type templateBarChartConfigurationPtrType TemplateBarChartConfigurationArgs

func TemplateBarChartConfigurationPtr(v *TemplateBarChartConfigurationArgs) TemplateBarChartConfigurationPtrInput {
	return (*templateBarChartConfigurationPtrType)(v)
}

func (*templateBarChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartConfiguration)(nil)).Elem()
}

func (i *templateBarChartConfigurationPtrType) ToTemplateBarChartConfigurationPtrOutput() TemplateBarChartConfigurationPtrOutput {
	return i.ToTemplateBarChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBarChartConfigurationPtrType) ToTemplateBarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartConfigurationPtrOutput)
}

type TemplateBarChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBarChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartConfiguration)(nil)).Elem()
}

func (o TemplateBarChartConfigurationOutput) ToTemplateBarChartConfigurationOutput() TemplateBarChartConfigurationOutput {
	return o
}

func (o TemplateBarChartConfigurationOutput) ToTemplateBarChartConfigurationOutputWithContext(ctx context.Context) TemplateBarChartConfigurationOutput {
	return o
}

func (o TemplateBarChartConfigurationOutput) ToTemplateBarChartConfigurationPtrOutput() TemplateBarChartConfigurationPtrOutput {
	return o.ToTemplateBarChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBarChartConfigurationOutput) ToTemplateBarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBarChartConfiguration) *TemplateBarChartConfiguration {
		return &v
	}).(TemplateBarChartConfigurationPtrOutput)
}

// Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.
func (o TemplateBarChartConfigurationOutput) BarsArrangement() TemplateBarsArrangementPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateBarsArrangement { return v.BarsArrangement }).(TemplateBarsArrangementPtrOutput)
}

// The label display options (grid line, range, scale, axis step) for bar chart category.
func (o TemplateBarChartConfigurationOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateAxisDisplayOptions { return v.CategoryAxis }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) for a bar chart.
func (o TemplateBarChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateChartAxisLabelOptions { return v.CategoryLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.
func (o TemplateBarChartConfigurationOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateChartAxisLabelOptions { return v.ColorLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The contribution analysis (anomaly configuration) setup of the visual.
func (o TemplateBarChartConfigurationOutput) ContributionAnalysisDefaults() TemplateContributionAnalysisDefaultArrayOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) []TemplateContributionAnalysisDefault {
		return v.ContributionAnalysisDefaults
	}).(TemplateContributionAnalysisDefaultArrayOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateBarChartConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateBarChartConfigurationOutput) FieldWells() TemplateBarChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateBarChartFieldWells { return v.FieldWells }).(TemplateBarChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateBarChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateBarChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The orientation of the bars in a bar chart visual. There are two valid values in this structure:
//
// - `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
// - `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
func (o TemplateBarChartConfigurationOutput) Orientation() TemplateBarChartOrientationPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateBarChartOrientation { return v.Orientation }).(TemplateBarChartOrientationPtrOutput)
}

// The reference line setup of the visual.
func (o TemplateBarChartConfigurationOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) []TemplateReferenceLine { return v.ReferenceLines }).(TemplateReferenceLineArrayOutput)
}

// The small multiples setup for the visual.
func (o TemplateBarChartConfigurationOutput) SmallMultiplesOptions() TemplateSmallMultiplesOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateSmallMultiplesOptions { return v.SmallMultiplesOptions }).(TemplateSmallMultiplesOptionsPtrOutput)
}

// The sort configuration of a `BarChartVisual` .
func (o TemplateBarChartConfigurationOutput) SortConfiguration() TemplateBarChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateBarChartSortConfiguration { return v.SortConfiguration }).(TemplateBarChartSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateBarChartConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The label display options (grid line, range, scale, axis step) for a bar chart value.
func (o TemplateBarChartConfigurationOutput) ValueAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateAxisDisplayOptions { return v.ValueAxis }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) for a bar chart value.
func (o TemplateBarChartConfigurationOutput) ValueLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateChartAxisLabelOptions { return v.ValueLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateBarChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateBarChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

type TemplateBarChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBarChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartConfiguration)(nil)).Elem()
}

func (o TemplateBarChartConfigurationPtrOutput) ToTemplateBarChartConfigurationPtrOutput() TemplateBarChartConfigurationPtrOutput {
	return o
}

func (o TemplateBarChartConfigurationPtrOutput) ToTemplateBarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartConfigurationPtrOutput {
	return o
}

func (o TemplateBarChartConfigurationPtrOutput) Elem() TemplateBarChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) TemplateBarChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBarChartConfiguration
		return ret
	}).(TemplateBarChartConfigurationOutput)
}

// Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.
func (o TemplateBarChartConfigurationPtrOutput) BarsArrangement() TemplateBarsArrangementPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateBarsArrangement {
		if v == nil {
			return nil
		}
		return v.BarsArrangement
	}).(TemplateBarsArrangementPtrOutput)
}

// The label display options (grid line, range, scale, axis step) for bar chart category.
func (o TemplateBarChartConfigurationPtrOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxis
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) for a bar chart.
func (o TemplateBarChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.
func (o TemplateBarChartConfigurationPtrOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ColorLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The contribution analysis (anomaly configuration) setup of the visual.
func (o TemplateBarChartConfigurationPtrOutput) ContributionAnalysisDefaults() TemplateContributionAnalysisDefaultArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) []TemplateContributionAnalysisDefault {
		if v == nil {
			return nil
		}
		return v.ContributionAnalysisDefaults
	}).(TemplateContributionAnalysisDefaultArrayOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateBarChartConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateBarChartConfigurationPtrOutput) FieldWells() TemplateBarChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateBarChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateBarChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateBarChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateBarChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The orientation of the bars in a bar chart visual. There are two valid values in this structure:
//
// - `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
// - `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
func (o TemplateBarChartConfigurationPtrOutput) Orientation() TemplateBarChartOrientationPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateBarChartOrientation {
		if v == nil {
			return nil
		}
		return v.Orientation
	}).(TemplateBarChartOrientationPtrOutput)
}

// The reference line setup of the visual.
func (o TemplateBarChartConfigurationPtrOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) []TemplateReferenceLine {
		if v == nil {
			return nil
		}
		return v.ReferenceLines
	}).(TemplateReferenceLineArrayOutput)
}

// The small multiples setup for the visual.
func (o TemplateBarChartConfigurationPtrOutput) SmallMultiplesOptions() TemplateSmallMultiplesOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateSmallMultiplesOptions {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesOptions
	}).(TemplateSmallMultiplesOptionsPtrOutput)
}

// The sort configuration of a `BarChartVisual` .
func (o TemplateBarChartConfigurationPtrOutput) SortConfiguration() TemplateBarChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateBarChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateBarChartSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateBarChartConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The label display options (grid line, range, scale, axis step) for a bar chart value.
func (o TemplateBarChartConfigurationPtrOutput) ValueAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.ValueAxis
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) for a bar chart value.
func (o TemplateBarChartConfigurationPtrOutput) ValueLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ValueLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateBarChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateBarChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

type TemplateBarChartFieldWells struct {
	// The aggregated field wells of a bar chart.
	BarChartAggregatedFieldWells *TemplateBarChartAggregatedFieldWells `pulumi:"barChartAggregatedFieldWells"`
}

// TemplateBarChartFieldWellsInput is an input type that accepts TemplateBarChartFieldWellsArgs and TemplateBarChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateBarChartFieldWellsInput` via:
//
//	TemplateBarChartFieldWellsArgs{...}
type TemplateBarChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateBarChartFieldWellsOutput() TemplateBarChartFieldWellsOutput
	ToTemplateBarChartFieldWellsOutputWithContext(context.Context) TemplateBarChartFieldWellsOutput
}

type TemplateBarChartFieldWellsArgs struct {
	// The aggregated field wells of a bar chart.
	BarChartAggregatedFieldWells TemplateBarChartAggregatedFieldWellsPtrInput `pulumi:"barChartAggregatedFieldWells"`
}

func (TemplateBarChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartFieldWells)(nil)).Elem()
}

func (i TemplateBarChartFieldWellsArgs) ToTemplateBarChartFieldWellsOutput() TemplateBarChartFieldWellsOutput {
	return i.ToTemplateBarChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateBarChartFieldWellsArgs) ToTemplateBarChartFieldWellsOutputWithContext(ctx context.Context) TemplateBarChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartFieldWellsOutput)
}

func (i TemplateBarChartFieldWellsArgs) ToTemplateBarChartFieldWellsPtrOutput() TemplateBarChartFieldWellsPtrOutput {
	return i.ToTemplateBarChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateBarChartFieldWellsArgs) ToTemplateBarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartFieldWellsOutput).ToTemplateBarChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateBarChartFieldWellsPtrInput is an input type that accepts TemplateBarChartFieldWellsArgs, TemplateBarChartFieldWellsPtr and TemplateBarChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateBarChartFieldWellsPtrInput` via:
//
//	        TemplateBarChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateBarChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateBarChartFieldWellsPtrOutput() TemplateBarChartFieldWellsPtrOutput
	ToTemplateBarChartFieldWellsPtrOutputWithContext(context.Context) TemplateBarChartFieldWellsPtrOutput
}

type templateBarChartFieldWellsPtrType TemplateBarChartFieldWellsArgs

func TemplateBarChartFieldWellsPtr(v *TemplateBarChartFieldWellsArgs) TemplateBarChartFieldWellsPtrInput {
	return (*templateBarChartFieldWellsPtrType)(v)
}

func (*templateBarChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartFieldWells)(nil)).Elem()
}

func (i *templateBarChartFieldWellsPtrType) ToTemplateBarChartFieldWellsPtrOutput() TemplateBarChartFieldWellsPtrOutput {
	return i.ToTemplateBarChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateBarChartFieldWellsPtrType) ToTemplateBarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartFieldWellsPtrOutput)
}

type TemplateBarChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateBarChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartFieldWells)(nil)).Elem()
}

func (o TemplateBarChartFieldWellsOutput) ToTemplateBarChartFieldWellsOutput() TemplateBarChartFieldWellsOutput {
	return o
}

func (o TemplateBarChartFieldWellsOutput) ToTemplateBarChartFieldWellsOutputWithContext(ctx context.Context) TemplateBarChartFieldWellsOutput {
	return o
}

func (o TemplateBarChartFieldWellsOutput) ToTemplateBarChartFieldWellsPtrOutput() TemplateBarChartFieldWellsPtrOutput {
	return o.ToTemplateBarChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateBarChartFieldWellsOutput) ToTemplateBarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBarChartFieldWells) *TemplateBarChartFieldWells {
		return &v
	}).(TemplateBarChartFieldWellsPtrOutput)
}

// The aggregated field wells of a bar chart.
func (o TemplateBarChartFieldWellsOutput) BarChartAggregatedFieldWells() TemplateBarChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartFieldWells) *TemplateBarChartAggregatedFieldWells {
		return v.BarChartAggregatedFieldWells
	}).(TemplateBarChartAggregatedFieldWellsPtrOutput)
}

type TemplateBarChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBarChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartFieldWells)(nil)).Elem()
}

func (o TemplateBarChartFieldWellsPtrOutput) ToTemplateBarChartFieldWellsPtrOutput() TemplateBarChartFieldWellsPtrOutput {
	return o
}

func (o TemplateBarChartFieldWellsPtrOutput) ToTemplateBarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBarChartFieldWellsPtrOutput {
	return o
}

func (o TemplateBarChartFieldWellsPtrOutput) Elem() TemplateBarChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateBarChartFieldWells) TemplateBarChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateBarChartFieldWells
		return ret
	}).(TemplateBarChartFieldWellsOutput)
}

// The aggregated field wells of a bar chart.
func (o TemplateBarChartFieldWellsPtrOutput) BarChartAggregatedFieldWells() TemplateBarChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartFieldWells) *TemplateBarChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.BarChartAggregatedFieldWells
	}).(TemplateBarChartAggregatedFieldWellsPtrOutput)
}

type TemplateBarChartSortConfiguration struct {
	// The limit on the number of categories displayed in a bar chart.
	CategoryItemsLimit *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The sort configuration of category fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
	// The limit on the number of values displayed in a bar chart.
	ColorItemsLimit *TemplateItemsLimitConfiguration `pulumi:"colorItemsLimit"`
	// The sort configuration of color fields in a bar chart.
	ColorSort []TemplateFieldSortOptions `pulumi:"colorSort"`
	// The limit on the number of small multiples panels that are displayed.
	SmallMultiplesLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"smallMultiplesLimitConfiguration"`
	// The sort configuration of the small multiples field.
	SmallMultiplesSort []TemplateFieldSortOptions `pulumi:"smallMultiplesSort"`
}

// TemplateBarChartSortConfigurationInput is an input type that accepts TemplateBarChartSortConfigurationArgs and TemplateBarChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateBarChartSortConfigurationInput` via:
//
//	TemplateBarChartSortConfigurationArgs{...}
type TemplateBarChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplateBarChartSortConfigurationOutput() TemplateBarChartSortConfigurationOutput
	ToTemplateBarChartSortConfigurationOutputWithContext(context.Context) TemplateBarChartSortConfigurationOutput
}

type TemplateBarChartSortConfigurationArgs struct {
	// The limit on the number of categories displayed in a bar chart.
	CategoryItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The sort configuration of category fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
	// The limit on the number of values displayed in a bar chart.
	ColorItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"colorItemsLimit"`
	// The sort configuration of color fields in a bar chart.
	ColorSort TemplateFieldSortOptionsArrayInput `pulumi:"colorSort"`
	// The limit on the number of small multiples panels that are displayed.
	SmallMultiplesLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"smallMultiplesLimitConfiguration"`
	// The sort configuration of the small multiples field.
	SmallMultiplesSort TemplateFieldSortOptionsArrayInput `pulumi:"smallMultiplesSort"`
}

func (TemplateBarChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartSortConfiguration)(nil)).Elem()
}

func (i TemplateBarChartSortConfigurationArgs) ToTemplateBarChartSortConfigurationOutput() TemplateBarChartSortConfigurationOutput {
	return i.ToTemplateBarChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateBarChartSortConfigurationArgs) ToTemplateBarChartSortConfigurationOutputWithContext(ctx context.Context) TemplateBarChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartSortConfigurationOutput)
}

func (i TemplateBarChartSortConfigurationArgs) ToTemplateBarChartSortConfigurationPtrOutput() TemplateBarChartSortConfigurationPtrOutput {
	return i.ToTemplateBarChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBarChartSortConfigurationArgs) ToTemplateBarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartSortConfigurationOutput).ToTemplateBarChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateBarChartSortConfigurationPtrInput is an input type that accepts TemplateBarChartSortConfigurationArgs, TemplateBarChartSortConfigurationPtr and TemplateBarChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBarChartSortConfigurationPtrInput` via:
//
//	        TemplateBarChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBarChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBarChartSortConfigurationPtrOutput() TemplateBarChartSortConfigurationPtrOutput
	ToTemplateBarChartSortConfigurationPtrOutputWithContext(context.Context) TemplateBarChartSortConfigurationPtrOutput
}

type templateBarChartSortConfigurationPtrType TemplateBarChartSortConfigurationArgs

func TemplateBarChartSortConfigurationPtr(v *TemplateBarChartSortConfigurationArgs) TemplateBarChartSortConfigurationPtrInput {
	return (*templateBarChartSortConfigurationPtrType)(v)
}

func (*templateBarChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartSortConfiguration)(nil)).Elem()
}

func (i *templateBarChartSortConfigurationPtrType) ToTemplateBarChartSortConfigurationPtrOutput() TemplateBarChartSortConfigurationPtrOutput {
	return i.ToTemplateBarChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBarChartSortConfigurationPtrType) ToTemplateBarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartSortConfigurationPtrOutput)
}

type TemplateBarChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBarChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartSortConfiguration)(nil)).Elem()
}

func (o TemplateBarChartSortConfigurationOutput) ToTemplateBarChartSortConfigurationOutput() TemplateBarChartSortConfigurationOutput {
	return o
}

func (o TemplateBarChartSortConfigurationOutput) ToTemplateBarChartSortConfigurationOutputWithContext(ctx context.Context) TemplateBarChartSortConfigurationOutput {
	return o
}

func (o TemplateBarChartSortConfigurationOutput) ToTemplateBarChartSortConfigurationPtrOutput() TemplateBarChartSortConfigurationPtrOutput {
	return o.ToTemplateBarChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBarChartSortConfigurationOutput) ToTemplateBarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBarChartSortConfiguration) *TemplateBarChartSortConfiguration {
		return &v
	}).(TemplateBarChartSortConfigurationPtrOutput)
}

// The limit on the number of categories displayed in a bar chart.
func (o TemplateBarChartSortConfigurationOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of category fields.
func (o TemplateBarChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateBarChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of values displayed in a bar chart.
func (o TemplateBarChartSortConfigurationOutput) ColorItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBarChartSortConfiguration) *TemplateItemsLimitConfiguration { return v.ColorItemsLimit }).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of color fields in a bar chart.
func (o TemplateBarChartSortConfigurationOutput) ColorSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateBarChartSortConfiguration) []TemplateFieldSortOptions { return v.ColorSort }).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of small multiples panels that are displayed.
func (o TemplateBarChartSortConfigurationOutput) SmallMultiplesLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.SmallMultiplesLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the small multiples field.
func (o TemplateBarChartSortConfigurationOutput) SmallMultiplesSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateBarChartSortConfiguration) []TemplateFieldSortOptions { return v.SmallMultiplesSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateBarChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBarChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartSortConfiguration)(nil)).Elem()
}

func (o TemplateBarChartSortConfigurationPtrOutput) ToTemplateBarChartSortConfigurationPtrOutput() TemplateBarChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateBarChartSortConfigurationPtrOutput) ToTemplateBarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBarChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateBarChartSortConfigurationPtrOutput) Elem() TemplateBarChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateBarChartSortConfiguration) TemplateBarChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBarChartSortConfiguration
		return ret
	}).(TemplateBarChartSortConfigurationOutput)
}

// The limit on the number of categories displayed in a bar chart.
func (o TemplateBarChartSortConfigurationPtrOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of category fields.
func (o TemplateBarChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of values displayed in a bar chart.
func (o TemplateBarChartSortConfigurationPtrOutput) ColorItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of color fields in a bar chart.
func (o TemplateBarChartSortConfigurationPtrOutput) ColorSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.ColorSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of small multiples panels that are displayed.
func (o TemplateBarChartSortConfigurationPtrOutput) SmallMultiplesLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the small multiples field.
func (o TemplateBarChartSortConfigurationPtrOutput) SmallMultiplesSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateBarChartVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateBarChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateBarChartVisualInput is an input type that accepts TemplateBarChartVisualArgs and TemplateBarChartVisualOutput values.
// You can construct a concrete instance of `TemplateBarChartVisualInput` via:
//
//	TemplateBarChartVisualArgs{...}
type TemplateBarChartVisualInput interface {
	pulumi.Input

	ToTemplateBarChartVisualOutput() TemplateBarChartVisualOutput
	ToTemplateBarChartVisualOutputWithContext(context.Context) TemplateBarChartVisualOutput
}

type TemplateBarChartVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateBarChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateBarChartVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartVisual)(nil)).Elem()
}

func (i TemplateBarChartVisualArgs) ToTemplateBarChartVisualOutput() TemplateBarChartVisualOutput {
	return i.ToTemplateBarChartVisualOutputWithContext(context.Background())
}

func (i TemplateBarChartVisualArgs) ToTemplateBarChartVisualOutputWithContext(ctx context.Context) TemplateBarChartVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartVisualOutput)
}

func (i TemplateBarChartVisualArgs) ToTemplateBarChartVisualPtrOutput() TemplateBarChartVisualPtrOutput {
	return i.ToTemplateBarChartVisualPtrOutputWithContext(context.Background())
}

func (i TemplateBarChartVisualArgs) ToTemplateBarChartVisualPtrOutputWithContext(ctx context.Context) TemplateBarChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartVisualOutput).ToTemplateBarChartVisualPtrOutputWithContext(ctx)
}

// TemplateBarChartVisualPtrInput is an input type that accepts TemplateBarChartVisualArgs, TemplateBarChartVisualPtr and TemplateBarChartVisualPtrOutput values.
// You can construct a concrete instance of `TemplateBarChartVisualPtrInput` via:
//
//	        TemplateBarChartVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateBarChartVisualPtrInput interface {
	pulumi.Input

	ToTemplateBarChartVisualPtrOutput() TemplateBarChartVisualPtrOutput
	ToTemplateBarChartVisualPtrOutputWithContext(context.Context) TemplateBarChartVisualPtrOutput
}

type templateBarChartVisualPtrType TemplateBarChartVisualArgs

func TemplateBarChartVisualPtr(v *TemplateBarChartVisualArgs) TemplateBarChartVisualPtrInput {
	return (*templateBarChartVisualPtrType)(v)
}

func (*templateBarChartVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartVisual)(nil)).Elem()
}

func (i *templateBarChartVisualPtrType) ToTemplateBarChartVisualPtrOutput() TemplateBarChartVisualPtrOutput {
	return i.ToTemplateBarChartVisualPtrOutputWithContext(context.Background())
}

func (i *templateBarChartVisualPtrType) ToTemplateBarChartVisualPtrOutputWithContext(ctx context.Context) TemplateBarChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBarChartVisualPtrOutput)
}

type TemplateBarChartVisualOutput struct{ *pulumi.OutputState }

func (TemplateBarChartVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBarChartVisual)(nil)).Elem()
}

func (o TemplateBarChartVisualOutput) ToTemplateBarChartVisualOutput() TemplateBarChartVisualOutput {
	return o
}

func (o TemplateBarChartVisualOutput) ToTemplateBarChartVisualOutputWithContext(ctx context.Context) TemplateBarChartVisualOutput {
	return o
}

func (o TemplateBarChartVisualOutput) ToTemplateBarChartVisualPtrOutput() TemplateBarChartVisualPtrOutput {
	return o.ToTemplateBarChartVisualPtrOutputWithContext(context.Background())
}

func (o TemplateBarChartVisualOutput) ToTemplateBarChartVisualPtrOutputWithContext(ctx context.Context) TemplateBarChartVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBarChartVisual) *TemplateBarChartVisual {
		return &v
	}).(TemplateBarChartVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateBarChartVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateBarChartVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateBarChartVisualOutput) ChartConfiguration() TemplateBarChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBarChartVisual) *TemplateBarChartConfiguration { return v.ChartConfiguration }).(TemplateBarChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateBarChartVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateBarChartVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateBarChartVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateBarChartVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBarChartVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateBarChartVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateBarChartVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateBarChartVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateBarChartVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateBarChartVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateBarChartVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBarChartVisual)(nil)).Elem()
}

func (o TemplateBarChartVisualPtrOutput) ToTemplateBarChartVisualPtrOutput() TemplateBarChartVisualPtrOutput {
	return o
}

func (o TemplateBarChartVisualPtrOutput) ToTemplateBarChartVisualPtrOutputWithContext(ctx context.Context) TemplateBarChartVisualPtrOutput {
	return o
}

func (o TemplateBarChartVisualPtrOutput) Elem() TemplateBarChartVisualOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) TemplateBarChartVisual {
		if v != nil {
			return *v
		}
		var ret TemplateBarChartVisual
		return ret
	}).(TemplateBarChartVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateBarChartVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateBarChartVisualPtrOutput) ChartConfiguration() TemplateBarChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) *TemplateBarChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateBarChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateBarChartVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateBarChartVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateBarChartVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateBarChartVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateBarChartVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateBarChartVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateBinCountOptions struct {
	// The options that determine the bin count value.
	Value *float64 `pulumi:"value"`
}

// TemplateBinCountOptionsInput is an input type that accepts TemplateBinCountOptionsArgs and TemplateBinCountOptionsOutput values.
// You can construct a concrete instance of `TemplateBinCountOptionsInput` via:
//
//	TemplateBinCountOptionsArgs{...}
type TemplateBinCountOptionsInput interface {
	pulumi.Input

	ToTemplateBinCountOptionsOutput() TemplateBinCountOptionsOutput
	ToTemplateBinCountOptionsOutputWithContext(context.Context) TemplateBinCountOptionsOutput
}

type TemplateBinCountOptionsArgs struct {
	// The options that determine the bin count value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (TemplateBinCountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBinCountOptions)(nil)).Elem()
}

func (i TemplateBinCountOptionsArgs) ToTemplateBinCountOptionsOutput() TemplateBinCountOptionsOutput {
	return i.ToTemplateBinCountOptionsOutputWithContext(context.Background())
}

func (i TemplateBinCountOptionsArgs) ToTemplateBinCountOptionsOutputWithContext(ctx context.Context) TemplateBinCountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBinCountOptionsOutput)
}

func (i TemplateBinCountOptionsArgs) ToTemplateBinCountOptionsPtrOutput() TemplateBinCountOptionsPtrOutput {
	return i.ToTemplateBinCountOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateBinCountOptionsArgs) ToTemplateBinCountOptionsPtrOutputWithContext(ctx context.Context) TemplateBinCountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBinCountOptionsOutput).ToTemplateBinCountOptionsPtrOutputWithContext(ctx)
}

// TemplateBinCountOptionsPtrInput is an input type that accepts TemplateBinCountOptionsArgs, TemplateBinCountOptionsPtr and TemplateBinCountOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateBinCountOptionsPtrInput` via:
//
//	        TemplateBinCountOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateBinCountOptionsPtrInput interface {
	pulumi.Input

	ToTemplateBinCountOptionsPtrOutput() TemplateBinCountOptionsPtrOutput
	ToTemplateBinCountOptionsPtrOutputWithContext(context.Context) TemplateBinCountOptionsPtrOutput
}

type templateBinCountOptionsPtrType TemplateBinCountOptionsArgs

func TemplateBinCountOptionsPtr(v *TemplateBinCountOptionsArgs) TemplateBinCountOptionsPtrInput {
	return (*templateBinCountOptionsPtrType)(v)
}

func (*templateBinCountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBinCountOptions)(nil)).Elem()
}

func (i *templateBinCountOptionsPtrType) ToTemplateBinCountOptionsPtrOutput() TemplateBinCountOptionsPtrOutput {
	return i.ToTemplateBinCountOptionsPtrOutputWithContext(context.Background())
}

func (i *templateBinCountOptionsPtrType) ToTemplateBinCountOptionsPtrOutputWithContext(ctx context.Context) TemplateBinCountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBinCountOptionsPtrOutput)
}

type TemplateBinCountOptionsOutput struct{ *pulumi.OutputState }

func (TemplateBinCountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBinCountOptions)(nil)).Elem()
}

func (o TemplateBinCountOptionsOutput) ToTemplateBinCountOptionsOutput() TemplateBinCountOptionsOutput {
	return o
}

func (o TemplateBinCountOptionsOutput) ToTemplateBinCountOptionsOutputWithContext(ctx context.Context) TemplateBinCountOptionsOutput {
	return o
}

func (o TemplateBinCountOptionsOutput) ToTemplateBinCountOptionsPtrOutput() TemplateBinCountOptionsPtrOutput {
	return o.ToTemplateBinCountOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateBinCountOptionsOutput) ToTemplateBinCountOptionsPtrOutputWithContext(ctx context.Context) TemplateBinCountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBinCountOptions) *TemplateBinCountOptions {
		return &v
	}).(TemplateBinCountOptionsPtrOutput)
}

// The options that determine the bin count value.
func (o TemplateBinCountOptionsOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateBinCountOptions) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type TemplateBinCountOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBinCountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBinCountOptions)(nil)).Elem()
}

func (o TemplateBinCountOptionsPtrOutput) ToTemplateBinCountOptionsPtrOutput() TemplateBinCountOptionsPtrOutput {
	return o
}

func (o TemplateBinCountOptionsPtrOutput) ToTemplateBinCountOptionsPtrOutputWithContext(ctx context.Context) TemplateBinCountOptionsPtrOutput {
	return o
}

func (o TemplateBinCountOptionsPtrOutput) Elem() TemplateBinCountOptionsOutput {
	return o.ApplyT(func(v *TemplateBinCountOptions) TemplateBinCountOptions {
		if v != nil {
			return *v
		}
		var ret TemplateBinCountOptions
		return ret
	}).(TemplateBinCountOptionsOutput)
}

// The options that determine the bin count value.
func (o TemplateBinCountOptionsPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateBinCountOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateBinWidthOptions struct {
	// The options that determine the bin count limit.
	BinCountLimit *float64 `pulumi:"binCountLimit"`
	// The options that determine the bin width value.
	Value *float64 `pulumi:"value"`
}

// TemplateBinWidthOptionsInput is an input type that accepts TemplateBinWidthOptionsArgs and TemplateBinWidthOptionsOutput values.
// You can construct a concrete instance of `TemplateBinWidthOptionsInput` via:
//
//	TemplateBinWidthOptionsArgs{...}
type TemplateBinWidthOptionsInput interface {
	pulumi.Input

	ToTemplateBinWidthOptionsOutput() TemplateBinWidthOptionsOutput
	ToTemplateBinWidthOptionsOutputWithContext(context.Context) TemplateBinWidthOptionsOutput
}

type TemplateBinWidthOptionsArgs struct {
	// The options that determine the bin count limit.
	BinCountLimit pulumi.Float64PtrInput `pulumi:"binCountLimit"`
	// The options that determine the bin width value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (TemplateBinWidthOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBinWidthOptions)(nil)).Elem()
}

func (i TemplateBinWidthOptionsArgs) ToTemplateBinWidthOptionsOutput() TemplateBinWidthOptionsOutput {
	return i.ToTemplateBinWidthOptionsOutputWithContext(context.Background())
}

func (i TemplateBinWidthOptionsArgs) ToTemplateBinWidthOptionsOutputWithContext(ctx context.Context) TemplateBinWidthOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBinWidthOptionsOutput)
}

func (i TemplateBinWidthOptionsArgs) ToTemplateBinWidthOptionsPtrOutput() TemplateBinWidthOptionsPtrOutput {
	return i.ToTemplateBinWidthOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateBinWidthOptionsArgs) ToTemplateBinWidthOptionsPtrOutputWithContext(ctx context.Context) TemplateBinWidthOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBinWidthOptionsOutput).ToTemplateBinWidthOptionsPtrOutputWithContext(ctx)
}

// TemplateBinWidthOptionsPtrInput is an input type that accepts TemplateBinWidthOptionsArgs, TemplateBinWidthOptionsPtr and TemplateBinWidthOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateBinWidthOptionsPtrInput` via:
//
//	        TemplateBinWidthOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateBinWidthOptionsPtrInput interface {
	pulumi.Input

	ToTemplateBinWidthOptionsPtrOutput() TemplateBinWidthOptionsPtrOutput
	ToTemplateBinWidthOptionsPtrOutputWithContext(context.Context) TemplateBinWidthOptionsPtrOutput
}

type templateBinWidthOptionsPtrType TemplateBinWidthOptionsArgs

func TemplateBinWidthOptionsPtr(v *TemplateBinWidthOptionsArgs) TemplateBinWidthOptionsPtrInput {
	return (*templateBinWidthOptionsPtrType)(v)
}

func (*templateBinWidthOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBinWidthOptions)(nil)).Elem()
}

func (i *templateBinWidthOptionsPtrType) ToTemplateBinWidthOptionsPtrOutput() TemplateBinWidthOptionsPtrOutput {
	return i.ToTemplateBinWidthOptionsPtrOutputWithContext(context.Background())
}

func (i *templateBinWidthOptionsPtrType) ToTemplateBinWidthOptionsPtrOutputWithContext(ctx context.Context) TemplateBinWidthOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBinWidthOptionsPtrOutput)
}

type TemplateBinWidthOptionsOutput struct{ *pulumi.OutputState }

func (TemplateBinWidthOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBinWidthOptions)(nil)).Elem()
}

func (o TemplateBinWidthOptionsOutput) ToTemplateBinWidthOptionsOutput() TemplateBinWidthOptionsOutput {
	return o
}

func (o TemplateBinWidthOptionsOutput) ToTemplateBinWidthOptionsOutputWithContext(ctx context.Context) TemplateBinWidthOptionsOutput {
	return o
}

func (o TemplateBinWidthOptionsOutput) ToTemplateBinWidthOptionsPtrOutput() TemplateBinWidthOptionsPtrOutput {
	return o.ToTemplateBinWidthOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateBinWidthOptionsOutput) ToTemplateBinWidthOptionsPtrOutputWithContext(ctx context.Context) TemplateBinWidthOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBinWidthOptions) *TemplateBinWidthOptions {
		return &v
	}).(TemplateBinWidthOptionsPtrOutput)
}

// The options that determine the bin count limit.
func (o TemplateBinWidthOptionsOutput) BinCountLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateBinWidthOptions) *float64 { return v.BinCountLimit }).(pulumi.Float64PtrOutput)
}

// The options that determine the bin width value.
func (o TemplateBinWidthOptionsOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateBinWidthOptions) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type TemplateBinWidthOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBinWidthOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBinWidthOptions)(nil)).Elem()
}

func (o TemplateBinWidthOptionsPtrOutput) ToTemplateBinWidthOptionsPtrOutput() TemplateBinWidthOptionsPtrOutput {
	return o
}

func (o TemplateBinWidthOptionsPtrOutput) ToTemplateBinWidthOptionsPtrOutputWithContext(ctx context.Context) TemplateBinWidthOptionsPtrOutput {
	return o
}

func (o TemplateBinWidthOptionsPtrOutput) Elem() TemplateBinWidthOptionsOutput {
	return o.ApplyT(func(v *TemplateBinWidthOptions) TemplateBinWidthOptions {
		if v != nil {
			return *v
		}
		var ret TemplateBinWidthOptions
		return ret
	}).(TemplateBinWidthOptionsOutput)
}

// The options that determine the bin count limit.
func (o TemplateBinWidthOptionsPtrOutput) BinCountLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateBinWidthOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.BinCountLimit
	}).(pulumi.Float64PtrOutput)
}

// The options that determine the bin width value.
func (o TemplateBinWidthOptionsPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateBinWidthOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateBodySectionConfiguration struct {
	// The configuration of content in a body section.
	Content TemplateBodySectionContent `pulumi:"content"`
	// The configuration of a page break for a section.
	PageBreakConfiguration *TemplateSectionPageBreakConfiguration `pulumi:"pageBreakConfiguration"`
	// Describes the configurations that are required to declare a section as repeating.
	RepeatConfiguration *TemplateBodySectionRepeatConfiguration `pulumi:"repeatConfiguration"`
	// The unique identifier of a body section.
	SectionId string `pulumi:"sectionId"`
	// The style options of a body section.
	Style *TemplateSectionStyle `pulumi:"style"`
}

// TemplateBodySectionConfigurationInput is an input type that accepts TemplateBodySectionConfigurationArgs and TemplateBodySectionConfigurationOutput values.
// You can construct a concrete instance of `TemplateBodySectionConfigurationInput` via:
//
//	TemplateBodySectionConfigurationArgs{...}
type TemplateBodySectionConfigurationInput interface {
	pulumi.Input

	ToTemplateBodySectionConfigurationOutput() TemplateBodySectionConfigurationOutput
	ToTemplateBodySectionConfigurationOutputWithContext(context.Context) TemplateBodySectionConfigurationOutput
}

type TemplateBodySectionConfigurationArgs struct {
	// The configuration of content in a body section.
	Content TemplateBodySectionContentInput `pulumi:"content"`
	// The configuration of a page break for a section.
	PageBreakConfiguration TemplateSectionPageBreakConfigurationPtrInput `pulumi:"pageBreakConfiguration"`
	// Describes the configurations that are required to declare a section as repeating.
	RepeatConfiguration TemplateBodySectionRepeatConfigurationPtrInput `pulumi:"repeatConfiguration"`
	// The unique identifier of a body section.
	SectionId pulumi.StringInput `pulumi:"sectionId"`
	// The style options of a body section.
	Style TemplateSectionStylePtrInput `pulumi:"style"`
}

func (TemplateBodySectionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionConfigurationArgs) ToTemplateBodySectionConfigurationOutput() TemplateBodySectionConfigurationOutput {
	return i.ToTemplateBodySectionConfigurationOutputWithContext(context.Background())
}

func (i TemplateBodySectionConfigurationArgs) ToTemplateBodySectionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionConfigurationOutput)
}

// TemplateBodySectionConfigurationArrayInput is an input type that accepts TemplateBodySectionConfigurationArray and TemplateBodySectionConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateBodySectionConfigurationArrayInput` via:
//
//	TemplateBodySectionConfigurationArray{ TemplateBodySectionConfigurationArgs{...} }
type TemplateBodySectionConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateBodySectionConfigurationArrayOutput() TemplateBodySectionConfigurationArrayOutput
	ToTemplateBodySectionConfigurationArrayOutputWithContext(context.Context) TemplateBodySectionConfigurationArrayOutput
}

type TemplateBodySectionConfigurationArray []TemplateBodySectionConfigurationInput

func (TemplateBodySectionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateBodySectionConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionConfigurationArray) ToTemplateBodySectionConfigurationArrayOutput() TemplateBodySectionConfigurationArrayOutput {
	return i.ToTemplateBodySectionConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateBodySectionConfigurationArray) ToTemplateBodySectionConfigurationArrayOutputWithContext(ctx context.Context) TemplateBodySectionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionConfigurationArrayOutput)
}

type TemplateBodySectionConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionConfigurationOutput) ToTemplateBodySectionConfigurationOutput() TemplateBodySectionConfigurationOutput {
	return o
}

func (o TemplateBodySectionConfigurationOutput) ToTemplateBodySectionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionConfigurationOutput {
	return o
}

// The configuration of content in a body section.
func (o TemplateBodySectionConfigurationOutput) Content() TemplateBodySectionContentOutput {
	return o.ApplyT(func(v TemplateBodySectionConfiguration) TemplateBodySectionContent { return v.Content }).(TemplateBodySectionContentOutput)
}

// The configuration of a page break for a section.
func (o TemplateBodySectionConfigurationOutput) PageBreakConfiguration() TemplateSectionPageBreakConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBodySectionConfiguration) *TemplateSectionPageBreakConfiguration {
		return v.PageBreakConfiguration
	}).(TemplateSectionPageBreakConfigurationPtrOutput)
}

// Describes the configurations that are required to declare a section as repeating.
func (o TemplateBodySectionConfigurationOutput) RepeatConfiguration() TemplateBodySectionRepeatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBodySectionConfiguration) *TemplateBodySectionRepeatConfiguration {
		return v.RepeatConfiguration
	}).(TemplateBodySectionRepeatConfigurationPtrOutput)
}

// The unique identifier of a body section.
func (o TemplateBodySectionConfigurationOutput) SectionId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateBodySectionConfiguration) string { return v.SectionId }).(pulumi.StringOutput)
}

// The style options of a body section.
func (o TemplateBodySectionConfigurationOutput) Style() TemplateSectionStylePtrOutput {
	return o.ApplyT(func(v TemplateBodySectionConfiguration) *TemplateSectionStyle { return v.Style }).(TemplateSectionStylePtrOutput)
}

type TemplateBodySectionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateBodySectionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionConfigurationArrayOutput) ToTemplateBodySectionConfigurationArrayOutput() TemplateBodySectionConfigurationArrayOutput {
	return o
}

func (o TemplateBodySectionConfigurationArrayOutput) ToTemplateBodySectionConfigurationArrayOutputWithContext(ctx context.Context) TemplateBodySectionConfigurationArrayOutput {
	return o
}

func (o TemplateBodySectionConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateBodySectionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateBodySectionConfiguration {
		return vs[0].([]TemplateBodySectionConfiguration)[vs[1].(int)]
	}).(TemplateBodySectionConfigurationOutput)
}

type TemplateBodySectionContent struct {
	// The layout configuration of a body section.
	Layout *TemplateSectionLayoutConfiguration `pulumi:"layout"`
}

// TemplateBodySectionContentInput is an input type that accepts TemplateBodySectionContentArgs and TemplateBodySectionContentOutput values.
// You can construct a concrete instance of `TemplateBodySectionContentInput` via:
//
//	TemplateBodySectionContentArgs{...}
type TemplateBodySectionContentInput interface {
	pulumi.Input

	ToTemplateBodySectionContentOutput() TemplateBodySectionContentOutput
	ToTemplateBodySectionContentOutputWithContext(context.Context) TemplateBodySectionContentOutput
}

type TemplateBodySectionContentArgs struct {
	// The layout configuration of a body section.
	Layout TemplateSectionLayoutConfigurationPtrInput `pulumi:"layout"`
}

func (TemplateBodySectionContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionContent)(nil)).Elem()
}

func (i TemplateBodySectionContentArgs) ToTemplateBodySectionContentOutput() TemplateBodySectionContentOutput {
	return i.ToTemplateBodySectionContentOutputWithContext(context.Background())
}

func (i TemplateBodySectionContentArgs) ToTemplateBodySectionContentOutputWithContext(ctx context.Context) TemplateBodySectionContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionContentOutput)
}

type TemplateBodySectionContentOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionContent)(nil)).Elem()
}

func (o TemplateBodySectionContentOutput) ToTemplateBodySectionContentOutput() TemplateBodySectionContentOutput {
	return o
}

func (o TemplateBodySectionContentOutput) ToTemplateBodySectionContentOutputWithContext(ctx context.Context) TemplateBodySectionContentOutput {
	return o
}

// The layout configuration of a body section.
func (o TemplateBodySectionContentOutput) Layout() TemplateSectionLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBodySectionContent) *TemplateSectionLayoutConfiguration { return v.Layout }).(TemplateSectionLayoutConfigurationPtrOutput)
}

type TemplateBodySectionDynamicCategoryDimensionConfiguration struct {
	Column TemplateColumnIdentifier `pulumi:"column"`
	// Number of values to use from the column for repetition.
	Limit *float64 `pulumi:"limit"`
	// Sort criteria on the column values that you use for repetition.
	SortByMetrics []TemplateColumnSort `pulumi:"sortByMetrics"`
}

// TemplateBodySectionDynamicCategoryDimensionConfigurationInput is an input type that accepts TemplateBodySectionDynamicCategoryDimensionConfigurationArgs and TemplateBodySectionDynamicCategoryDimensionConfigurationOutput values.
// You can construct a concrete instance of `TemplateBodySectionDynamicCategoryDimensionConfigurationInput` via:
//
//	TemplateBodySectionDynamicCategoryDimensionConfigurationArgs{...}
type TemplateBodySectionDynamicCategoryDimensionConfigurationInput interface {
	pulumi.Input

	ToTemplateBodySectionDynamicCategoryDimensionConfigurationOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationOutput
	ToTemplateBodySectionDynamicCategoryDimensionConfigurationOutputWithContext(context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationOutput
}

type TemplateBodySectionDynamicCategoryDimensionConfigurationArgs struct {
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// Number of values to use from the column for repetition.
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// Sort criteria on the column values that you use for repetition.
	SortByMetrics TemplateColumnSortArrayInput `pulumi:"sortByMetrics"`
}

func (TemplateBodySectionDynamicCategoryDimensionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionDynamicCategoryDimensionConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionDynamicCategoryDimensionConfigurationArgs) ToTemplateBodySectionDynamicCategoryDimensionConfigurationOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationOutput {
	return i.ToTemplateBodySectionDynamicCategoryDimensionConfigurationOutputWithContext(context.Background())
}

func (i TemplateBodySectionDynamicCategoryDimensionConfigurationArgs) ToTemplateBodySectionDynamicCategoryDimensionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionDynamicCategoryDimensionConfigurationOutput)
}

func (i TemplateBodySectionDynamicCategoryDimensionConfigurationArgs) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return i.ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBodySectionDynamicCategoryDimensionConfigurationArgs) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionDynamicCategoryDimensionConfigurationOutput).ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(ctx)
}

// TemplateBodySectionDynamicCategoryDimensionConfigurationPtrInput is an input type that accepts TemplateBodySectionDynamicCategoryDimensionConfigurationArgs, TemplateBodySectionDynamicCategoryDimensionConfigurationPtr and TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBodySectionDynamicCategoryDimensionConfigurationPtrInput` via:
//
//	        TemplateBodySectionDynamicCategoryDimensionConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBodySectionDynamicCategoryDimensionConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput
	ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput
}

type templateBodySectionDynamicCategoryDimensionConfigurationPtrType TemplateBodySectionDynamicCategoryDimensionConfigurationArgs

func TemplateBodySectionDynamicCategoryDimensionConfigurationPtr(v *TemplateBodySectionDynamicCategoryDimensionConfigurationArgs) TemplateBodySectionDynamicCategoryDimensionConfigurationPtrInput {
	return (*templateBodySectionDynamicCategoryDimensionConfigurationPtrType)(v)
}

func (*templateBodySectionDynamicCategoryDimensionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionDynamicCategoryDimensionConfiguration)(nil)).Elem()
}

func (i *templateBodySectionDynamicCategoryDimensionConfigurationPtrType) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return i.ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBodySectionDynamicCategoryDimensionConfigurationPtrType) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput)
}

type TemplateBodySectionDynamicCategoryDimensionConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionDynamicCategoryDimensionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) ToTemplateBodySectionDynamicCategoryDimensionConfigurationOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationOutput {
	return o
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) ToTemplateBodySectionDynamicCategoryDimensionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationOutput {
	return o
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return o.ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBodySectionDynamicCategoryDimensionConfiguration) *TemplateBodySectionDynamicCategoryDimensionConfiguration {
		return &v
	}).(TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput)
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateBodySectionDynamicCategoryDimensionConfiguration) TemplateColumnIdentifier {
		return v.Column
	}).(TemplateColumnIdentifierOutput)
}

// Number of values to use from the column for repetition.
func (o TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateBodySectionDynamicCategoryDimensionConfiguration) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// Sort criteria on the column values that you use for repetition.
func (o TemplateBodySectionDynamicCategoryDimensionConfigurationOutput) SortByMetrics() TemplateColumnSortArrayOutput {
	return o.ApplyT(func(v TemplateBodySectionDynamicCategoryDimensionConfiguration) []TemplateColumnSort {
		return v.SortByMetrics
	}).(TemplateColumnSortArrayOutput)
}

type TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionDynamicCategoryDimensionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput() TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput) ToTemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput) Elem() TemplateBodySectionDynamicCategoryDimensionConfigurationOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicCategoryDimensionConfiguration) TemplateBodySectionDynamicCategoryDimensionConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBodySectionDynamicCategoryDimensionConfiguration
		return ret
	}).(TemplateBodySectionDynamicCategoryDimensionConfigurationOutput)
}

func (o TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicCategoryDimensionConfiguration) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// Number of values to use from the column for repetition.
func (o TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicCategoryDimensionConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.Float64PtrOutput)
}

// Sort criteria on the column values that you use for repetition.
func (o TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput) SortByMetrics() TemplateColumnSortArrayOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicCategoryDimensionConfiguration) []TemplateColumnSort {
		if v == nil {
			return nil
		}
		return v.SortByMetrics
	}).(TemplateColumnSortArrayOutput)
}

type TemplateBodySectionDynamicNumericDimensionConfiguration struct {
	Column TemplateColumnIdentifier `pulumi:"column"`
	// Number of values to use from the column for repetition.
	Limit *float64 `pulumi:"limit"`
	// Sort criteria on the column values that you use for repetition.
	SortByMetrics []TemplateColumnSort `pulumi:"sortByMetrics"`
}

// TemplateBodySectionDynamicNumericDimensionConfigurationInput is an input type that accepts TemplateBodySectionDynamicNumericDimensionConfigurationArgs and TemplateBodySectionDynamicNumericDimensionConfigurationOutput values.
// You can construct a concrete instance of `TemplateBodySectionDynamicNumericDimensionConfigurationInput` via:
//
//	TemplateBodySectionDynamicNumericDimensionConfigurationArgs{...}
type TemplateBodySectionDynamicNumericDimensionConfigurationInput interface {
	pulumi.Input

	ToTemplateBodySectionDynamicNumericDimensionConfigurationOutput() TemplateBodySectionDynamicNumericDimensionConfigurationOutput
	ToTemplateBodySectionDynamicNumericDimensionConfigurationOutputWithContext(context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationOutput
}

type TemplateBodySectionDynamicNumericDimensionConfigurationArgs struct {
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// Number of values to use from the column for repetition.
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// Sort criteria on the column values that you use for repetition.
	SortByMetrics TemplateColumnSortArrayInput `pulumi:"sortByMetrics"`
}

func (TemplateBodySectionDynamicNumericDimensionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionDynamicNumericDimensionConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionDynamicNumericDimensionConfigurationArgs) ToTemplateBodySectionDynamicNumericDimensionConfigurationOutput() TemplateBodySectionDynamicNumericDimensionConfigurationOutput {
	return i.ToTemplateBodySectionDynamicNumericDimensionConfigurationOutputWithContext(context.Background())
}

func (i TemplateBodySectionDynamicNumericDimensionConfigurationArgs) ToTemplateBodySectionDynamicNumericDimensionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionDynamicNumericDimensionConfigurationOutput)
}

func (i TemplateBodySectionDynamicNumericDimensionConfigurationArgs) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput() TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return i.ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBodySectionDynamicNumericDimensionConfigurationArgs) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionDynamicNumericDimensionConfigurationOutput).ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(ctx)
}

// TemplateBodySectionDynamicNumericDimensionConfigurationPtrInput is an input type that accepts TemplateBodySectionDynamicNumericDimensionConfigurationArgs, TemplateBodySectionDynamicNumericDimensionConfigurationPtr and TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBodySectionDynamicNumericDimensionConfigurationPtrInput` via:
//
//	        TemplateBodySectionDynamicNumericDimensionConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBodySectionDynamicNumericDimensionConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput() TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput
	ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput
}

type templateBodySectionDynamicNumericDimensionConfigurationPtrType TemplateBodySectionDynamicNumericDimensionConfigurationArgs

func TemplateBodySectionDynamicNumericDimensionConfigurationPtr(v *TemplateBodySectionDynamicNumericDimensionConfigurationArgs) TemplateBodySectionDynamicNumericDimensionConfigurationPtrInput {
	return (*templateBodySectionDynamicNumericDimensionConfigurationPtrType)(v)
}

func (*templateBodySectionDynamicNumericDimensionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionDynamicNumericDimensionConfiguration)(nil)).Elem()
}

func (i *templateBodySectionDynamicNumericDimensionConfigurationPtrType) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput() TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return i.ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBodySectionDynamicNumericDimensionConfigurationPtrType) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput)
}

type TemplateBodySectionDynamicNumericDimensionConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionDynamicNumericDimensionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionDynamicNumericDimensionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationOutput) ToTemplateBodySectionDynamicNumericDimensionConfigurationOutput() TemplateBodySectionDynamicNumericDimensionConfigurationOutput {
	return o
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationOutput) ToTemplateBodySectionDynamicNumericDimensionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationOutput {
	return o
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationOutput) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput() TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return o.ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationOutput) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBodySectionDynamicNumericDimensionConfiguration) *TemplateBodySectionDynamicNumericDimensionConfiguration {
		return &v
	}).(TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput)
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateBodySectionDynamicNumericDimensionConfiguration) TemplateColumnIdentifier {
		return v.Column
	}).(TemplateColumnIdentifierOutput)
}

// Number of values to use from the column for repetition.
func (o TemplateBodySectionDynamicNumericDimensionConfigurationOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateBodySectionDynamicNumericDimensionConfiguration) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// Sort criteria on the column values that you use for repetition.
func (o TemplateBodySectionDynamicNumericDimensionConfigurationOutput) SortByMetrics() TemplateColumnSortArrayOutput {
	return o.ApplyT(func(v TemplateBodySectionDynamicNumericDimensionConfiguration) []TemplateColumnSort {
		return v.SortByMetrics
	}).(TemplateColumnSortArrayOutput)
}

type TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionDynamicNumericDimensionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput() TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput) ToTemplateBodySectionDynamicNumericDimensionConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput) Elem() TemplateBodySectionDynamicNumericDimensionConfigurationOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicNumericDimensionConfiguration) TemplateBodySectionDynamicNumericDimensionConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBodySectionDynamicNumericDimensionConfiguration
		return ret
	}).(TemplateBodySectionDynamicNumericDimensionConfigurationOutput)
}

func (o TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicNumericDimensionConfiguration) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// Number of values to use from the column for repetition.
func (o TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicNumericDimensionConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.Float64PtrOutput)
}

// Sort criteria on the column values that you use for repetition.
func (o TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput) SortByMetrics() TemplateColumnSortArrayOutput {
	return o.ApplyT(func(v *TemplateBodySectionDynamicNumericDimensionConfiguration) []TemplateColumnSort {
		if v == nil {
			return nil
		}
		return v.SortByMetrics
	}).(TemplateColumnSortArrayOutput)
}

type TemplateBodySectionRepeatConfiguration struct {
	// List of `BodySectionRepeatDimensionConfiguration` values that describe the dataset column and constraints for the column used to repeat the contents of a section.
	DimensionConfigurations []TemplateBodySectionRepeatDimensionConfiguration `pulumi:"dimensionConfigurations"`
	// List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.
	NonRepeatingVisuals []string `pulumi:"nonRepeatingVisuals"`
	// Page break configuration to apply for each repeating instance.
	PageBreakConfiguration *TemplateBodySectionRepeatPageBreakConfiguration `pulumi:"pageBreakConfiguration"`
}

// TemplateBodySectionRepeatConfigurationInput is an input type that accepts TemplateBodySectionRepeatConfigurationArgs and TemplateBodySectionRepeatConfigurationOutput values.
// You can construct a concrete instance of `TemplateBodySectionRepeatConfigurationInput` via:
//
//	TemplateBodySectionRepeatConfigurationArgs{...}
type TemplateBodySectionRepeatConfigurationInput interface {
	pulumi.Input

	ToTemplateBodySectionRepeatConfigurationOutput() TemplateBodySectionRepeatConfigurationOutput
	ToTemplateBodySectionRepeatConfigurationOutputWithContext(context.Context) TemplateBodySectionRepeatConfigurationOutput
}

type TemplateBodySectionRepeatConfigurationArgs struct {
	// List of `BodySectionRepeatDimensionConfiguration` values that describe the dataset column and constraints for the column used to repeat the contents of a section.
	DimensionConfigurations TemplateBodySectionRepeatDimensionConfigurationArrayInput `pulumi:"dimensionConfigurations"`
	// List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.
	NonRepeatingVisuals pulumi.StringArrayInput `pulumi:"nonRepeatingVisuals"`
	// Page break configuration to apply for each repeating instance.
	PageBreakConfiguration TemplateBodySectionRepeatPageBreakConfigurationPtrInput `pulumi:"pageBreakConfiguration"`
}

func (TemplateBodySectionRepeatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionRepeatConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionRepeatConfigurationArgs) ToTemplateBodySectionRepeatConfigurationOutput() TemplateBodySectionRepeatConfigurationOutput {
	return i.ToTemplateBodySectionRepeatConfigurationOutputWithContext(context.Background())
}

func (i TemplateBodySectionRepeatConfigurationArgs) ToTemplateBodySectionRepeatConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionRepeatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatConfigurationOutput)
}

func (i TemplateBodySectionRepeatConfigurationArgs) ToTemplateBodySectionRepeatConfigurationPtrOutput() TemplateBodySectionRepeatConfigurationPtrOutput {
	return i.ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBodySectionRepeatConfigurationArgs) ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatConfigurationOutput).ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(ctx)
}

// TemplateBodySectionRepeatConfigurationPtrInput is an input type that accepts TemplateBodySectionRepeatConfigurationArgs, TemplateBodySectionRepeatConfigurationPtr and TemplateBodySectionRepeatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBodySectionRepeatConfigurationPtrInput` via:
//
//	        TemplateBodySectionRepeatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBodySectionRepeatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBodySectionRepeatConfigurationPtrOutput() TemplateBodySectionRepeatConfigurationPtrOutput
	ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(context.Context) TemplateBodySectionRepeatConfigurationPtrOutput
}

type templateBodySectionRepeatConfigurationPtrType TemplateBodySectionRepeatConfigurationArgs

func TemplateBodySectionRepeatConfigurationPtr(v *TemplateBodySectionRepeatConfigurationArgs) TemplateBodySectionRepeatConfigurationPtrInput {
	return (*templateBodySectionRepeatConfigurationPtrType)(v)
}

func (*templateBodySectionRepeatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionRepeatConfiguration)(nil)).Elem()
}

func (i *templateBodySectionRepeatConfigurationPtrType) ToTemplateBodySectionRepeatConfigurationPtrOutput() TemplateBodySectionRepeatConfigurationPtrOutput {
	return i.ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBodySectionRepeatConfigurationPtrType) ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatConfigurationPtrOutput)
}

type TemplateBodySectionRepeatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionRepeatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionRepeatConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionRepeatConfigurationOutput) ToTemplateBodySectionRepeatConfigurationOutput() TemplateBodySectionRepeatConfigurationOutput {
	return o
}

func (o TemplateBodySectionRepeatConfigurationOutput) ToTemplateBodySectionRepeatConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionRepeatConfigurationOutput {
	return o
}

func (o TemplateBodySectionRepeatConfigurationOutput) ToTemplateBodySectionRepeatConfigurationPtrOutput() TemplateBodySectionRepeatConfigurationPtrOutput {
	return o.ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBodySectionRepeatConfigurationOutput) ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBodySectionRepeatConfiguration) *TemplateBodySectionRepeatConfiguration {
		return &v
	}).(TemplateBodySectionRepeatConfigurationPtrOutput)
}

// List of `BodySectionRepeatDimensionConfiguration` values that describe the dataset column and constraints for the column used to repeat the contents of a section.
func (o TemplateBodySectionRepeatConfigurationOutput) DimensionConfigurations() TemplateBodySectionRepeatDimensionConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateBodySectionRepeatConfiguration) []TemplateBodySectionRepeatDimensionConfiguration {
		return v.DimensionConfigurations
	}).(TemplateBodySectionRepeatDimensionConfigurationArrayOutput)
}

// List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.
func (o TemplateBodySectionRepeatConfigurationOutput) NonRepeatingVisuals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateBodySectionRepeatConfiguration) []string { return v.NonRepeatingVisuals }).(pulumi.StringArrayOutput)
}

// Page break configuration to apply for each repeating instance.
func (o TemplateBodySectionRepeatConfigurationOutput) PageBreakConfiguration() TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBodySectionRepeatConfiguration) *TemplateBodySectionRepeatPageBreakConfiguration {
		return v.PageBreakConfiguration
	}).(TemplateBodySectionRepeatPageBreakConfigurationPtrOutput)
}

type TemplateBodySectionRepeatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionRepeatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionRepeatConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionRepeatConfigurationPtrOutput) ToTemplateBodySectionRepeatConfigurationPtrOutput() TemplateBodySectionRepeatConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionRepeatConfigurationPtrOutput) ToTemplateBodySectionRepeatConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionRepeatConfigurationPtrOutput) Elem() TemplateBodySectionRepeatConfigurationOutput {
	return o.ApplyT(func(v *TemplateBodySectionRepeatConfiguration) TemplateBodySectionRepeatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBodySectionRepeatConfiguration
		return ret
	}).(TemplateBodySectionRepeatConfigurationOutput)
}

// List of `BodySectionRepeatDimensionConfiguration` values that describe the dataset column and constraints for the column used to repeat the contents of a section.
func (o TemplateBodySectionRepeatConfigurationPtrOutput) DimensionConfigurations() TemplateBodySectionRepeatDimensionConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateBodySectionRepeatConfiguration) []TemplateBodySectionRepeatDimensionConfiguration {
		if v == nil {
			return nil
		}
		return v.DimensionConfigurations
	}).(TemplateBodySectionRepeatDimensionConfigurationArrayOutput)
}

// List of visuals to exclude from repetition in repeating sections. The visuals will render identically, and ignore the repeating configurations in all repeating instances.
func (o TemplateBodySectionRepeatConfigurationPtrOutput) NonRepeatingVisuals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateBodySectionRepeatConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.NonRepeatingVisuals
	}).(pulumi.StringArrayOutput)
}

// Page break configuration to apply for each repeating instance.
func (o TemplateBodySectionRepeatConfigurationPtrOutput) PageBreakConfiguration() TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBodySectionRepeatConfiguration) *TemplateBodySectionRepeatPageBreakConfiguration {
		if v == nil {
			return nil
		}
		return v.PageBreakConfiguration
	}).(TemplateBodySectionRepeatPageBreakConfigurationPtrOutput)
}

type TemplateBodySectionRepeatDimensionConfiguration struct {
	// Describes the *Category* dataset column and constraints around the dynamic values that will be used in repeating the section contents.
	DynamicCategoryDimensionConfiguration *TemplateBodySectionDynamicCategoryDimensionConfiguration `pulumi:"dynamicCategoryDimensionConfiguration"`
	// Describes the *Numeric* dataset column and constraints around the dynamic values used to repeat the contents of a section.
	DynamicNumericDimensionConfiguration *TemplateBodySectionDynamicNumericDimensionConfiguration `pulumi:"dynamicNumericDimensionConfiguration"`
}

// TemplateBodySectionRepeatDimensionConfigurationInput is an input type that accepts TemplateBodySectionRepeatDimensionConfigurationArgs and TemplateBodySectionRepeatDimensionConfigurationOutput values.
// You can construct a concrete instance of `TemplateBodySectionRepeatDimensionConfigurationInput` via:
//
//	TemplateBodySectionRepeatDimensionConfigurationArgs{...}
type TemplateBodySectionRepeatDimensionConfigurationInput interface {
	pulumi.Input

	ToTemplateBodySectionRepeatDimensionConfigurationOutput() TemplateBodySectionRepeatDimensionConfigurationOutput
	ToTemplateBodySectionRepeatDimensionConfigurationOutputWithContext(context.Context) TemplateBodySectionRepeatDimensionConfigurationOutput
}

type TemplateBodySectionRepeatDimensionConfigurationArgs struct {
	// Describes the *Category* dataset column and constraints around the dynamic values that will be used in repeating the section contents.
	DynamicCategoryDimensionConfiguration TemplateBodySectionDynamicCategoryDimensionConfigurationPtrInput `pulumi:"dynamicCategoryDimensionConfiguration"`
	// Describes the *Numeric* dataset column and constraints around the dynamic values used to repeat the contents of a section.
	DynamicNumericDimensionConfiguration TemplateBodySectionDynamicNumericDimensionConfigurationPtrInput `pulumi:"dynamicNumericDimensionConfiguration"`
}

func (TemplateBodySectionRepeatDimensionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionRepeatDimensionConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionRepeatDimensionConfigurationArgs) ToTemplateBodySectionRepeatDimensionConfigurationOutput() TemplateBodySectionRepeatDimensionConfigurationOutput {
	return i.ToTemplateBodySectionRepeatDimensionConfigurationOutputWithContext(context.Background())
}

func (i TemplateBodySectionRepeatDimensionConfigurationArgs) ToTemplateBodySectionRepeatDimensionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionRepeatDimensionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatDimensionConfigurationOutput)
}

// TemplateBodySectionRepeatDimensionConfigurationArrayInput is an input type that accepts TemplateBodySectionRepeatDimensionConfigurationArray and TemplateBodySectionRepeatDimensionConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateBodySectionRepeatDimensionConfigurationArrayInput` via:
//
//	TemplateBodySectionRepeatDimensionConfigurationArray{ TemplateBodySectionRepeatDimensionConfigurationArgs{...} }
type TemplateBodySectionRepeatDimensionConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateBodySectionRepeatDimensionConfigurationArrayOutput() TemplateBodySectionRepeatDimensionConfigurationArrayOutput
	ToTemplateBodySectionRepeatDimensionConfigurationArrayOutputWithContext(context.Context) TemplateBodySectionRepeatDimensionConfigurationArrayOutput
}

type TemplateBodySectionRepeatDimensionConfigurationArray []TemplateBodySectionRepeatDimensionConfigurationInput

func (TemplateBodySectionRepeatDimensionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateBodySectionRepeatDimensionConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionRepeatDimensionConfigurationArray) ToTemplateBodySectionRepeatDimensionConfigurationArrayOutput() TemplateBodySectionRepeatDimensionConfigurationArrayOutput {
	return i.ToTemplateBodySectionRepeatDimensionConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateBodySectionRepeatDimensionConfigurationArray) ToTemplateBodySectionRepeatDimensionConfigurationArrayOutputWithContext(ctx context.Context) TemplateBodySectionRepeatDimensionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatDimensionConfigurationArrayOutput)
}

type TemplateBodySectionRepeatDimensionConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionRepeatDimensionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionRepeatDimensionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionRepeatDimensionConfigurationOutput) ToTemplateBodySectionRepeatDimensionConfigurationOutput() TemplateBodySectionRepeatDimensionConfigurationOutput {
	return o
}

func (o TemplateBodySectionRepeatDimensionConfigurationOutput) ToTemplateBodySectionRepeatDimensionConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionRepeatDimensionConfigurationOutput {
	return o
}

// Describes the *Category* dataset column and constraints around the dynamic values that will be used in repeating the section contents.
func (o TemplateBodySectionRepeatDimensionConfigurationOutput) DynamicCategoryDimensionConfiguration() TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBodySectionRepeatDimensionConfiguration) *TemplateBodySectionDynamicCategoryDimensionConfiguration {
		return v.DynamicCategoryDimensionConfiguration
	}).(TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput)
}

// Describes the *Numeric* dataset column and constraints around the dynamic values used to repeat the contents of a section.
func (o TemplateBodySectionRepeatDimensionConfigurationOutput) DynamicNumericDimensionConfiguration() TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBodySectionRepeatDimensionConfiguration) *TemplateBodySectionDynamicNumericDimensionConfiguration {
		return v.DynamicNumericDimensionConfiguration
	}).(TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput)
}

type TemplateBodySectionRepeatDimensionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionRepeatDimensionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateBodySectionRepeatDimensionConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionRepeatDimensionConfigurationArrayOutput) ToTemplateBodySectionRepeatDimensionConfigurationArrayOutput() TemplateBodySectionRepeatDimensionConfigurationArrayOutput {
	return o
}

func (o TemplateBodySectionRepeatDimensionConfigurationArrayOutput) ToTemplateBodySectionRepeatDimensionConfigurationArrayOutputWithContext(ctx context.Context) TemplateBodySectionRepeatDimensionConfigurationArrayOutput {
	return o
}

func (o TemplateBodySectionRepeatDimensionConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateBodySectionRepeatDimensionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateBodySectionRepeatDimensionConfiguration {
		return vs[0].([]TemplateBodySectionRepeatDimensionConfiguration)[vs[1].(int)]
	}).(TemplateBodySectionRepeatDimensionConfigurationOutput)
}

type TemplateBodySectionRepeatPageBreakConfiguration struct {
	After *TemplateSectionAfterPageBreak `pulumi:"after"`
}

// TemplateBodySectionRepeatPageBreakConfigurationInput is an input type that accepts TemplateBodySectionRepeatPageBreakConfigurationArgs and TemplateBodySectionRepeatPageBreakConfigurationOutput values.
// You can construct a concrete instance of `TemplateBodySectionRepeatPageBreakConfigurationInput` via:
//
//	TemplateBodySectionRepeatPageBreakConfigurationArgs{...}
type TemplateBodySectionRepeatPageBreakConfigurationInput interface {
	pulumi.Input

	ToTemplateBodySectionRepeatPageBreakConfigurationOutput() TemplateBodySectionRepeatPageBreakConfigurationOutput
	ToTemplateBodySectionRepeatPageBreakConfigurationOutputWithContext(context.Context) TemplateBodySectionRepeatPageBreakConfigurationOutput
}

type TemplateBodySectionRepeatPageBreakConfigurationArgs struct {
	After TemplateSectionAfterPageBreakPtrInput `pulumi:"after"`
}

func (TemplateBodySectionRepeatPageBreakConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionRepeatPageBreakConfiguration)(nil)).Elem()
}

func (i TemplateBodySectionRepeatPageBreakConfigurationArgs) ToTemplateBodySectionRepeatPageBreakConfigurationOutput() TemplateBodySectionRepeatPageBreakConfigurationOutput {
	return i.ToTemplateBodySectionRepeatPageBreakConfigurationOutputWithContext(context.Background())
}

func (i TemplateBodySectionRepeatPageBreakConfigurationArgs) ToTemplateBodySectionRepeatPageBreakConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionRepeatPageBreakConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatPageBreakConfigurationOutput)
}

func (i TemplateBodySectionRepeatPageBreakConfigurationArgs) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutput() TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return i.ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBodySectionRepeatPageBreakConfigurationArgs) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatPageBreakConfigurationOutput).ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(ctx)
}

// TemplateBodySectionRepeatPageBreakConfigurationPtrInput is an input type that accepts TemplateBodySectionRepeatPageBreakConfigurationArgs, TemplateBodySectionRepeatPageBreakConfigurationPtr and TemplateBodySectionRepeatPageBreakConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBodySectionRepeatPageBreakConfigurationPtrInput` via:
//
//	        TemplateBodySectionRepeatPageBreakConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBodySectionRepeatPageBreakConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutput() TemplateBodySectionRepeatPageBreakConfigurationPtrOutput
	ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(context.Context) TemplateBodySectionRepeatPageBreakConfigurationPtrOutput
}

type templateBodySectionRepeatPageBreakConfigurationPtrType TemplateBodySectionRepeatPageBreakConfigurationArgs

func TemplateBodySectionRepeatPageBreakConfigurationPtr(v *TemplateBodySectionRepeatPageBreakConfigurationArgs) TemplateBodySectionRepeatPageBreakConfigurationPtrInput {
	return (*templateBodySectionRepeatPageBreakConfigurationPtrType)(v)
}

func (*templateBodySectionRepeatPageBreakConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionRepeatPageBreakConfiguration)(nil)).Elem()
}

func (i *templateBodySectionRepeatPageBreakConfigurationPtrType) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutput() TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return i.ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBodySectionRepeatPageBreakConfigurationPtrType) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBodySectionRepeatPageBreakConfigurationPtrOutput)
}

type TemplateBodySectionRepeatPageBreakConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionRepeatPageBreakConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBodySectionRepeatPageBreakConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionRepeatPageBreakConfigurationOutput) ToTemplateBodySectionRepeatPageBreakConfigurationOutput() TemplateBodySectionRepeatPageBreakConfigurationOutput {
	return o
}

func (o TemplateBodySectionRepeatPageBreakConfigurationOutput) ToTemplateBodySectionRepeatPageBreakConfigurationOutputWithContext(ctx context.Context) TemplateBodySectionRepeatPageBreakConfigurationOutput {
	return o
}

func (o TemplateBodySectionRepeatPageBreakConfigurationOutput) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutput() TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return o.ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBodySectionRepeatPageBreakConfigurationOutput) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBodySectionRepeatPageBreakConfiguration) *TemplateBodySectionRepeatPageBreakConfiguration {
		return &v
	}).(TemplateBodySectionRepeatPageBreakConfigurationPtrOutput)
}

func (o TemplateBodySectionRepeatPageBreakConfigurationOutput) After() TemplateSectionAfterPageBreakPtrOutput {
	return o.ApplyT(func(v TemplateBodySectionRepeatPageBreakConfiguration) *TemplateSectionAfterPageBreak { return v.After }).(TemplateSectionAfterPageBreakPtrOutput)
}

type TemplateBodySectionRepeatPageBreakConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBodySectionRepeatPageBreakConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBodySectionRepeatPageBreakConfiguration)(nil)).Elem()
}

func (o TemplateBodySectionRepeatPageBreakConfigurationPtrOutput) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutput() TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionRepeatPageBreakConfigurationPtrOutput) ToTemplateBodySectionRepeatPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateBodySectionRepeatPageBreakConfigurationPtrOutput {
	return o
}

func (o TemplateBodySectionRepeatPageBreakConfigurationPtrOutput) Elem() TemplateBodySectionRepeatPageBreakConfigurationOutput {
	return o.ApplyT(func(v *TemplateBodySectionRepeatPageBreakConfiguration) TemplateBodySectionRepeatPageBreakConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBodySectionRepeatPageBreakConfiguration
		return ret
	}).(TemplateBodySectionRepeatPageBreakConfigurationOutput)
}

func (o TemplateBodySectionRepeatPageBreakConfigurationPtrOutput) After() TemplateSectionAfterPageBreakPtrOutput {
	return o.ApplyT(func(v *TemplateBodySectionRepeatPageBreakConfiguration) *TemplateSectionAfterPageBreak {
		if v == nil {
			return nil
		}
		return v.After
	}).(TemplateSectionAfterPageBreakPtrOutput)
}

type TemplateBoxPlotAggregatedFieldWells struct {
	// The group by field well of a box plot chart. Values are grouped based on group by fields.
	GroupBy []TemplateDimensionField `pulumi:"groupBy"`
	// The value field well of a box plot chart. Values are aggregated based on group by fields.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateBoxPlotAggregatedFieldWellsInput is an input type that accepts TemplateBoxPlotAggregatedFieldWellsArgs and TemplateBoxPlotAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateBoxPlotAggregatedFieldWellsInput` via:
//
//	TemplateBoxPlotAggregatedFieldWellsArgs{...}
type TemplateBoxPlotAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateBoxPlotAggregatedFieldWellsOutput() TemplateBoxPlotAggregatedFieldWellsOutput
	ToTemplateBoxPlotAggregatedFieldWellsOutputWithContext(context.Context) TemplateBoxPlotAggregatedFieldWellsOutput
}

type TemplateBoxPlotAggregatedFieldWellsArgs struct {
	// The group by field well of a box plot chart. Values are grouped based on group by fields.
	GroupBy TemplateDimensionFieldArrayInput `pulumi:"groupBy"`
	// The value field well of a box plot chart. Values are aggregated based on group by fields.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateBoxPlotAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateBoxPlotAggregatedFieldWellsArgs) ToTemplateBoxPlotAggregatedFieldWellsOutput() TemplateBoxPlotAggregatedFieldWellsOutput {
	return i.ToTemplateBoxPlotAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateBoxPlotAggregatedFieldWellsArgs) ToTemplateBoxPlotAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateBoxPlotAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotAggregatedFieldWellsOutput)
}

func (i TemplateBoxPlotAggregatedFieldWellsArgs) ToTemplateBoxPlotAggregatedFieldWellsPtrOutput() TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return i.ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateBoxPlotAggregatedFieldWellsArgs) ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotAggregatedFieldWellsOutput).ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateBoxPlotAggregatedFieldWellsPtrInput is an input type that accepts TemplateBoxPlotAggregatedFieldWellsArgs, TemplateBoxPlotAggregatedFieldWellsPtr and TemplateBoxPlotAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateBoxPlotAggregatedFieldWellsPtrInput` via:
//
//	        TemplateBoxPlotAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateBoxPlotAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateBoxPlotAggregatedFieldWellsPtrOutput() TemplateBoxPlotAggregatedFieldWellsPtrOutput
	ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateBoxPlotAggregatedFieldWellsPtrOutput
}

type templateBoxPlotAggregatedFieldWellsPtrType TemplateBoxPlotAggregatedFieldWellsArgs

func TemplateBoxPlotAggregatedFieldWellsPtr(v *TemplateBoxPlotAggregatedFieldWellsArgs) TemplateBoxPlotAggregatedFieldWellsPtrInput {
	return (*templateBoxPlotAggregatedFieldWellsPtrType)(v)
}

func (*templateBoxPlotAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotAggregatedFieldWells)(nil)).Elem()
}

func (i *templateBoxPlotAggregatedFieldWellsPtrType) ToTemplateBoxPlotAggregatedFieldWellsPtrOutput() TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return i.ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateBoxPlotAggregatedFieldWellsPtrType) ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotAggregatedFieldWellsPtrOutput)
}

type TemplateBoxPlotAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateBoxPlotAggregatedFieldWellsOutput) ToTemplateBoxPlotAggregatedFieldWellsOutput() TemplateBoxPlotAggregatedFieldWellsOutput {
	return o
}

func (o TemplateBoxPlotAggregatedFieldWellsOutput) ToTemplateBoxPlotAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateBoxPlotAggregatedFieldWellsOutput {
	return o
}

func (o TemplateBoxPlotAggregatedFieldWellsOutput) ToTemplateBoxPlotAggregatedFieldWellsPtrOutput() TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return o.ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateBoxPlotAggregatedFieldWellsOutput) ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBoxPlotAggregatedFieldWells) *TemplateBoxPlotAggregatedFieldWells {
		return &v
	}).(TemplateBoxPlotAggregatedFieldWellsPtrOutput)
}

// The group by field well of a box plot chart. Values are grouped based on group by fields.
func (o TemplateBoxPlotAggregatedFieldWellsOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateBoxPlotAggregatedFieldWells) []TemplateDimensionField { return v.GroupBy }).(TemplateDimensionFieldArrayOutput)
}

// The value field well of a box plot chart. Values are aggregated based on group by fields.
func (o TemplateBoxPlotAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateBoxPlotAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateBoxPlotAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateBoxPlotAggregatedFieldWellsPtrOutput) ToTemplateBoxPlotAggregatedFieldWellsPtrOutput() TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateBoxPlotAggregatedFieldWellsPtrOutput) ToTemplateBoxPlotAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateBoxPlotAggregatedFieldWellsPtrOutput) Elem() TemplateBoxPlotAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateBoxPlotAggregatedFieldWells) TemplateBoxPlotAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateBoxPlotAggregatedFieldWells
		return ret
	}).(TemplateBoxPlotAggregatedFieldWellsOutput)
}

// The group by field well of a box plot chart. Values are grouped based on group by fields.
func (o TemplateBoxPlotAggregatedFieldWellsPtrOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateBoxPlotAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.GroupBy
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field well of a box plot chart. Values are aggregated based on group by fields.
func (o TemplateBoxPlotAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateBoxPlotAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateBoxPlotChartConfiguration struct {
	// The box plot chart options for a box plot visual
	BoxPlotOptions *TemplateBoxPlotOptions `pulumi:"boxPlotOptions"`
	// The label display options (grid line, range, scale, axis step) of a box plot category.
	CategoryAxis *TemplateAxisDisplayOptions `pulumi:"categoryAxis"`
	// The label options (label text, label visibility and sort Icon visibility) of a box plot category.
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells *TemplateBoxPlotFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	Legend       *TemplateLegendOptions            `pulumi:"legend"`
	// The label display options (grid line, range, scale, axis step) of a box plot category.
	PrimaryYAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"primaryYAxisDisplayOptions"`
	// The label options (label text, label visibility and sort icon visibility) of a box plot value.
	PrimaryYAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"primaryYAxisLabelOptions"`
	// The reference line setup of the visual.
	ReferenceLines []TemplateReferenceLine `pulumi:"referenceLines"`
	// The sort configuration of a `BoxPlotVisual` .
	SortConfiguration *TemplateBoxPlotSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The palette (chart color) display setup of the visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
}

// TemplateBoxPlotChartConfigurationInput is an input type that accepts TemplateBoxPlotChartConfigurationArgs and TemplateBoxPlotChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateBoxPlotChartConfigurationInput` via:
//
//	TemplateBoxPlotChartConfigurationArgs{...}
type TemplateBoxPlotChartConfigurationInput interface {
	pulumi.Input

	ToTemplateBoxPlotChartConfigurationOutput() TemplateBoxPlotChartConfigurationOutput
	ToTemplateBoxPlotChartConfigurationOutputWithContext(context.Context) TemplateBoxPlotChartConfigurationOutput
}

type TemplateBoxPlotChartConfigurationArgs struct {
	// The box plot chart options for a box plot visual
	BoxPlotOptions TemplateBoxPlotOptionsPtrInput `pulumi:"boxPlotOptions"`
	// The label display options (grid line, range, scale, axis step) of a box plot category.
	CategoryAxis TemplateAxisDisplayOptionsPtrInput `pulumi:"categoryAxis"`
	// The label options (label text, label visibility and sort Icon visibility) of a box plot category.
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells TemplateBoxPlotFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	Legend       TemplateLegendOptionsPtrInput            `pulumi:"legend"`
	// The label display options (grid line, range, scale, axis step) of a box plot category.
	PrimaryYAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"primaryYAxisDisplayOptions"`
	// The label options (label text, label visibility and sort icon visibility) of a box plot value.
	PrimaryYAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"primaryYAxisLabelOptions"`
	// The reference line setup of the visual.
	ReferenceLines TemplateReferenceLineArrayInput `pulumi:"referenceLines"`
	// The sort configuration of a `BoxPlotVisual` .
	SortConfiguration TemplateBoxPlotSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The palette (chart color) display setup of the visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
}

func (TemplateBoxPlotChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotChartConfiguration)(nil)).Elem()
}

func (i TemplateBoxPlotChartConfigurationArgs) ToTemplateBoxPlotChartConfigurationOutput() TemplateBoxPlotChartConfigurationOutput {
	return i.ToTemplateBoxPlotChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateBoxPlotChartConfigurationArgs) ToTemplateBoxPlotChartConfigurationOutputWithContext(ctx context.Context) TemplateBoxPlotChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotChartConfigurationOutput)
}

func (i TemplateBoxPlotChartConfigurationArgs) ToTemplateBoxPlotChartConfigurationPtrOutput() TemplateBoxPlotChartConfigurationPtrOutput {
	return i.ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBoxPlotChartConfigurationArgs) ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotChartConfigurationOutput).ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateBoxPlotChartConfigurationPtrInput is an input type that accepts TemplateBoxPlotChartConfigurationArgs, TemplateBoxPlotChartConfigurationPtr and TemplateBoxPlotChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBoxPlotChartConfigurationPtrInput` via:
//
//	        TemplateBoxPlotChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBoxPlotChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBoxPlotChartConfigurationPtrOutput() TemplateBoxPlotChartConfigurationPtrOutput
	ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(context.Context) TemplateBoxPlotChartConfigurationPtrOutput
}

type templateBoxPlotChartConfigurationPtrType TemplateBoxPlotChartConfigurationArgs

func TemplateBoxPlotChartConfigurationPtr(v *TemplateBoxPlotChartConfigurationArgs) TemplateBoxPlotChartConfigurationPtrInput {
	return (*templateBoxPlotChartConfigurationPtrType)(v)
}

func (*templateBoxPlotChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotChartConfiguration)(nil)).Elem()
}

func (i *templateBoxPlotChartConfigurationPtrType) ToTemplateBoxPlotChartConfigurationPtrOutput() TemplateBoxPlotChartConfigurationPtrOutput {
	return i.ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBoxPlotChartConfigurationPtrType) ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotChartConfigurationPtrOutput)
}

type TemplateBoxPlotChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotChartConfiguration)(nil)).Elem()
}

func (o TemplateBoxPlotChartConfigurationOutput) ToTemplateBoxPlotChartConfigurationOutput() TemplateBoxPlotChartConfigurationOutput {
	return o
}

func (o TemplateBoxPlotChartConfigurationOutput) ToTemplateBoxPlotChartConfigurationOutputWithContext(ctx context.Context) TemplateBoxPlotChartConfigurationOutput {
	return o
}

func (o TemplateBoxPlotChartConfigurationOutput) ToTemplateBoxPlotChartConfigurationPtrOutput() TemplateBoxPlotChartConfigurationPtrOutput {
	return o.ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBoxPlotChartConfigurationOutput) ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBoxPlotChartConfiguration) *TemplateBoxPlotChartConfiguration {
		return &v
	}).(TemplateBoxPlotChartConfigurationPtrOutput)
}

// The box plot chart options for a box plot visual
func (o TemplateBoxPlotChartConfigurationOutput) BoxPlotOptions() TemplateBoxPlotOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateBoxPlotOptions { return v.BoxPlotOptions }).(TemplateBoxPlotOptionsPtrOutput)
}

// The label display options (grid line, range, scale, axis step) of a box plot category.
func (o TemplateBoxPlotChartConfigurationOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateAxisDisplayOptions { return v.CategoryAxis }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort Icon visibility) of a box plot category.
func (o TemplateBoxPlotChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateBoxPlotChartConfigurationOutput) FieldWells() TemplateBoxPlotFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateBoxPlotFieldWells { return v.FieldWells }).(TemplateBoxPlotFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateBoxPlotChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

func (o TemplateBoxPlotChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The label display options (grid line, range, scale, axis step) of a box plot category.
func (o TemplateBoxPlotChartConfigurationOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateAxisDisplayOptions {
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) of a box plot value.
func (o TemplateBoxPlotChartConfigurationOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The reference line setup of the visual.
func (o TemplateBoxPlotChartConfigurationOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) []TemplateReferenceLine { return v.ReferenceLines }).(TemplateReferenceLineArrayOutput)
}

// The sort configuration of a `BoxPlotVisual` .
func (o TemplateBoxPlotChartConfigurationOutput) SortConfiguration() TemplateBoxPlotSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateBoxPlotSortConfiguration {
		return v.SortConfiguration
	}).(TemplateBoxPlotSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateBoxPlotChartConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateBoxPlotChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

type TemplateBoxPlotChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotChartConfiguration)(nil)).Elem()
}

func (o TemplateBoxPlotChartConfigurationPtrOutput) ToTemplateBoxPlotChartConfigurationPtrOutput() TemplateBoxPlotChartConfigurationPtrOutput {
	return o
}

func (o TemplateBoxPlotChartConfigurationPtrOutput) ToTemplateBoxPlotChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotChartConfigurationPtrOutput {
	return o
}

func (o TemplateBoxPlotChartConfigurationPtrOutput) Elem() TemplateBoxPlotChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) TemplateBoxPlotChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBoxPlotChartConfiguration
		return ret
	}).(TemplateBoxPlotChartConfigurationOutput)
}

// The box plot chart options for a box plot visual
func (o TemplateBoxPlotChartConfigurationPtrOutput) BoxPlotOptions() TemplateBoxPlotOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateBoxPlotOptions {
		if v == nil {
			return nil
		}
		return v.BoxPlotOptions
	}).(TemplateBoxPlotOptionsPtrOutput)
}

// The label display options (grid line, range, scale, axis step) of a box plot category.
func (o TemplateBoxPlotChartConfigurationPtrOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxis
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort Icon visibility) of a box plot category.
func (o TemplateBoxPlotChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateBoxPlotChartConfigurationPtrOutput) FieldWells() TemplateBoxPlotFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateBoxPlotFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateBoxPlotFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateBoxPlotChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

func (o TemplateBoxPlotChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The label display options (grid line, range, scale, axis step) of a box plot category.
func (o TemplateBoxPlotChartConfigurationPtrOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility and sort icon visibility) of a box plot value.
func (o TemplateBoxPlotChartConfigurationPtrOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The reference line setup of the visual.
func (o TemplateBoxPlotChartConfigurationPtrOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) []TemplateReferenceLine {
		if v == nil {
			return nil
		}
		return v.ReferenceLines
	}).(TemplateReferenceLineArrayOutput)
}

// The sort configuration of a `BoxPlotVisual` .
func (o TemplateBoxPlotChartConfigurationPtrOutput) SortConfiguration() TemplateBoxPlotSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateBoxPlotSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateBoxPlotSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateBoxPlotChartConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateBoxPlotChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

type TemplateBoxPlotFieldWells struct {
	// The aggregated field wells of a box plot.
	BoxPlotAggregatedFieldWells *TemplateBoxPlotAggregatedFieldWells `pulumi:"boxPlotAggregatedFieldWells"`
}

// TemplateBoxPlotFieldWellsInput is an input type that accepts TemplateBoxPlotFieldWellsArgs and TemplateBoxPlotFieldWellsOutput values.
// You can construct a concrete instance of `TemplateBoxPlotFieldWellsInput` via:
//
//	TemplateBoxPlotFieldWellsArgs{...}
type TemplateBoxPlotFieldWellsInput interface {
	pulumi.Input

	ToTemplateBoxPlotFieldWellsOutput() TemplateBoxPlotFieldWellsOutput
	ToTemplateBoxPlotFieldWellsOutputWithContext(context.Context) TemplateBoxPlotFieldWellsOutput
}

type TemplateBoxPlotFieldWellsArgs struct {
	// The aggregated field wells of a box plot.
	BoxPlotAggregatedFieldWells TemplateBoxPlotAggregatedFieldWellsPtrInput `pulumi:"boxPlotAggregatedFieldWells"`
}

func (TemplateBoxPlotFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotFieldWells)(nil)).Elem()
}

func (i TemplateBoxPlotFieldWellsArgs) ToTemplateBoxPlotFieldWellsOutput() TemplateBoxPlotFieldWellsOutput {
	return i.ToTemplateBoxPlotFieldWellsOutputWithContext(context.Background())
}

func (i TemplateBoxPlotFieldWellsArgs) ToTemplateBoxPlotFieldWellsOutputWithContext(ctx context.Context) TemplateBoxPlotFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotFieldWellsOutput)
}

func (i TemplateBoxPlotFieldWellsArgs) ToTemplateBoxPlotFieldWellsPtrOutput() TemplateBoxPlotFieldWellsPtrOutput {
	return i.ToTemplateBoxPlotFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateBoxPlotFieldWellsArgs) ToTemplateBoxPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotFieldWellsOutput).ToTemplateBoxPlotFieldWellsPtrOutputWithContext(ctx)
}

// TemplateBoxPlotFieldWellsPtrInput is an input type that accepts TemplateBoxPlotFieldWellsArgs, TemplateBoxPlotFieldWellsPtr and TemplateBoxPlotFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateBoxPlotFieldWellsPtrInput` via:
//
//	        TemplateBoxPlotFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateBoxPlotFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateBoxPlotFieldWellsPtrOutput() TemplateBoxPlotFieldWellsPtrOutput
	ToTemplateBoxPlotFieldWellsPtrOutputWithContext(context.Context) TemplateBoxPlotFieldWellsPtrOutput
}

type templateBoxPlotFieldWellsPtrType TemplateBoxPlotFieldWellsArgs

func TemplateBoxPlotFieldWellsPtr(v *TemplateBoxPlotFieldWellsArgs) TemplateBoxPlotFieldWellsPtrInput {
	return (*templateBoxPlotFieldWellsPtrType)(v)
}

func (*templateBoxPlotFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotFieldWells)(nil)).Elem()
}

func (i *templateBoxPlotFieldWellsPtrType) ToTemplateBoxPlotFieldWellsPtrOutput() TemplateBoxPlotFieldWellsPtrOutput {
	return i.ToTemplateBoxPlotFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateBoxPlotFieldWellsPtrType) ToTemplateBoxPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotFieldWellsPtrOutput)
}

type TemplateBoxPlotFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotFieldWells)(nil)).Elem()
}

func (o TemplateBoxPlotFieldWellsOutput) ToTemplateBoxPlotFieldWellsOutput() TemplateBoxPlotFieldWellsOutput {
	return o
}

func (o TemplateBoxPlotFieldWellsOutput) ToTemplateBoxPlotFieldWellsOutputWithContext(ctx context.Context) TemplateBoxPlotFieldWellsOutput {
	return o
}

func (o TemplateBoxPlotFieldWellsOutput) ToTemplateBoxPlotFieldWellsPtrOutput() TemplateBoxPlotFieldWellsPtrOutput {
	return o.ToTemplateBoxPlotFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateBoxPlotFieldWellsOutput) ToTemplateBoxPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBoxPlotFieldWells) *TemplateBoxPlotFieldWells {
		return &v
	}).(TemplateBoxPlotFieldWellsPtrOutput)
}

// The aggregated field wells of a box plot.
func (o TemplateBoxPlotFieldWellsOutput) BoxPlotAggregatedFieldWells() TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotFieldWells) *TemplateBoxPlotAggregatedFieldWells {
		return v.BoxPlotAggregatedFieldWells
	}).(TemplateBoxPlotAggregatedFieldWellsPtrOutput)
}

type TemplateBoxPlotFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotFieldWells)(nil)).Elem()
}

func (o TemplateBoxPlotFieldWellsPtrOutput) ToTemplateBoxPlotFieldWellsPtrOutput() TemplateBoxPlotFieldWellsPtrOutput {
	return o
}

func (o TemplateBoxPlotFieldWellsPtrOutput) ToTemplateBoxPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotFieldWellsPtrOutput {
	return o
}

func (o TemplateBoxPlotFieldWellsPtrOutput) Elem() TemplateBoxPlotFieldWellsOutput {
	return o.ApplyT(func(v *TemplateBoxPlotFieldWells) TemplateBoxPlotFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateBoxPlotFieldWells
		return ret
	}).(TemplateBoxPlotFieldWellsOutput)
}

// The aggregated field wells of a box plot.
func (o TemplateBoxPlotFieldWellsPtrOutput) BoxPlotAggregatedFieldWells() TemplateBoxPlotAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotFieldWells) *TemplateBoxPlotAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.BoxPlotAggregatedFieldWells
	}).(TemplateBoxPlotAggregatedFieldWellsPtrOutput)
}

type TemplateBoxPlotOptions struct {
	// Determines the visibility of all data points of the box plot.
	AllDataPointsVisibility interface{} `pulumi:"allDataPointsVisibility"`
	// Determines the visibility of the outlier in a box plot.
	OutlierVisibility interface{} `pulumi:"outlierVisibility"`
	// The style options of the box plot.
	StyleOptions *TemplateBoxPlotStyleOptions `pulumi:"styleOptions"`
}

// TemplateBoxPlotOptionsInput is an input type that accepts TemplateBoxPlotOptionsArgs and TemplateBoxPlotOptionsOutput values.
// You can construct a concrete instance of `TemplateBoxPlotOptionsInput` via:
//
//	TemplateBoxPlotOptionsArgs{...}
type TemplateBoxPlotOptionsInput interface {
	pulumi.Input

	ToTemplateBoxPlotOptionsOutput() TemplateBoxPlotOptionsOutput
	ToTemplateBoxPlotOptionsOutputWithContext(context.Context) TemplateBoxPlotOptionsOutput
}

type TemplateBoxPlotOptionsArgs struct {
	// Determines the visibility of all data points of the box plot.
	AllDataPointsVisibility pulumi.Input `pulumi:"allDataPointsVisibility"`
	// Determines the visibility of the outlier in a box plot.
	OutlierVisibility pulumi.Input `pulumi:"outlierVisibility"`
	// The style options of the box plot.
	StyleOptions TemplateBoxPlotStyleOptionsPtrInput `pulumi:"styleOptions"`
}

func (TemplateBoxPlotOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotOptions)(nil)).Elem()
}

func (i TemplateBoxPlotOptionsArgs) ToTemplateBoxPlotOptionsOutput() TemplateBoxPlotOptionsOutput {
	return i.ToTemplateBoxPlotOptionsOutputWithContext(context.Background())
}

func (i TemplateBoxPlotOptionsArgs) ToTemplateBoxPlotOptionsOutputWithContext(ctx context.Context) TemplateBoxPlotOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotOptionsOutput)
}

func (i TemplateBoxPlotOptionsArgs) ToTemplateBoxPlotOptionsPtrOutput() TemplateBoxPlotOptionsPtrOutput {
	return i.ToTemplateBoxPlotOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateBoxPlotOptionsArgs) ToTemplateBoxPlotOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotOptionsOutput).ToTemplateBoxPlotOptionsPtrOutputWithContext(ctx)
}

// TemplateBoxPlotOptionsPtrInput is an input type that accepts TemplateBoxPlotOptionsArgs, TemplateBoxPlotOptionsPtr and TemplateBoxPlotOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateBoxPlotOptionsPtrInput` via:
//
//	        TemplateBoxPlotOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateBoxPlotOptionsPtrInput interface {
	pulumi.Input

	ToTemplateBoxPlotOptionsPtrOutput() TemplateBoxPlotOptionsPtrOutput
	ToTemplateBoxPlotOptionsPtrOutputWithContext(context.Context) TemplateBoxPlotOptionsPtrOutput
}

type templateBoxPlotOptionsPtrType TemplateBoxPlotOptionsArgs

func TemplateBoxPlotOptionsPtr(v *TemplateBoxPlotOptionsArgs) TemplateBoxPlotOptionsPtrInput {
	return (*templateBoxPlotOptionsPtrType)(v)
}

func (*templateBoxPlotOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotOptions)(nil)).Elem()
}

func (i *templateBoxPlotOptionsPtrType) ToTemplateBoxPlotOptionsPtrOutput() TemplateBoxPlotOptionsPtrOutput {
	return i.ToTemplateBoxPlotOptionsPtrOutputWithContext(context.Background())
}

func (i *templateBoxPlotOptionsPtrType) ToTemplateBoxPlotOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotOptionsPtrOutput)
}

type TemplateBoxPlotOptionsOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotOptions)(nil)).Elem()
}

func (o TemplateBoxPlotOptionsOutput) ToTemplateBoxPlotOptionsOutput() TemplateBoxPlotOptionsOutput {
	return o
}

func (o TemplateBoxPlotOptionsOutput) ToTemplateBoxPlotOptionsOutputWithContext(ctx context.Context) TemplateBoxPlotOptionsOutput {
	return o
}

func (o TemplateBoxPlotOptionsOutput) ToTemplateBoxPlotOptionsPtrOutput() TemplateBoxPlotOptionsPtrOutput {
	return o.ToTemplateBoxPlotOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateBoxPlotOptionsOutput) ToTemplateBoxPlotOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBoxPlotOptions) *TemplateBoxPlotOptions {
		return &v
	}).(TemplateBoxPlotOptionsPtrOutput)
}

// Determines the visibility of all data points of the box plot.
func (o TemplateBoxPlotOptionsOutput) AllDataPointsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateBoxPlotOptions) interface{} { return v.AllDataPointsVisibility }).(pulumi.AnyOutput)
}

// Determines the visibility of the outlier in a box plot.
func (o TemplateBoxPlotOptionsOutput) OutlierVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateBoxPlotOptions) interface{} { return v.OutlierVisibility }).(pulumi.AnyOutput)
}

// The style options of the box plot.
func (o TemplateBoxPlotOptionsOutput) StyleOptions() TemplateBoxPlotStyleOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotOptions) *TemplateBoxPlotStyleOptions { return v.StyleOptions }).(TemplateBoxPlotStyleOptionsPtrOutput)
}

type TemplateBoxPlotOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotOptions)(nil)).Elem()
}

func (o TemplateBoxPlotOptionsPtrOutput) ToTemplateBoxPlotOptionsPtrOutput() TemplateBoxPlotOptionsPtrOutput {
	return o
}

func (o TemplateBoxPlotOptionsPtrOutput) ToTemplateBoxPlotOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotOptionsPtrOutput {
	return o
}

func (o TemplateBoxPlotOptionsPtrOutput) Elem() TemplateBoxPlotOptionsOutput {
	return o.ApplyT(func(v *TemplateBoxPlotOptions) TemplateBoxPlotOptions {
		if v != nil {
			return *v
		}
		var ret TemplateBoxPlotOptions
		return ret
	}).(TemplateBoxPlotOptionsOutput)
}

// Determines the visibility of all data points of the box plot.
func (o TemplateBoxPlotOptionsPtrOutput) AllDataPointsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateBoxPlotOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.AllDataPointsVisibility
	}).(pulumi.AnyOutput)
}

// Determines the visibility of the outlier in a box plot.
func (o TemplateBoxPlotOptionsPtrOutput) OutlierVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateBoxPlotOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.OutlierVisibility
	}).(pulumi.AnyOutput)
}

// The style options of the box plot.
func (o TemplateBoxPlotOptionsPtrOutput) StyleOptions() TemplateBoxPlotStyleOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotOptions) *TemplateBoxPlotStyleOptions {
		if v == nil {
			return nil
		}
		return v.StyleOptions
	}).(TemplateBoxPlotStyleOptionsPtrOutput)
}

type TemplateBoxPlotSortConfiguration struct {
	// The sort configuration of a group by fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
	// The pagination configuration of a table visual or box plot.
	PaginationConfiguration *TemplatePaginationConfiguration `pulumi:"paginationConfiguration"`
}

// TemplateBoxPlotSortConfigurationInput is an input type that accepts TemplateBoxPlotSortConfigurationArgs and TemplateBoxPlotSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateBoxPlotSortConfigurationInput` via:
//
//	TemplateBoxPlotSortConfigurationArgs{...}
type TemplateBoxPlotSortConfigurationInput interface {
	pulumi.Input

	ToTemplateBoxPlotSortConfigurationOutput() TemplateBoxPlotSortConfigurationOutput
	ToTemplateBoxPlotSortConfigurationOutputWithContext(context.Context) TemplateBoxPlotSortConfigurationOutput
}

type TemplateBoxPlotSortConfigurationArgs struct {
	// The sort configuration of a group by fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
	// The pagination configuration of a table visual or box plot.
	PaginationConfiguration TemplatePaginationConfigurationPtrInput `pulumi:"paginationConfiguration"`
}

func (TemplateBoxPlotSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotSortConfiguration)(nil)).Elem()
}

func (i TemplateBoxPlotSortConfigurationArgs) ToTemplateBoxPlotSortConfigurationOutput() TemplateBoxPlotSortConfigurationOutput {
	return i.ToTemplateBoxPlotSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateBoxPlotSortConfigurationArgs) ToTemplateBoxPlotSortConfigurationOutputWithContext(ctx context.Context) TemplateBoxPlotSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotSortConfigurationOutput)
}

func (i TemplateBoxPlotSortConfigurationArgs) ToTemplateBoxPlotSortConfigurationPtrOutput() TemplateBoxPlotSortConfigurationPtrOutput {
	return i.ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateBoxPlotSortConfigurationArgs) ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotSortConfigurationOutput).ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateBoxPlotSortConfigurationPtrInput is an input type that accepts TemplateBoxPlotSortConfigurationArgs, TemplateBoxPlotSortConfigurationPtr and TemplateBoxPlotSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateBoxPlotSortConfigurationPtrInput` via:
//
//	        TemplateBoxPlotSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateBoxPlotSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateBoxPlotSortConfigurationPtrOutput() TemplateBoxPlotSortConfigurationPtrOutput
	ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(context.Context) TemplateBoxPlotSortConfigurationPtrOutput
}

type templateBoxPlotSortConfigurationPtrType TemplateBoxPlotSortConfigurationArgs

func TemplateBoxPlotSortConfigurationPtr(v *TemplateBoxPlotSortConfigurationArgs) TemplateBoxPlotSortConfigurationPtrInput {
	return (*templateBoxPlotSortConfigurationPtrType)(v)
}

func (*templateBoxPlotSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotSortConfiguration)(nil)).Elem()
}

func (i *templateBoxPlotSortConfigurationPtrType) ToTemplateBoxPlotSortConfigurationPtrOutput() TemplateBoxPlotSortConfigurationPtrOutput {
	return i.ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateBoxPlotSortConfigurationPtrType) ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotSortConfigurationPtrOutput)
}

type TemplateBoxPlotSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotSortConfiguration)(nil)).Elem()
}

func (o TemplateBoxPlotSortConfigurationOutput) ToTemplateBoxPlotSortConfigurationOutput() TemplateBoxPlotSortConfigurationOutput {
	return o
}

func (o TemplateBoxPlotSortConfigurationOutput) ToTemplateBoxPlotSortConfigurationOutputWithContext(ctx context.Context) TemplateBoxPlotSortConfigurationOutput {
	return o
}

func (o TemplateBoxPlotSortConfigurationOutput) ToTemplateBoxPlotSortConfigurationPtrOutput() TemplateBoxPlotSortConfigurationPtrOutput {
	return o.ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateBoxPlotSortConfigurationOutput) ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBoxPlotSortConfiguration) *TemplateBoxPlotSortConfiguration {
		return &v
	}).(TemplateBoxPlotSortConfigurationPtrOutput)
}

// The sort configuration of a group by fields.
func (o TemplateBoxPlotSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateBoxPlotSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

// The pagination configuration of a table visual or box plot.
func (o TemplateBoxPlotSortConfigurationOutput) PaginationConfiguration() TemplatePaginationConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotSortConfiguration) *TemplatePaginationConfiguration {
		return v.PaginationConfiguration
	}).(TemplatePaginationConfigurationPtrOutput)
}

type TemplateBoxPlotSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotSortConfiguration)(nil)).Elem()
}

func (o TemplateBoxPlotSortConfigurationPtrOutput) ToTemplateBoxPlotSortConfigurationPtrOutput() TemplateBoxPlotSortConfigurationPtrOutput {
	return o
}

func (o TemplateBoxPlotSortConfigurationPtrOutput) ToTemplateBoxPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateBoxPlotSortConfigurationPtrOutput {
	return o
}

func (o TemplateBoxPlotSortConfigurationPtrOutput) Elem() TemplateBoxPlotSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateBoxPlotSortConfiguration) TemplateBoxPlotSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateBoxPlotSortConfiguration
		return ret
	}).(TemplateBoxPlotSortConfigurationOutput)
}

// The sort configuration of a group by fields.
func (o TemplateBoxPlotSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateBoxPlotSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The pagination configuration of a table visual or box plot.
func (o TemplateBoxPlotSortConfigurationPtrOutput) PaginationConfiguration() TemplatePaginationConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotSortConfiguration) *TemplatePaginationConfiguration {
		if v == nil {
			return nil
		}
		return v.PaginationConfiguration
	}).(TemplatePaginationConfigurationPtrOutput)
}

type TemplateBoxPlotStyleOptions struct {
	// The fill styles (solid, transparent) of the box plot.
	FillStyle *TemplateBoxPlotFillStyle `pulumi:"fillStyle"`
}

// TemplateBoxPlotStyleOptionsInput is an input type that accepts TemplateBoxPlotStyleOptionsArgs and TemplateBoxPlotStyleOptionsOutput values.
// You can construct a concrete instance of `TemplateBoxPlotStyleOptionsInput` via:
//
//	TemplateBoxPlotStyleOptionsArgs{...}
type TemplateBoxPlotStyleOptionsInput interface {
	pulumi.Input

	ToTemplateBoxPlotStyleOptionsOutput() TemplateBoxPlotStyleOptionsOutput
	ToTemplateBoxPlotStyleOptionsOutputWithContext(context.Context) TemplateBoxPlotStyleOptionsOutput
}

type TemplateBoxPlotStyleOptionsArgs struct {
	// The fill styles (solid, transparent) of the box plot.
	FillStyle TemplateBoxPlotFillStylePtrInput `pulumi:"fillStyle"`
}

func (TemplateBoxPlotStyleOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotStyleOptions)(nil)).Elem()
}

func (i TemplateBoxPlotStyleOptionsArgs) ToTemplateBoxPlotStyleOptionsOutput() TemplateBoxPlotStyleOptionsOutput {
	return i.ToTemplateBoxPlotStyleOptionsOutputWithContext(context.Background())
}

func (i TemplateBoxPlotStyleOptionsArgs) ToTemplateBoxPlotStyleOptionsOutputWithContext(ctx context.Context) TemplateBoxPlotStyleOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotStyleOptionsOutput)
}

func (i TemplateBoxPlotStyleOptionsArgs) ToTemplateBoxPlotStyleOptionsPtrOutput() TemplateBoxPlotStyleOptionsPtrOutput {
	return i.ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateBoxPlotStyleOptionsArgs) ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotStyleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotStyleOptionsOutput).ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(ctx)
}

// TemplateBoxPlotStyleOptionsPtrInput is an input type that accepts TemplateBoxPlotStyleOptionsArgs, TemplateBoxPlotStyleOptionsPtr and TemplateBoxPlotStyleOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateBoxPlotStyleOptionsPtrInput` via:
//
//	        TemplateBoxPlotStyleOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateBoxPlotStyleOptionsPtrInput interface {
	pulumi.Input

	ToTemplateBoxPlotStyleOptionsPtrOutput() TemplateBoxPlotStyleOptionsPtrOutput
	ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(context.Context) TemplateBoxPlotStyleOptionsPtrOutput
}

type templateBoxPlotStyleOptionsPtrType TemplateBoxPlotStyleOptionsArgs

func TemplateBoxPlotStyleOptionsPtr(v *TemplateBoxPlotStyleOptionsArgs) TemplateBoxPlotStyleOptionsPtrInput {
	return (*templateBoxPlotStyleOptionsPtrType)(v)
}

func (*templateBoxPlotStyleOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotStyleOptions)(nil)).Elem()
}

func (i *templateBoxPlotStyleOptionsPtrType) ToTemplateBoxPlotStyleOptionsPtrOutput() TemplateBoxPlotStyleOptionsPtrOutput {
	return i.ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(context.Background())
}

func (i *templateBoxPlotStyleOptionsPtrType) ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotStyleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotStyleOptionsPtrOutput)
}

type TemplateBoxPlotStyleOptionsOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotStyleOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotStyleOptions)(nil)).Elem()
}

func (o TemplateBoxPlotStyleOptionsOutput) ToTemplateBoxPlotStyleOptionsOutput() TemplateBoxPlotStyleOptionsOutput {
	return o
}

func (o TemplateBoxPlotStyleOptionsOutput) ToTemplateBoxPlotStyleOptionsOutputWithContext(ctx context.Context) TemplateBoxPlotStyleOptionsOutput {
	return o
}

func (o TemplateBoxPlotStyleOptionsOutput) ToTemplateBoxPlotStyleOptionsPtrOutput() TemplateBoxPlotStyleOptionsPtrOutput {
	return o.ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateBoxPlotStyleOptionsOutput) ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotStyleOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBoxPlotStyleOptions) *TemplateBoxPlotStyleOptions {
		return &v
	}).(TemplateBoxPlotStyleOptionsPtrOutput)
}

// The fill styles (solid, transparent) of the box plot.
func (o TemplateBoxPlotStyleOptionsOutput) FillStyle() TemplateBoxPlotFillStylePtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotStyleOptions) *TemplateBoxPlotFillStyle { return v.FillStyle }).(TemplateBoxPlotFillStylePtrOutput)
}

type TemplateBoxPlotStyleOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotStyleOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotStyleOptions)(nil)).Elem()
}

func (o TemplateBoxPlotStyleOptionsPtrOutput) ToTemplateBoxPlotStyleOptionsPtrOutput() TemplateBoxPlotStyleOptionsPtrOutput {
	return o
}

func (o TemplateBoxPlotStyleOptionsPtrOutput) ToTemplateBoxPlotStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateBoxPlotStyleOptionsPtrOutput {
	return o
}

func (o TemplateBoxPlotStyleOptionsPtrOutput) Elem() TemplateBoxPlotStyleOptionsOutput {
	return o.ApplyT(func(v *TemplateBoxPlotStyleOptions) TemplateBoxPlotStyleOptions {
		if v != nil {
			return *v
		}
		var ret TemplateBoxPlotStyleOptions
		return ret
	}).(TemplateBoxPlotStyleOptionsOutput)
}

// The fill styles (solid, transparent) of the box plot.
func (o TemplateBoxPlotStyleOptionsPtrOutput) FillStyle() TemplateBoxPlotFillStylePtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotStyleOptions) *TemplateBoxPlotFillStyle {
		if v == nil {
			return nil
		}
		return v.FillStyle
	}).(TemplateBoxPlotFillStylePtrOutput)
}

type TemplateBoxPlotVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateBoxPlotChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateBoxPlotVisualInput is an input type that accepts TemplateBoxPlotVisualArgs and TemplateBoxPlotVisualOutput values.
// You can construct a concrete instance of `TemplateBoxPlotVisualInput` via:
//
//	TemplateBoxPlotVisualArgs{...}
type TemplateBoxPlotVisualInput interface {
	pulumi.Input

	ToTemplateBoxPlotVisualOutput() TemplateBoxPlotVisualOutput
	ToTemplateBoxPlotVisualOutputWithContext(context.Context) TemplateBoxPlotVisualOutput
}

type TemplateBoxPlotVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateBoxPlotChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateBoxPlotVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotVisual)(nil)).Elem()
}

func (i TemplateBoxPlotVisualArgs) ToTemplateBoxPlotVisualOutput() TemplateBoxPlotVisualOutput {
	return i.ToTemplateBoxPlotVisualOutputWithContext(context.Background())
}

func (i TemplateBoxPlotVisualArgs) ToTemplateBoxPlotVisualOutputWithContext(ctx context.Context) TemplateBoxPlotVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotVisualOutput)
}

func (i TemplateBoxPlotVisualArgs) ToTemplateBoxPlotVisualPtrOutput() TemplateBoxPlotVisualPtrOutput {
	return i.ToTemplateBoxPlotVisualPtrOutputWithContext(context.Background())
}

func (i TemplateBoxPlotVisualArgs) ToTemplateBoxPlotVisualPtrOutputWithContext(ctx context.Context) TemplateBoxPlotVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotVisualOutput).ToTemplateBoxPlotVisualPtrOutputWithContext(ctx)
}

// TemplateBoxPlotVisualPtrInput is an input type that accepts TemplateBoxPlotVisualArgs, TemplateBoxPlotVisualPtr and TemplateBoxPlotVisualPtrOutput values.
// You can construct a concrete instance of `TemplateBoxPlotVisualPtrInput` via:
//
//	        TemplateBoxPlotVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateBoxPlotVisualPtrInput interface {
	pulumi.Input

	ToTemplateBoxPlotVisualPtrOutput() TemplateBoxPlotVisualPtrOutput
	ToTemplateBoxPlotVisualPtrOutputWithContext(context.Context) TemplateBoxPlotVisualPtrOutput
}

type templateBoxPlotVisualPtrType TemplateBoxPlotVisualArgs

func TemplateBoxPlotVisualPtr(v *TemplateBoxPlotVisualArgs) TemplateBoxPlotVisualPtrInput {
	return (*templateBoxPlotVisualPtrType)(v)
}

func (*templateBoxPlotVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotVisual)(nil)).Elem()
}

func (i *templateBoxPlotVisualPtrType) ToTemplateBoxPlotVisualPtrOutput() TemplateBoxPlotVisualPtrOutput {
	return i.ToTemplateBoxPlotVisualPtrOutputWithContext(context.Background())
}

func (i *templateBoxPlotVisualPtrType) ToTemplateBoxPlotVisualPtrOutputWithContext(ctx context.Context) TemplateBoxPlotVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateBoxPlotVisualPtrOutput)
}

type TemplateBoxPlotVisualOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateBoxPlotVisual)(nil)).Elem()
}

func (o TemplateBoxPlotVisualOutput) ToTemplateBoxPlotVisualOutput() TemplateBoxPlotVisualOutput {
	return o
}

func (o TemplateBoxPlotVisualOutput) ToTemplateBoxPlotVisualOutputWithContext(ctx context.Context) TemplateBoxPlotVisualOutput {
	return o
}

func (o TemplateBoxPlotVisualOutput) ToTemplateBoxPlotVisualPtrOutput() TemplateBoxPlotVisualPtrOutput {
	return o.ToTemplateBoxPlotVisualPtrOutputWithContext(context.Background())
}

func (o TemplateBoxPlotVisualOutput) ToTemplateBoxPlotVisualPtrOutputWithContext(ctx context.Context) TemplateBoxPlotVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateBoxPlotVisual) *TemplateBoxPlotVisual {
		return &v
	}).(TemplateBoxPlotVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateBoxPlotVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateBoxPlotVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateBoxPlotVisualOutput) ChartConfiguration() TemplateBoxPlotChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotVisual) *TemplateBoxPlotChartConfiguration { return v.ChartConfiguration }).(TemplateBoxPlotChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateBoxPlotVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateBoxPlotVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateBoxPlotVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateBoxPlotVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateBoxPlotVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateBoxPlotVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateBoxPlotVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateBoxPlotVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateBoxPlotVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateBoxPlotVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateBoxPlotVisual)(nil)).Elem()
}

func (o TemplateBoxPlotVisualPtrOutput) ToTemplateBoxPlotVisualPtrOutput() TemplateBoxPlotVisualPtrOutput {
	return o
}

func (o TemplateBoxPlotVisualPtrOutput) ToTemplateBoxPlotVisualPtrOutputWithContext(ctx context.Context) TemplateBoxPlotVisualPtrOutput {
	return o
}

func (o TemplateBoxPlotVisualPtrOutput) Elem() TemplateBoxPlotVisualOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) TemplateBoxPlotVisual {
		if v != nil {
			return *v
		}
		var ret TemplateBoxPlotVisual
		return ret
	}).(TemplateBoxPlotVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateBoxPlotVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateBoxPlotVisualPtrOutput) ChartConfiguration() TemplateBoxPlotChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) *TemplateBoxPlotChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateBoxPlotChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateBoxPlotVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateBoxPlotVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateBoxPlotVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateBoxPlotVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateBoxPlotVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateBoxPlotVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateCalculatedField struct {
	// The data set that is used in this calculated field.
	DataSetIdentifier string `pulumi:"dataSetIdentifier"`
	// The expression of the calculated field.
	Expression string `pulumi:"expression"`
	// The name of the calculated field.
	Name string `pulumi:"name"`
}

// TemplateCalculatedFieldInput is an input type that accepts TemplateCalculatedFieldArgs and TemplateCalculatedFieldOutput values.
// You can construct a concrete instance of `TemplateCalculatedFieldInput` via:
//
//	TemplateCalculatedFieldArgs{...}
type TemplateCalculatedFieldInput interface {
	pulumi.Input

	ToTemplateCalculatedFieldOutput() TemplateCalculatedFieldOutput
	ToTemplateCalculatedFieldOutputWithContext(context.Context) TemplateCalculatedFieldOutput
}

type TemplateCalculatedFieldArgs struct {
	// The data set that is used in this calculated field.
	DataSetIdentifier pulumi.StringInput `pulumi:"dataSetIdentifier"`
	// The expression of the calculated field.
	Expression pulumi.StringInput `pulumi:"expression"`
	// The name of the calculated field.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TemplateCalculatedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCalculatedField)(nil)).Elem()
}

func (i TemplateCalculatedFieldArgs) ToTemplateCalculatedFieldOutput() TemplateCalculatedFieldOutput {
	return i.ToTemplateCalculatedFieldOutputWithContext(context.Background())
}

func (i TemplateCalculatedFieldArgs) ToTemplateCalculatedFieldOutputWithContext(ctx context.Context) TemplateCalculatedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCalculatedFieldOutput)
}

// TemplateCalculatedFieldArrayInput is an input type that accepts TemplateCalculatedFieldArray and TemplateCalculatedFieldArrayOutput values.
// You can construct a concrete instance of `TemplateCalculatedFieldArrayInput` via:
//
//	TemplateCalculatedFieldArray{ TemplateCalculatedFieldArgs{...} }
type TemplateCalculatedFieldArrayInput interface {
	pulumi.Input

	ToTemplateCalculatedFieldArrayOutput() TemplateCalculatedFieldArrayOutput
	ToTemplateCalculatedFieldArrayOutputWithContext(context.Context) TemplateCalculatedFieldArrayOutput
}

type TemplateCalculatedFieldArray []TemplateCalculatedFieldInput

func (TemplateCalculatedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateCalculatedField)(nil)).Elem()
}

func (i TemplateCalculatedFieldArray) ToTemplateCalculatedFieldArrayOutput() TemplateCalculatedFieldArrayOutput {
	return i.ToTemplateCalculatedFieldArrayOutputWithContext(context.Background())
}

func (i TemplateCalculatedFieldArray) ToTemplateCalculatedFieldArrayOutputWithContext(ctx context.Context) TemplateCalculatedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCalculatedFieldArrayOutput)
}

type TemplateCalculatedFieldOutput struct{ *pulumi.OutputState }

func (TemplateCalculatedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCalculatedField)(nil)).Elem()
}

func (o TemplateCalculatedFieldOutput) ToTemplateCalculatedFieldOutput() TemplateCalculatedFieldOutput {
	return o
}

func (o TemplateCalculatedFieldOutput) ToTemplateCalculatedFieldOutputWithContext(ctx context.Context) TemplateCalculatedFieldOutput {
	return o
}

// The data set that is used in this calculated field.
func (o TemplateCalculatedFieldOutput) DataSetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCalculatedField) string { return v.DataSetIdentifier }).(pulumi.StringOutput)
}

// The expression of the calculated field.
func (o TemplateCalculatedFieldOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCalculatedField) string { return v.Expression }).(pulumi.StringOutput)
}

// The name of the calculated field.
func (o TemplateCalculatedFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCalculatedField) string { return v.Name }).(pulumi.StringOutput)
}

type TemplateCalculatedFieldArrayOutput struct{ *pulumi.OutputState }

func (TemplateCalculatedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateCalculatedField)(nil)).Elem()
}

func (o TemplateCalculatedFieldArrayOutput) ToTemplateCalculatedFieldArrayOutput() TemplateCalculatedFieldArrayOutput {
	return o
}

func (o TemplateCalculatedFieldArrayOutput) ToTemplateCalculatedFieldArrayOutputWithContext(ctx context.Context) TemplateCalculatedFieldArrayOutput {
	return o
}

func (o TemplateCalculatedFieldArrayOutput) Index(i pulumi.IntInput) TemplateCalculatedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateCalculatedField {
		return vs[0].([]TemplateCalculatedField)[vs[1].(int)]
	}).(TemplateCalculatedFieldOutput)
}

type TemplateCalculatedMeasureField struct {
	// The expression in the table calculation.
	Expression string `pulumi:"expression"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
}

// TemplateCalculatedMeasureFieldInput is an input type that accepts TemplateCalculatedMeasureFieldArgs and TemplateCalculatedMeasureFieldOutput values.
// You can construct a concrete instance of `TemplateCalculatedMeasureFieldInput` via:
//
//	TemplateCalculatedMeasureFieldArgs{...}
type TemplateCalculatedMeasureFieldInput interface {
	pulumi.Input

	ToTemplateCalculatedMeasureFieldOutput() TemplateCalculatedMeasureFieldOutput
	ToTemplateCalculatedMeasureFieldOutputWithContext(context.Context) TemplateCalculatedMeasureFieldOutput
}

type TemplateCalculatedMeasureFieldArgs struct {
	// The expression in the table calculation.
	Expression pulumi.StringInput `pulumi:"expression"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
}

func (TemplateCalculatedMeasureFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCalculatedMeasureField)(nil)).Elem()
}

func (i TemplateCalculatedMeasureFieldArgs) ToTemplateCalculatedMeasureFieldOutput() TemplateCalculatedMeasureFieldOutput {
	return i.ToTemplateCalculatedMeasureFieldOutputWithContext(context.Background())
}

func (i TemplateCalculatedMeasureFieldArgs) ToTemplateCalculatedMeasureFieldOutputWithContext(ctx context.Context) TemplateCalculatedMeasureFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCalculatedMeasureFieldOutput)
}

func (i TemplateCalculatedMeasureFieldArgs) ToTemplateCalculatedMeasureFieldPtrOutput() TemplateCalculatedMeasureFieldPtrOutput {
	return i.ToTemplateCalculatedMeasureFieldPtrOutputWithContext(context.Background())
}

func (i TemplateCalculatedMeasureFieldArgs) ToTemplateCalculatedMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCalculatedMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCalculatedMeasureFieldOutput).ToTemplateCalculatedMeasureFieldPtrOutputWithContext(ctx)
}

// TemplateCalculatedMeasureFieldPtrInput is an input type that accepts TemplateCalculatedMeasureFieldArgs, TemplateCalculatedMeasureFieldPtr and TemplateCalculatedMeasureFieldPtrOutput values.
// You can construct a concrete instance of `TemplateCalculatedMeasureFieldPtrInput` via:
//
//	        TemplateCalculatedMeasureFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateCalculatedMeasureFieldPtrInput interface {
	pulumi.Input

	ToTemplateCalculatedMeasureFieldPtrOutput() TemplateCalculatedMeasureFieldPtrOutput
	ToTemplateCalculatedMeasureFieldPtrOutputWithContext(context.Context) TemplateCalculatedMeasureFieldPtrOutput
}

type templateCalculatedMeasureFieldPtrType TemplateCalculatedMeasureFieldArgs

func TemplateCalculatedMeasureFieldPtr(v *TemplateCalculatedMeasureFieldArgs) TemplateCalculatedMeasureFieldPtrInput {
	return (*templateCalculatedMeasureFieldPtrType)(v)
}

func (*templateCalculatedMeasureFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCalculatedMeasureField)(nil)).Elem()
}

func (i *templateCalculatedMeasureFieldPtrType) ToTemplateCalculatedMeasureFieldPtrOutput() TemplateCalculatedMeasureFieldPtrOutput {
	return i.ToTemplateCalculatedMeasureFieldPtrOutputWithContext(context.Background())
}

func (i *templateCalculatedMeasureFieldPtrType) ToTemplateCalculatedMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCalculatedMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCalculatedMeasureFieldPtrOutput)
}

type TemplateCalculatedMeasureFieldOutput struct{ *pulumi.OutputState }

func (TemplateCalculatedMeasureFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCalculatedMeasureField)(nil)).Elem()
}

func (o TemplateCalculatedMeasureFieldOutput) ToTemplateCalculatedMeasureFieldOutput() TemplateCalculatedMeasureFieldOutput {
	return o
}

func (o TemplateCalculatedMeasureFieldOutput) ToTemplateCalculatedMeasureFieldOutputWithContext(ctx context.Context) TemplateCalculatedMeasureFieldOutput {
	return o
}

func (o TemplateCalculatedMeasureFieldOutput) ToTemplateCalculatedMeasureFieldPtrOutput() TemplateCalculatedMeasureFieldPtrOutput {
	return o.ToTemplateCalculatedMeasureFieldPtrOutputWithContext(context.Background())
}

func (o TemplateCalculatedMeasureFieldOutput) ToTemplateCalculatedMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCalculatedMeasureFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCalculatedMeasureField) *TemplateCalculatedMeasureField {
		return &v
	}).(TemplateCalculatedMeasureFieldPtrOutput)
}

// The expression in the table calculation.
func (o TemplateCalculatedMeasureFieldOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCalculatedMeasureField) string { return v.Expression }).(pulumi.StringOutput)
}

// The custom field ID.
func (o TemplateCalculatedMeasureFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCalculatedMeasureField) string { return v.FieldId }).(pulumi.StringOutput)
}

type TemplateCalculatedMeasureFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateCalculatedMeasureFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCalculatedMeasureField)(nil)).Elem()
}

func (o TemplateCalculatedMeasureFieldPtrOutput) ToTemplateCalculatedMeasureFieldPtrOutput() TemplateCalculatedMeasureFieldPtrOutput {
	return o
}

func (o TemplateCalculatedMeasureFieldPtrOutput) ToTemplateCalculatedMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCalculatedMeasureFieldPtrOutput {
	return o
}

func (o TemplateCalculatedMeasureFieldPtrOutput) Elem() TemplateCalculatedMeasureFieldOutput {
	return o.ApplyT(func(v *TemplateCalculatedMeasureField) TemplateCalculatedMeasureField {
		if v != nil {
			return *v
		}
		var ret TemplateCalculatedMeasureField
		return ret
	}).(TemplateCalculatedMeasureFieldOutput)
}

// The expression in the table calculation.
func (o TemplateCalculatedMeasureFieldPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCalculatedMeasureField) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// The custom field ID.
func (o TemplateCalculatedMeasureFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCalculatedMeasureField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

type TemplateCascadingControlConfiguration struct {
	// A list of source controls that determine the values that are used in the current control.
	SourceControls []TemplateCascadingControlSource `pulumi:"sourceControls"`
}

// TemplateCascadingControlConfigurationInput is an input type that accepts TemplateCascadingControlConfigurationArgs and TemplateCascadingControlConfigurationOutput values.
// You can construct a concrete instance of `TemplateCascadingControlConfigurationInput` via:
//
//	TemplateCascadingControlConfigurationArgs{...}
type TemplateCascadingControlConfigurationInput interface {
	pulumi.Input

	ToTemplateCascadingControlConfigurationOutput() TemplateCascadingControlConfigurationOutput
	ToTemplateCascadingControlConfigurationOutputWithContext(context.Context) TemplateCascadingControlConfigurationOutput
}

type TemplateCascadingControlConfigurationArgs struct {
	// A list of source controls that determine the values that are used in the current control.
	SourceControls TemplateCascadingControlSourceArrayInput `pulumi:"sourceControls"`
}

func (TemplateCascadingControlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCascadingControlConfiguration)(nil)).Elem()
}

func (i TemplateCascadingControlConfigurationArgs) ToTemplateCascadingControlConfigurationOutput() TemplateCascadingControlConfigurationOutput {
	return i.ToTemplateCascadingControlConfigurationOutputWithContext(context.Background())
}

func (i TemplateCascadingControlConfigurationArgs) ToTemplateCascadingControlConfigurationOutputWithContext(ctx context.Context) TemplateCascadingControlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCascadingControlConfigurationOutput)
}

func (i TemplateCascadingControlConfigurationArgs) ToTemplateCascadingControlConfigurationPtrOutput() TemplateCascadingControlConfigurationPtrOutput {
	return i.ToTemplateCascadingControlConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateCascadingControlConfigurationArgs) ToTemplateCascadingControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateCascadingControlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCascadingControlConfigurationOutput).ToTemplateCascadingControlConfigurationPtrOutputWithContext(ctx)
}

// TemplateCascadingControlConfigurationPtrInput is an input type that accepts TemplateCascadingControlConfigurationArgs, TemplateCascadingControlConfigurationPtr and TemplateCascadingControlConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateCascadingControlConfigurationPtrInput` via:
//
//	        TemplateCascadingControlConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateCascadingControlConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateCascadingControlConfigurationPtrOutput() TemplateCascadingControlConfigurationPtrOutput
	ToTemplateCascadingControlConfigurationPtrOutputWithContext(context.Context) TemplateCascadingControlConfigurationPtrOutput
}

type templateCascadingControlConfigurationPtrType TemplateCascadingControlConfigurationArgs

func TemplateCascadingControlConfigurationPtr(v *TemplateCascadingControlConfigurationArgs) TemplateCascadingControlConfigurationPtrInput {
	return (*templateCascadingControlConfigurationPtrType)(v)
}

func (*templateCascadingControlConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCascadingControlConfiguration)(nil)).Elem()
}

func (i *templateCascadingControlConfigurationPtrType) ToTemplateCascadingControlConfigurationPtrOutput() TemplateCascadingControlConfigurationPtrOutput {
	return i.ToTemplateCascadingControlConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateCascadingControlConfigurationPtrType) ToTemplateCascadingControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateCascadingControlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCascadingControlConfigurationPtrOutput)
}

type TemplateCascadingControlConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateCascadingControlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCascadingControlConfiguration)(nil)).Elem()
}

func (o TemplateCascadingControlConfigurationOutput) ToTemplateCascadingControlConfigurationOutput() TemplateCascadingControlConfigurationOutput {
	return o
}

func (o TemplateCascadingControlConfigurationOutput) ToTemplateCascadingControlConfigurationOutputWithContext(ctx context.Context) TemplateCascadingControlConfigurationOutput {
	return o
}

func (o TemplateCascadingControlConfigurationOutput) ToTemplateCascadingControlConfigurationPtrOutput() TemplateCascadingControlConfigurationPtrOutput {
	return o.ToTemplateCascadingControlConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateCascadingControlConfigurationOutput) ToTemplateCascadingControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCascadingControlConfiguration) *TemplateCascadingControlConfiguration {
		return &v
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// A list of source controls that determine the values that are used in the current control.
func (o TemplateCascadingControlConfigurationOutput) SourceControls() TemplateCascadingControlSourceArrayOutput {
	return o.ApplyT(func(v TemplateCascadingControlConfiguration) []TemplateCascadingControlSource {
		return v.SourceControls
	}).(TemplateCascadingControlSourceArrayOutput)
}

type TemplateCascadingControlConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCascadingControlConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCascadingControlConfiguration)(nil)).Elem()
}

func (o TemplateCascadingControlConfigurationPtrOutput) ToTemplateCascadingControlConfigurationPtrOutput() TemplateCascadingControlConfigurationPtrOutput {
	return o
}

func (o TemplateCascadingControlConfigurationPtrOutput) ToTemplateCascadingControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateCascadingControlConfigurationPtrOutput {
	return o
}

func (o TemplateCascadingControlConfigurationPtrOutput) Elem() TemplateCascadingControlConfigurationOutput {
	return o.ApplyT(func(v *TemplateCascadingControlConfiguration) TemplateCascadingControlConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateCascadingControlConfiguration
		return ret
	}).(TemplateCascadingControlConfigurationOutput)
}

// A list of source controls that determine the values that are used in the current control.
func (o TemplateCascadingControlConfigurationPtrOutput) SourceControls() TemplateCascadingControlSourceArrayOutput {
	return o.ApplyT(func(v *TemplateCascadingControlConfiguration) []TemplateCascadingControlSource {
		if v == nil {
			return nil
		}
		return v.SourceControls
	}).(TemplateCascadingControlSourceArrayOutput)
}

type TemplateCascadingControlSource struct {
	// The column identifier that determines which column to look up for the source sheet control.
	ColumnToMatch *TemplateColumnIdentifier `pulumi:"columnToMatch"`
	// The source sheet control ID of a `CascadingControlSource` .
	SourceSheetControlId *string `pulumi:"sourceSheetControlId"`
}

// TemplateCascadingControlSourceInput is an input type that accepts TemplateCascadingControlSourceArgs and TemplateCascadingControlSourceOutput values.
// You can construct a concrete instance of `TemplateCascadingControlSourceInput` via:
//
//	TemplateCascadingControlSourceArgs{...}
type TemplateCascadingControlSourceInput interface {
	pulumi.Input

	ToTemplateCascadingControlSourceOutput() TemplateCascadingControlSourceOutput
	ToTemplateCascadingControlSourceOutputWithContext(context.Context) TemplateCascadingControlSourceOutput
}

type TemplateCascadingControlSourceArgs struct {
	// The column identifier that determines which column to look up for the source sheet control.
	ColumnToMatch TemplateColumnIdentifierPtrInput `pulumi:"columnToMatch"`
	// The source sheet control ID of a `CascadingControlSource` .
	SourceSheetControlId pulumi.StringPtrInput `pulumi:"sourceSheetControlId"`
}

func (TemplateCascadingControlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCascadingControlSource)(nil)).Elem()
}

func (i TemplateCascadingControlSourceArgs) ToTemplateCascadingControlSourceOutput() TemplateCascadingControlSourceOutput {
	return i.ToTemplateCascadingControlSourceOutputWithContext(context.Background())
}

func (i TemplateCascadingControlSourceArgs) ToTemplateCascadingControlSourceOutputWithContext(ctx context.Context) TemplateCascadingControlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCascadingControlSourceOutput)
}

// TemplateCascadingControlSourceArrayInput is an input type that accepts TemplateCascadingControlSourceArray and TemplateCascadingControlSourceArrayOutput values.
// You can construct a concrete instance of `TemplateCascadingControlSourceArrayInput` via:
//
//	TemplateCascadingControlSourceArray{ TemplateCascadingControlSourceArgs{...} }
type TemplateCascadingControlSourceArrayInput interface {
	pulumi.Input

	ToTemplateCascadingControlSourceArrayOutput() TemplateCascadingControlSourceArrayOutput
	ToTemplateCascadingControlSourceArrayOutputWithContext(context.Context) TemplateCascadingControlSourceArrayOutput
}

type TemplateCascadingControlSourceArray []TemplateCascadingControlSourceInput

func (TemplateCascadingControlSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateCascadingControlSource)(nil)).Elem()
}

func (i TemplateCascadingControlSourceArray) ToTemplateCascadingControlSourceArrayOutput() TemplateCascadingControlSourceArrayOutput {
	return i.ToTemplateCascadingControlSourceArrayOutputWithContext(context.Background())
}

func (i TemplateCascadingControlSourceArray) ToTemplateCascadingControlSourceArrayOutputWithContext(ctx context.Context) TemplateCascadingControlSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCascadingControlSourceArrayOutput)
}

type TemplateCascadingControlSourceOutput struct{ *pulumi.OutputState }

func (TemplateCascadingControlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCascadingControlSource)(nil)).Elem()
}

func (o TemplateCascadingControlSourceOutput) ToTemplateCascadingControlSourceOutput() TemplateCascadingControlSourceOutput {
	return o
}

func (o TemplateCascadingControlSourceOutput) ToTemplateCascadingControlSourceOutputWithContext(ctx context.Context) TemplateCascadingControlSourceOutput {
	return o
}

// The column identifier that determines which column to look up for the source sheet control.
func (o TemplateCascadingControlSourceOutput) ColumnToMatch() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v TemplateCascadingControlSource) *TemplateColumnIdentifier { return v.ColumnToMatch }).(TemplateColumnIdentifierPtrOutput)
}

// The source sheet control ID of a `CascadingControlSource` .
func (o TemplateCascadingControlSourceOutput) SourceSheetControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCascadingControlSource) *string { return v.SourceSheetControlId }).(pulumi.StringPtrOutput)
}

type TemplateCascadingControlSourceArrayOutput struct{ *pulumi.OutputState }

func (TemplateCascadingControlSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateCascadingControlSource)(nil)).Elem()
}

func (o TemplateCascadingControlSourceArrayOutput) ToTemplateCascadingControlSourceArrayOutput() TemplateCascadingControlSourceArrayOutput {
	return o
}

func (o TemplateCascadingControlSourceArrayOutput) ToTemplateCascadingControlSourceArrayOutputWithContext(ctx context.Context) TemplateCascadingControlSourceArrayOutput {
	return o
}

func (o TemplateCascadingControlSourceArrayOutput) Index(i pulumi.IntInput) TemplateCascadingControlSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateCascadingControlSource {
		return vs[0].([]TemplateCascadingControlSource)[vs[1].(int)]
	}).(TemplateCascadingControlSourceOutput)
}

type TemplateCategoricalDimensionField struct {
	// The column that is used in the `CategoricalDimensionField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateStringFormatConfiguration `pulumi:"formatConfiguration"`
	// The custom hierarchy ID.
	HierarchyId *string `pulumi:"hierarchyId"`
}

// TemplateCategoricalDimensionFieldInput is an input type that accepts TemplateCategoricalDimensionFieldArgs and TemplateCategoricalDimensionFieldOutput values.
// You can construct a concrete instance of `TemplateCategoricalDimensionFieldInput` via:
//
//	TemplateCategoricalDimensionFieldArgs{...}
type TemplateCategoricalDimensionFieldInput interface {
	pulumi.Input

	ToTemplateCategoricalDimensionFieldOutput() TemplateCategoricalDimensionFieldOutput
	ToTemplateCategoricalDimensionFieldOutputWithContext(context.Context) TemplateCategoricalDimensionFieldOutput
}

type TemplateCategoricalDimensionFieldArgs struct {
	// The column that is used in the `CategoricalDimensionField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateStringFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
	// The custom hierarchy ID.
	HierarchyId pulumi.StringPtrInput `pulumi:"hierarchyId"`
}

func (TemplateCategoricalDimensionFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoricalDimensionField)(nil)).Elem()
}

func (i TemplateCategoricalDimensionFieldArgs) ToTemplateCategoricalDimensionFieldOutput() TemplateCategoricalDimensionFieldOutput {
	return i.ToTemplateCategoricalDimensionFieldOutputWithContext(context.Background())
}

func (i TemplateCategoricalDimensionFieldArgs) ToTemplateCategoricalDimensionFieldOutputWithContext(ctx context.Context) TemplateCategoricalDimensionFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoricalDimensionFieldOutput)
}

func (i TemplateCategoricalDimensionFieldArgs) ToTemplateCategoricalDimensionFieldPtrOutput() TemplateCategoricalDimensionFieldPtrOutput {
	return i.ToTemplateCategoricalDimensionFieldPtrOutputWithContext(context.Background())
}

func (i TemplateCategoricalDimensionFieldArgs) ToTemplateCategoricalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoricalDimensionFieldOutput).ToTemplateCategoricalDimensionFieldPtrOutputWithContext(ctx)
}

// TemplateCategoricalDimensionFieldPtrInput is an input type that accepts TemplateCategoricalDimensionFieldArgs, TemplateCategoricalDimensionFieldPtr and TemplateCategoricalDimensionFieldPtrOutput values.
// You can construct a concrete instance of `TemplateCategoricalDimensionFieldPtrInput` via:
//
//	        TemplateCategoricalDimensionFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateCategoricalDimensionFieldPtrInput interface {
	pulumi.Input

	ToTemplateCategoricalDimensionFieldPtrOutput() TemplateCategoricalDimensionFieldPtrOutput
	ToTemplateCategoricalDimensionFieldPtrOutputWithContext(context.Context) TemplateCategoricalDimensionFieldPtrOutput
}

type templateCategoricalDimensionFieldPtrType TemplateCategoricalDimensionFieldArgs

func TemplateCategoricalDimensionFieldPtr(v *TemplateCategoricalDimensionFieldArgs) TemplateCategoricalDimensionFieldPtrInput {
	return (*templateCategoricalDimensionFieldPtrType)(v)
}

func (*templateCategoricalDimensionFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoricalDimensionField)(nil)).Elem()
}

func (i *templateCategoricalDimensionFieldPtrType) ToTemplateCategoricalDimensionFieldPtrOutput() TemplateCategoricalDimensionFieldPtrOutput {
	return i.ToTemplateCategoricalDimensionFieldPtrOutputWithContext(context.Background())
}

func (i *templateCategoricalDimensionFieldPtrType) ToTemplateCategoricalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoricalDimensionFieldPtrOutput)
}

type TemplateCategoricalDimensionFieldOutput struct{ *pulumi.OutputState }

func (TemplateCategoricalDimensionFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoricalDimensionField)(nil)).Elem()
}

func (o TemplateCategoricalDimensionFieldOutput) ToTemplateCategoricalDimensionFieldOutput() TemplateCategoricalDimensionFieldOutput {
	return o
}

func (o TemplateCategoricalDimensionFieldOutput) ToTemplateCategoricalDimensionFieldOutputWithContext(ctx context.Context) TemplateCategoricalDimensionFieldOutput {
	return o
}

func (o TemplateCategoricalDimensionFieldOutput) ToTemplateCategoricalDimensionFieldPtrOutput() TemplateCategoricalDimensionFieldPtrOutput {
	return o.ToTemplateCategoricalDimensionFieldPtrOutputWithContext(context.Background())
}

func (o TemplateCategoricalDimensionFieldOutput) ToTemplateCategoricalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalDimensionFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCategoricalDimensionField) *TemplateCategoricalDimensionField {
		return &v
	}).(TemplateCategoricalDimensionFieldPtrOutput)
}

// The column that is used in the `CategoricalDimensionField` .
func (o TemplateCategoricalDimensionFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateCategoricalDimensionField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The custom field ID.
func (o TemplateCategoricalDimensionFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCategoricalDimensionField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateCategoricalDimensionFieldOutput) FormatConfiguration() TemplateStringFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCategoricalDimensionField) *TemplateStringFormatConfiguration {
		return v.FormatConfiguration
	}).(TemplateStringFormatConfigurationPtrOutput)
}

// The custom hierarchy ID.
func (o TemplateCategoricalDimensionFieldOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCategoricalDimensionField) *string { return v.HierarchyId }).(pulumi.StringPtrOutput)
}

type TemplateCategoricalDimensionFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateCategoricalDimensionFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoricalDimensionField)(nil)).Elem()
}

func (o TemplateCategoricalDimensionFieldPtrOutput) ToTemplateCategoricalDimensionFieldPtrOutput() TemplateCategoricalDimensionFieldPtrOutput {
	return o
}

func (o TemplateCategoricalDimensionFieldPtrOutput) ToTemplateCategoricalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalDimensionFieldPtrOutput {
	return o
}

func (o TemplateCategoricalDimensionFieldPtrOutput) Elem() TemplateCategoricalDimensionFieldOutput {
	return o.ApplyT(func(v *TemplateCategoricalDimensionField) TemplateCategoricalDimensionField {
		if v != nil {
			return *v
		}
		var ret TemplateCategoricalDimensionField
		return ret
	}).(TemplateCategoricalDimensionFieldOutput)
}

// The column that is used in the `CategoricalDimensionField` .
func (o TemplateCategoricalDimensionFieldPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalDimensionField) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The custom field ID.
func (o TemplateCategoricalDimensionFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalDimensionField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The format configuration of the field.
func (o TemplateCategoricalDimensionFieldPtrOutput) FormatConfiguration() TemplateStringFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalDimensionField) *TemplateStringFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateStringFormatConfigurationPtrOutput)
}

// The custom hierarchy ID.
func (o TemplateCategoricalDimensionFieldPtrOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalDimensionField) *string {
		if v == nil {
			return nil
		}
		return v.HierarchyId
	}).(pulumi.StringPtrOutput)
}

type TemplateCategoricalMeasureField struct {
	// The aggregation function of the measure field.
	AggregationFunction *TemplateCategoricalAggregationFunction `pulumi:"aggregationFunction"`
	// The column that is used in the `CategoricalMeasureField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateStringFormatConfiguration `pulumi:"formatConfiguration"`
}

// TemplateCategoricalMeasureFieldInput is an input type that accepts TemplateCategoricalMeasureFieldArgs and TemplateCategoricalMeasureFieldOutput values.
// You can construct a concrete instance of `TemplateCategoricalMeasureFieldInput` via:
//
//	TemplateCategoricalMeasureFieldArgs{...}
type TemplateCategoricalMeasureFieldInput interface {
	pulumi.Input

	ToTemplateCategoricalMeasureFieldOutput() TemplateCategoricalMeasureFieldOutput
	ToTemplateCategoricalMeasureFieldOutputWithContext(context.Context) TemplateCategoricalMeasureFieldOutput
}

type TemplateCategoricalMeasureFieldArgs struct {
	// The aggregation function of the measure field.
	AggregationFunction TemplateCategoricalAggregationFunctionPtrInput `pulumi:"aggregationFunction"`
	// The column that is used in the `CategoricalMeasureField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateStringFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
}

func (TemplateCategoricalMeasureFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoricalMeasureField)(nil)).Elem()
}

func (i TemplateCategoricalMeasureFieldArgs) ToTemplateCategoricalMeasureFieldOutput() TemplateCategoricalMeasureFieldOutput {
	return i.ToTemplateCategoricalMeasureFieldOutputWithContext(context.Background())
}

func (i TemplateCategoricalMeasureFieldArgs) ToTemplateCategoricalMeasureFieldOutputWithContext(ctx context.Context) TemplateCategoricalMeasureFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoricalMeasureFieldOutput)
}

func (i TemplateCategoricalMeasureFieldArgs) ToTemplateCategoricalMeasureFieldPtrOutput() TemplateCategoricalMeasureFieldPtrOutput {
	return i.ToTemplateCategoricalMeasureFieldPtrOutputWithContext(context.Background())
}

func (i TemplateCategoricalMeasureFieldArgs) ToTemplateCategoricalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoricalMeasureFieldOutput).ToTemplateCategoricalMeasureFieldPtrOutputWithContext(ctx)
}

// TemplateCategoricalMeasureFieldPtrInput is an input type that accepts TemplateCategoricalMeasureFieldArgs, TemplateCategoricalMeasureFieldPtr and TemplateCategoricalMeasureFieldPtrOutput values.
// You can construct a concrete instance of `TemplateCategoricalMeasureFieldPtrInput` via:
//
//	        TemplateCategoricalMeasureFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateCategoricalMeasureFieldPtrInput interface {
	pulumi.Input

	ToTemplateCategoricalMeasureFieldPtrOutput() TemplateCategoricalMeasureFieldPtrOutput
	ToTemplateCategoricalMeasureFieldPtrOutputWithContext(context.Context) TemplateCategoricalMeasureFieldPtrOutput
}

type templateCategoricalMeasureFieldPtrType TemplateCategoricalMeasureFieldArgs

func TemplateCategoricalMeasureFieldPtr(v *TemplateCategoricalMeasureFieldArgs) TemplateCategoricalMeasureFieldPtrInput {
	return (*templateCategoricalMeasureFieldPtrType)(v)
}

func (*templateCategoricalMeasureFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoricalMeasureField)(nil)).Elem()
}

func (i *templateCategoricalMeasureFieldPtrType) ToTemplateCategoricalMeasureFieldPtrOutput() TemplateCategoricalMeasureFieldPtrOutput {
	return i.ToTemplateCategoricalMeasureFieldPtrOutputWithContext(context.Background())
}

func (i *templateCategoricalMeasureFieldPtrType) ToTemplateCategoricalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoricalMeasureFieldPtrOutput)
}

type TemplateCategoricalMeasureFieldOutput struct{ *pulumi.OutputState }

func (TemplateCategoricalMeasureFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoricalMeasureField)(nil)).Elem()
}

func (o TemplateCategoricalMeasureFieldOutput) ToTemplateCategoricalMeasureFieldOutput() TemplateCategoricalMeasureFieldOutput {
	return o
}

func (o TemplateCategoricalMeasureFieldOutput) ToTemplateCategoricalMeasureFieldOutputWithContext(ctx context.Context) TemplateCategoricalMeasureFieldOutput {
	return o
}

func (o TemplateCategoricalMeasureFieldOutput) ToTemplateCategoricalMeasureFieldPtrOutput() TemplateCategoricalMeasureFieldPtrOutput {
	return o.ToTemplateCategoricalMeasureFieldPtrOutputWithContext(context.Background())
}

func (o TemplateCategoricalMeasureFieldOutput) ToTemplateCategoricalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalMeasureFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCategoricalMeasureField) *TemplateCategoricalMeasureField {
		return &v
	}).(TemplateCategoricalMeasureFieldPtrOutput)
}

// The aggregation function of the measure field.
func (o TemplateCategoricalMeasureFieldOutput) AggregationFunction() TemplateCategoricalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateCategoricalMeasureField) *TemplateCategoricalAggregationFunction {
		return v.AggregationFunction
	}).(TemplateCategoricalAggregationFunctionPtrOutput)
}

// The column that is used in the `CategoricalMeasureField` .
func (o TemplateCategoricalMeasureFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateCategoricalMeasureField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The custom field ID.
func (o TemplateCategoricalMeasureFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCategoricalMeasureField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateCategoricalMeasureFieldOutput) FormatConfiguration() TemplateStringFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCategoricalMeasureField) *TemplateStringFormatConfiguration {
		return v.FormatConfiguration
	}).(TemplateStringFormatConfigurationPtrOutput)
}

type TemplateCategoricalMeasureFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateCategoricalMeasureFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoricalMeasureField)(nil)).Elem()
}

func (o TemplateCategoricalMeasureFieldPtrOutput) ToTemplateCategoricalMeasureFieldPtrOutput() TemplateCategoricalMeasureFieldPtrOutput {
	return o
}

func (o TemplateCategoricalMeasureFieldPtrOutput) ToTemplateCategoricalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateCategoricalMeasureFieldPtrOutput {
	return o
}

func (o TemplateCategoricalMeasureFieldPtrOutput) Elem() TemplateCategoricalMeasureFieldOutput {
	return o.ApplyT(func(v *TemplateCategoricalMeasureField) TemplateCategoricalMeasureField {
		if v != nil {
			return *v
		}
		var ret TemplateCategoricalMeasureField
		return ret
	}).(TemplateCategoricalMeasureFieldOutput)
}

// The aggregation function of the measure field.
func (o TemplateCategoricalMeasureFieldPtrOutput) AggregationFunction() TemplateCategoricalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalMeasureField) *TemplateCategoricalAggregationFunction {
		if v == nil {
			return nil
		}
		return v.AggregationFunction
	}).(TemplateCategoricalAggregationFunctionPtrOutput)
}

// The column that is used in the `CategoricalMeasureField` .
func (o TemplateCategoricalMeasureFieldPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalMeasureField) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The custom field ID.
func (o TemplateCategoricalMeasureFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalMeasureField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The format configuration of the field.
func (o TemplateCategoricalMeasureFieldPtrOutput) FormatConfiguration() TemplateStringFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoricalMeasureField) *TemplateStringFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateStringFormatConfigurationPtrOutput)
}

type TemplateCategoryDrillDownFilter struct {
	// A list of the string inputs that are the values of the category drill down filter.
	CategoryValues []string `pulumi:"categoryValues"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
}

// TemplateCategoryDrillDownFilterInput is an input type that accepts TemplateCategoryDrillDownFilterArgs and TemplateCategoryDrillDownFilterOutput values.
// You can construct a concrete instance of `TemplateCategoryDrillDownFilterInput` via:
//
//	TemplateCategoryDrillDownFilterArgs{...}
type TemplateCategoryDrillDownFilterInput interface {
	pulumi.Input

	ToTemplateCategoryDrillDownFilterOutput() TemplateCategoryDrillDownFilterOutput
	ToTemplateCategoryDrillDownFilterOutputWithContext(context.Context) TemplateCategoryDrillDownFilterOutput
}

type TemplateCategoryDrillDownFilterArgs struct {
	// A list of the string inputs that are the values of the category drill down filter.
	CategoryValues pulumi.StringArrayInput `pulumi:"categoryValues"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
}

func (TemplateCategoryDrillDownFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryDrillDownFilter)(nil)).Elem()
}

func (i TemplateCategoryDrillDownFilterArgs) ToTemplateCategoryDrillDownFilterOutput() TemplateCategoryDrillDownFilterOutput {
	return i.ToTemplateCategoryDrillDownFilterOutputWithContext(context.Background())
}

func (i TemplateCategoryDrillDownFilterArgs) ToTemplateCategoryDrillDownFilterOutputWithContext(ctx context.Context) TemplateCategoryDrillDownFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryDrillDownFilterOutput)
}

func (i TemplateCategoryDrillDownFilterArgs) ToTemplateCategoryDrillDownFilterPtrOutput() TemplateCategoryDrillDownFilterPtrOutput {
	return i.ToTemplateCategoryDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i TemplateCategoryDrillDownFilterArgs) ToTemplateCategoryDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryDrillDownFilterOutput).ToTemplateCategoryDrillDownFilterPtrOutputWithContext(ctx)
}

// TemplateCategoryDrillDownFilterPtrInput is an input type that accepts TemplateCategoryDrillDownFilterArgs, TemplateCategoryDrillDownFilterPtr and TemplateCategoryDrillDownFilterPtrOutput values.
// You can construct a concrete instance of `TemplateCategoryDrillDownFilterPtrInput` via:
//
//	        TemplateCategoryDrillDownFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateCategoryDrillDownFilterPtrInput interface {
	pulumi.Input

	ToTemplateCategoryDrillDownFilterPtrOutput() TemplateCategoryDrillDownFilterPtrOutput
	ToTemplateCategoryDrillDownFilterPtrOutputWithContext(context.Context) TemplateCategoryDrillDownFilterPtrOutput
}

type templateCategoryDrillDownFilterPtrType TemplateCategoryDrillDownFilterArgs

func TemplateCategoryDrillDownFilterPtr(v *TemplateCategoryDrillDownFilterArgs) TemplateCategoryDrillDownFilterPtrInput {
	return (*templateCategoryDrillDownFilterPtrType)(v)
}

func (*templateCategoryDrillDownFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryDrillDownFilter)(nil)).Elem()
}

func (i *templateCategoryDrillDownFilterPtrType) ToTemplateCategoryDrillDownFilterPtrOutput() TemplateCategoryDrillDownFilterPtrOutput {
	return i.ToTemplateCategoryDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i *templateCategoryDrillDownFilterPtrType) ToTemplateCategoryDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryDrillDownFilterPtrOutput)
}

type TemplateCategoryDrillDownFilterOutput struct{ *pulumi.OutputState }

func (TemplateCategoryDrillDownFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryDrillDownFilter)(nil)).Elem()
}

func (o TemplateCategoryDrillDownFilterOutput) ToTemplateCategoryDrillDownFilterOutput() TemplateCategoryDrillDownFilterOutput {
	return o
}

func (o TemplateCategoryDrillDownFilterOutput) ToTemplateCategoryDrillDownFilterOutputWithContext(ctx context.Context) TemplateCategoryDrillDownFilterOutput {
	return o
}

func (o TemplateCategoryDrillDownFilterOutput) ToTemplateCategoryDrillDownFilterPtrOutput() TemplateCategoryDrillDownFilterPtrOutput {
	return o.ToTemplateCategoryDrillDownFilterPtrOutputWithContext(context.Background())
}

func (o TemplateCategoryDrillDownFilterOutput) ToTemplateCategoryDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryDrillDownFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCategoryDrillDownFilter) *TemplateCategoryDrillDownFilter {
		return &v
	}).(TemplateCategoryDrillDownFilterPtrOutput)
}

// A list of the string inputs that are the values of the category drill down filter.
func (o TemplateCategoryDrillDownFilterOutput) CategoryValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateCategoryDrillDownFilter) []string { return v.CategoryValues }).(pulumi.StringArrayOutput)
}

// The column that the filter is applied to.
func (o TemplateCategoryDrillDownFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateCategoryDrillDownFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

type TemplateCategoryDrillDownFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateCategoryDrillDownFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryDrillDownFilter)(nil)).Elem()
}

func (o TemplateCategoryDrillDownFilterPtrOutput) ToTemplateCategoryDrillDownFilterPtrOutput() TemplateCategoryDrillDownFilterPtrOutput {
	return o
}

func (o TemplateCategoryDrillDownFilterPtrOutput) ToTemplateCategoryDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryDrillDownFilterPtrOutput {
	return o
}

func (o TemplateCategoryDrillDownFilterPtrOutput) Elem() TemplateCategoryDrillDownFilterOutput {
	return o.ApplyT(func(v *TemplateCategoryDrillDownFilter) TemplateCategoryDrillDownFilter {
		if v != nil {
			return *v
		}
		var ret TemplateCategoryDrillDownFilter
		return ret
	}).(TemplateCategoryDrillDownFilterOutput)
}

// A list of the string inputs that are the values of the category drill down filter.
func (o TemplateCategoryDrillDownFilterPtrOutput) CategoryValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateCategoryDrillDownFilter) []string {
		if v == nil {
			return nil
		}
		return v.CategoryValues
	}).(pulumi.StringArrayOutput)
}

// The column that the filter is applied to.
func (o TemplateCategoryDrillDownFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryDrillDownFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

type TemplateCategoryFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The configuration for a `CategoryFilter` .
	Configuration TemplateCategoryFilterConfiguration `pulumi:"configuration"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
}

// TemplateCategoryFilterInput is an input type that accepts TemplateCategoryFilterArgs and TemplateCategoryFilterOutput values.
// You can construct a concrete instance of `TemplateCategoryFilterInput` via:
//
//	TemplateCategoryFilterArgs{...}
type TemplateCategoryFilterInput interface {
	pulumi.Input

	ToTemplateCategoryFilterOutput() TemplateCategoryFilterOutput
	ToTemplateCategoryFilterOutputWithContext(context.Context) TemplateCategoryFilterOutput
}

type TemplateCategoryFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The configuration for a `CategoryFilter` .
	Configuration TemplateCategoryFilterConfigurationInput `pulumi:"configuration"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
}

func (TemplateCategoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryFilter)(nil)).Elem()
}

func (i TemplateCategoryFilterArgs) ToTemplateCategoryFilterOutput() TemplateCategoryFilterOutput {
	return i.ToTemplateCategoryFilterOutputWithContext(context.Background())
}

func (i TemplateCategoryFilterArgs) ToTemplateCategoryFilterOutputWithContext(ctx context.Context) TemplateCategoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryFilterOutput)
}

func (i TemplateCategoryFilterArgs) ToTemplateCategoryFilterPtrOutput() TemplateCategoryFilterPtrOutput {
	return i.ToTemplateCategoryFilterPtrOutputWithContext(context.Background())
}

func (i TemplateCategoryFilterArgs) ToTemplateCategoryFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryFilterOutput).ToTemplateCategoryFilterPtrOutputWithContext(ctx)
}

// TemplateCategoryFilterPtrInput is an input type that accepts TemplateCategoryFilterArgs, TemplateCategoryFilterPtr and TemplateCategoryFilterPtrOutput values.
// You can construct a concrete instance of `TemplateCategoryFilterPtrInput` via:
//
//	        TemplateCategoryFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateCategoryFilterPtrInput interface {
	pulumi.Input

	ToTemplateCategoryFilterPtrOutput() TemplateCategoryFilterPtrOutput
	ToTemplateCategoryFilterPtrOutputWithContext(context.Context) TemplateCategoryFilterPtrOutput
}

type templateCategoryFilterPtrType TemplateCategoryFilterArgs

func TemplateCategoryFilterPtr(v *TemplateCategoryFilterArgs) TemplateCategoryFilterPtrInput {
	return (*templateCategoryFilterPtrType)(v)
}

func (*templateCategoryFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryFilter)(nil)).Elem()
}

func (i *templateCategoryFilterPtrType) ToTemplateCategoryFilterPtrOutput() TemplateCategoryFilterPtrOutput {
	return i.ToTemplateCategoryFilterPtrOutputWithContext(context.Background())
}

func (i *templateCategoryFilterPtrType) ToTemplateCategoryFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryFilterPtrOutput)
}

type TemplateCategoryFilterOutput struct{ *pulumi.OutputState }

func (TemplateCategoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryFilter)(nil)).Elem()
}

func (o TemplateCategoryFilterOutput) ToTemplateCategoryFilterOutput() TemplateCategoryFilterOutput {
	return o
}

func (o TemplateCategoryFilterOutput) ToTemplateCategoryFilterOutputWithContext(ctx context.Context) TemplateCategoryFilterOutput {
	return o
}

func (o TemplateCategoryFilterOutput) ToTemplateCategoryFilterPtrOutput() TemplateCategoryFilterPtrOutput {
	return o.ToTemplateCategoryFilterPtrOutputWithContext(context.Background())
}

func (o TemplateCategoryFilterOutput) ToTemplateCategoryFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCategoryFilter) *TemplateCategoryFilter {
		return &v
	}).(TemplateCategoryFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateCategoryFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateCategoryFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The configuration for a `CategoryFilter` .
func (o TemplateCategoryFilterOutput) Configuration() TemplateCategoryFilterConfigurationOutput {
	return o.ApplyT(func(v TemplateCategoryFilter) TemplateCategoryFilterConfiguration { return v.Configuration }).(TemplateCategoryFilterConfigurationOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateCategoryFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCategoryFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateCategoryFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCategoryFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

type TemplateCategoryFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateCategoryFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryFilter)(nil)).Elem()
}

func (o TemplateCategoryFilterPtrOutput) ToTemplateCategoryFilterPtrOutput() TemplateCategoryFilterPtrOutput {
	return o
}

func (o TemplateCategoryFilterPtrOutput) ToTemplateCategoryFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterPtrOutput {
	return o
}

func (o TemplateCategoryFilterPtrOutput) Elem() TemplateCategoryFilterOutput {
	return o.ApplyT(func(v *TemplateCategoryFilter) TemplateCategoryFilter {
		if v != nil {
			return *v
		}
		var ret TemplateCategoryFilter
		return ret
	}).(TemplateCategoryFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateCategoryFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The configuration for a `CategoryFilter` .
func (o TemplateCategoryFilterPtrOutput) Configuration() TemplateCategoryFilterConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryFilter) *TemplateCategoryFilterConfiguration {
		if v == nil {
			return nil
		}
		return &v.Configuration
	}).(TemplateCategoryFilterConfigurationPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateCategoryFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateCategoryFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

type TemplateCategoryFilterConfiguration struct {
	// A custom filter that filters based on a single value. This filter can be partially matched.
	CustomFilterConfiguration *TemplateCustomFilterConfiguration `pulumi:"customFilterConfiguration"`
	// A list of custom filter values. In the Amazon QuickSight console, this filter type is called a custom filter list.
	CustomFilterListConfiguration *TemplateCustomFilterListConfiguration `pulumi:"customFilterListConfiguration"`
	// A list of filter configurations. In the Amazon QuickSight console, this filter type is called a filter list.
	FilterListConfiguration *TemplateFilterListConfiguration `pulumi:"filterListConfiguration"`
}

// TemplateCategoryFilterConfigurationInput is an input type that accepts TemplateCategoryFilterConfigurationArgs and TemplateCategoryFilterConfigurationOutput values.
// You can construct a concrete instance of `TemplateCategoryFilterConfigurationInput` via:
//
//	TemplateCategoryFilterConfigurationArgs{...}
type TemplateCategoryFilterConfigurationInput interface {
	pulumi.Input

	ToTemplateCategoryFilterConfigurationOutput() TemplateCategoryFilterConfigurationOutput
	ToTemplateCategoryFilterConfigurationOutputWithContext(context.Context) TemplateCategoryFilterConfigurationOutput
}

type TemplateCategoryFilterConfigurationArgs struct {
	// A custom filter that filters based on a single value. This filter can be partially matched.
	CustomFilterConfiguration TemplateCustomFilterConfigurationPtrInput `pulumi:"customFilterConfiguration"`
	// A list of custom filter values. In the Amazon QuickSight console, this filter type is called a custom filter list.
	CustomFilterListConfiguration TemplateCustomFilterListConfigurationPtrInput `pulumi:"customFilterListConfiguration"`
	// A list of filter configurations. In the Amazon QuickSight console, this filter type is called a filter list.
	FilterListConfiguration TemplateFilterListConfigurationPtrInput `pulumi:"filterListConfiguration"`
}

func (TemplateCategoryFilterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryFilterConfiguration)(nil)).Elem()
}

func (i TemplateCategoryFilterConfigurationArgs) ToTemplateCategoryFilterConfigurationOutput() TemplateCategoryFilterConfigurationOutput {
	return i.ToTemplateCategoryFilterConfigurationOutputWithContext(context.Background())
}

func (i TemplateCategoryFilterConfigurationArgs) ToTemplateCategoryFilterConfigurationOutputWithContext(ctx context.Context) TemplateCategoryFilterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryFilterConfigurationOutput)
}

func (i TemplateCategoryFilterConfigurationArgs) ToTemplateCategoryFilterConfigurationPtrOutput() TemplateCategoryFilterConfigurationPtrOutput {
	return i.ToTemplateCategoryFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateCategoryFilterConfigurationArgs) ToTemplateCategoryFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryFilterConfigurationOutput).ToTemplateCategoryFilterConfigurationPtrOutputWithContext(ctx)
}

// TemplateCategoryFilterConfigurationPtrInput is an input type that accepts TemplateCategoryFilterConfigurationArgs, TemplateCategoryFilterConfigurationPtr and TemplateCategoryFilterConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateCategoryFilterConfigurationPtrInput` via:
//
//	        TemplateCategoryFilterConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateCategoryFilterConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateCategoryFilterConfigurationPtrOutput() TemplateCategoryFilterConfigurationPtrOutput
	ToTemplateCategoryFilterConfigurationPtrOutputWithContext(context.Context) TemplateCategoryFilterConfigurationPtrOutput
}

type templateCategoryFilterConfigurationPtrType TemplateCategoryFilterConfigurationArgs

func TemplateCategoryFilterConfigurationPtr(v *TemplateCategoryFilterConfigurationArgs) TemplateCategoryFilterConfigurationPtrInput {
	return (*templateCategoryFilterConfigurationPtrType)(v)
}

func (*templateCategoryFilterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryFilterConfiguration)(nil)).Elem()
}

func (i *templateCategoryFilterConfigurationPtrType) ToTemplateCategoryFilterConfigurationPtrOutput() TemplateCategoryFilterConfigurationPtrOutput {
	return i.ToTemplateCategoryFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateCategoryFilterConfigurationPtrType) ToTemplateCategoryFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryFilterConfigurationPtrOutput)
}

type TemplateCategoryFilterConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateCategoryFilterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryFilterConfiguration)(nil)).Elem()
}

func (o TemplateCategoryFilterConfigurationOutput) ToTemplateCategoryFilterConfigurationOutput() TemplateCategoryFilterConfigurationOutput {
	return o
}

func (o TemplateCategoryFilterConfigurationOutput) ToTemplateCategoryFilterConfigurationOutputWithContext(ctx context.Context) TemplateCategoryFilterConfigurationOutput {
	return o
}

func (o TemplateCategoryFilterConfigurationOutput) ToTemplateCategoryFilterConfigurationPtrOutput() TemplateCategoryFilterConfigurationPtrOutput {
	return o.ToTemplateCategoryFilterConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateCategoryFilterConfigurationOutput) ToTemplateCategoryFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCategoryFilterConfiguration) *TemplateCategoryFilterConfiguration {
		return &v
	}).(TemplateCategoryFilterConfigurationPtrOutput)
}

// A custom filter that filters based on a single value. This filter can be partially matched.
func (o TemplateCategoryFilterConfigurationOutput) CustomFilterConfiguration() TemplateCustomFilterConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCategoryFilterConfiguration) *TemplateCustomFilterConfiguration {
		return v.CustomFilterConfiguration
	}).(TemplateCustomFilterConfigurationPtrOutput)
}

// A list of custom filter values. In the Amazon QuickSight console, this filter type is called a custom filter list.
func (o TemplateCategoryFilterConfigurationOutput) CustomFilterListConfiguration() TemplateCustomFilterListConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCategoryFilterConfiguration) *TemplateCustomFilterListConfiguration {
		return v.CustomFilterListConfiguration
	}).(TemplateCustomFilterListConfigurationPtrOutput)
}

// A list of filter configurations. In the Amazon QuickSight console, this filter type is called a filter list.
func (o TemplateCategoryFilterConfigurationOutput) FilterListConfiguration() TemplateFilterListConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCategoryFilterConfiguration) *TemplateFilterListConfiguration {
		return v.FilterListConfiguration
	}).(TemplateFilterListConfigurationPtrOutput)
}

type TemplateCategoryFilterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCategoryFilterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryFilterConfiguration)(nil)).Elem()
}

func (o TemplateCategoryFilterConfigurationPtrOutput) ToTemplateCategoryFilterConfigurationPtrOutput() TemplateCategoryFilterConfigurationPtrOutput {
	return o
}

func (o TemplateCategoryFilterConfigurationPtrOutput) ToTemplateCategoryFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCategoryFilterConfigurationPtrOutput {
	return o
}

func (o TemplateCategoryFilterConfigurationPtrOutput) Elem() TemplateCategoryFilterConfigurationOutput {
	return o.ApplyT(func(v *TemplateCategoryFilterConfiguration) TemplateCategoryFilterConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateCategoryFilterConfiguration
		return ret
	}).(TemplateCategoryFilterConfigurationOutput)
}

// A custom filter that filters based on a single value. This filter can be partially matched.
func (o TemplateCategoryFilterConfigurationPtrOutput) CustomFilterConfiguration() TemplateCustomFilterConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryFilterConfiguration) *TemplateCustomFilterConfiguration {
		if v == nil {
			return nil
		}
		return v.CustomFilterConfiguration
	}).(TemplateCustomFilterConfigurationPtrOutput)
}

// A list of custom filter values. In the Amazon QuickSight console, this filter type is called a custom filter list.
func (o TemplateCategoryFilterConfigurationPtrOutput) CustomFilterListConfiguration() TemplateCustomFilterListConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryFilterConfiguration) *TemplateCustomFilterListConfiguration {
		if v == nil {
			return nil
		}
		return v.CustomFilterListConfiguration
	}).(TemplateCustomFilterListConfigurationPtrOutput)
}

// A list of filter configurations. In the Amazon QuickSight console, this filter type is called a filter list.
func (o TemplateCategoryFilterConfigurationPtrOutput) FilterListConfiguration() TemplateFilterListConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryFilterConfiguration) *TemplateFilterListConfiguration {
		if v == nil {
			return nil
		}
		return v.FilterListConfiguration
	}).(TemplateFilterListConfigurationPtrOutput)
}

type TemplateCategoryInnerFilter struct {
	Column                            TemplateColumnIdentifier                   `pulumi:"column"`
	Configuration                     TemplateCategoryFilterConfiguration        `pulumi:"configuration"`
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
}

// TemplateCategoryInnerFilterInput is an input type that accepts TemplateCategoryInnerFilterArgs and TemplateCategoryInnerFilterOutput values.
// You can construct a concrete instance of `TemplateCategoryInnerFilterInput` via:
//
//	TemplateCategoryInnerFilterArgs{...}
type TemplateCategoryInnerFilterInput interface {
	pulumi.Input

	ToTemplateCategoryInnerFilterOutput() TemplateCategoryInnerFilterOutput
	ToTemplateCategoryInnerFilterOutputWithContext(context.Context) TemplateCategoryInnerFilterOutput
}

type TemplateCategoryInnerFilterArgs struct {
	Column                            TemplateColumnIdentifierInput                     `pulumi:"column"`
	Configuration                     TemplateCategoryFilterConfigurationInput          `pulumi:"configuration"`
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
}

func (TemplateCategoryInnerFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryInnerFilter)(nil)).Elem()
}

func (i TemplateCategoryInnerFilterArgs) ToTemplateCategoryInnerFilterOutput() TemplateCategoryInnerFilterOutput {
	return i.ToTemplateCategoryInnerFilterOutputWithContext(context.Background())
}

func (i TemplateCategoryInnerFilterArgs) ToTemplateCategoryInnerFilterOutputWithContext(ctx context.Context) TemplateCategoryInnerFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryInnerFilterOutput)
}

func (i TemplateCategoryInnerFilterArgs) ToTemplateCategoryInnerFilterPtrOutput() TemplateCategoryInnerFilterPtrOutput {
	return i.ToTemplateCategoryInnerFilterPtrOutputWithContext(context.Background())
}

func (i TemplateCategoryInnerFilterArgs) ToTemplateCategoryInnerFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryInnerFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryInnerFilterOutput).ToTemplateCategoryInnerFilterPtrOutputWithContext(ctx)
}

// TemplateCategoryInnerFilterPtrInput is an input type that accepts TemplateCategoryInnerFilterArgs, TemplateCategoryInnerFilterPtr and TemplateCategoryInnerFilterPtrOutput values.
// You can construct a concrete instance of `TemplateCategoryInnerFilterPtrInput` via:
//
//	        TemplateCategoryInnerFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateCategoryInnerFilterPtrInput interface {
	pulumi.Input

	ToTemplateCategoryInnerFilterPtrOutput() TemplateCategoryInnerFilterPtrOutput
	ToTemplateCategoryInnerFilterPtrOutputWithContext(context.Context) TemplateCategoryInnerFilterPtrOutput
}

type templateCategoryInnerFilterPtrType TemplateCategoryInnerFilterArgs

func TemplateCategoryInnerFilterPtr(v *TemplateCategoryInnerFilterArgs) TemplateCategoryInnerFilterPtrInput {
	return (*templateCategoryInnerFilterPtrType)(v)
}

func (*templateCategoryInnerFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryInnerFilter)(nil)).Elem()
}

func (i *templateCategoryInnerFilterPtrType) ToTemplateCategoryInnerFilterPtrOutput() TemplateCategoryInnerFilterPtrOutput {
	return i.ToTemplateCategoryInnerFilterPtrOutputWithContext(context.Background())
}

func (i *templateCategoryInnerFilterPtrType) ToTemplateCategoryInnerFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryInnerFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCategoryInnerFilterPtrOutput)
}

type TemplateCategoryInnerFilterOutput struct{ *pulumi.OutputState }

func (TemplateCategoryInnerFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCategoryInnerFilter)(nil)).Elem()
}

func (o TemplateCategoryInnerFilterOutput) ToTemplateCategoryInnerFilterOutput() TemplateCategoryInnerFilterOutput {
	return o
}

func (o TemplateCategoryInnerFilterOutput) ToTemplateCategoryInnerFilterOutputWithContext(ctx context.Context) TemplateCategoryInnerFilterOutput {
	return o
}

func (o TemplateCategoryInnerFilterOutput) ToTemplateCategoryInnerFilterPtrOutput() TemplateCategoryInnerFilterPtrOutput {
	return o.ToTemplateCategoryInnerFilterPtrOutputWithContext(context.Background())
}

func (o TemplateCategoryInnerFilterOutput) ToTemplateCategoryInnerFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryInnerFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCategoryInnerFilter) *TemplateCategoryInnerFilter {
		return &v
	}).(TemplateCategoryInnerFilterPtrOutput)
}

func (o TemplateCategoryInnerFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateCategoryInnerFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

func (o TemplateCategoryInnerFilterOutput) Configuration() TemplateCategoryFilterConfigurationOutput {
	return o.ApplyT(func(v TemplateCategoryInnerFilter) TemplateCategoryFilterConfiguration { return v.Configuration }).(TemplateCategoryFilterConfigurationOutput)
}

func (o TemplateCategoryInnerFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCategoryInnerFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

type TemplateCategoryInnerFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateCategoryInnerFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCategoryInnerFilter)(nil)).Elem()
}

func (o TemplateCategoryInnerFilterPtrOutput) ToTemplateCategoryInnerFilterPtrOutput() TemplateCategoryInnerFilterPtrOutput {
	return o
}

func (o TemplateCategoryInnerFilterPtrOutput) ToTemplateCategoryInnerFilterPtrOutputWithContext(ctx context.Context) TemplateCategoryInnerFilterPtrOutput {
	return o
}

func (o TemplateCategoryInnerFilterPtrOutput) Elem() TemplateCategoryInnerFilterOutput {
	return o.ApplyT(func(v *TemplateCategoryInnerFilter) TemplateCategoryInnerFilter {
		if v != nil {
			return *v
		}
		var ret TemplateCategoryInnerFilter
		return ret
	}).(TemplateCategoryInnerFilterOutput)
}

func (o TemplateCategoryInnerFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryInnerFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

func (o TemplateCategoryInnerFilterPtrOutput) Configuration() TemplateCategoryFilterConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryInnerFilter) *TemplateCategoryFilterConfiguration {
		if v == nil {
			return nil
		}
		return &v.Configuration
	}).(TemplateCategoryFilterConfigurationPtrOutput)
}

func (o TemplateCategoryInnerFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCategoryInnerFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

type TemplateChartAxisLabelOptions struct {
	// The label options for a chart axis.
	AxisLabelOptions []TemplateAxisLabelOptions `pulumi:"axisLabelOptions"`
	// The visibility configuration of the sort icon on a chart's axis label.
	SortIconVisibility interface{} `pulumi:"sortIconVisibility"`
	// The visibility of an axis label on a chart. Choose one of the following options:
	//
	// - `VISIBLE` : Shows the axis.
	// - `HIDDEN` : Hides the axis.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateChartAxisLabelOptionsInput is an input type that accepts TemplateChartAxisLabelOptionsArgs and TemplateChartAxisLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateChartAxisLabelOptionsInput` via:
//
//	TemplateChartAxisLabelOptionsArgs{...}
type TemplateChartAxisLabelOptionsInput interface {
	pulumi.Input

	ToTemplateChartAxisLabelOptionsOutput() TemplateChartAxisLabelOptionsOutput
	ToTemplateChartAxisLabelOptionsOutputWithContext(context.Context) TemplateChartAxisLabelOptionsOutput
}

type TemplateChartAxisLabelOptionsArgs struct {
	// The label options for a chart axis.
	AxisLabelOptions TemplateAxisLabelOptionsArrayInput `pulumi:"axisLabelOptions"`
	// The visibility configuration of the sort icon on a chart's axis label.
	SortIconVisibility pulumi.Input `pulumi:"sortIconVisibility"`
	// The visibility of an axis label on a chart. Choose one of the following options:
	//
	// - `VISIBLE` : Shows the axis.
	// - `HIDDEN` : Hides the axis.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateChartAxisLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateChartAxisLabelOptions)(nil)).Elem()
}

func (i TemplateChartAxisLabelOptionsArgs) ToTemplateChartAxisLabelOptionsOutput() TemplateChartAxisLabelOptionsOutput {
	return i.ToTemplateChartAxisLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateChartAxisLabelOptionsArgs) ToTemplateChartAxisLabelOptionsOutputWithContext(ctx context.Context) TemplateChartAxisLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateChartAxisLabelOptionsOutput)
}

func (i TemplateChartAxisLabelOptionsArgs) ToTemplateChartAxisLabelOptionsPtrOutput() TemplateChartAxisLabelOptionsPtrOutput {
	return i.ToTemplateChartAxisLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateChartAxisLabelOptionsArgs) ToTemplateChartAxisLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateChartAxisLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateChartAxisLabelOptionsOutput).ToTemplateChartAxisLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateChartAxisLabelOptionsPtrInput is an input type that accepts TemplateChartAxisLabelOptionsArgs, TemplateChartAxisLabelOptionsPtr and TemplateChartAxisLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateChartAxisLabelOptionsPtrInput` via:
//
//	        TemplateChartAxisLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateChartAxisLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateChartAxisLabelOptionsPtrOutput() TemplateChartAxisLabelOptionsPtrOutput
	ToTemplateChartAxisLabelOptionsPtrOutputWithContext(context.Context) TemplateChartAxisLabelOptionsPtrOutput
}

type templateChartAxisLabelOptionsPtrType TemplateChartAxisLabelOptionsArgs

func TemplateChartAxisLabelOptionsPtr(v *TemplateChartAxisLabelOptionsArgs) TemplateChartAxisLabelOptionsPtrInput {
	return (*templateChartAxisLabelOptionsPtrType)(v)
}

func (*templateChartAxisLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateChartAxisLabelOptions)(nil)).Elem()
}

func (i *templateChartAxisLabelOptionsPtrType) ToTemplateChartAxisLabelOptionsPtrOutput() TemplateChartAxisLabelOptionsPtrOutput {
	return i.ToTemplateChartAxisLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateChartAxisLabelOptionsPtrType) ToTemplateChartAxisLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateChartAxisLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateChartAxisLabelOptionsPtrOutput)
}

type TemplateChartAxisLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateChartAxisLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateChartAxisLabelOptions)(nil)).Elem()
}

func (o TemplateChartAxisLabelOptionsOutput) ToTemplateChartAxisLabelOptionsOutput() TemplateChartAxisLabelOptionsOutput {
	return o
}

func (o TemplateChartAxisLabelOptionsOutput) ToTemplateChartAxisLabelOptionsOutputWithContext(ctx context.Context) TemplateChartAxisLabelOptionsOutput {
	return o
}

func (o TemplateChartAxisLabelOptionsOutput) ToTemplateChartAxisLabelOptionsPtrOutput() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ToTemplateChartAxisLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateChartAxisLabelOptionsOutput) ToTemplateChartAxisLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateChartAxisLabelOptions) *TemplateChartAxisLabelOptions {
		return &v
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The label options for a chart axis.
func (o TemplateChartAxisLabelOptionsOutput) AxisLabelOptions() TemplateAxisLabelOptionsArrayOutput {
	return o.ApplyT(func(v TemplateChartAxisLabelOptions) []TemplateAxisLabelOptions { return v.AxisLabelOptions }).(TemplateAxisLabelOptionsArrayOutput)
}

// The visibility configuration of the sort icon on a chart's axis label.
func (o TemplateChartAxisLabelOptionsOutput) SortIconVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateChartAxisLabelOptions) interface{} { return v.SortIconVisibility }).(pulumi.AnyOutput)
}

// The visibility of an axis label on a chart. Choose one of the following options:
//
// - `VISIBLE` : Shows the axis.
// - `HIDDEN` : Hides the axis.
func (o TemplateChartAxisLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateChartAxisLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateChartAxisLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateChartAxisLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateChartAxisLabelOptions)(nil)).Elem()
}

func (o TemplateChartAxisLabelOptionsPtrOutput) ToTemplateChartAxisLabelOptionsPtrOutput() TemplateChartAxisLabelOptionsPtrOutput {
	return o
}

func (o TemplateChartAxisLabelOptionsPtrOutput) ToTemplateChartAxisLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateChartAxisLabelOptionsPtrOutput {
	return o
}

func (o TemplateChartAxisLabelOptionsPtrOutput) Elem() TemplateChartAxisLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateChartAxisLabelOptions) TemplateChartAxisLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateChartAxisLabelOptions
		return ret
	}).(TemplateChartAxisLabelOptionsOutput)
}

// The label options for a chart axis.
func (o TemplateChartAxisLabelOptionsPtrOutput) AxisLabelOptions() TemplateAxisLabelOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateChartAxisLabelOptions) []TemplateAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.AxisLabelOptions
	}).(TemplateAxisLabelOptionsArrayOutput)
}

// The visibility configuration of the sort icon on a chart's axis label.
func (o TemplateChartAxisLabelOptionsPtrOutput) SortIconVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateChartAxisLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.SortIconVisibility
	}).(pulumi.AnyOutput)
}

// The visibility of an axis label on a chart. Choose one of the following options:
//
// - `VISIBLE` : Shows the axis.
// - `HIDDEN` : Hides the axis.
func (o TemplateChartAxisLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateChartAxisLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateClusterMarker struct {
	// The simple cluster marker of the cluster marker.
	SimpleClusterMarker *TemplateSimpleClusterMarker `pulumi:"simpleClusterMarker"`
}

// TemplateClusterMarkerInput is an input type that accepts TemplateClusterMarkerArgs and TemplateClusterMarkerOutput values.
// You can construct a concrete instance of `TemplateClusterMarkerInput` via:
//
//	TemplateClusterMarkerArgs{...}
type TemplateClusterMarkerInput interface {
	pulumi.Input

	ToTemplateClusterMarkerOutput() TemplateClusterMarkerOutput
	ToTemplateClusterMarkerOutputWithContext(context.Context) TemplateClusterMarkerOutput
}

type TemplateClusterMarkerArgs struct {
	// The simple cluster marker of the cluster marker.
	SimpleClusterMarker TemplateSimpleClusterMarkerPtrInput `pulumi:"simpleClusterMarker"`
}

func (TemplateClusterMarkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateClusterMarker)(nil)).Elem()
}

func (i TemplateClusterMarkerArgs) ToTemplateClusterMarkerOutput() TemplateClusterMarkerOutput {
	return i.ToTemplateClusterMarkerOutputWithContext(context.Background())
}

func (i TemplateClusterMarkerArgs) ToTemplateClusterMarkerOutputWithContext(ctx context.Context) TemplateClusterMarkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateClusterMarkerOutput)
}

func (i TemplateClusterMarkerArgs) ToTemplateClusterMarkerPtrOutput() TemplateClusterMarkerPtrOutput {
	return i.ToTemplateClusterMarkerPtrOutputWithContext(context.Background())
}

func (i TemplateClusterMarkerArgs) ToTemplateClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateClusterMarkerOutput).ToTemplateClusterMarkerPtrOutputWithContext(ctx)
}

// TemplateClusterMarkerPtrInput is an input type that accepts TemplateClusterMarkerArgs, TemplateClusterMarkerPtr and TemplateClusterMarkerPtrOutput values.
// You can construct a concrete instance of `TemplateClusterMarkerPtrInput` via:
//
//	        TemplateClusterMarkerArgs{...}
//
//	or:
//
//	        nil
type TemplateClusterMarkerPtrInput interface {
	pulumi.Input

	ToTemplateClusterMarkerPtrOutput() TemplateClusterMarkerPtrOutput
	ToTemplateClusterMarkerPtrOutputWithContext(context.Context) TemplateClusterMarkerPtrOutput
}

type templateClusterMarkerPtrType TemplateClusterMarkerArgs

func TemplateClusterMarkerPtr(v *TemplateClusterMarkerArgs) TemplateClusterMarkerPtrInput {
	return (*templateClusterMarkerPtrType)(v)
}

func (*templateClusterMarkerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateClusterMarker)(nil)).Elem()
}

func (i *templateClusterMarkerPtrType) ToTemplateClusterMarkerPtrOutput() TemplateClusterMarkerPtrOutput {
	return i.ToTemplateClusterMarkerPtrOutputWithContext(context.Background())
}

func (i *templateClusterMarkerPtrType) ToTemplateClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateClusterMarkerPtrOutput)
}

type TemplateClusterMarkerOutput struct{ *pulumi.OutputState }

func (TemplateClusterMarkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateClusterMarker)(nil)).Elem()
}

func (o TemplateClusterMarkerOutput) ToTemplateClusterMarkerOutput() TemplateClusterMarkerOutput {
	return o
}

func (o TemplateClusterMarkerOutput) ToTemplateClusterMarkerOutputWithContext(ctx context.Context) TemplateClusterMarkerOutput {
	return o
}

func (o TemplateClusterMarkerOutput) ToTemplateClusterMarkerPtrOutput() TemplateClusterMarkerPtrOutput {
	return o.ToTemplateClusterMarkerPtrOutputWithContext(context.Background())
}

func (o TemplateClusterMarkerOutput) ToTemplateClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateClusterMarker) *TemplateClusterMarker {
		return &v
	}).(TemplateClusterMarkerPtrOutput)
}

// The simple cluster marker of the cluster marker.
func (o TemplateClusterMarkerOutput) SimpleClusterMarker() TemplateSimpleClusterMarkerPtrOutput {
	return o.ApplyT(func(v TemplateClusterMarker) *TemplateSimpleClusterMarker { return v.SimpleClusterMarker }).(TemplateSimpleClusterMarkerPtrOutput)
}

type TemplateClusterMarkerPtrOutput struct{ *pulumi.OutputState }

func (TemplateClusterMarkerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateClusterMarker)(nil)).Elem()
}

func (o TemplateClusterMarkerPtrOutput) ToTemplateClusterMarkerPtrOutput() TemplateClusterMarkerPtrOutput {
	return o
}

func (o TemplateClusterMarkerPtrOutput) ToTemplateClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerPtrOutput {
	return o
}

func (o TemplateClusterMarkerPtrOutput) Elem() TemplateClusterMarkerOutput {
	return o.ApplyT(func(v *TemplateClusterMarker) TemplateClusterMarker {
		if v != nil {
			return *v
		}
		var ret TemplateClusterMarker
		return ret
	}).(TemplateClusterMarkerOutput)
}

// The simple cluster marker of the cluster marker.
func (o TemplateClusterMarkerPtrOutput) SimpleClusterMarker() TemplateSimpleClusterMarkerPtrOutput {
	return o.ApplyT(func(v *TemplateClusterMarker) *TemplateSimpleClusterMarker {
		if v == nil {
			return nil
		}
		return v.SimpleClusterMarker
	}).(TemplateSimpleClusterMarkerPtrOutput)
}

type TemplateClusterMarkerConfiguration struct {
	// The cluster marker that is a part of the cluster marker configuration.
	ClusterMarker *TemplateClusterMarker `pulumi:"clusterMarker"`
}

// TemplateClusterMarkerConfigurationInput is an input type that accepts TemplateClusterMarkerConfigurationArgs and TemplateClusterMarkerConfigurationOutput values.
// You can construct a concrete instance of `TemplateClusterMarkerConfigurationInput` via:
//
//	TemplateClusterMarkerConfigurationArgs{...}
type TemplateClusterMarkerConfigurationInput interface {
	pulumi.Input

	ToTemplateClusterMarkerConfigurationOutput() TemplateClusterMarkerConfigurationOutput
	ToTemplateClusterMarkerConfigurationOutputWithContext(context.Context) TemplateClusterMarkerConfigurationOutput
}

type TemplateClusterMarkerConfigurationArgs struct {
	// The cluster marker that is a part of the cluster marker configuration.
	ClusterMarker TemplateClusterMarkerPtrInput `pulumi:"clusterMarker"`
}

func (TemplateClusterMarkerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateClusterMarkerConfiguration)(nil)).Elem()
}

func (i TemplateClusterMarkerConfigurationArgs) ToTemplateClusterMarkerConfigurationOutput() TemplateClusterMarkerConfigurationOutput {
	return i.ToTemplateClusterMarkerConfigurationOutputWithContext(context.Background())
}

func (i TemplateClusterMarkerConfigurationArgs) ToTemplateClusterMarkerConfigurationOutputWithContext(ctx context.Context) TemplateClusterMarkerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateClusterMarkerConfigurationOutput)
}

func (i TemplateClusterMarkerConfigurationArgs) ToTemplateClusterMarkerConfigurationPtrOutput() TemplateClusterMarkerConfigurationPtrOutput {
	return i.ToTemplateClusterMarkerConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateClusterMarkerConfigurationArgs) ToTemplateClusterMarkerConfigurationPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateClusterMarkerConfigurationOutput).ToTemplateClusterMarkerConfigurationPtrOutputWithContext(ctx)
}

// TemplateClusterMarkerConfigurationPtrInput is an input type that accepts TemplateClusterMarkerConfigurationArgs, TemplateClusterMarkerConfigurationPtr and TemplateClusterMarkerConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateClusterMarkerConfigurationPtrInput` via:
//
//	        TemplateClusterMarkerConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateClusterMarkerConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateClusterMarkerConfigurationPtrOutput() TemplateClusterMarkerConfigurationPtrOutput
	ToTemplateClusterMarkerConfigurationPtrOutputWithContext(context.Context) TemplateClusterMarkerConfigurationPtrOutput
}

type templateClusterMarkerConfigurationPtrType TemplateClusterMarkerConfigurationArgs

func TemplateClusterMarkerConfigurationPtr(v *TemplateClusterMarkerConfigurationArgs) TemplateClusterMarkerConfigurationPtrInput {
	return (*templateClusterMarkerConfigurationPtrType)(v)
}

func (*templateClusterMarkerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateClusterMarkerConfiguration)(nil)).Elem()
}

func (i *templateClusterMarkerConfigurationPtrType) ToTemplateClusterMarkerConfigurationPtrOutput() TemplateClusterMarkerConfigurationPtrOutput {
	return i.ToTemplateClusterMarkerConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateClusterMarkerConfigurationPtrType) ToTemplateClusterMarkerConfigurationPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateClusterMarkerConfigurationPtrOutput)
}

type TemplateClusterMarkerConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateClusterMarkerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateClusterMarkerConfiguration)(nil)).Elem()
}

func (o TemplateClusterMarkerConfigurationOutput) ToTemplateClusterMarkerConfigurationOutput() TemplateClusterMarkerConfigurationOutput {
	return o
}

func (o TemplateClusterMarkerConfigurationOutput) ToTemplateClusterMarkerConfigurationOutputWithContext(ctx context.Context) TemplateClusterMarkerConfigurationOutput {
	return o
}

func (o TemplateClusterMarkerConfigurationOutput) ToTemplateClusterMarkerConfigurationPtrOutput() TemplateClusterMarkerConfigurationPtrOutput {
	return o.ToTemplateClusterMarkerConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateClusterMarkerConfigurationOutput) ToTemplateClusterMarkerConfigurationPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateClusterMarkerConfiguration) *TemplateClusterMarkerConfiguration {
		return &v
	}).(TemplateClusterMarkerConfigurationPtrOutput)
}

// The cluster marker that is a part of the cluster marker configuration.
func (o TemplateClusterMarkerConfigurationOutput) ClusterMarker() TemplateClusterMarkerPtrOutput {
	return o.ApplyT(func(v TemplateClusterMarkerConfiguration) *TemplateClusterMarker { return v.ClusterMarker }).(TemplateClusterMarkerPtrOutput)
}

type TemplateClusterMarkerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateClusterMarkerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateClusterMarkerConfiguration)(nil)).Elem()
}

func (o TemplateClusterMarkerConfigurationPtrOutput) ToTemplateClusterMarkerConfigurationPtrOutput() TemplateClusterMarkerConfigurationPtrOutput {
	return o
}

func (o TemplateClusterMarkerConfigurationPtrOutput) ToTemplateClusterMarkerConfigurationPtrOutputWithContext(ctx context.Context) TemplateClusterMarkerConfigurationPtrOutput {
	return o
}

func (o TemplateClusterMarkerConfigurationPtrOutput) Elem() TemplateClusterMarkerConfigurationOutput {
	return o.ApplyT(func(v *TemplateClusterMarkerConfiguration) TemplateClusterMarkerConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateClusterMarkerConfiguration
		return ret
	}).(TemplateClusterMarkerConfigurationOutput)
}

// The cluster marker that is a part of the cluster marker configuration.
func (o TemplateClusterMarkerConfigurationPtrOutput) ClusterMarker() TemplateClusterMarkerPtrOutput {
	return o.ApplyT(func(v *TemplateClusterMarkerConfiguration) *TemplateClusterMarker {
		if v == nil {
			return nil
		}
		return v.ClusterMarker
	}).(TemplateClusterMarkerPtrOutput)
}

type TemplateColorScale struct {
	// Determines the color fill type.
	ColorFillType TemplateColorFillType `pulumi:"colorFillType"`
	// Determines the list of colors that are applied to the visual.
	Colors []TemplateDataColor `pulumi:"colors"`
	// Determines the color that is applied to null values.
	NullValueColor *TemplateDataColor `pulumi:"nullValueColor"`
}

// TemplateColorScaleInput is an input type that accepts TemplateColorScaleArgs and TemplateColorScaleOutput values.
// You can construct a concrete instance of `TemplateColorScaleInput` via:
//
//	TemplateColorScaleArgs{...}
type TemplateColorScaleInput interface {
	pulumi.Input

	ToTemplateColorScaleOutput() TemplateColorScaleOutput
	ToTemplateColorScaleOutputWithContext(context.Context) TemplateColorScaleOutput
}

type TemplateColorScaleArgs struct {
	// Determines the color fill type.
	ColorFillType TemplateColorFillTypeInput `pulumi:"colorFillType"`
	// Determines the list of colors that are applied to the visual.
	Colors TemplateDataColorArrayInput `pulumi:"colors"`
	// Determines the color that is applied to null values.
	NullValueColor TemplateDataColorPtrInput `pulumi:"nullValueColor"`
}

func (TemplateColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColorScale)(nil)).Elem()
}

func (i TemplateColorScaleArgs) ToTemplateColorScaleOutput() TemplateColorScaleOutput {
	return i.ToTemplateColorScaleOutputWithContext(context.Background())
}

func (i TemplateColorScaleArgs) ToTemplateColorScaleOutputWithContext(ctx context.Context) TemplateColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColorScaleOutput)
}

func (i TemplateColorScaleArgs) ToTemplateColorScalePtrOutput() TemplateColorScalePtrOutput {
	return i.ToTemplateColorScalePtrOutputWithContext(context.Background())
}

func (i TemplateColorScaleArgs) ToTemplateColorScalePtrOutputWithContext(ctx context.Context) TemplateColorScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColorScaleOutput).ToTemplateColorScalePtrOutputWithContext(ctx)
}

// TemplateColorScalePtrInput is an input type that accepts TemplateColorScaleArgs, TemplateColorScalePtr and TemplateColorScalePtrOutput values.
// You can construct a concrete instance of `TemplateColorScalePtrInput` via:
//
//	        TemplateColorScaleArgs{...}
//
//	or:
//
//	        nil
type TemplateColorScalePtrInput interface {
	pulumi.Input

	ToTemplateColorScalePtrOutput() TemplateColorScalePtrOutput
	ToTemplateColorScalePtrOutputWithContext(context.Context) TemplateColorScalePtrOutput
}

type templateColorScalePtrType TemplateColorScaleArgs

func TemplateColorScalePtr(v *TemplateColorScaleArgs) TemplateColorScalePtrInput {
	return (*templateColorScalePtrType)(v)
}

func (*templateColorScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColorScale)(nil)).Elem()
}

func (i *templateColorScalePtrType) ToTemplateColorScalePtrOutput() TemplateColorScalePtrOutput {
	return i.ToTemplateColorScalePtrOutputWithContext(context.Background())
}

func (i *templateColorScalePtrType) ToTemplateColorScalePtrOutputWithContext(ctx context.Context) TemplateColorScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColorScalePtrOutput)
}

type TemplateColorScaleOutput struct{ *pulumi.OutputState }

func (TemplateColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColorScale)(nil)).Elem()
}

func (o TemplateColorScaleOutput) ToTemplateColorScaleOutput() TemplateColorScaleOutput {
	return o
}

func (o TemplateColorScaleOutput) ToTemplateColorScaleOutputWithContext(ctx context.Context) TemplateColorScaleOutput {
	return o
}

func (o TemplateColorScaleOutput) ToTemplateColorScalePtrOutput() TemplateColorScalePtrOutput {
	return o.ToTemplateColorScalePtrOutputWithContext(context.Background())
}

func (o TemplateColorScaleOutput) ToTemplateColorScalePtrOutputWithContext(ctx context.Context) TemplateColorScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateColorScale) *TemplateColorScale {
		return &v
	}).(TemplateColorScalePtrOutput)
}

// Determines the color fill type.
func (o TemplateColorScaleOutput) ColorFillType() TemplateColorFillTypeOutput {
	return o.ApplyT(func(v TemplateColorScale) TemplateColorFillType { return v.ColorFillType }).(TemplateColorFillTypeOutput)
}

// Determines the list of colors that are applied to the visual.
func (o TemplateColorScaleOutput) Colors() TemplateDataColorArrayOutput {
	return o.ApplyT(func(v TemplateColorScale) []TemplateDataColor { return v.Colors }).(TemplateDataColorArrayOutput)
}

// Determines the color that is applied to null values.
func (o TemplateColorScaleOutput) NullValueColor() TemplateDataColorPtrOutput {
	return o.ApplyT(func(v TemplateColorScale) *TemplateDataColor { return v.NullValueColor }).(TemplateDataColorPtrOutput)
}

type TemplateColorScalePtrOutput struct{ *pulumi.OutputState }

func (TemplateColorScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColorScale)(nil)).Elem()
}

func (o TemplateColorScalePtrOutput) ToTemplateColorScalePtrOutput() TemplateColorScalePtrOutput {
	return o
}

func (o TemplateColorScalePtrOutput) ToTemplateColorScalePtrOutputWithContext(ctx context.Context) TemplateColorScalePtrOutput {
	return o
}

func (o TemplateColorScalePtrOutput) Elem() TemplateColorScaleOutput {
	return o.ApplyT(func(v *TemplateColorScale) TemplateColorScale {
		if v != nil {
			return *v
		}
		var ret TemplateColorScale
		return ret
	}).(TemplateColorScaleOutput)
}

// Determines the color fill type.
func (o TemplateColorScalePtrOutput) ColorFillType() TemplateColorFillTypePtrOutput {
	return o.ApplyT(func(v *TemplateColorScale) *TemplateColorFillType {
		if v == nil {
			return nil
		}
		return &v.ColorFillType
	}).(TemplateColorFillTypePtrOutput)
}

// Determines the list of colors that are applied to the visual.
func (o TemplateColorScalePtrOutput) Colors() TemplateDataColorArrayOutput {
	return o.ApplyT(func(v *TemplateColorScale) []TemplateDataColor {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateDataColorArrayOutput)
}

// Determines the color that is applied to null values.
func (o TemplateColorScalePtrOutput) NullValueColor() TemplateDataColorPtrOutput {
	return o.ApplyT(func(v *TemplateColorScale) *TemplateDataColor {
		if v == nil {
			return nil
		}
		return v.NullValueColor
	}).(TemplateDataColorPtrOutput)
}

type TemplateColorsConfiguration struct {
	// A list of up to 50 custom colors.
	CustomColors []TemplateCustomColor `pulumi:"customColors"`
}

// TemplateColorsConfigurationInput is an input type that accepts TemplateColorsConfigurationArgs and TemplateColorsConfigurationOutput values.
// You can construct a concrete instance of `TemplateColorsConfigurationInput` via:
//
//	TemplateColorsConfigurationArgs{...}
type TemplateColorsConfigurationInput interface {
	pulumi.Input

	ToTemplateColorsConfigurationOutput() TemplateColorsConfigurationOutput
	ToTemplateColorsConfigurationOutputWithContext(context.Context) TemplateColorsConfigurationOutput
}

type TemplateColorsConfigurationArgs struct {
	// A list of up to 50 custom colors.
	CustomColors TemplateCustomColorArrayInput `pulumi:"customColors"`
}

func (TemplateColorsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColorsConfiguration)(nil)).Elem()
}

func (i TemplateColorsConfigurationArgs) ToTemplateColorsConfigurationOutput() TemplateColorsConfigurationOutput {
	return i.ToTemplateColorsConfigurationOutputWithContext(context.Background())
}

func (i TemplateColorsConfigurationArgs) ToTemplateColorsConfigurationOutputWithContext(ctx context.Context) TemplateColorsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColorsConfigurationOutput)
}

func (i TemplateColorsConfigurationArgs) ToTemplateColorsConfigurationPtrOutput() TemplateColorsConfigurationPtrOutput {
	return i.ToTemplateColorsConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateColorsConfigurationArgs) ToTemplateColorsConfigurationPtrOutputWithContext(ctx context.Context) TemplateColorsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColorsConfigurationOutput).ToTemplateColorsConfigurationPtrOutputWithContext(ctx)
}

// TemplateColorsConfigurationPtrInput is an input type that accepts TemplateColorsConfigurationArgs, TemplateColorsConfigurationPtr and TemplateColorsConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateColorsConfigurationPtrInput` via:
//
//	        TemplateColorsConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateColorsConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateColorsConfigurationPtrOutput() TemplateColorsConfigurationPtrOutput
	ToTemplateColorsConfigurationPtrOutputWithContext(context.Context) TemplateColorsConfigurationPtrOutput
}

type templateColorsConfigurationPtrType TemplateColorsConfigurationArgs

func TemplateColorsConfigurationPtr(v *TemplateColorsConfigurationArgs) TemplateColorsConfigurationPtrInput {
	return (*templateColorsConfigurationPtrType)(v)
}

func (*templateColorsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColorsConfiguration)(nil)).Elem()
}

func (i *templateColorsConfigurationPtrType) ToTemplateColorsConfigurationPtrOutput() TemplateColorsConfigurationPtrOutput {
	return i.ToTemplateColorsConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateColorsConfigurationPtrType) ToTemplateColorsConfigurationPtrOutputWithContext(ctx context.Context) TemplateColorsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColorsConfigurationPtrOutput)
}

type TemplateColorsConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateColorsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColorsConfiguration)(nil)).Elem()
}

func (o TemplateColorsConfigurationOutput) ToTemplateColorsConfigurationOutput() TemplateColorsConfigurationOutput {
	return o
}

func (o TemplateColorsConfigurationOutput) ToTemplateColorsConfigurationOutputWithContext(ctx context.Context) TemplateColorsConfigurationOutput {
	return o
}

func (o TemplateColorsConfigurationOutput) ToTemplateColorsConfigurationPtrOutput() TemplateColorsConfigurationPtrOutput {
	return o.ToTemplateColorsConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateColorsConfigurationOutput) ToTemplateColorsConfigurationPtrOutputWithContext(ctx context.Context) TemplateColorsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateColorsConfiguration) *TemplateColorsConfiguration {
		return &v
	}).(TemplateColorsConfigurationPtrOutput)
}

// A list of up to 50 custom colors.
func (o TemplateColorsConfigurationOutput) CustomColors() TemplateCustomColorArrayOutput {
	return o.ApplyT(func(v TemplateColorsConfiguration) []TemplateCustomColor { return v.CustomColors }).(TemplateCustomColorArrayOutput)
}

type TemplateColorsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateColorsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColorsConfiguration)(nil)).Elem()
}

func (o TemplateColorsConfigurationPtrOutput) ToTemplateColorsConfigurationPtrOutput() TemplateColorsConfigurationPtrOutput {
	return o
}

func (o TemplateColorsConfigurationPtrOutput) ToTemplateColorsConfigurationPtrOutputWithContext(ctx context.Context) TemplateColorsConfigurationPtrOutput {
	return o
}

func (o TemplateColorsConfigurationPtrOutput) Elem() TemplateColorsConfigurationOutput {
	return o.ApplyT(func(v *TemplateColorsConfiguration) TemplateColorsConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateColorsConfiguration
		return ret
	}).(TemplateColorsConfigurationOutput)
}

// A list of up to 50 custom colors.
func (o TemplateColorsConfigurationPtrOutput) CustomColors() TemplateCustomColorArrayOutput {
	return o.ApplyT(func(v *TemplateColorsConfiguration) []TemplateCustomColor {
		if v == nil {
			return nil
		}
		return v.CustomColors
	}).(TemplateCustomColorArrayOutput)
}

type TemplateColumnConfiguration struct {
	// The color configurations of the column.
	ColorsConfiguration *TemplateColorsConfiguration `pulumi:"colorsConfiguration"`
	// The column.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The format configuration of a column.
	FormatConfiguration *TemplateFormatConfiguration `pulumi:"formatConfiguration"`
	// The role of the column.
	Role *TemplateColumnRole `pulumi:"role"`
}

// TemplateColumnConfigurationInput is an input type that accepts TemplateColumnConfigurationArgs and TemplateColumnConfigurationOutput values.
// You can construct a concrete instance of `TemplateColumnConfigurationInput` via:
//
//	TemplateColumnConfigurationArgs{...}
type TemplateColumnConfigurationInput interface {
	pulumi.Input

	ToTemplateColumnConfigurationOutput() TemplateColumnConfigurationOutput
	ToTemplateColumnConfigurationOutputWithContext(context.Context) TemplateColumnConfigurationOutput
}

type TemplateColumnConfigurationArgs struct {
	// The color configurations of the column.
	ColorsConfiguration TemplateColorsConfigurationPtrInput `pulumi:"colorsConfiguration"`
	// The column.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The format configuration of a column.
	FormatConfiguration TemplateFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
	// The role of the column.
	Role TemplateColumnRolePtrInput `pulumi:"role"`
}

func (TemplateColumnConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnConfiguration)(nil)).Elem()
}

func (i TemplateColumnConfigurationArgs) ToTemplateColumnConfigurationOutput() TemplateColumnConfigurationOutput {
	return i.ToTemplateColumnConfigurationOutputWithContext(context.Background())
}

func (i TemplateColumnConfigurationArgs) ToTemplateColumnConfigurationOutputWithContext(ctx context.Context) TemplateColumnConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnConfigurationOutput)
}

// TemplateColumnConfigurationArrayInput is an input type that accepts TemplateColumnConfigurationArray and TemplateColumnConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateColumnConfigurationArrayInput` via:
//
//	TemplateColumnConfigurationArray{ TemplateColumnConfigurationArgs{...} }
type TemplateColumnConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateColumnConfigurationArrayOutput() TemplateColumnConfigurationArrayOutput
	ToTemplateColumnConfigurationArrayOutputWithContext(context.Context) TemplateColumnConfigurationArrayOutput
}

type TemplateColumnConfigurationArray []TemplateColumnConfigurationInput

func (TemplateColumnConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnConfiguration)(nil)).Elem()
}

func (i TemplateColumnConfigurationArray) ToTemplateColumnConfigurationArrayOutput() TemplateColumnConfigurationArrayOutput {
	return i.ToTemplateColumnConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateColumnConfigurationArray) ToTemplateColumnConfigurationArrayOutputWithContext(ctx context.Context) TemplateColumnConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnConfigurationArrayOutput)
}

type TemplateColumnConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateColumnConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnConfiguration)(nil)).Elem()
}

func (o TemplateColumnConfigurationOutput) ToTemplateColumnConfigurationOutput() TemplateColumnConfigurationOutput {
	return o
}

func (o TemplateColumnConfigurationOutput) ToTemplateColumnConfigurationOutputWithContext(ctx context.Context) TemplateColumnConfigurationOutput {
	return o
}

// The color configurations of the column.
func (o TemplateColumnConfigurationOutput) ColorsConfiguration() TemplateColorsConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateColumnConfiguration) *TemplateColorsConfiguration { return v.ColorsConfiguration }).(TemplateColorsConfigurationPtrOutput)
}

// The column.
func (o TemplateColumnConfigurationOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateColumnConfiguration) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The format configuration of a column.
func (o TemplateColumnConfigurationOutput) FormatConfiguration() TemplateFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateColumnConfiguration) *TemplateFormatConfiguration { return v.FormatConfiguration }).(TemplateFormatConfigurationPtrOutput)
}

// The role of the column.
func (o TemplateColumnConfigurationOutput) Role() TemplateColumnRolePtrOutput {
	return o.ApplyT(func(v TemplateColumnConfiguration) *TemplateColumnRole { return v.Role }).(TemplateColumnRolePtrOutput)
}

type TemplateColumnConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnConfiguration)(nil)).Elem()
}

func (o TemplateColumnConfigurationArrayOutput) ToTemplateColumnConfigurationArrayOutput() TemplateColumnConfigurationArrayOutput {
	return o
}

func (o TemplateColumnConfigurationArrayOutput) ToTemplateColumnConfigurationArrayOutputWithContext(ctx context.Context) TemplateColumnConfigurationArrayOutput {
	return o
}

func (o TemplateColumnConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateColumnConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnConfiguration {
		return vs[0].([]TemplateColumnConfiguration)[vs[1].(int)]
	}).(TemplateColumnConfigurationOutput)
}

// <p>A structure describing the name, data type, and geographic role of the columns.</p>
type TemplateColumnGroupColumnSchema struct {
	// <p>The name of the column group's column schema.</p>
	Name *string `pulumi:"name"`
}

// TemplateColumnGroupColumnSchemaInput is an input type that accepts TemplateColumnGroupColumnSchemaArgs and TemplateColumnGroupColumnSchemaOutput values.
// You can construct a concrete instance of `TemplateColumnGroupColumnSchemaInput` via:
//
//	TemplateColumnGroupColumnSchemaArgs{...}
type TemplateColumnGroupColumnSchemaInput interface {
	pulumi.Input

	ToTemplateColumnGroupColumnSchemaOutput() TemplateColumnGroupColumnSchemaOutput
	ToTemplateColumnGroupColumnSchemaOutputWithContext(context.Context) TemplateColumnGroupColumnSchemaOutput
}

// <p>A structure describing the name, data type, and geographic role of the columns.</p>
type TemplateColumnGroupColumnSchemaArgs struct {
	// <p>The name of the column group's column schema.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateColumnGroupColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (i TemplateColumnGroupColumnSchemaArgs) ToTemplateColumnGroupColumnSchemaOutput() TemplateColumnGroupColumnSchemaOutput {
	return i.ToTemplateColumnGroupColumnSchemaOutputWithContext(context.Background())
}

func (i TemplateColumnGroupColumnSchemaArgs) ToTemplateColumnGroupColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupColumnSchemaOutput)
}

// TemplateColumnGroupColumnSchemaArrayInput is an input type that accepts TemplateColumnGroupColumnSchemaArray and TemplateColumnGroupColumnSchemaArrayOutput values.
// You can construct a concrete instance of `TemplateColumnGroupColumnSchemaArrayInput` via:
//
//	TemplateColumnGroupColumnSchemaArray{ TemplateColumnGroupColumnSchemaArgs{...} }
type TemplateColumnGroupColumnSchemaArrayInput interface {
	pulumi.Input

	ToTemplateColumnGroupColumnSchemaArrayOutput() TemplateColumnGroupColumnSchemaArrayOutput
	ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(context.Context) TemplateColumnGroupColumnSchemaArrayOutput
}

type TemplateColumnGroupColumnSchemaArray []TemplateColumnGroupColumnSchemaInput

func (TemplateColumnGroupColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (i TemplateColumnGroupColumnSchemaArray) ToTemplateColumnGroupColumnSchemaArrayOutput() TemplateColumnGroupColumnSchemaArrayOutput {
	return i.ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(context.Background())
}

func (i TemplateColumnGroupColumnSchemaArray) ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupColumnSchemaArrayOutput)
}

// <p>A structure describing the name, data type, and geographic role of the columns.</p>
type TemplateColumnGroupColumnSchemaOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (o TemplateColumnGroupColumnSchemaOutput) ToTemplateColumnGroupColumnSchemaOutput() TemplateColumnGroupColumnSchemaOutput {
	return o
}

func (o TemplateColumnGroupColumnSchemaOutput) ToTemplateColumnGroupColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaOutput {
	return o
}

// <p>The name of the column group's column schema.</p>
func (o TemplateColumnGroupColumnSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnGroupColumnSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateColumnGroupColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupColumnSchema)(nil)).Elem()
}

func (o TemplateColumnGroupColumnSchemaArrayOutput) ToTemplateColumnGroupColumnSchemaArrayOutput() TemplateColumnGroupColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupColumnSchemaArrayOutput) ToTemplateColumnGroupColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupColumnSchemaArrayOutput) Index(i pulumi.IntInput) TemplateColumnGroupColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnGroupColumnSchema {
		return vs[0].([]TemplateColumnGroupColumnSchema)[vs[1].(int)]
	}).(TemplateColumnGroupColumnSchemaOutput)
}

// <p>The column group schema.</p>
type TemplateColumnGroupSchema struct {
	// <p>A structure containing the list of schemas for column group columns.</p>
	ColumnGroupColumnSchemaList []TemplateColumnGroupColumnSchema `pulumi:"columnGroupColumnSchemaList"`
	// <p>The name of the column group schema.</p>
	Name *string `pulumi:"name"`
}

// TemplateColumnGroupSchemaInput is an input type that accepts TemplateColumnGroupSchemaArgs and TemplateColumnGroupSchemaOutput values.
// You can construct a concrete instance of `TemplateColumnGroupSchemaInput` via:
//
//	TemplateColumnGroupSchemaArgs{...}
type TemplateColumnGroupSchemaInput interface {
	pulumi.Input

	ToTemplateColumnGroupSchemaOutput() TemplateColumnGroupSchemaOutput
	ToTemplateColumnGroupSchemaOutputWithContext(context.Context) TemplateColumnGroupSchemaOutput
}

// <p>The column group schema.</p>
type TemplateColumnGroupSchemaArgs struct {
	// <p>A structure containing the list of schemas for column group columns.</p>
	ColumnGroupColumnSchemaList TemplateColumnGroupColumnSchemaArrayInput `pulumi:"columnGroupColumnSchemaList"`
	// <p>The name of the column group schema.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateColumnGroupSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupSchema)(nil)).Elem()
}

func (i TemplateColumnGroupSchemaArgs) ToTemplateColumnGroupSchemaOutput() TemplateColumnGroupSchemaOutput {
	return i.ToTemplateColumnGroupSchemaOutputWithContext(context.Background())
}

func (i TemplateColumnGroupSchemaArgs) ToTemplateColumnGroupSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupSchemaOutput)
}

// TemplateColumnGroupSchemaArrayInput is an input type that accepts TemplateColumnGroupSchemaArray and TemplateColumnGroupSchemaArrayOutput values.
// You can construct a concrete instance of `TemplateColumnGroupSchemaArrayInput` via:
//
//	TemplateColumnGroupSchemaArray{ TemplateColumnGroupSchemaArgs{...} }
type TemplateColumnGroupSchemaArrayInput interface {
	pulumi.Input

	ToTemplateColumnGroupSchemaArrayOutput() TemplateColumnGroupSchemaArrayOutput
	ToTemplateColumnGroupSchemaArrayOutputWithContext(context.Context) TemplateColumnGroupSchemaArrayOutput
}

type TemplateColumnGroupSchemaArray []TemplateColumnGroupSchemaInput

func (TemplateColumnGroupSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupSchema)(nil)).Elem()
}

func (i TemplateColumnGroupSchemaArray) ToTemplateColumnGroupSchemaArrayOutput() TemplateColumnGroupSchemaArrayOutput {
	return i.ToTemplateColumnGroupSchemaArrayOutputWithContext(context.Background())
}

func (i TemplateColumnGroupSchemaArray) ToTemplateColumnGroupSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnGroupSchemaArrayOutput)
}

// <p>The column group schema.</p>
type TemplateColumnGroupSchemaOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnGroupSchema)(nil)).Elem()
}

func (o TemplateColumnGroupSchemaOutput) ToTemplateColumnGroupSchemaOutput() TemplateColumnGroupSchemaOutput {
	return o
}

func (o TemplateColumnGroupSchemaOutput) ToTemplateColumnGroupSchemaOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaOutput {
	return o
}

// <p>A structure containing the list of schemas for column group columns.</p>
func (o TemplateColumnGroupSchemaOutput) ColumnGroupColumnSchemaList() TemplateColumnGroupColumnSchemaArrayOutput {
	return o.ApplyT(func(v TemplateColumnGroupSchema) []TemplateColumnGroupColumnSchema {
		return v.ColumnGroupColumnSchemaList
	}).(TemplateColumnGroupColumnSchemaArrayOutput)
}

// <p>The name of the column group schema.</p>
func (o TemplateColumnGroupSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnGroupSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateColumnGroupSchemaArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnGroupSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnGroupSchema)(nil)).Elem()
}

func (o TemplateColumnGroupSchemaArrayOutput) ToTemplateColumnGroupSchemaArrayOutput() TemplateColumnGroupSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupSchemaArrayOutput) ToTemplateColumnGroupSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnGroupSchemaArrayOutput {
	return o
}

func (o TemplateColumnGroupSchemaArrayOutput) Index(i pulumi.IntInput) TemplateColumnGroupSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnGroupSchema {
		return vs[0].([]TemplateColumnGroupSchema)[vs[1].(int)]
	}).(TemplateColumnGroupSchemaOutput)
}

type TemplateColumnHierarchy struct {
	// The option that determines the hierarchy of any `DateTime` fields.
	DateTimeHierarchy *TemplateDateTimeHierarchy `pulumi:"dateTimeHierarchy"`
	// The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals.
	ExplicitHierarchy *TemplateExplicitHierarchy `pulumi:"explicitHierarchy"`
	// The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source.
	PredefinedHierarchy *TemplatePredefinedHierarchy `pulumi:"predefinedHierarchy"`
}

// TemplateColumnHierarchyInput is an input type that accepts TemplateColumnHierarchyArgs and TemplateColumnHierarchyOutput values.
// You can construct a concrete instance of `TemplateColumnHierarchyInput` via:
//
//	TemplateColumnHierarchyArgs{...}
type TemplateColumnHierarchyInput interface {
	pulumi.Input

	ToTemplateColumnHierarchyOutput() TemplateColumnHierarchyOutput
	ToTemplateColumnHierarchyOutputWithContext(context.Context) TemplateColumnHierarchyOutput
}

type TemplateColumnHierarchyArgs struct {
	// The option that determines the hierarchy of any `DateTime` fields.
	DateTimeHierarchy TemplateDateTimeHierarchyPtrInput `pulumi:"dateTimeHierarchy"`
	// The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals.
	ExplicitHierarchy TemplateExplicitHierarchyPtrInput `pulumi:"explicitHierarchy"`
	// The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source.
	PredefinedHierarchy TemplatePredefinedHierarchyPtrInput `pulumi:"predefinedHierarchy"`
}

func (TemplateColumnHierarchyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnHierarchy)(nil)).Elem()
}

func (i TemplateColumnHierarchyArgs) ToTemplateColumnHierarchyOutput() TemplateColumnHierarchyOutput {
	return i.ToTemplateColumnHierarchyOutputWithContext(context.Background())
}

func (i TemplateColumnHierarchyArgs) ToTemplateColumnHierarchyOutputWithContext(ctx context.Context) TemplateColumnHierarchyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnHierarchyOutput)
}

// TemplateColumnHierarchyArrayInput is an input type that accepts TemplateColumnHierarchyArray and TemplateColumnHierarchyArrayOutput values.
// You can construct a concrete instance of `TemplateColumnHierarchyArrayInput` via:
//
//	TemplateColumnHierarchyArray{ TemplateColumnHierarchyArgs{...} }
type TemplateColumnHierarchyArrayInput interface {
	pulumi.Input

	ToTemplateColumnHierarchyArrayOutput() TemplateColumnHierarchyArrayOutput
	ToTemplateColumnHierarchyArrayOutputWithContext(context.Context) TemplateColumnHierarchyArrayOutput
}

type TemplateColumnHierarchyArray []TemplateColumnHierarchyInput

func (TemplateColumnHierarchyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnHierarchy)(nil)).Elem()
}

func (i TemplateColumnHierarchyArray) ToTemplateColumnHierarchyArrayOutput() TemplateColumnHierarchyArrayOutput {
	return i.ToTemplateColumnHierarchyArrayOutputWithContext(context.Background())
}

func (i TemplateColumnHierarchyArray) ToTemplateColumnHierarchyArrayOutputWithContext(ctx context.Context) TemplateColumnHierarchyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnHierarchyArrayOutput)
}

type TemplateColumnHierarchyOutput struct{ *pulumi.OutputState }

func (TemplateColumnHierarchyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnHierarchy)(nil)).Elem()
}

func (o TemplateColumnHierarchyOutput) ToTemplateColumnHierarchyOutput() TemplateColumnHierarchyOutput {
	return o
}

func (o TemplateColumnHierarchyOutput) ToTemplateColumnHierarchyOutputWithContext(ctx context.Context) TemplateColumnHierarchyOutput {
	return o
}

// The option that determines the hierarchy of any `DateTime` fields.
func (o TemplateColumnHierarchyOutput) DateTimeHierarchy() TemplateDateTimeHierarchyPtrOutput {
	return o.ApplyT(func(v TemplateColumnHierarchy) *TemplateDateTimeHierarchy { return v.DateTimeHierarchy }).(TemplateDateTimeHierarchyPtrOutput)
}

// The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals.
func (o TemplateColumnHierarchyOutput) ExplicitHierarchy() TemplateExplicitHierarchyPtrOutput {
	return o.ApplyT(func(v TemplateColumnHierarchy) *TemplateExplicitHierarchy { return v.ExplicitHierarchy }).(TemplateExplicitHierarchyPtrOutput)
}

// The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source.
func (o TemplateColumnHierarchyOutput) PredefinedHierarchy() TemplatePredefinedHierarchyPtrOutput {
	return o.ApplyT(func(v TemplateColumnHierarchy) *TemplatePredefinedHierarchy { return v.PredefinedHierarchy }).(TemplatePredefinedHierarchyPtrOutput)
}

type TemplateColumnHierarchyArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnHierarchyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnHierarchy)(nil)).Elem()
}

func (o TemplateColumnHierarchyArrayOutput) ToTemplateColumnHierarchyArrayOutput() TemplateColumnHierarchyArrayOutput {
	return o
}

func (o TemplateColumnHierarchyArrayOutput) ToTemplateColumnHierarchyArrayOutputWithContext(ctx context.Context) TemplateColumnHierarchyArrayOutput {
	return o
}

func (o TemplateColumnHierarchyArrayOutput) Index(i pulumi.IntInput) TemplateColumnHierarchyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnHierarchy {
		return vs[0].([]TemplateColumnHierarchy)[vs[1].(int)]
	}).(TemplateColumnHierarchyOutput)
}

type TemplateColumnIdentifier struct {
	// The name of the column.
	ColumnName string `pulumi:"columnName"`
	// The data set that the column belongs to.
	DataSetIdentifier string `pulumi:"dataSetIdentifier"`
}

// TemplateColumnIdentifierInput is an input type that accepts TemplateColumnIdentifierArgs and TemplateColumnIdentifierOutput values.
// You can construct a concrete instance of `TemplateColumnIdentifierInput` via:
//
//	TemplateColumnIdentifierArgs{...}
type TemplateColumnIdentifierInput interface {
	pulumi.Input

	ToTemplateColumnIdentifierOutput() TemplateColumnIdentifierOutput
	ToTemplateColumnIdentifierOutputWithContext(context.Context) TemplateColumnIdentifierOutput
}

type TemplateColumnIdentifierArgs struct {
	// The name of the column.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The data set that the column belongs to.
	DataSetIdentifier pulumi.StringInput `pulumi:"dataSetIdentifier"`
}

func (TemplateColumnIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnIdentifier)(nil)).Elem()
}

func (i TemplateColumnIdentifierArgs) ToTemplateColumnIdentifierOutput() TemplateColumnIdentifierOutput {
	return i.ToTemplateColumnIdentifierOutputWithContext(context.Background())
}

func (i TemplateColumnIdentifierArgs) ToTemplateColumnIdentifierOutputWithContext(ctx context.Context) TemplateColumnIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnIdentifierOutput)
}

func (i TemplateColumnIdentifierArgs) ToTemplateColumnIdentifierPtrOutput() TemplateColumnIdentifierPtrOutput {
	return i.ToTemplateColumnIdentifierPtrOutputWithContext(context.Background())
}

func (i TemplateColumnIdentifierArgs) ToTemplateColumnIdentifierPtrOutputWithContext(ctx context.Context) TemplateColumnIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnIdentifierOutput).ToTemplateColumnIdentifierPtrOutputWithContext(ctx)
}

// TemplateColumnIdentifierPtrInput is an input type that accepts TemplateColumnIdentifierArgs, TemplateColumnIdentifierPtr and TemplateColumnIdentifierPtrOutput values.
// You can construct a concrete instance of `TemplateColumnIdentifierPtrInput` via:
//
//	        TemplateColumnIdentifierArgs{...}
//
//	or:
//
//	        nil
type TemplateColumnIdentifierPtrInput interface {
	pulumi.Input

	ToTemplateColumnIdentifierPtrOutput() TemplateColumnIdentifierPtrOutput
	ToTemplateColumnIdentifierPtrOutputWithContext(context.Context) TemplateColumnIdentifierPtrOutput
}

type templateColumnIdentifierPtrType TemplateColumnIdentifierArgs

func TemplateColumnIdentifierPtr(v *TemplateColumnIdentifierArgs) TemplateColumnIdentifierPtrInput {
	return (*templateColumnIdentifierPtrType)(v)
}

func (*templateColumnIdentifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColumnIdentifier)(nil)).Elem()
}

func (i *templateColumnIdentifierPtrType) ToTemplateColumnIdentifierPtrOutput() TemplateColumnIdentifierPtrOutput {
	return i.ToTemplateColumnIdentifierPtrOutputWithContext(context.Background())
}

func (i *templateColumnIdentifierPtrType) ToTemplateColumnIdentifierPtrOutputWithContext(ctx context.Context) TemplateColumnIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnIdentifierPtrOutput)
}

// TemplateColumnIdentifierArrayInput is an input type that accepts TemplateColumnIdentifierArray and TemplateColumnIdentifierArrayOutput values.
// You can construct a concrete instance of `TemplateColumnIdentifierArrayInput` via:
//
//	TemplateColumnIdentifierArray{ TemplateColumnIdentifierArgs{...} }
type TemplateColumnIdentifierArrayInput interface {
	pulumi.Input

	ToTemplateColumnIdentifierArrayOutput() TemplateColumnIdentifierArrayOutput
	ToTemplateColumnIdentifierArrayOutputWithContext(context.Context) TemplateColumnIdentifierArrayOutput
}

type TemplateColumnIdentifierArray []TemplateColumnIdentifierInput

func (TemplateColumnIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnIdentifier)(nil)).Elem()
}

func (i TemplateColumnIdentifierArray) ToTemplateColumnIdentifierArrayOutput() TemplateColumnIdentifierArrayOutput {
	return i.ToTemplateColumnIdentifierArrayOutputWithContext(context.Background())
}

func (i TemplateColumnIdentifierArray) ToTemplateColumnIdentifierArrayOutputWithContext(ctx context.Context) TemplateColumnIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnIdentifierArrayOutput)
}

type TemplateColumnIdentifierOutput struct{ *pulumi.OutputState }

func (TemplateColumnIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnIdentifier)(nil)).Elem()
}

func (o TemplateColumnIdentifierOutput) ToTemplateColumnIdentifierOutput() TemplateColumnIdentifierOutput {
	return o
}

func (o TemplateColumnIdentifierOutput) ToTemplateColumnIdentifierOutputWithContext(ctx context.Context) TemplateColumnIdentifierOutput {
	return o
}

func (o TemplateColumnIdentifierOutput) ToTemplateColumnIdentifierPtrOutput() TemplateColumnIdentifierPtrOutput {
	return o.ToTemplateColumnIdentifierPtrOutputWithContext(context.Background())
}

func (o TemplateColumnIdentifierOutput) ToTemplateColumnIdentifierPtrOutputWithContext(ctx context.Context) TemplateColumnIdentifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateColumnIdentifier) *TemplateColumnIdentifier {
		return &v
	}).(TemplateColumnIdentifierPtrOutput)
}

// The name of the column.
func (o TemplateColumnIdentifierOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateColumnIdentifier) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The data set that the column belongs to.
func (o TemplateColumnIdentifierOutput) DataSetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateColumnIdentifier) string { return v.DataSetIdentifier }).(pulumi.StringOutput)
}

type TemplateColumnIdentifierPtrOutput struct{ *pulumi.OutputState }

func (TemplateColumnIdentifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColumnIdentifier)(nil)).Elem()
}

func (o TemplateColumnIdentifierPtrOutput) ToTemplateColumnIdentifierPtrOutput() TemplateColumnIdentifierPtrOutput {
	return o
}

func (o TemplateColumnIdentifierPtrOutput) ToTemplateColumnIdentifierPtrOutputWithContext(ctx context.Context) TemplateColumnIdentifierPtrOutput {
	return o
}

func (o TemplateColumnIdentifierPtrOutput) Elem() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v *TemplateColumnIdentifier) TemplateColumnIdentifier {
		if v != nil {
			return *v
		}
		var ret TemplateColumnIdentifier
		return ret
	}).(TemplateColumnIdentifierOutput)
}

// The name of the column.
func (o TemplateColumnIdentifierPtrOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateColumnIdentifier) *string {
		if v == nil {
			return nil
		}
		return &v.ColumnName
	}).(pulumi.StringPtrOutput)
}

// The data set that the column belongs to.
func (o TemplateColumnIdentifierPtrOutput) DataSetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateColumnIdentifier) *string {
		if v == nil {
			return nil
		}
		return &v.DataSetIdentifier
	}).(pulumi.StringPtrOutput)
}

type TemplateColumnIdentifierArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnIdentifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnIdentifier)(nil)).Elem()
}

func (o TemplateColumnIdentifierArrayOutput) ToTemplateColumnIdentifierArrayOutput() TemplateColumnIdentifierArrayOutput {
	return o
}

func (o TemplateColumnIdentifierArrayOutput) ToTemplateColumnIdentifierArrayOutputWithContext(ctx context.Context) TemplateColumnIdentifierArrayOutput {
	return o
}

func (o TemplateColumnIdentifierArrayOutput) Index(i pulumi.IntInput) TemplateColumnIdentifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnIdentifier {
		return vs[0].([]TemplateColumnIdentifier)[vs[1].(int)]
	}).(TemplateColumnIdentifierOutput)
}

// <p>The column schema.</p>
type TemplateColumnSchema struct {
	// <p>The data type of the column schema.</p>
	DataType *string `pulumi:"dataType"`
	// <p>The geographic role of the column schema.</p>
	GeographicRole *string `pulumi:"geographicRole"`
	// <p>The name of the column schema.</p>
	Name *string `pulumi:"name"`
}

// TemplateColumnSchemaInput is an input type that accepts TemplateColumnSchemaArgs and TemplateColumnSchemaOutput values.
// You can construct a concrete instance of `TemplateColumnSchemaInput` via:
//
//	TemplateColumnSchemaArgs{...}
type TemplateColumnSchemaInput interface {
	pulumi.Input

	ToTemplateColumnSchemaOutput() TemplateColumnSchemaOutput
	ToTemplateColumnSchemaOutputWithContext(context.Context) TemplateColumnSchemaOutput
}

// <p>The column schema.</p>
type TemplateColumnSchemaArgs struct {
	// <p>The data type of the column schema.</p>
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// <p>The geographic role of the column schema.</p>
	GeographicRole pulumi.StringPtrInput `pulumi:"geographicRole"`
	// <p>The name of the column schema.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnSchema)(nil)).Elem()
}

func (i TemplateColumnSchemaArgs) ToTemplateColumnSchemaOutput() TemplateColumnSchemaOutput {
	return i.ToTemplateColumnSchemaOutputWithContext(context.Background())
}

func (i TemplateColumnSchemaArgs) ToTemplateColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSchemaOutput)
}

// TemplateColumnSchemaArrayInput is an input type that accepts TemplateColumnSchemaArray and TemplateColumnSchemaArrayOutput values.
// You can construct a concrete instance of `TemplateColumnSchemaArrayInput` via:
//
//	TemplateColumnSchemaArray{ TemplateColumnSchemaArgs{...} }
type TemplateColumnSchemaArrayInput interface {
	pulumi.Input

	ToTemplateColumnSchemaArrayOutput() TemplateColumnSchemaArrayOutput
	ToTemplateColumnSchemaArrayOutputWithContext(context.Context) TemplateColumnSchemaArrayOutput
}

type TemplateColumnSchemaArray []TemplateColumnSchemaInput

func (TemplateColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnSchema)(nil)).Elem()
}

func (i TemplateColumnSchemaArray) ToTemplateColumnSchemaArrayOutput() TemplateColumnSchemaArrayOutput {
	return i.ToTemplateColumnSchemaArrayOutputWithContext(context.Background())
}

func (i TemplateColumnSchemaArray) ToTemplateColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSchemaArrayOutput)
}

// <p>The column schema.</p>
type TemplateColumnSchemaOutput struct{ *pulumi.OutputState }

func (TemplateColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnSchema)(nil)).Elem()
}

func (o TemplateColumnSchemaOutput) ToTemplateColumnSchemaOutput() TemplateColumnSchemaOutput {
	return o
}

func (o TemplateColumnSchemaOutput) ToTemplateColumnSchemaOutputWithContext(ctx context.Context) TemplateColumnSchemaOutput {
	return o
}

// <p>The data type of the column schema.</p>
func (o TemplateColumnSchemaOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnSchema) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// <p>The geographic role of the column schema.</p>
func (o TemplateColumnSchemaOutput) GeographicRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnSchema) *string { return v.GeographicRole }).(pulumi.StringPtrOutput)
}

// <p>The name of the column schema.</p>
func (o TemplateColumnSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnSchema)(nil)).Elem()
}

func (o TemplateColumnSchemaArrayOutput) ToTemplateColumnSchemaArrayOutput() TemplateColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnSchemaArrayOutput) ToTemplateColumnSchemaArrayOutputWithContext(ctx context.Context) TemplateColumnSchemaArrayOutput {
	return o
}

func (o TemplateColumnSchemaArrayOutput) Index(i pulumi.IntInput) TemplateColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnSchema {
		return vs[0].([]TemplateColumnSchema)[vs[1].(int)]
	}).(TemplateColumnSchemaOutput)
}

type TemplateColumnSort struct {
	// The aggregation function that is defined in the column sort.
	AggregationFunction *TemplateAggregationFunction `pulumi:"aggregationFunction"`
	// The sort direction.
	Direction TemplateSortDirection    `pulumi:"direction"`
	SortBy    TemplateColumnIdentifier `pulumi:"sortBy"`
}

// TemplateColumnSortInput is an input type that accepts TemplateColumnSortArgs and TemplateColumnSortOutput values.
// You can construct a concrete instance of `TemplateColumnSortInput` via:
//
//	TemplateColumnSortArgs{...}
type TemplateColumnSortInput interface {
	pulumi.Input

	ToTemplateColumnSortOutput() TemplateColumnSortOutput
	ToTemplateColumnSortOutputWithContext(context.Context) TemplateColumnSortOutput
}

type TemplateColumnSortArgs struct {
	// The aggregation function that is defined in the column sort.
	AggregationFunction TemplateAggregationFunctionPtrInput `pulumi:"aggregationFunction"`
	// The sort direction.
	Direction TemplateSortDirectionInput    `pulumi:"direction"`
	SortBy    TemplateColumnIdentifierInput `pulumi:"sortBy"`
}

func (TemplateColumnSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnSort)(nil)).Elem()
}

func (i TemplateColumnSortArgs) ToTemplateColumnSortOutput() TemplateColumnSortOutput {
	return i.ToTemplateColumnSortOutputWithContext(context.Background())
}

func (i TemplateColumnSortArgs) ToTemplateColumnSortOutputWithContext(ctx context.Context) TemplateColumnSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSortOutput)
}

func (i TemplateColumnSortArgs) ToTemplateColumnSortPtrOutput() TemplateColumnSortPtrOutput {
	return i.ToTemplateColumnSortPtrOutputWithContext(context.Background())
}

func (i TemplateColumnSortArgs) ToTemplateColumnSortPtrOutputWithContext(ctx context.Context) TemplateColumnSortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSortOutput).ToTemplateColumnSortPtrOutputWithContext(ctx)
}

// TemplateColumnSortPtrInput is an input type that accepts TemplateColumnSortArgs, TemplateColumnSortPtr and TemplateColumnSortPtrOutput values.
// You can construct a concrete instance of `TemplateColumnSortPtrInput` via:
//
//	        TemplateColumnSortArgs{...}
//
//	or:
//
//	        nil
type TemplateColumnSortPtrInput interface {
	pulumi.Input

	ToTemplateColumnSortPtrOutput() TemplateColumnSortPtrOutput
	ToTemplateColumnSortPtrOutputWithContext(context.Context) TemplateColumnSortPtrOutput
}

type templateColumnSortPtrType TemplateColumnSortArgs

func TemplateColumnSortPtr(v *TemplateColumnSortArgs) TemplateColumnSortPtrInput {
	return (*templateColumnSortPtrType)(v)
}

func (*templateColumnSortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColumnSort)(nil)).Elem()
}

func (i *templateColumnSortPtrType) ToTemplateColumnSortPtrOutput() TemplateColumnSortPtrOutput {
	return i.ToTemplateColumnSortPtrOutputWithContext(context.Background())
}

func (i *templateColumnSortPtrType) ToTemplateColumnSortPtrOutputWithContext(ctx context.Context) TemplateColumnSortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSortPtrOutput)
}

// TemplateColumnSortArrayInput is an input type that accepts TemplateColumnSortArray and TemplateColumnSortArrayOutput values.
// You can construct a concrete instance of `TemplateColumnSortArrayInput` via:
//
//	TemplateColumnSortArray{ TemplateColumnSortArgs{...} }
type TemplateColumnSortArrayInput interface {
	pulumi.Input

	ToTemplateColumnSortArrayOutput() TemplateColumnSortArrayOutput
	ToTemplateColumnSortArrayOutputWithContext(context.Context) TemplateColumnSortArrayOutput
}

type TemplateColumnSortArray []TemplateColumnSortInput

func (TemplateColumnSortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnSort)(nil)).Elem()
}

func (i TemplateColumnSortArray) ToTemplateColumnSortArrayOutput() TemplateColumnSortArrayOutput {
	return i.ToTemplateColumnSortArrayOutputWithContext(context.Background())
}

func (i TemplateColumnSortArray) ToTemplateColumnSortArrayOutputWithContext(ctx context.Context) TemplateColumnSortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnSortArrayOutput)
}

type TemplateColumnSortOutput struct{ *pulumi.OutputState }

func (TemplateColumnSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnSort)(nil)).Elem()
}

func (o TemplateColumnSortOutput) ToTemplateColumnSortOutput() TemplateColumnSortOutput {
	return o
}

func (o TemplateColumnSortOutput) ToTemplateColumnSortOutputWithContext(ctx context.Context) TemplateColumnSortOutput {
	return o
}

func (o TemplateColumnSortOutput) ToTemplateColumnSortPtrOutput() TemplateColumnSortPtrOutput {
	return o.ToTemplateColumnSortPtrOutputWithContext(context.Background())
}

func (o TemplateColumnSortOutput) ToTemplateColumnSortPtrOutputWithContext(ctx context.Context) TemplateColumnSortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateColumnSort) *TemplateColumnSort {
		return &v
	}).(TemplateColumnSortPtrOutput)
}

// The aggregation function that is defined in the column sort.
func (o TemplateColumnSortOutput) AggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateColumnSort) *TemplateAggregationFunction { return v.AggregationFunction }).(TemplateAggregationFunctionPtrOutput)
}

// The sort direction.
func (o TemplateColumnSortOutput) Direction() TemplateSortDirectionOutput {
	return o.ApplyT(func(v TemplateColumnSort) TemplateSortDirection { return v.Direction }).(TemplateSortDirectionOutput)
}

func (o TemplateColumnSortOutput) SortBy() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateColumnSort) TemplateColumnIdentifier { return v.SortBy }).(TemplateColumnIdentifierOutput)
}

type TemplateColumnSortPtrOutput struct{ *pulumi.OutputState }

func (TemplateColumnSortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColumnSort)(nil)).Elem()
}

func (o TemplateColumnSortPtrOutput) ToTemplateColumnSortPtrOutput() TemplateColumnSortPtrOutput {
	return o
}

func (o TemplateColumnSortPtrOutput) ToTemplateColumnSortPtrOutputWithContext(ctx context.Context) TemplateColumnSortPtrOutput {
	return o
}

func (o TemplateColumnSortPtrOutput) Elem() TemplateColumnSortOutput {
	return o.ApplyT(func(v *TemplateColumnSort) TemplateColumnSort {
		if v != nil {
			return *v
		}
		var ret TemplateColumnSort
		return ret
	}).(TemplateColumnSortOutput)
}

// The aggregation function that is defined in the column sort.
func (o TemplateColumnSortPtrOutput) AggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateColumnSort) *TemplateAggregationFunction {
		if v == nil {
			return nil
		}
		return v.AggregationFunction
	}).(TemplateAggregationFunctionPtrOutput)
}

// The sort direction.
func (o TemplateColumnSortPtrOutput) Direction() TemplateSortDirectionPtrOutput {
	return o.ApplyT(func(v *TemplateColumnSort) *TemplateSortDirection {
		if v == nil {
			return nil
		}
		return &v.Direction
	}).(TemplateSortDirectionPtrOutput)
}

func (o TemplateColumnSortPtrOutput) SortBy() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateColumnSort) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.SortBy
	}).(TemplateColumnIdentifierPtrOutput)
}

type TemplateColumnSortArrayOutput struct{ *pulumi.OutputState }

func (TemplateColumnSortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateColumnSort)(nil)).Elem()
}

func (o TemplateColumnSortArrayOutput) ToTemplateColumnSortArrayOutput() TemplateColumnSortArrayOutput {
	return o
}

func (o TemplateColumnSortArrayOutput) ToTemplateColumnSortArrayOutputWithContext(ctx context.Context) TemplateColumnSortArrayOutput {
	return o
}

func (o TemplateColumnSortArrayOutput) Index(i pulumi.IntInput) TemplateColumnSortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateColumnSort {
		return vs[0].([]TemplateColumnSort)[vs[1].(int)]
	}).(TemplateColumnSortOutput)
}

type TemplateColumnTooltipItem struct {
	// The aggregation function of the column tooltip item.
	Aggregation *TemplateAggregationFunction `pulumi:"aggregation"`
	// The target column of the tooltip item.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The label of the tooltip item.
	Label *string `pulumi:"label"`
	// Determines the target of the column tooltip item in a combo chart visual.
	TooltipTarget *TemplateTooltipTarget `pulumi:"tooltipTarget"`
	// The visibility of the tooltip item.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateColumnTooltipItemInput is an input type that accepts TemplateColumnTooltipItemArgs and TemplateColumnTooltipItemOutput values.
// You can construct a concrete instance of `TemplateColumnTooltipItemInput` via:
//
//	TemplateColumnTooltipItemArgs{...}
type TemplateColumnTooltipItemInput interface {
	pulumi.Input

	ToTemplateColumnTooltipItemOutput() TemplateColumnTooltipItemOutput
	ToTemplateColumnTooltipItemOutputWithContext(context.Context) TemplateColumnTooltipItemOutput
}

type TemplateColumnTooltipItemArgs struct {
	// The aggregation function of the column tooltip item.
	Aggregation TemplateAggregationFunctionPtrInput `pulumi:"aggregation"`
	// The target column of the tooltip item.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The label of the tooltip item.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Determines the target of the column tooltip item in a combo chart visual.
	TooltipTarget TemplateTooltipTargetPtrInput `pulumi:"tooltipTarget"`
	// The visibility of the tooltip item.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateColumnTooltipItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnTooltipItem)(nil)).Elem()
}

func (i TemplateColumnTooltipItemArgs) ToTemplateColumnTooltipItemOutput() TemplateColumnTooltipItemOutput {
	return i.ToTemplateColumnTooltipItemOutputWithContext(context.Background())
}

func (i TemplateColumnTooltipItemArgs) ToTemplateColumnTooltipItemOutputWithContext(ctx context.Context) TemplateColumnTooltipItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnTooltipItemOutput)
}

func (i TemplateColumnTooltipItemArgs) ToTemplateColumnTooltipItemPtrOutput() TemplateColumnTooltipItemPtrOutput {
	return i.ToTemplateColumnTooltipItemPtrOutputWithContext(context.Background())
}

func (i TemplateColumnTooltipItemArgs) ToTemplateColumnTooltipItemPtrOutputWithContext(ctx context.Context) TemplateColumnTooltipItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnTooltipItemOutput).ToTemplateColumnTooltipItemPtrOutputWithContext(ctx)
}

// TemplateColumnTooltipItemPtrInput is an input type that accepts TemplateColumnTooltipItemArgs, TemplateColumnTooltipItemPtr and TemplateColumnTooltipItemPtrOutput values.
// You can construct a concrete instance of `TemplateColumnTooltipItemPtrInput` via:
//
//	        TemplateColumnTooltipItemArgs{...}
//
//	or:
//
//	        nil
type TemplateColumnTooltipItemPtrInput interface {
	pulumi.Input

	ToTemplateColumnTooltipItemPtrOutput() TemplateColumnTooltipItemPtrOutput
	ToTemplateColumnTooltipItemPtrOutputWithContext(context.Context) TemplateColumnTooltipItemPtrOutput
}

type templateColumnTooltipItemPtrType TemplateColumnTooltipItemArgs

func TemplateColumnTooltipItemPtr(v *TemplateColumnTooltipItemArgs) TemplateColumnTooltipItemPtrInput {
	return (*templateColumnTooltipItemPtrType)(v)
}

func (*templateColumnTooltipItemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColumnTooltipItem)(nil)).Elem()
}

func (i *templateColumnTooltipItemPtrType) ToTemplateColumnTooltipItemPtrOutput() TemplateColumnTooltipItemPtrOutput {
	return i.ToTemplateColumnTooltipItemPtrOutputWithContext(context.Background())
}

func (i *templateColumnTooltipItemPtrType) ToTemplateColumnTooltipItemPtrOutputWithContext(ctx context.Context) TemplateColumnTooltipItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateColumnTooltipItemPtrOutput)
}

type TemplateColumnTooltipItemOutput struct{ *pulumi.OutputState }

func (TemplateColumnTooltipItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateColumnTooltipItem)(nil)).Elem()
}

func (o TemplateColumnTooltipItemOutput) ToTemplateColumnTooltipItemOutput() TemplateColumnTooltipItemOutput {
	return o
}

func (o TemplateColumnTooltipItemOutput) ToTemplateColumnTooltipItemOutputWithContext(ctx context.Context) TemplateColumnTooltipItemOutput {
	return o
}

func (o TemplateColumnTooltipItemOutput) ToTemplateColumnTooltipItemPtrOutput() TemplateColumnTooltipItemPtrOutput {
	return o.ToTemplateColumnTooltipItemPtrOutputWithContext(context.Background())
}

func (o TemplateColumnTooltipItemOutput) ToTemplateColumnTooltipItemPtrOutputWithContext(ctx context.Context) TemplateColumnTooltipItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateColumnTooltipItem) *TemplateColumnTooltipItem {
		return &v
	}).(TemplateColumnTooltipItemPtrOutput)
}

// The aggregation function of the column tooltip item.
func (o TemplateColumnTooltipItemOutput) Aggregation() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateColumnTooltipItem) *TemplateAggregationFunction { return v.Aggregation }).(TemplateAggregationFunctionPtrOutput)
}

// The target column of the tooltip item.
func (o TemplateColumnTooltipItemOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateColumnTooltipItem) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The label of the tooltip item.
func (o TemplateColumnTooltipItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateColumnTooltipItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Determines the target of the column tooltip item in a combo chart visual.
func (o TemplateColumnTooltipItemOutput) TooltipTarget() TemplateTooltipTargetPtrOutput {
	return o.ApplyT(func(v TemplateColumnTooltipItem) *TemplateTooltipTarget { return v.TooltipTarget }).(TemplateTooltipTargetPtrOutput)
}

// The visibility of the tooltip item.
func (o TemplateColumnTooltipItemOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateColumnTooltipItem) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateColumnTooltipItemPtrOutput struct{ *pulumi.OutputState }

func (TemplateColumnTooltipItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateColumnTooltipItem)(nil)).Elem()
}

func (o TemplateColumnTooltipItemPtrOutput) ToTemplateColumnTooltipItemPtrOutput() TemplateColumnTooltipItemPtrOutput {
	return o
}

func (o TemplateColumnTooltipItemPtrOutput) ToTemplateColumnTooltipItemPtrOutputWithContext(ctx context.Context) TemplateColumnTooltipItemPtrOutput {
	return o
}

func (o TemplateColumnTooltipItemPtrOutput) Elem() TemplateColumnTooltipItemOutput {
	return o.ApplyT(func(v *TemplateColumnTooltipItem) TemplateColumnTooltipItem {
		if v != nil {
			return *v
		}
		var ret TemplateColumnTooltipItem
		return ret
	}).(TemplateColumnTooltipItemOutput)
}

// The aggregation function of the column tooltip item.
func (o TemplateColumnTooltipItemPtrOutput) Aggregation() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateColumnTooltipItem) *TemplateAggregationFunction {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TemplateAggregationFunctionPtrOutput)
}

// The target column of the tooltip item.
func (o TemplateColumnTooltipItemPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateColumnTooltipItem) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The label of the tooltip item.
func (o TemplateColumnTooltipItemPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateColumnTooltipItem) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Determines the target of the column tooltip item in a combo chart visual.
func (o TemplateColumnTooltipItemPtrOutput) TooltipTarget() TemplateTooltipTargetPtrOutput {
	return o.ApplyT(func(v *TemplateColumnTooltipItem) *TemplateTooltipTarget {
		if v == nil {
			return nil
		}
		return v.TooltipTarget
	}).(TemplateTooltipTargetPtrOutput)
}

// The visibility of the tooltip item.
func (o TemplateColumnTooltipItemPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateColumnTooltipItem) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateComboChartAggregatedFieldWells struct {
	// The aggregated `BarValues` field well of a combo chart.
	BarValues []TemplateMeasureField `pulumi:"barValues"`
	// The aggregated category field wells of a combo chart.
	Category []TemplateDimensionField `pulumi:"category"`
	// The aggregated colors field well of a combo chart.
	Colors []TemplateDimensionField `pulumi:"colors"`
	// The aggregated `LineValues` field well of a combo chart.
	LineValues []TemplateMeasureField `pulumi:"lineValues"`
}

// TemplateComboChartAggregatedFieldWellsInput is an input type that accepts TemplateComboChartAggregatedFieldWellsArgs and TemplateComboChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateComboChartAggregatedFieldWellsInput` via:
//
//	TemplateComboChartAggregatedFieldWellsArgs{...}
type TemplateComboChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateComboChartAggregatedFieldWellsOutput() TemplateComboChartAggregatedFieldWellsOutput
	ToTemplateComboChartAggregatedFieldWellsOutputWithContext(context.Context) TemplateComboChartAggregatedFieldWellsOutput
}

type TemplateComboChartAggregatedFieldWellsArgs struct {
	// The aggregated `BarValues` field well of a combo chart.
	BarValues TemplateMeasureFieldArrayInput `pulumi:"barValues"`
	// The aggregated category field wells of a combo chart.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The aggregated colors field well of a combo chart.
	Colors TemplateDimensionFieldArrayInput `pulumi:"colors"`
	// The aggregated `LineValues` field well of a combo chart.
	LineValues TemplateMeasureFieldArrayInput `pulumi:"lineValues"`
}

func (TemplateComboChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateComboChartAggregatedFieldWellsArgs) ToTemplateComboChartAggregatedFieldWellsOutput() TemplateComboChartAggregatedFieldWellsOutput {
	return i.ToTemplateComboChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateComboChartAggregatedFieldWellsArgs) ToTemplateComboChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateComboChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartAggregatedFieldWellsOutput)
}

func (i TemplateComboChartAggregatedFieldWellsArgs) ToTemplateComboChartAggregatedFieldWellsPtrOutput() TemplateComboChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateComboChartAggregatedFieldWellsArgs) ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartAggregatedFieldWellsOutput).ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateComboChartAggregatedFieldWellsPtrInput is an input type that accepts TemplateComboChartAggregatedFieldWellsArgs, TemplateComboChartAggregatedFieldWellsPtr and TemplateComboChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateComboChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplateComboChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateComboChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateComboChartAggregatedFieldWellsPtrOutput() TemplateComboChartAggregatedFieldWellsPtrOutput
	ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateComboChartAggregatedFieldWellsPtrOutput
}

type templateComboChartAggregatedFieldWellsPtrType TemplateComboChartAggregatedFieldWellsArgs

func TemplateComboChartAggregatedFieldWellsPtr(v *TemplateComboChartAggregatedFieldWellsArgs) TemplateComboChartAggregatedFieldWellsPtrInput {
	return (*templateComboChartAggregatedFieldWellsPtrType)(v)
}

func (*templateComboChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templateComboChartAggregatedFieldWellsPtrType) ToTemplateComboChartAggregatedFieldWellsPtrOutput() TemplateComboChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateComboChartAggregatedFieldWellsPtrType) ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartAggregatedFieldWellsPtrOutput)
}

type TemplateComboChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateComboChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateComboChartAggregatedFieldWellsOutput) ToTemplateComboChartAggregatedFieldWellsOutput() TemplateComboChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateComboChartAggregatedFieldWellsOutput) ToTemplateComboChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateComboChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateComboChartAggregatedFieldWellsOutput) ToTemplateComboChartAggregatedFieldWellsPtrOutput() TemplateComboChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateComboChartAggregatedFieldWellsOutput) ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateComboChartAggregatedFieldWells) *TemplateComboChartAggregatedFieldWells {
		return &v
	}).(TemplateComboChartAggregatedFieldWellsPtrOutput)
}

// The aggregated `BarValues` field well of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsOutput) BarValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateComboChartAggregatedFieldWells) []TemplateMeasureField { return v.BarValues }).(TemplateMeasureFieldArrayOutput)
}

// The aggregated category field wells of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateComboChartAggregatedFieldWells) []TemplateDimensionField { return v.Category }).(TemplateDimensionFieldArrayOutput)
}

// The aggregated colors field well of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateComboChartAggregatedFieldWells) []TemplateDimensionField { return v.Colors }).(TemplateDimensionFieldArrayOutput)
}

// The aggregated `LineValues` field well of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsOutput) LineValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateComboChartAggregatedFieldWells) []TemplateMeasureField { return v.LineValues }).(TemplateMeasureFieldArrayOutput)
}

type TemplateComboChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateComboChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateComboChartAggregatedFieldWellsPtrOutput) ToTemplateComboChartAggregatedFieldWellsPtrOutput() TemplateComboChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateComboChartAggregatedFieldWellsPtrOutput) ToTemplateComboChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateComboChartAggregatedFieldWellsPtrOutput) Elem() TemplateComboChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateComboChartAggregatedFieldWells) TemplateComboChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateComboChartAggregatedFieldWells
		return ret
	}).(TemplateComboChartAggregatedFieldWellsOutput)
}

// The aggregated `BarValues` field well of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsPtrOutput) BarValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.BarValues
	}).(TemplateMeasureFieldArrayOutput)
}

// The aggregated category field wells of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The aggregated colors field well of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsPtrOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateDimensionFieldArrayOutput)
}

// The aggregated `LineValues` field well of a combo chart.
func (o TemplateComboChartAggregatedFieldWellsPtrOutput) LineValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.LineValues
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateComboChartConfiguration struct {
	// The options that determine if visual data labels are displayed.
	//
	// The data label options for a bar in a combo chart.
	BarDataLabels *TemplateDataLabelOptions `pulumi:"barDataLabels"`
	// Determines the bar arrangement in a combo chart. The following are valid values in this structure:
	//
	// - `CLUSTERED` : For clustered bar combo charts.
	// - `STACKED` : For stacked bar combo charts.
	// - `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation error.
	BarsArrangement *TemplateBarsArrangement `pulumi:"barsArrangement"`
	// The category axis of a combo chart.
	CategoryAxis *TemplateAxisDisplayOptions `pulumi:"categoryAxis"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart category (group/color) field well.
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart's color field well.
	ColorLabelOptions *TemplateChartAxisLabelOptions `pulumi:"colorLabelOptions"`
	// The field wells of the visual.
	FieldWells *TemplateComboChartFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The options that determine if visual data labels are displayed.
	//
	// The data label options for a line in a combo chart.
	LineDataLabels *TemplateDataLabelOptions `pulumi:"lineDataLabels"`
	// The label display options (grid line, range, scale, and axis step) of a combo chart's primary y-axis (bar) field well.
	PrimaryYAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"primaryYAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart's primary y-axis (bar) field well.
	PrimaryYAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"primaryYAxisLabelOptions"`
	// The reference line setup of the visual.
	ReferenceLines []TemplateReferenceLine `pulumi:"referenceLines"`
	// The label display options (grid line, range, scale, axis step) of a combo chart's secondary y-axis (line) field well.
	SecondaryYAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"secondaryYAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart's secondary y-axis(line) field well.
	SecondaryYAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"secondaryYAxisLabelOptions"`
	SingleAxisOptions          *TemplateSingleAxisOptions     `pulumi:"singleAxisOptions"`
	// The sort configuration of a `ComboChartVisual` .
	SortConfiguration *TemplateComboChartSortConfiguration `pulumi:"sortConfiguration"`
	// The legend display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The palette (chart color) display setup of the visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
}

// TemplateComboChartConfigurationInput is an input type that accepts TemplateComboChartConfigurationArgs and TemplateComboChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateComboChartConfigurationInput` via:
//
//	TemplateComboChartConfigurationArgs{...}
type TemplateComboChartConfigurationInput interface {
	pulumi.Input

	ToTemplateComboChartConfigurationOutput() TemplateComboChartConfigurationOutput
	ToTemplateComboChartConfigurationOutputWithContext(context.Context) TemplateComboChartConfigurationOutput
}

type TemplateComboChartConfigurationArgs struct {
	// The options that determine if visual data labels are displayed.
	//
	// The data label options for a bar in a combo chart.
	BarDataLabels TemplateDataLabelOptionsPtrInput `pulumi:"barDataLabels"`
	// Determines the bar arrangement in a combo chart. The following are valid values in this structure:
	//
	// - `CLUSTERED` : For clustered bar combo charts.
	// - `STACKED` : For stacked bar combo charts.
	// - `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation error.
	BarsArrangement TemplateBarsArrangementPtrInput `pulumi:"barsArrangement"`
	// The category axis of a combo chart.
	CategoryAxis TemplateAxisDisplayOptionsPtrInput `pulumi:"categoryAxis"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart category (group/color) field well.
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart's color field well.
	ColorLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"colorLabelOptions"`
	// The field wells of the visual.
	FieldWells TemplateComboChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The options that determine if visual data labels are displayed.
	//
	// The data label options for a line in a combo chart.
	LineDataLabels TemplateDataLabelOptionsPtrInput `pulumi:"lineDataLabels"`
	// The label display options (grid line, range, scale, and axis step) of a combo chart's primary y-axis (bar) field well.
	PrimaryYAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"primaryYAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart's primary y-axis (bar) field well.
	PrimaryYAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"primaryYAxisLabelOptions"`
	// The reference line setup of the visual.
	ReferenceLines TemplateReferenceLineArrayInput `pulumi:"referenceLines"`
	// The label display options (grid line, range, scale, axis step) of a combo chart's secondary y-axis (line) field well.
	SecondaryYAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"secondaryYAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of a combo chart's secondary y-axis(line) field well.
	SecondaryYAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"secondaryYAxisLabelOptions"`
	SingleAxisOptions          TemplateSingleAxisOptionsPtrInput     `pulumi:"singleAxisOptions"`
	// The sort configuration of a `ComboChartVisual` .
	SortConfiguration TemplateComboChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The legend display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The palette (chart color) display setup of the visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
}

func (TemplateComboChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartConfiguration)(nil)).Elem()
}

func (i TemplateComboChartConfigurationArgs) ToTemplateComboChartConfigurationOutput() TemplateComboChartConfigurationOutput {
	return i.ToTemplateComboChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateComboChartConfigurationArgs) ToTemplateComboChartConfigurationOutputWithContext(ctx context.Context) TemplateComboChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartConfigurationOutput)
}

func (i TemplateComboChartConfigurationArgs) ToTemplateComboChartConfigurationPtrOutput() TemplateComboChartConfigurationPtrOutput {
	return i.ToTemplateComboChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateComboChartConfigurationArgs) ToTemplateComboChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartConfigurationOutput).ToTemplateComboChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateComboChartConfigurationPtrInput is an input type that accepts TemplateComboChartConfigurationArgs, TemplateComboChartConfigurationPtr and TemplateComboChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateComboChartConfigurationPtrInput` via:
//
//	        TemplateComboChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateComboChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateComboChartConfigurationPtrOutput() TemplateComboChartConfigurationPtrOutput
	ToTemplateComboChartConfigurationPtrOutputWithContext(context.Context) TemplateComboChartConfigurationPtrOutput
}

type templateComboChartConfigurationPtrType TemplateComboChartConfigurationArgs

func TemplateComboChartConfigurationPtr(v *TemplateComboChartConfigurationArgs) TemplateComboChartConfigurationPtrInput {
	return (*templateComboChartConfigurationPtrType)(v)
}

func (*templateComboChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartConfiguration)(nil)).Elem()
}

func (i *templateComboChartConfigurationPtrType) ToTemplateComboChartConfigurationPtrOutput() TemplateComboChartConfigurationPtrOutput {
	return i.ToTemplateComboChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateComboChartConfigurationPtrType) ToTemplateComboChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartConfigurationPtrOutput)
}

type TemplateComboChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateComboChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartConfiguration)(nil)).Elem()
}

func (o TemplateComboChartConfigurationOutput) ToTemplateComboChartConfigurationOutput() TemplateComboChartConfigurationOutput {
	return o
}

func (o TemplateComboChartConfigurationOutput) ToTemplateComboChartConfigurationOutputWithContext(ctx context.Context) TemplateComboChartConfigurationOutput {
	return o
}

func (o TemplateComboChartConfigurationOutput) ToTemplateComboChartConfigurationPtrOutput() TemplateComboChartConfigurationPtrOutput {
	return o.ToTemplateComboChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateComboChartConfigurationOutput) ToTemplateComboChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateComboChartConfiguration) *TemplateComboChartConfiguration {
		return &v
	}).(TemplateComboChartConfigurationPtrOutput)
}

// The options that determine if visual data labels are displayed.
//
// The data label options for a bar in a combo chart.
func (o TemplateComboChartConfigurationOutput) BarDataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateDataLabelOptions { return v.BarDataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// Determines the bar arrangement in a combo chart. The following are valid values in this structure:
//
// - `CLUSTERED` : For clustered bar combo charts.
// - `STACKED` : For stacked bar combo charts.
// - `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation error.
func (o TemplateComboChartConfigurationOutput) BarsArrangement() TemplateBarsArrangementPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateBarsArrangement { return v.BarsArrangement }).(TemplateBarsArrangementPtrOutput)
}

// The category axis of a combo chart.
func (o TemplateComboChartConfigurationOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateAxisDisplayOptions { return v.CategoryAxis }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart category (group/color) field well.
func (o TemplateComboChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions { return v.CategoryLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart's color field well.
func (o TemplateComboChartConfigurationOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions { return v.ColorLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateComboChartConfigurationOutput) FieldWells() TemplateComboChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateComboChartFieldWells { return v.FieldWells }).(TemplateComboChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateComboChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateComboChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The options that determine if visual data labels are displayed.
//
// The data label options for a line in a combo chart.
func (o TemplateComboChartConfigurationOutput) LineDataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateDataLabelOptions { return v.LineDataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The label display options (grid line, range, scale, and axis step) of a combo chart's primary y-axis (bar) field well.
func (o TemplateComboChartConfigurationOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateAxisDisplayOptions {
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart's primary y-axis (bar) field well.
func (o TemplateComboChartConfigurationOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The reference line setup of the visual.
func (o TemplateComboChartConfigurationOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) []TemplateReferenceLine { return v.ReferenceLines }).(TemplateReferenceLineArrayOutput)
}

// The label display options (grid line, range, scale, axis step) of a combo chart's secondary y-axis (line) field well.
func (o TemplateComboChartConfigurationOutput) SecondaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateAxisDisplayOptions {
		return v.SecondaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart's secondary y-axis(line) field well.
func (o TemplateComboChartConfigurationOutput) SecondaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.SecondaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

func (o TemplateComboChartConfigurationOutput) SingleAxisOptions() TemplateSingleAxisOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateSingleAxisOptions { return v.SingleAxisOptions }).(TemplateSingleAxisOptionsPtrOutput)
}

// The sort configuration of a `ComboChartVisual` .
func (o TemplateComboChartConfigurationOutput) SortConfiguration() TemplateComboChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateComboChartSortConfiguration {
		return v.SortConfiguration
	}).(TemplateComboChartSortConfigurationPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateComboChartConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateComboChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateComboChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

type TemplateComboChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateComboChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartConfiguration)(nil)).Elem()
}

func (o TemplateComboChartConfigurationPtrOutput) ToTemplateComboChartConfigurationPtrOutput() TemplateComboChartConfigurationPtrOutput {
	return o
}

func (o TemplateComboChartConfigurationPtrOutput) ToTemplateComboChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartConfigurationPtrOutput {
	return o
}

func (o TemplateComboChartConfigurationPtrOutput) Elem() TemplateComboChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) TemplateComboChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateComboChartConfiguration
		return ret
	}).(TemplateComboChartConfigurationOutput)
}

// The options that determine if visual data labels are displayed.
//
// The data label options for a bar in a combo chart.
func (o TemplateComboChartConfigurationPtrOutput) BarDataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.BarDataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// Determines the bar arrangement in a combo chart. The following are valid values in this structure:
//
// - `CLUSTERED` : For clustered bar combo charts.
// - `STACKED` : For stacked bar combo charts.
// - `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation error.
func (o TemplateComboChartConfigurationPtrOutput) BarsArrangement() TemplateBarsArrangementPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateBarsArrangement {
		if v == nil {
			return nil
		}
		return v.BarsArrangement
	}).(TemplateBarsArrangementPtrOutput)
}

// The category axis of a combo chart.
func (o TemplateComboChartConfigurationPtrOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxis
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart category (group/color) field well.
func (o TemplateComboChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart's color field well.
func (o TemplateComboChartConfigurationPtrOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ColorLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateComboChartConfigurationPtrOutput) FieldWells() TemplateComboChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateComboChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateComboChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateComboChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateComboChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The options that determine if visual data labels are displayed.
//
// The data label options for a line in a combo chart.
func (o TemplateComboChartConfigurationPtrOutput) LineDataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.LineDataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The label display options (grid line, range, scale, and axis step) of a combo chart's primary y-axis (bar) field well.
func (o TemplateComboChartConfigurationPtrOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart's primary y-axis (bar) field well.
func (o TemplateComboChartConfigurationPtrOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The reference line setup of the visual.
func (o TemplateComboChartConfigurationPtrOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) []TemplateReferenceLine {
		if v == nil {
			return nil
		}
		return v.ReferenceLines
	}).(TemplateReferenceLineArrayOutput)
}

// The label display options (grid line, range, scale, axis step) of a combo chart's secondary y-axis (line) field well.
func (o TemplateComboChartConfigurationPtrOutput) SecondaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.SecondaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of a combo chart's secondary y-axis(line) field well.
func (o TemplateComboChartConfigurationPtrOutput) SecondaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.SecondaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

func (o TemplateComboChartConfigurationPtrOutput) SingleAxisOptions() TemplateSingleAxisOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateSingleAxisOptions {
		if v == nil {
			return nil
		}
		return v.SingleAxisOptions
	}).(TemplateSingleAxisOptionsPtrOutput)
}

// The sort configuration of a `ComboChartVisual` .
func (o TemplateComboChartConfigurationPtrOutput) SortConfiguration() TemplateComboChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateComboChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateComboChartSortConfigurationPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateComboChartConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateComboChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateComboChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

type TemplateComboChartFieldWells struct {
	// The aggregated field wells of a combo chart. Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by category.
	ComboChartAggregatedFieldWells *TemplateComboChartAggregatedFieldWells `pulumi:"comboChartAggregatedFieldWells"`
}

// TemplateComboChartFieldWellsInput is an input type that accepts TemplateComboChartFieldWellsArgs and TemplateComboChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateComboChartFieldWellsInput` via:
//
//	TemplateComboChartFieldWellsArgs{...}
type TemplateComboChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateComboChartFieldWellsOutput() TemplateComboChartFieldWellsOutput
	ToTemplateComboChartFieldWellsOutputWithContext(context.Context) TemplateComboChartFieldWellsOutput
}

type TemplateComboChartFieldWellsArgs struct {
	// The aggregated field wells of a combo chart. Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by category.
	ComboChartAggregatedFieldWells TemplateComboChartAggregatedFieldWellsPtrInput `pulumi:"comboChartAggregatedFieldWells"`
}

func (TemplateComboChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartFieldWells)(nil)).Elem()
}

func (i TemplateComboChartFieldWellsArgs) ToTemplateComboChartFieldWellsOutput() TemplateComboChartFieldWellsOutput {
	return i.ToTemplateComboChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateComboChartFieldWellsArgs) ToTemplateComboChartFieldWellsOutputWithContext(ctx context.Context) TemplateComboChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartFieldWellsOutput)
}

func (i TemplateComboChartFieldWellsArgs) ToTemplateComboChartFieldWellsPtrOutput() TemplateComboChartFieldWellsPtrOutput {
	return i.ToTemplateComboChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateComboChartFieldWellsArgs) ToTemplateComboChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartFieldWellsOutput).ToTemplateComboChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateComboChartFieldWellsPtrInput is an input type that accepts TemplateComboChartFieldWellsArgs, TemplateComboChartFieldWellsPtr and TemplateComboChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateComboChartFieldWellsPtrInput` via:
//
//	        TemplateComboChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateComboChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateComboChartFieldWellsPtrOutput() TemplateComboChartFieldWellsPtrOutput
	ToTemplateComboChartFieldWellsPtrOutputWithContext(context.Context) TemplateComboChartFieldWellsPtrOutput
}

type templateComboChartFieldWellsPtrType TemplateComboChartFieldWellsArgs

func TemplateComboChartFieldWellsPtr(v *TemplateComboChartFieldWellsArgs) TemplateComboChartFieldWellsPtrInput {
	return (*templateComboChartFieldWellsPtrType)(v)
}

func (*templateComboChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartFieldWells)(nil)).Elem()
}

func (i *templateComboChartFieldWellsPtrType) ToTemplateComboChartFieldWellsPtrOutput() TemplateComboChartFieldWellsPtrOutput {
	return i.ToTemplateComboChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateComboChartFieldWellsPtrType) ToTemplateComboChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartFieldWellsPtrOutput)
}

type TemplateComboChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateComboChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartFieldWells)(nil)).Elem()
}

func (o TemplateComboChartFieldWellsOutput) ToTemplateComboChartFieldWellsOutput() TemplateComboChartFieldWellsOutput {
	return o
}

func (o TemplateComboChartFieldWellsOutput) ToTemplateComboChartFieldWellsOutputWithContext(ctx context.Context) TemplateComboChartFieldWellsOutput {
	return o
}

func (o TemplateComboChartFieldWellsOutput) ToTemplateComboChartFieldWellsPtrOutput() TemplateComboChartFieldWellsPtrOutput {
	return o.ToTemplateComboChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateComboChartFieldWellsOutput) ToTemplateComboChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateComboChartFieldWells) *TemplateComboChartFieldWells {
		return &v
	}).(TemplateComboChartFieldWellsPtrOutput)
}

// The aggregated field wells of a combo chart. Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by category.
func (o TemplateComboChartFieldWellsOutput) ComboChartAggregatedFieldWells() TemplateComboChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartFieldWells) *TemplateComboChartAggregatedFieldWells {
		return v.ComboChartAggregatedFieldWells
	}).(TemplateComboChartAggregatedFieldWellsPtrOutput)
}

type TemplateComboChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateComboChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartFieldWells)(nil)).Elem()
}

func (o TemplateComboChartFieldWellsPtrOutput) ToTemplateComboChartFieldWellsPtrOutput() TemplateComboChartFieldWellsPtrOutput {
	return o
}

func (o TemplateComboChartFieldWellsPtrOutput) ToTemplateComboChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateComboChartFieldWellsPtrOutput {
	return o
}

func (o TemplateComboChartFieldWellsPtrOutput) Elem() TemplateComboChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateComboChartFieldWells) TemplateComboChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateComboChartFieldWells
		return ret
	}).(TemplateComboChartFieldWellsOutput)
}

// The aggregated field wells of a combo chart. Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by category.
func (o TemplateComboChartFieldWellsPtrOutput) ComboChartAggregatedFieldWells() TemplateComboChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartFieldWells) *TemplateComboChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.ComboChartAggregatedFieldWells
	}).(TemplateComboChartAggregatedFieldWellsPtrOutput)
}

type TemplateComboChartSortConfiguration struct {
	// The item limit configuration for the category field well of a combo chart.
	CategoryItemsLimit *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The sort configuration of the category field well in a combo chart.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
	// The item limit configuration of the color field well in a combo chart.
	ColorItemsLimit *TemplateItemsLimitConfiguration `pulumi:"colorItemsLimit"`
	// The sort configuration of the color field well in a combo chart.
	ColorSort []TemplateFieldSortOptions `pulumi:"colorSort"`
}

// TemplateComboChartSortConfigurationInput is an input type that accepts TemplateComboChartSortConfigurationArgs and TemplateComboChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateComboChartSortConfigurationInput` via:
//
//	TemplateComboChartSortConfigurationArgs{...}
type TemplateComboChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplateComboChartSortConfigurationOutput() TemplateComboChartSortConfigurationOutput
	ToTemplateComboChartSortConfigurationOutputWithContext(context.Context) TemplateComboChartSortConfigurationOutput
}

type TemplateComboChartSortConfigurationArgs struct {
	// The item limit configuration for the category field well of a combo chart.
	CategoryItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The sort configuration of the category field well in a combo chart.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
	// The item limit configuration of the color field well in a combo chart.
	ColorItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"colorItemsLimit"`
	// The sort configuration of the color field well in a combo chart.
	ColorSort TemplateFieldSortOptionsArrayInput `pulumi:"colorSort"`
}

func (TemplateComboChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartSortConfiguration)(nil)).Elem()
}

func (i TemplateComboChartSortConfigurationArgs) ToTemplateComboChartSortConfigurationOutput() TemplateComboChartSortConfigurationOutput {
	return i.ToTemplateComboChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateComboChartSortConfigurationArgs) ToTemplateComboChartSortConfigurationOutputWithContext(ctx context.Context) TemplateComboChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartSortConfigurationOutput)
}

func (i TemplateComboChartSortConfigurationArgs) ToTemplateComboChartSortConfigurationPtrOutput() TemplateComboChartSortConfigurationPtrOutput {
	return i.ToTemplateComboChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateComboChartSortConfigurationArgs) ToTemplateComboChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartSortConfigurationOutput).ToTemplateComboChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateComboChartSortConfigurationPtrInput is an input type that accepts TemplateComboChartSortConfigurationArgs, TemplateComboChartSortConfigurationPtr and TemplateComboChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateComboChartSortConfigurationPtrInput` via:
//
//	        TemplateComboChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateComboChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateComboChartSortConfigurationPtrOutput() TemplateComboChartSortConfigurationPtrOutput
	ToTemplateComboChartSortConfigurationPtrOutputWithContext(context.Context) TemplateComboChartSortConfigurationPtrOutput
}

type templateComboChartSortConfigurationPtrType TemplateComboChartSortConfigurationArgs

func TemplateComboChartSortConfigurationPtr(v *TemplateComboChartSortConfigurationArgs) TemplateComboChartSortConfigurationPtrInput {
	return (*templateComboChartSortConfigurationPtrType)(v)
}

func (*templateComboChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartSortConfiguration)(nil)).Elem()
}

func (i *templateComboChartSortConfigurationPtrType) ToTemplateComboChartSortConfigurationPtrOutput() TemplateComboChartSortConfigurationPtrOutput {
	return i.ToTemplateComboChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateComboChartSortConfigurationPtrType) ToTemplateComboChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartSortConfigurationPtrOutput)
}

type TemplateComboChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateComboChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartSortConfiguration)(nil)).Elem()
}

func (o TemplateComboChartSortConfigurationOutput) ToTemplateComboChartSortConfigurationOutput() TemplateComboChartSortConfigurationOutput {
	return o
}

func (o TemplateComboChartSortConfigurationOutput) ToTemplateComboChartSortConfigurationOutputWithContext(ctx context.Context) TemplateComboChartSortConfigurationOutput {
	return o
}

func (o TemplateComboChartSortConfigurationOutput) ToTemplateComboChartSortConfigurationPtrOutput() TemplateComboChartSortConfigurationPtrOutput {
	return o.ToTemplateComboChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateComboChartSortConfigurationOutput) ToTemplateComboChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateComboChartSortConfiguration) *TemplateComboChartSortConfiguration {
		return &v
	}).(TemplateComboChartSortConfigurationPtrOutput)
}

// The item limit configuration for the category field well of a combo chart.
func (o TemplateComboChartSortConfigurationOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateComboChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category field well in a combo chart.
func (o TemplateComboChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateComboChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

// The item limit configuration of the color field well in a combo chart.
func (o TemplateComboChartSortConfigurationOutput) ColorItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateComboChartSortConfiguration) *TemplateItemsLimitConfiguration { return v.ColorItemsLimit }).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the color field well in a combo chart.
func (o TemplateComboChartSortConfigurationOutput) ColorSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateComboChartSortConfiguration) []TemplateFieldSortOptions { return v.ColorSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateComboChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateComboChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartSortConfiguration)(nil)).Elem()
}

func (o TemplateComboChartSortConfigurationPtrOutput) ToTemplateComboChartSortConfigurationPtrOutput() TemplateComboChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateComboChartSortConfigurationPtrOutput) ToTemplateComboChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateComboChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateComboChartSortConfigurationPtrOutput) Elem() TemplateComboChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateComboChartSortConfiguration) TemplateComboChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateComboChartSortConfiguration
		return ret
	}).(TemplateComboChartSortConfigurationOutput)
}

// The item limit configuration for the category field well of a combo chart.
func (o TemplateComboChartSortConfigurationPtrOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category field well in a combo chart.
func (o TemplateComboChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The item limit configuration of the color field well in a combo chart.
func (o TemplateComboChartSortConfigurationPtrOutput) ColorItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the color field well in a combo chart.
func (o TemplateComboChartSortConfigurationPtrOutput) ColorSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.ColorSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateComboChartVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateComboChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateComboChartVisualInput is an input type that accepts TemplateComboChartVisualArgs and TemplateComboChartVisualOutput values.
// You can construct a concrete instance of `TemplateComboChartVisualInput` via:
//
//	TemplateComboChartVisualArgs{...}
type TemplateComboChartVisualInput interface {
	pulumi.Input

	ToTemplateComboChartVisualOutput() TemplateComboChartVisualOutput
	ToTemplateComboChartVisualOutputWithContext(context.Context) TemplateComboChartVisualOutput
}

type TemplateComboChartVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateComboChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateComboChartVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartVisual)(nil)).Elem()
}

func (i TemplateComboChartVisualArgs) ToTemplateComboChartVisualOutput() TemplateComboChartVisualOutput {
	return i.ToTemplateComboChartVisualOutputWithContext(context.Background())
}

func (i TemplateComboChartVisualArgs) ToTemplateComboChartVisualOutputWithContext(ctx context.Context) TemplateComboChartVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartVisualOutput)
}

func (i TemplateComboChartVisualArgs) ToTemplateComboChartVisualPtrOutput() TemplateComboChartVisualPtrOutput {
	return i.ToTemplateComboChartVisualPtrOutputWithContext(context.Background())
}

func (i TemplateComboChartVisualArgs) ToTemplateComboChartVisualPtrOutputWithContext(ctx context.Context) TemplateComboChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartVisualOutput).ToTemplateComboChartVisualPtrOutputWithContext(ctx)
}

// TemplateComboChartVisualPtrInput is an input type that accepts TemplateComboChartVisualArgs, TemplateComboChartVisualPtr and TemplateComboChartVisualPtrOutput values.
// You can construct a concrete instance of `TemplateComboChartVisualPtrInput` via:
//
//	        TemplateComboChartVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateComboChartVisualPtrInput interface {
	pulumi.Input

	ToTemplateComboChartVisualPtrOutput() TemplateComboChartVisualPtrOutput
	ToTemplateComboChartVisualPtrOutputWithContext(context.Context) TemplateComboChartVisualPtrOutput
}

type templateComboChartVisualPtrType TemplateComboChartVisualArgs

func TemplateComboChartVisualPtr(v *TemplateComboChartVisualArgs) TemplateComboChartVisualPtrInput {
	return (*templateComboChartVisualPtrType)(v)
}

func (*templateComboChartVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartVisual)(nil)).Elem()
}

func (i *templateComboChartVisualPtrType) ToTemplateComboChartVisualPtrOutput() TemplateComboChartVisualPtrOutput {
	return i.ToTemplateComboChartVisualPtrOutputWithContext(context.Background())
}

func (i *templateComboChartVisualPtrType) ToTemplateComboChartVisualPtrOutputWithContext(ctx context.Context) TemplateComboChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComboChartVisualPtrOutput)
}

type TemplateComboChartVisualOutput struct{ *pulumi.OutputState }

func (TemplateComboChartVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComboChartVisual)(nil)).Elem()
}

func (o TemplateComboChartVisualOutput) ToTemplateComboChartVisualOutput() TemplateComboChartVisualOutput {
	return o
}

func (o TemplateComboChartVisualOutput) ToTemplateComboChartVisualOutputWithContext(ctx context.Context) TemplateComboChartVisualOutput {
	return o
}

func (o TemplateComboChartVisualOutput) ToTemplateComboChartVisualPtrOutput() TemplateComboChartVisualPtrOutput {
	return o.ToTemplateComboChartVisualPtrOutputWithContext(context.Background())
}

func (o TemplateComboChartVisualOutput) ToTemplateComboChartVisualPtrOutputWithContext(ctx context.Context) TemplateComboChartVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateComboChartVisual) *TemplateComboChartVisual {
		return &v
	}).(TemplateComboChartVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateComboChartVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateComboChartVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateComboChartVisualOutput) ChartConfiguration() TemplateComboChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateComboChartVisual) *TemplateComboChartConfiguration { return v.ChartConfiguration }).(TemplateComboChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateComboChartVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateComboChartVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateComboChartVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateComboChartVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateComboChartVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateComboChartVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateComboChartVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateComboChartVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateComboChartVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateComboChartVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateComboChartVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComboChartVisual)(nil)).Elem()
}

func (o TemplateComboChartVisualPtrOutput) ToTemplateComboChartVisualPtrOutput() TemplateComboChartVisualPtrOutput {
	return o
}

func (o TemplateComboChartVisualPtrOutput) ToTemplateComboChartVisualPtrOutputWithContext(ctx context.Context) TemplateComboChartVisualPtrOutput {
	return o
}

func (o TemplateComboChartVisualPtrOutput) Elem() TemplateComboChartVisualOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) TemplateComboChartVisual {
		if v != nil {
			return *v
		}
		var ret TemplateComboChartVisual
		return ret
	}).(TemplateComboChartVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateComboChartVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateComboChartVisualPtrOutput) ChartConfiguration() TemplateComboChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) *TemplateComboChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateComboChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateComboChartVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateComboChartVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateComboChartVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateComboChartVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateComboChartVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateComboChartVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateComparisonConfiguration struct {
	// The format of the comparison.
	ComparisonFormat *TemplateComparisonFormatConfiguration `pulumi:"comparisonFormat"`
	// The method of the comparison. Choose from the following options:
	//
	// - `DIFFERENCE`
	// - `PERCENT_DIFFERENCE`
	// - `PERCENT`
	ComparisonMethod *TemplateComparisonMethod `pulumi:"comparisonMethod"`
}

// TemplateComparisonConfigurationInput is an input type that accepts TemplateComparisonConfigurationArgs and TemplateComparisonConfigurationOutput values.
// You can construct a concrete instance of `TemplateComparisonConfigurationInput` via:
//
//	TemplateComparisonConfigurationArgs{...}
type TemplateComparisonConfigurationInput interface {
	pulumi.Input

	ToTemplateComparisonConfigurationOutput() TemplateComparisonConfigurationOutput
	ToTemplateComparisonConfigurationOutputWithContext(context.Context) TemplateComparisonConfigurationOutput
}

type TemplateComparisonConfigurationArgs struct {
	// The format of the comparison.
	ComparisonFormat TemplateComparisonFormatConfigurationPtrInput `pulumi:"comparisonFormat"`
	// The method of the comparison. Choose from the following options:
	//
	// - `DIFFERENCE`
	// - `PERCENT_DIFFERENCE`
	// - `PERCENT`
	ComparisonMethod TemplateComparisonMethodPtrInput `pulumi:"comparisonMethod"`
}

func (TemplateComparisonConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComparisonConfiguration)(nil)).Elem()
}

func (i TemplateComparisonConfigurationArgs) ToTemplateComparisonConfigurationOutput() TemplateComparisonConfigurationOutput {
	return i.ToTemplateComparisonConfigurationOutputWithContext(context.Background())
}

func (i TemplateComparisonConfigurationArgs) ToTemplateComparisonConfigurationOutputWithContext(ctx context.Context) TemplateComparisonConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComparisonConfigurationOutput)
}

func (i TemplateComparisonConfigurationArgs) ToTemplateComparisonConfigurationPtrOutput() TemplateComparisonConfigurationPtrOutput {
	return i.ToTemplateComparisonConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateComparisonConfigurationArgs) ToTemplateComparisonConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComparisonConfigurationOutput).ToTemplateComparisonConfigurationPtrOutputWithContext(ctx)
}

// TemplateComparisonConfigurationPtrInput is an input type that accepts TemplateComparisonConfigurationArgs, TemplateComparisonConfigurationPtr and TemplateComparisonConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateComparisonConfigurationPtrInput` via:
//
//	        TemplateComparisonConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateComparisonConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateComparisonConfigurationPtrOutput() TemplateComparisonConfigurationPtrOutput
	ToTemplateComparisonConfigurationPtrOutputWithContext(context.Context) TemplateComparisonConfigurationPtrOutput
}

type templateComparisonConfigurationPtrType TemplateComparisonConfigurationArgs

func TemplateComparisonConfigurationPtr(v *TemplateComparisonConfigurationArgs) TemplateComparisonConfigurationPtrInput {
	return (*templateComparisonConfigurationPtrType)(v)
}

func (*templateComparisonConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComparisonConfiguration)(nil)).Elem()
}

func (i *templateComparisonConfigurationPtrType) ToTemplateComparisonConfigurationPtrOutput() TemplateComparisonConfigurationPtrOutput {
	return i.ToTemplateComparisonConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateComparisonConfigurationPtrType) ToTemplateComparisonConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComparisonConfigurationPtrOutput)
}

type TemplateComparisonConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateComparisonConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComparisonConfiguration)(nil)).Elem()
}

func (o TemplateComparisonConfigurationOutput) ToTemplateComparisonConfigurationOutput() TemplateComparisonConfigurationOutput {
	return o
}

func (o TemplateComparisonConfigurationOutput) ToTemplateComparisonConfigurationOutputWithContext(ctx context.Context) TemplateComparisonConfigurationOutput {
	return o
}

func (o TemplateComparisonConfigurationOutput) ToTemplateComparisonConfigurationPtrOutput() TemplateComparisonConfigurationPtrOutput {
	return o.ToTemplateComparisonConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateComparisonConfigurationOutput) ToTemplateComparisonConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateComparisonConfiguration) *TemplateComparisonConfiguration {
		return &v
	}).(TemplateComparisonConfigurationPtrOutput)
}

// The format of the comparison.
func (o TemplateComparisonConfigurationOutput) ComparisonFormat() TemplateComparisonFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateComparisonConfiguration) *TemplateComparisonFormatConfiguration {
		return v.ComparisonFormat
	}).(TemplateComparisonFormatConfigurationPtrOutput)
}

// The method of the comparison. Choose from the following options:
//
// - `DIFFERENCE`
// - `PERCENT_DIFFERENCE`
// - `PERCENT`
func (o TemplateComparisonConfigurationOutput) ComparisonMethod() TemplateComparisonMethodPtrOutput {
	return o.ApplyT(func(v TemplateComparisonConfiguration) *TemplateComparisonMethod { return v.ComparisonMethod }).(TemplateComparisonMethodPtrOutput)
}

type TemplateComparisonConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateComparisonConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComparisonConfiguration)(nil)).Elem()
}

func (o TemplateComparisonConfigurationPtrOutput) ToTemplateComparisonConfigurationPtrOutput() TemplateComparisonConfigurationPtrOutput {
	return o
}

func (o TemplateComparisonConfigurationPtrOutput) ToTemplateComparisonConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonConfigurationPtrOutput {
	return o
}

func (o TemplateComparisonConfigurationPtrOutput) Elem() TemplateComparisonConfigurationOutput {
	return o.ApplyT(func(v *TemplateComparisonConfiguration) TemplateComparisonConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateComparisonConfiguration
		return ret
	}).(TemplateComparisonConfigurationOutput)
}

// The format of the comparison.
func (o TemplateComparisonConfigurationPtrOutput) ComparisonFormat() TemplateComparisonFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateComparisonConfiguration) *TemplateComparisonFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.ComparisonFormat
	}).(TemplateComparisonFormatConfigurationPtrOutput)
}

// The method of the comparison. Choose from the following options:
//
// - `DIFFERENCE`
// - `PERCENT_DIFFERENCE`
// - `PERCENT`
func (o TemplateComparisonConfigurationPtrOutput) ComparisonMethod() TemplateComparisonMethodPtrOutput {
	return o.ApplyT(func(v *TemplateComparisonConfiguration) *TemplateComparisonMethod {
		if v == nil {
			return nil
		}
		return v.ComparisonMethod
	}).(TemplateComparisonMethodPtrOutput)
}

type TemplateComparisonFormatConfiguration struct {
	// The number display format.
	NumberDisplayFormatConfiguration *TemplateNumberDisplayFormatConfiguration `pulumi:"numberDisplayFormatConfiguration"`
	// The percentage display format.
	PercentageDisplayFormatConfiguration *TemplatePercentageDisplayFormatConfiguration `pulumi:"percentageDisplayFormatConfiguration"`
}

// TemplateComparisonFormatConfigurationInput is an input type that accepts TemplateComparisonFormatConfigurationArgs and TemplateComparisonFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateComparisonFormatConfigurationInput` via:
//
//	TemplateComparisonFormatConfigurationArgs{...}
type TemplateComparisonFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateComparisonFormatConfigurationOutput() TemplateComparisonFormatConfigurationOutput
	ToTemplateComparisonFormatConfigurationOutputWithContext(context.Context) TemplateComparisonFormatConfigurationOutput
}

type TemplateComparisonFormatConfigurationArgs struct {
	// The number display format.
	NumberDisplayFormatConfiguration TemplateNumberDisplayFormatConfigurationPtrInput `pulumi:"numberDisplayFormatConfiguration"`
	// The percentage display format.
	PercentageDisplayFormatConfiguration TemplatePercentageDisplayFormatConfigurationPtrInput `pulumi:"percentageDisplayFormatConfiguration"`
}

func (TemplateComparisonFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComparisonFormatConfiguration)(nil)).Elem()
}

func (i TemplateComparisonFormatConfigurationArgs) ToTemplateComparisonFormatConfigurationOutput() TemplateComparisonFormatConfigurationOutput {
	return i.ToTemplateComparisonFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateComparisonFormatConfigurationArgs) ToTemplateComparisonFormatConfigurationOutputWithContext(ctx context.Context) TemplateComparisonFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComparisonFormatConfigurationOutput)
}

func (i TemplateComparisonFormatConfigurationArgs) ToTemplateComparisonFormatConfigurationPtrOutput() TemplateComparisonFormatConfigurationPtrOutput {
	return i.ToTemplateComparisonFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateComparisonFormatConfigurationArgs) ToTemplateComparisonFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComparisonFormatConfigurationOutput).ToTemplateComparisonFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateComparisonFormatConfigurationPtrInput is an input type that accepts TemplateComparisonFormatConfigurationArgs, TemplateComparisonFormatConfigurationPtr and TemplateComparisonFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateComparisonFormatConfigurationPtrInput` via:
//
//	        TemplateComparisonFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateComparisonFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateComparisonFormatConfigurationPtrOutput() TemplateComparisonFormatConfigurationPtrOutput
	ToTemplateComparisonFormatConfigurationPtrOutputWithContext(context.Context) TemplateComparisonFormatConfigurationPtrOutput
}

type templateComparisonFormatConfigurationPtrType TemplateComparisonFormatConfigurationArgs

func TemplateComparisonFormatConfigurationPtr(v *TemplateComparisonFormatConfigurationArgs) TemplateComparisonFormatConfigurationPtrInput {
	return (*templateComparisonFormatConfigurationPtrType)(v)
}

func (*templateComparisonFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComparisonFormatConfiguration)(nil)).Elem()
}

func (i *templateComparisonFormatConfigurationPtrType) ToTemplateComparisonFormatConfigurationPtrOutput() TemplateComparisonFormatConfigurationPtrOutput {
	return i.ToTemplateComparisonFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateComparisonFormatConfigurationPtrType) ToTemplateComparisonFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComparisonFormatConfigurationPtrOutput)
}

type TemplateComparisonFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateComparisonFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComparisonFormatConfiguration)(nil)).Elem()
}

func (o TemplateComparisonFormatConfigurationOutput) ToTemplateComparisonFormatConfigurationOutput() TemplateComparisonFormatConfigurationOutput {
	return o
}

func (o TemplateComparisonFormatConfigurationOutput) ToTemplateComparisonFormatConfigurationOutputWithContext(ctx context.Context) TemplateComparisonFormatConfigurationOutput {
	return o
}

func (o TemplateComparisonFormatConfigurationOutput) ToTemplateComparisonFormatConfigurationPtrOutput() TemplateComparisonFormatConfigurationPtrOutput {
	return o.ToTemplateComparisonFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateComparisonFormatConfigurationOutput) ToTemplateComparisonFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateComparisonFormatConfiguration) *TemplateComparisonFormatConfiguration {
		return &v
	}).(TemplateComparisonFormatConfigurationPtrOutput)
}

// The number display format.
func (o TemplateComparisonFormatConfigurationOutput) NumberDisplayFormatConfiguration() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateComparisonFormatConfiguration) *TemplateNumberDisplayFormatConfiguration {
		return v.NumberDisplayFormatConfiguration
	}).(TemplateNumberDisplayFormatConfigurationPtrOutput)
}

// The percentage display format.
func (o TemplateComparisonFormatConfigurationOutput) PercentageDisplayFormatConfiguration() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateComparisonFormatConfiguration) *TemplatePercentageDisplayFormatConfiguration {
		return v.PercentageDisplayFormatConfiguration
	}).(TemplatePercentageDisplayFormatConfigurationPtrOutput)
}

type TemplateComparisonFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateComparisonFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateComparisonFormatConfiguration)(nil)).Elem()
}

func (o TemplateComparisonFormatConfigurationPtrOutput) ToTemplateComparisonFormatConfigurationPtrOutput() TemplateComparisonFormatConfigurationPtrOutput {
	return o
}

func (o TemplateComparisonFormatConfigurationPtrOutput) ToTemplateComparisonFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateComparisonFormatConfigurationPtrOutput {
	return o
}

func (o TemplateComparisonFormatConfigurationPtrOutput) Elem() TemplateComparisonFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateComparisonFormatConfiguration) TemplateComparisonFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateComparisonFormatConfiguration
		return ret
	}).(TemplateComparisonFormatConfigurationOutput)
}

// The number display format.
func (o TemplateComparisonFormatConfigurationPtrOutput) NumberDisplayFormatConfiguration() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateComparisonFormatConfiguration) *TemplateNumberDisplayFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NumberDisplayFormatConfiguration
	}).(TemplateNumberDisplayFormatConfigurationPtrOutput)
}

// The percentage display format.
func (o TemplateComparisonFormatConfigurationPtrOutput) PercentageDisplayFormatConfiguration() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateComparisonFormatConfiguration) *TemplatePercentageDisplayFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.PercentageDisplayFormatConfiguration
	}).(TemplatePercentageDisplayFormatConfigurationPtrOutput)
}

type TemplateComputation struct {
	// The forecast computation configuration.
	Forecast *TemplateForecastComputation `pulumi:"forecast"`
	// The growth rate computation configuration.
	GrowthRate *TemplateGrowthRateComputation `pulumi:"growthRate"`
	// The maximum and minimum computation configuration.
	MaximumMinimum *TemplateMaximumMinimumComputation `pulumi:"maximumMinimum"`
	// The metric comparison computation configuration.
	MetricComparison *TemplateMetricComparisonComputation `pulumi:"metricComparison"`
	// The period over period computation configuration.
	PeriodOverPeriod *TemplatePeriodOverPeriodComputation `pulumi:"periodOverPeriod"`
	// The period to `DataSetIdentifier` computation configuration.
	PeriodToDate *TemplatePeriodToDateComputation `pulumi:"periodToDate"`
	// The top movers and bottom movers computation configuration.
	TopBottomMovers *TemplateTopBottomMoversComputation `pulumi:"topBottomMovers"`
	// The top ranked and bottom ranked computation configuration.
	TopBottomRanked *TemplateTopBottomRankedComputation `pulumi:"topBottomRanked"`
	// The total aggregation computation configuration.
	TotalAggregation *TemplateTotalAggregationComputation `pulumi:"totalAggregation"`
	// The unique values computation configuration.
	UniqueValues *TemplateUniqueValuesComputation `pulumi:"uniqueValues"`
}

// TemplateComputationInput is an input type that accepts TemplateComputationArgs and TemplateComputationOutput values.
// You can construct a concrete instance of `TemplateComputationInput` via:
//
//	TemplateComputationArgs{...}
type TemplateComputationInput interface {
	pulumi.Input

	ToTemplateComputationOutput() TemplateComputationOutput
	ToTemplateComputationOutputWithContext(context.Context) TemplateComputationOutput
}

type TemplateComputationArgs struct {
	// The forecast computation configuration.
	Forecast TemplateForecastComputationPtrInput `pulumi:"forecast"`
	// The growth rate computation configuration.
	GrowthRate TemplateGrowthRateComputationPtrInput `pulumi:"growthRate"`
	// The maximum and minimum computation configuration.
	MaximumMinimum TemplateMaximumMinimumComputationPtrInput `pulumi:"maximumMinimum"`
	// The metric comparison computation configuration.
	MetricComparison TemplateMetricComparisonComputationPtrInput `pulumi:"metricComparison"`
	// The period over period computation configuration.
	PeriodOverPeriod TemplatePeriodOverPeriodComputationPtrInput `pulumi:"periodOverPeriod"`
	// The period to `DataSetIdentifier` computation configuration.
	PeriodToDate TemplatePeriodToDateComputationPtrInput `pulumi:"periodToDate"`
	// The top movers and bottom movers computation configuration.
	TopBottomMovers TemplateTopBottomMoversComputationPtrInput `pulumi:"topBottomMovers"`
	// The top ranked and bottom ranked computation configuration.
	TopBottomRanked TemplateTopBottomRankedComputationPtrInput `pulumi:"topBottomRanked"`
	// The total aggregation computation configuration.
	TotalAggregation TemplateTotalAggregationComputationPtrInput `pulumi:"totalAggregation"`
	// The unique values computation configuration.
	UniqueValues TemplateUniqueValuesComputationPtrInput `pulumi:"uniqueValues"`
}

func (TemplateComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComputation)(nil)).Elem()
}

func (i TemplateComputationArgs) ToTemplateComputationOutput() TemplateComputationOutput {
	return i.ToTemplateComputationOutputWithContext(context.Background())
}

func (i TemplateComputationArgs) ToTemplateComputationOutputWithContext(ctx context.Context) TemplateComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComputationOutput)
}

// TemplateComputationArrayInput is an input type that accepts TemplateComputationArray and TemplateComputationArrayOutput values.
// You can construct a concrete instance of `TemplateComputationArrayInput` via:
//
//	TemplateComputationArray{ TemplateComputationArgs{...} }
type TemplateComputationArrayInput interface {
	pulumi.Input

	ToTemplateComputationArrayOutput() TemplateComputationArrayOutput
	ToTemplateComputationArrayOutputWithContext(context.Context) TemplateComputationArrayOutput
}

type TemplateComputationArray []TemplateComputationInput

func (TemplateComputationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateComputation)(nil)).Elem()
}

func (i TemplateComputationArray) ToTemplateComputationArrayOutput() TemplateComputationArrayOutput {
	return i.ToTemplateComputationArrayOutputWithContext(context.Background())
}

func (i TemplateComputationArray) ToTemplateComputationArrayOutputWithContext(ctx context.Context) TemplateComputationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateComputationArrayOutput)
}

type TemplateComputationOutput struct{ *pulumi.OutputState }

func (TemplateComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateComputation)(nil)).Elem()
}

func (o TemplateComputationOutput) ToTemplateComputationOutput() TemplateComputationOutput {
	return o
}

func (o TemplateComputationOutput) ToTemplateComputationOutputWithContext(ctx context.Context) TemplateComputationOutput {
	return o
}

// The forecast computation configuration.
func (o TemplateComputationOutput) Forecast() TemplateForecastComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateForecastComputation { return v.Forecast }).(TemplateForecastComputationPtrOutput)
}

// The growth rate computation configuration.
func (o TemplateComputationOutput) GrowthRate() TemplateGrowthRateComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateGrowthRateComputation { return v.GrowthRate }).(TemplateGrowthRateComputationPtrOutput)
}

// The maximum and minimum computation configuration.
func (o TemplateComputationOutput) MaximumMinimum() TemplateMaximumMinimumComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateMaximumMinimumComputation { return v.MaximumMinimum }).(TemplateMaximumMinimumComputationPtrOutput)
}

// The metric comparison computation configuration.
func (o TemplateComputationOutput) MetricComparison() TemplateMetricComparisonComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateMetricComparisonComputation { return v.MetricComparison }).(TemplateMetricComparisonComputationPtrOutput)
}

// The period over period computation configuration.
func (o TemplateComputationOutput) PeriodOverPeriod() TemplatePeriodOverPeriodComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplatePeriodOverPeriodComputation { return v.PeriodOverPeriod }).(TemplatePeriodOverPeriodComputationPtrOutput)
}

// The period to `DataSetIdentifier` computation configuration.
func (o TemplateComputationOutput) PeriodToDate() TemplatePeriodToDateComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplatePeriodToDateComputation { return v.PeriodToDate }).(TemplatePeriodToDateComputationPtrOutput)
}

// The top movers and bottom movers computation configuration.
func (o TemplateComputationOutput) TopBottomMovers() TemplateTopBottomMoversComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateTopBottomMoversComputation { return v.TopBottomMovers }).(TemplateTopBottomMoversComputationPtrOutput)
}

// The top ranked and bottom ranked computation configuration.
func (o TemplateComputationOutput) TopBottomRanked() TemplateTopBottomRankedComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateTopBottomRankedComputation { return v.TopBottomRanked }).(TemplateTopBottomRankedComputationPtrOutput)
}

// The total aggregation computation configuration.
func (o TemplateComputationOutput) TotalAggregation() TemplateTotalAggregationComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateTotalAggregationComputation { return v.TotalAggregation }).(TemplateTotalAggregationComputationPtrOutput)
}

// The unique values computation configuration.
func (o TemplateComputationOutput) UniqueValues() TemplateUniqueValuesComputationPtrOutput {
	return o.ApplyT(func(v TemplateComputation) *TemplateUniqueValuesComputation { return v.UniqueValues }).(TemplateUniqueValuesComputationPtrOutput)
}

type TemplateComputationArrayOutput struct{ *pulumi.OutputState }

func (TemplateComputationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateComputation)(nil)).Elem()
}

func (o TemplateComputationArrayOutput) ToTemplateComputationArrayOutput() TemplateComputationArrayOutput {
	return o
}

func (o TemplateComputationArrayOutput) ToTemplateComputationArrayOutputWithContext(ctx context.Context) TemplateComputationArrayOutput {
	return o
}

func (o TemplateComputationArrayOutput) Index(i pulumi.IntInput) TemplateComputationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateComputation {
		return vs[0].([]TemplateComputation)[vs[1].(int)]
	}).(TemplateComputationOutput)
}

type TemplateConditionalFormattingColor struct {
	// Formatting configuration for gradient color.
	Gradient *TemplateConditionalFormattingGradientColor `pulumi:"gradient"`
	// Formatting configuration for solid color.
	Solid *TemplateConditionalFormattingSolidColor `pulumi:"solid"`
}

// TemplateConditionalFormattingColorInput is an input type that accepts TemplateConditionalFormattingColorArgs and TemplateConditionalFormattingColorOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingColorInput` via:
//
//	TemplateConditionalFormattingColorArgs{...}
type TemplateConditionalFormattingColorInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingColorOutput() TemplateConditionalFormattingColorOutput
	ToTemplateConditionalFormattingColorOutputWithContext(context.Context) TemplateConditionalFormattingColorOutput
}

type TemplateConditionalFormattingColorArgs struct {
	// Formatting configuration for gradient color.
	Gradient TemplateConditionalFormattingGradientColorPtrInput `pulumi:"gradient"`
	// Formatting configuration for solid color.
	Solid TemplateConditionalFormattingSolidColorPtrInput `pulumi:"solid"`
}

func (TemplateConditionalFormattingColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingColor)(nil)).Elem()
}

func (i TemplateConditionalFormattingColorArgs) ToTemplateConditionalFormattingColorOutput() TemplateConditionalFormattingColorOutput {
	return i.ToTemplateConditionalFormattingColorOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingColorArgs) ToTemplateConditionalFormattingColorOutputWithContext(ctx context.Context) TemplateConditionalFormattingColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingColorOutput)
}

func (i TemplateConditionalFormattingColorArgs) ToTemplateConditionalFormattingColorPtrOutput() TemplateConditionalFormattingColorPtrOutput {
	return i.ToTemplateConditionalFormattingColorPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingColorArgs) ToTemplateConditionalFormattingColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingColorOutput).ToTemplateConditionalFormattingColorPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingColorPtrInput is an input type that accepts TemplateConditionalFormattingColorArgs, TemplateConditionalFormattingColorPtr and TemplateConditionalFormattingColorPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingColorPtrInput` via:
//
//	        TemplateConditionalFormattingColorArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingColorPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingColorPtrOutput() TemplateConditionalFormattingColorPtrOutput
	ToTemplateConditionalFormattingColorPtrOutputWithContext(context.Context) TemplateConditionalFormattingColorPtrOutput
}

type templateConditionalFormattingColorPtrType TemplateConditionalFormattingColorArgs

func TemplateConditionalFormattingColorPtr(v *TemplateConditionalFormattingColorArgs) TemplateConditionalFormattingColorPtrInput {
	return (*templateConditionalFormattingColorPtrType)(v)
}

func (*templateConditionalFormattingColorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingColor)(nil)).Elem()
}

func (i *templateConditionalFormattingColorPtrType) ToTemplateConditionalFormattingColorPtrOutput() TemplateConditionalFormattingColorPtrOutput {
	return i.ToTemplateConditionalFormattingColorPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingColorPtrType) ToTemplateConditionalFormattingColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateConditionalFormattingColorOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingColor)(nil)).Elem()
}

func (o TemplateConditionalFormattingColorOutput) ToTemplateConditionalFormattingColorOutput() TemplateConditionalFormattingColorOutput {
	return o
}

func (o TemplateConditionalFormattingColorOutput) ToTemplateConditionalFormattingColorOutputWithContext(ctx context.Context) TemplateConditionalFormattingColorOutput {
	return o
}

func (o TemplateConditionalFormattingColorOutput) ToTemplateConditionalFormattingColorPtrOutput() TemplateConditionalFormattingColorPtrOutput {
	return o.ToTemplateConditionalFormattingColorPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingColorOutput) ToTemplateConditionalFormattingColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingColor) *TemplateConditionalFormattingColor {
		return &v
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// Formatting configuration for gradient color.
func (o TemplateConditionalFormattingColorOutput) Gradient() TemplateConditionalFormattingGradientColorPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingColor) *TemplateConditionalFormattingGradientColor {
		return v.Gradient
	}).(TemplateConditionalFormattingGradientColorPtrOutput)
}

// Formatting configuration for solid color.
func (o TemplateConditionalFormattingColorOutput) Solid() TemplateConditionalFormattingSolidColorPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingColor) *TemplateConditionalFormattingSolidColor { return v.Solid }).(TemplateConditionalFormattingSolidColorPtrOutput)
}

type TemplateConditionalFormattingColorPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingColor)(nil)).Elem()
}

func (o TemplateConditionalFormattingColorPtrOutput) ToTemplateConditionalFormattingColorPtrOutput() TemplateConditionalFormattingColorPtrOutput {
	return o
}

func (o TemplateConditionalFormattingColorPtrOutput) ToTemplateConditionalFormattingColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingColorPtrOutput {
	return o
}

func (o TemplateConditionalFormattingColorPtrOutput) Elem() TemplateConditionalFormattingColorOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingColor) TemplateConditionalFormattingColor {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingColor
		return ret
	}).(TemplateConditionalFormattingColorOutput)
}

// Formatting configuration for gradient color.
func (o TemplateConditionalFormattingColorPtrOutput) Gradient() TemplateConditionalFormattingGradientColorPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingColor) *TemplateConditionalFormattingGradientColor {
		if v == nil {
			return nil
		}
		return v.Gradient
	}).(TemplateConditionalFormattingGradientColorPtrOutput)
}

// Formatting configuration for solid color.
func (o TemplateConditionalFormattingColorPtrOutput) Solid() TemplateConditionalFormattingSolidColorPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingColor) *TemplateConditionalFormattingSolidColor {
		if v == nil {
			return nil
		}
		return v.Solid
	}).(TemplateConditionalFormattingSolidColorPtrOutput)
}

type TemplateConditionalFormattingCustomIconCondition struct {
	// Determines the color of the icon.
	Color *string `pulumi:"color"`
	// Determines the icon display configuration.
	DisplayConfiguration *TemplateConditionalFormattingIconDisplayConfiguration `pulumi:"displayConfiguration"`
	// The expression that determines the condition of the icon set.
	Expression string `pulumi:"expression"`
	// Custom icon options for an icon set.
	IconOptions TemplateConditionalFormattingCustomIconOptions `pulumi:"iconOptions"`
}

// TemplateConditionalFormattingCustomIconConditionInput is an input type that accepts TemplateConditionalFormattingCustomIconConditionArgs and TemplateConditionalFormattingCustomIconConditionOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingCustomIconConditionInput` via:
//
//	TemplateConditionalFormattingCustomIconConditionArgs{...}
type TemplateConditionalFormattingCustomIconConditionInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingCustomIconConditionOutput() TemplateConditionalFormattingCustomIconConditionOutput
	ToTemplateConditionalFormattingCustomIconConditionOutputWithContext(context.Context) TemplateConditionalFormattingCustomIconConditionOutput
}

type TemplateConditionalFormattingCustomIconConditionArgs struct {
	// Determines the color of the icon.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Determines the icon display configuration.
	DisplayConfiguration TemplateConditionalFormattingIconDisplayConfigurationPtrInput `pulumi:"displayConfiguration"`
	// The expression that determines the condition of the icon set.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Custom icon options for an icon set.
	IconOptions TemplateConditionalFormattingCustomIconOptionsInput `pulumi:"iconOptions"`
}

func (TemplateConditionalFormattingCustomIconConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingCustomIconCondition)(nil)).Elem()
}

func (i TemplateConditionalFormattingCustomIconConditionArgs) ToTemplateConditionalFormattingCustomIconConditionOutput() TemplateConditionalFormattingCustomIconConditionOutput {
	return i.ToTemplateConditionalFormattingCustomIconConditionOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingCustomIconConditionArgs) ToTemplateConditionalFormattingCustomIconConditionOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingCustomIconConditionOutput)
}

func (i TemplateConditionalFormattingCustomIconConditionArgs) ToTemplateConditionalFormattingCustomIconConditionPtrOutput() TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return i.ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingCustomIconConditionArgs) ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingCustomIconConditionOutput).ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingCustomIconConditionPtrInput is an input type that accepts TemplateConditionalFormattingCustomIconConditionArgs, TemplateConditionalFormattingCustomIconConditionPtr and TemplateConditionalFormattingCustomIconConditionPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingCustomIconConditionPtrInput` via:
//
//	        TemplateConditionalFormattingCustomIconConditionArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingCustomIconConditionPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingCustomIconConditionPtrOutput() TemplateConditionalFormattingCustomIconConditionPtrOutput
	ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(context.Context) TemplateConditionalFormattingCustomIconConditionPtrOutput
}

type templateConditionalFormattingCustomIconConditionPtrType TemplateConditionalFormattingCustomIconConditionArgs

func TemplateConditionalFormattingCustomIconConditionPtr(v *TemplateConditionalFormattingCustomIconConditionArgs) TemplateConditionalFormattingCustomIconConditionPtrInput {
	return (*templateConditionalFormattingCustomIconConditionPtrType)(v)
}

func (*templateConditionalFormattingCustomIconConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingCustomIconCondition)(nil)).Elem()
}

func (i *templateConditionalFormattingCustomIconConditionPtrType) ToTemplateConditionalFormattingCustomIconConditionPtrOutput() TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return i.ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingCustomIconConditionPtrType) ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingCustomIconConditionPtrOutput)
}

type TemplateConditionalFormattingCustomIconConditionOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingCustomIconConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingCustomIconCondition)(nil)).Elem()
}

func (o TemplateConditionalFormattingCustomIconConditionOutput) ToTemplateConditionalFormattingCustomIconConditionOutput() TemplateConditionalFormattingCustomIconConditionOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconConditionOutput) ToTemplateConditionalFormattingCustomIconConditionOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconConditionOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconConditionOutput) ToTemplateConditionalFormattingCustomIconConditionPtrOutput() TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return o.ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingCustomIconConditionOutput) ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingCustomIconCondition) *TemplateConditionalFormattingCustomIconCondition {
		return &v
	}).(TemplateConditionalFormattingCustomIconConditionPtrOutput)
}

// Determines the color of the icon.
func (o TemplateConditionalFormattingCustomIconConditionOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingCustomIconCondition) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Determines the icon display configuration.
func (o TemplateConditionalFormattingCustomIconConditionOutput) DisplayConfiguration() TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingCustomIconCondition) *TemplateConditionalFormattingIconDisplayConfiguration {
		return v.DisplayConfiguration
	}).(TemplateConditionalFormattingIconDisplayConfigurationPtrOutput)
}

// The expression that determines the condition of the icon set.
func (o TemplateConditionalFormattingCustomIconConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingCustomIconCondition) string { return v.Expression }).(pulumi.StringOutput)
}

// Custom icon options for an icon set.
func (o TemplateConditionalFormattingCustomIconConditionOutput) IconOptions() TemplateConditionalFormattingCustomIconOptionsOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingCustomIconCondition) TemplateConditionalFormattingCustomIconOptions {
		return v.IconOptions
	}).(TemplateConditionalFormattingCustomIconOptionsOutput)
}

type TemplateConditionalFormattingCustomIconConditionPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingCustomIconConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingCustomIconCondition)(nil)).Elem()
}

func (o TemplateConditionalFormattingCustomIconConditionPtrOutput) ToTemplateConditionalFormattingCustomIconConditionPtrOutput() TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconConditionPtrOutput) ToTemplateConditionalFormattingCustomIconConditionPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconConditionPtrOutput) Elem() TemplateConditionalFormattingCustomIconConditionOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconCondition) TemplateConditionalFormattingCustomIconCondition {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingCustomIconCondition
		return ret
	}).(TemplateConditionalFormattingCustomIconConditionOutput)
}

// Determines the color of the icon.
func (o TemplateConditionalFormattingCustomIconConditionPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconCondition) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// Determines the icon display configuration.
func (o TemplateConditionalFormattingCustomIconConditionPtrOutput) DisplayConfiguration() TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconCondition) *TemplateConditionalFormattingIconDisplayConfiguration {
		if v == nil {
			return nil
		}
		return v.DisplayConfiguration
	}).(TemplateConditionalFormattingIconDisplayConfigurationPtrOutput)
}

// The expression that determines the condition of the icon set.
func (o TemplateConditionalFormattingCustomIconConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// Custom icon options for an icon set.
func (o TemplateConditionalFormattingCustomIconConditionPtrOutput) IconOptions() TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconCondition) *TemplateConditionalFormattingCustomIconOptions {
		if v == nil {
			return nil
		}
		return &v.IconOptions
	}).(TemplateConditionalFormattingCustomIconOptionsPtrOutput)
}

type TemplateConditionalFormattingCustomIconOptions struct {
	// Determines the type of icon.
	Icon *TemplateIcon `pulumi:"icon"`
	// Determines the Unicode icon type.
	UnicodeIcon *string `pulumi:"unicodeIcon"`
}

// TemplateConditionalFormattingCustomIconOptionsInput is an input type that accepts TemplateConditionalFormattingCustomIconOptionsArgs and TemplateConditionalFormattingCustomIconOptionsOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingCustomIconOptionsInput` via:
//
//	TemplateConditionalFormattingCustomIconOptionsArgs{...}
type TemplateConditionalFormattingCustomIconOptionsInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingCustomIconOptionsOutput() TemplateConditionalFormattingCustomIconOptionsOutput
	ToTemplateConditionalFormattingCustomIconOptionsOutputWithContext(context.Context) TemplateConditionalFormattingCustomIconOptionsOutput
}

type TemplateConditionalFormattingCustomIconOptionsArgs struct {
	// Determines the type of icon.
	Icon TemplateIconPtrInput `pulumi:"icon"`
	// Determines the Unicode icon type.
	UnicodeIcon pulumi.StringPtrInput `pulumi:"unicodeIcon"`
}

func (TemplateConditionalFormattingCustomIconOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingCustomIconOptions)(nil)).Elem()
}

func (i TemplateConditionalFormattingCustomIconOptionsArgs) ToTemplateConditionalFormattingCustomIconOptionsOutput() TemplateConditionalFormattingCustomIconOptionsOutput {
	return i.ToTemplateConditionalFormattingCustomIconOptionsOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingCustomIconOptionsArgs) ToTemplateConditionalFormattingCustomIconOptionsOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingCustomIconOptionsOutput)
}

func (i TemplateConditionalFormattingCustomIconOptionsArgs) ToTemplateConditionalFormattingCustomIconOptionsPtrOutput() TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return i.ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingCustomIconOptionsArgs) ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingCustomIconOptionsOutput).ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingCustomIconOptionsPtrInput is an input type that accepts TemplateConditionalFormattingCustomIconOptionsArgs, TemplateConditionalFormattingCustomIconOptionsPtr and TemplateConditionalFormattingCustomIconOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingCustomIconOptionsPtrInput` via:
//
//	        TemplateConditionalFormattingCustomIconOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingCustomIconOptionsPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingCustomIconOptionsPtrOutput() TemplateConditionalFormattingCustomIconOptionsPtrOutput
	ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(context.Context) TemplateConditionalFormattingCustomIconOptionsPtrOutput
}

type templateConditionalFormattingCustomIconOptionsPtrType TemplateConditionalFormattingCustomIconOptionsArgs

func TemplateConditionalFormattingCustomIconOptionsPtr(v *TemplateConditionalFormattingCustomIconOptionsArgs) TemplateConditionalFormattingCustomIconOptionsPtrInput {
	return (*templateConditionalFormattingCustomIconOptionsPtrType)(v)
}

func (*templateConditionalFormattingCustomIconOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingCustomIconOptions)(nil)).Elem()
}

func (i *templateConditionalFormattingCustomIconOptionsPtrType) ToTemplateConditionalFormattingCustomIconOptionsPtrOutput() TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return i.ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingCustomIconOptionsPtrType) ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingCustomIconOptionsPtrOutput)
}

type TemplateConditionalFormattingCustomIconOptionsOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingCustomIconOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingCustomIconOptions)(nil)).Elem()
}

func (o TemplateConditionalFormattingCustomIconOptionsOutput) ToTemplateConditionalFormattingCustomIconOptionsOutput() TemplateConditionalFormattingCustomIconOptionsOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconOptionsOutput) ToTemplateConditionalFormattingCustomIconOptionsOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconOptionsOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconOptionsOutput) ToTemplateConditionalFormattingCustomIconOptionsPtrOutput() TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return o.ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingCustomIconOptionsOutput) ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingCustomIconOptions) *TemplateConditionalFormattingCustomIconOptions {
		return &v
	}).(TemplateConditionalFormattingCustomIconOptionsPtrOutput)
}

// Determines the type of icon.
func (o TemplateConditionalFormattingCustomIconOptionsOutput) Icon() TemplateIconPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingCustomIconOptions) *TemplateIcon { return v.Icon }).(TemplateIconPtrOutput)
}

// Determines the Unicode icon type.
func (o TemplateConditionalFormattingCustomIconOptionsOutput) UnicodeIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingCustomIconOptions) *string { return v.UnicodeIcon }).(pulumi.StringPtrOutput)
}

type TemplateConditionalFormattingCustomIconOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingCustomIconOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingCustomIconOptions)(nil)).Elem()
}

func (o TemplateConditionalFormattingCustomIconOptionsPtrOutput) ToTemplateConditionalFormattingCustomIconOptionsPtrOutput() TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconOptionsPtrOutput) ToTemplateConditionalFormattingCustomIconOptionsPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingCustomIconOptionsPtrOutput {
	return o
}

func (o TemplateConditionalFormattingCustomIconOptionsPtrOutput) Elem() TemplateConditionalFormattingCustomIconOptionsOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconOptions) TemplateConditionalFormattingCustomIconOptions {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingCustomIconOptions
		return ret
	}).(TemplateConditionalFormattingCustomIconOptionsOutput)
}

// Determines the type of icon.
func (o TemplateConditionalFormattingCustomIconOptionsPtrOutput) Icon() TemplateIconPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconOptions) *TemplateIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateIconPtrOutput)
}

// Determines the Unicode icon type.
func (o TemplateConditionalFormattingCustomIconOptionsPtrOutput) UnicodeIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingCustomIconOptions) *string {
		if v == nil {
			return nil
		}
		return v.UnicodeIcon
	}).(pulumi.StringPtrOutput)
}

type TemplateConditionalFormattingGradientColor struct {
	// Determines the color.
	Color TemplateGradientColor `pulumi:"color"`
	// The expression that determines the formatting configuration for gradient color.
	Expression string `pulumi:"expression"`
}

// TemplateConditionalFormattingGradientColorInput is an input type that accepts TemplateConditionalFormattingGradientColorArgs and TemplateConditionalFormattingGradientColorOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingGradientColorInput` via:
//
//	TemplateConditionalFormattingGradientColorArgs{...}
type TemplateConditionalFormattingGradientColorInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingGradientColorOutput() TemplateConditionalFormattingGradientColorOutput
	ToTemplateConditionalFormattingGradientColorOutputWithContext(context.Context) TemplateConditionalFormattingGradientColorOutput
}

type TemplateConditionalFormattingGradientColorArgs struct {
	// Determines the color.
	Color TemplateGradientColorInput `pulumi:"color"`
	// The expression that determines the formatting configuration for gradient color.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (TemplateConditionalFormattingGradientColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingGradientColor)(nil)).Elem()
}

func (i TemplateConditionalFormattingGradientColorArgs) ToTemplateConditionalFormattingGradientColorOutput() TemplateConditionalFormattingGradientColorOutput {
	return i.ToTemplateConditionalFormattingGradientColorOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingGradientColorArgs) ToTemplateConditionalFormattingGradientColorOutputWithContext(ctx context.Context) TemplateConditionalFormattingGradientColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingGradientColorOutput)
}

func (i TemplateConditionalFormattingGradientColorArgs) ToTemplateConditionalFormattingGradientColorPtrOutput() TemplateConditionalFormattingGradientColorPtrOutput {
	return i.ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingGradientColorArgs) ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingGradientColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingGradientColorOutput).ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingGradientColorPtrInput is an input type that accepts TemplateConditionalFormattingGradientColorArgs, TemplateConditionalFormattingGradientColorPtr and TemplateConditionalFormattingGradientColorPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingGradientColorPtrInput` via:
//
//	        TemplateConditionalFormattingGradientColorArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingGradientColorPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingGradientColorPtrOutput() TemplateConditionalFormattingGradientColorPtrOutput
	ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(context.Context) TemplateConditionalFormattingGradientColorPtrOutput
}

type templateConditionalFormattingGradientColorPtrType TemplateConditionalFormattingGradientColorArgs

func TemplateConditionalFormattingGradientColorPtr(v *TemplateConditionalFormattingGradientColorArgs) TemplateConditionalFormattingGradientColorPtrInput {
	return (*templateConditionalFormattingGradientColorPtrType)(v)
}

func (*templateConditionalFormattingGradientColorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingGradientColor)(nil)).Elem()
}

func (i *templateConditionalFormattingGradientColorPtrType) ToTemplateConditionalFormattingGradientColorPtrOutput() TemplateConditionalFormattingGradientColorPtrOutput {
	return i.ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingGradientColorPtrType) ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingGradientColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingGradientColorPtrOutput)
}

type TemplateConditionalFormattingGradientColorOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingGradientColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingGradientColor)(nil)).Elem()
}

func (o TemplateConditionalFormattingGradientColorOutput) ToTemplateConditionalFormattingGradientColorOutput() TemplateConditionalFormattingGradientColorOutput {
	return o
}

func (o TemplateConditionalFormattingGradientColorOutput) ToTemplateConditionalFormattingGradientColorOutputWithContext(ctx context.Context) TemplateConditionalFormattingGradientColorOutput {
	return o
}

func (o TemplateConditionalFormattingGradientColorOutput) ToTemplateConditionalFormattingGradientColorPtrOutput() TemplateConditionalFormattingGradientColorPtrOutput {
	return o.ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingGradientColorOutput) ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingGradientColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingGradientColor) *TemplateConditionalFormattingGradientColor {
		return &v
	}).(TemplateConditionalFormattingGradientColorPtrOutput)
}

// Determines the color.
func (o TemplateConditionalFormattingGradientColorOutput) Color() TemplateGradientColorOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingGradientColor) TemplateGradientColor { return v.Color }).(TemplateGradientColorOutput)
}

// The expression that determines the formatting configuration for gradient color.
func (o TemplateConditionalFormattingGradientColorOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingGradientColor) string { return v.Expression }).(pulumi.StringOutput)
}

type TemplateConditionalFormattingGradientColorPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingGradientColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingGradientColor)(nil)).Elem()
}

func (o TemplateConditionalFormattingGradientColorPtrOutput) ToTemplateConditionalFormattingGradientColorPtrOutput() TemplateConditionalFormattingGradientColorPtrOutput {
	return o
}

func (o TemplateConditionalFormattingGradientColorPtrOutput) ToTemplateConditionalFormattingGradientColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingGradientColorPtrOutput {
	return o
}

func (o TemplateConditionalFormattingGradientColorPtrOutput) Elem() TemplateConditionalFormattingGradientColorOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingGradientColor) TemplateConditionalFormattingGradientColor {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingGradientColor
		return ret
	}).(TemplateConditionalFormattingGradientColorOutput)
}

// Determines the color.
func (o TemplateConditionalFormattingGradientColorPtrOutput) Color() TemplateGradientColorPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingGradientColor) *TemplateGradientColor {
		if v == nil {
			return nil
		}
		return &v.Color
	}).(TemplateGradientColorPtrOutput)
}

// The expression that determines the formatting configuration for gradient color.
func (o TemplateConditionalFormattingGradientColorPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingGradientColor) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

type TemplateConditionalFormattingIcon struct {
	// Determines the custom condition for an icon set.
	CustomCondition *TemplateConditionalFormattingCustomIconCondition `pulumi:"customCondition"`
	// Formatting configuration for icon set.
	IconSet *TemplateConditionalFormattingIconSet `pulumi:"iconSet"`
}

// TemplateConditionalFormattingIconInput is an input type that accepts TemplateConditionalFormattingIconArgs and TemplateConditionalFormattingIconOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingIconInput` via:
//
//	TemplateConditionalFormattingIconArgs{...}
type TemplateConditionalFormattingIconInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingIconOutput() TemplateConditionalFormattingIconOutput
	ToTemplateConditionalFormattingIconOutputWithContext(context.Context) TemplateConditionalFormattingIconOutput
}

type TemplateConditionalFormattingIconArgs struct {
	// Determines the custom condition for an icon set.
	CustomCondition TemplateConditionalFormattingCustomIconConditionPtrInput `pulumi:"customCondition"`
	// Formatting configuration for icon set.
	IconSet TemplateConditionalFormattingIconSetPtrInput `pulumi:"iconSet"`
}

func (TemplateConditionalFormattingIconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingIcon)(nil)).Elem()
}

func (i TemplateConditionalFormattingIconArgs) ToTemplateConditionalFormattingIconOutput() TemplateConditionalFormattingIconOutput {
	return i.ToTemplateConditionalFormattingIconOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingIconArgs) ToTemplateConditionalFormattingIconOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconOutput)
}

func (i TemplateConditionalFormattingIconArgs) ToTemplateConditionalFormattingIconPtrOutput() TemplateConditionalFormattingIconPtrOutput {
	return i.ToTemplateConditionalFormattingIconPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingIconArgs) ToTemplateConditionalFormattingIconPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconOutput).ToTemplateConditionalFormattingIconPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingIconPtrInput is an input type that accepts TemplateConditionalFormattingIconArgs, TemplateConditionalFormattingIconPtr and TemplateConditionalFormattingIconPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingIconPtrInput` via:
//
//	        TemplateConditionalFormattingIconArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingIconPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingIconPtrOutput() TemplateConditionalFormattingIconPtrOutput
	ToTemplateConditionalFormattingIconPtrOutputWithContext(context.Context) TemplateConditionalFormattingIconPtrOutput
}

type templateConditionalFormattingIconPtrType TemplateConditionalFormattingIconArgs

func TemplateConditionalFormattingIconPtr(v *TemplateConditionalFormattingIconArgs) TemplateConditionalFormattingIconPtrInput {
	return (*templateConditionalFormattingIconPtrType)(v)
}

func (*templateConditionalFormattingIconPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingIcon)(nil)).Elem()
}

func (i *templateConditionalFormattingIconPtrType) ToTemplateConditionalFormattingIconPtrOutput() TemplateConditionalFormattingIconPtrOutput {
	return i.ToTemplateConditionalFormattingIconPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingIconPtrType) ToTemplateConditionalFormattingIconPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconPtrOutput)
}

type TemplateConditionalFormattingIconOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingIconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingIcon)(nil)).Elem()
}

func (o TemplateConditionalFormattingIconOutput) ToTemplateConditionalFormattingIconOutput() TemplateConditionalFormattingIconOutput {
	return o
}

func (o TemplateConditionalFormattingIconOutput) ToTemplateConditionalFormattingIconOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconOutput {
	return o
}

func (o TemplateConditionalFormattingIconOutput) ToTemplateConditionalFormattingIconPtrOutput() TemplateConditionalFormattingIconPtrOutput {
	return o.ToTemplateConditionalFormattingIconPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingIconOutput) ToTemplateConditionalFormattingIconPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingIcon) *TemplateConditionalFormattingIcon {
		return &v
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// Determines the custom condition for an icon set.
func (o TemplateConditionalFormattingIconOutput) CustomCondition() TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingIcon) *TemplateConditionalFormattingCustomIconCondition {
		return v.CustomCondition
	}).(TemplateConditionalFormattingCustomIconConditionPtrOutput)
}

// Formatting configuration for icon set.
func (o TemplateConditionalFormattingIconOutput) IconSet() TemplateConditionalFormattingIconSetPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingIcon) *TemplateConditionalFormattingIconSet { return v.IconSet }).(TemplateConditionalFormattingIconSetPtrOutput)
}

type TemplateConditionalFormattingIconPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingIconPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingIcon)(nil)).Elem()
}

func (o TemplateConditionalFormattingIconPtrOutput) ToTemplateConditionalFormattingIconPtrOutput() TemplateConditionalFormattingIconPtrOutput {
	return o
}

func (o TemplateConditionalFormattingIconPtrOutput) ToTemplateConditionalFormattingIconPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconPtrOutput {
	return o
}

func (o TemplateConditionalFormattingIconPtrOutput) Elem() TemplateConditionalFormattingIconOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIcon) TemplateConditionalFormattingIcon {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingIcon
		return ret
	}).(TemplateConditionalFormattingIconOutput)
}

// Determines the custom condition for an icon set.
func (o TemplateConditionalFormattingIconPtrOutput) CustomCondition() TemplateConditionalFormattingCustomIconConditionPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIcon) *TemplateConditionalFormattingCustomIconCondition {
		if v == nil {
			return nil
		}
		return v.CustomCondition
	}).(TemplateConditionalFormattingCustomIconConditionPtrOutput)
}

// Formatting configuration for icon set.
func (o TemplateConditionalFormattingIconPtrOutput) IconSet() TemplateConditionalFormattingIconSetPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIcon) *TemplateConditionalFormattingIconSet {
		if v == nil {
			return nil
		}
		return v.IconSet
	}).(TemplateConditionalFormattingIconSetPtrOutput)
}

type TemplateConditionalFormattingIconDisplayConfiguration struct {
	// Determines the icon display configuration.
	IconDisplayOption *TemplateConditionalFormattingIconDisplayOption `pulumi:"iconDisplayOption"`
}

// TemplateConditionalFormattingIconDisplayConfigurationInput is an input type that accepts TemplateConditionalFormattingIconDisplayConfigurationArgs and TemplateConditionalFormattingIconDisplayConfigurationOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingIconDisplayConfigurationInput` via:
//
//	TemplateConditionalFormattingIconDisplayConfigurationArgs{...}
type TemplateConditionalFormattingIconDisplayConfigurationInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingIconDisplayConfigurationOutput() TemplateConditionalFormattingIconDisplayConfigurationOutput
	ToTemplateConditionalFormattingIconDisplayConfigurationOutputWithContext(context.Context) TemplateConditionalFormattingIconDisplayConfigurationOutput
}

type TemplateConditionalFormattingIconDisplayConfigurationArgs struct {
	// Determines the icon display configuration.
	IconDisplayOption TemplateConditionalFormattingIconDisplayOptionPtrInput `pulumi:"iconDisplayOption"`
}

func (TemplateConditionalFormattingIconDisplayConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingIconDisplayConfiguration)(nil)).Elem()
}

func (i TemplateConditionalFormattingIconDisplayConfigurationArgs) ToTemplateConditionalFormattingIconDisplayConfigurationOutput() TemplateConditionalFormattingIconDisplayConfigurationOutput {
	return i.ToTemplateConditionalFormattingIconDisplayConfigurationOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingIconDisplayConfigurationArgs) ToTemplateConditionalFormattingIconDisplayConfigurationOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconDisplayConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconDisplayConfigurationOutput)
}

func (i TemplateConditionalFormattingIconDisplayConfigurationArgs) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutput() TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return i.ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingIconDisplayConfigurationArgs) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconDisplayConfigurationOutput).ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingIconDisplayConfigurationPtrInput is an input type that accepts TemplateConditionalFormattingIconDisplayConfigurationArgs, TemplateConditionalFormattingIconDisplayConfigurationPtr and TemplateConditionalFormattingIconDisplayConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingIconDisplayConfigurationPtrInput` via:
//
//	        TemplateConditionalFormattingIconDisplayConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingIconDisplayConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutput() TemplateConditionalFormattingIconDisplayConfigurationPtrOutput
	ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(context.Context) TemplateConditionalFormattingIconDisplayConfigurationPtrOutput
}

type templateConditionalFormattingIconDisplayConfigurationPtrType TemplateConditionalFormattingIconDisplayConfigurationArgs

func TemplateConditionalFormattingIconDisplayConfigurationPtr(v *TemplateConditionalFormattingIconDisplayConfigurationArgs) TemplateConditionalFormattingIconDisplayConfigurationPtrInput {
	return (*templateConditionalFormattingIconDisplayConfigurationPtrType)(v)
}

func (*templateConditionalFormattingIconDisplayConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingIconDisplayConfiguration)(nil)).Elem()
}

func (i *templateConditionalFormattingIconDisplayConfigurationPtrType) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutput() TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return i.ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingIconDisplayConfigurationPtrType) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconDisplayConfigurationPtrOutput)
}

type TemplateConditionalFormattingIconDisplayConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingIconDisplayConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingIconDisplayConfiguration)(nil)).Elem()
}

func (o TemplateConditionalFormattingIconDisplayConfigurationOutput) ToTemplateConditionalFormattingIconDisplayConfigurationOutput() TemplateConditionalFormattingIconDisplayConfigurationOutput {
	return o
}

func (o TemplateConditionalFormattingIconDisplayConfigurationOutput) ToTemplateConditionalFormattingIconDisplayConfigurationOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconDisplayConfigurationOutput {
	return o
}

func (o TemplateConditionalFormattingIconDisplayConfigurationOutput) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutput() TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return o.ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingIconDisplayConfigurationOutput) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingIconDisplayConfiguration) *TemplateConditionalFormattingIconDisplayConfiguration {
		return &v
	}).(TemplateConditionalFormattingIconDisplayConfigurationPtrOutput)
}

// Determines the icon display configuration.
func (o TemplateConditionalFormattingIconDisplayConfigurationOutput) IconDisplayOption() TemplateConditionalFormattingIconDisplayOptionPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingIconDisplayConfiguration) *TemplateConditionalFormattingIconDisplayOption {
		return v.IconDisplayOption
	}).(TemplateConditionalFormattingIconDisplayOptionPtrOutput)
}

type TemplateConditionalFormattingIconDisplayConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingIconDisplayConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingIconDisplayConfiguration)(nil)).Elem()
}

func (o TemplateConditionalFormattingIconDisplayConfigurationPtrOutput) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutput() TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return o
}

func (o TemplateConditionalFormattingIconDisplayConfigurationPtrOutput) ToTemplateConditionalFormattingIconDisplayConfigurationPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconDisplayConfigurationPtrOutput {
	return o
}

func (o TemplateConditionalFormattingIconDisplayConfigurationPtrOutput) Elem() TemplateConditionalFormattingIconDisplayConfigurationOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIconDisplayConfiguration) TemplateConditionalFormattingIconDisplayConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingIconDisplayConfiguration
		return ret
	}).(TemplateConditionalFormattingIconDisplayConfigurationOutput)
}

// Determines the icon display configuration.
func (o TemplateConditionalFormattingIconDisplayConfigurationPtrOutput) IconDisplayOption() TemplateConditionalFormattingIconDisplayOptionPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIconDisplayConfiguration) *TemplateConditionalFormattingIconDisplayOption {
		if v == nil {
			return nil
		}
		return v.IconDisplayOption
	}).(TemplateConditionalFormattingIconDisplayOptionPtrOutput)
}

type TemplateConditionalFormattingIconSet struct {
	// The expression that determines the formatting configuration for the icon set.
	Expression string `pulumi:"expression"`
	// Determines the icon set type.
	IconSetType *TemplateConditionalFormattingIconSetType `pulumi:"iconSetType"`
}

// TemplateConditionalFormattingIconSetInput is an input type that accepts TemplateConditionalFormattingIconSetArgs and TemplateConditionalFormattingIconSetOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingIconSetInput` via:
//
//	TemplateConditionalFormattingIconSetArgs{...}
type TemplateConditionalFormattingIconSetInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingIconSetOutput() TemplateConditionalFormattingIconSetOutput
	ToTemplateConditionalFormattingIconSetOutputWithContext(context.Context) TemplateConditionalFormattingIconSetOutput
}

type TemplateConditionalFormattingIconSetArgs struct {
	// The expression that determines the formatting configuration for the icon set.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Determines the icon set type.
	IconSetType TemplateConditionalFormattingIconSetTypePtrInput `pulumi:"iconSetType"`
}

func (TemplateConditionalFormattingIconSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingIconSet)(nil)).Elem()
}

func (i TemplateConditionalFormattingIconSetArgs) ToTemplateConditionalFormattingIconSetOutput() TemplateConditionalFormattingIconSetOutput {
	return i.ToTemplateConditionalFormattingIconSetOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingIconSetArgs) ToTemplateConditionalFormattingIconSetOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconSetOutput)
}

func (i TemplateConditionalFormattingIconSetArgs) ToTemplateConditionalFormattingIconSetPtrOutput() TemplateConditionalFormattingIconSetPtrOutput {
	return i.ToTemplateConditionalFormattingIconSetPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingIconSetArgs) ToTemplateConditionalFormattingIconSetPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconSetOutput).ToTemplateConditionalFormattingIconSetPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingIconSetPtrInput is an input type that accepts TemplateConditionalFormattingIconSetArgs, TemplateConditionalFormattingIconSetPtr and TemplateConditionalFormattingIconSetPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingIconSetPtrInput` via:
//
//	        TemplateConditionalFormattingIconSetArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingIconSetPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingIconSetPtrOutput() TemplateConditionalFormattingIconSetPtrOutput
	ToTemplateConditionalFormattingIconSetPtrOutputWithContext(context.Context) TemplateConditionalFormattingIconSetPtrOutput
}

type templateConditionalFormattingIconSetPtrType TemplateConditionalFormattingIconSetArgs

func TemplateConditionalFormattingIconSetPtr(v *TemplateConditionalFormattingIconSetArgs) TemplateConditionalFormattingIconSetPtrInput {
	return (*templateConditionalFormattingIconSetPtrType)(v)
}

func (*templateConditionalFormattingIconSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingIconSet)(nil)).Elem()
}

func (i *templateConditionalFormattingIconSetPtrType) ToTemplateConditionalFormattingIconSetPtrOutput() TemplateConditionalFormattingIconSetPtrOutput {
	return i.ToTemplateConditionalFormattingIconSetPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingIconSetPtrType) ToTemplateConditionalFormattingIconSetPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingIconSetPtrOutput)
}

type TemplateConditionalFormattingIconSetOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingIconSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingIconSet)(nil)).Elem()
}

func (o TemplateConditionalFormattingIconSetOutput) ToTemplateConditionalFormattingIconSetOutput() TemplateConditionalFormattingIconSetOutput {
	return o
}

func (o TemplateConditionalFormattingIconSetOutput) ToTemplateConditionalFormattingIconSetOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconSetOutput {
	return o
}

func (o TemplateConditionalFormattingIconSetOutput) ToTemplateConditionalFormattingIconSetPtrOutput() TemplateConditionalFormattingIconSetPtrOutput {
	return o.ToTemplateConditionalFormattingIconSetPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingIconSetOutput) ToTemplateConditionalFormattingIconSetPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingIconSet) *TemplateConditionalFormattingIconSet {
		return &v
	}).(TemplateConditionalFormattingIconSetPtrOutput)
}

// The expression that determines the formatting configuration for the icon set.
func (o TemplateConditionalFormattingIconSetOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingIconSet) string { return v.Expression }).(pulumi.StringOutput)
}

// Determines the icon set type.
func (o TemplateConditionalFormattingIconSetOutput) IconSetType() TemplateConditionalFormattingIconSetTypePtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingIconSet) *TemplateConditionalFormattingIconSetType {
		return v.IconSetType
	}).(TemplateConditionalFormattingIconSetTypePtrOutput)
}

type TemplateConditionalFormattingIconSetPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingIconSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingIconSet)(nil)).Elem()
}

func (o TemplateConditionalFormattingIconSetPtrOutput) ToTemplateConditionalFormattingIconSetPtrOutput() TemplateConditionalFormattingIconSetPtrOutput {
	return o
}

func (o TemplateConditionalFormattingIconSetPtrOutput) ToTemplateConditionalFormattingIconSetPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingIconSetPtrOutput {
	return o
}

func (o TemplateConditionalFormattingIconSetPtrOutput) Elem() TemplateConditionalFormattingIconSetOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIconSet) TemplateConditionalFormattingIconSet {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingIconSet
		return ret
	}).(TemplateConditionalFormattingIconSetOutput)
}

// The expression that determines the formatting configuration for the icon set.
func (o TemplateConditionalFormattingIconSetPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIconSet) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// Determines the icon set type.
func (o TemplateConditionalFormattingIconSetPtrOutput) IconSetType() TemplateConditionalFormattingIconSetTypePtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingIconSet) *TemplateConditionalFormattingIconSetType {
		if v == nil {
			return nil
		}
		return v.IconSetType
	}).(TemplateConditionalFormattingIconSetTypePtrOutput)
}

type TemplateConditionalFormattingSolidColor struct {
	// Determines the color.
	Color *string `pulumi:"color"`
	// The expression that determines the formatting configuration for solid color.
	Expression string `pulumi:"expression"`
}

// TemplateConditionalFormattingSolidColorInput is an input type that accepts TemplateConditionalFormattingSolidColorArgs and TemplateConditionalFormattingSolidColorOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingSolidColorInput` via:
//
//	TemplateConditionalFormattingSolidColorArgs{...}
type TemplateConditionalFormattingSolidColorInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingSolidColorOutput() TemplateConditionalFormattingSolidColorOutput
	ToTemplateConditionalFormattingSolidColorOutputWithContext(context.Context) TemplateConditionalFormattingSolidColorOutput
}

type TemplateConditionalFormattingSolidColorArgs struct {
	// Determines the color.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The expression that determines the formatting configuration for solid color.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (TemplateConditionalFormattingSolidColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingSolidColor)(nil)).Elem()
}

func (i TemplateConditionalFormattingSolidColorArgs) ToTemplateConditionalFormattingSolidColorOutput() TemplateConditionalFormattingSolidColorOutput {
	return i.ToTemplateConditionalFormattingSolidColorOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingSolidColorArgs) ToTemplateConditionalFormattingSolidColorOutputWithContext(ctx context.Context) TemplateConditionalFormattingSolidColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingSolidColorOutput)
}

func (i TemplateConditionalFormattingSolidColorArgs) ToTemplateConditionalFormattingSolidColorPtrOutput() TemplateConditionalFormattingSolidColorPtrOutput {
	return i.ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(context.Background())
}

func (i TemplateConditionalFormattingSolidColorArgs) ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingSolidColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingSolidColorOutput).ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(ctx)
}

// TemplateConditionalFormattingSolidColorPtrInput is an input type that accepts TemplateConditionalFormattingSolidColorArgs, TemplateConditionalFormattingSolidColorPtr and TemplateConditionalFormattingSolidColorPtrOutput values.
// You can construct a concrete instance of `TemplateConditionalFormattingSolidColorPtrInput` via:
//
//	        TemplateConditionalFormattingSolidColorArgs{...}
//
//	or:
//
//	        nil
type TemplateConditionalFormattingSolidColorPtrInput interface {
	pulumi.Input

	ToTemplateConditionalFormattingSolidColorPtrOutput() TemplateConditionalFormattingSolidColorPtrOutput
	ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(context.Context) TemplateConditionalFormattingSolidColorPtrOutput
}

type templateConditionalFormattingSolidColorPtrType TemplateConditionalFormattingSolidColorArgs

func TemplateConditionalFormattingSolidColorPtr(v *TemplateConditionalFormattingSolidColorArgs) TemplateConditionalFormattingSolidColorPtrInput {
	return (*templateConditionalFormattingSolidColorPtrType)(v)
}

func (*templateConditionalFormattingSolidColorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingSolidColor)(nil)).Elem()
}

func (i *templateConditionalFormattingSolidColorPtrType) ToTemplateConditionalFormattingSolidColorPtrOutput() TemplateConditionalFormattingSolidColorPtrOutput {
	return i.ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(context.Background())
}

func (i *templateConditionalFormattingSolidColorPtrType) ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingSolidColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateConditionalFormattingSolidColorPtrOutput)
}

type TemplateConditionalFormattingSolidColorOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingSolidColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateConditionalFormattingSolidColor)(nil)).Elem()
}

func (o TemplateConditionalFormattingSolidColorOutput) ToTemplateConditionalFormattingSolidColorOutput() TemplateConditionalFormattingSolidColorOutput {
	return o
}

func (o TemplateConditionalFormattingSolidColorOutput) ToTemplateConditionalFormattingSolidColorOutputWithContext(ctx context.Context) TemplateConditionalFormattingSolidColorOutput {
	return o
}

func (o TemplateConditionalFormattingSolidColorOutput) ToTemplateConditionalFormattingSolidColorPtrOutput() TemplateConditionalFormattingSolidColorPtrOutput {
	return o.ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(context.Background())
}

func (o TemplateConditionalFormattingSolidColorOutput) ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingSolidColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateConditionalFormattingSolidColor) *TemplateConditionalFormattingSolidColor {
		return &v
	}).(TemplateConditionalFormattingSolidColorPtrOutput)
}

// Determines the color.
func (o TemplateConditionalFormattingSolidColorOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingSolidColor) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The expression that determines the formatting configuration for solid color.
func (o TemplateConditionalFormattingSolidColorOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateConditionalFormattingSolidColor) string { return v.Expression }).(pulumi.StringOutput)
}

type TemplateConditionalFormattingSolidColorPtrOutput struct{ *pulumi.OutputState }

func (TemplateConditionalFormattingSolidColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateConditionalFormattingSolidColor)(nil)).Elem()
}

func (o TemplateConditionalFormattingSolidColorPtrOutput) ToTemplateConditionalFormattingSolidColorPtrOutput() TemplateConditionalFormattingSolidColorPtrOutput {
	return o
}

func (o TemplateConditionalFormattingSolidColorPtrOutput) ToTemplateConditionalFormattingSolidColorPtrOutputWithContext(ctx context.Context) TemplateConditionalFormattingSolidColorPtrOutput {
	return o
}

func (o TemplateConditionalFormattingSolidColorPtrOutput) Elem() TemplateConditionalFormattingSolidColorOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingSolidColor) TemplateConditionalFormattingSolidColor {
		if v != nil {
			return *v
		}
		var ret TemplateConditionalFormattingSolidColor
		return ret
	}).(TemplateConditionalFormattingSolidColorOutput)
}

// Determines the color.
func (o TemplateConditionalFormattingSolidColorPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingSolidColor) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The expression that determines the formatting configuration for solid color.
func (o TemplateConditionalFormattingSolidColorPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateConditionalFormattingSolidColor) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

type TemplateContextMenuOption struct {
	// The availability status of the context menu options. If the value of this property is set to `ENABLED` , dashboard readers can interact with the context menu.
	AvailabilityStatus *TemplateDashboardBehavior `pulumi:"availabilityStatus"`
}

// TemplateContextMenuOptionInput is an input type that accepts TemplateContextMenuOptionArgs and TemplateContextMenuOptionOutput values.
// You can construct a concrete instance of `TemplateContextMenuOptionInput` via:
//
//	TemplateContextMenuOptionArgs{...}
type TemplateContextMenuOptionInput interface {
	pulumi.Input

	ToTemplateContextMenuOptionOutput() TemplateContextMenuOptionOutput
	ToTemplateContextMenuOptionOutputWithContext(context.Context) TemplateContextMenuOptionOutput
}

type TemplateContextMenuOptionArgs struct {
	// The availability status of the context menu options. If the value of this property is set to `ENABLED` , dashboard readers can interact with the context menu.
	AvailabilityStatus TemplateDashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (TemplateContextMenuOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateContextMenuOption)(nil)).Elem()
}

func (i TemplateContextMenuOptionArgs) ToTemplateContextMenuOptionOutput() TemplateContextMenuOptionOutput {
	return i.ToTemplateContextMenuOptionOutputWithContext(context.Background())
}

func (i TemplateContextMenuOptionArgs) ToTemplateContextMenuOptionOutputWithContext(ctx context.Context) TemplateContextMenuOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateContextMenuOptionOutput)
}

func (i TemplateContextMenuOptionArgs) ToTemplateContextMenuOptionPtrOutput() TemplateContextMenuOptionPtrOutput {
	return i.ToTemplateContextMenuOptionPtrOutputWithContext(context.Background())
}

func (i TemplateContextMenuOptionArgs) ToTemplateContextMenuOptionPtrOutputWithContext(ctx context.Context) TemplateContextMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateContextMenuOptionOutput).ToTemplateContextMenuOptionPtrOutputWithContext(ctx)
}

// TemplateContextMenuOptionPtrInput is an input type that accepts TemplateContextMenuOptionArgs, TemplateContextMenuOptionPtr and TemplateContextMenuOptionPtrOutput values.
// You can construct a concrete instance of `TemplateContextMenuOptionPtrInput` via:
//
//	        TemplateContextMenuOptionArgs{...}
//
//	or:
//
//	        nil
type TemplateContextMenuOptionPtrInput interface {
	pulumi.Input

	ToTemplateContextMenuOptionPtrOutput() TemplateContextMenuOptionPtrOutput
	ToTemplateContextMenuOptionPtrOutputWithContext(context.Context) TemplateContextMenuOptionPtrOutput
}

type templateContextMenuOptionPtrType TemplateContextMenuOptionArgs

func TemplateContextMenuOptionPtr(v *TemplateContextMenuOptionArgs) TemplateContextMenuOptionPtrInput {
	return (*templateContextMenuOptionPtrType)(v)
}

func (*templateContextMenuOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateContextMenuOption)(nil)).Elem()
}

func (i *templateContextMenuOptionPtrType) ToTemplateContextMenuOptionPtrOutput() TemplateContextMenuOptionPtrOutput {
	return i.ToTemplateContextMenuOptionPtrOutputWithContext(context.Background())
}

func (i *templateContextMenuOptionPtrType) ToTemplateContextMenuOptionPtrOutputWithContext(ctx context.Context) TemplateContextMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateContextMenuOptionPtrOutput)
}

type TemplateContextMenuOptionOutput struct{ *pulumi.OutputState }

func (TemplateContextMenuOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateContextMenuOption)(nil)).Elem()
}

func (o TemplateContextMenuOptionOutput) ToTemplateContextMenuOptionOutput() TemplateContextMenuOptionOutput {
	return o
}

func (o TemplateContextMenuOptionOutput) ToTemplateContextMenuOptionOutputWithContext(ctx context.Context) TemplateContextMenuOptionOutput {
	return o
}

func (o TemplateContextMenuOptionOutput) ToTemplateContextMenuOptionPtrOutput() TemplateContextMenuOptionPtrOutput {
	return o.ToTemplateContextMenuOptionPtrOutputWithContext(context.Background())
}

func (o TemplateContextMenuOptionOutput) ToTemplateContextMenuOptionPtrOutputWithContext(ctx context.Context) TemplateContextMenuOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateContextMenuOption) *TemplateContextMenuOption {
		return &v
	}).(TemplateContextMenuOptionPtrOutput)
}

// The availability status of the context menu options. If the value of this property is set to `ENABLED` , dashboard readers can interact with the context menu.
func (o TemplateContextMenuOptionOutput) AvailabilityStatus() TemplateDashboardBehaviorPtrOutput {
	return o.ApplyT(func(v TemplateContextMenuOption) *TemplateDashboardBehavior { return v.AvailabilityStatus }).(TemplateDashboardBehaviorPtrOutput)
}

type TemplateContextMenuOptionPtrOutput struct{ *pulumi.OutputState }

func (TemplateContextMenuOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateContextMenuOption)(nil)).Elem()
}

func (o TemplateContextMenuOptionPtrOutput) ToTemplateContextMenuOptionPtrOutput() TemplateContextMenuOptionPtrOutput {
	return o
}

func (o TemplateContextMenuOptionPtrOutput) ToTemplateContextMenuOptionPtrOutputWithContext(ctx context.Context) TemplateContextMenuOptionPtrOutput {
	return o
}

func (o TemplateContextMenuOptionPtrOutput) Elem() TemplateContextMenuOptionOutput {
	return o.ApplyT(func(v *TemplateContextMenuOption) TemplateContextMenuOption {
		if v != nil {
			return *v
		}
		var ret TemplateContextMenuOption
		return ret
	}).(TemplateContextMenuOptionOutput)
}

// The availability status of the context menu options. If the value of this property is set to `ENABLED` , dashboard readers can interact with the context menu.
func (o TemplateContextMenuOptionPtrOutput) AvailabilityStatus() TemplateDashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *TemplateContextMenuOption) *TemplateDashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(TemplateDashboardBehaviorPtrOutput)
}

type TemplateContributionAnalysisDefault struct {
	// The dimensions columns that are used in the contribution analysis, usually a list of `ColumnIdentifiers` .
	ContributorDimensions []TemplateColumnIdentifier `pulumi:"contributorDimensions"`
	// The measure field that is used in the contribution analysis.
	MeasureFieldId string `pulumi:"measureFieldId"`
}

// TemplateContributionAnalysisDefaultInput is an input type that accepts TemplateContributionAnalysisDefaultArgs and TemplateContributionAnalysisDefaultOutput values.
// You can construct a concrete instance of `TemplateContributionAnalysisDefaultInput` via:
//
//	TemplateContributionAnalysisDefaultArgs{...}
type TemplateContributionAnalysisDefaultInput interface {
	pulumi.Input

	ToTemplateContributionAnalysisDefaultOutput() TemplateContributionAnalysisDefaultOutput
	ToTemplateContributionAnalysisDefaultOutputWithContext(context.Context) TemplateContributionAnalysisDefaultOutput
}

type TemplateContributionAnalysisDefaultArgs struct {
	// The dimensions columns that are used in the contribution analysis, usually a list of `ColumnIdentifiers` .
	ContributorDimensions TemplateColumnIdentifierArrayInput `pulumi:"contributorDimensions"`
	// The measure field that is used in the contribution analysis.
	MeasureFieldId pulumi.StringInput `pulumi:"measureFieldId"`
}

func (TemplateContributionAnalysisDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateContributionAnalysisDefault)(nil)).Elem()
}

func (i TemplateContributionAnalysisDefaultArgs) ToTemplateContributionAnalysisDefaultOutput() TemplateContributionAnalysisDefaultOutput {
	return i.ToTemplateContributionAnalysisDefaultOutputWithContext(context.Background())
}

func (i TemplateContributionAnalysisDefaultArgs) ToTemplateContributionAnalysisDefaultOutputWithContext(ctx context.Context) TemplateContributionAnalysisDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateContributionAnalysisDefaultOutput)
}

// TemplateContributionAnalysisDefaultArrayInput is an input type that accepts TemplateContributionAnalysisDefaultArray and TemplateContributionAnalysisDefaultArrayOutput values.
// You can construct a concrete instance of `TemplateContributionAnalysisDefaultArrayInput` via:
//
//	TemplateContributionAnalysisDefaultArray{ TemplateContributionAnalysisDefaultArgs{...} }
type TemplateContributionAnalysisDefaultArrayInput interface {
	pulumi.Input

	ToTemplateContributionAnalysisDefaultArrayOutput() TemplateContributionAnalysisDefaultArrayOutput
	ToTemplateContributionAnalysisDefaultArrayOutputWithContext(context.Context) TemplateContributionAnalysisDefaultArrayOutput
}

type TemplateContributionAnalysisDefaultArray []TemplateContributionAnalysisDefaultInput

func (TemplateContributionAnalysisDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateContributionAnalysisDefault)(nil)).Elem()
}

func (i TemplateContributionAnalysisDefaultArray) ToTemplateContributionAnalysisDefaultArrayOutput() TemplateContributionAnalysisDefaultArrayOutput {
	return i.ToTemplateContributionAnalysisDefaultArrayOutputWithContext(context.Background())
}

func (i TemplateContributionAnalysisDefaultArray) ToTemplateContributionAnalysisDefaultArrayOutputWithContext(ctx context.Context) TemplateContributionAnalysisDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateContributionAnalysisDefaultArrayOutput)
}

type TemplateContributionAnalysisDefaultOutput struct{ *pulumi.OutputState }

func (TemplateContributionAnalysisDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateContributionAnalysisDefault)(nil)).Elem()
}

func (o TemplateContributionAnalysisDefaultOutput) ToTemplateContributionAnalysisDefaultOutput() TemplateContributionAnalysisDefaultOutput {
	return o
}

func (o TemplateContributionAnalysisDefaultOutput) ToTemplateContributionAnalysisDefaultOutputWithContext(ctx context.Context) TemplateContributionAnalysisDefaultOutput {
	return o
}

// The dimensions columns that are used in the contribution analysis, usually a list of `ColumnIdentifiers` .
func (o TemplateContributionAnalysisDefaultOutput) ContributorDimensions() TemplateColumnIdentifierArrayOutput {
	return o.ApplyT(func(v TemplateContributionAnalysisDefault) []TemplateColumnIdentifier { return v.ContributorDimensions }).(TemplateColumnIdentifierArrayOutput)
}

// The measure field that is used in the contribution analysis.
func (o TemplateContributionAnalysisDefaultOutput) MeasureFieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateContributionAnalysisDefault) string { return v.MeasureFieldId }).(pulumi.StringOutput)
}

type TemplateContributionAnalysisDefaultArrayOutput struct{ *pulumi.OutputState }

func (TemplateContributionAnalysisDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateContributionAnalysisDefault)(nil)).Elem()
}

func (o TemplateContributionAnalysisDefaultArrayOutput) ToTemplateContributionAnalysisDefaultArrayOutput() TemplateContributionAnalysisDefaultArrayOutput {
	return o
}

func (o TemplateContributionAnalysisDefaultArrayOutput) ToTemplateContributionAnalysisDefaultArrayOutputWithContext(ctx context.Context) TemplateContributionAnalysisDefaultArrayOutput {
	return o
}

func (o TemplateContributionAnalysisDefaultArrayOutput) Index(i pulumi.IntInput) TemplateContributionAnalysisDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateContributionAnalysisDefault {
		return vs[0].([]TemplateContributionAnalysisDefault)[vs[1].(int)]
	}).(TemplateContributionAnalysisDefaultOutput)
}

type TemplateCurrencyDisplayFormatConfiguration struct {
	// The option that determines the decimal places configuration.
	DecimalPlacesConfiguration *TemplateDecimalPlacesConfiguration `pulumi:"decimalPlacesConfiguration"`
	// The options that determine the negative value configuration.
	NegativeValueConfiguration *TemplateNegativeValueConfiguration `pulumi:"negativeValueConfiguration"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration *TemplateNullValueFormatConfiguration `pulumi:"nullValueFormatConfiguration"`
	// Determines the number scale value for the currency format.
	NumberScale *TemplateNumberScale `pulumi:"numberScale"`
	// Determines the prefix value of the currency format.
	Prefix *string `pulumi:"prefix"`
	// The options that determine the numeric separator configuration.
	SeparatorConfiguration *TemplateNumericSeparatorConfiguration `pulumi:"separatorConfiguration"`
	// Determines the suffix value of the currency format.
	Suffix *string `pulumi:"suffix"`
	// Determines the symbol for the currency format.
	Symbol *string `pulumi:"symbol"`
}

// TemplateCurrencyDisplayFormatConfigurationInput is an input type that accepts TemplateCurrencyDisplayFormatConfigurationArgs and TemplateCurrencyDisplayFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateCurrencyDisplayFormatConfigurationInput` via:
//
//	TemplateCurrencyDisplayFormatConfigurationArgs{...}
type TemplateCurrencyDisplayFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateCurrencyDisplayFormatConfigurationOutput() TemplateCurrencyDisplayFormatConfigurationOutput
	ToTemplateCurrencyDisplayFormatConfigurationOutputWithContext(context.Context) TemplateCurrencyDisplayFormatConfigurationOutput
}

type TemplateCurrencyDisplayFormatConfigurationArgs struct {
	// The option that determines the decimal places configuration.
	DecimalPlacesConfiguration TemplateDecimalPlacesConfigurationPtrInput `pulumi:"decimalPlacesConfiguration"`
	// The options that determine the negative value configuration.
	NegativeValueConfiguration TemplateNegativeValueConfigurationPtrInput `pulumi:"negativeValueConfiguration"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration TemplateNullValueFormatConfigurationPtrInput `pulumi:"nullValueFormatConfiguration"`
	// Determines the number scale value for the currency format.
	NumberScale TemplateNumberScalePtrInput `pulumi:"numberScale"`
	// Determines the prefix value of the currency format.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The options that determine the numeric separator configuration.
	SeparatorConfiguration TemplateNumericSeparatorConfigurationPtrInput `pulumi:"separatorConfiguration"`
	// Determines the suffix value of the currency format.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
	// Determines the symbol for the currency format.
	Symbol pulumi.StringPtrInput `pulumi:"symbol"`
}

func (TemplateCurrencyDisplayFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCurrencyDisplayFormatConfiguration)(nil)).Elem()
}

func (i TemplateCurrencyDisplayFormatConfigurationArgs) ToTemplateCurrencyDisplayFormatConfigurationOutput() TemplateCurrencyDisplayFormatConfigurationOutput {
	return i.ToTemplateCurrencyDisplayFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateCurrencyDisplayFormatConfigurationArgs) ToTemplateCurrencyDisplayFormatConfigurationOutputWithContext(ctx context.Context) TemplateCurrencyDisplayFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCurrencyDisplayFormatConfigurationOutput)
}

func (i TemplateCurrencyDisplayFormatConfigurationArgs) ToTemplateCurrencyDisplayFormatConfigurationPtrOutput() TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return i.ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateCurrencyDisplayFormatConfigurationArgs) ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCurrencyDisplayFormatConfigurationOutput).ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateCurrencyDisplayFormatConfigurationPtrInput is an input type that accepts TemplateCurrencyDisplayFormatConfigurationArgs, TemplateCurrencyDisplayFormatConfigurationPtr and TemplateCurrencyDisplayFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateCurrencyDisplayFormatConfigurationPtrInput` via:
//
//	        TemplateCurrencyDisplayFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateCurrencyDisplayFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateCurrencyDisplayFormatConfigurationPtrOutput() TemplateCurrencyDisplayFormatConfigurationPtrOutput
	ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(context.Context) TemplateCurrencyDisplayFormatConfigurationPtrOutput
}

type templateCurrencyDisplayFormatConfigurationPtrType TemplateCurrencyDisplayFormatConfigurationArgs

func TemplateCurrencyDisplayFormatConfigurationPtr(v *TemplateCurrencyDisplayFormatConfigurationArgs) TemplateCurrencyDisplayFormatConfigurationPtrInput {
	return (*templateCurrencyDisplayFormatConfigurationPtrType)(v)
}

func (*templateCurrencyDisplayFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCurrencyDisplayFormatConfiguration)(nil)).Elem()
}

func (i *templateCurrencyDisplayFormatConfigurationPtrType) ToTemplateCurrencyDisplayFormatConfigurationPtrOutput() TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return i.ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateCurrencyDisplayFormatConfigurationPtrType) ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCurrencyDisplayFormatConfigurationPtrOutput)
}

type TemplateCurrencyDisplayFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateCurrencyDisplayFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCurrencyDisplayFormatConfiguration)(nil)).Elem()
}

func (o TemplateCurrencyDisplayFormatConfigurationOutput) ToTemplateCurrencyDisplayFormatConfigurationOutput() TemplateCurrencyDisplayFormatConfigurationOutput {
	return o
}

func (o TemplateCurrencyDisplayFormatConfigurationOutput) ToTemplateCurrencyDisplayFormatConfigurationOutputWithContext(ctx context.Context) TemplateCurrencyDisplayFormatConfigurationOutput {
	return o
}

func (o TemplateCurrencyDisplayFormatConfigurationOutput) ToTemplateCurrencyDisplayFormatConfigurationPtrOutput() TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return o.ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateCurrencyDisplayFormatConfigurationOutput) ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCurrencyDisplayFormatConfiguration) *TemplateCurrencyDisplayFormatConfiguration {
		return &v
	}).(TemplateCurrencyDisplayFormatConfigurationPtrOutput)
}

// The option that determines the decimal places configuration.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) DecimalPlacesConfiguration() TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *TemplateDecimalPlacesConfiguration {
		return v.DecimalPlacesConfiguration
	}).(TemplateDecimalPlacesConfigurationPtrOutput)
}

// The options that determine the negative value configuration.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) NegativeValueConfiguration() TemplateNegativeValueConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *TemplateNegativeValueConfiguration {
		return v.NegativeValueConfiguration
	}).(TemplateNegativeValueConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *TemplateNullValueFormatConfiguration {
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// Determines the number scale value for the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) NumberScale() TemplateNumberScalePtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *TemplateNumberScale { return v.NumberScale }).(TemplateNumberScalePtrOutput)
}

// Determines the prefix value of the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The options that determine the numeric separator configuration.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) SeparatorConfiguration() TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *TemplateNumericSeparatorConfiguration {
		return v.SeparatorConfiguration
	}).(TemplateNumericSeparatorConfigurationPtrOutput)
}

// Determines the suffix value of the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

// Determines the symbol for the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationOutput) Symbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCurrencyDisplayFormatConfiguration) *string { return v.Symbol }).(pulumi.StringPtrOutput)
}

type TemplateCurrencyDisplayFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCurrencyDisplayFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCurrencyDisplayFormatConfiguration)(nil)).Elem()
}

func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) ToTemplateCurrencyDisplayFormatConfigurationPtrOutput() TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return o
}

func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) ToTemplateCurrencyDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return o
}

func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) Elem() TemplateCurrencyDisplayFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) TemplateCurrencyDisplayFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateCurrencyDisplayFormatConfiguration
		return ret
	}).(TemplateCurrencyDisplayFormatConfigurationOutput)
}

// The option that determines the decimal places configuration.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) DecimalPlacesConfiguration() TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *TemplateDecimalPlacesConfiguration {
		if v == nil {
			return nil
		}
		return v.DecimalPlacesConfiguration
	}).(TemplateDecimalPlacesConfigurationPtrOutput)
}

// The options that determine the negative value configuration.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) NegativeValueConfiguration() TemplateNegativeValueConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *TemplateNegativeValueConfiguration {
		if v == nil {
			return nil
		}
		return v.NegativeValueConfiguration
	}).(TemplateNegativeValueConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *TemplateNullValueFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// Determines the number scale value for the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) NumberScale() TemplateNumberScalePtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *TemplateNumberScale {
		if v == nil {
			return nil
		}
		return v.NumberScale
	}).(TemplateNumberScalePtrOutput)
}

// Determines the prefix value of the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The options that determine the numeric separator configuration.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) SeparatorConfiguration() TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *TemplateNumericSeparatorConfiguration {
		if v == nil {
			return nil
		}
		return v.SeparatorConfiguration
	}).(TemplateNumericSeparatorConfigurationPtrOutput)
}

// Determines the suffix value of the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

// Determines the symbol for the currency format.
func (o TemplateCurrencyDisplayFormatConfigurationPtrOutput) Symbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCurrencyDisplayFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Symbol
	}).(pulumi.StringPtrOutput)
}

type TemplateCustomActionFilterOperation struct {
	// The configuration that chooses the fields to be filtered.
	SelectedFieldsConfiguration TemplateFilterOperationSelectedFieldsConfiguration `pulumi:"selectedFieldsConfiguration"`
	// The configuration that chooses the target visuals to be filtered.
	TargetVisualsConfiguration TemplateFilterOperationTargetVisualsConfiguration `pulumi:"targetVisualsConfiguration"`
}

// TemplateCustomActionFilterOperationInput is an input type that accepts TemplateCustomActionFilterOperationArgs and TemplateCustomActionFilterOperationOutput values.
// You can construct a concrete instance of `TemplateCustomActionFilterOperationInput` via:
//
//	TemplateCustomActionFilterOperationArgs{...}
type TemplateCustomActionFilterOperationInput interface {
	pulumi.Input

	ToTemplateCustomActionFilterOperationOutput() TemplateCustomActionFilterOperationOutput
	ToTemplateCustomActionFilterOperationOutputWithContext(context.Context) TemplateCustomActionFilterOperationOutput
}

type TemplateCustomActionFilterOperationArgs struct {
	// The configuration that chooses the fields to be filtered.
	SelectedFieldsConfiguration TemplateFilterOperationSelectedFieldsConfigurationInput `pulumi:"selectedFieldsConfiguration"`
	// The configuration that chooses the target visuals to be filtered.
	TargetVisualsConfiguration TemplateFilterOperationTargetVisualsConfigurationInput `pulumi:"targetVisualsConfiguration"`
}

func (TemplateCustomActionFilterOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionFilterOperation)(nil)).Elem()
}

func (i TemplateCustomActionFilterOperationArgs) ToTemplateCustomActionFilterOperationOutput() TemplateCustomActionFilterOperationOutput {
	return i.ToTemplateCustomActionFilterOperationOutputWithContext(context.Background())
}

func (i TemplateCustomActionFilterOperationArgs) ToTemplateCustomActionFilterOperationOutputWithContext(ctx context.Context) TemplateCustomActionFilterOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionFilterOperationOutput)
}

func (i TemplateCustomActionFilterOperationArgs) ToTemplateCustomActionFilterOperationPtrOutput() TemplateCustomActionFilterOperationPtrOutput {
	return i.ToTemplateCustomActionFilterOperationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomActionFilterOperationArgs) ToTemplateCustomActionFilterOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionFilterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionFilterOperationOutput).ToTemplateCustomActionFilterOperationPtrOutputWithContext(ctx)
}

// TemplateCustomActionFilterOperationPtrInput is an input type that accepts TemplateCustomActionFilterOperationArgs, TemplateCustomActionFilterOperationPtr and TemplateCustomActionFilterOperationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomActionFilterOperationPtrInput` via:
//
//	        TemplateCustomActionFilterOperationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomActionFilterOperationPtrInput interface {
	pulumi.Input

	ToTemplateCustomActionFilterOperationPtrOutput() TemplateCustomActionFilterOperationPtrOutput
	ToTemplateCustomActionFilterOperationPtrOutputWithContext(context.Context) TemplateCustomActionFilterOperationPtrOutput
}

type templateCustomActionFilterOperationPtrType TemplateCustomActionFilterOperationArgs

func TemplateCustomActionFilterOperationPtr(v *TemplateCustomActionFilterOperationArgs) TemplateCustomActionFilterOperationPtrInput {
	return (*templateCustomActionFilterOperationPtrType)(v)
}

func (*templateCustomActionFilterOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionFilterOperation)(nil)).Elem()
}

func (i *templateCustomActionFilterOperationPtrType) ToTemplateCustomActionFilterOperationPtrOutput() TemplateCustomActionFilterOperationPtrOutput {
	return i.ToTemplateCustomActionFilterOperationPtrOutputWithContext(context.Background())
}

func (i *templateCustomActionFilterOperationPtrType) ToTemplateCustomActionFilterOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionFilterOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionFilterOperationPtrOutput)
}

type TemplateCustomActionFilterOperationOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionFilterOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionFilterOperation)(nil)).Elem()
}

func (o TemplateCustomActionFilterOperationOutput) ToTemplateCustomActionFilterOperationOutput() TemplateCustomActionFilterOperationOutput {
	return o
}

func (o TemplateCustomActionFilterOperationOutput) ToTemplateCustomActionFilterOperationOutputWithContext(ctx context.Context) TemplateCustomActionFilterOperationOutput {
	return o
}

func (o TemplateCustomActionFilterOperationOutput) ToTemplateCustomActionFilterOperationPtrOutput() TemplateCustomActionFilterOperationPtrOutput {
	return o.ToTemplateCustomActionFilterOperationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomActionFilterOperationOutput) ToTemplateCustomActionFilterOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionFilterOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomActionFilterOperation) *TemplateCustomActionFilterOperation {
		return &v
	}).(TemplateCustomActionFilterOperationPtrOutput)
}

// The configuration that chooses the fields to be filtered.
func (o TemplateCustomActionFilterOperationOutput) SelectedFieldsConfiguration() TemplateFilterOperationSelectedFieldsConfigurationOutput {
	return o.ApplyT(func(v TemplateCustomActionFilterOperation) TemplateFilterOperationSelectedFieldsConfiguration {
		return v.SelectedFieldsConfiguration
	}).(TemplateFilterOperationSelectedFieldsConfigurationOutput)
}

// The configuration that chooses the target visuals to be filtered.
func (o TemplateCustomActionFilterOperationOutput) TargetVisualsConfiguration() TemplateFilterOperationTargetVisualsConfigurationOutput {
	return o.ApplyT(func(v TemplateCustomActionFilterOperation) TemplateFilterOperationTargetVisualsConfiguration {
		return v.TargetVisualsConfiguration
	}).(TemplateFilterOperationTargetVisualsConfigurationOutput)
}

type TemplateCustomActionFilterOperationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionFilterOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionFilterOperation)(nil)).Elem()
}

func (o TemplateCustomActionFilterOperationPtrOutput) ToTemplateCustomActionFilterOperationPtrOutput() TemplateCustomActionFilterOperationPtrOutput {
	return o
}

func (o TemplateCustomActionFilterOperationPtrOutput) ToTemplateCustomActionFilterOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionFilterOperationPtrOutput {
	return o
}

func (o TemplateCustomActionFilterOperationPtrOutput) Elem() TemplateCustomActionFilterOperationOutput {
	return o.ApplyT(func(v *TemplateCustomActionFilterOperation) TemplateCustomActionFilterOperation {
		if v != nil {
			return *v
		}
		var ret TemplateCustomActionFilterOperation
		return ret
	}).(TemplateCustomActionFilterOperationOutput)
}

// The configuration that chooses the fields to be filtered.
func (o TemplateCustomActionFilterOperationPtrOutput) SelectedFieldsConfiguration() TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCustomActionFilterOperation) *TemplateFilterOperationSelectedFieldsConfiguration {
		if v == nil {
			return nil
		}
		return &v.SelectedFieldsConfiguration
	}).(TemplateFilterOperationSelectedFieldsConfigurationPtrOutput)
}

// The configuration that chooses the target visuals to be filtered.
func (o TemplateCustomActionFilterOperationPtrOutput) TargetVisualsConfiguration() TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCustomActionFilterOperation) *TemplateFilterOperationTargetVisualsConfiguration {
		if v == nil {
			return nil
		}
		return &v.TargetVisualsConfiguration
	}).(TemplateFilterOperationTargetVisualsConfigurationPtrOutput)
}

type TemplateCustomActionNavigationOperation struct {
	// The configuration that chooses the navigation target.
	LocalNavigationConfiguration *TemplateLocalNavigationConfiguration `pulumi:"localNavigationConfiguration"`
}

// TemplateCustomActionNavigationOperationInput is an input type that accepts TemplateCustomActionNavigationOperationArgs and TemplateCustomActionNavigationOperationOutput values.
// You can construct a concrete instance of `TemplateCustomActionNavigationOperationInput` via:
//
//	TemplateCustomActionNavigationOperationArgs{...}
type TemplateCustomActionNavigationOperationInput interface {
	pulumi.Input

	ToTemplateCustomActionNavigationOperationOutput() TemplateCustomActionNavigationOperationOutput
	ToTemplateCustomActionNavigationOperationOutputWithContext(context.Context) TemplateCustomActionNavigationOperationOutput
}

type TemplateCustomActionNavigationOperationArgs struct {
	// The configuration that chooses the navigation target.
	LocalNavigationConfiguration TemplateLocalNavigationConfigurationPtrInput `pulumi:"localNavigationConfiguration"`
}

func (TemplateCustomActionNavigationOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionNavigationOperation)(nil)).Elem()
}

func (i TemplateCustomActionNavigationOperationArgs) ToTemplateCustomActionNavigationOperationOutput() TemplateCustomActionNavigationOperationOutput {
	return i.ToTemplateCustomActionNavigationOperationOutputWithContext(context.Background())
}

func (i TemplateCustomActionNavigationOperationArgs) ToTemplateCustomActionNavigationOperationOutputWithContext(ctx context.Context) TemplateCustomActionNavigationOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionNavigationOperationOutput)
}

func (i TemplateCustomActionNavigationOperationArgs) ToTemplateCustomActionNavigationOperationPtrOutput() TemplateCustomActionNavigationOperationPtrOutput {
	return i.ToTemplateCustomActionNavigationOperationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomActionNavigationOperationArgs) ToTemplateCustomActionNavigationOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionNavigationOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionNavigationOperationOutput).ToTemplateCustomActionNavigationOperationPtrOutputWithContext(ctx)
}

// TemplateCustomActionNavigationOperationPtrInput is an input type that accepts TemplateCustomActionNavigationOperationArgs, TemplateCustomActionNavigationOperationPtr and TemplateCustomActionNavigationOperationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomActionNavigationOperationPtrInput` via:
//
//	        TemplateCustomActionNavigationOperationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomActionNavigationOperationPtrInput interface {
	pulumi.Input

	ToTemplateCustomActionNavigationOperationPtrOutput() TemplateCustomActionNavigationOperationPtrOutput
	ToTemplateCustomActionNavigationOperationPtrOutputWithContext(context.Context) TemplateCustomActionNavigationOperationPtrOutput
}

type templateCustomActionNavigationOperationPtrType TemplateCustomActionNavigationOperationArgs

func TemplateCustomActionNavigationOperationPtr(v *TemplateCustomActionNavigationOperationArgs) TemplateCustomActionNavigationOperationPtrInput {
	return (*templateCustomActionNavigationOperationPtrType)(v)
}

func (*templateCustomActionNavigationOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionNavigationOperation)(nil)).Elem()
}

func (i *templateCustomActionNavigationOperationPtrType) ToTemplateCustomActionNavigationOperationPtrOutput() TemplateCustomActionNavigationOperationPtrOutput {
	return i.ToTemplateCustomActionNavigationOperationPtrOutputWithContext(context.Background())
}

func (i *templateCustomActionNavigationOperationPtrType) ToTemplateCustomActionNavigationOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionNavigationOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionNavigationOperationPtrOutput)
}

type TemplateCustomActionNavigationOperationOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionNavigationOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionNavigationOperation)(nil)).Elem()
}

func (o TemplateCustomActionNavigationOperationOutput) ToTemplateCustomActionNavigationOperationOutput() TemplateCustomActionNavigationOperationOutput {
	return o
}

func (o TemplateCustomActionNavigationOperationOutput) ToTemplateCustomActionNavigationOperationOutputWithContext(ctx context.Context) TemplateCustomActionNavigationOperationOutput {
	return o
}

func (o TemplateCustomActionNavigationOperationOutput) ToTemplateCustomActionNavigationOperationPtrOutput() TemplateCustomActionNavigationOperationPtrOutput {
	return o.ToTemplateCustomActionNavigationOperationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomActionNavigationOperationOutput) ToTemplateCustomActionNavigationOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionNavigationOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomActionNavigationOperation) *TemplateCustomActionNavigationOperation {
		return &v
	}).(TemplateCustomActionNavigationOperationPtrOutput)
}

// The configuration that chooses the navigation target.
func (o TemplateCustomActionNavigationOperationOutput) LocalNavigationConfiguration() TemplateLocalNavigationConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCustomActionNavigationOperation) *TemplateLocalNavigationConfiguration {
		return v.LocalNavigationConfiguration
	}).(TemplateLocalNavigationConfigurationPtrOutput)
}

type TemplateCustomActionNavigationOperationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionNavigationOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionNavigationOperation)(nil)).Elem()
}

func (o TemplateCustomActionNavigationOperationPtrOutput) ToTemplateCustomActionNavigationOperationPtrOutput() TemplateCustomActionNavigationOperationPtrOutput {
	return o
}

func (o TemplateCustomActionNavigationOperationPtrOutput) ToTemplateCustomActionNavigationOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionNavigationOperationPtrOutput {
	return o
}

func (o TemplateCustomActionNavigationOperationPtrOutput) Elem() TemplateCustomActionNavigationOperationOutput {
	return o.ApplyT(func(v *TemplateCustomActionNavigationOperation) TemplateCustomActionNavigationOperation {
		if v != nil {
			return *v
		}
		var ret TemplateCustomActionNavigationOperation
		return ret
	}).(TemplateCustomActionNavigationOperationOutput)
}

// The configuration that chooses the navigation target.
func (o TemplateCustomActionNavigationOperationPtrOutput) LocalNavigationConfiguration() TemplateLocalNavigationConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCustomActionNavigationOperation) *TemplateLocalNavigationConfiguration {
		if v == nil {
			return nil
		}
		return v.LocalNavigationConfiguration
	}).(TemplateLocalNavigationConfigurationPtrOutput)
}

type TemplateCustomActionSetParametersOperation struct {
	// The parameter that determines the value configuration.
	ParameterValueConfigurations []TemplateSetParameterValueConfiguration `pulumi:"parameterValueConfigurations"`
}

// TemplateCustomActionSetParametersOperationInput is an input type that accepts TemplateCustomActionSetParametersOperationArgs and TemplateCustomActionSetParametersOperationOutput values.
// You can construct a concrete instance of `TemplateCustomActionSetParametersOperationInput` via:
//
//	TemplateCustomActionSetParametersOperationArgs{...}
type TemplateCustomActionSetParametersOperationInput interface {
	pulumi.Input

	ToTemplateCustomActionSetParametersOperationOutput() TemplateCustomActionSetParametersOperationOutput
	ToTemplateCustomActionSetParametersOperationOutputWithContext(context.Context) TemplateCustomActionSetParametersOperationOutput
}

type TemplateCustomActionSetParametersOperationArgs struct {
	// The parameter that determines the value configuration.
	ParameterValueConfigurations TemplateSetParameterValueConfigurationArrayInput `pulumi:"parameterValueConfigurations"`
}

func (TemplateCustomActionSetParametersOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionSetParametersOperation)(nil)).Elem()
}

func (i TemplateCustomActionSetParametersOperationArgs) ToTemplateCustomActionSetParametersOperationOutput() TemplateCustomActionSetParametersOperationOutput {
	return i.ToTemplateCustomActionSetParametersOperationOutputWithContext(context.Background())
}

func (i TemplateCustomActionSetParametersOperationArgs) ToTemplateCustomActionSetParametersOperationOutputWithContext(ctx context.Context) TemplateCustomActionSetParametersOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionSetParametersOperationOutput)
}

func (i TemplateCustomActionSetParametersOperationArgs) ToTemplateCustomActionSetParametersOperationPtrOutput() TemplateCustomActionSetParametersOperationPtrOutput {
	return i.ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomActionSetParametersOperationArgs) ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionSetParametersOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionSetParametersOperationOutput).ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(ctx)
}

// TemplateCustomActionSetParametersOperationPtrInput is an input type that accepts TemplateCustomActionSetParametersOperationArgs, TemplateCustomActionSetParametersOperationPtr and TemplateCustomActionSetParametersOperationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomActionSetParametersOperationPtrInput` via:
//
//	        TemplateCustomActionSetParametersOperationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomActionSetParametersOperationPtrInput interface {
	pulumi.Input

	ToTemplateCustomActionSetParametersOperationPtrOutput() TemplateCustomActionSetParametersOperationPtrOutput
	ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(context.Context) TemplateCustomActionSetParametersOperationPtrOutput
}

type templateCustomActionSetParametersOperationPtrType TemplateCustomActionSetParametersOperationArgs

func TemplateCustomActionSetParametersOperationPtr(v *TemplateCustomActionSetParametersOperationArgs) TemplateCustomActionSetParametersOperationPtrInput {
	return (*templateCustomActionSetParametersOperationPtrType)(v)
}

func (*templateCustomActionSetParametersOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionSetParametersOperation)(nil)).Elem()
}

func (i *templateCustomActionSetParametersOperationPtrType) ToTemplateCustomActionSetParametersOperationPtrOutput() TemplateCustomActionSetParametersOperationPtrOutput {
	return i.ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(context.Background())
}

func (i *templateCustomActionSetParametersOperationPtrType) ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionSetParametersOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionSetParametersOperationPtrOutput)
}

type TemplateCustomActionSetParametersOperationOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionSetParametersOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionSetParametersOperation)(nil)).Elem()
}

func (o TemplateCustomActionSetParametersOperationOutput) ToTemplateCustomActionSetParametersOperationOutput() TemplateCustomActionSetParametersOperationOutput {
	return o
}

func (o TemplateCustomActionSetParametersOperationOutput) ToTemplateCustomActionSetParametersOperationOutputWithContext(ctx context.Context) TemplateCustomActionSetParametersOperationOutput {
	return o
}

func (o TemplateCustomActionSetParametersOperationOutput) ToTemplateCustomActionSetParametersOperationPtrOutput() TemplateCustomActionSetParametersOperationPtrOutput {
	return o.ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomActionSetParametersOperationOutput) ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionSetParametersOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomActionSetParametersOperation) *TemplateCustomActionSetParametersOperation {
		return &v
	}).(TemplateCustomActionSetParametersOperationPtrOutput)
}

// The parameter that determines the value configuration.
func (o TemplateCustomActionSetParametersOperationOutput) ParameterValueConfigurations() TemplateSetParameterValueConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateCustomActionSetParametersOperation) []TemplateSetParameterValueConfiguration {
		return v.ParameterValueConfigurations
	}).(TemplateSetParameterValueConfigurationArrayOutput)
}

type TemplateCustomActionSetParametersOperationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionSetParametersOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionSetParametersOperation)(nil)).Elem()
}

func (o TemplateCustomActionSetParametersOperationPtrOutput) ToTemplateCustomActionSetParametersOperationPtrOutput() TemplateCustomActionSetParametersOperationPtrOutput {
	return o
}

func (o TemplateCustomActionSetParametersOperationPtrOutput) ToTemplateCustomActionSetParametersOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionSetParametersOperationPtrOutput {
	return o
}

func (o TemplateCustomActionSetParametersOperationPtrOutput) Elem() TemplateCustomActionSetParametersOperationOutput {
	return o.ApplyT(func(v *TemplateCustomActionSetParametersOperation) TemplateCustomActionSetParametersOperation {
		if v != nil {
			return *v
		}
		var ret TemplateCustomActionSetParametersOperation
		return ret
	}).(TemplateCustomActionSetParametersOperationOutput)
}

// The parameter that determines the value configuration.
func (o TemplateCustomActionSetParametersOperationPtrOutput) ParameterValueConfigurations() TemplateSetParameterValueConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateCustomActionSetParametersOperation) []TemplateSetParameterValueConfiguration {
		if v == nil {
			return nil
		}
		return v.ParameterValueConfigurations
	}).(TemplateSetParameterValueConfigurationArrayOutput)
}

type TemplateCustomActionUrlOperation struct {
	// The target of the `CustomActionURLOperation` .
	//
	// Valid values are defined as follows:
	//
	// - `NEW_TAB` : Opens the target URL in a new browser tab.
	// - `NEW_WINDOW` : Opens the target URL in a new browser window.
	// - `SAME_TAB` : Opens the target URL in the same browser tab.
	UrlTarget TemplateUrlTargetConfiguration `pulumi:"urlTarget"`
	// THe URL link of the `CustomActionURLOperation` .
	UrlTemplate string `pulumi:"urlTemplate"`
}

// TemplateCustomActionUrlOperationInput is an input type that accepts TemplateCustomActionUrlOperationArgs and TemplateCustomActionUrlOperationOutput values.
// You can construct a concrete instance of `TemplateCustomActionUrlOperationInput` via:
//
//	TemplateCustomActionUrlOperationArgs{...}
type TemplateCustomActionUrlOperationInput interface {
	pulumi.Input

	ToTemplateCustomActionUrlOperationOutput() TemplateCustomActionUrlOperationOutput
	ToTemplateCustomActionUrlOperationOutputWithContext(context.Context) TemplateCustomActionUrlOperationOutput
}

type TemplateCustomActionUrlOperationArgs struct {
	// The target of the `CustomActionURLOperation` .
	//
	// Valid values are defined as follows:
	//
	// - `NEW_TAB` : Opens the target URL in a new browser tab.
	// - `NEW_WINDOW` : Opens the target URL in a new browser window.
	// - `SAME_TAB` : Opens the target URL in the same browser tab.
	UrlTarget TemplateUrlTargetConfigurationInput `pulumi:"urlTarget"`
	// THe URL link of the `CustomActionURLOperation` .
	UrlTemplate pulumi.StringInput `pulumi:"urlTemplate"`
}

func (TemplateCustomActionUrlOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionUrlOperation)(nil)).Elem()
}

func (i TemplateCustomActionUrlOperationArgs) ToTemplateCustomActionUrlOperationOutput() TemplateCustomActionUrlOperationOutput {
	return i.ToTemplateCustomActionUrlOperationOutputWithContext(context.Background())
}

func (i TemplateCustomActionUrlOperationArgs) ToTemplateCustomActionUrlOperationOutputWithContext(ctx context.Context) TemplateCustomActionUrlOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionUrlOperationOutput)
}

func (i TemplateCustomActionUrlOperationArgs) ToTemplateCustomActionUrlOperationPtrOutput() TemplateCustomActionUrlOperationPtrOutput {
	return i.ToTemplateCustomActionUrlOperationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomActionUrlOperationArgs) ToTemplateCustomActionUrlOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionUrlOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionUrlOperationOutput).ToTemplateCustomActionUrlOperationPtrOutputWithContext(ctx)
}

// TemplateCustomActionUrlOperationPtrInput is an input type that accepts TemplateCustomActionUrlOperationArgs, TemplateCustomActionUrlOperationPtr and TemplateCustomActionUrlOperationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomActionUrlOperationPtrInput` via:
//
//	        TemplateCustomActionUrlOperationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomActionUrlOperationPtrInput interface {
	pulumi.Input

	ToTemplateCustomActionUrlOperationPtrOutput() TemplateCustomActionUrlOperationPtrOutput
	ToTemplateCustomActionUrlOperationPtrOutputWithContext(context.Context) TemplateCustomActionUrlOperationPtrOutput
}

type templateCustomActionUrlOperationPtrType TemplateCustomActionUrlOperationArgs

func TemplateCustomActionUrlOperationPtr(v *TemplateCustomActionUrlOperationArgs) TemplateCustomActionUrlOperationPtrInput {
	return (*templateCustomActionUrlOperationPtrType)(v)
}

func (*templateCustomActionUrlOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionUrlOperation)(nil)).Elem()
}

func (i *templateCustomActionUrlOperationPtrType) ToTemplateCustomActionUrlOperationPtrOutput() TemplateCustomActionUrlOperationPtrOutput {
	return i.ToTemplateCustomActionUrlOperationPtrOutputWithContext(context.Background())
}

func (i *templateCustomActionUrlOperationPtrType) ToTemplateCustomActionUrlOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionUrlOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomActionUrlOperationPtrOutput)
}

type TemplateCustomActionUrlOperationOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionUrlOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomActionUrlOperation)(nil)).Elem()
}

func (o TemplateCustomActionUrlOperationOutput) ToTemplateCustomActionUrlOperationOutput() TemplateCustomActionUrlOperationOutput {
	return o
}

func (o TemplateCustomActionUrlOperationOutput) ToTemplateCustomActionUrlOperationOutputWithContext(ctx context.Context) TemplateCustomActionUrlOperationOutput {
	return o
}

func (o TemplateCustomActionUrlOperationOutput) ToTemplateCustomActionUrlOperationPtrOutput() TemplateCustomActionUrlOperationPtrOutput {
	return o.ToTemplateCustomActionUrlOperationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomActionUrlOperationOutput) ToTemplateCustomActionUrlOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionUrlOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomActionUrlOperation) *TemplateCustomActionUrlOperation {
		return &v
	}).(TemplateCustomActionUrlOperationPtrOutput)
}

// The target of the `CustomActionURLOperation` .
//
// Valid values are defined as follows:
//
// - `NEW_TAB` : Opens the target URL in a new browser tab.
// - `NEW_WINDOW` : Opens the target URL in a new browser window.
// - `SAME_TAB` : Opens the target URL in the same browser tab.
func (o TemplateCustomActionUrlOperationOutput) UrlTarget() TemplateUrlTargetConfigurationOutput {
	return o.ApplyT(func(v TemplateCustomActionUrlOperation) TemplateUrlTargetConfiguration { return v.UrlTarget }).(TemplateUrlTargetConfigurationOutput)
}

// THe URL link of the `CustomActionURLOperation` .
func (o TemplateCustomActionUrlOperationOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCustomActionUrlOperation) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

type TemplateCustomActionUrlOperationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomActionUrlOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomActionUrlOperation)(nil)).Elem()
}

func (o TemplateCustomActionUrlOperationPtrOutput) ToTemplateCustomActionUrlOperationPtrOutput() TemplateCustomActionUrlOperationPtrOutput {
	return o
}

func (o TemplateCustomActionUrlOperationPtrOutput) ToTemplateCustomActionUrlOperationPtrOutputWithContext(ctx context.Context) TemplateCustomActionUrlOperationPtrOutput {
	return o
}

func (o TemplateCustomActionUrlOperationPtrOutput) Elem() TemplateCustomActionUrlOperationOutput {
	return o.ApplyT(func(v *TemplateCustomActionUrlOperation) TemplateCustomActionUrlOperation {
		if v != nil {
			return *v
		}
		var ret TemplateCustomActionUrlOperation
		return ret
	}).(TemplateCustomActionUrlOperationOutput)
}

// The target of the `CustomActionURLOperation` .
//
// Valid values are defined as follows:
//
// - `NEW_TAB` : Opens the target URL in a new browser tab.
// - `NEW_WINDOW` : Opens the target URL in a new browser window.
// - `SAME_TAB` : Opens the target URL in the same browser tab.
func (o TemplateCustomActionUrlOperationPtrOutput) UrlTarget() TemplateUrlTargetConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCustomActionUrlOperation) *TemplateUrlTargetConfiguration {
		if v == nil {
			return nil
		}
		return &v.UrlTarget
	}).(TemplateUrlTargetConfigurationPtrOutput)
}

// THe URL link of the `CustomActionURLOperation` .
func (o TemplateCustomActionUrlOperationPtrOutput) UrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomActionUrlOperation) *string {
		if v == nil {
			return nil
		}
		return &v.UrlTemplate
	}).(pulumi.StringPtrOutput)
}

type TemplateCustomColor struct {
	// The color that is applied to the data value.
	Color string `pulumi:"color"`
	// The data value that the color is applied to.
	FieldValue *string `pulumi:"fieldValue"`
	// The value of a special data value.
	SpecialValue *TemplateSpecialValue `pulumi:"specialValue"`
}

// TemplateCustomColorInput is an input type that accepts TemplateCustomColorArgs and TemplateCustomColorOutput values.
// You can construct a concrete instance of `TemplateCustomColorInput` via:
//
//	TemplateCustomColorArgs{...}
type TemplateCustomColorInput interface {
	pulumi.Input

	ToTemplateCustomColorOutput() TemplateCustomColorOutput
	ToTemplateCustomColorOutputWithContext(context.Context) TemplateCustomColorOutput
}

type TemplateCustomColorArgs struct {
	// The color that is applied to the data value.
	Color pulumi.StringInput `pulumi:"color"`
	// The data value that the color is applied to.
	FieldValue pulumi.StringPtrInput `pulumi:"fieldValue"`
	// The value of a special data value.
	SpecialValue TemplateSpecialValuePtrInput `pulumi:"specialValue"`
}

func (TemplateCustomColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomColor)(nil)).Elem()
}

func (i TemplateCustomColorArgs) ToTemplateCustomColorOutput() TemplateCustomColorOutput {
	return i.ToTemplateCustomColorOutputWithContext(context.Background())
}

func (i TemplateCustomColorArgs) ToTemplateCustomColorOutputWithContext(ctx context.Context) TemplateCustomColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomColorOutput)
}

// TemplateCustomColorArrayInput is an input type that accepts TemplateCustomColorArray and TemplateCustomColorArrayOutput values.
// You can construct a concrete instance of `TemplateCustomColorArrayInput` via:
//
//	TemplateCustomColorArray{ TemplateCustomColorArgs{...} }
type TemplateCustomColorArrayInput interface {
	pulumi.Input

	ToTemplateCustomColorArrayOutput() TemplateCustomColorArrayOutput
	ToTemplateCustomColorArrayOutputWithContext(context.Context) TemplateCustomColorArrayOutput
}

type TemplateCustomColorArray []TemplateCustomColorInput

func (TemplateCustomColorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateCustomColor)(nil)).Elem()
}

func (i TemplateCustomColorArray) ToTemplateCustomColorArrayOutput() TemplateCustomColorArrayOutput {
	return i.ToTemplateCustomColorArrayOutputWithContext(context.Background())
}

func (i TemplateCustomColorArray) ToTemplateCustomColorArrayOutputWithContext(ctx context.Context) TemplateCustomColorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomColorArrayOutput)
}

type TemplateCustomColorOutput struct{ *pulumi.OutputState }

func (TemplateCustomColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomColor)(nil)).Elem()
}

func (o TemplateCustomColorOutput) ToTemplateCustomColorOutput() TemplateCustomColorOutput {
	return o
}

func (o TemplateCustomColorOutput) ToTemplateCustomColorOutputWithContext(ctx context.Context) TemplateCustomColorOutput {
	return o
}

// The color that is applied to the data value.
func (o TemplateCustomColorOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCustomColor) string { return v.Color }).(pulumi.StringOutput)
}

// The data value that the color is applied to.
func (o TemplateCustomColorOutput) FieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCustomColor) *string { return v.FieldValue }).(pulumi.StringPtrOutput)
}

// The value of a special data value.
func (o TemplateCustomColorOutput) SpecialValue() TemplateSpecialValuePtrOutput {
	return o.ApplyT(func(v TemplateCustomColor) *TemplateSpecialValue { return v.SpecialValue }).(TemplateSpecialValuePtrOutput)
}

type TemplateCustomColorArrayOutput struct{ *pulumi.OutputState }

func (TemplateCustomColorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateCustomColor)(nil)).Elem()
}

func (o TemplateCustomColorArrayOutput) ToTemplateCustomColorArrayOutput() TemplateCustomColorArrayOutput {
	return o
}

func (o TemplateCustomColorArrayOutput) ToTemplateCustomColorArrayOutputWithContext(ctx context.Context) TemplateCustomColorArrayOutput {
	return o
}

func (o TemplateCustomColorArrayOutput) Index(i pulumi.IntInput) TemplateCustomColorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateCustomColor {
		return vs[0].([]TemplateCustomColor)[vs[1].(int)]
	}).(TemplateCustomColorOutput)
}

type TemplateCustomContentConfiguration struct {
	// The content type of the custom content visual. You can use this to have the visual render as an image.
	ContentType *TemplateCustomContentType `pulumi:"contentType"`
	// The input URL that links to the custom content that you want in the custom visual.
	ContentUrl *string `pulumi:"contentUrl"`
	// The sizing options for the size of the custom content visual. This structure is required when the `ContentType` of the visual is `'IMAGE'` .
	ImageScaling *TemplateCustomContentImageScalingConfiguration `pulumi:"imageScaling"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
}

// TemplateCustomContentConfigurationInput is an input type that accepts TemplateCustomContentConfigurationArgs and TemplateCustomContentConfigurationOutput values.
// You can construct a concrete instance of `TemplateCustomContentConfigurationInput` via:
//
//	TemplateCustomContentConfigurationArgs{...}
type TemplateCustomContentConfigurationInput interface {
	pulumi.Input

	ToTemplateCustomContentConfigurationOutput() TemplateCustomContentConfigurationOutput
	ToTemplateCustomContentConfigurationOutputWithContext(context.Context) TemplateCustomContentConfigurationOutput
}

type TemplateCustomContentConfigurationArgs struct {
	// The content type of the custom content visual. You can use this to have the visual render as an image.
	ContentType TemplateCustomContentTypePtrInput `pulumi:"contentType"`
	// The input URL that links to the custom content that you want in the custom visual.
	ContentUrl pulumi.StringPtrInput `pulumi:"contentUrl"`
	// The sizing options for the size of the custom content visual. This structure is required when the `ContentType` of the visual is `'IMAGE'` .
	ImageScaling TemplateCustomContentImageScalingConfigurationPtrInput `pulumi:"imageScaling"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
}

func (TemplateCustomContentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomContentConfiguration)(nil)).Elem()
}

func (i TemplateCustomContentConfigurationArgs) ToTemplateCustomContentConfigurationOutput() TemplateCustomContentConfigurationOutput {
	return i.ToTemplateCustomContentConfigurationOutputWithContext(context.Background())
}

func (i TemplateCustomContentConfigurationArgs) ToTemplateCustomContentConfigurationOutputWithContext(ctx context.Context) TemplateCustomContentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomContentConfigurationOutput)
}

func (i TemplateCustomContentConfigurationArgs) ToTemplateCustomContentConfigurationPtrOutput() TemplateCustomContentConfigurationPtrOutput {
	return i.ToTemplateCustomContentConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomContentConfigurationArgs) ToTemplateCustomContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomContentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomContentConfigurationOutput).ToTemplateCustomContentConfigurationPtrOutputWithContext(ctx)
}

// TemplateCustomContentConfigurationPtrInput is an input type that accepts TemplateCustomContentConfigurationArgs, TemplateCustomContentConfigurationPtr and TemplateCustomContentConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomContentConfigurationPtrInput` via:
//
//	        TemplateCustomContentConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomContentConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateCustomContentConfigurationPtrOutput() TemplateCustomContentConfigurationPtrOutput
	ToTemplateCustomContentConfigurationPtrOutputWithContext(context.Context) TemplateCustomContentConfigurationPtrOutput
}

type templateCustomContentConfigurationPtrType TemplateCustomContentConfigurationArgs

func TemplateCustomContentConfigurationPtr(v *TemplateCustomContentConfigurationArgs) TemplateCustomContentConfigurationPtrInput {
	return (*templateCustomContentConfigurationPtrType)(v)
}

func (*templateCustomContentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomContentConfiguration)(nil)).Elem()
}

func (i *templateCustomContentConfigurationPtrType) ToTemplateCustomContentConfigurationPtrOutput() TemplateCustomContentConfigurationPtrOutput {
	return i.ToTemplateCustomContentConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateCustomContentConfigurationPtrType) ToTemplateCustomContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomContentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomContentConfigurationPtrOutput)
}

type TemplateCustomContentConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateCustomContentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomContentConfiguration)(nil)).Elem()
}

func (o TemplateCustomContentConfigurationOutput) ToTemplateCustomContentConfigurationOutput() TemplateCustomContentConfigurationOutput {
	return o
}

func (o TemplateCustomContentConfigurationOutput) ToTemplateCustomContentConfigurationOutputWithContext(ctx context.Context) TemplateCustomContentConfigurationOutput {
	return o
}

func (o TemplateCustomContentConfigurationOutput) ToTemplateCustomContentConfigurationPtrOutput() TemplateCustomContentConfigurationPtrOutput {
	return o.ToTemplateCustomContentConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomContentConfigurationOutput) ToTemplateCustomContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomContentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomContentConfiguration) *TemplateCustomContentConfiguration {
		return &v
	}).(TemplateCustomContentConfigurationPtrOutput)
}

// The content type of the custom content visual. You can use this to have the visual render as an image.
func (o TemplateCustomContentConfigurationOutput) ContentType() TemplateCustomContentTypePtrOutput {
	return o.ApplyT(func(v TemplateCustomContentConfiguration) *TemplateCustomContentType { return v.ContentType }).(TemplateCustomContentTypePtrOutput)
}

// The input URL that links to the custom content that you want in the custom visual.
func (o TemplateCustomContentConfigurationOutput) ContentUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCustomContentConfiguration) *string { return v.ContentUrl }).(pulumi.StringPtrOutput)
}

// The sizing options for the size of the custom content visual. This structure is required when the `ContentType` of the visual is `'IMAGE'` .
func (o TemplateCustomContentConfigurationOutput) ImageScaling() TemplateCustomContentImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCustomContentConfiguration) *TemplateCustomContentImageScalingConfiguration {
		return v.ImageScaling
	}).(TemplateCustomContentImageScalingConfigurationPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateCustomContentConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateCustomContentConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

type TemplateCustomContentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomContentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomContentConfiguration)(nil)).Elem()
}

func (o TemplateCustomContentConfigurationPtrOutput) ToTemplateCustomContentConfigurationPtrOutput() TemplateCustomContentConfigurationPtrOutput {
	return o
}

func (o TemplateCustomContentConfigurationPtrOutput) ToTemplateCustomContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomContentConfigurationPtrOutput {
	return o
}

func (o TemplateCustomContentConfigurationPtrOutput) Elem() TemplateCustomContentConfigurationOutput {
	return o.ApplyT(func(v *TemplateCustomContentConfiguration) TemplateCustomContentConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateCustomContentConfiguration
		return ret
	}).(TemplateCustomContentConfigurationOutput)
}

// The content type of the custom content visual. You can use this to have the visual render as an image.
func (o TemplateCustomContentConfigurationPtrOutput) ContentType() TemplateCustomContentTypePtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentConfiguration) *TemplateCustomContentType {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(TemplateCustomContentTypePtrOutput)
}

// The input URL that links to the custom content that you want in the custom visual.
func (o TemplateCustomContentConfigurationPtrOutput) ContentUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ContentUrl
	}).(pulumi.StringPtrOutput)
}

// The sizing options for the size of the custom content visual. This structure is required when the `ContentType` of the visual is `'IMAGE'` .
func (o TemplateCustomContentConfigurationPtrOutput) ImageScaling() TemplateCustomContentImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentConfiguration) *TemplateCustomContentImageScalingConfiguration {
		if v == nil {
			return nil
		}
		return v.ImageScaling
	}).(TemplateCustomContentImageScalingConfigurationPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateCustomContentConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

type TemplateCustomContentVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a `CustomContentVisual` .
	ChartConfiguration *TemplateCustomContentConfiguration `pulumi:"chartConfiguration"`
	// The dataset that is used to create the custom content visual. You can't create a visual without a dataset.
	DataSetIdentifier string `pulumi:"dataSetIdentifier"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateCustomContentVisualInput is an input type that accepts TemplateCustomContentVisualArgs and TemplateCustomContentVisualOutput values.
// You can construct a concrete instance of `TemplateCustomContentVisualInput` via:
//
//	TemplateCustomContentVisualArgs{...}
type TemplateCustomContentVisualInput interface {
	pulumi.Input

	ToTemplateCustomContentVisualOutput() TemplateCustomContentVisualOutput
	ToTemplateCustomContentVisualOutputWithContext(context.Context) TemplateCustomContentVisualOutput
}

type TemplateCustomContentVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a `CustomContentVisual` .
	ChartConfiguration TemplateCustomContentConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The dataset that is used to create the custom content visual. You can't create a visual without a dataset.
	DataSetIdentifier pulumi.StringInput `pulumi:"dataSetIdentifier"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateCustomContentVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomContentVisual)(nil)).Elem()
}

func (i TemplateCustomContentVisualArgs) ToTemplateCustomContentVisualOutput() TemplateCustomContentVisualOutput {
	return i.ToTemplateCustomContentVisualOutputWithContext(context.Background())
}

func (i TemplateCustomContentVisualArgs) ToTemplateCustomContentVisualOutputWithContext(ctx context.Context) TemplateCustomContentVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomContentVisualOutput)
}

func (i TemplateCustomContentVisualArgs) ToTemplateCustomContentVisualPtrOutput() TemplateCustomContentVisualPtrOutput {
	return i.ToTemplateCustomContentVisualPtrOutputWithContext(context.Background())
}

func (i TemplateCustomContentVisualArgs) ToTemplateCustomContentVisualPtrOutputWithContext(ctx context.Context) TemplateCustomContentVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomContentVisualOutput).ToTemplateCustomContentVisualPtrOutputWithContext(ctx)
}

// TemplateCustomContentVisualPtrInput is an input type that accepts TemplateCustomContentVisualArgs, TemplateCustomContentVisualPtr and TemplateCustomContentVisualPtrOutput values.
// You can construct a concrete instance of `TemplateCustomContentVisualPtrInput` via:
//
//	        TemplateCustomContentVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomContentVisualPtrInput interface {
	pulumi.Input

	ToTemplateCustomContentVisualPtrOutput() TemplateCustomContentVisualPtrOutput
	ToTemplateCustomContentVisualPtrOutputWithContext(context.Context) TemplateCustomContentVisualPtrOutput
}

type templateCustomContentVisualPtrType TemplateCustomContentVisualArgs

func TemplateCustomContentVisualPtr(v *TemplateCustomContentVisualArgs) TemplateCustomContentVisualPtrInput {
	return (*templateCustomContentVisualPtrType)(v)
}

func (*templateCustomContentVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomContentVisual)(nil)).Elem()
}

func (i *templateCustomContentVisualPtrType) ToTemplateCustomContentVisualPtrOutput() TemplateCustomContentVisualPtrOutput {
	return i.ToTemplateCustomContentVisualPtrOutputWithContext(context.Background())
}

func (i *templateCustomContentVisualPtrType) ToTemplateCustomContentVisualPtrOutputWithContext(ctx context.Context) TemplateCustomContentVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomContentVisualPtrOutput)
}

type TemplateCustomContentVisualOutput struct{ *pulumi.OutputState }

func (TemplateCustomContentVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomContentVisual)(nil)).Elem()
}

func (o TemplateCustomContentVisualOutput) ToTemplateCustomContentVisualOutput() TemplateCustomContentVisualOutput {
	return o
}

func (o TemplateCustomContentVisualOutput) ToTemplateCustomContentVisualOutputWithContext(ctx context.Context) TemplateCustomContentVisualOutput {
	return o
}

func (o TemplateCustomContentVisualOutput) ToTemplateCustomContentVisualPtrOutput() TemplateCustomContentVisualPtrOutput {
	return o.ToTemplateCustomContentVisualPtrOutputWithContext(context.Background())
}

func (o TemplateCustomContentVisualOutput) ToTemplateCustomContentVisualPtrOutputWithContext(ctx context.Context) TemplateCustomContentVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomContentVisual) *TemplateCustomContentVisual {
		return &v
	}).(TemplateCustomContentVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateCustomContentVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateCustomContentVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a `CustomContentVisual` .
func (o TemplateCustomContentVisualOutput) ChartConfiguration() TemplateCustomContentConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateCustomContentVisual) *TemplateCustomContentConfiguration { return v.ChartConfiguration }).(TemplateCustomContentConfigurationPtrOutput)
}

// The dataset that is used to create the custom content visual. You can't create a visual without a dataset.
func (o TemplateCustomContentVisualOutput) DataSetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCustomContentVisual) string { return v.DataSetIdentifier }).(pulumi.StringOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateCustomContentVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateCustomContentVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateCustomContentVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateCustomContentVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateCustomContentVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCustomContentVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateCustomContentVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCustomContentVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateCustomContentVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomContentVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomContentVisual)(nil)).Elem()
}

func (o TemplateCustomContentVisualPtrOutput) ToTemplateCustomContentVisualPtrOutput() TemplateCustomContentVisualPtrOutput {
	return o
}

func (o TemplateCustomContentVisualPtrOutput) ToTemplateCustomContentVisualPtrOutputWithContext(ctx context.Context) TemplateCustomContentVisualPtrOutput {
	return o
}

func (o TemplateCustomContentVisualPtrOutput) Elem() TemplateCustomContentVisualOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) TemplateCustomContentVisual {
		if v != nil {
			return *v
		}
		var ret TemplateCustomContentVisual
		return ret
	}).(TemplateCustomContentVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateCustomContentVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a `CustomContentVisual` .
func (o TemplateCustomContentVisualPtrOutput) ChartConfiguration() TemplateCustomContentConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) *TemplateCustomContentConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateCustomContentConfigurationPtrOutput)
}

// The dataset that is used to create the custom content visual. You can't create a visual without a dataset.
func (o TemplateCustomContentVisualPtrOutput) DataSetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) *string {
		if v == nil {
			return nil
		}
		return &v.DataSetIdentifier
	}).(pulumi.StringPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateCustomContentVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateCustomContentVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateCustomContentVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateCustomContentVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomContentVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateCustomFilterConfiguration struct {
	// The category value for the filter.
	//
	// This field is mutually exclusive to `ParameterName` .
	CategoryValue *string `pulumi:"categoryValue"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateCategoryFilterMatchOperator `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOption `pulumi:"nullOption"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `CategoryValue` .
	ParameterName *string `pulumi:"parameterName"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions *TemplateCategoryFilterSelectAllOptions `pulumi:"selectAllOptions"`
}

// TemplateCustomFilterConfigurationInput is an input type that accepts TemplateCustomFilterConfigurationArgs and TemplateCustomFilterConfigurationOutput values.
// You can construct a concrete instance of `TemplateCustomFilterConfigurationInput` via:
//
//	TemplateCustomFilterConfigurationArgs{...}
type TemplateCustomFilterConfigurationInput interface {
	pulumi.Input

	ToTemplateCustomFilterConfigurationOutput() TemplateCustomFilterConfigurationOutput
	ToTemplateCustomFilterConfigurationOutputWithContext(context.Context) TemplateCustomFilterConfigurationOutput
}

type TemplateCustomFilterConfigurationArgs struct {
	// The category value for the filter.
	//
	// This field is mutually exclusive to `ParameterName` .
	CategoryValue pulumi.StringPtrInput `pulumi:"categoryValue"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateCategoryFilterMatchOperatorInput `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionInput `pulumi:"nullOption"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `CategoryValue` .
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions TemplateCategoryFilterSelectAllOptionsPtrInput `pulumi:"selectAllOptions"`
}

func (TemplateCustomFilterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomFilterConfiguration)(nil)).Elem()
}

func (i TemplateCustomFilterConfigurationArgs) ToTemplateCustomFilterConfigurationOutput() TemplateCustomFilterConfigurationOutput {
	return i.ToTemplateCustomFilterConfigurationOutputWithContext(context.Background())
}

func (i TemplateCustomFilterConfigurationArgs) ToTemplateCustomFilterConfigurationOutputWithContext(ctx context.Context) TemplateCustomFilterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomFilterConfigurationOutput)
}

func (i TemplateCustomFilterConfigurationArgs) ToTemplateCustomFilterConfigurationPtrOutput() TemplateCustomFilterConfigurationPtrOutput {
	return i.ToTemplateCustomFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomFilterConfigurationArgs) ToTemplateCustomFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomFilterConfigurationOutput).ToTemplateCustomFilterConfigurationPtrOutputWithContext(ctx)
}

// TemplateCustomFilterConfigurationPtrInput is an input type that accepts TemplateCustomFilterConfigurationArgs, TemplateCustomFilterConfigurationPtr and TemplateCustomFilterConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomFilterConfigurationPtrInput` via:
//
//	        TemplateCustomFilterConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomFilterConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateCustomFilterConfigurationPtrOutput() TemplateCustomFilterConfigurationPtrOutput
	ToTemplateCustomFilterConfigurationPtrOutputWithContext(context.Context) TemplateCustomFilterConfigurationPtrOutput
}

type templateCustomFilterConfigurationPtrType TemplateCustomFilterConfigurationArgs

func TemplateCustomFilterConfigurationPtr(v *TemplateCustomFilterConfigurationArgs) TemplateCustomFilterConfigurationPtrInput {
	return (*templateCustomFilterConfigurationPtrType)(v)
}

func (*templateCustomFilterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomFilterConfiguration)(nil)).Elem()
}

func (i *templateCustomFilterConfigurationPtrType) ToTemplateCustomFilterConfigurationPtrOutput() TemplateCustomFilterConfigurationPtrOutput {
	return i.ToTemplateCustomFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateCustomFilterConfigurationPtrType) ToTemplateCustomFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomFilterConfigurationPtrOutput)
}

type TemplateCustomFilterConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateCustomFilterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomFilterConfiguration)(nil)).Elem()
}

func (o TemplateCustomFilterConfigurationOutput) ToTemplateCustomFilterConfigurationOutput() TemplateCustomFilterConfigurationOutput {
	return o
}

func (o TemplateCustomFilterConfigurationOutput) ToTemplateCustomFilterConfigurationOutputWithContext(ctx context.Context) TemplateCustomFilterConfigurationOutput {
	return o
}

func (o TemplateCustomFilterConfigurationOutput) ToTemplateCustomFilterConfigurationPtrOutput() TemplateCustomFilterConfigurationPtrOutput {
	return o.ToTemplateCustomFilterConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomFilterConfigurationOutput) ToTemplateCustomFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomFilterConfiguration) *TemplateCustomFilterConfiguration {
		return &v
	}).(TemplateCustomFilterConfigurationPtrOutput)
}

// The category value for the filter.
//
// This field is mutually exclusive to `ParameterName` .
func (o TemplateCustomFilterConfigurationOutput) CategoryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCustomFilterConfiguration) *string { return v.CategoryValue }).(pulumi.StringPtrOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateCustomFilterConfigurationOutput) MatchOperator() TemplateCategoryFilterMatchOperatorOutput {
	return o.ApplyT(func(v TemplateCustomFilterConfiguration) TemplateCategoryFilterMatchOperator { return v.MatchOperator }).(TemplateCategoryFilterMatchOperatorOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateCustomFilterConfigurationOutput) NullOption() TemplateFilterNullOptionOutput {
	return o.ApplyT(func(v TemplateCustomFilterConfiguration) TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `CategoryValue` .
func (o TemplateCustomFilterConfigurationOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateCustomFilterConfiguration) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateCustomFilterConfigurationOutput) SelectAllOptions() TemplateCategoryFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v TemplateCustomFilterConfiguration) *TemplateCategoryFilterSelectAllOptions {
		return v.SelectAllOptions
	}).(TemplateCategoryFilterSelectAllOptionsPtrOutput)
}

type TemplateCustomFilterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomFilterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomFilterConfiguration)(nil)).Elem()
}

func (o TemplateCustomFilterConfigurationPtrOutput) ToTemplateCustomFilterConfigurationPtrOutput() TemplateCustomFilterConfigurationPtrOutput {
	return o
}

func (o TemplateCustomFilterConfigurationPtrOutput) ToTemplateCustomFilterConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterConfigurationPtrOutput {
	return o
}

func (o TemplateCustomFilterConfigurationPtrOutput) Elem() TemplateCustomFilterConfigurationOutput {
	return o.ApplyT(func(v *TemplateCustomFilterConfiguration) TemplateCustomFilterConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateCustomFilterConfiguration
		return ret
	}).(TemplateCustomFilterConfigurationOutput)
}

// The category value for the filter.
//
// This field is mutually exclusive to `ParameterName` .
func (o TemplateCustomFilterConfigurationPtrOutput) CategoryValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CategoryValue
	}).(pulumi.StringPtrOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateCustomFilterConfigurationPtrOutput) MatchOperator() TemplateCategoryFilterMatchOperatorPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterConfiguration) *TemplateCategoryFilterMatchOperator {
		if v == nil {
			return nil
		}
		return &v.MatchOperator
	}).(TemplateCategoryFilterMatchOperatorPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateCustomFilterConfigurationPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterConfiguration) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `CategoryValue` .
func (o TemplateCustomFilterConfigurationPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateCustomFilterConfigurationPtrOutput) SelectAllOptions() TemplateCategoryFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterConfiguration) *TemplateCategoryFilterSelectAllOptions {
		if v == nil {
			return nil
		}
		return v.SelectAllOptions
	}).(TemplateCategoryFilterSelectAllOptionsPtrOutput)
}

type TemplateCustomFilterListConfiguration struct {
	// The list of category values for the filter.
	CategoryValues []string `pulumi:"categoryValues"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateCategoryFilterMatchOperator `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOption `pulumi:"nullOption"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions *TemplateCategoryFilterSelectAllOptions `pulumi:"selectAllOptions"`
}

// TemplateCustomFilterListConfigurationInput is an input type that accepts TemplateCustomFilterListConfigurationArgs and TemplateCustomFilterListConfigurationOutput values.
// You can construct a concrete instance of `TemplateCustomFilterListConfigurationInput` via:
//
//	TemplateCustomFilterListConfigurationArgs{...}
type TemplateCustomFilterListConfigurationInput interface {
	pulumi.Input

	ToTemplateCustomFilterListConfigurationOutput() TemplateCustomFilterListConfigurationOutput
	ToTemplateCustomFilterListConfigurationOutputWithContext(context.Context) TemplateCustomFilterListConfigurationOutput
}

type TemplateCustomFilterListConfigurationArgs struct {
	// The list of category values for the filter.
	CategoryValues pulumi.StringArrayInput `pulumi:"categoryValues"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateCategoryFilterMatchOperatorInput `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionInput `pulumi:"nullOption"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions TemplateCategoryFilterSelectAllOptionsPtrInput `pulumi:"selectAllOptions"`
}

func (TemplateCustomFilterListConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomFilterListConfiguration)(nil)).Elem()
}

func (i TemplateCustomFilterListConfigurationArgs) ToTemplateCustomFilterListConfigurationOutput() TemplateCustomFilterListConfigurationOutput {
	return i.ToTemplateCustomFilterListConfigurationOutputWithContext(context.Background())
}

func (i TemplateCustomFilterListConfigurationArgs) ToTemplateCustomFilterListConfigurationOutputWithContext(ctx context.Context) TemplateCustomFilterListConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomFilterListConfigurationOutput)
}

func (i TemplateCustomFilterListConfigurationArgs) ToTemplateCustomFilterListConfigurationPtrOutput() TemplateCustomFilterListConfigurationPtrOutput {
	return i.ToTemplateCustomFilterListConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomFilterListConfigurationArgs) ToTemplateCustomFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterListConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomFilterListConfigurationOutput).ToTemplateCustomFilterListConfigurationPtrOutputWithContext(ctx)
}

// TemplateCustomFilterListConfigurationPtrInput is an input type that accepts TemplateCustomFilterListConfigurationArgs, TemplateCustomFilterListConfigurationPtr and TemplateCustomFilterListConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomFilterListConfigurationPtrInput` via:
//
//	        TemplateCustomFilterListConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomFilterListConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateCustomFilterListConfigurationPtrOutput() TemplateCustomFilterListConfigurationPtrOutput
	ToTemplateCustomFilterListConfigurationPtrOutputWithContext(context.Context) TemplateCustomFilterListConfigurationPtrOutput
}

type templateCustomFilterListConfigurationPtrType TemplateCustomFilterListConfigurationArgs

func TemplateCustomFilterListConfigurationPtr(v *TemplateCustomFilterListConfigurationArgs) TemplateCustomFilterListConfigurationPtrInput {
	return (*templateCustomFilterListConfigurationPtrType)(v)
}

func (*templateCustomFilterListConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomFilterListConfiguration)(nil)).Elem()
}

func (i *templateCustomFilterListConfigurationPtrType) ToTemplateCustomFilterListConfigurationPtrOutput() TemplateCustomFilterListConfigurationPtrOutput {
	return i.ToTemplateCustomFilterListConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateCustomFilterListConfigurationPtrType) ToTemplateCustomFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterListConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomFilterListConfigurationPtrOutput)
}

type TemplateCustomFilterListConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateCustomFilterListConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomFilterListConfiguration)(nil)).Elem()
}

func (o TemplateCustomFilterListConfigurationOutput) ToTemplateCustomFilterListConfigurationOutput() TemplateCustomFilterListConfigurationOutput {
	return o
}

func (o TemplateCustomFilterListConfigurationOutput) ToTemplateCustomFilterListConfigurationOutputWithContext(ctx context.Context) TemplateCustomFilterListConfigurationOutput {
	return o
}

func (o TemplateCustomFilterListConfigurationOutput) ToTemplateCustomFilterListConfigurationPtrOutput() TemplateCustomFilterListConfigurationPtrOutput {
	return o.ToTemplateCustomFilterListConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomFilterListConfigurationOutput) ToTemplateCustomFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterListConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomFilterListConfiguration) *TemplateCustomFilterListConfiguration {
		return &v
	}).(TemplateCustomFilterListConfigurationPtrOutput)
}

// The list of category values for the filter.
func (o TemplateCustomFilterListConfigurationOutput) CategoryValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateCustomFilterListConfiguration) []string { return v.CategoryValues }).(pulumi.StringArrayOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateCustomFilterListConfigurationOutput) MatchOperator() TemplateCategoryFilterMatchOperatorOutput {
	return o.ApplyT(func(v TemplateCustomFilterListConfiguration) TemplateCategoryFilterMatchOperator {
		return v.MatchOperator
	}).(TemplateCategoryFilterMatchOperatorOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateCustomFilterListConfigurationOutput) NullOption() TemplateFilterNullOptionOutput {
	return o.ApplyT(func(v TemplateCustomFilterListConfiguration) TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateCustomFilterListConfigurationOutput) SelectAllOptions() TemplateCategoryFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v TemplateCustomFilterListConfiguration) *TemplateCategoryFilterSelectAllOptions {
		return v.SelectAllOptions
	}).(TemplateCategoryFilterSelectAllOptionsPtrOutput)
}

type TemplateCustomFilterListConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomFilterListConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomFilterListConfiguration)(nil)).Elem()
}

func (o TemplateCustomFilterListConfigurationPtrOutput) ToTemplateCustomFilterListConfigurationPtrOutput() TemplateCustomFilterListConfigurationPtrOutput {
	return o
}

func (o TemplateCustomFilterListConfigurationPtrOutput) ToTemplateCustomFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomFilterListConfigurationPtrOutput {
	return o
}

func (o TemplateCustomFilterListConfigurationPtrOutput) Elem() TemplateCustomFilterListConfigurationOutput {
	return o.ApplyT(func(v *TemplateCustomFilterListConfiguration) TemplateCustomFilterListConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateCustomFilterListConfiguration
		return ret
	}).(TemplateCustomFilterListConfigurationOutput)
}

// The list of category values for the filter.
func (o TemplateCustomFilterListConfigurationPtrOutput) CategoryValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateCustomFilterListConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.CategoryValues
	}).(pulumi.StringArrayOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateCustomFilterListConfigurationPtrOutput) MatchOperator() TemplateCategoryFilterMatchOperatorPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterListConfiguration) *TemplateCategoryFilterMatchOperator {
		if v == nil {
			return nil
		}
		return &v.MatchOperator
	}).(TemplateCategoryFilterMatchOperatorPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateCustomFilterListConfigurationPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterListConfiguration) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateCustomFilterListConfigurationPtrOutput) SelectAllOptions() TemplateCategoryFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateCustomFilterListConfiguration) *TemplateCategoryFilterSelectAllOptions {
		if v == nil {
			return nil
		}
		return v.SelectAllOptions
	}).(TemplateCategoryFilterSelectAllOptionsPtrOutput)
}

type TemplateCustomNarrativeOptions struct {
	// The string input of custom narrative.
	Narrative string `pulumi:"narrative"`
}

// TemplateCustomNarrativeOptionsInput is an input type that accepts TemplateCustomNarrativeOptionsArgs and TemplateCustomNarrativeOptionsOutput values.
// You can construct a concrete instance of `TemplateCustomNarrativeOptionsInput` via:
//
//	TemplateCustomNarrativeOptionsArgs{...}
type TemplateCustomNarrativeOptionsInput interface {
	pulumi.Input

	ToTemplateCustomNarrativeOptionsOutput() TemplateCustomNarrativeOptionsOutput
	ToTemplateCustomNarrativeOptionsOutputWithContext(context.Context) TemplateCustomNarrativeOptionsOutput
}

type TemplateCustomNarrativeOptionsArgs struct {
	// The string input of custom narrative.
	Narrative pulumi.StringInput `pulumi:"narrative"`
}

func (TemplateCustomNarrativeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomNarrativeOptions)(nil)).Elem()
}

func (i TemplateCustomNarrativeOptionsArgs) ToTemplateCustomNarrativeOptionsOutput() TemplateCustomNarrativeOptionsOutput {
	return i.ToTemplateCustomNarrativeOptionsOutputWithContext(context.Background())
}

func (i TemplateCustomNarrativeOptionsArgs) ToTemplateCustomNarrativeOptionsOutputWithContext(ctx context.Context) TemplateCustomNarrativeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomNarrativeOptionsOutput)
}

func (i TemplateCustomNarrativeOptionsArgs) ToTemplateCustomNarrativeOptionsPtrOutput() TemplateCustomNarrativeOptionsPtrOutput {
	return i.ToTemplateCustomNarrativeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateCustomNarrativeOptionsArgs) ToTemplateCustomNarrativeOptionsPtrOutputWithContext(ctx context.Context) TemplateCustomNarrativeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomNarrativeOptionsOutput).ToTemplateCustomNarrativeOptionsPtrOutputWithContext(ctx)
}

// TemplateCustomNarrativeOptionsPtrInput is an input type that accepts TemplateCustomNarrativeOptionsArgs, TemplateCustomNarrativeOptionsPtr and TemplateCustomNarrativeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateCustomNarrativeOptionsPtrInput` via:
//
//	        TemplateCustomNarrativeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomNarrativeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateCustomNarrativeOptionsPtrOutput() TemplateCustomNarrativeOptionsPtrOutput
	ToTemplateCustomNarrativeOptionsPtrOutputWithContext(context.Context) TemplateCustomNarrativeOptionsPtrOutput
}

type templateCustomNarrativeOptionsPtrType TemplateCustomNarrativeOptionsArgs

func TemplateCustomNarrativeOptionsPtr(v *TemplateCustomNarrativeOptionsArgs) TemplateCustomNarrativeOptionsPtrInput {
	return (*templateCustomNarrativeOptionsPtrType)(v)
}

func (*templateCustomNarrativeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomNarrativeOptions)(nil)).Elem()
}

func (i *templateCustomNarrativeOptionsPtrType) ToTemplateCustomNarrativeOptionsPtrOutput() TemplateCustomNarrativeOptionsPtrOutput {
	return i.ToTemplateCustomNarrativeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateCustomNarrativeOptionsPtrType) ToTemplateCustomNarrativeOptionsPtrOutputWithContext(ctx context.Context) TemplateCustomNarrativeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomNarrativeOptionsPtrOutput)
}

type TemplateCustomNarrativeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateCustomNarrativeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomNarrativeOptions)(nil)).Elem()
}

func (o TemplateCustomNarrativeOptionsOutput) ToTemplateCustomNarrativeOptionsOutput() TemplateCustomNarrativeOptionsOutput {
	return o
}

func (o TemplateCustomNarrativeOptionsOutput) ToTemplateCustomNarrativeOptionsOutputWithContext(ctx context.Context) TemplateCustomNarrativeOptionsOutput {
	return o
}

func (o TemplateCustomNarrativeOptionsOutput) ToTemplateCustomNarrativeOptionsPtrOutput() TemplateCustomNarrativeOptionsPtrOutput {
	return o.ToTemplateCustomNarrativeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateCustomNarrativeOptionsOutput) ToTemplateCustomNarrativeOptionsPtrOutputWithContext(ctx context.Context) TemplateCustomNarrativeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomNarrativeOptions) *TemplateCustomNarrativeOptions {
		return &v
	}).(TemplateCustomNarrativeOptionsPtrOutput)
}

// The string input of custom narrative.
func (o TemplateCustomNarrativeOptionsOutput) Narrative() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateCustomNarrativeOptions) string { return v.Narrative }).(pulumi.StringOutput)
}

type TemplateCustomNarrativeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomNarrativeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomNarrativeOptions)(nil)).Elem()
}

func (o TemplateCustomNarrativeOptionsPtrOutput) ToTemplateCustomNarrativeOptionsPtrOutput() TemplateCustomNarrativeOptionsPtrOutput {
	return o
}

func (o TemplateCustomNarrativeOptionsPtrOutput) ToTemplateCustomNarrativeOptionsPtrOutputWithContext(ctx context.Context) TemplateCustomNarrativeOptionsPtrOutput {
	return o
}

func (o TemplateCustomNarrativeOptionsPtrOutput) Elem() TemplateCustomNarrativeOptionsOutput {
	return o.ApplyT(func(v *TemplateCustomNarrativeOptions) TemplateCustomNarrativeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateCustomNarrativeOptions
		return ret
	}).(TemplateCustomNarrativeOptionsOutput)
}

// The string input of custom narrative.
func (o TemplateCustomNarrativeOptionsPtrOutput) Narrative() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateCustomNarrativeOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Narrative
	}).(pulumi.StringPtrOutput)
}

type TemplateCustomParameterValues struct {
	// A list of datetime-type parameter values.
	DateTimeValues []string `pulumi:"dateTimeValues"`
	// A list of decimal-type parameter values.
	DecimalValues []float64 `pulumi:"decimalValues"`
	// A list of integer-type parameter values.
	IntegerValues []float64 `pulumi:"integerValues"`
	// A list of string-type parameter values.
	StringValues []string `pulumi:"stringValues"`
}

// TemplateCustomParameterValuesInput is an input type that accepts TemplateCustomParameterValuesArgs and TemplateCustomParameterValuesOutput values.
// You can construct a concrete instance of `TemplateCustomParameterValuesInput` via:
//
//	TemplateCustomParameterValuesArgs{...}
type TemplateCustomParameterValuesInput interface {
	pulumi.Input

	ToTemplateCustomParameterValuesOutput() TemplateCustomParameterValuesOutput
	ToTemplateCustomParameterValuesOutputWithContext(context.Context) TemplateCustomParameterValuesOutput
}

type TemplateCustomParameterValuesArgs struct {
	// A list of datetime-type parameter values.
	DateTimeValues pulumi.StringArrayInput `pulumi:"dateTimeValues"`
	// A list of decimal-type parameter values.
	DecimalValues pulumi.Float64ArrayInput `pulumi:"decimalValues"`
	// A list of integer-type parameter values.
	IntegerValues pulumi.Float64ArrayInput `pulumi:"integerValues"`
	// A list of string-type parameter values.
	StringValues pulumi.StringArrayInput `pulumi:"stringValues"`
}

func (TemplateCustomParameterValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomParameterValues)(nil)).Elem()
}

func (i TemplateCustomParameterValuesArgs) ToTemplateCustomParameterValuesOutput() TemplateCustomParameterValuesOutput {
	return i.ToTemplateCustomParameterValuesOutputWithContext(context.Background())
}

func (i TemplateCustomParameterValuesArgs) ToTemplateCustomParameterValuesOutputWithContext(ctx context.Context) TemplateCustomParameterValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomParameterValuesOutput)
}

func (i TemplateCustomParameterValuesArgs) ToTemplateCustomParameterValuesPtrOutput() TemplateCustomParameterValuesPtrOutput {
	return i.ToTemplateCustomParameterValuesPtrOutputWithContext(context.Background())
}

func (i TemplateCustomParameterValuesArgs) ToTemplateCustomParameterValuesPtrOutputWithContext(ctx context.Context) TemplateCustomParameterValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomParameterValuesOutput).ToTemplateCustomParameterValuesPtrOutputWithContext(ctx)
}

// TemplateCustomParameterValuesPtrInput is an input type that accepts TemplateCustomParameterValuesArgs, TemplateCustomParameterValuesPtr and TemplateCustomParameterValuesPtrOutput values.
// You can construct a concrete instance of `TemplateCustomParameterValuesPtrInput` via:
//
//	        TemplateCustomParameterValuesArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomParameterValuesPtrInput interface {
	pulumi.Input

	ToTemplateCustomParameterValuesPtrOutput() TemplateCustomParameterValuesPtrOutput
	ToTemplateCustomParameterValuesPtrOutputWithContext(context.Context) TemplateCustomParameterValuesPtrOutput
}

type templateCustomParameterValuesPtrType TemplateCustomParameterValuesArgs

func TemplateCustomParameterValuesPtr(v *TemplateCustomParameterValuesArgs) TemplateCustomParameterValuesPtrInput {
	return (*templateCustomParameterValuesPtrType)(v)
}

func (*templateCustomParameterValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomParameterValues)(nil)).Elem()
}

func (i *templateCustomParameterValuesPtrType) ToTemplateCustomParameterValuesPtrOutput() TemplateCustomParameterValuesPtrOutput {
	return i.ToTemplateCustomParameterValuesPtrOutputWithContext(context.Background())
}

func (i *templateCustomParameterValuesPtrType) ToTemplateCustomParameterValuesPtrOutputWithContext(ctx context.Context) TemplateCustomParameterValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomParameterValuesPtrOutput)
}

type TemplateCustomParameterValuesOutput struct{ *pulumi.OutputState }

func (TemplateCustomParameterValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomParameterValues)(nil)).Elem()
}

func (o TemplateCustomParameterValuesOutput) ToTemplateCustomParameterValuesOutput() TemplateCustomParameterValuesOutput {
	return o
}

func (o TemplateCustomParameterValuesOutput) ToTemplateCustomParameterValuesOutputWithContext(ctx context.Context) TemplateCustomParameterValuesOutput {
	return o
}

func (o TemplateCustomParameterValuesOutput) ToTemplateCustomParameterValuesPtrOutput() TemplateCustomParameterValuesPtrOutput {
	return o.ToTemplateCustomParameterValuesPtrOutputWithContext(context.Background())
}

func (o TemplateCustomParameterValuesOutput) ToTemplateCustomParameterValuesPtrOutputWithContext(ctx context.Context) TemplateCustomParameterValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomParameterValues) *TemplateCustomParameterValues {
		return &v
	}).(TemplateCustomParameterValuesPtrOutput)
}

// A list of datetime-type parameter values.
func (o TemplateCustomParameterValuesOutput) DateTimeValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateCustomParameterValues) []string { return v.DateTimeValues }).(pulumi.StringArrayOutput)
}

// A list of decimal-type parameter values.
func (o TemplateCustomParameterValuesOutput) DecimalValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v TemplateCustomParameterValues) []float64 { return v.DecimalValues }).(pulumi.Float64ArrayOutput)
}

// A list of integer-type parameter values.
func (o TemplateCustomParameterValuesOutput) IntegerValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v TemplateCustomParameterValues) []float64 { return v.IntegerValues }).(pulumi.Float64ArrayOutput)
}

// A list of string-type parameter values.
func (o TemplateCustomParameterValuesOutput) StringValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateCustomParameterValues) []string { return v.StringValues }).(pulumi.StringArrayOutput)
}

type TemplateCustomParameterValuesPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomParameterValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomParameterValues)(nil)).Elem()
}

func (o TemplateCustomParameterValuesPtrOutput) ToTemplateCustomParameterValuesPtrOutput() TemplateCustomParameterValuesPtrOutput {
	return o
}

func (o TemplateCustomParameterValuesPtrOutput) ToTemplateCustomParameterValuesPtrOutputWithContext(ctx context.Context) TemplateCustomParameterValuesPtrOutput {
	return o
}

func (o TemplateCustomParameterValuesPtrOutput) Elem() TemplateCustomParameterValuesOutput {
	return o.ApplyT(func(v *TemplateCustomParameterValues) TemplateCustomParameterValues {
		if v != nil {
			return *v
		}
		var ret TemplateCustomParameterValues
		return ret
	}).(TemplateCustomParameterValuesOutput)
}

// A list of datetime-type parameter values.
func (o TemplateCustomParameterValuesPtrOutput) DateTimeValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateCustomParameterValues) []string {
		if v == nil {
			return nil
		}
		return v.DateTimeValues
	}).(pulumi.StringArrayOutput)
}

// A list of decimal-type parameter values.
func (o TemplateCustomParameterValuesPtrOutput) DecimalValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *TemplateCustomParameterValues) []float64 {
		if v == nil {
			return nil
		}
		return v.DecimalValues
	}).(pulumi.Float64ArrayOutput)
}

// A list of integer-type parameter values.
func (o TemplateCustomParameterValuesPtrOutput) IntegerValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *TemplateCustomParameterValues) []float64 {
		if v == nil {
			return nil
		}
		return v.IntegerValues
	}).(pulumi.Float64ArrayOutput)
}

// A list of string-type parameter values.
func (o TemplateCustomParameterValuesPtrOutput) StringValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateCustomParameterValues) []string {
		if v == nil {
			return nil
		}
		return v.StringValues
	}).(pulumi.StringArrayOutput)
}

type TemplateCustomValuesConfiguration struct {
	CustomValues TemplateCustomParameterValues `pulumi:"customValues"`
	// Includes the null value in custom action parameter values.
	IncludeNullValue *bool `pulumi:"includeNullValue"`
}

// TemplateCustomValuesConfigurationInput is an input type that accepts TemplateCustomValuesConfigurationArgs and TemplateCustomValuesConfigurationOutput values.
// You can construct a concrete instance of `TemplateCustomValuesConfigurationInput` via:
//
//	TemplateCustomValuesConfigurationArgs{...}
type TemplateCustomValuesConfigurationInput interface {
	pulumi.Input

	ToTemplateCustomValuesConfigurationOutput() TemplateCustomValuesConfigurationOutput
	ToTemplateCustomValuesConfigurationOutputWithContext(context.Context) TemplateCustomValuesConfigurationOutput
}

type TemplateCustomValuesConfigurationArgs struct {
	CustomValues TemplateCustomParameterValuesInput `pulumi:"customValues"`
	// Includes the null value in custom action parameter values.
	IncludeNullValue pulumi.BoolPtrInput `pulumi:"includeNullValue"`
}

func (TemplateCustomValuesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomValuesConfiguration)(nil)).Elem()
}

func (i TemplateCustomValuesConfigurationArgs) ToTemplateCustomValuesConfigurationOutput() TemplateCustomValuesConfigurationOutput {
	return i.ToTemplateCustomValuesConfigurationOutputWithContext(context.Background())
}

func (i TemplateCustomValuesConfigurationArgs) ToTemplateCustomValuesConfigurationOutputWithContext(ctx context.Context) TemplateCustomValuesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomValuesConfigurationOutput)
}

func (i TemplateCustomValuesConfigurationArgs) ToTemplateCustomValuesConfigurationPtrOutput() TemplateCustomValuesConfigurationPtrOutput {
	return i.ToTemplateCustomValuesConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateCustomValuesConfigurationArgs) ToTemplateCustomValuesConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomValuesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomValuesConfigurationOutput).ToTemplateCustomValuesConfigurationPtrOutputWithContext(ctx)
}

// TemplateCustomValuesConfigurationPtrInput is an input type that accepts TemplateCustomValuesConfigurationArgs, TemplateCustomValuesConfigurationPtr and TemplateCustomValuesConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateCustomValuesConfigurationPtrInput` via:
//
//	        TemplateCustomValuesConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateCustomValuesConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateCustomValuesConfigurationPtrOutput() TemplateCustomValuesConfigurationPtrOutput
	ToTemplateCustomValuesConfigurationPtrOutputWithContext(context.Context) TemplateCustomValuesConfigurationPtrOutput
}

type templateCustomValuesConfigurationPtrType TemplateCustomValuesConfigurationArgs

func TemplateCustomValuesConfigurationPtr(v *TemplateCustomValuesConfigurationArgs) TemplateCustomValuesConfigurationPtrInput {
	return (*templateCustomValuesConfigurationPtrType)(v)
}

func (*templateCustomValuesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomValuesConfiguration)(nil)).Elem()
}

func (i *templateCustomValuesConfigurationPtrType) ToTemplateCustomValuesConfigurationPtrOutput() TemplateCustomValuesConfigurationPtrOutput {
	return i.ToTemplateCustomValuesConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateCustomValuesConfigurationPtrType) ToTemplateCustomValuesConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomValuesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateCustomValuesConfigurationPtrOutput)
}

type TemplateCustomValuesConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateCustomValuesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateCustomValuesConfiguration)(nil)).Elem()
}

func (o TemplateCustomValuesConfigurationOutput) ToTemplateCustomValuesConfigurationOutput() TemplateCustomValuesConfigurationOutput {
	return o
}

func (o TemplateCustomValuesConfigurationOutput) ToTemplateCustomValuesConfigurationOutputWithContext(ctx context.Context) TemplateCustomValuesConfigurationOutput {
	return o
}

func (o TemplateCustomValuesConfigurationOutput) ToTemplateCustomValuesConfigurationPtrOutput() TemplateCustomValuesConfigurationPtrOutput {
	return o.ToTemplateCustomValuesConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateCustomValuesConfigurationOutput) ToTemplateCustomValuesConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomValuesConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateCustomValuesConfiguration) *TemplateCustomValuesConfiguration {
		return &v
	}).(TemplateCustomValuesConfigurationPtrOutput)
}

func (o TemplateCustomValuesConfigurationOutput) CustomValues() TemplateCustomParameterValuesOutput {
	return o.ApplyT(func(v TemplateCustomValuesConfiguration) TemplateCustomParameterValues { return v.CustomValues }).(TemplateCustomParameterValuesOutput)
}

// Includes the null value in custom action parameter values.
func (o TemplateCustomValuesConfigurationOutput) IncludeNullValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateCustomValuesConfiguration) *bool { return v.IncludeNullValue }).(pulumi.BoolPtrOutput)
}

type TemplateCustomValuesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateCustomValuesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateCustomValuesConfiguration)(nil)).Elem()
}

func (o TemplateCustomValuesConfigurationPtrOutput) ToTemplateCustomValuesConfigurationPtrOutput() TemplateCustomValuesConfigurationPtrOutput {
	return o
}

func (o TemplateCustomValuesConfigurationPtrOutput) ToTemplateCustomValuesConfigurationPtrOutputWithContext(ctx context.Context) TemplateCustomValuesConfigurationPtrOutput {
	return o
}

func (o TemplateCustomValuesConfigurationPtrOutput) Elem() TemplateCustomValuesConfigurationOutput {
	return o.ApplyT(func(v *TemplateCustomValuesConfiguration) TemplateCustomValuesConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateCustomValuesConfiguration
		return ret
	}).(TemplateCustomValuesConfigurationOutput)
}

func (o TemplateCustomValuesConfigurationPtrOutput) CustomValues() TemplateCustomParameterValuesPtrOutput {
	return o.ApplyT(func(v *TemplateCustomValuesConfiguration) *TemplateCustomParameterValues {
		if v == nil {
			return nil
		}
		return &v.CustomValues
	}).(TemplateCustomParameterValuesPtrOutput)
}

// Includes the null value in custom action parameter values.
func (o TemplateCustomValuesConfigurationPtrOutput) IncludeNullValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateCustomValuesConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeNullValue
	}).(pulumi.BoolPtrOutput)
}

type TemplateDataBarsOptions struct {
	// The field ID for the data bars options.
	FieldId string `pulumi:"fieldId"`
	// The color of the negative data bar.
	NegativeColor *string `pulumi:"negativeColor"`
	// The color of the positive data bar.
	PositiveColor *string `pulumi:"positiveColor"`
}

// TemplateDataBarsOptionsInput is an input type that accepts TemplateDataBarsOptionsArgs and TemplateDataBarsOptionsOutput values.
// You can construct a concrete instance of `TemplateDataBarsOptionsInput` via:
//
//	TemplateDataBarsOptionsArgs{...}
type TemplateDataBarsOptionsInput interface {
	pulumi.Input

	ToTemplateDataBarsOptionsOutput() TemplateDataBarsOptionsOutput
	ToTemplateDataBarsOptionsOutputWithContext(context.Context) TemplateDataBarsOptionsOutput
}

type TemplateDataBarsOptionsArgs struct {
	// The field ID for the data bars options.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The color of the negative data bar.
	NegativeColor pulumi.StringPtrInput `pulumi:"negativeColor"`
	// The color of the positive data bar.
	PositiveColor pulumi.StringPtrInput `pulumi:"positiveColor"`
}

func (TemplateDataBarsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataBarsOptions)(nil)).Elem()
}

func (i TemplateDataBarsOptionsArgs) ToTemplateDataBarsOptionsOutput() TemplateDataBarsOptionsOutput {
	return i.ToTemplateDataBarsOptionsOutputWithContext(context.Background())
}

func (i TemplateDataBarsOptionsArgs) ToTemplateDataBarsOptionsOutputWithContext(ctx context.Context) TemplateDataBarsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataBarsOptionsOutput)
}

func (i TemplateDataBarsOptionsArgs) ToTemplateDataBarsOptionsPtrOutput() TemplateDataBarsOptionsPtrOutput {
	return i.ToTemplateDataBarsOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDataBarsOptionsArgs) ToTemplateDataBarsOptionsPtrOutputWithContext(ctx context.Context) TemplateDataBarsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataBarsOptionsOutput).ToTemplateDataBarsOptionsPtrOutputWithContext(ctx)
}

// TemplateDataBarsOptionsPtrInput is an input type that accepts TemplateDataBarsOptionsArgs, TemplateDataBarsOptionsPtr and TemplateDataBarsOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDataBarsOptionsPtrInput` via:
//
//	        TemplateDataBarsOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDataBarsOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDataBarsOptionsPtrOutput() TemplateDataBarsOptionsPtrOutput
	ToTemplateDataBarsOptionsPtrOutputWithContext(context.Context) TemplateDataBarsOptionsPtrOutput
}

type templateDataBarsOptionsPtrType TemplateDataBarsOptionsArgs

func TemplateDataBarsOptionsPtr(v *TemplateDataBarsOptionsArgs) TemplateDataBarsOptionsPtrInput {
	return (*templateDataBarsOptionsPtrType)(v)
}

func (*templateDataBarsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataBarsOptions)(nil)).Elem()
}

func (i *templateDataBarsOptionsPtrType) ToTemplateDataBarsOptionsPtrOutput() TemplateDataBarsOptionsPtrOutput {
	return i.ToTemplateDataBarsOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDataBarsOptionsPtrType) ToTemplateDataBarsOptionsPtrOutputWithContext(ctx context.Context) TemplateDataBarsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataBarsOptionsPtrOutput)
}

type TemplateDataBarsOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDataBarsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataBarsOptions)(nil)).Elem()
}

func (o TemplateDataBarsOptionsOutput) ToTemplateDataBarsOptionsOutput() TemplateDataBarsOptionsOutput {
	return o
}

func (o TemplateDataBarsOptionsOutput) ToTemplateDataBarsOptionsOutputWithContext(ctx context.Context) TemplateDataBarsOptionsOutput {
	return o
}

func (o TemplateDataBarsOptionsOutput) ToTemplateDataBarsOptionsPtrOutput() TemplateDataBarsOptionsPtrOutput {
	return o.ToTemplateDataBarsOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDataBarsOptionsOutput) ToTemplateDataBarsOptionsPtrOutputWithContext(ctx context.Context) TemplateDataBarsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataBarsOptions) *TemplateDataBarsOptions {
		return &v
	}).(TemplateDataBarsOptionsPtrOutput)
}

// The field ID for the data bars options.
func (o TemplateDataBarsOptionsOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDataBarsOptions) string { return v.FieldId }).(pulumi.StringOutput)
}

// The color of the negative data bar.
func (o TemplateDataBarsOptionsOutput) NegativeColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataBarsOptions) *string { return v.NegativeColor }).(pulumi.StringPtrOutput)
}

// The color of the positive data bar.
func (o TemplateDataBarsOptionsOutput) PositiveColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataBarsOptions) *string { return v.PositiveColor }).(pulumi.StringPtrOutput)
}

type TemplateDataBarsOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDataBarsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataBarsOptions)(nil)).Elem()
}

func (o TemplateDataBarsOptionsPtrOutput) ToTemplateDataBarsOptionsPtrOutput() TemplateDataBarsOptionsPtrOutput {
	return o
}

func (o TemplateDataBarsOptionsPtrOutput) ToTemplateDataBarsOptionsPtrOutputWithContext(ctx context.Context) TemplateDataBarsOptionsPtrOutput {
	return o
}

func (o TemplateDataBarsOptionsPtrOutput) Elem() TemplateDataBarsOptionsOutput {
	return o.ApplyT(func(v *TemplateDataBarsOptions) TemplateDataBarsOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDataBarsOptions
		return ret
	}).(TemplateDataBarsOptionsOutput)
}

// The field ID for the data bars options.
func (o TemplateDataBarsOptionsPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataBarsOptions) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The color of the negative data bar.
func (o TemplateDataBarsOptionsPtrOutput) NegativeColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataBarsOptions) *string {
		if v == nil {
			return nil
		}
		return v.NegativeColor
	}).(pulumi.StringPtrOutput)
}

// The color of the positive data bar.
func (o TemplateDataBarsOptionsPtrOutput) PositiveColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataBarsOptions) *string {
		if v == nil {
			return nil
		}
		return v.PositiveColor
	}).(pulumi.StringPtrOutput)
}

type TemplateDataColor struct {
	// The color that is applied to the data value.
	Color *string `pulumi:"color"`
	// The data value that the color is applied to.
	DataValue *float64 `pulumi:"dataValue"`
}

// TemplateDataColorInput is an input type that accepts TemplateDataColorArgs and TemplateDataColorOutput values.
// You can construct a concrete instance of `TemplateDataColorInput` via:
//
//	TemplateDataColorArgs{...}
type TemplateDataColorInput interface {
	pulumi.Input

	ToTemplateDataColorOutput() TemplateDataColorOutput
	ToTemplateDataColorOutputWithContext(context.Context) TemplateDataColorOutput
}

type TemplateDataColorArgs struct {
	// The color that is applied to the data value.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The data value that the color is applied to.
	DataValue pulumi.Float64PtrInput `pulumi:"dataValue"`
}

func (TemplateDataColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataColor)(nil)).Elem()
}

func (i TemplateDataColorArgs) ToTemplateDataColorOutput() TemplateDataColorOutput {
	return i.ToTemplateDataColorOutputWithContext(context.Background())
}

func (i TemplateDataColorArgs) ToTemplateDataColorOutputWithContext(ctx context.Context) TemplateDataColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataColorOutput)
}

func (i TemplateDataColorArgs) ToTemplateDataColorPtrOutput() TemplateDataColorPtrOutput {
	return i.ToTemplateDataColorPtrOutputWithContext(context.Background())
}

func (i TemplateDataColorArgs) ToTemplateDataColorPtrOutputWithContext(ctx context.Context) TemplateDataColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataColorOutput).ToTemplateDataColorPtrOutputWithContext(ctx)
}

// TemplateDataColorPtrInput is an input type that accepts TemplateDataColorArgs, TemplateDataColorPtr and TemplateDataColorPtrOutput values.
// You can construct a concrete instance of `TemplateDataColorPtrInput` via:
//
//	        TemplateDataColorArgs{...}
//
//	or:
//
//	        nil
type TemplateDataColorPtrInput interface {
	pulumi.Input

	ToTemplateDataColorPtrOutput() TemplateDataColorPtrOutput
	ToTemplateDataColorPtrOutputWithContext(context.Context) TemplateDataColorPtrOutput
}

type templateDataColorPtrType TemplateDataColorArgs

func TemplateDataColorPtr(v *TemplateDataColorArgs) TemplateDataColorPtrInput {
	return (*templateDataColorPtrType)(v)
}

func (*templateDataColorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataColor)(nil)).Elem()
}

func (i *templateDataColorPtrType) ToTemplateDataColorPtrOutput() TemplateDataColorPtrOutput {
	return i.ToTemplateDataColorPtrOutputWithContext(context.Background())
}

func (i *templateDataColorPtrType) ToTemplateDataColorPtrOutputWithContext(ctx context.Context) TemplateDataColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataColorPtrOutput)
}

// TemplateDataColorArrayInput is an input type that accepts TemplateDataColorArray and TemplateDataColorArrayOutput values.
// You can construct a concrete instance of `TemplateDataColorArrayInput` via:
//
//	TemplateDataColorArray{ TemplateDataColorArgs{...} }
type TemplateDataColorArrayInput interface {
	pulumi.Input

	ToTemplateDataColorArrayOutput() TemplateDataColorArrayOutput
	ToTemplateDataColorArrayOutputWithContext(context.Context) TemplateDataColorArrayOutput
}

type TemplateDataColorArray []TemplateDataColorInput

func (TemplateDataColorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataColor)(nil)).Elem()
}

func (i TemplateDataColorArray) ToTemplateDataColorArrayOutput() TemplateDataColorArrayOutput {
	return i.ToTemplateDataColorArrayOutputWithContext(context.Background())
}

func (i TemplateDataColorArray) ToTemplateDataColorArrayOutputWithContext(ctx context.Context) TemplateDataColorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataColorArrayOutput)
}

type TemplateDataColorOutput struct{ *pulumi.OutputState }

func (TemplateDataColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataColor)(nil)).Elem()
}

func (o TemplateDataColorOutput) ToTemplateDataColorOutput() TemplateDataColorOutput {
	return o
}

func (o TemplateDataColorOutput) ToTemplateDataColorOutputWithContext(ctx context.Context) TemplateDataColorOutput {
	return o
}

func (o TemplateDataColorOutput) ToTemplateDataColorPtrOutput() TemplateDataColorPtrOutput {
	return o.ToTemplateDataColorPtrOutputWithContext(context.Background())
}

func (o TemplateDataColorOutput) ToTemplateDataColorPtrOutputWithContext(ctx context.Context) TemplateDataColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataColor) *TemplateDataColor {
		return &v
	}).(TemplateDataColorPtrOutput)
}

// The color that is applied to the data value.
func (o TemplateDataColorOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataColor) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The data value that the color is applied to.
func (o TemplateDataColorOutput) DataValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateDataColor) *float64 { return v.DataValue }).(pulumi.Float64PtrOutput)
}

type TemplateDataColorPtrOutput struct{ *pulumi.OutputState }

func (TemplateDataColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataColor)(nil)).Elem()
}

func (o TemplateDataColorPtrOutput) ToTemplateDataColorPtrOutput() TemplateDataColorPtrOutput {
	return o
}

func (o TemplateDataColorPtrOutput) ToTemplateDataColorPtrOutputWithContext(ctx context.Context) TemplateDataColorPtrOutput {
	return o
}

func (o TemplateDataColorPtrOutput) Elem() TemplateDataColorOutput {
	return o.ApplyT(func(v *TemplateDataColor) TemplateDataColor {
		if v != nil {
			return *v
		}
		var ret TemplateDataColor
		return ret
	}).(TemplateDataColorOutput)
}

// The color that is applied to the data value.
func (o TemplateDataColorPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataColor) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The data value that the color is applied to.
func (o TemplateDataColorPtrOutput) DataValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateDataColor) *float64 {
		if v == nil {
			return nil
		}
		return v.DataValue
	}).(pulumi.Float64PtrOutput)
}

type TemplateDataColorArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataColorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataColor)(nil)).Elem()
}

func (o TemplateDataColorArrayOutput) ToTemplateDataColorArrayOutput() TemplateDataColorArrayOutput {
	return o
}

func (o TemplateDataColorArrayOutput) ToTemplateDataColorArrayOutputWithContext(ctx context.Context) TemplateDataColorArrayOutput {
	return o
}

func (o TemplateDataColorArrayOutput) Index(i pulumi.IntInput) TemplateDataColorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataColor {
		return vs[0].([]TemplateDataColor)[vs[1].(int)]
	}).(TemplateDataColorOutput)
}

type TemplateDataFieldSeriesItem struct {
	// The axis that you are binding the field to.
	AxisBinding TemplateAxisBinding `pulumi:"axisBinding"`
	// The field ID of the field that you are setting the axis binding to.
	FieldId string `pulumi:"fieldId"`
	// The field value of the field that you are setting the axis binding to.
	FieldValue *string `pulumi:"fieldValue"`
	// The options that determine the presentation of line series associated to the field.
	Settings *TemplateLineChartSeriesSettings `pulumi:"settings"`
}

// TemplateDataFieldSeriesItemInput is an input type that accepts TemplateDataFieldSeriesItemArgs and TemplateDataFieldSeriesItemOutput values.
// You can construct a concrete instance of `TemplateDataFieldSeriesItemInput` via:
//
//	TemplateDataFieldSeriesItemArgs{...}
type TemplateDataFieldSeriesItemInput interface {
	pulumi.Input

	ToTemplateDataFieldSeriesItemOutput() TemplateDataFieldSeriesItemOutput
	ToTemplateDataFieldSeriesItemOutputWithContext(context.Context) TemplateDataFieldSeriesItemOutput
}

type TemplateDataFieldSeriesItemArgs struct {
	// The axis that you are binding the field to.
	AxisBinding TemplateAxisBindingInput `pulumi:"axisBinding"`
	// The field ID of the field that you are setting the axis binding to.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The field value of the field that you are setting the axis binding to.
	FieldValue pulumi.StringPtrInput `pulumi:"fieldValue"`
	// The options that determine the presentation of line series associated to the field.
	Settings TemplateLineChartSeriesSettingsPtrInput `pulumi:"settings"`
}

func (TemplateDataFieldSeriesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataFieldSeriesItem)(nil)).Elem()
}

func (i TemplateDataFieldSeriesItemArgs) ToTemplateDataFieldSeriesItemOutput() TemplateDataFieldSeriesItemOutput {
	return i.ToTemplateDataFieldSeriesItemOutputWithContext(context.Background())
}

func (i TemplateDataFieldSeriesItemArgs) ToTemplateDataFieldSeriesItemOutputWithContext(ctx context.Context) TemplateDataFieldSeriesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataFieldSeriesItemOutput)
}

func (i TemplateDataFieldSeriesItemArgs) ToTemplateDataFieldSeriesItemPtrOutput() TemplateDataFieldSeriesItemPtrOutput {
	return i.ToTemplateDataFieldSeriesItemPtrOutputWithContext(context.Background())
}

func (i TemplateDataFieldSeriesItemArgs) ToTemplateDataFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateDataFieldSeriesItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataFieldSeriesItemOutput).ToTemplateDataFieldSeriesItemPtrOutputWithContext(ctx)
}

// TemplateDataFieldSeriesItemPtrInput is an input type that accepts TemplateDataFieldSeriesItemArgs, TemplateDataFieldSeriesItemPtr and TemplateDataFieldSeriesItemPtrOutput values.
// You can construct a concrete instance of `TemplateDataFieldSeriesItemPtrInput` via:
//
//	        TemplateDataFieldSeriesItemArgs{...}
//
//	or:
//
//	        nil
type TemplateDataFieldSeriesItemPtrInput interface {
	pulumi.Input

	ToTemplateDataFieldSeriesItemPtrOutput() TemplateDataFieldSeriesItemPtrOutput
	ToTemplateDataFieldSeriesItemPtrOutputWithContext(context.Context) TemplateDataFieldSeriesItemPtrOutput
}

type templateDataFieldSeriesItemPtrType TemplateDataFieldSeriesItemArgs

func TemplateDataFieldSeriesItemPtr(v *TemplateDataFieldSeriesItemArgs) TemplateDataFieldSeriesItemPtrInput {
	return (*templateDataFieldSeriesItemPtrType)(v)
}

func (*templateDataFieldSeriesItemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataFieldSeriesItem)(nil)).Elem()
}

func (i *templateDataFieldSeriesItemPtrType) ToTemplateDataFieldSeriesItemPtrOutput() TemplateDataFieldSeriesItemPtrOutput {
	return i.ToTemplateDataFieldSeriesItemPtrOutputWithContext(context.Background())
}

func (i *templateDataFieldSeriesItemPtrType) ToTemplateDataFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateDataFieldSeriesItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataFieldSeriesItemPtrOutput)
}

type TemplateDataFieldSeriesItemOutput struct{ *pulumi.OutputState }

func (TemplateDataFieldSeriesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataFieldSeriesItem)(nil)).Elem()
}

func (o TemplateDataFieldSeriesItemOutput) ToTemplateDataFieldSeriesItemOutput() TemplateDataFieldSeriesItemOutput {
	return o
}

func (o TemplateDataFieldSeriesItemOutput) ToTemplateDataFieldSeriesItemOutputWithContext(ctx context.Context) TemplateDataFieldSeriesItemOutput {
	return o
}

func (o TemplateDataFieldSeriesItemOutput) ToTemplateDataFieldSeriesItemPtrOutput() TemplateDataFieldSeriesItemPtrOutput {
	return o.ToTemplateDataFieldSeriesItemPtrOutputWithContext(context.Background())
}

func (o TemplateDataFieldSeriesItemOutput) ToTemplateDataFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateDataFieldSeriesItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataFieldSeriesItem) *TemplateDataFieldSeriesItem {
		return &v
	}).(TemplateDataFieldSeriesItemPtrOutput)
}

// The axis that you are binding the field to.
func (o TemplateDataFieldSeriesItemOutput) AxisBinding() TemplateAxisBindingOutput {
	return o.ApplyT(func(v TemplateDataFieldSeriesItem) TemplateAxisBinding { return v.AxisBinding }).(TemplateAxisBindingOutput)
}

// The field ID of the field that you are setting the axis binding to.
func (o TemplateDataFieldSeriesItemOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDataFieldSeriesItem) string { return v.FieldId }).(pulumi.StringOutput)
}

// The field value of the field that you are setting the axis binding to.
func (o TemplateDataFieldSeriesItemOutput) FieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataFieldSeriesItem) *string { return v.FieldValue }).(pulumi.StringPtrOutput)
}

// The options that determine the presentation of line series associated to the field.
func (o TemplateDataFieldSeriesItemOutput) Settings() TemplateLineChartSeriesSettingsPtrOutput {
	return o.ApplyT(func(v TemplateDataFieldSeriesItem) *TemplateLineChartSeriesSettings { return v.Settings }).(TemplateLineChartSeriesSettingsPtrOutput)
}

type TemplateDataFieldSeriesItemPtrOutput struct{ *pulumi.OutputState }

func (TemplateDataFieldSeriesItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataFieldSeriesItem)(nil)).Elem()
}

func (o TemplateDataFieldSeriesItemPtrOutput) ToTemplateDataFieldSeriesItemPtrOutput() TemplateDataFieldSeriesItemPtrOutput {
	return o
}

func (o TemplateDataFieldSeriesItemPtrOutput) ToTemplateDataFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateDataFieldSeriesItemPtrOutput {
	return o
}

func (o TemplateDataFieldSeriesItemPtrOutput) Elem() TemplateDataFieldSeriesItemOutput {
	return o.ApplyT(func(v *TemplateDataFieldSeriesItem) TemplateDataFieldSeriesItem {
		if v != nil {
			return *v
		}
		var ret TemplateDataFieldSeriesItem
		return ret
	}).(TemplateDataFieldSeriesItemOutput)
}

// The axis that you are binding the field to.
func (o TemplateDataFieldSeriesItemPtrOutput) AxisBinding() TemplateAxisBindingPtrOutput {
	return o.ApplyT(func(v *TemplateDataFieldSeriesItem) *TemplateAxisBinding {
		if v == nil {
			return nil
		}
		return &v.AxisBinding
	}).(TemplateAxisBindingPtrOutput)
}

// The field ID of the field that you are setting the axis binding to.
func (o TemplateDataFieldSeriesItemPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataFieldSeriesItem) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The field value of the field that you are setting the axis binding to.
func (o TemplateDataFieldSeriesItemPtrOutput) FieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataFieldSeriesItem) *string {
		if v == nil {
			return nil
		}
		return v.FieldValue
	}).(pulumi.StringPtrOutput)
}

// The options that determine the presentation of line series associated to the field.
func (o TemplateDataFieldSeriesItemPtrOutput) Settings() TemplateLineChartSeriesSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateDataFieldSeriesItem) *TemplateLineChartSeriesSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(TemplateLineChartSeriesSettingsPtrOutput)
}

type TemplateDataLabelOptions struct {
	// Determines the visibility of the category field labels.
	CategoryLabelVisibility interface{} `pulumi:"categoryLabelVisibility"`
	// The option that determines the data label type.
	DataLabelTypes []TemplateDataLabelType `pulumi:"dataLabelTypes"`
	// Determines the color of the data labels.
	LabelColor *string `pulumi:"labelColor"`
	// Determines the content of the data labels.
	LabelContent *TemplateDataLabelContent `pulumi:"labelContent"`
	// Determines the font configuration of the data labels.
	LabelFontConfiguration *TemplateFontConfiguration `pulumi:"labelFontConfiguration"`
	// Determines the visibility of the measure field labels.
	MeasureLabelVisibility interface{} `pulumi:"measureLabelVisibility"`
	// Determines whether overlap is enabled or disabled for the data labels.
	Overlap *TemplateDataLabelOverlap `pulumi:"overlap"`
	// Determines the position of the data labels.
	Position *TemplateDataLabelPosition `pulumi:"position"`
	// Determines the visibility of the total.
	TotalsVisibility interface{} `pulumi:"totalsVisibility"`
	// Determines the visibility of the data labels.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateDataLabelOptionsInput is an input type that accepts TemplateDataLabelOptionsArgs and TemplateDataLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateDataLabelOptionsInput` via:
//
//	TemplateDataLabelOptionsArgs{...}
type TemplateDataLabelOptionsInput interface {
	pulumi.Input

	ToTemplateDataLabelOptionsOutput() TemplateDataLabelOptionsOutput
	ToTemplateDataLabelOptionsOutputWithContext(context.Context) TemplateDataLabelOptionsOutput
}

type TemplateDataLabelOptionsArgs struct {
	// Determines the visibility of the category field labels.
	CategoryLabelVisibility pulumi.Input `pulumi:"categoryLabelVisibility"`
	// The option that determines the data label type.
	DataLabelTypes TemplateDataLabelTypeArrayInput `pulumi:"dataLabelTypes"`
	// Determines the color of the data labels.
	LabelColor pulumi.StringPtrInput `pulumi:"labelColor"`
	// Determines the content of the data labels.
	LabelContent TemplateDataLabelContentPtrInput `pulumi:"labelContent"`
	// Determines the font configuration of the data labels.
	LabelFontConfiguration TemplateFontConfigurationPtrInput `pulumi:"labelFontConfiguration"`
	// Determines the visibility of the measure field labels.
	MeasureLabelVisibility pulumi.Input `pulumi:"measureLabelVisibility"`
	// Determines whether overlap is enabled or disabled for the data labels.
	Overlap TemplateDataLabelOverlapPtrInput `pulumi:"overlap"`
	// Determines the position of the data labels.
	Position TemplateDataLabelPositionPtrInput `pulumi:"position"`
	// Determines the visibility of the total.
	TotalsVisibility pulumi.Input `pulumi:"totalsVisibility"`
	// Determines the visibility of the data labels.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateDataLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataLabelOptions)(nil)).Elem()
}

func (i TemplateDataLabelOptionsArgs) ToTemplateDataLabelOptionsOutput() TemplateDataLabelOptionsOutput {
	return i.ToTemplateDataLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateDataLabelOptionsArgs) ToTemplateDataLabelOptionsOutputWithContext(ctx context.Context) TemplateDataLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataLabelOptionsOutput)
}

func (i TemplateDataLabelOptionsArgs) ToTemplateDataLabelOptionsPtrOutput() TemplateDataLabelOptionsPtrOutput {
	return i.ToTemplateDataLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDataLabelOptionsArgs) ToTemplateDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateDataLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataLabelOptionsOutput).ToTemplateDataLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateDataLabelOptionsPtrInput is an input type that accepts TemplateDataLabelOptionsArgs, TemplateDataLabelOptionsPtr and TemplateDataLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDataLabelOptionsPtrInput` via:
//
//	        TemplateDataLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDataLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDataLabelOptionsPtrOutput() TemplateDataLabelOptionsPtrOutput
	ToTemplateDataLabelOptionsPtrOutputWithContext(context.Context) TemplateDataLabelOptionsPtrOutput
}

type templateDataLabelOptionsPtrType TemplateDataLabelOptionsArgs

func TemplateDataLabelOptionsPtr(v *TemplateDataLabelOptionsArgs) TemplateDataLabelOptionsPtrInput {
	return (*templateDataLabelOptionsPtrType)(v)
}

func (*templateDataLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataLabelOptions)(nil)).Elem()
}

func (i *templateDataLabelOptionsPtrType) ToTemplateDataLabelOptionsPtrOutput() TemplateDataLabelOptionsPtrOutput {
	return i.ToTemplateDataLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDataLabelOptionsPtrType) ToTemplateDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateDataLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataLabelOptionsPtrOutput)
}

type TemplateDataLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDataLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataLabelOptions)(nil)).Elem()
}

func (o TemplateDataLabelOptionsOutput) ToTemplateDataLabelOptionsOutput() TemplateDataLabelOptionsOutput {
	return o
}

func (o TemplateDataLabelOptionsOutput) ToTemplateDataLabelOptionsOutputWithContext(ctx context.Context) TemplateDataLabelOptionsOutput {
	return o
}

func (o TemplateDataLabelOptionsOutput) ToTemplateDataLabelOptionsPtrOutput() TemplateDataLabelOptionsPtrOutput {
	return o.ToTemplateDataLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDataLabelOptionsOutput) ToTemplateDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateDataLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataLabelOptions) *TemplateDataLabelOptions {
		return &v
	}).(TemplateDataLabelOptionsPtrOutput)
}

// Determines the visibility of the category field labels.
func (o TemplateDataLabelOptionsOutput) CategoryLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) interface{} { return v.CategoryLabelVisibility }).(pulumi.AnyOutput)
}

// The option that determines the data label type.
func (o TemplateDataLabelOptionsOutput) DataLabelTypes() TemplateDataLabelTypeArrayOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) []TemplateDataLabelType { return v.DataLabelTypes }).(TemplateDataLabelTypeArrayOutput)
}

// Determines the color of the data labels.
func (o TemplateDataLabelOptionsOutput) LabelColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) *string { return v.LabelColor }).(pulumi.StringPtrOutput)
}

// Determines the content of the data labels.
func (o TemplateDataLabelOptionsOutput) LabelContent() TemplateDataLabelContentPtrOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) *TemplateDataLabelContent { return v.LabelContent }).(TemplateDataLabelContentPtrOutput)
}

// Determines the font configuration of the data labels.
func (o TemplateDataLabelOptionsOutput) LabelFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) *TemplateFontConfiguration { return v.LabelFontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// Determines the visibility of the measure field labels.
func (o TemplateDataLabelOptionsOutput) MeasureLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) interface{} { return v.MeasureLabelVisibility }).(pulumi.AnyOutput)
}

// Determines whether overlap is enabled or disabled for the data labels.
func (o TemplateDataLabelOptionsOutput) Overlap() TemplateDataLabelOverlapPtrOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) *TemplateDataLabelOverlap { return v.Overlap }).(TemplateDataLabelOverlapPtrOutput)
}

// Determines the position of the data labels.
func (o TemplateDataLabelOptionsOutput) Position() TemplateDataLabelPositionPtrOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) *TemplateDataLabelPosition { return v.Position }).(TemplateDataLabelPositionPtrOutput)
}

// Determines the visibility of the total.
func (o TemplateDataLabelOptionsOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) interface{} { return v.TotalsVisibility }).(pulumi.AnyOutput)
}

// Determines the visibility of the data labels.
func (o TemplateDataLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDataLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateDataLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDataLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataLabelOptions)(nil)).Elem()
}

func (o TemplateDataLabelOptionsPtrOutput) ToTemplateDataLabelOptionsPtrOutput() TemplateDataLabelOptionsPtrOutput {
	return o
}

func (o TemplateDataLabelOptionsPtrOutput) ToTemplateDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateDataLabelOptionsPtrOutput {
	return o
}

func (o TemplateDataLabelOptionsPtrOutput) Elem() TemplateDataLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) TemplateDataLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDataLabelOptions
		return ret
	}).(TemplateDataLabelOptionsOutput)
}

// Determines the visibility of the category field labels.
func (o TemplateDataLabelOptionsPtrOutput) CategoryLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.CategoryLabelVisibility
	}).(pulumi.AnyOutput)
}

// The option that determines the data label type.
func (o TemplateDataLabelOptionsPtrOutput) DataLabelTypes() TemplateDataLabelTypeArrayOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) []TemplateDataLabelType {
		if v == nil {
			return nil
		}
		return v.DataLabelTypes
	}).(TemplateDataLabelTypeArrayOutput)
}

// Determines the color of the data labels.
func (o TemplateDataLabelOptionsPtrOutput) LabelColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) *string {
		if v == nil {
			return nil
		}
		return v.LabelColor
	}).(pulumi.StringPtrOutput)
}

// Determines the content of the data labels.
func (o TemplateDataLabelOptionsPtrOutput) LabelContent() TemplateDataLabelContentPtrOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) *TemplateDataLabelContent {
		if v == nil {
			return nil
		}
		return v.LabelContent
	}).(TemplateDataLabelContentPtrOutput)
}

// Determines the font configuration of the data labels.
func (o TemplateDataLabelOptionsPtrOutput) LabelFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.LabelFontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// Determines the visibility of the measure field labels.
func (o TemplateDataLabelOptionsPtrOutput) MeasureLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.MeasureLabelVisibility
	}).(pulumi.AnyOutput)
}

// Determines whether overlap is enabled or disabled for the data labels.
func (o TemplateDataLabelOptionsPtrOutput) Overlap() TemplateDataLabelOverlapPtrOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) *TemplateDataLabelOverlap {
		if v == nil {
			return nil
		}
		return v.Overlap
	}).(TemplateDataLabelOverlapPtrOutput)
}

// Determines the position of the data labels.
func (o TemplateDataLabelOptionsPtrOutput) Position() TemplateDataLabelPositionPtrOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) *TemplateDataLabelPosition {
		if v == nil {
			return nil
		}
		return v.Position
	}).(TemplateDataLabelPositionPtrOutput)
}

// Determines the visibility of the total.
func (o TemplateDataLabelOptionsPtrOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.TotalsVisibility
	}).(pulumi.AnyOutput)
}

// Determines the visibility of the data labels.
func (o TemplateDataLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDataLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateDataLabelType struct {
	// The option that specifies individual data values for labels.
	DataPathLabelType *TemplateDataPathLabelType `pulumi:"dataPathLabelType"`
	// Determines the label configuration for the entire field.
	FieldLabelType *TemplateFieldLabelType `pulumi:"fieldLabelType"`
	// Determines the label configuration for the maximum value in a visual.
	MaximumLabelType *TemplateMaximumLabelType `pulumi:"maximumLabelType"`
	// Determines the label configuration for the minimum value in a visual.
	MinimumLabelType *TemplateMinimumLabelType `pulumi:"minimumLabelType"`
	// Determines the label configuration for range end value in a visual.
	RangeEndsLabelType *TemplateRangeEndsLabelType `pulumi:"rangeEndsLabelType"`
}

// TemplateDataLabelTypeInput is an input type that accepts TemplateDataLabelTypeArgs and TemplateDataLabelTypeOutput values.
// You can construct a concrete instance of `TemplateDataLabelTypeInput` via:
//
//	TemplateDataLabelTypeArgs{...}
type TemplateDataLabelTypeInput interface {
	pulumi.Input

	ToTemplateDataLabelTypeOutput() TemplateDataLabelTypeOutput
	ToTemplateDataLabelTypeOutputWithContext(context.Context) TemplateDataLabelTypeOutput
}

type TemplateDataLabelTypeArgs struct {
	// The option that specifies individual data values for labels.
	DataPathLabelType TemplateDataPathLabelTypePtrInput `pulumi:"dataPathLabelType"`
	// Determines the label configuration for the entire field.
	FieldLabelType TemplateFieldLabelTypePtrInput `pulumi:"fieldLabelType"`
	// Determines the label configuration for the maximum value in a visual.
	MaximumLabelType TemplateMaximumLabelTypePtrInput `pulumi:"maximumLabelType"`
	// Determines the label configuration for the minimum value in a visual.
	MinimumLabelType TemplateMinimumLabelTypePtrInput `pulumi:"minimumLabelType"`
	// Determines the label configuration for range end value in a visual.
	RangeEndsLabelType TemplateRangeEndsLabelTypePtrInput `pulumi:"rangeEndsLabelType"`
}

func (TemplateDataLabelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataLabelType)(nil)).Elem()
}

func (i TemplateDataLabelTypeArgs) ToTemplateDataLabelTypeOutput() TemplateDataLabelTypeOutput {
	return i.ToTemplateDataLabelTypeOutputWithContext(context.Background())
}

func (i TemplateDataLabelTypeArgs) ToTemplateDataLabelTypeOutputWithContext(ctx context.Context) TemplateDataLabelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataLabelTypeOutput)
}

// TemplateDataLabelTypeArrayInput is an input type that accepts TemplateDataLabelTypeArray and TemplateDataLabelTypeArrayOutput values.
// You can construct a concrete instance of `TemplateDataLabelTypeArrayInput` via:
//
//	TemplateDataLabelTypeArray{ TemplateDataLabelTypeArgs{...} }
type TemplateDataLabelTypeArrayInput interface {
	pulumi.Input

	ToTemplateDataLabelTypeArrayOutput() TemplateDataLabelTypeArrayOutput
	ToTemplateDataLabelTypeArrayOutputWithContext(context.Context) TemplateDataLabelTypeArrayOutput
}

type TemplateDataLabelTypeArray []TemplateDataLabelTypeInput

func (TemplateDataLabelTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataLabelType)(nil)).Elem()
}

func (i TemplateDataLabelTypeArray) ToTemplateDataLabelTypeArrayOutput() TemplateDataLabelTypeArrayOutput {
	return i.ToTemplateDataLabelTypeArrayOutputWithContext(context.Background())
}

func (i TemplateDataLabelTypeArray) ToTemplateDataLabelTypeArrayOutputWithContext(ctx context.Context) TemplateDataLabelTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataLabelTypeArrayOutput)
}

type TemplateDataLabelTypeOutput struct{ *pulumi.OutputState }

func (TemplateDataLabelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataLabelType)(nil)).Elem()
}

func (o TemplateDataLabelTypeOutput) ToTemplateDataLabelTypeOutput() TemplateDataLabelTypeOutput {
	return o
}

func (o TemplateDataLabelTypeOutput) ToTemplateDataLabelTypeOutputWithContext(ctx context.Context) TemplateDataLabelTypeOutput {
	return o
}

// The option that specifies individual data values for labels.
func (o TemplateDataLabelTypeOutput) DataPathLabelType() TemplateDataPathLabelTypePtrOutput {
	return o.ApplyT(func(v TemplateDataLabelType) *TemplateDataPathLabelType { return v.DataPathLabelType }).(TemplateDataPathLabelTypePtrOutput)
}

// Determines the label configuration for the entire field.
func (o TemplateDataLabelTypeOutput) FieldLabelType() TemplateFieldLabelTypePtrOutput {
	return o.ApplyT(func(v TemplateDataLabelType) *TemplateFieldLabelType { return v.FieldLabelType }).(TemplateFieldLabelTypePtrOutput)
}

// Determines the label configuration for the maximum value in a visual.
func (o TemplateDataLabelTypeOutput) MaximumLabelType() TemplateMaximumLabelTypePtrOutput {
	return o.ApplyT(func(v TemplateDataLabelType) *TemplateMaximumLabelType { return v.MaximumLabelType }).(TemplateMaximumLabelTypePtrOutput)
}

// Determines the label configuration for the minimum value in a visual.
func (o TemplateDataLabelTypeOutput) MinimumLabelType() TemplateMinimumLabelTypePtrOutput {
	return o.ApplyT(func(v TemplateDataLabelType) *TemplateMinimumLabelType { return v.MinimumLabelType }).(TemplateMinimumLabelTypePtrOutput)
}

// Determines the label configuration for range end value in a visual.
func (o TemplateDataLabelTypeOutput) RangeEndsLabelType() TemplateRangeEndsLabelTypePtrOutput {
	return o.ApplyT(func(v TemplateDataLabelType) *TemplateRangeEndsLabelType { return v.RangeEndsLabelType }).(TemplateRangeEndsLabelTypePtrOutput)
}

type TemplateDataLabelTypeArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataLabelTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataLabelType)(nil)).Elem()
}

func (o TemplateDataLabelTypeArrayOutput) ToTemplateDataLabelTypeArrayOutput() TemplateDataLabelTypeArrayOutput {
	return o
}

func (o TemplateDataLabelTypeArrayOutput) ToTemplateDataLabelTypeArrayOutputWithContext(ctx context.Context) TemplateDataLabelTypeArrayOutput {
	return o
}

func (o TemplateDataLabelTypeArrayOutput) Index(i pulumi.IntInput) TemplateDataLabelTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataLabelType {
		return vs[0].([]TemplateDataLabelType)[vs[1].(int)]
	}).(TemplateDataLabelTypeOutput)
}

type TemplateDataPathColor struct {
	// The color that needs to be applied to the element.
	Color string `pulumi:"color"`
	// The element that the color needs to be applied to.
	Element TemplateDataPathValue `pulumi:"element"`
	// The time granularity of the field that the color needs to be applied to.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateDataPathColorInput is an input type that accepts TemplateDataPathColorArgs and TemplateDataPathColorOutput values.
// You can construct a concrete instance of `TemplateDataPathColorInput` via:
//
//	TemplateDataPathColorArgs{...}
type TemplateDataPathColorInput interface {
	pulumi.Input

	ToTemplateDataPathColorOutput() TemplateDataPathColorOutput
	ToTemplateDataPathColorOutputWithContext(context.Context) TemplateDataPathColorOutput
}

type TemplateDataPathColorArgs struct {
	// The color that needs to be applied to the element.
	Color pulumi.StringInput `pulumi:"color"`
	// The element that the color needs to be applied to.
	Element TemplateDataPathValueInput `pulumi:"element"`
	// The time granularity of the field that the color needs to be applied to.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TemplateDataPathColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathColor)(nil)).Elem()
}

func (i TemplateDataPathColorArgs) ToTemplateDataPathColorOutput() TemplateDataPathColorOutput {
	return i.ToTemplateDataPathColorOutputWithContext(context.Background())
}

func (i TemplateDataPathColorArgs) ToTemplateDataPathColorOutputWithContext(ctx context.Context) TemplateDataPathColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathColorOutput)
}

// TemplateDataPathColorArrayInput is an input type that accepts TemplateDataPathColorArray and TemplateDataPathColorArrayOutput values.
// You can construct a concrete instance of `TemplateDataPathColorArrayInput` via:
//
//	TemplateDataPathColorArray{ TemplateDataPathColorArgs{...} }
type TemplateDataPathColorArrayInput interface {
	pulumi.Input

	ToTemplateDataPathColorArrayOutput() TemplateDataPathColorArrayOutput
	ToTemplateDataPathColorArrayOutputWithContext(context.Context) TemplateDataPathColorArrayOutput
}

type TemplateDataPathColorArray []TemplateDataPathColorInput

func (TemplateDataPathColorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataPathColor)(nil)).Elem()
}

func (i TemplateDataPathColorArray) ToTemplateDataPathColorArrayOutput() TemplateDataPathColorArrayOutput {
	return i.ToTemplateDataPathColorArrayOutputWithContext(context.Background())
}

func (i TemplateDataPathColorArray) ToTemplateDataPathColorArrayOutputWithContext(ctx context.Context) TemplateDataPathColorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathColorArrayOutput)
}

type TemplateDataPathColorOutput struct{ *pulumi.OutputState }

func (TemplateDataPathColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathColor)(nil)).Elem()
}

func (o TemplateDataPathColorOutput) ToTemplateDataPathColorOutput() TemplateDataPathColorOutput {
	return o
}

func (o TemplateDataPathColorOutput) ToTemplateDataPathColorOutputWithContext(ctx context.Context) TemplateDataPathColorOutput {
	return o
}

// The color that needs to be applied to the element.
func (o TemplateDataPathColorOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDataPathColor) string { return v.Color }).(pulumi.StringOutput)
}

// The element that the color needs to be applied to.
func (o TemplateDataPathColorOutput) Element() TemplateDataPathValueOutput {
	return o.ApplyT(func(v TemplateDataPathColor) TemplateDataPathValue { return v.Element }).(TemplateDataPathValueOutput)
}

// The time granularity of the field that the color needs to be applied to.
func (o TemplateDataPathColorOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateDataPathColor) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

type TemplateDataPathColorArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataPathColorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataPathColor)(nil)).Elem()
}

func (o TemplateDataPathColorArrayOutput) ToTemplateDataPathColorArrayOutput() TemplateDataPathColorArrayOutput {
	return o
}

func (o TemplateDataPathColorArrayOutput) ToTemplateDataPathColorArrayOutputWithContext(ctx context.Context) TemplateDataPathColorArrayOutput {
	return o
}

func (o TemplateDataPathColorArrayOutput) Index(i pulumi.IntInput) TemplateDataPathColorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataPathColor {
		return vs[0].([]TemplateDataPathColor)[vs[1].(int)]
	}).(TemplateDataPathColorOutput)
}

type TemplateDataPathLabelType struct {
	// The field ID of the field that the data label needs to be applied to.
	FieldId *string `pulumi:"fieldId"`
	// The actual value of the field that is labeled.
	FieldValue *string `pulumi:"fieldValue"`
	// The visibility of the data label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateDataPathLabelTypeInput is an input type that accepts TemplateDataPathLabelTypeArgs and TemplateDataPathLabelTypeOutput values.
// You can construct a concrete instance of `TemplateDataPathLabelTypeInput` via:
//
//	TemplateDataPathLabelTypeArgs{...}
type TemplateDataPathLabelTypeInput interface {
	pulumi.Input

	ToTemplateDataPathLabelTypeOutput() TemplateDataPathLabelTypeOutput
	ToTemplateDataPathLabelTypeOutputWithContext(context.Context) TemplateDataPathLabelTypeOutput
}

type TemplateDataPathLabelTypeArgs struct {
	// The field ID of the field that the data label needs to be applied to.
	FieldId pulumi.StringPtrInput `pulumi:"fieldId"`
	// The actual value of the field that is labeled.
	FieldValue pulumi.StringPtrInput `pulumi:"fieldValue"`
	// The visibility of the data label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateDataPathLabelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathLabelType)(nil)).Elem()
}

func (i TemplateDataPathLabelTypeArgs) ToTemplateDataPathLabelTypeOutput() TemplateDataPathLabelTypeOutput {
	return i.ToTemplateDataPathLabelTypeOutputWithContext(context.Background())
}

func (i TemplateDataPathLabelTypeArgs) ToTemplateDataPathLabelTypeOutputWithContext(ctx context.Context) TemplateDataPathLabelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathLabelTypeOutput)
}

func (i TemplateDataPathLabelTypeArgs) ToTemplateDataPathLabelTypePtrOutput() TemplateDataPathLabelTypePtrOutput {
	return i.ToTemplateDataPathLabelTypePtrOutputWithContext(context.Background())
}

func (i TemplateDataPathLabelTypeArgs) ToTemplateDataPathLabelTypePtrOutputWithContext(ctx context.Context) TemplateDataPathLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathLabelTypeOutput).ToTemplateDataPathLabelTypePtrOutputWithContext(ctx)
}

// TemplateDataPathLabelTypePtrInput is an input type that accepts TemplateDataPathLabelTypeArgs, TemplateDataPathLabelTypePtr and TemplateDataPathLabelTypePtrOutput values.
// You can construct a concrete instance of `TemplateDataPathLabelTypePtrInput` via:
//
//	        TemplateDataPathLabelTypeArgs{...}
//
//	or:
//
//	        nil
type TemplateDataPathLabelTypePtrInput interface {
	pulumi.Input

	ToTemplateDataPathLabelTypePtrOutput() TemplateDataPathLabelTypePtrOutput
	ToTemplateDataPathLabelTypePtrOutputWithContext(context.Context) TemplateDataPathLabelTypePtrOutput
}

type templateDataPathLabelTypePtrType TemplateDataPathLabelTypeArgs

func TemplateDataPathLabelTypePtr(v *TemplateDataPathLabelTypeArgs) TemplateDataPathLabelTypePtrInput {
	return (*templateDataPathLabelTypePtrType)(v)
}

func (*templateDataPathLabelTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataPathLabelType)(nil)).Elem()
}

func (i *templateDataPathLabelTypePtrType) ToTemplateDataPathLabelTypePtrOutput() TemplateDataPathLabelTypePtrOutput {
	return i.ToTemplateDataPathLabelTypePtrOutputWithContext(context.Background())
}

func (i *templateDataPathLabelTypePtrType) ToTemplateDataPathLabelTypePtrOutputWithContext(ctx context.Context) TemplateDataPathLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathLabelTypePtrOutput)
}

type TemplateDataPathLabelTypeOutput struct{ *pulumi.OutputState }

func (TemplateDataPathLabelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathLabelType)(nil)).Elem()
}

func (o TemplateDataPathLabelTypeOutput) ToTemplateDataPathLabelTypeOutput() TemplateDataPathLabelTypeOutput {
	return o
}

func (o TemplateDataPathLabelTypeOutput) ToTemplateDataPathLabelTypeOutputWithContext(ctx context.Context) TemplateDataPathLabelTypeOutput {
	return o
}

func (o TemplateDataPathLabelTypeOutput) ToTemplateDataPathLabelTypePtrOutput() TemplateDataPathLabelTypePtrOutput {
	return o.ToTemplateDataPathLabelTypePtrOutputWithContext(context.Background())
}

func (o TemplateDataPathLabelTypeOutput) ToTemplateDataPathLabelTypePtrOutputWithContext(ctx context.Context) TemplateDataPathLabelTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataPathLabelType) *TemplateDataPathLabelType {
		return &v
	}).(TemplateDataPathLabelTypePtrOutput)
}

// The field ID of the field that the data label needs to be applied to.
func (o TemplateDataPathLabelTypeOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataPathLabelType) *string { return v.FieldId }).(pulumi.StringPtrOutput)
}

// The actual value of the field that is labeled.
func (o TemplateDataPathLabelTypeOutput) FieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataPathLabelType) *string { return v.FieldValue }).(pulumi.StringPtrOutput)
}

// The visibility of the data label.
func (o TemplateDataPathLabelTypeOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDataPathLabelType) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateDataPathLabelTypePtrOutput struct{ *pulumi.OutputState }

func (TemplateDataPathLabelTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataPathLabelType)(nil)).Elem()
}

func (o TemplateDataPathLabelTypePtrOutput) ToTemplateDataPathLabelTypePtrOutput() TemplateDataPathLabelTypePtrOutput {
	return o
}

func (o TemplateDataPathLabelTypePtrOutput) ToTemplateDataPathLabelTypePtrOutputWithContext(ctx context.Context) TemplateDataPathLabelTypePtrOutput {
	return o
}

func (o TemplateDataPathLabelTypePtrOutput) Elem() TemplateDataPathLabelTypeOutput {
	return o.ApplyT(func(v *TemplateDataPathLabelType) TemplateDataPathLabelType {
		if v != nil {
			return *v
		}
		var ret TemplateDataPathLabelType
		return ret
	}).(TemplateDataPathLabelTypeOutput)
}

// The field ID of the field that the data label needs to be applied to.
func (o TemplateDataPathLabelTypePtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataPathLabelType) *string {
		if v == nil {
			return nil
		}
		return v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The actual value of the field that is labeled.
func (o TemplateDataPathLabelTypePtrOutput) FieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDataPathLabelType) *string {
		if v == nil {
			return nil
		}
		return v.FieldValue
	}).(pulumi.StringPtrOutput)
}

// The visibility of the data label.
func (o TemplateDataPathLabelTypePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDataPathLabelType) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateDataPathSort struct {
	// Determines the sort direction.
	Direction TemplateSortDirection `pulumi:"direction"`
	// The list of data paths that need to be sorted.
	SortPaths []TemplateDataPathValue `pulumi:"sortPaths"`
}

// TemplateDataPathSortInput is an input type that accepts TemplateDataPathSortArgs and TemplateDataPathSortOutput values.
// You can construct a concrete instance of `TemplateDataPathSortInput` via:
//
//	TemplateDataPathSortArgs{...}
type TemplateDataPathSortInput interface {
	pulumi.Input

	ToTemplateDataPathSortOutput() TemplateDataPathSortOutput
	ToTemplateDataPathSortOutputWithContext(context.Context) TemplateDataPathSortOutput
}

type TemplateDataPathSortArgs struct {
	// Determines the sort direction.
	Direction TemplateSortDirectionInput `pulumi:"direction"`
	// The list of data paths that need to be sorted.
	SortPaths TemplateDataPathValueArrayInput `pulumi:"sortPaths"`
}

func (TemplateDataPathSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathSort)(nil)).Elem()
}

func (i TemplateDataPathSortArgs) ToTemplateDataPathSortOutput() TemplateDataPathSortOutput {
	return i.ToTemplateDataPathSortOutputWithContext(context.Background())
}

func (i TemplateDataPathSortArgs) ToTemplateDataPathSortOutputWithContext(ctx context.Context) TemplateDataPathSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathSortOutput)
}

func (i TemplateDataPathSortArgs) ToTemplateDataPathSortPtrOutput() TemplateDataPathSortPtrOutput {
	return i.ToTemplateDataPathSortPtrOutputWithContext(context.Background())
}

func (i TemplateDataPathSortArgs) ToTemplateDataPathSortPtrOutputWithContext(ctx context.Context) TemplateDataPathSortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathSortOutput).ToTemplateDataPathSortPtrOutputWithContext(ctx)
}

// TemplateDataPathSortPtrInput is an input type that accepts TemplateDataPathSortArgs, TemplateDataPathSortPtr and TemplateDataPathSortPtrOutput values.
// You can construct a concrete instance of `TemplateDataPathSortPtrInput` via:
//
//	        TemplateDataPathSortArgs{...}
//
//	or:
//
//	        nil
type TemplateDataPathSortPtrInput interface {
	pulumi.Input

	ToTemplateDataPathSortPtrOutput() TemplateDataPathSortPtrOutput
	ToTemplateDataPathSortPtrOutputWithContext(context.Context) TemplateDataPathSortPtrOutput
}

type templateDataPathSortPtrType TemplateDataPathSortArgs

func TemplateDataPathSortPtr(v *TemplateDataPathSortArgs) TemplateDataPathSortPtrInput {
	return (*templateDataPathSortPtrType)(v)
}

func (*templateDataPathSortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataPathSort)(nil)).Elem()
}

func (i *templateDataPathSortPtrType) ToTemplateDataPathSortPtrOutput() TemplateDataPathSortPtrOutput {
	return i.ToTemplateDataPathSortPtrOutputWithContext(context.Background())
}

func (i *templateDataPathSortPtrType) ToTemplateDataPathSortPtrOutputWithContext(ctx context.Context) TemplateDataPathSortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathSortPtrOutput)
}

type TemplateDataPathSortOutput struct{ *pulumi.OutputState }

func (TemplateDataPathSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathSort)(nil)).Elem()
}

func (o TemplateDataPathSortOutput) ToTemplateDataPathSortOutput() TemplateDataPathSortOutput {
	return o
}

func (o TemplateDataPathSortOutput) ToTemplateDataPathSortOutputWithContext(ctx context.Context) TemplateDataPathSortOutput {
	return o
}

func (o TemplateDataPathSortOutput) ToTemplateDataPathSortPtrOutput() TemplateDataPathSortPtrOutput {
	return o.ToTemplateDataPathSortPtrOutputWithContext(context.Background())
}

func (o TemplateDataPathSortOutput) ToTemplateDataPathSortPtrOutputWithContext(ctx context.Context) TemplateDataPathSortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataPathSort) *TemplateDataPathSort {
		return &v
	}).(TemplateDataPathSortPtrOutput)
}

// Determines the sort direction.
func (o TemplateDataPathSortOutput) Direction() TemplateSortDirectionOutput {
	return o.ApplyT(func(v TemplateDataPathSort) TemplateSortDirection { return v.Direction }).(TemplateSortDirectionOutput)
}

// The list of data paths that need to be sorted.
func (o TemplateDataPathSortOutput) SortPaths() TemplateDataPathValueArrayOutput {
	return o.ApplyT(func(v TemplateDataPathSort) []TemplateDataPathValue { return v.SortPaths }).(TemplateDataPathValueArrayOutput)
}

type TemplateDataPathSortPtrOutput struct{ *pulumi.OutputState }

func (TemplateDataPathSortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataPathSort)(nil)).Elem()
}

func (o TemplateDataPathSortPtrOutput) ToTemplateDataPathSortPtrOutput() TemplateDataPathSortPtrOutput {
	return o
}

func (o TemplateDataPathSortPtrOutput) ToTemplateDataPathSortPtrOutputWithContext(ctx context.Context) TemplateDataPathSortPtrOutput {
	return o
}

func (o TemplateDataPathSortPtrOutput) Elem() TemplateDataPathSortOutput {
	return o.ApplyT(func(v *TemplateDataPathSort) TemplateDataPathSort {
		if v != nil {
			return *v
		}
		var ret TemplateDataPathSort
		return ret
	}).(TemplateDataPathSortOutput)
}

// Determines the sort direction.
func (o TemplateDataPathSortPtrOutput) Direction() TemplateSortDirectionPtrOutput {
	return o.ApplyT(func(v *TemplateDataPathSort) *TemplateSortDirection {
		if v == nil {
			return nil
		}
		return &v.Direction
	}).(TemplateSortDirectionPtrOutput)
}

// The list of data paths that need to be sorted.
func (o TemplateDataPathSortPtrOutput) SortPaths() TemplateDataPathValueArrayOutput {
	return o.ApplyT(func(v *TemplateDataPathSort) []TemplateDataPathValue {
		if v == nil {
			return nil
		}
		return v.SortPaths
	}).(TemplateDataPathValueArrayOutput)
}

type TemplateDataPathType struct {
	// The type of data path value utilized in a pivot table. Choose one of the following options:
	//
	// - `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when `RowsLayout` is set to `HIERARCHY` .
	// - `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is set to Metric Placement.
	// - `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
	// - `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric, when there is no field in the `ValuesFieldWell` .
	PivotTableDataPathType *TemplatePivotTableDataPathType `pulumi:"pivotTableDataPathType"`
}

// TemplateDataPathTypeInput is an input type that accepts TemplateDataPathTypeArgs and TemplateDataPathTypeOutput values.
// You can construct a concrete instance of `TemplateDataPathTypeInput` via:
//
//	TemplateDataPathTypeArgs{...}
type TemplateDataPathTypeInput interface {
	pulumi.Input

	ToTemplateDataPathTypeOutput() TemplateDataPathTypeOutput
	ToTemplateDataPathTypeOutputWithContext(context.Context) TemplateDataPathTypeOutput
}

type TemplateDataPathTypeArgs struct {
	// The type of data path value utilized in a pivot table. Choose one of the following options:
	//
	// - `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when `RowsLayout` is set to `HIERARCHY` .
	// - `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is set to Metric Placement.
	// - `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
	// - `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric, when there is no field in the `ValuesFieldWell` .
	PivotTableDataPathType TemplatePivotTableDataPathTypePtrInput `pulumi:"pivotTableDataPathType"`
}

func (TemplateDataPathTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathType)(nil)).Elem()
}

func (i TemplateDataPathTypeArgs) ToTemplateDataPathTypeOutput() TemplateDataPathTypeOutput {
	return i.ToTemplateDataPathTypeOutputWithContext(context.Background())
}

func (i TemplateDataPathTypeArgs) ToTemplateDataPathTypeOutputWithContext(ctx context.Context) TemplateDataPathTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathTypeOutput)
}

func (i TemplateDataPathTypeArgs) ToTemplateDataPathTypePtrOutput() TemplateDataPathTypePtrOutput {
	return i.ToTemplateDataPathTypePtrOutputWithContext(context.Background())
}

func (i TemplateDataPathTypeArgs) ToTemplateDataPathTypePtrOutputWithContext(ctx context.Context) TemplateDataPathTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathTypeOutput).ToTemplateDataPathTypePtrOutputWithContext(ctx)
}

// TemplateDataPathTypePtrInput is an input type that accepts TemplateDataPathTypeArgs, TemplateDataPathTypePtr and TemplateDataPathTypePtrOutput values.
// You can construct a concrete instance of `TemplateDataPathTypePtrInput` via:
//
//	        TemplateDataPathTypeArgs{...}
//
//	or:
//
//	        nil
type TemplateDataPathTypePtrInput interface {
	pulumi.Input

	ToTemplateDataPathTypePtrOutput() TemplateDataPathTypePtrOutput
	ToTemplateDataPathTypePtrOutputWithContext(context.Context) TemplateDataPathTypePtrOutput
}

type templateDataPathTypePtrType TemplateDataPathTypeArgs

func TemplateDataPathTypePtr(v *TemplateDataPathTypeArgs) TemplateDataPathTypePtrInput {
	return (*templateDataPathTypePtrType)(v)
}

func (*templateDataPathTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataPathType)(nil)).Elem()
}

func (i *templateDataPathTypePtrType) ToTemplateDataPathTypePtrOutput() TemplateDataPathTypePtrOutput {
	return i.ToTemplateDataPathTypePtrOutputWithContext(context.Background())
}

func (i *templateDataPathTypePtrType) ToTemplateDataPathTypePtrOutputWithContext(ctx context.Context) TemplateDataPathTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathTypePtrOutput)
}

type TemplateDataPathTypeOutput struct{ *pulumi.OutputState }

func (TemplateDataPathTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathType)(nil)).Elem()
}

func (o TemplateDataPathTypeOutput) ToTemplateDataPathTypeOutput() TemplateDataPathTypeOutput {
	return o
}

func (o TemplateDataPathTypeOutput) ToTemplateDataPathTypeOutputWithContext(ctx context.Context) TemplateDataPathTypeOutput {
	return o
}

func (o TemplateDataPathTypeOutput) ToTemplateDataPathTypePtrOutput() TemplateDataPathTypePtrOutput {
	return o.ToTemplateDataPathTypePtrOutputWithContext(context.Background())
}

func (o TemplateDataPathTypeOutput) ToTemplateDataPathTypePtrOutputWithContext(ctx context.Context) TemplateDataPathTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataPathType) *TemplateDataPathType {
		return &v
	}).(TemplateDataPathTypePtrOutput)
}

// The type of data path value utilized in a pivot table. Choose one of the following options:
//
// - `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when `RowsLayout` is set to `HIERARCHY` .
// - `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is set to Metric Placement.
// - `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
// - `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric, when there is no field in the `ValuesFieldWell` .
func (o TemplateDataPathTypeOutput) PivotTableDataPathType() TemplatePivotTableDataPathTypePtrOutput {
	return o.ApplyT(func(v TemplateDataPathType) *TemplatePivotTableDataPathType { return v.PivotTableDataPathType }).(TemplatePivotTableDataPathTypePtrOutput)
}

type TemplateDataPathTypePtrOutput struct{ *pulumi.OutputState }

func (TemplateDataPathTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataPathType)(nil)).Elem()
}

func (o TemplateDataPathTypePtrOutput) ToTemplateDataPathTypePtrOutput() TemplateDataPathTypePtrOutput {
	return o
}

func (o TemplateDataPathTypePtrOutput) ToTemplateDataPathTypePtrOutputWithContext(ctx context.Context) TemplateDataPathTypePtrOutput {
	return o
}

func (o TemplateDataPathTypePtrOutput) Elem() TemplateDataPathTypeOutput {
	return o.ApplyT(func(v *TemplateDataPathType) TemplateDataPathType {
		if v != nil {
			return *v
		}
		var ret TemplateDataPathType
		return ret
	}).(TemplateDataPathTypeOutput)
}

// The type of data path value utilized in a pivot table. Choose one of the following options:
//
// - `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when `RowsLayout` is set to `HIERARCHY` .
// - `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is set to Metric Placement.
// - `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
// - `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric, when there is no field in the `ValuesFieldWell` .
func (o TemplateDataPathTypePtrOutput) PivotTableDataPathType() TemplatePivotTableDataPathTypePtrOutput {
	return o.ApplyT(func(v *TemplateDataPathType) *TemplatePivotTableDataPathType {
		if v == nil {
			return nil
		}
		return v.PivotTableDataPathType
	}).(TemplatePivotTableDataPathTypePtrOutput)
}

type TemplateDataPathValue struct {
	// The type configuration of the field.
	DataPathType *TemplateDataPathType `pulumi:"dataPathType"`
	// The field ID of the field that needs to be sorted.
	FieldId *string `pulumi:"fieldId"`
	// The actual value of the field that needs to be sorted.
	FieldValue *string `pulumi:"fieldValue"`
}

// TemplateDataPathValueInput is an input type that accepts TemplateDataPathValueArgs and TemplateDataPathValueOutput values.
// You can construct a concrete instance of `TemplateDataPathValueInput` via:
//
//	TemplateDataPathValueArgs{...}
type TemplateDataPathValueInput interface {
	pulumi.Input

	ToTemplateDataPathValueOutput() TemplateDataPathValueOutput
	ToTemplateDataPathValueOutputWithContext(context.Context) TemplateDataPathValueOutput
}

type TemplateDataPathValueArgs struct {
	// The type configuration of the field.
	DataPathType TemplateDataPathTypePtrInput `pulumi:"dataPathType"`
	// The field ID of the field that needs to be sorted.
	FieldId pulumi.StringPtrInput `pulumi:"fieldId"`
	// The actual value of the field that needs to be sorted.
	FieldValue pulumi.StringPtrInput `pulumi:"fieldValue"`
}

func (TemplateDataPathValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathValue)(nil)).Elem()
}

func (i TemplateDataPathValueArgs) ToTemplateDataPathValueOutput() TemplateDataPathValueOutput {
	return i.ToTemplateDataPathValueOutputWithContext(context.Background())
}

func (i TemplateDataPathValueArgs) ToTemplateDataPathValueOutputWithContext(ctx context.Context) TemplateDataPathValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathValueOutput)
}

// TemplateDataPathValueArrayInput is an input type that accepts TemplateDataPathValueArray and TemplateDataPathValueArrayOutput values.
// You can construct a concrete instance of `TemplateDataPathValueArrayInput` via:
//
//	TemplateDataPathValueArray{ TemplateDataPathValueArgs{...} }
type TemplateDataPathValueArrayInput interface {
	pulumi.Input

	ToTemplateDataPathValueArrayOutput() TemplateDataPathValueArrayOutput
	ToTemplateDataPathValueArrayOutputWithContext(context.Context) TemplateDataPathValueArrayOutput
}

type TemplateDataPathValueArray []TemplateDataPathValueInput

func (TemplateDataPathValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataPathValue)(nil)).Elem()
}

func (i TemplateDataPathValueArray) ToTemplateDataPathValueArrayOutput() TemplateDataPathValueArrayOutput {
	return i.ToTemplateDataPathValueArrayOutputWithContext(context.Background())
}

func (i TemplateDataPathValueArray) ToTemplateDataPathValueArrayOutputWithContext(ctx context.Context) TemplateDataPathValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataPathValueArrayOutput)
}

type TemplateDataPathValueOutput struct{ *pulumi.OutputState }

func (TemplateDataPathValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataPathValue)(nil)).Elem()
}

func (o TemplateDataPathValueOutput) ToTemplateDataPathValueOutput() TemplateDataPathValueOutput {
	return o
}

func (o TemplateDataPathValueOutput) ToTemplateDataPathValueOutputWithContext(ctx context.Context) TemplateDataPathValueOutput {
	return o
}

// The type configuration of the field.
func (o TemplateDataPathValueOutput) DataPathType() TemplateDataPathTypePtrOutput {
	return o.ApplyT(func(v TemplateDataPathValue) *TemplateDataPathType { return v.DataPathType }).(TemplateDataPathTypePtrOutput)
}

// The field ID of the field that needs to be sorted.
func (o TemplateDataPathValueOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataPathValue) *string { return v.FieldId }).(pulumi.StringPtrOutput)
}

// The actual value of the field that needs to be sorted.
func (o TemplateDataPathValueOutput) FieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataPathValue) *string { return v.FieldValue }).(pulumi.StringPtrOutput)
}

type TemplateDataPathValueArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataPathValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataPathValue)(nil)).Elem()
}

func (o TemplateDataPathValueArrayOutput) ToTemplateDataPathValueArrayOutput() TemplateDataPathValueArrayOutput {
	return o
}

func (o TemplateDataPathValueArrayOutput) ToTemplateDataPathValueArrayOutputWithContext(ctx context.Context) TemplateDataPathValueArrayOutput {
	return o
}

func (o TemplateDataPathValueArrayOutput) Index(i pulumi.IntInput) TemplateDataPathValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataPathValue {
		return vs[0].([]TemplateDataPathValue)[vs[1].(int)]
	}).(TemplateDataPathValueOutput)
}

// <p>Dataset configuration.</p>
type TemplateDataSetConfiguration struct {
	// <p>A structure containing the list of column group schemas.</p>
	ColumnGroupSchemaList []TemplateColumnGroupSchema `pulumi:"columnGroupSchemaList"`
	// Dataset schema.
	DataSetSchema *TemplateDataSetSchema `pulumi:"dataSetSchema"`
	// <p>Placeholder.</p>
	Placeholder *string `pulumi:"placeholder"`
}

// TemplateDataSetConfigurationInput is an input type that accepts TemplateDataSetConfigurationArgs and TemplateDataSetConfigurationOutput values.
// You can construct a concrete instance of `TemplateDataSetConfigurationInput` via:
//
//	TemplateDataSetConfigurationArgs{...}
type TemplateDataSetConfigurationInput interface {
	pulumi.Input

	ToTemplateDataSetConfigurationOutput() TemplateDataSetConfigurationOutput
	ToTemplateDataSetConfigurationOutputWithContext(context.Context) TemplateDataSetConfigurationOutput
}

// <p>Dataset configuration.</p>
type TemplateDataSetConfigurationArgs struct {
	// <p>A structure containing the list of column group schemas.</p>
	ColumnGroupSchemaList TemplateColumnGroupSchemaArrayInput `pulumi:"columnGroupSchemaList"`
	// Dataset schema.
	DataSetSchema TemplateDataSetSchemaPtrInput `pulumi:"dataSetSchema"`
	// <p>Placeholder.</p>
	Placeholder pulumi.StringPtrInput `pulumi:"placeholder"`
}

func (TemplateDataSetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetConfiguration)(nil)).Elem()
}

func (i TemplateDataSetConfigurationArgs) ToTemplateDataSetConfigurationOutput() TemplateDataSetConfigurationOutput {
	return i.ToTemplateDataSetConfigurationOutputWithContext(context.Background())
}

func (i TemplateDataSetConfigurationArgs) ToTemplateDataSetConfigurationOutputWithContext(ctx context.Context) TemplateDataSetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetConfigurationOutput)
}

// TemplateDataSetConfigurationArrayInput is an input type that accepts TemplateDataSetConfigurationArray and TemplateDataSetConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateDataSetConfigurationArrayInput` via:
//
//	TemplateDataSetConfigurationArray{ TemplateDataSetConfigurationArgs{...} }
type TemplateDataSetConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateDataSetConfigurationArrayOutput() TemplateDataSetConfigurationArrayOutput
	ToTemplateDataSetConfigurationArrayOutputWithContext(context.Context) TemplateDataSetConfigurationArrayOutput
}

type TemplateDataSetConfigurationArray []TemplateDataSetConfigurationInput

func (TemplateDataSetConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetConfiguration)(nil)).Elem()
}

func (i TemplateDataSetConfigurationArray) ToTemplateDataSetConfigurationArrayOutput() TemplateDataSetConfigurationArrayOutput {
	return i.ToTemplateDataSetConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateDataSetConfigurationArray) ToTemplateDataSetConfigurationArrayOutputWithContext(ctx context.Context) TemplateDataSetConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetConfigurationArrayOutput)
}

// <p>Dataset configuration.</p>
type TemplateDataSetConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDataSetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetConfiguration)(nil)).Elem()
}

func (o TemplateDataSetConfigurationOutput) ToTemplateDataSetConfigurationOutput() TemplateDataSetConfigurationOutput {
	return o
}

func (o TemplateDataSetConfigurationOutput) ToTemplateDataSetConfigurationOutputWithContext(ctx context.Context) TemplateDataSetConfigurationOutput {
	return o
}

// <p>A structure containing the list of column group schemas.</p>
func (o TemplateDataSetConfigurationOutput) ColumnGroupSchemaList() TemplateColumnGroupSchemaArrayOutput {
	return o.ApplyT(func(v TemplateDataSetConfiguration) []TemplateColumnGroupSchema { return v.ColumnGroupSchemaList }).(TemplateColumnGroupSchemaArrayOutput)
}

// Dataset schema.
func (o TemplateDataSetConfigurationOutput) DataSetSchema() TemplateDataSetSchemaPtrOutput {
	return o.ApplyT(func(v TemplateDataSetConfiguration) *TemplateDataSetSchema { return v.DataSetSchema }).(TemplateDataSetSchemaPtrOutput)
}

// <p>Placeholder.</p>
func (o TemplateDataSetConfigurationOutput) Placeholder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDataSetConfiguration) *string { return v.Placeholder }).(pulumi.StringPtrOutput)
}

type TemplateDataSetConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataSetConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetConfiguration)(nil)).Elem()
}

func (o TemplateDataSetConfigurationArrayOutput) ToTemplateDataSetConfigurationArrayOutput() TemplateDataSetConfigurationArrayOutput {
	return o
}

func (o TemplateDataSetConfigurationArrayOutput) ToTemplateDataSetConfigurationArrayOutputWithContext(ctx context.Context) TemplateDataSetConfigurationArrayOutput {
	return o
}

func (o TemplateDataSetConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateDataSetConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataSetConfiguration {
		return vs[0].([]TemplateDataSetConfiguration)[vs[1].(int)]
	}).(TemplateDataSetConfigurationOutput)
}

// <p>Dataset reference.</p>
type TemplateDataSetReference struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn string `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder string `pulumi:"dataSetPlaceholder"`
}

// TemplateDataSetReferenceInput is an input type that accepts TemplateDataSetReferenceArgs and TemplateDataSetReferenceOutput values.
// You can construct a concrete instance of `TemplateDataSetReferenceInput` via:
//
//	TemplateDataSetReferenceArgs{...}
type TemplateDataSetReferenceInput interface {
	pulumi.Input

	ToTemplateDataSetReferenceOutput() TemplateDataSetReferenceOutput
	ToTemplateDataSetReferenceOutputWithContext(context.Context) TemplateDataSetReferenceOutput
}

// <p>Dataset reference.</p>
type TemplateDataSetReferenceArgs struct {
	// <p>Dataset Amazon Resource Name (ARN).</p>
	DataSetArn pulumi.StringInput `pulumi:"dataSetArn"`
	// <p>Dataset placeholder.</p>
	DataSetPlaceholder pulumi.StringInput `pulumi:"dataSetPlaceholder"`
}

func (TemplateDataSetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetReference)(nil)).Elem()
}

func (i TemplateDataSetReferenceArgs) ToTemplateDataSetReferenceOutput() TemplateDataSetReferenceOutput {
	return i.ToTemplateDataSetReferenceOutputWithContext(context.Background())
}

func (i TemplateDataSetReferenceArgs) ToTemplateDataSetReferenceOutputWithContext(ctx context.Context) TemplateDataSetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetReferenceOutput)
}

// TemplateDataSetReferenceArrayInput is an input type that accepts TemplateDataSetReferenceArray and TemplateDataSetReferenceArrayOutput values.
// You can construct a concrete instance of `TemplateDataSetReferenceArrayInput` via:
//
//	TemplateDataSetReferenceArray{ TemplateDataSetReferenceArgs{...} }
type TemplateDataSetReferenceArrayInput interface {
	pulumi.Input

	ToTemplateDataSetReferenceArrayOutput() TemplateDataSetReferenceArrayOutput
	ToTemplateDataSetReferenceArrayOutputWithContext(context.Context) TemplateDataSetReferenceArrayOutput
}

type TemplateDataSetReferenceArray []TemplateDataSetReferenceInput

func (TemplateDataSetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetReference)(nil)).Elem()
}

func (i TemplateDataSetReferenceArray) ToTemplateDataSetReferenceArrayOutput() TemplateDataSetReferenceArrayOutput {
	return i.ToTemplateDataSetReferenceArrayOutputWithContext(context.Background())
}

func (i TemplateDataSetReferenceArray) ToTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) TemplateDataSetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetReferenceArrayOutput)
}

// <p>Dataset reference.</p>
type TemplateDataSetReferenceOutput struct{ *pulumi.OutputState }

func (TemplateDataSetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetReference)(nil)).Elem()
}

func (o TemplateDataSetReferenceOutput) ToTemplateDataSetReferenceOutput() TemplateDataSetReferenceOutput {
	return o
}

func (o TemplateDataSetReferenceOutput) ToTemplateDataSetReferenceOutputWithContext(ctx context.Context) TemplateDataSetReferenceOutput {
	return o
}

// <p>Dataset Amazon Resource Name (ARN).</p>
func (o TemplateDataSetReferenceOutput) DataSetArn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDataSetReference) string { return v.DataSetArn }).(pulumi.StringOutput)
}

// <p>Dataset placeholder.</p>
func (o TemplateDataSetReferenceOutput) DataSetPlaceholder() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDataSetReference) string { return v.DataSetPlaceholder }).(pulumi.StringOutput)
}

type TemplateDataSetReferenceArrayOutput struct{ *pulumi.OutputState }

func (TemplateDataSetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDataSetReference)(nil)).Elem()
}

func (o TemplateDataSetReferenceArrayOutput) ToTemplateDataSetReferenceArrayOutput() TemplateDataSetReferenceArrayOutput {
	return o
}

func (o TemplateDataSetReferenceArrayOutput) ToTemplateDataSetReferenceArrayOutputWithContext(ctx context.Context) TemplateDataSetReferenceArrayOutput {
	return o
}

func (o TemplateDataSetReferenceArrayOutput) Index(i pulumi.IntInput) TemplateDataSetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDataSetReference {
		return vs[0].([]TemplateDataSetReference)[vs[1].(int)]
	}).(TemplateDataSetReferenceOutput)
}

// <p>Dataset schema.</p>
type TemplateDataSetSchema struct {
	// <p>A structure containing the list of column schemas.</p>
	ColumnSchemaList []TemplateColumnSchema `pulumi:"columnSchemaList"`
}

// TemplateDataSetSchemaInput is an input type that accepts TemplateDataSetSchemaArgs and TemplateDataSetSchemaOutput values.
// You can construct a concrete instance of `TemplateDataSetSchemaInput` via:
//
//	TemplateDataSetSchemaArgs{...}
type TemplateDataSetSchemaInput interface {
	pulumi.Input

	ToTemplateDataSetSchemaOutput() TemplateDataSetSchemaOutput
	ToTemplateDataSetSchemaOutputWithContext(context.Context) TemplateDataSetSchemaOutput
}

// <p>Dataset schema.</p>
type TemplateDataSetSchemaArgs struct {
	// <p>A structure containing the list of column schemas.</p>
	ColumnSchemaList TemplateColumnSchemaArrayInput `pulumi:"columnSchemaList"`
}

func (TemplateDataSetSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetSchema)(nil)).Elem()
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaOutput() TemplateDataSetSchemaOutput {
	return i.ToTemplateDataSetSchemaOutputWithContext(context.Background())
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaOutputWithContext(ctx context.Context) TemplateDataSetSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetSchemaOutput)
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return i.ToTemplateDataSetSchemaPtrOutputWithContext(context.Background())
}

func (i TemplateDataSetSchemaArgs) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetSchemaOutput).ToTemplateDataSetSchemaPtrOutputWithContext(ctx)
}

// TemplateDataSetSchemaPtrInput is an input type that accepts TemplateDataSetSchemaArgs, TemplateDataSetSchemaPtr and TemplateDataSetSchemaPtrOutput values.
// You can construct a concrete instance of `TemplateDataSetSchemaPtrInput` via:
//
//	        TemplateDataSetSchemaArgs{...}
//
//	or:
//
//	        nil
type TemplateDataSetSchemaPtrInput interface {
	pulumi.Input

	ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput
	ToTemplateDataSetSchemaPtrOutputWithContext(context.Context) TemplateDataSetSchemaPtrOutput
}

type templateDataSetSchemaPtrType TemplateDataSetSchemaArgs

func TemplateDataSetSchemaPtr(v *TemplateDataSetSchemaArgs) TemplateDataSetSchemaPtrInput {
	return (*templateDataSetSchemaPtrType)(v)
}

func (*templateDataSetSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataSetSchema)(nil)).Elem()
}

func (i *templateDataSetSchemaPtrType) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return i.ToTemplateDataSetSchemaPtrOutputWithContext(context.Background())
}

func (i *templateDataSetSchemaPtrType) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDataSetSchemaPtrOutput)
}

// <p>Dataset schema.</p>
type TemplateDataSetSchemaOutput struct{ *pulumi.OutputState }

func (TemplateDataSetSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDataSetSchema)(nil)).Elem()
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaOutput() TemplateDataSetSchemaOutput {
	return o
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaOutputWithContext(ctx context.Context) TemplateDataSetSchemaOutput {
	return o
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return o.ToTemplateDataSetSchemaPtrOutputWithContext(context.Background())
}

func (o TemplateDataSetSchemaOutput) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDataSetSchema) *TemplateDataSetSchema {
		return &v
	}).(TemplateDataSetSchemaPtrOutput)
}

// <p>A structure containing the list of column schemas.</p>
func (o TemplateDataSetSchemaOutput) ColumnSchemaList() TemplateColumnSchemaArrayOutput {
	return o.ApplyT(func(v TemplateDataSetSchema) []TemplateColumnSchema { return v.ColumnSchemaList }).(TemplateColumnSchemaArrayOutput)
}

type TemplateDataSetSchemaPtrOutput struct{ *pulumi.OutputState }

func (TemplateDataSetSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDataSetSchema)(nil)).Elem()
}

func (o TemplateDataSetSchemaPtrOutput) ToTemplateDataSetSchemaPtrOutput() TemplateDataSetSchemaPtrOutput {
	return o
}

func (o TemplateDataSetSchemaPtrOutput) ToTemplateDataSetSchemaPtrOutputWithContext(ctx context.Context) TemplateDataSetSchemaPtrOutput {
	return o
}

func (o TemplateDataSetSchemaPtrOutput) Elem() TemplateDataSetSchemaOutput {
	return o.ApplyT(func(v *TemplateDataSetSchema) TemplateDataSetSchema {
		if v != nil {
			return *v
		}
		var ret TemplateDataSetSchema
		return ret
	}).(TemplateDataSetSchemaOutput)
}

// <p>A structure containing the list of column schemas.</p>
func (o TemplateDataSetSchemaPtrOutput) ColumnSchemaList() TemplateColumnSchemaArrayOutput {
	return o.ApplyT(func(v *TemplateDataSetSchema) []TemplateColumnSchema {
		if v == nil {
			return nil
		}
		return v.ColumnSchemaList
	}).(TemplateColumnSchemaArrayOutput)
}

type TemplateDateAxisOptions struct {
	// Determines whether or not missing dates are displayed.
	MissingDateVisibility interface{} `pulumi:"missingDateVisibility"`
}

// TemplateDateAxisOptionsInput is an input type that accepts TemplateDateAxisOptionsArgs and TemplateDateAxisOptionsOutput values.
// You can construct a concrete instance of `TemplateDateAxisOptionsInput` via:
//
//	TemplateDateAxisOptionsArgs{...}
type TemplateDateAxisOptionsInput interface {
	pulumi.Input

	ToTemplateDateAxisOptionsOutput() TemplateDateAxisOptionsOutput
	ToTemplateDateAxisOptionsOutputWithContext(context.Context) TemplateDateAxisOptionsOutput
}

type TemplateDateAxisOptionsArgs struct {
	// Determines whether or not missing dates are displayed.
	MissingDateVisibility pulumi.Input `pulumi:"missingDateVisibility"`
}

func (TemplateDateAxisOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateAxisOptions)(nil)).Elem()
}

func (i TemplateDateAxisOptionsArgs) ToTemplateDateAxisOptionsOutput() TemplateDateAxisOptionsOutput {
	return i.ToTemplateDateAxisOptionsOutputWithContext(context.Background())
}

func (i TemplateDateAxisOptionsArgs) ToTemplateDateAxisOptionsOutputWithContext(ctx context.Context) TemplateDateAxisOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateAxisOptionsOutput)
}

func (i TemplateDateAxisOptionsArgs) ToTemplateDateAxisOptionsPtrOutput() TemplateDateAxisOptionsPtrOutput {
	return i.ToTemplateDateAxisOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDateAxisOptionsArgs) ToTemplateDateAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateDateAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateAxisOptionsOutput).ToTemplateDateAxisOptionsPtrOutputWithContext(ctx)
}

// TemplateDateAxisOptionsPtrInput is an input type that accepts TemplateDateAxisOptionsArgs, TemplateDateAxisOptionsPtr and TemplateDateAxisOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDateAxisOptionsPtrInput` via:
//
//	        TemplateDateAxisOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDateAxisOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDateAxisOptionsPtrOutput() TemplateDateAxisOptionsPtrOutput
	ToTemplateDateAxisOptionsPtrOutputWithContext(context.Context) TemplateDateAxisOptionsPtrOutput
}

type templateDateAxisOptionsPtrType TemplateDateAxisOptionsArgs

func TemplateDateAxisOptionsPtr(v *TemplateDateAxisOptionsArgs) TemplateDateAxisOptionsPtrInput {
	return (*templateDateAxisOptionsPtrType)(v)
}

func (*templateDateAxisOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateAxisOptions)(nil)).Elem()
}

func (i *templateDateAxisOptionsPtrType) ToTemplateDateAxisOptionsPtrOutput() TemplateDateAxisOptionsPtrOutput {
	return i.ToTemplateDateAxisOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDateAxisOptionsPtrType) ToTemplateDateAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateDateAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateAxisOptionsPtrOutput)
}

type TemplateDateAxisOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDateAxisOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateAxisOptions)(nil)).Elem()
}

func (o TemplateDateAxisOptionsOutput) ToTemplateDateAxisOptionsOutput() TemplateDateAxisOptionsOutput {
	return o
}

func (o TemplateDateAxisOptionsOutput) ToTemplateDateAxisOptionsOutputWithContext(ctx context.Context) TemplateDateAxisOptionsOutput {
	return o
}

func (o TemplateDateAxisOptionsOutput) ToTemplateDateAxisOptionsPtrOutput() TemplateDateAxisOptionsPtrOutput {
	return o.ToTemplateDateAxisOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDateAxisOptionsOutput) ToTemplateDateAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateDateAxisOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateAxisOptions) *TemplateDateAxisOptions {
		return &v
	}).(TemplateDateAxisOptionsPtrOutput)
}

// Determines whether or not missing dates are displayed.
func (o TemplateDateAxisOptionsOutput) MissingDateVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDateAxisOptions) interface{} { return v.MissingDateVisibility }).(pulumi.AnyOutput)
}

type TemplateDateAxisOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateAxisOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateAxisOptions)(nil)).Elem()
}

func (o TemplateDateAxisOptionsPtrOutput) ToTemplateDateAxisOptionsPtrOutput() TemplateDateAxisOptionsPtrOutput {
	return o
}

func (o TemplateDateAxisOptionsPtrOutput) ToTemplateDateAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateDateAxisOptionsPtrOutput {
	return o
}

func (o TemplateDateAxisOptionsPtrOutput) Elem() TemplateDateAxisOptionsOutput {
	return o.ApplyT(func(v *TemplateDateAxisOptions) TemplateDateAxisOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDateAxisOptions
		return ret
	}).(TemplateDateAxisOptionsOutput)
}

// Determines whether or not missing dates are displayed.
func (o TemplateDateAxisOptionsPtrOutput) MissingDateVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDateAxisOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.MissingDateVisibility
	}).(pulumi.AnyOutput)
}

type TemplateDateDimensionField struct {
	// The column that is used in the `DateDimensionField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The date granularity of the `DateDimensionField` . Choose one of the following options:
	//
	// - `YEAR`
	// - `QUARTER`
	// - `MONTH`
	// - `WEEK`
	// - `DAY`
	// - `HOUR`
	// - `MINUTE`
	// - `SECOND`
	// - `MILLISECOND`
	DateGranularity *TemplateTimeGranularity `pulumi:"dateGranularity"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateDateTimeFormatConfiguration `pulumi:"formatConfiguration"`
	// The custom hierarchy ID.
	HierarchyId *string `pulumi:"hierarchyId"`
}

// TemplateDateDimensionFieldInput is an input type that accepts TemplateDateDimensionFieldArgs and TemplateDateDimensionFieldOutput values.
// You can construct a concrete instance of `TemplateDateDimensionFieldInput` via:
//
//	TemplateDateDimensionFieldArgs{...}
type TemplateDateDimensionFieldInput interface {
	pulumi.Input

	ToTemplateDateDimensionFieldOutput() TemplateDateDimensionFieldOutput
	ToTemplateDateDimensionFieldOutputWithContext(context.Context) TemplateDateDimensionFieldOutput
}

type TemplateDateDimensionFieldArgs struct {
	// The column that is used in the `DateDimensionField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The date granularity of the `DateDimensionField` . Choose one of the following options:
	//
	// - `YEAR`
	// - `QUARTER`
	// - `MONTH`
	// - `WEEK`
	// - `DAY`
	// - `HOUR`
	// - `MINUTE`
	// - `SECOND`
	// - `MILLISECOND`
	DateGranularity TemplateTimeGranularityPtrInput `pulumi:"dateGranularity"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateDateTimeFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
	// The custom hierarchy ID.
	HierarchyId pulumi.StringPtrInput `pulumi:"hierarchyId"`
}

func (TemplateDateDimensionFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateDimensionField)(nil)).Elem()
}

func (i TemplateDateDimensionFieldArgs) ToTemplateDateDimensionFieldOutput() TemplateDateDimensionFieldOutput {
	return i.ToTemplateDateDimensionFieldOutputWithContext(context.Background())
}

func (i TemplateDateDimensionFieldArgs) ToTemplateDateDimensionFieldOutputWithContext(ctx context.Context) TemplateDateDimensionFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateDimensionFieldOutput)
}

func (i TemplateDateDimensionFieldArgs) ToTemplateDateDimensionFieldPtrOutput() TemplateDateDimensionFieldPtrOutput {
	return i.ToTemplateDateDimensionFieldPtrOutputWithContext(context.Background())
}

func (i TemplateDateDimensionFieldArgs) ToTemplateDateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDateDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateDimensionFieldOutput).ToTemplateDateDimensionFieldPtrOutputWithContext(ctx)
}

// TemplateDateDimensionFieldPtrInput is an input type that accepts TemplateDateDimensionFieldArgs, TemplateDateDimensionFieldPtr and TemplateDateDimensionFieldPtrOutput values.
// You can construct a concrete instance of `TemplateDateDimensionFieldPtrInput` via:
//
//	        TemplateDateDimensionFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateDateDimensionFieldPtrInput interface {
	pulumi.Input

	ToTemplateDateDimensionFieldPtrOutput() TemplateDateDimensionFieldPtrOutput
	ToTemplateDateDimensionFieldPtrOutputWithContext(context.Context) TemplateDateDimensionFieldPtrOutput
}

type templateDateDimensionFieldPtrType TemplateDateDimensionFieldArgs

func TemplateDateDimensionFieldPtr(v *TemplateDateDimensionFieldArgs) TemplateDateDimensionFieldPtrInput {
	return (*templateDateDimensionFieldPtrType)(v)
}

func (*templateDateDimensionFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateDimensionField)(nil)).Elem()
}

func (i *templateDateDimensionFieldPtrType) ToTemplateDateDimensionFieldPtrOutput() TemplateDateDimensionFieldPtrOutput {
	return i.ToTemplateDateDimensionFieldPtrOutputWithContext(context.Background())
}

func (i *templateDateDimensionFieldPtrType) ToTemplateDateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDateDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateDimensionFieldPtrOutput)
}

type TemplateDateDimensionFieldOutput struct{ *pulumi.OutputState }

func (TemplateDateDimensionFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateDimensionField)(nil)).Elem()
}

func (o TemplateDateDimensionFieldOutput) ToTemplateDateDimensionFieldOutput() TemplateDateDimensionFieldOutput {
	return o
}

func (o TemplateDateDimensionFieldOutput) ToTemplateDateDimensionFieldOutputWithContext(ctx context.Context) TemplateDateDimensionFieldOutput {
	return o
}

func (o TemplateDateDimensionFieldOutput) ToTemplateDateDimensionFieldPtrOutput() TemplateDateDimensionFieldPtrOutput {
	return o.ToTemplateDateDimensionFieldPtrOutputWithContext(context.Background())
}

func (o TemplateDateDimensionFieldOutput) ToTemplateDateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDateDimensionFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateDimensionField) *TemplateDateDimensionField {
		return &v
	}).(TemplateDateDimensionFieldPtrOutput)
}

// The column that is used in the `DateDimensionField` .
func (o TemplateDateDimensionFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateDateDimensionField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The date granularity of the `DateDimensionField` . Choose one of the following options:
//
// - `YEAR`
// - `QUARTER`
// - `MONTH`
// - `WEEK`
// - `DAY`
// - `HOUR`
// - `MINUTE`
// - `SECOND`
// - `MILLISECOND`
func (o TemplateDateDimensionFieldOutput) DateGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateDateDimensionField) *TemplateTimeGranularity { return v.DateGranularity }).(TemplateTimeGranularityPtrOutput)
}

// The custom field ID.
func (o TemplateDateDimensionFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDateDimensionField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateDateDimensionFieldOutput) FormatConfiguration() TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDateDimensionField) *TemplateDateTimeFormatConfiguration { return v.FormatConfiguration }).(TemplateDateTimeFormatConfigurationPtrOutput)
}

// The custom hierarchy ID.
func (o TemplateDateDimensionFieldOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDateDimensionField) *string { return v.HierarchyId }).(pulumi.StringPtrOutput)
}

type TemplateDateDimensionFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateDimensionFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateDimensionField)(nil)).Elem()
}

func (o TemplateDateDimensionFieldPtrOutput) ToTemplateDateDimensionFieldPtrOutput() TemplateDateDimensionFieldPtrOutput {
	return o
}

func (o TemplateDateDimensionFieldPtrOutput) ToTemplateDateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDateDimensionFieldPtrOutput {
	return o
}

func (o TemplateDateDimensionFieldPtrOutput) Elem() TemplateDateDimensionFieldOutput {
	return o.ApplyT(func(v *TemplateDateDimensionField) TemplateDateDimensionField {
		if v != nil {
			return *v
		}
		var ret TemplateDateDimensionField
		return ret
	}).(TemplateDateDimensionFieldOutput)
}

// The column that is used in the `DateDimensionField` .
func (o TemplateDateDimensionFieldPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateDateDimensionField) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The date granularity of the `DateDimensionField` . Choose one of the following options:
//
// - `YEAR`
// - `QUARTER`
// - `MONTH`
// - `WEEK`
// - `DAY`
// - `HOUR`
// - `MINUTE`
// - `SECOND`
// - `MILLISECOND`
func (o TemplateDateDimensionFieldPtrOutput) DateGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateDateDimensionField) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.DateGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

// The custom field ID.
func (o TemplateDateDimensionFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateDimensionField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The format configuration of the field.
func (o TemplateDateDimensionFieldPtrOutput) FormatConfiguration() TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDateDimensionField) *TemplateDateTimeFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateDateTimeFormatConfigurationPtrOutput)
}

// The custom hierarchy ID.
func (o TemplateDateDimensionFieldPtrOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateDimensionField) *string {
		if v == nil {
			return nil
		}
		return v.HierarchyId
	}).(pulumi.StringPtrOutput)
}

type TemplateDateMeasureField struct {
	// The aggregation function of the measure field.
	AggregationFunction *TemplateDateAggregationFunction `pulumi:"aggregationFunction"`
	// The column that is used in the `DateMeasureField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateDateTimeFormatConfiguration `pulumi:"formatConfiguration"`
}

// TemplateDateMeasureFieldInput is an input type that accepts TemplateDateMeasureFieldArgs and TemplateDateMeasureFieldOutput values.
// You can construct a concrete instance of `TemplateDateMeasureFieldInput` via:
//
//	TemplateDateMeasureFieldArgs{...}
type TemplateDateMeasureFieldInput interface {
	pulumi.Input

	ToTemplateDateMeasureFieldOutput() TemplateDateMeasureFieldOutput
	ToTemplateDateMeasureFieldOutputWithContext(context.Context) TemplateDateMeasureFieldOutput
}

type TemplateDateMeasureFieldArgs struct {
	// The aggregation function of the measure field.
	AggregationFunction TemplateDateAggregationFunctionPtrInput `pulumi:"aggregationFunction"`
	// The column that is used in the `DateMeasureField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateDateTimeFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
}

func (TemplateDateMeasureFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateMeasureField)(nil)).Elem()
}

func (i TemplateDateMeasureFieldArgs) ToTemplateDateMeasureFieldOutput() TemplateDateMeasureFieldOutput {
	return i.ToTemplateDateMeasureFieldOutputWithContext(context.Background())
}

func (i TemplateDateMeasureFieldArgs) ToTemplateDateMeasureFieldOutputWithContext(ctx context.Context) TemplateDateMeasureFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateMeasureFieldOutput)
}

func (i TemplateDateMeasureFieldArgs) ToTemplateDateMeasureFieldPtrOutput() TemplateDateMeasureFieldPtrOutput {
	return i.ToTemplateDateMeasureFieldPtrOutputWithContext(context.Background())
}

func (i TemplateDateMeasureFieldArgs) ToTemplateDateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateDateMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateMeasureFieldOutput).ToTemplateDateMeasureFieldPtrOutputWithContext(ctx)
}

// TemplateDateMeasureFieldPtrInput is an input type that accepts TemplateDateMeasureFieldArgs, TemplateDateMeasureFieldPtr and TemplateDateMeasureFieldPtrOutput values.
// You can construct a concrete instance of `TemplateDateMeasureFieldPtrInput` via:
//
//	        TemplateDateMeasureFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateDateMeasureFieldPtrInput interface {
	pulumi.Input

	ToTemplateDateMeasureFieldPtrOutput() TemplateDateMeasureFieldPtrOutput
	ToTemplateDateMeasureFieldPtrOutputWithContext(context.Context) TemplateDateMeasureFieldPtrOutput
}

type templateDateMeasureFieldPtrType TemplateDateMeasureFieldArgs

func TemplateDateMeasureFieldPtr(v *TemplateDateMeasureFieldArgs) TemplateDateMeasureFieldPtrInput {
	return (*templateDateMeasureFieldPtrType)(v)
}

func (*templateDateMeasureFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateMeasureField)(nil)).Elem()
}

func (i *templateDateMeasureFieldPtrType) ToTemplateDateMeasureFieldPtrOutput() TemplateDateMeasureFieldPtrOutput {
	return i.ToTemplateDateMeasureFieldPtrOutputWithContext(context.Background())
}

func (i *templateDateMeasureFieldPtrType) ToTemplateDateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateDateMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateMeasureFieldPtrOutput)
}

type TemplateDateMeasureFieldOutput struct{ *pulumi.OutputState }

func (TemplateDateMeasureFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateMeasureField)(nil)).Elem()
}

func (o TemplateDateMeasureFieldOutput) ToTemplateDateMeasureFieldOutput() TemplateDateMeasureFieldOutput {
	return o
}

func (o TemplateDateMeasureFieldOutput) ToTemplateDateMeasureFieldOutputWithContext(ctx context.Context) TemplateDateMeasureFieldOutput {
	return o
}

func (o TemplateDateMeasureFieldOutput) ToTemplateDateMeasureFieldPtrOutput() TemplateDateMeasureFieldPtrOutput {
	return o.ToTemplateDateMeasureFieldPtrOutputWithContext(context.Background())
}

func (o TemplateDateMeasureFieldOutput) ToTemplateDateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateDateMeasureFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateMeasureField) *TemplateDateMeasureField {
		return &v
	}).(TemplateDateMeasureFieldPtrOutput)
}

// The aggregation function of the measure field.
func (o TemplateDateMeasureFieldOutput) AggregationFunction() TemplateDateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateDateMeasureField) *TemplateDateAggregationFunction { return v.AggregationFunction }).(TemplateDateAggregationFunctionPtrOutput)
}

// The column that is used in the `DateMeasureField` .
func (o TemplateDateMeasureFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateDateMeasureField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The custom field ID.
func (o TemplateDateMeasureFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDateMeasureField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateDateMeasureFieldOutput) FormatConfiguration() TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDateMeasureField) *TemplateDateTimeFormatConfiguration { return v.FormatConfiguration }).(TemplateDateTimeFormatConfigurationPtrOutput)
}

type TemplateDateMeasureFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateMeasureFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateMeasureField)(nil)).Elem()
}

func (o TemplateDateMeasureFieldPtrOutput) ToTemplateDateMeasureFieldPtrOutput() TemplateDateMeasureFieldPtrOutput {
	return o
}

func (o TemplateDateMeasureFieldPtrOutput) ToTemplateDateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateDateMeasureFieldPtrOutput {
	return o
}

func (o TemplateDateMeasureFieldPtrOutput) Elem() TemplateDateMeasureFieldOutput {
	return o.ApplyT(func(v *TemplateDateMeasureField) TemplateDateMeasureField {
		if v != nil {
			return *v
		}
		var ret TemplateDateMeasureField
		return ret
	}).(TemplateDateMeasureFieldOutput)
}

// The aggregation function of the measure field.
func (o TemplateDateMeasureFieldPtrOutput) AggregationFunction() TemplateDateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateDateMeasureField) *TemplateDateAggregationFunction {
		if v == nil {
			return nil
		}
		return v.AggregationFunction
	}).(TemplateDateAggregationFunctionPtrOutput)
}

// The column that is used in the `DateMeasureField` .
func (o TemplateDateMeasureFieldPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateDateMeasureField) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The custom field ID.
func (o TemplateDateMeasureFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateMeasureField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The format configuration of the field.
func (o TemplateDateMeasureFieldPtrOutput) FormatConfiguration() TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDateMeasureField) *TemplateDateTimeFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateDateTimeFormatConfigurationPtrOutput)
}

type TemplateDateTimeDefaultValues struct {
	// The dynamic value of the `DataTimeDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
	DynamicValue *TemplateDynamicDefaultValue `pulumi:"dynamicValue"`
	// The rolling date of the `DataTimeDefaultValues` . The date is determined from the dataset based on input expression.
	RollingDate *TemplateRollingDateConfiguration `pulumi:"rollingDate"`
	// The static values of the `DataTimeDefaultValues` .
	StaticValues []string `pulumi:"staticValues"`
}

// TemplateDateTimeDefaultValuesInput is an input type that accepts TemplateDateTimeDefaultValuesArgs and TemplateDateTimeDefaultValuesOutput values.
// You can construct a concrete instance of `TemplateDateTimeDefaultValuesInput` via:
//
//	TemplateDateTimeDefaultValuesArgs{...}
type TemplateDateTimeDefaultValuesInput interface {
	pulumi.Input

	ToTemplateDateTimeDefaultValuesOutput() TemplateDateTimeDefaultValuesOutput
	ToTemplateDateTimeDefaultValuesOutputWithContext(context.Context) TemplateDateTimeDefaultValuesOutput
}

type TemplateDateTimeDefaultValuesArgs struct {
	// The dynamic value of the `DataTimeDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
	DynamicValue TemplateDynamicDefaultValuePtrInput `pulumi:"dynamicValue"`
	// The rolling date of the `DataTimeDefaultValues` . The date is determined from the dataset based on input expression.
	RollingDate TemplateRollingDateConfigurationPtrInput `pulumi:"rollingDate"`
	// The static values of the `DataTimeDefaultValues` .
	StaticValues pulumi.StringArrayInput `pulumi:"staticValues"`
}

func (TemplateDateTimeDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeDefaultValues)(nil)).Elem()
}

func (i TemplateDateTimeDefaultValuesArgs) ToTemplateDateTimeDefaultValuesOutput() TemplateDateTimeDefaultValuesOutput {
	return i.ToTemplateDateTimeDefaultValuesOutputWithContext(context.Background())
}

func (i TemplateDateTimeDefaultValuesArgs) ToTemplateDateTimeDefaultValuesOutputWithContext(ctx context.Context) TemplateDateTimeDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeDefaultValuesOutput)
}

func (i TemplateDateTimeDefaultValuesArgs) ToTemplateDateTimeDefaultValuesPtrOutput() TemplateDateTimeDefaultValuesPtrOutput {
	return i.ToTemplateDateTimeDefaultValuesPtrOutputWithContext(context.Background())
}

func (i TemplateDateTimeDefaultValuesArgs) ToTemplateDateTimeDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDateTimeDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeDefaultValuesOutput).ToTemplateDateTimeDefaultValuesPtrOutputWithContext(ctx)
}

// TemplateDateTimeDefaultValuesPtrInput is an input type that accepts TemplateDateTimeDefaultValuesArgs, TemplateDateTimeDefaultValuesPtr and TemplateDateTimeDefaultValuesPtrOutput values.
// You can construct a concrete instance of `TemplateDateTimeDefaultValuesPtrInput` via:
//
//	        TemplateDateTimeDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type TemplateDateTimeDefaultValuesPtrInput interface {
	pulumi.Input

	ToTemplateDateTimeDefaultValuesPtrOutput() TemplateDateTimeDefaultValuesPtrOutput
	ToTemplateDateTimeDefaultValuesPtrOutputWithContext(context.Context) TemplateDateTimeDefaultValuesPtrOutput
}

type templateDateTimeDefaultValuesPtrType TemplateDateTimeDefaultValuesArgs

func TemplateDateTimeDefaultValuesPtr(v *TemplateDateTimeDefaultValuesArgs) TemplateDateTimeDefaultValuesPtrInput {
	return (*templateDateTimeDefaultValuesPtrType)(v)
}

func (*templateDateTimeDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeDefaultValues)(nil)).Elem()
}

func (i *templateDateTimeDefaultValuesPtrType) ToTemplateDateTimeDefaultValuesPtrOutput() TemplateDateTimeDefaultValuesPtrOutput {
	return i.ToTemplateDateTimeDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *templateDateTimeDefaultValuesPtrType) ToTemplateDateTimeDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDateTimeDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeDefaultValuesPtrOutput)
}

type TemplateDateTimeDefaultValuesOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeDefaultValues)(nil)).Elem()
}

func (o TemplateDateTimeDefaultValuesOutput) ToTemplateDateTimeDefaultValuesOutput() TemplateDateTimeDefaultValuesOutput {
	return o
}

func (o TemplateDateTimeDefaultValuesOutput) ToTemplateDateTimeDefaultValuesOutputWithContext(ctx context.Context) TemplateDateTimeDefaultValuesOutput {
	return o
}

func (o TemplateDateTimeDefaultValuesOutput) ToTemplateDateTimeDefaultValuesPtrOutput() TemplateDateTimeDefaultValuesPtrOutput {
	return o.ToTemplateDateTimeDefaultValuesPtrOutputWithContext(context.Background())
}

func (o TemplateDateTimeDefaultValuesOutput) ToTemplateDateTimeDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDateTimeDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateTimeDefaultValues) *TemplateDateTimeDefaultValues {
		return &v
	}).(TemplateDateTimeDefaultValuesPtrOutput)
}

// The dynamic value of the `DataTimeDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
func (o TemplateDateTimeDefaultValuesOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v TemplateDateTimeDefaultValues) *TemplateDynamicDefaultValue { return v.DynamicValue }).(TemplateDynamicDefaultValuePtrOutput)
}

// The rolling date of the `DataTimeDefaultValues` . The date is determined from the dataset based on input expression.
func (o TemplateDateTimeDefaultValuesOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeDefaultValues) *TemplateRollingDateConfiguration { return v.RollingDate }).(TemplateRollingDateConfigurationPtrOutput)
}

// The static values of the `DataTimeDefaultValues` .
func (o TemplateDateTimeDefaultValuesOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateDateTimeDefaultValues) []string { return v.StaticValues }).(pulumi.StringArrayOutput)
}

type TemplateDateTimeDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeDefaultValues)(nil)).Elem()
}

func (o TemplateDateTimeDefaultValuesPtrOutput) ToTemplateDateTimeDefaultValuesPtrOutput() TemplateDateTimeDefaultValuesPtrOutput {
	return o
}

func (o TemplateDateTimeDefaultValuesPtrOutput) ToTemplateDateTimeDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDateTimeDefaultValuesPtrOutput {
	return o
}

func (o TemplateDateTimeDefaultValuesPtrOutput) Elem() TemplateDateTimeDefaultValuesOutput {
	return o.ApplyT(func(v *TemplateDateTimeDefaultValues) TemplateDateTimeDefaultValues {
		if v != nil {
			return *v
		}
		var ret TemplateDateTimeDefaultValues
		return ret
	}).(TemplateDateTimeDefaultValuesOutput)
}

// The dynamic value of the `DataTimeDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
func (o TemplateDateTimeDefaultValuesPtrOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeDefaultValues) *TemplateDynamicDefaultValue {
		if v == nil {
			return nil
		}
		return v.DynamicValue
	}).(TemplateDynamicDefaultValuePtrOutput)
}

// The rolling date of the `DataTimeDefaultValues` . The date is determined from the dataset based on input expression.
func (o TemplateDateTimeDefaultValuesPtrOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeDefaultValues) *TemplateRollingDateConfiguration {
		if v == nil {
			return nil
		}
		return v.RollingDate
	}).(TemplateRollingDateConfigurationPtrOutput)
}

// The static values of the `DataTimeDefaultValues` .
func (o TemplateDateTimeDefaultValuesPtrOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateDateTimeDefaultValues) []string {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.StringArrayOutput)
}

type TemplateDateTimeFormatConfiguration struct {
	// Determines the `DateTime` format.
	DateTimeFormat *string `pulumi:"dateTimeFormat"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration *TemplateNullValueFormatConfiguration `pulumi:"nullValueFormatConfiguration"`
	// The formatting configuration for numeric `DateTime` fields.
	NumericFormatConfiguration *TemplateNumericFormatConfiguration `pulumi:"numericFormatConfiguration"`
}

// TemplateDateTimeFormatConfigurationInput is an input type that accepts TemplateDateTimeFormatConfigurationArgs and TemplateDateTimeFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateDateTimeFormatConfigurationInput` via:
//
//	TemplateDateTimeFormatConfigurationArgs{...}
type TemplateDateTimeFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateDateTimeFormatConfigurationOutput() TemplateDateTimeFormatConfigurationOutput
	ToTemplateDateTimeFormatConfigurationOutputWithContext(context.Context) TemplateDateTimeFormatConfigurationOutput
}

type TemplateDateTimeFormatConfigurationArgs struct {
	// Determines the `DateTime` format.
	DateTimeFormat pulumi.StringPtrInput `pulumi:"dateTimeFormat"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration TemplateNullValueFormatConfigurationPtrInput `pulumi:"nullValueFormatConfiguration"`
	// The formatting configuration for numeric `DateTime` fields.
	NumericFormatConfiguration TemplateNumericFormatConfigurationPtrInput `pulumi:"numericFormatConfiguration"`
}

func (TemplateDateTimeFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeFormatConfiguration)(nil)).Elem()
}

func (i TemplateDateTimeFormatConfigurationArgs) ToTemplateDateTimeFormatConfigurationOutput() TemplateDateTimeFormatConfigurationOutput {
	return i.ToTemplateDateTimeFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateDateTimeFormatConfigurationArgs) ToTemplateDateTimeFormatConfigurationOutputWithContext(ctx context.Context) TemplateDateTimeFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeFormatConfigurationOutput)
}

func (i TemplateDateTimeFormatConfigurationArgs) ToTemplateDateTimeFormatConfigurationPtrOutput() TemplateDateTimeFormatConfigurationPtrOutput {
	return i.ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDateTimeFormatConfigurationArgs) ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeFormatConfigurationOutput).ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateDateTimeFormatConfigurationPtrInput is an input type that accepts TemplateDateTimeFormatConfigurationArgs, TemplateDateTimeFormatConfigurationPtr and TemplateDateTimeFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDateTimeFormatConfigurationPtrInput` via:
//
//	        TemplateDateTimeFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDateTimeFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDateTimeFormatConfigurationPtrOutput() TemplateDateTimeFormatConfigurationPtrOutput
	ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(context.Context) TemplateDateTimeFormatConfigurationPtrOutput
}

type templateDateTimeFormatConfigurationPtrType TemplateDateTimeFormatConfigurationArgs

func TemplateDateTimeFormatConfigurationPtr(v *TemplateDateTimeFormatConfigurationArgs) TemplateDateTimeFormatConfigurationPtrInput {
	return (*templateDateTimeFormatConfigurationPtrType)(v)
}

func (*templateDateTimeFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeFormatConfiguration)(nil)).Elem()
}

func (i *templateDateTimeFormatConfigurationPtrType) ToTemplateDateTimeFormatConfigurationPtrOutput() TemplateDateTimeFormatConfigurationPtrOutput {
	return i.ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDateTimeFormatConfigurationPtrType) ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeFormatConfigurationPtrOutput)
}

type TemplateDateTimeFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeFormatConfiguration)(nil)).Elem()
}

func (o TemplateDateTimeFormatConfigurationOutput) ToTemplateDateTimeFormatConfigurationOutput() TemplateDateTimeFormatConfigurationOutput {
	return o
}

func (o TemplateDateTimeFormatConfigurationOutput) ToTemplateDateTimeFormatConfigurationOutputWithContext(ctx context.Context) TemplateDateTimeFormatConfigurationOutput {
	return o
}

func (o TemplateDateTimeFormatConfigurationOutput) ToTemplateDateTimeFormatConfigurationPtrOutput() TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDateTimeFormatConfigurationOutput) ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateTimeFormatConfiguration) *TemplateDateTimeFormatConfiguration {
		return &v
	}).(TemplateDateTimeFormatConfigurationPtrOutput)
}

// Determines the `DateTime` format.
func (o TemplateDateTimeFormatConfigurationOutput) DateTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeFormatConfiguration) *string { return v.DateTimeFormat }).(pulumi.StringPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplateDateTimeFormatConfigurationOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeFormatConfiguration) *TemplateNullValueFormatConfiguration {
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// The formatting configuration for numeric `DateTime` fields.
func (o TemplateDateTimeFormatConfigurationOutput) NumericFormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeFormatConfiguration) *TemplateNumericFormatConfiguration {
		return v.NumericFormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

type TemplateDateTimeFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeFormatConfiguration)(nil)).Elem()
}

func (o TemplateDateTimeFormatConfigurationPtrOutput) ToTemplateDateTimeFormatConfigurationPtrOutput() TemplateDateTimeFormatConfigurationPtrOutput {
	return o
}

func (o TemplateDateTimeFormatConfigurationPtrOutput) ToTemplateDateTimeFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeFormatConfigurationPtrOutput {
	return o
}

func (o TemplateDateTimeFormatConfigurationPtrOutput) Elem() TemplateDateTimeFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateDateTimeFormatConfiguration) TemplateDateTimeFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDateTimeFormatConfiguration
		return ret
	}).(TemplateDateTimeFormatConfigurationOutput)
}

// Determines the `DateTime` format.
func (o TemplateDateTimeFormatConfigurationPtrOutput) DateTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DateTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplateDateTimeFormatConfigurationPtrOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeFormatConfiguration) *TemplateNullValueFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// The formatting configuration for numeric `DateTime` fields.
func (o TemplateDateTimeFormatConfigurationPtrOutput) NumericFormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeFormatConfiguration) *TemplateNumericFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NumericFormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

type TemplateDateTimeHierarchy struct {
	// The option that determines the drill down filters for the `DateTime` hierarchy.
	DrillDownFilters []TemplateDrillDownFilter `pulumi:"drillDownFilters"`
	// The hierarchy ID of the `DateTime` hierarchy.
	HierarchyId string `pulumi:"hierarchyId"`
}

// TemplateDateTimeHierarchyInput is an input type that accepts TemplateDateTimeHierarchyArgs and TemplateDateTimeHierarchyOutput values.
// You can construct a concrete instance of `TemplateDateTimeHierarchyInput` via:
//
//	TemplateDateTimeHierarchyArgs{...}
type TemplateDateTimeHierarchyInput interface {
	pulumi.Input

	ToTemplateDateTimeHierarchyOutput() TemplateDateTimeHierarchyOutput
	ToTemplateDateTimeHierarchyOutputWithContext(context.Context) TemplateDateTimeHierarchyOutput
}

type TemplateDateTimeHierarchyArgs struct {
	// The option that determines the drill down filters for the `DateTime` hierarchy.
	DrillDownFilters TemplateDrillDownFilterArrayInput `pulumi:"drillDownFilters"`
	// The hierarchy ID of the `DateTime` hierarchy.
	HierarchyId pulumi.StringInput `pulumi:"hierarchyId"`
}

func (TemplateDateTimeHierarchyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeHierarchy)(nil)).Elem()
}

func (i TemplateDateTimeHierarchyArgs) ToTemplateDateTimeHierarchyOutput() TemplateDateTimeHierarchyOutput {
	return i.ToTemplateDateTimeHierarchyOutputWithContext(context.Background())
}

func (i TemplateDateTimeHierarchyArgs) ToTemplateDateTimeHierarchyOutputWithContext(ctx context.Context) TemplateDateTimeHierarchyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeHierarchyOutput)
}

func (i TemplateDateTimeHierarchyArgs) ToTemplateDateTimeHierarchyPtrOutput() TemplateDateTimeHierarchyPtrOutput {
	return i.ToTemplateDateTimeHierarchyPtrOutputWithContext(context.Background())
}

func (i TemplateDateTimeHierarchyArgs) ToTemplateDateTimeHierarchyPtrOutputWithContext(ctx context.Context) TemplateDateTimeHierarchyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeHierarchyOutput).ToTemplateDateTimeHierarchyPtrOutputWithContext(ctx)
}

// TemplateDateTimeHierarchyPtrInput is an input type that accepts TemplateDateTimeHierarchyArgs, TemplateDateTimeHierarchyPtr and TemplateDateTimeHierarchyPtrOutput values.
// You can construct a concrete instance of `TemplateDateTimeHierarchyPtrInput` via:
//
//	        TemplateDateTimeHierarchyArgs{...}
//
//	or:
//
//	        nil
type TemplateDateTimeHierarchyPtrInput interface {
	pulumi.Input

	ToTemplateDateTimeHierarchyPtrOutput() TemplateDateTimeHierarchyPtrOutput
	ToTemplateDateTimeHierarchyPtrOutputWithContext(context.Context) TemplateDateTimeHierarchyPtrOutput
}

type templateDateTimeHierarchyPtrType TemplateDateTimeHierarchyArgs

func TemplateDateTimeHierarchyPtr(v *TemplateDateTimeHierarchyArgs) TemplateDateTimeHierarchyPtrInput {
	return (*templateDateTimeHierarchyPtrType)(v)
}

func (*templateDateTimeHierarchyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeHierarchy)(nil)).Elem()
}

func (i *templateDateTimeHierarchyPtrType) ToTemplateDateTimeHierarchyPtrOutput() TemplateDateTimeHierarchyPtrOutput {
	return i.ToTemplateDateTimeHierarchyPtrOutputWithContext(context.Background())
}

func (i *templateDateTimeHierarchyPtrType) ToTemplateDateTimeHierarchyPtrOutputWithContext(ctx context.Context) TemplateDateTimeHierarchyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeHierarchyPtrOutput)
}

type TemplateDateTimeHierarchyOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeHierarchyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeHierarchy)(nil)).Elem()
}

func (o TemplateDateTimeHierarchyOutput) ToTemplateDateTimeHierarchyOutput() TemplateDateTimeHierarchyOutput {
	return o
}

func (o TemplateDateTimeHierarchyOutput) ToTemplateDateTimeHierarchyOutputWithContext(ctx context.Context) TemplateDateTimeHierarchyOutput {
	return o
}

func (o TemplateDateTimeHierarchyOutput) ToTemplateDateTimeHierarchyPtrOutput() TemplateDateTimeHierarchyPtrOutput {
	return o.ToTemplateDateTimeHierarchyPtrOutputWithContext(context.Background())
}

func (o TemplateDateTimeHierarchyOutput) ToTemplateDateTimeHierarchyPtrOutputWithContext(ctx context.Context) TemplateDateTimeHierarchyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateTimeHierarchy) *TemplateDateTimeHierarchy {
		return &v
	}).(TemplateDateTimeHierarchyPtrOutput)
}

// The option that determines the drill down filters for the `DateTime` hierarchy.
func (o TemplateDateTimeHierarchyOutput) DrillDownFilters() TemplateDrillDownFilterArrayOutput {
	return o.ApplyT(func(v TemplateDateTimeHierarchy) []TemplateDrillDownFilter { return v.DrillDownFilters }).(TemplateDrillDownFilterArrayOutput)
}

// The hierarchy ID of the `DateTime` hierarchy.
func (o TemplateDateTimeHierarchyOutput) HierarchyId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDateTimeHierarchy) string { return v.HierarchyId }).(pulumi.StringOutput)
}

type TemplateDateTimeHierarchyPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeHierarchyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeHierarchy)(nil)).Elem()
}

func (o TemplateDateTimeHierarchyPtrOutput) ToTemplateDateTimeHierarchyPtrOutput() TemplateDateTimeHierarchyPtrOutput {
	return o
}

func (o TemplateDateTimeHierarchyPtrOutput) ToTemplateDateTimeHierarchyPtrOutputWithContext(ctx context.Context) TemplateDateTimeHierarchyPtrOutput {
	return o
}

func (o TemplateDateTimeHierarchyPtrOutput) Elem() TemplateDateTimeHierarchyOutput {
	return o.ApplyT(func(v *TemplateDateTimeHierarchy) TemplateDateTimeHierarchy {
		if v != nil {
			return *v
		}
		var ret TemplateDateTimeHierarchy
		return ret
	}).(TemplateDateTimeHierarchyOutput)
}

// The option that determines the drill down filters for the `DateTime` hierarchy.
func (o TemplateDateTimeHierarchyPtrOutput) DrillDownFilters() TemplateDrillDownFilterArrayOutput {
	return o.ApplyT(func(v *TemplateDateTimeHierarchy) []TemplateDrillDownFilter {
		if v == nil {
			return nil
		}
		return v.DrillDownFilters
	}).(TemplateDrillDownFilterArrayOutput)
}

// The hierarchy ID of the `DateTime` hierarchy.
func (o TemplateDateTimeHierarchyPtrOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeHierarchy) *string {
		if v == nil {
			return nil
		}
		return &v.HierarchyId
	}).(pulumi.StringPtrOutput)
}

type TemplateDateTimeParameterDeclaration struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           *TemplateDateTimeDefaultValues   `pulumi:"defaultValues"`
	MappedDataSetParameters []TemplateMappedDataSetParameter `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name string `pulumi:"name"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
	// The configuration that defines the default value of a `DateTime` parameter when a value has not been set.
	ValueWhenUnset *TemplateDateTimeValueWhenUnsetConfiguration `pulumi:"valueWhenUnset"`
}

// TemplateDateTimeParameterDeclarationInput is an input type that accepts TemplateDateTimeParameterDeclarationArgs and TemplateDateTimeParameterDeclarationOutput values.
// You can construct a concrete instance of `TemplateDateTimeParameterDeclarationInput` via:
//
//	TemplateDateTimeParameterDeclarationArgs{...}
type TemplateDateTimeParameterDeclarationInput interface {
	pulumi.Input

	ToTemplateDateTimeParameterDeclarationOutput() TemplateDateTimeParameterDeclarationOutput
	ToTemplateDateTimeParameterDeclarationOutputWithContext(context.Context) TemplateDateTimeParameterDeclarationOutput
}

type TemplateDateTimeParameterDeclarationArgs struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           TemplateDateTimeDefaultValuesPtrInput    `pulumi:"defaultValues"`
	MappedDataSetParameters TemplateMappedDataSetParameterArrayInput `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name pulumi.StringInput `pulumi:"name"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
	// The configuration that defines the default value of a `DateTime` parameter when a value has not been set.
	ValueWhenUnset TemplateDateTimeValueWhenUnsetConfigurationPtrInput `pulumi:"valueWhenUnset"`
}

func (TemplateDateTimeParameterDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeParameterDeclaration)(nil)).Elem()
}

func (i TemplateDateTimeParameterDeclarationArgs) ToTemplateDateTimeParameterDeclarationOutput() TemplateDateTimeParameterDeclarationOutput {
	return i.ToTemplateDateTimeParameterDeclarationOutputWithContext(context.Background())
}

func (i TemplateDateTimeParameterDeclarationArgs) ToTemplateDateTimeParameterDeclarationOutputWithContext(ctx context.Context) TemplateDateTimeParameterDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeParameterDeclarationOutput)
}

func (i TemplateDateTimeParameterDeclarationArgs) ToTemplateDateTimeParameterDeclarationPtrOutput() TemplateDateTimeParameterDeclarationPtrOutput {
	return i.ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i TemplateDateTimeParameterDeclarationArgs) ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDateTimeParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeParameterDeclarationOutput).ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(ctx)
}

// TemplateDateTimeParameterDeclarationPtrInput is an input type that accepts TemplateDateTimeParameterDeclarationArgs, TemplateDateTimeParameterDeclarationPtr and TemplateDateTimeParameterDeclarationPtrOutput values.
// You can construct a concrete instance of `TemplateDateTimeParameterDeclarationPtrInput` via:
//
//	        TemplateDateTimeParameterDeclarationArgs{...}
//
//	or:
//
//	        nil
type TemplateDateTimeParameterDeclarationPtrInput interface {
	pulumi.Input

	ToTemplateDateTimeParameterDeclarationPtrOutput() TemplateDateTimeParameterDeclarationPtrOutput
	ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(context.Context) TemplateDateTimeParameterDeclarationPtrOutput
}

type templateDateTimeParameterDeclarationPtrType TemplateDateTimeParameterDeclarationArgs

func TemplateDateTimeParameterDeclarationPtr(v *TemplateDateTimeParameterDeclarationArgs) TemplateDateTimeParameterDeclarationPtrInput {
	return (*templateDateTimeParameterDeclarationPtrType)(v)
}

func (*templateDateTimeParameterDeclarationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeParameterDeclaration)(nil)).Elem()
}

func (i *templateDateTimeParameterDeclarationPtrType) ToTemplateDateTimeParameterDeclarationPtrOutput() TemplateDateTimeParameterDeclarationPtrOutput {
	return i.ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i *templateDateTimeParameterDeclarationPtrType) ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDateTimeParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeParameterDeclarationPtrOutput)
}

type TemplateDateTimeParameterDeclarationOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeParameterDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeParameterDeclaration)(nil)).Elem()
}

func (o TemplateDateTimeParameterDeclarationOutput) ToTemplateDateTimeParameterDeclarationOutput() TemplateDateTimeParameterDeclarationOutput {
	return o
}

func (o TemplateDateTimeParameterDeclarationOutput) ToTemplateDateTimeParameterDeclarationOutputWithContext(ctx context.Context) TemplateDateTimeParameterDeclarationOutput {
	return o
}

func (o TemplateDateTimeParameterDeclarationOutput) ToTemplateDateTimeParameterDeclarationPtrOutput() TemplateDateTimeParameterDeclarationPtrOutput {
	return o.ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(context.Background())
}

func (o TemplateDateTimeParameterDeclarationOutput) ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDateTimeParameterDeclarationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateTimeParameterDeclaration) *TemplateDateTimeParameterDeclaration {
		return &v
	}).(TemplateDateTimeParameterDeclarationPtrOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateDateTimeParameterDeclarationOutput) DefaultValues() TemplateDateTimeDefaultValuesPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeParameterDeclaration) *TemplateDateTimeDefaultValues { return v.DefaultValues }).(TemplateDateTimeDefaultValuesPtrOutput)
}

func (o TemplateDateTimeParameterDeclarationOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v TemplateDateTimeParameterDeclaration) []TemplateMappedDataSetParameter {
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateDateTimeParameterDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDateTimeParameterDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateDateTimeParameterDeclarationOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeParameterDeclaration) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

// The configuration that defines the default value of a `DateTime` parameter when a value has not been set.
func (o TemplateDateTimeParameterDeclarationOutput) ValueWhenUnset() TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeParameterDeclaration) *TemplateDateTimeValueWhenUnsetConfiguration {
		return v.ValueWhenUnset
	}).(TemplateDateTimeValueWhenUnsetConfigurationPtrOutput)
}

type TemplateDateTimeParameterDeclarationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeParameterDeclarationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeParameterDeclaration)(nil)).Elem()
}

func (o TemplateDateTimeParameterDeclarationPtrOutput) ToTemplateDateTimeParameterDeclarationPtrOutput() TemplateDateTimeParameterDeclarationPtrOutput {
	return o
}

func (o TemplateDateTimeParameterDeclarationPtrOutput) ToTemplateDateTimeParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDateTimeParameterDeclarationPtrOutput {
	return o
}

func (o TemplateDateTimeParameterDeclarationPtrOutput) Elem() TemplateDateTimeParameterDeclarationOutput {
	return o.ApplyT(func(v *TemplateDateTimeParameterDeclaration) TemplateDateTimeParameterDeclaration {
		if v != nil {
			return *v
		}
		var ret TemplateDateTimeParameterDeclaration
		return ret
	}).(TemplateDateTimeParameterDeclarationOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateDateTimeParameterDeclarationPtrOutput) DefaultValues() TemplateDateTimeDefaultValuesPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeParameterDeclaration) *TemplateDateTimeDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(TemplateDateTimeDefaultValuesPtrOutput)
}

func (o TemplateDateTimeParameterDeclarationPtrOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v *TemplateDateTimeParameterDeclaration) []TemplateMappedDataSetParameter {
		if v == nil {
			return nil
		}
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateDateTimeParameterDeclarationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeParameterDeclaration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateDateTimeParameterDeclarationPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeParameterDeclaration) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

// The configuration that defines the default value of a `DateTime` parameter when a value has not been set.
func (o TemplateDateTimeParameterDeclarationPtrOutput) ValueWhenUnset() TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeParameterDeclaration) *TemplateDateTimeValueWhenUnsetConfiguration {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnset
	}).(TemplateDateTimeValueWhenUnsetConfigurationPtrOutput)
}

type TemplateDateTimePickerControlDisplayOptions struct {
	// The date icon visibility of the `DateTimePickerControlDisplayOptions` .
	DateIconVisibility interface{} `pulumi:"dateIconVisibility"`
	// Customize how dates are formatted in controls.
	DateTimeFormat *string `pulumi:"dateTimeFormat"`
	// The helper text visibility of the `DateTimePickerControlDisplayOptions` .
	HelperTextVisibility interface{} `pulumi:"helperTextVisibility"`
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateDateTimePickerControlDisplayOptionsInput is an input type that accepts TemplateDateTimePickerControlDisplayOptionsArgs and TemplateDateTimePickerControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateDateTimePickerControlDisplayOptionsInput` via:
//
//	TemplateDateTimePickerControlDisplayOptionsArgs{...}
type TemplateDateTimePickerControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateDateTimePickerControlDisplayOptionsOutput() TemplateDateTimePickerControlDisplayOptionsOutput
	ToTemplateDateTimePickerControlDisplayOptionsOutputWithContext(context.Context) TemplateDateTimePickerControlDisplayOptionsOutput
}

type TemplateDateTimePickerControlDisplayOptionsArgs struct {
	// The date icon visibility of the `DateTimePickerControlDisplayOptions` .
	DateIconVisibility pulumi.Input `pulumi:"dateIconVisibility"`
	// Customize how dates are formatted in controls.
	DateTimeFormat pulumi.StringPtrInput `pulumi:"dateTimeFormat"`
	// The helper text visibility of the `DateTimePickerControlDisplayOptions` .
	HelperTextVisibility pulumi.Input `pulumi:"helperTextVisibility"`
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateDateTimePickerControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimePickerControlDisplayOptions)(nil)).Elem()
}

func (i TemplateDateTimePickerControlDisplayOptionsArgs) ToTemplateDateTimePickerControlDisplayOptionsOutput() TemplateDateTimePickerControlDisplayOptionsOutput {
	return i.ToTemplateDateTimePickerControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateDateTimePickerControlDisplayOptionsArgs) ToTemplateDateTimePickerControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateDateTimePickerControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimePickerControlDisplayOptionsOutput)
}

func (i TemplateDateTimePickerControlDisplayOptionsArgs) ToTemplateDateTimePickerControlDisplayOptionsPtrOutput() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return i.ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDateTimePickerControlDisplayOptionsArgs) ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimePickerControlDisplayOptionsOutput).ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateDateTimePickerControlDisplayOptionsPtrInput is an input type that accepts TemplateDateTimePickerControlDisplayOptionsArgs, TemplateDateTimePickerControlDisplayOptionsPtr and TemplateDateTimePickerControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDateTimePickerControlDisplayOptionsPtrInput` via:
//
//	        TemplateDateTimePickerControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDateTimePickerControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDateTimePickerControlDisplayOptionsPtrOutput() TemplateDateTimePickerControlDisplayOptionsPtrOutput
	ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateDateTimePickerControlDisplayOptionsPtrOutput
}

type templateDateTimePickerControlDisplayOptionsPtrType TemplateDateTimePickerControlDisplayOptionsArgs

func TemplateDateTimePickerControlDisplayOptionsPtr(v *TemplateDateTimePickerControlDisplayOptionsArgs) TemplateDateTimePickerControlDisplayOptionsPtrInput {
	return (*templateDateTimePickerControlDisplayOptionsPtrType)(v)
}

func (*templateDateTimePickerControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimePickerControlDisplayOptions)(nil)).Elem()
}

func (i *templateDateTimePickerControlDisplayOptionsPtrType) ToTemplateDateTimePickerControlDisplayOptionsPtrOutput() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return i.ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDateTimePickerControlDisplayOptionsPtrType) ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

type TemplateDateTimePickerControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDateTimePickerControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimePickerControlDisplayOptions)(nil)).Elem()
}

func (o TemplateDateTimePickerControlDisplayOptionsOutput) ToTemplateDateTimePickerControlDisplayOptionsOutput() TemplateDateTimePickerControlDisplayOptionsOutput {
	return o
}

func (o TemplateDateTimePickerControlDisplayOptionsOutput) ToTemplateDateTimePickerControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateDateTimePickerControlDisplayOptionsOutput {
	return o
}

func (o TemplateDateTimePickerControlDisplayOptionsOutput) ToTemplateDateTimePickerControlDisplayOptionsPtrOutput() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDateTimePickerControlDisplayOptionsOutput) ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateTimePickerControlDisplayOptions) *TemplateDateTimePickerControlDisplayOptions {
		return &v
	}).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

// The date icon visibility of the `DateTimePickerControlDisplayOptions` .
func (o TemplateDateTimePickerControlDisplayOptionsOutput) DateIconVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDateTimePickerControlDisplayOptions) interface{} { return v.DateIconVisibility }).(pulumi.AnyOutput)
}

// Customize how dates are formatted in controls.
func (o TemplateDateTimePickerControlDisplayOptionsOutput) DateTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDateTimePickerControlDisplayOptions) *string { return v.DateTimeFormat }).(pulumi.StringPtrOutput)
}

// The helper text visibility of the `DateTimePickerControlDisplayOptions` .
func (o TemplateDateTimePickerControlDisplayOptionsOutput) HelperTextVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDateTimePickerControlDisplayOptions) interface{} { return v.HelperTextVisibility }).(pulumi.AnyOutput)
}

// The configuration of info icon label options.
func (o TemplateDateTimePickerControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDateTimePickerControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateDateTimePickerControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDateTimePickerControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateDateTimePickerControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateTimePickerControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimePickerControlDisplayOptions)(nil)).Elem()
}

func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) ToTemplateDateTimePickerControlDisplayOptionsPtrOutput() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) ToTemplateDateTimePickerControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) Elem() TemplateDateTimePickerControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateDateTimePickerControlDisplayOptions) TemplateDateTimePickerControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDateTimePickerControlDisplayOptions
		return ret
	}).(TemplateDateTimePickerControlDisplayOptionsOutput)
}

// The date icon visibility of the `DateTimePickerControlDisplayOptions` .
func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) DateIconVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDateTimePickerControlDisplayOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.DateIconVisibility
	}).(pulumi.AnyOutput)
}

// Customize how dates are formatted in controls.
func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) DateTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimePickerControlDisplayOptions) *string {
		if v == nil {
			return nil
		}
		return v.DateTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The helper text visibility of the `DateTimePickerControlDisplayOptions` .
func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) HelperTextVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDateTimePickerControlDisplayOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.HelperTextVisibility
	}).(pulumi.AnyOutput)
}

// The configuration of info icon label options.
func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimePickerControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateDateTimePickerControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimePickerControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateDateTimeValueWhenUnsetConfiguration struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue *string `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption *TemplateValueWhenUnsetOption `pulumi:"valueWhenUnsetOption"`
}

// TemplateDateTimeValueWhenUnsetConfigurationInput is an input type that accepts TemplateDateTimeValueWhenUnsetConfigurationArgs and TemplateDateTimeValueWhenUnsetConfigurationOutput values.
// You can construct a concrete instance of `TemplateDateTimeValueWhenUnsetConfigurationInput` via:
//
//	TemplateDateTimeValueWhenUnsetConfigurationArgs{...}
type TemplateDateTimeValueWhenUnsetConfigurationInput interface {
	pulumi.Input

	ToTemplateDateTimeValueWhenUnsetConfigurationOutput() TemplateDateTimeValueWhenUnsetConfigurationOutput
	ToTemplateDateTimeValueWhenUnsetConfigurationOutputWithContext(context.Context) TemplateDateTimeValueWhenUnsetConfigurationOutput
}

type TemplateDateTimeValueWhenUnsetConfigurationArgs struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue pulumi.StringPtrInput `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption TemplateValueWhenUnsetOptionPtrInput `pulumi:"valueWhenUnsetOption"`
}

func (TemplateDateTimeValueWhenUnsetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i TemplateDateTimeValueWhenUnsetConfigurationArgs) ToTemplateDateTimeValueWhenUnsetConfigurationOutput() TemplateDateTimeValueWhenUnsetConfigurationOutput {
	return i.ToTemplateDateTimeValueWhenUnsetConfigurationOutputWithContext(context.Background())
}

func (i TemplateDateTimeValueWhenUnsetConfigurationArgs) ToTemplateDateTimeValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateDateTimeValueWhenUnsetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeValueWhenUnsetConfigurationOutput)
}

func (i TemplateDateTimeValueWhenUnsetConfigurationArgs) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutput() TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDateTimeValueWhenUnsetConfigurationArgs) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeValueWhenUnsetConfigurationOutput).ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(ctx)
}

// TemplateDateTimeValueWhenUnsetConfigurationPtrInput is an input type that accepts TemplateDateTimeValueWhenUnsetConfigurationArgs, TemplateDateTimeValueWhenUnsetConfigurationPtr and TemplateDateTimeValueWhenUnsetConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDateTimeValueWhenUnsetConfigurationPtrInput` via:
//
//	        TemplateDateTimeValueWhenUnsetConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDateTimeValueWhenUnsetConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutput() TemplateDateTimeValueWhenUnsetConfigurationPtrOutput
	ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(context.Context) TemplateDateTimeValueWhenUnsetConfigurationPtrOutput
}

type templateDateTimeValueWhenUnsetConfigurationPtrType TemplateDateTimeValueWhenUnsetConfigurationArgs

func TemplateDateTimeValueWhenUnsetConfigurationPtr(v *TemplateDateTimeValueWhenUnsetConfigurationArgs) TemplateDateTimeValueWhenUnsetConfigurationPtrInput {
	return (*templateDateTimeValueWhenUnsetConfigurationPtrType)(v)
}

func (*templateDateTimeValueWhenUnsetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i *templateDateTimeValueWhenUnsetConfigurationPtrType) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutput() TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDateTimeValueWhenUnsetConfigurationPtrType) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDateTimeValueWhenUnsetConfigurationPtrOutput)
}

type TemplateDateTimeValueWhenUnsetConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeValueWhenUnsetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDateTimeValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateDateTimeValueWhenUnsetConfigurationOutput) ToTemplateDateTimeValueWhenUnsetConfigurationOutput() TemplateDateTimeValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateDateTimeValueWhenUnsetConfigurationOutput) ToTemplateDateTimeValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateDateTimeValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateDateTimeValueWhenUnsetConfigurationOutput) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutput() TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return o.ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDateTimeValueWhenUnsetConfigurationOutput) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDateTimeValueWhenUnsetConfiguration) *TemplateDateTimeValueWhenUnsetConfiguration {
		return &v
	}).(TemplateDateTimeValueWhenUnsetConfigurationPtrOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateDateTimeValueWhenUnsetConfigurationOutput) CustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeValueWhenUnsetConfiguration) *string { return v.CustomValue }).(pulumi.StringPtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateDateTimeValueWhenUnsetConfigurationOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v TemplateDateTimeValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateDateTimeValueWhenUnsetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDateTimeValueWhenUnsetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDateTimeValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateDateTimeValueWhenUnsetConfigurationPtrOutput) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutput() TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateDateTimeValueWhenUnsetConfigurationPtrOutput) ToTemplateDateTimeValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDateTimeValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateDateTimeValueWhenUnsetConfigurationPtrOutput) Elem() TemplateDateTimeValueWhenUnsetConfigurationOutput {
	return o.ApplyT(func(v *TemplateDateTimeValueWhenUnsetConfiguration) TemplateDateTimeValueWhenUnsetConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDateTimeValueWhenUnsetConfiguration
		return ret
	}).(TemplateDateTimeValueWhenUnsetConfigurationOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateDateTimeValueWhenUnsetConfigurationPtrOutput) CustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeValueWhenUnsetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomValue
	}).(pulumi.StringPtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateDateTimeValueWhenUnsetConfigurationPtrOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v *TemplateDateTimeValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateDecimalDefaultValues struct {
	// The dynamic value of the `DecimalDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
	DynamicValue *TemplateDynamicDefaultValue `pulumi:"dynamicValue"`
	// The static values of the `DecimalDefaultValues` .
	StaticValues []float64 `pulumi:"staticValues"`
}

// TemplateDecimalDefaultValuesInput is an input type that accepts TemplateDecimalDefaultValuesArgs and TemplateDecimalDefaultValuesOutput values.
// You can construct a concrete instance of `TemplateDecimalDefaultValuesInput` via:
//
//	TemplateDecimalDefaultValuesArgs{...}
type TemplateDecimalDefaultValuesInput interface {
	pulumi.Input

	ToTemplateDecimalDefaultValuesOutput() TemplateDecimalDefaultValuesOutput
	ToTemplateDecimalDefaultValuesOutputWithContext(context.Context) TemplateDecimalDefaultValuesOutput
}

type TemplateDecimalDefaultValuesArgs struct {
	// The dynamic value of the `DecimalDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
	DynamicValue TemplateDynamicDefaultValuePtrInput `pulumi:"dynamicValue"`
	// The static values of the `DecimalDefaultValues` .
	StaticValues pulumi.Float64ArrayInput `pulumi:"staticValues"`
}

func (TemplateDecimalDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalDefaultValues)(nil)).Elem()
}

func (i TemplateDecimalDefaultValuesArgs) ToTemplateDecimalDefaultValuesOutput() TemplateDecimalDefaultValuesOutput {
	return i.ToTemplateDecimalDefaultValuesOutputWithContext(context.Background())
}

func (i TemplateDecimalDefaultValuesArgs) ToTemplateDecimalDefaultValuesOutputWithContext(ctx context.Context) TemplateDecimalDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalDefaultValuesOutput)
}

func (i TemplateDecimalDefaultValuesArgs) ToTemplateDecimalDefaultValuesPtrOutput() TemplateDecimalDefaultValuesPtrOutput {
	return i.ToTemplateDecimalDefaultValuesPtrOutputWithContext(context.Background())
}

func (i TemplateDecimalDefaultValuesArgs) ToTemplateDecimalDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDecimalDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalDefaultValuesOutput).ToTemplateDecimalDefaultValuesPtrOutputWithContext(ctx)
}

// TemplateDecimalDefaultValuesPtrInput is an input type that accepts TemplateDecimalDefaultValuesArgs, TemplateDecimalDefaultValuesPtr and TemplateDecimalDefaultValuesPtrOutput values.
// You can construct a concrete instance of `TemplateDecimalDefaultValuesPtrInput` via:
//
//	        TemplateDecimalDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type TemplateDecimalDefaultValuesPtrInput interface {
	pulumi.Input

	ToTemplateDecimalDefaultValuesPtrOutput() TemplateDecimalDefaultValuesPtrOutput
	ToTemplateDecimalDefaultValuesPtrOutputWithContext(context.Context) TemplateDecimalDefaultValuesPtrOutput
}

type templateDecimalDefaultValuesPtrType TemplateDecimalDefaultValuesArgs

func TemplateDecimalDefaultValuesPtr(v *TemplateDecimalDefaultValuesArgs) TemplateDecimalDefaultValuesPtrInput {
	return (*templateDecimalDefaultValuesPtrType)(v)
}

func (*templateDecimalDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalDefaultValues)(nil)).Elem()
}

func (i *templateDecimalDefaultValuesPtrType) ToTemplateDecimalDefaultValuesPtrOutput() TemplateDecimalDefaultValuesPtrOutput {
	return i.ToTemplateDecimalDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *templateDecimalDefaultValuesPtrType) ToTemplateDecimalDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDecimalDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalDefaultValuesPtrOutput)
}

type TemplateDecimalDefaultValuesOutput struct{ *pulumi.OutputState }

func (TemplateDecimalDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalDefaultValues)(nil)).Elem()
}

func (o TemplateDecimalDefaultValuesOutput) ToTemplateDecimalDefaultValuesOutput() TemplateDecimalDefaultValuesOutput {
	return o
}

func (o TemplateDecimalDefaultValuesOutput) ToTemplateDecimalDefaultValuesOutputWithContext(ctx context.Context) TemplateDecimalDefaultValuesOutput {
	return o
}

func (o TemplateDecimalDefaultValuesOutput) ToTemplateDecimalDefaultValuesPtrOutput() TemplateDecimalDefaultValuesPtrOutput {
	return o.ToTemplateDecimalDefaultValuesPtrOutputWithContext(context.Background())
}

func (o TemplateDecimalDefaultValuesOutput) ToTemplateDecimalDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDecimalDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDecimalDefaultValues) *TemplateDecimalDefaultValues {
		return &v
	}).(TemplateDecimalDefaultValuesPtrOutput)
}

// The dynamic value of the `DecimalDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
func (o TemplateDecimalDefaultValuesOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v TemplateDecimalDefaultValues) *TemplateDynamicDefaultValue { return v.DynamicValue }).(TemplateDynamicDefaultValuePtrOutput)
}

// The static values of the `DecimalDefaultValues` .
func (o TemplateDecimalDefaultValuesOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v TemplateDecimalDefaultValues) []float64 { return v.StaticValues }).(pulumi.Float64ArrayOutput)
}

type TemplateDecimalDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (TemplateDecimalDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalDefaultValues)(nil)).Elem()
}

func (o TemplateDecimalDefaultValuesPtrOutput) ToTemplateDecimalDefaultValuesPtrOutput() TemplateDecimalDefaultValuesPtrOutput {
	return o
}

func (o TemplateDecimalDefaultValuesPtrOutput) ToTemplateDecimalDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateDecimalDefaultValuesPtrOutput {
	return o
}

func (o TemplateDecimalDefaultValuesPtrOutput) Elem() TemplateDecimalDefaultValuesOutput {
	return o.ApplyT(func(v *TemplateDecimalDefaultValues) TemplateDecimalDefaultValues {
		if v != nil {
			return *v
		}
		var ret TemplateDecimalDefaultValues
		return ret
	}).(TemplateDecimalDefaultValuesOutput)
}

// The dynamic value of the `DecimalDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
func (o TemplateDecimalDefaultValuesPtrOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v *TemplateDecimalDefaultValues) *TemplateDynamicDefaultValue {
		if v == nil {
			return nil
		}
		return v.DynamicValue
	}).(TemplateDynamicDefaultValuePtrOutput)
}

// The static values of the `DecimalDefaultValues` .
func (o TemplateDecimalDefaultValuesPtrOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *TemplateDecimalDefaultValues) []float64 {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.Float64ArrayOutput)
}

type TemplateDecimalParameterDeclaration struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           *TemplateDecimalDefaultValues    `pulumi:"defaultValues"`
	MappedDataSetParameters []TemplateMappedDataSetParameter `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name string `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType TemplateParameterValueType `pulumi:"parameterValueType"`
	// The configuration that defines the default value of a `Decimal` parameter when a value has not been set.
	ValueWhenUnset *TemplateDecimalValueWhenUnsetConfiguration `pulumi:"valueWhenUnset"`
}

// TemplateDecimalParameterDeclarationInput is an input type that accepts TemplateDecimalParameterDeclarationArgs and TemplateDecimalParameterDeclarationOutput values.
// You can construct a concrete instance of `TemplateDecimalParameterDeclarationInput` via:
//
//	TemplateDecimalParameterDeclarationArgs{...}
type TemplateDecimalParameterDeclarationInput interface {
	pulumi.Input

	ToTemplateDecimalParameterDeclarationOutput() TemplateDecimalParameterDeclarationOutput
	ToTemplateDecimalParameterDeclarationOutputWithContext(context.Context) TemplateDecimalParameterDeclarationOutput
}

type TemplateDecimalParameterDeclarationArgs struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           TemplateDecimalDefaultValuesPtrInput     `pulumi:"defaultValues"`
	MappedDataSetParameters TemplateMappedDataSetParameterArrayInput `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name pulumi.StringInput `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType TemplateParameterValueTypeInput `pulumi:"parameterValueType"`
	// The configuration that defines the default value of a `Decimal` parameter when a value has not been set.
	ValueWhenUnset TemplateDecimalValueWhenUnsetConfigurationPtrInput `pulumi:"valueWhenUnset"`
}

func (TemplateDecimalParameterDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalParameterDeclaration)(nil)).Elem()
}

func (i TemplateDecimalParameterDeclarationArgs) ToTemplateDecimalParameterDeclarationOutput() TemplateDecimalParameterDeclarationOutput {
	return i.ToTemplateDecimalParameterDeclarationOutputWithContext(context.Background())
}

func (i TemplateDecimalParameterDeclarationArgs) ToTemplateDecimalParameterDeclarationOutputWithContext(ctx context.Context) TemplateDecimalParameterDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalParameterDeclarationOutput)
}

func (i TemplateDecimalParameterDeclarationArgs) ToTemplateDecimalParameterDeclarationPtrOutput() TemplateDecimalParameterDeclarationPtrOutput {
	return i.ToTemplateDecimalParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i TemplateDecimalParameterDeclarationArgs) ToTemplateDecimalParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDecimalParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalParameterDeclarationOutput).ToTemplateDecimalParameterDeclarationPtrOutputWithContext(ctx)
}

// TemplateDecimalParameterDeclarationPtrInput is an input type that accepts TemplateDecimalParameterDeclarationArgs, TemplateDecimalParameterDeclarationPtr and TemplateDecimalParameterDeclarationPtrOutput values.
// You can construct a concrete instance of `TemplateDecimalParameterDeclarationPtrInput` via:
//
//	        TemplateDecimalParameterDeclarationArgs{...}
//
//	or:
//
//	        nil
type TemplateDecimalParameterDeclarationPtrInput interface {
	pulumi.Input

	ToTemplateDecimalParameterDeclarationPtrOutput() TemplateDecimalParameterDeclarationPtrOutput
	ToTemplateDecimalParameterDeclarationPtrOutputWithContext(context.Context) TemplateDecimalParameterDeclarationPtrOutput
}

type templateDecimalParameterDeclarationPtrType TemplateDecimalParameterDeclarationArgs

func TemplateDecimalParameterDeclarationPtr(v *TemplateDecimalParameterDeclarationArgs) TemplateDecimalParameterDeclarationPtrInput {
	return (*templateDecimalParameterDeclarationPtrType)(v)
}

func (*templateDecimalParameterDeclarationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalParameterDeclaration)(nil)).Elem()
}

func (i *templateDecimalParameterDeclarationPtrType) ToTemplateDecimalParameterDeclarationPtrOutput() TemplateDecimalParameterDeclarationPtrOutput {
	return i.ToTemplateDecimalParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i *templateDecimalParameterDeclarationPtrType) ToTemplateDecimalParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDecimalParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalParameterDeclarationPtrOutput)
}

type TemplateDecimalParameterDeclarationOutput struct{ *pulumi.OutputState }

func (TemplateDecimalParameterDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalParameterDeclaration)(nil)).Elem()
}

func (o TemplateDecimalParameterDeclarationOutput) ToTemplateDecimalParameterDeclarationOutput() TemplateDecimalParameterDeclarationOutput {
	return o
}

func (o TemplateDecimalParameterDeclarationOutput) ToTemplateDecimalParameterDeclarationOutputWithContext(ctx context.Context) TemplateDecimalParameterDeclarationOutput {
	return o
}

func (o TemplateDecimalParameterDeclarationOutput) ToTemplateDecimalParameterDeclarationPtrOutput() TemplateDecimalParameterDeclarationPtrOutput {
	return o.ToTemplateDecimalParameterDeclarationPtrOutputWithContext(context.Background())
}

func (o TemplateDecimalParameterDeclarationOutput) ToTemplateDecimalParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDecimalParameterDeclarationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDecimalParameterDeclaration) *TemplateDecimalParameterDeclaration {
		return &v
	}).(TemplateDecimalParameterDeclarationPtrOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateDecimalParameterDeclarationOutput) DefaultValues() TemplateDecimalDefaultValuesPtrOutput {
	return o.ApplyT(func(v TemplateDecimalParameterDeclaration) *TemplateDecimalDefaultValues { return v.DefaultValues }).(TemplateDecimalDefaultValuesPtrOutput)
}

func (o TemplateDecimalParameterDeclarationOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v TemplateDecimalParameterDeclaration) []TemplateMappedDataSetParameter {
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateDecimalParameterDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDecimalParameterDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o TemplateDecimalParameterDeclarationOutput) ParameterValueType() TemplateParameterValueTypeOutput {
	return o.ApplyT(func(v TemplateDecimalParameterDeclaration) TemplateParameterValueType { return v.ParameterValueType }).(TemplateParameterValueTypeOutput)
}

// The configuration that defines the default value of a `Decimal` parameter when a value has not been set.
func (o TemplateDecimalParameterDeclarationOutput) ValueWhenUnset() TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDecimalParameterDeclaration) *TemplateDecimalValueWhenUnsetConfiguration {
		return v.ValueWhenUnset
	}).(TemplateDecimalValueWhenUnsetConfigurationPtrOutput)
}

type TemplateDecimalParameterDeclarationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDecimalParameterDeclarationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalParameterDeclaration)(nil)).Elem()
}

func (o TemplateDecimalParameterDeclarationPtrOutput) ToTemplateDecimalParameterDeclarationPtrOutput() TemplateDecimalParameterDeclarationPtrOutput {
	return o
}

func (o TemplateDecimalParameterDeclarationPtrOutput) ToTemplateDecimalParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateDecimalParameterDeclarationPtrOutput {
	return o
}

func (o TemplateDecimalParameterDeclarationPtrOutput) Elem() TemplateDecimalParameterDeclarationOutput {
	return o.ApplyT(func(v *TemplateDecimalParameterDeclaration) TemplateDecimalParameterDeclaration {
		if v != nil {
			return *v
		}
		var ret TemplateDecimalParameterDeclaration
		return ret
	}).(TemplateDecimalParameterDeclarationOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateDecimalParameterDeclarationPtrOutput) DefaultValues() TemplateDecimalDefaultValuesPtrOutput {
	return o.ApplyT(func(v *TemplateDecimalParameterDeclaration) *TemplateDecimalDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(TemplateDecimalDefaultValuesPtrOutput)
}

func (o TemplateDecimalParameterDeclarationPtrOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v *TemplateDecimalParameterDeclaration) []TemplateMappedDataSetParameter {
		if v == nil {
			return nil
		}
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateDecimalParameterDeclarationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDecimalParameterDeclaration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o TemplateDecimalParameterDeclarationPtrOutput) ParameterValueType() TemplateParameterValueTypePtrOutput {
	return o.ApplyT(func(v *TemplateDecimalParameterDeclaration) *TemplateParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ParameterValueType
	}).(TemplateParameterValueTypePtrOutput)
}

// The configuration that defines the default value of a `Decimal` parameter when a value has not been set.
func (o TemplateDecimalParameterDeclarationPtrOutput) ValueWhenUnset() TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDecimalParameterDeclaration) *TemplateDecimalValueWhenUnsetConfiguration {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnset
	}).(TemplateDecimalValueWhenUnsetConfigurationPtrOutput)
}

type TemplateDecimalPlacesConfiguration struct {
	// The values of the decimal places.
	DecimalPlaces float64 `pulumi:"decimalPlaces"`
}

// TemplateDecimalPlacesConfigurationInput is an input type that accepts TemplateDecimalPlacesConfigurationArgs and TemplateDecimalPlacesConfigurationOutput values.
// You can construct a concrete instance of `TemplateDecimalPlacesConfigurationInput` via:
//
//	TemplateDecimalPlacesConfigurationArgs{...}
type TemplateDecimalPlacesConfigurationInput interface {
	pulumi.Input

	ToTemplateDecimalPlacesConfigurationOutput() TemplateDecimalPlacesConfigurationOutput
	ToTemplateDecimalPlacesConfigurationOutputWithContext(context.Context) TemplateDecimalPlacesConfigurationOutput
}

type TemplateDecimalPlacesConfigurationArgs struct {
	// The values of the decimal places.
	DecimalPlaces pulumi.Float64Input `pulumi:"decimalPlaces"`
}

func (TemplateDecimalPlacesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalPlacesConfiguration)(nil)).Elem()
}

func (i TemplateDecimalPlacesConfigurationArgs) ToTemplateDecimalPlacesConfigurationOutput() TemplateDecimalPlacesConfigurationOutput {
	return i.ToTemplateDecimalPlacesConfigurationOutputWithContext(context.Background())
}

func (i TemplateDecimalPlacesConfigurationArgs) ToTemplateDecimalPlacesConfigurationOutputWithContext(ctx context.Context) TemplateDecimalPlacesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalPlacesConfigurationOutput)
}

func (i TemplateDecimalPlacesConfigurationArgs) ToTemplateDecimalPlacesConfigurationPtrOutput() TemplateDecimalPlacesConfigurationPtrOutput {
	return i.ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDecimalPlacesConfigurationArgs) ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalPlacesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalPlacesConfigurationOutput).ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(ctx)
}

// TemplateDecimalPlacesConfigurationPtrInput is an input type that accepts TemplateDecimalPlacesConfigurationArgs, TemplateDecimalPlacesConfigurationPtr and TemplateDecimalPlacesConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDecimalPlacesConfigurationPtrInput` via:
//
//	        TemplateDecimalPlacesConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDecimalPlacesConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDecimalPlacesConfigurationPtrOutput() TemplateDecimalPlacesConfigurationPtrOutput
	ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(context.Context) TemplateDecimalPlacesConfigurationPtrOutput
}

type templateDecimalPlacesConfigurationPtrType TemplateDecimalPlacesConfigurationArgs

func TemplateDecimalPlacesConfigurationPtr(v *TemplateDecimalPlacesConfigurationArgs) TemplateDecimalPlacesConfigurationPtrInput {
	return (*templateDecimalPlacesConfigurationPtrType)(v)
}

func (*templateDecimalPlacesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalPlacesConfiguration)(nil)).Elem()
}

func (i *templateDecimalPlacesConfigurationPtrType) ToTemplateDecimalPlacesConfigurationPtrOutput() TemplateDecimalPlacesConfigurationPtrOutput {
	return i.ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDecimalPlacesConfigurationPtrType) ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalPlacesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalPlacesConfigurationPtrOutput)
}

type TemplateDecimalPlacesConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDecimalPlacesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalPlacesConfiguration)(nil)).Elem()
}

func (o TemplateDecimalPlacesConfigurationOutput) ToTemplateDecimalPlacesConfigurationOutput() TemplateDecimalPlacesConfigurationOutput {
	return o
}

func (o TemplateDecimalPlacesConfigurationOutput) ToTemplateDecimalPlacesConfigurationOutputWithContext(ctx context.Context) TemplateDecimalPlacesConfigurationOutput {
	return o
}

func (o TemplateDecimalPlacesConfigurationOutput) ToTemplateDecimalPlacesConfigurationPtrOutput() TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDecimalPlacesConfigurationOutput) ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDecimalPlacesConfiguration) *TemplateDecimalPlacesConfiguration {
		return &v
	}).(TemplateDecimalPlacesConfigurationPtrOutput)
}

// The values of the decimal places.
func (o TemplateDecimalPlacesConfigurationOutput) DecimalPlaces() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateDecimalPlacesConfiguration) float64 { return v.DecimalPlaces }).(pulumi.Float64Output)
}

type TemplateDecimalPlacesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDecimalPlacesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalPlacesConfiguration)(nil)).Elem()
}

func (o TemplateDecimalPlacesConfigurationPtrOutput) ToTemplateDecimalPlacesConfigurationPtrOutput() TemplateDecimalPlacesConfigurationPtrOutput {
	return o
}

func (o TemplateDecimalPlacesConfigurationPtrOutput) ToTemplateDecimalPlacesConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalPlacesConfigurationPtrOutput {
	return o
}

func (o TemplateDecimalPlacesConfigurationPtrOutput) Elem() TemplateDecimalPlacesConfigurationOutput {
	return o.ApplyT(func(v *TemplateDecimalPlacesConfiguration) TemplateDecimalPlacesConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDecimalPlacesConfiguration
		return ret
	}).(TemplateDecimalPlacesConfigurationOutput)
}

// The values of the decimal places.
func (o TemplateDecimalPlacesConfigurationPtrOutput) DecimalPlaces() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateDecimalPlacesConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.DecimalPlaces
	}).(pulumi.Float64PtrOutput)
}

type TemplateDecimalValueWhenUnsetConfiguration struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue *float64 `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption *TemplateValueWhenUnsetOption `pulumi:"valueWhenUnsetOption"`
}

// TemplateDecimalValueWhenUnsetConfigurationInput is an input type that accepts TemplateDecimalValueWhenUnsetConfigurationArgs and TemplateDecimalValueWhenUnsetConfigurationOutput values.
// You can construct a concrete instance of `TemplateDecimalValueWhenUnsetConfigurationInput` via:
//
//	TemplateDecimalValueWhenUnsetConfigurationArgs{...}
type TemplateDecimalValueWhenUnsetConfigurationInput interface {
	pulumi.Input

	ToTemplateDecimalValueWhenUnsetConfigurationOutput() TemplateDecimalValueWhenUnsetConfigurationOutput
	ToTemplateDecimalValueWhenUnsetConfigurationOutputWithContext(context.Context) TemplateDecimalValueWhenUnsetConfigurationOutput
}

type TemplateDecimalValueWhenUnsetConfigurationArgs struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue pulumi.Float64PtrInput `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption TemplateValueWhenUnsetOptionPtrInput `pulumi:"valueWhenUnsetOption"`
}

func (TemplateDecimalValueWhenUnsetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i TemplateDecimalValueWhenUnsetConfigurationArgs) ToTemplateDecimalValueWhenUnsetConfigurationOutput() TemplateDecimalValueWhenUnsetConfigurationOutput {
	return i.ToTemplateDecimalValueWhenUnsetConfigurationOutputWithContext(context.Background())
}

func (i TemplateDecimalValueWhenUnsetConfigurationArgs) ToTemplateDecimalValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateDecimalValueWhenUnsetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalValueWhenUnsetConfigurationOutput)
}

func (i TemplateDecimalValueWhenUnsetConfigurationArgs) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutput() TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDecimalValueWhenUnsetConfigurationArgs) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalValueWhenUnsetConfigurationOutput).ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(ctx)
}

// TemplateDecimalValueWhenUnsetConfigurationPtrInput is an input type that accepts TemplateDecimalValueWhenUnsetConfigurationArgs, TemplateDecimalValueWhenUnsetConfigurationPtr and TemplateDecimalValueWhenUnsetConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDecimalValueWhenUnsetConfigurationPtrInput` via:
//
//	        TemplateDecimalValueWhenUnsetConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDecimalValueWhenUnsetConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDecimalValueWhenUnsetConfigurationPtrOutput() TemplateDecimalValueWhenUnsetConfigurationPtrOutput
	ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(context.Context) TemplateDecimalValueWhenUnsetConfigurationPtrOutput
}

type templateDecimalValueWhenUnsetConfigurationPtrType TemplateDecimalValueWhenUnsetConfigurationArgs

func TemplateDecimalValueWhenUnsetConfigurationPtr(v *TemplateDecimalValueWhenUnsetConfigurationArgs) TemplateDecimalValueWhenUnsetConfigurationPtrInput {
	return (*templateDecimalValueWhenUnsetConfigurationPtrType)(v)
}

func (*templateDecimalValueWhenUnsetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i *templateDecimalValueWhenUnsetConfigurationPtrType) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutput() TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDecimalValueWhenUnsetConfigurationPtrType) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDecimalValueWhenUnsetConfigurationPtrOutput)
}

type TemplateDecimalValueWhenUnsetConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDecimalValueWhenUnsetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDecimalValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateDecimalValueWhenUnsetConfigurationOutput) ToTemplateDecimalValueWhenUnsetConfigurationOutput() TemplateDecimalValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateDecimalValueWhenUnsetConfigurationOutput) ToTemplateDecimalValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateDecimalValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateDecimalValueWhenUnsetConfigurationOutput) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutput() TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return o.ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDecimalValueWhenUnsetConfigurationOutput) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDecimalValueWhenUnsetConfiguration) *TemplateDecimalValueWhenUnsetConfiguration {
		return &v
	}).(TemplateDecimalValueWhenUnsetConfigurationPtrOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateDecimalValueWhenUnsetConfigurationOutput) CustomValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateDecimalValueWhenUnsetConfiguration) *float64 { return v.CustomValue }).(pulumi.Float64PtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateDecimalValueWhenUnsetConfigurationOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v TemplateDecimalValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateDecimalValueWhenUnsetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDecimalValueWhenUnsetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDecimalValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateDecimalValueWhenUnsetConfigurationPtrOutput) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutput() TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateDecimalValueWhenUnsetConfigurationPtrOutput) ToTemplateDecimalValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDecimalValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateDecimalValueWhenUnsetConfigurationPtrOutput) Elem() TemplateDecimalValueWhenUnsetConfigurationOutput {
	return o.ApplyT(func(v *TemplateDecimalValueWhenUnsetConfiguration) TemplateDecimalValueWhenUnsetConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDecimalValueWhenUnsetConfiguration
		return ret
	}).(TemplateDecimalValueWhenUnsetConfigurationOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateDecimalValueWhenUnsetConfigurationPtrOutput) CustomValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateDecimalValueWhenUnsetConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.CustomValue
	}).(pulumi.Float64PtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateDecimalValueWhenUnsetConfigurationPtrOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v *TemplateDecimalValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateDefaultDateTimePickerControlOptions struct {
	// The visibility configuration of the Apply button on a `DateTimePickerControl` .
	CommitMode *TemplateCommitMode `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions *TemplateDateTimePickerControlDisplayOptions `pulumi:"displayOptions"`
	// The date time picker type of the `DefaultDateTimePickerControlOptions` . Choose one of the following options:
	//
	// - `SINGLE_VALUED` : The filter condition is a fixed date.
	// - `DATE_RANGE` : The filter condition is a date time range.
	Type *TemplateSheetControlDateTimePickerType `pulumi:"type"`
}

// TemplateDefaultDateTimePickerControlOptionsInput is an input type that accepts TemplateDefaultDateTimePickerControlOptionsArgs and TemplateDefaultDateTimePickerControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultDateTimePickerControlOptionsInput` via:
//
//	TemplateDefaultDateTimePickerControlOptionsArgs{...}
type TemplateDefaultDateTimePickerControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultDateTimePickerControlOptionsOutput() TemplateDefaultDateTimePickerControlOptionsOutput
	ToTemplateDefaultDateTimePickerControlOptionsOutputWithContext(context.Context) TemplateDefaultDateTimePickerControlOptionsOutput
}

type TemplateDefaultDateTimePickerControlOptionsArgs struct {
	// The visibility configuration of the Apply button on a `DateTimePickerControl` .
	CommitMode TemplateCommitModePtrInput `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions TemplateDateTimePickerControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The date time picker type of the `DefaultDateTimePickerControlOptions` . Choose one of the following options:
	//
	// - `SINGLE_VALUED` : The filter condition is a fixed date.
	// - `DATE_RANGE` : The filter condition is a date time range.
	Type TemplateSheetControlDateTimePickerTypePtrInput `pulumi:"type"`
}

func (TemplateDefaultDateTimePickerControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultDateTimePickerControlOptions)(nil)).Elem()
}

func (i TemplateDefaultDateTimePickerControlOptionsArgs) ToTemplateDefaultDateTimePickerControlOptionsOutput() TemplateDefaultDateTimePickerControlOptionsOutput {
	return i.ToTemplateDefaultDateTimePickerControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultDateTimePickerControlOptionsArgs) ToTemplateDefaultDateTimePickerControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultDateTimePickerControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultDateTimePickerControlOptionsOutput)
}

func (i TemplateDefaultDateTimePickerControlOptionsArgs) ToTemplateDefaultDateTimePickerControlOptionsPtrOutput() TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return i.ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultDateTimePickerControlOptionsArgs) ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultDateTimePickerControlOptionsOutput).ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultDateTimePickerControlOptionsPtrInput is an input type that accepts TemplateDefaultDateTimePickerControlOptionsArgs, TemplateDefaultDateTimePickerControlOptionsPtr and TemplateDefaultDateTimePickerControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultDateTimePickerControlOptionsPtrInput` via:
//
//	        TemplateDefaultDateTimePickerControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultDateTimePickerControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultDateTimePickerControlOptionsPtrOutput() TemplateDefaultDateTimePickerControlOptionsPtrOutput
	ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultDateTimePickerControlOptionsPtrOutput
}

type templateDefaultDateTimePickerControlOptionsPtrType TemplateDefaultDateTimePickerControlOptionsArgs

func TemplateDefaultDateTimePickerControlOptionsPtr(v *TemplateDefaultDateTimePickerControlOptionsArgs) TemplateDefaultDateTimePickerControlOptionsPtrInput {
	return (*templateDefaultDateTimePickerControlOptionsPtrType)(v)
}

func (*templateDefaultDateTimePickerControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultDateTimePickerControlOptions)(nil)).Elem()
}

func (i *templateDefaultDateTimePickerControlOptionsPtrType) ToTemplateDefaultDateTimePickerControlOptionsPtrOutput() TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return i.ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultDateTimePickerControlOptionsPtrType) ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultDateTimePickerControlOptionsPtrOutput)
}

type TemplateDefaultDateTimePickerControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultDateTimePickerControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultDateTimePickerControlOptions)(nil)).Elem()
}

func (o TemplateDefaultDateTimePickerControlOptionsOutput) ToTemplateDefaultDateTimePickerControlOptionsOutput() TemplateDefaultDateTimePickerControlOptionsOutput {
	return o
}

func (o TemplateDefaultDateTimePickerControlOptionsOutput) ToTemplateDefaultDateTimePickerControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultDateTimePickerControlOptionsOutput {
	return o
}

func (o TemplateDefaultDateTimePickerControlOptionsOutput) ToTemplateDefaultDateTimePickerControlOptionsPtrOutput() TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return o.ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultDateTimePickerControlOptionsOutput) ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultDateTimePickerControlOptions) *TemplateDefaultDateTimePickerControlOptions {
		return &v
	}).(TemplateDefaultDateTimePickerControlOptionsPtrOutput)
}

// The visibility configuration of the Apply button on a `DateTimePickerControl` .
func (o TemplateDefaultDateTimePickerControlOptionsOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v TemplateDefaultDateTimePickerControlOptions) *TemplateCommitMode { return v.CommitMode }).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateDefaultDateTimePickerControlOptionsOutput) DisplayOptions() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultDateTimePickerControlOptions) *TemplateDateTimePickerControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

// The date time picker type of the `DefaultDateTimePickerControlOptions` . Choose one of the following options:
//
// - `SINGLE_VALUED` : The filter condition is a fixed date.
// - `DATE_RANGE` : The filter condition is a date time range.
func (o TemplateDefaultDateTimePickerControlOptionsOutput) Type() TemplateSheetControlDateTimePickerTypePtrOutput {
	return o.ApplyT(func(v TemplateDefaultDateTimePickerControlOptions) *TemplateSheetControlDateTimePickerType {
		return v.Type
	}).(TemplateSheetControlDateTimePickerTypePtrOutput)
}

type TemplateDefaultDateTimePickerControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultDateTimePickerControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultDateTimePickerControlOptions)(nil)).Elem()
}

func (o TemplateDefaultDateTimePickerControlOptionsPtrOutput) ToTemplateDefaultDateTimePickerControlOptionsPtrOutput() TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultDateTimePickerControlOptionsPtrOutput) ToTemplateDefaultDateTimePickerControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultDateTimePickerControlOptionsPtrOutput) Elem() TemplateDefaultDateTimePickerControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultDateTimePickerControlOptions) TemplateDefaultDateTimePickerControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultDateTimePickerControlOptions
		return ret
	}).(TemplateDefaultDateTimePickerControlOptionsOutput)
}

// The visibility configuration of the Apply button on a `DateTimePickerControl` .
func (o TemplateDefaultDateTimePickerControlOptionsPtrOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultDateTimePickerControlOptions) *TemplateCommitMode {
		if v == nil {
			return nil
		}
		return v.CommitMode
	}).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateDefaultDateTimePickerControlOptionsPtrOutput) DisplayOptions() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultDateTimePickerControlOptions) *TemplateDateTimePickerControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

// The date time picker type of the `DefaultDateTimePickerControlOptions` . Choose one of the following options:
//
// - `SINGLE_VALUED` : The filter condition is a fixed date.
// - `DATE_RANGE` : The filter condition is a date time range.
func (o TemplateDefaultDateTimePickerControlOptionsPtrOutput) Type() TemplateSheetControlDateTimePickerTypePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultDateTimePickerControlOptions) *TemplateSheetControlDateTimePickerType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlDateTimePickerTypePtrOutput)
}

type TemplateDefaultFilterControlConfiguration struct {
	// The control option for the `DefaultFilterControlConfiguration` .
	ControlOptions TemplateDefaultFilterControlOptions `pulumi:"controlOptions"`
	// The title of the `DefaultFilterControlConfiguration` . This title is shared by all controls that are tied to this filter.
	Title string `pulumi:"title"`
}

// TemplateDefaultFilterControlConfigurationInput is an input type that accepts TemplateDefaultFilterControlConfigurationArgs and TemplateDefaultFilterControlConfigurationOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterControlConfigurationInput` via:
//
//	TemplateDefaultFilterControlConfigurationArgs{...}
type TemplateDefaultFilterControlConfigurationInput interface {
	pulumi.Input

	ToTemplateDefaultFilterControlConfigurationOutput() TemplateDefaultFilterControlConfigurationOutput
	ToTemplateDefaultFilterControlConfigurationOutputWithContext(context.Context) TemplateDefaultFilterControlConfigurationOutput
}

type TemplateDefaultFilterControlConfigurationArgs struct {
	// The control option for the `DefaultFilterControlConfiguration` .
	ControlOptions TemplateDefaultFilterControlOptionsInput `pulumi:"controlOptions"`
	// The title of the `DefaultFilterControlConfiguration` . This title is shared by all controls that are tied to this filter.
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateDefaultFilterControlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterControlConfiguration)(nil)).Elem()
}

func (i TemplateDefaultFilterControlConfigurationArgs) ToTemplateDefaultFilterControlConfigurationOutput() TemplateDefaultFilterControlConfigurationOutput {
	return i.ToTemplateDefaultFilterControlConfigurationOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterControlConfigurationArgs) ToTemplateDefaultFilterControlConfigurationOutputWithContext(ctx context.Context) TemplateDefaultFilterControlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterControlConfigurationOutput)
}

func (i TemplateDefaultFilterControlConfigurationArgs) ToTemplateDefaultFilterControlConfigurationPtrOutput() TemplateDefaultFilterControlConfigurationPtrOutput {
	return i.ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterControlConfigurationArgs) ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterControlConfigurationOutput).ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(ctx)
}

// TemplateDefaultFilterControlConfigurationPtrInput is an input type that accepts TemplateDefaultFilterControlConfigurationArgs, TemplateDefaultFilterControlConfigurationPtr and TemplateDefaultFilterControlConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterControlConfigurationPtrInput` via:
//
//	        TemplateDefaultFilterControlConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultFilterControlConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDefaultFilterControlConfigurationPtrOutput() TemplateDefaultFilterControlConfigurationPtrOutput
	ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(context.Context) TemplateDefaultFilterControlConfigurationPtrOutput
}

type templateDefaultFilterControlConfigurationPtrType TemplateDefaultFilterControlConfigurationArgs

func TemplateDefaultFilterControlConfigurationPtr(v *TemplateDefaultFilterControlConfigurationArgs) TemplateDefaultFilterControlConfigurationPtrInput {
	return (*templateDefaultFilterControlConfigurationPtrType)(v)
}

func (*templateDefaultFilterControlConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterControlConfiguration)(nil)).Elem()
}

func (i *templateDefaultFilterControlConfigurationPtrType) ToTemplateDefaultFilterControlConfigurationPtrOutput() TemplateDefaultFilterControlConfigurationPtrOutput {
	return i.ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDefaultFilterControlConfigurationPtrType) ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

type TemplateDefaultFilterControlConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterControlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterControlConfiguration)(nil)).Elem()
}

func (o TemplateDefaultFilterControlConfigurationOutput) ToTemplateDefaultFilterControlConfigurationOutput() TemplateDefaultFilterControlConfigurationOutput {
	return o
}

func (o TemplateDefaultFilterControlConfigurationOutput) ToTemplateDefaultFilterControlConfigurationOutputWithContext(ctx context.Context) TemplateDefaultFilterControlConfigurationOutput {
	return o
}

func (o TemplateDefaultFilterControlConfigurationOutput) ToTemplateDefaultFilterControlConfigurationPtrOutput() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultFilterControlConfigurationOutput) ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultFilterControlConfiguration) *TemplateDefaultFilterControlConfiguration {
		return &v
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// The control option for the `DefaultFilterControlConfiguration` .
func (o TemplateDefaultFilterControlConfigurationOutput) ControlOptions() TemplateDefaultFilterControlOptionsOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlConfiguration) TemplateDefaultFilterControlOptions {
		return v.ControlOptions
	}).(TemplateDefaultFilterControlOptionsOutput)
}

// The title of the `DefaultFilterControlConfiguration` . This title is shared by all controls that are tied to this filter.
func (o TemplateDefaultFilterControlConfigurationOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlConfiguration) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateDefaultFilterControlConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterControlConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterControlConfiguration)(nil)).Elem()
}

func (o TemplateDefaultFilterControlConfigurationPtrOutput) ToTemplateDefaultFilterControlConfigurationPtrOutput() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultFilterControlConfigurationPtrOutput) ToTemplateDefaultFilterControlConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultFilterControlConfigurationPtrOutput) Elem() TemplateDefaultFilterControlConfigurationOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlConfiguration) TemplateDefaultFilterControlConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultFilterControlConfiguration
		return ret
	}).(TemplateDefaultFilterControlConfigurationOutput)
}

// The control option for the `DefaultFilterControlConfiguration` .
func (o TemplateDefaultFilterControlConfigurationPtrOutput) ControlOptions() TemplateDefaultFilterControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlConfiguration) *TemplateDefaultFilterControlOptions {
		if v == nil {
			return nil
		}
		return &v.ControlOptions
	}).(TemplateDefaultFilterControlOptionsPtrOutput)
}

// The title of the `DefaultFilterControlConfiguration` . This title is shared by all controls that are tied to this filter.
func (o TemplateDefaultFilterControlConfigurationPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplateDefaultFilterControlOptions struct {
	// The default options that correspond to the filter control type of a `DateTimePicker` .
	DefaultDateTimePickerOptions *TemplateDefaultDateTimePickerControlOptions `pulumi:"defaultDateTimePickerOptions"`
	// The default options that correspond to the `Dropdown` filter control type.
	DefaultDropdownOptions *TemplateDefaultFilterDropDownControlOptions `pulumi:"defaultDropdownOptions"`
	// The default options that correspond to the `List` filter control type.
	DefaultListOptions *TemplateDefaultFilterListControlOptions `pulumi:"defaultListOptions"`
	// The default options that correspond to the `RelativeDateTime` filter control type.
	DefaultRelativeDateTimeOptions *TemplateDefaultRelativeDateTimeControlOptions `pulumi:"defaultRelativeDateTimeOptions"`
	// The default options that correspond to the `Slider` filter control type.
	DefaultSliderOptions *TemplateDefaultSliderControlOptions `pulumi:"defaultSliderOptions"`
	// The default options that correspond to the `TextArea` filter control type.
	DefaultTextAreaOptions *TemplateDefaultTextAreaControlOptions `pulumi:"defaultTextAreaOptions"`
	// The default options that correspond to the `TextField` filter control type.
	DefaultTextFieldOptions *TemplateDefaultTextFieldControlOptions `pulumi:"defaultTextFieldOptions"`
}

// TemplateDefaultFilterControlOptionsInput is an input type that accepts TemplateDefaultFilterControlOptionsArgs and TemplateDefaultFilterControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterControlOptionsInput` via:
//
//	TemplateDefaultFilterControlOptionsArgs{...}
type TemplateDefaultFilterControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultFilterControlOptionsOutput() TemplateDefaultFilterControlOptionsOutput
	ToTemplateDefaultFilterControlOptionsOutputWithContext(context.Context) TemplateDefaultFilterControlOptionsOutput
}

type TemplateDefaultFilterControlOptionsArgs struct {
	// The default options that correspond to the filter control type of a `DateTimePicker` .
	DefaultDateTimePickerOptions TemplateDefaultDateTimePickerControlOptionsPtrInput `pulumi:"defaultDateTimePickerOptions"`
	// The default options that correspond to the `Dropdown` filter control type.
	DefaultDropdownOptions TemplateDefaultFilterDropDownControlOptionsPtrInput `pulumi:"defaultDropdownOptions"`
	// The default options that correspond to the `List` filter control type.
	DefaultListOptions TemplateDefaultFilterListControlOptionsPtrInput `pulumi:"defaultListOptions"`
	// The default options that correspond to the `RelativeDateTime` filter control type.
	DefaultRelativeDateTimeOptions TemplateDefaultRelativeDateTimeControlOptionsPtrInput `pulumi:"defaultRelativeDateTimeOptions"`
	// The default options that correspond to the `Slider` filter control type.
	DefaultSliderOptions TemplateDefaultSliderControlOptionsPtrInput `pulumi:"defaultSliderOptions"`
	// The default options that correspond to the `TextArea` filter control type.
	DefaultTextAreaOptions TemplateDefaultTextAreaControlOptionsPtrInput `pulumi:"defaultTextAreaOptions"`
	// The default options that correspond to the `TextField` filter control type.
	DefaultTextFieldOptions TemplateDefaultTextFieldControlOptionsPtrInput `pulumi:"defaultTextFieldOptions"`
}

func (TemplateDefaultFilterControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterControlOptions)(nil)).Elem()
}

func (i TemplateDefaultFilterControlOptionsArgs) ToTemplateDefaultFilterControlOptionsOutput() TemplateDefaultFilterControlOptionsOutput {
	return i.ToTemplateDefaultFilterControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterControlOptionsArgs) ToTemplateDefaultFilterControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultFilterControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterControlOptionsOutput)
}

func (i TemplateDefaultFilterControlOptionsArgs) ToTemplateDefaultFilterControlOptionsPtrOutput() TemplateDefaultFilterControlOptionsPtrOutput {
	return i.ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterControlOptionsArgs) ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterControlOptionsOutput).ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultFilterControlOptionsPtrInput is an input type that accepts TemplateDefaultFilterControlOptionsArgs, TemplateDefaultFilterControlOptionsPtr and TemplateDefaultFilterControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterControlOptionsPtrInput` via:
//
//	        TemplateDefaultFilterControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultFilterControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultFilterControlOptionsPtrOutput() TemplateDefaultFilterControlOptionsPtrOutput
	ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultFilterControlOptionsPtrOutput
}

type templateDefaultFilterControlOptionsPtrType TemplateDefaultFilterControlOptionsArgs

func TemplateDefaultFilterControlOptionsPtr(v *TemplateDefaultFilterControlOptionsArgs) TemplateDefaultFilterControlOptionsPtrInput {
	return (*templateDefaultFilterControlOptionsPtrType)(v)
}

func (*templateDefaultFilterControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterControlOptions)(nil)).Elem()
}

func (i *templateDefaultFilterControlOptionsPtrType) ToTemplateDefaultFilterControlOptionsPtrOutput() TemplateDefaultFilterControlOptionsPtrOutput {
	return i.ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultFilterControlOptionsPtrType) ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterControlOptionsPtrOutput)
}

type TemplateDefaultFilterControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterControlOptions)(nil)).Elem()
}

func (o TemplateDefaultFilterControlOptionsOutput) ToTemplateDefaultFilterControlOptionsOutput() TemplateDefaultFilterControlOptionsOutput {
	return o
}

func (o TemplateDefaultFilterControlOptionsOutput) ToTemplateDefaultFilterControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultFilterControlOptionsOutput {
	return o
}

func (o TemplateDefaultFilterControlOptionsOutput) ToTemplateDefaultFilterControlOptionsPtrOutput() TemplateDefaultFilterControlOptionsPtrOutput {
	return o.ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultFilterControlOptionsOutput) ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultFilterControlOptions) *TemplateDefaultFilterControlOptions {
		return &v
	}).(TemplateDefaultFilterControlOptionsPtrOutput)
}

// The default options that correspond to the filter control type of a `DateTimePicker` .
func (o TemplateDefaultFilterControlOptionsOutput) DefaultDateTimePickerOptions() TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlOptions) *TemplateDefaultDateTimePickerControlOptions {
		return v.DefaultDateTimePickerOptions
	}).(TemplateDefaultDateTimePickerControlOptionsPtrOutput)
}

// The default options that correspond to the `Dropdown` filter control type.
func (o TemplateDefaultFilterControlOptionsOutput) DefaultDropdownOptions() TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlOptions) *TemplateDefaultFilterDropDownControlOptions {
		return v.DefaultDropdownOptions
	}).(TemplateDefaultFilterDropDownControlOptionsPtrOutput)
}

// The default options that correspond to the `List` filter control type.
func (o TemplateDefaultFilterControlOptionsOutput) DefaultListOptions() TemplateDefaultFilterListControlOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlOptions) *TemplateDefaultFilterListControlOptions {
		return v.DefaultListOptions
	}).(TemplateDefaultFilterListControlOptionsPtrOutput)
}

// The default options that correspond to the `RelativeDateTime` filter control type.
func (o TemplateDefaultFilterControlOptionsOutput) DefaultRelativeDateTimeOptions() TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlOptions) *TemplateDefaultRelativeDateTimeControlOptions {
		return v.DefaultRelativeDateTimeOptions
	}).(TemplateDefaultRelativeDateTimeControlOptionsPtrOutput)
}

// The default options that correspond to the `Slider` filter control type.
func (o TemplateDefaultFilterControlOptionsOutput) DefaultSliderOptions() TemplateDefaultSliderControlOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlOptions) *TemplateDefaultSliderControlOptions {
		return v.DefaultSliderOptions
	}).(TemplateDefaultSliderControlOptionsPtrOutput)
}

// The default options that correspond to the `TextArea` filter control type.
func (o TemplateDefaultFilterControlOptionsOutput) DefaultTextAreaOptions() TemplateDefaultTextAreaControlOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlOptions) *TemplateDefaultTextAreaControlOptions {
		return v.DefaultTextAreaOptions
	}).(TemplateDefaultTextAreaControlOptionsPtrOutput)
}

// The default options that correspond to the `TextField` filter control type.
func (o TemplateDefaultFilterControlOptionsOutput) DefaultTextFieldOptions() TemplateDefaultTextFieldControlOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterControlOptions) *TemplateDefaultTextFieldControlOptions {
		return v.DefaultTextFieldOptions
	}).(TemplateDefaultTextFieldControlOptionsPtrOutput)
}

type TemplateDefaultFilterControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterControlOptions)(nil)).Elem()
}

func (o TemplateDefaultFilterControlOptionsPtrOutput) ToTemplateDefaultFilterControlOptionsPtrOutput() TemplateDefaultFilterControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultFilterControlOptionsPtrOutput) ToTemplateDefaultFilterControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultFilterControlOptionsPtrOutput) Elem() TemplateDefaultFilterControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) TemplateDefaultFilterControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultFilterControlOptions
		return ret
	}).(TemplateDefaultFilterControlOptionsOutput)
}

// The default options that correspond to the filter control type of a `DateTimePicker` .
func (o TemplateDefaultFilterControlOptionsPtrOutput) DefaultDateTimePickerOptions() TemplateDefaultDateTimePickerControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) *TemplateDefaultDateTimePickerControlOptions {
		if v == nil {
			return nil
		}
		return v.DefaultDateTimePickerOptions
	}).(TemplateDefaultDateTimePickerControlOptionsPtrOutput)
}

// The default options that correspond to the `Dropdown` filter control type.
func (o TemplateDefaultFilterControlOptionsPtrOutput) DefaultDropdownOptions() TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) *TemplateDefaultFilterDropDownControlOptions {
		if v == nil {
			return nil
		}
		return v.DefaultDropdownOptions
	}).(TemplateDefaultFilterDropDownControlOptionsPtrOutput)
}

// The default options that correspond to the `List` filter control type.
func (o TemplateDefaultFilterControlOptionsPtrOutput) DefaultListOptions() TemplateDefaultFilterListControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) *TemplateDefaultFilterListControlOptions {
		if v == nil {
			return nil
		}
		return v.DefaultListOptions
	}).(TemplateDefaultFilterListControlOptionsPtrOutput)
}

// The default options that correspond to the `RelativeDateTime` filter control type.
func (o TemplateDefaultFilterControlOptionsPtrOutput) DefaultRelativeDateTimeOptions() TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) *TemplateDefaultRelativeDateTimeControlOptions {
		if v == nil {
			return nil
		}
		return v.DefaultRelativeDateTimeOptions
	}).(TemplateDefaultRelativeDateTimeControlOptionsPtrOutput)
}

// The default options that correspond to the `Slider` filter control type.
func (o TemplateDefaultFilterControlOptionsPtrOutput) DefaultSliderOptions() TemplateDefaultSliderControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) *TemplateDefaultSliderControlOptions {
		if v == nil {
			return nil
		}
		return v.DefaultSliderOptions
	}).(TemplateDefaultSliderControlOptionsPtrOutput)
}

// The default options that correspond to the `TextArea` filter control type.
func (o TemplateDefaultFilterControlOptionsPtrOutput) DefaultTextAreaOptions() TemplateDefaultTextAreaControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) *TemplateDefaultTextAreaControlOptions {
		if v == nil {
			return nil
		}
		return v.DefaultTextAreaOptions
	}).(TemplateDefaultTextAreaControlOptionsPtrOutput)
}

// The default options that correspond to the `TextField` filter control type.
func (o TemplateDefaultFilterControlOptionsPtrOutput) DefaultTextFieldOptions() TemplateDefaultTextFieldControlOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterControlOptions) *TemplateDefaultTextFieldControlOptions {
		if v == nil {
			return nil
		}
		return v.DefaultTextFieldOptions
	}).(TemplateDefaultTextFieldControlOptionsPtrOutput)
}

type TemplateDefaultFilterDropDownControlOptions struct {
	// The visibility configuration of the Apply button on a `FilterDropDownControl` .
	CommitMode *TemplateCommitMode `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions *TemplateDropDownControlDisplayOptions `pulumi:"displayOptions"`
	// A list of selectable values that are used in a control.
	SelectableValues *TemplateFilterSelectableValues `pulumi:"selectableValues"`
	// The type of the `FilterDropDownControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
	// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
	Type *TemplateSheetControlListType `pulumi:"type"`
}

// TemplateDefaultFilterDropDownControlOptionsInput is an input type that accepts TemplateDefaultFilterDropDownControlOptionsArgs and TemplateDefaultFilterDropDownControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterDropDownControlOptionsInput` via:
//
//	TemplateDefaultFilterDropDownControlOptionsArgs{...}
type TemplateDefaultFilterDropDownControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultFilterDropDownControlOptionsOutput() TemplateDefaultFilterDropDownControlOptionsOutput
	ToTemplateDefaultFilterDropDownControlOptionsOutputWithContext(context.Context) TemplateDefaultFilterDropDownControlOptionsOutput
}

type TemplateDefaultFilterDropDownControlOptionsArgs struct {
	// The visibility configuration of the Apply button on a `FilterDropDownControl` .
	CommitMode TemplateCommitModePtrInput `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions TemplateDropDownControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// A list of selectable values that are used in a control.
	SelectableValues TemplateFilterSelectableValuesPtrInput `pulumi:"selectableValues"`
	// The type of the `FilterDropDownControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
	// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
	Type TemplateSheetControlListTypePtrInput `pulumi:"type"`
}

func (TemplateDefaultFilterDropDownControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterDropDownControlOptions)(nil)).Elem()
}

func (i TemplateDefaultFilterDropDownControlOptionsArgs) ToTemplateDefaultFilterDropDownControlOptionsOutput() TemplateDefaultFilterDropDownControlOptionsOutput {
	return i.ToTemplateDefaultFilterDropDownControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterDropDownControlOptionsArgs) ToTemplateDefaultFilterDropDownControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultFilterDropDownControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterDropDownControlOptionsOutput)
}

func (i TemplateDefaultFilterDropDownControlOptionsArgs) ToTemplateDefaultFilterDropDownControlOptionsPtrOutput() TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return i.ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterDropDownControlOptionsArgs) ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterDropDownControlOptionsOutput).ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultFilterDropDownControlOptionsPtrInput is an input type that accepts TemplateDefaultFilterDropDownControlOptionsArgs, TemplateDefaultFilterDropDownControlOptionsPtr and TemplateDefaultFilterDropDownControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterDropDownControlOptionsPtrInput` via:
//
//	        TemplateDefaultFilterDropDownControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultFilterDropDownControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultFilterDropDownControlOptionsPtrOutput() TemplateDefaultFilterDropDownControlOptionsPtrOutput
	ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultFilterDropDownControlOptionsPtrOutput
}

type templateDefaultFilterDropDownControlOptionsPtrType TemplateDefaultFilterDropDownControlOptionsArgs

func TemplateDefaultFilterDropDownControlOptionsPtr(v *TemplateDefaultFilterDropDownControlOptionsArgs) TemplateDefaultFilterDropDownControlOptionsPtrInput {
	return (*templateDefaultFilterDropDownControlOptionsPtrType)(v)
}

func (*templateDefaultFilterDropDownControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterDropDownControlOptions)(nil)).Elem()
}

func (i *templateDefaultFilterDropDownControlOptionsPtrType) ToTemplateDefaultFilterDropDownControlOptionsPtrOutput() TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return i.ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultFilterDropDownControlOptionsPtrType) ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterDropDownControlOptionsPtrOutput)
}

type TemplateDefaultFilterDropDownControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterDropDownControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterDropDownControlOptions)(nil)).Elem()
}

func (o TemplateDefaultFilterDropDownControlOptionsOutput) ToTemplateDefaultFilterDropDownControlOptionsOutput() TemplateDefaultFilterDropDownControlOptionsOutput {
	return o
}

func (o TemplateDefaultFilterDropDownControlOptionsOutput) ToTemplateDefaultFilterDropDownControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultFilterDropDownControlOptionsOutput {
	return o
}

func (o TemplateDefaultFilterDropDownControlOptionsOutput) ToTemplateDefaultFilterDropDownControlOptionsPtrOutput() TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return o.ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultFilterDropDownControlOptionsOutput) ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultFilterDropDownControlOptions) *TemplateDefaultFilterDropDownControlOptions {
		return &v
	}).(TemplateDefaultFilterDropDownControlOptionsPtrOutput)
}

// The visibility configuration of the Apply button on a `FilterDropDownControl` .
func (o TemplateDefaultFilterDropDownControlOptionsOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterDropDownControlOptions) *TemplateCommitMode { return v.CommitMode }).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateDefaultFilterDropDownControlOptionsOutput) DisplayOptions() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterDropDownControlOptions) *TemplateDropDownControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateDefaultFilterDropDownControlOptionsOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterDropDownControlOptions) *TemplateFilterSelectableValues {
		return v.SelectableValues
	}).(TemplateFilterSelectableValuesPtrOutput)
}

// The type of the `FilterDropDownControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
func (o TemplateDefaultFilterDropDownControlOptionsOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterDropDownControlOptions) *TemplateSheetControlListType { return v.Type }).(TemplateSheetControlListTypePtrOutput)
}

type TemplateDefaultFilterDropDownControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterDropDownControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterDropDownControlOptions)(nil)).Elem()
}

func (o TemplateDefaultFilterDropDownControlOptionsPtrOutput) ToTemplateDefaultFilterDropDownControlOptionsPtrOutput() TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultFilterDropDownControlOptionsPtrOutput) ToTemplateDefaultFilterDropDownControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterDropDownControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultFilterDropDownControlOptionsPtrOutput) Elem() TemplateDefaultFilterDropDownControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterDropDownControlOptions) TemplateDefaultFilterDropDownControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultFilterDropDownControlOptions
		return ret
	}).(TemplateDefaultFilterDropDownControlOptionsOutput)
}

// The visibility configuration of the Apply button on a `FilterDropDownControl` .
func (o TemplateDefaultFilterDropDownControlOptionsPtrOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterDropDownControlOptions) *TemplateCommitMode {
		if v == nil {
			return nil
		}
		return v.CommitMode
	}).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateDefaultFilterDropDownControlOptionsPtrOutput) DisplayOptions() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterDropDownControlOptions) *TemplateDropDownControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateDefaultFilterDropDownControlOptionsPtrOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterDropDownControlOptions) *TemplateFilterSelectableValues {
		if v == nil {
			return nil
		}
		return v.SelectableValues
	}).(TemplateFilterSelectableValuesPtrOutput)
}

// The type of the `FilterDropDownControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
func (o TemplateDefaultFilterDropDownControlOptionsPtrOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterDropDownControlOptions) *TemplateSheetControlListType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlListTypePtrOutput)
}

type TemplateDefaultFilterListControlOptions struct {
	// The display options of a control.
	DisplayOptions *TemplateListControlDisplayOptions `pulumi:"displayOptions"`
	// A list of selectable values that are used in a control.
	SelectableValues *TemplateFilterSelectableValues `pulumi:"selectableValues"`
	// The type of the `DefaultFilterListControlOptions` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from the list.
	// - `SINGLE_SELECT` : The user can select a single entry from the list.
	Type *TemplateSheetControlListType `pulumi:"type"`
}

// TemplateDefaultFilterListControlOptionsInput is an input type that accepts TemplateDefaultFilterListControlOptionsArgs and TemplateDefaultFilterListControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterListControlOptionsInput` via:
//
//	TemplateDefaultFilterListControlOptionsArgs{...}
type TemplateDefaultFilterListControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultFilterListControlOptionsOutput() TemplateDefaultFilterListControlOptionsOutput
	ToTemplateDefaultFilterListControlOptionsOutputWithContext(context.Context) TemplateDefaultFilterListControlOptionsOutput
}

type TemplateDefaultFilterListControlOptionsArgs struct {
	// The display options of a control.
	DisplayOptions TemplateListControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// A list of selectable values that are used in a control.
	SelectableValues TemplateFilterSelectableValuesPtrInput `pulumi:"selectableValues"`
	// The type of the `DefaultFilterListControlOptions` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from the list.
	// - `SINGLE_SELECT` : The user can select a single entry from the list.
	Type TemplateSheetControlListTypePtrInput `pulumi:"type"`
}

func (TemplateDefaultFilterListControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterListControlOptions)(nil)).Elem()
}

func (i TemplateDefaultFilterListControlOptionsArgs) ToTemplateDefaultFilterListControlOptionsOutput() TemplateDefaultFilterListControlOptionsOutput {
	return i.ToTemplateDefaultFilterListControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterListControlOptionsArgs) ToTemplateDefaultFilterListControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultFilterListControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterListControlOptionsOutput)
}

func (i TemplateDefaultFilterListControlOptionsArgs) ToTemplateDefaultFilterListControlOptionsPtrOutput() TemplateDefaultFilterListControlOptionsPtrOutput {
	return i.ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultFilterListControlOptionsArgs) ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterListControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterListControlOptionsOutput).ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultFilterListControlOptionsPtrInput is an input type that accepts TemplateDefaultFilterListControlOptionsArgs, TemplateDefaultFilterListControlOptionsPtr and TemplateDefaultFilterListControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultFilterListControlOptionsPtrInput` via:
//
//	        TemplateDefaultFilterListControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultFilterListControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultFilterListControlOptionsPtrOutput() TemplateDefaultFilterListControlOptionsPtrOutput
	ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultFilterListControlOptionsPtrOutput
}

type templateDefaultFilterListControlOptionsPtrType TemplateDefaultFilterListControlOptionsArgs

func TemplateDefaultFilterListControlOptionsPtr(v *TemplateDefaultFilterListControlOptionsArgs) TemplateDefaultFilterListControlOptionsPtrInput {
	return (*templateDefaultFilterListControlOptionsPtrType)(v)
}

func (*templateDefaultFilterListControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterListControlOptions)(nil)).Elem()
}

func (i *templateDefaultFilterListControlOptionsPtrType) ToTemplateDefaultFilterListControlOptionsPtrOutput() TemplateDefaultFilterListControlOptionsPtrOutput {
	return i.ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultFilterListControlOptionsPtrType) ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterListControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFilterListControlOptionsPtrOutput)
}

type TemplateDefaultFilterListControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterListControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFilterListControlOptions)(nil)).Elem()
}

func (o TemplateDefaultFilterListControlOptionsOutput) ToTemplateDefaultFilterListControlOptionsOutput() TemplateDefaultFilterListControlOptionsOutput {
	return o
}

func (o TemplateDefaultFilterListControlOptionsOutput) ToTemplateDefaultFilterListControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultFilterListControlOptionsOutput {
	return o
}

func (o TemplateDefaultFilterListControlOptionsOutput) ToTemplateDefaultFilterListControlOptionsPtrOutput() TemplateDefaultFilterListControlOptionsPtrOutput {
	return o.ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultFilterListControlOptionsOutput) ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterListControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultFilterListControlOptions) *TemplateDefaultFilterListControlOptions {
		return &v
	}).(TemplateDefaultFilterListControlOptionsPtrOutput)
}

// The display options of a control.
func (o TemplateDefaultFilterListControlOptionsOutput) DisplayOptions() TemplateListControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterListControlOptions) *TemplateListControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateListControlDisplayOptionsPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateDefaultFilterListControlOptionsOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterListControlOptions) *TemplateFilterSelectableValues {
		return v.SelectableValues
	}).(TemplateFilterSelectableValuesPtrOutput)
}

// The type of the `DefaultFilterListControlOptions` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from the list.
// - `SINGLE_SELECT` : The user can select a single entry from the list.
func (o TemplateDefaultFilterListControlOptionsOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v TemplateDefaultFilterListControlOptions) *TemplateSheetControlListType { return v.Type }).(TemplateSheetControlListTypePtrOutput)
}

type TemplateDefaultFilterListControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFilterListControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFilterListControlOptions)(nil)).Elem()
}

func (o TemplateDefaultFilterListControlOptionsPtrOutput) ToTemplateDefaultFilterListControlOptionsPtrOutput() TemplateDefaultFilterListControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultFilterListControlOptionsPtrOutput) ToTemplateDefaultFilterListControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultFilterListControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultFilterListControlOptionsPtrOutput) Elem() TemplateDefaultFilterListControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterListControlOptions) TemplateDefaultFilterListControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultFilterListControlOptions
		return ret
	}).(TemplateDefaultFilterListControlOptionsOutput)
}

// The display options of a control.
func (o TemplateDefaultFilterListControlOptionsPtrOutput) DisplayOptions() TemplateListControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterListControlOptions) *TemplateListControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateListControlDisplayOptionsPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateDefaultFilterListControlOptionsPtrOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterListControlOptions) *TemplateFilterSelectableValues {
		if v == nil {
			return nil
		}
		return v.SelectableValues
	}).(TemplateFilterSelectableValuesPtrOutput)
}

// The type of the `DefaultFilterListControlOptions` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from the list.
// - `SINGLE_SELECT` : The user can select a single entry from the list.
func (o TemplateDefaultFilterListControlOptionsPtrOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFilterListControlOptions) *TemplateSheetControlListType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlListTypePtrOutput)
}

type TemplateDefaultFreeFormLayoutConfiguration struct {
	// Determines the screen canvas size options for a free-form layout.
	CanvasSizeOptions TemplateFreeFormLayoutCanvasSizeOptions `pulumi:"canvasSizeOptions"`
}

// TemplateDefaultFreeFormLayoutConfigurationInput is an input type that accepts TemplateDefaultFreeFormLayoutConfigurationArgs and TemplateDefaultFreeFormLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateDefaultFreeFormLayoutConfigurationInput` via:
//
//	TemplateDefaultFreeFormLayoutConfigurationArgs{...}
type TemplateDefaultFreeFormLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateDefaultFreeFormLayoutConfigurationOutput() TemplateDefaultFreeFormLayoutConfigurationOutput
	ToTemplateDefaultFreeFormLayoutConfigurationOutputWithContext(context.Context) TemplateDefaultFreeFormLayoutConfigurationOutput
}

type TemplateDefaultFreeFormLayoutConfigurationArgs struct {
	// Determines the screen canvas size options for a free-form layout.
	CanvasSizeOptions TemplateFreeFormLayoutCanvasSizeOptionsInput `pulumi:"canvasSizeOptions"`
}

func (TemplateDefaultFreeFormLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFreeFormLayoutConfiguration)(nil)).Elem()
}

func (i TemplateDefaultFreeFormLayoutConfigurationArgs) ToTemplateDefaultFreeFormLayoutConfigurationOutput() TemplateDefaultFreeFormLayoutConfigurationOutput {
	return i.ToTemplateDefaultFreeFormLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateDefaultFreeFormLayoutConfigurationArgs) ToTemplateDefaultFreeFormLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultFreeFormLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFreeFormLayoutConfigurationOutput)
}

func (i TemplateDefaultFreeFormLayoutConfigurationArgs) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutput() TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultFreeFormLayoutConfigurationArgs) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFreeFormLayoutConfigurationOutput).ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateDefaultFreeFormLayoutConfigurationPtrInput is an input type that accepts TemplateDefaultFreeFormLayoutConfigurationArgs, TemplateDefaultFreeFormLayoutConfigurationPtr and TemplateDefaultFreeFormLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultFreeFormLayoutConfigurationPtrInput` via:
//
//	        TemplateDefaultFreeFormLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultFreeFormLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDefaultFreeFormLayoutConfigurationPtrOutput() TemplateDefaultFreeFormLayoutConfigurationPtrOutput
	ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(context.Context) TemplateDefaultFreeFormLayoutConfigurationPtrOutput
}

type templateDefaultFreeFormLayoutConfigurationPtrType TemplateDefaultFreeFormLayoutConfigurationArgs

func TemplateDefaultFreeFormLayoutConfigurationPtr(v *TemplateDefaultFreeFormLayoutConfigurationArgs) TemplateDefaultFreeFormLayoutConfigurationPtrInput {
	return (*templateDefaultFreeFormLayoutConfigurationPtrType)(v)
}

func (*templateDefaultFreeFormLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFreeFormLayoutConfiguration)(nil)).Elem()
}

func (i *templateDefaultFreeFormLayoutConfigurationPtrType) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutput() TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDefaultFreeFormLayoutConfigurationPtrType) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultFreeFormLayoutConfigurationPtrOutput)
}

type TemplateDefaultFreeFormLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFreeFormLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultFreeFormLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultFreeFormLayoutConfigurationOutput) ToTemplateDefaultFreeFormLayoutConfigurationOutput() TemplateDefaultFreeFormLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultFreeFormLayoutConfigurationOutput) ToTemplateDefaultFreeFormLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultFreeFormLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultFreeFormLayoutConfigurationOutput) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutput() TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return o.ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultFreeFormLayoutConfigurationOutput) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultFreeFormLayoutConfiguration) *TemplateDefaultFreeFormLayoutConfiguration {
		return &v
	}).(TemplateDefaultFreeFormLayoutConfigurationPtrOutput)
}

// Determines the screen canvas size options for a free-form layout.
func (o TemplateDefaultFreeFormLayoutConfigurationOutput) CanvasSizeOptions() TemplateFreeFormLayoutCanvasSizeOptionsOutput {
	return o.ApplyT(func(v TemplateDefaultFreeFormLayoutConfiguration) TemplateFreeFormLayoutCanvasSizeOptions {
		return v.CanvasSizeOptions
	}).(TemplateFreeFormLayoutCanvasSizeOptionsOutput)
}

type TemplateDefaultFreeFormLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultFreeFormLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultFreeFormLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultFreeFormLayoutConfigurationPtrOutput) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutput() TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultFreeFormLayoutConfigurationPtrOutput) ToTemplateDefaultFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultFreeFormLayoutConfigurationPtrOutput) Elem() TemplateDefaultFreeFormLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateDefaultFreeFormLayoutConfiguration) TemplateDefaultFreeFormLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultFreeFormLayoutConfiguration
		return ret
	}).(TemplateDefaultFreeFormLayoutConfigurationOutput)
}

// Determines the screen canvas size options for a free-form layout.
func (o TemplateDefaultFreeFormLayoutConfigurationPtrOutput) CanvasSizeOptions() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultFreeFormLayoutConfiguration) *TemplateFreeFormLayoutCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return &v.CanvasSizeOptions
	}).(TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput)
}

type TemplateDefaultGridLayoutConfiguration struct {
	// Determines the screen canvas size options for a grid layout.
	CanvasSizeOptions TemplateGridLayoutCanvasSizeOptions `pulumi:"canvasSizeOptions"`
}

// TemplateDefaultGridLayoutConfigurationInput is an input type that accepts TemplateDefaultGridLayoutConfigurationArgs and TemplateDefaultGridLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateDefaultGridLayoutConfigurationInput` via:
//
//	TemplateDefaultGridLayoutConfigurationArgs{...}
type TemplateDefaultGridLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateDefaultGridLayoutConfigurationOutput() TemplateDefaultGridLayoutConfigurationOutput
	ToTemplateDefaultGridLayoutConfigurationOutputWithContext(context.Context) TemplateDefaultGridLayoutConfigurationOutput
}

type TemplateDefaultGridLayoutConfigurationArgs struct {
	// Determines the screen canvas size options for a grid layout.
	CanvasSizeOptions TemplateGridLayoutCanvasSizeOptionsInput `pulumi:"canvasSizeOptions"`
}

func (TemplateDefaultGridLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultGridLayoutConfiguration)(nil)).Elem()
}

func (i TemplateDefaultGridLayoutConfigurationArgs) ToTemplateDefaultGridLayoutConfigurationOutput() TemplateDefaultGridLayoutConfigurationOutput {
	return i.ToTemplateDefaultGridLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateDefaultGridLayoutConfigurationArgs) ToTemplateDefaultGridLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultGridLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultGridLayoutConfigurationOutput)
}

func (i TemplateDefaultGridLayoutConfigurationArgs) ToTemplateDefaultGridLayoutConfigurationPtrOutput() TemplateDefaultGridLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultGridLayoutConfigurationArgs) ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultGridLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultGridLayoutConfigurationOutput).ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateDefaultGridLayoutConfigurationPtrInput is an input type that accepts TemplateDefaultGridLayoutConfigurationArgs, TemplateDefaultGridLayoutConfigurationPtr and TemplateDefaultGridLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultGridLayoutConfigurationPtrInput` via:
//
//	        TemplateDefaultGridLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultGridLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDefaultGridLayoutConfigurationPtrOutput() TemplateDefaultGridLayoutConfigurationPtrOutput
	ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(context.Context) TemplateDefaultGridLayoutConfigurationPtrOutput
}

type templateDefaultGridLayoutConfigurationPtrType TemplateDefaultGridLayoutConfigurationArgs

func TemplateDefaultGridLayoutConfigurationPtr(v *TemplateDefaultGridLayoutConfigurationArgs) TemplateDefaultGridLayoutConfigurationPtrInput {
	return (*templateDefaultGridLayoutConfigurationPtrType)(v)
}

func (*templateDefaultGridLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultGridLayoutConfiguration)(nil)).Elem()
}

func (i *templateDefaultGridLayoutConfigurationPtrType) ToTemplateDefaultGridLayoutConfigurationPtrOutput() TemplateDefaultGridLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDefaultGridLayoutConfigurationPtrType) ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultGridLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultGridLayoutConfigurationPtrOutput)
}

type TemplateDefaultGridLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDefaultGridLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultGridLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultGridLayoutConfigurationOutput) ToTemplateDefaultGridLayoutConfigurationOutput() TemplateDefaultGridLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultGridLayoutConfigurationOutput) ToTemplateDefaultGridLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultGridLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultGridLayoutConfigurationOutput) ToTemplateDefaultGridLayoutConfigurationPtrOutput() TemplateDefaultGridLayoutConfigurationPtrOutput {
	return o.ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultGridLayoutConfigurationOutput) ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultGridLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultGridLayoutConfiguration) *TemplateDefaultGridLayoutConfiguration {
		return &v
	}).(TemplateDefaultGridLayoutConfigurationPtrOutput)
}

// Determines the screen canvas size options for a grid layout.
func (o TemplateDefaultGridLayoutConfigurationOutput) CanvasSizeOptions() TemplateGridLayoutCanvasSizeOptionsOutput {
	return o.ApplyT(func(v TemplateDefaultGridLayoutConfiguration) TemplateGridLayoutCanvasSizeOptions {
		return v.CanvasSizeOptions
	}).(TemplateGridLayoutCanvasSizeOptionsOutput)
}

type TemplateDefaultGridLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultGridLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultGridLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultGridLayoutConfigurationPtrOutput) ToTemplateDefaultGridLayoutConfigurationPtrOutput() TemplateDefaultGridLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultGridLayoutConfigurationPtrOutput) ToTemplateDefaultGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultGridLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultGridLayoutConfigurationPtrOutput) Elem() TemplateDefaultGridLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateDefaultGridLayoutConfiguration) TemplateDefaultGridLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultGridLayoutConfiguration
		return ret
	}).(TemplateDefaultGridLayoutConfigurationOutput)
}

// Determines the screen canvas size options for a grid layout.
func (o TemplateDefaultGridLayoutConfigurationPtrOutput) CanvasSizeOptions() TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultGridLayoutConfiguration) *TemplateGridLayoutCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return &v.CanvasSizeOptions
	}).(TemplateGridLayoutCanvasSizeOptionsPtrOutput)
}

type TemplateDefaultInteractiveLayoutConfiguration struct {
	// The options that determine the default settings of a free-form layout configuration.
	FreeForm *TemplateDefaultFreeFormLayoutConfiguration `pulumi:"freeForm"`
	// The options that determine the default settings for a grid layout configuration.
	Grid *TemplateDefaultGridLayoutConfiguration `pulumi:"grid"`
}

// TemplateDefaultInteractiveLayoutConfigurationInput is an input type that accepts TemplateDefaultInteractiveLayoutConfigurationArgs and TemplateDefaultInteractiveLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateDefaultInteractiveLayoutConfigurationInput` via:
//
//	TemplateDefaultInteractiveLayoutConfigurationArgs{...}
type TemplateDefaultInteractiveLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateDefaultInteractiveLayoutConfigurationOutput() TemplateDefaultInteractiveLayoutConfigurationOutput
	ToTemplateDefaultInteractiveLayoutConfigurationOutputWithContext(context.Context) TemplateDefaultInteractiveLayoutConfigurationOutput
}

type TemplateDefaultInteractiveLayoutConfigurationArgs struct {
	// The options that determine the default settings of a free-form layout configuration.
	FreeForm TemplateDefaultFreeFormLayoutConfigurationPtrInput `pulumi:"freeForm"`
	// The options that determine the default settings for a grid layout configuration.
	Grid TemplateDefaultGridLayoutConfigurationPtrInput `pulumi:"grid"`
}

func (TemplateDefaultInteractiveLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultInteractiveLayoutConfiguration)(nil)).Elem()
}

func (i TemplateDefaultInteractiveLayoutConfigurationArgs) ToTemplateDefaultInteractiveLayoutConfigurationOutput() TemplateDefaultInteractiveLayoutConfigurationOutput {
	return i.ToTemplateDefaultInteractiveLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateDefaultInteractiveLayoutConfigurationArgs) ToTemplateDefaultInteractiveLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultInteractiveLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultInteractiveLayoutConfigurationOutput)
}

func (i TemplateDefaultInteractiveLayoutConfigurationArgs) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutput() TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultInteractiveLayoutConfigurationArgs) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultInteractiveLayoutConfigurationOutput).ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateDefaultInteractiveLayoutConfigurationPtrInput is an input type that accepts TemplateDefaultInteractiveLayoutConfigurationArgs, TemplateDefaultInteractiveLayoutConfigurationPtr and TemplateDefaultInteractiveLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultInteractiveLayoutConfigurationPtrInput` via:
//
//	        TemplateDefaultInteractiveLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultInteractiveLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDefaultInteractiveLayoutConfigurationPtrOutput() TemplateDefaultInteractiveLayoutConfigurationPtrOutput
	ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(context.Context) TemplateDefaultInteractiveLayoutConfigurationPtrOutput
}

type templateDefaultInteractiveLayoutConfigurationPtrType TemplateDefaultInteractiveLayoutConfigurationArgs

func TemplateDefaultInteractiveLayoutConfigurationPtr(v *TemplateDefaultInteractiveLayoutConfigurationArgs) TemplateDefaultInteractiveLayoutConfigurationPtrInput {
	return (*templateDefaultInteractiveLayoutConfigurationPtrType)(v)
}

func (*templateDefaultInteractiveLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultInteractiveLayoutConfiguration)(nil)).Elem()
}

func (i *templateDefaultInteractiveLayoutConfigurationPtrType) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutput() TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDefaultInteractiveLayoutConfigurationPtrType) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultInteractiveLayoutConfigurationPtrOutput)
}

type TemplateDefaultInteractiveLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDefaultInteractiveLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultInteractiveLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultInteractiveLayoutConfigurationOutput) ToTemplateDefaultInteractiveLayoutConfigurationOutput() TemplateDefaultInteractiveLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultInteractiveLayoutConfigurationOutput) ToTemplateDefaultInteractiveLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultInteractiveLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultInteractiveLayoutConfigurationOutput) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutput() TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return o.ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultInteractiveLayoutConfigurationOutput) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultInteractiveLayoutConfiguration) *TemplateDefaultInteractiveLayoutConfiguration {
		return &v
	}).(TemplateDefaultInteractiveLayoutConfigurationPtrOutput)
}

// The options that determine the default settings of a free-form layout configuration.
func (o TemplateDefaultInteractiveLayoutConfigurationOutput) FreeForm() TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDefaultInteractiveLayoutConfiguration) *TemplateDefaultFreeFormLayoutConfiguration {
		return v.FreeForm
	}).(TemplateDefaultFreeFormLayoutConfigurationPtrOutput)
}

// The options that determine the default settings for a grid layout configuration.
func (o TemplateDefaultInteractiveLayoutConfigurationOutput) Grid() TemplateDefaultGridLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDefaultInteractiveLayoutConfiguration) *TemplateDefaultGridLayoutConfiguration {
		return v.Grid
	}).(TemplateDefaultGridLayoutConfigurationPtrOutput)
}

type TemplateDefaultInteractiveLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultInteractiveLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultInteractiveLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultInteractiveLayoutConfigurationPtrOutput) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutput() TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultInteractiveLayoutConfigurationPtrOutput) ToTemplateDefaultInteractiveLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultInteractiveLayoutConfigurationPtrOutput) Elem() TemplateDefaultInteractiveLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateDefaultInteractiveLayoutConfiguration) TemplateDefaultInteractiveLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultInteractiveLayoutConfiguration
		return ret
	}).(TemplateDefaultInteractiveLayoutConfigurationOutput)
}

// The options that determine the default settings of a free-form layout configuration.
func (o TemplateDefaultInteractiveLayoutConfigurationPtrOutput) FreeForm() TemplateDefaultFreeFormLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultInteractiveLayoutConfiguration) *TemplateDefaultFreeFormLayoutConfiguration {
		if v == nil {
			return nil
		}
		return v.FreeForm
	}).(TemplateDefaultFreeFormLayoutConfigurationPtrOutput)
}

// The options that determine the default settings for a grid layout configuration.
func (o TemplateDefaultInteractiveLayoutConfigurationPtrOutput) Grid() TemplateDefaultGridLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultInteractiveLayoutConfiguration) *TemplateDefaultGridLayoutConfiguration {
		if v == nil {
			return nil
		}
		return v.Grid
	}).(TemplateDefaultGridLayoutConfigurationPtrOutput)
}

type TemplateDefaultNewSheetConfiguration struct {
	// The options that determine the default settings for interactive layout configuration.
	InteractiveLayoutConfiguration *TemplateDefaultInteractiveLayoutConfiguration `pulumi:"interactiveLayoutConfiguration"`
	// The options that determine the default settings for a paginated layout configuration.
	PaginatedLayoutConfiguration *TemplateDefaultPaginatedLayoutConfiguration `pulumi:"paginatedLayoutConfiguration"`
	// The option that determines the sheet content type.
	SheetContentType *TemplateSheetContentType `pulumi:"sheetContentType"`
}

// TemplateDefaultNewSheetConfigurationInput is an input type that accepts TemplateDefaultNewSheetConfigurationArgs and TemplateDefaultNewSheetConfigurationOutput values.
// You can construct a concrete instance of `TemplateDefaultNewSheetConfigurationInput` via:
//
//	TemplateDefaultNewSheetConfigurationArgs{...}
type TemplateDefaultNewSheetConfigurationInput interface {
	pulumi.Input

	ToTemplateDefaultNewSheetConfigurationOutput() TemplateDefaultNewSheetConfigurationOutput
	ToTemplateDefaultNewSheetConfigurationOutputWithContext(context.Context) TemplateDefaultNewSheetConfigurationOutput
}

type TemplateDefaultNewSheetConfigurationArgs struct {
	// The options that determine the default settings for interactive layout configuration.
	InteractiveLayoutConfiguration TemplateDefaultInteractiveLayoutConfigurationPtrInput `pulumi:"interactiveLayoutConfiguration"`
	// The options that determine the default settings for a paginated layout configuration.
	PaginatedLayoutConfiguration TemplateDefaultPaginatedLayoutConfigurationPtrInput `pulumi:"paginatedLayoutConfiguration"`
	// The option that determines the sheet content type.
	SheetContentType TemplateSheetContentTypePtrInput `pulumi:"sheetContentType"`
}

func (TemplateDefaultNewSheetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultNewSheetConfiguration)(nil)).Elem()
}

func (i TemplateDefaultNewSheetConfigurationArgs) ToTemplateDefaultNewSheetConfigurationOutput() TemplateDefaultNewSheetConfigurationOutput {
	return i.ToTemplateDefaultNewSheetConfigurationOutputWithContext(context.Background())
}

func (i TemplateDefaultNewSheetConfigurationArgs) ToTemplateDefaultNewSheetConfigurationOutputWithContext(ctx context.Context) TemplateDefaultNewSheetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultNewSheetConfigurationOutput)
}

func (i TemplateDefaultNewSheetConfigurationArgs) ToTemplateDefaultNewSheetConfigurationPtrOutput() TemplateDefaultNewSheetConfigurationPtrOutput {
	return i.ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultNewSheetConfigurationArgs) ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultNewSheetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultNewSheetConfigurationOutput).ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(ctx)
}

// TemplateDefaultNewSheetConfigurationPtrInput is an input type that accepts TemplateDefaultNewSheetConfigurationArgs, TemplateDefaultNewSheetConfigurationPtr and TemplateDefaultNewSheetConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultNewSheetConfigurationPtrInput` via:
//
//	        TemplateDefaultNewSheetConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultNewSheetConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDefaultNewSheetConfigurationPtrOutput() TemplateDefaultNewSheetConfigurationPtrOutput
	ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(context.Context) TemplateDefaultNewSheetConfigurationPtrOutput
}

type templateDefaultNewSheetConfigurationPtrType TemplateDefaultNewSheetConfigurationArgs

func TemplateDefaultNewSheetConfigurationPtr(v *TemplateDefaultNewSheetConfigurationArgs) TemplateDefaultNewSheetConfigurationPtrInput {
	return (*templateDefaultNewSheetConfigurationPtrType)(v)
}

func (*templateDefaultNewSheetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultNewSheetConfiguration)(nil)).Elem()
}

func (i *templateDefaultNewSheetConfigurationPtrType) ToTemplateDefaultNewSheetConfigurationPtrOutput() TemplateDefaultNewSheetConfigurationPtrOutput {
	return i.ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDefaultNewSheetConfigurationPtrType) ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultNewSheetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultNewSheetConfigurationPtrOutput)
}

type TemplateDefaultNewSheetConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDefaultNewSheetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultNewSheetConfiguration)(nil)).Elem()
}

func (o TemplateDefaultNewSheetConfigurationOutput) ToTemplateDefaultNewSheetConfigurationOutput() TemplateDefaultNewSheetConfigurationOutput {
	return o
}

func (o TemplateDefaultNewSheetConfigurationOutput) ToTemplateDefaultNewSheetConfigurationOutputWithContext(ctx context.Context) TemplateDefaultNewSheetConfigurationOutput {
	return o
}

func (o TemplateDefaultNewSheetConfigurationOutput) ToTemplateDefaultNewSheetConfigurationPtrOutput() TemplateDefaultNewSheetConfigurationPtrOutput {
	return o.ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultNewSheetConfigurationOutput) ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultNewSheetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultNewSheetConfiguration) *TemplateDefaultNewSheetConfiguration {
		return &v
	}).(TemplateDefaultNewSheetConfigurationPtrOutput)
}

// The options that determine the default settings for interactive layout configuration.
func (o TemplateDefaultNewSheetConfigurationOutput) InteractiveLayoutConfiguration() TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDefaultNewSheetConfiguration) *TemplateDefaultInteractiveLayoutConfiguration {
		return v.InteractiveLayoutConfiguration
	}).(TemplateDefaultInteractiveLayoutConfigurationPtrOutput)
}

// The options that determine the default settings for a paginated layout configuration.
func (o TemplateDefaultNewSheetConfigurationOutput) PaginatedLayoutConfiguration() TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDefaultNewSheetConfiguration) *TemplateDefaultPaginatedLayoutConfiguration {
		return v.PaginatedLayoutConfiguration
	}).(TemplateDefaultPaginatedLayoutConfigurationPtrOutput)
}

// The option that determines the sheet content type.
func (o TemplateDefaultNewSheetConfigurationOutput) SheetContentType() TemplateSheetContentTypePtrOutput {
	return o.ApplyT(func(v TemplateDefaultNewSheetConfiguration) *TemplateSheetContentType { return v.SheetContentType }).(TemplateSheetContentTypePtrOutput)
}

type TemplateDefaultNewSheetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultNewSheetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultNewSheetConfiguration)(nil)).Elem()
}

func (o TemplateDefaultNewSheetConfigurationPtrOutput) ToTemplateDefaultNewSheetConfigurationPtrOutput() TemplateDefaultNewSheetConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultNewSheetConfigurationPtrOutput) ToTemplateDefaultNewSheetConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultNewSheetConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultNewSheetConfigurationPtrOutput) Elem() TemplateDefaultNewSheetConfigurationOutput {
	return o.ApplyT(func(v *TemplateDefaultNewSheetConfiguration) TemplateDefaultNewSheetConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultNewSheetConfiguration
		return ret
	}).(TemplateDefaultNewSheetConfigurationOutput)
}

// The options that determine the default settings for interactive layout configuration.
func (o TemplateDefaultNewSheetConfigurationPtrOutput) InteractiveLayoutConfiguration() TemplateDefaultInteractiveLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultNewSheetConfiguration) *TemplateDefaultInteractiveLayoutConfiguration {
		if v == nil {
			return nil
		}
		return v.InteractiveLayoutConfiguration
	}).(TemplateDefaultInteractiveLayoutConfigurationPtrOutput)
}

// The options that determine the default settings for a paginated layout configuration.
func (o TemplateDefaultNewSheetConfigurationPtrOutput) PaginatedLayoutConfiguration() TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultNewSheetConfiguration) *TemplateDefaultPaginatedLayoutConfiguration {
		if v == nil {
			return nil
		}
		return v.PaginatedLayoutConfiguration
	}).(TemplateDefaultPaginatedLayoutConfigurationPtrOutput)
}

// The option that determines the sheet content type.
func (o TemplateDefaultNewSheetConfigurationPtrOutput) SheetContentType() TemplateSheetContentTypePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultNewSheetConfiguration) *TemplateSheetContentType {
		if v == nil {
			return nil
		}
		return v.SheetContentType
	}).(TemplateSheetContentTypePtrOutput)
}

type TemplateDefaultPaginatedLayoutConfiguration struct {
	// The options that determine the default settings for a section-based layout configuration.
	SectionBased *TemplateDefaultSectionBasedLayoutConfiguration `pulumi:"sectionBased"`
}

// TemplateDefaultPaginatedLayoutConfigurationInput is an input type that accepts TemplateDefaultPaginatedLayoutConfigurationArgs and TemplateDefaultPaginatedLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateDefaultPaginatedLayoutConfigurationInput` via:
//
//	TemplateDefaultPaginatedLayoutConfigurationArgs{...}
type TemplateDefaultPaginatedLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateDefaultPaginatedLayoutConfigurationOutput() TemplateDefaultPaginatedLayoutConfigurationOutput
	ToTemplateDefaultPaginatedLayoutConfigurationOutputWithContext(context.Context) TemplateDefaultPaginatedLayoutConfigurationOutput
}

type TemplateDefaultPaginatedLayoutConfigurationArgs struct {
	// The options that determine the default settings for a section-based layout configuration.
	SectionBased TemplateDefaultSectionBasedLayoutConfigurationPtrInput `pulumi:"sectionBased"`
}

func (TemplateDefaultPaginatedLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultPaginatedLayoutConfiguration)(nil)).Elem()
}

func (i TemplateDefaultPaginatedLayoutConfigurationArgs) ToTemplateDefaultPaginatedLayoutConfigurationOutput() TemplateDefaultPaginatedLayoutConfigurationOutput {
	return i.ToTemplateDefaultPaginatedLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateDefaultPaginatedLayoutConfigurationArgs) ToTemplateDefaultPaginatedLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultPaginatedLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultPaginatedLayoutConfigurationOutput)
}

func (i TemplateDefaultPaginatedLayoutConfigurationArgs) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutput() TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultPaginatedLayoutConfigurationArgs) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultPaginatedLayoutConfigurationOutput).ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateDefaultPaginatedLayoutConfigurationPtrInput is an input type that accepts TemplateDefaultPaginatedLayoutConfigurationArgs, TemplateDefaultPaginatedLayoutConfigurationPtr and TemplateDefaultPaginatedLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultPaginatedLayoutConfigurationPtrInput` via:
//
//	        TemplateDefaultPaginatedLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultPaginatedLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDefaultPaginatedLayoutConfigurationPtrOutput() TemplateDefaultPaginatedLayoutConfigurationPtrOutput
	ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(context.Context) TemplateDefaultPaginatedLayoutConfigurationPtrOutput
}

type templateDefaultPaginatedLayoutConfigurationPtrType TemplateDefaultPaginatedLayoutConfigurationArgs

func TemplateDefaultPaginatedLayoutConfigurationPtr(v *TemplateDefaultPaginatedLayoutConfigurationArgs) TemplateDefaultPaginatedLayoutConfigurationPtrInput {
	return (*templateDefaultPaginatedLayoutConfigurationPtrType)(v)
}

func (*templateDefaultPaginatedLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultPaginatedLayoutConfiguration)(nil)).Elem()
}

func (i *templateDefaultPaginatedLayoutConfigurationPtrType) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutput() TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDefaultPaginatedLayoutConfigurationPtrType) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultPaginatedLayoutConfigurationPtrOutput)
}

type TemplateDefaultPaginatedLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDefaultPaginatedLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultPaginatedLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultPaginatedLayoutConfigurationOutput) ToTemplateDefaultPaginatedLayoutConfigurationOutput() TemplateDefaultPaginatedLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultPaginatedLayoutConfigurationOutput) ToTemplateDefaultPaginatedLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultPaginatedLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultPaginatedLayoutConfigurationOutput) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutput() TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return o.ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultPaginatedLayoutConfigurationOutput) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultPaginatedLayoutConfiguration) *TemplateDefaultPaginatedLayoutConfiguration {
		return &v
	}).(TemplateDefaultPaginatedLayoutConfigurationPtrOutput)
}

// The options that determine the default settings for a section-based layout configuration.
func (o TemplateDefaultPaginatedLayoutConfigurationOutput) SectionBased() TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDefaultPaginatedLayoutConfiguration) *TemplateDefaultSectionBasedLayoutConfiguration {
		return v.SectionBased
	}).(TemplateDefaultSectionBasedLayoutConfigurationPtrOutput)
}

type TemplateDefaultPaginatedLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultPaginatedLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultPaginatedLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultPaginatedLayoutConfigurationPtrOutput) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutput() TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultPaginatedLayoutConfigurationPtrOutput) ToTemplateDefaultPaginatedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultPaginatedLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultPaginatedLayoutConfigurationPtrOutput) Elem() TemplateDefaultPaginatedLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateDefaultPaginatedLayoutConfiguration) TemplateDefaultPaginatedLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultPaginatedLayoutConfiguration
		return ret
	}).(TemplateDefaultPaginatedLayoutConfigurationOutput)
}

// The options that determine the default settings for a section-based layout configuration.
func (o TemplateDefaultPaginatedLayoutConfigurationPtrOutput) SectionBased() TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultPaginatedLayoutConfiguration) *TemplateDefaultSectionBasedLayoutConfiguration {
		if v == nil {
			return nil
		}
		return v.SectionBased
	}).(TemplateDefaultSectionBasedLayoutConfigurationPtrOutput)
}

type TemplateDefaultRelativeDateTimeControlOptions struct {
	// The visibility configuration of the Apply button on a `RelativeDateTimeControl` .
	CommitMode *TemplateCommitMode `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions *TemplateRelativeDateTimeControlDisplayOptions `pulumi:"displayOptions"`
}

// TemplateDefaultRelativeDateTimeControlOptionsInput is an input type that accepts TemplateDefaultRelativeDateTimeControlOptionsArgs and TemplateDefaultRelativeDateTimeControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultRelativeDateTimeControlOptionsInput` via:
//
//	TemplateDefaultRelativeDateTimeControlOptionsArgs{...}
type TemplateDefaultRelativeDateTimeControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultRelativeDateTimeControlOptionsOutput() TemplateDefaultRelativeDateTimeControlOptionsOutput
	ToTemplateDefaultRelativeDateTimeControlOptionsOutputWithContext(context.Context) TemplateDefaultRelativeDateTimeControlOptionsOutput
}

type TemplateDefaultRelativeDateTimeControlOptionsArgs struct {
	// The visibility configuration of the Apply button on a `RelativeDateTimeControl` .
	CommitMode TemplateCommitModePtrInput `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions TemplateRelativeDateTimeControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
}

func (TemplateDefaultRelativeDateTimeControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultRelativeDateTimeControlOptions)(nil)).Elem()
}

func (i TemplateDefaultRelativeDateTimeControlOptionsArgs) ToTemplateDefaultRelativeDateTimeControlOptionsOutput() TemplateDefaultRelativeDateTimeControlOptionsOutput {
	return i.ToTemplateDefaultRelativeDateTimeControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultRelativeDateTimeControlOptionsArgs) ToTemplateDefaultRelativeDateTimeControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultRelativeDateTimeControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultRelativeDateTimeControlOptionsOutput)
}

func (i TemplateDefaultRelativeDateTimeControlOptionsArgs) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutput() TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return i.ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultRelativeDateTimeControlOptionsArgs) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultRelativeDateTimeControlOptionsOutput).ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultRelativeDateTimeControlOptionsPtrInput is an input type that accepts TemplateDefaultRelativeDateTimeControlOptionsArgs, TemplateDefaultRelativeDateTimeControlOptionsPtr and TemplateDefaultRelativeDateTimeControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultRelativeDateTimeControlOptionsPtrInput` via:
//
//	        TemplateDefaultRelativeDateTimeControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultRelativeDateTimeControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutput() TemplateDefaultRelativeDateTimeControlOptionsPtrOutput
	ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultRelativeDateTimeControlOptionsPtrOutput
}

type templateDefaultRelativeDateTimeControlOptionsPtrType TemplateDefaultRelativeDateTimeControlOptionsArgs

func TemplateDefaultRelativeDateTimeControlOptionsPtr(v *TemplateDefaultRelativeDateTimeControlOptionsArgs) TemplateDefaultRelativeDateTimeControlOptionsPtrInput {
	return (*templateDefaultRelativeDateTimeControlOptionsPtrType)(v)
}

func (*templateDefaultRelativeDateTimeControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultRelativeDateTimeControlOptions)(nil)).Elem()
}

func (i *templateDefaultRelativeDateTimeControlOptionsPtrType) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutput() TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return i.ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultRelativeDateTimeControlOptionsPtrType) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultRelativeDateTimeControlOptionsPtrOutput)
}

type TemplateDefaultRelativeDateTimeControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultRelativeDateTimeControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultRelativeDateTimeControlOptions)(nil)).Elem()
}

func (o TemplateDefaultRelativeDateTimeControlOptionsOutput) ToTemplateDefaultRelativeDateTimeControlOptionsOutput() TemplateDefaultRelativeDateTimeControlOptionsOutput {
	return o
}

func (o TemplateDefaultRelativeDateTimeControlOptionsOutput) ToTemplateDefaultRelativeDateTimeControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultRelativeDateTimeControlOptionsOutput {
	return o
}

func (o TemplateDefaultRelativeDateTimeControlOptionsOutput) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutput() TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return o.ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultRelativeDateTimeControlOptionsOutput) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultRelativeDateTimeControlOptions) *TemplateDefaultRelativeDateTimeControlOptions {
		return &v
	}).(TemplateDefaultRelativeDateTimeControlOptionsPtrOutput)
}

// The visibility configuration of the Apply button on a `RelativeDateTimeControl` .
func (o TemplateDefaultRelativeDateTimeControlOptionsOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v TemplateDefaultRelativeDateTimeControlOptions) *TemplateCommitMode { return v.CommitMode }).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateDefaultRelativeDateTimeControlOptionsOutput) DisplayOptions() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultRelativeDateTimeControlOptions) *TemplateRelativeDateTimeControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateRelativeDateTimeControlDisplayOptionsPtrOutput)
}

type TemplateDefaultRelativeDateTimeControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultRelativeDateTimeControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultRelativeDateTimeControlOptions)(nil)).Elem()
}

func (o TemplateDefaultRelativeDateTimeControlOptionsPtrOutput) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutput() TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultRelativeDateTimeControlOptionsPtrOutput) ToTemplateDefaultRelativeDateTimeControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultRelativeDateTimeControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultRelativeDateTimeControlOptionsPtrOutput) Elem() TemplateDefaultRelativeDateTimeControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultRelativeDateTimeControlOptions) TemplateDefaultRelativeDateTimeControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultRelativeDateTimeControlOptions
		return ret
	}).(TemplateDefaultRelativeDateTimeControlOptionsOutput)
}

// The visibility configuration of the Apply button on a `RelativeDateTimeControl` .
func (o TemplateDefaultRelativeDateTimeControlOptionsPtrOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultRelativeDateTimeControlOptions) *TemplateCommitMode {
		if v == nil {
			return nil
		}
		return v.CommitMode
	}).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateDefaultRelativeDateTimeControlOptionsPtrOutput) DisplayOptions() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultRelativeDateTimeControlOptions) *TemplateRelativeDateTimeControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateRelativeDateTimeControlDisplayOptionsPtrOutput)
}

type TemplateDefaultSectionBasedLayoutConfiguration struct {
	// Determines the screen canvas size options for a section-based layout.
	CanvasSizeOptions TemplateSectionBasedLayoutCanvasSizeOptions `pulumi:"canvasSizeOptions"`
}

// TemplateDefaultSectionBasedLayoutConfigurationInput is an input type that accepts TemplateDefaultSectionBasedLayoutConfigurationArgs and TemplateDefaultSectionBasedLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateDefaultSectionBasedLayoutConfigurationInput` via:
//
//	TemplateDefaultSectionBasedLayoutConfigurationArgs{...}
type TemplateDefaultSectionBasedLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateDefaultSectionBasedLayoutConfigurationOutput() TemplateDefaultSectionBasedLayoutConfigurationOutput
	ToTemplateDefaultSectionBasedLayoutConfigurationOutputWithContext(context.Context) TemplateDefaultSectionBasedLayoutConfigurationOutput
}

type TemplateDefaultSectionBasedLayoutConfigurationArgs struct {
	// Determines the screen canvas size options for a section-based layout.
	CanvasSizeOptions TemplateSectionBasedLayoutCanvasSizeOptionsInput `pulumi:"canvasSizeOptions"`
}

func (TemplateDefaultSectionBasedLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (i TemplateDefaultSectionBasedLayoutConfigurationArgs) ToTemplateDefaultSectionBasedLayoutConfigurationOutput() TemplateDefaultSectionBasedLayoutConfigurationOutput {
	return i.ToTemplateDefaultSectionBasedLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateDefaultSectionBasedLayoutConfigurationArgs) ToTemplateDefaultSectionBasedLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultSectionBasedLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultSectionBasedLayoutConfigurationOutput)
}

func (i TemplateDefaultSectionBasedLayoutConfigurationArgs) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutput() TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultSectionBasedLayoutConfigurationArgs) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultSectionBasedLayoutConfigurationOutput).ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateDefaultSectionBasedLayoutConfigurationPtrInput is an input type that accepts TemplateDefaultSectionBasedLayoutConfigurationArgs, TemplateDefaultSectionBasedLayoutConfigurationPtr and TemplateDefaultSectionBasedLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultSectionBasedLayoutConfigurationPtrInput` via:
//
//	        TemplateDefaultSectionBasedLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultSectionBasedLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutput() TemplateDefaultSectionBasedLayoutConfigurationPtrOutput
	ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(context.Context) TemplateDefaultSectionBasedLayoutConfigurationPtrOutput
}

type templateDefaultSectionBasedLayoutConfigurationPtrType TemplateDefaultSectionBasedLayoutConfigurationArgs

func TemplateDefaultSectionBasedLayoutConfigurationPtr(v *TemplateDefaultSectionBasedLayoutConfigurationArgs) TemplateDefaultSectionBasedLayoutConfigurationPtrInput {
	return (*templateDefaultSectionBasedLayoutConfigurationPtrType)(v)
}

func (*templateDefaultSectionBasedLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (i *templateDefaultSectionBasedLayoutConfigurationPtrType) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutput() TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return i.ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateDefaultSectionBasedLayoutConfigurationPtrType) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultSectionBasedLayoutConfigurationPtrOutput)
}

type TemplateDefaultSectionBasedLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDefaultSectionBasedLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultSectionBasedLayoutConfigurationOutput) ToTemplateDefaultSectionBasedLayoutConfigurationOutput() TemplateDefaultSectionBasedLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultSectionBasedLayoutConfigurationOutput) ToTemplateDefaultSectionBasedLayoutConfigurationOutputWithContext(ctx context.Context) TemplateDefaultSectionBasedLayoutConfigurationOutput {
	return o
}

func (o TemplateDefaultSectionBasedLayoutConfigurationOutput) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutput() TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return o.ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultSectionBasedLayoutConfigurationOutput) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultSectionBasedLayoutConfiguration) *TemplateDefaultSectionBasedLayoutConfiguration {
		return &v
	}).(TemplateDefaultSectionBasedLayoutConfigurationPtrOutput)
}

// Determines the screen canvas size options for a section-based layout.
func (o TemplateDefaultSectionBasedLayoutConfigurationOutput) CanvasSizeOptions() TemplateSectionBasedLayoutCanvasSizeOptionsOutput {
	return o.ApplyT(func(v TemplateDefaultSectionBasedLayoutConfiguration) TemplateSectionBasedLayoutCanvasSizeOptions {
		return v.CanvasSizeOptions
	}).(TemplateSectionBasedLayoutCanvasSizeOptionsOutput)
}

type TemplateDefaultSectionBasedLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultSectionBasedLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (o TemplateDefaultSectionBasedLayoutConfigurationPtrOutput) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutput() TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultSectionBasedLayoutConfigurationPtrOutput) ToTemplateDefaultSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateDefaultSectionBasedLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateDefaultSectionBasedLayoutConfigurationPtrOutput) Elem() TemplateDefaultSectionBasedLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateDefaultSectionBasedLayoutConfiguration) TemplateDefaultSectionBasedLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultSectionBasedLayoutConfiguration
		return ret
	}).(TemplateDefaultSectionBasedLayoutConfigurationOutput)
}

// Determines the screen canvas size options for a section-based layout.
func (o TemplateDefaultSectionBasedLayoutConfigurationPtrOutput) CanvasSizeOptions() TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultSectionBasedLayoutConfiguration) *TemplateSectionBasedLayoutCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return &v.CanvasSizeOptions
	}).(TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput)
}

type TemplateDefaultSliderControlOptions struct {
	// The display options of a control.
	DisplayOptions *TemplateSliderControlDisplayOptions `pulumi:"displayOptions"`
	// The larger value that is displayed at the right of the slider.
	MaximumValue float64 `pulumi:"maximumValue"`
	// The smaller value that is displayed at the left of the slider.
	MinimumValue float64 `pulumi:"minimumValue"`
	// The number of increments that the slider bar is divided into.
	StepSize float64 `pulumi:"stepSize"`
	// The type of the `DefaultSliderControlOptions` . Choose one of the following options:
	//
	// - `SINGLE_POINT` : Filter against(equals) a single data point.
	// - `RANGE` : Filter data that is in a specified range.
	Type *TemplateSheetControlSliderType `pulumi:"type"`
}

// TemplateDefaultSliderControlOptionsInput is an input type that accepts TemplateDefaultSliderControlOptionsArgs and TemplateDefaultSliderControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultSliderControlOptionsInput` via:
//
//	TemplateDefaultSliderControlOptionsArgs{...}
type TemplateDefaultSliderControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultSliderControlOptionsOutput() TemplateDefaultSliderControlOptionsOutput
	ToTemplateDefaultSliderControlOptionsOutputWithContext(context.Context) TemplateDefaultSliderControlOptionsOutput
}

type TemplateDefaultSliderControlOptionsArgs struct {
	// The display options of a control.
	DisplayOptions TemplateSliderControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The larger value that is displayed at the right of the slider.
	MaximumValue pulumi.Float64Input `pulumi:"maximumValue"`
	// The smaller value that is displayed at the left of the slider.
	MinimumValue pulumi.Float64Input `pulumi:"minimumValue"`
	// The number of increments that the slider bar is divided into.
	StepSize pulumi.Float64Input `pulumi:"stepSize"`
	// The type of the `DefaultSliderControlOptions` . Choose one of the following options:
	//
	// - `SINGLE_POINT` : Filter against(equals) a single data point.
	// - `RANGE` : Filter data that is in a specified range.
	Type TemplateSheetControlSliderTypePtrInput `pulumi:"type"`
}

func (TemplateDefaultSliderControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultSliderControlOptions)(nil)).Elem()
}

func (i TemplateDefaultSliderControlOptionsArgs) ToTemplateDefaultSliderControlOptionsOutput() TemplateDefaultSliderControlOptionsOutput {
	return i.ToTemplateDefaultSliderControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultSliderControlOptionsArgs) ToTemplateDefaultSliderControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultSliderControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultSliderControlOptionsOutput)
}

func (i TemplateDefaultSliderControlOptionsArgs) ToTemplateDefaultSliderControlOptionsPtrOutput() TemplateDefaultSliderControlOptionsPtrOutput {
	return i.ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultSliderControlOptionsArgs) ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultSliderControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultSliderControlOptionsOutput).ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultSliderControlOptionsPtrInput is an input type that accepts TemplateDefaultSliderControlOptionsArgs, TemplateDefaultSliderControlOptionsPtr and TemplateDefaultSliderControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultSliderControlOptionsPtrInput` via:
//
//	        TemplateDefaultSliderControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultSliderControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultSliderControlOptionsPtrOutput() TemplateDefaultSliderControlOptionsPtrOutput
	ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultSliderControlOptionsPtrOutput
}

type templateDefaultSliderControlOptionsPtrType TemplateDefaultSliderControlOptionsArgs

func TemplateDefaultSliderControlOptionsPtr(v *TemplateDefaultSliderControlOptionsArgs) TemplateDefaultSliderControlOptionsPtrInput {
	return (*templateDefaultSliderControlOptionsPtrType)(v)
}

func (*templateDefaultSliderControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultSliderControlOptions)(nil)).Elem()
}

func (i *templateDefaultSliderControlOptionsPtrType) ToTemplateDefaultSliderControlOptionsPtrOutput() TemplateDefaultSliderControlOptionsPtrOutput {
	return i.ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultSliderControlOptionsPtrType) ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultSliderControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultSliderControlOptionsPtrOutput)
}

type TemplateDefaultSliderControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultSliderControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultSliderControlOptions)(nil)).Elem()
}

func (o TemplateDefaultSliderControlOptionsOutput) ToTemplateDefaultSliderControlOptionsOutput() TemplateDefaultSliderControlOptionsOutput {
	return o
}

func (o TemplateDefaultSliderControlOptionsOutput) ToTemplateDefaultSliderControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultSliderControlOptionsOutput {
	return o
}

func (o TemplateDefaultSliderControlOptionsOutput) ToTemplateDefaultSliderControlOptionsPtrOutput() TemplateDefaultSliderControlOptionsPtrOutput {
	return o.ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultSliderControlOptionsOutput) ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultSliderControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultSliderControlOptions) *TemplateDefaultSliderControlOptions {
		return &v
	}).(TemplateDefaultSliderControlOptionsPtrOutput)
}

// The display options of a control.
func (o TemplateDefaultSliderControlOptionsOutput) DisplayOptions() TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultSliderControlOptions) *TemplateSliderControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateSliderControlDisplayOptionsPtrOutput)
}

// The larger value that is displayed at the right of the slider.
func (o TemplateDefaultSliderControlOptionsOutput) MaximumValue() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateDefaultSliderControlOptions) float64 { return v.MaximumValue }).(pulumi.Float64Output)
}

// The smaller value that is displayed at the left of the slider.
func (o TemplateDefaultSliderControlOptionsOutput) MinimumValue() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateDefaultSliderControlOptions) float64 { return v.MinimumValue }).(pulumi.Float64Output)
}

// The number of increments that the slider bar is divided into.
func (o TemplateDefaultSliderControlOptionsOutput) StepSize() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateDefaultSliderControlOptions) float64 { return v.StepSize }).(pulumi.Float64Output)
}

// The type of the `DefaultSliderControlOptions` . Choose one of the following options:
//
// - `SINGLE_POINT` : Filter against(equals) a single data point.
// - `RANGE` : Filter data that is in a specified range.
func (o TemplateDefaultSliderControlOptionsOutput) Type() TemplateSheetControlSliderTypePtrOutput {
	return o.ApplyT(func(v TemplateDefaultSliderControlOptions) *TemplateSheetControlSliderType { return v.Type }).(TemplateSheetControlSliderTypePtrOutput)
}

type TemplateDefaultSliderControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultSliderControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultSliderControlOptions)(nil)).Elem()
}

func (o TemplateDefaultSliderControlOptionsPtrOutput) ToTemplateDefaultSliderControlOptionsPtrOutput() TemplateDefaultSliderControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultSliderControlOptionsPtrOutput) ToTemplateDefaultSliderControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultSliderControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultSliderControlOptionsPtrOutput) Elem() TemplateDefaultSliderControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultSliderControlOptions) TemplateDefaultSliderControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultSliderControlOptions
		return ret
	}).(TemplateDefaultSliderControlOptionsOutput)
}

// The display options of a control.
func (o TemplateDefaultSliderControlOptionsPtrOutput) DisplayOptions() TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultSliderControlOptions) *TemplateSliderControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateSliderControlDisplayOptionsPtrOutput)
}

// The larger value that is displayed at the right of the slider.
func (o TemplateDefaultSliderControlOptionsPtrOutput) MaximumValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateDefaultSliderControlOptions) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaximumValue
	}).(pulumi.Float64PtrOutput)
}

// The smaller value that is displayed at the left of the slider.
func (o TemplateDefaultSliderControlOptionsPtrOutput) MinimumValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateDefaultSliderControlOptions) *float64 {
		if v == nil {
			return nil
		}
		return &v.MinimumValue
	}).(pulumi.Float64PtrOutput)
}

// The number of increments that the slider bar is divided into.
func (o TemplateDefaultSliderControlOptionsPtrOutput) StepSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateDefaultSliderControlOptions) *float64 {
		if v == nil {
			return nil
		}
		return &v.StepSize
	}).(pulumi.Float64PtrOutput)
}

// The type of the `DefaultSliderControlOptions` . Choose one of the following options:
//
// - `SINGLE_POINT` : Filter against(equals) a single data point.
// - `RANGE` : Filter data that is in a specified range.
func (o TemplateDefaultSliderControlOptionsPtrOutput) Type() TemplateSheetControlSliderTypePtrOutput {
	return o.ApplyT(func(v *TemplateDefaultSliderControlOptions) *TemplateSheetControlSliderType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlSliderTypePtrOutput)
}

type TemplateDefaultTextAreaControlOptions struct {
	// The delimiter that is used to separate the lines in text.
	Delimiter *string `pulumi:"delimiter"`
	// The display options of a control.
	DisplayOptions *TemplateTextAreaControlDisplayOptions `pulumi:"displayOptions"`
}

// TemplateDefaultTextAreaControlOptionsInput is an input type that accepts TemplateDefaultTextAreaControlOptionsArgs and TemplateDefaultTextAreaControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultTextAreaControlOptionsInput` via:
//
//	TemplateDefaultTextAreaControlOptionsArgs{...}
type TemplateDefaultTextAreaControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultTextAreaControlOptionsOutput() TemplateDefaultTextAreaControlOptionsOutput
	ToTemplateDefaultTextAreaControlOptionsOutputWithContext(context.Context) TemplateDefaultTextAreaControlOptionsOutput
}

type TemplateDefaultTextAreaControlOptionsArgs struct {
	// The delimiter that is used to separate the lines in text.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// The display options of a control.
	DisplayOptions TemplateTextAreaControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
}

func (TemplateDefaultTextAreaControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultTextAreaControlOptions)(nil)).Elem()
}

func (i TemplateDefaultTextAreaControlOptionsArgs) ToTemplateDefaultTextAreaControlOptionsOutput() TemplateDefaultTextAreaControlOptionsOutput {
	return i.ToTemplateDefaultTextAreaControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultTextAreaControlOptionsArgs) ToTemplateDefaultTextAreaControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultTextAreaControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultTextAreaControlOptionsOutput)
}

func (i TemplateDefaultTextAreaControlOptionsArgs) ToTemplateDefaultTextAreaControlOptionsPtrOutput() TemplateDefaultTextAreaControlOptionsPtrOutput {
	return i.ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultTextAreaControlOptionsArgs) ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextAreaControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultTextAreaControlOptionsOutput).ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultTextAreaControlOptionsPtrInput is an input type that accepts TemplateDefaultTextAreaControlOptionsArgs, TemplateDefaultTextAreaControlOptionsPtr and TemplateDefaultTextAreaControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultTextAreaControlOptionsPtrInput` via:
//
//	        TemplateDefaultTextAreaControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultTextAreaControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultTextAreaControlOptionsPtrOutput() TemplateDefaultTextAreaControlOptionsPtrOutput
	ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultTextAreaControlOptionsPtrOutput
}

type templateDefaultTextAreaControlOptionsPtrType TemplateDefaultTextAreaControlOptionsArgs

func TemplateDefaultTextAreaControlOptionsPtr(v *TemplateDefaultTextAreaControlOptionsArgs) TemplateDefaultTextAreaControlOptionsPtrInput {
	return (*templateDefaultTextAreaControlOptionsPtrType)(v)
}

func (*templateDefaultTextAreaControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultTextAreaControlOptions)(nil)).Elem()
}

func (i *templateDefaultTextAreaControlOptionsPtrType) ToTemplateDefaultTextAreaControlOptionsPtrOutput() TemplateDefaultTextAreaControlOptionsPtrOutput {
	return i.ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultTextAreaControlOptionsPtrType) ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextAreaControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultTextAreaControlOptionsPtrOutput)
}

type TemplateDefaultTextAreaControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultTextAreaControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultTextAreaControlOptions)(nil)).Elem()
}

func (o TemplateDefaultTextAreaControlOptionsOutput) ToTemplateDefaultTextAreaControlOptionsOutput() TemplateDefaultTextAreaControlOptionsOutput {
	return o
}

func (o TemplateDefaultTextAreaControlOptionsOutput) ToTemplateDefaultTextAreaControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultTextAreaControlOptionsOutput {
	return o
}

func (o TemplateDefaultTextAreaControlOptionsOutput) ToTemplateDefaultTextAreaControlOptionsPtrOutput() TemplateDefaultTextAreaControlOptionsPtrOutput {
	return o.ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultTextAreaControlOptionsOutput) ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextAreaControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultTextAreaControlOptions) *TemplateDefaultTextAreaControlOptions {
		return &v
	}).(TemplateDefaultTextAreaControlOptionsPtrOutput)
}

// The delimiter that is used to separate the lines in text.
func (o TemplateDefaultTextAreaControlOptionsOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDefaultTextAreaControlOptions) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// The display options of a control.
func (o TemplateDefaultTextAreaControlOptionsOutput) DisplayOptions() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultTextAreaControlOptions) *TemplateTextAreaControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

type TemplateDefaultTextAreaControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultTextAreaControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultTextAreaControlOptions)(nil)).Elem()
}

func (o TemplateDefaultTextAreaControlOptionsPtrOutput) ToTemplateDefaultTextAreaControlOptionsPtrOutput() TemplateDefaultTextAreaControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultTextAreaControlOptionsPtrOutput) ToTemplateDefaultTextAreaControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextAreaControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultTextAreaControlOptionsPtrOutput) Elem() TemplateDefaultTextAreaControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultTextAreaControlOptions) TemplateDefaultTextAreaControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultTextAreaControlOptions
		return ret
	}).(TemplateDefaultTextAreaControlOptionsOutput)
}

// The delimiter that is used to separate the lines in text.
func (o TemplateDefaultTextAreaControlOptionsPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultTextAreaControlOptions) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// The display options of a control.
func (o TemplateDefaultTextAreaControlOptionsPtrOutput) DisplayOptions() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultTextAreaControlOptions) *TemplateTextAreaControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

type TemplateDefaultTextFieldControlOptions struct {
	// The display options of a control.
	DisplayOptions *TemplateTextFieldControlDisplayOptions `pulumi:"displayOptions"`
}

// TemplateDefaultTextFieldControlOptionsInput is an input type that accepts TemplateDefaultTextFieldControlOptionsArgs and TemplateDefaultTextFieldControlOptionsOutput values.
// You can construct a concrete instance of `TemplateDefaultTextFieldControlOptionsInput` via:
//
//	TemplateDefaultTextFieldControlOptionsArgs{...}
type TemplateDefaultTextFieldControlOptionsInput interface {
	pulumi.Input

	ToTemplateDefaultTextFieldControlOptionsOutput() TemplateDefaultTextFieldControlOptionsOutput
	ToTemplateDefaultTextFieldControlOptionsOutputWithContext(context.Context) TemplateDefaultTextFieldControlOptionsOutput
}

type TemplateDefaultTextFieldControlOptionsArgs struct {
	// The display options of a control.
	DisplayOptions TemplateTextFieldControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
}

func (TemplateDefaultTextFieldControlOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultTextFieldControlOptions)(nil)).Elem()
}

func (i TemplateDefaultTextFieldControlOptionsArgs) ToTemplateDefaultTextFieldControlOptionsOutput() TemplateDefaultTextFieldControlOptionsOutput {
	return i.ToTemplateDefaultTextFieldControlOptionsOutputWithContext(context.Background())
}

func (i TemplateDefaultTextFieldControlOptionsArgs) ToTemplateDefaultTextFieldControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultTextFieldControlOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultTextFieldControlOptionsOutput)
}

func (i TemplateDefaultTextFieldControlOptionsArgs) ToTemplateDefaultTextFieldControlOptionsPtrOutput() TemplateDefaultTextFieldControlOptionsPtrOutput {
	return i.ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDefaultTextFieldControlOptionsArgs) ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextFieldControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultTextFieldControlOptionsOutput).ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(ctx)
}

// TemplateDefaultTextFieldControlOptionsPtrInput is an input type that accepts TemplateDefaultTextFieldControlOptionsArgs, TemplateDefaultTextFieldControlOptionsPtr and TemplateDefaultTextFieldControlOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDefaultTextFieldControlOptionsPtrInput` via:
//
//	        TemplateDefaultTextFieldControlOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDefaultTextFieldControlOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDefaultTextFieldControlOptionsPtrOutput() TemplateDefaultTextFieldControlOptionsPtrOutput
	ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(context.Context) TemplateDefaultTextFieldControlOptionsPtrOutput
}

type templateDefaultTextFieldControlOptionsPtrType TemplateDefaultTextFieldControlOptionsArgs

func TemplateDefaultTextFieldControlOptionsPtr(v *TemplateDefaultTextFieldControlOptionsArgs) TemplateDefaultTextFieldControlOptionsPtrInput {
	return (*templateDefaultTextFieldControlOptionsPtrType)(v)
}

func (*templateDefaultTextFieldControlOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultTextFieldControlOptions)(nil)).Elem()
}

func (i *templateDefaultTextFieldControlOptionsPtrType) ToTemplateDefaultTextFieldControlOptionsPtrOutput() TemplateDefaultTextFieldControlOptionsPtrOutput {
	return i.ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDefaultTextFieldControlOptionsPtrType) ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextFieldControlOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDefaultTextFieldControlOptionsPtrOutput)
}

type TemplateDefaultTextFieldControlOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDefaultTextFieldControlOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDefaultTextFieldControlOptions)(nil)).Elem()
}

func (o TemplateDefaultTextFieldControlOptionsOutput) ToTemplateDefaultTextFieldControlOptionsOutput() TemplateDefaultTextFieldControlOptionsOutput {
	return o
}

func (o TemplateDefaultTextFieldControlOptionsOutput) ToTemplateDefaultTextFieldControlOptionsOutputWithContext(ctx context.Context) TemplateDefaultTextFieldControlOptionsOutput {
	return o
}

func (o TemplateDefaultTextFieldControlOptionsOutput) ToTemplateDefaultTextFieldControlOptionsPtrOutput() TemplateDefaultTextFieldControlOptionsPtrOutput {
	return o.ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDefaultTextFieldControlOptionsOutput) ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextFieldControlOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDefaultTextFieldControlOptions) *TemplateDefaultTextFieldControlOptions {
		return &v
	}).(TemplateDefaultTextFieldControlOptionsPtrOutput)
}

// The display options of a control.
func (o TemplateDefaultTextFieldControlOptionsOutput) DisplayOptions() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDefaultTextFieldControlOptions) *TemplateTextFieldControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

type TemplateDefaultTextFieldControlOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDefaultTextFieldControlOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDefaultTextFieldControlOptions)(nil)).Elem()
}

func (o TemplateDefaultTextFieldControlOptionsPtrOutput) ToTemplateDefaultTextFieldControlOptionsPtrOutput() TemplateDefaultTextFieldControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultTextFieldControlOptionsPtrOutput) ToTemplateDefaultTextFieldControlOptionsPtrOutputWithContext(ctx context.Context) TemplateDefaultTextFieldControlOptionsPtrOutput {
	return o
}

func (o TemplateDefaultTextFieldControlOptionsPtrOutput) Elem() TemplateDefaultTextFieldControlOptionsOutput {
	return o.ApplyT(func(v *TemplateDefaultTextFieldControlOptions) TemplateDefaultTextFieldControlOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDefaultTextFieldControlOptions
		return ret
	}).(TemplateDefaultTextFieldControlOptionsOutput)
}

// The display options of a control.
func (o TemplateDefaultTextFieldControlOptionsPtrOutput) DisplayOptions() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDefaultTextFieldControlOptions) *TemplateTextFieldControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

type TemplateDestinationParameterValueConfiguration struct {
	// The configuration of custom values for destination parameter in `DestinationParameterValueConfiguration` .
	CustomValuesConfiguration *TemplateCustomValuesConfiguration `pulumi:"customValuesConfiguration"`
	// The configuration that selects all options.
	SelectAllValueOptions *TemplateSelectAllValueOptions `pulumi:"selectAllValueOptions"`
	// A column of a data set.
	SourceColumn *TemplateColumnIdentifier `pulumi:"sourceColumn"`
	// The source field ID of the destination parameter.
	SourceField *string `pulumi:"sourceField"`
	// The source parameter name of the destination parameter.
	SourceParameterName *string `pulumi:"sourceParameterName"`
}

// TemplateDestinationParameterValueConfigurationInput is an input type that accepts TemplateDestinationParameterValueConfigurationArgs and TemplateDestinationParameterValueConfigurationOutput values.
// You can construct a concrete instance of `TemplateDestinationParameterValueConfigurationInput` via:
//
//	TemplateDestinationParameterValueConfigurationArgs{...}
type TemplateDestinationParameterValueConfigurationInput interface {
	pulumi.Input

	ToTemplateDestinationParameterValueConfigurationOutput() TemplateDestinationParameterValueConfigurationOutput
	ToTemplateDestinationParameterValueConfigurationOutputWithContext(context.Context) TemplateDestinationParameterValueConfigurationOutput
}

type TemplateDestinationParameterValueConfigurationArgs struct {
	// The configuration of custom values for destination parameter in `DestinationParameterValueConfiguration` .
	CustomValuesConfiguration TemplateCustomValuesConfigurationPtrInput `pulumi:"customValuesConfiguration"`
	// The configuration that selects all options.
	SelectAllValueOptions TemplateSelectAllValueOptionsPtrInput `pulumi:"selectAllValueOptions"`
	// A column of a data set.
	SourceColumn TemplateColumnIdentifierPtrInput `pulumi:"sourceColumn"`
	// The source field ID of the destination parameter.
	SourceField pulumi.StringPtrInput `pulumi:"sourceField"`
	// The source parameter name of the destination parameter.
	SourceParameterName pulumi.StringPtrInput `pulumi:"sourceParameterName"`
}

func (TemplateDestinationParameterValueConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDestinationParameterValueConfiguration)(nil)).Elem()
}

func (i TemplateDestinationParameterValueConfigurationArgs) ToTemplateDestinationParameterValueConfigurationOutput() TemplateDestinationParameterValueConfigurationOutput {
	return i.ToTemplateDestinationParameterValueConfigurationOutputWithContext(context.Background())
}

func (i TemplateDestinationParameterValueConfigurationArgs) ToTemplateDestinationParameterValueConfigurationOutputWithContext(ctx context.Context) TemplateDestinationParameterValueConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDestinationParameterValueConfigurationOutput)
}

type TemplateDestinationParameterValueConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateDestinationParameterValueConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDestinationParameterValueConfiguration)(nil)).Elem()
}

func (o TemplateDestinationParameterValueConfigurationOutput) ToTemplateDestinationParameterValueConfigurationOutput() TemplateDestinationParameterValueConfigurationOutput {
	return o
}

func (o TemplateDestinationParameterValueConfigurationOutput) ToTemplateDestinationParameterValueConfigurationOutputWithContext(ctx context.Context) TemplateDestinationParameterValueConfigurationOutput {
	return o
}

// The configuration of custom values for destination parameter in `DestinationParameterValueConfiguration` .
func (o TemplateDestinationParameterValueConfigurationOutput) CustomValuesConfiguration() TemplateCustomValuesConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateDestinationParameterValueConfiguration) *TemplateCustomValuesConfiguration {
		return v.CustomValuesConfiguration
	}).(TemplateCustomValuesConfigurationPtrOutput)
}

// The configuration that selects all options.
func (o TemplateDestinationParameterValueConfigurationOutput) SelectAllValueOptions() TemplateSelectAllValueOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDestinationParameterValueConfiguration) *TemplateSelectAllValueOptions {
		return v.SelectAllValueOptions
	}).(TemplateSelectAllValueOptionsPtrOutput)
}

// A column of a data set.
func (o TemplateDestinationParameterValueConfigurationOutput) SourceColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v TemplateDestinationParameterValueConfiguration) *TemplateColumnIdentifier {
		return v.SourceColumn
	}).(TemplateColumnIdentifierPtrOutput)
}

// The source field ID of the destination parameter.
func (o TemplateDestinationParameterValueConfigurationOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDestinationParameterValueConfiguration) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

// The source parameter name of the destination parameter.
func (o TemplateDestinationParameterValueConfigurationOutput) SourceParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDestinationParameterValueConfiguration) *string { return v.SourceParameterName }).(pulumi.StringPtrOutput)
}

type TemplateDimensionField struct {
	// The dimension type field with categorical type columns.
	CategoricalDimensionField *TemplateCategoricalDimensionField `pulumi:"categoricalDimensionField"`
	// The dimension type field with date type columns.
	DateDimensionField *TemplateDateDimensionField `pulumi:"dateDimensionField"`
	// The dimension type field with numerical type columns.
	NumericalDimensionField *TemplateNumericalDimensionField `pulumi:"numericalDimensionField"`
}

// TemplateDimensionFieldInput is an input type that accepts TemplateDimensionFieldArgs and TemplateDimensionFieldOutput values.
// You can construct a concrete instance of `TemplateDimensionFieldInput` via:
//
//	TemplateDimensionFieldArgs{...}
type TemplateDimensionFieldInput interface {
	pulumi.Input

	ToTemplateDimensionFieldOutput() TemplateDimensionFieldOutput
	ToTemplateDimensionFieldOutputWithContext(context.Context) TemplateDimensionFieldOutput
}

type TemplateDimensionFieldArgs struct {
	// The dimension type field with categorical type columns.
	CategoricalDimensionField TemplateCategoricalDimensionFieldPtrInput `pulumi:"categoricalDimensionField"`
	// The dimension type field with date type columns.
	DateDimensionField TemplateDateDimensionFieldPtrInput `pulumi:"dateDimensionField"`
	// The dimension type field with numerical type columns.
	NumericalDimensionField TemplateNumericalDimensionFieldPtrInput `pulumi:"numericalDimensionField"`
}

func (TemplateDimensionFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDimensionField)(nil)).Elem()
}

func (i TemplateDimensionFieldArgs) ToTemplateDimensionFieldOutput() TemplateDimensionFieldOutput {
	return i.ToTemplateDimensionFieldOutputWithContext(context.Background())
}

func (i TemplateDimensionFieldArgs) ToTemplateDimensionFieldOutputWithContext(ctx context.Context) TemplateDimensionFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDimensionFieldOutput)
}

func (i TemplateDimensionFieldArgs) ToTemplateDimensionFieldPtrOutput() TemplateDimensionFieldPtrOutput {
	return i.ToTemplateDimensionFieldPtrOutputWithContext(context.Background())
}

func (i TemplateDimensionFieldArgs) ToTemplateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDimensionFieldOutput).ToTemplateDimensionFieldPtrOutputWithContext(ctx)
}

// TemplateDimensionFieldPtrInput is an input type that accepts TemplateDimensionFieldArgs, TemplateDimensionFieldPtr and TemplateDimensionFieldPtrOutput values.
// You can construct a concrete instance of `TemplateDimensionFieldPtrInput` via:
//
//	        TemplateDimensionFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateDimensionFieldPtrInput interface {
	pulumi.Input

	ToTemplateDimensionFieldPtrOutput() TemplateDimensionFieldPtrOutput
	ToTemplateDimensionFieldPtrOutputWithContext(context.Context) TemplateDimensionFieldPtrOutput
}

type templateDimensionFieldPtrType TemplateDimensionFieldArgs

func TemplateDimensionFieldPtr(v *TemplateDimensionFieldArgs) TemplateDimensionFieldPtrInput {
	return (*templateDimensionFieldPtrType)(v)
}

func (*templateDimensionFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDimensionField)(nil)).Elem()
}

func (i *templateDimensionFieldPtrType) ToTemplateDimensionFieldPtrOutput() TemplateDimensionFieldPtrOutput {
	return i.ToTemplateDimensionFieldPtrOutputWithContext(context.Background())
}

func (i *templateDimensionFieldPtrType) ToTemplateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDimensionFieldPtrOutput)
}

// TemplateDimensionFieldArrayInput is an input type that accepts TemplateDimensionFieldArray and TemplateDimensionFieldArrayOutput values.
// You can construct a concrete instance of `TemplateDimensionFieldArrayInput` via:
//
//	TemplateDimensionFieldArray{ TemplateDimensionFieldArgs{...} }
type TemplateDimensionFieldArrayInput interface {
	pulumi.Input

	ToTemplateDimensionFieldArrayOutput() TemplateDimensionFieldArrayOutput
	ToTemplateDimensionFieldArrayOutputWithContext(context.Context) TemplateDimensionFieldArrayOutput
}

type TemplateDimensionFieldArray []TemplateDimensionFieldInput

func (TemplateDimensionFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDimensionField)(nil)).Elem()
}

func (i TemplateDimensionFieldArray) ToTemplateDimensionFieldArrayOutput() TemplateDimensionFieldArrayOutput {
	return i.ToTemplateDimensionFieldArrayOutputWithContext(context.Background())
}

func (i TemplateDimensionFieldArray) ToTemplateDimensionFieldArrayOutputWithContext(ctx context.Context) TemplateDimensionFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDimensionFieldArrayOutput)
}

type TemplateDimensionFieldOutput struct{ *pulumi.OutputState }

func (TemplateDimensionFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDimensionField)(nil)).Elem()
}

func (o TemplateDimensionFieldOutput) ToTemplateDimensionFieldOutput() TemplateDimensionFieldOutput {
	return o
}

func (o TemplateDimensionFieldOutput) ToTemplateDimensionFieldOutputWithContext(ctx context.Context) TemplateDimensionFieldOutput {
	return o
}

func (o TemplateDimensionFieldOutput) ToTemplateDimensionFieldPtrOutput() TemplateDimensionFieldPtrOutput {
	return o.ToTemplateDimensionFieldPtrOutputWithContext(context.Background())
}

func (o TemplateDimensionFieldOutput) ToTemplateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDimensionFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDimensionField) *TemplateDimensionField {
		return &v
	}).(TemplateDimensionFieldPtrOutput)
}

// The dimension type field with categorical type columns.
func (o TemplateDimensionFieldOutput) CategoricalDimensionField() TemplateCategoricalDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateDimensionField) *TemplateCategoricalDimensionField { return v.CategoricalDimensionField }).(TemplateCategoricalDimensionFieldPtrOutput)
}

// The dimension type field with date type columns.
func (o TemplateDimensionFieldOutput) DateDimensionField() TemplateDateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateDimensionField) *TemplateDateDimensionField { return v.DateDimensionField }).(TemplateDateDimensionFieldPtrOutput)
}

// The dimension type field with numerical type columns.
func (o TemplateDimensionFieldOutput) NumericalDimensionField() TemplateNumericalDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateDimensionField) *TemplateNumericalDimensionField { return v.NumericalDimensionField }).(TemplateNumericalDimensionFieldPtrOutput)
}

type TemplateDimensionFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateDimensionFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDimensionField)(nil)).Elem()
}

func (o TemplateDimensionFieldPtrOutput) ToTemplateDimensionFieldPtrOutput() TemplateDimensionFieldPtrOutput {
	return o
}

func (o TemplateDimensionFieldPtrOutput) ToTemplateDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateDimensionFieldPtrOutput {
	return o
}

func (o TemplateDimensionFieldPtrOutput) Elem() TemplateDimensionFieldOutput {
	return o.ApplyT(func(v *TemplateDimensionField) TemplateDimensionField {
		if v != nil {
			return *v
		}
		var ret TemplateDimensionField
		return ret
	}).(TemplateDimensionFieldOutput)
}

// The dimension type field with categorical type columns.
func (o TemplateDimensionFieldPtrOutput) CategoricalDimensionField() TemplateCategoricalDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateDimensionField) *TemplateCategoricalDimensionField {
		if v == nil {
			return nil
		}
		return v.CategoricalDimensionField
	}).(TemplateCategoricalDimensionFieldPtrOutput)
}

// The dimension type field with date type columns.
func (o TemplateDimensionFieldPtrOutput) DateDimensionField() TemplateDateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateDimensionField) *TemplateDateDimensionField {
		if v == nil {
			return nil
		}
		return v.DateDimensionField
	}).(TemplateDateDimensionFieldPtrOutput)
}

// The dimension type field with numerical type columns.
func (o TemplateDimensionFieldPtrOutput) NumericalDimensionField() TemplateNumericalDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateDimensionField) *TemplateNumericalDimensionField {
		if v == nil {
			return nil
		}
		return v.NumericalDimensionField
	}).(TemplateNumericalDimensionFieldPtrOutput)
}

type TemplateDimensionFieldArrayOutput struct{ *pulumi.OutputState }

func (TemplateDimensionFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDimensionField)(nil)).Elem()
}

func (o TemplateDimensionFieldArrayOutput) ToTemplateDimensionFieldArrayOutput() TemplateDimensionFieldArrayOutput {
	return o
}

func (o TemplateDimensionFieldArrayOutput) ToTemplateDimensionFieldArrayOutputWithContext(ctx context.Context) TemplateDimensionFieldArrayOutput {
	return o
}

func (o TemplateDimensionFieldArrayOutput) Index(i pulumi.IntInput) TemplateDimensionFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDimensionField {
		return vs[0].([]TemplateDimensionField)[vs[1].(int)]
	}).(TemplateDimensionFieldOutput)
}

type TemplateDonutCenterOptions struct {
	// Determines the visibility of the label in a donut chart. In the Amazon QuickSight console, this option is called `'Show total'` .
	LabelVisibility interface{} `pulumi:"labelVisibility"`
}

// TemplateDonutCenterOptionsInput is an input type that accepts TemplateDonutCenterOptionsArgs and TemplateDonutCenterOptionsOutput values.
// You can construct a concrete instance of `TemplateDonutCenterOptionsInput` via:
//
//	TemplateDonutCenterOptionsArgs{...}
type TemplateDonutCenterOptionsInput interface {
	pulumi.Input

	ToTemplateDonutCenterOptionsOutput() TemplateDonutCenterOptionsOutput
	ToTemplateDonutCenterOptionsOutputWithContext(context.Context) TemplateDonutCenterOptionsOutput
}

type TemplateDonutCenterOptionsArgs struct {
	// Determines the visibility of the label in a donut chart. In the Amazon QuickSight console, this option is called `'Show total'` .
	LabelVisibility pulumi.Input `pulumi:"labelVisibility"`
}

func (TemplateDonutCenterOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDonutCenterOptions)(nil)).Elem()
}

func (i TemplateDonutCenterOptionsArgs) ToTemplateDonutCenterOptionsOutput() TemplateDonutCenterOptionsOutput {
	return i.ToTemplateDonutCenterOptionsOutputWithContext(context.Background())
}

func (i TemplateDonutCenterOptionsArgs) ToTemplateDonutCenterOptionsOutputWithContext(ctx context.Context) TemplateDonutCenterOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDonutCenterOptionsOutput)
}

func (i TemplateDonutCenterOptionsArgs) ToTemplateDonutCenterOptionsPtrOutput() TemplateDonutCenterOptionsPtrOutput {
	return i.ToTemplateDonutCenterOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDonutCenterOptionsArgs) ToTemplateDonutCenterOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutCenterOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDonutCenterOptionsOutput).ToTemplateDonutCenterOptionsPtrOutputWithContext(ctx)
}

// TemplateDonutCenterOptionsPtrInput is an input type that accepts TemplateDonutCenterOptionsArgs, TemplateDonutCenterOptionsPtr and TemplateDonutCenterOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDonutCenterOptionsPtrInput` via:
//
//	        TemplateDonutCenterOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDonutCenterOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDonutCenterOptionsPtrOutput() TemplateDonutCenterOptionsPtrOutput
	ToTemplateDonutCenterOptionsPtrOutputWithContext(context.Context) TemplateDonutCenterOptionsPtrOutput
}

type templateDonutCenterOptionsPtrType TemplateDonutCenterOptionsArgs

func TemplateDonutCenterOptionsPtr(v *TemplateDonutCenterOptionsArgs) TemplateDonutCenterOptionsPtrInput {
	return (*templateDonutCenterOptionsPtrType)(v)
}

func (*templateDonutCenterOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDonutCenterOptions)(nil)).Elem()
}

func (i *templateDonutCenterOptionsPtrType) ToTemplateDonutCenterOptionsPtrOutput() TemplateDonutCenterOptionsPtrOutput {
	return i.ToTemplateDonutCenterOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDonutCenterOptionsPtrType) ToTemplateDonutCenterOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutCenterOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDonutCenterOptionsPtrOutput)
}

type TemplateDonutCenterOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDonutCenterOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDonutCenterOptions)(nil)).Elem()
}

func (o TemplateDonutCenterOptionsOutput) ToTemplateDonutCenterOptionsOutput() TemplateDonutCenterOptionsOutput {
	return o
}

func (o TemplateDonutCenterOptionsOutput) ToTemplateDonutCenterOptionsOutputWithContext(ctx context.Context) TemplateDonutCenterOptionsOutput {
	return o
}

func (o TemplateDonutCenterOptionsOutput) ToTemplateDonutCenterOptionsPtrOutput() TemplateDonutCenterOptionsPtrOutput {
	return o.ToTemplateDonutCenterOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDonutCenterOptionsOutput) ToTemplateDonutCenterOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutCenterOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDonutCenterOptions) *TemplateDonutCenterOptions {
		return &v
	}).(TemplateDonutCenterOptionsPtrOutput)
}

// Determines the visibility of the label in a donut chart. In the Amazon QuickSight console, this option is called `'Show total'` .
func (o TemplateDonutCenterOptionsOutput) LabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateDonutCenterOptions) interface{} { return v.LabelVisibility }).(pulumi.AnyOutput)
}

type TemplateDonutCenterOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDonutCenterOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDonutCenterOptions)(nil)).Elem()
}

func (o TemplateDonutCenterOptionsPtrOutput) ToTemplateDonutCenterOptionsPtrOutput() TemplateDonutCenterOptionsPtrOutput {
	return o
}

func (o TemplateDonutCenterOptionsPtrOutput) ToTemplateDonutCenterOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutCenterOptionsPtrOutput {
	return o
}

func (o TemplateDonutCenterOptionsPtrOutput) Elem() TemplateDonutCenterOptionsOutput {
	return o.ApplyT(func(v *TemplateDonutCenterOptions) TemplateDonutCenterOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDonutCenterOptions
		return ret
	}).(TemplateDonutCenterOptionsOutput)
}

// Determines the visibility of the label in a donut chart. In the Amazon QuickSight console, this option is called `'Show total'` .
func (o TemplateDonutCenterOptionsPtrOutput) LabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateDonutCenterOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.LabelVisibility
	}).(pulumi.AnyOutput)
}

type TemplateDonutOptions struct {
	// The option for define the arc of the chart shape. Valid values are as follows:
	//
	// - `WHOLE` - A pie chart
	// - `SMALL` - A small-sized donut chart
	// - `MEDIUM` - A medium-sized donut chart
	// - `LARGE` - A large-sized donut chart
	ArcOptions *TemplateArcOptions `pulumi:"arcOptions"`
	// The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts.
	DonutCenterOptions *TemplateDonutCenterOptions `pulumi:"donutCenterOptions"`
}

// TemplateDonutOptionsInput is an input type that accepts TemplateDonutOptionsArgs and TemplateDonutOptionsOutput values.
// You can construct a concrete instance of `TemplateDonutOptionsInput` via:
//
//	TemplateDonutOptionsArgs{...}
type TemplateDonutOptionsInput interface {
	pulumi.Input

	ToTemplateDonutOptionsOutput() TemplateDonutOptionsOutput
	ToTemplateDonutOptionsOutputWithContext(context.Context) TemplateDonutOptionsOutput
}

type TemplateDonutOptionsArgs struct {
	// The option for define the arc of the chart shape. Valid values are as follows:
	//
	// - `WHOLE` - A pie chart
	// - `SMALL` - A small-sized donut chart
	// - `MEDIUM` - A medium-sized donut chart
	// - `LARGE` - A large-sized donut chart
	ArcOptions TemplateArcOptionsPtrInput `pulumi:"arcOptions"`
	// The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts.
	DonutCenterOptions TemplateDonutCenterOptionsPtrInput `pulumi:"donutCenterOptions"`
}

func (TemplateDonutOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDonutOptions)(nil)).Elem()
}

func (i TemplateDonutOptionsArgs) ToTemplateDonutOptionsOutput() TemplateDonutOptionsOutput {
	return i.ToTemplateDonutOptionsOutputWithContext(context.Background())
}

func (i TemplateDonutOptionsArgs) ToTemplateDonutOptionsOutputWithContext(ctx context.Context) TemplateDonutOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDonutOptionsOutput)
}

func (i TemplateDonutOptionsArgs) ToTemplateDonutOptionsPtrOutput() TemplateDonutOptionsPtrOutput {
	return i.ToTemplateDonutOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDonutOptionsArgs) ToTemplateDonutOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDonutOptionsOutput).ToTemplateDonutOptionsPtrOutputWithContext(ctx)
}

// TemplateDonutOptionsPtrInput is an input type that accepts TemplateDonutOptionsArgs, TemplateDonutOptionsPtr and TemplateDonutOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDonutOptionsPtrInput` via:
//
//	        TemplateDonutOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDonutOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDonutOptionsPtrOutput() TemplateDonutOptionsPtrOutput
	ToTemplateDonutOptionsPtrOutputWithContext(context.Context) TemplateDonutOptionsPtrOutput
}

type templateDonutOptionsPtrType TemplateDonutOptionsArgs

func TemplateDonutOptionsPtr(v *TemplateDonutOptionsArgs) TemplateDonutOptionsPtrInput {
	return (*templateDonutOptionsPtrType)(v)
}

func (*templateDonutOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDonutOptions)(nil)).Elem()
}

func (i *templateDonutOptionsPtrType) ToTemplateDonutOptionsPtrOutput() TemplateDonutOptionsPtrOutput {
	return i.ToTemplateDonutOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDonutOptionsPtrType) ToTemplateDonutOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDonutOptionsPtrOutput)
}

type TemplateDonutOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDonutOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDonutOptions)(nil)).Elem()
}

func (o TemplateDonutOptionsOutput) ToTemplateDonutOptionsOutput() TemplateDonutOptionsOutput {
	return o
}

func (o TemplateDonutOptionsOutput) ToTemplateDonutOptionsOutputWithContext(ctx context.Context) TemplateDonutOptionsOutput {
	return o
}

func (o TemplateDonutOptionsOutput) ToTemplateDonutOptionsPtrOutput() TemplateDonutOptionsPtrOutput {
	return o.ToTemplateDonutOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDonutOptionsOutput) ToTemplateDonutOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDonutOptions) *TemplateDonutOptions {
		return &v
	}).(TemplateDonutOptionsPtrOutput)
}

// The option for define the arc of the chart shape. Valid values are as follows:
//
// - `WHOLE` - A pie chart
// - `SMALL` - A small-sized donut chart
// - `MEDIUM` - A medium-sized donut chart
// - `LARGE` - A large-sized donut chart
func (o TemplateDonutOptionsOutput) ArcOptions() TemplateArcOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDonutOptions) *TemplateArcOptions { return v.ArcOptions }).(TemplateArcOptionsPtrOutput)
}

// The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts.
func (o TemplateDonutOptionsOutput) DonutCenterOptions() TemplateDonutCenterOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDonutOptions) *TemplateDonutCenterOptions { return v.DonutCenterOptions }).(TemplateDonutCenterOptionsPtrOutput)
}

type TemplateDonutOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDonutOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDonutOptions)(nil)).Elem()
}

func (o TemplateDonutOptionsPtrOutput) ToTemplateDonutOptionsPtrOutput() TemplateDonutOptionsPtrOutput {
	return o
}

func (o TemplateDonutOptionsPtrOutput) ToTemplateDonutOptionsPtrOutputWithContext(ctx context.Context) TemplateDonutOptionsPtrOutput {
	return o
}

func (o TemplateDonutOptionsPtrOutput) Elem() TemplateDonutOptionsOutput {
	return o.ApplyT(func(v *TemplateDonutOptions) TemplateDonutOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDonutOptions
		return ret
	}).(TemplateDonutOptionsOutput)
}

// The option for define the arc of the chart shape. Valid values are as follows:
//
// - `WHOLE` - A pie chart
// - `SMALL` - A small-sized donut chart
// - `MEDIUM` - A medium-sized donut chart
// - `LARGE` - A large-sized donut chart
func (o TemplateDonutOptionsPtrOutput) ArcOptions() TemplateArcOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDonutOptions) *TemplateArcOptions {
		if v == nil {
			return nil
		}
		return v.ArcOptions
	}).(TemplateArcOptionsPtrOutput)
}

// The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts.
func (o TemplateDonutOptionsPtrOutput) DonutCenterOptions() TemplateDonutCenterOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDonutOptions) *TemplateDonutCenterOptions {
		if v == nil {
			return nil
		}
		return v.DonutCenterOptions
	}).(TemplateDonutCenterOptionsPtrOutput)
}

type TemplateDrillDownFilter struct {
	// The category type drill down filter. This filter is used for string type columns.
	CategoryFilter *TemplateCategoryDrillDownFilter `pulumi:"categoryFilter"`
	// The numeric equality type drill down filter. This filter is used for number type columns.
	NumericEqualityFilter *TemplateNumericEqualityDrillDownFilter `pulumi:"numericEqualityFilter"`
	// The time range drill down filter. This filter is used for date time columns.
	TimeRangeFilter *TemplateTimeRangeDrillDownFilter `pulumi:"timeRangeFilter"`
}

// TemplateDrillDownFilterInput is an input type that accepts TemplateDrillDownFilterArgs and TemplateDrillDownFilterOutput values.
// You can construct a concrete instance of `TemplateDrillDownFilterInput` via:
//
//	TemplateDrillDownFilterArgs{...}
type TemplateDrillDownFilterInput interface {
	pulumi.Input

	ToTemplateDrillDownFilterOutput() TemplateDrillDownFilterOutput
	ToTemplateDrillDownFilterOutputWithContext(context.Context) TemplateDrillDownFilterOutput
}

type TemplateDrillDownFilterArgs struct {
	// The category type drill down filter. This filter is used for string type columns.
	CategoryFilter TemplateCategoryDrillDownFilterPtrInput `pulumi:"categoryFilter"`
	// The numeric equality type drill down filter. This filter is used for number type columns.
	NumericEqualityFilter TemplateNumericEqualityDrillDownFilterPtrInput `pulumi:"numericEqualityFilter"`
	// The time range drill down filter. This filter is used for date time columns.
	TimeRangeFilter TemplateTimeRangeDrillDownFilterPtrInput `pulumi:"timeRangeFilter"`
}

func (TemplateDrillDownFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDrillDownFilter)(nil)).Elem()
}

func (i TemplateDrillDownFilterArgs) ToTemplateDrillDownFilterOutput() TemplateDrillDownFilterOutput {
	return i.ToTemplateDrillDownFilterOutputWithContext(context.Background())
}

func (i TemplateDrillDownFilterArgs) ToTemplateDrillDownFilterOutputWithContext(ctx context.Context) TemplateDrillDownFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDrillDownFilterOutput)
}

// TemplateDrillDownFilterArrayInput is an input type that accepts TemplateDrillDownFilterArray and TemplateDrillDownFilterArrayOutput values.
// You can construct a concrete instance of `TemplateDrillDownFilterArrayInput` via:
//
//	TemplateDrillDownFilterArray{ TemplateDrillDownFilterArgs{...} }
type TemplateDrillDownFilterArrayInput interface {
	pulumi.Input

	ToTemplateDrillDownFilterArrayOutput() TemplateDrillDownFilterArrayOutput
	ToTemplateDrillDownFilterArrayOutputWithContext(context.Context) TemplateDrillDownFilterArrayOutput
}

type TemplateDrillDownFilterArray []TemplateDrillDownFilterInput

func (TemplateDrillDownFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDrillDownFilter)(nil)).Elem()
}

func (i TemplateDrillDownFilterArray) ToTemplateDrillDownFilterArrayOutput() TemplateDrillDownFilterArrayOutput {
	return i.ToTemplateDrillDownFilterArrayOutputWithContext(context.Background())
}

func (i TemplateDrillDownFilterArray) ToTemplateDrillDownFilterArrayOutputWithContext(ctx context.Context) TemplateDrillDownFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDrillDownFilterArrayOutput)
}

type TemplateDrillDownFilterOutput struct{ *pulumi.OutputState }

func (TemplateDrillDownFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDrillDownFilter)(nil)).Elem()
}

func (o TemplateDrillDownFilterOutput) ToTemplateDrillDownFilterOutput() TemplateDrillDownFilterOutput {
	return o
}

func (o TemplateDrillDownFilterOutput) ToTemplateDrillDownFilterOutputWithContext(ctx context.Context) TemplateDrillDownFilterOutput {
	return o
}

// The category type drill down filter. This filter is used for string type columns.
func (o TemplateDrillDownFilterOutput) CategoryFilter() TemplateCategoryDrillDownFilterPtrOutput {
	return o.ApplyT(func(v TemplateDrillDownFilter) *TemplateCategoryDrillDownFilter { return v.CategoryFilter }).(TemplateCategoryDrillDownFilterPtrOutput)
}

// The numeric equality type drill down filter. This filter is used for number type columns.
func (o TemplateDrillDownFilterOutput) NumericEqualityFilter() TemplateNumericEqualityDrillDownFilterPtrOutput {
	return o.ApplyT(func(v TemplateDrillDownFilter) *TemplateNumericEqualityDrillDownFilter {
		return v.NumericEqualityFilter
	}).(TemplateNumericEqualityDrillDownFilterPtrOutput)
}

// The time range drill down filter. This filter is used for date time columns.
func (o TemplateDrillDownFilterOutput) TimeRangeFilter() TemplateTimeRangeDrillDownFilterPtrOutput {
	return o.ApplyT(func(v TemplateDrillDownFilter) *TemplateTimeRangeDrillDownFilter { return v.TimeRangeFilter }).(TemplateTimeRangeDrillDownFilterPtrOutput)
}

type TemplateDrillDownFilterArrayOutput struct{ *pulumi.OutputState }

func (TemplateDrillDownFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDrillDownFilter)(nil)).Elem()
}

func (o TemplateDrillDownFilterArrayOutput) ToTemplateDrillDownFilterArrayOutput() TemplateDrillDownFilterArrayOutput {
	return o
}

func (o TemplateDrillDownFilterArrayOutput) ToTemplateDrillDownFilterArrayOutputWithContext(ctx context.Context) TemplateDrillDownFilterArrayOutput {
	return o
}

func (o TemplateDrillDownFilterArrayOutput) Index(i pulumi.IntInput) TemplateDrillDownFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDrillDownFilter {
		return vs[0].([]TemplateDrillDownFilter)[vs[1].(int)]
	}).(TemplateDrillDownFilterOutput)
}

type TemplateDropDownControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the `Select all` options in a dropdown control.
	SelectAllOptions *TemplateListControlSelectAllOptions `pulumi:"selectAllOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateDropDownControlDisplayOptionsInput is an input type that accepts TemplateDropDownControlDisplayOptionsArgs and TemplateDropDownControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateDropDownControlDisplayOptionsInput` via:
//
//	TemplateDropDownControlDisplayOptionsArgs{...}
type TemplateDropDownControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateDropDownControlDisplayOptionsOutput() TemplateDropDownControlDisplayOptionsOutput
	ToTemplateDropDownControlDisplayOptionsOutputWithContext(context.Context) TemplateDropDownControlDisplayOptionsOutput
}

type TemplateDropDownControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the `Select all` options in a dropdown control.
	SelectAllOptions TemplateListControlSelectAllOptionsPtrInput `pulumi:"selectAllOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateDropDownControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDropDownControlDisplayOptions)(nil)).Elem()
}

func (i TemplateDropDownControlDisplayOptionsArgs) ToTemplateDropDownControlDisplayOptionsOutput() TemplateDropDownControlDisplayOptionsOutput {
	return i.ToTemplateDropDownControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateDropDownControlDisplayOptionsArgs) ToTemplateDropDownControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateDropDownControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDropDownControlDisplayOptionsOutput)
}

func (i TemplateDropDownControlDisplayOptionsArgs) ToTemplateDropDownControlDisplayOptionsPtrOutput() TemplateDropDownControlDisplayOptionsPtrOutput {
	return i.ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateDropDownControlDisplayOptionsArgs) ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDropDownControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDropDownControlDisplayOptionsOutput).ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateDropDownControlDisplayOptionsPtrInput is an input type that accepts TemplateDropDownControlDisplayOptionsArgs, TemplateDropDownControlDisplayOptionsPtr and TemplateDropDownControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateDropDownControlDisplayOptionsPtrInput` via:
//
//	        TemplateDropDownControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateDropDownControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateDropDownControlDisplayOptionsPtrOutput() TemplateDropDownControlDisplayOptionsPtrOutput
	ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateDropDownControlDisplayOptionsPtrOutput
}

type templateDropDownControlDisplayOptionsPtrType TemplateDropDownControlDisplayOptionsArgs

func TemplateDropDownControlDisplayOptionsPtr(v *TemplateDropDownControlDisplayOptionsArgs) TemplateDropDownControlDisplayOptionsPtrInput {
	return (*templateDropDownControlDisplayOptionsPtrType)(v)
}

func (*templateDropDownControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDropDownControlDisplayOptions)(nil)).Elem()
}

func (i *templateDropDownControlDisplayOptionsPtrType) ToTemplateDropDownControlDisplayOptionsPtrOutput() TemplateDropDownControlDisplayOptionsPtrOutput {
	return i.ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateDropDownControlDisplayOptionsPtrType) ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDropDownControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

type TemplateDropDownControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateDropDownControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDropDownControlDisplayOptions)(nil)).Elem()
}

func (o TemplateDropDownControlDisplayOptionsOutput) ToTemplateDropDownControlDisplayOptionsOutput() TemplateDropDownControlDisplayOptionsOutput {
	return o
}

func (o TemplateDropDownControlDisplayOptionsOutput) ToTemplateDropDownControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateDropDownControlDisplayOptionsOutput {
	return o
}

func (o TemplateDropDownControlDisplayOptionsOutput) ToTemplateDropDownControlDisplayOptionsPtrOutput() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateDropDownControlDisplayOptionsOutput) ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDropDownControlDisplayOptions) *TemplateDropDownControlDisplayOptions {
		return &v
	}).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateDropDownControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDropDownControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the `Select all` options in a dropdown control.
func (o TemplateDropDownControlDisplayOptionsOutput) SelectAllOptions() TemplateListControlSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDropDownControlDisplayOptions) *TemplateListControlSelectAllOptions {
		return v.SelectAllOptions
	}).(TemplateListControlSelectAllOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateDropDownControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateDropDownControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateDropDownControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateDropDownControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDropDownControlDisplayOptions)(nil)).Elem()
}

func (o TemplateDropDownControlDisplayOptionsPtrOutput) ToTemplateDropDownControlDisplayOptionsPtrOutput() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateDropDownControlDisplayOptionsPtrOutput) ToTemplateDropDownControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateDropDownControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateDropDownControlDisplayOptionsPtrOutput) Elem() TemplateDropDownControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateDropDownControlDisplayOptions) TemplateDropDownControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateDropDownControlDisplayOptions
		return ret
	}).(TemplateDropDownControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o TemplateDropDownControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDropDownControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the `Select all` options in a dropdown control.
func (o TemplateDropDownControlDisplayOptionsPtrOutput) SelectAllOptions() TemplateListControlSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDropDownControlDisplayOptions) *TemplateListControlSelectAllOptions {
		if v == nil {
			return nil
		}
		return v.SelectAllOptions
	}).(TemplateListControlSelectAllOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateDropDownControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateDropDownControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateDynamicDefaultValue struct {
	// The column that contains the default value of each user or group.
	DefaultValueColumn TemplateColumnIdentifier `pulumi:"defaultValueColumn"`
	// The column that contains the group name.
	GroupNameColumn *TemplateColumnIdentifier `pulumi:"groupNameColumn"`
	// The column that contains the username.
	UserNameColumn *TemplateColumnIdentifier `pulumi:"userNameColumn"`
}

// TemplateDynamicDefaultValueInput is an input type that accepts TemplateDynamicDefaultValueArgs and TemplateDynamicDefaultValueOutput values.
// You can construct a concrete instance of `TemplateDynamicDefaultValueInput` via:
//
//	TemplateDynamicDefaultValueArgs{...}
type TemplateDynamicDefaultValueInput interface {
	pulumi.Input

	ToTemplateDynamicDefaultValueOutput() TemplateDynamicDefaultValueOutput
	ToTemplateDynamicDefaultValueOutputWithContext(context.Context) TemplateDynamicDefaultValueOutput
}

type TemplateDynamicDefaultValueArgs struct {
	// The column that contains the default value of each user or group.
	DefaultValueColumn TemplateColumnIdentifierInput `pulumi:"defaultValueColumn"`
	// The column that contains the group name.
	GroupNameColumn TemplateColumnIdentifierPtrInput `pulumi:"groupNameColumn"`
	// The column that contains the username.
	UserNameColumn TemplateColumnIdentifierPtrInput `pulumi:"userNameColumn"`
}

func (TemplateDynamicDefaultValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDynamicDefaultValue)(nil)).Elem()
}

func (i TemplateDynamicDefaultValueArgs) ToTemplateDynamicDefaultValueOutput() TemplateDynamicDefaultValueOutput {
	return i.ToTemplateDynamicDefaultValueOutputWithContext(context.Background())
}

func (i TemplateDynamicDefaultValueArgs) ToTemplateDynamicDefaultValueOutputWithContext(ctx context.Context) TemplateDynamicDefaultValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDynamicDefaultValueOutput)
}

func (i TemplateDynamicDefaultValueArgs) ToTemplateDynamicDefaultValuePtrOutput() TemplateDynamicDefaultValuePtrOutput {
	return i.ToTemplateDynamicDefaultValuePtrOutputWithContext(context.Background())
}

func (i TemplateDynamicDefaultValueArgs) ToTemplateDynamicDefaultValuePtrOutputWithContext(ctx context.Context) TemplateDynamicDefaultValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDynamicDefaultValueOutput).ToTemplateDynamicDefaultValuePtrOutputWithContext(ctx)
}

// TemplateDynamicDefaultValuePtrInput is an input type that accepts TemplateDynamicDefaultValueArgs, TemplateDynamicDefaultValuePtr and TemplateDynamicDefaultValuePtrOutput values.
// You can construct a concrete instance of `TemplateDynamicDefaultValuePtrInput` via:
//
//	        TemplateDynamicDefaultValueArgs{...}
//
//	or:
//
//	        nil
type TemplateDynamicDefaultValuePtrInput interface {
	pulumi.Input

	ToTemplateDynamicDefaultValuePtrOutput() TemplateDynamicDefaultValuePtrOutput
	ToTemplateDynamicDefaultValuePtrOutputWithContext(context.Context) TemplateDynamicDefaultValuePtrOutput
}

type templateDynamicDefaultValuePtrType TemplateDynamicDefaultValueArgs

func TemplateDynamicDefaultValuePtr(v *TemplateDynamicDefaultValueArgs) TemplateDynamicDefaultValuePtrInput {
	return (*templateDynamicDefaultValuePtrType)(v)
}

func (*templateDynamicDefaultValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDynamicDefaultValue)(nil)).Elem()
}

func (i *templateDynamicDefaultValuePtrType) ToTemplateDynamicDefaultValuePtrOutput() TemplateDynamicDefaultValuePtrOutput {
	return i.ToTemplateDynamicDefaultValuePtrOutputWithContext(context.Background())
}

func (i *templateDynamicDefaultValuePtrType) ToTemplateDynamicDefaultValuePtrOutputWithContext(ctx context.Context) TemplateDynamicDefaultValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDynamicDefaultValuePtrOutput)
}

type TemplateDynamicDefaultValueOutput struct{ *pulumi.OutputState }

func (TemplateDynamicDefaultValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDynamicDefaultValue)(nil)).Elem()
}

func (o TemplateDynamicDefaultValueOutput) ToTemplateDynamicDefaultValueOutput() TemplateDynamicDefaultValueOutput {
	return o
}

func (o TemplateDynamicDefaultValueOutput) ToTemplateDynamicDefaultValueOutputWithContext(ctx context.Context) TemplateDynamicDefaultValueOutput {
	return o
}

func (o TemplateDynamicDefaultValueOutput) ToTemplateDynamicDefaultValuePtrOutput() TemplateDynamicDefaultValuePtrOutput {
	return o.ToTemplateDynamicDefaultValuePtrOutputWithContext(context.Background())
}

func (o TemplateDynamicDefaultValueOutput) ToTemplateDynamicDefaultValuePtrOutputWithContext(ctx context.Context) TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateDynamicDefaultValue) *TemplateDynamicDefaultValue {
		return &v
	}).(TemplateDynamicDefaultValuePtrOutput)
}

// The column that contains the default value of each user or group.
func (o TemplateDynamicDefaultValueOutput) DefaultValueColumn() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateDynamicDefaultValue) TemplateColumnIdentifier { return v.DefaultValueColumn }).(TemplateColumnIdentifierOutput)
}

// The column that contains the group name.
func (o TemplateDynamicDefaultValueOutput) GroupNameColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v TemplateDynamicDefaultValue) *TemplateColumnIdentifier { return v.GroupNameColumn }).(TemplateColumnIdentifierPtrOutput)
}

// The column that contains the username.
func (o TemplateDynamicDefaultValueOutput) UserNameColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v TemplateDynamicDefaultValue) *TemplateColumnIdentifier { return v.UserNameColumn }).(TemplateColumnIdentifierPtrOutput)
}

type TemplateDynamicDefaultValuePtrOutput struct{ *pulumi.OutputState }

func (TemplateDynamicDefaultValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateDynamicDefaultValue)(nil)).Elem()
}

func (o TemplateDynamicDefaultValuePtrOutput) ToTemplateDynamicDefaultValuePtrOutput() TemplateDynamicDefaultValuePtrOutput {
	return o
}

func (o TemplateDynamicDefaultValuePtrOutput) ToTemplateDynamicDefaultValuePtrOutputWithContext(ctx context.Context) TemplateDynamicDefaultValuePtrOutput {
	return o
}

func (o TemplateDynamicDefaultValuePtrOutput) Elem() TemplateDynamicDefaultValueOutput {
	return o.ApplyT(func(v *TemplateDynamicDefaultValue) TemplateDynamicDefaultValue {
		if v != nil {
			return *v
		}
		var ret TemplateDynamicDefaultValue
		return ret
	}).(TemplateDynamicDefaultValueOutput)
}

// The column that contains the default value of each user or group.
func (o TemplateDynamicDefaultValuePtrOutput) DefaultValueColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateDynamicDefaultValue) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.DefaultValueColumn
	}).(TemplateColumnIdentifierPtrOutput)
}

// The column that contains the group name.
func (o TemplateDynamicDefaultValuePtrOutput) GroupNameColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateDynamicDefaultValue) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return v.GroupNameColumn
	}).(TemplateColumnIdentifierPtrOutput)
}

// The column that contains the username.
func (o TemplateDynamicDefaultValuePtrOutput) UserNameColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateDynamicDefaultValue) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return v.UserNameColumn
	}).(TemplateColumnIdentifierPtrOutput)
}

type TemplateEmptyVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The data set that is used in the empty visual. Every visual requires a dataset to render.
	DataSetIdentifier string `pulumi:"dataSetIdentifier"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateEmptyVisualInput is an input type that accepts TemplateEmptyVisualArgs and TemplateEmptyVisualOutput values.
// You can construct a concrete instance of `TemplateEmptyVisualInput` via:
//
//	TemplateEmptyVisualArgs{...}
type TemplateEmptyVisualInput interface {
	pulumi.Input

	ToTemplateEmptyVisualOutput() TemplateEmptyVisualOutput
	ToTemplateEmptyVisualOutputWithContext(context.Context) TemplateEmptyVisualOutput
}

type TemplateEmptyVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The data set that is used in the empty visual. Every visual requires a dataset to render.
	DataSetIdentifier pulumi.StringInput `pulumi:"dataSetIdentifier"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateEmptyVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateEmptyVisual)(nil)).Elem()
}

func (i TemplateEmptyVisualArgs) ToTemplateEmptyVisualOutput() TemplateEmptyVisualOutput {
	return i.ToTemplateEmptyVisualOutputWithContext(context.Background())
}

func (i TemplateEmptyVisualArgs) ToTemplateEmptyVisualOutputWithContext(ctx context.Context) TemplateEmptyVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateEmptyVisualOutput)
}

func (i TemplateEmptyVisualArgs) ToTemplateEmptyVisualPtrOutput() TemplateEmptyVisualPtrOutput {
	return i.ToTemplateEmptyVisualPtrOutputWithContext(context.Background())
}

func (i TemplateEmptyVisualArgs) ToTemplateEmptyVisualPtrOutputWithContext(ctx context.Context) TemplateEmptyVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateEmptyVisualOutput).ToTemplateEmptyVisualPtrOutputWithContext(ctx)
}

// TemplateEmptyVisualPtrInput is an input type that accepts TemplateEmptyVisualArgs, TemplateEmptyVisualPtr and TemplateEmptyVisualPtrOutput values.
// You can construct a concrete instance of `TemplateEmptyVisualPtrInput` via:
//
//	        TemplateEmptyVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateEmptyVisualPtrInput interface {
	pulumi.Input

	ToTemplateEmptyVisualPtrOutput() TemplateEmptyVisualPtrOutput
	ToTemplateEmptyVisualPtrOutputWithContext(context.Context) TemplateEmptyVisualPtrOutput
}

type templateEmptyVisualPtrType TemplateEmptyVisualArgs

func TemplateEmptyVisualPtr(v *TemplateEmptyVisualArgs) TemplateEmptyVisualPtrInput {
	return (*templateEmptyVisualPtrType)(v)
}

func (*templateEmptyVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateEmptyVisual)(nil)).Elem()
}

func (i *templateEmptyVisualPtrType) ToTemplateEmptyVisualPtrOutput() TemplateEmptyVisualPtrOutput {
	return i.ToTemplateEmptyVisualPtrOutputWithContext(context.Background())
}

func (i *templateEmptyVisualPtrType) ToTemplateEmptyVisualPtrOutputWithContext(ctx context.Context) TemplateEmptyVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateEmptyVisualPtrOutput)
}

type TemplateEmptyVisualOutput struct{ *pulumi.OutputState }

func (TemplateEmptyVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateEmptyVisual)(nil)).Elem()
}

func (o TemplateEmptyVisualOutput) ToTemplateEmptyVisualOutput() TemplateEmptyVisualOutput {
	return o
}

func (o TemplateEmptyVisualOutput) ToTemplateEmptyVisualOutputWithContext(ctx context.Context) TemplateEmptyVisualOutput {
	return o
}

func (o TemplateEmptyVisualOutput) ToTemplateEmptyVisualPtrOutput() TemplateEmptyVisualPtrOutput {
	return o.ToTemplateEmptyVisualPtrOutputWithContext(context.Background())
}

func (o TemplateEmptyVisualOutput) ToTemplateEmptyVisualPtrOutputWithContext(ctx context.Context) TemplateEmptyVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateEmptyVisual) *TemplateEmptyVisual {
		return &v
	}).(TemplateEmptyVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateEmptyVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateEmptyVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The data set that is used in the empty visual. Every visual requires a dataset to render.
func (o TemplateEmptyVisualOutput) DataSetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateEmptyVisual) string { return v.DataSetIdentifier }).(pulumi.StringOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateEmptyVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateEmptyVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateEmptyVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateEmptyVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateEmptyVisual)(nil)).Elem()
}

func (o TemplateEmptyVisualPtrOutput) ToTemplateEmptyVisualPtrOutput() TemplateEmptyVisualPtrOutput {
	return o
}

func (o TemplateEmptyVisualPtrOutput) ToTemplateEmptyVisualPtrOutputWithContext(ctx context.Context) TemplateEmptyVisualPtrOutput {
	return o
}

func (o TemplateEmptyVisualPtrOutput) Elem() TemplateEmptyVisualOutput {
	return o.ApplyT(func(v *TemplateEmptyVisual) TemplateEmptyVisual {
		if v != nil {
			return *v
		}
		var ret TemplateEmptyVisual
		return ret
	}).(TemplateEmptyVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateEmptyVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateEmptyVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The data set that is used in the empty visual. Every visual requires a dataset to render.
func (o TemplateEmptyVisualPtrOutput) DataSetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateEmptyVisual) *string {
		if v == nil {
			return nil
		}
		return &v.DataSetIdentifier
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateEmptyVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateEmptyVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateEntity struct {
	// The hierarchical path of the entity within the analysis, template, or dashboard definition tree.
	Path *string `pulumi:"path"`
}

type TemplateEntityOutput struct{ *pulumi.OutputState }

func (TemplateEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateEntity)(nil)).Elem()
}

func (o TemplateEntityOutput) ToTemplateEntityOutput() TemplateEntityOutput {
	return o
}

func (o TemplateEntityOutput) ToTemplateEntityOutputWithContext(ctx context.Context) TemplateEntityOutput {
	return o
}

// The hierarchical path of the entity within the analysis, template, or dashboard definition tree.
func (o TemplateEntityOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateEntity) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TemplateEntityArrayOutput struct{ *pulumi.OutputState }

func (TemplateEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateEntity)(nil)).Elem()
}

func (o TemplateEntityArrayOutput) ToTemplateEntityArrayOutput() TemplateEntityArrayOutput {
	return o
}

func (o TemplateEntityArrayOutput) ToTemplateEntityArrayOutputWithContext(ctx context.Context) TemplateEntityArrayOutput {
	return o
}

func (o TemplateEntityArrayOutput) Index(i pulumi.IntInput) TemplateEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateEntity {
		return vs[0].([]TemplateEntity)[vs[1].(int)]
	}).(TemplateEntityOutput)
}

// <p>List of errors that occurred when the template version creation failed.</p>
type TemplateError struct {
	// <p>Description of the error type.</p>
	Message *string `pulumi:"message"`
	// Type of error.
	Type *TemplateErrorType `pulumi:"type"`
	// <p>An error path that shows which entities caused the template error.</p>
	ViolatedEntities []TemplateEntity `pulumi:"violatedEntities"`
}

// <p>List of errors that occurred when the template version creation failed.</p>
type TemplateErrorOutput struct{ *pulumi.OutputState }

func (TemplateErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateError)(nil)).Elem()
}

func (o TemplateErrorOutput) ToTemplateErrorOutput() TemplateErrorOutput {
	return o
}

func (o TemplateErrorOutput) ToTemplateErrorOutputWithContext(ctx context.Context) TemplateErrorOutput {
	return o
}

// <p>Description of the error type.</p>
func (o TemplateErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Type of error.
func (o TemplateErrorOutput) Type() TemplateErrorTypePtrOutput {
	return o.ApplyT(func(v TemplateError) *TemplateErrorType { return v.Type }).(TemplateErrorTypePtrOutput)
}

// <p>An error path that shows which entities caused the template error.</p>
func (o TemplateErrorOutput) ViolatedEntities() TemplateEntityArrayOutput {
	return o.ApplyT(func(v TemplateError) []TemplateEntity { return v.ViolatedEntities }).(TemplateEntityArrayOutput)
}

type TemplateErrorArrayOutput struct{ *pulumi.OutputState }

func (TemplateErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateError)(nil)).Elem()
}

func (o TemplateErrorArrayOutput) ToTemplateErrorArrayOutput() TemplateErrorArrayOutput {
	return o
}

func (o TemplateErrorArrayOutput) ToTemplateErrorArrayOutputWithContext(ctx context.Context) TemplateErrorArrayOutput {
	return o
}

func (o TemplateErrorArrayOutput) Index(i pulumi.IntInput) TemplateErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateError {
		return vs[0].([]TemplateError)[vs[1].(int)]
	}).(TemplateErrorOutput)
}

type TemplateExcludePeriodConfiguration struct {
	// The amount or number of the exclude period.
	Amount float64 `pulumi:"amount"`
	// The granularity or unit (day, month, year) of the exclude period.
	Granularity TemplateTimeGranularity `pulumi:"granularity"`
	// The status of the exclude period. Choose from the following options:
	//
	// - `ENABLED`
	// - `DISABLED`
	Status *TemplateWidgetStatus `pulumi:"status"`
}

// TemplateExcludePeriodConfigurationInput is an input type that accepts TemplateExcludePeriodConfigurationArgs and TemplateExcludePeriodConfigurationOutput values.
// You can construct a concrete instance of `TemplateExcludePeriodConfigurationInput` via:
//
//	TemplateExcludePeriodConfigurationArgs{...}
type TemplateExcludePeriodConfigurationInput interface {
	pulumi.Input

	ToTemplateExcludePeriodConfigurationOutput() TemplateExcludePeriodConfigurationOutput
	ToTemplateExcludePeriodConfigurationOutputWithContext(context.Context) TemplateExcludePeriodConfigurationOutput
}

type TemplateExcludePeriodConfigurationArgs struct {
	// The amount or number of the exclude period.
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The granularity or unit (day, month, year) of the exclude period.
	Granularity TemplateTimeGranularityInput `pulumi:"granularity"`
	// The status of the exclude period. Choose from the following options:
	//
	// - `ENABLED`
	// - `DISABLED`
	Status TemplateWidgetStatusPtrInput `pulumi:"status"`
}

func (TemplateExcludePeriodConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateExcludePeriodConfiguration)(nil)).Elem()
}

func (i TemplateExcludePeriodConfigurationArgs) ToTemplateExcludePeriodConfigurationOutput() TemplateExcludePeriodConfigurationOutput {
	return i.ToTemplateExcludePeriodConfigurationOutputWithContext(context.Background())
}

func (i TemplateExcludePeriodConfigurationArgs) ToTemplateExcludePeriodConfigurationOutputWithContext(ctx context.Context) TemplateExcludePeriodConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateExcludePeriodConfigurationOutput)
}

func (i TemplateExcludePeriodConfigurationArgs) ToTemplateExcludePeriodConfigurationPtrOutput() TemplateExcludePeriodConfigurationPtrOutput {
	return i.ToTemplateExcludePeriodConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateExcludePeriodConfigurationArgs) ToTemplateExcludePeriodConfigurationPtrOutputWithContext(ctx context.Context) TemplateExcludePeriodConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateExcludePeriodConfigurationOutput).ToTemplateExcludePeriodConfigurationPtrOutputWithContext(ctx)
}

// TemplateExcludePeriodConfigurationPtrInput is an input type that accepts TemplateExcludePeriodConfigurationArgs, TemplateExcludePeriodConfigurationPtr and TemplateExcludePeriodConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateExcludePeriodConfigurationPtrInput` via:
//
//	        TemplateExcludePeriodConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateExcludePeriodConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateExcludePeriodConfigurationPtrOutput() TemplateExcludePeriodConfigurationPtrOutput
	ToTemplateExcludePeriodConfigurationPtrOutputWithContext(context.Context) TemplateExcludePeriodConfigurationPtrOutput
}

type templateExcludePeriodConfigurationPtrType TemplateExcludePeriodConfigurationArgs

func TemplateExcludePeriodConfigurationPtr(v *TemplateExcludePeriodConfigurationArgs) TemplateExcludePeriodConfigurationPtrInput {
	return (*templateExcludePeriodConfigurationPtrType)(v)
}

func (*templateExcludePeriodConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateExcludePeriodConfiguration)(nil)).Elem()
}

func (i *templateExcludePeriodConfigurationPtrType) ToTemplateExcludePeriodConfigurationPtrOutput() TemplateExcludePeriodConfigurationPtrOutput {
	return i.ToTemplateExcludePeriodConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateExcludePeriodConfigurationPtrType) ToTemplateExcludePeriodConfigurationPtrOutputWithContext(ctx context.Context) TemplateExcludePeriodConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateExcludePeriodConfigurationPtrOutput)
}

type TemplateExcludePeriodConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateExcludePeriodConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateExcludePeriodConfiguration)(nil)).Elem()
}

func (o TemplateExcludePeriodConfigurationOutput) ToTemplateExcludePeriodConfigurationOutput() TemplateExcludePeriodConfigurationOutput {
	return o
}

func (o TemplateExcludePeriodConfigurationOutput) ToTemplateExcludePeriodConfigurationOutputWithContext(ctx context.Context) TemplateExcludePeriodConfigurationOutput {
	return o
}

func (o TemplateExcludePeriodConfigurationOutput) ToTemplateExcludePeriodConfigurationPtrOutput() TemplateExcludePeriodConfigurationPtrOutput {
	return o.ToTemplateExcludePeriodConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateExcludePeriodConfigurationOutput) ToTemplateExcludePeriodConfigurationPtrOutputWithContext(ctx context.Context) TemplateExcludePeriodConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateExcludePeriodConfiguration) *TemplateExcludePeriodConfiguration {
		return &v
	}).(TemplateExcludePeriodConfigurationPtrOutput)
}

// The amount or number of the exclude period.
func (o TemplateExcludePeriodConfigurationOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateExcludePeriodConfiguration) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The granularity or unit (day, month, year) of the exclude period.
func (o TemplateExcludePeriodConfigurationOutput) Granularity() TemplateTimeGranularityOutput {
	return o.ApplyT(func(v TemplateExcludePeriodConfiguration) TemplateTimeGranularity { return v.Granularity }).(TemplateTimeGranularityOutput)
}

// The status of the exclude period. Choose from the following options:
//
// - `ENABLED`
// - `DISABLED`
func (o TemplateExcludePeriodConfigurationOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateExcludePeriodConfiguration) *TemplateWidgetStatus { return v.Status }).(TemplateWidgetStatusPtrOutput)
}

type TemplateExcludePeriodConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateExcludePeriodConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateExcludePeriodConfiguration)(nil)).Elem()
}

func (o TemplateExcludePeriodConfigurationPtrOutput) ToTemplateExcludePeriodConfigurationPtrOutput() TemplateExcludePeriodConfigurationPtrOutput {
	return o
}

func (o TemplateExcludePeriodConfigurationPtrOutput) ToTemplateExcludePeriodConfigurationPtrOutputWithContext(ctx context.Context) TemplateExcludePeriodConfigurationPtrOutput {
	return o
}

func (o TemplateExcludePeriodConfigurationPtrOutput) Elem() TemplateExcludePeriodConfigurationOutput {
	return o.ApplyT(func(v *TemplateExcludePeriodConfiguration) TemplateExcludePeriodConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateExcludePeriodConfiguration
		return ret
	}).(TemplateExcludePeriodConfigurationOutput)
}

// The amount or number of the exclude period.
func (o TemplateExcludePeriodConfigurationPtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateExcludePeriodConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The granularity or unit (day, month, year) of the exclude period.
func (o TemplateExcludePeriodConfigurationPtrOutput) Granularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateExcludePeriodConfiguration) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return &v.Granularity
	}).(TemplateTimeGranularityPtrOutput)
}

// The status of the exclude period. Choose from the following options:
//
// - `ENABLED`
// - `DISABLED`
func (o TemplateExcludePeriodConfigurationPtrOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v *TemplateExcludePeriodConfiguration) *TemplateWidgetStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(TemplateWidgetStatusPtrOutput)
}

type TemplateExplicitHierarchy struct {
	// The list of columns that define the explicit hierarchy.
	Columns []TemplateColumnIdentifier `pulumi:"columns"`
	// The option that determines the drill down filters for the explicit hierarchy.
	DrillDownFilters []TemplateDrillDownFilter `pulumi:"drillDownFilters"`
	// The hierarchy ID of the explicit hierarchy.
	HierarchyId string `pulumi:"hierarchyId"`
}

// TemplateExplicitHierarchyInput is an input type that accepts TemplateExplicitHierarchyArgs and TemplateExplicitHierarchyOutput values.
// You can construct a concrete instance of `TemplateExplicitHierarchyInput` via:
//
//	TemplateExplicitHierarchyArgs{...}
type TemplateExplicitHierarchyInput interface {
	pulumi.Input

	ToTemplateExplicitHierarchyOutput() TemplateExplicitHierarchyOutput
	ToTemplateExplicitHierarchyOutputWithContext(context.Context) TemplateExplicitHierarchyOutput
}

type TemplateExplicitHierarchyArgs struct {
	// The list of columns that define the explicit hierarchy.
	Columns TemplateColumnIdentifierArrayInput `pulumi:"columns"`
	// The option that determines the drill down filters for the explicit hierarchy.
	DrillDownFilters TemplateDrillDownFilterArrayInput `pulumi:"drillDownFilters"`
	// The hierarchy ID of the explicit hierarchy.
	HierarchyId pulumi.StringInput `pulumi:"hierarchyId"`
}

func (TemplateExplicitHierarchyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateExplicitHierarchy)(nil)).Elem()
}

func (i TemplateExplicitHierarchyArgs) ToTemplateExplicitHierarchyOutput() TemplateExplicitHierarchyOutput {
	return i.ToTemplateExplicitHierarchyOutputWithContext(context.Background())
}

func (i TemplateExplicitHierarchyArgs) ToTemplateExplicitHierarchyOutputWithContext(ctx context.Context) TemplateExplicitHierarchyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateExplicitHierarchyOutput)
}

func (i TemplateExplicitHierarchyArgs) ToTemplateExplicitHierarchyPtrOutput() TemplateExplicitHierarchyPtrOutput {
	return i.ToTemplateExplicitHierarchyPtrOutputWithContext(context.Background())
}

func (i TemplateExplicitHierarchyArgs) ToTemplateExplicitHierarchyPtrOutputWithContext(ctx context.Context) TemplateExplicitHierarchyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateExplicitHierarchyOutput).ToTemplateExplicitHierarchyPtrOutputWithContext(ctx)
}

// TemplateExplicitHierarchyPtrInput is an input type that accepts TemplateExplicitHierarchyArgs, TemplateExplicitHierarchyPtr and TemplateExplicitHierarchyPtrOutput values.
// You can construct a concrete instance of `TemplateExplicitHierarchyPtrInput` via:
//
//	        TemplateExplicitHierarchyArgs{...}
//
//	or:
//
//	        nil
type TemplateExplicitHierarchyPtrInput interface {
	pulumi.Input

	ToTemplateExplicitHierarchyPtrOutput() TemplateExplicitHierarchyPtrOutput
	ToTemplateExplicitHierarchyPtrOutputWithContext(context.Context) TemplateExplicitHierarchyPtrOutput
}

type templateExplicitHierarchyPtrType TemplateExplicitHierarchyArgs

func TemplateExplicitHierarchyPtr(v *TemplateExplicitHierarchyArgs) TemplateExplicitHierarchyPtrInput {
	return (*templateExplicitHierarchyPtrType)(v)
}

func (*templateExplicitHierarchyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateExplicitHierarchy)(nil)).Elem()
}

func (i *templateExplicitHierarchyPtrType) ToTemplateExplicitHierarchyPtrOutput() TemplateExplicitHierarchyPtrOutput {
	return i.ToTemplateExplicitHierarchyPtrOutputWithContext(context.Background())
}

func (i *templateExplicitHierarchyPtrType) ToTemplateExplicitHierarchyPtrOutputWithContext(ctx context.Context) TemplateExplicitHierarchyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateExplicitHierarchyPtrOutput)
}

type TemplateExplicitHierarchyOutput struct{ *pulumi.OutputState }

func (TemplateExplicitHierarchyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateExplicitHierarchy)(nil)).Elem()
}

func (o TemplateExplicitHierarchyOutput) ToTemplateExplicitHierarchyOutput() TemplateExplicitHierarchyOutput {
	return o
}

func (o TemplateExplicitHierarchyOutput) ToTemplateExplicitHierarchyOutputWithContext(ctx context.Context) TemplateExplicitHierarchyOutput {
	return o
}

func (o TemplateExplicitHierarchyOutput) ToTemplateExplicitHierarchyPtrOutput() TemplateExplicitHierarchyPtrOutput {
	return o.ToTemplateExplicitHierarchyPtrOutputWithContext(context.Background())
}

func (o TemplateExplicitHierarchyOutput) ToTemplateExplicitHierarchyPtrOutputWithContext(ctx context.Context) TemplateExplicitHierarchyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateExplicitHierarchy) *TemplateExplicitHierarchy {
		return &v
	}).(TemplateExplicitHierarchyPtrOutput)
}

// The list of columns that define the explicit hierarchy.
func (o TemplateExplicitHierarchyOutput) Columns() TemplateColumnIdentifierArrayOutput {
	return o.ApplyT(func(v TemplateExplicitHierarchy) []TemplateColumnIdentifier { return v.Columns }).(TemplateColumnIdentifierArrayOutput)
}

// The option that determines the drill down filters for the explicit hierarchy.
func (o TemplateExplicitHierarchyOutput) DrillDownFilters() TemplateDrillDownFilterArrayOutput {
	return o.ApplyT(func(v TemplateExplicitHierarchy) []TemplateDrillDownFilter { return v.DrillDownFilters }).(TemplateDrillDownFilterArrayOutput)
}

// The hierarchy ID of the explicit hierarchy.
func (o TemplateExplicitHierarchyOutput) HierarchyId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateExplicitHierarchy) string { return v.HierarchyId }).(pulumi.StringOutput)
}

type TemplateExplicitHierarchyPtrOutput struct{ *pulumi.OutputState }

func (TemplateExplicitHierarchyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateExplicitHierarchy)(nil)).Elem()
}

func (o TemplateExplicitHierarchyPtrOutput) ToTemplateExplicitHierarchyPtrOutput() TemplateExplicitHierarchyPtrOutput {
	return o
}

func (o TemplateExplicitHierarchyPtrOutput) ToTemplateExplicitHierarchyPtrOutputWithContext(ctx context.Context) TemplateExplicitHierarchyPtrOutput {
	return o
}

func (o TemplateExplicitHierarchyPtrOutput) Elem() TemplateExplicitHierarchyOutput {
	return o.ApplyT(func(v *TemplateExplicitHierarchy) TemplateExplicitHierarchy {
		if v != nil {
			return *v
		}
		var ret TemplateExplicitHierarchy
		return ret
	}).(TemplateExplicitHierarchyOutput)
}

// The list of columns that define the explicit hierarchy.
func (o TemplateExplicitHierarchyPtrOutput) Columns() TemplateColumnIdentifierArrayOutput {
	return o.ApplyT(func(v *TemplateExplicitHierarchy) []TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(TemplateColumnIdentifierArrayOutput)
}

// The option that determines the drill down filters for the explicit hierarchy.
func (o TemplateExplicitHierarchyPtrOutput) DrillDownFilters() TemplateDrillDownFilterArrayOutput {
	return o.ApplyT(func(v *TemplateExplicitHierarchy) []TemplateDrillDownFilter {
		if v == nil {
			return nil
		}
		return v.DrillDownFilters
	}).(TemplateDrillDownFilterArrayOutput)
}

// The hierarchy ID of the explicit hierarchy.
func (o TemplateExplicitHierarchyPtrOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateExplicitHierarchy) *string {
		if v == nil {
			return nil
		}
		return &v.HierarchyId
	}).(pulumi.StringPtrOutput)
}

type TemplateFieldBasedTooltip struct {
	// The visibility of `Show aggregations` .
	AggregationVisibility interface{} `pulumi:"aggregationVisibility"`
	// The fields configuration in the tooltip.
	TooltipFields []TemplateTooltipItem `pulumi:"tooltipFields"`
	// The type for the >tooltip title. Choose one of the following options:
	//
	// - `NONE` : Doesn't use the primary value as the title.
	// - `PRIMARY_VALUE` : Uses primary value as the title.
	TooltipTitleType *TemplateTooltipTitleType `pulumi:"tooltipTitleType"`
}

// TemplateFieldBasedTooltipInput is an input type that accepts TemplateFieldBasedTooltipArgs and TemplateFieldBasedTooltipOutput values.
// You can construct a concrete instance of `TemplateFieldBasedTooltipInput` via:
//
//	TemplateFieldBasedTooltipArgs{...}
type TemplateFieldBasedTooltipInput interface {
	pulumi.Input

	ToTemplateFieldBasedTooltipOutput() TemplateFieldBasedTooltipOutput
	ToTemplateFieldBasedTooltipOutputWithContext(context.Context) TemplateFieldBasedTooltipOutput
}

type TemplateFieldBasedTooltipArgs struct {
	// The visibility of `Show aggregations` .
	AggregationVisibility pulumi.Input `pulumi:"aggregationVisibility"`
	// The fields configuration in the tooltip.
	TooltipFields TemplateTooltipItemArrayInput `pulumi:"tooltipFields"`
	// The type for the >tooltip title. Choose one of the following options:
	//
	// - `NONE` : Doesn't use the primary value as the title.
	// - `PRIMARY_VALUE` : Uses primary value as the title.
	TooltipTitleType TemplateTooltipTitleTypePtrInput `pulumi:"tooltipTitleType"`
}

func (TemplateFieldBasedTooltipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldBasedTooltip)(nil)).Elem()
}

func (i TemplateFieldBasedTooltipArgs) ToTemplateFieldBasedTooltipOutput() TemplateFieldBasedTooltipOutput {
	return i.ToTemplateFieldBasedTooltipOutputWithContext(context.Background())
}

func (i TemplateFieldBasedTooltipArgs) ToTemplateFieldBasedTooltipOutputWithContext(ctx context.Context) TemplateFieldBasedTooltipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldBasedTooltipOutput)
}

func (i TemplateFieldBasedTooltipArgs) ToTemplateFieldBasedTooltipPtrOutput() TemplateFieldBasedTooltipPtrOutput {
	return i.ToTemplateFieldBasedTooltipPtrOutputWithContext(context.Background())
}

func (i TemplateFieldBasedTooltipArgs) ToTemplateFieldBasedTooltipPtrOutputWithContext(ctx context.Context) TemplateFieldBasedTooltipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldBasedTooltipOutput).ToTemplateFieldBasedTooltipPtrOutputWithContext(ctx)
}

// TemplateFieldBasedTooltipPtrInput is an input type that accepts TemplateFieldBasedTooltipArgs, TemplateFieldBasedTooltipPtr and TemplateFieldBasedTooltipPtrOutput values.
// You can construct a concrete instance of `TemplateFieldBasedTooltipPtrInput` via:
//
//	        TemplateFieldBasedTooltipArgs{...}
//
//	or:
//
//	        nil
type TemplateFieldBasedTooltipPtrInput interface {
	pulumi.Input

	ToTemplateFieldBasedTooltipPtrOutput() TemplateFieldBasedTooltipPtrOutput
	ToTemplateFieldBasedTooltipPtrOutputWithContext(context.Context) TemplateFieldBasedTooltipPtrOutput
}

type templateFieldBasedTooltipPtrType TemplateFieldBasedTooltipArgs

func TemplateFieldBasedTooltipPtr(v *TemplateFieldBasedTooltipArgs) TemplateFieldBasedTooltipPtrInput {
	return (*templateFieldBasedTooltipPtrType)(v)
}

func (*templateFieldBasedTooltipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldBasedTooltip)(nil)).Elem()
}

func (i *templateFieldBasedTooltipPtrType) ToTemplateFieldBasedTooltipPtrOutput() TemplateFieldBasedTooltipPtrOutput {
	return i.ToTemplateFieldBasedTooltipPtrOutputWithContext(context.Background())
}

func (i *templateFieldBasedTooltipPtrType) ToTemplateFieldBasedTooltipPtrOutputWithContext(ctx context.Context) TemplateFieldBasedTooltipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldBasedTooltipPtrOutput)
}

type TemplateFieldBasedTooltipOutput struct{ *pulumi.OutputState }

func (TemplateFieldBasedTooltipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldBasedTooltip)(nil)).Elem()
}

func (o TemplateFieldBasedTooltipOutput) ToTemplateFieldBasedTooltipOutput() TemplateFieldBasedTooltipOutput {
	return o
}

func (o TemplateFieldBasedTooltipOutput) ToTemplateFieldBasedTooltipOutputWithContext(ctx context.Context) TemplateFieldBasedTooltipOutput {
	return o
}

func (o TemplateFieldBasedTooltipOutput) ToTemplateFieldBasedTooltipPtrOutput() TemplateFieldBasedTooltipPtrOutput {
	return o.ToTemplateFieldBasedTooltipPtrOutputWithContext(context.Background())
}

func (o TemplateFieldBasedTooltipOutput) ToTemplateFieldBasedTooltipPtrOutputWithContext(ctx context.Context) TemplateFieldBasedTooltipPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFieldBasedTooltip) *TemplateFieldBasedTooltip {
		return &v
	}).(TemplateFieldBasedTooltipPtrOutput)
}

// The visibility of `Show aggregations` .
func (o TemplateFieldBasedTooltipOutput) AggregationVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFieldBasedTooltip) interface{} { return v.AggregationVisibility }).(pulumi.AnyOutput)
}

// The fields configuration in the tooltip.
func (o TemplateFieldBasedTooltipOutput) TooltipFields() TemplateTooltipItemArrayOutput {
	return o.ApplyT(func(v TemplateFieldBasedTooltip) []TemplateTooltipItem { return v.TooltipFields }).(TemplateTooltipItemArrayOutput)
}

// The type for the >tooltip title. Choose one of the following options:
//
// - `NONE` : Doesn't use the primary value as the title.
// - `PRIMARY_VALUE` : Uses primary value as the title.
func (o TemplateFieldBasedTooltipOutput) TooltipTitleType() TemplateTooltipTitleTypePtrOutput {
	return o.ApplyT(func(v TemplateFieldBasedTooltip) *TemplateTooltipTitleType { return v.TooltipTitleType }).(TemplateTooltipTitleTypePtrOutput)
}

type TemplateFieldBasedTooltipPtrOutput struct{ *pulumi.OutputState }

func (TemplateFieldBasedTooltipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldBasedTooltip)(nil)).Elem()
}

func (o TemplateFieldBasedTooltipPtrOutput) ToTemplateFieldBasedTooltipPtrOutput() TemplateFieldBasedTooltipPtrOutput {
	return o
}

func (o TemplateFieldBasedTooltipPtrOutput) ToTemplateFieldBasedTooltipPtrOutputWithContext(ctx context.Context) TemplateFieldBasedTooltipPtrOutput {
	return o
}

func (o TemplateFieldBasedTooltipPtrOutput) Elem() TemplateFieldBasedTooltipOutput {
	return o.ApplyT(func(v *TemplateFieldBasedTooltip) TemplateFieldBasedTooltip {
		if v != nil {
			return *v
		}
		var ret TemplateFieldBasedTooltip
		return ret
	}).(TemplateFieldBasedTooltipOutput)
}

// The visibility of `Show aggregations` .
func (o TemplateFieldBasedTooltipPtrOutput) AggregationVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFieldBasedTooltip) interface{} {
		if v == nil {
			return nil
		}
		return v.AggregationVisibility
	}).(pulumi.AnyOutput)
}

// The fields configuration in the tooltip.
func (o TemplateFieldBasedTooltipPtrOutput) TooltipFields() TemplateTooltipItemArrayOutput {
	return o.ApplyT(func(v *TemplateFieldBasedTooltip) []TemplateTooltipItem {
		if v == nil {
			return nil
		}
		return v.TooltipFields
	}).(TemplateTooltipItemArrayOutput)
}

// The type for the >tooltip title. Choose one of the following options:
//
// - `NONE` : Doesn't use the primary value as the title.
// - `PRIMARY_VALUE` : Uses primary value as the title.
func (o TemplateFieldBasedTooltipPtrOutput) TooltipTitleType() TemplateTooltipTitleTypePtrOutput {
	return o.ApplyT(func(v *TemplateFieldBasedTooltip) *TemplateTooltipTitleType {
		if v == nil {
			return nil
		}
		return v.TooltipTitleType
	}).(TemplateTooltipTitleTypePtrOutput)
}

type TemplateFieldLabelType struct {
	// Indicates the field that is targeted by the field label.
	FieldId *string `pulumi:"fieldId"`
	// The visibility of the field label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateFieldLabelTypeInput is an input type that accepts TemplateFieldLabelTypeArgs and TemplateFieldLabelTypeOutput values.
// You can construct a concrete instance of `TemplateFieldLabelTypeInput` via:
//
//	TemplateFieldLabelTypeArgs{...}
type TemplateFieldLabelTypeInput interface {
	pulumi.Input

	ToTemplateFieldLabelTypeOutput() TemplateFieldLabelTypeOutput
	ToTemplateFieldLabelTypeOutputWithContext(context.Context) TemplateFieldLabelTypeOutput
}

type TemplateFieldLabelTypeArgs struct {
	// Indicates the field that is targeted by the field label.
	FieldId pulumi.StringPtrInput `pulumi:"fieldId"`
	// The visibility of the field label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateFieldLabelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldLabelType)(nil)).Elem()
}

func (i TemplateFieldLabelTypeArgs) ToTemplateFieldLabelTypeOutput() TemplateFieldLabelTypeOutput {
	return i.ToTemplateFieldLabelTypeOutputWithContext(context.Background())
}

func (i TemplateFieldLabelTypeArgs) ToTemplateFieldLabelTypeOutputWithContext(ctx context.Context) TemplateFieldLabelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldLabelTypeOutput)
}

func (i TemplateFieldLabelTypeArgs) ToTemplateFieldLabelTypePtrOutput() TemplateFieldLabelTypePtrOutput {
	return i.ToTemplateFieldLabelTypePtrOutputWithContext(context.Background())
}

func (i TemplateFieldLabelTypeArgs) ToTemplateFieldLabelTypePtrOutputWithContext(ctx context.Context) TemplateFieldLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldLabelTypeOutput).ToTemplateFieldLabelTypePtrOutputWithContext(ctx)
}

// TemplateFieldLabelTypePtrInput is an input type that accepts TemplateFieldLabelTypeArgs, TemplateFieldLabelTypePtr and TemplateFieldLabelTypePtrOutput values.
// You can construct a concrete instance of `TemplateFieldLabelTypePtrInput` via:
//
//	        TemplateFieldLabelTypeArgs{...}
//
//	or:
//
//	        nil
type TemplateFieldLabelTypePtrInput interface {
	pulumi.Input

	ToTemplateFieldLabelTypePtrOutput() TemplateFieldLabelTypePtrOutput
	ToTemplateFieldLabelTypePtrOutputWithContext(context.Context) TemplateFieldLabelTypePtrOutput
}

type templateFieldLabelTypePtrType TemplateFieldLabelTypeArgs

func TemplateFieldLabelTypePtr(v *TemplateFieldLabelTypeArgs) TemplateFieldLabelTypePtrInput {
	return (*templateFieldLabelTypePtrType)(v)
}

func (*templateFieldLabelTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldLabelType)(nil)).Elem()
}

func (i *templateFieldLabelTypePtrType) ToTemplateFieldLabelTypePtrOutput() TemplateFieldLabelTypePtrOutput {
	return i.ToTemplateFieldLabelTypePtrOutputWithContext(context.Background())
}

func (i *templateFieldLabelTypePtrType) ToTemplateFieldLabelTypePtrOutputWithContext(ctx context.Context) TemplateFieldLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldLabelTypePtrOutput)
}

type TemplateFieldLabelTypeOutput struct{ *pulumi.OutputState }

func (TemplateFieldLabelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldLabelType)(nil)).Elem()
}

func (o TemplateFieldLabelTypeOutput) ToTemplateFieldLabelTypeOutput() TemplateFieldLabelTypeOutput {
	return o
}

func (o TemplateFieldLabelTypeOutput) ToTemplateFieldLabelTypeOutputWithContext(ctx context.Context) TemplateFieldLabelTypeOutput {
	return o
}

func (o TemplateFieldLabelTypeOutput) ToTemplateFieldLabelTypePtrOutput() TemplateFieldLabelTypePtrOutput {
	return o.ToTemplateFieldLabelTypePtrOutputWithContext(context.Background())
}

func (o TemplateFieldLabelTypeOutput) ToTemplateFieldLabelTypePtrOutputWithContext(ctx context.Context) TemplateFieldLabelTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFieldLabelType) *TemplateFieldLabelType {
		return &v
	}).(TemplateFieldLabelTypePtrOutput)
}

// Indicates the field that is targeted by the field label.
func (o TemplateFieldLabelTypeOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFieldLabelType) *string { return v.FieldId }).(pulumi.StringPtrOutput)
}

// The visibility of the field label.
func (o TemplateFieldLabelTypeOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFieldLabelType) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateFieldLabelTypePtrOutput struct{ *pulumi.OutputState }

func (TemplateFieldLabelTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldLabelType)(nil)).Elem()
}

func (o TemplateFieldLabelTypePtrOutput) ToTemplateFieldLabelTypePtrOutput() TemplateFieldLabelTypePtrOutput {
	return o
}

func (o TemplateFieldLabelTypePtrOutput) ToTemplateFieldLabelTypePtrOutputWithContext(ctx context.Context) TemplateFieldLabelTypePtrOutput {
	return o
}

func (o TemplateFieldLabelTypePtrOutput) Elem() TemplateFieldLabelTypeOutput {
	return o.ApplyT(func(v *TemplateFieldLabelType) TemplateFieldLabelType {
		if v != nil {
			return *v
		}
		var ret TemplateFieldLabelType
		return ret
	}).(TemplateFieldLabelTypeOutput)
}

// Indicates the field that is targeted by the field label.
func (o TemplateFieldLabelTypePtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFieldLabelType) *string {
		if v == nil {
			return nil
		}
		return v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The visibility of the field label.
func (o TemplateFieldLabelTypePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFieldLabelType) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateFieldSeriesItem struct {
	// The axis that you are binding the field to.
	AxisBinding TemplateAxisBinding `pulumi:"axisBinding"`
	// The field ID of the field for which you are setting the axis binding.
	FieldId string `pulumi:"fieldId"`
	// The options that determine the presentation of line series associated to the field.
	Settings *TemplateLineChartSeriesSettings `pulumi:"settings"`
}

// TemplateFieldSeriesItemInput is an input type that accepts TemplateFieldSeriesItemArgs and TemplateFieldSeriesItemOutput values.
// You can construct a concrete instance of `TemplateFieldSeriesItemInput` via:
//
//	TemplateFieldSeriesItemArgs{...}
type TemplateFieldSeriesItemInput interface {
	pulumi.Input

	ToTemplateFieldSeriesItemOutput() TemplateFieldSeriesItemOutput
	ToTemplateFieldSeriesItemOutputWithContext(context.Context) TemplateFieldSeriesItemOutput
}

type TemplateFieldSeriesItemArgs struct {
	// The axis that you are binding the field to.
	AxisBinding TemplateAxisBindingInput `pulumi:"axisBinding"`
	// The field ID of the field for which you are setting the axis binding.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The options that determine the presentation of line series associated to the field.
	Settings TemplateLineChartSeriesSettingsPtrInput `pulumi:"settings"`
}

func (TemplateFieldSeriesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldSeriesItem)(nil)).Elem()
}

func (i TemplateFieldSeriesItemArgs) ToTemplateFieldSeriesItemOutput() TemplateFieldSeriesItemOutput {
	return i.ToTemplateFieldSeriesItemOutputWithContext(context.Background())
}

func (i TemplateFieldSeriesItemArgs) ToTemplateFieldSeriesItemOutputWithContext(ctx context.Context) TemplateFieldSeriesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSeriesItemOutput)
}

func (i TemplateFieldSeriesItemArgs) ToTemplateFieldSeriesItemPtrOutput() TemplateFieldSeriesItemPtrOutput {
	return i.ToTemplateFieldSeriesItemPtrOutputWithContext(context.Background())
}

func (i TemplateFieldSeriesItemArgs) ToTemplateFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateFieldSeriesItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSeriesItemOutput).ToTemplateFieldSeriesItemPtrOutputWithContext(ctx)
}

// TemplateFieldSeriesItemPtrInput is an input type that accepts TemplateFieldSeriesItemArgs, TemplateFieldSeriesItemPtr and TemplateFieldSeriesItemPtrOutput values.
// You can construct a concrete instance of `TemplateFieldSeriesItemPtrInput` via:
//
//	        TemplateFieldSeriesItemArgs{...}
//
//	or:
//
//	        nil
type TemplateFieldSeriesItemPtrInput interface {
	pulumi.Input

	ToTemplateFieldSeriesItemPtrOutput() TemplateFieldSeriesItemPtrOutput
	ToTemplateFieldSeriesItemPtrOutputWithContext(context.Context) TemplateFieldSeriesItemPtrOutput
}

type templateFieldSeriesItemPtrType TemplateFieldSeriesItemArgs

func TemplateFieldSeriesItemPtr(v *TemplateFieldSeriesItemArgs) TemplateFieldSeriesItemPtrInput {
	return (*templateFieldSeriesItemPtrType)(v)
}

func (*templateFieldSeriesItemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldSeriesItem)(nil)).Elem()
}

func (i *templateFieldSeriesItemPtrType) ToTemplateFieldSeriesItemPtrOutput() TemplateFieldSeriesItemPtrOutput {
	return i.ToTemplateFieldSeriesItemPtrOutputWithContext(context.Background())
}

func (i *templateFieldSeriesItemPtrType) ToTemplateFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateFieldSeriesItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSeriesItemPtrOutput)
}

type TemplateFieldSeriesItemOutput struct{ *pulumi.OutputState }

func (TemplateFieldSeriesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldSeriesItem)(nil)).Elem()
}

func (o TemplateFieldSeriesItemOutput) ToTemplateFieldSeriesItemOutput() TemplateFieldSeriesItemOutput {
	return o
}

func (o TemplateFieldSeriesItemOutput) ToTemplateFieldSeriesItemOutputWithContext(ctx context.Context) TemplateFieldSeriesItemOutput {
	return o
}

func (o TemplateFieldSeriesItemOutput) ToTemplateFieldSeriesItemPtrOutput() TemplateFieldSeriesItemPtrOutput {
	return o.ToTemplateFieldSeriesItemPtrOutputWithContext(context.Background())
}

func (o TemplateFieldSeriesItemOutput) ToTemplateFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateFieldSeriesItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFieldSeriesItem) *TemplateFieldSeriesItem {
		return &v
	}).(TemplateFieldSeriesItemPtrOutput)
}

// The axis that you are binding the field to.
func (o TemplateFieldSeriesItemOutput) AxisBinding() TemplateAxisBindingOutput {
	return o.ApplyT(func(v TemplateFieldSeriesItem) TemplateAxisBinding { return v.AxisBinding }).(TemplateAxisBindingOutput)
}

// The field ID of the field for which you are setting the axis binding.
func (o TemplateFieldSeriesItemOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFieldSeriesItem) string { return v.FieldId }).(pulumi.StringOutput)
}

// The options that determine the presentation of line series associated to the field.
func (o TemplateFieldSeriesItemOutput) Settings() TemplateLineChartSeriesSettingsPtrOutput {
	return o.ApplyT(func(v TemplateFieldSeriesItem) *TemplateLineChartSeriesSettings { return v.Settings }).(TemplateLineChartSeriesSettingsPtrOutput)
}

type TemplateFieldSeriesItemPtrOutput struct{ *pulumi.OutputState }

func (TemplateFieldSeriesItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldSeriesItem)(nil)).Elem()
}

func (o TemplateFieldSeriesItemPtrOutput) ToTemplateFieldSeriesItemPtrOutput() TemplateFieldSeriesItemPtrOutput {
	return o
}

func (o TemplateFieldSeriesItemPtrOutput) ToTemplateFieldSeriesItemPtrOutputWithContext(ctx context.Context) TemplateFieldSeriesItemPtrOutput {
	return o
}

func (o TemplateFieldSeriesItemPtrOutput) Elem() TemplateFieldSeriesItemOutput {
	return o.ApplyT(func(v *TemplateFieldSeriesItem) TemplateFieldSeriesItem {
		if v != nil {
			return *v
		}
		var ret TemplateFieldSeriesItem
		return ret
	}).(TemplateFieldSeriesItemOutput)
}

// The axis that you are binding the field to.
func (o TemplateFieldSeriesItemPtrOutput) AxisBinding() TemplateAxisBindingPtrOutput {
	return o.ApplyT(func(v *TemplateFieldSeriesItem) *TemplateAxisBinding {
		if v == nil {
			return nil
		}
		return &v.AxisBinding
	}).(TemplateAxisBindingPtrOutput)
}

// The field ID of the field for which you are setting the axis binding.
func (o TemplateFieldSeriesItemPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFieldSeriesItem) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The options that determine the presentation of line series associated to the field.
func (o TemplateFieldSeriesItemPtrOutput) Settings() TemplateLineChartSeriesSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateFieldSeriesItem) *TemplateLineChartSeriesSettings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(TemplateLineChartSeriesSettingsPtrOutput)
}

type TemplateFieldSort struct {
	// The sort direction. Choose one of the following options:
	//
	// - `ASC` : Ascending
	// - `DESC` : Descending
	Direction TemplateSortDirection `pulumi:"direction"`
	// The sort configuration target field.
	FieldId string `pulumi:"fieldId"`
}

// TemplateFieldSortInput is an input type that accepts TemplateFieldSortArgs and TemplateFieldSortOutput values.
// You can construct a concrete instance of `TemplateFieldSortInput` via:
//
//	TemplateFieldSortArgs{...}
type TemplateFieldSortInput interface {
	pulumi.Input

	ToTemplateFieldSortOutput() TemplateFieldSortOutput
	ToTemplateFieldSortOutputWithContext(context.Context) TemplateFieldSortOutput
}

type TemplateFieldSortArgs struct {
	// The sort direction. Choose one of the following options:
	//
	// - `ASC` : Ascending
	// - `DESC` : Descending
	Direction TemplateSortDirectionInput `pulumi:"direction"`
	// The sort configuration target field.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
}

func (TemplateFieldSortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldSort)(nil)).Elem()
}

func (i TemplateFieldSortArgs) ToTemplateFieldSortOutput() TemplateFieldSortOutput {
	return i.ToTemplateFieldSortOutputWithContext(context.Background())
}

func (i TemplateFieldSortArgs) ToTemplateFieldSortOutputWithContext(ctx context.Context) TemplateFieldSortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSortOutput)
}

func (i TemplateFieldSortArgs) ToTemplateFieldSortPtrOutput() TemplateFieldSortPtrOutput {
	return i.ToTemplateFieldSortPtrOutputWithContext(context.Background())
}

func (i TemplateFieldSortArgs) ToTemplateFieldSortPtrOutputWithContext(ctx context.Context) TemplateFieldSortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSortOutput).ToTemplateFieldSortPtrOutputWithContext(ctx)
}

// TemplateFieldSortPtrInput is an input type that accepts TemplateFieldSortArgs, TemplateFieldSortPtr and TemplateFieldSortPtrOutput values.
// You can construct a concrete instance of `TemplateFieldSortPtrInput` via:
//
//	        TemplateFieldSortArgs{...}
//
//	or:
//
//	        nil
type TemplateFieldSortPtrInput interface {
	pulumi.Input

	ToTemplateFieldSortPtrOutput() TemplateFieldSortPtrOutput
	ToTemplateFieldSortPtrOutputWithContext(context.Context) TemplateFieldSortPtrOutput
}

type templateFieldSortPtrType TemplateFieldSortArgs

func TemplateFieldSortPtr(v *TemplateFieldSortArgs) TemplateFieldSortPtrInput {
	return (*templateFieldSortPtrType)(v)
}

func (*templateFieldSortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldSort)(nil)).Elem()
}

func (i *templateFieldSortPtrType) ToTemplateFieldSortPtrOutput() TemplateFieldSortPtrOutput {
	return i.ToTemplateFieldSortPtrOutputWithContext(context.Background())
}

func (i *templateFieldSortPtrType) ToTemplateFieldSortPtrOutputWithContext(ctx context.Context) TemplateFieldSortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSortPtrOutput)
}

type TemplateFieldSortOutput struct{ *pulumi.OutputState }

func (TemplateFieldSortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldSort)(nil)).Elem()
}

func (o TemplateFieldSortOutput) ToTemplateFieldSortOutput() TemplateFieldSortOutput {
	return o
}

func (o TemplateFieldSortOutput) ToTemplateFieldSortOutputWithContext(ctx context.Context) TemplateFieldSortOutput {
	return o
}

func (o TemplateFieldSortOutput) ToTemplateFieldSortPtrOutput() TemplateFieldSortPtrOutput {
	return o.ToTemplateFieldSortPtrOutputWithContext(context.Background())
}

func (o TemplateFieldSortOutput) ToTemplateFieldSortPtrOutputWithContext(ctx context.Context) TemplateFieldSortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFieldSort) *TemplateFieldSort {
		return &v
	}).(TemplateFieldSortPtrOutput)
}

// The sort direction. Choose one of the following options:
//
// - `ASC` : Ascending
// - `DESC` : Descending
func (o TemplateFieldSortOutput) Direction() TemplateSortDirectionOutput {
	return o.ApplyT(func(v TemplateFieldSort) TemplateSortDirection { return v.Direction }).(TemplateSortDirectionOutput)
}

// The sort configuration target field.
func (o TemplateFieldSortOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFieldSort) string { return v.FieldId }).(pulumi.StringOutput)
}

type TemplateFieldSortPtrOutput struct{ *pulumi.OutputState }

func (TemplateFieldSortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldSort)(nil)).Elem()
}

func (o TemplateFieldSortPtrOutput) ToTemplateFieldSortPtrOutput() TemplateFieldSortPtrOutput {
	return o
}

func (o TemplateFieldSortPtrOutput) ToTemplateFieldSortPtrOutputWithContext(ctx context.Context) TemplateFieldSortPtrOutput {
	return o
}

func (o TemplateFieldSortPtrOutput) Elem() TemplateFieldSortOutput {
	return o.ApplyT(func(v *TemplateFieldSort) TemplateFieldSort {
		if v != nil {
			return *v
		}
		var ret TemplateFieldSort
		return ret
	}).(TemplateFieldSortOutput)
}

// The sort direction. Choose one of the following options:
//
// - `ASC` : Ascending
// - `DESC` : Descending
func (o TemplateFieldSortPtrOutput) Direction() TemplateSortDirectionPtrOutput {
	return o.ApplyT(func(v *TemplateFieldSort) *TemplateSortDirection {
		if v == nil {
			return nil
		}
		return &v.Direction
	}).(TemplateSortDirectionPtrOutput)
}

// The sort configuration target field.
func (o TemplateFieldSortPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFieldSort) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

type TemplateFieldSortOptions struct {
	// The sort configuration for a column that is not used in a field well.
	ColumnSort *TemplateColumnSort `pulumi:"columnSort"`
	// The sort configuration for a field in a field well.
	FieldSort *TemplateFieldSort `pulumi:"fieldSort"`
}

// TemplateFieldSortOptionsInput is an input type that accepts TemplateFieldSortOptionsArgs and TemplateFieldSortOptionsOutput values.
// You can construct a concrete instance of `TemplateFieldSortOptionsInput` via:
//
//	TemplateFieldSortOptionsArgs{...}
type TemplateFieldSortOptionsInput interface {
	pulumi.Input

	ToTemplateFieldSortOptionsOutput() TemplateFieldSortOptionsOutput
	ToTemplateFieldSortOptionsOutputWithContext(context.Context) TemplateFieldSortOptionsOutput
}

type TemplateFieldSortOptionsArgs struct {
	// The sort configuration for a column that is not used in a field well.
	ColumnSort TemplateColumnSortPtrInput `pulumi:"columnSort"`
	// The sort configuration for a field in a field well.
	FieldSort TemplateFieldSortPtrInput `pulumi:"fieldSort"`
}

func (TemplateFieldSortOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldSortOptions)(nil)).Elem()
}

func (i TemplateFieldSortOptionsArgs) ToTemplateFieldSortOptionsOutput() TemplateFieldSortOptionsOutput {
	return i.ToTemplateFieldSortOptionsOutputWithContext(context.Background())
}

func (i TemplateFieldSortOptionsArgs) ToTemplateFieldSortOptionsOutputWithContext(ctx context.Context) TemplateFieldSortOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSortOptionsOutput)
}

// TemplateFieldSortOptionsArrayInput is an input type that accepts TemplateFieldSortOptionsArray and TemplateFieldSortOptionsArrayOutput values.
// You can construct a concrete instance of `TemplateFieldSortOptionsArrayInput` via:
//
//	TemplateFieldSortOptionsArray{ TemplateFieldSortOptionsArgs{...} }
type TemplateFieldSortOptionsArrayInput interface {
	pulumi.Input

	ToTemplateFieldSortOptionsArrayOutput() TemplateFieldSortOptionsArrayOutput
	ToTemplateFieldSortOptionsArrayOutputWithContext(context.Context) TemplateFieldSortOptionsArrayOutput
}

type TemplateFieldSortOptionsArray []TemplateFieldSortOptionsInput

func (TemplateFieldSortOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFieldSortOptions)(nil)).Elem()
}

func (i TemplateFieldSortOptionsArray) ToTemplateFieldSortOptionsArrayOutput() TemplateFieldSortOptionsArrayOutput {
	return i.ToTemplateFieldSortOptionsArrayOutputWithContext(context.Background())
}

func (i TemplateFieldSortOptionsArray) ToTemplateFieldSortOptionsArrayOutputWithContext(ctx context.Context) TemplateFieldSortOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateFieldSortOptionsOutput struct{ *pulumi.OutputState }

func (TemplateFieldSortOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldSortOptions)(nil)).Elem()
}

func (o TemplateFieldSortOptionsOutput) ToTemplateFieldSortOptionsOutput() TemplateFieldSortOptionsOutput {
	return o
}

func (o TemplateFieldSortOptionsOutput) ToTemplateFieldSortOptionsOutputWithContext(ctx context.Context) TemplateFieldSortOptionsOutput {
	return o
}

// The sort configuration for a column that is not used in a field well.
func (o TemplateFieldSortOptionsOutput) ColumnSort() TemplateColumnSortPtrOutput {
	return o.ApplyT(func(v TemplateFieldSortOptions) *TemplateColumnSort { return v.ColumnSort }).(TemplateColumnSortPtrOutput)
}

// The sort configuration for a field in a field well.
func (o TemplateFieldSortOptionsOutput) FieldSort() TemplateFieldSortPtrOutput {
	return o.ApplyT(func(v TemplateFieldSortOptions) *TemplateFieldSort { return v.FieldSort }).(TemplateFieldSortPtrOutput)
}

type TemplateFieldSortOptionsArrayOutput struct{ *pulumi.OutputState }

func (TemplateFieldSortOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFieldSortOptions)(nil)).Elem()
}

func (o TemplateFieldSortOptionsArrayOutput) ToTemplateFieldSortOptionsArrayOutput() TemplateFieldSortOptionsArrayOutput {
	return o
}

func (o TemplateFieldSortOptionsArrayOutput) ToTemplateFieldSortOptionsArrayOutputWithContext(ctx context.Context) TemplateFieldSortOptionsArrayOutput {
	return o
}

func (o TemplateFieldSortOptionsArrayOutput) Index(i pulumi.IntInput) TemplateFieldSortOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateFieldSortOptions {
		return vs[0].([]TemplateFieldSortOptions)[vs[1].(int)]
	}).(TemplateFieldSortOptionsOutput)
}

type TemplateFieldTooltipItem struct {
	// The unique ID of the field that is targeted by the tooltip.
	FieldId string `pulumi:"fieldId"`
	// The label of the tooltip item.
	Label *string `pulumi:"label"`
	// Determines the target of the field tooltip item in a combo chart visual.
	TooltipTarget *TemplateTooltipTarget `pulumi:"tooltipTarget"`
	// The visibility of the tooltip item.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateFieldTooltipItemInput is an input type that accepts TemplateFieldTooltipItemArgs and TemplateFieldTooltipItemOutput values.
// You can construct a concrete instance of `TemplateFieldTooltipItemInput` via:
//
//	TemplateFieldTooltipItemArgs{...}
type TemplateFieldTooltipItemInput interface {
	pulumi.Input

	ToTemplateFieldTooltipItemOutput() TemplateFieldTooltipItemOutput
	ToTemplateFieldTooltipItemOutputWithContext(context.Context) TemplateFieldTooltipItemOutput
}

type TemplateFieldTooltipItemArgs struct {
	// The unique ID of the field that is targeted by the tooltip.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The label of the tooltip item.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Determines the target of the field tooltip item in a combo chart visual.
	TooltipTarget TemplateTooltipTargetPtrInput `pulumi:"tooltipTarget"`
	// The visibility of the tooltip item.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateFieldTooltipItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldTooltipItem)(nil)).Elem()
}

func (i TemplateFieldTooltipItemArgs) ToTemplateFieldTooltipItemOutput() TemplateFieldTooltipItemOutput {
	return i.ToTemplateFieldTooltipItemOutputWithContext(context.Background())
}

func (i TemplateFieldTooltipItemArgs) ToTemplateFieldTooltipItemOutputWithContext(ctx context.Context) TemplateFieldTooltipItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldTooltipItemOutput)
}

func (i TemplateFieldTooltipItemArgs) ToTemplateFieldTooltipItemPtrOutput() TemplateFieldTooltipItemPtrOutput {
	return i.ToTemplateFieldTooltipItemPtrOutputWithContext(context.Background())
}

func (i TemplateFieldTooltipItemArgs) ToTemplateFieldTooltipItemPtrOutputWithContext(ctx context.Context) TemplateFieldTooltipItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldTooltipItemOutput).ToTemplateFieldTooltipItemPtrOutputWithContext(ctx)
}

// TemplateFieldTooltipItemPtrInput is an input type that accepts TemplateFieldTooltipItemArgs, TemplateFieldTooltipItemPtr and TemplateFieldTooltipItemPtrOutput values.
// You can construct a concrete instance of `TemplateFieldTooltipItemPtrInput` via:
//
//	        TemplateFieldTooltipItemArgs{...}
//
//	or:
//
//	        nil
type TemplateFieldTooltipItemPtrInput interface {
	pulumi.Input

	ToTemplateFieldTooltipItemPtrOutput() TemplateFieldTooltipItemPtrOutput
	ToTemplateFieldTooltipItemPtrOutputWithContext(context.Context) TemplateFieldTooltipItemPtrOutput
}

type templateFieldTooltipItemPtrType TemplateFieldTooltipItemArgs

func TemplateFieldTooltipItemPtr(v *TemplateFieldTooltipItemArgs) TemplateFieldTooltipItemPtrInput {
	return (*templateFieldTooltipItemPtrType)(v)
}

func (*templateFieldTooltipItemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldTooltipItem)(nil)).Elem()
}

func (i *templateFieldTooltipItemPtrType) ToTemplateFieldTooltipItemPtrOutput() TemplateFieldTooltipItemPtrOutput {
	return i.ToTemplateFieldTooltipItemPtrOutputWithContext(context.Background())
}

func (i *templateFieldTooltipItemPtrType) ToTemplateFieldTooltipItemPtrOutputWithContext(ctx context.Context) TemplateFieldTooltipItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFieldTooltipItemPtrOutput)
}

type TemplateFieldTooltipItemOutput struct{ *pulumi.OutputState }

func (TemplateFieldTooltipItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFieldTooltipItem)(nil)).Elem()
}

func (o TemplateFieldTooltipItemOutput) ToTemplateFieldTooltipItemOutput() TemplateFieldTooltipItemOutput {
	return o
}

func (o TemplateFieldTooltipItemOutput) ToTemplateFieldTooltipItemOutputWithContext(ctx context.Context) TemplateFieldTooltipItemOutput {
	return o
}

func (o TemplateFieldTooltipItemOutput) ToTemplateFieldTooltipItemPtrOutput() TemplateFieldTooltipItemPtrOutput {
	return o.ToTemplateFieldTooltipItemPtrOutputWithContext(context.Background())
}

func (o TemplateFieldTooltipItemOutput) ToTemplateFieldTooltipItemPtrOutputWithContext(ctx context.Context) TemplateFieldTooltipItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFieldTooltipItem) *TemplateFieldTooltipItem {
		return &v
	}).(TemplateFieldTooltipItemPtrOutput)
}

// The unique ID of the field that is targeted by the tooltip.
func (o TemplateFieldTooltipItemOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFieldTooltipItem) string { return v.FieldId }).(pulumi.StringOutput)
}

// The label of the tooltip item.
func (o TemplateFieldTooltipItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFieldTooltipItem) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Determines the target of the field tooltip item in a combo chart visual.
func (o TemplateFieldTooltipItemOutput) TooltipTarget() TemplateTooltipTargetPtrOutput {
	return o.ApplyT(func(v TemplateFieldTooltipItem) *TemplateTooltipTarget { return v.TooltipTarget }).(TemplateTooltipTargetPtrOutput)
}

// The visibility of the tooltip item.
func (o TemplateFieldTooltipItemOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFieldTooltipItem) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateFieldTooltipItemPtrOutput struct{ *pulumi.OutputState }

func (TemplateFieldTooltipItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFieldTooltipItem)(nil)).Elem()
}

func (o TemplateFieldTooltipItemPtrOutput) ToTemplateFieldTooltipItemPtrOutput() TemplateFieldTooltipItemPtrOutput {
	return o
}

func (o TemplateFieldTooltipItemPtrOutput) ToTemplateFieldTooltipItemPtrOutputWithContext(ctx context.Context) TemplateFieldTooltipItemPtrOutput {
	return o
}

func (o TemplateFieldTooltipItemPtrOutput) Elem() TemplateFieldTooltipItemOutput {
	return o.ApplyT(func(v *TemplateFieldTooltipItem) TemplateFieldTooltipItem {
		if v != nil {
			return *v
		}
		var ret TemplateFieldTooltipItem
		return ret
	}).(TemplateFieldTooltipItemOutput)
}

// The unique ID of the field that is targeted by the tooltip.
func (o TemplateFieldTooltipItemPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFieldTooltipItem) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The label of the tooltip item.
func (o TemplateFieldTooltipItemPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFieldTooltipItem) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Determines the target of the field tooltip item in a combo chart visual.
func (o TemplateFieldTooltipItemPtrOutput) TooltipTarget() TemplateTooltipTargetPtrOutput {
	return o.ApplyT(func(v *TemplateFieldTooltipItem) *TemplateTooltipTarget {
		if v == nil {
			return nil
		}
		return v.TooltipTarget
	}).(TemplateTooltipTargetPtrOutput)
}

// The visibility of the tooltip item.
func (o TemplateFieldTooltipItemPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFieldTooltipItem) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateFilledMapAggregatedFieldWells struct {
	// The aggregated location field well of the filled map. Values are grouped by location fields.
	Geospatial []TemplateDimensionField `pulumi:"geospatial"`
	// The aggregated color field well of a filled map. Values are aggregated based on location fields.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateFilledMapAggregatedFieldWellsInput is an input type that accepts TemplateFilledMapAggregatedFieldWellsArgs and TemplateFilledMapAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateFilledMapAggregatedFieldWellsInput` via:
//
//	TemplateFilledMapAggregatedFieldWellsArgs{...}
type TemplateFilledMapAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateFilledMapAggregatedFieldWellsOutput() TemplateFilledMapAggregatedFieldWellsOutput
	ToTemplateFilledMapAggregatedFieldWellsOutputWithContext(context.Context) TemplateFilledMapAggregatedFieldWellsOutput
}

type TemplateFilledMapAggregatedFieldWellsArgs struct {
	// The aggregated location field well of the filled map. Values are grouped by location fields.
	Geospatial TemplateDimensionFieldArrayInput `pulumi:"geospatial"`
	// The aggregated color field well of a filled map. Values are aggregated based on location fields.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateFilledMapAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateFilledMapAggregatedFieldWellsArgs) ToTemplateFilledMapAggregatedFieldWellsOutput() TemplateFilledMapAggregatedFieldWellsOutput {
	return i.ToTemplateFilledMapAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateFilledMapAggregatedFieldWellsArgs) ToTemplateFilledMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateFilledMapAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapAggregatedFieldWellsOutput)
}

func (i TemplateFilledMapAggregatedFieldWellsArgs) ToTemplateFilledMapAggregatedFieldWellsPtrOutput() TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateFilledMapAggregatedFieldWellsArgs) ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapAggregatedFieldWellsOutput).ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateFilledMapAggregatedFieldWellsPtrInput is an input type that accepts TemplateFilledMapAggregatedFieldWellsArgs, TemplateFilledMapAggregatedFieldWellsPtr and TemplateFilledMapAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateFilledMapAggregatedFieldWellsPtrInput` via:
//
//	        TemplateFilledMapAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateFilledMapAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateFilledMapAggregatedFieldWellsPtrOutput() TemplateFilledMapAggregatedFieldWellsPtrOutput
	ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateFilledMapAggregatedFieldWellsPtrOutput
}

type templateFilledMapAggregatedFieldWellsPtrType TemplateFilledMapAggregatedFieldWellsArgs

func TemplateFilledMapAggregatedFieldWellsPtr(v *TemplateFilledMapAggregatedFieldWellsArgs) TemplateFilledMapAggregatedFieldWellsPtrInput {
	return (*templateFilledMapAggregatedFieldWellsPtrType)(v)
}

func (*templateFilledMapAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapAggregatedFieldWells)(nil)).Elem()
}

func (i *templateFilledMapAggregatedFieldWellsPtrType) ToTemplateFilledMapAggregatedFieldWellsPtrOutput() TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateFilledMapAggregatedFieldWellsPtrType) ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapAggregatedFieldWellsPtrOutput)
}

type TemplateFilledMapAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateFilledMapAggregatedFieldWellsOutput) ToTemplateFilledMapAggregatedFieldWellsOutput() TemplateFilledMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateFilledMapAggregatedFieldWellsOutput) ToTemplateFilledMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateFilledMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateFilledMapAggregatedFieldWellsOutput) ToTemplateFilledMapAggregatedFieldWellsPtrOutput() TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return o.ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateFilledMapAggregatedFieldWellsOutput) ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilledMapAggregatedFieldWells) *TemplateFilledMapAggregatedFieldWells {
		return &v
	}).(TemplateFilledMapAggregatedFieldWellsPtrOutput)
}

// The aggregated location field well of the filled map. Values are grouped by location fields.
func (o TemplateFilledMapAggregatedFieldWellsOutput) Geospatial() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateFilledMapAggregatedFieldWells) []TemplateDimensionField { return v.Geospatial }).(TemplateDimensionFieldArrayOutput)
}

// The aggregated color field well of a filled map. Values are aggregated based on location fields.
func (o TemplateFilledMapAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateFilledMapAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateFilledMapAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateFilledMapAggregatedFieldWellsPtrOutput) ToTemplateFilledMapAggregatedFieldWellsPtrOutput() TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateFilledMapAggregatedFieldWellsPtrOutput) ToTemplateFilledMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateFilledMapAggregatedFieldWellsPtrOutput) Elem() TemplateFilledMapAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateFilledMapAggregatedFieldWells) TemplateFilledMapAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateFilledMapAggregatedFieldWells
		return ret
	}).(TemplateFilledMapAggregatedFieldWellsOutput)
}

// The aggregated location field well of the filled map. Values are grouped by location fields.
func (o TemplateFilledMapAggregatedFieldWellsPtrOutput) Geospatial() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateFilledMapAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Geospatial
	}).(TemplateDimensionFieldArrayOutput)
}

// The aggregated color field well of a filled map. Values are aggregated based on location fields.
func (o TemplateFilledMapAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateFilledMapAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateFilledMapConditionalFormatting struct {
	// Conditional formatting options of a `FilledMapVisual` .
	ConditionalFormattingOptions []TemplateFilledMapConditionalFormattingOption `pulumi:"conditionalFormattingOptions"`
}

// TemplateFilledMapConditionalFormattingInput is an input type that accepts TemplateFilledMapConditionalFormattingArgs and TemplateFilledMapConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateFilledMapConditionalFormattingInput` via:
//
//	TemplateFilledMapConditionalFormattingArgs{...}
type TemplateFilledMapConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateFilledMapConditionalFormattingOutput() TemplateFilledMapConditionalFormattingOutput
	ToTemplateFilledMapConditionalFormattingOutputWithContext(context.Context) TemplateFilledMapConditionalFormattingOutput
}

type TemplateFilledMapConditionalFormattingArgs struct {
	// Conditional formatting options of a `FilledMapVisual` .
	ConditionalFormattingOptions TemplateFilledMapConditionalFormattingOptionArrayInput `pulumi:"conditionalFormattingOptions"`
}

func (TemplateFilledMapConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapConditionalFormatting)(nil)).Elem()
}

func (i TemplateFilledMapConditionalFormattingArgs) ToTemplateFilledMapConditionalFormattingOutput() TemplateFilledMapConditionalFormattingOutput {
	return i.ToTemplateFilledMapConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateFilledMapConditionalFormattingArgs) ToTemplateFilledMapConditionalFormattingOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConditionalFormattingOutput)
}

func (i TemplateFilledMapConditionalFormattingArgs) ToTemplateFilledMapConditionalFormattingPtrOutput() TemplateFilledMapConditionalFormattingPtrOutput {
	return i.ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateFilledMapConditionalFormattingArgs) ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConditionalFormattingOutput).ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateFilledMapConditionalFormattingPtrInput is an input type that accepts TemplateFilledMapConditionalFormattingArgs, TemplateFilledMapConditionalFormattingPtr and TemplateFilledMapConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateFilledMapConditionalFormattingPtrInput` via:
//
//	        TemplateFilledMapConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateFilledMapConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateFilledMapConditionalFormattingPtrOutput() TemplateFilledMapConditionalFormattingPtrOutput
	ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(context.Context) TemplateFilledMapConditionalFormattingPtrOutput
}

type templateFilledMapConditionalFormattingPtrType TemplateFilledMapConditionalFormattingArgs

func TemplateFilledMapConditionalFormattingPtr(v *TemplateFilledMapConditionalFormattingArgs) TemplateFilledMapConditionalFormattingPtrInput {
	return (*templateFilledMapConditionalFormattingPtrType)(v)
}

func (*templateFilledMapConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapConditionalFormatting)(nil)).Elem()
}

func (i *templateFilledMapConditionalFormattingPtrType) ToTemplateFilledMapConditionalFormattingPtrOutput() TemplateFilledMapConditionalFormattingPtrOutput {
	return i.ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateFilledMapConditionalFormattingPtrType) ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConditionalFormattingPtrOutput)
}

type TemplateFilledMapConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapConditionalFormatting)(nil)).Elem()
}

func (o TemplateFilledMapConditionalFormattingOutput) ToTemplateFilledMapConditionalFormattingOutput() TemplateFilledMapConditionalFormattingOutput {
	return o
}

func (o TemplateFilledMapConditionalFormattingOutput) ToTemplateFilledMapConditionalFormattingOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingOutput {
	return o
}

func (o TemplateFilledMapConditionalFormattingOutput) ToTemplateFilledMapConditionalFormattingPtrOutput() TemplateFilledMapConditionalFormattingPtrOutput {
	return o.ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateFilledMapConditionalFormattingOutput) ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilledMapConditionalFormatting) *TemplateFilledMapConditionalFormatting {
		return &v
	}).(TemplateFilledMapConditionalFormattingPtrOutput)
}

// Conditional formatting options of a `FilledMapVisual` .
func (o TemplateFilledMapConditionalFormattingOutput) ConditionalFormattingOptions() TemplateFilledMapConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v TemplateFilledMapConditionalFormatting) []TemplateFilledMapConditionalFormattingOption {
		return v.ConditionalFormattingOptions
	}).(TemplateFilledMapConditionalFormattingOptionArrayOutput)
}

type TemplateFilledMapConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapConditionalFormatting)(nil)).Elem()
}

func (o TemplateFilledMapConditionalFormattingPtrOutput) ToTemplateFilledMapConditionalFormattingPtrOutput() TemplateFilledMapConditionalFormattingPtrOutput {
	return o
}

func (o TemplateFilledMapConditionalFormattingPtrOutput) ToTemplateFilledMapConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingPtrOutput {
	return o
}

func (o TemplateFilledMapConditionalFormattingPtrOutput) Elem() TemplateFilledMapConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateFilledMapConditionalFormatting) TemplateFilledMapConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateFilledMapConditionalFormatting
		return ret
	}).(TemplateFilledMapConditionalFormattingOutput)
}

// Conditional formatting options of a `FilledMapVisual` .
func (o TemplateFilledMapConditionalFormattingPtrOutput) ConditionalFormattingOptions() TemplateFilledMapConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v *TemplateFilledMapConditionalFormatting) []TemplateFilledMapConditionalFormattingOption {
		if v == nil {
			return nil
		}
		return v.ConditionalFormattingOptions
	}).(TemplateFilledMapConditionalFormattingOptionArrayOutput)
}

type TemplateFilledMapConditionalFormattingOption struct {
	// The conditional formatting that determines the shape of the filled map.
	Shape TemplateFilledMapShapeConditionalFormatting `pulumi:"shape"`
}

// TemplateFilledMapConditionalFormattingOptionInput is an input type that accepts TemplateFilledMapConditionalFormattingOptionArgs and TemplateFilledMapConditionalFormattingOptionOutput values.
// You can construct a concrete instance of `TemplateFilledMapConditionalFormattingOptionInput` via:
//
//	TemplateFilledMapConditionalFormattingOptionArgs{...}
type TemplateFilledMapConditionalFormattingOptionInput interface {
	pulumi.Input

	ToTemplateFilledMapConditionalFormattingOptionOutput() TemplateFilledMapConditionalFormattingOptionOutput
	ToTemplateFilledMapConditionalFormattingOptionOutputWithContext(context.Context) TemplateFilledMapConditionalFormattingOptionOutput
}

type TemplateFilledMapConditionalFormattingOptionArgs struct {
	// The conditional formatting that determines the shape of the filled map.
	Shape TemplateFilledMapShapeConditionalFormattingInput `pulumi:"shape"`
}

func (TemplateFilledMapConditionalFormattingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateFilledMapConditionalFormattingOptionArgs) ToTemplateFilledMapConditionalFormattingOptionOutput() TemplateFilledMapConditionalFormattingOptionOutput {
	return i.ToTemplateFilledMapConditionalFormattingOptionOutputWithContext(context.Background())
}

func (i TemplateFilledMapConditionalFormattingOptionArgs) ToTemplateFilledMapConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConditionalFormattingOptionOutput)
}

// TemplateFilledMapConditionalFormattingOptionArrayInput is an input type that accepts TemplateFilledMapConditionalFormattingOptionArray and TemplateFilledMapConditionalFormattingOptionArrayOutput values.
// You can construct a concrete instance of `TemplateFilledMapConditionalFormattingOptionArrayInput` via:
//
//	TemplateFilledMapConditionalFormattingOptionArray{ TemplateFilledMapConditionalFormattingOptionArgs{...} }
type TemplateFilledMapConditionalFormattingOptionArrayInput interface {
	pulumi.Input

	ToTemplateFilledMapConditionalFormattingOptionArrayOutput() TemplateFilledMapConditionalFormattingOptionArrayOutput
	ToTemplateFilledMapConditionalFormattingOptionArrayOutputWithContext(context.Context) TemplateFilledMapConditionalFormattingOptionArrayOutput
}

type TemplateFilledMapConditionalFormattingOptionArray []TemplateFilledMapConditionalFormattingOptionInput

func (TemplateFilledMapConditionalFormattingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilledMapConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateFilledMapConditionalFormattingOptionArray) ToTemplateFilledMapConditionalFormattingOptionArrayOutput() TemplateFilledMapConditionalFormattingOptionArrayOutput {
	return i.ToTemplateFilledMapConditionalFormattingOptionArrayOutputWithContext(context.Background())
}

func (i TemplateFilledMapConditionalFormattingOptionArray) ToTemplateFilledMapConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConditionalFormattingOptionArrayOutput)
}

type TemplateFilledMapConditionalFormattingOptionOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapConditionalFormattingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateFilledMapConditionalFormattingOptionOutput) ToTemplateFilledMapConditionalFormattingOptionOutput() TemplateFilledMapConditionalFormattingOptionOutput {
	return o
}

func (o TemplateFilledMapConditionalFormattingOptionOutput) ToTemplateFilledMapConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingOptionOutput {
	return o
}

// The conditional formatting that determines the shape of the filled map.
func (o TemplateFilledMapConditionalFormattingOptionOutput) Shape() TemplateFilledMapShapeConditionalFormattingOutput {
	return o.ApplyT(func(v TemplateFilledMapConditionalFormattingOption) TemplateFilledMapShapeConditionalFormatting {
		return v.Shape
	}).(TemplateFilledMapShapeConditionalFormattingOutput)
}

type TemplateFilledMapConditionalFormattingOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapConditionalFormattingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilledMapConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateFilledMapConditionalFormattingOptionArrayOutput) ToTemplateFilledMapConditionalFormattingOptionArrayOutput() TemplateFilledMapConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateFilledMapConditionalFormattingOptionArrayOutput) ToTemplateFilledMapConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateFilledMapConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateFilledMapConditionalFormattingOptionArrayOutput) Index(i pulumi.IntInput) TemplateFilledMapConditionalFormattingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateFilledMapConditionalFormattingOption {
		return vs[0].([]TemplateFilledMapConditionalFormattingOption)[vs[1].(int)]
	}).(TemplateFilledMapConditionalFormattingOptionOutput)
}

type TemplateFilledMapConfiguration struct {
	// The field wells of the visual.
	FieldWells *TemplateFilledMapFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The map style options of the filled map visual.
	MapStyleOptions *TemplateGeospatialMapStyleOptions `pulumi:"mapStyleOptions"`
	// The sort configuration of a `FilledMapVisual` .
	SortConfiguration *TemplateFilledMapSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The window options of the filled map visual.
	WindowOptions *TemplateGeospatialWindowOptions `pulumi:"windowOptions"`
}

// TemplateFilledMapConfigurationInput is an input type that accepts TemplateFilledMapConfigurationArgs and TemplateFilledMapConfigurationOutput values.
// You can construct a concrete instance of `TemplateFilledMapConfigurationInput` via:
//
//	TemplateFilledMapConfigurationArgs{...}
type TemplateFilledMapConfigurationInput interface {
	pulumi.Input

	ToTemplateFilledMapConfigurationOutput() TemplateFilledMapConfigurationOutput
	ToTemplateFilledMapConfigurationOutputWithContext(context.Context) TemplateFilledMapConfigurationOutput
}

type TemplateFilledMapConfigurationArgs struct {
	// The field wells of the visual.
	FieldWells TemplateFilledMapFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The map style options of the filled map visual.
	MapStyleOptions TemplateGeospatialMapStyleOptionsPtrInput `pulumi:"mapStyleOptions"`
	// The sort configuration of a `FilledMapVisual` .
	SortConfiguration TemplateFilledMapSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The window options of the filled map visual.
	WindowOptions TemplateGeospatialWindowOptionsPtrInput `pulumi:"windowOptions"`
}

func (TemplateFilledMapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapConfiguration)(nil)).Elem()
}

func (i TemplateFilledMapConfigurationArgs) ToTemplateFilledMapConfigurationOutput() TemplateFilledMapConfigurationOutput {
	return i.ToTemplateFilledMapConfigurationOutputWithContext(context.Background())
}

func (i TemplateFilledMapConfigurationArgs) ToTemplateFilledMapConfigurationOutputWithContext(ctx context.Context) TemplateFilledMapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConfigurationOutput)
}

func (i TemplateFilledMapConfigurationArgs) ToTemplateFilledMapConfigurationPtrOutput() TemplateFilledMapConfigurationPtrOutput {
	return i.ToTemplateFilledMapConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFilledMapConfigurationArgs) ToTemplateFilledMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConfigurationOutput).ToTemplateFilledMapConfigurationPtrOutputWithContext(ctx)
}

// TemplateFilledMapConfigurationPtrInput is an input type that accepts TemplateFilledMapConfigurationArgs, TemplateFilledMapConfigurationPtr and TemplateFilledMapConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFilledMapConfigurationPtrInput` via:
//
//	        TemplateFilledMapConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFilledMapConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFilledMapConfigurationPtrOutput() TemplateFilledMapConfigurationPtrOutput
	ToTemplateFilledMapConfigurationPtrOutputWithContext(context.Context) TemplateFilledMapConfigurationPtrOutput
}

type templateFilledMapConfigurationPtrType TemplateFilledMapConfigurationArgs

func TemplateFilledMapConfigurationPtr(v *TemplateFilledMapConfigurationArgs) TemplateFilledMapConfigurationPtrInput {
	return (*templateFilledMapConfigurationPtrType)(v)
}

func (*templateFilledMapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapConfiguration)(nil)).Elem()
}

func (i *templateFilledMapConfigurationPtrType) ToTemplateFilledMapConfigurationPtrOutput() TemplateFilledMapConfigurationPtrOutput {
	return i.ToTemplateFilledMapConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFilledMapConfigurationPtrType) ToTemplateFilledMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapConfigurationPtrOutput)
}

type TemplateFilledMapConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapConfiguration)(nil)).Elem()
}

func (o TemplateFilledMapConfigurationOutput) ToTemplateFilledMapConfigurationOutput() TemplateFilledMapConfigurationOutput {
	return o
}

func (o TemplateFilledMapConfigurationOutput) ToTemplateFilledMapConfigurationOutputWithContext(ctx context.Context) TemplateFilledMapConfigurationOutput {
	return o
}

func (o TemplateFilledMapConfigurationOutput) ToTemplateFilledMapConfigurationPtrOutput() TemplateFilledMapConfigurationPtrOutput {
	return o.ToTemplateFilledMapConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFilledMapConfigurationOutput) ToTemplateFilledMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilledMapConfiguration) *TemplateFilledMapConfiguration {
		return &v
	}).(TemplateFilledMapConfigurationPtrOutput)
}

// The field wells of the visual.
func (o TemplateFilledMapConfigurationOutput) FieldWells() TemplateFilledMapFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapConfiguration) *TemplateFilledMapFieldWells { return v.FieldWells }).(TemplateFilledMapFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateFilledMapConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateFilledMapConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The map style options of the filled map visual.
func (o TemplateFilledMapConfigurationOutput) MapStyleOptions() TemplateGeospatialMapStyleOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapConfiguration) *TemplateGeospatialMapStyleOptions { return v.MapStyleOptions }).(TemplateGeospatialMapStyleOptionsPtrOutput)
}

// The sort configuration of a `FilledMapVisual` .
func (o TemplateFilledMapConfigurationOutput) SortConfiguration() TemplateFilledMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapConfiguration) *TemplateFilledMapSortConfiguration { return v.SortConfiguration }).(TemplateFilledMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateFilledMapConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The window options of the filled map visual.
func (o TemplateFilledMapConfigurationOutput) WindowOptions() TemplateGeospatialWindowOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapConfiguration) *TemplateGeospatialWindowOptions { return v.WindowOptions }).(TemplateGeospatialWindowOptionsPtrOutput)
}

type TemplateFilledMapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapConfiguration)(nil)).Elem()
}

func (o TemplateFilledMapConfigurationPtrOutput) ToTemplateFilledMapConfigurationPtrOutput() TemplateFilledMapConfigurationPtrOutput {
	return o
}

func (o TemplateFilledMapConfigurationPtrOutput) ToTemplateFilledMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapConfigurationPtrOutput {
	return o
}

func (o TemplateFilledMapConfigurationPtrOutput) Elem() TemplateFilledMapConfigurationOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) TemplateFilledMapConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFilledMapConfiguration
		return ret
	}).(TemplateFilledMapConfigurationOutput)
}

// The field wells of the visual.
func (o TemplateFilledMapConfigurationPtrOutput) FieldWells() TemplateFilledMapFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) *TemplateFilledMapFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateFilledMapFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateFilledMapConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateFilledMapConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The map style options of the filled map visual.
func (o TemplateFilledMapConfigurationPtrOutput) MapStyleOptions() TemplateGeospatialMapStyleOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) *TemplateGeospatialMapStyleOptions {
		if v == nil {
			return nil
		}
		return v.MapStyleOptions
	}).(TemplateGeospatialMapStyleOptionsPtrOutput)
}

// The sort configuration of a `FilledMapVisual` .
func (o TemplateFilledMapConfigurationPtrOutput) SortConfiguration() TemplateFilledMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) *TemplateFilledMapSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateFilledMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateFilledMapConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The window options of the filled map visual.
func (o TemplateFilledMapConfigurationPtrOutput) WindowOptions() TemplateGeospatialWindowOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapConfiguration) *TemplateGeospatialWindowOptions {
		if v == nil {
			return nil
		}
		return v.WindowOptions
	}).(TemplateGeospatialWindowOptionsPtrOutput)
}

type TemplateFilledMapFieldWells struct {
	// The aggregated field well of the filled map.
	FilledMapAggregatedFieldWells *TemplateFilledMapAggregatedFieldWells `pulumi:"filledMapAggregatedFieldWells"`
}

// TemplateFilledMapFieldWellsInput is an input type that accepts TemplateFilledMapFieldWellsArgs and TemplateFilledMapFieldWellsOutput values.
// You can construct a concrete instance of `TemplateFilledMapFieldWellsInput` via:
//
//	TemplateFilledMapFieldWellsArgs{...}
type TemplateFilledMapFieldWellsInput interface {
	pulumi.Input

	ToTemplateFilledMapFieldWellsOutput() TemplateFilledMapFieldWellsOutput
	ToTemplateFilledMapFieldWellsOutputWithContext(context.Context) TemplateFilledMapFieldWellsOutput
}

type TemplateFilledMapFieldWellsArgs struct {
	// The aggregated field well of the filled map.
	FilledMapAggregatedFieldWells TemplateFilledMapAggregatedFieldWellsPtrInput `pulumi:"filledMapAggregatedFieldWells"`
}

func (TemplateFilledMapFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapFieldWells)(nil)).Elem()
}

func (i TemplateFilledMapFieldWellsArgs) ToTemplateFilledMapFieldWellsOutput() TemplateFilledMapFieldWellsOutput {
	return i.ToTemplateFilledMapFieldWellsOutputWithContext(context.Background())
}

func (i TemplateFilledMapFieldWellsArgs) ToTemplateFilledMapFieldWellsOutputWithContext(ctx context.Context) TemplateFilledMapFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapFieldWellsOutput)
}

func (i TemplateFilledMapFieldWellsArgs) ToTemplateFilledMapFieldWellsPtrOutput() TemplateFilledMapFieldWellsPtrOutput {
	return i.ToTemplateFilledMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateFilledMapFieldWellsArgs) ToTemplateFilledMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapFieldWellsOutput).ToTemplateFilledMapFieldWellsPtrOutputWithContext(ctx)
}

// TemplateFilledMapFieldWellsPtrInput is an input type that accepts TemplateFilledMapFieldWellsArgs, TemplateFilledMapFieldWellsPtr and TemplateFilledMapFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateFilledMapFieldWellsPtrInput` via:
//
//	        TemplateFilledMapFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateFilledMapFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateFilledMapFieldWellsPtrOutput() TemplateFilledMapFieldWellsPtrOutput
	ToTemplateFilledMapFieldWellsPtrOutputWithContext(context.Context) TemplateFilledMapFieldWellsPtrOutput
}

type templateFilledMapFieldWellsPtrType TemplateFilledMapFieldWellsArgs

func TemplateFilledMapFieldWellsPtr(v *TemplateFilledMapFieldWellsArgs) TemplateFilledMapFieldWellsPtrInput {
	return (*templateFilledMapFieldWellsPtrType)(v)
}

func (*templateFilledMapFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapFieldWells)(nil)).Elem()
}

func (i *templateFilledMapFieldWellsPtrType) ToTemplateFilledMapFieldWellsPtrOutput() TemplateFilledMapFieldWellsPtrOutput {
	return i.ToTemplateFilledMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateFilledMapFieldWellsPtrType) ToTemplateFilledMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapFieldWellsPtrOutput)
}

type TemplateFilledMapFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapFieldWells)(nil)).Elem()
}

func (o TemplateFilledMapFieldWellsOutput) ToTemplateFilledMapFieldWellsOutput() TemplateFilledMapFieldWellsOutput {
	return o
}

func (o TemplateFilledMapFieldWellsOutput) ToTemplateFilledMapFieldWellsOutputWithContext(ctx context.Context) TemplateFilledMapFieldWellsOutput {
	return o
}

func (o TemplateFilledMapFieldWellsOutput) ToTemplateFilledMapFieldWellsPtrOutput() TemplateFilledMapFieldWellsPtrOutput {
	return o.ToTemplateFilledMapFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateFilledMapFieldWellsOutput) ToTemplateFilledMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilledMapFieldWells) *TemplateFilledMapFieldWells {
		return &v
	}).(TemplateFilledMapFieldWellsPtrOutput)
}

// The aggregated field well of the filled map.
func (o TemplateFilledMapFieldWellsOutput) FilledMapAggregatedFieldWells() TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapFieldWells) *TemplateFilledMapAggregatedFieldWells {
		return v.FilledMapAggregatedFieldWells
	}).(TemplateFilledMapAggregatedFieldWellsPtrOutput)
}

type TemplateFilledMapFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapFieldWells)(nil)).Elem()
}

func (o TemplateFilledMapFieldWellsPtrOutput) ToTemplateFilledMapFieldWellsPtrOutput() TemplateFilledMapFieldWellsPtrOutput {
	return o
}

func (o TemplateFilledMapFieldWellsPtrOutput) ToTemplateFilledMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFilledMapFieldWellsPtrOutput {
	return o
}

func (o TemplateFilledMapFieldWellsPtrOutput) Elem() TemplateFilledMapFieldWellsOutput {
	return o.ApplyT(func(v *TemplateFilledMapFieldWells) TemplateFilledMapFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateFilledMapFieldWells
		return ret
	}).(TemplateFilledMapFieldWellsOutput)
}

// The aggregated field well of the filled map.
func (o TemplateFilledMapFieldWellsPtrOutput) FilledMapAggregatedFieldWells() TemplateFilledMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapFieldWells) *TemplateFilledMapAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.FilledMapAggregatedFieldWells
	}).(TemplateFilledMapAggregatedFieldWellsPtrOutput)
}

type TemplateFilledMapShapeConditionalFormatting struct {
	// The field ID of the filled map shape.
	FieldId string `pulumi:"fieldId"`
	// The conditional formatting that determines the background color of a filled map's shape.
	Format *TemplateShapeConditionalFormat `pulumi:"format"`
}

// TemplateFilledMapShapeConditionalFormattingInput is an input type that accepts TemplateFilledMapShapeConditionalFormattingArgs and TemplateFilledMapShapeConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateFilledMapShapeConditionalFormattingInput` via:
//
//	TemplateFilledMapShapeConditionalFormattingArgs{...}
type TemplateFilledMapShapeConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateFilledMapShapeConditionalFormattingOutput() TemplateFilledMapShapeConditionalFormattingOutput
	ToTemplateFilledMapShapeConditionalFormattingOutputWithContext(context.Context) TemplateFilledMapShapeConditionalFormattingOutput
}

type TemplateFilledMapShapeConditionalFormattingArgs struct {
	// The field ID of the filled map shape.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The conditional formatting that determines the background color of a filled map's shape.
	Format TemplateShapeConditionalFormatPtrInput `pulumi:"format"`
}

func (TemplateFilledMapShapeConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapShapeConditionalFormatting)(nil)).Elem()
}

func (i TemplateFilledMapShapeConditionalFormattingArgs) ToTemplateFilledMapShapeConditionalFormattingOutput() TemplateFilledMapShapeConditionalFormattingOutput {
	return i.ToTemplateFilledMapShapeConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateFilledMapShapeConditionalFormattingArgs) ToTemplateFilledMapShapeConditionalFormattingOutputWithContext(ctx context.Context) TemplateFilledMapShapeConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapShapeConditionalFormattingOutput)
}

type TemplateFilledMapShapeConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapShapeConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapShapeConditionalFormatting)(nil)).Elem()
}

func (o TemplateFilledMapShapeConditionalFormattingOutput) ToTemplateFilledMapShapeConditionalFormattingOutput() TemplateFilledMapShapeConditionalFormattingOutput {
	return o
}

func (o TemplateFilledMapShapeConditionalFormattingOutput) ToTemplateFilledMapShapeConditionalFormattingOutputWithContext(ctx context.Context) TemplateFilledMapShapeConditionalFormattingOutput {
	return o
}

// The field ID of the filled map shape.
func (o TemplateFilledMapShapeConditionalFormattingOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilledMapShapeConditionalFormatting) string { return v.FieldId }).(pulumi.StringOutput)
}

// The conditional formatting that determines the background color of a filled map's shape.
func (o TemplateFilledMapShapeConditionalFormattingOutput) Format() TemplateShapeConditionalFormatPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapShapeConditionalFormatting) *TemplateShapeConditionalFormat { return v.Format }).(TemplateShapeConditionalFormatPtrOutput)
}

type TemplateFilledMapSortConfiguration struct {
	// The sort configuration of the location fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
}

// TemplateFilledMapSortConfigurationInput is an input type that accepts TemplateFilledMapSortConfigurationArgs and TemplateFilledMapSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateFilledMapSortConfigurationInput` via:
//
//	TemplateFilledMapSortConfigurationArgs{...}
type TemplateFilledMapSortConfigurationInput interface {
	pulumi.Input

	ToTemplateFilledMapSortConfigurationOutput() TemplateFilledMapSortConfigurationOutput
	ToTemplateFilledMapSortConfigurationOutputWithContext(context.Context) TemplateFilledMapSortConfigurationOutput
}

type TemplateFilledMapSortConfigurationArgs struct {
	// The sort configuration of the location fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (TemplateFilledMapSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapSortConfiguration)(nil)).Elem()
}

func (i TemplateFilledMapSortConfigurationArgs) ToTemplateFilledMapSortConfigurationOutput() TemplateFilledMapSortConfigurationOutput {
	return i.ToTemplateFilledMapSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateFilledMapSortConfigurationArgs) ToTemplateFilledMapSortConfigurationOutputWithContext(ctx context.Context) TemplateFilledMapSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapSortConfigurationOutput)
}

func (i TemplateFilledMapSortConfigurationArgs) ToTemplateFilledMapSortConfigurationPtrOutput() TemplateFilledMapSortConfigurationPtrOutput {
	return i.ToTemplateFilledMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFilledMapSortConfigurationArgs) ToTemplateFilledMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapSortConfigurationOutput).ToTemplateFilledMapSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateFilledMapSortConfigurationPtrInput is an input type that accepts TemplateFilledMapSortConfigurationArgs, TemplateFilledMapSortConfigurationPtr and TemplateFilledMapSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFilledMapSortConfigurationPtrInput` via:
//
//	        TemplateFilledMapSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFilledMapSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFilledMapSortConfigurationPtrOutput() TemplateFilledMapSortConfigurationPtrOutput
	ToTemplateFilledMapSortConfigurationPtrOutputWithContext(context.Context) TemplateFilledMapSortConfigurationPtrOutput
}

type templateFilledMapSortConfigurationPtrType TemplateFilledMapSortConfigurationArgs

func TemplateFilledMapSortConfigurationPtr(v *TemplateFilledMapSortConfigurationArgs) TemplateFilledMapSortConfigurationPtrInput {
	return (*templateFilledMapSortConfigurationPtrType)(v)
}

func (*templateFilledMapSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapSortConfiguration)(nil)).Elem()
}

func (i *templateFilledMapSortConfigurationPtrType) ToTemplateFilledMapSortConfigurationPtrOutput() TemplateFilledMapSortConfigurationPtrOutput {
	return i.ToTemplateFilledMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFilledMapSortConfigurationPtrType) ToTemplateFilledMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapSortConfigurationPtrOutput)
}

type TemplateFilledMapSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapSortConfiguration)(nil)).Elem()
}

func (o TemplateFilledMapSortConfigurationOutput) ToTemplateFilledMapSortConfigurationOutput() TemplateFilledMapSortConfigurationOutput {
	return o
}

func (o TemplateFilledMapSortConfigurationOutput) ToTemplateFilledMapSortConfigurationOutputWithContext(ctx context.Context) TemplateFilledMapSortConfigurationOutput {
	return o
}

func (o TemplateFilledMapSortConfigurationOutput) ToTemplateFilledMapSortConfigurationPtrOutput() TemplateFilledMapSortConfigurationPtrOutput {
	return o.ToTemplateFilledMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFilledMapSortConfigurationOutput) ToTemplateFilledMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilledMapSortConfiguration) *TemplateFilledMapSortConfiguration {
		return &v
	}).(TemplateFilledMapSortConfigurationPtrOutput)
}

// The sort configuration of the location fields.
func (o TemplateFilledMapSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateFilledMapSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateFilledMapSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapSortConfiguration)(nil)).Elem()
}

func (o TemplateFilledMapSortConfigurationPtrOutput) ToTemplateFilledMapSortConfigurationPtrOutput() TemplateFilledMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateFilledMapSortConfigurationPtrOutput) ToTemplateFilledMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilledMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateFilledMapSortConfigurationPtrOutput) Elem() TemplateFilledMapSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateFilledMapSortConfiguration) TemplateFilledMapSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFilledMapSortConfiguration
		return ret
	}).(TemplateFilledMapSortConfigurationOutput)
}

// The sort configuration of the location fields.
func (o TemplateFilledMapSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateFilledMapSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateFilledMapVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateFilledMapConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The conditional formatting of a `FilledMapVisual` .
	ConditionalFormatting *TemplateFilledMapConditionalFormatting `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateFilledMapVisualInput is an input type that accepts TemplateFilledMapVisualArgs and TemplateFilledMapVisualOutput values.
// You can construct a concrete instance of `TemplateFilledMapVisualInput` via:
//
//	TemplateFilledMapVisualArgs{...}
type TemplateFilledMapVisualInput interface {
	pulumi.Input

	ToTemplateFilledMapVisualOutput() TemplateFilledMapVisualOutput
	ToTemplateFilledMapVisualOutputWithContext(context.Context) TemplateFilledMapVisualOutput
}

type TemplateFilledMapVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateFilledMapConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The conditional formatting of a `FilledMapVisual` .
	ConditionalFormatting TemplateFilledMapConditionalFormattingPtrInput `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateFilledMapVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapVisual)(nil)).Elem()
}

func (i TemplateFilledMapVisualArgs) ToTemplateFilledMapVisualOutput() TemplateFilledMapVisualOutput {
	return i.ToTemplateFilledMapVisualOutputWithContext(context.Background())
}

func (i TemplateFilledMapVisualArgs) ToTemplateFilledMapVisualOutputWithContext(ctx context.Context) TemplateFilledMapVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapVisualOutput)
}

func (i TemplateFilledMapVisualArgs) ToTemplateFilledMapVisualPtrOutput() TemplateFilledMapVisualPtrOutput {
	return i.ToTemplateFilledMapVisualPtrOutputWithContext(context.Background())
}

func (i TemplateFilledMapVisualArgs) ToTemplateFilledMapVisualPtrOutputWithContext(ctx context.Context) TemplateFilledMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapVisualOutput).ToTemplateFilledMapVisualPtrOutputWithContext(ctx)
}

// TemplateFilledMapVisualPtrInput is an input type that accepts TemplateFilledMapVisualArgs, TemplateFilledMapVisualPtr and TemplateFilledMapVisualPtrOutput values.
// You can construct a concrete instance of `TemplateFilledMapVisualPtrInput` via:
//
//	        TemplateFilledMapVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateFilledMapVisualPtrInput interface {
	pulumi.Input

	ToTemplateFilledMapVisualPtrOutput() TemplateFilledMapVisualPtrOutput
	ToTemplateFilledMapVisualPtrOutputWithContext(context.Context) TemplateFilledMapVisualPtrOutput
}

type templateFilledMapVisualPtrType TemplateFilledMapVisualArgs

func TemplateFilledMapVisualPtr(v *TemplateFilledMapVisualArgs) TemplateFilledMapVisualPtrInput {
	return (*templateFilledMapVisualPtrType)(v)
}

func (*templateFilledMapVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapVisual)(nil)).Elem()
}

func (i *templateFilledMapVisualPtrType) ToTemplateFilledMapVisualPtrOutput() TemplateFilledMapVisualPtrOutput {
	return i.ToTemplateFilledMapVisualPtrOutputWithContext(context.Background())
}

func (i *templateFilledMapVisualPtrType) ToTemplateFilledMapVisualPtrOutputWithContext(ctx context.Context) TemplateFilledMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilledMapVisualPtrOutput)
}

type TemplateFilledMapVisualOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilledMapVisual)(nil)).Elem()
}

func (o TemplateFilledMapVisualOutput) ToTemplateFilledMapVisualOutput() TemplateFilledMapVisualOutput {
	return o
}

func (o TemplateFilledMapVisualOutput) ToTemplateFilledMapVisualOutputWithContext(ctx context.Context) TemplateFilledMapVisualOutput {
	return o
}

func (o TemplateFilledMapVisualOutput) ToTemplateFilledMapVisualPtrOutput() TemplateFilledMapVisualPtrOutput {
	return o.ToTemplateFilledMapVisualPtrOutputWithContext(context.Background())
}

func (o TemplateFilledMapVisualOutput) ToTemplateFilledMapVisualPtrOutputWithContext(ctx context.Context) TemplateFilledMapVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilledMapVisual) *TemplateFilledMapVisual {
		return &v
	}).(TemplateFilledMapVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateFilledMapVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateFilledMapVisualOutput) ChartConfiguration() TemplateFilledMapConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) *TemplateFilledMapConfiguration { return v.ChartConfiguration }).(TemplateFilledMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateFilledMapVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The conditional formatting of a `FilledMapVisual` .
func (o TemplateFilledMapVisualOutput) ConditionalFormatting() TemplateFilledMapConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) *TemplateFilledMapConditionalFormatting {
		return v.ConditionalFormatting
	}).(TemplateFilledMapConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateFilledMapVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateFilledMapVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateFilledMapVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateFilledMapVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilledMapVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateFilledMapVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilledMapVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilledMapVisual)(nil)).Elem()
}

func (o TemplateFilledMapVisualPtrOutput) ToTemplateFilledMapVisualPtrOutput() TemplateFilledMapVisualPtrOutput {
	return o
}

func (o TemplateFilledMapVisualPtrOutput) ToTemplateFilledMapVisualPtrOutputWithContext(ctx context.Context) TemplateFilledMapVisualPtrOutput {
	return o
}

func (o TemplateFilledMapVisualPtrOutput) Elem() TemplateFilledMapVisualOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) TemplateFilledMapVisual {
		if v != nil {
			return *v
		}
		var ret TemplateFilledMapVisual
		return ret
	}).(TemplateFilledMapVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateFilledMapVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateFilledMapVisualPtrOutput) ChartConfiguration() TemplateFilledMapConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) *TemplateFilledMapConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateFilledMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateFilledMapVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The conditional formatting of a `FilledMapVisual` .
func (o TemplateFilledMapVisualPtrOutput) ConditionalFormatting() TemplateFilledMapConditionalFormattingPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) *TemplateFilledMapConditionalFormatting {
		if v == nil {
			return nil
		}
		return v.ConditionalFormatting
	}).(TemplateFilledMapConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateFilledMapVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateFilledMapVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateFilledMapVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateFilledMapVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilledMapVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateFilter struct {
	// A `CategoryFilter` filters text values.
	//
	// For more information, see [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html) in the *Amazon QuickSight User Guide* .
	CategoryFilter *TemplateCategoryFilter `pulumi:"categoryFilter"`
	// A `NestedFilter` filters data with a subset of data that is defined by the nested inner filter.
	NestedFilter *TemplateNestedFilter `pulumi:"nestedFilter"`
	// A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric value.
	NumericEqualityFilter *TemplateNumericEqualityFilter `pulumi:"numericEqualityFilter"`
	// A `NumericRangeFilter` filters numeric values that are either inside or outside a given numeric range.
	NumericRangeFilter *TemplateNumericRangeFilter `pulumi:"numericRangeFilter"`
	// A `RelativeDatesFilter` filters date values that are relative to a given date.
	RelativeDatesFilter *TemplateRelativeDatesFilter `pulumi:"relativeDatesFilter"`
	// A `TimeEqualityFilter` filters date-time values that equal or do not equal a given date/time value.
	TimeEqualityFilter *TemplateTimeEqualityFilter `pulumi:"timeEqualityFilter"`
	// A `TimeRangeFilter` filters date-time values that are either inside or outside a given date/time range.
	TimeRangeFilter *TemplateTimeRangeFilter `pulumi:"timeRangeFilter"`
	// A `TopBottomFilter` filters data to the top or bottom values for a given column.
	TopBottomFilter *TemplateTopBottomFilter `pulumi:"topBottomFilter"`
}

// TemplateFilterInput is an input type that accepts TemplateFilterArgs and TemplateFilterOutput values.
// You can construct a concrete instance of `TemplateFilterInput` via:
//
//	TemplateFilterArgs{...}
type TemplateFilterInput interface {
	pulumi.Input

	ToTemplateFilterOutput() TemplateFilterOutput
	ToTemplateFilterOutputWithContext(context.Context) TemplateFilterOutput
}

type TemplateFilterArgs struct {
	// A `CategoryFilter` filters text values.
	//
	// For more information, see [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html) in the *Amazon QuickSight User Guide* .
	CategoryFilter TemplateCategoryFilterPtrInput `pulumi:"categoryFilter"`
	// A `NestedFilter` filters data with a subset of data that is defined by the nested inner filter.
	NestedFilter TemplateNestedFilterPtrInput `pulumi:"nestedFilter"`
	// A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric value.
	NumericEqualityFilter TemplateNumericEqualityFilterPtrInput `pulumi:"numericEqualityFilter"`
	// A `NumericRangeFilter` filters numeric values that are either inside or outside a given numeric range.
	NumericRangeFilter TemplateNumericRangeFilterPtrInput `pulumi:"numericRangeFilter"`
	// A `RelativeDatesFilter` filters date values that are relative to a given date.
	RelativeDatesFilter TemplateRelativeDatesFilterPtrInput `pulumi:"relativeDatesFilter"`
	// A `TimeEqualityFilter` filters date-time values that equal or do not equal a given date/time value.
	TimeEqualityFilter TemplateTimeEqualityFilterPtrInput `pulumi:"timeEqualityFilter"`
	// A `TimeRangeFilter` filters date-time values that are either inside or outside a given date/time range.
	TimeRangeFilter TemplateTimeRangeFilterPtrInput `pulumi:"timeRangeFilter"`
	// A `TopBottomFilter` filters data to the top or bottom values for a given column.
	TopBottomFilter TemplateTopBottomFilterPtrInput `pulumi:"topBottomFilter"`
}

func (TemplateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilter)(nil)).Elem()
}

func (i TemplateFilterArgs) ToTemplateFilterOutput() TemplateFilterOutput {
	return i.ToTemplateFilterOutputWithContext(context.Background())
}

func (i TemplateFilterArgs) ToTemplateFilterOutputWithContext(ctx context.Context) TemplateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterOutput)
}

// TemplateFilterArrayInput is an input type that accepts TemplateFilterArray and TemplateFilterArrayOutput values.
// You can construct a concrete instance of `TemplateFilterArrayInput` via:
//
//	TemplateFilterArray{ TemplateFilterArgs{...} }
type TemplateFilterArrayInput interface {
	pulumi.Input

	ToTemplateFilterArrayOutput() TemplateFilterArrayOutput
	ToTemplateFilterArrayOutputWithContext(context.Context) TemplateFilterArrayOutput
}

type TemplateFilterArray []TemplateFilterInput

func (TemplateFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilter)(nil)).Elem()
}

func (i TemplateFilterArray) ToTemplateFilterArrayOutput() TemplateFilterArrayOutput {
	return i.ToTemplateFilterArrayOutputWithContext(context.Background())
}

func (i TemplateFilterArray) ToTemplateFilterArrayOutputWithContext(ctx context.Context) TemplateFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterArrayOutput)
}

type TemplateFilterOutput struct{ *pulumi.OutputState }

func (TemplateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilter)(nil)).Elem()
}

func (o TemplateFilterOutput) ToTemplateFilterOutput() TemplateFilterOutput {
	return o
}

func (o TemplateFilterOutput) ToTemplateFilterOutputWithContext(ctx context.Context) TemplateFilterOutput {
	return o
}

// A `CategoryFilter` filters text values.
//
// For more information, see [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html) in the *Amazon QuickSight User Guide* .
func (o TemplateFilterOutput) CategoryFilter() TemplateCategoryFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateCategoryFilter { return v.CategoryFilter }).(TemplateCategoryFilterPtrOutput)
}

// A `NestedFilter` filters data with a subset of data that is defined by the nested inner filter.
func (o TemplateFilterOutput) NestedFilter() TemplateNestedFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateNestedFilter { return v.NestedFilter }).(TemplateNestedFilterPtrOutput)
}

// A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric value.
func (o TemplateFilterOutput) NumericEqualityFilter() TemplateNumericEqualityFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateNumericEqualityFilter { return v.NumericEqualityFilter }).(TemplateNumericEqualityFilterPtrOutput)
}

// A `NumericRangeFilter` filters numeric values that are either inside or outside a given numeric range.
func (o TemplateFilterOutput) NumericRangeFilter() TemplateNumericRangeFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateNumericRangeFilter { return v.NumericRangeFilter }).(TemplateNumericRangeFilterPtrOutput)
}

// A `RelativeDatesFilter` filters date values that are relative to a given date.
func (o TemplateFilterOutput) RelativeDatesFilter() TemplateRelativeDatesFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateRelativeDatesFilter { return v.RelativeDatesFilter }).(TemplateRelativeDatesFilterPtrOutput)
}

// A `TimeEqualityFilter` filters date-time values that equal or do not equal a given date/time value.
func (o TemplateFilterOutput) TimeEqualityFilter() TemplateTimeEqualityFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateTimeEqualityFilter { return v.TimeEqualityFilter }).(TemplateTimeEqualityFilterPtrOutput)
}

// A `TimeRangeFilter` filters date-time values that are either inside or outside a given date/time range.
func (o TemplateFilterOutput) TimeRangeFilter() TemplateTimeRangeFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateTimeRangeFilter { return v.TimeRangeFilter }).(TemplateTimeRangeFilterPtrOutput)
}

// A `TopBottomFilter` filters data to the top or bottom values for a given column.
func (o TemplateFilterOutput) TopBottomFilter() TemplateTopBottomFilterPtrOutput {
	return o.ApplyT(func(v TemplateFilter) *TemplateTopBottomFilter { return v.TopBottomFilter }).(TemplateTopBottomFilterPtrOutput)
}

type TemplateFilterArrayOutput struct{ *pulumi.OutputState }

func (TemplateFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilter)(nil)).Elem()
}

func (o TemplateFilterArrayOutput) ToTemplateFilterArrayOutput() TemplateFilterArrayOutput {
	return o
}

func (o TemplateFilterArrayOutput) ToTemplateFilterArrayOutputWithContext(ctx context.Context) TemplateFilterArrayOutput {
	return o
}

func (o TemplateFilterArrayOutput) Index(i pulumi.IntInput) TemplateFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateFilter {
		return vs[0].([]TemplateFilter)[vs[1].(int)]
	}).(TemplateFilterOutput)
}

type TemplateFilterControl struct {
	// A control from a filter that is scoped across more than one sheet. This represents your filter control on a sheet
	CrossSheet *TemplateFilterCrossSheetControl `pulumi:"crossSheet"`
	// A control from a date filter that is used to specify date and time.
	DateTimePicker *TemplateFilterDateTimePickerControl `pulumi:"dateTimePicker"`
	// A control to display a dropdown list with buttons that are used to select a single value.
	Dropdown *TemplateFilterDropDownControl `pulumi:"dropdown"`
	// A control to display a list of buttons or boxes. This is used to select either a single value or multiple values.
	List *TemplateFilterListControl `pulumi:"list"`
	// A control from a date filter that is used to specify the relative date.
	RelativeDateTime *TemplateFilterRelativeDateTimeControl `pulumi:"relativeDateTime"`
	// A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
	Slider *TemplateFilterSliderControl `pulumi:"slider"`
	// A control to display a text box that is used to enter multiple entries.
	TextArea *TemplateFilterTextAreaControl `pulumi:"textArea"`
	// A control to display a text box that is used to enter a single entry.
	TextField *TemplateFilterTextFieldControl `pulumi:"textField"`
}

// TemplateFilterControlInput is an input type that accepts TemplateFilterControlArgs and TemplateFilterControlOutput values.
// You can construct a concrete instance of `TemplateFilterControlInput` via:
//
//	TemplateFilterControlArgs{...}
type TemplateFilterControlInput interface {
	pulumi.Input

	ToTemplateFilterControlOutput() TemplateFilterControlOutput
	ToTemplateFilterControlOutputWithContext(context.Context) TemplateFilterControlOutput
}

type TemplateFilterControlArgs struct {
	// A control from a filter that is scoped across more than one sheet. This represents your filter control on a sheet
	CrossSheet TemplateFilterCrossSheetControlPtrInput `pulumi:"crossSheet"`
	// A control from a date filter that is used to specify date and time.
	DateTimePicker TemplateFilterDateTimePickerControlPtrInput `pulumi:"dateTimePicker"`
	// A control to display a dropdown list with buttons that are used to select a single value.
	Dropdown TemplateFilterDropDownControlPtrInput `pulumi:"dropdown"`
	// A control to display a list of buttons or boxes. This is used to select either a single value or multiple values.
	List TemplateFilterListControlPtrInput `pulumi:"list"`
	// A control from a date filter that is used to specify the relative date.
	RelativeDateTime TemplateFilterRelativeDateTimeControlPtrInput `pulumi:"relativeDateTime"`
	// A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
	Slider TemplateFilterSliderControlPtrInput `pulumi:"slider"`
	// A control to display a text box that is used to enter multiple entries.
	TextArea TemplateFilterTextAreaControlPtrInput `pulumi:"textArea"`
	// A control to display a text box that is used to enter a single entry.
	TextField TemplateFilterTextFieldControlPtrInput `pulumi:"textField"`
}

func (TemplateFilterControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterControl)(nil)).Elem()
}

func (i TemplateFilterControlArgs) ToTemplateFilterControlOutput() TemplateFilterControlOutput {
	return i.ToTemplateFilterControlOutputWithContext(context.Background())
}

func (i TemplateFilterControlArgs) ToTemplateFilterControlOutputWithContext(ctx context.Context) TemplateFilterControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterControlOutput)
}

// TemplateFilterControlArrayInput is an input type that accepts TemplateFilterControlArray and TemplateFilterControlArrayOutput values.
// You can construct a concrete instance of `TemplateFilterControlArrayInput` via:
//
//	TemplateFilterControlArray{ TemplateFilterControlArgs{...} }
type TemplateFilterControlArrayInput interface {
	pulumi.Input

	ToTemplateFilterControlArrayOutput() TemplateFilterControlArrayOutput
	ToTemplateFilterControlArrayOutputWithContext(context.Context) TemplateFilterControlArrayOutput
}

type TemplateFilterControlArray []TemplateFilterControlInput

func (TemplateFilterControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilterControl)(nil)).Elem()
}

func (i TemplateFilterControlArray) ToTemplateFilterControlArrayOutput() TemplateFilterControlArrayOutput {
	return i.ToTemplateFilterControlArrayOutputWithContext(context.Background())
}

func (i TemplateFilterControlArray) ToTemplateFilterControlArrayOutputWithContext(ctx context.Context) TemplateFilterControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterControlArrayOutput)
}

type TemplateFilterControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterControl)(nil)).Elem()
}

func (o TemplateFilterControlOutput) ToTemplateFilterControlOutput() TemplateFilterControlOutput {
	return o
}

func (o TemplateFilterControlOutput) ToTemplateFilterControlOutputWithContext(ctx context.Context) TemplateFilterControlOutput {
	return o
}

// A control from a filter that is scoped across more than one sheet. This represents your filter control on a sheet
func (o TemplateFilterControlOutput) CrossSheet() TemplateFilterCrossSheetControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterCrossSheetControl { return v.CrossSheet }).(TemplateFilterCrossSheetControlPtrOutput)
}

// A control from a date filter that is used to specify date and time.
func (o TemplateFilterControlOutput) DateTimePicker() TemplateFilterDateTimePickerControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterDateTimePickerControl { return v.DateTimePicker }).(TemplateFilterDateTimePickerControlPtrOutput)
}

// A control to display a dropdown list with buttons that are used to select a single value.
func (o TemplateFilterControlOutput) Dropdown() TemplateFilterDropDownControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterDropDownControl { return v.Dropdown }).(TemplateFilterDropDownControlPtrOutput)
}

// A control to display a list of buttons or boxes. This is used to select either a single value or multiple values.
func (o TemplateFilterControlOutput) List() TemplateFilterListControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterListControl { return v.List }).(TemplateFilterListControlPtrOutput)
}

// A control from a date filter that is used to specify the relative date.
func (o TemplateFilterControlOutput) RelativeDateTime() TemplateFilterRelativeDateTimeControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterRelativeDateTimeControl { return v.RelativeDateTime }).(TemplateFilterRelativeDateTimeControlPtrOutput)
}

// A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
func (o TemplateFilterControlOutput) Slider() TemplateFilterSliderControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterSliderControl { return v.Slider }).(TemplateFilterSliderControlPtrOutput)
}

// A control to display a text box that is used to enter multiple entries.
func (o TemplateFilterControlOutput) TextArea() TemplateFilterTextAreaControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterTextAreaControl { return v.TextArea }).(TemplateFilterTextAreaControlPtrOutput)
}

// A control to display a text box that is used to enter a single entry.
func (o TemplateFilterControlOutput) TextField() TemplateFilterTextFieldControlPtrOutput {
	return o.ApplyT(func(v TemplateFilterControl) *TemplateFilterTextFieldControl { return v.TextField }).(TemplateFilterTextFieldControlPtrOutput)
}

type TemplateFilterControlArrayOutput struct{ *pulumi.OutputState }

func (TemplateFilterControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilterControl)(nil)).Elem()
}

func (o TemplateFilterControlArrayOutput) ToTemplateFilterControlArrayOutput() TemplateFilterControlArrayOutput {
	return o
}

func (o TemplateFilterControlArrayOutput) ToTemplateFilterControlArrayOutputWithContext(ctx context.Context) TemplateFilterControlArrayOutput {
	return o
}

func (o TemplateFilterControlArrayOutput) Index(i pulumi.IntInput) TemplateFilterControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateFilterControl {
		return vs[0].([]TemplateFilterControl)[vs[1].(int)]
	}).(TemplateFilterControlOutput)
}

type TemplateFilterCrossSheetControl struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration *TemplateCascadingControlConfiguration `pulumi:"cascadingControlConfiguration"`
	// The ID of the `FilterCrossSheetControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// The source filter ID of the `FilterCrossSheetControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
}

// TemplateFilterCrossSheetControlInput is an input type that accepts TemplateFilterCrossSheetControlArgs and TemplateFilterCrossSheetControlOutput values.
// You can construct a concrete instance of `TemplateFilterCrossSheetControlInput` via:
//
//	TemplateFilterCrossSheetControlArgs{...}
type TemplateFilterCrossSheetControlInput interface {
	pulumi.Input

	ToTemplateFilterCrossSheetControlOutput() TemplateFilterCrossSheetControlOutput
	ToTemplateFilterCrossSheetControlOutputWithContext(context.Context) TemplateFilterCrossSheetControlOutput
}

type TemplateFilterCrossSheetControlArgs struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration TemplateCascadingControlConfigurationPtrInput `pulumi:"cascadingControlConfiguration"`
	// The ID of the `FilterCrossSheetControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// The source filter ID of the `FilterCrossSheetControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
}

func (TemplateFilterCrossSheetControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterCrossSheetControl)(nil)).Elem()
}

func (i TemplateFilterCrossSheetControlArgs) ToTemplateFilterCrossSheetControlOutput() TemplateFilterCrossSheetControlOutput {
	return i.ToTemplateFilterCrossSheetControlOutputWithContext(context.Background())
}

func (i TemplateFilterCrossSheetControlArgs) ToTemplateFilterCrossSheetControlOutputWithContext(ctx context.Context) TemplateFilterCrossSheetControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterCrossSheetControlOutput)
}

func (i TemplateFilterCrossSheetControlArgs) ToTemplateFilterCrossSheetControlPtrOutput() TemplateFilterCrossSheetControlPtrOutput {
	return i.ToTemplateFilterCrossSheetControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterCrossSheetControlArgs) ToTemplateFilterCrossSheetControlPtrOutputWithContext(ctx context.Context) TemplateFilterCrossSheetControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterCrossSheetControlOutput).ToTemplateFilterCrossSheetControlPtrOutputWithContext(ctx)
}

// TemplateFilterCrossSheetControlPtrInput is an input type that accepts TemplateFilterCrossSheetControlArgs, TemplateFilterCrossSheetControlPtr and TemplateFilterCrossSheetControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterCrossSheetControlPtrInput` via:
//
//	        TemplateFilterCrossSheetControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterCrossSheetControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterCrossSheetControlPtrOutput() TemplateFilterCrossSheetControlPtrOutput
	ToTemplateFilterCrossSheetControlPtrOutputWithContext(context.Context) TemplateFilterCrossSheetControlPtrOutput
}

type templateFilterCrossSheetControlPtrType TemplateFilterCrossSheetControlArgs

func TemplateFilterCrossSheetControlPtr(v *TemplateFilterCrossSheetControlArgs) TemplateFilterCrossSheetControlPtrInput {
	return (*templateFilterCrossSheetControlPtrType)(v)
}

func (*templateFilterCrossSheetControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterCrossSheetControl)(nil)).Elem()
}

func (i *templateFilterCrossSheetControlPtrType) ToTemplateFilterCrossSheetControlPtrOutput() TemplateFilterCrossSheetControlPtrOutput {
	return i.ToTemplateFilterCrossSheetControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterCrossSheetControlPtrType) ToTemplateFilterCrossSheetControlPtrOutputWithContext(ctx context.Context) TemplateFilterCrossSheetControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterCrossSheetControlPtrOutput)
}

type TemplateFilterCrossSheetControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterCrossSheetControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterCrossSheetControl)(nil)).Elem()
}

func (o TemplateFilterCrossSheetControlOutput) ToTemplateFilterCrossSheetControlOutput() TemplateFilterCrossSheetControlOutput {
	return o
}

func (o TemplateFilterCrossSheetControlOutput) ToTemplateFilterCrossSheetControlOutputWithContext(ctx context.Context) TemplateFilterCrossSheetControlOutput {
	return o
}

func (o TemplateFilterCrossSheetControlOutput) ToTemplateFilterCrossSheetControlPtrOutput() TemplateFilterCrossSheetControlPtrOutput {
	return o.ToTemplateFilterCrossSheetControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterCrossSheetControlOutput) ToTemplateFilterCrossSheetControlPtrOutputWithContext(ctx context.Context) TemplateFilterCrossSheetControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterCrossSheetControl) *TemplateFilterCrossSheetControl {
		return &v
	}).(TemplateFilterCrossSheetControlPtrOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateFilterCrossSheetControlOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilterCrossSheetControl) *TemplateCascadingControlConfiguration {
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The ID of the `FilterCrossSheetControl` .
func (o TemplateFilterCrossSheetControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterCrossSheetControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// The source filter ID of the `FilterCrossSheetControl` .
func (o TemplateFilterCrossSheetControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterCrossSheetControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

type TemplateFilterCrossSheetControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterCrossSheetControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterCrossSheetControl)(nil)).Elem()
}

func (o TemplateFilterCrossSheetControlPtrOutput) ToTemplateFilterCrossSheetControlPtrOutput() TemplateFilterCrossSheetControlPtrOutput {
	return o
}

func (o TemplateFilterCrossSheetControlPtrOutput) ToTemplateFilterCrossSheetControlPtrOutputWithContext(ctx context.Context) TemplateFilterCrossSheetControlPtrOutput {
	return o
}

func (o TemplateFilterCrossSheetControlPtrOutput) Elem() TemplateFilterCrossSheetControlOutput {
	return o.ApplyT(func(v *TemplateFilterCrossSheetControl) TemplateFilterCrossSheetControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterCrossSheetControl
		return ret
	}).(TemplateFilterCrossSheetControlOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateFilterCrossSheetControlPtrOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFilterCrossSheetControl) *TemplateCascadingControlConfiguration {
		if v == nil {
			return nil
		}
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The ID of the `FilterCrossSheetControl` .
func (o TemplateFilterCrossSheetControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterCrossSheetControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// The source filter ID of the `FilterCrossSheetControl` .
func (o TemplateFilterCrossSheetControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterCrossSheetControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

type TemplateFilterDateTimePickerControl struct {
	// The visibility configurationof the Apply button on a `DateTimePickerControl` .
	CommitMode *TemplateCommitMode `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions *TemplateDateTimePickerControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `FilterDateTimePickerControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// The source filter ID of the `FilterDateTimePickerControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
	// The title of the `FilterDateTimePickerControl` .
	Title string `pulumi:"title"`
	// The type of the `FilterDropDownControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
	// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
	Type *TemplateSheetControlDateTimePickerType `pulumi:"type"`
}

// TemplateFilterDateTimePickerControlInput is an input type that accepts TemplateFilterDateTimePickerControlArgs and TemplateFilterDateTimePickerControlOutput values.
// You can construct a concrete instance of `TemplateFilterDateTimePickerControlInput` via:
//
//	TemplateFilterDateTimePickerControlArgs{...}
type TemplateFilterDateTimePickerControlInput interface {
	pulumi.Input

	ToTemplateFilterDateTimePickerControlOutput() TemplateFilterDateTimePickerControlOutput
	ToTemplateFilterDateTimePickerControlOutputWithContext(context.Context) TemplateFilterDateTimePickerControlOutput
}

type TemplateFilterDateTimePickerControlArgs struct {
	// The visibility configurationof the Apply button on a `DateTimePickerControl` .
	CommitMode TemplateCommitModePtrInput `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions TemplateDateTimePickerControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `FilterDateTimePickerControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// The source filter ID of the `FilterDateTimePickerControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
	// The title of the `FilterDateTimePickerControl` .
	Title pulumi.StringInput `pulumi:"title"`
	// The type of the `FilterDropDownControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
	// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
	Type TemplateSheetControlDateTimePickerTypePtrInput `pulumi:"type"`
}

func (TemplateFilterDateTimePickerControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterDateTimePickerControl)(nil)).Elem()
}

func (i TemplateFilterDateTimePickerControlArgs) ToTemplateFilterDateTimePickerControlOutput() TemplateFilterDateTimePickerControlOutput {
	return i.ToTemplateFilterDateTimePickerControlOutputWithContext(context.Background())
}

func (i TemplateFilterDateTimePickerControlArgs) ToTemplateFilterDateTimePickerControlOutputWithContext(ctx context.Context) TemplateFilterDateTimePickerControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterDateTimePickerControlOutput)
}

func (i TemplateFilterDateTimePickerControlArgs) ToTemplateFilterDateTimePickerControlPtrOutput() TemplateFilterDateTimePickerControlPtrOutput {
	return i.ToTemplateFilterDateTimePickerControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterDateTimePickerControlArgs) ToTemplateFilterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateFilterDateTimePickerControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterDateTimePickerControlOutput).ToTemplateFilterDateTimePickerControlPtrOutputWithContext(ctx)
}

// TemplateFilterDateTimePickerControlPtrInput is an input type that accepts TemplateFilterDateTimePickerControlArgs, TemplateFilterDateTimePickerControlPtr and TemplateFilterDateTimePickerControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterDateTimePickerControlPtrInput` via:
//
//	        TemplateFilterDateTimePickerControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterDateTimePickerControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterDateTimePickerControlPtrOutput() TemplateFilterDateTimePickerControlPtrOutput
	ToTemplateFilterDateTimePickerControlPtrOutputWithContext(context.Context) TemplateFilterDateTimePickerControlPtrOutput
}

type templateFilterDateTimePickerControlPtrType TemplateFilterDateTimePickerControlArgs

func TemplateFilterDateTimePickerControlPtr(v *TemplateFilterDateTimePickerControlArgs) TemplateFilterDateTimePickerControlPtrInput {
	return (*templateFilterDateTimePickerControlPtrType)(v)
}

func (*templateFilterDateTimePickerControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterDateTimePickerControl)(nil)).Elem()
}

func (i *templateFilterDateTimePickerControlPtrType) ToTemplateFilterDateTimePickerControlPtrOutput() TemplateFilterDateTimePickerControlPtrOutput {
	return i.ToTemplateFilterDateTimePickerControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterDateTimePickerControlPtrType) ToTemplateFilterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateFilterDateTimePickerControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterDateTimePickerControlPtrOutput)
}

type TemplateFilterDateTimePickerControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterDateTimePickerControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterDateTimePickerControl)(nil)).Elem()
}

func (o TemplateFilterDateTimePickerControlOutput) ToTemplateFilterDateTimePickerControlOutput() TemplateFilterDateTimePickerControlOutput {
	return o
}

func (o TemplateFilterDateTimePickerControlOutput) ToTemplateFilterDateTimePickerControlOutputWithContext(ctx context.Context) TemplateFilterDateTimePickerControlOutput {
	return o
}

func (o TemplateFilterDateTimePickerControlOutput) ToTemplateFilterDateTimePickerControlPtrOutput() TemplateFilterDateTimePickerControlPtrOutput {
	return o.ToTemplateFilterDateTimePickerControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterDateTimePickerControlOutput) ToTemplateFilterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateFilterDateTimePickerControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterDateTimePickerControl) *TemplateFilterDateTimePickerControl {
		return &v
	}).(TemplateFilterDateTimePickerControlPtrOutput)
}

// The visibility configurationof the Apply button on a `DateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v TemplateFilterDateTimePickerControl) *TemplateCommitMode { return v.CommitMode }).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateFilterDateTimePickerControlOutput) DisplayOptions() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterDateTimePickerControl) *TemplateDateTimePickerControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterDateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterDateTimePickerControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// The source filter ID of the `FilterDateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterDateTimePickerControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

// The title of the `FilterDateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterDateTimePickerControl) string { return v.Title }).(pulumi.StringOutput)
}

// The type of the `FilterDropDownControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
func (o TemplateFilterDateTimePickerControlOutput) Type() TemplateSheetControlDateTimePickerTypePtrOutput {
	return o.ApplyT(func(v TemplateFilterDateTimePickerControl) *TemplateSheetControlDateTimePickerType { return v.Type }).(TemplateSheetControlDateTimePickerTypePtrOutput)
}

type TemplateFilterDateTimePickerControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterDateTimePickerControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterDateTimePickerControl)(nil)).Elem()
}

func (o TemplateFilterDateTimePickerControlPtrOutput) ToTemplateFilterDateTimePickerControlPtrOutput() TemplateFilterDateTimePickerControlPtrOutput {
	return o
}

func (o TemplateFilterDateTimePickerControlPtrOutput) ToTemplateFilterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateFilterDateTimePickerControlPtrOutput {
	return o
}

func (o TemplateFilterDateTimePickerControlPtrOutput) Elem() TemplateFilterDateTimePickerControlOutput {
	return o.ApplyT(func(v *TemplateFilterDateTimePickerControl) TemplateFilterDateTimePickerControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterDateTimePickerControl
		return ret
	}).(TemplateFilterDateTimePickerControlOutput)
}

// The visibility configurationof the Apply button on a `DateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlPtrOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v *TemplateFilterDateTimePickerControl) *TemplateCommitMode {
		if v == nil {
			return nil
		}
		return v.CommitMode
	}).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateFilterDateTimePickerControlPtrOutput) DisplayOptions() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDateTimePickerControl) *TemplateDateTimePickerControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterDateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDateTimePickerControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// The source filter ID of the `FilterDateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDateTimePickerControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

// The title of the `FilterDateTimePickerControl` .
func (o TemplateFilterDateTimePickerControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDateTimePickerControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// The type of the `FilterDropDownControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
func (o TemplateFilterDateTimePickerControlPtrOutput) Type() TemplateSheetControlDateTimePickerTypePtrOutput {
	return o.ApplyT(func(v *TemplateFilterDateTimePickerControl) *TemplateSheetControlDateTimePickerType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlDateTimePickerTypePtrOutput)
}

type TemplateFilterDropDownControl struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration *TemplateCascadingControlConfiguration `pulumi:"cascadingControlConfiguration"`
	// The visibility configuration of the Apply button on a `FilterDropDownControl` .
	CommitMode *TemplateCommitMode `pulumi:"commitMode"`
	// The display options of the `FilterDropDownControl` .
	DisplayOptions *TemplateDropDownControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `FilterDropDownControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues *TemplateFilterSelectableValues `pulumi:"selectableValues"`
	// The source filter ID of the `FilterDropDownControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
	// The title of the `FilterDropDownControl` .
	Title string `pulumi:"title"`
	// The type of the `FilterDropDownControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
	// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
	Type *TemplateSheetControlListType `pulumi:"type"`
}

// TemplateFilterDropDownControlInput is an input type that accepts TemplateFilterDropDownControlArgs and TemplateFilterDropDownControlOutput values.
// You can construct a concrete instance of `TemplateFilterDropDownControlInput` via:
//
//	TemplateFilterDropDownControlArgs{...}
type TemplateFilterDropDownControlInput interface {
	pulumi.Input

	ToTemplateFilterDropDownControlOutput() TemplateFilterDropDownControlOutput
	ToTemplateFilterDropDownControlOutputWithContext(context.Context) TemplateFilterDropDownControlOutput
}

type TemplateFilterDropDownControlArgs struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration TemplateCascadingControlConfigurationPtrInput `pulumi:"cascadingControlConfiguration"`
	// The visibility configuration of the Apply button on a `FilterDropDownControl` .
	CommitMode TemplateCommitModePtrInput `pulumi:"commitMode"`
	// The display options of the `FilterDropDownControl` .
	DisplayOptions TemplateDropDownControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `FilterDropDownControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues TemplateFilterSelectableValuesPtrInput `pulumi:"selectableValues"`
	// The source filter ID of the `FilterDropDownControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
	// The title of the `FilterDropDownControl` .
	Title pulumi.StringInput `pulumi:"title"`
	// The type of the `FilterDropDownControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
	// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
	Type TemplateSheetControlListTypePtrInput `pulumi:"type"`
}

func (TemplateFilterDropDownControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterDropDownControl)(nil)).Elem()
}

func (i TemplateFilterDropDownControlArgs) ToTemplateFilterDropDownControlOutput() TemplateFilterDropDownControlOutput {
	return i.ToTemplateFilterDropDownControlOutputWithContext(context.Background())
}

func (i TemplateFilterDropDownControlArgs) ToTemplateFilterDropDownControlOutputWithContext(ctx context.Context) TemplateFilterDropDownControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterDropDownControlOutput)
}

func (i TemplateFilterDropDownControlArgs) ToTemplateFilterDropDownControlPtrOutput() TemplateFilterDropDownControlPtrOutput {
	return i.ToTemplateFilterDropDownControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterDropDownControlArgs) ToTemplateFilterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateFilterDropDownControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterDropDownControlOutput).ToTemplateFilterDropDownControlPtrOutputWithContext(ctx)
}

// TemplateFilterDropDownControlPtrInput is an input type that accepts TemplateFilterDropDownControlArgs, TemplateFilterDropDownControlPtr and TemplateFilterDropDownControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterDropDownControlPtrInput` via:
//
//	        TemplateFilterDropDownControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterDropDownControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterDropDownControlPtrOutput() TemplateFilterDropDownControlPtrOutput
	ToTemplateFilterDropDownControlPtrOutputWithContext(context.Context) TemplateFilterDropDownControlPtrOutput
}

type templateFilterDropDownControlPtrType TemplateFilterDropDownControlArgs

func TemplateFilterDropDownControlPtr(v *TemplateFilterDropDownControlArgs) TemplateFilterDropDownControlPtrInput {
	return (*templateFilterDropDownControlPtrType)(v)
}

func (*templateFilterDropDownControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterDropDownControl)(nil)).Elem()
}

func (i *templateFilterDropDownControlPtrType) ToTemplateFilterDropDownControlPtrOutput() TemplateFilterDropDownControlPtrOutput {
	return i.ToTemplateFilterDropDownControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterDropDownControlPtrType) ToTemplateFilterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateFilterDropDownControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterDropDownControlPtrOutput)
}

type TemplateFilterDropDownControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterDropDownControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterDropDownControl)(nil)).Elem()
}

func (o TemplateFilterDropDownControlOutput) ToTemplateFilterDropDownControlOutput() TemplateFilterDropDownControlOutput {
	return o
}

func (o TemplateFilterDropDownControlOutput) ToTemplateFilterDropDownControlOutputWithContext(ctx context.Context) TemplateFilterDropDownControlOutput {
	return o
}

func (o TemplateFilterDropDownControlOutput) ToTemplateFilterDropDownControlPtrOutput() TemplateFilterDropDownControlPtrOutput {
	return o.ToTemplateFilterDropDownControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterDropDownControlOutput) ToTemplateFilterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateFilterDropDownControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterDropDownControl) *TemplateFilterDropDownControl {
		return &v
	}).(TemplateFilterDropDownControlPtrOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateFilterDropDownControlOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) *TemplateCascadingControlConfiguration {
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The visibility configuration of the Apply button on a `FilterDropDownControl` .
func (o TemplateFilterDropDownControlOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) *TemplateCommitMode { return v.CommitMode }).(TemplateCommitModePtrOutput)
}

// The display options of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlOutput) DisplayOptions() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) *TemplateDropDownControlDisplayOptions { return v.DisplayOptions }).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateFilterDropDownControlOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) *TemplateFilterSelectableValues { return v.SelectableValues }).(TemplateFilterSelectableValuesPtrOutput)
}

// The source filter ID of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

// The title of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) string { return v.Title }).(pulumi.StringOutput)
}

// The type of the `FilterDropDownControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
func (o TemplateFilterDropDownControlOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v TemplateFilterDropDownControl) *TemplateSheetControlListType { return v.Type }).(TemplateSheetControlListTypePtrOutput)
}

type TemplateFilterDropDownControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterDropDownControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterDropDownControl)(nil)).Elem()
}

func (o TemplateFilterDropDownControlPtrOutput) ToTemplateFilterDropDownControlPtrOutput() TemplateFilterDropDownControlPtrOutput {
	return o
}

func (o TemplateFilterDropDownControlPtrOutput) ToTemplateFilterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateFilterDropDownControlPtrOutput {
	return o
}

func (o TemplateFilterDropDownControlPtrOutput) Elem() TemplateFilterDropDownControlOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) TemplateFilterDropDownControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterDropDownControl
		return ret
	}).(TemplateFilterDropDownControlOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateFilterDropDownControlPtrOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *TemplateCascadingControlConfiguration {
		if v == nil {
			return nil
		}
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The visibility configuration of the Apply button on a `FilterDropDownControl` .
func (o TemplateFilterDropDownControlPtrOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *TemplateCommitMode {
		if v == nil {
			return nil
		}
		return v.CommitMode
	}).(TemplateCommitModePtrOutput)
}

// The display options of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlPtrOutput) DisplayOptions() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *TemplateDropDownControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateFilterDropDownControlPtrOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *TemplateFilterSelectableValues {
		if v == nil {
			return nil
		}
		return v.SelectableValues
	}).(TemplateFilterSelectableValuesPtrOutput)
}

// The source filter ID of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

// The title of the `FilterDropDownControl` .
func (o TemplateFilterDropDownControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// The type of the `FilterDropDownControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
// - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
func (o TemplateFilterDropDownControlPtrOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v *TemplateFilterDropDownControl) *TemplateSheetControlListType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlListTypePtrOutput)
}

type TemplateFilterGroup struct {
	// The filter new feature which can apply filter group to all data sets. Choose one of the following options:
	//
	// - `ALL_DATASETS`
	// - `SINGLE_DATASET`
	CrossDataset TemplateCrossDatasetTypes `pulumi:"crossDataset"`
	// The value that uniquely identifies a `FilterGroup` within a dashboard, template, or analysis.
	FilterGroupId string `pulumi:"filterGroupId"`
	// The list of filters that are present in a `FilterGroup` .
	Filters []TemplateFilter `pulumi:"filters"`
	// The configuration that specifies what scope to apply to a `FilterGroup` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ScopeConfiguration TemplateFilterScopeConfiguration `pulumi:"scopeConfiguration"`
	// The status of the `FilterGroup` .
	Status *TemplateWidgetStatus `pulumi:"status"`
}

// TemplateFilterGroupInput is an input type that accepts TemplateFilterGroupArgs and TemplateFilterGroupOutput values.
// You can construct a concrete instance of `TemplateFilterGroupInput` via:
//
//	TemplateFilterGroupArgs{...}
type TemplateFilterGroupInput interface {
	pulumi.Input

	ToTemplateFilterGroupOutput() TemplateFilterGroupOutput
	ToTemplateFilterGroupOutputWithContext(context.Context) TemplateFilterGroupOutput
}

type TemplateFilterGroupArgs struct {
	// The filter new feature which can apply filter group to all data sets. Choose one of the following options:
	//
	// - `ALL_DATASETS`
	// - `SINGLE_DATASET`
	CrossDataset TemplateCrossDatasetTypesInput `pulumi:"crossDataset"`
	// The value that uniquely identifies a `FilterGroup` within a dashboard, template, or analysis.
	FilterGroupId pulumi.StringInput `pulumi:"filterGroupId"`
	// The list of filters that are present in a `FilterGroup` .
	Filters TemplateFilterArrayInput `pulumi:"filters"`
	// The configuration that specifies what scope to apply to a `FilterGroup` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ScopeConfiguration TemplateFilterScopeConfigurationInput `pulumi:"scopeConfiguration"`
	// The status of the `FilterGroup` .
	Status TemplateWidgetStatusPtrInput `pulumi:"status"`
}

func (TemplateFilterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterGroup)(nil)).Elem()
}

func (i TemplateFilterGroupArgs) ToTemplateFilterGroupOutput() TemplateFilterGroupOutput {
	return i.ToTemplateFilterGroupOutputWithContext(context.Background())
}

func (i TemplateFilterGroupArgs) ToTemplateFilterGroupOutputWithContext(ctx context.Context) TemplateFilterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterGroupOutput)
}

// TemplateFilterGroupArrayInput is an input type that accepts TemplateFilterGroupArray and TemplateFilterGroupArrayOutput values.
// You can construct a concrete instance of `TemplateFilterGroupArrayInput` via:
//
//	TemplateFilterGroupArray{ TemplateFilterGroupArgs{...} }
type TemplateFilterGroupArrayInput interface {
	pulumi.Input

	ToTemplateFilterGroupArrayOutput() TemplateFilterGroupArrayOutput
	ToTemplateFilterGroupArrayOutputWithContext(context.Context) TemplateFilterGroupArrayOutput
}

type TemplateFilterGroupArray []TemplateFilterGroupInput

func (TemplateFilterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilterGroup)(nil)).Elem()
}

func (i TemplateFilterGroupArray) ToTemplateFilterGroupArrayOutput() TemplateFilterGroupArrayOutput {
	return i.ToTemplateFilterGroupArrayOutputWithContext(context.Background())
}

func (i TemplateFilterGroupArray) ToTemplateFilterGroupArrayOutputWithContext(ctx context.Context) TemplateFilterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterGroupArrayOutput)
}

type TemplateFilterGroupOutput struct{ *pulumi.OutputState }

func (TemplateFilterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterGroup)(nil)).Elem()
}

func (o TemplateFilterGroupOutput) ToTemplateFilterGroupOutput() TemplateFilterGroupOutput {
	return o
}

func (o TemplateFilterGroupOutput) ToTemplateFilterGroupOutputWithContext(ctx context.Context) TemplateFilterGroupOutput {
	return o
}

// The filter new feature which can apply filter group to all data sets. Choose one of the following options:
//
// - `ALL_DATASETS`
// - `SINGLE_DATASET`
func (o TemplateFilterGroupOutput) CrossDataset() TemplateCrossDatasetTypesOutput {
	return o.ApplyT(func(v TemplateFilterGroup) TemplateCrossDatasetTypes { return v.CrossDataset }).(TemplateCrossDatasetTypesOutput)
}

// The value that uniquely identifies a `FilterGroup` within a dashboard, template, or analysis.
func (o TemplateFilterGroupOutput) FilterGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterGroup) string { return v.FilterGroupId }).(pulumi.StringOutput)
}

// The list of filters that are present in a `FilterGroup` .
func (o TemplateFilterGroupOutput) Filters() TemplateFilterArrayOutput {
	return o.ApplyT(func(v TemplateFilterGroup) []TemplateFilter { return v.Filters }).(TemplateFilterArrayOutput)
}

// The configuration that specifies what scope to apply to a `FilterGroup` .
//
// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
func (o TemplateFilterGroupOutput) ScopeConfiguration() TemplateFilterScopeConfigurationOutput {
	return o.ApplyT(func(v TemplateFilterGroup) TemplateFilterScopeConfiguration { return v.ScopeConfiguration }).(TemplateFilterScopeConfigurationOutput)
}

// The status of the `FilterGroup` .
func (o TemplateFilterGroupOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateFilterGroup) *TemplateWidgetStatus { return v.Status }).(TemplateWidgetStatusPtrOutput)
}

type TemplateFilterGroupArrayOutput struct{ *pulumi.OutputState }

func (TemplateFilterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFilterGroup)(nil)).Elem()
}

func (o TemplateFilterGroupArrayOutput) ToTemplateFilterGroupArrayOutput() TemplateFilterGroupArrayOutput {
	return o
}

func (o TemplateFilterGroupArrayOutput) ToTemplateFilterGroupArrayOutputWithContext(ctx context.Context) TemplateFilterGroupArrayOutput {
	return o
}

func (o TemplateFilterGroupArrayOutput) Index(i pulumi.IntInput) TemplateFilterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateFilterGroup {
		return vs[0].([]TemplateFilterGroup)[vs[1].(int)]
	}).(TemplateFilterGroupOutput)
}

type TemplateFilterListConfiguration struct {
	// The list of category values for the filter.
	CategoryValues []string `pulumi:"categoryValues"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateCategoryFilterMatchOperator `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption *TemplateFilterNullOption `pulumi:"nullOption"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions *TemplateCategoryFilterSelectAllOptions `pulumi:"selectAllOptions"`
}

// TemplateFilterListConfigurationInput is an input type that accepts TemplateFilterListConfigurationArgs and TemplateFilterListConfigurationOutput values.
// You can construct a concrete instance of `TemplateFilterListConfigurationInput` via:
//
//	TemplateFilterListConfigurationArgs{...}
type TemplateFilterListConfigurationInput interface {
	pulumi.Input

	ToTemplateFilterListConfigurationOutput() TemplateFilterListConfigurationOutput
	ToTemplateFilterListConfigurationOutputWithContext(context.Context) TemplateFilterListConfigurationOutput
}

type TemplateFilterListConfigurationArgs struct {
	// The list of category values for the filter.
	CategoryValues pulumi.StringArrayInput `pulumi:"categoryValues"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateCategoryFilterMatchOperatorInput `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionPtrInput `pulumi:"nullOption"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions TemplateCategoryFilterSelectAllOptionsPtrInput `pulumi:"selectAllOptions"`
}

func (TemplateFilterListConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterListConfiguration)(nil)).Elem()
}

func (i TemplateFilterListConfigurationArgs) ToTemplateFilterListConfigurationOutput() TemplateFilterListConfigurationOutput {
	return i.ToTemplateFilterListConfigurationOutputWithContext(context.Background())
}

func (i TemplateFilterListConfigurationArgs) ToTemplateFilterListConfigurationOutputWithContext(ctx context.Context) TemplateFilterListConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterListConfigurationOutput)
}

func (i TemplateFilterListConfigurationArgs) ToTemplateFilterListConfigurationPtrOutput() TemplateFilterListConfigurationPtrOutput {
	return i.ToTemplateFilterListConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFilterListConfigurationArgs) ToTemplateFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterListConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterListConfigurationOutput).ToTemplateFilterListConfigurationPtrOutputWithContext(ctx)
}

// TemplateFilterListConfigurationPtrInput is an input type that accepts TemplateFilterListConfigurationArgs, TemplateFilterListConfigurationPtr and TemplateFilterListConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFilterListConfigurationPtrInput` via:
//
//	        TemplateFilterListConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterListConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFilterListConfigurationPtrOutput() TemplateFilterListConfigurationPtrOutput
	ToTemplateFilterListConfigurationPtrOutputWithContext(context.Context) TemplateFilterListConfigurationPtrOutput
}

type templateFilterListConfigurationPtrType TemplateFilterListConfigurationArgs

func TemplateFilterListConfigurationPtr(v *TemplateFilterListConfigurationArgs) TemplateFilterListConfigurationPtrInput {
	return (*templateFilterListConfigurationPtrType)(v)
}

func (*templateFilterListConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterListConfiguration)(nil)).Elem()
}

func (i *templateFilterListConfigurationPtrType) ToTemplateFilterListConfigurationPtrOutput() TemplateFilterListConfigurationPtrOutput {
	return i.ToTemplateFilterListConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFilterListConfigurationPtrType) ToTemplateFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterListConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterListConfigurationPtrOutput)
}

type TemplateFilterListConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFilterListConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterListConfiguration)(nil)).Elem()
}

func (o TemplateFilterListConfigurationOutput) ToTemplateFilterListConfigurationOutput() TemplateFilterListConfigurationOutput {
	return o
}

func (o TemplateFilterListConfigurationOutput) ToTemplateFilterListConfigurationOutputWithContext(ctx context.Context) TemplateFilterListConfigurationOutput {
	return o
}

func (o TemplateFilterListConfigurationOutput) ToTemplateFilterListConfigurationPtrOutput() TemplateFilterListConfigurationPtrOutput {
	return o.ToTemplateFilterListConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFilterListConfigurationOutput) ToTemplateFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterListConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterListConfiguration) *TemplateFilterListConfiguration {
		return &v
	}).(TemplateFilterListConfigurationPtrOutput)
}

// The list of category values for the filter.
func (o TemplateFilterListConfigurationOutput) CategoryValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateFilterListConfiguration) []string { return v.CategoryValues }).(pulumi.StringArrayOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateFilterListConfigurationOutput) MatchOperator() TemplateCategoryFilterMatchOperatorOutput {
	return o.ApplyT(func(v TemplateFilterListConfiguration) TemplateCategoryFilterMatchOperator { return v.MatchOperator }).(TemplateCategoryFilterMatchOperatorOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateFilterListConfigurationOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v TemplateFilterListConfiguration) *TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionPtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateFilterListConfigurationOutput) SelectAllOptions() TemplateCategoryFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterListConfiguration) *TemplateCategoryFilterSelectAllOptions {
		return v.SelectAllOptions
	}).(TemplateCategoryFilterSelectAllOptionsPtrOutput)
}

type TemplateFilterListConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterListConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterListConfiguration)(nil)).Elem()
}

func (o TemplateFilterListConfigurationPtrOutput) ToTemplateFilterListConfigurationPtrOutput() TemplateFilterListConfigurationPtrOutput {
	return o
}

func (o TemplateFilterListConfigurationPtrOutput) ToTemplateFilterListConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterListConfigurationPtrOutput {
	return o
}

func (o TemplateFilterListConfigurationPtrOutput) Elem() TemplateFilterListConfigurationOutput {
	return o.ApplyT(func(v *TemplateFilterListConfiguration) TemplateFilterListConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFilterListConfiguration
		return ret
	}).(TemplateFilterListConfigurationOutput)
}

// The list of category values for the filter.
func (o TemplateFilterListConfigurationPtrOutput) CategoryValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateFilterListConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.CategoryValues
	}).(pulumi.StringArrayOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateFilterListConfigurationPtrOutput) MatchOperator() TemplateCategoryFilterMatchOperatorPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListConfiguration) *TemplateCategoryFilterMatchOperator {
		if v == nil {
			return nil
		}
		return &v.MatchOperator
	}).(TemplateCategoryFilterMatchOperatorPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateFilterListConfigurationPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListConfiguration) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateFilterListConfigurationPtrOutput) SelectAllOptions() TemplateCategoryFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListConfiguration) *TemplateCategoryFilterSelectAllOptions {
		if v == nil {
			return nil
		}
		return v.SelectAllOptions
	}).(TemplateCategoryFilterSelectAllOptionsPtrOutput)
}

type TemplateFilterListControl struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration *TemplateCascadingControlConfiguration `pulumi:"cascadingControlConfiguration"`
	// The display options of a control.
	DisplayOptions *TemplateListControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `FilterListControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues *TemplateFilterSelectableValues `pulumi:"selectableValues"`
	// The source filter ID of the `FilterListControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
	// The title of the `FilterListControl` .
	Title string `pulumi:"title"`
	// The type of the `FilterListControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from the list.
	// - `SINGLE_SELECT` : The user can select a single entry from the list.
	Type *TemplateSheetControlListType `pulumi:"type"`
}

// TemplateFilterListControlInput is an input type that accepts TemplateFilterListControlArgs and TemplateFilterListControlOutput values.
// You can construct a concrete instance of `TemplateFilterListControlInput` via:
//
//	TemplateFilterListControlArgs{...}
type TemplateFilterListControlInput interface {
	pulumi.Input

	ToTemplateFilterListControlOutput() TemplateFilterListControlOutput
	ToTemplateFilterListControlOutputWithContext(context.Context) TemplateFilterListControlOutput
}

type TemplateFilterListControlArgs struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration TemplateCascadingControlConfigurationPtrInput `pulumi:"cascadingControlConfiguration"`
	// The display options of a control.
	DisplayOptions TemplateListControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `FilterListControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues TemplateFilterSelectableValuesPtrInput `pulumi:"selectableValues"`
	// The source filter ID of the `FilterListControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
	// The title of the `FilterListControl` .
	Title pulumi.StringInput `pulumi:"title"`
	// The type of the `FilterListControl` . Choose one of the following options:
	//
	// - `MULTI_SELECT` : The user can select multiple entries from the list.
	// - `SINGLE_SELECT` : The user can select a single entry from the list.
	Type TemplateSheetControlListTypePtrInput `pulumi:"type"`
}

func (TemplateFilterListControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterListControl)(nil)).Elem()
}

func (i TemplateFilterListControlArgs) ToTemplateFilterListControlOutput() TemplateFilterListControlOutput {
	return i.ToTemplateFilterListControlOutputWithContext(context.Background())
}

func (i TemplateFilterListControlArgs) ToTemplateFilterListControlOutputWithContext(ctx context.Context) TemplateFilterListControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterListControlOutput)
}

func (i TemplateFilterListControlArgs) ToTemplateFilterListControlPtrOutput() TemplateFilterListControlPtrOutput {
	return i.ToTemplateFilterListControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterListControlArgs) ToTemplateFilterListControlPtrOutputWithContext(ctx context.Context) TemplateFilterListControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterListControlOutput).ToTemplateFilterListControlPtrOutputWithContext(ctx)
}

// TemplateFilterListControlPtrInput is an input type that accepts TemplateFilterListControlArgs, TemplateFilterListControlPtr and TemplateFilterListControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterListControlPtrInput` via:
//
//	        TemplateFilterListControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterListControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterListControlPtrOutput() TemplateFilterListControlPtrOutput
	ToTemplateFilterListControlPtrOutputWithContext(context.Context) TemplateFilterListControlPtrOutput
}

type templateFilterListControlPtrType TemplateFilterListControlArgs

func TemplateFilterListControlPtr(v *TemplateFilterListControlArgs) TemplateFilterListControlPtrInput {
	return (*templateFilterListControlPtrType)(v)
}

func (*templateFilterListControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterListControl)(nil)).Elem()
}

func (i *templateFilterListControlPtrType) ToTemplateFilterListControlPtrOutput() TemplateFilterListControlPtrOutput {
	return i.ToTemplateFilterListControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterListControlPtrType) ToTemplateFilterListControlPtrOutputWithContext(ctx context.Context) TemplateFilterListControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterListControlPtrOutput)
}

type TemplateFilterListControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterListControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterListControl)(nil)).Elem()
}

func (o TemplateFilterListControlOutput) ToTemplateFilterListControlOutput() TemplateFilterListControlOutput {
	return o
}

func (o TemplateFilterListControlOutput) ToTemplateFilterListControlOutputWithContext(ctx context.Context) TemplateFilterListControlOutput {
	return o
}

func (o TemplateFilterListControlOutput) ToTemplateFilterListControlPtrOutput() TemplateFilterListControlPtrOutput {
	return o.ToTemplateFilterListControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterListControlOutput) ToTemplateFilterListControlPtrOutputWithContext(ctx context.Context) TemplateFilterListControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterListControl) *TemplateFilterListControl {
		return &v
	}).(TemplateFilterListControlPtrOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateFilterListControlOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilterListControl) *TemplateCascadingControlConfiguration {
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The display options of a control.
func (o TemplateFilterListControlOutput) DisplayOptions() TemplateListControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterListControl) *TemplateListControlDisplayOptions { return v.DisplayOptions }).(TemplateListControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterListControl` .
func (o TemplateFilterListControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterListControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateFilterListControlOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v TemplateFilterListControl) *TemplateFilterSelectableValues { return v.SelectableValues }).(TemplateFilterSelectableValuesPtrOutput)
}

// The source filter ID of the `FilterListControl` .
func (o TemplateFilterListControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterListControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

// The title of the `FilterListControl` .
func (o TemplateFilterListControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterListControl) string { return v.Title }).(pulumi.StringOutput)
}

// The type of the `FilterListControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from the list.
// - `SINGLE_SELECT` : The user can select a single entry from the list.
func (o TemplateFilterListControlOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v TemplateFilterListControl) *TemplateSheetControlListType { return v.Type }).(TemplateSheetControlListTypePtrOutput)
}

type TemplateFilterListControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterListControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterListControl)(nil)).Elem()
}

func (o TemplateFilterListControlPtrOutput) ToTemplateFilterListControlPtrOutput() TemplateFilterListControlPtrOutput {
	return o
}

func (o TemplateFilterListControlPtrOutput) ToTemplateFilterListControlPtrOutputWithContext(ctx context.Context) TemplateFilterListControlPtrOutput {
	return o
}

func (o TemplateFilterListControlPtrOutput) Elem() TemplateFilterListControlOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) TemplateFilterListControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterListControl
		return ret
	}).(TemplateFilterListControlOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateFilterListControlPtrOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) *TemplateCascadingControlConfiguration {
		if v == nil {
			return nil
		}
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The display options of a control.
func (o TemplateFilterListControlPtrOutput) DisplayOptions() TemplateListControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) *TemplateListControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateListControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterListControl` .
func (o TemplateFilterListControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateFilterListControlPtrOutput) SelectableValues() TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) *TemplateFilterSelectableValues {
		if v == nil {
			return nil
		}
		return v.SelectableValues
	}).(TemplateFilterSelectableValuesPtrOutput)
}

// The source filter ID of the `FilterListControl` .
func (o TemplateFilterListControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

// The title of the `FilterListControl` .
func (o TemplateFilterListControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// The type of the `FilterListControl` . Choose one of the following options:
//
// - `MULTI_SELECT` : The user can select multiple entries from the list.
// - `SINGLE_SELECT` : The user can select a single entry from the list.
func (o TemplateFilterListControlPtrOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v *TemplateFilterListControl) *TemplateSheetControlListType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlListTypePtrOutput)
}

type TemplateFilterOperationSelectedFieldsConfiguration struct {
	// <p>The selected columns of a dataset.</p>
	SelectedColumns []TemplateColumnIdentifier `pulumi:"selectedColumns"`
	// A structure that contains the options that choose which fields are filtered in the `CustomActionFilterOperation` .
	//
	// Valid values are defined as follows:
	//
	// - `ALL_FIELDS` : Applies the filter operation to all fields.
	SelectedFieldOptions *TemplateSelectedFieldOptions `pulumi:"selectedFieldOptions"`
	// Chooses the fields that are filtered in `CustomActionFilterOperation` .
	SelectedFields []string `pulumi:"selectedFields"`
}

// TemplateFilterOperationSelectedFieldsConfigurationInput is an input type that accepts TemplateFilterOperationSelectedFieldsConfigurationArgs and TemplateFilterOperationSelectedFieldsConfigurationOutput values.
// You can construct a concrete instance of `TemplateFilterOperationSelectedFieldsConfigurationInput` via:
//
//	TemplateFilterOperationSelectedFieldsConfigurationArgs{...}
type TemplateFilterOperationSelectedFieldsConfigurationInput interface {
	pulumi.Input

	ToTemplateFilterOperationSelectedFieldsConfigurationOutput() TemplateFilterOperationSelectedFieldsConfigurationOutput
	ToTemplateFilterOperationSelectedFieldsConfigurationOutputWithContext(context.Context) TemplateFilterOperationSelectedFieldsConfigurationOutput
}

type TemplateFilterOperationSelectedFieldsConfigurationArgs struct {
	// <p>The selected columns of a dataset.</p>
	SelectedColumns TemplateColumnIdentifierArrayInput `pulumi:"selectedColumns"`
	// A structure that contains the options that choose which fields are filtered in the `CustomActionFilterOperation` .
	//
	// Valid values are defined as follows:
	//
	// - `ALL_FIELDS` : Applies the filter operation to all fields.
	SelectedFieldOptions TemplateSelectedFieldOptionsPtrInput `pulumi:"selectedFieldOptions"`
	// Chooses the fields that are filtered in `CustomActionFilterOperation` .
	SelectedFields pulumi.StringArrayInput `pulumi:"selectedFields"`
}

func (TemplateFilterOperationSelectedFieldsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterOperationSelectedFieldsConfiguration)(nil)).Elem()
}

func (i TemplateFilterOperationSelectedFieldsConfigurationArgs) ToTemplateFilterOperationSelectedFieldsConfigurationOutput() TemplateFilterOperationSelectedFieldsConfigurationOutput {
	return i.ToTemplateFilterOperationSelectedFieldsConfigurationOutputWithContext(context.Background())
}

func (i TemplateFilterOperationSelectedFieldsConfigurationArgs) ToTemplateFilterOperationSelectedFieldsConfigurationOutputWithContext(ctx context.Context) TemplateFilterOperationSelectedFieldsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterOperationSelectedFieldsConfigurationOutput)
}

func (i TemplateFilterOperationSelectedFieldsConfigurationArgs) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutput() TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return i.ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFilterOperationSelectedFieldsConfigurationArgs) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterOperationSelectedFieldsConfigurationOutput).ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(ctx)
}

// TemplateFilterOperationSelectedFieldsConfigurationPtrInput is an input type that accepts TemplateFilterOperationSelectedFieldsConfigurationArgs, TemplateFilterOperationSelectedFieldsConfigurationPtr and TemplateFilterOperationSelectedFieldsConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFilterOperationSelectedFieldsConfigurationPtrInput` via:
//
//	        TemplateFilterOperationSelectedFieldsConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterOperationSelectedFieldsConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutput() TemplateFilterOperationSelectedFieldsConfigurationPtrOutput
	ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(context.Context) TemplateFilterOperationSelectedFieldsConfigurationPtrOutput
}

type templateFilterOperationSelectedFieldsConfigurationPtrType TemplateFilterOperationSelectedFieldsConfigurationArgs

func TemplateFilterOperationSelectedFieldsConfigurationPtr(v *TemplateFilterOperationSelectedFieldsConfigurationArgs) TemplateFilterOperationSelectedFieldsConfigurationPtrInput {
	return (*templateFilterOperationSelectedFieldsConfigurationPtrType)(v)
}

func (*templateFilterOperationSelectedFieldsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterOperationSelectedFieldsConfiguration)(nil)).Elem()
}

func (i *templateFilterOperationSelectedFieldsConfigurationPtrType) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutput() TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return i.ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFilterOperationSelectedFieldsConfigurationPtrType) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterOperationSelectedFieldsConfigurationPtrOutput)
}

type TemplateFilterOperationSelectedFieldsConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFilterOperationSelectedFieldsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterOperationSelectedFieldsConfiguration)(nil)).Elem()
}

func (o TemplateFilterOperationSelectedFieldsConfigurationOutput) ToTemplateFilterOperationSelectedFieldsConfigurationOutput() TemplateFilterOperationSelectedFieldsConfigurationOutput {
	return o
}

func (o TemplateFilterOperationSelectedFieldsConfigurationOutput) ToTemplateFilterOperationSelectedFieldsConfigurationOutputWithContext(ctx context.Context) TemplateFilterOperationSelectedFieldsConfigurationOutput {
	return o
}

func (o TemplateFilterOperationSelectedFieldsConfigurationOutput) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutput() TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return o.ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFilterOperationSelectedFieldsConfigurationOutput) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterOperationSelectedFieldsConfiguration) *TemplateFilterOperationSelectedFieldsConfiguration {
		return &v
	}).(TemplateFilterOperationSelectedFieldsConfigurationPtrOutput)
}

// <p>The selected columns of a dataset.</p>
func (o TemplateFilterOperationSelectedFieldsConfigurationOutput) SelectedColumns() TemplateColumnIdentifierArrayOutput {
	return o.ApplyT(func(v TemplateFilterOperationSelectedFieldsConfiguration) []TemplateColumnIdentifier {
		return v.SelectedColumns
	}).(TemplateColumnIdentifierArrayOutput)
}

// A structure that contains the options that choose which fields are filtered in the `CustomActionFilterOperation` .
//
// Valid values are defined as follows:
//
// - `ALL_FIELDS` : Applies the filter operation to all fields.
func (o TemplateFilterOperationSelectedFieldsConfigurationOutput) SelectedFieldOptions() TemplateSelectedFieldOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterOperationSelectedFieldsConfiguration) *TemplateSelectedFieldOptions {
		return v.SelectedFieldOptions
	}).(TemplateSelectedFieldOptionsPtrOutput)
}

// Chooses the fields that are filtered in `CustomActionFilterOperation` .
func (o TemplateFilterOperationSelectedFieldsConfigurationOutput) SelectedFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateFilterOperationSelectedFieldsConfiguration) []string { return v.SelectedFields }).(pulumi.StringArrayOutput)
}

type TemplateFilterOperationSelectedFieldsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterOperationSelectedFieldsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterOperationSelectedFieldsConfiguration)(nil)).Elem()
}

func (o TemplateFilterOperationSelectedFieldsConfigurationPtrOutput) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutput() TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return o
}

func (o TemplateFilterOperationSelectedFieldsConfigurationPtrOutput) ToTemplateFilterOperationSelectedFieldsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationSelectedFieldsConfigurationPtrOutput {
	return o
}

func (o TemplateFilterOperationSelectedFieldsConfigurationPtrOutput) Elem() TemplateFilterOperationSelectedFieldsConfigurationOutput {
	return o.ApplyT(func(v *TemplateFilterOperationSelectedFieldsConfiguration) TemplateFilterOperationSelectedFieldsConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFilterOperationSelectedFieldsConfiguration
		return ret
	}).(TemplateFilterOperationSelectedFieldsConfigurationOutput)
}

// <p>The selected columns of a dataset.</p>
func (o TemplateFilterOperationSelectedFieldsConfigurationPtrOutput) SelectedColumns() TemplateColumnIdentifierArrayOutput {
	return o.ApplyT(func(v *TemplateFilterOperationSelectedFieldsConfiguration) []TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return v.SelectedColumns
	}).(TemplateColumnIdentifierArrayOutput)
}

// A structure that contains the options that choose which fields are filtered in the `CustomActionFilterOperation` .
//
// Valid values are defined as follows:
//
// - `ALL_FIELDS` : Applies the filter operation to all fields.
func (o TemplateFilterOperationSelectedFieldsConfigurationPtrOutput) SelectedFieldOptions() TemplateSelectedFieldOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterOperationSelectedFieldsConfiguration) *TemplateSelectedFieldOptions {
		if v == nil {
			return nil
		}
		return v.SelectedFieldOptions
	}).(TemplateSelectedFieldOptionsPtrOutput)
}

// Chooses the fields that are filtered in `CustomActionFilterOperation` .
func (o TemplateFilterOperationSelectedFieldsConfigurationPtrOutput) SelectedFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateFilterOperationSelectedFieldsConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SelectedFields
	}).(pulumi.StringArrayOutput)
}

type TemplateFilterOperationTargetVisualsConfiguration struct {
	// The configuration of the same-sheet target visuals that you want to be filtered.
	SameSheetTargetVisualConfiguration *TemplateSameSheetTargetVisualConfiguration `pulumi:"sameSheetTargetVisualConfiguration"`
}

// TemplateFilterOperationTargetVisualsConfigurationInput is an input type that accepts TemplateFilterOperationTargetVisualsConfigurationArgs and TemplateFilterOperationTargetVisualsConfigurationOutput values.
// You can construct a concrete instance of `TemplateFilterOperationTargetVisualsConfigurationInput` via:
//
//	TemplateFilterOperationTargetVisualsConfigurationArgs{...}
type TemplateFilterOperationTargetVisualsConfigurationInput interface {
	pulumi.Input

	ToTemplateFilterOperationTargetVisualsConfigurationOutput() TemplateFilterOperationTargetVisualsConfigurationOutput
	ToTemplateFilterOperationTargetVisualsConfigurationOutputWithContext(context.Context) TemplateFilterOperationTargetVisualsConfigurationOutput
}

type TemplateFilterOperationTargetVisualsConfigurationArgs struct {
	// The configuration of the same-sheet target visuals that you want to be filtered.
	SameSheetTargetVisualConfiguration TemplateSameSheetTargetVisualConfigurationPtrInput `pulumi:"sameSheetTargetVisualConfiguration"`
}

func (TemplateFilterOperationTargetVisualsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterOperationTargetVisualsConfiguration)(nil)).Elem()
}

func (i TemplateFilterOperationTargetVisualsConfigurationArgs) ToTemplateFilterOperationTargetVisualsConfigurationOutput() TemplateFilterOperationTargetVisualsConfigurationOutput {
	return i.ToTemplateFilterOperationTargetVisualsConfigurationOutputWithContext(context.Background())
}

func (i TemplateFilterOperationTargetVisualsConfigurationArgs) ToTemplateFilterOperationTargetVisualsConfigurationOutputWithContext(ctx context.Context) TemplateFilterOperationTargetVisualsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterOperationTargetVisualsConfigurationOutput)
}

func (i TemplateFilterOperationTargetVisualsConfigurationArgs) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutput() TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return i.ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFilterOperationTargetVisualsConfigurationArgs) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterOperationTargetVisualsConfigurationOutput).ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(ctx)
}

// TemplateFilterOperationTargetVisualsConfigurationPtrInput is an input type that accepts TemplateFilterOperationTargetVisualsConfigurationArgs, TemplateFilterOperationTargetVisualsConfigurationPtr and TemplateFilterOperationTargetVisualsConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFilterOperationTargetVisualsConfigurationPtrInput` via:
//
//	        TemplateFilterOperationTargetVisualsConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterOperationTargetVisualsConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFilterOperationTargetVisualsConfigurationPtrOutput() TemplateFilterOperationTargetVisualsConfigurationPtrOutput
	ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(context.Context) TemplateFilterOperationTargetVisualsConfigurationPtrOutput
}

type templateFilterOperationTargetVisualsConfigurationPtrType TemplateFilterOperationTargetVisualsConfigurationArgs

func TemplateFilterOperationTargetVisualsConfigurationPtr(v *TemplateFilterOperationTargetVisualsConfigurationArgs) TemplateFilterOperationTargetVisualsConfigurationPtrInput {
	return (*templateFilterOperationTargetVisualsConfigurationPtrType)(v)
}

func (*templateFilterOperationTargetVisualsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterOperationTargetVisualsConfiguration)(nil)).Elem()
}

func (i *templateFilterOperationTargetVisualsConfigurationPtrType) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutput() TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return i.ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFilterOperationTargetVisualsConfigurationPtrType) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterOperationTargetVisualsConfigurationPtrOutput)
}

type TemplateFilterOperationTargetVisualsConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFilterOperationTargetVisualsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterOperationTargetVisualsConfiguration)(nil)).Elem()
}

func (o TemplateFilterOperationTargetVisualsConfigurationOutput) ToTemplateFilterOperationTargetVisualsConfigurationOutput() TemplateFilterOperationTargetVisualsConfigurationOutput {
	return o
}

func (o TemplateFilterOperationTargetVisualsConfigurationOutput) ToTemplateFilterOperationTargetVisualsConfigurationOutputWithContext(ctx context.Context) TemplateFilterOperationTargetVisualsConfigurationOutput {
	return o
}

func (o TemplateFilterOperationTargetVisualsConfigurationOutput) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutput() TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return o.ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFilterOperationTargetVisualsConfigurationOutput) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterOperationTargetVisualsConfiguration) *TemplateFilterOperationTargetVisualsConfiguration {
		return &v
	}).(TemplateFilterOperationTargetVisualsConfigurationPtrOutput)
}

// The configuration of the same-sheet target visuals that you want to be filtered.
func (o TemplateFilterOperationTargetVisualsConfigurationOutput) SameSheetTargetVisualConfiguration() TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilterOperationTargetVisualsConfiguration) *TemplateSameSheetTargetVisualConfiguration {
		return v.SameSheetTargetVisualConfiguration
	}).(TemplateSameSheetTargetVisualConfigurationPtrOutput)
}

type TemplateFilterOperationTargetVisualsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterOperationTargetVisualsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterOperationTargetVisualsConfiguration)(nil)).Elem()
}

func (o TemplateFilterOperationTargetVisualsConfigurationPtrOutput) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutput() TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return o
}

func (o TemplateFilterOperationTargetVisualsConfigurationPtrOutput) ToTemplateFilterOperationTargetVisualsConfigurationPtrOutputWithContext(ctx context.Context) TemplateFilterOperationTargetVisualsConfigurationPtrOutput {
	return o
}

func (o TemplateFilterOperationTargetVisualsConfigurationPtrOutput) Elem() TemplateFilterOperationTargetVisualsConfigurationOutput {
	return o.ApplyT(func(v *TemplateFilterOperationTargetVisualsConfiguration) TemplateFilterOperationTargetVisualsConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFilterOperationTargetVisualsConfiguration
		return ret
	}).(TemplateFilterOperationTargetVisualsConfigurationOutput)
}

// The configuration of the same-sheet target visuals that you want to be filtered.
func (o TemplateFilterOperationTargetVisualsConfigurationPtrOutput) SameSheetTargetVisualConfiguration() TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFilterOperationTargetVisualsConfiguration) *TemplateSameSheetTargetVisualConfiguration {
		if v == nil {
			return nil
		}
		return v.SameSheetTargetVisualConfiguration
	}).(TemplateSameSheetTargetVisualConfigurationPtrOutput)
}

type TemplateFilterRelativeDateTimeControl struct {
	// The visibility configuration of the Apply button on a `FilterRelativeDateTimeControl` .
	CommitMode *TemplateCommitMode `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions *TemplateRelativeDateTimeControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `FilterTextAreaControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// The source filter ID of the `FilterTextAreaControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
	// The title of the `FilterTextAreaControl` .
	Title string `pulumi:"title"`
}

// TemplateFilterRelativeDateTimeControlInput is an input type that accepts TemplateFilterRelativeDateTimeControlArgs and TemplateFilterRelativeDateTimeControlOutput values.
// You can construct a concrete instance of `TemplateFilterRelativeDateTimeControlInput` via:
//
//	TemplateFilterRelativeDateTimeControlArgs{...}
type TemplateFilterRelativeDateTimeControlInput interface {
	pulumi.Input

	ToTemplateFilterRelativeDateTimeControlOutput() TemplateFilterRelativeDateTimeControlOutput
	ToTemplateFilterRelativeDateTimeControlOutputWithContext(context.Context) TemplateFilterRelativeDateTimeControlOutput
}

type TemplateFilterRelativeDateTimeControlArgs struct {
	// The visibility configuration of the Apply button on a `FilterRelativeDateTimeControl` .
	CommitMode TemplateCommitModePtrInput `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions TemplateRelativeDateTimeControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `FilterTextAreaControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// The source filter ID of the `FilterTextAreaControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
	// The title of the `FilterTextAreaControl` .
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateFilterRelativeDateTimeControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterRelativeDateTimeControl)(nil)).Elem()
}

func (i TemplateFilterRelativeDateTimeControlArgs) ToTemplateFilterRelativeDateTimeControlOutput() TemplateFilterRelativeDateTimeControlOutput {
	return i.ToTemplateFilterRelativeDateTimeControlOutputWithContext(context.Background())
}

func (i TemplateFilterRelativeDateTimeControlArgs) ToTemplateFilterRelativeDateTimeControlOutputWithContext(ctx context.Context) TemplateFilterRelativeDateTimeControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterRelativeDateTimeControlOutput)
}

func (i TemplateFilterRelativeDateTimeControlArgs) ToTemplateFilterRelativeDateTimeControlPtrOutput() TemplateFilterRelativeDateTimeControlPtrOutput {
	return i.ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterRelativeDateTimeControlArgs) ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(ctx context.Context) TemplateFilterRelativeDateTimeControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterRelativeDateTimeControlOutput).ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(ctx)
}

// TemplateFilterRelativeDateTimeControlPtrInput is an input type that accepts TemplateFilterRelativeDateTimeControlArgs, TemplateFilterRelativeDateTimeControlPtr and TemplateFilterRelativeDateTimeControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterRelativeDateTimeControlPtrInput` via:
//
//	        TemplateFilterRelativeDateTimeControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterRelativeDateTimeControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterRelativeDateTimeControlPtrOutput() TemplateFilterRelativeDateTimeControlPtrOutput
	ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(context.Context) TemplateFilterRelativeDateTimeControlPtrOutput
}

type templateFilterRelativeDateTimeControlPtrType TemplateFilterRelativeDateTimeControlArgs

func TemplateFilterRelativeDateTimeControlPtr(v *TemplateFilterRelativeDateTimeControlArgs) TemplateFilterRelativeDateTimeControlPtrInput {
	return (*templateFilterRelativeDateTimeControlPtrType)(v)
}

func (*templateFilterRelativeDateTimeControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterRelativeDateTimeControl)(nil)).Elem()
}

func (i *templateFilterRelativeDateTimeControlPtrType) ToTemplateFilterRelativeDateTimeControlPtrOutput() TemplateFilterRelativeDateTimeControlPtrOutput {
	return i.ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterRelativeDateTimeControlPtrType) ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(ctx context.Context) TemplateFilterRelativeDateTimeControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterRelativeDateTimeControlPtrOutput)
}

type TemplateFilterRelativeDateTimeControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterRelativeDateTimeControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterRelativeDateTimeControl)(nil)).Elem()
}

func (o TemplateFilterRelativeDateTimeControlOutput) ToTemplateFilterRelativeDateTimeControlOutput() TemplateFilterRelativeDateTimeControlOutput {
	return o
}

func (o TemplateFilterRelativeDateTimeControlOutput) ToTemplateFilterRelativeDateTimeControlOutputWithContext(ctx context.Context) TemplateFilterRelativeDateTimeControlOutput {
	return o
}

func (o TemplateFilterRelativeDateTimeControlOutput) ToTemplateFilterRelativeDateTimeControlPtrOutput() TemplateFilterRelativeDateTimeControlPtrOutput {
	return o.ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterRelativeDateTimeControlOutput) ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(ctx context.Context) TemplateFilterRelativeDateTimeControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterRelativeDateTimeControl) *TemplateFilterRelativeDateTimeControl {
		return &v
	}).(TemplateFilterRelativeDateTimeControlPtrOutput)
}

// The visibility configuration of the Apply button on a `FilterRelativeDateTimeControl` .
func (o TemplateFilterRelativeDateTimeControlOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v TemplateFilterRelativeDateTimeControl) *TemplateCommitMode { return v.CommitMode }).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateFilterRelativeDateTimeControlOutput) DisplayOptions() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterRelativeDateTimeControl) *TemplateRelativeDateTimeControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateRelativeDateTimeControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterTextAreaControl` .
func (o TemplateFilterRelativeDateTimeControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterRelativeDateTimeControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// The source filter ID of the `FilterTextAreaControl` .
func (o TemplateFilterRelativeDateTimeControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterRelativeDateTimeControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

// The title of the `FilterTextAreaControl` .
func (o TemplateFilterRelativeDateTimeControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterRelativeDateTimeControl) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateFilterRelativeDateTimeControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterRelativeDateTimeControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterRelativeDateTimeControl)(nil)).Elem()
}

func (o TemplateFilterRelativeDateTimeControlPtrOutput) ToTemplateFilterRelativeDateTimeControlPtrOutput() TemplateFilterRelativeDateTimeControlPtrOutput {
	return o
}

func (o TemplateFilterRelativeDateTimeControlPtrOutput) ToTemplateFilterRelativeDateTimeControlPtrOutputWithContext(ctx context.Context) TemplateFilterRelativeDateTimeControlPtrOutput {
	return o
}

func (o TemplateFilterRelativeDateTimeControlPtrOutput) Elem() TemplateFilterRelativeDateTimeControlOutput {
	return o.ApplyT(func(v *TemplateFilterRelativeDateTimeControl) TemplateFilterRelativeDateTimeControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterRelativeDateTimeControl
		return ret
	}).(TemplateFilterRelativeDateTimeControlOutput)
}

// The visibility configuration of the Apply button on a `FilterRelativeDateTimeControl` .
func (o TemplateFilterRelativeDateTimeControlPtrOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v *TemplateFilterRelativeDateTimeControl) *TemplateCommitMode {
		if v == nil {
			return nil
		}
		return v.CommitMode
	}).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateFilterRelativeDateTimeControlPtrOutput) DisplayOptions() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterRelativeDateTimeControl) *TemplateRelativeDateTimeControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateRelativeDateTimeControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterTextAreaControl` .
func (o TemplateFilterRelativeDateTimeControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterRelativeDateTimeControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// The source filter ID of the `FilterTextAreaControl` .
func (o TemplateFilterRelativeDateTimeControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterRelativeDateTimeControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

// The title of the `FilterTextAreaControl` .
func (o TemplateFilterRelativeDateTimeControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterRelativeDateTimeControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplateFilterScopeConfiguration struct {
	// The configuration that applies a filter to all sheets. When you choose `AllSheets` as the value for a `FilterScopeConfiguration` , this filter is applied to all visuals of all sheets in an Analysis, Dashboard, or Template. The `AllSheetsFilterScopeConfiguration` is chosen.
	AllSheets *TemplateAllSheetsFilterScopeConfiguration `pulumi:"allSheets"`
	// The configuration for applying a filter to specific sheets.
	SelectedSheets *TemplateSelectedSheetsFilterScopeConfiguration `pulumi:"selectedSheets"`
}

// TemplateFilterScopeConfigurationInput is an input type that accepts TemplateFilterScopeConfigurationArgs and TemplateFilterScopeConfigurationOutput values.
// You can construct a concrete instance of `TemplateFilterScopeConfigurationInput` via:
//
//	TemplateFilterScopeConfigurationArgs{...}
type TemplateFilterScopeConfigurationInput interface {
	pulumi.Input

	ToTemplateFilterScopeConfigurationOutput() TemplateFilterScopeConfigurationOutput
	ToTemplateFilterScopeConfigurationOutputWithContext(context.Context) TemplateFilterScopeConfigurationOutput
}

type TemplateFilterScopeConfigurationArgs struct {
	// The configuration that applies a filter to all sheets. When you choose `AllSheets` as the value for a `FilterScopeConfiguration` , this filter is applied to all visuals of all sheets in an Analysis, Dashboard, or Template. The `AllSheetsFilterScopeConfiguration` is chosen.
	AllSheets TemplateAllSheetsFilterScopeConfigurationPtrInput `pulumi:"allSheets"`
	// The configuration for applying a filter to specific sheets.
	SelectedSheets TemplateSelectedSheetsFilterScopeConfigurationPtrInput `pulumi:"selectedSheets"`
}

func (TemplateFilterScopeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterScopeConfiguration)(nil)).Elem()
}

func (i TemplateFilterScopeConfigurationArgs) ToTemplateFilterScopeConfigurationOutput() TemplateFilterScopeConfigurationOutput {
	return i.ToTemplateFilterScopeConfigurationOutputWithContext(context.Background())
}

func (i TemplateFilterScopeConfigurationArgs) ToTemplateFilterScopeConfigurationOutputWithContext(ctx context.Context) TemplateFilterScopeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterScopeConfigurationOutput)
}

type TemplateFilterScopeConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFilterScopeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterScopeConfiguration)(nil)).Elem()
}

func (o TemplateFilterScopeConfigurationOutput) ToTemplateFilterScopeConfigurationOutput() TemplateFilterScopeConfigurationOutput {
	return o
}

func (o TemplateFilterScopeConfigurationOutput) ToTemplateFilterScopeConfigurationOutputWithContext(ctx context.Context) TemplateFilterScopeConfigurationOutput {
	return o
}

// The configuration that applies a filter to all sheets. When you choose `AllSheets` as the value for a `FilterScopeConfiguration` , this filter is applied to all visuals of all sheets in an Analysis, Dashboard, or Template. The `AllSheetsFilterScopeConfiguration` is chosen.
func (o TemplateFilterScopeConfigurationOutput) AllSheets() TemplateAllSheetsFilterScopeConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilterScopeConfiguration) *TemplateAllSheetsFilterScopeConfiguration {
		return v.AllSheets
	}).(TemplateAllSheetsFilterScopeConfigurationPtrOutput)
}

// The configuration for applying a filter to specific sheets.
func (o TemplateFilterScopeConfigurationOutput) SelectedSheets() TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFilterScopeConfiguration) *TemplateSelectedSheetsFilterScopeConfiguration {
		return v.SelectedSheets
	}).(TemplateSelectedSheetsFilterScopeConfigurationPtrOutput)
}

type TemplateFilterSelectableValues struct {
	// The values that are used in the `FilterSelectableValues` .
	Values []string `pulumi:"values"`
}

// TemplateFilterSelectableValuesInput is an input type that accepts TemplateFilterSelectableValuesArgs and TemplateFilterSelectableValuesOutput values.
// You can construct a concrete instance of `TemplateFilterSelectableValuesInput` via:
//
//	TemplateFilterSelectableValuesArgs{...}
type TemplateFilterSelectableValuesInput interface {
	pulumi.Input

	ToTemplateFilterSelectableValuesOutput() TemplateFilterSelectableValuesOutput
	ToTemplateFilterSelectableValuesOutputWithContext(context.Context) TemplateFilterSelectableValuesOutput
}

type TemplateFilterSelectableValuesArgs struct {
	// The values that are used in the `FilterSelectableValues` .
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TemplateFilterSelectableValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterSelectableValues)(nil)).Elem()
}

func (i TemplateFilterSelectableValuesArgs) ToTemplateFilterSelectableValuesOutput() TemplateFilterSelectableValuesOutput {
	return i.ToTemplateFilterSelectableValuesOutputWithContext(context.Background())
}

func (i TemplateFilterSelectableValuesArgs) ToTemplateFilterSelectableValuesOutputWithContext(ctx context.Context) TemplateFilterSelectableValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterSelectableValuesOutput)
}

func (i TemplateFilterSelectableValuesArgs) ToTemplateFilterSelectableValuesPtrOutput() TemplateFilterSelectableValuesPtrOutput {
	return i.ToTemplateFilterSelectableValuesPtrOutputWithContext(context.Background())
}

func (i TemplateFilterSelectableValuesArgs) ToTemplateFilterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateFilterSelectableValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterSelectableValuesOutput).ToTemplateFilterSelectableValuesPtrOutputWithContext(ctx)
}

// TemplateFilterSelectableValuesPtrInput is an input type that accepts TemplateFilterSelectableValuesArgs, TemplateFilterSelectableValuesPtr and TemplateFilterSelectableValuesPtrOutput values.
// You can construct a concrete instance of `TemplateFilterSelectableValuesPtrInput` via:
//
//	        TemplateFilterSelectableValuesArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterSelectableValuesPtrInput interface {
	pulumi.Input

	ToTemplateFilterSelectableValuesPtrOutput() TemplateFilterSelectableValuesPtrOutput
	ToTemplateFilterSelectableValuesPtrOutputWithContext(context.Context) TemplateFilterSelectableValuesPtrOutput
}

type templateFilterSelectableValuesPtrType TemplateFilterSelectableValuesArgs

func TemplateFilterSelectableValuesPtr(v *TemplateFilterSelectableValuesArgs) TemplateFilterSelectableValuesPtrInput {
	return (*templateFilterSelectableValuesPtrType)(v)
}

func (*templateFilterSelectableValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterSelectableValues)(nil)).Elem()
}

func (i *templateFilterSelectableValuesPtrType) ToTemplateFilterSelectableValuesPtrOutput() TemplateFilterSelectableValuesPtrOutput {
	return i.ToTemplateFilterSelectableValuesPtrOutputWithContext(context.Background())
}

func (i *templateFilterSelectableValuesPtrType) ToTemplateFilterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateFilterSelectableValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterSelectableValuesPtrOutput)
}

type TemplateFilterSelectableValuesOutput struct{ *pulumi.OutputState }

func (TemplateFilterSelectableValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterSelectableValues)(nil)).Elem()
}

func (o TemplateFilterSelectableValuesOutput) ToTemplateFilterSelectableValuesOutput() TemplateFilterSelectableValuesOutput {
	return o
}

func (o TemplateFilterSelectableValuesOutput) ToTemplateFilterSelectableValuesOutputWithContext(ctx context.Context) TemplateFilterSelectableValuesOutput {
	return o
}

func (o TemplateFilterSelectableValuesOutput) ToTemplateFilterSelectableValuesPtrOutput() TemplateFilterSelectableValuesPtrOutput {
	return o.ToTemplateFilterSelectableValuesPtrOutputWithContext(context.Background())
}

func (o TemplateFilterSelectableValuesOutput) ToTemplateFilterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateFilterSelectableValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterSelectableValues) *TemplateFilterSelectableValues {
		return &v
	}).(TemplateFilterSelectableValuesPtrOutput)
}

// The values that are used in the `FilterSelectableValues` .
func (o TemplateFilterSelectableValuesOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateFilterSelectableValues) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TemplateFilterSelectableValuesPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterSelectableValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterSelectableValues)(nil)).Elem()
}

func (o TemplateFilterSelectableValuesPtrOutput) ToTemplateFilterSelectableValuesPtrOutput() TemplateFilterSelectableValuesPtrOutput {
	return o
}

func (o TemplateFilterSelectableValuesPtrOutput) ToTemplateFilterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateFilterSelectableValuesPtrOutput {
	return o
}

func (o TemplateFilterSelectableValuesPtrOutput) Elem() TemplateFilterSelectableValuesOutput {
	return o.ApplyT(func(v *TemplateFilterSelectableValues) TemplateFilterSelectableValues {
		if v != nil {
			return *v
		}
		var ret TemplateFilterSelectableValues
		return ret
	}).(TemplateFilterSelectableValuesOutput)
}

// The values that are used in the `FilterSelectableValues` .
func (o TemplateFilterSelectableValuesPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateFilterSelectableValues) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type TemplateFilterSliderControl struct {
	// The display options of a control.
	DisplayOptions *TemplateSliderControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `FilterSliderControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// The larger value that is displayed at the right of the slider.
	MaximumValue float64 `pulumi:"maximumValue"`
	// The smaller value that is displayed at the left of the slider.
	MinimumValue float64 `pulumi:"minimumValue"`
	// The source filter ID of the `FilterSliderControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
	// The number of increments that the slider bar is divided into.
	StepSize float64 `pulumi:"stepSize"`
	// The title of the `FilterSliderControl` .
	Title string `pulumi:"title"`
	// The type of the `FilterSliderControl` . Choose one of the following options:
	//
	// - `SINGLE_POINT` : Filter against(equals) a single data point.
	// - `RANGE` : Filter data that is in a specified range.
	Type *TemplateSheetControlSliderType `pulumi:"type"`
}

// TemplateFilterSliderControlInput is an input type that accepts TemplateFilterSliderControlArgs and TemplateFilterSliderControlOutput values.
// You can construct a concrete instance of `TemplateFilterSliderControlInput` via:
//
//	TemplateFilterSliderControlArgs{...}
type TemplateFilterSliderControlInput interface {
	pulumi.Input

	ToTemplateFilterSliderControlOutput() TemplateFilterSliderControlOutput
	ToTemplateFilterSliderControlOutputWithContext(context.Context) TemplateFilterSliderControlOutput
}

type TemplateFilterSliderControlArgs struct {
	// The display options of a control.
	DisplayOptions TemplateSliderControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `FilterSliderControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// The larger value that is displayed at the right of the slider.
	MaximumValue pulumi.Float64Input `pulumi:"maximumValue"`
	// The smaller value that is displayed at the left of the slider.
	MinimumValue pulumi.Float64Input `pulumi:"minimumValue"`
	// The source filter ID of the `FilterSliderControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
	// The number of increments that the slider bar is divided into.
	StepSize pulumi.Float64Input `pulumi:"stepSize"`
	// The title of the `FilterSliderControl` .
	Title pulumi.StringInput `pulumi:"title"`
	// The type of the `FilterSliderControl` . Choose one of the following options:
	//
	// - `SINGLE_POINT` : Filter against(equals) a single data point.
	// - `RANGE` : Filter data that is in a specified range.
	Type TemplateSheetControlSliderTypePtrInput `pulumi:"type"`
}

func (TemplateFilterSliderControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterSliderControl)(nil)).Elem()
}

func (i TemplateFilterSliderControlArgs) ToTemplateFilterSliderControlOutput() TemplateFilterSliderControlOutput {
	return i.ToTemplateFilterSliderControlOutputWithContext(context.Background())
}

func (i TemplateFilterSliderControlArgs) ToTemplateFilterSliderControlOutputWithContext(ctx context.Context) TemplateFilterSliderControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterSliderControlOutput)
}

func (i TemplateFilterSliderControlArgs) ToTemplateFilterSliderControlPtrOutput() TemplateFilterSliderControlPtrOutput {
	return i.ToTemplateFilterSliderControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterSliderControlArgs) ToTemplateFilterSliderControlPtrOutputWithContext(ctx context.Context) TemplateFilterSliderControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterSliderControlOutput).ToTemplateFilterSliderControlPtrOutputWithContext(ctx)
}

// TemplateFilterSliderControlPtrInput is an input type that accepts TemplateFilterSliderControlArgs, TemplateFilterSliderControlPtr and TemplateFilterSliderControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterSliderControlPtrInput` via:
//
//	        TemplateFilterSliderControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterSliderControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterSliderControlPtrOutput() TemplateFilterSliderControlPtrOutput
	ToTemplateFilterSliderControlPtrOutputWithContext(context.Context) TemplateFilterSliderControlPtrOutput
}

type templateFilterSliderControlPtrType TemplateFilterSliderControlArgs

func TemplateFilterSliderControlPtr(v *TemplateFilterSliderControlArgs) TemplateFilterSliderControlPtrInput {
	return (*templateFilterSliderControlPtrType)(v)
}

func (*templateFilterSliderControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterSliderControl)(nil)).Elem()
}

func (i *templateFilterSliderControlPtrType) ToTemplateFilterSliderControlPtrOutput() TemplateFilterSliderControlPtrOutput {
	return i.ToTemplateFilterSliderControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterSliderControlPtrType) ToTemplateFilterSliderControlPtrOutputWithContext(ctx context.Context) TemplateFilterSliderControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterSliderControlPtrOutput)
}

type TemplateFilterSliderControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterSliderControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterSliderControl)(nil)).Elem()
}

func (o TemplateFilterSliderControlOutput) ToTemplateFilterSliderControlOutput() TemplateFilterSliderControlOutput {
	return o
}

func (o TemplateFilterSliderControlOutput) ToTemplateFilterSliderControlOutputWithContext(ctx context.Context) TemplateFilterSliderControlOutput {
	return o
}

func (o TemplateFilterSliderControlOutput) ToTemplateFilterSliderControlPtrOutput() TemplateFilterSliderControlPtrOutput {
	return o.ToTemplateFilterSliderControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterSliderControlOutput) ToTemplateFilterSliderControlPtrOutputWithContext(ctx context.Context) TemplateFilterSliderControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterSliderControl) *TemplateFilterSliderControl {
		return &v
	}).(TemplateFilterSliderControlPtrOutput)
}

// The display options of a control.
func (o TemplateFilterSliderControlOutput) DisplayOptions() TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterSliderControl) *TemplateSliderControlDisplayOptions { return v.DisplayOptions }).(TemplateSliderControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterSliderControl` .
func (o TemplateFilterSliderControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterSliderControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// The larger value that is displayed at the right of the slider.
func (o TemplateFilterSliderControlOutput) MaximumValue() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateFilterSliderControl) float64 { return v.MaximumValue }).(pulumi.Float64Output)
}

// The smaller value that is displayed at the left of the slider.
func (o TemplateFilterSliderControlOutput) MinimumValue() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateFilterSliderControl) float64 { return v.MinimumValue }).(pulumi.Float64Output)
}

// The source filter ID of the `FilterSliderControl` .
func (o TemplateFilterSliderControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterSliderControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

// The number of increments that the slider bar is divided into.
func (o TemplateFilterSliderControlOutput) StepSize() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateFilterSliderControl) float64 { return v.StepSize }).(pulumi.Float64Output)
}

// The title of the `FilterSliderControl` .
func (o TemplateFilterSliderControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterSliderControl) string { return v.Title }).(pulumi.StringOutput)
}

// The type of the `FilterSliderControl` . Choose one of the following options:
//
// - `SINGLE_POINT` : Filter against(equals) a single data point.
// - `RANGE` : Filter data that is in a specified range.
func (o TemplateFilterSliderControlOutput) Type() TemplateSheetControlSliderTypePtrOutput {
	return o.ApplyT(func(v TemplateFilterSliderControl) *TemplateSheetControlSliderType { return v.Type }).(TemplateSheetControlSliderTypePtrOutput)
}

type TemplateFilterSliderControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterSliderControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterSliderControl)(nil)).Elem()
}

func (o TemplateFilterSliderControlPtrOutput) ToTemplateFilterSliderControlPtrOutput() TemplateFilterSliderControlPtrOutput {
	return o
}

func (o TemplateFilterSliderControlPtrOutput) ToTemplateFilterSliderControlPtrOutputWithContext(ctx context.Context) TemplateFilterSliderControlPtrOutput {
	return o
}

func (o TemplateFilterSliderControlPtrOutput) Elem() TemplateFilterSliderControlOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) TemplateFilterSliderControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterSliderControl
		return ret
	}).(TemplateFilterSliderControlOutput)
}

// The display options of a control.
func (o TemplateFilterSliderControlPtrOutput) DisplayOptions() TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *TemplateSliderControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateSliderControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterSliderControl` .
func (o TemplateFilterSliderControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// The larger value that is displayed at the right of the slider.
func (o TemplateFilterSliderControlPtrOutput) MaximumValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaximumValue
	}).(pulumi.Float64PtrOutput)
}

// The smaller value that is displayed at the left of the slider.
func (o TemplateFilterSliderControlPtrOutput) MinimumValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *float64 {
		if v == nil {
			return nil
		}
		return &v.MinimumValue
	}).(pulumi.Float64PtrOutput)
}

// The source filter ID of the `FilterSliderControl` .
func (o TemplateFilterSliderControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

// The number of increments that the slider bar is divided into.
func (o TemplateFilterSliderControlPtrOutput) StepSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *float64 {
		if v == nil {
			return nil
		}
		return &v.StepSize
	}).(pulumi.Float64PtrOutput)
}

// The title of the `FilterSliderControl` .
func (o TemplateFilterSliderControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// The type of the `FilterSliderControl` . Choose one of the following options:
//
// - `SINGLE_POINT` : Filter against(equals) a single data point.
// - `RANGE` : Filter data that is in a specified range.
func (o TemplateFilterSliderControlPtrOutput) Type() TemplateSheetControlSliderTypePtrOutput {
	return o.ApplyT(func(v *TemplateFilterSliderControl) *TemplateSheetControlSliderType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlSliderTypePtrOutput)
}

type TemplateFilterTextAreaControl struct {
	// The delimiter that is used to separate the lines in text.
	Delimiter *string `pulumi:"delimiter"`
	// The display options of a control.
	DisplayOptions *TemplateTextAreaControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `FilterTextAreaControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// The source filter ID of the `FilterTextAreaControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
	// The title of the `FilterTextAreaControl` .
	Title string `pulumi:"title"`
}

// TemplateFilterTextAreaControlInput is an input type that accepts TemplateFilterTextAreaControlArgs and TemplateFilterTextAreaControlOutput values.
// You can construct a concrete instance of `TemplateFilterTextAreaControlInput` via:
//
//	TemplateFilterTextAreaControlArgs{...}
type TemplateFilterTextAreaControlInput interface {
	pulumi.Input

	ToTemplateFilterTextAreaControlOutput() TemplateFilterTextAreaControlOutput
	ToTemplateFilterTextAreaControlOutputWithContext(context.Context) TemplateFilterTextAreaControlOutput
}

type TemplateFilterTextAreaControlArgs struct {
	// The delimiter that is used to separate the lines in text.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// The display options of a control.
	DisplayOptions TemplateTextAreaControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `FilterTextAreaControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// The source filter ID of the `FilterTextAreaControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
	// The title of the `FilterTextAreaControl` .
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateFilterTextAreaControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterTextAreaControl)(nil)).Elem()
}

func (i TemplateFilterTextAreaControlArgs) ToTemplateFilterTextAreaControlOutput() TemplateFilterTextAreaControlOutput {
	return i.ToTemplateFilterTextAreaControlOutputWithContext(context.Background())
}

func (i TemplateFilterTextAreaControlArgs) ToTemplateFilterTextAreaControlOutputWithContext(ctx context.Context) TemplateFilterTextAreaControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterTextAreaControlOutput)
}

func (i TemplateFilterTextAreaControlArgs) ToTemplateFilterTextAreaControlPtrOutput() TemplateFilterTextAreaControlPtrOutput {
	return i.ToTemplateFilterTextAreaControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterTextAreaControlArgs) ToTemplateFilterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextAreaControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterTextAreaControlOutput).ToTemplateFilterTextAreaControlPtrOutputWithContext(ctx)
}

// TemplateFilterTextAreaControlPtrInput is an input type that accepts TemplateFilterTextAreaControlArgs, TemplateFilterTextAreaControlPtr and TemplateFilterTextAreaControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterTextAreaControlPtrInput` via:
//
//	        TemplateFilterTextAreaControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterTextAreaControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterTextAreaControlPtrOutput() TemplateFilterTextAreaControlPtrOutput
	ToTemplateFilterTextAreaControlPtrOutputWithContext(context.Context) TemplateFilterTextAreaControlPtrOutput
}

type templateFilterTextAreaControlPtrType TemplateFilterTextAreaControlArgs

func TemplateFilterTextAreaControlPtr(v *TemplateFilterTextAreaControlArgs) TemplateFilterTextAreaControlPtrInput {
	return (*templateFilterTextAreaControlPtrType)(v)
}

func (*templateFilterTextAreaControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterTextAreaControl)(nil)).Elem()
}

func (i *templateFilterTextAreaControlPtrType) ToTemplateFilterTextAreaControlPtrOutput() TemplateFilterTextAreaControlPtrOutput {
	return i.ToTemplateFilterTextAreaControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterTextAreaControlPtrType) ToTemplateFilterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextAreaControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterTextAreaControlPtrOutput)
}

type TemplateFilterTextAreaControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterTextAreaControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterTextAreaControl)(nil)).Elem()
}

func (o TemplateFilterTextAreaControlOutput) ToTemplateFilterTextAreaControlOutput() TemplateFilterTextAreaControlOutput {
	return o
}

func (o TemplateFilterTextAreaControlOutput) ToTemplateFilterTextAreaControlOutputWithContext(ctx context.Context) TemplateFilterTextAreaControlOutput {
	return o
}

func (o TemplateFilterTextAreaControlOutput) ToTemplateFilterTextAreaControlPtrOutput() TemplateFilterTextAreaControlPtrOutput {
	return o.ToTemplateFilterTextAreaControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterTextAreaControlOutput) ToTemplateFilterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextAreaControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterTextAreaControl) *TemplateFilterTextAreaControl {
		return &v
	}).(TemplateFilterTextAreaControlPtrOutput)
}

// The delimiter that is used to separate the lines in text.
func (o TemplateFilterTextAreaControlOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFilterTextAreaControl) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// The display options of a control.
func (o TemplateFilterTextAreaControlOutput) DisplayOptions() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterTextAreaControl) *TemplateTextAreaControlDisplayOptions { return v.DisplayOptions }).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterTextAreaControl` .
func (o TemplateFilterTextAreaControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterTextAreaControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// The source filter ID of the `FilterTextAreaControl` .
func (o TemplateFilterTextAreaControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterTextAreaControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

// The title of the `FilterTextAreaControl` .
func (o TemplateFilterTextAreaControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterTextAreaControl) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateFilterTextAreaControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterTextAreaControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterTextAreaControl)(nil)).Elem()
}

func (o TemplateFilterTextAreaControlPtrOutput) ToTemplateFilterTextAreaControlPtrOutput() TemplateFilterTextAreaControlPtrOutput {
	return o
}

func (o TemplateFilterTextAreaControlPtrOutput) ToTemplateFilterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextAreaControlPtrOutput {
	return o
}

func (o TemplateFilterTextAreaControlPtrOutput) Elem() TemplateFilterTextAreaControlOutput {
	return o.ApplyT(func(v *TemplateFilterTextAreaControl) TemplateFilterTextAreaControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterTextAreaControl
		return ret
	}).(TemplateFilterTextAreaControlOutput)
}

// The delimiter that is used to separate the lines in text.
func (o TemplateFilterTextAreaControlPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// The display options of a control.
func (o TemplateFilterTextAreaControlPtrOutput) DisplayOptions() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextAreaControl) *TemplateTextAreaControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterTextAreaControl` .
func (o TemplateFilterTextAreaControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// The source filter ID of the `FilterTextAreaControl` .
func (o TemplateFilterTextAreaControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

// The title of the `FilterTextAreaControl` .
func (o TemplateFilterTextAreaControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplateFilterTextFieldControl struct {
	// The display options of a control.
	DisplayOptions *TemplateTextFieldControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `FilterTextFieldControl` .
	FilterControlId string `pulumi:"filterControlId"`
	// The source filter ID of the `FilterTextFieldControl` .
	SourceFilterId string `pulumi:"sourceFilterId"`
	// The title of the `FilterTextFieldControl` .
	Title string `pulumi:"title"`
}

// TemplateFilterTextFieldControlInput is an input type that accepts TemplateFilterTextFieldControlArgs and TemplateFilterTextFieldControlOutput values.
// You can construct a concrete instance of `TemplateFilterTextFieldControlInput` via:
//
//	TemplateFilterTextFieldControlArgs{...}
type TemplateFilterTextFieldControlInput interface {
	pulumi.Input

	ToTemplateFilterTextFieldControlOutput() TemplateFilterTextFieldControlOutput
	ToTemplateFilterTextFieldControlOutputWithContext(context.Context) TemplateFilterTextFieldControlOutput
}

type TemplateFilterTextFieldControlArgs struct {
	// The display options of a control.
	DisplayOptions TemplateTextFieldControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `FilterTextFieldControl` .
	FilterControlId pulumi.StringInput `pulumi:"filterControlId"`
	// The source filter ID of the `FilterTextFieldControl` .
	SourceFilterId pulumi.StringInput `pulumi:"sourceFilterId"`
	// The title of the `FilterTextFieldControl` .
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateFilterTextFieldControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterTextFieldControl)(nil)).Elem()
}

func (i TemplateFilterTextFieldControlArgs) ToTemplateFilterTextFieldControlOutput() TemplateFilterTextFieldControlOutput {
	return i.ToTemplateFilterTextFieldControlOutputWithContext(context.Background())
}

func (i TemplateFilterTextFieldControlArgs) ToTemplateFilterTextFieldControlOutputWithContext(ctx context.Context) TemplateFilterTextFieldControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterTextFieldControlOutput)
}

func (i TemplateFilterTextFieldControlArgs) ToTemplateFilterTextFieldControlPtrOutput() TemplateFilterTextFieldControlPtrOutput {
	return i.ToTemplateFilterTextFieldControlPtrOutputWithContext(context.Background())
}

func (i TemplateFilterTextFieldControlArgs) ToTemplateFilterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextFieldControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterTextFieldControlOutput).ToTemplateFilterTextFieldControlPtrOutputWithContext(ctx)
}

// TemplateFilterTextFieldControlPtrInput is an input type that accepts TemplateFilterTextFieldControlArgs, TemplateFilterTextFieldControlPtr and TemplateFilterTextFieldControlPtrOutput values.
// You can construct a concrete instance of `TemplateFilterTextFieldControlPtrInput` via:
//
//	        TemplateFilterTextFieldControlArgs{...}
//
//	or:
//
//	        nil
type TemplateFilterTextFieldControlPtrInput interface {
	pulumi.Input

	ToTemplateFilterTextFieldControlPtrOutput() TemplateFilterTextFieldControlPtrOutput
	ToTemplateFilterTextFieldControlPtrOutputWithContext(context.Context) TemplateFilterTextFieldControlPtrOutput
}

type templateFilterTextFieldControlPtrType TemplateFilterTextFieldControlArgs

func TemplateFilterTextFieldControlPtr(v *TemplateFilterTextFieldControlArgs) TemplateFilterTextFieldControlPtrInput {
	return (*templateFilterTextFieldControlPtrType)(v)
}

func (*templateFilterTextFieldControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterTextFieldControl)(nil)).Elem()
}

func (i *templateFilterTextFieldControlPtrType) ToTemplateFilterTextFieldControlPtrOutput() TemplateFilterTextFieldControlPtrOutput {
	return i.ToTemplateFilterTextFieldControlPtrOutputWithContext(context.Background())
}

func (i *templateFilterTextFieldControlPtrType) ToTemplateFilterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextFieldControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFilterTextFieldControlPtrOutput)
}

type TemplateFilterTextFieldControlOutput struct{ *pulumi.OutputState }

func (TemplateFilterTextFieldControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFilterTextFieldControl)(nil)).Elem()
}

func (o TemplateFilterTextFieldControlOutput) ToTemplateFilterTextFieldControlOutput() TemplateFilterTextFieldControlOutput {
	return o
}

func (o TemplateFilterTextFieldControlOutput) ToTemplateFilterTextFieldControlOutputWithContext(ctx context.Context) TemplateFilterTextFieldControlOutput {
	return o
}

func (o TemplateFilterTextFieldControlOutput) ToTemplateFilterTextFieldControlPtrOutput() TemplateFilterTextFieldControlPtrOutput {
	return o.ToTemplateFilterTextFieldControlPtrOutputWithContext(context.Background())
}

func (o TemplateFilterTextFieldControlOutput) ToTemplateFilterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextFieldControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFilterTextFieldControl) *TemplateFilterTextFieldControl {
		return &v
	}).(TemplateFilterTextFieldControlPtrOutput)
}

// The display options of a control.
func (o TemplateFilterTextFieldControlOutput) DisplayOptions() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFilterTextFieldControl) *TemplateTextFieldControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterTextFieldControl` .
func (o TemplateFilterTextFieldControlOutput) FilterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterTextFieldControl) string { return v.FilterControlId }).(pulumi.StringOutput)
}

// The source filter ID of the `FilterTextFieldControl` .
func (o TemplateFilterTextFieldControlOutput) SourceFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterTextFieldControl) string { return v.SourceFilterId }).(pulumi.StringOutput)
}

// The title of the `FilterTextFieldControl` .
func (o TemplateFilterTextFieldControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFilterTextFieldControl) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateFilterTextFieldControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateFilterTextFieldControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFilterTextFieldControl)(nil)).Elem()
}

func (o TemplateFilterTextFieldControlPtrOutput) ToTemplateFilterTextFieldControlPtrOutput() TemplateFilterTextFieldControlPtrOutput {
	return o
}

func (o TemplateFilterTextFieldControlPtrOutput) ToTemplateFilterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateFilterTextFieldControlPtrOutput {
	return o
}

func (o TemplateFilterTextFieldControlPtrOutput) Elem() TemplateFilterTextFieldControlOutput {
	return o.ApplyT(func(v *TemplateFilterTextFieldControl) TemplateFilterTextFieldControl {
		if v != nil {
			return *v
		}
		var ret TemplateFilterTextFieldControl
		return ret
	}).(TemplateFilterTextFieldControlOutput)
}

// The display options of a control.
func (o TemplateFilterTextFieldControlPtrOutput) DisplayOptions() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextFieldControl) *TemplateTextFieldControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

// The ID of the `FilterTextFieldControl` .
func (o TemplateFilterTextFieldControlPtrOutput) FilterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextFieldControl) *string {
		if v == nil {
			return nil
		}
		return &v.FilterControlId
	}).(pulumi.StringPtrOutput)
}

// The source filter ID of the `FilterTextFieldControl` .
func (o TemplateFilterTextFieldControlPtrOutput) SourceFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextFieldControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceFilterId
	}).(pulumi.StringPtrOutput)
}

// The title of the `FilterTextFieldControl` .
func (o TemplateFilterTextFieldControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFilterTextFieldControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplateFontConfiguration struct {
	// Determines the color of the text.
	FontColor *string `pulumi:"fontColor"`
	// Determines the appearance of decorative lines on the text.
	FontDecoration *TemplateFontDecoration `pulumi:"fontDecoration"`
	// The font family that you want to use.
	FontFamily *string `pulumi:"fontFamily"`
	// The option that determines the text display size.
	FontSize *TemplateFontSize `pulumi:"fontSize"`
	// Determines the text display face that is inherited by the given font family.
	FontStyle *TemplateFontStyle `pulumi:"fontStyle"`
	// The option that determines the text display weight, or boldness.
	FontWeight *TemplateFontWeight `pulumi:"fontWeight"`
}

// TemplateFontConfigurationInput is an input type that accepts TemplateFontConfigurationArgs and TemplateFontConfigurationOutput values.
// You can construct a concrete instance of `TemplateFontConfigurationInput` via:
//
//	TemplateFontConfigurationArgs{...}
type TemplateFontConfigurationInput interface {
	pulumi.Input

	ToTemplateFontConfigurationOutput() TemplateFontConfigurationOutput
	ToTemplateFontConfigurationOutputWithContext(context.Context) TemplateFontConfigurationOutput
}

type TemplateFontConfigurationArgs struct {
	// Determines the color of the text.
	FontColor pulumi.StringPtrInput `pulumi:"fontColor"`
	// Determines the appearance of decorative lines on the text.
	FontDecoration TemplateFontDecorationPtrInput `pulumi:"fontDecoration"`
	// The font family that you want to use.
	FontFamily pulumi.StringPtrInput `pulumi:"fontFamily"`
	// The option that determines the text display size.
	FontSize TemplateFontSizePtrInput `pulumi:"fontSize"`
	// Determines the text display face that is inherited by the given font family.
	FontStyle TemplateFontStylePtrInput `pulumi:"fontStyle"`
	// The option that determines the text display weight, or boldness.
	FontWeight TemplateFontWeightPtrInput `pulumi:"fontWeight"`
}

func (TemplateFontConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFontConfiguration)(nil)).Elem()
}

func (i TemplateFontConfigurationArgs) ToTemplateFontConfigurationOutput() TemplateFontConfigurationOutput {
	return i.ToTemplateFontConfigurationOutputWithContext(context.Background())
}

func (i TemplateFontConfigurationArgs) ToTemplateFontConfigurationOutputWithContext(ctx context.Context) TemplateFontConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontConfigurationOutput)
}

func (i TemplateFontConfigurationArgs) ToTemplateFontConfigurationPtrOutput() TemplateFontConfigurationPtrOutput {
	return i.ToTemplateFontConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFontConfigurationArgs) ToTemplateFontConfigurationPtrOutputWithContext(ctx context.Context) TemplateFontConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontConfigurationOutput).ToTemplateFontConfigurationPtrOutputWithContext(ctx)
}

// TemplateFontConfigurationPtrInput is an input type that accepts TemplateFontConfigurationArgs, TemplateFontConfigurationPtr and TemplateFontConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFontConfigurationPtrInput` via:
//
//	        TemplateFontConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFontConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFontConfigurationPtrOutput() TemplateFontConfigurationPtrOutput
	ToTemplateFontConfigurationPtrOutputWithContext(context.Context) TemplateFontConfigurationPtrOutput
}

type templateFontConfigurationPtrType TemplateFontConfigurationArgs

func TemplateFontConfigurationPtr(v *TemplateFontConfigurationArgs) TemplateFontConfigurationPtrInput {
	return (*templateFontConfigurationPtrType)(v)
}

func (*templateFontConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFontConfiguration)(nil)).Elem()
}

func (i *templateFontConfigurationPtrType) ToTemplateFontConfigurationPtrOutput() TemplateFontConfigurationPtrOutput {
	return i.ToTemplateFontConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFontConfigurationPtrType) ToTemplateFontConfigurationPtrOutputWithContext(ctx context.Context) TemplateFontConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontConfigurationPtrOutput)
}

type TemplateFontConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFontConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFontConfiguration)(nil)).Elem()
}

func (o TemplateFontConfigurationOutput) ToTemplateFontConfigurationOutput() TemplateFontConfigurationOutput {
	return o
}

func (o TemplateFontConfigurationOutput) ToTemplateFontConfigurationOutputWithContext(ctx context.Context) TemplateFontConfigurationOutput {
	return o
}

func (o TemplateFontConfigurationOutput) ToTemplateFontConfigurationPtrOutput() TemplateFontConfigurationPtrOutput {
	return o.ToTemplateFontConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFontConfigurationOutput) ToTemplateFontConfigurationPtrOutputWithContext(ctx context.Context) TemplateFontConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFontConfiguration) *TemplateFontConfiguration {
		return &v
	}).(TemplateFontConfigurationPtrOutput)
}

// Determines the color of the text.
func (o TemplateFontConfigurationOutput) FontColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFontConfiguration) *string { return v.FontColor }).(pulumi.StringPtrOutput)
}

// Determines the appearance of decorative lines on the text.
func (o TemplateFontConfigurationOutput) FontDecoration() TemplateFontDecorationPtrOutput {
	return o.ApplyT(func(v TemplateFontConfiguration) *TemplateFontDecoration { return v.FontDecoration }).(TemplateFontDecorationPtrOutput)
}

// The font family that you want to use.
func (o TemplateFontConfigurationOutput) FontFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFontConfiguration) *string { return v.FontFamily }).(pulumi.StringPtrOutput)
}

// The option that determines the text display size.
func (o TemplateFontConfigurationOutput) FontSize() TemplateFontSizePtrOutput {
	return o.ApplyT(func(v TemplateFontConfiguration) *TemplateFontSize { return v.FontSize }).(TemplateFontSizePtrOutput)
}

// Determines the text display face that is inherited by the given font family.
func (o TemplateFontConfigurationOutput) FontStyle() TemplateFontStylePtrOutput {
	return o.ApplyT(func(v TemplateFontConfiguration) *TemplateFontStyle { return v.FontStyle }).(TemplateFontStylePtrOutput)
}

// The option that determines the text display weight, or boldness.
func (o TemplateFontConfigurationOutput) FontWeight() TemplateFontWeightPtrOutput {
	return o.ApplyT(func(v TemplateFontConfiguration) *TemplateFontWeight { return v.FontWeight }).(TemplateFontWeightPtrOutput)
}

type TemplateFontConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFontConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFontConfiguration)(nil)).Elem()
}

func (o TemplateFontConfigurationPtrOutput) ToTemplateFontConfigurationPtrOutput() TemplateFontConfigurationPtrOutput {
	return o
}

func (o TemplateFontConfigurationPtrOutput) ToTemplateFontConfigurationPtrOutputWithContext(ctx context.Context) TemplateFontConfigurationPtrOutput {
	return o
}

func (o TemplateFontConfigurationPtrOutput) Elem() TemplateFontConfigurationOutput {
	return o.ApplyT(func(v *TemplateFontConfiguration) TemplateFontConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFontConfiguration
		return ret
	}).(TemplateFontConfigurationOutput)
}

// Determines the color of the text.
func (o TemplateFontConfigurationPtrOutput) FontColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFontConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FontColor
	}).(pulumi.StringPtrOutput)
}

// Determines the appearance of decorative lines on the text.
func (o TemplateFontConfigurationPtrOutput) FontDecoration() TemplateFontDecorationPtrOutput {
	return o.ApplyT(func(v *TemplateFontConfiguration) *TemplateFontDecoration {
		if v == nil {
			return nil
		}
		return v.FontDecoration
	}).(TemplateFontDecorationPtrOutput)
}

// The font family that you want to use.
func (o TemplateFontConfigurationPtrOutput) FontFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFontConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FontFamily
	}).(pulumi.StringPtrOutput)
}

// The option that determines the text display size.
func (o TemplateFontConfigurationPtrOutput) FontSize() TemplateFontSizePtrOutput {
	return o.ApplyT(func(v *TemplateFontConfiguration) *TemplateFontSize {
		if v == nil {
			return nil
		}
		return v.FontSize
	}).(TemplateFontSizePtrOutput)
}

// Determines the text display face that is inherited by the given font family.
func (o TemplateFontConfigurationPtrOutput) FontStyle() TemplateFontStylePtrOutput {
	return o.ApplyT(func(v *TemplateFontConfiguration) *TemplateFontStyle {
		if v == nil {
			return nil
		}
		return v.FontStyle
	}).(TemplateFontStylePtrOutput)
}

// The option that determines the text display weight, or boldness.
func (o TemplateFontConfigurationPtrOutput) FontWeight() TemplateFontWeightPtrOutput {
	return o.ApplyT(func(v *TemplateFontConfiguration) *TemplateFontWeight {
		if v == nil {
			return nil
		}
		return v.FontWeight
	}).(TemplateFontWeightPtrOutput)
}

type TemplateFontSize struct {
	// String based length that is composed of value and unit in px
	Absolute *string `pulumi:"absolute"`
	// The lexical name for the text size, proportional to its surrounding context.
	Relative *TemplateRelativeFontSize `pulumi:"relative"`
}

// TemplateFontSizeInput is an input type that accepts TemplateFontSizeArgs and TemplateFontSizeOutput values.
// You can construct a concrete instance of `TemplateFontSizeInput` via:
//
//	TemplateFontSizeArgs{...}
type TemplateFontSizeInput interface {
	pulumi.Input

	ToTemplateFontSizeOutput() TemplateFontSizeOutput
	ToTemplateFontSizeOutputWithContext(context.Context) TemplateFontSizeOutput
}

type TemplateFontSizeArgs struct {
	// String based length that is composed of value and unit in px
	Absolute pulumi.StringPtrInput `pulumi:"absolute"`
	// The lexical name for the text size, proportional to its surrounding context.
	Relative TemplateRelativeFontSizePtrInput `pulumi:"relative"`
}

func (TemplateFontSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFontSize)(nil)).Elem()
}

func (i TemplateFontSizeArgs) ToTemplateFontSizeOutput() TemplateFontSizeOutput {
	return i.ToTemplateFontSizeOutputWithContext(context.Background())
}

func (i TemplateFontSizeArgs) ToTemplateFontSizeOutputWithContext(ctx context.Context) TemplateFontSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontSizeOutput)
}

func (i TemplateFontSizeArgs) ToTemplateFontSizePtrOutput() TemplateFontSizePtrOutput {
	return i.ToTemplateFontSizePtrOutputWithContext(context.Background())
}

func (i TemplateFontSizeArgs) ToTemplateFontSizePtrOutputWithContext(ctx context.Context) TemplateFontSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontSizeOutput).ToTemplateFontSizePtrOutputWithContext(ctx)
}

// TemplateFontSizePtrInput is an input type that accepts TemplateFontSizeArgs, TemplateFontSizePtr and TemplateFontSizePtrOutput values.
// You can construct a concrete instance of `TemplateFontSizePtrInput` via:
//
//	        TemplateFontSizeArgs{...}
//
//	or:
//
//	        nil
type TemplateFontSizePtrInput interface {
	pulumi.Input

	ToTemplateFontSizePtrOutput() TemplateFontSizePtrOutput
	ToTemplateFontSizePtrOutputWithContext(context.Context) TemplateFontSizePtrOutput
}

type templateFontSizePtrType TemplateFontSizeArgs

func TemplateFontSizePtr(v *TemplateFontSizeArgs) TemplateFontSizePtrInput {
	return (*templateFontSizePtrType)(v)
}

func (*templateFontSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFontSize)(nil)).Elem()
}

func (i *templateFontSizePtrType) ToTemplateFontSizePtrOutput() TemplateFontSizePtrOutput {
	return i.ToTemplateFontSizePtrOutputWithContext(context.Background())
}

func (i *templateFontSizePtrType) ToTemplateFontSizePtrOutputWithContext(ctx context.Context) TemplateFontSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontSizePtrOutput)
}

type TemplateFontSizeOutput struct{ *pulumi.OutputState }

func (TemplateFontSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFontSize)(nil)).Elem()
}

func (o TemplateFontSizeOutput) ToTemplateFontSizeOutput() TemplateFontSizeOutput {
	return o
}

func (o TemplateFontSizeOutput) ToTemplateFontSizeOutputWithContext(ctx context.Context) TemplateFontSizeOutput {
	return o
}

func (o TemplateFontSizeOutput) ToTemplateFontSizePtrOutput() TemplateFontSizePtrOutput {
	return o.ToTemplateFontSizePtrOutputWithContext(context.Background())
}

func (o TemplateFontSizeOutput) ToTemplateFontSizePtrOutputWithContext(ctx context.Context) TemplateFontSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFontSize) *TemplateFontSize {
		return &v
	}).(TemplateFontSizePtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateFontSizeOutput) Absolute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFontSize) *string { return v.Absolute }).(pulumi.StringPtrOutput)
}

// The lexical name for the text size, proportional to its surrounding context.
func (o TemplateFontSizeOutput) Relative() TemplateRelativeFontSizePtrOutput {
	return o.ApplyT(func(v TemplateFontSize) *TemplateRelativeFontSize { return v.Relative }).(TemplateRelativeFontSizePtrOutput)
}

type TemplateFontSizePtrOutput struct{ *pulumi.OutputState }

func (TemplateFontSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFontSize)(nil)).Elem()
}

func (o TemplateFontSizePtrOutput) ToTemplateFontSizePtrOutput() TemplateFontSizePtrOutput {
	return o
}

func (o TemplateFontSizePtrOutput) ToTemplateFontSizePtrOutputWithContext(ctx context.Context) TemplateFontSizePtrOutput {
	return o
}

func (o TemplateFontSizePtrOutput) Elem() TemplateFontSizeOutput {
	return o.ApplyT(func(v *TemplateFontSize) TemplateFontSize {
		if v != nil {
			return *v
		}
		var ret TemplateFontSize
		return ret
	}).(TemplateFontSizeOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateFontSizePtrOutput) Absolute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFontSize) *string {
		if v == nil {
			return nil
		}
		return v.Absolute
	}).(pulumi.StringPtrOutput)
}

// The lexical name for the text size, proportional to its surrounding context.
func (o TemplateFontSizePtrOutput) Relative() TemplateRelativeFontSizePtrOutput {
	return o.ApplyT(func(v *TemplateFontSize) *TemplateRelativeFontSize {
		if v == nil {
			return nil
		}
		return v.Relative
	}).(TemplateRelativeFontSizePtrOutput)
}

type TemplateFontWeight struct {
	// The lexical name for the level of boldness of the text display.
	Name *TemplateFontWeightName `pulumi:"name"`
}

// TemplateFontWeightInput is an input type that accepts TemplateFontWeightArgs and TemplateFontWeightOutput values.
// You can construct a concrete instance of `TemplateFontWeightInput` via:
//
//	TemplateFontWeightArgs{...}
type TemplateFontWeightInput interface {
	pulumi.Input

	ToTemplateFontWeightOutput() TemplateFontWeightOutput
	ToTemplateFontWeightOutputWithContext(context.Context) TemplateFontWeightOutput
}

type TemplateFontWeightArgs struct {
	// The lexical name for the level of boldness of the text display.
	Name TemplateFontWeightNamePtrInput `pulumi:"name"`
}

func (TemplateFontWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFontWeight)(nil)).Elem()
}

func (i TemplateFontWeightArgs) ToTemplateFontWeightOutput() TemplateFontWeightOutput {
	return i.ToTemplateFontWeightOutputWithContext(context.Background())
}

func (i TemplateFontWeightArgs) ToTemplateFontWeightOutputWithContext(ctx context.Context) TemplateFontWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontWeightOutput)
}

func (i TemplateFontWeightArgs) ToTemplateFontWeightPtrOutput() TemplateFontWeightPtrOutput {
	return i.ToTemplateFontWeightPtrOutputWithContext(context.Background())
}

func (i TemplateFontWeightArgs) ToTemplateFontWeightPtrOutputWithContext(ctx context.Context) TemplateFontWeightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontWeightOutput).ToTemplateFontWeightPtrOutputWithContext(ctx)
}

// TemplateFontWeightPtrInput is an input type that accepts TemplateFontWeightArgs, TemplateFontWeightPtr and TemplateFontWeightPtrOutput values.
// You can construct a concrete instance of `TemplateFontWeightPtrInput` via:
//
//	        TemplateFontWeightArgs{...}
//
//	or:
//
//	        nil
type TemplateFontWeightPtrInput interface {
	pulumi.Input

	ToTemplateFontWeightPtrOutput() TemplateFontWeightPtrOutput
	ToTemplateFontWeightPtrOutputWithContext(context.Context) TemplateFontWeightPtrOutput
}

type templateFontWeightPtrType TemplateFontWeightArgs

func TemplateFontWeightPtr(v *TemplateFontWeightArgs) TemplateFontWeightPtrInput {
	return (*templateFontWeightPtrType)(v)
}

func (*templateFontWeightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFontWeight)(nil)).Elem()
}

func (i *templateFontWeightPtrType) ToTemplateFontWeightPtrOutput() TemplateFontWeightPtrOutput {
	return i.ToTemplateFontWeightPtrOutputWithContext(context.Background())
}

func (i *templateFontWeightPtrType) ToTemplateFontWeightPtrOutputWithContext(ctx context.Context) TemplateFontWeightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFontWeightPtrOutput)
}

type TemplateFontWeightOutput struct{ *pulumi.OutputState }

func (TemplateFontWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFontWeight)(nil)).Elem()
}

func (o TemplateFontWeightOutput) ToTemplateFontWeightOutput() TemplateFontWeightOutput {
	return o
}

func (o TemplateFontWeightOutput) ToTemplateFontWeightOutputWithContext(ctx context.Context) TemplateFontWeightOutput {
	return o
}

func (o TemplateFontWeightOutput) ToTemplateFontWeightPtrOutput() TemplateFontWeightPtrOutput {
	return o.ToTemplateFontWeightPtrOutputWithContext(context.Background())
}

func (o TemplateFontWeightOutput) ToTemplateFontWeightPtrOutputWithContext(ctx context.Context) TemplateFontWeightPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFontWeight) *TemplateFontWeight {
		return &v
	}).(TemplateFontWeightPtrOutput)
}

// The lexical name for the level of boldness of the text display.
func (o TemplateFontWeightOutput) Name() TemplateFontWeightNamePtrOutput {
	return o.ApplyT(func(v TemplateFontWeight) *TemplateFontWeightName { return v.Name }).(TemplateFontWeightNamePtrOutput)
}

type TemplateFontWeightPtrOutput struct{ *pulumi.OutputState }

func (TemplateFontWeightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFontWeight)(nil)).Elem()
}

func (o TemplateFontWeightPtrOutput) ToTemplateFontWeightPtrOutput() TemplateFontWeightPtrOutput {
	return o
}

func (o TemplateFontWeightPtrOutput) ToTemplateFontWeightPtrOutputWithContext(ctx context.Context) TemplateFontWeightPtrOutput {
	return o
}

func (o TemplateFontWeightPtrOutput) Elem() TemplateFontWeightOutput {
	return o.ApplyT(func(v *TemplateFontWeight) TemplateFontWeight {
		if v != nil {
			return *v
		}
		var ret TemplateFontWeight
		return ret
	}).(TemplateFontWeightOutput)
}

// The lexical name for the level of boldness of the text display.
func (o TemplateFontWeightPtrOutput) Name() TemplateFontWeightNamePtrOutput {
	return o.ApplyT(func(v *TemplateFontWeight) *TemplateFontWeightName {
		if v == nil {
			return nil
		}
		return v.Name
	}).(TemplateFontWeightNamePtrOutput)
}

type TemplateForecastComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The custom seasonality value setup of a forecast computation.
	CustomSeasonalityValue *float64 `pulumi:"customSeasonalityValue"`
	// The lower boundary setup of a forecast computation.
	LowerBoundary *float64 `pulumi:"lowerBoundary"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward *float64 `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward *float64 `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval *float64 `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `AUTOMATIC`
	// - `CUSTOM` : Checks the custom seasonality value.
	Seasonality *TemplateForecastComputationSeasonality `pulumi:"seasonality"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary *float64 `pulumi:"upperBoundary"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateForecastComputationInput is an input type that accepts TemplateForecastComputationArgs and TemplateForecastComputationOutput values.
// You can construct a concrete instance of `TemplateForecastComputationInput` via:
//
//	TemplateForecastComputationArgs{...}
type TemplateForecastComputationInput interface {
	pulumi.Input

	ToTemplateForecastComputationOutput() TemplateForecastComputationOutput
	ToTemplateForecastComputationOutputWithContext(context.Context) TemplateForecastComputationOutput
}

type TemplateForecastComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The custom seasonality value setup of a forecast computation.
	CustomSeasonalityValue pulumi.Float64PtrInput `pulumi:"customSeasonalityValue"`
	// The lower boundary setup of a forecast computation.
	LowerBoundary pulumi.Float64PtrInput `pulumi:"lowerBoundary"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward pulumi.Float64PtrInput `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward pulumi.Float64PtrInput `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval pulumi.Float64PtrInput `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `AUTOMATIC`
	// - `CUSTOM` : Checks the custom seasonality value.
	Seasonality TemplateForecastComputationSeasonalityPtrInput `pulumi:"seasonality"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary pulumi.Float64PtrInput `pulumi:"upperBoundary"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateForecastComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateForecastComputation)(nil)).Elem()
}

func (i TemplateForecastComputationArgs) ToTemplateForecastComputationOutput() TemplateForecastComputationOutput {
	return i.ToTemplateForecastComputationOutputWithContext(context.Background())
}

func (i TemplateForecastComputationArgs) ToTemplateForecastComputationOutputWithContext(ctx context.Context) TemplateForecastComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastComputationOutput)
}

func (i TemplateForecastComputationArgs) ToTemplateForecastComputationPtrOutput() TemplateForecastComputationPtrOutput {
	return i.ToTemplateForecastComputationPtrOutputWithContext(context.Background())
}

func (i TemplateForecastComputationArgs) ToTemplateForecastComputationPtrOutputWithContext(ctx context.Context) TemplateForecastComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastComputationOutput).ToTemplateForecastComputationPtrOutputWithContext(ctx)
}

// TemplateForecastComputationPtrInput is an input type that accepts TemplateForecastComputationArgs, TemplateForecastComputationPtr and TemplateForecastComputationPtrOutput values.
// You can construct a concrete instance of `TemplateForecastComputationPtrInput` via:
//
//	        TemplateForecastComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateForecastComputationPtrInput interface {
	pulumi.Input

	ToTemplateForecastComputationPtrOutput() TemplateForecastComputationPtrOutput
	ToTemplateForecastComputationPtrOutputWithContext(context.Context) TemplateForecastComputationPtrOutput
}

type templateForecastComputationPtrType TemplateForecastComputationArgs

func TemplateForecastComputationPtr(v *TemplateForecastComputationArgs) TemplateForecastComputationPtrInput {
	return (*templateForecastComputationPtrType)(v)
}

func (*templateForecastComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateForecastComputation)(nil)).Elem()
}

func (i *templateForecastComputationPtrType) ToTemplateForecastComputationPtrOutput() TemplateForecastComputationPtrOutput {
	return i.ToTemplateForecastComputationPtrOutputWithContext(context.Background())
}

func (i *templateForecastComputationPtrType) ToTemplateForecastComputationPtrOutputWithContext(ctx context.Context) TemplateForecastComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastComputationPtrOutput)
}

type TemplateForecastComputationOutput struct{ *pulumi.OutputState }

func (TemplateForecastComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateForecastComputation)(nil)).Elem()
}

func (o TemplateForecastComputationOutput) ToTemplateForecastComputationOutput() TemplateForecastComputationOutput {
	return o
}

func (o TemplateForecastComputationOutput) ToTemplateForecastComputationOutputWithContext(ctx context.Context) TemplateForecastComputationOutput {
	return o
}

func (o TemplateForecastComputationOutput) ToTemplateForecastComputationPtrOutput() TemplateForecastComputationPtrOutput {
	return o.ToTemplateForecastComputationPtrOutputWithContext(context.Background())
}

func (o TemplateForecastComputationOutput) ToTemplateForecastComputationPtrOutputWithContext(ctx context.Context) TemplateForecastComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateForecastComputation) *TemplateForecastComputation {
		return &v
	}).(TemplateForecastComputationPtrOutput)
}

// The ID for a computation.
func (o TemplateForecastComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateForecastComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The custom seasonality value setup of a forecast computation.
func (o TemplateForecastComputationOutput) CustomSeasonalityValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *float64 { return v.CustomSeasonalityValue }).(pulumi.Float64PtrOutput)
}

// The lower boundary setup of a forecast computation.
func (o TemplateForecastComputationOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *float64 { return v.LowerBoundary }).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o TemplateForecastComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The periods backward setup of a forecast computation.
func (o TemplateForecastComputationOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *float64 { return v.PeriodsBackward }).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o TemplateForecastComputationOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *float64 { return v.PeriodsForward }).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o TemplateForecastComputationOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *float64 { return v.PredictionInterval }).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `AUTOMATIC`
// - `CUSTOM` : Checks the custom seasonality value.
func (o TemplateForecastComputationOutput) Seasonality() TemplateForecastComputationSeasonalityPtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *TemplateForecastComputationSeasonality { return v.Seasonality }).(TemplateForecastComputationSeasonalityPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateForecastComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o TemplateForecastComputationOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *float64 { return v.UpperBoundary }).(pulumi.Float64PtrOutput)
}

// The value field that is used in a computation.
func (o TemplateForecastComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateForecastComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateForecastComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateForecastComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateForecastComputation)(nil)).Elem()
}

func (o TemplateForecastComputationPtrOutput) ToTemplateForecastComputationPtrOutput() TemplateForecastComputationPtrOutput {
	return o
}

func (o TemplateForecastComputationPtrOutput) ToTemplateForecastComputationPtrOutputWithContext(ctx context.Context) TemplateForecastComputationPtrOutput {
	return o
}

func (o TemplateForecastComputationPtrOutput) Elem() TemplateForecastComputationOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) TemplateForecastComputation {
		if v != nil {
			return *v
		}
		var ret TemplateForecastComputation
		return ret
	}).(TemplateForecastComputationOutput)
}

// The ID for a computation.
func (o TemplateForecastComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The custom seasonality value setup of a forecast computation.
func (o TemplateForecastComputationPtrOutput) CustomSeasonalityValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.CustomSeasonalityValue
	}).(pulumi.Float64PtrOutput)
}

// The lower boundary setup of a forecast computation.
func (o TemplateForecastComputationPtrOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.LowerBoundary
	}).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o TemplateForecastComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The periods backward setup of a forecast computation.
func (o TemplateForecastComputationPtrOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsBackward
	}).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o TemplateForecastComputationPtrOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsForward
	}).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o TemplateForecastComputationPtrOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.PredictionInterval
	}).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `AUTOMATIC`
// - `CUSTOM` : Checks the custom seasonality value.
func (o TemplateForecastComputationPtrOutput) Seasonality() TemplateForecastComputationSeasonalityPtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *TemplateForecastComputationSeasonality {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(TemplateForecastComputationSeasonalityPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateForecastComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o TemplateForecastComputationPtrOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.UpperBoundary
	}).(pulumi.Float64PtrOutput)
}

// The value field that is used in a computation.
func (o TemplateForecastComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateForecastComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateForecastConfiguration struct {
	// The forecast properties setup of a forecast in the line chart.
	ForecastProperties *TemplateTimeBasedForecastProperties `pulumi:"forecastProperties"`
	// The forecast scenario of a forecast in the line chart.
	Scenario *TemplateForecastScenario `pulumi:"scenario"`
}

// TemplateForecastConfigurationInput is an input type that accepts TemplateForecastConfigurationArgs and TemplateForecastConfigurationOutput values.
// You can construct a concrete instance of `TemplateForecastConfigurationInput` via:
//
//	TemplateForecastConfigurationArgs{...}
type TemplateForecastConfigurationInput interface {
	pulumi.Input

	ToTemplateForecastConfigurationOutput() TemplateForecastConfigurationOutput
	ToTemplateForecastConfigurationOutputWithContext(context.Context) TemplateForecastConfigurationOutput
}

type TemplateForecastConfigurationArgs struct {
	// The forecast properties setup of a forecast in the line chart.
	ForecastProperties TemplateTimeBasedForecastPropertiesPtrInput `pulumi:"forecastProperties"`
	// The forecast scenario of a forecast in the line chart.
	Scenario TemplateForecastScenarioPtrInput `pulumi:"scenario"`
}

func (TemplateForecastConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateForecastConfiguration)(nil)).Elem()
}

func (i TemplateForecastConfigurationArgs) ToTemplateForecastConfigurationOutput() TemplateForecastConfigurationOutput {
	return i.ToTemplateForecastConfigurationOutputWithContext(context.Background())
}

func (i TemplateForecastConfigurationArgs) ToTemplateForecastConfigurationOutputWithContext(ctx context.Context) TemplateForecastConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastConfigurationOutput)
}

// TemplateForecastConfigurationArrayInput is an input type that accepts TemplateForecastConfigurationArray and TemplateForecastConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateForecastConfigurationArrayInput` via:
//
//	TemplateForecastConfigurationArray{ TemplateForecastConfigurationArgs{...} }
type TemplateForecastConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateForecastConfigurationArrayOutput() TemplateForecastConfigurationArrayOutput
	ToTemplateForecastConfigurationArrayOutputWithContext(context.Context) TemplateForecastConfigurationArrayOutput
}

type TemplateForecastConfigurationArray []TemplateForecastConfigurationInput

func (TemplateForecastConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateForecastConfiguration)(nil)).Elem()
}

func (i TemplateForecastConfigurationArray) ToTemplateForecastConfigurationArrayOutput() TemplateForecastConfigurationArrayOutput {
	return i.ToTemplateForecastConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateForecastConfigurationArray) ToTemplateForecastConfigurationArrayOutputWithContext(ctx context.Context) TemplateForecastConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastConfigurationArrayOutput)
}

type TemplateForecastConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateForecastConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateForecastConfiguration)(nil)).Elem()
}

func (o TemplateForecastConfigurationOutput) ToTemplateForecastConfigurationOutput() TemplateForecastConfigurationOutput {
	return o
}

func (o TemplateForecastConfigurationOutput) ToTemplateForecastConfigurationOutputWithContext(ctx context.Context) TemplateForecastConfigurationOutput {
	return o
}

// The forecast properties setup of a forecast in the line chart.
func (o TemplateForecastConfigurationOutput) ForecastProperties() TemplateTimeBasedForecastPropertiesPtrOutput {
	return o.ApplyT(func(v TemplateForecastConfiguration) *TemplateTimeBasedForecastProperties {
		return v.ForecastProperties
	}).(TemplateTimeBasedForecastPropertiesPtrOutput)
}

// The forecast scenario of a forecast in the line chart.
func (o TemplateForecastConfigurationOutput) Scenario() TemplateForecastScenarioPtrOutput {
	return o.ApplyT(func(v TemplateForecastConfiguration) *TemplateForecastScenario { return v.Scenario }).(TemplateForecastScenarioPtrOutput)
}

type TemplateForecastConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateForecastConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateForecastConfiguration)(nil)).Elem()
}

func (o TemplateForecastConfigurationArrayOutput) ToTemplateForecastConfigurationArrayOutput() TemplateForecastConfigurationArrayOutput {
	return o
}

func (o TemplateForecastConfigurationArrayOutput) ToTemplateForecastConfigurationArrayOutputWithContext(ctx context.Context) TemplateForecastConfigurationArrayOutput {
	return o
}

func (o TemplateForecastConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateForecastConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateForecastConfiguration {
		return vs[0].([]TemplateForecastConfiguration)[vs[1].(int)]
	}).(TemplateForecastConfigurationOutput)
}

type TemplateForecastScenario struct {
	// The what-if analysis forecast setup with the target date.
	WhatIfPointScenario *TemplateWhatIfPointScenario `pulumi:"whatIfPointScenario"`
	// The what-if analysis forecast setup with the date range.
	WhatIfRangeScenario *TemplateWhatIfRangeScenario `pulumi:"whatIfRangeScenario"`
}

// TemplateForecastScenarioInput is an input type that accepts TemplateForecastScenarioArgs and TemplateForecastScenarioOutput values.
// You can construct a concrete instance of `TemplateForecastScenarioInput` via:
//
//	TemplateForecastScenarioArgs{...}
type TemplateForecastScenarioInput interface {
	pulumi.Input

	ToTemplateForecastScenarioOutput() TemplateForecastScenarioOutput
	ToTemplateForecastScenarioOutputWithContext(context.Context) TemplateForecastScenarioOutput
}

type TemplateForecastScenarioArgs struct {
	// The what-if analysis forecast setup with the target date.
	WhatIfPointScenario TemplateWhatIfPointScenarioPtrInput `pulumi:"whatIfPointScenario"`
	// The what-if analysis forecast setup with the date range.
	WhatIfRangeScenario TemplateWhatIfRangeScenarioPtrInput `pulumi:"whatIfRangeScenario"`
}

func (TemplateForecastScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateForecastScenario)(nil)).Elem()
}

func (i TemplateForecastScenarioArgs) ToTemplateForecastScenarioOutput() TemplateForecastScenarioOutput {
	return i.ToTemplateForecastScenarioOutputWithContext(context.Background())
}

func (i TemplateForecastScenarioArgs) ToTemplateForecastScenarioOutputWithContext(ctx context.Context) TemplateForecastScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastScenarioOutput)
}

func (i TemplateForecastScenarioArgs) ToTemplateForecastScenarioPtrOutput() TemplateForecastScenarioPtrOutput {
	return i.ToTemplateForecastScenarioPtrOutputWithContext(context.Background())
}

func (i TemplateForecastScenarioArgs) ToTemplateForecastScenarioPtrOutputWithContext(ctx context.Context) TemplateForecastScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastScenarioOutput).ToTemplateForecastScenarioPtrOutputWithContext(ctx)
}

// TemplateForecastScenarioPtrInput is an input type that accepts TemplateForecastScenarioArgs, TemplateForecastScenarioPtr and TemplateForecastScenarioPtrOutput values.
// You can construct a concrete instance of `TemplateForecastScenarioPtrInput` via:
//
//	        TemplateForecastScenarioArgs{...}
//
//	or:
//
//	        nil
type TemplateForecastScenarioPtrInput interface {
	pulumi.Input

	ToTemplateForecastScenarioPtrOutput() TemplateForecastScenarioPtrOutput
	ToTemplateForecastScenarioPtrOutputWithContext(context.Context) TemplateForecastScenarioPtrOutput
}

type templateForecastScenarioPtrType TemplateForecastScenarioArgs

func TemplateForecastScenarioPtr(v *TemplateForecastScenarioArgs) TemplateForecastScenarioPtrInput {
	return (*templateForecastScenarioPtrType)(v)
}

func (*templateForecastScenarioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateForecastScenario)(nil)).Elem()
}

func (i *templateForecastScenarioPtrType) ToTemplateForecastScenarioPtrOutput() TemplateForecastScenarioPtrOutput {
	return i.ToTemplateForecastScenarioPtrOutputWithContext(context.Background())
}

func (i *templateForecastScenarioPtrType) ToTemplateForecastScenarioPtrOutputWithContext(ctx context.Context) TemplateForecastScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateForecastScenarioPtrOutput)
}

type TemplateForecastScenarioOutput struct{ *pulumi.OutputState }

func (TemplateForecastScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateForecastScenario)(nil)).Elem()
}

func (o TemplateForecastScenarioOutput) ToTemplateForecastScenarioOutput() TemplateForecastScenarioOutput {
	return o
}

func (o TemplateForecastScenarioOutput) ToTemplateForecastScenarioOutputWithContext(ctx context.Context) TemplateForecastScenarioOutput {
	return o
}

func (o TemplateForecastScenarioOutput) ToTemplateForecastScenarioPtrOutput() TemplateForecastScenarioPtrOutput {
	return o.ToTemplateForecastScenarioPtrOutputWithContext(context.Background())
}

func (o TemplateForecastScenarioOutput) ToTemplateForecastScenarioPtrOutputWithContext(ctx context.Context) TemplateForecastScenarioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateForecastScenario) *TemplateForecastScenario {
		return &v
	}).(TemplateForecastScenarioPtrOutput)
}

// The what-if analysis forecast setup with the target date.
func (o TemplateForecastScenarioOutput) WhatIfPointScenario() TemplateWhatIfPointScenarioPtrOutput {
	return o.ApplyT(func(v TemplateForecastScenario) *TemplateWhatIfPointScenario { return v.WhatIfPointScenario }).(TemplateWhatIfPointScenarioPtrOutput)
}

// The what-if analysis forecast setup with the date range.
func (o TemplateForecastScenarioOutput) WhatIfRangeScenario() TemplateWhatIfRangeScenarioPtrOutput {
	return o.ApplyT(func(v TemplateForecastScenario) *TemplateWhatIfRangeScenario { return v.WhatIfRangeScenario }).(TemplateWhatIfRangeScenarioPtrOutput)
}

type TemplateForecastScenarioPtrOutput struct{ *pulumi.OutputState }

func (TemplateForecastScenarioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateForecastScenario)(nil)).Elem()
}

func (o TemplateForecastScenarioPtrOutput) ToTemplateForecastScenarioPtrOutput() TemplateForecastScenarioPtrOutput {
	return o
}

func (o TemplateForecastScenarioPtrOutput) ToTemplateForecastScenarioPtrOutputWithContext(ctx context.Context) TemplateForecastScenarioPtrOutput {
	return o
}

func (o TemplateForecastScenarioPtrOutput) Elem() TemplateForecastScenarioOutput {
	return o.ApplyT(func(v *TemplateForecastScenario) TemplateForecastScenario {
		if v != nil {
			return *v
		}
		var ret TemplateForecastScenario
		return ret
	}).(TemplateForecastScenarioOutput)
}

// The what-if analysis forecast setup with the target date.
func (o TemplateForecastScenarioPtrOutput) WhatIfPointScenario() TemplateWhatIfPointScenarioPtrOutput {
	return o.ApplyT(func(v *TemplateForecastScenario) *TemplateWhatIfPointScenario {
		if v == nil {
			return nil
		}
		return v.WhatIfPointScenario
	}).(TemplateWhatIfPointScenarioPtrOutput)
}

// The what-if analysis forecast setup with the date range.
func (o TemplateForecastScenarioPtrOutput) WhatIfRangeScenario() TemplateWhatIfRangeScenarioPtrOutput {
	return o.ApplyT(func(v *TemplateForecastScenario) *TemplateWhatIfRangeScenario {
		if v == nil {
			return nil
		}
		return v.WhatIfRangeScenario
	}).(TemplateWhatIfRangeScenarioPtrOutput)
}

type TemplateFormatConfiguration struct {
	// Formatting configuration for `DateTime` fields.
	DateTimeFormatConfiguration *TemplateDateTimeFormatConfiguration `pulumi:"dateTimeFormatConfiguration"`
	// Formatting configuration for number fields.
	NumberFormatConfiguration *TemplateNumberFormatConfiguration `pulumi:"numberFormatConfiguration"`
	// Formatting configuration for string fields.
	StringFormatConfiguration *TemplateStringFormatConfiguration `pulumi:"stringFormatConfiguration"`
}

// TemplateFormatConfigurationInput is an input type that accepts TemplateFormatConfigurationArgs and TemplateFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateFormatConfigurationInput` via:
//
//	TemplateFormatConfigurationArgs{...}
type TemplateFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateFormatConfigurationOutput() TemplateFormatConfigurationOutput
	ToTemplateFormatConfigurationOutputWithContext(context.Context) TemplateFormatConfigurationOutput
}

type TemplateFormatConfigurationArgs struct {
	// Formatting configuration for `DateTime` fields.
	DateTimeFormatConfiguration TemplateDateTimeFormatConfigurationPtrInput `pulumi:"dateTimeFormatConfiguration"`
	// Formatting configuration for number fields.
	NumberFormatConfiguration TemplateNumberFormatConfigurationPtrInput `pulumi:"numberFormatConfiguration"`
	// Formatting configuration for string fields.
	StringFormatConfiguration TemplateStringFormatConfigurationPtrInput `pulumi:"stringFormatConfiguration"`
}

func (TemplateFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFormatConfiguration)(nil)).Elem()
}

func (i TemplateFormatConfigurationArgs) ToTemplateFormatConfigurationOutput() TemplateFormatConfigurationOutput {
	return i.ToTemplateFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateFormatConfigurationArgs) ToTemplateFormatConfigurationOutputWithContext(ctx context.Context) TemplateFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFormatConfigurationOutput)
}

func (i TemplateFormatConfigurationArgs) ToTemplateFormatConfigurationPtrOutput() TemplateFormatConfigurationPtrOutput {
	return i.ToTemplateFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFormatConfigurationArgs) ToTemplateFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFormatConfigurationOutput).ToTemplateFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateFormatConfigurationPtrInput is an input type that accepts TemplateFormatConfigurationArgs, TemplateFormatConfigurationPtr and TemplateFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFormatConfigurationPtrInput` via:
//
//	        TemplateFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFormatConfigurationPtrOutput() TemplateFormatConfigurationPtrOutput
	ToTemplateFormatConfigurationPtrOutputWithContext(context.Context) TemplateFormatConfigurationPtrOutput
}

type templateFormatConfigurationPtrType TemplateFormatConfigurationArgs

func TemplateFormatConfigurationPtr(v *TemplateFormatConfigurationArgs) TemplateFormatConfigurationPtrInput {
	return (*templateFormatConfigurationPtrType)(v)
}

func (*templateFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFormatConfiguration)(nil)).Elem()
}

func (i *templateFormatConfigurationPtrType) ToTemplateFormatConfigurationPtrOutput() TemplateFormatConfigurationPtrOutput {
	return i.ToTemplateFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFormatConfigurationPtrType) ToTemplateFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFormatConfigurationPtrOutput)
}

type TemplateFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFormatConfiguration)(nil)).Elem()
}

func (o TemplateFormatConfigurationOutput) ToTemplateFormatConfigurationOutput() TemplateFormatConfigurationOutput {
	return o
}

func (o TemplateFormatConfigurationOutput) ToTemplateFormatConfigurationOutputWithContext(ctx context.Context) TemplateFormatConfigurationOutput {
	return o
}

func (o TemplateFormatConfigurationOutput) ToTemplateFormatConfigurationPtrOutput() TemplateFormatConfigurationPtrOutput {
	return o.ToTemplateFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFormatConfigurationOutput) ToTemplateFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFormatConfiguration) *TemplateFormatConfiguration {
		return &v
	}).(TemplateFormatConfigurationPtrOutput)
}

// Formatting configuration for `DateTime` fields.
func (o TemplateFormatConfigurationOutput) DateTimeFormatConfiguration() TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFormatConfiguration) *TemplateDateTimeFormatConfiguration {
		return v.DateTimeFormatConfiguration
	}).(TemplateDateTimeFormatConfigurationPtrOutput)
}

// Formatting configuration for number fields.
func (o TemplateFormatConfigurationOutput) NumberFormatConfiguration() TemplateNumberFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFormatConfiguration) *TemplateNumberFormatConfiguration {
		return v.NumberFormatConfiguration
	}).(TemplateNumberFormatConfigurationPtrOutput)
}

// Formatting configuration for string fields.
func (o TemplateFormatConfigurationOutput) StringFormatConfiguration() TemplateStringFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFormatConfiguration) *TemplateStringFormatConfiguration {
		return v.StringFormatConfiguration
	}).(TemplateStringFormatConfigurationPtrOutput)
}

type TemplateFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFormatConfiguration)(nil)).Elem()
}

func (o TemplateFormatConfigurationPtrOutput) ToTemplateFormatConfigurationPtrOutput() TemplateFormatConfigurationPtrOutput {
	return o
}

func (o TemplateFormatConfigurationPtrOutput) ToTemplateFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateFormatConfigurationPtrOutput {
	return o
}

func (o TemplateFormatConfigurationPtrOutput) Elem() TemplateFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateFormatConfiguration) TemplateFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFormatConfiguration
		return ret
	}).(TemplateFormatConfigurationOutput)
}

// Formatting configuration for `DateTime` fields.
func (o TemplateFormatConfigurationPtrOutput) DateTimeFormatConfiguration() TemplateDateTimeFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFormatConfiguration) *TemplateDateTimeFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.DateTimeFormatConfiguration
	}).(TemplateDateTimeFormatConfigurationPtrOutput)
}

// Formatting configuration for number fields.
func (o TemplateFormatConfigurationPtrOutput) NumberFormatConfiguration() TemplateNumberFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFormatConfiguration) *TemplateNumberFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NumberFormatConfiguration
	}).(TemplateNumberFormatConfigurationPtrOutput)
}

// Formatting configuration for string fields.
func (o TemplateFormatConfigurationPtrOutput) StringFormatConfiguration() TemplateStringFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFormatConfiguration) *TemplateStringFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.StringFormatConfiguration
	}).(TemplateStringFormatConfigurationPtrOutput)
}

type TemplateFreeFormLayoutCanvasSizeOptions struct {
	// The options that determine the sizing of the canvas used in a free-form layout.
	ScreenCanvasSizeOptions *TemplateFreeFormLayoutScreenCanvasSizeOptions `pulumi:"screenCanvasSizeOptions"`
}

// TemplateFreeFormLayoutCanvasSizeOptionsInput is an input type that accepts TemplateFreeFormLayoutCanvasSizeOptionsArgs and TemplateFreeFormLayoutCanvasSizeOptionsOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutCanvasSizeOptionsInput` via:
//
//	TemplateFreeFormLayoutCanvasSizeOptionsArgs{...}
type TemplateFreeFormLayoutCanvasSizeOptionsInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutCanvasSizeOptionsOutput() TemplateFreeFormLayoutCanvasSizeOptionsOutput
	ToTemplateFreeFormLayoutCanvasSizeOptionsOutputWithContext(context.Context) TemplateFreeFormLayoutCanvasSizeOptionsOutput
}

type TemplateFreeFormLayoutCanvasSizeOptionsArgs struct {
	// The options that determine the sizing of the canvas used in a free-form layout.
	ScreenCanvasSizeOptions TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrInput `pulumi:"screenCanvasSizeOptions"`
}

func (TemplateFreeFormLayoutCanvasSizeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutCanvasSizeOptions)(nil)).Elem()
}

func (i TemplateFreeFormLayoutCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutCanvasSizeOptionsOutput() TemplateFreeFormLayoutCanvasSizeOptionsOutput {
	return i.ToTemplateFreeFormLayoutCanvasSizeOptionsOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateFreeFormLayoutCanvasSizeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutCanvasSizeOptionsOutput)
}

func (i TemplateFreeFormLayoutCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return i.ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutCanvasSizeOptionsOutput).ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(ctx)
}

// TemplateFreeFormLayoutCanvasSizeOptionsPtrInput is an input type that accepts TemplateFreeFormLayoutCanvasSizeOptionsArgs, TemplateFreeFormLayoutCanvasSizeOptionsPtr and TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutCanvasSizeOptionsPtrInput` via:
//
//	        TemplateFreeFormLayoutCanvasSizeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateFreeFormLayoutCanvasSizeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput
	ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(context.Context) TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput
}

type templateFreeFormLayoutCanvasSizeOptionsPtrType TemplateFreeFormLayoutCanvasSizeOptionsArgs

func TemplateFreeFormLayoutCanvasSizeOptionsPtr(v *TemplateFreeFormLayoutCanvasSizeOptionsArgs) TemplateFreeFormLayoutCanvasSizeOptionsPtrInput {
	return (*templateFreeFormLayoutCanvasSizeOptionsPtrType)(v)
}

func (*templateFreeFormLayoutCanvasSizeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutCanvasSizeOptions)(nil)).Elem()
}

func (i *templateFreeFormLayoutCanvasSizeOptionsPtrType) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return i.ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateFreeFormLayoutCanvasSizeOptionsPtrType) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput)
}

type TemplateFreeFormLayoutCanvasSizeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutCanvasSizeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateFreeFormLayoutCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutCanvasSizeOptionsOutput() TemplateFreeFormLayoutCanvasSizeOptionsOutput {
	return o
}

func (o TemplateFreeFormLayoutCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateFreeFormLayoutCanvasSizeOptionsOutput {
	return o
}

func (o TemplateFreeFormLayoutCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return o.ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateFreeFormLayoutCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFreeFormLayoutCanvasSizeOptions) *TemplateFreeFormLayoutCanvasSizeOptions {
		return &v
	}).(TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput)
}

// The options that determine the sizing of the canvas used in a free-form layout.
func (o TemplateFreeFormLayoutCanvasSizeOptionsOutput) ScreenCanvasSizeOptions() TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutCanvasSizeOptions) *TemplateFreeFormLayoutScreenCanvasSizeOptions {
		return v.ScreenCanvasSizeOptions
	}).(TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput)
}

type TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput) ToTemplateFreeFormLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput) Elem() TemplateFreeFormLayoutCanvasSizeOptionsOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutCanvasSizeOptions) TemplateFreeFormLayoutCanvasSizeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateFreeFormLayoutCanvasSizeOptions
		return ret
	}).(TemplateFreeFormLayoutCanvasSizeOptionsOutput)
}

// The options that determine the sizing of the canvas used in a free-form layout.
func (o TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput) ScreenCanvasSizeOptions() TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutCanvasSizeOptions) *TemplateFreeFormLayoutScreenCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return v.ScreenCanvasSizeOptions
	}).(TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput)
}

type TemplateFreeFormLayoutConfiguration struct {
	CanvasSizeOptions *TemplateFreeFormLayoutCanvasSizeOptions `pulumi:"canvasSizeOptions"`
	// The elements that are included in a free-form layout.
	Elements []TemplateFreeFormLayoutElement `pulumi:"elements"`
}

// TemplateFreeFormLayoutConfigurationInput is an input type that accepts TemplateFreeFormLayoutConfigurationArgs and TemplateFreeFormLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutConfigurationInput` via:
//
//	TemplateFreeFormLayoutConfigurationArgs{...}
type TemplateFreeFormLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutConfigurationOutput() TemplateFreeFormLayoutConfigurationOutput
	ToTemplateFreeFormLayoutConfigurationOutputWithContext(context.Context) TemplateFreeFormLayoutConfigurationOutput
}

type TemplateFreeFormLayoutConfigurationArgs struct {
	CanvasSizeOptions TemplateFreeFormLayoutCanvasSizeOptionsPtrInput `pulumi:"canvasSizeOptions"`
	// The elements that are included in a free-form layout.
	Elements TemplateFreeFormLayoutElementArrayInput `pulumi:"elements"`
}

func (TemplateFreeFormLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutConfiguration)(nil)).Elem()
}

func (i TemplateFreeFormLayoutConfigurationArgs) ToTemplateFreeFormLayoutConfigurationOutput() TemplateFreeFormLayoutConfigurationOutput {
	return i.ToTemplateFreeFormLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutConfigurationArgs) ToTemplateFreeFormLayoutConfigurationOutputWithContext(ctx context.Context) TemplateFreeFormLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutConfigurationOutput)
}

func (i TemplateFreeFormLayoutConfigurationArgs) ToTemplateFreeFormLayoutConfigurationPtrOutput() TemplateFreeFormLayoutConfigurationPtrOutput {
	return i.ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutConfigurationArgs) ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutConfigurationOutput).ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateFreeFormLayoutConfigurationPtrInput is an input type that accepts TemplateFreeFormLayoutConfigurationArgs, TemplateFreeFormLayoutConfigurationPtr and TemplateFreeFormLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutConfigurationPtrInput` via:
//
//	        TemplateFreeFormLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFreeFormLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutConfigurationPtrOutput() TemplateFreeFormLayoutConfigurationPtrOutput
	ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(context.Context) TemplateFreeFormLayoutConfigurationPtrOutput
}

type templateFreeFormLayoutConfigurationPtrType TemplateFreeFormLayoutConfigurationArgs

func TemplateFreeFormLayoutConfigurationPtr(v *TemplateFreeFormLayoutConfigurationArgs) TemplateFreeFormLayoutConfigurationPtrInput {
	return (*templateFreeFormLayoutConfigurationPtrType)(v)
}

func (*templateFreeFormLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutConfiguration)(nil)).Elem()
}

func (i *templateFreeFormLayoutConfigurationPtrType) ToTemplateFreeFormLayoutConfigurationPtrOutput() TemplateFreeFormLayoutConfigurationPtrOutput {
	return i.ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFreeFormLayoutConfigurationPtrType) ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutConfigurationPtrOutput)
}

type TemplateFreeFormLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutConfiguration)(nil)).Elem()
}

func (o TemplateFreeFormLayoutConfigurationOutput) ToTemplateFreeFormLayoutConfigurationOutput() TemplateFreeFormLayoutConfigurationOutput {
	return o
}

func (o TemplateFreeFormLayoutConfigurationOutput) ToTemplateFreeFormLayoutConfigurationOutputWithContext(ctx context.Context) TemplateFreeFormLayoutConfigurationOutput {
	return o
}

func (o TemplateFreeFormLayoutConfigurationOutput) ToTemplateFreeFormLayoutConfigurationPtrOutput() TemplateFreeFormLayoutConfigurationPtrOutput {
	return o.ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFreeFormLayoutConfigurationOutput) ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFreeFormLayoutConfiguration) *TemplateFreeFormLayoutConfiguration {
		return &v
	}).(TemplateFreeFormLayoutConfigurationPtrOutput)
}

func (o TemplateFreeFormLayoutConfigurationOutput) CanvasSizeOptions() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutConfiguration) *TemplateFreeFormLayoutCanvasSizeOptions {
		return v.CanvasSizeOptions
	}).(TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput)
}

// The elements that are included in a free-form layout.
func (o TemplateFreeFormLayoutConfigurationOutput) Elements() TemplateFreeFormLayoutElementArrayOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutConfiguration) []TemplateFreeFormLayoutElement { return v.Elements }).(TemplateFreeFormLayoutElementArrayOutput)
}

type TemplateFreeFormLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutConfiguration)(nil)).Elem()
}

func (o TemplateFreeFormLayoutConfigurationPtrOutput) ToTemplateFreeFormLayoutConfigurationPtrOutput() TemplateFreeFormLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateFreeFormLayoutConfigurationPtrOutput) ToTemplateFreeFormLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateFreeFormLayoutConfigurationPtrOutput) Elem() TemplateFreeFormLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutConfiguration) TemplateFreeFormLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFreeFormLayoutConfiguration
		return ret
	}).(TemplateFreeFormLayoutConfigurationOutput)
}

func (o TemplateFreeFormLayoutConfigurationPtrOutput) CanvasSizeOptions() TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutConfiguration) *TemplateFreeFormLayoutCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return v.CanvasSizeOptions
	}).(TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput)
}

// The elements that are included in a free-form layout.
func (o TemplateFreeFormLayoutConfigurationPtrOutput) Elements() TemplateFreeFormLayoutElementArrayOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutConfiguration) []TemplateFreeFormLayoutElement {
		if v == nil {
			return nil
		}
		return v.Elements
	}).(TemplateFreeFormLayoutElementArrayOutput)
}

type TemplateFreeFormLayoutElement struct {
	// The background style configuration of a free-form layout element.
	BackgroundStyle *TemplateFreeFormLayoutElementBackgroundStyle `pulumi:"backgroundStyle"`
	// The border style configuration of a free-form layout element.
	BorderStyle *TemplateFreeFormLayoutElementBorderStyle `pulumi:"borderStyle"`
	// A unique identifier for an element within a free-form layout.
	ElementId string `pulumi:"elementId"`
	// The type of element.
	ElementType_ TemplateLayoutElementType `pulumi:"elementType"`
	// String based length that is composed of value and unit in px
	Height string `pulumi:"height"`
	// The loading animation configuration of a free-form layout element.
	LoadingAnimation *TemplateLoadingAnimation `pulumi:"loadingAnimation"`
	// The rendering rules that determine when an element should be displayed within a free-form layout.
	RenderingRules []TemplateSheetElementRenderingRule `pulumi:"renderingRules"`
	// The border style configuration of a free-form layout element. This border style is used when the element is selected.
	SelectedBorderStyle *TemplateFreeFormLayoutElementBorderStyle `pulumi:"selectedBorderStyle"`
	// The visibility of an element within a free-form layout.
	Visibility interface{} `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width string `pulumi:"width"`
	// String based length that is composed of value and unit in px
	XAxisLocation string `pulumi:"xAxisLocation"`
	// String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
	YAxisLocation string `pulumi:"yAxisLocation"`
}

// TemplateFreeFormLayoutElementInput is an input type that accepts TemplateFreeFormLayoutElementArgs and TemplateFreeFormLayoutElementOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutElementInput` via:
//
//	TemplateFreeFormLayoutElementArgs{...}
type TemplateFreeFormLayoutElementInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutElementOutput() TemplateFreeFormLayoutElementOutput
	ToTemplateFreeFormLayoutElementOutputWithContext(context.Context) TemplateFreeFormLayoutElementOutput
}

type TemplateFreeFormLayoutElementArgs struct {
	// The background style configuration of a free-form layout element.
	BackgroundStyle TemplateFreeFormLayoutElementBackgroundStylePtrInput `pulumi:"backgroundStyle"`
	// The border style configuration of a free-form layout element.
	BorderStyle TemplateFreeFormLayoutElementBorderStylePtrInput `pulumi:"borderStyle"`
	// A unique identifier for an element within a free-form layout.
	ElementId pulumi.StringInput `pulumi:"elementId"`
	// The type of element.
	ElementType_ TemplateLayoutElementTypeInput `pulumi:"elementType"`
	// String based length that is composed of value and unit in px
	Height pulumi.StringInput `pulumi:"height"`
	// The loading animation configuration of a free-form layout element.
	LoadingAnimation TemplateLoadingAnimationPtrInput `pulumi:"loadingAnimation"`
	// The rendering rules that determine when an element should be displayed within a free-form layout.
	RenderingRules TemplateSheetElementRenderingRuleArrayInput `pulumi:"renderingRules"`
	// The border style configuration of a free-form layout element. This border style is used when the element is selected.
	SelectedBorderStyle TemplateFreeFormLayoutElementBorderStylePtrInput `pulumi:"selectedBorderStyle"`
	// The visibility of an element within a free-form layout.
	Visibility pulumi.Input `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width pulumi.StringInput `pulumi:"width"`
	// String based length that is composed of value and unit in px
	XAxisLocation pulumi.StringInput `pulumi:"xAxisLocation"`
	// String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
	YAxisLocation pulumi.StringInput `pulumi:"yAxisLocation"`
}

func (TemplateFreeFormLayoutElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutElement)(nil)).Elem()
}

func (i TemplateFreeFormLayoutElementArgs) ToTemplateFreeFormLayoutElementOutput() TemplateFreeFormLayoutElementOutput {
	return i.ToTemplateFreeFormLayoutElementOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutElementArgs) ToTemplateFreeFormLayoutElementOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementOutput)
}

// TemplateFreeFormLayoutElementArrayInput is an input type that accepts TemplateFreeFormLayoutElementArray and TemplateFreeFormLayoutElementArrayOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutElementArrayInput` via:
//
//	TemplateFreeFormLayoutElementArray{ TemplateFreeFormLayoutElementArgs{...} }
type TemplateFreeFormLayoutElementArrayInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutElementArrayOutput() TemplateFreeFormLayoutElementArrayOutput
	ToTemplateFreeFormLayoutElementArrayOutputWithContext(context.Context) TemplateFreeFormLayoutElementArrayOutput
}

type TemplateFreeFormLayoutElementArray []TemplateFreeFormLayoutElementInput

func (TemplateFreeFormLayoutElementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFreeFormLayoutElement)(nil)).Elem()
}

func (i TemplateFreeFormLayoutElementArray) ToTemplateFreeFormLayoutElementArrayOutput() TemplateFreeFormLayoutElementArrayOutput {
	return i.ToTemplateFreeFormLayoutElementArrayOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutElementArray) ToTemplateFreeFormLayoutElementArrayOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementArrayOutput)
}

type TemplateFreeFormLayoutElementOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutElement)(nil)).Elem()
}

func (o TemplateFreeFormLayoutElementOutput) ToTemplateFreeFormLayoutElementOutput() TemplateFreeFormLayoutElementOutput {
	return o
}

func (o TemplateFreeFormLayoutElementOutput) ToTemplateFreeFormLayoutElementOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementOutput {
	return o
}

// The background style configuration of a free-form layout element.
func (o TemplateFreeFormLayoutElementOutput) BackgroundStyle() TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) *TemplateFreeFormLayoutElementBackgroundStyle {
		return v.BackgroundStyle
	}).(TemplateFreeFormLayoutElementBackgroundStylePtrOutput)
}

// The border style configuration of a free-form layout element.
func (o TemplateFreeFormLayoutElementOutput) BorderStyle() TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) *TemplateFreeFormLayoutElementBorderStyle { return v.BorderStyle }).(TemplateFreeFormLayoutElementBorderStylePtrOutput)
}

// A unique identifier for an element within a free-form layout.
func (o TemplateFreeFormLayoutElementOutput) ElementId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) string { return v.ElementId }).(pulumi.StringOutput)
}

// The type of element.
func (o TemplateFreeFormLayoutElementOutput) GetElementType_() TemplateLayoutElementTypeOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) TemplateLayoutElementType { return v.ElementType_ }).(TemplateLayoutElementTypeOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateFreeFormLayoutElementOutput) Height() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) string { return v.Height }).(pulumi.StringOutput)
}

// The loading animation configuration of a free-form layout element.
func (o TemplateFreeFormLayoutElementOutput) LoadingAnimation() TemplateLoadingAnimationPtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) *TemplateLoadingAnimation { return v.LoadingAnimation }).(TemplateLoadingAnimationPtrOutput)
}

// The rendering rules that determine when an element should be displayed within a free-form layout.
func (o TemplateFreeFormLayoutElementOutput) RenderingRules() TemplateSheetElementRenderingRuleArrayOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) []TemplateSheetElementRenderingRule { return v.RenderingRules }).(TemplateSheetElementRenderingRuleArrayOutput)
}

// The border style configuration of a free-form layout element. This border style is used when the element is selected.
func (o TemplateFreeFormLayoutElementOutput) SelectedBorderStyle() TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) *TemplateFreeFormLayoutElementBorderStyle {
		return v.SelectedBorderStyle
	}).(TemplateFreeFormLayoutElementBorderStylePtrOutput)
}

// The visibility of an element within a free-form layout.
func (o TemplateFreeFormLayoutElementOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateFreeFormLayoutElementOutput) Width() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) string { return v.Width }).(pulumi.StringOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateFreeFormLayoutElementOutput) XAxisLocation() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) string { return v.XAxisLocation }).(pulumi.StringOutput)
}

// String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
func (o TemplateFreeFormLayoutElementOutput) YAxisLocation() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElement) string { return v.YAxisLocation }).(pulumi.StringOutput)
}

type TemplateFreeFormLayoutElementArrayOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutElementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateFreeFormLayoutElement)(nil)).Elem()
}

func (o TemplateFreeFormLayoutElementArrayOutput) ToTemplateFreeFormLayoutElementArrayOutput() TemplateFreeFormLayoutElementArrayOutput {
	return o
}

func (o TemplateFreeFormLayoutElementArrayOutput) ToTemplateFreeFormLayoutElementArrayOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementArrayOutput {
	return o
}

func (o TemplateFreeFormLayoutElementArrayOutput) Index(i pulumi.IntInput) TemplateFreeFormLayoutElementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateFreeFormLayoutElement {
		return vs[0].([]TemplateFreeFormLayoutElement)[vs[1].(int)]
	}).(TemplateFreeFormLayoutElementOutput)
}

type TemplateFreeFormLayoutElementBackgroundStyle struct {
	// The background color of a free-form layout element.
	Color *string `pulumi:"color"`
	// The background visibility of a free-form layout element.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateFreeFormLayoutElementBackgroundStyleInput is an input type that accepts TemplateFreeFormLayoutElementBackgroundStyleArgs and TemplateFreeFormLayoutElementBackgroundStyleOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutElementBackgroundStyleInput` via:
//
//	TemplateFreeFormLayoutElementBackgroundStyleArgs{...}
type TemplateFreeFormLayoutElementBackgroundStyleInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutElementBackgroundStyleOutput() TemplateFreeFormLayoutElementBackgroundStyleOutput
	ToTemplateFreeFormLayoutElementBackgroundStyleOutputWithContext(context.Context) TemplateFreeFormLayoutElementBackgroundStyleOutput
}

type TemplateFreeFormLayoutElementBackgroundStyleArgs struct {
	// The background color of a free-form layout element.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The background visibility of a free-form layout element.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateFreeFormLayoutElementBackgroundStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutElementBackgroundStyle)(nil)).Elem()
}

func (i TemplateFreeFormLayoutElementBackgroundStyleArgs) ToTemplateFreeFormLayoutElementBackgroundStyleOutput() TemplateFreeFormLayoutElementBackgroundStyleOutput {
	return i.ToTemplateFreeFormLayoutElementBackgroundStyleOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutElementBackgroundStyleArgs) ToTemplateFreeFormLayoutElementBackgroundStyleOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBackgroundStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementBackgroundStyleOutput)
}

func (i TemplateFreeFormLayoutElementBackgroundStyleArgs) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutput() TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return i.ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutElementBackgroundStyleArgs) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementBackgroundStyleOutput).ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(ctx)
}

// TemplateFreeFormLayoutElementBackgroundStylePtrInput is an input type that accepts TemplateFreeFormLayoutElementBackgroundStyleArgs, TemplateFreeFormLayoutElementBackgroundStylePtr and TemplateFreeFormLayoutElementBackgroundStylePtrOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutElementBackgroundStylePtrInput` via:
//
//	        TemplateFreeFormLayoutElementBackgroundStyleArgs{...}
//
//	or:
//
//	        nil
type TemplateFreeFormLayoutElementBackgroundStylePtrInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutElementBackgroundStylePtrOutput() TemplateFreeFormLayoutElementBackgroundStylePtrOutput
	ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(context.Context) TemplateFreeFormLayoutElementBackgroundStylePtrOutput
}

type templateFreeFormLayoutElementBackgroundStylePtrType TemplateFreeFormLayoutElementBackgroundStyleArgs

func TemplateFreeFormLayoutElementBackgroundStylePtr(v *TemplateFreeFormLayoutElementBackgroundStyleArgs) TemplateFreeFormLayoutElementBackgroundStylePtrInput {
	return (*templateFreeFormLayoutElementBackgroundStylePtrType)(v)
}

func (*templateFreeFormLayoutElementBackgroundStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutElementBackgroundStyle)(nil)).Elem()
}

func (i *templateFreeFormLayoutElementBackgroundStylePtrType) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutput() TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return i.ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(context.Background())
}

func (i *templateFreeFormLayoutElementBackgroundStylePtrType) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementBackgroundStylePtrOutput)
}

type TemplateFreeFormLayoutElementBackgroundStyleOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutElementBackgroundStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutElementBackgroundStyle)(nil)).Elem()
}

func (o TemplateFreeFormLayoutElementBackgroundStyleOutput) ToTemplateFreeFormLayoutElementBackgroundStyleOutput() TemplateFreeFormLayoutElementBackgroundStyleOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBackgroundStyleOutput) ToTemplateFreeFormLayoutElementBackgroundStyleOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBackgroundStyleOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBackgroundStyleOutput) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutput() TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return o.ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(context.Background())
}

func (o TemplateFreeFormLayoutElementBackgroundStyleOutput) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFreeFormLayoutElementBackgroundStyle) *TemplateFreeFormLayoutElementBackgroundStyle {
		return &v
	}).(TemplateFreeFormLayoutElementBackgroundStylePtrOutput)
}

// The background color of a free-form layout element.
func (o TemplateFreeFormLayoutElementBackgroundStyleOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElementBackgroundStyle) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The background visibility of a free-form layout element.
func (o TemplateFreeFormLayoutElementBackgroundStyleOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElementBackgroundStyle) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateFreeFormLayoutElementBackgroundStylePtrOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutElementBackgroundStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutElementBackgroundStyle)(nil)).Elem()
}

func (o TemplateFreeFormLayoutElementBackgroundStylePtrOutput) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutput() TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBackgroundStylePtrOutput) ToTemplateFreeFormLayoutElementBackgroundStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBackgroundStylePtrOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBackgroundStylePtrOutput) Elem() TemplateFreeFormLayoutElementBackgroundStyleOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutElementBackgroundStyle) TemplateFreeFormLayoutElementBackgroundStyle {
		if v != nil {
			return *v
		}
		var ret TemplateFreeFormLayoutElementBackgroundStyle
		return ret
	}).(TemplateFreeFormLayoutElementBackgroundStyleOutput)
}

// The background color of a free-form layout element.
func (o TemplateFreeFormLayoutElementBackgroundStylePtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutElementBackgroundStyle) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The background visibility of a free-form layout element.
func (o TemplateFreeFormLayoutElementBackgroundStylePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutElementBackgroundStyle) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateFreeFormLayoutElementBorderStyle struct {
	// The border color of a free-form layout element.
	Color *string `pulumi:"color"`
	// The border visibility of a free-form layout element.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateFreeFormLayoutElementBorderStyleInput is an input type that accepts TemplateFreeFormLayoutElementBorderStyleArgs and TemplateFreeFormLayoutElementBorderStyleOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutElementBorderStyleInput` via:
//
//	TemplateFreeFormLayoutElementBorderStyleArgs{...}
type TemplateFreeFormLayoutElementBorderStyleInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutElementBorderStyleOutput() TemplateFreeFormLayoutElementBorderStyleOutput
	ToTemplateFreeFormLayoutElementBorderStyleOutputWithContext(context.Context) TemplateFreeFormLayoutElementBorderStyleOutput
}

type TemplateFreeFormLayoutElementBorderStyleArgs struct {
	// The border color of a free-form layout element.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The border visibility of a free-form layout element.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateFreeFormLayoutElementBorderStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutElementBorderStyle)(nil)).Elem()
}

func (i TemplateFreeFormLayoutElementBorderStyleArgs) ToTemplateFreeFormLayoutElementBorderStyleOutput() TemplateFreeFormLayoutElementBorderStyleOutput {
	return i.ToTemplateFreeFormLayoutElementBorderStyleOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutElementBorderStyleArgs) ToTemplateFreeFormLayoutElementBorderStyleOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBorderStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementBorderStyleOutput)
}

func (i TemplateFreeFormLayoutElementBorderStyleArgs) ToTemplateFreeFormLayoutElementBorderStylePtrOutput() TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return i.ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutElementBorderStyleArgs) ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementBorderStyleOutput).ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(ctx)
}

// TemplateFreeFormLayoutElementBorderStylePtrInput is an input type that accepts TemplateFreeFormLayoutElementBorderStyleArgs, TemplateFreeFormLayoutElementBorderStylePtr and TemplateFreeFormLayoutElementBorderStylePtrOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutElementBorderStylePtrInput` via:
//
//	        TemplateFreeFormLayoutElementBorderStyleArgs{...}
//
//	or:
//
//	        nil
type TemplateFreeFormLayoutElementBorderStylePtrInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutElementBorderStylePtrOutput() TemplateFreeFormLayoutElementBorderStylePtrOutput
	ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(context.Context) TemplateFreeFormLayoutElementBorderStylePtrOutput
}

type templateFreeFormLayoutElementBorderStylePtrType TemplateFreeFormLayoutElementBorderStyleArgs

func TemplateFreeFormLayoutElementBorderStylePtr(v *TemplateFreeFormLayoutElementBorderStyleArgs) TemplateFreeFormLayoutElementBorderStylePtrInput {
	return (*templateFreeFormLayoutElementBorderStylePtrType)(v)
}

func (*templateFreeFormLayoutElementBorderStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutElementBorderStyle)(nil)).Elem()
}

func (i *templateFreeFormLayoutElementBorderStylePtrType) ToTemplateFreeFormLayoutElementBorderStylePtrOutput() TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return i.ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(context.Background())
}

func (i *templateFreeFormLayoutElementBorderStylePtrType) ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutElementBorderStylePtrOutput)
}

type TemplateFreeFormLayoutElementBorderStyleOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutElementBorderStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutElementBorderStyle)(nil)).Elem()
}

func (o TemplateFreeFormLayoutElementBorderStyleOutput) ToTemplateFreeFormLayoutElementBorderStyleOutput() TemplateFreeFormLayoutElementBorderStyleOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBorderStyleOutput) ToTemplateFreeFormLayoutElementBorderStyleOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBorderStyleOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBorderStyleOutput) ToTemplateFreeFormLayoutElementBorderStylePtrOutput() TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return o.ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(context.Background())
}

func (o TemplateFreeFormLayoutElementBorderStyleOutput) ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFreeFormLayoutElementBorderStyle) *TemplateFreeFormLayoutElementBorderStyle {
		return &v
	}).(TemplateFreeFormLayoutElementBorderStylePtrOutput)
}

// The border color of a free-form layout element.
func (o TemplateFreeFormLayoutElementBorderStyleOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElementBorderStyle) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The border visibility of a free-form layout element.
func (o TemplateFreeFormLayoutElementBorderStyleOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutElementBorderStyle) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateFreeFormLayoutElementBorderStylePtrOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutElementBorderStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutElementBorderStyle)(nil)).Elem()
}

func (o TemplateFreeFormLayoutElementBorderStylePtrOutput) ToTemplateFreeFormLayoutElementBorderStylePtrOutput() TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBorderStylePtrOutput) ToTemplateFreeFormLayoutElementBorderStylePtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutElementBorderStylePtrOutput {
	return o
}

func (o TemplateFreeFormLayoutElementBorderStylePtrOutput) Elem() TemplateFreeFormLayoutElementBorderStyleOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutElementBorderStyle) TemplateFreeFormLayoutElementBorderStyle {
		if v != nil {
			return *v
		}
		var ret TemplateFreeFormLayoutElementBorderStyle
		return ret
	}).(TemplateFreeFormLayoutElementBorderStyleOutput)
}

// The border color of a free-form layout element.
func (o TemplateFreeFormLayoutElementBorderStylePtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutElementBorderStyle) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The border visibility of a free-form layout element.
func (o TemplateFreeFormLayoutElementBorderStylePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutElementBorderStyle) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateFreeFormLayoutScreenCanvasSizeOptions struct {
	// String based length that is composed of value and unit in px
	OptimizedViewPortWidth string `pulumi:"optimizedViewPortWidth"`
}

// TemplateFreeFormLayoutScreenCanvasSizeOptionsInput is an input type that accepts TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs and TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutScreenCanvasSizeOptionsInput` via:
//
//	TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs{...}
type TemplateFreeFormLayoutScreenCanvasSizeOptionsInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutScreenCanvasSizeOptionsOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput
	ToTemplateFreeFormLayoutScreenCanvasSizeOptionsOutputWithContext(context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput
}

type TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs struct {
	// String based length that is composed of value and unit in px
	OptimizedViewPortWidth pulumi.StringInput `pulumi:"optimizedViewPortWidth"`
}

func (TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (i TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput {
	return i.ToTemplateFreeFormLayoutScreenCanvasSizeOptionsOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput)
}

func (i TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return i.ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput).ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx)
}

// TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrInput is an input type that accepts TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs, TemplateFreeFormLayoutScreenCanvasSizeOptionsPtr and TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrInput` via:
//
//	        TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput
	ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput
}

type templateFreeFormLayoutScreenCanvasSizeOptionsPtrType TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs

func TemplateFreeFormLayoutScreenCanvasSizeOptionsPtr(v *TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs) TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrInput {
	return (*templateFreeFormLayoutScreenCanvasSizeOptionsPtrType)(v)
}

func (*templateFreeFormLayoutScreenCanvasSizeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (i *templateFreeFormLayoutScreenCanvasSizeOptionsPtrType) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return i.ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateFreeFormLayoutScreenCanvasSizeOptionsPtrType) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput)
}

type TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput {
	return o
}

func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput {
	return o
}

func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFreeFormLayoutScreenCanvasSizeOptions) *TemplateFreeFormLayoutScreenCanvasSizeOptions {
		return &v
	}).(TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput) OptimizedViewPortWidth() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFreeFormLayoutScreenCanvasSizeOptions) string { return v.OptimizedViewPortWidth }).(pulumi.StringOutput)
}

type TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput() TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput) ToTemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput) Elem() TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutScreenCanvasSizeOptions) TemplateFreeFormLayoutScreenCanvasSizeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateFreeFormLayoutScreenCanvasSizeOptions
		return ret
	}).(TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput) OptimizedViewPortWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFreeFormLayoutScreenCanvasSizeOptions) *string {
		if v == nil {
			return nil
		}
		return &v.OptimizedViewPortWidth
	}).(pulumi.StringPtrOutput)
}

type TemplateFreeFormSectionLayoutConfiguration struct {
	// The elements that are included in the free-form layout.
	Elements []TemplateFreeFormLayoutElement `pulumi:"elements"`
}

// TemplateFreeFormSectionLayoutConfigurationInput is an input type that accepts TemplateFreeFormSectionLayoutConfigurationArgs and TemplateFreeFormSectionLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateFreeFormSectionLayoutConfigurationInput` via:
//
//	TemplateFreeFormSectionLayoutConfigurationArgs{...}
type TemplateFreeFormSectionLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateFreeFormSectionLayoutConfigurationOutput() TemplateFreeFormSectionLayoutConfigurationOutput
	ToTemplateFreeFormSectionLayoutConfigurationOutputWithContext(context.Context) TemplateFreeFormSectionLayoutConfigurationOutput
}

type TemplateFreeFormSectionLayoutConfigurationArgs struct {
	// The elements that are included in the free-form layout.
	Elements TemplateFreeFormLayoutElementArrayInput `pulumi:"elements"`
}

func (TemplateFreeFormSectionLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormSectionLayoutConfiguration)(nil)).Elem()
}

func (i TemplateFreeFormSectionLayoutConfigurationArgs) ToTemplateFreeFormSectionLayoutConfigurationOutput() TemplateFreeFormSectionLayoutConfigurationOutput {
	return i.ToTemplateFreeFormSectionLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateFreeFormSectionLayoutConfigurationArgs) ToTemplateFreeFormSectionLayoutConfigurationOutputWithContext(ctx context.Context) TemplateFreeFormSectionLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormSectionLayoutConfigurationOutput)
}

func (i TemplateFreeFormSectionLayoutConfigurationArgs) ToTemplateFreeFormSectionLayoutConfigurationPtrOutput() TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return i.ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFreeFormSectionLayoutConfigurationArgs) ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormSectionLayoutConfigurationOutput).ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateFreeFormSectionLayoutConfigurationPtrInput is an input type that accepts TemplateFreeFormSectionLayoutConfigurationArgs, TemplateFreeFormSectionLayoutConfigurationPtr and TemplateFreeFormSectionLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFreeFormSectionLayoutConfigurationPtrInput` via:
//
//	        TemplateFreeFormSectionLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFreeFormSectionLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFreeFormSectionLayoutConfigurationPtrOutput() TemplateFreeFormSectionLayoutConfigurationPtrOutput
	ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(context.Context) TemplateFreeFormSectionLayoutConfigurationPtrOutput
}

type templateFreeFormSectionLayoutConfigurationPtrType TemplateFreeFormSectionLayoutConfigurationArgs

func TemplateFreeFormSectionLayoutConfigurationPtr(v *TemplateFreeFormSectionLayoutConfigurationArgs) TemplateFreeFormSectionLayoutConfigurationPtrInput {
	return (*templateFreeFormSectionLayoutConfigurationPtrType)(v)
}

func (*templateFreeFormSectionLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormSectionLayoutConfiguration)(nil)).Elem()
}

func (i *templateFreeFormSectionLayoutConfigurationPtrType) ToTemplateFreeFormSectionLayoutConfigurationPtrOutput() TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return i.ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFreeFormSectionLayoutConfigurationPtrType) ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFreeFormSectionLayoutConfigurationPtrOutput)
}

type TemplateFreeFormSectionLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormSectionLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFreeFormSectionLayoutConfiguration)(nil)).Elem()
}

func (o TemplateFreeFormSectionLayoutConfigurationOutput) ToTemplateFreeFormSectionLayoutConfigurationOutput() TemplateFreeFormSectionLayoutConfigurationOutput {
	return o
}

func (o TemplateFreeFormSectionLayoutConfigurationOutput) ToTemplateFreeFormSectionLayoutConfigurationOutputWithContext(ctx context.Context) TemplateFreeFormSectionLayoutConfigurationOutput {
	return o
}

func (o TemplateFreeFormSectionLayoutConfigurationOutput) ToTemplateFreeFormSectionLayoutConfigurationPtrOutput() TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return o.ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFreeFormSectionLayoutConfigurationOutput) ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFreeFormSectionLayoutConfiguration) *TemplateFreeFormSectionLayoutConfiguration {
		return &v
	}).(TemplateFreeFormSectionLayoutConfigurationPtrOutput)
}

// The elements that are included in the free-form layout.
func (o TemplateFreeFormSectionLayoutConfigurationOutput) Elements() TemplateFreeFormLayoutElementArrayOutput {
	return o.ApplyT(func(v TemplateFreeFormSectionLayoutConfiguration) []TemplateFreeFormLayoutElement { return v.Elements }).(TemplateFreeFormLayoutElementArrayOutput)
}

type TemplateFreeFormSectionLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFreeFormSectionLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFreeFormSectionLayoutConfiguration)(nil)).Elem()
}

func (o TemplateFreeFormSectionLayoutConfigurationPtrOutput) ToTemplateFreeFormSectionLayoutConfigurationPtrOutput() TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateFreeFormSectionLayoutConfigurationPtrOutput) ToTemplateFreeFormSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateFreeFormSectionLayoutConfigurationPtrOutput) Elem() TemplateFreeFormSectionLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateFreeFormSectionLayoutConfiguration) TemplateFreeFormSectionLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFreeFormSectionLayoutConfiguration
		return ret
	}).(TemplateFreeFormSectionLayoutConfigurationOutput)
}

// The elements that are included in the free-form layout.
func (o TemplateFreeFormSectionLayoutConfigurationPtrOutput) Elements() TemplateFreeFormLayoutElementArrayOutput {
	return o.ApplyT(func(v *TemplateFreeFormSectionLayoutConfiguration) []TemplateFreeFormLayoutElement {
		if v == nil {
			return nil
		}
		return v.Elements
	}).(TemplateFreeFormLayoutElementArrayOutput)
}

type TemplateFunnelChartAggregatedFieldWells struct {
	// The category field wells of a funnel chart. Values are grouped by category fields.
	Category []TemplateDimensionField `pulumi:"category"`
	// The value field wells of a funnel chart. Values are aggregated based on categories.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateFunnelChartAggregatedFieldWellsInput is an input type that accepts TemplateFunnelChartAggregatedFieldWellsArgs and TemplateFunnelChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateFunnelChartAggregatedFieldWellsInput` via:
//
//	TemplateFunnelChartAggregatedFieldWellsArgs{...}
type TemplateFunnelChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateFunnelChartAggregatedFieldWellsOutput() TemplateFunnelChartAggregatedFieldWellsOutput
	ToTemplateFunnelChartAggregatedFieldWellsOutputWithContext(context.Context) TemplateFunnelChartAggregatedFieldWellsOutput
}

type TemplateFunnelChartAggregatedFieldWellsArgs struct {
	// The category field wells of a funnel chart. Values are grouped by category fields.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The value field wells of a funnel chart. Values are aggregated based on categories.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateFunnelChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateFunnelChartAggregatedFieldWellsArgs) ToTemplateFunnelChartAggregatedFieldWellsOutput() TemplateFunnelChartAggregatedFieldWellsOutput {
	return i.ToTemplateFunnelChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateFunnelChartAggregatedFieldWellsArgs) ToTemplateFunnelChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateFunnelChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartAggregatedFieldWellsOutput)
}

func (i TemplateFunnelChartAggregatedFieldWellsArgs) ToTemplateFunnelChartAggregatedFieldWellsPtrOutput() TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateFunnelChartAggregatedFieldWellsArgs) ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartAggregatedFieldWellsOutput).ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateFunnelChartAggregatedFieldWellsPtrInput is an input type that accepts TemplateFunnelChartAggregatedFieldWellsArgs, TemplateFunnelChartAggregatedFieldWellsPtr and TemplateFunnelChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateFunnelChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplateFunnelChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateFunnelChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateFunnelChartAggregatedFieldWellsPtrOutput() TemplateFunnelChartAggregatedFieldWellsPtrOutput
	ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateFunnelChartAggregatedFieldWellsPtrOutput
}

type templateFunnelChartAggregatedFieldWellsPtrType TemplateFunnelChartAggregatedFieldWellsArgs

func TemplateFunnelChartAggregatedFieldWellsPtr(v *TemplateFunnelChartAggregatedFieldWellsArgs) TemplateFunnelChartAggregatedFieldWellsPtrInput {
	return (*templateFunnelChartAggregatedFieldWellsPtrType)(v)
}

func (*templateFunnelChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templateFunnelChartAggregatedFieldWellsPtrType) ToTemplateFunnelChartAggregatedFieldWellsPtrOutput() TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateFunnelChartAggregatedFieldWellsPtrType) ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartAggregatedFieldWellsPtrOutput)
}

type TemplateFunnelChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateFunnelChartAggregatedFieldWellsOutput) ToTemplateFunnelChartAggregatedFieldWellsOutput() TemplateFunnelChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateFunnelChartAggregatedFieldWellsOutput) ToTemplateFunnelChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateFunnelChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateFunnelChartAggregatedFieldWellsOutput) ToTemplateFunnelChartAggregatedFieldWellsPtrOutput() TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateFunnelChartAggregatedFieldWellsOutput) ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFunnelChartAggregatedFieldWells) *TemplateFunnelChartAggregatedFieldWells {
		return &v
	}).(TemplateFunnelChartAggregatedFieldWellsPtrOutput)
}

// The category field wells of a funnel chart. Values are grouped by category fields.
func (o TemplateFunnelChartAggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateFunnelChartAggregatedFieldWells) []TemplateDimensionField { return v.Category }).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a funnel chart. Values are aggregated based on categories.
func (o TemplateFunnelChartAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateFunnelChartAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateFunnelChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateFunnelChartAggregatedFieldWellsPtrOutput) ToTemplateFunnelChartAggregatedFieldWellsPtrOutput() TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateFunnelChartAggregatedFieldWellsPtrOutput) ToTemplateFunnelChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateFunnelChartAggregatedFieldWellsPtrOutput) Elem() TemplateFunnelChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateFunnelChartAggregatedFieldWells) TemplateFunnelChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateFunnelChartAggregatedFieldWells
		return ret
	}).(TemplateFunnelChartAggregatedFieldWellsOutput)
}

// The category field wells of a funnel chart. Values are grouped by category fields.
func (o TemplateFunnelChartAggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateFunnelChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a funnel chart. Values are aggregated based on categories.
func (o TemplateFunnelChartAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateFunnelChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateFunnelChartConfiguration struct {
	// The label options of the categories that are displayed in a `FunnelChartVisual` .
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The options that determine the presentation of the data labels.
	DataLabelOptions *TemplateFunnelChartDataLabelOptions `pulumi:"dataLabelOptions"`
	// The field well configuration of a `FunnelChartVisual` .
	FieldWells *TemplateFunnelChartFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The sort configuration of a `FunnelChartVisual` .
	SortConfiguration *TemplateFunnelChartSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip configuration of a `FunnelChartVisual` .
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The label options for the values that are displayed in a `FunnelChartVisual` .
	ValueLabelOptions *TemplateChartAxisLabelOptions `pulumi:"valueLabelOptions"`
	// The visual palette configuration of a `FunnelChartVisual` .
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
}

// TemplateFunnelChartConfigurationInput is an input type that accepts TemplateFunnelChartConfigurationArgs and TemplateFunnelChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateFunnelChartConfigurationInput` via:
//
//	TemplateFunnelChartConfigurationArgs{...}
type TemplateFunnelChartConfigurationInput interface {
	pulumi.Input

	ToTemplateFunnelChartConfigurationOutput() TemplateFunnelChartConfigurationOutput
	ToTemplateFunnelChartConfigurationOutputWithContext(context.Context) TemplateFunnelChartConfigurationOutput
}

type TemplateFunnelChartConfigurationArgs struct {
	// The label options of the categories that are displayed in a `FunnelChartVisual` .
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The options that determine the presentation of the data labels.
	DataLabelOptions TemplateFunnelChartDataLabelOptionsPtrInput `pulumi:"dataLabelOptions"`
	// The field well configuration of a `FunnelChartVisual` .
	FieldWells TemplateFunnelChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The sort configuration of a `FunnelChartVisual` .
	SortConfiguration TemplateFunnelChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip configuration of a `FunnelChartVisual` .
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The label options for the values that are displayed in a `FunnelChartVisual` .
	ValueLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"valueLabelOptions"`
	// The visual palette configuration of a `FunnelChartVisual` .
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
}

func (TemplateFunnelChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartConfiguration)(nil)).Elem()
}

func (i TemplateFunnelChartConfigurationArgs) ToTemplateFunnelChartConfigurationOutput() TemplateFunnelChartConfigurationOutput {
	return i.ToTemplateFunnelChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateFunnelChartConfigurationArgs) ToTemplateFunnelChartConfigurationOutputWithContext(ctx context.Context) TemplateFunnelChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartConfigurationOutput)
}

func (i TemplateFunnelChartConfigurationArgs) ToTemplateFunnelChartConfigurationPtrOutput() TemplateFunnelChartConfigurationPtrOutput {
	return i.ToTemplateFunnelChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFunnelChartConfigurationArgs) ToTemplateFunnelChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartConfigurationOutput).ToTemplateFunnelChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateFunnelChartConfigurationPtrInput is an input type that accepts TemplateFunnelChartConfigurationArgs, TemplateFunnelChartConfigurationPtr and TemplateFunnelChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFunnelChartConfigurationPtrInput` via:
//
//	        TemplateFunnelChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFunnelChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFunnelChartConfigurationPtrOutput() TemplateFunnelChartConfigurationPtrOutput
	ToTemplateFunnelChartConfigurationPtrOutputWithContext(context.Context) TemplateFunnelChartConfigurationPtrOutput
}

type templateFunnelChartConfigurationPtrType TemplateFunnelChartConfigurationArgs

func TemplateFunnelChartConfigurationPtr(v *TemplateFunnelChartConfigurationArgs) TemplateFunnelChartConfigurationPtrInput {
	return (*templateFunnelChartConfigurationPtrType)(v)
}

func (*templateFunnelChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartConfiguration)(nil)).Elem()
}

func (i *templateFunnelChartConfigurationPtrType) ToTemplateFunnelChartConfigurationPtrOutput() TemplateFunnelChartConfigurationPtrOutput {
	return i.ToTemplateFunnelChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFunnelChartConfigurationPtrType) ToTemplateFunnelChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartConfigurationPtrOutput)
}

type TemplateFunnelChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartConfiguration)(nil)).Elem()
}

func (o TemplateFunnelChartConfigurationOutput) ToTemplateFunnelChartConfigurationOutput() TemplateFunnelChartConfigurationOutput {
	return o
}

func (o TemplateFunnelChartConfigurationOutput) ToTemplateFunnelChartConfigurationOutputWithContext(ctx context.Context) TemplateFunnelChartConfigurationOutput {
	return o
}

func (o TemplateFunnelChartConfigurationOutput) ToTemplateFunnelChartConfigurationPtrOutput() TemplateFunnelChartConfigurationPtrOutput {
	return o.ToTemplateFunnelChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFunnelChartConfigurationOutput) ToTemplateFunnelChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFunnelChartConfiguration) *TemplateFunnelChartConfiguration {
		return &v
	}).(TemplateFunnelChartConfigurationPtrOutput)
}

// The label options of the categories that are displayed in a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateChartAxisLabelOptions { return v.CategoryLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The options that determine the presentation of the data labels.
func (o TemplateFunnelChartConfigurationOutput) DataLabelOptions() TemplateFunnelChartDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateFunnelChartDataLabelOptions {
		return v.DataLabelOptions
	}).(TemplateFunnelChartDataLabelOptionsPtrOutput)
}

// The field well configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationOutput) FieldWells() TemplateFunnelChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateFunnelChartFieldWells { return v.FieldWells }).(TemplateFunnelChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateFunnelChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationOutput) SortConfiguration() TemplateFunnelChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateFunnelChartSortConfiguration {
		return v.SortConfiguration
	}).(TemplateFunnelChartSortConfigurationPtrOutput)
}

// The tooltip configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The label options for the values that are displayed in a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationOutput) ValueLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateChartAxisLabelOptions { return v.ValueLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The visual palette configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

type TemplateFunnelChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartConfiguration)(nil)).Elem()
}

func (o TemplateFunnelChartConfigurationPtrOutput) ToTemplateFunnelChartConfigurationPtrOutput() TemplateFunnelChartConfigurationPtrOutput {
	return o
}

func (o TemplateFunnelChartConfigurationPtrOutput) ToTemplateFunnelChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartConfigurationPtrOutput {
	return o
}

func (o TemplateFunnelChartConfigurationPtrOutput) Elem() TemplateFunnelChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) TemplateFunnelChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFunnelChartConfiguration
		return ret
	}).(TemplateFunnelChartConfigurationOutput)
}

// The label options of the categories that are displayed in a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The options that determine the presentation of the data labels.
func (o TemplateFunnelChartConfigurationPtrOutput) DataLabelOptions() TemplateFunnelChartDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateFunnelChartDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabelOptions
	}).(TemplateFunnelChartDataLabelOptionsPtrOutput)
}

// The field well configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationPtrOutput) FieldWells() TemplateFunnelChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateFunnelChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateFunnelChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateFunnelChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationPtrOutput) SortConfiguration() TemplateFunnelChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateFunnelChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateFunnelChartSortConfigurationPtrOutput)
}

// The tooltip configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The label options for the values that are displayed in a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationPtrOutput) ValueLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ValueLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The visual palette configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

type TemplateFunnelChartDataLabelOptions struct {
	// The visibility of the category labels within the data labels.
	CategoryLabelVisibility interface{} `pulumi:"categoryLabelVisibility"`
	// The color of the data label text.
	LabelColor *string `pulumi:"labelColor"`
	// The font configuration for the data labels.
	//
	// Only the `FontSize` attribute of the font configuration is used for data labels.
	LabelFontConfiguration *TemplateFontConfiguration `pulumi:"labelFontConfiguration"`
	// Determines the style of the metric labels.
	MeasureDataLabelStyle *TemplateFunnelChartMeasureDataLabelStyle `pulumi:"measureDataLabelStyle"`
	// The visibility of the measure labels within the data labels.
	MeasureLabelVisibility interface{} `pulumi:"measureLabelVisibility"`
	// Determines the positioning of the data label relative to a section of the funnel.
	Position *TemplateDataLabelPosition `pulumi:"position"`
	// The visibility option that determines if data labels are displayed.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateFunnelChartDataLabelOptionsInput is an input type that accepts TemplateFunnelChartDataLabelOptionsArgs and TemplateFunnelChartDataLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateFunnelChartDataLabelOptionsInput` via:
//
//	TemplateFunnelChartDataLabelOptionsArgs{...}
type TemplateFunnelChartDataLabelOptionsInput interface {
	pulumi.Input

	ToTemplateFunnelChartDataLabelOptionsOutput() TemplateFunnelChartDataLabelOptionsOutput
	ToTemplateFunnelChartDataLabelOptionsOutputWithContext(context.Context) TemplateFunnelChartDataLabelOptionsOutput
}

type TemplateFunnelChartDataLabelOptionsArgs struct {
	// The visibility of the category labels within the data labels.
	CategoryLabelVisibility pulumi.Input `pulumi:"categoryLabelVisibility"`
	// The color of the data label text.
	LabelColor pulumi.StringPtrInput `pulumi:"labelColor"`
	// The font configuration for the data labels.
	//
	// Only the `FontSize` attribute of the font configuration is used for data labels.
	LabelFontConfiguration TemplateFontConfigurationPtrInput `pulumi:"labelFontConfiguration"`
	// Determines the style of the metric labels.
	MeasureDataLabelStyle TemplateFunnelChartMeasureDataLabelStylePtrInput `pulumi:"measureDataLabelStyle"`
	// The visibility of the measure labels within the data labels.
	MeasureLabelVisibility pulumi.Input `pulumi:"measureLabelVisibility"`
	// Determines the positioning of the data label relative to a section of the funnel.
	Position TemplateDataLabelPositionPtrInput `pulumi:"position"`
	// The visibility option that determines if data labels are displayed.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateFunnelChartDataLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartDataLabelOptions)(nil)).Elem()
}

func (i TemplateFunnelChartDataLabelOptionsArgs) ToTemplateFunnelChartDataLabelOptionsOutput() TemplateFunnelChartDataLabelOptionsOutput {
	return i.ToTemplateFunnelChartDataLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateFunnelChartDataLabelOptionsArgs) ToTemplateFunnelChartDataLabelOptionsOutputWithContext(ctx context.Context) TemplateFunnelChartDataLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartDataLabelOptionsOutput)
}

func (i TemplateFunnelChartDataLabelOptionsArgs) ToTemplateFunnelChartDataLabelOptionsPtrOutput() TemplateFunnelChartDataLabelOptionsPtrOutput {
	return i.ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateFunnelChartDataLabelOptionsArgs) ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartDataLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartDataLabelOptionsOutput).ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateFunnelChartDataLabelOptionsPtrInput is an input type that accepts TemplateFunnelChartDataLabelOptionsArgs, TemplateFunnelChartDataLabelOptionsPtr and TemplateFunnelChartDataLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateFunnelChartDataLabelOptionsPtrInput` via:
//
//	        TemplateFunnelChartDataLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateFunnelChartDataLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateFunnelChartDataLabelOptionsPtrOutput() TemplateFunnelChartDataLabelOptionsPtrOutput
	ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(context.Context) TemplateFunnelChartDataLabelOptionsPtrOutput
}

type templateFunnelChartDataLabelOptionsPtrType TemplateFunnelChartDataLabelOptionsArgs

func TemplateFunnelChartDataLabelOptionsPtr(v *TemplateFunnelChartDataLabelOptionsArgs) TemplateFunnelChartDataLabelOptionsPtrInput {
	return (*templateFunnelChartDataLabelOptionsPtrType)(v)
}

func (*templateFunnelChartDataLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartDataLabelOptions)(nil)).Elem()
}

func (i *templateFunnelChartDataLabelOptionsPtrType) ToTemplateFunnelChartDataLabelOptionsPtrOutput() TemplateFunnelChartDataLabelOptionsPtrOutput {
	return i.ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateFunnelChartDataLabelOptionsPtrType) ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartDataLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartDataLabelOptionsPtrOutput)
}

type TemplateFunnelChartDataLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartDataLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartDataLabelOptions)(nil)).Elem()
}

func (o TemplateFunnelChartDataLabelOptionsOutput) ToTemplateFunnelChartDataLabelOptionsOutput() TemplateFunnelChartDataLabelOptionsOutput {
	return o
}

func (o TemplateFunnelChartDataLabelOptionsOutput) ToTemplateFunnelChartDataLabelOptionsOutputWithContext(ctx context.Context) TemplateFunnelChartDataLabelOptionsOutput {
	return o
}

func (o TemplateFunnelChartDataLabelOptionsOutput) ToTemplateFunnelChartDataLabelOptionsPtrOutput() TemplateFunnelChartDataLabelOptionsPtrOutput {
	return o.ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateFunnelChartDataLabelOptionsOutput) ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartDataLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFunnelChartDataLabelOptions) *TemplateFunnelChartDataLabelOptions {
		return &v
	}).(TemplateFunnelChartDataLabelOptionsPtrOutput)
}

// The visibility of the category labels within the data labels.
func (o TemplateFunnelChartDataLabelOptionsOutput) CategoryLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFunnelChartDataLabelOptions) interface{} { return v.CategoryLabelVisibility }).(pulumi.AnyOutput)
}

// The color of the data label text.
func (o TemplateFunnelChartDataLabelOptionsOutput) LabelColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartDataLabelOptions) *string { return v.LabelColor }).(pulumi.StringPtrOutput)
}

// The font configuration for the data labels.
//
// Only the `FontSize` attribute of the font configuration is used for data labels.
func (o TemplateFunnelChartDataLabelOptionsOutput) LabelFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartDataLabelOptions) *TemplateFontConfiguration {
		return v.LabelFontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// Determines the style of the metric labels.
func (o TemplateFunnelChartDataLabelOptionsOutput) MeasureDataLabelStyle() TemplateFunnelChartMeasureDataLabelStylePtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartDataLabelOptions) *TemplateFunnelChartMeasureDataLabelStyle {
		return v.MeasureDataLabelStyle
	}).(TemplateFunnelChartMeasureDataLabelStylePtrOutput)
}

// The visibility of the measure labels within the data labels.
func (o TemplateFunnelChartDataLabelOptionsOutput) MeasureLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFunnelChartDataLabelOptions) interface{} { return v.MeasureLabelVisibility }).(pulumi.AnyOutput)
}

// Determines the positioning of the data label relative to a section of the funnel.
func (o TemplateFunnelChartDataLabelOptionsOutput) Position() TemplateDataLabelPositionPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartDataLabelOptions) *TemplateDataLabelPosition { return v.Position }).(TemplateDataLabelPositionPtrOutput)
}

// The visibility option that determines if data labels are displayed.
func (o TemplateFunnelChartDataLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateFunnelChartDataLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateFunnelChartDataLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartDataLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartDataLabelOptions)(nil)).Elem()
}

func (o TemplateFunnelChartDataLabelOptionsPtrOutput) ToTemplateFunnelChartDataLabelOptionsPtrOutput() TemplateFunnelChartDataLabelOptionsPtrOutput {
	return o
}

func (o TemplateFunnelChartDataLabelOptionsPtrOutput) ToTemplateFunnelChartDataLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartDataLabelOptionsPtrOutput {
	return o
}

func (o TemplateFunnelChartDataLabelOptionsPtrOutput) Elem() TemplateFunnelChartDataLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) TemplateFunnelChartDataLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateFunnelChartDataLabelOptions
		return ret
	}).(TemplateFunnelChartDataLabelOptionsOutput)
}

// The visibility of the category labels within the data labels.
func (o TemplateFunnelChartDataLabelOptionsPtrOutput) CategoryLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.CategoryLabelVisibility
	}).(pulumi.AnyOutput)
}

// The color of the data label text.
func (o TemplateFunnelChartDataLabelOptionsPtrOutput) LabelColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) *string {
		if v == nil {
			return nil
		}
		return v.LabelColor
	}).(pulumi.StringPtrOutput)
}

// The font configuration for the data labels.
//
// Only the `FontSize` attribute of the font configuration is used for data labels.
func (o TemplateFunnelChartDataLabelOptionsPtrOutput) LabelFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.LabelFontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// Determines the style of the metric labels.
func (o TemplateFunnelChartDataLabelOptionsPtrOutput) MeasureDataLabelStyle() TemplateFunnelChartMeasureDataLabelStylePtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) *TemplateFunnelChartMeasureDataLabelStyle {
		if v == nil {
			return nil
		}
		return v.MeasureDataLabelStyle
	}).(TemplateFunnelChartMeasureDataLabelStylePtrOutput)
}

// The visibility of the measure labels within the data labels.
func (o TemplateFunnelChartDataLabelOptionsPtrOutput) MeasureLabelVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.MeasureLabelVisibility
	}).(pulumi.AnyOutput)
}

// Determines the positioning of the data label relative to a section of the funnel.
func (o TemplateFunnelChartDataLabelOptionsPtrOutput) Position() TemplateDataLabelPositionPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) *TemplateDataLabelPosition {
		if v == nil {
			return nil
		}
		return v.Position
	}).(TemplateDataLabelPositionPtrOutput)
}

// The visibility option that determines if data labels are displayed.
func (o TemplateFunnelChartDataLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateFunnelChartDataLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateFunnelChartFieldWells struct {
	// The field well configuration of a `FunnelChartVisual` .
	FunnelChartAggregatedFieldWells *TemplateFunnelChartAggregatedFieldWells `pulumi:"funnelChartAggregatedFieldWells"`
}

// TemplateFunnelChartFieldWellsInput is an input type that accepts TemplateFunnelChartFieldWellsArgs and TemplateFunnelChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateFunnelChartFieldWellsInput` via:
//
//	TemplateFunnelChartFieldWellsArgs{...}
type TemplateFunnelChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateFunnelChartFieldWellsOutput() TemplateFunnelChartFieldWellsOutput
	ToTemplateFunnelChartFieldWellsOutputWithContext(context.Context) TemplateFunnelChartFieldWellsOutput
}

type TemplateFunnelChartFieldWellsArgs struct {
	// The field well configuration of a `FunnelChartVisual` .
	FunnelChartAggregatedFieldWells TemplateFunnelChartAggregatedFieldWellsPtrInput `pulumi:"funnelChartAggregatedFieldWells"`
}

func (TemplateFunnelChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartFieldWells)(nil)).Elem()
}

func (i TemplateFunnelChartFieldWellsArgs) ToTemplateFunnelChartFieldWellsOutput() TemplateFunnelChartFieldWellsOutput {
	return i.ToTemplateFunnelChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateFunnelChartFieldWellsArgs) ToTemplateFunnelChartFieldWellsOutputWithContext(ctx context.Context) TemplateFunnelChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartFieldWellsOutput)
}

func (i TemplateFunnelChartFieldWellsArgs) ToTemplateFunnelChartFieldWellsPtrOutput() TemplateFunnelChartFieldWellsPtrOutput {
	return i.ToTemplateFunnelChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateFunnelChartFieldWellsArgs) ToTemplateFunnelChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartFieldWellsOutput).ToTemplateFunnelChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateFunnelChartFieldWellsPtrInput is an input type that accepts TemplateFunnelChartFieldWellsArgs, TemplateFunnelChartFieldWellsPtr and TemplateFunnelChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateFunnelChartFieldWellsPtrInput` via:
//
//	        TemplateFunnelChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateFunnelChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateFunnelChartFieldWellsPtrOutput() TemplateFunnelChartFieldWellsPtrOutput
	ToTemplateFunnelChartFieldWellsPtrOutputWithContext(context.Context) TemplateFunnelChartFieldWellsPtrOutput
}

type templateFunnelChartFieldWellsPtrType TemplateFunnelChartFieldWellsArgs

func TemplateFunnelChartFieldWellsPtr(v *TemplateFunnelChartFieldWellsArgs) TemplateFunnelChartFieldWellsPtrInput {
	return (*templateFunnelChartFieldWellsPtrType)(v)
}

func (*templateFunnelChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartFieldWells)(nil)).Elem()
}

func (i *templateFunnelChartFieldWellsPtrType) ToTemplateFunnelChartFieldWellsPtrOutput() TemplateFunnelChartFieldWellsPtrOutput {
	return i.ToTemplateFunnelChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateFunnelChartFieldWellsPtrType) ToTemplateFunnelChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartFieldWellsPtrOutput)
}

type TemplateFunnelChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartFieldWells)(nil)).Elem()
}

func (o TemplateFunnelChartFieldWellsOutput) ToTemplateFunnelChartFieldWellsOutput() TemplateFunnelChartFieldWellsOutput {
	return o
}

func (o TemplateFunnelChartFieldWellsOutput) ToTemplateFunnelChartFieldWellsOutputWithContext(ctx context.Context) TemplateFunnelChartFieldWellsOutput {
	return o
}

func (o TemplateFunnelChartFieldWellsOutput) ToTemplateFunnelChartFieldWellsPtrOutput() TemplateFunnelChartFieldWellsPtrOutput {
	return o.ToTemplateFunnelChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateFunnelChartFieldWellsOutput) ToTemplateFunnelChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFunnelChartFieldWells) *TemplateFunnelChartFieldWells {
		return &v
	}).(TemplateFunnelChartFieldWellsPtrOutput)
}

// The field well configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartFieldWellsOutput) FunnelChartAggregatedFieldWells() TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartFieldWells) *TemplateFunnelChartAggregatedFieldWells {
		return v.FunnelChartAggregatedFieldWells
	}).(TemplateFunnelChartAggregatedFieldWellsPtrOutput)
}

type TemplateFunnelChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartFieldWells)(nil)).Elem()
}

func (o TemplateFunnelChartFieldWellsPtrOutput) ToTemplateFunnelChartFieldWellsPtrOutput() TemplateFunnelChartFieldWellsPtrOutput {
	return o
}

func (o TemplateFunnelChartFieldWellsPtrOutput) ToTemplateFunnelChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateFunnelChartFieldWellsPtrOutput {
	return o
}

func (o TemplateFunnelChartFieldWellsPtrOutput) Elem() TemplateFunnelChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateFunnelChartFieldWells) TemplateFunnelChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateFunnelChartFieldWells
		return ret
	}).(TemplateFunnelChartFieldWellsOutput)
}

// The field well configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartFieldWellsPtrOutput) FunnelChartAggregatedFieldWells() TemplateFunnelChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartFieldWells) *TemplateFunnelChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.FunnelChartAggregatedFieldWells
	}).(TemplateFunnelChartAggregatedFieldWellsPtrOutput)
}

type TemplateFunnelChartSortConfiguration struct {
	// The limit on the number of categories displayed.
	CategoryItemsLimit *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
}

// TemplateFunnelChartSortConfigurationInput is an input type that accepts TemplateFunnelChartSortConfigurationArgs and TemplateFunnelChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateFunnelChartSortConfigurationInput` via:
//
//	TemplateFunnelChartSortConfigurationArgs{...}
type TemplateFunnelChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplateFunnelChartSortConfigurationOutput() TemplateFunnelChartSortConfigurationOutput
	ToTemplateFunnelChartSortConfigurationOutputWithContext(context.Context) TemplateFunnelChartSortConfigurationOutput
}

type TemplateFunnelChartSortConfigurationArgs struct {
	// The limit on the number of categories displayed.
	CategoryItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (TemplateFunnelChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartSortConfiguration)(nil)).Elem()
}

func (i TemplateFunnelChartSortConfigurationArgs) ToTemplateFunnelChartSortConfigurationOutput() TemplateFunnelChartSortConfigurationOutput {
	return i.ToTemplateFunnelChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateFunnelChartSortConfigurationArgs) ToTemplateFunnelChartSortConfigurationOutputWithContext(ctx context.Context) TemplateFunnelChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartSortConfigurationOutput)
}

func (i TemplateFunnelChartSortConfigurationArgs) ToTemplateFunnelChartSortConfigurationPtrOutput() TemplateFunnelChartSortConfigurationPtrOutput {
	return i.ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateFunnelChartSortConfigurationArgs) ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartSortConfigurationOutput).ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateFunnelChartSortConfigurationPtrInput is an input type that accepts TemplateFunnelChartSortConfigurationArgs, TemplateFunnelChartSortConfigurationPtr and TemplateFunnelChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateFunnelChartSortConfigurationPtrInput` via:
//
//	        TemplateFunnelChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateFunnelChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateFunnelChartSortConfigurationPtrOutput() TemplateFunnelChartSortConfigurationPtrOutput
	ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(context.Context) TemplateFunnelChartSortConfigurationPtrOutput
}

type templateFunnelChartSortConfigurationPtrType TemplateFunnelChartSortConfigurationArgs

func TemplateFunnelChartSortConfigurationPtr(v *TemplateFunnelChartSortConfigurationArgs) TemplateFunnelChartSortConfigurationPtrInput {
	return (*templateFunnelChartSortConfigurationPtrType)(v)
}

func (*templateFunnelChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartSortConfiguration)(nil)).Elem()
}

func (i *templateFunnelChartSortConfigurationPtrType) ToTemplateFunnelChartSortConfigurationPtrOutput() TemplateFunnelChartSortConfigurationPtrOutput {
	return i.ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateFunnelChartSortConfigurationPtrType) ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartSortConfigurationPtrOutput)
}

type TemplateFunnelChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartSortConfiguration)(nil)).Elem()
}

func (o TemplateFunnelChartSortConfigurationOutput) ToTemplateFunnelChartSortConfigurationOutput() TemplateFunnelChartSortConfigurationOutput {
	return o
}

func (o TemplateFunnelChartSortConfigurationOutput) ToTemplateFunnelChartSortConfigurationOutputWithContext(ctx context.Context) TemplateFunnelChartSortConfigurationOutput {
	return o
}

func (o TemplateFunnelChartSortConfigurationOutput) ToTemplateFunnelChartSortConfigurationPtrOutput() TemplateFunnelChartSortConfigurationPtrOutput {
	return o.ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateFunnelChartSortConfigurationOutput) ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFunnelChartSortConfiguration) *TemplateFunnelChartSortConfiguration {
		return &v
	}).(TemplateFunnelChartSortConfigurationPtrOutput)
}

// The limit on the number of categories displayed.
func (o TemplateFunnelChartSortConfigurationOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateFunnelChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateFunnelChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateFunnelChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartSortConfiguration)(nil)).Elem()
}

func (o TemplateFunnelChartSortConfigurationPtrOutput) ToTemplateFunnelChartSortConfigurationPtrOutput() TemplateFunnelChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateFunnelChartSortConfigurationPtrOutput) ToTemplateFunnelChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateFunnelChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateFunnelChartSortConfigurationPtrOutput) Elem() TemplateFunnelChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateFunnelChartSortConfiguration) TemplateFunnelChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateFunnelChartSortConfiguration
		return ret
	}).(TemplateFunnelChartSortConfigurationOutput)
}

// The limit on the number of categories displayed.
func (o TemplateFunnelChartSortConfigurationPtrOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateFunnelChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateFunnelChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateFunnelChartVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a `FunnelChartVisual` .
	ChartConfiguration *TemplateFunnelChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateFunnelChartVisualInput is an input type that accepts TemplateFunnelChartVisualArgs and TemplateFunnelChartVisualOutput values.
// You can construct a concrete instance of `TemplateFunnelChartVisualInput` via:
//
//	TemplateFunnelChartVisualArgs{...}
type TemplateFunnelChartVisualInput interface {
	pulumi.Input

	ToTemplateFunnelChartVisualOutput() TemplateFunnelChartVisualOutput
	ToTemplateFunnelChartVisualOutputWithContext(context.Context) TemplateFunnelChartVisualOutput
}

type TemplateFunnelChartVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a `FunnelChartVisual` .
	ChartConfiguration TemplateFunnelChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateFunnelChartVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartVisual)(nil)).Elem()
}

func (i TemplateFunnelChartVisualArgs) ToTemplateFunnelChartVisualOutput() TemplateFunnelChartVisualOutput {
	return i.ToTemplateFunnelChartVisualOutputWithContext(context.Background())
}

func (i TemplateFunnelChartVisualArgs) ToTemplateFunnelChartVisualOutputWithContext(ctx context.Context) TemplateFunnelChartVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartVisualOutput)
}

func (i TemplateFunnelChartVisualArgs) ToTemplateFunnelChartVisualPtrOutput() TemplateFunnelChartVisualPtrOutput {
	return i.ToTemplateFunnelChartVisualPtrOutputWithContext(context.Background())
}

func (i TemplateFunnelChartVisualArgs) ToTemplateFunnelChartVisualPtrOutputWithContext(ctx context.Context) TemplateFunnelChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartVisualOutput).ToTemplateFunnelChartVisualPtrOutputWithContext(ctx)
}

// TemplateFunnelChartVisualPtrInput is an input type that accepts TemplateFunnelChartVisualArgs, TemplateFunnelChartVisualPtr and TemplateFunnelChartVisualPtrOutput values.
// You can construct a concrete instance of `TemplateFunnelChartVisualPtrInput` via:
//
//	        TemplateFunnelChartVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateFunnelChartVisualPtrInput interface {
	pulumi.Input

	ToTemplateFunnelChartVisualPtrOutput() TemplateFunnelChartVisualPtrOutput
	ToTemplateFunnelChartVisualPtrOutputWithContext(context.Context) TemplateFunnelChartVisualPtrOutput
}

type templateFunnelChartVisualPtrType TemplateFunnelChartVisualArgs

func TemplateFunnelChartVisualPtr(v *TemplateFunnelChartVisualArgs) TemplateFunnelChartVisualPtrInput {
	return (*templateFunnelChartVisualPtrType)(v)
}

func (*templateFunnelChartVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartVisual)(nil)).Elem()
}

func (i *templateFunnelChartVisualPtrType) ToTemplateFunnelChartVisualPtrOutput() TemplateFunnelChartVisualPtrOutput {
	return i.ToTemplateFunnelChartVisualPtrOutputWithContext(context.Background())
}

func (i *templateFunnelChartVisualPtrType) ToTemplateFunnelChartVisualPtrOutputWithContext(ctx context.Context) TemplateFunnelChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateFunnelChartVisualPtrOutput)
}

type TemplateFunnelChartVisualOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateFunnelChartVisual)(nil)).Elem()
}

func (o TemplateFunnelChartVisualOutput) ToTemplateFunnelChartVisualOutput() TemplateFunnelChartVisualOutput {
	return o
}

func (o TemplateFunnelChartVisualOutput) ToTemplateFunnelChartVisualOutputWithContext(ctx context.Context) TemplateFunnelChartVisualOutput {
	return o
}

func (o TemplateFunnelChartVisualOutput) ToTemplateFunnelChartVisualPtrOutput() TemplateFunnelChartVisualPtrOutput {
	return o.ToTemplateFunnelChartVisualPtrOutputWithContext(context.Background())
}

func (o TemplateFunnelChartVisualOutput) ToTemplateFunnelChartVisualPtrOutputWithContext(ctx context.Context) TemplateFunnelChartVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateFunnelChartVisual) *TemplateFunnelChartVisual {
		return &v
	}).(TemplateFunnelChartVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateFunnelChartVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateFunnelChartVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartVisualOutput) ChartConfiguration() TemplateFunnelChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartVisual) *TemplateFunnelChartConfiguration { return v.ChartConfiguration }).(TemplateFunnelChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateFunnelChartVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateFunnelChartVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateFunnelChartVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateFunnelChartVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateFunnelChartVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateFunnelChartVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateFunnelChartVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateFunnelChartVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateFunnelChartVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateFunnelChartVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateFunnelChartVisual)(nil)).Elem()
}

func (o TemplateFunnelChartVisualPtrOutput) ToTemplateFunnelChartVisualPtrOutput() TemplateFunnelChartVisualPtrOutput {
	return o
}

func (o TemplateFunnelChartVisualPtrOutput) ToTemplateFunnelChartVisualPtrOutputWithContext(ctx context.Context) TemplateFunnelChartVisualPtrOutput {
	return o
}

func (o TemplateFunnelChartVisualPtrOutput) Elem() TemplateFunnelChartVisualOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) TemplateFunnelChartVisual {
		if v != nil {
			return *v
		}
		var ret TemplateFunnelChartVisual
		return ret
	}).(TemplateFunnelChartVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateFunnelChartVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a `FunnelChartVisual` .
func (o TemplateFunnelChartVisualPtrOutput) ChartConfiguration() TemplateFunnelChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) *TemplateFunnelChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateFunnelChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateFunnelChartVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateFunnelChartVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateFunnelChartVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateFunnelChartVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateFunnelChartVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateFunnelChartVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateGaugeChartArcConditionalFormatting struct {
	// The conditional formatting of the arc foreground color.
	ForegroundColor *TemplateConditionalFormattingColor `pulumi:"foregroundColor"`
}

// TemplateGaugeChartArcConditionalFormattingInput is an input type that accepts TemplateGaugeChartArcConditionalFormattingArgs and TemplateGaugeChartArcConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateGaugeChartArcConditionalFormattingInput` via:
//
//	TemplateGaugeChartArcConditionalFormattingArgs{...}
type TemplateGaugeChartArcConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateGaugeChartArcConditionalFormattingOutput() TemplateGaugeChartArcConditionalFormattingOutput
	ToTemplateGaugeChartArcConditionalFormattingOutputWithContext(context.Context) TemplateGaugeChartArcConditionalFormattingOutput
}

type TemplateGaugeChartArcConditionalFormattingArgs struct {
	// The conditional formatting of the arc foreground color.
	ForegroundColor TemplateConditionalFormattingColorPtrInput `pulumi:"foregroundColor"`
}

func (TemplateGaugeChartArcConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartArcConditionalFormatting)(nil)).Elem()
}

func (i TemplateGaugeChartArcConditionalFormattingArgs) ToTemplateGaugeChartArcConditionalFormattingOutput() TemplateGaugeChartArcConditionalFormattingOutput {
	return i.ToTemplateGaugeChartArcConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateGaugeChartArcConditionalFormattingArgs) ToTemplateGaugeChartArcConditionalFormattingOutputWithContext(ctx context.Context) TemplateGaugeChartArcConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartArcConditionalFormattingOutput)
}

func (i TemplateGaugeChartArcConditionalFormattingArgs) ToTemplateGaugeChartArcConditionalFormattingPtrOutput() TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return i.ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartArcConditionalFormattingArgs) ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartArcConditionalFormattingOutput).ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateGaugeChartArcConditionalFormattingPtrInput is an input type that accepts TemplateGaugeChartArcConditionalFormattingArgs, TemplateGaugeChartArcConditionalFormattingPtr and TemplateGaugeChartArcConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartArcConditionalFormattingPtrInput` via:
//
//	        TemplateGaugeChartArcConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartArcConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartArcConditionalFormattingPtrOutput() TemplateGaugeChartArcConditionalFormattingPtrOutput
	ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(context.Context) TemplateGaugeChartArcConditionalFormattingPtrOutput
}

type templateGaugeChartArcConditionalFormattingPtrType TemplateGaugeChartArcConditionalFormattingArgs

func TemplateGaugeChartArcConditionalFormattingPtr(v *TemplateGaugeChartArcConditionalFormattingArgs) TemplateGaugeChartArcConditionalFormattingPtrInput {
	return (*templateGaugeChartArcConditionalFormattingPtrType)(v)
}

func (*templateGaugeChartArcConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartArcConditionalFormatting)(nil)).Elem()
}

func (i *templateGaugeChartArcConditionalFormattingPtrType) ToTemplateGaugeChartArcConditionalFormattingPtrOutput() TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return i.ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartArcConditionalFormattingPtrType) ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartArcConditionalFormattingPtrOutput)
}

type TemplateGaugeChartArcConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartArcConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartArcConditionalFormatting)(nil)).Elem()
}

func (o TemplateGaugeChartArcConditionalFormattingOutput) ToTemplateGaugeChartArcConditionalFormattingOutput() TemplateGaugeChartArcConditionalFormattingOutput {
	return o
}

func (o TemplateGaugeChartArcConditionalFormattingOutput) ToTemplateGaugeChartArcConditionalFormattingOutputWithContext(ctx context.Context) TemplateGaugeChartArcConditionalFormattingOutput {
	return o
}

func (o TemplateGaugeChartArcConditionalFormattingOutput) ToTemplateGaugeChartArcConditionalFormattingPtrOutput() TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return o.ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartArcConditionalFormattingOutput) ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartArcConditionalFormatting) *TemplateGaugeChartArcConditionalFormatting {
		return &v
	}).(TemplateGaugeChartArcConditionalFormattingPtrOutput)
}

// The conditional formatting of the arc foreground color.
func (o TemplateGaugeChartArcConditionalFormattingOutput) ForegroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartArcConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.ForegroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateGaugeChartArcConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartArcConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartArcConditionalFormatting)(nil)).Elem()
}

func (o TemplateGaugeChartArcConditionalFormattingPtrOutput) ToTemplateGaugeChartArcConditionalFormattingPtrOutput() TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return o
}

func (o TemplateGaugeChartArcConditionalFormattingPtrOutput) ToTemplateGaugeChartArcConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return o
}

func (o TemplateGaugeChartArcConditionalFormattingPtrOutput) Elem() TemplateGaugeChartArcConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateGaugeChartArcConditionalFormatting) TemplateGaugeChartArcConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartArcConditionalFormatting
		return ret
	}).(TemplateGaugeChartArcConditionalFormattingOutput)
}

// The conditional formatting of the arc foreground color.
func (o TemplateGaugeChartArcConditionalFormattingPtrOutput) ForegroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartArcConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.ForegroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateGaugeChartColorConfiguration struct {
	// The background color configuration of a `GaugeChartVisual` .
	BackgroundColor *string `pulumi:"backgroundColor"`
	// The foreground color configuration of a `GaugeChartVisual` .
	ForegroundColor *string `pulumi:"foregroundColor"`
}

// TemplateGaugeChartColorConfigurationInput is an input type that accepts TemplateGaugeChartColorConfigurationArgs and TemplateGaugeChartColorConfigurationOutput values.
// You can construct a concrete instance of `TemplateGaugeChartColorConfigurationInput` via:
//
//	TemplateGaugeChartColorConfigurationArgs{...}
type TemplateGaugeChartColorConfigurationInput interface {
	pulumi.Input

	ToTemplateGaugeChartColorConfigurationOutput() TemplateGaugeChartColorConfigurationOutput
	ToTemplateGaugeChartColorConfigurationOutputWithContext(context.Context) TemplateGaugeChartColorConfigurationOutput
}

type TemplateGaugeChartColorConfigurationArgs struct {
	// The background color configuration of a `GaugeChartVisual` .
	BackgroundColor pulumi.StringPtrInput `pulumi:"backgroundColor"`
	// The foreground color configuration of a `GaugeChartVisual` .
	ForegroundColor pulumi.StringPtrInput `pulumi:"foregroundColor"`
}

func (TemplateGaugeChartColorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartColorConfiguration)(nil)).Elem()
}

func (i TemplateGaugeChartColorConfigurationArgs) ToTemplateGaugeChartColorConfigurationOutput() TemplateGaugeChartColorConfigurationOutput {
	return i.ToTemplateGaugeChartColorConfigurationOutputWithContext(context.Background())
}

func (i TemplateGaugeChartColorConfigurationArgs) ToTemplateGaugeChartColorConfigurationOutputWithContext(ctx context.Context) TemplateGaugeChartColorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartColorConfigurationOutput)
}

func (i TemplateGaugeChartColorConfigurationArgs) ToTemplateGaugeChartColorConfigurationPtrOutput() TemplateGaugeChartColorConfigurationPtrOutput {
	return i.ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartColorConfigurationArgs) ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartColorConfigurationOutput).ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(ctx)
}

// TemplateGaugeChartColorConfigurationPtrInput is an input type that accepts TemplateGaugeChartColorConfigurationArgs, TemplateGaugeChartColorConfigurationPtr and TemplateGaugeChartColorConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartColorConfigurationPtrInput` via:
//
//	        TemplateGaugeChartColorConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartColorConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartColorConfigurationPtrOutput() TemplateGaugeChartColorConfigurationPtrOutput
	ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(context.Context) TemplateGaugeChartColorConfigurationPtrOutput
}

type templateGaugeChartColorConfigurationPtrType TemplateGaugeChartColorConfigurationArgs

func TemplateGaugeChartColorConfigurationPtr(v *TemplateGaugeChartColorConfigurationArgs) TemplateGaugeChartColorConfigurationPtrInput {
	return (*templateGaugeChartColorConfigurationPtrType)(v)
}

func (*templateGaugeChartColorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartColorConfiguration)(nil)).Elem()
}

func (i *templateGaugeChartColorConfigurationPtrType) ToTemplateGaugeChartColorConfigurationPtrOutput() TemplateGaugeChartColorConfigurationPtrOutput {
	return i.ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartColorConfigurationPtrType) ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartColorConfigurationPtrOutput)
}

type TemplateGaugeChartColorConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartColorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartColorConfiguration)(nil)).Elem()
}

func (o TemplateGaugeChartColorConfigurationOutput) ToTemplateGaugeChartColorConfigurationOutput() TemplateGaugeChartColorConfigurationOutput {
	return o
}

func (o TemplateGaugeChartColorConfigurationOutput) ToTemplateGaugeChartColorConfigurationOutputWithContext(ctx context.Context) TemplateGaugeChartColorConfigurationOutput {
	return o
}

func (o TemplateGaugeChartColorConfigurationOutput) ToTemplateGaugeChartColorConfigurationPtrOutput() TemplateGaugeChartColorConfigurationPtrOutput {
	return o.ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartColorConfigurationOutput) ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartColorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartColorConfiguration) *TemplateGaugeChartColorConfiguration {
		return &v
	}).(TemplateGaugeChartColorConfigurationPtrOutput)
}

// The background color configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartColorConfigurationOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartColorConfiguration) *string { return v.BackgroundColor }).(pulumi.StringPtrOutput)
}

// The foreground color configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartColorConfigurationOutput) ForegroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartColorConfiguration) *string { return v.ForegroundColor }).(pulumi.StringPtrOutput)
}

type TemplateGaugeChartColorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartColorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartColorConfiguration)(nil)).Elem()
}

func (o TemplateGaugeChartColorConfigurationPtrOutput) ToTemplateGaugeChartColorConfigurationPtrOutput() TemplateGaugeChartColorConfigurationPtrOutput {
	return o
}

func (o TemplateGaugeChartColorConfigurationPtrOutput) ToTemplateGaugeChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartColorConfigurationPtrOutput {
	return o
}

func (o TemplateGaugeChartColorConfigurationPtrOutput) Elem() TemplateGaugeChartColorConfigurationOutput {
	return o.ApplyT(func(v *TemplateGaugeChartColorConfiguration) TemplateGaugeChartColorConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartColorConfiguration
		return ret
	}).(TemplateGaugeChartColorConfigurationOutput)
}

// The background color configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartColorConfigurationPtrOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(pulumi.StringPtrOutput)
}

// The foreground color configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartColorConfigurationPtrOutput) ForegroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ForegroundColor
	}).(pulumi.StringPtrOutput)
}

type TemplateGaugeChartConditionalFormatting struct {
	// Conditional formatting options of a `GaugeChartVisual` .
	ConditionalFormattingOptions []TemplateGaugeChartConditionalFormattingOption `pulumi:"conditionalFormattingOptions"`
}

// TemplateGaugeChartConditionalFormattingInput is an input type that accepts TemplateGaugeChartConditionalFormattingArgs and TemplateGaugeChartConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateGaugeChartConditionalFormattingInput` via:
//
//	TemplateGaugeChartConditionalFormattingArgs{...}
type TemplateGaugeChartConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateGaugeChartConditionalFormattingOutput() TemplateGaugeChartConditionalFormattingOutput
	ToTemplateGaugeChartConditionalFormattingOutputWithContext(context.Context) TemplateGaugeChartConditionalFormattingOutput
}

type TemplateGaugeChartConditionalFormattingArgs struct {
	// Conditional formatting options of a `GaugeChartVisual` .
	ConditionalFormattingOptions TemplateGaugeChartConditionalFormattingOptionArrayInput `pulumi:"conditionalFormattingOptions"`
}

func (TemplateGaugeChartConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartConditionalFormatting)(nil)).Elem()
}

func (i TemplateGaugeChartConditionalFormattingArgs) ToTemplateGaugeChartConditionalFormattingOutput() TemplateGaugeChartConditionalFormattingOutput {
	return i.ToTemplateGaugeChartConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateGaugeChartConditionalFormattingArgs) ToTemplateGaugeChartConditionalFormattingOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConditionalFormattingOutput)
}

func (i TemplateGaugeChartConditionalFormattingArgs) ToTemplateGaugeChartConditionalFormattingPtrOutput() TemplateGaugeChartConditionalFormattingPtrOutput {
	return i.ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartConditionalFormattingArgs) ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConditionalFormattingOutput).ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateGaugeChartConditionalFormattingPtrInput is an input type that accepts TemplateGaugeChartConditionalFormattingArgs, TemplateGaugeChartConditionalFormattingPtr and TemplateGaugeChartConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartConditionalFormattingPtrInput` via:
//
//	        TemplateGaugeChartConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartConditionalFormattingPtrOutput() TemplateGaugeChartConditionalFormattingPtrOutput
	ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(context.Context) TemplateGaugeChartConditionalFormattingPtrOutput
}

type templateGaugeChartConditionalFormattingPtrType TemplateGaugeChartConditionalFormattingArgs

func TemplateGaugeChartConditionalFormattingPtr(v *TemplateGaugeChartConditionalFormattingArgs) TemplateGaugeChartConditionalFormattingPtrInput {
	return (*templateGaugeChartConditionalFormattingPtrType)(v)
}

func (*templateGaugeChartConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartConditionalFormatting)(nil)).Elem()
}

func (i *templateGaugeChartConditionalFormattingPtrType) ToTemplateGaugeChartConditionalFormattingPtrOutput() TemplateGaugeChartConditionalFormattingPtrOutput {
	return i.ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartConditionalFormattingPtrType) ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConditionalFormattingPtrOutput)
}

type TemplateGaugeChartConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartConditionalFormatting)(nil)).Elem()
}

func (o TemplateGaugeChartConditionalFormattingOutput) ToTemplateGaugeChartConditionalFormattingOutput() TemplateGaugeChartConditionalFormattingOutput {
	return o
}

func (o TemplateGaugeChartConditionalFormattingOutput) ToTemplateGaugeChartConditionalFormattingOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingOutput {
	return o
}

func (o TemplateGaugeChartConditionalFormattingOutput) ToTemplateGaugeChartConditionalFormattingPtrOutput() TemplateGaugeChartConditionalFormattingPtrOutput {
	return o.ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartConditionalFormattingOutput) ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartConditionalFormatting) *TemplateGaugeChartConditionalFormatting {
		return &v
	}).(TemplateGaugeChartConditionalFormattingPtrOutput)
}

// Conditional formatting options of a `GaugeChartVisual` .
func (o TemplateGaugeChartConditionalFormattingOutput) ConditionalFormattingOptions() TemplateGaugeChartConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v TemplateGaugeChartConditionalFormatting) []TemplateGaugeChartConditionalFormattingOption {
		return v.ConditionalFormattingOptions
	}).(TemplateGaugeChartConditionalFormattingOptionArrayOutput)
}

type TemplateGaugeChartConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartConditionalFormatting)(nil)).Elem()
}

func (o TemplateGaugeChartConditionalFormattingPtrOutput) ToTemplateGaugeChartConditionalFormattingPtrOutput() TemplateGaugeChartConditionalFormattingPtrOutput {
	return o
}

func (o TemplateGaugeChartConditionalFormattingPtrOutput) ToTemplateGaugeChartConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingPtrOutput {
	return o
}

func (o TemplateGaugeChartConditionalFormattingPtrOutput) Elem() TemplateGaugeChartConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConditionalFormatting) TemplateGaugeChartConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartConditionalFormatting
		return ret
	}).(TemplateGaugeChartConditionalFormattingOutput)
}

// Conditional formatting options of a `GaugeChartVisual` .
func (o TemplateGaugeChartConditionalFormattingPtrOutput) ConditionalFormattingOptions() TemplateGaugeChartConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConditionalFormatting) []TemplateGaugeChartConditionalFormattingOption {
		if v == nil {
			return nil
		}
		return v.ConditionalFormattingOptions
	}).(TemplateGaugeChartConditionalFormattingOptionArrayOutput)
}

type TemplateGaugeChartConditionalFormattingOption struct {
	// The options that determine the presentation of the arc of a `GaugeChartVisual` .
	Arc *TemplateGaugeChartArcConditionalFormatting `pulumi:"arc"`
	// The conditional formatting for the primary value of a `GaugeChartVisual` .
	PrimaryValue *TemplateGaugeChartPrimaryValueConditionalFormatting `pulumi:"primaryValue"`
}

// TemplateGaugeChartConditionalFormattingOptionInput is an input type that accepts TemplateGaugeChartConditionalFormattingOptionArgs and TemplateGaugeChartConditionalFormattingOptionOutput values.
// You can construct a concrete instance of `TemplateGaugeChartConditionalFormattingOptionInput` via:
//
//	TemplateGaugeChartConditionalFormattingOptionArgs{...}
type TemplateGaugeChartConditionalFormattingOptionInput interface {
	pulumi.Input

	ToTemplateGaugeChartConditionalFormattingOptionOutput() TemplateGaugeChartConditionalFormattingOptionOutput
	ToTemplateGaugeChartConditionalFormattingOptionOutputWithContext(context.Context) TemplateGaugeChartConditionalFormattingOptionOutput
}

type TemplateGaugeChartConditionalFormattingOptionArgs struct {
	// The options that determine the presentation of the arc of a `GaugeChartVisual` .
	Arc TemplateGaugeChartArcConditionalFormattingPtrInput `pulumi:"arc"`
	// The conditional formatting for the primary value of a `GaugeChartVisual` .
	PrimaryValue TemplateGaugeChartPrimaryValueConditionalFormattingPtrInput `pulumi:"primaryValue"`
}

func (TemplateGaugeChartConditionalFormattingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateGaugeChartConditionalFormattingOptionArgs) ToTemplateGaugeChartConditionalFormattingOptionOutput() TemplateGaugeChartConditionalFormattingOptionOutput {
	return i.ToTemplateGaugeChartConditionalFormattingOptionOutputWithContext(context.Background())
}

func (i TemplateGaugeChartConditionalFormattingOptionArgs) ToTemplateGaugeChartConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConditionalFormattingOptionOutput)
}

// TemplateGaugeChartConditionalFormattingOptionArrayInput is an input type that accepts TemplateGaugeChartConditionalFormattingOptionArray and TemplateGaugeChartConditionalFormattingOptionArrayOutput values.
// You can construct a concrete instance of `TemplateGaugeChartConditionalFormattingOptionArrayInput` via:
//
//	TemplateGaugeChartConditionalFormattingOptionArray{ TemplateGaugeChartConditionalFormattingOptionArgs{...} }
type TemplateGaugeChartConditionalFormattingOptionArrayInput interface {
	pulumi.Input

	ToTemplateGaugeChartConditionalFormattingOptionArrayOutput() TemplateGaugeChartConditionalFormattingOptionArrayOutput
	ToTemplateGaugeChartConditionalFormattingOptionArrayOutputWithContext(context.Context) TemplateGaugeChartConditionalFormattingOptionArrayOutput
}

type TemplateGaugeChartConditionalFormattingOptionArray []TemplateGaugeChartConditionalFormattingOptionInput

func (TemplateGaugeChartConditionalFormattingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGaugeChartConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateGaugeChartConditionalFormattingOptionArray) ToTemplateGaugeChartConditionalFormattingOptionArrayOutput() TemplateGaugeChartConditionalFormattingOptionArrayOutput {
	return i.ToTemplateGaugeChartConditionalFormattingOptionArrayOutputWithContext(context.Background())
}

func (i TemplateGaugeChartConditionalFormattingOptionArray) ToTemplateGaugeChartConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConditionalFormattingOptionArrayOutput)
}

type TemplateGaugeChartConditionalFormattingOptionOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartConditionalFormattingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateGaugeChartConditionalFormattingOptionOutput) ToTemplateGaugeChartConditionalFormattingOptionOutput() TemplateGaugeChartConditionalFormattingOptionOutput {
	return o
}

func (o TemplateGaugeChartConditionalFormattingOptionOutput) ToTemplateGaugeChartConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingOptionOutput {
	return o
}

// The options that determine the presentation of the arc of a `GaugeChartVisual` .
func (o TemplateGaugeChartConditionalFormattingOptionOutput) Arc() TemplateGaugeChartArcConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConditionalFormattingOption) *TemplateGaugeChartArcConditionalFormatting {
		return v.Arc
	}).(TemplateGaugeChartArcConditionalFormattingPtrOutput)
}

// The conditional formatting for the primary value of a `GaugeChartVisual` .
func (o TemplateGaugeChartConditionalFormattingOptionOutput) PrimaryValue() TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConditionalFormattingOption) *TemplateGaugeChartPrimaryValueConditionalFormatting {
		return v.PrimaryValue
	}).(TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput)
}

type TemplateGaugeChartConditionalFormattingOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartConditionalFormattingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGaugeChartConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateGaugeChartConditionalFormattingOptionArrayOutput) ToTemplateGaugeChartConditionalFormattingOptionArrayOutput() TemplateGaugeChartConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateGaugeChartConditionalFormattingOptionArrayOutput) ToTemplateGaugeChartConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateGaugeChartConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateGaugeChartConditionalFormattingOptionArrayOutput) Index(i pulumi.IntInput) TemplateGaugeChartConditionalFormattingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateGaugeChartConditionalFormattingOption {
		return vs[0].([]TemplateGaugeChartConditionalFormattingOption)[vs[1].(int)]
	}).(TemplateGaugeChartConditionalFormattingOptionOutput)
}

type TemplateGaugeChartConfiguration struct {
	// The color configuration of a `GaugeChartVisual` .
	ColorConfiguration *TemplateGaugeChartColorConfiguration `pulumi:"colorConfiguration"`
	// The data label configuration of a `GaugeChartVisual` .
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field well configuration of a `GaugeChartVisual` .
	FieldWells *TemplateGaugeChartFieldWells `pulumi:"fieldWells"`
	// The options that determine the presentation of the `GaugeChartVisual` .
	GaugeChartOptions *TemplateGaugeChartOptions `pulumi:"gaugeChartOptions"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The tooltip configuration of a `GaugeChartVisual` .
	TooltipOptions *TemplateTooltipOptions `pulumi:"tooltipOptions"`
	// The visual palette configuration of a `GaugeChartVisual` .
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
}

// TemplateGaugeChartConfigurationInput is an input type that accepts TemplateGaugeChartConfigurationArgs and TemplateGaugeChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateGaugeChartConfigurationInput` via:
//
//	TemplateGaugeChartConfigurationArgs{...}
type TemplateGaugeChartConfigurationInput interface {
	pulumi.Input

	ToTemplateGaugeChartConfigurationOutput() TemplateGaugeChartConfigurationOutput
	ToTemplateGaugeChartConfigurationOutputWithContext(context.Context) TemplateGaugeChartConfigurationOutput
}

type TemplateGaugeChartConfigurationArgs struct {
	// The color configuration of a `GaugeChartVisual` .
	ColorConfiguration TemplateGaugeChartColorConfigurationPtrInput `pulumi:"colorConfiguration"`
	// The data label configuration of a `GaugeChartVisual` .
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field well configuration of a `GaugeChartVisual` .
	FieldWells TemplateGaugeChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The options that determine the presentation of the `GaugeChartVisual` .
	GaugeChartOptions TemplateGaugeChartOptionsPtrInput `pulumi:"gaugeChartOptions"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The tooltip configuration of a `GaugeChartVisual` .
	TooltipOptions TemplateTooltipOptionsPtrInput `pulumi:"tooltipOptions"`
	// The visual palette configuration of a `GaugeChartVisual` .
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
}

func (TemplateGaugeChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartConfiguration)(nil)).Elem()
}

func (i TemplateGaugeChartConfigurationArgs) ToTemplateGaugeChartConfigurationOutput() TemplateGaugeChartConfigurationOutput {
	return i.ToTemplateGaugeChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateGaugeChartConfigurationArgs) ToTemplateGaugeChartConfigurationOutputWithContext(ctx context.Context) TemplateGaugeChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConfigurationOutput)
}

func (i TemplateGaugeChartConfigurationArgs) ToTemplateGaugeChartConfigurationPtrOutput() TemplateGaugeChartConfigurationPtrOutput {
	return i.ToTemplateGaugeChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartConfigurationArgs) ToTemplateGaugeChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConfigurationOutput).ToTemplateGaugeChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateGaugeChartConfigurationPtrInput is an input type that accepts TemplateGaugeChartConfigurationArgs, TemplateGaugeChartConfigurationPtr and TemplateGaugeChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartConfigurationPtrInput` via:
//
//	        TemplateGaugeChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartConfigurationPtrOutput() TemplateGaugeChartConfigurationPtrOutput
	ToTemplateGaugeChartConfigurationPtrOutputWithContext(context.Context) TemplateGaugeChartConfigurationPtrOutput
}

type templateGaugeChartConfigurationPtrType TemplateGaugeChartConfigurationArgs

func TemplateGaugeChartConfigurationPtr(v *TemplateGaugeChartConfigurationArgs) TemplateGaugeChartConfigurationPtrInput {
	return (*templateGaugeChartConfigurationPtrType)(v)
}

func (*templateGaugeChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartConfiguration)(nil)).Elem()
}

func (i *templateGaugeChartConfigurationPtrType) ToTemplateGaugeChartConfigurationPtrOutput() TemplateGaugeChartConfigurationPtrOutput {
	return i.ToTemplateGaugeChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartConfigurationPtrType) ToTemplateGaugeChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartConfigurationPtrOutput)
}

type TemplateGaugeChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartConfiguration)(nil)).Elem()
}

func (o TemplateGaugeChartConfigurationOutput) ToTemplateGaugeChartConfigurationOutput() TemplateGaugeChartConfigurationOutput {
	return o
}

func (o TemplateGaugeChartConfigurationOutput) ToTemplateGaugeChartConfigurationOutputWithContext(ctx context.Context) TemplateGaugeChartConfigurationOutput {
	return o
}

func (o TemplateGaugeChartConfigurationOutput) ToTemplateGaugeChartConfigurationPtrOutput() TemplateGaugeChartConfigurationPtrOutput {
	return o.ToTemplateGaugeChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartConfigurationOutput) ToTemplateGaugeChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartConfiguration) *TemplateGaugeChartConfiguration {
		return &v
	}).(TemplateGaugeChartConfigurationPtrOutput)
}

// The color configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationOutput) ColorConfiguration() TemplateGaugeChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConfiguration) *TemplateGaugeChartColorConfiguration {
		return v.ColorConfiguration
	}).(TemplateGaugeChartColorConfigurationPtrOutput)
}

// The data label configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationOutput) FieldWells() TemplateGaugeChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConfiguration) *TemplateGaugeChartFieldWells { return v.FieldWells }).(TemplateGaugeChartFieldWellsPtrOutput)
}

// The options that determine the presentation of the `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationOutput) GaugeChartOptions() TemplateGaugeChartOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConfiguration) *TemplateGaugeChartOptions { return v.GaugeChartOptions }).(TemplateGaugeChartOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateGaugeChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The tooltip configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationOutput) TooltipOptions() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConfiguration) *TemplateTooltipOptions { return v.TooltipOptions }).(TemplateTooltipOptionsPtrOutput)
}

// The visual palette configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

type TemplateGaugeChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartConfiguration)(nil)).Elem()
}

func (o TemplateGaugeChartConfigurationPtrOutput) ToTemplateGaugeChartConfigurationPtrOutput() TemplateGaugeChartConfigurationPtrOutput {
	return o
}

func (o TemplateGaugeChartConfigurationPtrOutput) ToTemplateGaugeChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateGaugeChartConfigurationPtrOutput {
	return o
}

func (o TemplateGaugeChartConfigurationPtrOutput) Elem() TemplateGaugeChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) TemplateGaugeChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartConfiguration
		return ret
	}).(TemplateGaugeChartConfigurationOutput)
}

// The color configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationPtrOutput) ColorConfiguration() TemplateGaugeChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) *TemplateGaugeChartColorConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorConfiguration
	}).(TemplateGaugeChartColorConfigurationPtrOutput)
}

// The data label configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationPtrOutput) FieldWells() TemplateGaugeChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) *TemplateGaugeChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateGaugeChartFieldWellsPtrOutput)
}

// The options that determine the presentation of the `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationPtrOutput) GaugeChartOptions() TemplateGaugeChartOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) *TemplateGaugeChartOptions {
		if v == nil {
			return nil
		}
		return v.GaugeChartOptions
	}).(TemplateGaugeChartOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateGaugeChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The tooltip configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationPtrOutput) TooltipOptions() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.TooltipOptions
	}).(TemplateTooltipOptionsPtrOutput)
}

// The visual palette configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

type TemplateGaugeChartFieldWells struct {
	// The target value field wells of a `GaugeChartVisual` .
	TargetValues []TemplateMeasureField `pulumi:"targetValues"`
	// The value field wells of a `GaugeChartVisual` .
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateGaugeChartFieldWellsInput is an input type that accepts TemplateGaugeChartFieldWellsArgs and TemplateGaugeChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateGaugeChartFieldWellsInput` via:
//
//	TemplateGaugeChartFieldWellsArgs{...}
type TemplateGaugeChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateGaugeChartFieldWellsOutput() TemplateGaugeChartFieldWellsOutput
	ToTemplateGaugeChartFieldWellsOutputWithContext(context.Context) TemplateGaugeChartFieldWellsOutput
}

type TemplateGaugeChartFieldWellsArgs struct {
	// The target value field wells of a `GaugeChartVisual` .
	TargetValues TemplateMeasureFieldArrayInput `pulumi:"targetValues"`
	// The value field wells of a `GaugeChartVisual` .
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateGaugeChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartFieldWells)(nil)).Elem()
}

func (i TemplateGaugeChartFieldWellsArgs) ToTemplateGaugeChartFieldWellsOutput() TemplateGaugeChartFieldWellsOutput {
	return i.ToTemplateGaugeChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateGaugeChartFieldWellsArgs) ToTemplateGaugeChartFieldWellsOutputWithContext(ctx context.Context) TemplateGaugeChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartFieldWellsOutput)
}

func (i TemplateGaugeChartFieldWellsArgs) ToTemplateGaugeChartFieldWellsPtrOutput() TemplateGaugeChartFieldWellsPtrOutput {
	return i.ToTemplateGaugeChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartFieldWellsArgs) ToTemplateGaugeChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartFieldWellsOutput).ToTemplateGaugeChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateGaugeChartFieldWellsPtrInput is an input type that accepts TemplateGaugeChartFieldWellsArgs, TemplateGaugeChartFieldWellsPtr and TemplateGaugeChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartFieldWellsPtrInput` via:
//
//	        TemplateGaugeChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartFieldWellsPtrOutput() TemplateGaugeChartFieldWellsPtrOutput
	ToTemplateGaugeChartFieldWellsPtrOutputWithContext(context.Context) TemplateGaugeChartFieldWellsPtrOutput
}

type templateGaugeChartFieldWellsPtrType TemplateGaugeChartFieldWellsArgs

func TemplateGaugeChartFieldWellsPtr(v *TemplateGaugeChartFieldWellsArgs) TemplateGaugeChartFieldWellsPtrInput {
	return (*templateGaugeChartFieldWellsPtrType)(v)
}

func (*templateGaugeChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartFieldWells)(nil)).Elem()
}

func (i *templateGaugeChartFieldWellsPtrType) ToTemplateGaugeChartFieldWellsPtrOutput() TemplateGaugeChartFieldWellsPtrOutput {
	return i.ToTemplateGaugeChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartFieldWellsPtrType) ToTemplateGaugeChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartFieldWellsPtrOutput)
}

type TemplateGaugeChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartFieldWells)(nil)).Elem()
}

func (o TemplateGaugeChartFieldWellsOutput) ToTemplateGaugeChartFieldWellsOutput() TemplateGaugeChartFieldWellsOutput {
	return o
}

func (o TemplateGaugeChartFieldWellsOutput) ToTemplateGaugeChartFieldWellsOutputWithContext(ctx context.Context) TemplateGaugeChartFieldWellsOutput {
	return o
}

func (o TemplateGaugeChartFieldWellsOutput) ToTemplateGaugeChartFieldWellsPtrOutput() TemplateGaugeChartFieldWellsPtrOutput {
	return o.ToTemplateGaugeChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartFieldWellsOutput) ToTemplateGaugeChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartFieldWells) *TemplateGaugeChartFieldWells {
		return &v
	}).(TemplateGaugeChartFieldWellsPtrOutput)
}

// The target value field wells of a `GaugeChartVisual` .
func (o TemplateGaugeChartFieldWellsOutput) TargetValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateGaugeChartFieldWells) []TemplateMeasureField { return v.TargetValues }).(TemplateMeasureFieldArrayOutput)
}

// The value field wells of a `GaugeChartVisual` .
func (o TemplateGaugeChartFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateGaugeChartFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateGaugeChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartFieldWells)(nil)).Elem()
}

func (o TemplateGaugeChartFieldWellsPtrOutput) ToTemplateGaugeChartFieldWellsPtrOutput() TemplateGaugeChartFieldWellsPtrOutput {
	return o
}

func (o TemplateGaugeChartFieldWellsPtrOutput) ToTemplateGaugeChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartFieldWellsPtrOutput {
	return o
}

func (o TemplateGaugeChartFieldWellsPtrOutput) Elem() TemplateGaugeChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateGaugeChartFieldWells) TemplateGaugeChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartFieldWells
		return ret
	}).(TemplateGaugeChartFieldWellsOutput)
}

// The target value field wells of a `GaugeChartVisual` .
func (o TemplateGaugeChartFieldWellsPtrOutput) TargetValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateGaugeChartFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.TargetValues
	}).(TemplateMeasureFieldArrayOutput)
}

// The value field wells of a `GaugeChartVisual` .
func (o TemplateGaugeChartFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateGaugeChartFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateGaugeChartOptions struct {
	// The arc configuration of a `GaugeChartVisual` .
	Arc *TemplateArcConfiguration `pulumi:"arc"`
	// The arc axis configuration of a `GaugeChartVisual` .
	ArcAxis *TemplateArcAxisConfiguration `pulumi:"arcAxis"`
	// The comparison configuration of a `GaugeChartVisual` .
	Comparison *TemplateComparisonConfiguration `pulumi:"comparison"`
	// The options that determine the primary value display type.
	PrimaryValueDisplayType *TemplatePrimaryValueDisplayType `pulumi:"primaryValueDisplayType"`
	// The options that determine the primary value font configuration.
	PrimaryValueFontConfiguration *TemplateFontConfiguration `pulumi:"primaryValueFontConfiguration"`
}

// TemplateGaugeChartOptionsInput is an input type that accepts TemplateGaugeChartOptionsArgs and TemplateGaugeChartOptionsOutput values.
// You can construct a concrete instance of `TemplateGaugeChartOptionsInput` via:
//
//	TemplateGaugeChartOptionsArgs{...}
type TemplateGaugeChartOptionsInput interface {
	pulumi.Input

	ToTemplateGaugeChartOptionsOutput() TemplateGaugeChartOptionsOutput
	ToTemplateGaugeChartOptionsOutputWithContext(context.Context) TemplateGaugeChartOptionsOutput
}

type TemplateGaugeChartOptionsArgs struct {
	// The arc configuration of a `GaugeChartVisual` .
	Arc TemplateArcConfigurationPtrInput `pulumi:"arc"`
	// The arc axis configuration of a `GaugeChartVisual` .
	ArcAxis TemplateArcAxisConfigurationPtrInput `pulumi:"arcAxis"`
	// The comparison configuration of a `GaugeChartVisual` .
	Comparison TemplateComparisonConfigurationPtrInput `pulumi:"comparison"`
	// The options that determine the primary value display type.
	PrimaryValueDisplayType TemplatePrimaryValueDisplayTypePtrInput `pulumi:"primaryValueDisplayType"`
	// The options that determine the primary value font configuration.
	PrimaryValueFontConfiguration TemplateFontConfigurationPtrInput `pulumi:"primaryValueFontConfiguration"`
}

func (TemplateGaugeChartOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartOptions)(nil)).Elem()
}

func (i TemplateGaugeChartOptionsArgs) ToTemplateGaugeChartOptionsOutput() TemplateGaugeChartOptionsOutput {
	return i.ToTemplateGaugeChartOptionsOutputWithContext(context.Background())
}

func (i TemplateGaugeChartOptionsArgs) ToTemplateGaugeChartOptionsOutputWithContext(ctx context.Context) TemplateGaugeChartOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartOptionsOutput)
}

func (i TemplateGaugeChartOptionsArgs) ToTemplateGaugeChartOptionsPtrOutput() TemplateGaugeChartOptionsPtrOutput {
	return i.ToTemplateGaugeChartOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartOptionsArgs) ToTemplateGaugeChartOptionsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartOptionsOutput).ToTemplateGaugeChartOptionsPtrOutputWithContext(ctx)
}

// TemplateGaugeChartOptionsPtrInput is an input type that accepts TemplateGaugeChartOptionsArgs, TemplateGaugeChartOptionsPtr and TemplateGaugeChartOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartOptionsPtrInput` via:
//
//	        TemplateGaugeChartOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartOptionsPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartOptionsPtrOutput() TemplateGaugeChartOptionsPtrOutput
	ToTemplateGaugeChartOptionsPtrOutputWithContext(context.Context) TemplateGaugeChartOptionsPtrOutput
}

type templateGaugeChartOptionsPtrType TemplateGaugeChartOptionsArgs

func TemplateGaugeChartOptionsPtr(v *TemplateGaugeChartOptionsArgs) TemplateGaugeChartOptionsPtrInput {
	return (*templateGaugeChartOptionsPtrType)(v)
}

func (*templateGaugeChartOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartOptions)(nil)).Elem()
}

func (i *templateGaugeChartOptionsPtrType) ToTemplateGaugeChartOptionsPtrOutput() TemplateGaugeChartOptionsPtrOutput {
	return i.ToTemplateGaugeChartOptionsPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartOptionsPtrType) ToTemplateGaugeChartOptionsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartOptionsPtrOutput)
}

type TemplateGaugeChartOptionsOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartOptions)(nil)).Elem()
}

func (o TemplateGaugeChartOptionsOutput) ToTemplateGaugeChartOptionsOutput() TemplateGaugeChartOptionsOutput {
	return o
}

func (o TemplateGaugeChartOptionsOutput) ToTemplateGaugeChartOptionsOutputWithContext(ctx context.Context) TemplateGaugeChartOptionsOutput {
	return o
}

func (o TemplateGaugeChartOptionsOutput) ToTemplateGaugeChartOptionsPtrOutput() TemplateGaugeChartOptionsPtrOutput {
	return o.ToTemplateGaugeChartOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartOptionsOutput) ToTemplateGaugeChartOptionsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartOptions) *TemplateGaugeChartOptions {
		return &v
	}).(TemplateGaugeChartOptionsPtrOutput)
}

// The arc configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartOptionsOutput) Arc() TemplateArcConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartOptions) *TemplateArcConfiguration { return v.Arc }).(TemplateArcConfigurationPtrOutput)
}

// The arc axis configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartOptionsOutput) ArcAxis() TemplateArcAxisConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartOptions) *TemplateArcAxisConfiguration { return v.ArcAxis }).(TemplateArcAxisConfigurationPtrOutput)
}

// The comparison configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartOptionsOutput) Comparison() TemplateComparisonConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartOptions) *TemplateComparisonConfiguration { return v.Comparison }).(TemplateComparisonConfigurationPtrOutput)
}

// The options that determine the primary value display type.
func (o TemplateGaugeChartOptionsOutput) PrimaryValueDisplayType() TemplatePrimaryValueDisplayTypePtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartOptions) *TemplatePrimaryValueDisplayType { return v.PrimaryValueDisplayType }).(TemplatePrimaryValueDisplayTypePtrOutput)
}

// The options that determine the primary value font configuration.
func (o TemplateGaugeChartOptionsOutput) PrimaryValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartOptions) *TemplateFontConfiguration { return v.PrimaryValueFontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

type TemplateGaugeChartOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartOptions)(nil)).Elem()
}

func (o TemplateGaugeChartOptionsPtrOutput) ToTemplateGaugeChartOptionsPtrOutput() TemplateGaugeChartOptionsPtrOutput {
	return o
}

func (o TemplateGaugeChartOptionsPtrOutput) ToTemplateGaugeChartOptionsPtrOutputWithContext(ctx context.Context) TemplateGaugeChartOptionsPtrOutput {
	return o
}

func (o TemplateGaugeChartOptionsPtrOutput) Elem() TemplateGaugeChartOptionsOutput {
	return o.ApplyT(func(v *TemplateGaugeChartOptions) TemplateGaugeChartOptions {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartOptions
		return ret
	}).(TemplateGaugeChartOptionsOutput)
}

// The arc configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartOptionsPtrOutput) Arc() TemplateArcConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartOptions) *TemplateArcConfiguration {
		if v == nil {
			return nil
		}
		return v.Arc
	}).(TemplateArcConfigurationPtrOutput)
}

// The arc axis configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartOptionsPtrOutput) ArcAxis() TemplateArcAxisConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartOptions) *TemplateArcAxisConfiguration {
		if v == nil {
			return nil
		}
		return v.ArcAxis
	}).(TemplateArcAxisConfigurationPtrOutput)
}

// The comparison configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartOptionsPtrOutput) Comparison() TemplateComparisonConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartOptions) *TemplateComparisonConfiguration {
		if v == nil {
			return nil
		}
		return v.Comparison
	}).(TemplateComparisonConfigurationPtrOutput)
}

// The options that determine the primary value display type.
func (o TemplateGaugeChartOptionsPtrOutput) PrimaryValueDisplayType() TemplatePrimaryValueDisplayTypePtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartOptions) *TemplatePrimaryValueDisplayType {
		if v == nil {
			return nil
		}
		return v.PrimaryValueDisplayType
	}).(TemplatePrimaryValueDisplayTypePtrOutput)
}

// The options that determine the primary value font configuration.
func (o TemplateGaugeChartOptionsPtrOutput) PrimaryValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.PrimaryValueFontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

type TemplateGaugeChartPrimaryValueConditionalFormatting struct {
	// The conditional formatting of the primary value icon.
	Icon *TemplateConditionalFormattingIcon `pulumi:"icon"`
	// The conditional formatting of the primary value text color.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateGaugeChartPrimaryValueConditionalFormattingInput is an input type that accepts TemplateGaugeChartPrimaryValueConditionalFormattingArgs and TemplateGaugeChartPrimaryValueConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateGaugeChartPrimaryValueConditionalFormattingInput` via:
//
//	TemplateGaugeChartPrimaryValueConditionalFormattingArgs{...}
type TemplateGaugeChartPrimaryValueConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateGaugeChartPrimaryValueConditionalFormattingOutput() TemplateGaugeChartPrimaryValueConditionalFormattingOutput
	ToTemplateGaugeChartPrimaryValueConditionalFormattingOutputWithContext(context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingOutput
}

type TemplateGaugeChartPrimaryValueConditionalFormattingArgs struct {
	// The conditional formatting of the primary value icon.
	Icon TemplateConditionalFormattingIconPtrInput `pulumi:"icon"`
	// The conditional formatting of the primary value text color.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateGaugeChartPrimaryValueConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (i TemplateGaugeChartPrimaryValueConditionalFormattingArgs) ToTemplateGaugeChartPrimaryValueConditionalFormattingOutput() TemplateGaugeChartPrimaryValueConditionalFormattingOutput {
	return i.ToTemplateGaugeChartPrimaryValueConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateGaugeChartPrimaryValueConditionalFormattingArgs) ToTemplateGaugeChartPrimaryValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartPrimaryValueConditionalFormattingOutput)
}

func (i TemplateGaugeChartPrimaryValueConditionalFormattingArgs) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput() TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return i.ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartPrimaryValueConditionalFormattingArgs) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartPrimaryValueConditionalFormattingOutput).ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateGaugeChartPrimaryValueConditionalFormattingPtrInput is an input type that accepts TemplateGaugeChartPrimaryValueConditionalFormattingArgs, TemplateGaugeChartPrimaryValueConditionalFormattingPtr and TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartPrimaryValueConditionalFormattingPtrInput` via:
//
//	        TemplateGaugeChartPrimaryValueConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartPrimaryValueConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput() TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput
	ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput
}

type templateGaugeChartPrimaryValueConditionalFormattingPtrType TemplateGaugeChartPrimaryValueConditionalFormattingArgs

func TemplateGaugeChartPrimaryValueConditionalFormattingPtr(v *TemplateGaugeChartPrimaryValueConditionalFormattingArgs) TemplateGaugeChartPrimaryValueConditionalFormattingPtrInput {
	return (*templateGaugeChartPrimaryValueConditionalFormattingPtrType)(v)
}

func (*templateGaugeChartPrimaryValueConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (i *templateGaugeChartPrimaryValueConditionalFormattingPtrType) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput() TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return i.ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartPrimaryValueConditionalFormattingPtrType) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput)
}

type TemplateGaugeChartPrimaryValueConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartPrimaryValueConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateGaugeChartPrimaryValueConditionalFormattingOutput) ToTemplateGaugeChartPrimaryValueConditionalFormattingOutput() TemplateGaugeChartPrimaryValueConditionalFormattingOutput {
	return o
}

func (o TemplateGaugeChartPrimaryValueConditionalFormattingOutput) ToTemplateGaugeChartPrimaryValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingOutput {
	return o
}

func (o TemplateGaugeChartPrimaryValueConditionalFormattingOutput) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput() TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return o.ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartPrimaryValueConditionalFormattingOutput) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartPrimaryValueConditionalFormatting) *TemplateGaugeChartPrimaryValueConditionalFormatting {
		return &v
	}).(TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput)
}

// The conditional formatting of the primary value icon.
func (o TemplateGaugeChartPrimaryValueConditionalFormattingOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartPrimaryValueConditionalFormatting) *TemplateConditionalFormattingIcon {
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the primary value text color.
func (o TemplateGaugeChartPrimaryValueConditionalFormattingOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartPrimaryValueConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput() TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput) ToTemplateGaugeChartPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput) Elem() TemplateGaugeChartPrimaryValueConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateGaugeChartPrimaryValueConditionalFormatting) TemplateGaugeChartPrimaryValueConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartPrimaryValueConditionalFormatting
		return ret
	}).(TemplateGaugeChartPrimaryValueConditionalFormattingOutput)
}

// The conditional formatting of the primary value icon.
func (o TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartPrimaryValueConditionalFormatting) *TemplateConditionalFormattingIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the primary value text color.
func (o TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartPrimaryValueConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateGaugeChartVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a `GaugeChartVisual` .
	ChartConfiguration *TemplateGaugeChartConfiguration `pulumi:"chartConfiguration"`
	// The conditional formatting of a `GaugeChartVisual` .
	ConditionalFormatting *TemplateGaugeChartConditionalFormatting `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateGaugeChartVisualInput is an input type that accepts TemplateGaugeChartVisualArgs and TemplateGaugeChartVisualOutput values.
// You can construct a concrete instance of `TemplateGaugeChartVisualInput` via:
//
//	TemplateGaugeChartVisualArgs{...}
type TemplateGaugeChartVisualInput interface {
	pulumi.Input

	ToTemplateGaugeChartVisualOutput() TemplateGaugeChartVisualOutput
	ToTemplateGaugeChartVisualOutputWithContext(context.Context) TemplateGaugeChartVisualOutput
}

type TemplateGaugeChartVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a `GaugeChartVisual` .
	ChartConfiguration TemplateGaugeChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The conditional formatting of a `GaugeChartVisual` .
	ConditionalFormatting TemplateGaugeChartConditionalFormattingPtrInput `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateGaugeChartVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartVisual)(nil)).Elem()
}

func (i TemplateGaugeChartVisualArgs) ToTemplateGaugeChartVisualOutput() TemplateGaugeChartVisualOutput {
	return i.ToTemplateGaugeChartVisualOutputWithContext(context.Background())
}

func (i TemplateGaugeChartVisualArgs) ToTemplateGaugeChartVisualOutputWithContext(ctx context.Context) TemplateGaugeChartVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartVisualOutput)
}

func (i TemplateGaugeChartVisualArgs) ToTemplateGaugeChartVisualPtrOutput() TemplateGaugeChartVisualPtrOutput {
	return i.ToTemplateGaugeChartVisualPtrOutputWithContext(context.Background())
}

func (i TemplateGaugeChartVisualArgs) ToTemplateGaugeChartVisualPtrOutputWithContext(ctx context.Context) TemplateGaugeChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartVisualOutput).ToTemplateGaugeChartVisualPtrOutputWithContext(ctx)
}

// TemplateGaugeChartVisualPtrInput is an input type that accepts TemplateGaugeChartVisualArgs, TemplateGaugeChartVisualPtr and TemplateGaugeChartVisualPtrOutput values.
// You can construct a concrete instance of `TemplateGaugeChartVisualPtrInput` via:
//
//	        TemplateGaugeChartVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateGaugeChartVisualPtrInput interface {
	pulumi.Input

	ToTemplateGaugeChartVisualPtrOutput() TemplateGaugeChartVisualPtrOutput
	ToTemplateGaugeChartVisualPtrOutputWithContext(context.Context) TemplateGaugeChartVisualPtrOutput
}

type templateGaugeChartVisualPtrType TemplateGaugeChartVisualArgs

func TemplateGaugeChartVisualPtr(v *TemplateGaugeChartVisualArgs) TemplateGaugeChartVisualPtrInput {
	return (*templateGaugeChartVisualPtrType)(v)
}

func (*templateGaugeChartVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartVisual)(nil)).Elem()
}

func (i *templateGaugeChartVisualPtrType) ToTemplateGaugeChartVisualPtrOutput() TemplateGaugeChartVisualPtrOutput {
	return i.ToTemplateGaugeChartVisualPtrOutputWithContext(context.Background())
}

func (i *templateGaugeChartVisualPtrType) ToTemplateGaugeChartVisualPtrOutputWithContext(ctx context.Context) TemplateGaugeChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGaugeChartVisualPtrOutput)
}

type TemplateGaugeChartVisualOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGaugeChartVisual)(nil)).Elem()
}

func (o TemplateGaugeChartVisualOutput) ToTemplateGaugeChartVisualOutput() TemplateGaugeChartVisualOutput {
	return o
}

func (o TemplateGaugeChartVisualOutput) ToTemplateGaugeChartVisualOutputWithContext(ctx context.Context) TemplateGaugeChartVisualOutput {
	return o
}

func (o TemplateGaugeChartVisualOutput) ToTemplateGaugeChartVisualPtrOutput() TemplateGaugeChartVisualPtrOutput {
	return o.ToTemplateGaugeChartVisualPtrOutputWithContext(context.Background())
}

func (o TemplateGaugeChartVisualOutput) ToTemplateGaugeChartVisualPtrOutputWithContext(ctx context.Context) TemplateGaugeChartVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGaugeChartVisual) *TemplateGaugeChartVisual {
		return &v
	}).(TemplateGaugeChartVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateGaugeChartVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateGaugeChartVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartVisualOutput) ChartConfiguration() TemplateGaugeChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartVisual) *TemplateGaugeChartConfiguration { return v.ChartConfiguration }).(TemplateGaugeChartConfigurationPtrOutput)
}

// The conditional formatting of a `GaugeChartVisual` .
func (o TemplateGaugeChartVisualOutput) ConditionalFormatting() TemplateGaugeChartConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartVisual) *TemplateGaugeChartConditionalFormatting {
		return v.ConditionalFormatting
	}).(TemplateGaugeChartConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateGaugeChartVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateGaugeChartVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateGaugeChartVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateGaugeChartVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateGaugeChartVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateGaugeChartVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateGaugeChartVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateGaugeChartVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGaugeChartVisual)(nil)).Elem()
}

func (o TemplateGaugeChartVisualPtrOutput) ToTemplateGaugeChartVisualPtrOutput() TemplateGaugeChartVisualPtrOutput {
	return o
}

func (o TemplateGaugeChartVisualPtrOutput) ToTemplateGaugeChartVisualPtrOutputWithContext(ctx context.Context) TemplateGaugeChartVisualPtrOutput {
	return o
}

func (o TemplateGaugeChartVisualPtrOutput) Elem() TemplateGaugeChartVisualOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) TemplateGaugeChartVisual {
		if v != nil {
			return *v
		}
		var ret TemplateGaugeChartVisual
		return ret
	}).(TemplateGaugeChartVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateGaugeChartVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a `GaugeChartVisual` .
func (o TemplateGaugeChartVisualPtrOutput) ChartConfiguration() TemplateGaugeChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) *TemplateGaugeChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateGaugeChartConfigurationPtrOutput)
}

// The conditional formatting of a `GaugeChartVisual` .
func (o TemplateGaugeChartVisualPtrOutput) ConditionalFormatting() TemplateGaugeChartConditionalFormattingPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) *TemplateGaugeChartConditionalFormatting {
		if v == nil {
			return nil
		}
		return v.ConditionalFormatting
	}).(TemplateGaugeChartConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateGaugeChartVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateGaugeChartVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateGaugeChartVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateGaugeChartVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGaugeChartVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateGeospatialCoordinateBounds struct {
	// The longitude of the east bound of the geospatial coordinate bounds.
	East float64 `pulumi:"east"`
	// The latitude of the north bound of the geospatial coordinate bounds.
	North float64 `pulumi:"north"`
	// The latitude of the south bound of the geospatial coordinate bounds.
	South float64 `pulumi:"south"`
	// The longitude of the west bound of the geospatial coordinate bounds.
	West float64 `pulumi:"west"`
}

// TemplateGeospatialCoordinateBoundsInput is an input type that accepts TemplateGeospatialCoordinateBoundsArgs and TemplateGeospatialCoordinateBoundsOutput values.
// You can construct a concrete instance of `TemplateGeospatialCoordinateBoundsInput` via:
//
//	TemplateGeospatialCoordinateBoundsArgs{...}
type TemplateGeospatialCoordinateBoundsInput interface {
	pulumi.Input

	ToTemplateGeospatialCoordinateBoundsOutput() TemplateGeospatialCoordinateBoundsOutput
	ToTemplateGeospatialCoordinateBoundsOutputWithContext(context.Context) TemplateGeospatialCoordinateBoundsOutput
}

type TemplateGeospatialCoordinateBoundsArgs struct {
	// The longitude of the east bound of the geospatial coordinate bounds.
	East pulumi.Float64Input `pulumi:"east"`
	// The latitude of the north bound of the geospatial coordinate bounds.
	North pulumi.Float64Input `pulumi:"north"`
	// The latitude of the south bound of the geospatial coordinate bounds.
	South pulumi.Float64Input `pulumi:"south"`
	// The longitude of the west bound of the geospatial coordinate bounds.
	West pulumi.Float64Input `pulumi:"west"`
}

func (TemplateGeospatialCoordinateBoundsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialCoordinateBounds)(nil)).Elem()
}

func (i TemplateGeospatialCoordinateBoundsArgs) ToTemplateGeospatialCoordinateBoundsOutput() TemplateGeospatialCoordinateBoundsOutput {
	return i.ToTemplateGeospatialCoordinateBoundsOutputWithContext(context.Background())
}

func (i TemplateGeospatialCoordinateBoundsArgs) ToTemplateGeospatialCoordinateBoundsOutputWithContext(ctx context.Context) TemplateGeospatialCoordinateBoundsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialCoordinateBoundsOutput)
}

func (i TemplateGeospatialCoordinateBoundsArgs) ToTemplateGeospatialCoordinateBoundsPtrOutput() TemplateGeospatialCoordinateBoundsPtrOutput {
	return i.ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialCoordinateBoundsArgs) ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(ctx context.Context) TemplateGeospatialCoordinateBoundsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialCoordinateBoundsOutput).ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(ctx)
}

// TemplateGeospatialCoordinateBoundsPtrInput is an input type that accepts TemplateGeospatialCoordinateBoundsArgs, TemplateGeospatialCoordinateBoundsPtr and TemplateGeospatialCoordinateBoundsPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialCoordinateBoundsPtrInput` via:
//
//	        TemplateGeospatialCoordinateBoundsArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialCoordinateBoundsPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialCoordinateBoundsPtrOutput() TemplateGeospatialCoordinateBoundsPtrOutput
	ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(context.Context) TemplateGeospatialCoordinateBoundsPtrOutput
}

type templateGeospatialCoordinateBoundsPtrType TemplateGeospatialCoordinateBoundsArgs

func TemplateGeospatialCoordinateBoundsPtr(v *TemplateGeospatialCoordinateBoundsArgs) TemplateGeospatialCoordinateBoundsPtrInput {
	return (*templateGeospatialCoordinateBoundsPtrType)(v)
}

func (*templateGeospatialCoordinateBoundsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialCoordinateBounds)(nil)).Elem()
}

func (i *templateGeospatialCoordinateBoundsPtrType) ToTemplateGeospatialCoordinateBoundsPtrOutput() TemplateGeospatialCoordinateBoundsPtrOutput {
	return i.ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialCoordinateBoundsPtrType) ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(ctx context.Context) TemplateGeospatialCoordinateBoundsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialCoordinateBoundsPtrOutput)
}

type TemplateGeospatialCoordinateBoundsOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialCoordinateBoundsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialCoordinateBounds)(nil)).Elem()
}

func (o TemplateGeospatialCoordinateBoundsOutput) ToTemplateGeospatialCoordinateBoundsOutput() TemplateGeospatialCoordinateBoundsOutput {
	return o
}

func (o TemplateGeospatialCoordinateBoundsOutput) ToTemplateGeospatialCoordinateBoundsOutputWithContext(ctx context.Context) TemplateGeospatialCoordinateBoundsOutput {
	return o
}

func (o TemplateGeospatialCoordinateBoundsOutput) ToTemplateGeospatialCoordinateBoundsPtrOutput() TemplateGeospatialCoordinateBoundsPtrOutput {
	return o.ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialCoordinateBoundsOutput) ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(ctx context.Context) TemplateGeospatialCoordinateBoundsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialCoordinateBounds) *TemplateGeospatialCoordinateBounds {
		return &v
	}).(TemplateGeospatialCoordinateBoundsPtrOutput)
}

// The longitude of the east bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsOutput) East() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateGeospatialCoordinateBounds) float64 { return v.East }).(pulumi.Float64Output)
}

// The latitude of the north bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsOutput) North() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateGeospatialCoordinateBounds) float64 { return v.North }).(pulumi.Float64Output)
}

// The latitude of the south bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsOutput) South() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateGeospatialCoordinateBounds) float64 { return v.South }).(pulumi.Float64Output)
}

// The longitude of the west bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsOutput) West() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateGeospatialCoordinateBounds) float64 { return v.West }).(pulumi.Float64Output)
}

type TemplateGeospatialCoordinateBoundsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialCoordinateBoundsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialCoordinateBounds)(nil)).Elem()
}

func (o TemplateGeospatialCoordinateBoundsPtrOutput) ToTemplateGeospatialCoordinateBoundsPtrOutput() TemplateGeospatialCoordinateBoundsPtrOutput {
	return o
}

func (o TemplateGeospatialCoordinateBoundsPtrOutput) ToTemplateGeospatialCoordinateBoundsPtrOutputWithContext(ctx context.Context) TemplateGeospatialCoordinateBoundsPtrOutput {
	return o
}

func (o TemplateGeospatialCoordinateBoundsPtrOutput) Elem() TemplateGeospatialCoordinateBoundsOutput {
	return o.ApplyT(func(v *TemplateGeospatialCoordinateBounds) TemplateGeospatialCoordinateBounds {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialCoordinateBounds
		return ret
	}).(TemplateGeospatialCoordinateBoundsOutput)
}

// The longitude of the east bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsPtrOutput) East() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialCoordinateBounds) *float64 {
		if v == nil {
			return nil
		}
		return &v.East
	}).(pulumi.Float64PtrOutput)
}

// The latitude of the north bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsPtrOutput) North() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialCoordinateBounds) *float64 {
		if v == nil {
			return nil
		}
		return &v.North
	}).(pulumi.Float64PtrOutput)
}

// The latitude of the south bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsPtrOutput) South() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialCoordinateBounds) *float64 {
		if v == nil {
			return nil
		}
		return &v.South
	}).(pulumi.Float64PtrOutput)
}

// The longitude of the west bound of the geospatial coordinate bounds.
func (o TemplateGeospatialCoordinateBoundsPtrOutput) West() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialCoordinateBounds) *float64 {
		if v == nil {
			return nil
		}
		return &v.West
	}).(pulumi.Float64PtrOutput)
}

type TemplateGeospatialHeatmapColorScale struct {
	// The list of colors to be used in heatmap point style.
	Colors []TemplateGeospatialHeatmapDataColor `pulumi:"colors"`
}

// TemplateGeospatialHeatmapColorScaleInput is an input type that accepts TemplateGeospatialHeatmapColorScaleArgs and TemplateGeospatialHeatmapColorScaleOutput values.
// You can construct a concrete instance of `TemplateGeospatialHeatmapColorScaleInput` via:
//
//	TemplateGeospatialHeatmapColorScaleArgs{...}
type TemplateGeospatialHeatmapColorScaleInput interface {
	pulumi.Input

	ToTemplateGeospatialHeatmapColorScaleOutput() TemplateGeospatialHeatmapColorScaleOutput
	ToTemplateGeospatialHeatmapColorScaleOutputWithContext(context.Context) TemplateGeospatialHeatmapColorScaleOutput
}

type TemplateGeospatialHeatmapColorScaleArgs struct {
	// The list of colors to be used in heatmap point style.
	Colors TemplateGeospatialHeatmapDataColorArrayInput `pulumi:"colors"`
}

func (TemplateGeospatialHeatmapColorScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialHeatmapColorScale)(nil)).Elem()
}

func (i TemplateGeospatialHeatmapColorScaleArgs) ToTemplateGeospatialHeatmapColorScaleOutput() TemplateGeospatialHeatmapColorScaleOutput {
	return i.ToTemplateGeospatialHeatmapColorScaleOutputWithContext(context.Background())
}

func (i TemplateGeospatialHeatmapColorScaleArgs) ToTemplateGeospatialHeatmapColorScaleOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapColorScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapColorScaleOutput)
}

func (i TemplateGeospatialHeatmapColorScaleArgs) ToTemplateGeospatialHeatmapColorScalePtrOutput() TemplateGeospatialHeatmapColorScalePtrOutput {
	return i.ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialHeatmapColorScaleArgs) ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapColorScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapColorScaleOutput).ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(ctx)
}

// TemplateGeospatialHeatmapColorScalePtrInput is an input type that accepts TemplateGeospatialHeatmapColorScaleArgs, TemplateGeospatialHeatmapColorScalePtr and TemplateGeospatialHeatmapColorScalePtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialHeatmapColorScalePtrInput` via:
//
//	        TemplateGeospatialHeatmapColorScaleArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialHeatmapColorScalePtrInput interface {
	pulumi.Input

	ToTemplateGeospatialHeatmapColorScalePtrOutput() TemplateGeospatialHeatmapColorScalePtrOutput
	ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(context.Context) TemplateGeospatialHeatmapColorScalePtrOutput
}

type templateGeospatialHeatmapColorScalePtrType TemplateGeospatialHeatmapColorScaleArgs

func TemplateGeospatialHeatmapColorScalePtr(v *TemplateGeospatialHeatmapColorScaleArgs) TemplateGeospatialHeatmapColorScalePtrInput {
	return (*templateGeospatialHeatmapColorScalePtrType)(v)
}

func (*templateGeospatialHeatmapColorScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialHeatmapColorScale)(nil)).Elem()
}

func (i *templateGeospatialHeatmapColorScalePtrType) ToTemplateGeospatialHeatmapColorScalePtrOutput() TemplateGeospatialHeatmapColorScalePtrOutput {
	return i.ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(context.Background())
}

func (i *templateGeospatialHeatmapColorScalePtrType) ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapColorScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapColorScalePtrOutput)
}

type TemplateGeospatialHeatmapColorScaleOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialHeatmapColorScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialHeatmapColorScale)(nil)).Elem()
}

func (o TemplateGeospatialHeatmapColorScaleOutput) ToTemplateGeospatialHeatmapColorScaleOutput() TemplateGeospatialHeatmapColorScaleOutput {
	return o
}

func (o TemplateGeospatialHeatmapColorScaleOutput) ToTemplateGeospatialHeatmapColorScaleOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapColorScaleOutput {
	return o
}

func (o TemplateGeospatialHeatmapColorScaleOutput) ToTemplateGeospatialHeatmapColorScalePtrOutput() TemplateGeospatialHeatmapColorScalePtrOutput {
	return o.ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialHeatmapColorScaleOutput) ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapColorScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialHeatmapColorScale) *TemplateGeospatialHeatmapColorScale {
		return &v
	}).(TemplateGeospatialHeatmapColorScalePtrOutput)
}

// The list of colors to be used in heatmap point style.
func (o TemplateGeospatialHeatmapColorScaleOutput) Colors() TemplateGeospatialHeatmapDataColorArrayOutput {
	return o.ApplyT(func(v TemplateGeospatialHeatmapColorScale) []TemplateGeospatialHeatmapDataColor { return v.Colors }).(TemplateGeospatialHeatmapDataColorArrayOutput)
}

type TemplateGeospatialHeatmapColorScalePtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialHeatmapColorScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialHeatmapColorScale)(nil)).Elem()
}

func (o TemplateGeospatialHeatmapColorScalePtrOutput) ToTemplateGeospatialHeatmapColorScalePtrOutput() TemplateGeospatialHeatmapColorScalePtrOutput {
	return o
}

func (o TemplateGeospatialHeatmapColorScalePtrOutput) ToTemplateGeospatialHeatmapColorScalePtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapColorScalePtrOutput {
	return o
}

func (o TemplateGeospatialHeatmapColorScalePtrOutput) Elem() TemplateGeospatialHeatmapColorScaleOutput {
	return o.ApplyT(func(v *TemplateGeospatialHeatmapColorScale) TemplateGeospatialHeatmapColorScale {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialHeatmapColorScale
		return ret
	}).(TemplateGeospatialHeatmapColorScaleOutput)
}

// The list of colors to be used in heatmap point style.
func (o TemplateGeospatialHeatmapColorScalePtrOutput) Colors() TemplateGeospatialHeatmapDataColorArrayOutput {
	return o.ApplyT(func(v *TemplateGeospatialHeatmapColorScale) []TemplateGeospatialHeatmapDataColor {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateGeospatialHeatmapDataColorArrayOutput)
}

type TemplateGeospatialHeatmapConfiguration struct {
	// The color scale specification for the heatmap point style.
	HeatmapColor *TemplateGeospatialHeatmapColorScale `pulumi:"heatmapColor"`
}

// TemplateGeospatialHeatmapConfigurationInput is an input type that accepts TemplateGeospatialHeatmapConfigurationArgs and TemplateGeospatialHeatmapConfigurationOutput values.
// You can construct a concrete instance of `TemplateGeospatialHeatmapConfigurationInput` via:
//
//	TemplateGeospatialHeatmapConfigurationArgs{...}
type TemplateGeospatialHeatmapConfigurationInput interface {
	pulumi.Input

	ToTemplateGeospatialHeatmapConfigurationOutput() TemplateGeospatialHeatmapConfigurationOutput
	ToTemplateGeospatialHeatmapConfigurationOutputWithContext(context.Context) TemplateGeospatialHeatmapConfigurationOutput
}

type TemplateGeospatialHeatmapConfigurationArgs struct {
	// The color scale specification for the heatmap point style.
	HeatmapColor TemplateGeospatialHeatmapColorScalePtrInput `pulumi:"heatmapColor"`
}

func (TemplateGeospatialHeatmapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialHeatmapConfiguration)(nil)).Elem()
}

func (i TemplateGeospatialHeatmapConfigurationArgs) ToTemplateGeospatialHeatmapConfigurationOutput() TemplateGeospatialHeatmapConfigurationOutput {
	return i.ToTemplateGeospatialHeatmapConfigurationOutputWithContext(context.Background())
}

func (i TemplateGeospatialHeatmapConfigurationArgs) ToTemplateGeospatialHeatmapConfigurationOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapConfigurationOutput)
}

func (i TemplateGeospatialHeatmapConfigurationArgs) ToTemplateGeospatialHeatmapConfigurationPtrOutput() TemplateGeospatialHeatmapConfigurationPtrOutput {
	return i.ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialHeatmapConfigurationArgs) ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapConfigurationOutput).ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(ctx)
}

// TemplateGeospatialHeatmapConfigurationPtrInput is an input type that accepts TemplateGeospatialHeatmapConfigurationArgs, TemplateGeospatialHeatmapConfigurationPtr and TemplateGeospatialHeatmapConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialHeatmapConfigurationPtrInput` via:
//
//	        TemplateGeospatialHeatmapConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialHeatmapConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialHeatmapConfigurationPtrOutput() TemplateGeospatialHeatmapConfigurationPtrOutput
	ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(context.Context) TemplateGeospatialHeatmapConfigurationPtrOutput
}

type templateGeospatialHeatmapConfigurationPtrType TemplateGeospatialHeatmapConfigurationArgs

func TemplateGeospatialHeatmapConfigurationPtr(v *TemplateGeospatialHeatmapConfigurationArgs) TemplateGeospatialHeatmapConfigurationPtrInput {
	return (*templateGeospatialHeatmapConfigurationPtrType)(v)
}

func (*templateGeospatialHeatmapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialHeatmapConfiguration)(nil)).Elem()
}

func (i *templateGeospatialHeatmapConfigurationPtrType) ToTemplateGeospatialHeatmapConfigurationPtrOutput() TemplateGeospatialHeatmapConfigurationPtrOutput {
	return i.ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialHeatmapConfigurationPtrType) ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapConfigurationPtrOutput)
}

type TemplateGeospatialHeatmapConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialHeatmapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialHeatmapConfiguration)(nil)).Elem()
}

func (o TemplateGeospatialHeatmapConfigurationOutput) ToTemplateGeospatialHeatmapConfigurationOutput() TemplateGeospatialHeatmapConfigurationOutput {
	return o
}

func (o TemplateGeospatialHeatmapConfigurationOutput) ToTemplateGeospatialHeatmapConfigurationOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapConfigurationOutput {
	return o
}

func (o TemplateGeospatialHeatmapConfigurationOutput) ToTemplateGeospatialHeatmapConfigurationPtrOutput() TemplateGeospatialHeatmapConfigurationPtrOutput {
	return o.ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialHeatmapConfigurationOutput) ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialHeatmapConfiguration) *TemplateGeospatialHeatmapConfiguration {
		return &v
	}).(TemplateGeospatialHeatmapConfigurationPtrOutput)
}

// The color scale specification for the heatmap point style.
func (o TemplateGeospatialHeatmapConfigurationOutput) HeatmapColor() TemplateGeospatialHeatmapColorScalePtrOutput {
	return o.ApplyT(func(v TemplateGeospatialHeatmapConfiguration) *TemplateGeospatialHeatmapColorScale {
		return v.HeatmapColor
	}).(TemplateGeospatialHeatmapColorScalePtrOutput)
}

type TemplateGeospatialHeatmapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialHeatmapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialHeatmapConfiguration)(nil)).Elem()
}

func (o TemplateGeospatialHeatmapConfigurationPtrOutput) ToTemplateGeospatialHeatmapConfigurationPtrOutput() TemplateGeospatialHeatmapConfigurationPtrOutput {
	return o
}

func (o TemplateGeospatialHeatmapConfigurationPtrOutput) ToTemplateGeospatialHeatmapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapConfigurationPtrOutput {
	return o
}

func (o TemplateGeospatialHeatmapConfigurationPtrOutput) Elem() TemplateGeospatialHeatmapConfigurationOutput {
	return o.ApplyT(func(v *TemplateGeospatialHeatmapConfiguration) TemplateGeospatialHeatmapConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialHeatmapConfiguration
		return ret
	}).(TemplateGeospatialHeatmapConfigurationOutput)
}

// The color scale specification for the heatmap point style.
func (o TemplateGeospatialHeatmapConfigurationPtrOutput) HeatmapColor() TemplateGeospatialHeatmapColorScalePtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialHeatmapConfiguration) *TemplateGeospatialHeatmapColorScale {
		if v == nil {
			return nil
		}
		return v.HeatmapColor
	}).(TemplateGeospatialHeatmapColorScalePtrOutput)
}

type TemplateGeospatialHeatmapDataColor struct {
	// The hex color to be used in the heatmap point style.
	Color string `pulumi:"color"`
}

// TemplateGeospatialHeatmapDataColorInput is an input type that accepts TemplateGeospatialHeatmapDataColorArgs and TemplateGeospatialHeatmapDataColorOutput values.
// You can construct a concrete instance of `TemplateGeospatialHeatmapDataColorInput` via:
//
//	TemplateGeospatialHeatmapDataColorArgs{...}
type TemplateGeospatialHeatmapDataColorInput interface {
	pulumi.Input

	ToTemplateGeospatialHeatmapDataColorOutput() TemplateGeospatialHeatmapDataColorOutput
	ToTemplateGeospatialHeatmapDataColorOutputWithContext(context.Context) TemplateGeospatialHeatmapDataColorOutput
}

type TemplateGeospatialHeatmapDataColorArgs struct {
	// The hex color to be used in the heatmap point style.
	Color pulumi.StringInput `pulumi:"color"`
}

func (TemplateGeospatialHeatmapDataColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialHeatmapDataColor)(nil)).Elem()
}

func (i TemplateGeospatialHeatmapDataColorArgs) ToTemplateGeospatialHeatmapDataColorOutput() TemplateGeospatialHeatmapDataColorOutput {
	return i.ToTemplateGeospatialHeatmapDataColorOutputWithContext(context.Background())
}

func (i TemplateGeospatialHeatmapDataColorArgs) ToTemplateGeospatialHeatmapDataColorOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapDataColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapDataColorOutput)
}

// TemplateGeospatialHeatmapDataColorArrayInput is an input type that accepts TemplateGeospatialHeatmapDataColorArray and TemplateGeospatialHeatmapDataColorArrayOutput values.
// You can construct a concrete instance of `TemplateGeospatialHeatmapDataColorArrayInput` via:
//
//	TemplateGeospatialHeatmapDataColorArray{ TemplateGeospatialHeatmapDataColorArgs{...} }
type TemplateGeospatialHeatmapDataColorArrayInput interface {
	pulumi.Input

	ToTemplateGeospatialHeatmapDataColorArrayOutput() TemplateGeospatialHeatmapDataColorArrayOutput
	ToTemplateGeospatialHeatmapDataColorArrayOutputWithContext(context.Context) TemplateGeospatialHeatmapDataColorArrayOutput
}

type TemplateGeospatialHeatmapDataColorArray []TemplateGeospatialHeatmapDataColorInput

func (TemplateGeospatialHeatmapDataColorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGeospatialHeatmapDataColor)(nil)).Elem()
}

func (i TemplateGeospatialHeatmapDataColorArray) ToTemplateGeospatialHeatmapDataColorArrayOutput() TemplateGeospatialHeatmapDataColorArrayOutput {
	return i.ToTemplateGeospatialHeatmapDataColorArrayOutputWithContext(context.Background())
}

func (i TemplateGeospatialHeatmapDataColorArray) ToTemplateGeospatialHeatmapDataColorArrayOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapDataColorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialHeatmapDataColorArrayOutput)
}

type TemplateGeospatialHeatmapDataColorOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialHeatmapDataColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialHeatmapDataColor)(nil)).Elem()
}

func (o TemplateGeospatialHeatmapDataColorOutput) ToTemplateGeospatialHeatmapDataColorOutput() TemplateGeospatialHeatmapDataColorOutput {
	return o
}

func (o TemplateGeospatialHeatmapDataColorOutput) ToTemplateGeospatialHeatmapDataColorOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapDataColorOutput {
	return o
}

// The hex color to be used in the heatmap point style.
func (o TemplateGeospatialHeatmapDataColorOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateGeospatialHeatmapDataColor) string { return v.Color }).(pulumi.StringOutput)
}

type TemplateGeospatialHeatmapDataColorArrayOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialHeatmapDataColorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGeospatialHeatmapDataColor)(nil)).Elem()
}

func (o TemplateGeospatialHeatmapDataColorArrayOutput) ToTemplateGeospatialHeatmapDataColorArrayOutput() TemplateGeospatialHeatmapDataColorArrayOutput {
	return o
}

func (o TemplateGeospatialHeatmapDataColorArrayOutput) ToTemplateGeospatialHeatmapDataColorArrayOutputWithContext(ctx context.Context) TemplateGeospatialHeatmapDataColorArrayOutput {
	return o
}

func (o TemplateGeospatialHeatmapDataColorArrayOutput) Index(i pulumi.IntInput) TemplateGeospatialHeatmapDataColorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateGeospatialHeatmapDataColor {
		return vs[0].([]TemplateGeospatialHeatmapDataColor)[vs[1].(int)]
	}).(TemplateGeospatialHeatmapDataColorOutput)
}

type TemplateGeospatialMapAggregatedFieldWells struct {
	// The color field wells of a geospatial map.
	Colors []TemplateDimensionField `pulumi:"colors"`
	// The geospatial field wells of a geospatial map. Values are grouped by geospatial fields.
	Geospatial []TemplateDimensionField `pulumi:"geospatial"`
	// The size field wells of a geospatial map. Values are aggregated based on geospatial fields.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateGeospatialMapAggregatedFieldWellsInput is an input type that accepts TemplateGeospatialMapAggregatedFieldWellsArgs and TemplateGeospatialMapAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapAggregatedFieldWellsInput` via:
//
//	TemplateGeospatialMapAggregatedFieldWellsArgs{...}
type TemplateGeospatialMapAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateGeospatialMapAggregatedFieldWellsOutput() TemplateGeospatialMapAggregatedFieldWellsOutput
	ToTemplateGeospatialMapAggregatedFieldWellsOutputWithContext(context.Context) TemplateGeospatialMapAggregatedFieldWellsOutput
}

type TemplateGeospatialMapAggregatedFieldWellsArgs struct {
	// The color field wells of a geospatial map.
	Colors TemplateDimensionFieldArrayInput `pulumi:"colors"`
	// The geospatial field wells of a geospatial map. Values are grouped by geospatial fields.
	Geospatial TemplateDimensionFieldArrayInput `pulumi:"geospatial"`
	// The size field wells of a geospatial map. Values are aggregated based on geospatial fields.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateGeospatialMapAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateGeospatialMapAggregatedFieldWellsArgs) ToTemplateGeospatialMapAggregatedFieldWellsOutput() TemplateGeospatialMapAggregatedFieldWellsOutput {
	return i.ToTemplateGeospatialMapAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapAggregatedFieldWellsArgs) ToTemplateGeospatialMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateGeospatialMapAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapAggregatedFieldWellsOutput)
}

func (i TemplateGeospatialMapAggregatedFieldWellsArgs) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutput() TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapAggregatedFieldWellsArgs) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapAggregatedFieldWellsOutput).ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateGeospatialMapAggregatedFieldWellsPtrInput is an input type that accepts TemplateGeospatialMapAggregatedFieldWellsArgs, TemplateGeospatialMapAggregatedFieldWellsPtr and TemplateGeospatialMapAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapAggregatedFieldWellsPtrInput` via:
//
//	        TemplateGeospatialMapAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialMapAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialMapAggregatedFieldWellsPtrOutput() TemplateGeospatialMapAggregatedFieldWellsPtrOutput
	ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateGeospatialMapAggregatedFieldWellsPtrOutput
}

type templateGeospatialMapAggregatedFieldWellsPtrType TemplateGeospatialMapAggregatedFieldWellsArgs

func TemplateGeospatialMapAggregatedFieldWellsPtr(v *TemplateGeospatialMapAggregatedFieldWellsArgs) TemplateGeospatialMapAggregatedFieldWellsPtrInput {
	return (*templateGeospatialMapAggregatedFieldWellsPtrType)(v)
}

func (*templateGeospatialMapAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapAggregatedFieldWells)(nil)).Elem()
}

func (i *templateGeospatialMapAggregatedFieldWellsPtrType) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutput() TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialMapAggregatedFieldWellsPtrType) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapAggregatedFieldWellsPtrOutput)
}

type TemplateGeospatialMapAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateGeospatialMapAggregatedFieldWellsOutput) ToTemplateGeospatialMapAggregatedFieldWellsOutput() TemplateGeospatialMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateGeospatialMapAggregatedFieldWellsOutput) ToTemplateGeospatialMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateGeospatialMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateGeospatialMapAggregatedFieldWellsOutput) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutput() TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return o.ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialMapAggregatedFieldWellsOutput) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialMapAggregatedFieldWells) *TemplateGeospatialMapAggregatedFieldWells {
		return &v
	}).(TemplateGeospatialMapAggregatedFieldWellsPtrOutput)
}

// The color field wells of a geospatial map.
func (o TemplateGeospatialMapAggregatedFieldWellsOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateGeospatialMapAggregatedFieldWells) []TemplateDimensionField { return v.Colors }).(TemplateDimensionFieldArrayOutput)
}

// The geospatial field wells of a geospatial map. Values are grouped by geospatial fields.
func (o TemplateGeospatialMapAggregatedFieldWellsOutput) Geospatial() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateGeospatialMapAggregatedFieldWells) []TemplateDimensionField { return v.Geospatial }).(TemplateDimensionFieldArrayOutput)
}

// The size field wells of a geospatial map. Values are aggregated based on geospatial fields.
func (o TemplateGeospatialMapAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateGeospatialMapAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateGeospatialMapAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateGeospatialMapAggregatedFieldWellsPtrOutput) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutput() TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateGeospatialMapAggregatedFieldWellsPtrOutput) ToTemplateGeospatialMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateGeospatialMapAggregatedFieldWellsPtrOutput) Elem() TemplateGeospatialMapAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapAggregatedFieldWells) TemplateGeospatialMapAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialMapAggregatedFieldWells
		return ret
	}).(TemplateGeospatialMapAggregatedFieldWellsOutput)
}

// The color field wells of a geospatial map.
func (o TemplateGeospatialMapAggregatedFieldWellsPtrOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateDimensionFieldArrayOutput)
}

// The geospatial field wells of a geospatial map. Values are grouped by geospatial fields.
func (o TemplateGeospatialMapAggregatedFieldWellsPtrOutput) Geospatial() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Geospatial
	}).(TemplateDimensionFieldArrayOutput)
}

// The size field wells of a geospatial map. Values are aggregated based on geospatial fields.
func (o TemplateGeospatialMapAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateGeospatialMapConfiguration struct {
	// The field wells of the visual.
	FieldWells *TemplateGeospatialMapFieldWells `pulumi:"fieldWells"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The map style options of the geospatial map.
	MapStyleOptions *TemplateGeospatialMapStyleOptions `pulumi:"mapStyleOptions"`
	// The point style options of the geospatial map.
	PointStyleOptions *TemplateGeospatialPointStyleOptions `pulumi:"pointStyleOptions"`
	// The tooltip display setup of the visual.
	Tooltip       *TemplateTooltipOptions `pulumi:"tooltip"`
	VisualPalette *TemplateVisualPalette  `pulumi:"visualPalette"`
	// The window options of the geospatial map.
	WindowOptions *TemplateGeospatialWindowOptions `pulumi:"windowOptions"`
}

// TemplateGeospatialMapConfigurationInput is an input type that accepts TemplateGeospatialMapConfigurationArgs and TemplateGeospatialMapConfigurationOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapConfigurationInput` via:
//
//	TemplateGeospatialMapConfigurationArgs{...}
type TemplateGeospatialMapConfigurationInput interface {
	pulumi.Input

	ToTemplateGeospatialMapConfigurationOutput() TemplateGeospatialMapConfigurationOutput
	ToTemplateGeospatialMapConfigurationOutputWithContext(context.Context) TemplateGeospatialMapConfigurationOutput
}

type TemplateGeospatialMapConfigurationArgs struct {
	// The field wells of the visual.
	FieldWells TemplateGeospatialMapFieldWellsPtrInput `pulumi:"fieldWells"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The map style options of the geospatial map.
	MapStyleOptions TemplateGeospatialMapStyleOptionsPtrInput `pulumi:"mapStyleOptions"`
	// The point style options of the geospatial map.
	PointStyleOptions TemplateGeospatialPointStyleOptionsPtrInput `pulumi:"pointStyleOptions"`
	// The tooltip display setup of the visual.
	Tooltip       TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	VisualPalette TemplateVisualPalettePtrInput  `pulumi:"visualPalette"`
	// The window options of the geospatial map.
	WindowOptions TemplateGeospatialWindowOptionsPtrInput `pulumi:"windowOptions"`
}

func (TemplateGeospatialMapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapConfiguration)(nil)).Elem()
}

func (i TemplateGeospatialMapConfigurationArgs) ToTemplateGeospatialMapConfigurationOutput() TemplateGeospatialMapConfigurationOutput {
	return i.ToTemplateGeospatialMapConfigurationOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapConfigurationArgs) ToTemplateGeospatialMapConfigurationOutputWithContext(ctx context.Context) TemplateGeospatialMapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapConfigurationOutput)
}

func (i TemplateGeospatialMapConfigurationArgs) ToTemplateGeospatialMapConfigurationPtrOutput() TemplateGeospatialMapConfigurationPtrOutput {
	return i.ToTemplateGeospatialMapConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapConfigurationArgs) ToTemplateGeospatialMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapConfigurationOutput).ToTemplateGeospatialMapConfigurationPtrOutputWithContext(ctx)
}

// TemplateGeospatialMapConfigurationPtrInput is an input type that accepts TemplateGeospatialMapConfigurationArgs, TemplateGeospatialMapConfigurationPtr and TemplateGeospatialMapConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapConfigurationPtrInput` via:
//
//	        TemplateGeospatialMapConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialMapConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialMapConfigurationPtrOutput() TemplateGeospatialMapConfigurationPtrOutput
	ToTemplateGeospatialMapConfigurationPtrOutputWithContext(context.Context) TemplateGeospatialMapConfigurationPtrOutput
}

type templateGeospatialMapConfigurationPtrType TemplateGeospatialMapConfigurationArgs

func TemplateGeospatialMapConfigurationPtr(v *TemplateGeospatialMapConfigurationArgs) TemplateGeospatialMapConfigurationPtrInput {
	return (*templateGeospatialMapConfigurationPtrType)(v)
}

func (*templateGeospatialMapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapConfiguration)(nil)).Elem()
}

func (i *templateGeospatialMapConfigurationPtrType) ToTemplateGeospatialMapConfigurationPtrOutput() TemplateGeospatialMapConfigurationPtrOutput {
	return i.ToTemplateGeospatialMapConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialMapConfigurationPtrType) ToTemplateGeospatialMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapConfigurationPtrOutput)
}

type TemplateGeospatialMapConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapConfiguration)(nil)).Elem()
}

func (o TemplateGeospatialMapConfigurationOutput) ToTemplateGeospatialMapConfigurationOutput() TemplateGeospatialMapConfigurationOutput {
	return o
}

func (o TemplateGeospatialMapConfigurationOutput) ToTemplateGeospatialMapConfigurationOutputWithContext(ctx context.Context) TemplateGeospatialMapConfigurationOutput {
	return o
}

func (o TemplateGeospatialMapConfigurationOutput) ToTemplateGeospatialMapConfigurationPtrOutput() TemplateGeospatialMapConfigurationPtrOutput {
	return o.ToTemplateGeospatialMapConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialMapConfigurationOutput) ToTemplateGeospatialMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialMapConfiguration) *TemplateGeospatialMapConfiguration {
		return &v
	}).(TemplateGeospatialMapConfigurationPtrOutput)
}

// The field wells of the visual.
func (o TemplateGeospatialMapConfigurationOutput) FieldWells() TemplateGeospatialMapFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapConfiguration) *TemplateGeospatialMapFieldWells { return v.FieldWells }).(TemplateGeospatialMapFieldWellsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateGeospatialMapConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The map style options of the geospatial map.
func (o TemplateGeospatialMapConfigurationOutput) MapStyleOptions() TemplateGeospatialMapStyleOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapConfiguration) *TemplateGeospatialMapStyleOptions {
		return v.MapStyleOptions
	}).(TemplateGeospatialMapStyleOptionsPtrOutput)
}

// The point style options of the geospatial map.
func (o TemplateGeospatialMapConfigurationOutput) PointStyleOptions() TemplateGeospatialPointStyleOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapConfiguration) *TemplateGeospatialPointStyleOptions {
		return v.PointStyleOptions
	}).(TemplateGeospatialPointStyleOptionsPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateGeospatialMapConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

func (o TemplateGeospatialMapConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

// The window options of the geospatial map.
func (o TemplateGeospatialMapConfigurationOutput) WindowOptions() TemplateGeospatialWindowOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapConfiguration) *TemplateGeospatialWindowOptions { return v.WindowOptions }).(TemplateGeospatialWindowOptionsPtrOutput)
}

type TemplateGeospatialMapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapConfiguration)(nil)).Elem()
}

func (o TemplateGeospatialMapConfigurationPtrOutput) ToTemplateGeospatialMapConfigurationPtrOutput() TemplateGeospatialMapConfigurationPtrOutput {
	return o
}

func (o TemplateGeospatialMapConfigurationPtrOutput) ToTemplateGeospatialMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapConfigurationPtrOutput {
	return o
}

func (o TemplateGeospatialMapConfigurationPtrOutput) Elem() TemplateGeospatialMapConfigurationOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) TemplateGeospatialMapConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialMapConfiguration
		return ret
	}).(TemplateGeospatialMapConfigurationOutput)
}

// The field wells of the visual.
func (o TemplateGeospatialMapConfigurationPtrOutput) FieldWells() TemplateGeospatialMapFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) *TemplateGeospatialMapFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateGeospatialMapFieldWellsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateGeospatialMapConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The map style options of the geospatial map.
func (o TemplateGeospatialMapConfigurationPtrOutput) MapStyleOptions() TemplateGeospatialMapStyleOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) *TemplateGeospatialMapStyleOptions {
		if v == nil {
			return nil
		}
		return v.MapStyleOptions
	}).(TemplateGeospatialMapStyleOptionsPtrOutput)
}

// The point style options of the geospatial map.
func (o TemplateGeospatialMapConfigurationPtrOutput) PointStyleOptions() TemplateGeospatialPointStyleOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) *TemplateGeospatialPointStyleOptions {
		if v == nil {
			return nil
		}
		return v.PointStyleOptions
	}).(TemplateGeospatialPointStyleOptionsPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateGeospatialMapConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

func (o TemplateGeospatialMapConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

// The window options of the geospatial map.
func (o TemplateGeospatialMapConfigurationPtrOutput) WindowOptions() TemplateGeospatialWindowOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapConfiguration) *TemplateGeospatialWindowOptions {
		if v == nil {
			return nil
		}
		return v.WindowOptions
	}).(TemplateGeospatialWindowOptionsPtrOutput)
}

type TemplateGeospatialMapFieldWells struct {
	// The aggregated field well for a geospatial map.
	GeospatialMapAggregatedFieldWells *TemplateGeospatialMapAggregatedFieldWells `pulumi:"geospatialMapAggregatedFieldWells"`
}

// TemplateGeospatialMapFieldWellsInput is an input type that accepts TemplateGeospatialMapFieldWellsArgs and TemplateGeospatialMapFieldWellsOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapFieldWellsInput` via:
//
//	TemplateGeospatialMapFieldWellsArgs{...}
type TemplateGeospatialMapFieldWellsInput interface {
	pulumi.Input

	ToTemplateGeospatialMapFieldWellsOutput() TemplateGeospatialMapFieldWellsOutput
	ToTemplateGeospatialMapFieldWellsOutputWithContext(context.Context) TemplateGeospatialMapFieldWellsOutput
}

type TemplateGeospatialMapFieldWellsArgs struct {
	// The aggregated field well for a geospatial map.
	GeospatialMapAggregatedFieldWells TemplateGeospatialMapAggregatedFieldWellsPtrInput `pulumi:"geospatialMapAggregatedFieldWells"`
}

func (TemplateGeospatialMapFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapFieldWells)(nil)).Elem()
}

func (i TemplateGeospatialMapFieldWellsArgs) ToTemplateGeospatialMapFieldWellsOutput() TemplateGeospatialMapFieldWellsOutput {
	return i.ToTemplateGeospatialMapFieldWellsOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapFieldWellsArgs) ToTemplateGeospatialMapFieldWellsOutputWithContext(ctx context.Context) TemplateGeospatialMapFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapFieldWellsOutput)
}

func (i TemplateGeospatialMapFieldWellsArgs) ToTemplateGeospatialMapFieldWellsPtrOutput() TemplateGeospatialMapFieldWellsPtrOutput {
	return i.ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapFieldWellsArgs) ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapFieldWellsOutput).ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(ctx)
}

// TemplateGeospatialMapFieldWellsPtrInput is an input type that accepts TemplateGeospatialMapFieldWellsArgs, TemplateGeospatialMapFieldWellsPtr and TemplateGeospatialMapFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapFieldWellsPtrInput` via:
//
//	        TemplateGeospatialMapFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialMapFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialMapFieldWellsPtrOutput() TemplateGeospatialMapFieldWellsPtrOutput
	ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(context.Context) TemplateGeospatialMapFieldWellsPtrOutput
}

type templateGeospatialMapFieldWellsPtrType TemplateGeospatialMapFieldWellsArgs

func TemplateGeospatialMapFieldWellsPtr(v *TemplateGeospatialMapFieldWellsArgs) TemplateGeospatialMapFieldWellsPtrInput {
	return (*templateGeospatialMapFieldWellsPtrType)(v)
}

func (*templateGeospatialMapFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapFieldWells)(nil)).Elem()
}

func (i *templateGeospatialMapFieldWellsPtrType) ToTemplateGeospatialMapFieldWellsPtrOutput() TemplateGeospatialMapFieldWellsPtrOutput {
	return i.ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialMapFieldWellsPtrType) ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapFieldWellsPtrOutput)
}

type TemplateGeospatialMapFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapFieldWells)(nil)).Elem()
}

func (o TemplateGeospatialMapFieldWellsOutput) ToTemplateGeospatialMapFieldWellsOutput() TemplateGeospatialMapFieldWellsOutput {
	return o
}

func (o TemplateGeospatialMapFieldWellsOutput) ToTemplateGeospatialMapFieldWellsOutputWithContext(ctx context.Context) TemplateGeospatialMapFieldWellsOutput {
	return o
}

func (o TemplateGeospatialMapFieldWellsOutput) ToTemplateGeospatialMapFieldWellsPtrOutput() TemplateGeospatialMapFieldWellsPtrOutput {
	return o.ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialMapFieldWellsOutput) ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialMapFieldWells) *TemplateGeospatialMapFieldWells {
		return &v
	}).(TemplateGeospatialMapFieldWellsPtrOutput)
}

// The aggregated field well for a geospatial map.
func (o TemplateGeospatialMapFieldWellsOutput) GeospatialMapAggregatedFieldWells() TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapFieldWells) *TemplateGeospatialMapAggregatedFieldWells {
		return v.GeospatialMapAggregatedFieldWells
	}).(TemplateGeospatialMapAggregatedFieldWellsPtrOutput)
}

type TemplateGeospatialMapFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapFieldWells)(nil)).Elem()
}

func (o TemplateGeospatialMapFieldWellsPtrOutput) ToTemplateGeospatialMapFieldWellsPtrOutput() TemplateGeospatialMapFieldWellsPtrOutput {
	return o
}

func (o TemplateGeospatialMapFieldWellsPtrOutput) ToTemplateGeospatialMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapFieldWellsPtrOutput {
	return o
}

func (o TemplateGeospatialMapFieldWellsPtrOutput) Elem() TemplateGeospatialMapFieldWellsOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapFieldWells) TemplateGeospatialMapFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialMapFieldWells
		return ret
	}).(TemplateGeospatialMapFieldWellsOutput)
}

// The aggregated field well for a geospatial map.
func (o TemplateGeospatialMapFieldWellsPtrOutput) GeospatialMapAggregatedFieldWells() TemplateGeospatialMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapFieldWells) *TemplateGeospatialMapAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.GeospatialMapAggregatedFieldWells
	}).(TemplateGeospatialMapAggregatedFieldWellsPtrOutput)
}

type TemplateGeospatialMapStyleOptions struct {
	// The base map style of the geospatial map.
	BaseMapStyle *TemplateBaseMapStyleType `pulumi:"baseMapStyle"`
}

// TemplateGeospatialMapStyleOptionsInput is an input type that accepts TemplateGeospatialMapStyleOptionsArgs and TemplateGeospatialMapStyleOptionsOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapStyleOptionsInput` via:
//
//	TemplateGeospatialMapStyleOptionsArgs{...}
type TemplateGeospatialMapStyleOptionsInput interface {
	pulumi.Input

	ToTemplateGeospatialMapStyleOptionsOutput() TemplateGeospatialMapStyleOptionsOutput
	ToTemplateGeospatialMapStyleOptionsOutputWithContext(context.Context) TemplateGeospatialMapStyleOptionsOutput
}

type TemplateGeospatialMapStyleOptionsArgs struct {
	// The base map style of the geospatial map.
	BaseMapStyle TemplateBaseMapStyleTypePtrInput `pulumi:"baseMapStyle"`
}

func (TemplateGeospatialMapStyleOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapStyleOptions)(nil)).Elem()
}

func (i TemplateGeospatialMapStyleOptionsArgs) ToTemplateGeospatialMapStyleOptionsOutput() TemplateGeospatialMapStyleOptionsOutput {
	return i.ToTemplateGeospatialMapStyleOptionsOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapStyleOptionsArgs) ToTemplateGeospatialMapStyleOptionsOutputWithContext(ctx context.Context) TemplateGeospatialMapStyleOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapStyleOptionsOutput)
}

func (i TemplateGeospatialMapStyleOptionsArgs) ToTemplateGeospatialMapStyleOptionsPtrOutput() TemplateGeospatialMapStyleOptionsPtrOutput {
	return i.ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapStyleOptionsArgs) ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapStyleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapStyleOptionsOutput).ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(ctx)
}

// TemplateGeospatialMapStyleOptionsPtrInput is an input type that accepts TemplateGeospatialMapStyleOptionsArgs, TemplateGeospatialMapStyleOptionsPtr and TemplateGeospatialMapStyleOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapStyleOptionsPtrInput` via:
//
//	        TemplateGeospatialMapStyleOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialMapStyleOptionsPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialMapStyleOptionsPtrOutput() TemplateGeospatialMapStyleOptionsPtrOutput
	ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(context.Context) TemplateGeospatialMapStyleOptionsPtrOutput
}

type templateGeospatialMapStyleOptionsPtrType TemplateGeospatialMapStyleOptionsArgs

func TemplateGeospatialMapStyleOptionsPtr(v *TemplateGeospatialMapStyleOptionsArgs) TemplateGeospatialMapStyleOptionsPtrInput {
	return (*templateGeospatialMapStyleOptionsPtrType)(v)
}

func (*templateGeospatialMapStyleOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapStyleOptions)(nil)).Elem()
}

func (i *templateGeospatialMapStyleOptionsPtrType) ToTemplateGeospatialMapStyleOptionsPtrOutput() TemplateGeospatialMapStyleOptionsPtrOutput {
	return i.ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialMapStyleOptionsPtrType) ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapStyleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapStyleOptionsPtrOutput)
}

type TemplateGeospatialMapStyleOptionsOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapStyleOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapStyleOptions)(nil)).Elem()
}

func (o TemplateGeospatialMapStyleOptionsOutput) ToTemplateGeospatialMapStyleOptionsOutput() TemplateGeospatialMapStyleOptionsOutput {
	return o
}

func (o TemplateGeospatialMapStyleOptionsOutput) ToTemplateGeospatialMapStyleOptionsOutputWithContext(ctx context.Context) TemplateGeospatialMapStyleOptionsOutput {
	return o
}

func (o TemplateGeospatialMapStyleOptionsOutput) ToTemplateGeospatialMapStyleOptionsPtrOutput() TemplateGeospatialMapStyleOptionsPtrOutput {
	return o.ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialMapStyleOptionsOutput) ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapStyleOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialMapStyleOptions) *TemplateGeospatialMapStyleOptions {
		return &v
	}).(TemplateGeospatialMapStyleOptionsPtrOutput)
}

// The base map style of the geospatial map.
func (o TemplateGeospatialMapStyleOptionsOutput) BaseMapStyle() TemplateBaseMapStyleTypePtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapStyleOptions) *TemplateBaseMapStyleType { return v.BaseMapStyle }).(TemplateBaseMapStyleTypePtrOutput)
}

type TemplateGeospatialMapStyleOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapStyleOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapStyleOptions)(nil)).Elem()
}

func (o TemplateGeospatialMapStyleOptionsPtrOutput) ToTemplateGeospatialMapStyleOptionsPtrOutput() TemplateGeospatialMapStyleOptionsPtrOutput {
	return o
}

func (o TemplateGeospatialMapStyleOptionsPtrOutput) ToTemplateGeospatialMapStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapStyleOptionsPtrOutput {
	return o
}

func (o TemplateGeospatialMapStyleOptionsPtrOutput) Elem() TemplateGeospatialMapStyleOptionsOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapStyleOptions) TemplateGeospatialMapStyleOptions {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialMapStyleOptions
		return ret
	}).(TemplateGeospatialMapStyleOptionsOutput)
}

// The base map style of the geospatial map.
func (o TemplateGeospatialMapStyleOptionsPtrOutput) BaseMapStyle() TemplateBaseMapStyleTypePtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapStyleOptions) *TemplateBaseMapStyleType {
		if v == nil {
			return nil
		}
		return v.BaseMapStyle
	}).(TemplateBaseMapStyleTypePtrOutput)
}

type TemplateGeospatialMapVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateGeospatialMapConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateGeospatialMapVisualInput is an input type that accepts TemplateGeospatialMapVisualArgs and TemplateGeospatialMapVisualOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapVisualInput` via:
//
//	TemplateGeospatialMapVisualArgs{...}
type TemplateGeospatialMapVisualInput interface {
	pulumi.Input

	ToTemplateGeospatialMapVisualOutput() TemplateGeospatialMapVisualOutput
	ToTemplateGeospatialMapVisualOutputWithContext(context.Context) TemplateGeospatialMapVisualOutput
}

type TemplateGeospatialMapVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateGeospatialMapConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateGeospatialMapVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapVisual)(nil)).Elem()
}

func (i TemplateGeospatialMapVisualArgs) ToTemplateGeospatialMapVisualOutput() TemplateGeospatialMapVisualOutput {
	return i.ToTemplateGeospatialMapVisualOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapVisualArgs) ToTemplateGeospatialMapVisualOutputWithContext(ctx context.Context) TemplateGeospatialMapVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapVisualOutput)
}

func (i TemplateGeospatialMapVisualArgs) ToTemplateGeospatialMapVisualPtrOutput() TemplateGeospatialMapVisualPtrOutput {
	return i.ToTemplateGeospatialMapVisualPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialMapVisualArgs) ToTemplateGeospatialMapVisualPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapVisualOutput).ToTemplateGeospatialMapVisualPtrOutputWithContext(ctx)
}

// TemplateGeospatialMapVisualPtrInput is an input type that accepts TemplateGeospatialMapVisualArgs, TemplateGeospatialMapVisualPtr and TemplateGeospatialMapVisualPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialMapVisualPtrInput` via:
//
//	        TemplateGeospatialMapVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialMapVisualPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialMapVisualPtrOutput() TemplateGeospatialMapVisualPtrOutput
	ToTemplateGeospatialMapVisualPtrOutputWithContext(context.Context) TemplateGeospatialMapVisualPtrOutput
}

type templateGeospatialMapVisualPtrType TemplateGeospatialMapVisualArgs

func TemplateGeospatialMapVisualPtr(v *TemplateGeospatialMapVisualArgs) TemplateGeospatialMapVisualPtrInput {
	return (*templateGeospatialMapVisualPtrType)(v)
}

func (*templateGeospatialMapVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapVisual)(nil)).Elem()
}

func (i *templateGeospatialMapVisualPtrType) ToTemplateGeospatialMapVisualPtrOutput() TemplateGeospatialMapVisualPtrOutput {
	return i.ToTemplateGeospatialMapVisualPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialMapVisualPtrType) ToTemplateGeospatialMapVisualPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialMapVisualPtrOutput)
}

type TemplateGeospatialMapVisualOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialMapVisual)(nil)).Elem()
}

func (o TemplateGeospatialMapVisualOutput) ToTemplateGeospatialMapVisualOutput() TemplateGeospatialMapVisualOutput {
	return o
}

func (o TemplateGeospatialMapVisualOutput) ToTemplateGeospatialMapVisualOutputWithContext(ctx context.Context) TemplateGeospatialMapVisualOutput {
	return o
}

func (o TemplateGeospatialMapVisualOutput) ToTemplateGeospatialMapVisualPtrOutput() TemplateGeospatialMapVisualPtrOutput {
	return o.ToTemplateGeospatialMapVisualPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialMapVisualOutput) ToTemplateGeospatialMapVisualPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialMapVisual) *TemplateGeospatialMapVisual {
		return &v
	}).(TemplateGeospatialMapVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateGeospatialMapVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateGeospatialMapVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateGeospatialMapVisualOutput) ChartConfiguration() TemplateGeospatialMapConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapVisual) *TemplateGeospatialMapConfiguration { return v.ChartConfiguration }).(TemplateGeospatialMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateGeospatialMapVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateGeospatialMapVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateGeospatialMapVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateGeospatialMapVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateGeospatialMapVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialMapVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateGeospatialMapVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateGeospatialMapVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateGeospatialMapVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialMapVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialMapVisual)(nil)).Elem()
}

func (o TemplateGeospatialMapVisualPtrOutput) ToTemplateGeospatialMapVisualPtrOutput() TemplateGeospatialMapVisualPtrOutput {
	return o
}

func (o TemplateGeospatialMapVisualPtrOutput) ToTemplateGeospatialMapVisualPtrOutputWithContext(ctx context.Context) TemplateGeospatialMapVisualPtrOutput {
	return o
}

func (o TemplateGeospatialMapVisualPtrOutput) Elem() TemplateGeospatialMapVisualOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) TemplateGeospatialMapVisual {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialMapVisual
		return ret
	}).(TemplateGeospatialMapVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateGeospatialMapVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateGeospatialMapVisualPtrOutput) ChartConfiguration() TemplateGeospatialMapConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) *TemplateGeospatialMapConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateGeospatialMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateGeospatialMapVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateGeospatialMapVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateGeospatialMapVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateGeospatialMapVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateGeospatialMapVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialMapVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateGeospatialPointStyleOptions struct {
	// The cluster marker configuration of the geospatial point style.
	ClusterMarkerConfiguration *TemplateClusterMarkerConfiguration `pulumi:"clusterMarkerConfiguration"`
	// The heatmap configuration of the geospatial point style.
	HeatmapConfiguration *TemplateGeospatialHeatmapConfiguration `pulumi:"heatmapConfiguration"`
	// The selected point styles (point, cluster) of the geospatial map.
	SelectedPointStyle *TemplateGeospatialSelectedPointStyle `pulumi:"selectedPointStyle"`
}

// TemplateGeospatialPointStyleOptionsInput is an input type that accepts TemplateGeospatialPointStyleOptionsArgs and TemplateGeospatialPointStyleOptionsOutput values.
// You can construct a concrete instance of `TemplateGeospatialPointStyleOptionsInput` via:
//
//	TemplateGeospatialPointStyleOptionsArgs{...}
type TemplateGeospatialPointStyleOptionsInput interface {
	pulumi.Input

	ToTemplateGeospatialPointStyleOptionsOutput() TemplateGeospatialPointStyleOptionsOutput
	ToTemplateGeospatialPointStyleOptionsOutputWithContext(context.Context) TemplateGeospatialPointStyleOptionsOutput
}

type TemplateGeospatialPointStyleOptionsArgs struct {
	// The cluster marker configuration of the geospatial point style.
	ClusterMarkerConfiguration TemplateClusterMarkerConfigurationPtrInput `pulumi:"clusterMarkerConfiguration"`
	// The heatmap configuration of the geospatial point style.
	HeatmapConfiguration TemplateGeospatialHeatmapConfigurationPtrInput `pulumi:"heatmapConfiguration"`
	// The selected point styles (point, cluster) of the geospatial map.
	SelectedPointStyle TemplateGeospatialSelectedPointStylePtrInput `pulumi:"selectedPointStyle"`
}

func (TemplateGeospatialPointStyleOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialPointStyleOptions)(nil)).Elem()
}

func (i TemplateGeospatialPointStyleOptionsArgs) ToTemplateGeospatialPointStyleOptionsOutput() TemplateGeospatialPointStyleOptionsOutput {
	return i.ToTemplateGeospatialPointStyleOptionsOutputWithContext(context.Background())
}

func (i TemplateGeospatialPointStyleOptionsArgs) ToTemplateGeospatialPointStyleOptionsOutputWithContext(ctx context.Context) TemplateGeospatialPointStyleOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialPointStyleOptionsOutput)
}

func (i TemplateGeospatialPointStyleOptionsArgs) ToTemplateGeospatialPointStyleOptionsPtrOutput() TemplateGeospatialPointStyleOptionsPtrOutput {
	return i.ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialPointStyleOptionsArgs) ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialPointStyleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialPointStyleOptionsOutput).ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(ctx)
}

// TemplateGeospatialPointStyleOptionsPtrInput is an input type that accepts TemplateGeospatialPointStyleOptionsArgs, TemplateGeospatialPointStyleOptionsPtr and TemplateGeospatialPointStyleOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialPointStyleOptionsPtrInput` via:
//
//	        TemplateGeospatialPointStyleOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialPointStyleOptionsPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialPointStyleOptionsPtrOutput() TemplateGeospatialPointStyleOptionsPtrOutput
	ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(context.Context) TemplateGeospatialPointStyleOptionsPtrOutput
}

type templateGeospatialPointStyleOptionsPtrType TemplateGeospatialPointStyleOptionsArgs

func TemplateGeospatialPointStyleOptionsPtr(v *TemplateGeospatialPointStyleOptionsArgs) TemplateGeospatialPointStyleOptionsPtrInput {
	return (*templateGeospatialPointStyleOptionsPtrType)(v)
}

func (*templateGeospatialPointStyleOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialPointStyleOptions)(nil)).Elem()
}

func (i *templateGeospatialPointStyleOptionsPtrType) ToTemplateGeospatialPointStyleOptionsPtrOutput() TemplateGeospatialPointStyleOptionsPtrOutput {
	return i.ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialPointStyleOptionsPtrType) ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialPointStyleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialPointStyleOptionsPtrOutput)
}

type TemplateGeospatialPointStyleOptionsOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialPointStyleOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialPointStyleOptions)(nil)).Elem()
}

func (o TemplateGeospatialPointStyleOptionsOutput) ToTemplateGeospatialPointStyleOptionsOutput() TemplateGeospatialPointStyleOptionsOutput {
	return o
}

func (o TemplateGeospatialPointStyleOptionsOutput) ToTemplateGeospatialPointStyleOptionsOutputWithContext(ctx context.Context) TemplateGeospatialPointStyleOptionsOutput {
	return o
}

func (o TemplateGeospatialPointStyleOptionsOutput) ToTemplateGeospatialPointStyleOptionsPtrOutput() TemplateGeospatialPointStyleOptionsPtrOutput {
	return o.ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialPointStyleOptionsOutput) ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialPointStyleOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialPointStyleOptions) *TemplateGeospatialPointStyleOptions {
		return &v
	}).(TemplateGeospatialPointStyleOptionsPtrOutput)
}

// The cluster marker configuration of the geospatial point style.
func (o TemplateGeospatialPointStyleOptionsOutput) ClusterMarkerConfiguration() TemplateClusterMarkerConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialPointStyleOptions) *TemplateClusterMarkerConfiguration {
		return v.ClusterMarkerConfiguration
	}).(TemplateClusterMarkerConfigurationPtrOutput)
}

// The heatmap configuration of the geospatial point style.
func (o TemplateGeospatialPointStyleOptionsOutput) HeatmapConfiguration() TemplateGeospatialHeatmapConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialPointStyleOptions) *TemplateGeospatialHeatmapConfiguration {
		return v.HeatmapConfiguration
	}).(TemplateGeospatialHeatmapConfigurationPtrOutput)
}

// The selected point styles (point, cluster) of the geospatial map.
func (o TemplateGeospatialPointStyleOptionsOutput) SelectedPointStyle() TemplateGeospatialSelectedPointStylePtrOutput {
	return o.ApplyT(func(v TemplateGeospatialPointStyleOptions) *TemplateGeospatialSelectedPointStyle {
		return v.SelectedPointStyle
	}).(TemplateGeospatialSelectedPointStylePtrOutput)
}

type TemplateGeospatialPointStyleOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialPointStyleOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialPointStyleOptions)(nil)).Elem()
}

func (o TemplateGeospatialPointStyleOptionsPtrOutput) ToTemplateGeospatialPointStyleOptionsPtrOutput() TemplateGeospatialPointStyleOptionsPtrOutput {
	return o
}

func (o TemplateGeospatialPointStyleOptionsPtrOutput) ToTemplateGeospatialPointStyleOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialPointStyleOptionsPtrOutput {
	return o
}

func (o TemplateGeospatialPointStyleOptionsPtrOutput) Elem() TemplateGeospatialPointStyleOptionsOutput {
	return o.ApplyT(func(v *TemplateGeospatialPointStyleOptions) TemplateGeospatialPointStyleOptions {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialPointStyleOptions
		return ret
	}).(TemplateGeospatialPointStyleOptionsOutput)
}

// The cluster marker configuration of the geospatial point style.
func (o TemplateGeospatialPointStyleOptionsPtrOutput) ClusterMarkerConfiguration() TemplateClusterMarkerConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialPointStyleOptions) *TemplateClusterMarkerConfiguration {
		if v == nil {
			return nil
		}
		return v.ClusterMarkerConfiguration
	}).(TemplateClusterMarkerConfigurationPtrOutput)
}

// The heatmap configuration of the geospatial point style.
func (o TemplateGeospatialPointStyleOptionsPtrOutput) HeatmapConfiguration() TemplateGeospatialHeatmapConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialPointStyleOptions) *TemplateGeospatialHeatmapConfiguration {
		if v == nil {
			return nil
		}
		return v.HeatmapConfiguration
	}).(TemplateGeospatialHeatmapConfigurationPtrOutput)
}

// The selected point styles (point, cluster) of the geospatial map.
func (o TemplateGeospatialPointStyleOptionsPtrOutput) SelectedPointStyle() TemplateGeospatialSelectedPointStylePtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialPointStyleOptions) *TemplateGeospatialSelectedPointStyle {
		if v == nil {
			return nil
		}
		return v.SelectedPointStyle
	}).(TemplateGeospatialSelectedPointStylePtrOutput)
}

type TemplateGeospatialWindowOptions struct {
	// The bounds options (north, south, west, east) of the geospatial window options.
	Bounds *TemplateGeospatialCoordinateBounds `pulumi:"bounds"`
	// The map zoom modes (manual, auto) of the geospatial window options.
	MapZoomMode *TemplateMapZoomMode `pulumi:"mapZoomMode"`
}

// TemplateGeospatialWindowOptionsInput is an input type that accepts TemplateGeospatialWindowOptionsArgs and TemplateGeospatialWindowOptionsOutput values.
// You can construct a concrete instance of `TemplateGeospatialWindowOptionsInput` via:
//
//	TemplateGeospatialWindowOptionsArgs{...}
type TemplateGeospatialWindowOptionsInput interface {
	pulumi.Input

	ToTemplateGeospatialWindowOptionsOutput() TemplateGeospatialWindowOptionsOutput
	ToTemplateGeospatialWindowOptionsOutputWithContext(context.Context) TemplateGeospatialWindowOptionsOutput
}

type TemplateGeospatialWindowOptionsArgs struct {
	// The bounds options (north, south, west, east) of the geospatial window options.
	Bounds TemplateGeospatialCoordinateBoundsPtrInput `pulumi:"bounds"`
	// The map zoom modes (manual, auto) of the geospatial window options.
	MapZoomMode TemplateMapZoomModePtrInput `pulumi:"mapZoomMode"`
}

func (TemplateGeospatialWindowOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialWindowOptions)(nil)).Elem()
}

func (i TemplateGeospatialWindowOptionsArgs) ToTemplateGeospatialWindowOptionsOutput() TemplateGeospatialWindowOptionsOutput {
	return i.ToTemplateGeospatialWindowOptionsOutputWithContext(context.Background())
}

func (i TemplateGeospatialWindowOptionsArgs) ToTemplateGeospatialWindowOptionsOutputWithContext(ctx context.Context) TemplateGeospatialWindowOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialWindowOptionsOutput)
}

func (i TemplateGeospatialWindowOptionsArgs) ToTemplateGeospatialWindowOptionsPtrOutput() TemplateGeospatialWindowOptionsPtrOutput {
	return i.ToTemplateGeospatialWindowOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateGeospatialWindowOptionsArgs) ToTemplateGeospatialWindowOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialWindowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialWindowOptionsOutput).ToTemplateGeospatialWindowOptionsPtrOutputWithContext(ctx)
}

// TemplateGeospatialWindowOptionsPtrInput is an input type that accepts TemplateGeospatialWindowOptionsArgs, TemplateGeospatialWindowOptionsPtr and TemplateGeospatialWindowOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateGeospatialWindowOptionsPtrInput` via:
//
//	        TemplateGeospatialWindowOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateGeospatialWindowOptionsPtrInput interface {
	pulumi.Input

	ToTemplateGeospatialWindowOptionsPtrOutput() TemplateGeospatialWindowOptionsPtrOutput
	ToTemplateGeospatialWindowOptionsPtrOutputWithContext(context.Context) TemplateGeospatialWindowOptionsPtrOutput
}

type templateGeospatialWindowOptionsPtrType TemplateGeospatialWindowOptionsArgs

func TemplateGeospatialWindowOptionsPtr(v *TemplateGeospatialWindowOptionsArgs) TemplateGeospatialWindowOptionsPtrInput {
	return (*templateGeospatialWindowOptionsPtrType)(v)
}

func (*templateGeospatialWindowOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialWindowOptions)(nil)).Elem()
}

func (i *templateGeospatialWindowOptionsPtrType) ToTemplateGeospatialWindowOptionsPtrOutput() TemplateGeospatialWindowOptionsPtrOutput {
	return i.ToTemplateGeospatialWindowOptionsPtrOutputWithContext(context.Background())
}

func (i *templateGeospatialWindowOptionsPtrType) ToTemplateGeospatialWindowOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialWindowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGeospatialWindowOptionsPtrOutput)
}

type TemplateGeospatialWindowOptionsOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialWindowOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGeospatialWindowOptions)(nil)).Elem()
}

func (o TemplateGeospatialWindowOptionsOutput) ToTemplateGeospatialWindowOptionsOutput() TemplateGeospatialWindowOptionsOutput {
	return o
}

func (o TemplateGeospatialWindowOptionsOutput) ToTemplateGeospatialWindowOptionsOutputWithContext(ctx context.Context) TemplateGeospatialWindowOptionsOutput {
	return o
}

func (o TemplateGeospatialWindowOptionsOutput) ToTemplateGeospatialWindowOptionsPtrOutput() TemplateGeospatialWindowOptionsPtrOutput {
	return o.ToTemplateGeospatialWindowOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateGeospatialWindowOptionsOutput) ToTemplateGeospatialWindowOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialWindowOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGeospatialWindowOptions) *TemplateGeospatialWindowOptions {
		return &v
	}).(TemplateGeospatialWindowOptionsPtrOutput)
}

// The bounds options (north, south, west, east) of the geospatial window options.
func (o TemplateGeospatialWindowOptionsOutput) Bounds() TemplateGeospatialCoordinateBoundsPtrOutput {
	return o.ApplyT(func(v TemplateGeospatialWindowOptions) *TemplateGeospatialCoordinateBounds { return v.Bounds }).(TemplateGeospatialCoordinateBoundsPtrOutput)
}

// The map zoom modes (manual, auto) of the geospatial window options.
func (o TemplateGeospatialWindowOptionsOutput) MapZoomMode() TemplateMapZoomModePtrOutput {
	return o.ApplyT(func(v TemplateGeospatialWindowOptions) *TemplateMapZoomMode { return v.MapZoomMode }).(TemplateMapZoomModePtrOutput)
}

type TemplateGeospatialWindowOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGeospatialWindowOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGeospatialWindowOptions)(nil)).Elem()
}

func (o TemplateGeospatialWindowOptionsPtrOutput) ToTemplateGeospatialWindowOptionsPtrOutput() TemplateGeospatialWindowOptionsPtrOutput {
	return o
}

func (o TemplateGeospatialWindowOptionsPtrOutput) ToTemplateGeospatialWindowOptionsPtrOutputWithContext(ctx context.Context) TemplateGeospatialWindowOptionsPtrOutput {
	return o
}

func (o TemplateGeospatialWindowOptionsPtrOutput) Elem() TemplateGeospatialWindowOptionsOutput {
	return o.ApplyT(func(v *TemplateGeospatialWindowOptions) TemplateGeospatialWindowOptions {
		if v != nil {
			return *v
		}
		var ret TemplateGeospatialWindowOptions
		return ret
	}).(TemplateGeospatialWindowOptionsOutput)
}

// The bounds options (north, south, west, east) of the geospatial window options.
func (o TemplateGeospatialWindowOptionsPtrOutput) Bounds() TemplateGeospatialCoordinateBoundsPtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialWindowOptions) *TemplateGeospatialCoordinateBounds {
		if v == nil {
			return nil
		}
		return v.Bounds
	}).(TemplateGeospatialCoordinateBoundsPtrOutput)
}

// The map zoom modes (manual, auto) of the geospatial window options.
func (o TemplateGeospatialWindowOptionsPtrOutput) MapZoomMode() TemplateMapZoomModePtrOutput {
	return o.ApplyT(func(v *TemplateGeospatialWindowOptions) *TemplateMapZoomMode {
		if v == nil {
			return nil
		}
		return v.MapZoomMode
	}).(TemplateMapZoomModePtrOutput)
}

type TemplateGlobalTableBorderOptions struct {
	// Determines the options for side specific border.
	SideSpecificBorder *TemplateTableSideBorderOptions `pulumi:"sideSpecificBorder"`
	// Determines the options for uniform border.
	UniformBorder *TemplateTableBorderOptions `pulumi:"uniformBorder"`
}

// TemplateGlobalTableBorderOptionsInput is an input type that accepts TemplateGlobalTableBorderOptionsArgs and TemplateGlobalTableBorderOptionsOutput values.
// You can construct a concrete instance of `TemplateGlobalTableBorderOptionsInput` via:
//
//	TemplateGlobalTableBorderOptionsArgs{...}
type TemplateGlobalTableBorderOptionsInput interface {
	pulumi.Input

	ToTemplateGlobalTableBorderOptionsOutput() TemplateGlobalTableBorderOptionsOutput
	ToTemplateGlobalTableBorderOptionsOutputWithContext(context.Context) TemplateGlobalTableBorderOptionsOutput
}

type TemplateGlobalTableBorderOptionsArgs struct {
	// Determines the options for side specific border.
	SideSpecificBorder TemplateTableSideBorderOptionsPtrInput `pulumi:"sideSpecificBorder"`
	// Determines the options for uniform border.
	UniformBorder TemplateTableBorderOptionsPtrInput `pulumi:"uniformBorder"`
}

func (TemplateGlobalTableBorderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGlobalTableBorderOptions)(nil)).Elem()
}

func (i TemplateGlobalTableBorderOptionsArgs) ToTemplateGlobalTableBorderOptionsOutput() TemplateGlobalTableBorderOptionsOutput {
	return i.ToTemplateGlobalTableBorderOptionsOutputWithContext(context.Background())
}

func (i TemplateGlobalTableBorderOptionsArgs) ToTemplateGlobalTableBorderOptionsOutputWithContext(ctx context.Context) TemplateGlobalTableBorderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGlobalTableBorderOptionsOutput)
}

func (i TemplateGlobalTableBorderOptionsArgs) ToTemplateGlobalTableBorderOptionsPtrOutput() TemplateGlobalTableBorderOptionsPtrOutput {
	return i.ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateGlobalTableBorderOptionsArgs) ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateGlobalTableBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGlobalTableBorderOptionsOutput).ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(ctx)
}

// TemplateGlobalTableBorderOptionsPtrInput is an input type that accepts TemplateGlobalTableBorderOptionsArgs, TemplateGlobalTableBorderOptionsPtr and TemplateGlobalTableBorderOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateGlobalTableBorderOptionsPtrInput` via:
//
//	        TemplateGlobalTableBorderOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateGlobalTableBorderOptionsPtrInput interface {
	pulumi.Input

	ToTemplateGlobalTableBorderOptionsPtrOutput() TemplateGlobalTableBorderOptionsPtrOutput
	ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(context.Context) TemplateGlobalTableBorderOptionsPtrOutput
}

type templateGlobalTableBorderOptionsPtrType TemplateGlobalTableBorderOptionsArgs

func TemplateGlobalTableBorderOptionsPtr(v *TemplateGlobalTableBorderOptionsArgs) TemplateGlobalTableBorderOptionsPtrInput {
	return (*templateGlobalTableBorderOptionsPtrType)(v)
}

func (*templateGlobalTableBorderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGlobalTableBorderOptions)(nil)).Elem()
}

func (i *templateGlobalTableBorderOptionsPtrType) ToTemplateGlobalTableBorderOptionsPtrOutput() TemplateGlobalTableBorderOptionsPtrOutput {
	return i.ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (i *templateGlobalTableBorderOptionsPtrType) ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateGlobalTableBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGlobalTableBorderOptionsPtrOutput)
}

type TemplateGlobalTableBorderOptionsOutput struct{ *pulumi.OutputState }

func (TemplateGlobalTableBorderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGlobalTableBorderOptions)(nil)).Elem()
}

func (o TemplateGlobalTableBorderOptionsOutput) ToTemplateGlobalTableBorderOptionsOutput() TemplateGlobalTableBorderOptionsOutput {
	return o
}

func (o TemplateGlobalTableBorderOptionsOutput) ToTemplateGlobalTableBorderOptionsOutputWithContext(ctx context.Context) TemplateGlobalTableBorderOptionsOutput {
	return o
}

func (o TemplateGlobalTableBorderOptionsOutput) ToTemplateGlobalTableBorderOptionsPtrOutput() TemplateGlobalTableBorderOptionsPtrOutput {
	return o.ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateGlobalTableBorderOptionsOutput) ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateGlobalTableBorderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGlobalTableBorderOptions) *TemplateGlobalTableBorderOptions {
		return &v
	}).(TemplateGlobalTableBorderOptionsPtrOutput)
}

// Determines the options for side specific border.
func (o TemplateGlobalTableBorderOptionsOutput) SideSpecificBorder() TemplateTableSideBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGlobalTableBorderOptions) *TemplateTableSideBorderOptions { return v.SideSpecificBorder }).(TemplateTableSideBorderOptionsPtrOutput)
}

// Determines the options for uniform border.
func (o TemplateGlobalTableBorderOptionsOutput) UniformBorder() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGlobalTableBorderOptions) *TemplateTableBorderOptions { return v.UniformBorder }).(TemplateTableBorderOptionsPtrOutput)
}

type TemplateGlobalTableBorderOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGlobalTableBorderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGlobalTableBorderOptions)(nil)).Elem()
}

func (o TemplateGlobalTableBorderOptionsPtrOutput) ToTemplateGlobalTableBorderOptionsPtrOutput() TemplateGlobalTableBorderOptionsPtrOutput {
	return o
}

func (o TemplateGlobalTableBorderOptionsPtrOutput) ToTemplateGlobalTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateGlobalTableBorderOptionsPtrOutput {
	return o
}

func (o TemplateGlobalTableBorderOptionsPtrOutput) Elem() TemplateGlobalTableBorderOptionsOutput {
	return o.ApplyT(func(v *TemplateGlobalTableBorderOptions) TemplateGlobalTableBorderOptions {
		if v != nil {
			return *v
		}
		var ret TemplateGlobalTableBorderOptions
		return ret
	}).(TemplateGlobalTableBorderOptionsOutput)
}

// Determines the options for side specific border.
func (o TemplateGlobalTableBorderOptionsPtrOutput) SideSpecificBorder() TemplateTableSideBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGlobalTableBorderOptions) *TemplateTableSideBorderOptions {
		if v == nil {
			return nil
		}
		return v.SideSpecificBorder
	}).(TemplateTableSideBorderOptionsPtrOutput)
}

// Determines the options for uniform border.
func (o TemplateGlobalTableBorderOptionsPtrOutput) UniformBorder() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGlobalTableBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.UniformBorder
	}).(TemplateTableBorderOptionsPtrOutput)
}

type TemplateGradientColor struct {
	// The list of gradient color stops.
	Stops []TemplateGradientStop `pulumi:"stops"`
}

// TemplateGradientColorInput is an input type that accepts TemplateGradientColorArgs and TemplateGradientColorOutput values.
// You can construct a concrete instance of `TemplateGradientColorInput` via:
//
//	TemplateGradientColorArgs{...}
type TemplateGradientColorInput interface {
	pulumi.Input

	ToTemplateGradientColorOutput() TemplateGradientColorOutput
	ToTemplateGradientColorOutputWithContext(context.Context) TemplateGradientColorOutput
}

type TemplateGradientColorArgs struct {
	// The list of gradient color stops.
	Stops TemplateGradientStopArrayInput `pulumi:"stops"`
}

func (TemplateGradientColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGradientColor)(nil)).Elem()
}

func (i TemplateGradientColorArgs) ToTemplateGradientColorOutput() TemplateGradientColorOutput {
	return i.ToTemplateGradientColorOutputWithContext(context.Background())
}

func (i TemplateGradientColorArgs) ToTemplateGradientColorOutputWithContext(ctx context.Context) TemplateGradientColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGradientColorOutput)
}

func (i TemplateGradientColorArgs) ToTemplateGradientColorPtrOutput() TemplateGradientColorPtrOutput {
	return i.ToTemplateGradientColorPtrOutputWithContext(context.Background())
}

func (i TemplateGradientColorArgs) ToTemplateGradientColorPtrOutputWithContext(ctx context.Context) TemplateGradientColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGradientColorOutput).ToTemplateGradientColorPtrOutputWithContext(ctx)
}

// TemplateGradientColorPtrInput is an input type that accepts TemplateGradientColorArgs, TemplateGradientColorPtr and TemplateGradientColorPtrOutput values.
// You can construct a concrete instance of `TemplateGradientColorPtrInput` via:
//
//	        TemplateGradientColorArgs{...}
//
//	or:
//
//	        nil
type TemplateGradientColorPtrInput interface {
	pulumi.Input

	ToTemplateGradientColorPtrOutput() TemplateGradientColorPtrOutput
	ToTemplateGradientColorPtrOutputWithContext(context.Context) TemplateGradientColorPtrOutput
}

type templateGradientColorPtrType TemplateGradientColorArgs

func TemplateGradientColorPtr(v *TemplateGradientColorArgs) TemplateGradientColorPtrInput {
	return (*templateGradientColorPtrType)(v)
}

func (*templateGradientColorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGradientColor)(nil)).Elem()
}

func (i *templateGradientColorPtrType) ToTemplateGradientColorPtrOutput() TemplateGradientColorPtrOutput {
	return i.ToTemplateGradientColorPtrOutputWithContext(context.Background())
}

func (i *templateGradientColorPtrType) ToTemplateGradientColorPtrOutputWithContext(ctx context.Context) TemplateGradientColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGradientColorPtrOutput)
}

type TemplateGradientColorOutput struct{ *pulumi.OutputState }

func (TemplateGradientColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGradientColor)(nil)).Elem()
}

func (o TemplateGradientColorOutput) ToTemplateGradientColorOutput() TemplateGradientColorOutput {
	return o
}

func (o TemplateGradientColorOutput) ToTemplateGradientColorOutputWithContext(ctx context.Context) TemplateGradientColorOutput {
	return o
}

func (o TemplateGradientColorOutput) ToTemplateGradientColorPtrOutput() TemplateGradientColorPtrOutput {
	return o.ToTemplateGradientColorPtrOutputWithContext(context.Background())
}

func (o TemplateGradientColorOutput) ToTemplateGradientColorPtrOutputWithContext(ctx context.Context) TemplateGradientColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGradientColor) *TemplateGradientColor {
		return &v
	}).(TemplateGradientColorPtrOutput)
}

// The list of gradient color stops.
func (o TemplateGradientColorOutput) Stops() TemplateGradientStopArrayOutput {
	return o.ApplyT(func(v TemplateGradientColor) []TemplateGradientStop { return v.Stops }).(TemplateGradientStopArrayOutput)
}

type TemplateGradientColorPtrOutput struct{ *pulumi.OutputState }

func (TemplateGradientColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGradientColor)(nil)).Elem()
}

func (o TemplateGradientColorPtrOutput) ToTemplateGradientColorPtrOutput() TemplateGradientColorPtrOutput {
	return o
}

func (o TemplateGradientColorPtrOutput) ToTemplateGradientColorPtrOutputWithContext(ctx context.Context) TemplateGradientColorPtrOutput {
	return o
}

func (o TemplateGradientColorPtrOutput) Elem() TemplateGradientColorOutput {
	return o.ApplyT(func(v *TemplateGradientColor) TemplateGradientColor {
		if v != nil {
			return *v
		}
		var ret TemplateGradientColor
		return ret
	}).(TemplateGradientColorOutput)
}

// The list of gradient color stops.
func (o TemplateGradientColorPtrOutput) Stops() TemplateGradientStopArrayOutput {
	return o.ApplyT(func(v *TemplateGradientColor) []TemplateGradientStop {
		if v == nil {
			return nil
		}
		return v.Stops
	}).(TemplateGradientStopArrayOutput)
}

type TemplateGradientStop struct {
	// Determines the color.
	Color *string `pulumi:"color"`
	// Determines the data value.
	DataValue *float64 `pulumi:"dataValue"`
	// Determines gradient offset value.
	GradientOffset float64 `pulumi:"gradientOffset"`
}

// TemplateGradientStopInput is an input type that accepts TemplateGradientStopArgs and TemplateGradientStopOutput values.
// You can construct a concrete instance of `TemplateGradientStopInput` via:
//
//	TemplateGradientStopArgs{...}
type TemplateGradientStopInput interface {
	pulumi.Input

	ToTemplateGradientStopOutput() TemplateGradientStopOutput
	ToTemplateGradientStopOutputWithContext(context.Context) TemplateGradientStopOutput
}

type TemplateGradientStopArgs struct {
	// Determines the color.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Determines the data value.
	DataValue pulumi.Float64PtrInput `pulumi:"dataValue"`
	// Determines gradient offset value.
	GradientOffset pulumi.Float64Input `pulumi:"gradientOffset"`
}

func (TemplateGradientStopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGradientStop)(nil)).Elem()
}

func (i TemplateGradientStopArgs) ToTemplateGradientStopOutput() TemplateGradientStopOutput {
	return i.ToTemplateGradientStopOutputWithContext(context.Background())
}

func (i TemplateGradientStopArgs) ToTemplateGradientStopOutputWithContext(ctx context.Context) TemplateGradientStopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGradientStopOutput)
}

// TemplateGradientStopArrayInput is an input type that accepts TemplateGradientStopArray and TemplateGradientStopArrayOutput values.
// You can construct a concrete instance of `TemplateGradientStopArrayInput` via:
//
//	TemplateGradientStopArray{ TemplateGradientStopArgs{...} }
type TemplateGradientStopArrayInput interface {
	pulumi.Input

	ToTemplateGradientStopArrayOutput() TemplateGradientStopArrayOutput
	ToTemplateGradientStopArrayOutputWithContext(context.Context) TemplateGradientStopArrayOutput
}

type TemplateGradientStopArray []TemplateGradientStopInput

func (TemplateGradientStopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGradientStop)(nil)).Elem()
}

func (i TemplateGradientStopArray) ToTemplateGradientStopArrayOutput() TemplateGradientStopArrayOutput {
	return i.ToTemplateGradientStopArrayOutputWithContext(context.Background())
}

func (i TemplateGradientStopArray) ToTemplateGradientStopArrayOutputWithContext(ctx context.Context) TemplateGradientStopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGradientStopArrayOutput)
}

type TemplateGradientStopOutput struct{ *pulumi.OutputState }

func (TemplateGradientStopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGradientStop)(nil)).Elem()
}

func (o TemplateGradientStopOutput) ToTemplateGradientStopOutput() TemplateGradientStopOutput {
	return o
}

func (o TemplateGradientStopOutput) ToTemplateGradientStopOutputWithContext(ctx context.Context) TemplateGradientStopOutput {
	return o
}

// Determines the color.
func (o TemplateGradientStopOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateGradientStop) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Determines the data value.
func (o TemplateGradientStopOutput) DataValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateGradientStop) *float64 { return v.DataValue }).(pulumi.Float64PtrOutput)
}

// Determines gradient offset value.
func (o TemplateGradientStopOutput) GradientOffset() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateGradientStop) float64 { return v.GradientOffset }).(pulumi.Float64Output)
}

type TemplateGradientStopArrayOutput struct{ *pulumi.OutputState }

func (TemplateGradientStopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGradientStop)(nil)).Elem()
}

func (o TemplateGradientStopArrayOutput) ToTemplateGradientStopArrayOutput() TemplateGradientStopArrayOutput {
	return o
}

func (o TemplateGradientStopArrayOutput) ToTemplateGradientStopArrayOutputWithContext(ctx context.Context) TemplateGradientStopArrayOutput {
	return o
}

func (o TemplateGradientStopArrayOutput) Index(i pulumi.IntInput) TemplateGradientStopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateGradientStop {
		return vs[0].([]TemplateGradientStop)[vs[1].(int)]
	}).(TemplateGradientStopOutput)
}

type TemplateGridLayoutCanvasSizeOptions struct {
	// The options that determine the sizing of the canvas used in a grid layout.
	ScreenCanvasSizeOptions *TemplateGridLayoutScreenCanvasSizeOptions `pulumi:"screenCanvasSizeOptions"`
}

// TemplateGridLayoutCanvasSizeOptionsInput is an input type that accepts TemplateGridLayoutCanvasSizeOptionsArgs and TemplateGridLayoutCanvasSizeOptionsOutput values.
// You can construct a concrete instance of `TemplateGridLayoutCanvasSizeOptionsInput` via:
//
//	TemplateGridLayoutCanvasSizeOptionsArgs{...}
type TemplateGridLayoutCanvasSizeOptionsInput interface {
	pulumi.Input

	ToTemplateGridLayoutCanvasSizeOptionsOutput() TemplateGridLayoutCanvasSizeOptionsOutput
	ToTemplateGridLayoutCanvasSizeOptionsOutputWithContext(context.Context) TemplateGridLayoutCanvasSizeOptionsOutput
}

type TemplateGridLayoutCanvasSizeOptionsArgs struct {
	// The options that determine the sizing of the canvas used in a grid layout.
	ScreenCanvasSizeOptions TemplateGridLayoutScreenCanvasSizeOptionsPtrInput `pulumi:"screenCanvasSizeOptions"`
}

func (TemplateGridLayoutCanvasSizeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutCanvasSizeOptions)(nil)).Elem()
}

func (i TemplateGridLayoutCanvasSizeOptionsArgs) ToTemplateGridLayoutCanvasSizeOptionsOutput() TemplateGridLayoutCanvasSizeOptionsOutput {
	return i.ToTemplateGridLayoutCanvasSizeOptionsOutputWithContext(context.Background())
}

func (i TemplateGridLayoutCanvasSizeOptionsArgs) ToTemplateGridLayoutCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateGridLayoutCanvasSizeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutCanvasSizeOptionsOutput)
}

func (i TemplateGridLayoutCanvasSizeOptionsArgs) ToTemplateGridLayoutCanvasSizeOptionsPtrOutput() TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return i.ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateGridLayoutCanvasSizeOptionsArgs) ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutCanvasSizeOptionsOutput).ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(ctx)
}

// TemplateGridLayoutCanvasSizeOptionsPtrInput is an input type that accepts TemplateGridLayoutCanvasSizeOptionsArgs, TemplateGridLayoutCanvasSizeOptionsPtr and TemplateGridLayoutCanvasSizeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateGridLayoutCanvasSizeOptionsPtrInput` via:
//
//	        TemplateGridLayoutCanvasSizeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateGridLayoutCanvasSizeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateGridLayoutCanvasSizeOptionsPtrOutput() TemplateGridLayoutCanvasSizeOptionsPtrOutput
	ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(context.Context) TemplateGridLayoutCanvasSizeOptionsPtrOutput
}

type templateGridLayoutCanvasSizeOptionsPtrType TemplateGridLayoutCanvasSizeOptionsArgs

func TemplateGridLayoutCanvasSizeOptionsPtr(v *TemplateGridLayoutCanvasSizeOptionsArgs) TemplateGridLayoutCanvasSizeOptionsPtrInput {
	return (*templateGridLayoutCanvasSizeOptionsPtrType)(v)
}

func (*templateGridLayoutCanvasSizeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGridLayoutCanvasSizeOptions)(nil)).Elem()
}

func (i *templateGridLayoutCanvasSizeOptionsPtrType) ToTemplateGridLayoutCanvasSizeOptionsPtrOutput() TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return i.ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateGridLayoutCanvasSizeOptionsPtrType) ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutCanvasSizeOptionsPtrOutput)
}

type TemplateGridLayoutCanvasSizeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutCanvasSizeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateGridLayoutCanvasSizeOptionsOutput) ToTemplateGridLayoutCanvasSizeOptionsOutput() TemplateGridLayoutCanvasSizeOptionsOutput {
	return o
}

func (o TemplateGridLayoutCanvasSizeOptionsOutput) ToTemplateGridLayoutCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateGridLayoutCanvasSizeOptionsOutput {
	return o
}

func (o TemplateGridLayoutCanvasSizeOptionsOutput) ToTemplateGridLayoutCanvasSizeOptionsPtrOutput() TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return o.ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateGridLayoutCanvasSizeOptionsOutput) ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGridLayoutCanvasSizeOptions) *TemplateGridLayoutCanvasSizeOptions {
		return &v
	}).(TemplateGridLayoutCanvasSizeOptionsPtrOutput)
}

// The options that determine the sizing of the canvas used in a grid layout.
func (o TemplateGridLayoutCanvasSizeOptionsOutput) ScreenCanvasSizeOptions() TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGridLayoutCanvasSizeOptions) *TemplateGridLayoutScreenCanvasSizeOptions {
		return v.ScreenCanvasSizeOptions
	}).(TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput)
}

type TemplateGridLayoutCanvasSizeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutCanvasSizeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGridLayoutCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateGridLayoutCanvasSizeOptionsPtrOutput) ToTemplateGridLayoutCanvasSizeOptionsPtrOutput() TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateGridLayoutCanvasSizeOptionsPtrOutput) ToTemplateGridLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateGridLayoutCanvasSizeOptionsPtrOutput) Elem() TemplateGridLayoutCanvasSizeOptionsOutput {
	return o.ApplyT(func(v *TemplateGridLayoutCanvasSizeOptions) TemplateGridLayoutCanvasSizeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateGridLayoutCanvasSizeOptions
		return ret
	}).(TemplateGridLayoutCanvasSizeOptionsOutput)
}

// The options that determine the sizing of the canvas used in a grid layout.
func (o TemplateGridLayoutCanvasSizeOptionsPtrOutput) ScreenCanvasSizeOptions() TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGridLayoutCanvasSizeOptions) *TemplateGridLayoutScreenCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return v.ScreenCanvasSizeOptions
	}).(TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput)
}

type TemplateGridLayoutConfiguration struct {
	CanvasSizeOptions *TemplateGridLayoutCanvasSizeOptions `pulumi:"canvasSizeOptions"`
	// The elements that are included in a grid layout.
	Elements []TemplateGridLayoutElement `pulumi:"elements"`
}

// TemplateGridLayoutConfigurationInput is an input type that accepts TemplateGridLayoutConfigurationArgs and TemplateGridLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateGridLayoutConfigurationInput` via:
//
//	TemplateGridLayoutConfigurationArgs{...}
type TemplateGridLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateGridLayoutConfigurationOutput() TemplateGridLayoutConfigurationOutput
	ToTemplateGridLayoutConfigurationOutputWithContext(context.Context) TemplateGridLayoutConfigurationOutput
}

type TemplateGridLayoutConfigurationArgs struct {
	CanvasSizeOptions TemplateGridLayoutCanvasSizeOptionsPtrInput `pulumi:"canvasSizeOptions"`
	// The elements that are included in a grid layout.
	Elements TemplateGridLayoutElementArrayInput `pulumi:"elements"`
}

func (TemplateGridLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutConfiguration)(nil)).Elem()
}

func (i TemplateGridLayoutConfigurationArgs) ToTemplateGridLayoutConfigurationOutput() TemplateGridLayoutConfigurationOutput {
	return i.ToTemplateGridLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateGridLayoutConfigurationArgs) ToTemplateGridLayoutConfigurationOutputWithContext(ctx context.Context) TemplateGridLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutConfigurationOutput)
}

func (i TemplateGridLayoutConfigurationArgs) ToTemplateGridLayoutConfigurationPtrOutput() TemplateGridLayoutConfigurationPtrOutput {
	return i.ToTemplateGridLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateGridLayoutConfigurationArgs) ToTemplateGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateGridLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutConfigurationOutput).ToTemplateGridLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateGridLayoutConfigurationPtrInput is an input type that accepts TemplateGridLayoutConfigurationArgs, TemplateGridLayoutConfigurationPtr and TemplateGridLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateGridLayoutConfigurationPtrInput` via:
//
//	        TemplateGridLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateGridLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateGridLayoutConfigurationPtrOutput() TemplateGridLayoutConfigurationPtrOutput
	ToTemplateGridLayoutConfigurationPtrOutputWithContext(context.Context) TemplateGridLayoutConfigurationPtrOutput
}

type templateGridLayoutConfigurationPtrType TemplateGridLayoutConfigurationArgs

func TemplateGridLayoutConfigurationPtr(v *TemplateGridLayoutConfigurationArgs) TemplateGridLayoutConfigurationPtrInput {
	return (*templateGridLayoutConfigurationPtrType)(v)
}

func (*templateGridLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGridLayoutConfiguration)(nil)).Elem()
}

func (i *templateGridLayoutConfigurationPtrType) ToTemplateGridLayoutConfigurationPtrOutput() TemplateGridLayoutConfigurationPtrOutput {
	return i.ToTemplateGridLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateGridLayoutConfigurationPtrType) ToTemplateGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateGridLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutConfigurationPtrOutput)
}

type TemplateGridLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutConfiguration)(nil)).Elem()
}

func (o TemplateGridLayoutConfigurationOutput) ToTemplateGridLayoutConfigurationOutput() TemplateGridLayoutConfigurationOutput {
	return o
}

func (o TemplateGridLayoutConfigurationOutput) ToTemplateGridLayoutConfigurationOutputWithContext(ctx context.Context) TemplateGridLayoutConfigurationOutput {
	return o
}

func (o TemplateGridLayoutConfigurationOutput) ToTemplateGridLayoutConfigurationPtrOutput() TemplateGridLayoutConfigurationPtrOutput {
	return o.ToTemplateGridLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateGridLayoutConfigurationOutput) ToTemplateGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateGridLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGridLayoutConfiguration) *TemplateGridLayoutConfiguration {
		return &v
	}).(TemplateGridLayoutConfigurationPtrOutput)
}

func (o TemplateGridLayoutConfigurationOutput) CanvasSizeOptions() TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v TemplateGridLayoutConfiguration) *TemplateGridLayoutCanvasSizeOptions {
		return v.CanvasSizeOptions
	}).(TemplateGridLayoutCanvasSizeOptionsPtrOutput)
}

// The elements that are included in a grid layout.
func (o TemplateGridLayoutConfigurationOutput) Elements() TemplateGridLayoutElementArrayOutput {
	return o.ApplyT(func(v TemplateGridLayoutConfiguration) []TemplateGridLayoutElement { return v.Elements }).(TemplateGridLayoutElementArrayOutput)
}

type TemplateGridLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGridLayoutConfiguration)(nil)).Elem()
}

func (o TemplateGridLayoutConfigurationPtrOutput) ToTemplateGridLayoutConfigurationPtrOutput() TemplateGridLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateGridLayoutConfigurationPtrOutput) ToTemplateGridLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateGridLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateGridLayoutConfigurationPtrOutput) Elem() TemplateGridLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateGridLayoutConfiguration) TemplateGridLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateGridLayoutConfiguration
		return ret
	}).(TemplateGridLayoutConfigurationOutput)
}

func (o TemplateGridLayoutConfigurationPtrOutput) CanvasSizeOptions() TemplateGridLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateGridLayoutConfiguration) *TemplateGridLayoutCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return v.CanvasSizeOptions
	}).(TemplateGridLayoutCanvasSizeOptionsPtrOutput)
}

// The elements that are included in a grid layout.
func (o TemplateGridLayoutConfigurationPtrOutput) Elements() TemplateGridLayoutElementArrayOutput {
	return o.ApplyT(func(v *TemplateGridLayoutConfiguration) []TemplateGridLayoutElement {
		if v == nil {
			return nil
		}
		return v.Elements
	}).(TemplateGridLayoutElementArrayOutput)
}

type TemplateGridLayoutElement struct {
	// The column index for the upper left corner of an element.
	ColumnIndex *float64 `pulumi:"columnIndex"`
	// The width of a grid element expressed as a number of grid columns.
	ColumnSpan float64 `pulumi:"columnSpan"`
	// A unique identifier for an element within a grid layout.
	ElementId string `pulumi:"elementId"`
	// The type of element.
	ElementType_ TemplateLayoutElementType `pulumi:"elementType"`
	// The row index for the upper left corner of an element.
	RowIndex *float64 `pulumi:"rowIndex"`
	// The height of a grid element expressed as a number of grid rows.
	RowSpan float64 `pulumi:"rowSpan"`
}

// TemplateGridLayoutElementInput is an input type that accepts TemplateGridLayoutElementArgs and TemplateGridLayoutElementOutput values.
// You can construct a concrete instance of `TemplateGridLayoutElementInput` via:
//
//	TemplateGridLayoutElementArgs{...}
type TemplateGridLayoutElementInput interface {
	pulumi.Input

	ToTemplateGridLayoutElementOutput() TemplateGridLayoutElementOutput
	ToTemplateGridLayoutElementOutputWithContext(context.Context) TemplateGridLayoutElementOutput
}

type TemplateGridLayoutElementArgs struct {
	// The column index for the upper left corner of an element.
	ColumnIndex pulumi.Float64PtrInput `pulumi:"columnIndex"`
	// The width of a grid element expressed as a number of grid columns.
	ColumnSpan pulumi.Float64Input `pulumi:"columnSpan"`
	// A unique identifier for an element within a grid layout.
	ElementId pulumi.StringInput `pulumi:"elementId"`
	// The type of element.
	ElementType_ TemplateLayoutElementTypeInput `pulumi:"elementType"`
	// The row index for the upper left corner of an element.
	RowIndex pulumi.Float64PtrInput `pulumi:"rowIndex"`
	// The height of a grid element expressed as a number of grid rows.
	RowSpan pulumi.Float64Input `pulumi:"rowSpan"`
}

func (TemplateGridLayoutElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutElement)(nil)).Elem()
}

func (i TemplateGridLayoutElementArgs) ToTemplateGridLayoutElementOutput() TemplateGridLayoutElementOutput {
	return i.ToTemplateGridLayoutElementOutputWithContext(context.Background())
}

func (i TemplateGridLayoutElementArgs) ToTemplateGridLayoutElementOutputWithContext(ctx context.Context) TemplateGridLayoutElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutElementOutput)
}

// TemplateGridLayoutElementArrayInput is an input type that accepts TemplateGridLayoutElementArray and TemplateGridLayoutElementArrayOutput values.
// You can construct a concrete instance of `TemplateGridLayoutElementArrayInput` via:
//
//	TemplateGridLayoutElementArray{ TemplateGridLayoutElementArgs{...} }
type TemplateGridLayoutElementArrayInput interface {
	pulumi.Input

	ToTemplateGridLayoutElementArrayOutput() TemplateGridLayoutElementArrayOutput
	ToTemplateGridLayoutElementArrayOutputWithContext(context.Context) TemplateGridLayoutElementArrayOutput
}

type TemplateGridLayoutElementArray []TemplateGridLayoutElementInput

func (TemplateGridLayoutElementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGridLayoutElement)(nil)).Elem()
}

func (i TemplateGridLayoutElementArray) ToTemplateGridLayoutElementArrayOutput() TemplateGridLayoutElementArrayOutput {
	return i.ToTemplateGridLayoutElementArrayOutputWithContext(context.Background())
}

func (i TemplateGridLayoutElementArray) ToTemplateGridLayoutElementArrayOutputWithContext(ctx context.Context) TemplateGridLayoutElementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutElementArrayOutput)
}

type TemplateGridLayoutElementOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutElement)(nil)).Elem()
}

func (o TemplateGridLayoutElementOutput) ToTemplateGridLayoutElementOutput() TemplateGridLayoutElementOutput {
	return o
}

func (o TemplateGridLayoutElementOutput) ToTemplateGridLayoutElementOutputWithContext(ctx context.Context) TemplateGridLayoutElementOutput {
	return o
}

// The column index for the upper left corner of an element.
func (o TemplateGridLayoutElementOutput) ColumnIndex() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateGridLayoutElement) *float64 { return v.ColumnIndex }).(pulumi.Float64PtrOutput)
}

// The width of a grid element expressed as a number of grid columns.
func (o TemplateGridLayoutElementOutput) ColumnSpan() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateGridLayoutElement) float64 { return v.ColumnSpan }).(pulumi.Float64Output)
}

// A unique identifier for an element within a grid layout.
func (o TemplateGridLayoutElementOutput) ElementId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateGridLayoutElement) string { return v.ElementId }).(pulumi.StringOutput)
}

// The type of element.
func (o TemplateGridLayoutElementOutput) GetElementType_() TemplateLayoutElementTypeOutput {
	return o.ApplyT(func(v TemplateGridLayoutElement) TemplateLayoutElementType { return v.ElementType_ }).(TemplateLayoutElementTypeOutput)
}

// The row index for the upper left corner of an element.
func (o TemplateGridLayoutElementOutput) RowIndex() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateGridLayoutElement) *float64 { return v.RowIndex }).(pulumi.Float64PtrOutput)
}

// The height of a grid element expressed as a number of grid rows.
func (o TemplateGridLayoutElementOutput) RowSpan() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateGridLayoutElement) float64 { return v.RowSpan }).(pulumi.Float64Output)
}

type TemplateGridLayoutElementArrayOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutElementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateGridLayoutElement)(nil)).Elem()
}

func (o TemplateGridLayoutElementArrayOutput) ToTemplateGridLayoutElementArrayOutput() TemplateGridLayoutElementArrayOutput {
	return o
}

func (o TemplateGridLayoutElementArrayOutput) ToTemplateGridLayoutElementArrayOutputWithContext(ctx context.Context) TemplateGridLayoutElementArrayOutput {
	return o
}

func (o TemplateGridLayoutElementArrayOutput) Index(i pulumi.IntInput) TemplateGridLayoutElementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateGridLayoutElement {
		return vs[0].([]TemplateGridLayoutElement)[vs[1].(int)]
	}).(TemplateGridLayoutElementOutput)
}

type TemplateGridLayoutScreenCanvasSizeOptions struct {
	// String based length that is composed of value and unit in px
	OptimizedViewPortWidth *string `pulumi:"optimizedViewPortWidth"`
	// This value determines the layout behavior when the viewport is resized.
	//
	// - `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight console, this option is called `Classic` .
	// - `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port. In the Amazon QuickSight console, this option is called `Tiled` .
	ResizeOption TemplateResizeOption `pulumi:"resizeOption"`
}

// TemplateGridLayoutScreenCanvasSizeOptionsInput is an input type that accepts TemplateGridLayoutScreenCanvasSizeOptionsArgs and TemplateGridLayoutScreenCanvasSizeOptionsOutput values.
// You can construct a concrete instance of `TemplateGridLayoutScreenCanvasSizeOptionsInput` via:
//
//	TemplateGridLayoutScreenCanvasSizeOptionsArgs{...}
type TemplateGridLayoutScreenCanvasSizeOptionsInput interface {
	pulumi.Input

	ToTemplateGridLayoutScreenCanvasSizeOptionsOutput() TemplateGridLayoutScreenCanvasSizeOptionsOutput
	ToTemplateGridLayoutScreenCanvasSizeOptionsOutputWithContext(context.Context) TemplateGridLayoutScreenCanvasSizeOptionsOutput
}

type TemplateGridLayoutScreenCanvasSizeOptionsArgs struct {
	// String based length that is composed of value and unit in px
	OptimizedViewPortWidth pulumi.StringPtrInput `pulumi:"optimizedViewPortWidth"`
	// This value determines the layout behavior when the viewport is resized.
	//
	// - `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight console, this option is called `Classic` .
	// - `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port. In the Amazon QuickSight console, this option is called `Tiled` .
	ResizeOption TemplateResizeOptionInput `pulumi:"resizeOption"`
}

func (TemplateGridLayoutScreenCanvasSizeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (i TemplateGridLayoutScreenCanvasSizeOptionsArgs) ToTemplateGridLayoutScreenCanvasSizeOptionsOutput() TemplateGridLayoutScreenCanvasSizeOptionsOutput {
	return i.ToTemplateGridLayoutScreenCanvasSizeOptionsOutputWithContext(context.Background())
}

func (i TemplateGridLayoutScreenCanvasSizeOptionsArgs) ToTemplateGridLayoutScreenCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateGridLayoutScreenCanvasSizeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutScreenCanvasSizeOptionsOutput)
}

func (i TemplateGridLayoutScreenCanvasSizeOptionsArgs) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutput() TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return i.ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateGridLayoutScreenCanvasSizeOptionsArgs) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutScreenCanvasSizeOptionsOutput).ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx)
}

// TemplateGridLayoutScreenCanvasSizeOptionsPtrInput is an input type that accepts TemplateGridLayoutScreenCanvasSizeOptionsArgs, TemplateGridLayoutScreenCanvasSizeOptionsPtr and TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateGridLayoutScreenCanvasSizeOptionsPtrInput` via:
//
//	        TemplateGridLayoutScreenCanvasSizeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateGridLayoutScreenCanvasSizeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutput() TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput
	ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Context) TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput
}

type templateGridLayoutScreenCanvasSizeOptionsPtrType TemplateGridLayoutScreenCanvasSizeOptionsArgs

func TemplateGridLayoutScreenCanvasSizeOptionsPtr(v *TemplateGridLayoutScreenCanvasSizeOptionsArgs) TemplateGridLayoutScreenCanvasSizeOptionsPtrInput {
	return (*templateGridLayoutScreenCanvasSizeOptionsPtrType)(v)
}

func (*templateGridLayoutScreenCanvasSizeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGridLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (i *templateGridLayoutScreenCanvasSizeOptionsPtrType) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutput() TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return i.ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateGridLayoutScreenCanvasSizeOptionsPtrType) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput)
}

type TemplateGridLayoutScreenCanvasSizeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutScreenCanvasSizeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGridLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateGridLayoutScreenCanvasSizeOptionsOutput) ToTemplateGridLayoutScreenCanvasSizeOptionsOutput() TemplateGridLayoutScreenCanvasSizeOptionsOutput {
	return o
}

func (o TemplateGridLayoutScreenCanvasSizeOptionsOutput) ToTemplateGridLayoutScreenCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateGridLayoutScreenCanvasSizeOptionsOutput {
	return o
}

func (o TemplateGridLayoutScreenCanvasSizeOptionsOutput) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutput() TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateGridLayoutScreenCanvasSizeOptionsOutput) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGridLayoutScreenCanvasSizeOptions) *TemplateGridLayoutScreenCanvasSizeOptions {
		return &v
	}).(TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateGridLayoutScreenCanvasSizeOptionsOutput) OptimizedViewPortWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateGridLayoutScreenCanvasSizeOptions) *string { return v.OptimizedViewPortWidth }).(pulumi.StringPtrOutput)
}

// This value determines the layout behavior when the viewport is resized.
//
// - `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight console, this option is called `Classic` .
// - `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port. In the Amazon QuickSight console, this option is called `Tiled` .
func (o TemplateGridLayoutScreenCanvasSizeOptionsOutput) ResizeOption() TemplateResizeOptionOutput {
	return o.ApplyT(func(v TemplateGridLayoutScreenCanvasSizeOptions) TemplateResizeOption { return v.ResizeOption }).(TemplateResizeOptionOutput)
}

type TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGridLayoutScreenCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutput() TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput) ToTemplateGridLayoutScreenCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput) Elem() TemplateGridLayoutScreenCanvasSizeOptionsOutput {
	return o.ApplyT(func(v *TemplateGridLayoutScreenCanvasSizeOptions) TemplateGridLayoutScreenCanvasSizeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateGridLayoutScreenCanvasSizeOptions
		return ret
	}).(TemplateGridLayoutScreenCanvasSizeOptionsOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput) OptimizedViewPortWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGridLayoutScreenCanvasSizeOptions) *string {
		if v == nil {
			return nil
		}
		return v.OptimizedViewPortWidth
	}).(pulumi.StringPtrOutput)
}

// This value determines the layout behavior when the viewport is resized.
//
// - `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight console, this option is called `Classic` .
// - `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port. In the Amazon QuickSight console, this option is called `Tiled` .
func (o TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput) ResizeOption() TemplateResizeOptionPtrOutput {
	return o.ApplyT(func(v *TemplateGridLayoutScreenCanvasSizeOptions) *TemplateResizeOption {
		if v == nil {
			return nil
		}
		return &v.ResizeOption
	}).(TemplateResizeOptionPtrOutput)
}

type TemplateGrowthRateComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The period size setup of a growth rate computation.
	PeriodSize *float64 `pulumi:"periodSize"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateGrowthRateComputationInput is an input type that accepts TemplateGrowthRateComputationArgs and TemplateGrowthRateComputationOutput values.
// You can construct a concrete instance of `TemplateGrowthRateComputationInput` via:
//
//	TemplateGrowthRateComputationArgs{...}
type TemplateGrowthRateComputationInput interface {
	pulumi.Input

	ToTemplateGrowthRateComputationOutput() TemplateGrowthRateComputationOutput
	ToTemplateGrowthRateComputationOutputWithContext(context.Context) TemplateGrowthRateComputationOutput
}

type TemplateGrowthRateComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The period size setup of a growth rate computation.
	PeriodSize pulumi.Float64PtrInput `pulumi:"periodSize"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateGrowthRateComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGrowthRateComputation)(nil)).Elem()
}

func (i TemplateGrowthRateComputationArgs) ToTemplateGrowthRateComputationOutput() TemplateGrowthRateComputationOutput {
	return i.ToTemplateGrowthRateComputationOutputWithContext(context.Background())
}

func (i TemplateGrowthRateComputationArgs) ToTemplateGrowthRateComputationOutputWithContext(ctx context.Context) TemplateGrowthRateComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGrowthRateComputationOutput)
}

func (i TemplateGrowthRateComputationArgs) ToTemplateGrowthRateComputationPtrOutput() TemplateGrowthRateComputationPtrOutput {
	return i.ToTemplateGrowthRateComputationPtrOutputWithContext(context.Background())
}

func (i TemplateGrowthRateComputationArgs) ToTemplateGrowthRateComputationPtrOutputWithContext(ctx context.Context) TemplateGrowthRateComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGrowthRateComputationOutput).ToTemplateGrowthRateComputationPtrOutputWithContext(ctx)
}

// TemplateGrowthRateComputationPtrInput is an input type that accepts TemplateGrowthRateComputationArgs, TemplateGrowthRateComputationPtr and TemplateGrowthRateComputationPtrOutput values.
// You can construct a concrete instance of `TemplateGrowthRateComputationPtrInput` via:
//
//	        TemplateGrowthRateComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateGrowthRateComputationPtrInput interface {
	pulumi.Input

	ToTemplateGrowthRateComputationPtrOutput() TemplateGrowthRateComputationPtrOutput
	ToTemplateGrowthRateComputationPtrOutputWithContext(context.Context) TemplateGrowthRateComputationPtrOutput
}

type templateGrowthRateComputationPtrType TemplateGrowthRateComputationArgs

func TemplateGrowthRateComputationPtr(v *TemplateGrowthRateComputationArgs) TemplateGrowthRateComputationPtrInput {
	return (*templateGrowthRateComputationPtrType)(v)
}

func (*templateGrowthRateComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGrowthRateComputation)(nil)).Elem()
}

func (i *templateGrowthRateComputationPtrType) ToTemplateGrowthRateComputationPtrOutput() TemplateGrowthRateComputationPtrOutput {
	return i.ToTemplateGrowthRateComputationPtrOutputWithContext(context.Background())
}

func (i *templateGrowthRateComputationPtrType) ToTemplateGrowthRateComputationPtrOutputWithContext(ctx context.Context) TemplateGrowthRateComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateGrowthRateComputationPtrOutput)
}

type TemplateGrowthRateComputationOutput struct{ *pulumi.OutputState }

func (TemplateGrowthRateComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateGrowthRateComputation)(nil)).Elem()
}

func (o TemplateGrowthRateComputationOutput) ToTemplateGrowthRateComputationOutput() TemplateGrowthRateComputationOutput {
	return o
}

func (o TemplateGrowthRateComputationOutput) ToTemplateGrowthRateComputationOutputWithContext(ctx context.Context) TemplateGrowthRateComputationOutput {
	return o
}

func (o TemplateGrowthRateComputationOutput) ToTemplateGrowthRateComputationPtrOutput() TemplateGrowthRateComputationPtrOutput {
	return o.ToTemplateGrowthRateComputationPtrOutputWithContext(context.Background())
}

func (o TemplateGrowthRateComputationOutput) ToTemplateGrowthRateComputationPtrOutputWithContext(ctx context.Context) TemplateGrowthRateComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateGrowthRateComputation) *TemplateGrowthRateComputation {
		return &v
	}).(TemplateGrowthRateComputationPtrOutput)
}

// The ID for a computation.
func (o TemplateGrowthRateComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateGrowthRateComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateGrowthRateComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateGrowthRateComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The period size setup of a growth rate computation.
func (o TemplateGrowthRateComputationOutput) PeriodSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateGrowthRateComputation) *float64 { return v.PeriodSize }).(pulumi.Float64PtrOutput)
}

// The time field that is used in a computation.
func (o TemplateGrowthRateComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateGrowthRateComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

// The value field that is used in a computation.
func (o TemplateGrowthRateComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateGrowthRateComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateGrowthRateComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateGrowthRateComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateGrowthRateComputation)(nil)).Elem()
}

func (o TemplateGrowthRateComputationPtrOutput) ToTemplateGrowthRateComputationPtrOutput() TemplateGrowthRateComputationPtrOutput {
	return o
}

func (o TemplateGrowthRateComputationPtrOutput) ToTemplateGrowthRateComputationPtrOutputWithContext(ctx context.Context) TemplateGrowthRateComputationPtrOutput {
	return o
}

func (o TemplateGrowthRateComputationPtrOutput) Elem() TemplateGrowthRateComputationOutput {
	return o.ApplyT(func(v *TemplateGrowthRateComputation) TemplateGrowthRateComputation {
		if v != nil {
			return *v
		}
		var ret TemplateGrowthRateComputation
		return ret
	}).(TemplateGrowthRateComputationOutput)
}

// The ID for a computation.
func (o TemplateGrowthRateComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGrowthRateComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateGrowthRateComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateGrowthRateComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The period size setup of a growth rate computation.
func (o TemplateGrowthRateComputationPtrOutput) PeriodSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateGrowthRateComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodSize
	}).(pulumi.Float64PtrOutput)
}

// The time field that is used in a computation.
func (o TemplateGrowthRateComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateGrowthRateComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

// The value field that is used in a computation.
func (o TemplateGrowthRateComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateGrowthRateComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateHeaderFooterSectionConfiguration struct {
	// The layout configuration of the header or footer section.
	Layout TemplateSectionLayoutConfiguration `pulumi:"layout"`
	// The unique identifier of the header or footer section.
	SectionId string `pulumi:"sectionId"`
	// The style options of a header or footer section.
	Style *TemplateSectionStyle `pulumi:"style"`
}

// TemplateHeaderFooterSectionConfigurationInput is an input type that accepts TemplateHeaderFooterSectionConfigurationArgs and TemplateHeaderFooterSectionConfigurationOutput values.
// You can construct a concrete instance of `TemplateHeaderFooterSectionConfigurationInput` via:
//
//	TemplateHeaderFooterSectionConfigurationArgs{...}
type TemplateHeaderFooterSectionConfigurationInput interface {
	pulumi.Input

	ToTemplateHeaderFooterSectionConfigurationOutput() TemplateHeaderFooterSectionConfigurationOutput
	ToTemplateHeaderFooterSectionConfigurationOutputWithContext(context.Context) TemplateHeaderFooterSectionConfigurationOutput
}

type TemplateHeaderFooterSectionConfigurationArgs struct {
	// The layout configuration of the header or footer section.
	Layout TemplateSectionLayoutConfigurationInput `pulumi:"layout"`
	// The unique identifier of the header or footer section.
	SectionId pulumi.StringInput `pulumi:"sectionId"`
	// The style options of a header or footer section.
	Style TemplateSectionStylePtrInput `pulumi:"style"`
}

func (TemplateHeaderFooterSectionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeaderFooterSectionConfiguration)(nil)).Elem()
}

func (i TemplateHeaderFooterSectionConfigurationArgs) ToTemplateHeaderFooterSectionConfigurationOutput() TemplateHeaderFooterSectionConfigurationOutput {
	return i.ToTemplateHeaderFooterSectionConfigurationOutputWithContext(context.Background())
}

func (i TemplateHeaderFooterSectionConfigurationArgs) ToTemplateHeaderFooterSectionConfigurationOutputWithContext(ctx context.Context) TemplateHeaderFooterSectionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeaderFooterSectionConfigurationOutput)
}

// TemplateHeaderFooterSectionConfigurationArrayInput is an input type that accepts TemplateHeaderFooterSectionConfigurationArray and TemplateHeaderFooterSectionConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateHeaderFooterSectionConfigurationArrayInput` via:
//
//	TemplateHeaderFooterSectionConfigurationArray{ TemplateHeaderFooterSectionConfigurationArgs{...} }
type TemplateHeaderFooterSectionConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateHeaderFooterSectionConfigurationArrayOutput() TemplateHeaderFooterSectionConfigurationArrayOutput
	ToTemplateHeaderFooterSectionConfigurationArrayOutputWithContext(context.Context) TemplateHeaderFooterSectionConfigurationArrayOutput
}

type TemplateHeaderFooterSectionConfigurationArray []TemplateHeaderFooterSectionConfigurationInput

func (TemplateHeaderFooterSectionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateHeaderFooterSectionConfiguration)(nil)).Elem()
}

func (i TemplateHeaderFooterSectionConfigurationArray) ToTemplateHeaderFooterSectionConfigurationArrayOutput() TemplateHeaderFooterSectionConfigurationArrayOutput {
	return i.ToTemplateHeaderFooterSectionConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateHeaderFooterSectionConfigurationArray) ToTemplateHeaderFooterSectionConfigurationArrayOutputWithContext(ctx context.Context) TemplateHeaderFooterSectionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeaderFooterSectionConfigurationArrayOutput)
}

type TemplateHeaderFooterSectionConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateHeaderFooterSectionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeaderFooterSectionConfiguration)(nil)).Elem()
}

func (o TemplateHeaderFooterSectionConfigurationOutput) ToTemplateHeaderFooterSectionConfigurationOutput() TemplateHeaderFooterSectionConfigurationOutput {
	return o
}

func (o TemplateHeaderFooterSectionConfigurationOutput) ToTemplateHeaderFooterSectionConfigurationOutputWithContext(ctx context.Context) TemplateHeaderFooterSectionConfigurationOutput {
	return o
}

// The layout configuration of the header or footer section.
func (o TemplateHeaderFooterSectionConfigurationOutput) Layout() TemplateSectionLayoutConfigurationOutput {
	return o.ApplyT(func(v TemplateHeaderFooterSectionConfiguration) TemplateSectionLayoutConfiguration { return v.Layout }).(TemplateSectionLayoutConfigurationOutput)
}

// The unique identifier of the header or footer section.
func (o TemplateHeaderFooterSectionConfigurationOutput) SectionId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateHeaderFooterSectionConfiguration) string { return v.SectionId }).(pulumi.StringOutput)
}

// The style options of a header or footer section.
func (o TemplateHeaderFooterSectionConfigurationOutput) Style() TemplateSectionStylePtrOutput {
	return o.ApplyT(func(v TemplateHeaderFooterSectionConfiguration) *TemplateSectionStyle { return v.Style }).(TemplateSectionStylePtrOutput)
}

type TemplateHeaderFooterSectionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateHeaderFooterSectionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateHeaderFooterSectionConfiguration)(nil)).Elem()
}

func (o TemplateHeaderFooterSectionConfigurationArrayOutput) ToTemplateHeaderFooterSectionConfigurationArrayOutput() TemplateHeaderFooterSectionConfigurationArrayOutput {
	return o
}

func (o TemplateHeaderFooterSectionConfigurationArrayOutput) ToTemplateHeaderFooterSectionConfigurationArrayOutputWithContext(ctx context.Context) TemplateHeaderFooterSectionConfigurationArrayOutput {
	return o
}

func (o TemplateHeaderFooterSectionConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateHeaderFooterSectionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateHeaderFooterSectionConfiguration {
		return vs[0].([]TemplateHeaderFooterSectionConfiguration)[vs[1].(int)]
	}).(TemplateHeaderFooterSectionConfigurationOutput)
}

type TemplateHeatMapAggregatedFieldWells struct {
	// The columns field well of a heat map.
	Columns []TemplateDimensionField `pulumi:"columns"`
	// The rows field well of a heat map.
	Rows []TemplateDimensionField `pulumi:"rows"`
	// The values field well of a heat map.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateHeatMapAggregatedFieldWellsInput is an input type that accepts TemplateHeatMapAggregatedFieldWellsArgs and TemplateHeatMapAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateHeatMapAggregatedFieldWellsInput` via:
//
//	TemplateHeatMapAggregatedFieldWellsArgs{...}
type TemplateHeatMapAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateHeatMapAggregatedFieldWellsOutput() TemplateHeatMapAggregatedFieldWellsOutput
	ToTemplateHeatMapAggregatedFieldWellsOutputWithContext(context.Context) TemplateHeatMapAggregatedFieldWellsOutput
}

type TemplateHeatMapAggregatedFieldWellsArgs struct {
	// The columns field well of a heat map.
	Columns TemplateDimensionFieldArrayInput `pulumi:"columns"`
	// The rows field well of a heat map.
	Rows TemplateDimensionFieldArrayInput `pulumi:"rows"`
	// The values field well of a heat map.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateHeatMapAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateHeatMapAggregatedFieldWellsArgs) ToTemplateHeatMapAggregatedFieldWellsOutput() TemplateHeatMapAggregatedFieldWellsOutput {
	return i.ToTemplateHeatMapAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateHeatMapAggregatedFieldWellsArgs) ToTemplateHeatMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateHeatMapAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapAggregatedFieldWellsOutput)
}

func (i TemplateHeatMapAggregatedFieldWellsArgs) ToTemplateHeatMapAggregatedFieldWellsPtrOutput() TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateHeatMapAggregatedFieldWellsArgs) ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapAggregatedFieldWellsOutput).ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateHeatMapAggregatedFieldWellsPtrInput is an input type that accepts TemplateHeatMapAggregatedFieldWellsArgs, TemplateHeatMapAggregatedFieldWellsPtr and TemplateHeatMapAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateHeatMapAggregatedFieldWellsPtrInput` via:
//
//	        TemplateHeatMapAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateHeatMapAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateHeatMapAggregatedFieldWellsPtrOutput() TemplateHeatMapAggregatedFieldWellsPtrOutput
	ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateHeatMapAggregatedFieldWellsPtrOutput
}

type templateHeatMapAggregatedFieldWellsPtrType TemplateHeatMapAggregatedFieldWellsArgs

func TemplateHeatMapAggregatedFieldWellsPtr(v *TemplateHeatMapAggregatedFieldWellsArgs) TemplateHeatMapAggregatedFieldWellsPtrInput {
	return (*templateHeatMapAggregatedFieldWellsPtrType)(v)
}

func (*templateHeatMapAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapAggregatedFieldWells)(nil)).Elem()
}

func (i *templateHeatMapAggregatedFieldWellsPtrType) ToTemplateHeatMapAggregatedFieldWellsPtrOutput() TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateHeatMapAggregatedFieldWellsPtrType) ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapAggregatedFieldWellsPtrOutput)
}

type TemplateHeatMapAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateHeatMapAggregatedFieldWellsOutput) ToTemplateHeatMapAggregatedFieldWellsOutput() TemplateHeatMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateHeatMapAggregatedFieldWellsOutput) ToTemplateHeatMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateHeatMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateHeatMapAggregatedFieldWellsOutput) ToTemplateHeatMapAggregatedFieldWellsPtrOutput() TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return o.ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateHeatMapAggregatedFieldWellsOutput) ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHeatMapAggregatedFieldWells) *TemplateHeatMapAggregatedFieldWells {
		return &v
	}).(TemplateHeatMapAggregatedFieldWellsPtrOutput)
}

// The columns field well of a heat map.
func (o TemplateHeatMapAggregatedFieldWellsOutput) Columns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateHeatMapAggregatedFieldWells) []TemplateDimensionField { return v.Columns }).(TemplateDimensionFieldArrayOutput)
}

// The rows field well of a heat map.
func (o TemplateHeatMapAggregatedFieldWellsOutput) Rows() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateHeatMapAggregatedFieldWells) []TemplateDimensionField { return v.Rows }).(TemplateDimensionFieldArrayOutput)
}

// The values field well of a heat map.
func (o TemplateHeatMapAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateHeatMapAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateHeatMapAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateHeatMapAggregatedFieldWellsPtrOutput) ToTemplateHeatMapAggregatedFieldWellsPtrOutput() TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateHeatMapAggregatedFieldWellsPtrOutput) ToTemplateHeatMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateHeatMapAggregatedFieldWellsPtrOutput) Elem() TemplateHeatMapAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateHeatMapAggregatedFieldWells) TemplateHeatMapAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateHeatMapAggregatedFieldWells
		return ret
	}).(TemplateHeatMapAggregatedFieldWellsOutput)
}

// The columns field well of a heat map.
func (o TemplateHeatMapAggregatedFieldWellsPtrOutput) Columns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateHeatMapAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(TemplateDimensionFieldArrayOutput)
}

// The rows field well of a heat map.
func (o TemplateHeatMapAggregatedFieldWellsPtrOutput) Rows() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateHeatMapAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Rows
	}).(TemplateDimensionFieldArrayOutput)
}

// The values field well of a heat map.
func (o TemplateHeatMapAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateHeatMapAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateHeatMapConfiguration struct {
	// The color options (gradient color, point of divergence) in a heat map.
	ColorScale *TemplateColorScale `pulumi:"colorScale"`
	// The label options of the column that is displayed in a heat map.
	ColumnLabelOptions *TemplateChartAxisLabelOptions `pulumi:"columnLabelOptions"`
	// The options that determine if visual data labels are displayed.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells *TemplateHeatMapFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The label options of the row that is displayed in a `heat map` .
	RowLabelOptions *TemplateChartAxisLabelOptions `pulumi:"rowLabelOptions"`
	// The sort configuration of a heat map.
	SortConfiguration *TemplateHeatMapSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
}

// TemplateHeatMapConfigurationInput is an input type that accepts TemplateHeatMapConfigurationArgs and TemplateHeatMapConfigurationOutput values.
// You can construct a concrete instance of `TemplateHeatMapConfigurationInput` via:
//
//	TemplateHeatMapConfigurationArgs{...}
type TemplateHeatMapConfigurationInput interface {
	pulumi.Input

	ToTemplateHeatMapConfigurationOutput() TemplateHeatMapConfigurationOutput
	ToTemplateHeatMapConfigurationOutputWithContext(context.Context) TemplateHeatMapConfigurationOutput
}

type TemplateHeatMapConfigurationArgs struct {
	// The color options (gradient color, point of divergence) in a heat map.
	ColorScale TemplateColorScalePtrInput `pulumi:"colorScale"`
	// The label options of the column that is displayed in a heat map.
	ColumnLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"columnLabelOptions"`
	// The options that determine if visual data labels are displayed.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells TemplateHeatMapFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The label options of the row that is displayed in a `heat map` .
	RowLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"rowLabelOptions"`
	// The sort configuration of a heat map.
	SortConfiguration TemplateHeatMapSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
}

func (TemplateHeatMapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapConfiguration)(nil)).Elem()
}

func (i TemplateHeatMapConfigurationArgs) ToTemplateHeatMapConfigurationOutput() TemplateHeatMapConfigurationOutput {
	return i.ToTemplateHeatMapConfigurationOutputWithContext(context.Background())
}

func (i TemplateHeatMapConfigurationArgs) ToTemplateHeatMapConfigurationOutputWithContext(ctx context.Context) TemplateHeatMapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapConfigurationOutput)
}

func (i TemplateHeatMapConfigurationArgs) ToTemplateHeatMapConfigurationPtrOutput() TemplateHeatMapConfigurationPtrOutput {
	return i.ToTemplateHeatMapConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateHeatMapConfigurationArgs) ToTemplateHeatMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapConfigurationOutput).ToTemplateHeatMapConfigurationPtrOutputWithContext(ctx)
}

// TemplateHeatMapConfigurationPtrInput is an input type that accepts TemplateHeatMapConfigurationArgs, TemplateHeatMapConfigurationPtr and TemplateHeatMapConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateHeatMapConfigurationPtrInput` via:
//
//	        TemplateHeatMapConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateHeatMapConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateHeatMapConfigurationPtrOutput() TemplateHeatMapConfigurationPtrOutput
	ToTemplateHeatMapConfigurationPtrOutputWithContext(context.Context) TemplateHeatMapConfigurationPtrOutput
}

type templateHeatMapConfigurationPtrType TemplateHeatMapConfigurationArgs

func TemplateHeatMapConfigurationPtr(v *TemplateHeatMapConfigurationArgs) TemplateHeatMapConfigurationPtrInput {
	return (*templateHeatMapConfigurationPtrType)(v)
}

func (*templateHeatMapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapConfiguration)(nil)).Elem()
}

func (i *templateHeatMapConfigurationPtrType) ToTemplateHeatMapConfigurationPtrOutput() TemplateHeatMapConfigurationPtrOutput {
	return i.ToTemplateHeatMapConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateHeatMapConfigurationPtrType) ToTemplateHeatMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapConfigurationPtrOutput)
}

type TemplateHeatMapConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapConfiguration)(nil)).Elem()
}

func (o TemplateHeatMapConfigurationOutput) ToTemplateHeatMapConfigurationOutput() TemplateHeatMapConfigurationOutput {
	return o
}

func (o TemplateHeatMapConfigurationOutput) ToTemplateHeatMapConfigurationOutputWithContext(ctx context.Context) TemplateHeatMapConfigurationOutput {
	return o
}

func (o TemplateHeatMapConfigurationOutput) ToTemplateHeatMapConfigurationPtrOutput() TemplateHeatMapConfigurationPtrOutput {
	return o.ToTemplateHeatMapConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateHeatMapConfigurationOutput) ToTemplateHeatMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHeatMapConfiguration) *TemplateHeatMapConfiguration {
		return &v
	}).(TemplateHeatMapConfigurationPtrOutput)
}

// The color options (gradient color, point of divergence) in a heat map.
func (o TemplateHeatMapConfigurationOutput) ColorScale() TemplateColorScalePtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateColorScale { return v.ColorScale }).(TemplateColorScalePtrOutput)
}

// The label options of the column that is displayed in a heat map.
func (o TemplateHeatMapConfigurationOutput) ColumnLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateChartAxisLabelOptions { return v.ColumnLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateHeatMapConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateHeatMapConfigurationOutput) FieldWells() TemplateHeatMapFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateHeatMapFieldWells { return v.FieldWells }).(TemplateHeatMapFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateHeatMapConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateHeatMapConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The label options of the row that is displayed in a `heat map` .
func (o TemplateHeatMapConfigurationOutput) RowLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateChartAxisLabelOptions { return v.RowLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a heat map.
func (o TemplateHeatMapConfigurationOutput) SortConfiguration() TemplateHeatMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateHeatMapSortConfiguration { return v.SortConfiguration }).(TemplateHeatMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateHeatMapConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

type TemplateHeatMapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapConfiguration)(nil)).Elem()
}

func (o TemplateHeatMapConfigurationPtrOutput) ToTemplateHeatMapConfigurationPtrOutput() TemplateHeatMapConfigurationPtrOutput {
	return o
}

func (o TemplateHeatMapConfigurationPtrOutput) ToTemplateHeatMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapConfigurationPtrOutput {
	return o
}

func (o TemplateHeatMapConfigurationPtrOutput) Elem() TemplateHeatMapConfigurationOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) TemplateHeatMapConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateHeatMapConfiguration
		return ret
	}).(TemplateHeatMapConfigurationOutput)
}

// The color options (gradient color, point of divergence) in a heat map.
func (o TemplateHeatMapConfigurationPtrOutput) ColorScale() TemplateColorScalePtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateColorScale {
		if v == nil {
			return nil
		}
		return v.ColorScale
	}).(TemplateColorScalePtrOutput)
}

// The label options of the column that is displayed in a heat map.
func (o TemplateHeatMapConfigurationPtrOutput) ColumnLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ColumnLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateHeatMapConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateHeatMapConfigurationPtrOutput) FieldWells() TemplateHeatMapFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateHeatMapFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateHeatMapFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateHeatMapConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateHeatMapConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The label options of the row that is displayed in a `heat map` .
func (o TemplateHeatMapConfigurationPtrOutput) RowLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.RowLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a heat map.
func (o TemplateHeatMapConfigurationPtrOutput) SortConfiguration() TemplateHeatMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateHeatMapSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateHeatMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateHeatMapConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

type TemplateHeatMapFieldWells struct {
	// The aggregated field wells of a heat map.
	HeatMapAggregatedFieldWells *TemplateHeatMapAggregatedFieldWells `pulumi:"heatMapAggregatedFieldWells"`
}

// TemplateHeatMapFieldWellsInput is an input type that accepts TemplateHeatMapFieldWellsArgs and TemplateHeatMapFieldWellsOutput values.
// You can construct a concrete instance of `TemplateHeatMapFieldWellsInput` via:
//
//	TemplateHeatMapFieldWellsArgs{...}
type TemplateHeatMapFieldWellsInput interface {
	pulumi.Input

	ToTemplateHeatMapFieldWellsOutput() TemplateHeatMapFieldWellsOutput
	ToTemplateHeatMapFieldWellsOutputWithContext(context.Context) TemplateHeatMapFieldWellsOutput
}

type TemplateHeatMapFieldWellsArgs struct {
	// The aggregated field wells of a heat map.
	HeatMapAggregatedFieldWells TemplateHeatMapAggregatedFieldWellsPtrInput `pulumi:"heatMapAggregatedFieldWells"`
}

func (TemplateHeatMapFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapFieldWells)(nil)).Elem()
}

func (i TemplateHeatMapFieldWellsArgs) ToTemplateHeatMapFieldWellsOutput() TemplateHeatMapFieldWellsOutput {
	return i.ToTemplateHeatMapFieldWellsOutputWithContext(context.Background())
}

func (i TemplateHeatMapFieldWellsArgs) ToTemplateHeatMapFieldWellsOutputWithContext(ctx context.Context) TemplateHeatMapFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapFieldWellsOutput)
}

func (i TemplateHeatMapFieldWellsArgs) ToTemplateHeatMapFieldWellsPtrOutput() TemplateHeatMapFieldWellsPtrOutput {
	return i.ToTemplateHeatMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateHeatMapFieldWellsArgs) ToTemplateHeatMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapFieldWellsOutput).ToTemplateHeatMapFieldWellsPtrOutputWithContext(ctx)
}

// TemplateHeatMapFieldWellsPtrInput is an input type that accepts TemplateHeatMapFieldWellsArgs, TemplateHeatMapFieldWellsPtr and TemplateHeatMapFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateHeatMapFieldWellsPtrInput` via:
//
//	        TemplateHeatMapFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateHeatMapFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateHeatMapFieldWellsPtrOutput() TemplateHeatMapFieldWellsPtrOutput
	ToTemplateHeatMapFieldWellsPtrOutputWithContext(context.Context) TemplateHeatMapFieldWellsPtrOutput
}

type templateHeatMapFieldWellsPtrType TemplateHeatMapFieldWellsArgs

func TemplateHeatMapFieldWellsPtr(v *TemplateHeatMapFieldWellsArgs) TemplateHeatMapFieldWellsPtrInput {
	return (*templateHeatMapFieldWellsPtrType)(v)
}

func (*templateHeatMapFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapFieldWells)(nil)).Elem()
}

func (i *templateHeatMapFieldWellsPtrType) ToTemplateHeatMapFieldWellsPtrOutput() TemplateHeatMapFieldWellsPtrOutput {
	return i.ToTemplateHeatMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateHeatMapFieldWellsPtrType) ToTemplateHeatMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapFieldWellsPtrOutput)
}

type TemplateHeatMapFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapFieldWells)(nil)).Elem()
}

func (o TemplateHeatMapFieldWellsOutput) ToTemplateHeatMapFieldWellsOutput() TemplateHeatMapFieldWellsOutput {
	return o
}

func (o TemplateHeatMapFieldWellsOutput) ToTemplateHeatMapFieldWellsOutputWithContext(ctx context.Context) TemplateHeatMapFieldWellsOutput {
	return o
}

func (o TemplateHeatMapFieldWellsOutput) ToTemplateHeatMapFieldWellsPtrOutput() TemplateHeatMapFieldWellsPtrOutput {
	return o.ToTemplateHeatMapFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateHeatMapFieldWellsOutput) ToTemplateHeatMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHeatMapFieldWells) *TemplateHeatMapFieldWells {
		return &v
	}).(TemplateHeatMapFieldWellsPtrOutput)
}

// The aggregated field wells of a heat map.
func (o TemplateHeatMapFieldWellsOutput) HeatMapAggregatedFieldWells() TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapFieldWells) *TemplateHeatMapAggregatedFieldWells {
		return v.HeatMapAggregatedFieldWells
	}).(TemplateHeatMapAggregatedFieldWellsPtrOutput)
}

type TemplateHeatMapFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapFieldWells)(nil)).Elem()
}

func (o TemplateHeatMapFieldWellsPtrOutput) ToTemplateHeatMapFieldWellsPtrOutput() TemplateHeatMapFieldWellsPtrOutput {
	return o
}

func (o TemplateHeatMapFieldWellsPtrOutput) ToTemplateHeatMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHeatMapFieldWellsPtrOutput {
	return o
}

func (o TemplateHeatMapFieldWellsPtrOutput) Elem() TemplateHeatMapFieldWellsOutput {
	return o.ApplyT(func(v *TemplateHeatMapFieldWells) TemplateHeatMapFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateHeatMapFieldWells
		return ret
	}).(TemplateHeatMapFieldWellsOutput)
}

// The aggregated field wells of a heat map.
func (o TemplateHeatMapFieldWellsPtrOutput) HeatMapAggregatedFieldWells() TemplateHeatMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapFieldWells) *TemplateHeatMapAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.HeatMapAggregatedFieldWells
	}).(TemplateHeatMapAggregatedFieldWellsPtrOutput)
}

type TemplateHeatMapSortConfiguration struct {
	// The limit on the number of columns that are displayed in a heat map.
	HeatMapColumnItemsLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"heatMapColumnItemsLimitConfiguration"`
	// The column sort configuration for heat map for columns that aren't a part of a field well.
	HeatMapColumnSort []TemplateFieldSortOptions `pulumi:"heatMapColumnSort"`
	// The limit on the number of rows that are displayed in a heat map.
	HeatMapRowItemsLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"heatMapRowItemsLimitConfiguration"`
	// The field sort configuration of the rows fields.
	HeatMapRowSort []TemplateFieldSortOptions `pulumi:"heatMapRowSort"`
}

// TemplateHeatMapSortConfigurationInput is an input type that accepts TemplateHeatMapSortConfigurationArgs and TemplateHeatMapSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateHeatMapSortConfigurationInput` via:
//
//	TemplateHeatMapSortConfigurationArgs{...}
type TemplateHeatMapSortConfigurationInput interface {
	pulumi.Input

	ToTemplateHeatMapSortConfigurationOutput() TemplateHeatMapSortConfigurationOutput
	ToTemplateHeatMapSortConfigurationOutputWithContext(context.Context) TemplateHeatMapSortConfigurationOutput
}

type TemplateHeatMapSortConfigurationArgs struct {
	// The limit on the number of columns that are displayed in a heat map.
	HeatMapColumnItemsLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"heatMapColumnItemsLimitConfiguration"`
	// The column sort configuration for heat map for columns that aren't a part of a field well.
	HeatMapColumnSort TemplateFieldSortOptionsArrayInput `pulumi:"heatMapColumnSort"`
	// The limit on the number of rows that are displayed in a heat map.
	HeatMapRowItemsLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"heatMapRowItemsLimitConfiguration"`
	// The field sort configuration of the rows fields.
	HeatMapRowSort TemplateFieldSortOptionsArrayInput `pulumi:"heatMapRowSort"`
}

func (TemplateHeatMapSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapSortConfiguration)(nil)).Elem()
}

func (i TemplateHeatMapSortConfigurationArgs) ToTemplateHeatMapSortConfigurationOutput() TemplateHeatMapSortConfigurationOutput {
	return i.ToTemplateHeatMapSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateHeatMapSortConfigurationArgs) ToTemplateHeatMapSortConfigurationOutputWithContext(ctx context.Context) TemplateHeatMapSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapSortConfigurationOutput)
}

func (i TemplateHeatMapSortConfigurationArgs) ToTemplateHeatMapSortConfigurationPtrOutput() TemplateHeatMapSortConfigurationPtrOutput {
	return i.ToTemplateHeatMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateHeatMapSortConfigurationArgs) ToTemplateHeatMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapSortConfigurationOutput).ToTemplateHeatMapSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateHeatMapSortConfigurationPtrInput is an input type that accepts TemplateHeatMapSortConfigurationArgs, TemplateHeatMapSortConfigurationPtr and TemplateHeatMapSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateHeatMapSortConfigurationPtrInput` via:
//
//	        TemplateHeatMapSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateHeatMapSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateHeatMapSortConfigurationPtrOutput() TemplateHeatMapSortConfigurationPtrOutput
	ToTemplateHeatMapSortConfigurationPtrOutputWithContext(context.Context) TemplateHeatMapSortConfigurationPtrOutput
}

type templateHeatMapSortConfigurationPtrType TemplateHeatMapSortConfigurationArgs

func TemplateHeatMapSortConfigurationPtr(v *TemplateHeatMapSortConfigurationArgs) TemplateHeatMapSortConfigurationPtrInput {
	return (*templateHeatMapSortConfigurationPtrType)(v)
}

func (*templateHeatMapSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapSortConfiguration)(nil)).Elem()
}

func (i *templateHeatMapSortConfigurationPtrType) ToTemplateHeatMapSortConfigurationPtrOutput() TemplateHeatMapSortConfigurationPtrOutput {
	return i.ToTemplateHeatMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateHeatMapSortConfigurationPtrType) ToTemplateHeatMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapSortConfigurationPtrOutput)
}

type TemplateHeatMapSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapSortConfiguration)(nil)).Elem()
}

func (o TemplateHeatMapSortConfigurationOutput) ToTemplateHeatMapSortConfigurationOutput() TemplateHeatMapSortConfigurationOutput {
	return o
}

func (o TemplateHeatMapSortConfigurationOutput) ToTemplateHeatMapSortConfigurationOutputWithContext(ctx context.Context) TemplateHeatMapSortConfigurationOutput {
	return o
}

func (o TemplateHeatMapSortConfigurationOutput) ToTemplateHeatMapSortConfigurationPtrOutput() TemplateHeatMapSortConfigurationPtrOutput {
	return o.ToTemplateHeatMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateHeatMapSortConfigurationOutput) ToTemplateHeatMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHeatMapSortConfiguration) *TemplateHeatMapSortConfiguration {
		return &v
	}).(TemplateHeatMapSortConfigurationPtrOutput)
}

// The limit on the number of columns that are displayed in a heat map.
func (o TemplateHeatMapSortConfigurationOutput) HeatMapColumnItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.HeatMapColumnItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The column sort configuration for heat map for columns that aren't a part of a field well.
func (o TemplateHeatMapSortConfigurationOutput) HeatMapColumnSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateHeatMapSortConfiguration) []TemplateFieldSortOptions { return v.HeatMapColumnSort }).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of rows that are displayed in a heat map.
func (o TemplateHeatMapSortConfigurationOutput) HeatMapRowItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.HeatMapRowItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The field sort configuration of the rows fields.
func (o TemplateHeatMapSortConfigurationOutput) HeatMapRowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateHeatMapSortConfiguration) []TemplateFieldSortOptions { return v.HeatMapRowSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateHeatMapSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapSortConfiguration)(nil)).Elem()
}

func (o TemplateHeatMapSortConfigurationPtrOutput) ToTemplateHeatMapSortConfigurationPtrOutput() TemplateHeatMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateHeatMapSortConfigurationPtrOutput) ToTemplateHeatMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateHeatMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateHeatMapSortConfigurationPtrOutput) Elem() TemplateHeatMapSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateHeatMapSortConfiguration) TemplateHeatMapSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateHeatMapSortConfiguration
		return ret
	}).(TemplateHeatMapSortConfigurationOutput)
}

// The limit on the number of columns that are displayed in a heat map.
func (o TemplateHeatMapSortConfigurationPtrOutput) HeatMapColumnItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.HeatMapColumnItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The column sort configuration for heat map for columns that aren't a part of a field well.
func (o TemplateHeatMapSortConfigurationPtrOutput) HeatMapColumnSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateHeatMapSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.HeatMapColumnSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of rows that are displayed in a heat map.
func (o TemplateHeatMapSortConfigurationPtrOutput) HeatMapRowItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.HeatMapRowItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The field sort configuration of the rows fields.
func (o TemplateHeatMapSortConfigurationPtrOutput) HeatMapRowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateHeatMapSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.HeatMapRowSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateHeatMapVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a heat map.
	ChartConfiguration *TemplateHeatMapConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateHeatMapVisualInput is an input type that accepts TemplateHeatMapVisualArgs and TemplateHeatMapVisualOutput values.
// You can construct a concrete instance of `TemplateHeatMapVisualInput` via:
//
//	TemplateHeatMapVisualArgs{...}
type TemplateHeatMapVisualInput interface {
	pulumi.Input

	ToTemplateHeatMapVisualOutput() TemplateHeatMapVisualOutput
	ToTemplateHeatMapVisualOutputWithContext(context.Context) TemplateHeatMapVisualOutput
}

type TemplateHeatMapVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a heat map.
	ChartConfiguration TemplateHeatMapConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateHeatMapVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapVisual)(nil)).Elem()
}

func (i TemplateHeatMapVisualArgs) ToTemplateHeatMapVisualOutput() TemplateHeatMapVisualOutput {
	return i.ToTemplateHeatMapVisualOutputWithContext(context.Background())
}

func (i TemplateHeatMapVisualArgs) ToTemplateHeatMapVisualOutputWithContext(ctx context.Context) TemplateHeatMapVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapVisualOutput)
}

func (i TemplateHeatMapVisualArgs) ToTemplateHeatMapVisualPtrOutput() TemplateHeatMapVisualPtrOutput {
	return i.ToTemplateHeatMapVisualPtrOutputWithContext(context.Background())
}

func (i TemplateHeatMapVisualArgs) ToTemplateHeatMapVisualPtrOutputWithContext(ctx context.Context) TemplateHeatMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapVisualOutput).ToTemplateHeatMapVisualPtrOutputWithContext(ctx)
}

// TemplateHeatMapVisualPtrInput is an input type that accepts TemplateHeatMapVisualArgs, TemplateHeatMapVisualPtr and TemplateHeatMapVisualPtrOutput values.
// You can construct a concrete instance of `TemplateHeatMapVisualPtrInput` via:
//
//	        TemplateHeatMapVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateHeatMapVisualPtrInput interface {
	pulumi.Input

	ToTemplateHeatMapVisualPtrOutput() TemplateHeatMapVisualPtrOutput
	ToTemplateHeatMapVisualPtrOutputWithContext(context.Context) TemplateHeatMapVisualPtrOutput
}

type templateHeatMapVisualPtrType TemplateHeatMapVisualArgs

func TemplateHeatMapVisualPtr(v *TemplateHeatMapVisualArgs) TemplateHeatMapVisualPtrInput {
	return (*templateHeatMapVisualPtrType)(v)
}

func (*templateHeatMapVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapVisual)(nil)).Elem()
}

func (i *templateHeatMapVisualPtrType) ToTemplateHeatMapVisualPtrOutput() TemplateHeatMapVisualPtrOutput {
	return i.ToTemplateHeatMapVisualPtrOutputWithContext(context.Background())
}

func (i *templateHeatMapVisualPtrType) ToTemplateHeatMapVisualPtrOutputWithContext(ctx context.Context) TemplateHeatMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHeatMapVisualPtrOutput)
}

type TemplateHeatMapVisualOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHeatMapVisual)(nil)).Elem()
}

func (o TemplateHeatMapVisualOutput) ToTemplateHeatMapVisualOutput() TemplateHeatMapVisualOutput {
	return o
}

func (o TemplateHeatMapVisualOutput) ToTemplateHeatMapVisualOutputWithContext(ctx context.Context) TemplateHeatMapVisualOutput {
	return o
}

func (o TemplateHeatMapVisualOutput) ToTemplateHeatMapVisualPtrOutput() TemplateHeatMapVisualPtrOutput {
	return o.ToTemplateHeatMapVisualPtrOutputWithContext(context.Background())
}

func (o TemplateHeatMapVisualOutput) ToTemplateHeatMapVisualPtrOutputWithContext(ctx context.Context) TemplateHeatMapVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHeatMapVisual) *TemplateHeatMapVisual {
		return &v
	}).(TemplateHeatMapVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateHeatMapVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateHeatMapVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a heat map.
func (o TemplateHeatMapVisualOutput) ChartConfiguration() TemplateHeatMapConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapVisual) *TemplateHeatMapConfiguration { return v.ChartConfiguration }).(TemplateHeatMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateHeatMapVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateHeatMapVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateHeatMapVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateHeatMapVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateHeatMapVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateHeatMapVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateHeatMapVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateHeatMapVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateHeatMapVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateHeatMapVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHeatMapVisual)(nil)).Elem()
}

func (o TemplateHeatMapVisualPtrOutput) ToTemplateHeatMapVisualPtrOutput() TemplateHeatMapVisualPtrOutput {
	return o
}

func (o TemplateHeatMapVisualPtrOutput) ToTemplateHeatMapVisualPtrOutputWithContext(ctx context.Context) TemplateHeatMapVisualPtrOutput {
	return o
}

func (o TemplateHeatMapVisualPtrOutput) Elem() TemplateHeatMapVisualOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) TemplateHeatMapVisual {
		if v != nil {
			return *v
		}
		var ret TemplateHeatMapVisual
		return ret
	}).(TemplateHeatMapVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateHeatMapVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a heat map.
func (o TemplateHeatMapVisualPtrOutput) ChartConfiguration() TemplateHeatMapConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) *TemplateHeatMapConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateHeatMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateHeatMapVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateHeatMapVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateHeatMapVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateHeatMapVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateHeatMapVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateHeatMapVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateHistogramAggregatedFieldWells struct {
	// The value field wells of a histogram. Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateHistogramAggregatedFieldWellsInput is an input type that accepts TemplateHistogramAggregatedFieldWellsArgs and TemplateHistogramAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateHistogramAggregatedFieldWellsInput` via:
//
//	TemplateHistogramAggregatedFieldWellsArgs{...}
type TemplateHistogramAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateHistogramAggregatedFieldWellsOutput() TemplateHistogramAggregatedFieldWellsOutput
	ToTemplateHistogramAggregatedFieldWellsOutputWithContext(context.Context) TemplateHistogramAggregatedFieldWellsOutput
}

type TemplateHistogramAggregatedFieldWellsArgs struct {
	// The value field wells of a histogram. Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateHistogramAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateHistogramAggregatedFieldWellsArgs) ToTemplateHistogramAggregatedFieldWellsOutput() TemplateHistogramAggregatedFieldWellsOutput {
	return i.ToTemplateHistogramAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateHistogramAggregatedFieldWellsArgs) ToTemplateHistogramAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateHistogramAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramAggregatedFieldWellsOutput)
}

func (i TemplateHistogramAggregatedFieldWellsArgs) ToTemplateHistogramAggregatedFieldWellsPtrOutput() TemplateHistogramAggregatedFieldWellsPtrOutput {
	return i.ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateHistogramAggregatedFieldWellsArgs) ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramAggregatedFieldWellsOutput).ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateHistogramAggregatedFieldWellsPtrInput is an input type that accepts TemplateHistogramAggregatedFieldWellsArgs, TemplateHistogramAggregatedFieldWellsPtr and TemplateHistogramAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateHistogramAggregatedFieldWellsPtrInput` via:
//
//	        TemplateHistogramAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateHistogramAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateHistogramAggregatedFieldWellsPtrOutput() TemplateHistogramAggregatedFieldWellsPtrOutput
	ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateHistogramAggregatedFieldWellsPtrOutput
}

type templateHistogramAggregatedFieldWellsPtrType TemplateHistogramAggregatedFieldWellsArgs

func TemplateHistogramAggregatedFieldWellsPtr(v *TemplateHistogramAggregatedFieldWellsArgs) TemplateHistogramAggregatedFieldWellsPtrInput {
	return (*templateHistogramAggregatedFieldWellsPtrType)(v)
}

func (*templateHistogramAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramAggregatedFieldWells)(nil)).Elem()
}

func (i *templateHistogramAggregatedFieldWellsPtrType) ToTemplateHistogramAggregatedFieldWellsPtrOutput() TemplateHistogramAggregatedFieldWellsPtrOutput {
	return i.ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateHistogramAggregatedFieldWellsPtrType) ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramAggregatedFieldWellsPtrOutput)
}

type TemplateHistogramAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateHistogramAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateHistogramAggregatedFieldWellsOutput) ToTemplateHistogramAggregatedFieldWellsOutput() TemplateHistogramAggregatedFieldWellsOutput {
	return o
}

func (o TemplateHistogramAggregatedFieldWellsOutput) ToTemplateHistogramAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateHistogramAggregatedFieldWellsOutput {
	return o
}

func (o TemplateHistogramAggregatedFieldWellsOutput) ToTemplateHistogramAggregatedFieldWellsPtrOutput() TemplateHistogramAggregatedFieldWellsPtrOutput {
	return o.ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateHistogramAggregatedFieldWellsOutput) ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHistogramAggregatedFieldWells) *TemplateHistogramAggregatedFieldWells {
		return &v
	}).(TemplateHistogramAggregatedFieldWellsPtrOutput)
}

// The value field wells of a histogram. Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
func (o TemplateHistogramAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateHistogramAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateHistogramAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateHistogramAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateHistogramAggregatedFieldWellsPtrOutput) ToTemplateHistogramAggregatedFieldWellsPtrOutput() TemplateHistogramAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateHistogramAggregatedFieldWellsPtrOutput) ToTemplateHistogramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateHistogramAggregatedFieldWellsPtrOutput) Elem() TemplateHistogramAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateHistogramAggregatedFieldWells) TemplateHistogramAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateHistogramAggregatedFieldWells
		return ret
	}).(TemplateHistogramAggregatedFieldWellsOutput)
}

// The value field wells of a histogram. Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
func (o TemplateHistogramAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateHistogramAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateHistogramBinOptions struct {
	// The options that determine the bin count of a histogram.
	BinCount *TemplateBinCountOptions `pulumi:"binCount"`
	// The options that determine the bin width of a histogram.
	BinWidth *TemplateBinWidthOptions `pulumi:"binWidth"`
	// The options that determine the selected bin type.
	SelectedBinType *TemplateHistogramBinType `pulumi:"selectedBinType"`
	// The options that determine the bin start value.
	StartValue *float64 `pulumi:"startValue"`
}

// TemplateHistogramBinOptionsInput is an input type that accepts TemplateHistogramBinOptionsArgs and TemplateHistogramBinOptionsOutput values.
// You can construct a concrete instance of `TemplateHistogramBinOptionsInput` via:
//
//	TemplateHistogramBinOptionsArgs{...}
type TemplateHistogramBinOptionsInput interface {
	pulumi.Input

	ToTemplateHistogramBinOptionsOutput() TemplateHistogramBinOptionsOutput
	ToTemplateHistogramBinOptionsOutputWithContext(context.Context) TemplateHistogramBinOptionsOutput
}

type TemplateHistogramBinOptionsArgs struct {
	// The options that determine the bin count of a histogram.
	BinCount TemplateBinCountOptionsPtrInput `pulumi:"binCount"`
	// The options that determine the bin width of a histogram.
	BinWidth TemplateBinWidthOptionsPtrInput `pulumi:"binWidth"`
	// The options that determine the selected bin type.
	SelectedBinType TemplateHistogramBinTypePtrInput `pulumi:"selectedBinType"`
	// The options that determine the bin start value.
	StartValue pulumi.Float64PtrInput `pulumi:"startValue"`
}

func (TemplateHistogramBinOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramBinOptions)(nil)).Elem()
}

func (i TemplateHistogramBinOptionsArgs) ToTemplateHistogramBinOptionsOutput() TemplateHistogramBinOptionsOutput {
	return i.ToTemplateHistogramBinOptionsOutputWithContext(context.Background())
}

func (i TemplateHistogramBinOptionsArgs) ToTemplateHistogramBinOptionsOutputWithContext(ctx context.Context) TemplateHistogramBinOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramBinOptionsOutput)
}

func (i TemplateHistogramBinOptionsArgs) ToTemplateHistogramBinOptionsPtrOutput() TemplateHistogramBinOptionsPtrOutput {
	return i.ToTemplateHistogramBinOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateHistogramBinOptionsArgs) ToTemplateHistogramBinOptionsPtrOutputWithContext(ctx context.Context) TemplateHistogramBinOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramBinOptionsOutput).ToTemplateHistogramBinOptionsPtrOutputWithContext(ctx)
}

// TemplateHistogramBinOptionsPtrInput is an input type that accepts TemplateHistogramBinOptionsArgs, TemplateHistogramBinOptionsPtr and TemplateHistogramBinOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateHistogramBinOptionsPtrInput` via:
//
//	        TemplateHistogramBinOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateHistogramBinOptionsPtrInput interface {
	pulumi.Input

	ToTemplateHistogramBinOptionsPtrOutput() TemplateHistogramBinOptionsPtrOutput
	ToTemplateHistogramBinOptionsPtrOutputWithContext(context.Context) TemplateHistogramBinOptionsPtrOutput
}

type templateHistogramBinOptionsPtrType TemplateHistogramBinOptionsArgs

func TemplateHistogramBinOptionsPtr(v *TemplateHistogramBinOptionsArgs) TemplateHistogramBinOptionsPtrInput {
	return (*templateHistogramBinOptionsPtrType)(v)
}

func (*templateHistogramBinOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramBinOptions)(nil)).Elem()
}

func (i *templateHistogramBinOptionsPtrType) ToTemplateHistogramBinOptionsPtrOutput() TemplateHistogramBinOptionsPtrOutput {
	return i.ToTemplateHistogramBinOptionsPtrOutputWithContext(context.Background())
}

func (i *templateHistogramBinOptionsPtrType) ToTemplateHistogramBinOptionsPtrOutputWithContext(ctx context.Context) TemplateHistogramBinOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramBinOptionsPtrOutput)
}

type TemplateHistogramBinOptionsOutput struct{ *pulumi.OutputState }

func (TemplateHistogramBinOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramBinOptions)(nil)).Elem()
}

func (o TemplateHistogramBinOptionsOutput) ToTemplateHistogramBinOptionsOutput() TemplateHistogramBinOptionsOutput {
	return o
}

func (o TemplateHistogramBinOptionsOutput) ToTemplateHistogramBinOptionsOutputWithContext(ctx context.Context) TemplateHistogramBinOptionsOutput {
	return o
}

func (o TemplateHistogramBinOptionsOutput) ToTemplateHistogramBinOptionsPtrOutput() TemplateHistogramBinOptionsPtrOutput {
	return o.ToTemplateHistogramBinOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateHistogramBinOptionsOutput) ToTemplateHistogramBinOptionsPtrOutputWithContext(ctx context.Context) TemplateHistogramBinOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHistogramBinOptions) *TemplateHistogramBinOptions {
		return &v
	}).(TemplateHistogramBinOptionsPtrOutput)
}

// The options that determine the bin count of a histogram.
func (o TemplateHistogramBinOptionsOutput) BinCount() TemplateBinCountOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramBinOptions) *TemplateBinCountOptions { return v.BinCount }).(TemplateBinCountOptionsPtrOutput)
}

// The options that determine the bin width of a histogram.
func (o TemplateHistogramBinOptionsOutput) BinWidth() TemplateBinWidthOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramBinOptions) *TemplateBinWidthOptions { return v.BinWidth }).(TemplateBinWidthOptionsPtrOutput)
}

// The options that determine the selected bin type.
func (o TemplateHistogramBinOptionsOutput) SelectedBinType() TemplateHistogramBinTypePtrOutput {
	return o.ApplyT(func(v TemplateHistogramBinOptions) *TemplateHistogramBinType { return v.SelectedBinType }).(TemplateHistogramBinTypePtrOutput)
}

// The options that determine the bin start value.
func (o TemplateHistogramBinOptionsOutput) StartValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateHistogramBinOptions) *float64 { return v.StartValue }).(pulumi.Float64PtrOutput)
}

type TemplateHistogramBinOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateHistogramBinOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramBinOptions)(nil)).Elem()
}

func (o TemplateHistogramBinOptionsPtrOutput) ToTemplateHistogramBinOptionsPtrOutput() TemplateHistogramBinOptionsPtrOutput {
	return o
}

func (o TemplateHistogramBinOptionsPtrOutput) ToTemplateHistogramBinOptionsPtrOutputWithContext(ctx context.Context) TemplateHistogramBinOptionsPtrOutput {
	return o
}

func (o TemplateHistogramBinOptionsPtrOutput) Elem() TemplateHistogramBinOptionsOutput {
	return o.ApplyT(func(v *TemplateHistogramBinOptions) TemplateHistogramBinOptions {
		if v != nil {
			return *v
		}
		var ret TemplateHistogramBinOptions
		return ret
	}).(TemplateHistogramBinOptionsOutput)
}

// The options that determine the bin count of a histogram.
func (o TemplateHistogramBinOptionsPtrOutput) BinCount() TemplateBinCountOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramBinOptions) *TemplateBinCountOptions {
		if v == nil {
			return nil
		}
		return v.BinCount
	}).(TemplateBinCountOptionsPtrOutput)
}

// The options that determine the bin width of a histogram.
func (o TemplateHistogramBinOptionsPtrOutput) BinWidth() TemplateBinWidthOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramBinOptions) *TemplateBinWidthOptions {
		if v == nil {
			return nil
		}
		return v.BinWidth
	}).(TemplateBinWidthOptionsPtrOutput)
}

// The options that determine the selected bin type.
func (o TemplateHistogramBinOptionsPtrOutput) SelectedBinType() TemplateHistogramBinTypePtrOutput {
	return o.ApplyT(func(v *TemplateHistogramBinOptions) *TemplateHistogramBinType {
		if v == nil {
			return nil
		}
		return v.SelectedBinType
	}).(TemplateHistogramBinTypePtrOutput)
}

// The options that determine the bin start value.
func (o TemplateHistogramBinOptionsPtrOutput) StartValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateHistogramBinOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.StartValue
	}).(pulumi.Float64PtrOutput)
}

type TemplateHistogramConfiguration struct {
	// The options that determine the presentation of histogram bins.
	BinOptions *TemplateHistogramBinOptions `pulumi:"binOptions"`
	// The data label configuration of a histogram.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field well configuration of a histogram.
	FieldWells *TemplateHistogramFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The tooltip configuration of a histogram.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The visual palette configuration of a histogram.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
	// The options that determine the presentation of the x-axis.
	XAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"xAxisDisplayOptions"`
	// The options that determine the presentation of the x-axis label.
	XAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"xAxisLabelOptions"`
	// The options that determine the presentation of the y-axis.
	YAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"yAxisDisplayOptions"`
}

// TemplateHistogramConfigurationInput is an input type that accepts TemplateHistogramConfigurationArgs and TemplateHistogramConfigurationOutput values.
// You can construct a concrete instance of `TemplateHistogramConfigurationInput` via:
//
//	TemplateHistogramConfigurationArgs{...}
type TemplateHistogramConfigurationInput interface {
	pulumi.Input

	ToTemplateHistogramConfigurationOutput() TemplateHistogramConfigurationOutput
	ToTemplateHistogramConfigurationOutputWithContext(context.Context) TemplateHistogramConfigurationOutput
}

type TemplateHistogramConfigurationArgs struct {
	// The options that determine the presentation of histogram bins.
	BinOptions TemplateHistogramBinOptionsPtrInput `pulumi:"binOptions"`
	// The data label configuration of a histogram.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field well configuration of a histogram.
	FieldWells TemplateHistogramFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The tooltip configuration of a histogram.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The visual palette configuration of a histogram.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
	// The options that determine the presentation of the x-axis.
	XAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"xAxisDisplayOptions"`
	// The options that determine the presentation of the x-axis label.
	XAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"xAxisLabelOptions"`
	// The options that determine the presentation of the y-axis.
	YAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"yAxisDisplayOptions"`
}

func (TemplateHistogramConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramConfiguration)(nil)).Elem()
}

func (i TemplateHistogramConfigurationArgs) ToTemplateHistogramConfigurationOutput() TemplateHistogramConfigurationOutput {
	return i.ToTemplateHistogramConfigurationOutputWithContext(context.Background())
}

func (i TemplateHistogramConfigurationArgs) ToTemplateHistogramConfigurationOutputWithContext(ctx context.Context) TemplateHistogramConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramConfigurationOutput)
}

func (i TemplateHistogramConfigurationArgs) ToTemplateHistogramConfigurationPtrOutput() TemplateHistogramConfigurationPtrOutput {
	return i.ToTemplateHistogramConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateHistogramConfigurationArgs) ToTemplateHistogramConfigurationPtrOutputWithContext(ctx context.Context) TemplateHistogramConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramConfigurationOutput).ToTemplateHistogramConfigurationPtrOutputWithContext(ctx)
}

// TemplateHistogramConfigurationPtrInput is an input type that accepts TemplateHistogramConfigurationArgs, TemplateHistogramConfigurationPtr and TemplateHistogramConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateHistogramConfigurationPtrInput` via:
//
//	        TemplateHistogramConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateHistogramConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateHistogramConfigurationPtrOutput() TemplateHistogramConfigurationPtrOutput
	ToTemplateHistogramConfigurationPtrOutputWithContext(context.Context) TemplateHistogramConfigurationPtrOutput
}

type templateHistogramConfigurationPtrType TemplateHistogramConfigurationArgs

func TemplateHistogramConfigurationPtr(v *TemplateHistogramConfigurationArgs) TemplateHistogramConfigurationPtrInput {
	return (*templateHistogramConfigurationPtrType)(v)
}

func (*templateHistogramConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramConfiguration)(nil)).Elem()
}

func (i *templateHistogramConfigurationPtrType) ToTemplateHistogramConfigurationPtrOutput() TemplateHistogramConfigurationPtrOutput {
	return i.ToTemplateHistogramConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateHistogramConfigurationPtrType) ToTemplateHistogramConfigurationPtrOutputWithContext(ctx context.Context) TemplateHistogramConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramConfigurationPtrOutput)
}

type TemplateHistogramConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateHistogramConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramConfiguration)(nil)).Elem()
}

func (o TemplateHistogramConfigurationOutput) ToTemplateHistogramConfigurationOutput() TemplateHistogramConfigurationOutput {
	return o
}

func (o TemplateHistogramConfigurationOutput) ToTemplateHistogramConfigurationOutputWithContext(ctx context.Context) TemplateHistogramConfigurationOutput {
	return o
}

func (o TemplateHistogramConfigurationOutput) ToTemplateHistogramConfigurationPtrOutput() TemplateHistogramConfigurationPtrOutput {
	return o.ToTemplateHistogramConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateHistogramConfigurationOutput) ToTemplateHistogramConfigurationPtrOutputWithContext(ctx context.Context) TemplateHistogramConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHistogramConfiguration) *TemplateHistogramConfiguration {
		return &v
	}).(TemplateHistogramConfigurationPtrOutput)
}

// The options that determine the presentation of histogram bins.
func (o TemplateHistogramConfigurationOutput) BinOptions() TemplateHistogramBinOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateHistogramBinOptions { return v.BinOptions }).(TemplateHistogramBinOptionsPtrOutput)
}

// The data label configuration of a histogram.
func (o TemplateHistogramConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a histogram.
func (o TemplateHistogramConfigurationOutput) FieldWells() TemplateHistogramFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateHistogramFieldWells { return v.FieldWells }).(TemplateHistogramFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateHistogramConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The tooltip configuration of a histogram.
func (o TemplateHistogramConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The visual palette configuration of a histogram.
func (o TemplateHistogramConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of the x-axis.
func (o TemplateHistogramConfigurationOutput) XAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateAxisDisplayOptions { return v.XAxisDisplayOptions }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the x-axis label.
func (o TemplateHistogramConfigurationOutput) XAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateChartAxisLabelOptions { return v.XAxisLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o TemplateHistogramConfigurationOutput) YAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramConfiguration) *TemplateAxisDisplayOptions { return v.YAxisDisplayOptions }).(TemplateAxisDisplayOptionsPtrOutput)
}

type TemplateHistogramConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateHistogramConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramConfiguration)(nil)).Elem()
}

func (o TemplateHistogramConfigurationPtrOutput) ToTemplateHistogramConfigurationPtrOutput() TemplateHistogramConfigurationPtrOutput {
	return o
}

func (o TemplateHistogramConfigurationPtrOutput) ToTemplateHistogramConfigurationPtrOutputWithContext(ctx context.Context) TemplateHistogramConfigurationPtrOutput {
	return o
}

func (o TemplateHistogramConfigurationPtrOutput) Elem() TemplateHistogramConfigurationOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) TemplateHistogramConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateHistogramConfiguration
		return ret
	}).(TemplateHistogramConfigurationOutput)
}

// The options that determine the presentation of histogram bins.
func (o TemplateHistogramConfigurationPtrOutput) BinOptions() TemplateHistogramBinOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateHistogramBinOptions {
		if v == nil {
			return nil
		}
		return v.BinOptions
	}).(TemplateHistogramBinOptionsPtrOutput)
}

// The data label configuration of a histogram.
func (o TemplateHistogramConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a histogram.
func (o TemplateHistogramConfigurationPtrOutput) FieldWells() TemplateHistogramFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateHistogramFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateHistogramFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateHistogramConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The tooltip configuration of a histogram.
func (o TemplateHistogramConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The visual palette configuration of a histogram.
func (o TemplateHistogramConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of the x-axis.
func (o TemplateHistogramConfigurationPtrOutput) XAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.XAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the x-axis label.
func (o TemplateHistogramConfigurationPtrOutput) XAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.XAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o TemplateHistogramConfigurationPtrOutput) YAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.YAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

type TemplateHistogramFieldWells struct {
	// The field well configuration of a histogram.
	HistogramAggregatedFieldWells *TemplateHistogramAggregatedFieldWells `pulumi:"histogramAggregatedFieldWells"`
}

// TemplateHistogramFieldWellsInput is an input type that accepts TemplateHistogramFieldWellsArgs and TemplateHistogramFieldWellsOutput values.
// You can construct a concrete instance of `TemplateHistogramFieldWellsInput` via:
//
//	TemplateHistogramFieldWellsArgs{...}
type TemplateHistogramFieldWellsInput interface {
	pulumi.Input

	ToTemplateHistogramFieldWellsOutput() TemplateHistogramFieldWellsOutput
	ToTemplateHistogramFieldWellsOutputWithContext(context.Context) TemplateHistogramFieldWellsOutput
}

type TemplateHistogramFieldWellsArgs struct {
	// The field well configuration of a histogram.
	HistogramAggregatedFieldWells TemplateHistogramAggregatedFieldWellsPtrInput `pulumi:"histogramAggregatedFieldWells"`
}

func (TemplateHistogramFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramFieldWells)(nil)).Elem()
}

func (i TemplateHistogramFieldWellsArgs) ToTemplateHistogramFieldWellsOutput() TemplateHistogramFieldWellsOutput {
	return i.ToTemplateHistogramFieldWellsOutputWithContext(context.Background())
}

func (i TemplateHistogramFieldWellsArgs) ToTemplateHistogramFieldWellsOutputWithContext(ctx context.Context) TemplateHistogramFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramFieldWellsOutput)
}

func (i TemplateHistogramFieldWellsArgs) ToTemplateHistogramFieldWellsPtrOutput() TemplateHistogramFieldWellsPtrOutput {
	return i.ToTemplateHistogramFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateHistogramFieldWellsArgs) ToTemplateHistogramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramFieldWellsOutput).ToTemplateHistogramFieldWellsPtrOutputWithContext(ctx)
}

// TemplateHistogramFieldWellsPtrInput is an input type that accepts TemplateHistogramFieldWellsArgs, TemplateHistogramFieldWellsPtr and TemplateHistogramFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateHistogramFieldWellsPtrInput` via:
//
//	        TemplateHistogramFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateHistogramFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateHistogramFieldWellsPtrOutput() TemplateHistogramFieldWellsPtrOutput
	ToTemplateHistogramFieldWellsPtrOutputWithContext(context.Context) TemplateHistogramFieldWellsPtrOutput
}

type templateHistogramFieldWellsPtrType TemplateHistogramFieldWellsArgs

func TemplateHistogramFieldWellsPtr(v *TemplateHistogramFieldWellsArgs) TemplateHistogramFieldWellsPtrInput {
	return (*templateHistogramFieldWellsPtrType)(v)
}

func (*templateHistogramFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramFieldWells)(nil)).Elem()
}

func (i *templateHistogramFieldWellsPtrType) ToTemplateHistogramFieldWellsPtrOutput() TemplateHistogramFieldWellsPtrOutput {
	return i.ToTemplateHistogramFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateHistogramFieldWellsPtrType) ToTemplateHistogramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramFieldWellsPtrOutput)
}

type TemplateHistogramFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateHistogramFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramFieldWells)(nil)).Elem()
}

func (o TemplateHistogramFieldWellsOutput) ToTemplateHistogramFieldWellsOutput() TemplateHistogramFieldWellsOutput {
	return o
}

func (o TemplateHistogramFieldWellsOutput) ToTemplateHistogramFieldWellsOutputWithContext(ctx context.Context) TemplateHistogramFieldWellsOutput {
	return o
}

func (o TemplateHistogramFieldWellsOutput) ToTemplateHistogramFieldWellsPtrOutput() TemplateHistogramFieldWellsPtrOutput {
	return o.ToTemplateHistogramFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateHistogramFieldWellsOutput) ToTemplateHistogramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHistogramFieldWells) *TemplateHistogramFieldWells {
		return &v
	}).(TemplateHistogramFieldWellsPtrOutput)
}

// The field well configuration of a histogram.
func (o TemplateHistogramFieldWellsOutput) HistogramAggregatedFieldWells() TemplateHistogramAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramFieldWells) *TemplateHistogramAggregatedFieldWells {
		return v.HistogramAggregatedFieldWells
	}).(TemplateHistogramAggregatedFieldWellsPtrOutput)
}

type TemplateHistogramFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateHistogramFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramFieldWells)(nil)).Elem()
}

func (o TemplateHistogramFieldWellsPtrOutput) ToTemplateHistogramFieldWellsPtrOutput() TemplateHistogramFieldWellsPtrOutput {
	return o
}

func (o TemplateHistogramFieldWellsPtrOutput) ToTemplateHistogramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateHistogramFieldWellsPtrOutput {
	return o
}

func (o TemplateHistogramFieldWellsPtrOutput) Elem() TemplateHistogramFieldWellsOutput {
	return o.ApplyT(func(v *TemplateHistogramFieldWells) TemplateHistogramFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateHistogramFieldWells
		return ret
	}).(TemplateHistogramFieldWellsOutput)
}

// The field well configuration of a histogram.
func (o TemplateHistogramFieldWellsPtrOutput) HistogramAggregatedFieldWells() TemplateHistogramAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramFieldWells) *TemplateHistogramAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.HistogramAggregatedFieldWells
	}).(TemplateHistogramAggregatedFieldWellsPtrOutput)
}

type TemplateHistogramVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration for a `HistogramVisual` .
	ChartConfiguration *TemplateHistogramConfiguration `pulumi:"chartConfiguration"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateHistogramVisualInput is an input type that accepts TemplateHistogramVisualArgs and TemplateHistogramVisualOutput values.
// You can construct a concrete instance of `TemplateHistogramVisualInput` via:
//
//	TemplateHistogramVisualArgs{...}
type TemplateHistogramVisualInput interface {
	pulumi.Input

	ToTemplateHistogramVisualOutput() TemplateHistogramVisualOutput
	ToTemplateHistogramVisualOutputWithContext(context.Context) TemplateHistogramVisualOutput
}

type TemplateHistogramVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration for a `HistogramVisual` .
	ChartConfiguration TemplateHistogramConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateHistogramVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramVisual)(nil)).Elem()
}

func (i TemplateHistogramVisualArgs) ToTemplateHistogramVisualOutput() TemplateHistogramVisualOutput {
	return i.ToTemplateHistogramVisualOutputWithContext(context.Background())
}

func (i TemplateHistogramVisualArgs) ToTemplateHistogramVisualOutputWithContext(ctx context.Context) TemplateHistogramVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramVisualOutput)
}

func (i TemplateHistogramVisualArgs) ToTemplateHistogramVisualPtrOutput() TemplateHistogramVisualPtrOutput {
	return i.ToTemplateHistogramVisualPtrOutputWithContext(context.Background())
}

func (i TemplateHistogramVisualArgs) ToTemplateHistogramVisualPtrOutputWithContext(ctx context.Context) TemplateHistogramVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramVisualOutput).ToTemplateHistogramVisualPtrOutputWithContext(ctx)
}

// TemplateHistogramVisualPtrInput is an input type that accepts TemplateHistogramVisualArgs, TemplateHistogramVisualPtr and TemplateHistogramVisualPtrOutput values.
// You can construct a concrete instance of `TemplateHistogramVisualPtrInput` via:
//
//	        TemplateHistogramVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateHistogramVisualPtrInput interface {
	pulumi.Input

	ToTemplateHistogramVisualPtrOutput() TemplateHistogramVisualPtrOutput
	ToTemplateHistogramVisualPtrOutputWithContext(context.Context) TemplateHistogramVisualPtrOutput
}

type templateHistogramVisualPtrType TemplateHistogramVisualArgs

func TemplateHistogramVisualPtr(v *TemplateHistogramVisualArgs) TemplateHistogramVisualPtrInput {
	return (*templateHistogramVisualPtrType)(v)
}

func (*templateHistogramVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramVisual)(nil)).Elem()
}

func (i *templateHistogramVisualPtrType) ToTemplateHistogramVisualPtrOutput() TemplateHistogramVisualPtrOutput {
	return i.ToTemplateHistogramVisualPtrOutputWithContext(context.Background())
}

func (i *templateHistogramVisualPtrType) ToTemplateHistogramVisualPtrOutputWithContext(ctx context.Context) TemplateHistogramVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateHistogramVisualPtrOutput)
}

type TemplateHistogramVisualOutput struct{ *pulumi.OutputState }

func (TemplateHistogramVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateHistogramVisual)(nil)).Elem()
}

func (o TemplateHistogramVisualOutput) ToTemplateHistogramVisualOutput() TemplateHistogramVisualOutput {
	return o
}

func (o TemplateHistogramVisualOutput) ToTemplateHistogramVisualOutputWithContext(ctx context.Context) TemplateHistogramVisualOutput {
	return o
}

func (o TemplateHistogramVisualOutput) ToTemplateHistogramVisualPtrOutput() TemplateHistogramVisualPtrOutput {
	return o.ToTemplateHistogramVisualPtrOutputWithContext(context.Background())
}

func (o TemplateHistogramVisualOutput) ToTemplateHistogramVisualPtrOutputWithContext(ctx context.Context) TemplateHistogramVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateHistogramVisual) *TemplateHistogramVisual {
		return &v
	}).(TemplateHistogramVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateHistogramVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateHistogramVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration for a `HistogramVisual` .
func (o TemplateHistogramVisualOutput) ChartConfiguration() TemplateHistogramConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateHistogramVisual) *TemplateHistogramConfiguration { return v.ChartConfiguration }).(TemplateHistogramConfigurationPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateHistogramVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateHistogramVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateHistogramVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateHistogramVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateHistogramVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateHistogramVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateHistogramVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateHistogramVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateHistogramVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateHistogramVisual)(nil)).Elem()
}

func (o TemplateHistogramVisualPtrOutput) ToTemplateHistogramVisualPtrOutput() TemplateHistogramVisualPtrOutput {
	return o
}

func (o TemplateHistogramVisualPtrOutput) ToTemplateHistogramVisualPtrOutputWithContext(ctx context.Context) TemplateHistogramVisualPtrOutput {
	return o
}

func (o TemplateHistogramVisualPtrOutput) Elem() TemplateHistogramVisualOutput {
	return o.ApplyT(func(v *TemplateHistogramVisual) TemplateHistogramVisual {
		if v != nil {
			return *v
		}
		var ret TemplateHistogramVisual
		return ret
	}).(TemplateHistogramVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateHistogramVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateHistogramVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration for a `HistogramVisual` .
func (o TemplateHistogramVisualPtrOutput) ChartConfiguration() TemplateHistogramConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramVisual) *TemplateHistogramConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateHistogramConfigurationPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateHistogramVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateHistogramVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateHistogramVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateHistogramVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateHistogramVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateImageCustomAction struct {
	// A list of `ImageCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations []TemplateImageCustomActionOperation `pulumi:"actionOperations"`
	// The ID of the custom action.
	CustomActionId string `pulumi:"customActionId"`
	// The name of the custom action.
	Name string `pulumi:"name"`
	// The status of the custom action.
	Status *TemplateWidgetStatus `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger TemplateImageCustomActionTrigger `pulumi:"trigger"`
}

// TemplateImageCustomActionInput is an input type that accepts TemplateImageCustomActionArgs and TemplateImageCustomActionOutput values.
// You can construct a concrete instance of `TemplateImageCustomActionInput` via:
//
//	TemplateImageCustomActionArgs{...}
type TemplateImageCustomActionInput interface {
	pulumi.Input

	ToTemplateImageCustomActionOutput() TemplateImageCustomActionOutput
	ToTemplateImageCustomActionOutputWithContext(context.Context) TemplateImageCustomActionOutput
}

type TemplateImageCustomActionArgs struct {
	// A list of `ImageCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations TemplateImageCustomActionOperationArrayInput `pulumi:"actionOperations"`
	// The ID of the custom action.
	CustomActionId pulumi.StringInput `pulumi:"customActionId"`
	// The name of the custom action.
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the custom action.
	Status TemplateWidgetStatusPtrInput `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger TemplateImageCustomActionTriggerInput `pulumi:"trigger"`
}

func (TemplateImageCustomActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageCustomAction)(nil)).Elem()
}

func (i TemplateImageCustomActionArgs) ToTemplateImageCustomActionOutput() TemplateImageCustomActionOutput {
	return i.ToTemplateImageCustomActionOutputWithContext(context.Background())
}

func (i TemplateImageCustomActionArgs) ToTemplateImageCustomActionOutputWithContext(ctx context.Context) TemplateImageCustomActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageCustomActionOutput)
}

// TemplateImageCustomActionArrayInput is an input type that accepts TemplateImageCustomActionArray and TemplateImageCustomActionArrayOutput values.
// You can construct a concrete instance of `TemplateImageCustomActionArrayInput` via:
//
//	TemplateImageCustomActionArray{ TemplateImageCustomActionArgs{...} }
type TemplateImageCustomActionArrayInput interface {
	pulumi.Input

	ToTemplateImageCustomActionArrayOutput() TemplateImageCustomActionArrayOutput
	ToTemplateImageCustomActionArrayOutputWithContext(context.Context) TemplateImageCustomActionArrayOutput
}

type TemplateImageCustomActionArray []TemplateImageCustomActionInput

func (TemplateImageCustomActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateImageCustomAction)(nil)).Elem()
}

func (i TemplateImageCustomActionArray) ToTemplateImageCustomActionArrayOutput() TemplateImageCustomActionArrayOutput {
	return i.ToTemplateImageCustomActionArrayOutputWithContext(context.Background())
}

func (i TemplateImageCustomActionArray) ToTemplateImageCustomActionArrayOutputWithContext(ctx context.Context) TemplateImageCustomActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageCustomActionArrayOutput)
}

type TemplateImageCustomActionOutput struct{ *pulumi.OutputState }

func (TemplateImageCustomActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageCustomAction)(nil)).Elem()
}

func (o TemplateImageCustomActionOutput) ToTemplateImageCustomActionOutput() TemplateImageCustomActionOutput {
	return o
}

func (o TemplateImageCustomActionOutput) ToTemplateImageCustomActionOutputWithContext(ctx context.Context) TemplateImageCustomActionOutput {
	return o
}

// A list of `ImageCustomActionOperations` .
//
// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
func (o TemplateImageCustomActionOutput) ActionOperations() TemplateImageCustomActionOperationArrayOutput {
	return o.ApplyT(func(v TemplateImageCustomAction) []TemplateImageCustomActionOperation { return v.ActionOperations }).(TemplateImageCustomActionOperationArrayOutput)
}

// The ID of the custom action.
func (o TemplateImageCustomActionOutput) CustomActionId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateImageCustomAction) string { return v.CustomActionId }).(pulumi.StringOutput)
}

// The name of the custom action.
func (o TemplateImageCustomActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateImageCustomAction) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the custom action.
func (o TemplateImageCustomActionOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateImageCustomAction) *TemplateWidgetStatus { return v.Status }).(TemplateWidgetStatusPtrOutput)
}

// The trigger of the `VisualCustomAction` .
//
// Valid values are defined as follows:
//
// - `CLICK` : Initiates a custom action by a left pointer click on a data point.
// - `MENU` : Initiates a custom action by right pointer click from the menu.
func (o TemplateImageCustomActionOutput) Trigger() TemplateImageCustomActionTriggerOutput {
	return o.ApplyT(func(v TemplateImageCustomAction) TemplateImageCustomActionTrigger { return v.Trigger }).(TemplateImageCustomActionTriggerOutput)
}

type TemplateImageCustomActionArrayOutput struct{ *pulumi.OutputState }

func (TemplateImageCustomActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateImageCustomAction)(nil)).Elem()
}

func (o TemplateImageCustomActionArrayOutput) ToTemplateImageCustomActionArrayOutput() TemplateImageCustomActionArrayOutput {
	return o
}

func (o TemplateImageCustomActionArrayOutput) ToTemplateImageCustomActionArrayOutputWithContext(ctx context.Context) TemplateImageCustomActionArrayOutput {
	return o
}

func (o TemplateImageCustomActionArrayOutput) Index(i pulumi.IntInput) TemplateImageCustomActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateImageCustomAction {
		return vs[0].([]TemplateImageCustomAction)[vs[1].(int)]
	}).(TemplateImageCustomActionOutput)
}

type TemplateImageCustomActionOperation struct {
	NavigationOperation    *TemplateCustomActionNavigationOperation    `pulumi:"navigationOperation"`
	SetParametersOperation *TemplateCustomActionSetParametersOperation `pulumi:"setParametersOperation"`
	UrlOperation           *TemplateCustomActionUrlOperation           `pulumi:"urlOperation"`
}

// TemplateImageCustomActionOperationInput is an input type that accepts TemplateImageCustomActionOperationArgs and TemplateImageCustomActionOperationOutput values.
// You can construct a concrete instance of `TemplateImageCustomActionOperationInput` via:
//
//	TemplateImageCustomActionOperationArgs{...}
type TemplateImageCustomActionOperationInput interface {
	pulumi.Input

	ToTemplateImageCustomActionOperationOutput() TemplateImageCustomActionOperationOutput
	ToTemplateImageCustomActionOperationOutputWithContext(context.Context) TemplateImageCustomActionOperationOutput
}

type TemplateImageCustomActionOperationArgs struct {
	NavigationOperation    TemplateCustomActionNavigationOperationPtrInput    `pulumi:"navigationOperation"`
	SetParametersOperation TemplateCustomActionSetParametersOperationPtrInput `pulumi:"setParametersOperation"`
	UrlOperation           TemplateCustomActionUrlOperationPtrInput           `pulumi:"urlOperation"`
}

func (TemplateImageCustomActionOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageCustomActionOperation)(nil)).Elem()
}

func (i TemplateImageCustomActionOperationArgs) ToTemplateImageCustomActionOperationOutput() TemplateImageCustomActionOperationOutput {
	return i.ToTemplateImageCustomActionOperationOutputWithContext(context.Background())
}

func (i TemplateImageCustomActionOperationArgs) ToTemplateImageCustomActionOperationOutputWithContext(ctx context.Context) TemplateImageCustomActionOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageCustomActionOperationOutput)
}

// TemplateImageCustomActionOperationArrayInput is an input type that accepts TemplateImageCustomActionOperationArray and TemplateImageCustomActionOperationArrayOutput values.
// You can construct a concrete instance of `TemplateImageCustomActionOperationArrayInput` via:
//
//	TemplateImageCustomActionOperationArray{ TemplateImageCustomActionOperationArgs{...} }
type TemplateImageCustomActionOperationArrayInput interface {
	pulumi.Input

	ToTemplateImageCustomActionOperationArrayOutput() TemplateImageCustomActionOperationArrayOutput
	ToTemplateImageCustomActionOperationArrayOutputWithContext(context.Context) TemplateImageCustomActionOperationArrayOutput
}

type TemplateImageCustomActionOperationArray []TemplateImageCustomActionOperationInput

func (TemplateImageCustomActionOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateImageCustomActionOperation)(nil)).Elem()
}

func (i TemplateImageCustomActionOperationArray) ToTemplateImageCustomActionOperationArrayOutput() TemplateImageCustomActionOperationArrayOutput {
	return i.ToTemplateImageCustomActionOperationArrayOutputWithContext(context.Background())
}

func (i TemplateImageCustomActionOperationArray) ToTemplateImageCustomActionOperationArrayOutputWithContext(ctx context.Context) TemplateImageCustomActionOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageCustomActionOperationArrayOutput)
}

type TemplateImageCustomActionOperationOutput struct{ *pulumi.OutputState }

func (TemplateImageCustomActionOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageCustomActionOperation)(nil)).Elem()
}

func (o TemplateImageCustomActionOperationOutput) ToTemplateImageCustomActionOperationOutput() TemplateImageCustomActionOperationOutput {
	return o
}

func (o TemplateImageCustomActionOperationOutput) ToTemplateImageCustomActionOperationOutputWithContext(ctx context.Context) TemplateImageCustomActionOperationOutput {
	return o
}

func (o TemplateImageCustomActionOperationOutput) NavigationOperation() TemplateCustomActionNavigationOperationPtrOutput {
	return o.ApplyT(func(v TemplateImageCustomActionOperation) *TemplateCustomActionNavigationOperation {
		return v.NavigationOperation
	}).(TemplateCustomActionNavigationOperationPtrOutput)
}

func (o TemplateImageCustomActionOperationOutput) SetParametersOperation() TemplateCustomActionSetParametersOperationPtrOutput {
	return o.ApplyT(func(v TemplateImageCustomActionOperation) *TemplateCustomActionSetParametersOperation {
		return v.SetParametersOperation
	}).(TemplateCustomActionSetParametersOperationPtrOutput)
}

func (o TemplateImageCustomActionOperationOutput) UrlOperation() TemplateCustomActionUrlOperationPtrOutput {
	return o.ApplyT(func(v TemplateImageCustomActionOperation) *TemplateCustomActionUrlOperation { return v.UrlOperation }).(TemplateCustomActionUrlOperationPtrOutput)
}

type TemplateImageCustomActionOperationArrayOutput struct{ *pulumi.OutputState }

func (TemplateImageCustomActionOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateImageCustomActionOperation)(nil)).Elem()
}

func (o TemplateImageCustomActionOperationArrayOutput) ToTemplateImageCustomActionOperationArrayOutput() TemplateImageCustomActionOperationArrayOutput {
	return o
}

func (o TemplateImageCustomActionOperationArrayOutput) ToTemplateImageCustomActionOperationArrayOutputWithContext(ctx context.Context) TemplateImageCustomActionOperationArrayOutput {
	return o
}

func (o TemplateImageCustomActionOperationArrayOutput) Index(i pulumi.IntInput) TemplateImageCustomActionOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateImageCustomActionOperation {
		return vs[0].([]TemplateImageCustomActionOperation)[vs[1].(int)]
	}).(TemplateImageCustomActionOperationOutput)
}

type TemplateImageInteractionOptions struct {
	// The menu options for the image.
	ImageMenuOption *TemplateImageMenuOption `pulumi:"imageMenuOption"`
}

// TemplateImageInteractionOptionsInput is an input type that accepts TemplateImageInteractionOptionsArgs and TemplateImageInteractionOptionsOutput values.
// You can construct a concrete instance of `TemplateImageInteractionOptionsInput` via:
//
//	TemplateImageInteractionOptionsArgs{...}
type TemplateImageInteractionOptionsInput interface {
	pulumi.Input

	ToTemplateImageInteractionOptionsOutput() TemplateImageInteractionOptionsOutput
	ToTemplateImageInteractionOptionsOutputWithContext(context.Context) TemplateImageInteractionOptionsOutput
}

type TemplateImageInteractionOptionsArgs struct {
	// The menu options for the image.
	ImageMenuOption TemplateImageMenuOptionPtrInput `pulumi:"imageMenuOption"`
}

func (TemplateImageInteractionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageInteractionOptions)(nil)).Elem()
}

func (i TemplateImageInteractionOptionsArgs) ToTemplateImageInteractionOptionsOutput() TemplateImageInteractionOptionsOutput {
	return i.ToTemplateImageInteractionOptionsOutputWithContext(context.Background())
}

func (i TemplateImageInteractionOptionsArgs) ToTemplateImageInteractionOptionsOutputWithContext(ctx context.Context) TemplateImageInteractionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageInteractionOptionsOutput)
}

func (i TemplateImageInteractionOptionsArgs) ToTemplateImageInteractionOptionsPtrOutput() TemplateImageInteractionOptionsPtrOutput {
	return i.ToTemplateImageInteractionOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateImageInteractionOptionsArgs) ToTemplateImageInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateImageInteractionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageInteractionOptionsOutput).ToTemplateImageInteractionOptionsPtrOutputWithContext(ctx)
}

// TemplateImageInteractionOptionsPtrInput is an input type that accepts TemplateImageInteractionOptionsArgs, TemplateImageInteractionOptionsPtr and TemplateImageInteractionOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateImageInteractionOptionsPtrInput` via:
//
//	        TemplateImageInteractionOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateImageInteractionOptionsPtrInput interface {
	pulumi.Input

	ToTemplateImageInteractionOptionsPtrOutput() TemplateImageInteractionOptionsPtrOutput
	ToTemplateImageInteractionOptionsPtrOutputWithContext(context.Context) TemplateImageInteractionOptionsPtrOutput
}

type templateImageInteractionOptionsPtrType TemplateImageInteractionOptionsArgs

func TemplateImageInteractionOptionsPtr(v *TemplateImageInteractionOptionsArgs) TemplateImageInteractionOptionsPtrInput {
	return (*templateImageInteractionOptionsPtrType)(v)
}

func (*templateImageInteractionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateImageInteractionOptions)(nil)).Elem()
}

func (i *templateImageInteractionOptionsPtrType) ToTemplateImageInteractionOptionsPtrOutput() TemplateImageInteractionOptionsPtrOutput {
	return i.ToTemplateImageInteractionOptionsPtrOutputWithContext(context.Background())
}

func (i *templateImageInteractionOptionsPtrType) ToTemplateImageInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateImageInteractionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageInteractionOptionsPtrOutput)
}

type TemplateImageInteractionOptionsOutput struct{ *pulumi.OutputState }

func (TemplateImageInteractionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageInteractionOptions)(nil)).Elem()
}

func (o TemplateImageInteractionOptionsOutput) ToTemplateImageInteractionOptionsOutput() TemplateImageInteractionOptionsOutput {
	return o
}

func (o TemplateImageInteractionOptionsOutput) ToTemplateImageInteractionOptionsOutputWithContext(ctx context.Context) TemplateImageInteractionOptionsOutput {
	return o
}

func (o TemplateImageInteractionOptionsOutput) ToTemplateImageInteractionOptionsPtrOutput() TemplateImageInteractionOptionsPtrOutput {
	return o.ToTemplateImageInteractionOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateImageInteractionOptionsOutput) ToTemplateImageInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateImageInteractionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateImageInteractionOptions) *TemplateImageInteractionOptions {
		return &v
	}).(TemplateImageInteractionOptionsPtrOutput)
}

// The menu options for the image.
func (o TemplateImageInteractionOptionsOutput) ImageMenuOption() TemplateImageMenuOptionPtrOutput {
	return o.ApplyT(func(v TemplateImageInteractionOptions) *TemplateImageMenuOption { return v.ImageMenuOption }).(TemplateImageMenuOptionPtrOutput)
}

type TemplateImageInteractionOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateImageInteractionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateImageInteractionOptions)(nil)).Elem()
}

func (o TemplateImageInteractionOptionsPtrOutput) ToTemplateImageInteractionOptionsPtrOutput() TemplateImageInteractionOptionsPtrOutput {
	return o
}

func (o TemplateImageInteractionOptionsPtrOutput) ToTemplateImageInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateImageInteractionOptionsPtrOutput {
	return o
}

func (o TemplateImageInteractionOptionsPtrOutput) Elem() TemplateImageInteractionOptionsOutput {
	return o.ApplyT(func(v *TemplateImageInteractionOptions) TemplateImageInteractionOptions {
		if v != nil {
			return *v
		}
		var ret TemplateImageInteractionOptions
		return ret
	}).(TemplateImageInteractionOptionsOutput)
}

// The menu options for the image.
func (o TemplateImageInteractionOptionsPtrOutput) ImageMenuOption() TemplateImageMenuOptionPtrOutput {
	return o.ApplyT(func(v *TemplateImageInteractionOptions) *TemplateImageMenuOption {
		if v == nil {
			return nil
		}
		return v.ImageMenuOption
	}).(TemplateImageMenuOptionPtrOutput)
}

type TemplateImageMenuOption struct {
	// The availability status of the image menu. If the value of this property is set to `ENABLED` , dashboard readers can interact with the image menu.
	AvailabilityStatus *TemplateDashboardBehavior `pulumi:"availabilityStatus"`
}

// TemplateImageMenuOptionInput is an input type that accepts TemplateImageMenuOptionArgs and TemplateImageMenuOptionOutput values.
// You can construct a concrete instance of `TemplateImageMenuOptionInput` via:
//
//	TemplateImageMenuOptionArgs{...}
type TemplateImageMenuOptionInput interface {
	pulumi.Input

	ToTemplateImageMenuOptionOutput() TemplateImageMenuOptionOutput
	ToTemplateImageMenuOptionOutputWithContext(context.Context) TemplateImageMenuOptionOutput
}

type TemplateImageMenuOptionArgs struct {
	// The availability status of the image menu. If the value of this property is set to `ENABLED` , dashboard readers can interact with the image menu.
	AvailabilityStatus TemplateDashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (TemplateImageMenuOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageMenuOption)(nil)).Elem()
}

func (i TemplateImageMenuOptionArgs) ToTemplateImageMenuOptionOutput() TemplateImageMenuOptionOutput {
	return i.ToTemplateImageMenuOptionOutputWithContext(context.Background())
}

func (i TemplateImageMenuOptionArgs) ToTemplateImageMenuOptionOutputWithContext(ctx context.Context) TemplateImageMenuOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageMenuOptionOutput)
}

func (i TemplateImageMenuOptionArgs) ToTemplateImageMenuOptionPtrOutput() TemplateImageMenuOptionPtrOutput {
	return i.ToTemplateImageMenuOptionPtrOutputWithContext(context.Background())
}

func (i TemplateImageMenuOptionArgs) ToTemplateImageMenuOptionPtrOutputWithContext(ctx context.Context) TemplateImageMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageMenuOptionOutput).ToTemplateImageMenuOptionPtrOutputWithContext(ctx)
}

// TemplateImageMenuOptionPtrInput is an input type that accepts TemplateImageMenuOptionArgs, TemplateImageMenuOptionPtr and TemplateImageMenuOptionPtrOutput values.
// You can construct a concrete instance of `TemplateImageMenuOptionPtrInput` via:
//
//	        TemplateImageMenuOptionArgs{...}
//
//	or:
//
//	        nil
type TemplateImageMenuOptionPtrInput interface {
	pulumi.Input

	ToTemplateImageMenuOptionPtrOutput() TemplateImageMenuOptionPtrOutput
	ToTemplateImageMenuOptionPtrOutputWithContext(context.Context) TemplateImageMenuOptionPtrOutput
}

type templateImageMenuOptionPtrType TemplateImageMenuOptionArgs

func TemplateImageMenuOptionPtr(v *TemplateImageMenuOptionArgs) TemplateImageMenuOptionPtrInput {
	return (*templateImageMenuOptionPtrType)(v)
}

func (*templateImageMenuOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateImageMenuOption)(nil)).Elem()
}

func (i *templateImageMenuOptionPtrType) ToTemplateImageMenuOptionPtrOutput() TemplateImageMenuOptionPtrOutput {
	return i.ToTemplateImageMenuOptionPtrOutputWithContext(context.Background())
}

func (i *templateImageMenuOptionPtrType) ToTemplateImageMenuOptionPtrOutputWithContext(ctx context.Context) TemplateImageMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateImageMenuOptionPtrOutput)
}

type TemplateImageMenuOptionOutput struct{ *pulumi.OutputState }

func (TemplateImageMenuOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateImageMenuOption)(nil)).Elem()
}

func (o TemplateImageMenuOptionOutput) ToTemplateImageMenuOptionOutput() TemplateImageMenuOptionOutput {
	return o
}

func (o TemplateImageMenuOptionOutput) ToTemplateImageMenuOptionOutputWithContext(ctx context.Context) TemplateImageMenuOptionOutput {
	return o
}

func (o TemplateImageMenuOptionOutput) ToTemplateImageMenuOptionPtrOutput() TemplateImageMenuOptionPtrOutput {
	return o.ToTemplateImageMenuOptionPtrOutputWithContext(context.Background())
}

func (o TemplateImageMenuOptionOutput) ToTemplateImageMenuOptionPtrOutputWithContext(ctx context.Context) TemplateImageMenuOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateImageMenuOption) *TemplateImageMenuOption {
		return &v
	}).(TemplateImageMenuOptionPtrOutput)
}

// The availability status of the image menu. If the value of this property is set to `ENABLED` , dashboard readers can interact with the image menu.
func (o TemplateImageMenuOptionOutput) AvailabilityStatus() TemplateDashboardBehaviorPtrOutput {
	return o.ApplyT(func(v TemplateImageMenuOption) *TemplateDashboardBehavior { return v.AvailabilityStatus }).(TemplateDashboardBehaviorPtrOutput)
}

type TemplateImageMenuOptionPtrOutput struct{ *pulumi.OutputState }

func (TemplateImageMenuOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateImageMenuOption)(nil)).Elem()
}

func (o TemplateImageMenuOptionPtrOutput) ToTemplateImageMenuOptionPtrOutput() TemplateImageMenuOptionPtrOutput {
	return o
}

func (o TemplateImageMenuOptionPtrOutput) ToTemplateImageMenuOptionPtrOutputWithContext(ctx context.Context) TemplateImageMenuOptionPtrOutput {
	return o
}

func (o TemplateImageMenuOptionPtrOutput) Elem() TemplateImageMenuOptionOutput {
	return o.ApplyT(func(v *TemplateImageMenuOption) TemplateImageMenuOption {
		if v != nil {
			return *v
		}
		var ret TemplateImageMenuOption
		return ret
	}).(TemplateImageMenuOptionOutput)
}

// The availability status of the image menu. If the value of this property is set to `ENABLED` , dashboard readers can interact with the image menu.
func (o TemplateImageMenuOptionPtrOutput) AvailabilityStatus() TemplateDashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *TemplateImageMenuOption) *TemplateDashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(TemplateDashboardBehaviorPtrOutput)
}

type TemplateInnerFilter struct {
	// A `CategoryInnerFilter` filters text values for the `NestedFilter` .
	CategoryInnerFilter *TemplateCategoryInnerFilter `pulumi:"categoryInnerFilter"`
}

// TemplateInnerFilterInput is an input type that accepts TemplateInnerFilterArgs and TemplateInnerFilterOutput values.
// You can construct a concrete instance of `TemplateInnerFilterInput` via:
//
//	TemplateInnerFilterArgs{...}
type TemplateInnerFilterInput interface {
	pulumi.Input

	ToTemplateInnerFilterOutput() TemplateInnerFilterOutput
	ToTemplateInnerFilterOutputWithContext(context.Context) TemplateInnerFilterOutput
}

type TemplateInnerFilterArgs struct {
	// A `CategoryInnerFilter` filters text values for the `NestedFilter` .
	CategoryInnerFilter TemplateCategoryInnerFilterPtrInput `pulumi:"categoryInnerFilter"`
}

func (TemplateInnerFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateInnerFilter)(nil)).Elem()
}

func (i TemplateInnerFilterArgs) ToTemplateInnerFilterOutput() TemplateInnerFilterOutput {
	return i.ToTemplateInnerFilterOutputWithContext(context.Background())
}

func (i TemplateInnerFilterArgs) ToTemplateInnerFilterOutputWithContext(ctx context.Context) TemplateInnerFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInnerFilterOutput)
}

func (i TemplateInnerFilterArgs) ToTemplateInnerFilterPtrOutput() TemplateInnerFilterPtrOutput {
	return i.ToTemplateInnerFilterPtrOutputWithContext(context.Background())
}

func (i TemplateInnerFilterArgs) ToTemplateInnerFilterPtrOutputWithContext(ctx context.Context) TemplateInnerFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInnerFilterOutput).ToTemplateInnerFilterPtrOutputWithContext(ctx)
}

// TemplateInnerFilterPtrInput is an input type that accepts TemplateInnerFilterArgs, TemplateInnerFilterPtr and TemplateInnerFilterPtrOutput values.
// You can construct a concrete instance of `TemplateInnerFilterPtrInput` via:
//
//	        TemplateInnerFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateInnerFilterPtrInput interface {
	pulumi.Input

	ToTemplateInnerFilterPtrOutput() TemplateInnerFilterPtrOutput
	ToTemplateInnerFilterPtrOutputWithContext(context.Context) TemplateInnerFilterPtrOutput
}

type templateInnerFilterPtrType TemplateInnerFilterArgs

func TemplateInnerFilterPtr(v *TemplateInnerFilterArgs) TemplateInnerFilterPtrInput {
	return (*templateInnerFilterPtrType)(v)
}

func (*templateInnerFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateInnerFilter)(nil)).Elem()
}

func (i *templateInnerFilterPtrType) ToTemplateInnerFilterPtrOutput() TemplateInnerFilterPtrOutput {
	return i.ToTemplateInnerFilterPtrOutputWithContext(context.Background())
}

func (i *templateInnerFilterPtrType) ToTemplateInnerFilterPtrOutputWithContext(ctx context.Context) TemplateInnerFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInnerFilterPtrOutput)
}

type TemplateInnerFilterOutput struct{ *pulumi.OutputState }

func (TemplateInnerFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateInnerFilter)(nil)).Elem()
}

func (o TemplateInnerFilterOutput) ToTemplateInnerFilterOutput() TemplateInnerFilterOutput {
	return o
}

func (o TemplateInnerFilterOutput) ToTemplateInnerFilterOutputWithContext(ctx context.Context) TemplateInnerFilterOutput {
	return o
}

func (o TemplateInnerFilterOutput) ToTemplateInnerFilterPtrOutput() TemplateInnerFilterPtrOutput {
	return o.ToTemplateInnerFilterPtrOutputWithContext(context.Background())
}

func (o TemplateInnerFilterOutput) ToTemplateInnerFilterPtrOutputWithContext(ctx context.Context) TemplateInnerFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateInnerFilter) *TemplateInnerFilter {
		return &v
	}).(TemplateInnerFilterPtrOutput)
}

// A `CategoryInnerFilter` filters text values for the `NestedFilter` .
func (o TemplateInnerFilterOutput) CategoryInnerFilter() TemplateCategoryInnerFilterPtrOutput {
	return o.ApplyT(func(v TemplateInnerFilter) *TemplateCategoryInnerFilter { return v.CategoryInnerFilter }).(TemplateCategoryInnerFilterPtrOutput)
}

type TemplateInnerFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateInnerFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateInnerFilter)(nil)).Elem()
}

func (o TemplateInnerFilterPtrOutput) ToTemplateInnerFilterPtrOutput() TemplateInnerFilterPtrOutput {
	return o
}

func (o TemplateInnerFilterPtrOutput) ToTemplateInnerFilterPtrOutputWithContext(ctx context.Context) TemplateInnerFilterPtrOutput {
	return o
}

func (o TemplateInnerFilterPtrOutput) Elem() TemplateInnerFilterOutput {
	return o.ApplyT(func(v *TemplateInnerFilter) TemplateInnerFilter {
		if v != nil {
			return *v
		}
		var ret TemplateInnerFilter
		return ret
	}).(TemplateInnerFilterOutput)
}

// A `CategoryInnerFilter` filters text values for the `NestedFilter` .
func (o TemplateInnerFilterPtrOutput) CategoryInnerFilter() TemplateCategoryInnerFilterPtrOutput {
	return o.ApplyT(func(v *TemplateInnerFilter) *TemplateCategoryInnerFilter {
		if v == nil {
			return nil
		}
		return v.CategoryInnerFilter
	}).(TemplateCategoryInnerFilterPtrOutput)
}

type TemplateInsightConfiguration struct {
	// The computations configurations of the insight visual
	Computations []TemplateComputation `pulumi:"computations"`
	// The custom narrative of the insight visual.
	CustomNarrative *TemplateCustomNarrativeOptions `pulumi:"customNarrative"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
}

// TemplateInsightConfigurationInput is an input type that accepts TemplateInsightConfigurationArgs and TemplateInsightConfigurationOutput values.
// You can construct a concrete instance of `TemplateInsightConfigurationInput` via:
//
//	TemplateInsightConfigurationArgs{...}
type TemplateInsightConfigurationInput interface {
	pulumi.Input

	ToTemplateInsightConfigurationOutput() TemplateInsightConfigurationOutput
	ToTemplateInsightConfigurationOutputWithContext(context.Context) TemplateInsightConfigurationOutput
}

type TemplateInsightConfigurationArgs struct {
	// The computations configurations of the insight visual
	Computations TemplateComputationArrayInput `pulumi:"computations"`
	// The custom narrative of the insight visual.
	CustomNarrative TemplateCustomNarrativeOptionsPtrInput `pulumi:"customNarrative"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
}

func (TemplateInsightConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateInsightConfiguration)(nil)).Elem()
}

func (i TemplateInsightConfigurationArgs) ToTemplateInsightConfigurationOutput() TemplateInsightConfigurationOutput {
	return i.ToTemplateInsightConfigurationOutputWithContext(context.Background())
}

func (i TemplateInsightConfigurationArgs) ToTemplateInsightConfigurationOutputWithContext(ctx context.Context) TemplateInsightConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInsightConfigurationOutput)
}

func (i TemplateInsightConfigurationArgs) ToTemplateInsightConfigurationPtrOutput() TemplateInsightConfigurationPtrOutput {
	return i.ToTemplateInsightConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateInsightConfigurationArgs) ToTemplateInsightConfigurationPtrOutputWithContext(ctx context.Context) TemplateInsightConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInsightConfigurationOutput).ToTemplateInsightConfigurationPtrOutputWithContext(ctx)
}

// TemplateInsightConfigurationPtrInput is an input type that accepts TemplateInsightConfigurationArgs, TemplateInsightConfigurationPtr and TemplateInsightConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateInsightConfigurationPtrInput` via:
//
//	        TemplateInsightConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateInsightConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateInsightConfigurationPtrOutput() TemplateInsightConfigurationPtrOutput
	ToTemplateInsightConfigurationPtrOutputWithContext(context.Context) TemplateInsightConfigurationPtrOutput
}

type templateInsightConfigurationPtrType TemplateInsightConfigurationArgs

func TemplateInsightConfigurationPtr(v *TemplateInsightConfigurationArgs) TemplateInsightConfigurationPtrInput {
	return (*templateInsightConfigurationPtrType)(v)
}

func (*templateInsightConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateInsightConfiguration)(nil)).Elem()
}

func (i *templateInsightConfigurationPtrType) ToTemplateInsightConfigurationPtrOutput() TemplateInsightConfigurationPtrOutput {
	return i.ToTemplateInsightConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateInsightConfigurationPtrType) ToTemplateInsightConfigurationPtrOutputWithContext(ctx context.Context) TemplateInsightConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInsightConfigurationPtrOutput)
}

type TemplateInsightConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateInsightConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateInsightConfiguration)(nil)).Elem()
}

func (o TemplateInsightConfigurationOutput) ToTemplateInsightConfigurationOutput() TemplateInsightConfigurationOutput {
	return o
}

func (o TemplateInsightConfigurationOutput) ToTemplateInsightConfigurationOutputWithContext(ctx context.Context) TemplateInsightConfigurationOutput {
	return o
}

func (o TemplateInsightConfigurationOutput) ToTemplateInsightConfigurationPtrOutput() TemplateInsightConfigurationPtrOutput {
	return o.ToTemplateInsightConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateInsightConfigurationOutput) ToTemplateInsightConfigurationPtrOutputWithContext(ctx context.Context) TemplateInsightConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateInsightConfiguration) *TemplateInsightConfiguration {
		return &v
	}).(TemplateInsightConfigurationPtrOutput)
}

// The computations configurations of the insight visual
func (o TemplateInsightConfigurationOutput) Computations() TemplateComputationArrayOutput {
	return o.ApplyT(func(v TemplateInsightConfiguration) []TemplateComputation { return v.Computations }).(TemplateComputationArrayOutput)
}

// The custom narrative of the insight visual.
func (o TemplateInsightConfigurationOutput) CustomNarrative() TemplateCustomNarrativeOptionsPtrOutput {
	return o.ApplyT(func(v TemplateInsightConfiguration) *TemplateCustomNarrativeOptions { return v.CustomNarrative }).(TemplateCustomNarrativeOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateInsightConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateInsightConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

type TemplateInsightConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateInsightConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateInsightConfiguration)(nil)).Elem()
}

func (o TemplateInsightConfigurationPtrOutput) ToTemplateInsightConfigurationPtrOutput() TemplateInsightConfigurationPtrOutput {
	return o
}

func (o TemplateInsightConfigurationPtrOutput) ToTemplateInsightConfigurationPtrOutputWithContext(ctx context.Context) TemplateInsightConfigurationPtrOutput {
	return o
}

func (o TemplateInsightConfigurationPtrOutput) Elem() TemplateInsightConfigurationOutput {
	return o.ApplyT(func(v *TemplateInsightConfiguration) TemplateInsightConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateInsightConfiguration
		return ret
	}).(TemplateInsightConfigurationOutput)
}

// The computations configurations of the insight visual
func (o TemplateInsightConfigurationPtrOutput) Computations() TemplateComputationArrayOutput {
	return o.ApplyT(func(v *TemplateInsightConfiguration) []TemplateComputation {
		if v == nil {
			return nil
		}
		return v.Computations
	}).(TemplateComputationArrayOutput)
}

// The custom narrative of the insight visual.
func (o TemplateInsightConfigurationPtrOutput) CustomNarrative() TemplateCustomNarrativeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateInsightConfiguration) *TemplateCustomNarrativeOptions {
		if v == nil {
			return nil
		}
		return v.CustomNarrative
	}).(TemplateCustomNarrativeOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateInsightConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateInsightConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

type TemplateInsightVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The dataset that is used in the insight visual.
	DataSetIdentifier string `pulumi:"dataSetIdentifier"`
	// The configuration of an insight visual.
	InsightConfiguration *TemplateInsightConfiguration `pulumi:"insightConfiguration"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateInsightVisualInput is an input type that accepts TemplateInsightVisualArgs and TemplateInsightVisualOutput values.
// You can construct a concrete instance of `TemplateInsightVisualInput` via:
//
//	TemplateInsightVisualArgs{...}
type TemplateInsightVisualInput interface {
	pulumi.Input

	ToTemplateInsightVisualOutput() TemplateInsightVisualOutput
	ToTemplateInsightVisualOutputWithContext(context.Context) TemplateInsightVisualOutput
}

type TemplateInsightVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The dataset that is used in the insight visual.
	DataSetIdentifier pulumi.StringInput `pulumi:"dataSetIdentifier"`
	// The configuration of an insight visual.
	InsightConfiguration TemplateInsightConfigurationPtrInput `pulumi:"insightConfiguration"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateInsightVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateInsightVisual)(nil)).Elem()
}

func (i TemplateInsightVisualArgs) ToTemplateInsightVisualOutput() TemplateInsightVisualOutput {
	return i.ToTemplateInsightVisualOutputWithContext(context.Background())
}

func (i TemplateInsightVisualArgs) ToTemplateInsightVisualOutputWithContext(ctx context.Context) TemplateInsightVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInsightVisualOutput)
}

func (i TemplateInsightVisualArgs) ToTemplateInsightVisualPtrOutput() TemplateInsightVisualPtrOutput {
	return i.ToTemplateInsightVisualPtrOutputWithContext(context.Background())
}

func (i TemplateInsightVisualArgs) ToTemplateInsightVisualPtrOutputWithContext(ctx context.Context) TemplateInsightVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInsightVisualOutput).ToTemplateInsightVisualPtrOutputWithContext(ctx)
}

// TemplateInsightVisualPtrInput is an input type that accepts TemplateInsightVisualArgs, TemplateInsightVisualPtr and TemplateInsightVisualPtrOutput values.
// You can construct a concrete instance of `TemplateInsightVisualPtrInput` via:
//
//	        TemplateInsightVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateInsightVisualPtrInput interface {
	pulumi.Input

	ToTemplateInsightVisualPtrOutput() TemplateInsightVisualPtrOutput
	ToTemplateInsightVisualPtrOutputWithContext(context.Context) TemplateInsightVisualPtrOutput
}

type templateInsightVisualPtrType TemplateInsightVisualArgs

func TemplateInsightVisualPtr(v *TemplateInsightVisualArgs) TemplateInsightVisualPtrInput {
	return (*templateInsightVisualPtrType)(v)
}

func (*templateInsightVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateInsightVisual)(nil)).Elem()
}

func (i *templateInsightVisualPtrType) ToTemplateInsightVisualPtrOutput() TemplateInsightVisualPtrOutput {
	return i.ToTemplateInsightVisualPtrOutputWithContext(context.Background())
}

func (i *templateInsightVisualPtrType) ToTemplateInsightVisualPtrOutputWithContext(ctx context.Context) TemplateInsightVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateInsightVisualPtrOutput)
}

type TemplateInsightVisualOutput struct{ *pulumi.OutputState }

func (TemplateInsightVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateInsightVisual)(nil)).Elem()
}

func (o TemplateInsightVisualOutput) ToTemplateInsightVisualOutput() TemplateInsightVisualOutput {
	return o
}

func (o TemplateInsightVisualOutput) ToTemplateInsightVisualOutputWithContext(ctx context.Context) TemplateInsightVisualOutput {
	return o
}

func (o TemplateInsightVisualOutput) ToTemplateInsightVisualPtrOutput() TemplateInsightVisualPtrOutput {
	return o.ToTemplateInsightVisualPtrOutputWithContext(context.Background())
}

func (o TemplateInsightVisualOutput) ToTemplateInsightVisualPtrOutputWithContext(ctx context.Context) TemplateInsightVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateInsightVisual) *TemplateInsightVisual {
		return &v
	}).(TemplateInsightVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateInsightVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateInsightVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The dataset that is used in the insight visual.
func (o TemplateInsightVisualOutput) DataSetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateInsightVisual) string { return v.DataSetIdentifier }).(pulumi.StringOutput)
}

// The configuration of an insight visual.
func (o TemplateInsightVisualOutput) InsightConfiguration() TemplateInsightConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateInsightVisual) *TemplateInsightConfiguration { return v.InsightConfiguration }).(TemplateInsightConfigurationPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateInsightVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateInsightVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateInsightVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateInsightVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateInsightVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateInsightVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateInsightVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateInsightVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateInsightVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateInsightVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateInsightVisual)(nil)).Elem()
}

func (o TemplateInsightVisualPtrOutput) ToTemplateInsightVisualPtrOutput() TemplateInsightVisualPtrOutput {
	return o
}

func (o TemplateInsightVisualPtrOutput) ToTemplateInsightVisualPtrOutputWithContext(ctx context.Context) TemplateInsightVisualPtrOutput {
	return o
}

func (o TemplateInsightVisualPtrOutput) Elem() TemplateInsightVisualOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) TemplateInsightVisual {
		if v != nil {
			return *v
		}
		var ret TemplateInsightVisual
		return ret
	}).(TemplateInsightVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateInsightVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The dataset that is used in the insight visual.
func (o TemplateInsightVisualPtrOutput) DataSetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) *string {
		if v == nil {
			return nil
		}
		return &v.DataSetIdentifier
	}).(pulumi.StringPtrOutput)
}

// The configuration of an insight visual.
func (o TemplateInsightVisualPtrOutput) InsightConfiguration() TemplateInsightConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) *TemplateInsightConfiguration {
		if v == nil {
			return nil
		}
		return v.InsightConfiguration
	}).(TemplateInsightConfigurationPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateInsightVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateInsightVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateInsightVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateInsightVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateInsightVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateIntegerDefaultValues struct {
	// The dynamic value of the `IntegerDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
	DynamicValue *TemplateDynamicDefaultValue `pulumi:"dynamicValue"`
	// The static values of the `IntegerDefaultValues` .
	StaticValues []float64 `pulumi:"staticValues"`
}

// TemplateIntegerDefaultValuesInput is an input type that accepts TemplateIntegerDefaultValuesArgs and TemplateIntegerDefaultValuesOutput values.
// You can construct a concrete instance of `TemplateIntegerDefaultValuesInput` via:
//
//	TemplateIntegerDefaultValuesArgs{...}
type TemplateIntegerDefaultValuesInput interface {
	pulumi.Input

	ToTemplateIntegerDefaultValuesOutput() TemplateIntegerDefaultValuesOutput
	ToTemplateIntegerDefaultValuesOutputWithContext(context.Context) TemplateIntegerDefaultValuesOutput
}

type TemplateIntegerDefaultValuesArgs struct {
	// The dynamic value of the `IntegerDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
	DynamicValue TemplateDynamicDefaultValuePtrInput `pulumi:"dynamicValue"`
	// The static values of the `IntegerDefaultValues` .
	StaticValues pulumi.Float64ArrayInput `pulumi:"staticValues"`
}

func (TemplateIntegerDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIntegerDefaultValues)(nil)).Elem()
}

func (i TemplateIntegerDefaultValuesArgs) ToTemplateIntegerDefaultValuesOutput() TemplateIntegerDefaultValuesOutput {
	return i.ToTemplateIntegerDefaultValuesOutputWithContext(context.Background())
}

func (i TemplateIntegerDefaultValuesArgs) ToTemplateIntegerDefaultValuesOutputWithContext(ctx context.Context) TemplateIntegerDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerDefaultValuesOutput)
}

func (i TemplateIntegerDefaultValuesArgs) ToTemplateIntegerDefaultValuesPtrOutput() TemplateIntegerDefaultValuesPtrOutput {
	return i.ToTemplateIntegerDefaultValuesPtrOutputWithContext(context.Background())
}

func (i TemplateIntegerDefaultValuesArgs) ToTemplateIntegerDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateIntegerDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerDefaultValuesOutput).ToTemplateIntegerDefaultValuesPtrOutputWithContext(ctx)
}

// TemplateIntegerDefaultValuesPtrInput is an input type that accepts TemplateIntegerDefaultValuesArgs, TemplateIntegerDefaultValuesPtr and TemplateIntegerDefaultValuesPtrOutput values.
// You can construct a concrete instance of `TemplateIntegerDefaultValuesPtrInput` via:
//
//	        TemplateIntegerDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type TemplateIntegerDefaultValuesPtrInput interface {
	pulumi.Input

	ToTemplateIntegerDefaultValuesPtrOutput() TemplateIntegerDefaultValuesPtrOutput
	ToTemplateIntegerDefaultValuesPtrOutputWithContext(context.Context) TemplateIntegerDefaultValuesPtrOutput
}

type templateIntegerDefaultValuesPtrType TemplateIntegerDefaultValuesArgs

func TemplateIntegerDefaultValuesPtr(v *TemplateIntegerDefaultValuesArgs) TemplateIntegerDefaultValuesPtrInput {
	return (*templateIntegerDefaultValuesPtrType)(v)
}

func (*templateIntegerDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateIntegerDefaultValues)(nil)).Elem()
}

func (i *templateIntegerDefaultValuesPtrType) ToTemplateIntegerDefaultValuesPtrOutput() TemplateIntegerDefaultValuesPtrOutput {
	return i.ToTemplateIntegerDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *templateIntegerDefaultValuesPtrType) ToTemplateIntegerDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateIntegerDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerDefaultValuesPtrOutput)
}

type TemplateIntegerDefaultValuesOutput struct{ *pulumi.OutputState }

func (TemplateIntegerDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIntegerDefaultValues)(nil)).Elem()
}

func (o TemplateIntegerDefaultValuesOutput) ToTemplateIntegerDefaultValuesOutput() TemplateIntegerDefaultValuesOutput {
	return o
}

func (o TemplateIntegerDefaultValuesOutput) ToTemplateIntegerDefaultValuesOutputWithContext(ctx context.Context) TemplateIntegerDefaultValuesOutput {
	return o
}

func (o TemplateIntegerDefaultValuesOutput) ToTemplateIntegerDefaultValuesPtrOutput() TemplateIntegerDefaultValuesPtrOutput {
	return o.ToTemplateIntegerDefaultValuesPtrOutputWithContext(context.Background())
}

func (o TemplateIntegerDefaultValuesOutput) ToTemplateIntegerDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateIntegerDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateIntegerDefaultValues) *TemplateIntegerDefaultValues {
		return &v
	}).(TemplateIntegerDefaultValuesPtrOutput)
}

// The dynamic value of the `IntegerDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
func (o TemplateIntegerDefaultValuesOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v TemplateIntegerDefaultValues) *TemplateDynamicDefaultValue { return v.DynamicValue }).(TemplateDynamicDefaultValuePtrOutput)
}

// The static values of the `IntegerDefaultValues` .
func (o TemplateIntegerDefaultValuesOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v TemplateIntegerDefaultValues) []float64 { return v.StaticValues }).(pulumi.Float64ArrayOutput)
}

type TemplateIntegerDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (TemplateIntegerDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateIntegerDefaultValues)(nil)).Elem()
}

func (o TemplateIntegerDefaultValuesPtrOutput) ToTemplateIntegerDefaultValuesPtrOutput() TemplateIntegerDefaultValuesPtrOutput {
	return o
}

func (o TemplateIntegerDefaultValuesPtrOutput) ToTemplateIntegerDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateIntegerDefaultValuesPtrOutput {
	return o
}

func (o TemplateIntegerDefaultValuesPtrOutput) Elem() TemplateIntegerDefaultValuesOutput {
	return o.ApplyT(func(v *TemplateIntegerDefaultValues) TemplateIntegerDefaultValues {
		if v != nil {
			return *v
		}
		var ret TemplateIntegerDefaultValues
		return ret
	}).(TemplateIntegerDefaultValuesOutput)
}

// The dynamic value of the `IntegerDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
func (o TemplateIntegerDefaultValuesPtrOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v *TemplateIntegerDefaultValues) *TemplateDynamicDefaultValue {
		if v == nil {
			return nil
		}
		return v.DynamicValue
	}).(TemplateDynamicDefaultValuePtrOutput)
}

// The static values of the `IntegerDefaultValues` .
func (o TemplateIntegerDefaultValuesPtrOutput) StaticValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *TemplateIntegerDefaultValues) []float64 {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.Float64ArrayOutput)
}

type TemplateIntegerParameterDeclaration struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           *TemplateIntegerDefaultValues    `pulumi:"defaultValues"`
	MappedDataSetParameters []TemplateMappedDataSetParameter `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name string `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType TemplateParameterValueType `pulumi:"parameterValueType"`
	// A parameter declaration for the `Integer` data type.
	ValueWhenUnset *TemplateIntegerValueWhenUnsetConfiguration `pulumi:"valueWhenUnset"`
}

// TemplateIntegerParameterDeclarationInput is an input type that accepts TemplateIntegerParameterDeclarationArgs and TemplateIntegerParameterDeclarationOutput values.
// You can construct a concrete instance of `TemplateIntegerParameterDeclarationInput` via:
//
//	TemplateIntegerParameterDeclarationArgs{...}
type TemplateIntegerParameterDeclarationInput interface {
	pulumi.Input

	ToTemplateIntegerParameterDeclarationOutput() TemplateIntegerParameterDeclarationOutput
	ToTemplateIntegerParameterDeclarationOutputWithContext(context.Context) TemplateIntegerParameterDeclarationOutput
}

type TemplateIntegerParameterDeclarationArgs struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           TemplateIntegerDefaultValuesPtrInput     `pulumi:"defaultValues"`
	MappedDataSetParameters TemplateMappedDataSetParameterArrayInput `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name pulumi.StringInput `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType TemplateParameterValueTypeInput `pulumi:"parameterValueType"`
	// A parameter declaration for the `Integer` data type.
	ValueWhenUnset TemplateIntegerValueWhenUnsetConfigurationPtrInput `pulumi:"valueWhenUnset"`
}

func (TemplateIntegerParameterDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIntegerParameterDeclaration)(nil)).Elem()
}

func (i TemplateIntegerParameterDeclarationArgs) ToTemplateIntegerParameterDeclarationOutput() TemplateIntegerParameterDeclarationOutput {
	return i.ToTemplateIntegerParameterDeclarationOutputWithContext(context.Background())
}

func (i TemplateIntegerParameterDeclarationArgs) ToTemplateIntegerParameterDeclarationOutputWithContext(ctx context.Context) TemplateIntegerParameterDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerParameterDeclarationOutput)
}

func (i TemplateIntegerParameterDeclarationArgs) ToTemplateIntegerParameterDeclarationPtrOutput() TemplateIntegerParameterDeclarationPtrOutput {
	return i.ToTemplateIntegerParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i TemplateIntegerParameterDeclarationArgs) ToTemplateIntegerParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateIntegerParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerParameterDeclarationOutput).ToTemplateIntegerParameterDeclarationPtrOutputWithContext(ctx)
}

// TemplateIntegerParameterDeclarationPtrInput is an input type that accepts TemplateIntegerParameterDeclarationArgs, TemplateIntegerParameterDeclarationPtr and TemplateIntegerParameterDeclarationPtrOutput values.
// You can construct a concrete instance of `TemplateIntegerParameterDeclarationPtrInput` via:
//
//	        TemplateIntegerParameterDeclarationArgs{...}
//
//	or:
//
//	        nil
type TemplateIntegerParameterDeclarationPtrInput interface {
	pulumi.Input

	ToTemplateIntegerParameterDeclarationPtrOutput() TemplateIntegerParameterDeclarationPtrOutput
	ToTemplateIntegerParameterDeclarationPtrOutputWithContext(context.Context) TemplateIntegerParameterDeclarationPtrOutput
}

type templateIntegerParameterDeclarationPtrType TemplateIntegerParameterDeclarationArgs

func TemplateIntegerParameterDeclarationPtr(v *TemplateIntegerParameterDeclarationArgs) TemplateIntegerParameterDeclarationPtrInput {
	return (*templateIntegerParameterDeclarationPtrType)(v)
}

func (*templateIntegerParameterDeclarationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateIntegerParameterDeclaration)(nil)).Elem()
}

func (i *templateIntegerParameterDeclarationPtrType) ToTemplateIntegerParameterDeclarationPtrOutput() TemplateIntegerParameterDeclarationPtrOutput {
	return i.ToTemplateIntegerParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i *templateIntegerParameterDeclarationPtrType) ToTemplateIntegerParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateIntegerParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerParameterDeclarationPtrOutput)
}

type TemplateIntegerParameterDeclarationOutput struct{ *pulumi.OutputState }

func (TemplateIntegerParameterDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIntegerParameterDeclaration)(nil)).Elem()
}

func (o TemplateIntegerParameterDeclarationOutput) ToTemplateIntegerParameterDeclarationOutput() TemplateIntegerParameterDeclarationOutput {
	return o
}

func (o TemplateIntegerParameterDeclarationOutput) ToTemplateIntegerParameterDeclarationOutputWithContext(ctx context.Context) TemplateIntegerParameterDeclarationOutput {
	return o
}

func (o TemplateIntegerParameterDeclarationOutput) ToTemplateIntegerParameterDeclarationPtrOutput() TemplateIntegerParameterDeclarationPtrOutput {
	return o.ToTemplateIntegerParameterDeclarationPtrOutputWithContext(context.Background())
}

func (o TemplateIntegerParameterDeclarationOutput) ToTemplateIntegerParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateIntegerParameterDeclarationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateIntegerParameterDeclaration) *TemplateIntegerParameterDeclaration {
		return &v
	}).(TemplateIntegerParameterDeclarationPtrOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateIntegerParameterDeclarationOutput) DefaultValues() TemplateIntegerDefaultValuesPtrOutput {
	return o.ApplyT(func(v TemplateIntegerParameterDeclaration) *TemplateIntegerDefaultValues { return v.DefaultValues }).(TemplateIntegerDefaultValuesPtrOutput)
}

func (o TemplateIntegerParameterDeclarationOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v TemplateIntegerParameterDeclaration) []TemplateMappedDataSetParameter {
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateIntegerParameterDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateIntegerParameterDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o TemplateIntegerParameterDeclarationOutput) ParameterValueType() TemplateParameterValueTypeOutput {
	return o.ApplyT(func(v TemplateIntegerParameterDeclaration) TemplateParameterValueType { return v.ParameterValueType }).(TemplateParameterValueTypeOutput)
}

// A parameter declaration for the `Integer` data type.
func (o TemplateIntegerParameterDeclarationOutput) ValueWhenUnset() TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateIntegerParameterDeclaration) *TemplateIntegerValueWhenUnsetConfiguration {
		return v.ValueWhenUnset
	}).(TemplateIntegerValueWhenUnsetConfigurationPtrOutput)
}

type TemplateIntegerParameterDeclarationPtrOutput struct{ *pulumi.OutputState }

func (TemplateIntegerParameterDeclarationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateIntegerParameterDeclaration)(nil)).Elem()
}

func (o TemplateIntegerParameterDeclarationPtrOutput) ToTemplateIntegerParameterDeclarationPtrOutput() TemplateIntegerParameterDeclarationPtrOutput {
	return o
}

func (o TemplateIntegerParameterDeclarationPtrOutput) ToTemplateIntegerParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateIntegerParameterDeclarationPtrOutput {
	return o
}

func (o TemplateIntegerParameterDeclarationPtrOutput) Elem() TemplateIntegerParameterDeclarationOutput {
	return o.ApplyT(func(v *TemplateIntegerParameterDeclaration) TemplateIntegerParameterDeclaration {
		if v != nil {
			return *v
		}
		var ret TemplateIntegerParameterDeclaration
		return ret
	}).(TemplateIntegerParameterDeclarationOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateIntegerParameterDeclarationPtrOutput) DefaultValues() TemplateIntegerDefaultValuesPtrOutput {
	return o.ApplyT(func(v *TemplateIntegerParameterDeclaration) *TemplateIntegerDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(TemplateIntegerDefaultValuesPtrOutput)
}

func (o TemplateIntegerParameterDeclarationPtrOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v *TemplateIntegerParameterDeclaration) []TemplateMappedDataSetParameter {
		if v == nil {
			return nil
		}
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateIntegerParameterDeclarationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateIntegerParameterDeclaration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o TemplateIntegerParameterDeclarationPtrOutput) ParameterValueType() TemplateParameterValueTypePtrOutput {
	return o.ApplyT(func(v *TemplateIntegerParameterDeclaration) *TemplateParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ParameterValueType
	}).(TemplateParameterValueTypePtrOutput)
}

// A parameter declaration for the `Integer` data type.
func (o TemplateIntegerParameterDeclarationPtrOutput) ValueWhenUnset() TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateIntegerParameterDeclaration) *TemplateIntegerValueWhenUnsetConfiguration {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnset
	}).(TemplateIntegerValueWhenUnsetConfigurationPtrOutput)
}

type TemplateIntegerValueWhenUnsetConfiguration struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue *float64 `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption *TemplateValueWhenUnsetOption `pulumi:"valueWhenUnsetOption"`
}

// TemplateIntegerValueWhenUnsetConfigurationInput is an input type that accepts TemplateIntegerValueWhenUnsetConfigurationArgs and TemplateIntegerValueWhenUnsetConfigurationOutput values.
// You can construct a concrete instance of `TemplateIntegerValueWhenUnsetConfigurationInput` via:
//
//	TemplateIntegerValueWhenUnsetConfigurationArgs{...}
type TemplateIntegerValueWhenUnsetConfigurationInput interface {
	pulumi.Input

	ToTemplateIntegerValueWhenUnsetConfigurationOutput() TemplateIntegerValueWhenUnsetConfigurationOutput
	ToTemplateIntegerValueWhenUnsetConfigurationOutputWithContext(context.Context) TemplateIntegerValueWhenUnsetConfigurationOutput
}

type TemplateIntegerValueWhenUnsetConfigurationArgs struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue pulumi.Float64PtrInput `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption TemplateValueWhenUnsetOptionPtrInput `pulumi:"valueWhenUnsetOption"`
}

func (TemplateIntegerValueWhenUnsetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIntegerValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i TemplateIntegerValueWhenUnsetConfigurationArgs) ToTemplateIntegerValueWhenUnsetConfigurationOutput() TemplateIntegerValueWhenUnsetConfigurationOutput {
	return i.ToTemplateIntegerValueWhenUnsetConfigurationOutputWithContext(context.Background())
}

func (i TemplateIntegerValueWhenUnsetConfigurationArgs) ToTemplateIntegerValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateIntegerValueWhenUnsetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerValueWhenUnsetConfigurationOutput)
}

func (i TemplateIntegerValueWhenUnsetConfigurationArgs) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutput() TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateIntegerValueWhenUnsetConfigurationArgs) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerValueWhenUnsetConfigurationOutput).ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(ctx)
}

// TemplateIntegerValueWhenUnsetConfigurationPtrInput is an input type that accepts TemplateIntegerValueWhenUnsetConfigurationArgs, TemplateIntegerValueWhenUnsetConfigurationPtr and TemplateIntegerValueWhenUnsetConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateIntegerValueWhenUnsetConfigurationPtrInput` via:
//
//	        TemplateIntegerValueWhenUnsetConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateIntegerValueWhenUnsetConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateIntegerValueWhenUnsetConfigurationPtrOutput() TemplateIntegerValueWhenUnsetConfigurationPtrOutput
	ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(context.Context) TemplateIntegerValueWhenUnsetConfigurationPtrOutput
}

type templateIntegerValueWhenUnsetConfigurationPtrType TemplateIntegerValueWhenUnsetConfigurationArgs

func TemplateIntegerValueWhenUnsetConfigurationPtr(v *TemplateIntegerValueWhenUnsetConfigurationArgs) TemplateIntegerValueWhenUnsetConfigurationPtrInput {
	return (*templateIntegerValueWhenUnsetConfigurationPtrType)(v)
}

func (*templateIntegerValueWhenUnsetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateIntegerValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i *templateIntegerValueWhenUnsetConfigurationPtrType) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutput() TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateIntegerValueWhenUnsetConfigurationPtrType) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIntegerValueWhenUnsetConfigurationPtrOutput)
}

type TemplateIntegerValueWhenUnsetConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateIntegerValueWhenUnsetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIntegerValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateIntegerValueWhenUnsetConfigurationOutput) ToTemplateIntegerValueWhenUnsetConfigurationOutput() TemplateIntegerValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateIntegerValueWhenUnsetConfigurationOutput) ToTemplateIntegerValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateIntegerValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateIntegerValueWhenUnsetConfigurationOutput) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutput() TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return o.ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateIntegerValueWhenUnsetConfigurationOutput) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateIntegerValueWhenUnsetConfiguration) *TemplateIntegerValueWhenUnsetConfiguration {
		return &v
	}).(TemplateIntegerValueWhenUnsetConfigurationPtrOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateIntegerValueWhenUnsetConfigurationOutput) CustomValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateIntegerValueWhenUnsetConfiguration) *float64 { return v.CustomValue }).(pulumi.Float64PtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateIntegerValueWhenUnsetConfigurationOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v TemplateIntegerValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateIntegerValueWhenUnsetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateIntegerValueWhenUnsetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateIntegerValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateIntegerValueWhenUnsetConfigurationPtrOutput) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutput() TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateIntegerValueWhenUnsetConfigurationPtrOutput) ToTemplateIntegerValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateIntegerValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateIntegerValueWhenUnsetConfigurationPtrOutput) Elem() TemplateIntegerValueWhenUnsetConfigurationOutput {
	return o.ApplyT(func(v *TemplateIntegerValueWhenUnsetConfiguration) TemplateIntegerValueWhenUnsetConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateIntegerValueWhenUnsetConfiguration
		return ret
	}).(TemplateIntegerValueWhenUnsetConfigurationOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateIntegerValueWhenUnsetConfigurationPtrOutput) CustomValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateIntegerValueWhenUnsetConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.CustomValue
	}).(pulumi.Float64PtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateIntegerValueWhenUnsetConfigurationPtrOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v *TemplateIntegerValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateItemsLimitConfiguration struct {
	// The limit on how many items of a field are showed in the chart. For example, the number of slices that are displayed in a pie chart.
	ItemsLimit *float64 `pulumi:"itemsLimit"`
	// The `Show other` of an axis in the chart. Choose one of the following options:
	//
	// - `INCLUDE`
	// - `EXCLUDE`
	OtherCategories *TemplateOtherCategories `pulumi:"otherCategories"`
}

// TemplateItemsLimitConfigurationInput is an input type that accepts TemplateItemsLimitConfigurationArgs and TemplateItemsLimitConfigurationOutput values.
// You can construct a concrete instance of `TemplateItemsLimitConfigurationInput` via:
//
//	TemplateItemsLimitConfigurationArgs{...}
type TemplateItemsLimitConfigurationInput interface {
	pulumi.Input

	ToTemplateItemsLimitConfigurationOutput() TemplateItemsLimitConfigurationOutput
	ToTemplateItemsLimitConfigurationOutputWithContext(context.Context) TemplateItemsLimitConfigurationOutput
}

type TemplateItemsLimitConfigurationArgs struct {
	// The limit on how many items of a field are showed in the chart. For example, the number of slices that are displayed in a pie chart.
	ItemsLimit pulumi.Float64PtrInput `pulumi:"itemsLimit"`
	// The `Show other` of an axis in the chart. Choose one of the following options:
	//
	// - `INCLUDE`
	// - `EXCLUDE`
	OtherCategories TemplateOtherCategoriesPtrInput `pulumi:"otherCategories"`
}

func (TemplateItemsLimitConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateItemsLimitConfiguration)(nil)).Elem()
}

func (i TemplateItemsLimitConfigurationArgs) ToTemplateItemsLimitConfigurationOutput() TemplateItemsLimitConfigurationOutput {
	return i.ToTemplateItemsLimitConfigurationOutputWithContext(context.Background())
}

func (i TemplateItemsLimitConfigurationArgs) ToTemplateItemsLimitConfigurationOutputWithContext(ctx context.Context) TemplateItemsLimitConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateItemsLimitConfigurationOutput)
}

func (i TemplateItemsLimitConfigurationArgs) ToTemplateItemsLimitConfigurationPtrOutput() TemplateItemsLimitConfigurationPtrOutput {
	return i.ToTemplateItemsLimitConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateItemsLimitConfigurationArgs) ToTemplateItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplateItemsLimitConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateItemsLimitConfigurationOutput).ToTemplateItemsLimitConfigurationPtrOutputWithContext(ctx)
}

// TemplateItemsLimitConfigurationPtrInput is an input type that accepts TemplateItemsLimitConfigurationArgs, TemplateItemsLimitConfigurationPtr and TemplateItemsLimitConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateItemsLimitConfigurationPtrInput` via:
//
//	        TemplateItemsLimitConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateItemsLimitConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateItemsLimitConfigurationPtrOutput() TemplateItemsLimitConfigurationPtrOutput
	ToTemplateItemsLimitConfigurationPtrOutputWithContext(context.Context) TemplateItemsLimitConfigurationPtrOutput
}

type templateItemsLimitConfigurationPtrType TemplateItemsLimitConfigurationArgs

func TemplateItemsLimitConfigurationPtr(v *TemplateItemsLimitConfigurationArgs) TemplateItemsLimitConfigurationPtrInput {
	return (*templateItemsLimitConfigurationPtrType)(v)
}

func (*templateItemsLimitConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateItemsLimitConfiguration)(nil)).Elem()
}

func (i *templateItemsLimitConfigurationPtrType) ToTemplateItemsLimitConfigurationPtrOutput() TemplateItemsLimitConfigurationPtrOutput {
	return i.ToTemplateItemsLimitConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateItemsLimitConfigurationPtrType) ToTemplateItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplateItemsLimitConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateItemsLimitConfigurationPtrOutput)
}

type TemplateItemsLimitConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateItemsLimitConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateItemsLimitConfiguration)(nil)).Elem()
}

func (o TemplateItemsLimitConfigurationOutput) ToTemplateItemsLimitConfigurationOutput() TemplateItemsLimitConfigurationOutput {
	return o
}

func (o TemplateItemsLimitConfigurationOutput) ToTemplateItemsLimitConfigurationOutputWithContext(ctx context.Context) TemplateItemsLimitConfigurationOutput {
	return o
}

func (o TemplateItemsLimitConfigurationOutput) ToTemplateItemsLimitConfigurationPtrOutput() TemplateItemsLimitConfigurationPtrOutput {
	return o.ToTemplateItemsLimitConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateItemsLimitConfigurationOutput) ToTemplateItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateItemsLimitConfiguration) *TemplateItemsLimitConfiguration {
		return &v
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The limit on how many items of a field are showed in the chart. For example, the number of slices that are displayed in a pie chart.
func (o TemplateItemsLimitConfigurationOutput) ItemsLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateItemsLimitConfiguration) *float64 { return v.ItemsLimit }).(pulumi.Float64PtrOutput)
}

// The `Show other` of an axis in the chart. Choose one of the following options:
//
// - `INCLUDE`
// - `EXCLUDE`
func (o TemplateItemsLimitConfigurationOutput) OtherCategories() TemplateOtherCategoriesPtrOutput {
	return o.ApplyT(func(v TemplateItemsLimitConfiguration) *TemplateOtherCategories { return v.OtherCategories }).(TemplateOtherCategoriesPtrOutput)
}

type TemplateItemsLimitConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateItemsLimitConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateItemsLimitConfiguration)(nil)).Elem()
}

func (o TemplateItemsLimitConfigurationPtrOutput) ToTemplateItemsLimitConfigurationPtrOutput() TemplateItemsLimitConfigurationPtrOutput {
	return o
}

func (o TemplateItemsLimitConfigurationPtrOutput) ToTemplateItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplateItemsLimitConfigurationPtrOutput {
	return o
}

func (o TemplateItemsLimitConfigurationPtrOutput) Elem() TemplateItemsLimitConfigurationOutput {
	return o.ApplyT(func(v *TemplateItemsLimitConfiguration) TemplateItemsLimitConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateItemsLimitConfiguration
		return ret
	}).(TemplateItemsLimitConfigurationOutput)
}

// The limit on how many items of a field are showed in the chart. For example, the number of slices that are displayed in a pie chart.
func (o TemplateItemsLimitConfigurationPtrOutput) ItemsLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateItemsLimitConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.ItemsLimit
	}).(pulumi.Float64PtrOutput)
}

// The `Show other` of an axis in the chart. Choose one of the following options:
//
// - `INCLUDE`
// - `EXCLUDE`
func (o TemplateItemsLimitConfigurationPtrOutput) OtherCategories() TemplateOtherCategoriesPtrOutput {
	return o.ApplyT(func(v *TemplateItemsLimitConfiguration) *TemplateOtherCategories {
		if v == nil {
			return nil
		}
		return v.OtherCategories
	}).(TemplateOtherCategoriesPtrOutput)
}

type TemplateKpiActualValueConditionalFormatting struct {
	// The conditional formatting of the actual value's icon.
	Icon *TemplateConditionalFormattingIcon `pulumi:"icon"`
	// The conditional formatting of the actual value's text color.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateKpiActualValueConditionalFormattingInput is an input type that accepts TemplateKpiActualValueConditionalFormattingArgs and TemplateKpiActualValueConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateKpiActualValueConditionalFormattingInput` via:
//
//	TemplateKpiActualValueConditionalFormattingArgs{...}
type TemplateKpiActualValueConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateKpiActualValueConditionalFormattingOutput() TemplateKpiActualValueConditionalFormattingOutput
	ToTemplateKpiActualValueConditionalFormattingOutputWithContext(context.Context) TemplateKpiActualValueConditionalFormattingOutput
}

type TemplateKpiActualValueConditionalFormattingArgs struct {
	// The conditional formatting of the actual value's icon.
	Icon TemplateConditionalFormattingIconPtrInput `pulumi:"icon"`
	// The conditional formatting of the actual value's text color.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateKpiActualValueConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiActualValueConditionalFormatting)(nil)).Elem()
}

func (i TemplateKpiActualValueConditionalFormattingArgs) ToTemplateKpiActualValueConditionalFormattingOutput() TemplateKpiActualValueConditionalFormattingOutput {
	return i.ToTemplateKpiActualValueConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateKpiActualValueConditionalFormattingArgs) ToTemplateKpiActualValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiActualValueConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiActualValueConditionalFormattingOutput)
}

func (i TemplateKpiActualValueConditionalFormattingArgs) ToTemplateKpiActualValueConditionalFormattingPtrOutput() TemplateKpiActualValueConditionalFormattingPtrOutput {
	return i.ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateKpiActualValueConditionalFormattingArgs) ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiActualValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiActualValueConditionalFormattingOutput).ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateKpiActualValueConditionalFormattingPtrInput is an input type that accepts TemplateKpiActualValueConditionalFormattingArgs, TemplateKpiActualValueConditionalFormattingPtr and TemplateKpiActualValueConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateKpiActualValueConditionalFormattingPtrInput` via:
//
//	        TemplateKpiActualValueConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiActualValueConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateKpiActualValueConditionalFormattingPtrOutput() TemplateKpiActualValueConditionalFormattingPtrOutput
	ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(context.Context) TemplateKpiActualValueConditionalFormattingPtrOutput
}

type templateKpiActualValueConditionalFormattingPtrType TemplateKpiActualValueConditionalFormattingArgs

func TemplateKpiActualValueConditionalFormattingPtr(v *TemplateKpiActualValueConditionalFormattingArgs) TemplateKpiActualValueConditionalFormattingPtrInput {
	return (*templateKpiActualValueConditionalFormattingPtrType)(v)
}

func (*templateKpiActualValueConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiActualValueConditionalFormatting)(nil)).Elem()
}

func (i *templateKpiActualValueConditionalFormattingPtrType) ToTemplateKpiActualValueConditionalFormattingPtrOutput() TemplateKpiActualValueConditionalFormattingPtrOutput {
	return i.ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateKpiActualValueConditionalFormattingPtrType) ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiActualValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiActualValueConditionalFormattingPtrOutput)
}

type TemplateKpiActualValueConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateKpiActualValueConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiActualValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiActualValueConditionalFormattingOutput) ToTemplateKpiActualValueConditionalFormattingOutput() TemplateKpiActualValueConditionalFormattingOutput {
	return o
}

func (o TemplateKpiActualValueConditionalFormattingOutput) ToTemplateKpiActualValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiActualValueConditionalFormattingOutput {
	return o
}

func (o TemplateKpiActualValueConditionalFormattingOutput) ToTemplateKpiActualValueConditionalFormattingPtrOutput() TemplateKpiActualValueConditionalFormattingPtrOutput {
	return o.ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateKpiActualValueConditionalFormattingOutput) ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiActualValueConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiActualValueConditionalFormatting) *TemplateKpiActualValueConditionalFormatting {
		return &v
	}).(TemplateKpiActualValueConditionalFormattingPtrOutput)
}

// The conditional formatting of the actual value's icon.
func (o TemplateKpiActualValueConditionalFormattingOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v TemplateKpiActualValueConditionalFormatting) *TemplateConditionalFormattingIcon { return v.Icon }).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the actual value's text color.
func (o TemplateKpiActualValueConditionalFormattingOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateKpiActualValueConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiActualValueConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiActualValueConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiActualValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiActualValueConditionalFormattingPtrOutput) ToTemplateKpiActualValueConditionalFormattingPtrOutput() TemplateKpiActualValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiActualValueConditionalFormattingPtrOutput) ToTemplateKpiActualValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiActualValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiActualValueConditionalFormattingPtrOutput) Elem() TemplateKpiActualValueConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateKpiActualValueConditionalFormatting) TemplateKpiActualValueConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateKpiActualValueConditionalFormatting
		return ret
	}).(TemplateKpiActualValueConditionalFormattingOutput)
}

// The conditional formatting of the actual value's icon.
func (o TemplateKpiActualValueConditionalFormattingPtrOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v *TemplateKpiActualValueConditionalFormatting) *TemplateConditionalFormattingIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the actual value's text color.
func (o TemplateKpiActualValueConditionalFormattingPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateKpiActualValueConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiComparisonValueConditionalFormatting struct {
	// The conditional formatting of the comparison value's icon.
	Icon *TemplateConditionalFormattingIcon `pulumi:"icon"`
	// The conditional formatting of the comparison value's text color.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateKpiComparisonValueConditionalFormattingInput is an input type that accepts TemplateKpiComparisonValueConditionalFormattingArgs and TemplateKpiComparisonValueConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateKpiComparisonValueConditionalFormattingInput` via:
//
//	TemplateKpiComparisonValueConditionalFormattingArgs{...}
type TemplateKpiComparisonValueConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateKpiComparisonValueConditionalFormattingOutput() TemplateKpiComparisonValueConditionalFormattingOutput
	ToTemplateKpiComparisonValueConditionalFormattingOutputWithContext(context.Context) TemplateKpiComparisonValueConditionalFormattingOutput
}

type TemplateKpiComparisonValueConditionalFormattingArgs struct {
	// The conditional formatting of the comparison value's icon.
	Icon TemplateConditionalFormattingIconPtrInput `pulumi:"icon"`
	// The conditional formatting of the comparison value's text color.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateKpiComparisonValueConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiComparisonValueConditionalFormatting)(nil)).Elem()
}

func (i TemplateKpiComparisonValueConditionalFormattingArgs) ToTemplateKpiComparisonValueConditionalFormattingOutput() TemplateKpiComparisonValueConditionalFormattingOutput {
	return i.ToTemplateKpiComparisonValueConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateKpiComparisonValueConditionalFormattingArgs) ToTemplateKpiComparisonValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiComparisonValueConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiComparisonValueConditionalFormattingOutput)
}

func (i TemplateKpiComparisonValueConditionalFormattingArgs) ToTemplateKpiComparisonValueConditionalFormattingPtrOutput() TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return i.ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateKpiComparisonValueConditionalFormattingArgs) ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiComparisonValueConditionalFormattingOutput).ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateKpiComparisonValueConditionalFormattingPtrInput is an input type that accepts TemplateKpiComparisonValueConditionalFormattingArgs, TemplateKpiComparisonValueConditionalFormattingPtr and TemplateKpiComparisonValueConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateKpiComparisonValueConditionalFormattingPtrInput` via:
//
//	        TemplateKpiComparisonValueConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiComparisonValueConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateKpiComparisonValueConditionalFormattingPtrOutput() TemplateKpiComparisonValueConditionalFormattingPtrOutput
	ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(context.Context) TemplateKpiComparisonValueConditionalFormattingPtrOutput
}

type templateKpiComparisonValueConditionalFormattingPtrType TemplateKpiComparisonValueConditionalFormattingArgs

func TemplateKpiComparisonValueConditionalFormattingPtr(v *TemplateKpiComparisonValueConditionalFormattingArgs) TemplateKpiComparisonValueConditionalFormattingPtrInput {
	return (*templateKpiComparisonValueConditionalFormattingPtrType)(v)
}

func (*templateKpiComparisonValueConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiComparisonValueConditionalFormatting)(nil)).Elem()
}

func (i *templateKpiComparisonValueConditionalFormattingPtrType) ToTemplateKpiComparisonValueConditionalFormattingPtrOutput() TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return i.ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateKpiComparisonValueConditionalFormattingPtrType) ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiComparisonValueConditionalFormattingPtrOutput)
}

type TemplateKpiComparisonValueConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateKpiComparisonValueConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiComparisonValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiComparisonValueConditionalFormattingOutput) ToTemplateKpiComparisonValueConditionalFormattingOutput() TemplateKpiComparisonValueConditionalFormattingOutput {
	return o
}

func (o TemplateKpiComparisonValueConditionalFormattingOutput) ToTemplateKpiComparisonValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiComparisonValueConditionalFormattingOutput {
	return o
}

func (o TemplateKpiComparisonValueConditionalFormattingOutput) ToTemplateKpiComparisonValueConditionalFormattingPtrOutput() TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return o.ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateKpiComparisonValueConditionalFormattingOutput) ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiComparisonValueConditionalFormatting) *TemplateKpiComparisonValueConditionalFormatting {
		return &v
	}).(TemplateKpiComparisonValueConditionalFormattingPtrOutput)
}

// The conditional formatting of the comparison value's icon.
func (o TemplateKpiComparisonValueConditionalFormattingOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v TemplateKpiComparisonValueConditionalFormatting) *TemplateConditionalFormattingIcon {
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the comparison value's text color.
func (o TemplateKpiComparisonValueConditionalFormattingOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateKpiComparisonValueConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiComparisonValueConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiComparisonValueConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiComparisonValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiComparisonValueConditionalFormattingPtrOutput) ToTemplateKpiComparisonValueConditionalFormattingPtrOutput() TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiComparisonValueConditionalFormattingPtrOutput) ToTemplateKpiComparisonValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiComparisonValueConditionalFormattingPtrOutput) Elem() TemplateKpiComparisonValueConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateKpiComparisonValueConditionalFormatting) TemplateKpiComparisonValueConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateKpiComparisonValueConditionalFormatting
		return ret
	}).(TemplateKpiComparisonValueConditionalFormattingOutput)
}

// The conditional formatting of the comparison value's icon.
func (o TemplateKpiComparisonValueConditionalFormattingPtrOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v *TemplateKpiComparisonValueConditionalFormatting) *TemplateConditionalFormattingIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the comparison value's text color.
func (o TemplateKpiComparisonValueConditionalFormattingPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateKpiComparisonValueConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiConditionalFormatting struct {
	// The conditional formatting options of a KPI visual.
	ConditionalFormattingOptions []TemplateKpiConditionalFormattingOption `pulumi:"conditionalFormattingOptions"`
}

// TemplateKpiConditionalFormattingInput is an input type that accepts TemplateKpiConditionalFormattingArgs and TemplateKpiConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateKpiConditionalFormattingInput` via:
//
//	TemplateKpiConditionalFormattingArgs{...}
type TemplateKpiConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateKpiConditionalFormattingOutput() TemplateKpiConditionalFormattingOutput
	ToTemplateKpiConditionalFormattingOutputWithContext(context.Context) TemplateKpiConditionalFormattingOutput
}

type TemplateKpiConditionalFormattingArgs struct {
	// The conditional formatting options of a KPI visual.
	ConditionalFormattingOptions TemplateKpiConditionalFormattingOptionArrayInput `pulumi:"conditionalFormattingOptions"`
}

func (TemplateKpiConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiConditionalFormatting)(nil)).Elem()
}

func (i TemplateKpiConditionalFormattingArgs) ToTemplateKpiConditionalFormattingOutput() TemplateKpiConditionalFormattingOutput {
	return i.ToTemplateKpiConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateKpiConditionalFormattingArgs) ToTemplateKpiConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConditionalFormattingOutput)
}

func (i TemplateKpiConditionalFormattingArgs) ToTemplateKpiConditionalFormattingPtrOutput() TemplateKpiConditionalFormattingPtrOutput {
	return i.ToTemplateKpiConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateKpiConditionalFormattingArgs) ToTemplateKpiConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConditionalFormattingOutput).ToTemplateKpiConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateKpiConditionalFormattingPtrInput is an input type that accepts TemplateKpiConditionalFormattingArgs, TemplateKpiConditionalFormattingPtr and TemplateKpiConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateKpiConditionalFormattingPtrInput` via:
//
//	        TemplateKpiConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateKpiConditionalFormattingPtrOutput() TemplateKpiConditionalFormattingPtrOutput
	ToTemplateKpiConditionalFormattingPtrOutputWithContext(context.Context) TemplateKpiConditionalFormattingPtrOutput
}

type templateKpiConditionalFormattingPtrType TemplateKpiConditionalFormattingArgs

func TemplateKpiConditionalFormattingPtr(v *TemplateKpiConditionalFormattingArgs) TemplateKpiConditionalFormattingPtrInput {
	return (*templateKpiConditionalFormattingPtrType)(v)
}

func (*templateKpiConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiConditionalFormatting)(nil)).Elem()
}

func (i *templateKpiConditionalFormattingPtrType) ToTemplateKpiConditionalFormattingPtrOutput() TemplateKpiConditionalFormattingPtrOutput {
	return i.ToTemplateKpiConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateKpiConditionalFormattingPtrType) ToTemplateKpiConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConditionalFormattingPtrOutput)
}

type TemplateKpiConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateKpiConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiConditionalFormattingOutput) ToTemplateKpiConditionalFormattingOutput() TemplateKpiConditionalFormattingOutput {
	return o
}

func (o TemplateKpiConditionalFormattingOutput) ToTemplateKpiConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingOutput {
	return o
}

func (o TemplateKpiConditionalFormattingOutput) ToTemplateKpiConditionalFormattingPtrOutput() TemplateKpiConditionalFormattingPtrOutput {
	return o.ToTemplateKpiConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateKpiConditionalFormattingOutput) ToTemplateKpiConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiConditionalFormatting) *TemplateKpiConditionalFormatting {
		return &v
	}).(TemplateKpiConditionalFormattingPtrOutput)
}

// The conditional formatting options of a KPI visual.
func (o TemplateKpiConditionalFormattingOutput) ConditionalFormattingOptions() TemplateKpiConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v TemplateKpiConditionalFormatting) []TemplateKpiConditionalFormattingOption {
		return v.ConditionalFormattingOptions
	}).(TemplateKpiConditionalFormattingOptionArrayOutput)
}

type TemplateKpiConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiConditionalFormattingPtrOutput) ToTemplateKpiConditionalFormattingPtrOutput() TemplateKpiConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiConditionalFormattingPtrOutput) ToTemplateKpiConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiConditionalFormattingPtrOutput) Elem() TemplateKpiConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateKpiConditionalFormatting) TemplateKpiConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateKpiConditionalFormatting
		return ret
	}).(TemplateKpiConditionalFormattingOutput)
}

// The conditional formatting options of a KPI visual.
func (o TemplateKpiConditionalFormattingPtrOutput) ConditionalFormattingOptions() TemplateKpiConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v *TemplateKpiConditionalFormatting) []TemplateKpiConditionalFormattingOption {
		if v == nil {
			return nil
		}
		return v.ConditionalFormattingOptions
	}).(TemplateKpiConditionalFormattingOptionArrayOutput)
}

type TemplateKpiConditionalFormattingOption struct {
	// The conditional formatting for the actual value of a KPI visual.
	ActualValue *TemplateKpiActualValueConditionalFormatting `pulumi:"actualValue"`
	// The conditional formatting for the comparison value of a KPI visual.
	ComparisonValue *TemplateKpiComparisonValueConditionalFormatting `pulumi:"comparisonValue"`
	// The conditional formatting for the primary value of a KPI visual.
	PrimaryValue *TemplateKpiPrimaryValueConditionalFormatting `pulumi:"primaryValue"`
	// The conditional formatting for the progress bar of a KPI visual.
	ProgressBar *TemplateKpiProgressBarConditionalFormatting `pulumi:"progressBar"`
}

// TemplateKpiConditionalFormattingOptionInput is an input type that accepts TemplateKpiConditionalFormattingOptionArgs and TemplateKpiConditionalFormattingOptionOutput values.
// You can construct a concrete instance of `TemplateKpiConditionalFormattingOptionInput` via:
//
//	TemplateKpiConditionalFormattingOptionArgs{...}
type TemplateKpiConditionalFormattingOptionInput interface {
	pulumi.Input

	ToTemplateKpiConditionalFormattingOptionOutput() TemplateKpiConditionalFormattingOptionOutput
	ToTemplateKpiConditionalFormattingOptionOutputWithContext(context.Context) TemplateKpiConditionalFormattingOptionOutput
}

type TemplateKpiConditionalFormattingOptionArgs struct {
	// The conditional formatting for the actual value of a KPI visual.
	ActualValue TemplateKpiActualValueConditionalFormattingPtrInput `pulumi:"actualValue"`
	// The conditional formatting for the comparison value of a KPI visual.
	ComparisonValue TemplateKpiComparisonValueConditionalFormattingPtrInput `pulumi:"comparisonValue"`
	// The conditional formatting for the primary value of a KPI visual.
	PrimaryValue TemplateKpiPrimaryValueConditionalFormattingPtrInput `pulumi:"primaryValue"`
	// The conditional formatting for the progress bar of a KPI visual.
	ProgressBar TemplateKpiProgressBarConditionalFormattingPtrInput `pulumi:"progressBar"`
}

func (TemplateKpiConditionalFormattingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateKpiConditionalFormattingOptionArgs) ToTemplateKpiConditionalFormattingOptionOutput() TemplateKpiConditionalFormattingOptionOutput {
	return i.ToTemplateKpiConditionalFormattingOptionOutputWithContext(context.Background())
}

func (i TemplateKpiConditionalFormattingOptionArgs) ToTemplateKpiConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConditionalFormattingOptionOutput)
}

// TemplateKpiConditionalFormattingOptionArrayInput is an input type that accepts TemplateKpiConditionalFormattingOptionArray and TemplateKpiConditionalFormattingOptionArrayOutput values.
// You can construct a concrete instance of `TemplateKpiConditionalFormattingOptionArrayInput` via:
//
//	TemplateKpiConditionalFormattingOptionArray{ TemplateKpiConditionalFormattingOptionArgs{...} }
type TemplateKpiConditionalFormattingOptionArrayInput interface {
	pulumi.Input

	ToTemplateKpiConditionalFormattingOptionArrayOutput() TemplateKpiConditionalFormattingOptionArrayOutput
	ToTemplateKpiConditionalFormattingOptionArrayOutputWithContext(context.Context) TemplateKpiConditionalFormattingOptionArrayOutput
}

type TemplateKpiConditionalFormattingOptionArray []TemplateKpiConditionalFormattingOptionInput

func (TemplateKpiConditionalFormattingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateKpiConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateKpiConditionalFormattingOptionArray) ToTemplateKpiConditionalFormattingOptionArrayOutput() TemplateKpiConditionalFormattingOptionArrayOutput {
	return i.ToTemplateKpiConditionalFormattingOptionArrayOutputWithContext(context.Background())
}

func (i TemplateKpiConditionalFormattingOptionArray) ToTemplateKpiConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConditionalFormattingOptionArrayOutput)
}

type TemplateKpiConditionalFormattingOptionOutput struct{ *pulumi.OutputState }

func (TemplateKpiConditionalFormattingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateKpiConditionalFormattingOptionOutput) ToTemplateKpiConditionalFormattingOptionOutput() TemplateKpiConditionalFormattingOptionOutput {
	return o
}

func (o TemplateKpiConditionalFormattingOptionOutput) ToTemplateKpiConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingOptionOutput {
	return o
}

// The conditional formatting for the actual value of a KPI visual.
func (o TemplateKpiConditionalFormattingOptionOutput) ActualValue() TemplateKpiActualValueConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateKpiConditionalFormattingOption) *TemplateKpiActualValueConditionalFormatting {
		return v.ActualValue
	}).(TemplateKpiActualValueConditionalFormattingPtrOutput)
}

// The conditional formatting for the comparison value of a KPI visual.
func (o TemplateKpiConditionalFormattingOptionOutput) ComparisonValue() TemplateKpiComparisonValueConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateKpiConditionalFormattingOption) *TemplateKpiComparisonValueConditionalFormatting {
		return v.ComparisonValue
	}).(TemplateKpiComparisonValueConditionalFormattingPtrOutput)
}

// The conditional formatting for the primary value of a KPI visual.
func (o TemplateKpiConditionalFormattingOptionOutput) PrimaryValue() TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateKpiConditionalFormattingOption) *TemplateKpiPrimaryValueConditionalFormatting {
		return v.PrimaryValue
	}).(TemplateKpiPrimaryValueConditionalFormattingPtrOutput)
}

// The conditional formatting for the progress bar of a KPI visual.
func (o TemplateKpiConditionalFormattingOptionOutput) ProgressBar() TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateKpiConditionalFormattingOption) *TemplateKpiProgressBarConditionalFormatting {
		return v.ProgressBar
	}).(TemplateKpiProgressBarConditionalFormattingPtrOutput)
}

type TemplateKpiConditionalFormattingOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateKpiConditionalFormattingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateKpiConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateKpiConditionalFormattingOptionArrayOutput) ToTemplateKpiConditionalFormattingOptionArrayOutput() TemplateKpiConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateKpiConditionalFormattingOptionArrayOutput) ToTemplateKpiConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateKpiConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateKpiConditionalFormattingOptionArrayOutput) Index(i pulumi.IntInput) TemplateKpiConditionalFormattingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateKpiConditionalFormattingOption {
		return vs[0].([]TemplateKpiConditionalFormattingOption)[vs[1].(int)]
	}).(TemplateKpiConditionalFormattingOptionOutput)
}

type TemplateKpiConfiguration struct {
	// The field well configuration of a KPI visual.
	FieldWells *TemplateKpiFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The options that determine the presentation of a KPI visual.
	KpiOptions *TemplateKpiOptions `pulumi:"kpiOptions"`
	// The sort configuration of a KPI visual.
	SortConfiguration *TemplateKpiSortConfiguration `pulumi:"sortConfiguration"`
}

// TemplateKpiConfigurationInput is an input type that accepts TemplateKpiConfigurationArgs and TemplateKpiConfigurationOutput values.
// You can construct a concrete instance of `TemplateKpiConfigurationInput` via:
//
//	TemplateKpiConfigurationArgs{...}
type TemplateKpiConfigurationInput interface {
	pulumi.Input

	ToTemplateKpiConfigurationOutput() TemplateKpiConfigurationOutput
	ToTemplateKpiConfigurationOutputWithContext(context.Context) TemplateKpiConfigurationOutput
}

type TemplateKpiConfigurationArgs struct {
	// The field well configuration of a KPI visual.
	FieldWells TemplateKpiFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The options that determine the presentation of a KPI visual.
	KpiOptions TemplateKpiOptionsPtrInput `pulumi:"kpiOptions"`
	// The sort configuration of a KPI visual.
	SortConfiguration TemplateKpiSortConfigurationPtrInput `pulumi:"sortConfiguration"`
}

func (TemplateKpiConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiConfiguration)(nil)).Elem()
}

func (i TemplateKpiConfigurationArgs) ToTemplateKpiConfigurationOutput() TemplateKpiConfigurationOutput {
	return i.ToTemplateKpiConfigurationOutputWithContext(context.Background())
}

func (i TemplateKpiConfigurationArgs) ToTemplateKpiConfigurationOutputWithContext(ctx context.Context) TemplateKpiConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConfigurationOutput)
}

func (i TemplateKpiConfigurationArgs) ToTemplateKpiConfigurationPtrOutput() TemplateKpiConfigurationPtrOutput {
	return i.ToTemplateKpiConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateKpiConfigurationArgs) ToTemplateKpiConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConfigurationOutput).ToTemplateKpiConfigurationPtrOutputWithContext(ctx)
}

// TemplateKpiConfigurationPtrInput is an input type that accepts TemplateKpiConfigurationArgs, TemplateKpiConfigurationPtr and TemplateKpiConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateKpiConfigurationPtrInput` via:
//
//	        TemplateKpiConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateKpiConfigurationPtrOutput() TemplateKpiConfigurationPtrOutput
	ToTemplateKpiConfigurationPtrOutputWithContext(context.Context) TemplateKpiConfigurationPtrOutput
}

type templateKpiConfigurationPtrType TemplateKpiConfigurationArgs

func TemplateKpiConfigurationPtr(v *TemplateKpiConfigurationArgs) TemplateKpiConfigurationPtrInput {
	return (*templateKpiConfigurationPtrType)(v)
}

func (*templateKpiConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiConfiguration)(nil)).Elem()
}

func (i *templateKpiConfigurationPtrType) ToTemplateKpiConfigurationPtrOutput() TemplateKpiConfigurationPtrOutput {
	return i.ToTemplateKpiConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateKpiConfigurationPtrType) ToTemplateKpiConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiConfigurationPtrOutput)
}

type TemplateKpiConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateKpiConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiConfiguration)(nil)).Elem()
}

func (o TemplateKpiConfigurationOutput) ToTemplateKpiConfigurationOutput() TemplateKpiConfigurationOutput {
	return o
}

func (o TemplateKpiConfigurationOutput) ToTemplateKpiConfigurationOutputWithContext(ctx context.Context) TemplateKpiConfigurationOutput {
	return o
}

func (o TemplateKpiConfigurationOutput) ToTemplateKpiConfigurationPtrOutput() TemplateKpiConfigurationPtrOutput {
	return o.ToTemplateKpiConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateKpiConfigurationOutput) ToTemplateKpiConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiConfiguration) *TemplateKpiConfiguration {
		return &v
	}).(TemplateKpiConfigurationPtrOutput)
}

// The field well configuration of a KPI visual.
func (o TemplateKpiConfigurationOutput) FieldWells() TemplateKpiFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateKpiConfiguration) *TemplateKpiFieldWells { return v.FieldWells }).(TemplateKpiFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateKpiConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The options that determine the presentation of a KPI visual.
func (o TemplateKpiConfigurationOutput) KpiOptions() TemplateKpiOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiConfiguration) *TemplateKpiOptions { return v.KpiOptions }).(TemplateKpiOptionsPtrOutput)
}

// The sort configuration of a KPI visual.
func (o TemplateKpiConfigurationOutput) SortConfiguration() TemplateKpiSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateKpiConfiguration) *TemplateKpiSortConfiguration { return v.SortConfiguration }).(TemplateKpiSortConfigurationPtrOutput)
}

type TemplateKpiConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiConfiguration)(nil)).Elem()
}

func (o TemplateKpiConfigurationPtrOutput) ToTemplateKpiConfigurationPtrOutput() TemplateKpiConfigurationPtrOutput {
	return o
}

func (o TemplateKpiConfigurationPtrOutput) ToTemplateKpiConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiConfigurationPtrOutput {
	return o
}

func (o TemplateKpiConfigurationPtrOutput) Elem() TemplateKpiConfigurationOutput {
	return o.ApplyT(func(v *TemplateKpiConfiguration) TemplateKpiConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateKpiConfiguration
		return ret
	}).(TemplateKpiConfigurationOutput)
}

// The field well configuration of a KPI visual.
func (o TemplateKpiConfigurationPtrOutput) FieldWells() TemplateKpiFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiConfiguration) *TemplateKpiFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateKpiFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateKpiConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The options that determine the presentation of a KPI visual.
func (o TemplateKpiConfigurationPtrOutput) KpiOptions() TemplateKpiOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiConfiguration) *TemplateKpiOptions {
		if v == nil {
			return nil
		}
		return v.KpiOptions
	}).(TemplateKpiOptionsPtrOutput)
}

// The sort configuration of a KPI visual.
func (o TemplateKpiConfigurationPtrOutput) SortConfiguration() TemplateKpiSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateKpiConfiguration) *TemplateKpiSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateKpiSortConfigurationPtrOutput)
}

type TemplateKpiFieldWells struct {
	// The target value field wells of a KPI visual.
	TargetValues []TemplateMeasureField `pulumi:"targetValues"`
	// The trend group field wells of a KPI visual.
	TrendGroups []TemplateDimensionField `pulumi:"trendGroups"`
	// The value field wells of a KPI visual.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateKpiFieldWellsInput is an input type that accepts TemplateKpiFieldWellsArgs and TemplateKpiFieldWellsOutput values.
// You can construct a concrete instance of `TemplateKpiFieldWellsInput` via:
//
//	TemplateKpiFieldWellsArgs{...}
type TemplateKpiFieldWellsInput interface {
	pulumi.Input

	ToTemplateKpiFieldWellsOutput() TemplateKpiFieldWellsOutput
	ToTemplateKpiFieldWellsOutputWithContext(context.Context) TemplateKpiFieldWellsOutput
}

type TemplateKpiFieldWellsArgs struct {
	// The target value field wells of a KPI visual.
	TargetValues TemplateMeasureFieldArrayInput `pulumi:"targetValues"`
	// The trend group field wells of a KPI visual.
	TrendGroups TemplateDimensionFieldArrayInput `pulumi:"trendGroups"`
	// The value field wells of a KPI visual.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateKpiFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiFieldWells)(nil)).Elem()
}

func (i TemplateKpiFieldWellsArgs) ToTemplateKpiFieldWellsOutput() TemplateKpiFieldWellsOutput {
	return i.ToTemplateKpiFieldWellsOutputWithContext(context.Background())
}

func (i TemplateKpiFieldWellsArgs) ToTemplateKpiFieldWellsOutputWithContext(ctx context.Context) TemplateKpiFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiFieldWellsOutput)
}

func (i TemplateKpiFieldWellsArgs) ToTemplateKpiFieldWellsPtrOutput() TemplateKpiFieldWellsPtrOutput {
	return i.ToTemplateKpiFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateKpiFieldWellsArgs) ToTemplateKpiFieldWellsPtrOutputWithContext(ctx context.Context) TemplateKpiFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiFieldWellsOutput).ToTemplateKpiFieldWellsPtrOutputWithContext(ctx)
}

// TemplateKpiFieldWellsPtrInput is an input type that accepts TemplateKpiFieldWellsArgs, TemplateKpiFieldWellsPtr and TemplateKpiFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateKpiFieldWellsPtrInput` via:
//
//	        TemplateKpiFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateKpiFieldWellsPtrOutput() TemplateKpiFieldWellsPtrOutput
	ToTemplateKpiFieldWellsPtrOutputWithContext(context.Context) TemplateKpiFieldWellsPtrOutput
}

type templateKpiFieldWellsPtrType TemplateKpiFieldWellsArgs

func TemplateKpiFieldWellsPtr(v *TemplateKpiFieldWellsArgs) TemplateKpiFieldWellsPtrInput {
	return (*templateKpiFieldWellsPtrType)(v)
}

func (*templateKpiFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiFieldWells)(nil)).Elem()
}

func (i *templateKpiFieldWellsPtrType) ToTemplateKpiFieldWellsPtrOutput() TemplateKpiFieldWellsPtrOutput {
	return i.ToTemplateKpiFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateKpiFieldWellsPtrType) ToTemplateKpiFieldWellsPtrOutputWithContext(ctx context.Context) TemplateKpiFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiFieldWellsPtrOutput)
}

type TemplateKpiFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateKpiFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiFieldWells)(nil)).Elem()
}

func (o TemplateKpiFieldWellsOutput) ToTemplateKpiFieldWellsOutput() TemplateKpiFieldWellsOutput {
	return o
}

func (o TemplateKpiFieldWellsOutput) ToTemplateKpiFieldWellsOutputWithContext(ctx context.Context) TemplateKpiFieldWellsOutput {
	return o
}

func (o TemplateKpiFieldWellsOutput) ToTemplateKpiFieldWellsPtrOutput() TemplateKpiFieldWellsPtrOutput {
	return o.ToTemplateKpiFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateKpiFieldWellsOutput) ToTemplateKpiFieldWellsPtrOutputWithContext(ctx context.Context) TemplateKpiFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiFieldWells) *TemplateKpiFieldWells {
		return &v
	}).(TemplateKpiFieldWellsPtrOutput)
}

// The target value field wells of a KPI visual.
func (o TemplateKpiFieldWellsOutput) TargetValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateKpiFieldWells) []TemplateMeasureField { return v.TargetValues }).(TemplateMeasureFieldArrayOutput)
}

// The trend group field wells of a KPI visual.
func (o TemplateKpiFieldWellsOutput) TrendGroups() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateKpiFieldWells) []TemplateDimensionField { return v.TrendGroups }).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a KPI visual.
func (o TemplateKpiFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateKpiFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateKpiFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiFieldWells)(nil)).Elem()
}

func (o TemplateKpiFieldWellsPtrOutput) ToTemplateKpiFieldWellsPtrOutput() TemplateKpiFieldWellsPtrOutput {
	return o
}

func (o TemplateKpiFieldWellsPtrOutput) ToTemplateKpiFieldWellsPtrOutputWithContext(ctx context.Context) TemplateKpiFieldWellsPtrOutput {
	return o
}

func (o TemplateKpiFieldWellsPtrOutput) Elem() TemplateKpiFieldWellsOutput {
	return o.ApplyT(func(v *TemplateKpiFieldWells) TemplateKpiFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateKpiFieldWells
		return ret
	}).(TemplateKpiFieldWellsOutput)
}

// The target value field wells of a KPI visual.
func (o TemplateKpiFieldWellsPtrOutput) TargetValues() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateKpiFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.TargetValues
	}).(TemplateMeasureFieldArrayOutput)
}

// The trend group field wells of a KPI visual.
func (o TemplateKpiFieldWellsPtrOutput) TrendGroups() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateKpiFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.TrendGroups
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a KPI visual.
func (o TemplateKpiFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateKpiFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateKpiOptions struct {
	// The comparison configuration of a KPI visual.
	Comparison *TemplateComparisonConfiguration `pulumi:"comparison"`
	// The options that determine the primary value display type.
	PrimaryValueDisplayType *TemplatePrimaryValueDisplayType `pulumi:"primaryValueDisplayType"`
	// The options that determine the primary value font configuration.
	PrimaryValueFontConfiguration *TemplateFontConfiguration `pulumi:"primaryValueFontConfiguration"`
	// The options that determine the presentation of the progress bar of a KPI visual.
	ProgressBar *TemplateProgressBarOptions `pulumi:"progressBar"`
	// The options that determine the presentation of the secondary value of a KPI visual.
	SecondaryValue *TemplateSecondaryValueOptions `pulumi:"secondaryValue"`
	// The options that determine the secondary value font configuration.
	SecondaryValueFontConfiguration *TemplateFontConfiguration `pulumi:"secondaryValueFontConfiguration"`
	// The options that determine the visibility, color, type, and tooltip visibility of the sparkline of a KPI visual.
	Sparkline *TemplateKpiSparklineOptions `pulumi:"sparkline"`
	// The options that determine the presentation of trend arrows in a KPI visual.
	TrendArrows *TemplateTrendArrowOptions `pulumi:"trendArrows"`
	// The options that determine the layout a KPI visual.
	VisualLayoutOptions *TemplateKpiVisualLayoutOptions `pulumi:"visualLayoutOptions"`
}

// TemplateKpiOptionsInput is an input type that accepts TemplateKpiOptionsArgs and TemplateKpiOptionsOutput values.
// You can construct a concrete instance of `TemplateKpiOptionsInput` via:
//
//	TemplateKpiOptionsArgs{...}
type TemplateKpiOptionsInput interface {
	pulumi.Input

	ToTemplateKpiOptionsOutput() TemplateKpiOptionsOutput
	ToTemplateKpiOptionsOutputWithContext(context.Context) TemplateKpiOptionsOutput
}

type TemplateKpiOptionsArgs struct {
	// The comparison configuration of a KPI visual.
	Comparison TemplateComparisonConfigurationPtrInput `pulumi:"comparison"`
	// The options that determine the primary value display type.
	PrimaryValueDisplayType TemplatePrimaryValueDisplayTypePtrInput `pulumi:"primaryValueDisplayType"`
	// The options that determine the primary value font configuration.
	PrimaryValueFontConfiguration TemplateFontConfigurationPtrInput `pulumi:"primaryValueFontConfiguration"`
	// The options that determine the presentation of the progress bar of a KPI visual.
	ProgressBar TemplateProgressBarOptionsPtrInput `pulumi:"progressBar"`
	// The options that determine the presentation of the secondary value of a KPI visual.
	SecondaryValue TemplateSecondaryValueOptionsPtrInput `pulumi:"secondaryValue"`
	// The options that determine the secondary value font configuration.
	SecondaryValueFontConfiguration TemplateFontConfigurationPtrInput `pulumi:"secondaryValueFontConfiguration"`
	// The options that determine the visibility, color, type, and tooltip visibility of the sparkline of a KPI visual.
	Sparkline TemplateKpiSparklineOptionsPtrInput `pulumi:"sparkline"`
	// The options that determine the presentation of trend arrows in a KPI visual.
	TrendArrows TemplateTrendArrowOptionsPtrInput `pulumi:"trendArrows"`
	// The options that determine the layout a KPI visual.
	VisualLayoutOptions TemplateKpiVisualLayoutOptionsPtrInput `pulumi:"visualLayoutOptions"`
}

func (TemplateKpiOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiOptions)(nil)).Elem()
}

func (i TemplateKpiOptionsArgs) ToTemplateKpiOptionsOutput() TemplateKpiOptionsOutput {
	return i.ToTemplateKpiOptionsOutputWithContext(context.Background())
}

func (i TemplateKpiOptionsArgs) ToTemplateKpiOptionsOutputWithContext(ctx context.Context) TemplateKpiOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiOptionsOutput)
}

func (i TemplateKpiOptionsArgs) ToTemplateKpiOptionsPtrOutput() TemplateKpiOptionsPtrOutput {
	return i.ToTemplateKpiOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateKpiOptionsArgs) ToTemplateKpiOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiOptionsOutput).ToTemplateKpiOptionsPtrOutputWithContext(ctx)
}

// TemplateKpiOptionsPtrInput is an input type that accepts TemplateKpiOptionsArgs, TemplateKpiOptionsPtr and TemplateKpiOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateKpiOptionsPtrInput` via:
//
//	        TemplateKpiOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiOptionsPtrInput interface {
	pulumi.Input

	ToTemplateKpiOptionsPtrOutput() TemplateKpiOptionsPtrOutput
	ToTemplateKpiOptionsPtrOutputWithContext(context.Context) TemplateKpiOptionsPtrOutput
}

type templateKpiOptionsPtrType TemplateKpiOptionsArgs

func TemplateKpiOptionsPtr(v *TemplateKpiOptionsArgs) TemplateKpiOptionsPtrInput {
	return (*templateKpiOptionsPtrType)(v)
}

func (*templateKpiOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiOptions)(nil)).Elem()
}

func (i *templateKpiOptionsPtrType) ToTemplateKpiOptionsPtrOutput() TemplateKpiOptionsPtrOutput {
	return i.ToTemplateKpiOptionsPtrOutputWithContext(context.Background())
}

func (i *templateKpiOptionsPtrType) ToTemplateKpiOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiOptionsPtrOutput)
}

type TemplateKpiOptionsOutput struct{ *pulumi.OutputState }

func (TemplateKpiOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiOptions)(nil)).Elem()
}

func (o TemplateKpiOptionsOutput) ToTemplateKpiOptionsOutput() TemplateKpiOptionsOutput {
	return o
}

func (o TemplateKpiOptionsOutput) ToTemplateKpiOptionsOutputWithContext(ctx context.Context) TemplateKpiOptionsOutput {
	return o
}

func (o TemplateKpiOptionsOutput) ToTemplateKpiOptionsPtrOutput() TemplateKpiOptionsPtrOutput {
	return o.ToTemplateKpiOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateKpiOptionsOutput) ToTemplateKpiOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiOptions) *TemplateKpiOptions {
		return &v
	}).(TemplateKpiOptionsPtrOutput)
}

// The comparison configuration of a KPI visual.
func (o TemplateKpiOptionsOutput) Comparison() TemplateComparisonConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateComparisonConfiguration { return v.Comparison }).(TemplateComparisonConfigurationPtrOutput)
}

// The options that determine the primary value display type.
func (o TemplateKpiOptionsOutput) PrimaryValueDisplayType() TemplatePrimaryValueDisplayTypePtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplatePrimaryValueDisplayType { return v.PrimaryValueDisplayType }).(TemplatePrimaryValueDisplayTypePtrOutput)
}

// The options that determine the primary value font configuration.
func (o TemplateKpiOptionsOutput) PrimaryValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateFontConfiguration { return v.PrimaryValueFontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// The options that determine the presentation of the progress bar of a KPI visual.
func (o TemplateKpiOptionsOutput) ProgressBar() TemplateProgressBarOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateProgressBarOptions { return v.ProgressBar }).(TemplateProgressBarOptionsPtrOutput)
}

// The options that determine the presentation of the secondary value of a KPI visual.
func (o TemplateKpiOptionsOutput) SecondaryValue() TemplateSecondaryValueOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateSecondaryValueOptions { return v.SecondaryValue }).(TemplateSecondaryValueOptionsPtrOutput)
}

// The options that determine the secondary value font configuration.
func (o TemplateKpiOptionsOutput) SecondaryValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateFontConfiguration { return v.SecondaryValueFontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// The options that determine the visibility, color, type, and tooltip visibility of the sparkline of a KPI visual.
func (o TemplateKpiOptionsOutput) Sparkline() TemplateKpiSparklineOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateKpiSparklineOptions { return v.Sparkline }).(TemplateKpiSparklineOptionsPtrOutput)
}

// The options that determine the presentation of trend arrows in a KPI visual.
func (o TemplateKpiOptionsOutput) TrendArrows() TemplateTrendArrowOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateTrendArrowOptions { return v.TrendArrows }).(TemplateTrendArrowOptionsPtrOutput)
}

// The options that determine the layout a KPI visual.
func (o TemplateKpiOptionsOutput) VisualLayoutOptions() TemplateKpiVisualLayoutOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiOptions) *TemplateKpiVisualLayoutOptions { return v.VisualLayoutOptions }).(TemplateKpiVisualLayoutOptionsPtrOutput)
}

type TemplateKpiOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiOptions)(nil)).Elem()
}

func (o TemplateKpiOptionsPtrOutput) ToTemplateKpiOptionsPtrOutput() TemplateKpiOptionsPtrOutput {
	return o
}

func (o TemplateKpiOptionsPtrOutput) ToTemplateKpiOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiOptionsPtrOutput {
	return o
}

func (o TemplateKpiOptionsPtrOutput) Elem() TemplateKpiOptionsOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) TemplateKpiOptions {
		if v != nil {
			return *v
		}
		var ret TemplateKpiOptions
		return ret
	}).(TemplateKpiOptionsOutput)
}

// The comparison configuration of a KPI visual.
func (o TemplateKpiOptionsPtrOutput) Comparison() TemplateComparisonConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateComparisonConfiguration {
		if v == nil {
			return nil
		}
		return v.Comparison
	}).(TemplateComparisonConfigurationPtrOutput)
}

// The options that determine the primary value display type.
func (o TemplateKpiOptionsPtrOutput) PrimaryValueDisplayType() TemplatePrimaryValueDisplayTypePtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplatePrimaryValueDisplayType {
		if v == nil {
			return nil
		}
		return v.PrimaryValueDisplayType
	}).(TemplatePrimaryValueDisplayTypePtrOutput)
}

// The options that determine the primary value font configuration.
func (o TemplateKpiOptionsPtrOutput) PrimaryValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.PrimaryValueFontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// The options that determine the presentation of the progress bar of a KPI visual.
func (o TemplateKpiOptionsPtrOutput) ProgressBar() TemplateProgressBarOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateProgressBarOptions {
		if v == nil {
			return nil
		}
		return v.ProgressBar
	}).(TemplateProgressBarOptionsPtrOutput)
}

// The options that determine the presentation of the secondary value of a KPI visual.
func (o TemplateKpiOptionsPtrOutput) SecondaryValue() TemplateSecondaryValueOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateSecondaryValueOptions {
		if v == nil {
			return nil
		}
		return v.SecondaryValue
	}).(TemplateSecondaryValueOptionsPtrOutput)
}

// The options that determine the secondary value font configuration.
func (o TemplateKpiOptionsPtrOutput) SecondaryValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.SecondaryValueFontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// The options that determine the visibility, color, type, and tooltip visibility of the sparkline of a KPI visual.
func (o TemplateKpiOptionsPtrOutput) Sparkline() TemplateKpiSparklineOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateKpiSparklineOptions {
		if v == nil {
			return nil
		}
		return v.Sparkline
	}).(TemplateKpiSparklineOptionsPtrOutput)
}

// The options that determine the presentation of trend arrows in a KPI visual.
func (o TemplateKpiOptionsPtrOutput) TrendArrows() TemplateTrendArrowOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateTrendArrowOptions {
		if v == nil {
			return nil
		}
		return v.TrendArrows
	}).(TemplateTrendArrowOptionsPtrOutput)
}

// The options that determine the layout a KPI visual.
func (o TemplateKpiOptionsPtrOutput) VisualLayoutOptions() TemplateKpiVisualLayoutOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiOptions) *TemplateKpiVisualLayoutOptions {
		if v == nil {
			return nil
		}
		return v.VisualLayoutOptions
	}).(TemplateKpiVisualLayoutOptionsPtrOutput)
}

type TemplateKpiPrimaryValueConditionalFormatting struct {
	// The conditional formatting of the primary value's icon.
	Icon *TemplateConditionalFormattingIcon `pulumi:"icon"`
	// The conditional formatting of the primary value's text color.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateKpiPrimaryValueConditionalFormattingInput is an input type that accepts TemplateKpiPrimaryValueConditionalFormattingArgs and TemplateKpiPrimaryValueConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateKpiPrimaryValueConditionalFormattingInput` via:
//
//	TemplateKpiPrimaryValueConditionalFormattingArgs{...}
type TemplateKpiPrimaryValueConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateKpiPrimaryValueConditionalFormattingOutput() TemplateKpiPrimaryValueConditionalFormattingOutput
	ToTemplateKpiPrimaryValueConditionalFormattingOutputWithContext(context.Context) TemplateKpiPrimaryValueConditionalFormattingOutput
}

type TemplateKpiPrimaryValueConditionalFormattingArgs struct {
	// The conditional formatting of the primary value's icon.
	Icon TemplateConditionalFormattingIconPtrInput `pulumi:"icon"`
	// The conditional formatting of the primary value's text color.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateKpiPrimaryValueConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (i TemplateKpiPrimaryValueConditionalFormattingArgs) ToTemplateKpiPrimaryValueConditionalFormattingOutput() TemplateKpiPrimaryValueConditionalFormattingOutput {
	return i.ToTemplateKpiPrimaryValueConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateKpiPrimaryValueConditionalFormattingArgs) ToTemplateKpiPrimaryValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiPrimaryValueConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiPrimaryValueConditionalFormattingOutput)
}

func (i TemplateKpiPrimaryValueConditionalFormattingArgs) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutput() TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return i.ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateKpiPrimaryValueConditionalFormattingArgs) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiPrimaryValueConditionalFormattingOutput).ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateKpiPrimaryValueConditionalFormattingPtrInput is an input type that accepts TemplateKpiPrimaryValueConditionalFormattingArgs, TemplateKpiPrimaryValueConditionalFormattingPtr and TemplateKpiPrimaryValueConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateKpiPrimaryValueConditionalFormattingPtrInput` via:
//
//	        TemplateKpiPrimaryValueConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiPrimaryValueConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateKpiPrimaryValueConditionalFormattingPtrOutput() TemplateKpiPrimaryValueConditionalFormattingPtrOutput
	ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(context.Context) TemplateKpiPrimaryValueConditionalFormattingPtrOutput
}

type templateKpiPrimaryValueConditionalFormattingPtrType TemplateKpiPrimaryValueConditionalFormattingArgs

func TemplateKpiPrimaryValueConditionalFormattingPtr(v *TemplateKpiPrimaryValueConditionalFormattingArgs) TemplateKpiPrimaryValueConditionalFormattingPtrInput {
	return (*templateKpiPrimaryValueConditionalFormattingPtrType)(v)
}

func (*templateKpiPrimaryValueConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (i *templateKpiPrimaryValueConditionalFormattingPtrType) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutput() TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return i.ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateKpiPrimaryValueConditionalFormattingPtrType) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiPrimaryValueConditionalFormattingPtrOutput)
}

type TemplateKpiPrimaryValueConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateKpiPrimaryValueConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiPrimaryValueConditionalFormattingOutput) ToTemplateKpiPrimaryValueConditionalFormattingOutput() TemplateKpiPrimaryValueConditionalFormattingOutput {
	return o
}

func (o TemplateKpiPrimaryValueConditionalFormattingOutput) ToTemplateKpiPrimaryValueConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiPrimaryValueConditionalFormattingOutput {
	return o
}

func (o TemplateKpiPrimaryValueConditionalFormattingOutput) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutput() TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return o.ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateKpiPrimaryValueConditionalFormattingOutput) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiPrimaryValueConditionalFormatting) *TemplateKpiPrimaryValueConditionalFormatting {
		return &v
	}).(TemplateKpiPrimaryValueConditionalFormattingPtrOutput)
}

// The conditional formatting of the primary value's icon.
func (o TemplateKpiPrimaryValueConditionalFormattingOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v TemplateKpiPrimaryValueConditionalFormatting) *TemplateConditionalFormattingIcon { return v.Icon }).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the primary value's text color.
func (o TemplateKpiPrimaryValueConditionalFormattingOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateKpiPrimaryValueConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiPrimaryValueConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiPrimaryValueConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiPrimaryValueConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiPrimaryValueConditionalFormattingPtrOutput) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutput() TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiPrimaryValueConditionalFormattingPtrOutput) ToTemplateKpiPrimaryValueConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiPrimaryValueConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiPrimaryValueConditionalFormattingPtrOutput) Elem() TemplateKpiPrimaryValueConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateKpiPrimaryValueConditionalFormatting) TemplateKpiPrimaryValueConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateKpiPrimaryValueConditionalFormatting
		return ret
	}).(TemplateKpiPrimaryValueConditionalFormattingOutput)
}

// The conditional formatting of the primary value's icon.
func (o TemplateKpiPrimaryValueConditionalFormattingPtrOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v *TemplateKpiPrimaryValueConditionalFormatting) *TemplateConditionalFormattingIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting of the primary value's text color.
func (o TemplateKpiPrimaryValueConditionalFormattingPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateKpiPrimaryValueConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiProgressBarConditionalFormatting struct {
	// The conditional formatting of the progress bar's foreground color.
	ForegroundColor *TemplateConditionalFormattingColor `pulumi:"foregroundColor"`
}

// TemplateKpiProgressBarConditionalFormattingInput is an input type that accepts TemplateKpiProgressBarConditionalFormattingArgs and TemplateKpiProgressBarConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateKpiProgressBarConditionalFormattingInput` via:
//
//	TemplateKpiProgressBarConditionalFormattingArgs{...}
type TemplateKpiProgressBarConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateKpiProgressBarConditionalFormattingOutput() TemplateKpiProgressBarConditionalFormattingOutput
	ToTemplateKpiProgressBarConditionalFormattingOutputWithContext(context.Context) TemplateKpiProgressBarConditionalFormattingOutput
}

type TemplateKpiProgressBarConditionalFormattingArgs struct {
	// The conditional formatting of the progress bar's foreground color.
	ForegroundColor TemplateConditionalFormattingColorPtrInput `pulumi:"foregroundColor"`
}

func (TemplateKpiProgressBarConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiProgressBarConditionalFormatting)(nil)).Elem()
}

func (i TemplateKpiProgressBarConditionalFormattingArgs) ToTemplateKpiProgressBarConditionalFormattingOutput() TemplateKpiProgressBarConditionalFormattingOutput {
	return i.ToTemplateKpiProgressBarConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateKpiProgressBarConditionalFormattingArgs) ToTemplateKpiProgressBarConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiProgressBarConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiProgressBarConditionalFormattingOutput)
}

func (i TemplateKpiProgressBarConditionalFormattingArgs) ToTemplateKpiProgressBarConditionalFormattingPtrOutput() TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return i.ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateKpiProgressBarConditionalFormattingArgs) ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiProgressBarConditionalFormattingOutput).ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateKpiProgressBarConditionalFormattingPtrInput is an input type that accepts TemplateKpiProgressBarConditionalFormattingArgs, TemplateKpiProgressBarConditionalFormattingPtr and TemplateKpiProgressBarConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateKpiProgressBarConditionalFormattingPtrInput` via:
//
//	        TemplateKpiProgressBarConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiProgressBarConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateKpiProgressBarConditionalFormattingPtrOutput() TemplateKpiProgressBarConditionalFormattingPtrOutput
	ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(context.Context) TemplateKpiProgressBarConditionalFormattingPtrOutput
}

type templateKpiProgressBarConditionalFormattingPtrType TemplateKpiProgressBarConditionalFormattingArgs

func TemplateKpiProgressBarConditionalFormattingPtr(v *TemplateKpiProgressBarConditionalFormattingArgs) TemplateKpiProgressBarConditionalFormattingPtrInput {
	return (*templateKpiProgressBarConditionalFormattingPtrType)(v)
}

func (*templateKpiProgressBarConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiProgressBarConditionalFormatting)(nil)).Elem()
}

func (i *templateKpiProgressBarConditionalFormattingPtrType) ToTemplateKpiProgressBarConditionalFormattingPtrOutput() TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return i.ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateKpiProgressBarConditionalFormattingPtrType) ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiProgressBarConditionalFormattingPtrOutput)
}

type TemplateKpiProgressBarConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateKpiProgressBarConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiProgressBarConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiProgressBarConditionalFormattingOutput) ToTemplateKpiProgressBarConditionalFormattingOutput() TemplateKpiProgressBarConditionalFormattingOutput {
	return o
}

func (o TemplateKpiProgressBarConditionalFormattingOutput) ToTemplateKpiProgressBarConditionalFormattingOutputWithContext(ctx context.Context) TemplateKpiProgressBarConditionalFormattingOutput {
	return o
}

func (o TemplateKpiProgressBarConditionalFormattingOutput) ToTemplateKpiProgressBarConditionalFormattingPtrOutput() TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return o.ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateKpiProgressBarConditionalFormattingOutput) ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiProgressBarConditionalFormatting) *TemplateKpiProgressBarConditionalFormatting {
		return &v
	}).(TemplateKpiProgressBarConditionalFormattingPtrOutput)
}

// The conditional formatting of the progress bar's foreground color.
func (o TemplateKpiProgressBarConditionalFormattingOutput) ForegroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateKpiProgressBarConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.ForegroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiProgressBarConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiProgressBarConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiProgressBarConditionalFormatting)(nil)).Elem()
}

func (o TemplateKpiProgressBarConditionalFormattingPtrOutput) ToTemplateKpiProgressBarConditionalFormattingPtrOutput() TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiProgressBarConditionalFormattingPtrOutput) ToTemplateKpiProgressBarConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateKpiProgressBarConditionalFormattingPtrOutput {
	return o
}

func (o TemplateKpiProgressBarConditionalFormattingPtrOutput) Elem() TemplateKpiProgressBarConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateKpiProgressBarConditionalFormatting) TemplateKpiProgressBarConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateKpiProgressBarConditionalFormatting
		return ret
	}).(TemplateKpiProgressBarConditionalFormattingOutput)
}

// The conditional formatting of the progress bar's foreground color.
func (o TemplateKpiProgressBarConditionalFormattingPtrOutput) ForegroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateKpiProgressBarConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.ForegroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateKpiSortConfiguration struct {
	// The sort configuration of the trend group fields.
	TrendGroupSort []TemplateFieldSortOptions `pulumi:"trendGroupSort"`
}

// TemplateKpiSortConfigurationInput is an input type that accepts TemplateKpiSortConfigurationArgs and TemplateKpiSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateKpiSortConfigurationInput` via:
//
//	TemplateKpiSortConfigurationArgs{...}
type TemplateKpiSortConfigurationInput interface {
	pulumi.Input

	ToTemplateKpiSortConfigurationOutput() TemplateKpiSortConfigurationOutput
	ToTemplateKpiSortConfigurationOutputWithContext(context.Context) TemplateKpiSortConfigurationOutput
}

type TemplateKpiSortConfigurationArgs struct {
	// The sort configuration of the trend group fields.
	TrendGroupSort TemplateFieldSortOptionsArrayInput `pulumi:"trendGroupSort"`
}

func (TemplateKpiSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiSortConfiguration)(nil)).Elem()
}

func (i TemplateKpiSortConfigurationArgs) ToTemplateKpiSortConfigurationOutput() TemplateKpiSortConfigurationOutput {
	return i.ToTemplateKpiSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateKpiSortConfigurationArgs) ToTemplateKpiSortConfigurationOutputWithContext(ctx context.Context) TemplateKpiSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiSortConfigurationOutput)
}

func (i TemplateKpiSortConfigurationArgs) ToTemplateKpiSortConfigurationPtrOutput() TemplateKpiSortConfigurationPtrOutput {
	return i.ToTemplateKpiSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateKpiSortConfigurationArgs) ToTemplateKpiSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiSortConfigurationOutput).ToTemplateKpiSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateKpiSortConfigurationPtrInput is an input type that accepts TemplateKpiSortConfigurationArgs, TemplateKpiSortConfigurationPtr and TemplateKpiSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateKpiSortConfigurationPtrInput` via:
//
//	        TemplateKpiSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateKpiSortConfigurationPtrOutput() TemplateKpiSortConfigurationPtrOutput
	ToTemplateKpiSortConfigurationPtrOutputWithContext(context.Context) TemplateKpiSortConfigurationPtrOutput
}

type templateKpiSortConfigurationPtrType TemplateKpiSortConfigurationArgs

func TemplateKpiSortConfigurationPtr(v *TemplateKpiSortConfigurationArgs) TemplateKpiSortConfigurationPtrInput {
	return (*templateKpiSortConfigurationPtrType)(v)
}

func (*templateKpiSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiSortConfiguration)(nil)).Elem()
}

func (i *templateKpiSortConfigurationPtrType) ToTemplateKpiSortConfigurationPtrOutput() TemplateKpiSortConfigurationPtrOutput {
	return i.ToTemplateKpiSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateKpiSortConfigurationPtrType) ToTemplateKpiSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiSortConfigurationPtrOutput)
}

type TemplateKpiSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateKpiSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiSortConfiguration)(nil)).Elem()
}

func (o TemplateKpiSortConfigurationOutput) ToTemplateKpiSortConfigurationOutput() TemplateKpiSortConfigurationOutput {
	return o
}

func (o TemplateKpiSortConfigurationOutput) ToTemplateKpiSortConfigurationOutputWithContext(ctx context.Context) TemplateKpiSortConfigurationOutput {
	return o
}

func (o TemplateKpiSortConfigurationOutput) ToTemplateKpiSortConfigurationPtrOutput() TemplateKpiSortConfigurationPtrOutput {
	return o.ToTemplateKpiSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateKpiSortConfigurationOutput) ToTemplateKpiSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiSortConfiguration) *TemplateKpiSortConfiguration {
		return &v
	}).(TemplateKpiSortConfigurationPtrOutput)
}

// The sort configuration of the trend group fields.
func (o TemplateKpiSortConfigurationOutput) TrendGroupSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateKpiSortConfiguration) []TemplateFieldSortOptions { return v.TrendGroupSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateKpiSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiSortConfiguration)(nil)).Elem()
}

func (o TemplateKpiSortConfigurationPtrOutput) ToTemplateKpiSortConfigurationPtrOutput() TemplateKpiSortConfigurationPtrOutput {
	return o
}

func (o TemplateKpiSortConfigurationPtrOutput) ToTemplateKpiSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateKpiSortConfigurationPtrOutput {
	return o
}

func (o TemplateKpiSortConfigurationPtrOutput) Elem() TemplateKpiSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateKpiSortConfiguration) TemplateKpiSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateKpiSortConfiguration
		return ret
	}).(TemplateKpiSortConfigurationOutput)
}

// The sort configuration of the trend group fields.
func (o TemplateKpiSortConfigurationPtrOutput) TrendGroupSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateKpiSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.TrendGroupSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateKpiSparklineOptions struct {
	// The color of the sparkline.
	Color *string `pulumi:"color"`
	// The tooltip visibility of the sparkline.
	TooltipVisibility interface{} `pulumi:"tooltipVisibility"`
	// The type of the sparkline.
	Type TemplateKpiSparklineType `pulumi:"type"`
	// The visibility of the sparkline.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateKpiSparklineOptionsInput is an input type that accepts TemplateKpiSparklineOptionsArgs and TemplateKpiSparklineOptionsOutput values.
// You can construct a concrete instance of `TemplateKpiSparklineOptionsInput` via:
//
//	TemplateKpiSparklineOptionsArgs{...}
type TemplateKpiSparklineOptionsInput interface {
	pulumi.Input

	ToTemplateKpiSparklineOptionsOutput() TemplateKpiSparklineOptionsOutput
	ToTemplateKpiSparklineOptionsOutputWithContext(context.Context) TemplateKpiSparklineOptionsOutput
}

type TemplateKpiSparklineOptionsArgs struct {
	// The color of the sparkline.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The tooltip visibility of the sparkline.
	TooltipVisibility pulumi.Input `pulumi:"tooltipVisibility"`
	// The type of the sparkline.
	Type TemplateKpiSparklineTypeInput `pulumi:"type"`
	// The visibility of the sparkline.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateKpiSparklineOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiSparklineOptions)(nil)).Elem()
}

func (i TemplateKpiSparklineOptionsArgs) ToTemplateKpiSparklineOptionsOutput() TemplateKpiSparklineOptionsOutput {
	return i.ToTemplateKpiSparklineOptionsOutputWithContext(context.Background())
}

func (i TemplateKpiSparklineOptionsArgs) ToTemplateKpiSparklineOptionsOutputWithContext(ctx context.Context) TemplateKpiSparklineOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiSparklineOptionsOutput)
}

func (i TemplateKpiSparklineOptionsArgs) ToTemplateKpiSparklineOptionsPtrOutput() TemplateKpiSparklineOptionsPtrOutput {
	return i.ToTemplateKpiSparklineOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateKpiSparklineOptionsArgs) ToTemplateKpiSparklineOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiSparklineOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiSparklineOptionsOutput).ToTemplateKpiSparklineOptionsPtrOutputWithContext(ctx)
}

// TemplateKpiSparklineOptionsPtrInput is an input type that accepts TemplateKpiSparklineOptionsArgs, TemplateKpiSparklineOptionsPtr and TemplateKpiSparklineOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateKpiSparklineOptionsPtrInput` via:
//
//	        TemplateKpiSparklineOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiSparklineOptionsPtrInput interface {
	pulumi.Input

	ToTemplateKpiSparklineOptionsPtrOutput() TemplateKpiSparklineOptionsPtrOutput
	ToTemplateKpiSparklineOptionsPtrOutputWithContext(context.Context) TemplateKpiSparklineOptionsPtrOutput
}

type templateKpiSparklineOptionsPtrType TemplateKpiSparklineOptionsArgs

func TemplateKpiSparklineOptionsPtr(v *TemplateKpiSparklineOptionsArgs) TemplateKpiSparklineOptionsPtrInput {
	return (*templateKpiSparklineOptionsPtrType)(v)
}

func (*templateKpiSparklineOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiSparklineOptions)(nil)).Elem()
}

func (i *templateKpiSparklineOptionsPtrType) ToTemplateKpiSparklineOptionsPtrOutput() TemplateKpiSparklineOptionsPtrOutput {
	return i.ToTemplateKpiSparklineOptionsPtrOutputWithContext(context.Background())
}

func (i *templateKpiSparklineOptionsPtrType) ToTemplateKpiSparklineOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiSparklineOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiSparklineOptionsPtrOutput)
}

type TemplateKpiSparklineOptionsOutput struct{ *pulumi.OutputState }

func (TemplateKpiSparklineOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiSparklineOptions)(nil)).Elem()
}

func (o TemplateKpiSparklineOptionsOutput) ToTemplateKpiSparklineOptionsOutput() TemplateKpiSparklineOptionsOutput {
	return o
}

func (o TemplateKpiSparklineOptionsOutput) ToTemplateKpiSparklineOptionsOutputWithContext(ctx context.Context) TemplateKpiSparklineOptionsOutput {
	return o
}

func (o TemplateKpiSparklineOptionsOutput) ToTemplateKpiSparklineOptionsPtrOutput() TemplateKpiSparklineOptionsPtrOutput {
	return o.ToTemplateKpiSparklineOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateKpiSparklineOptionsOutput) ToTemplateKpiSparklineOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiSparklineOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiSparklineOptions) *TemplateKpiSparklineOptions {
		return &v
	}).(TemplateKpiSparklineOptionsPtrOutput)
}

// The color of the sparkline.
func (o TemplateKpiSparklineOptionsOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateKpiSparklineOptions) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The tooltip visibility of the sparkline.
func (o TemplateKpiSparklineOptionsOutput) TooltipVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateKpiSparklineOptions) interface{} { return v.TooltipVisibility }).(pulumi.AnyOutput)
}

// The type of the sparkline.
func (o TemplateKpiSparklineOptionsOutput) Type() TemplateKpiSparklineTypeOutput {
	return o.ApplyT(func(v TemplateKpiSparklineOptions) TemplateKpiSparklineType { return v.Type }).(TemplateKpiSparklineTypeOutput)
}

// The visibility of the sparkline.
func (o TemplateKpiSparklineOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateKpiSparklineOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateKpiSparklineOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiSparklineOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiSparklineOptions)(nil)).Elem()
}

func (o TemplateKpiSparklineOptionsPtrOutput) ToTemplateKpiSparklineOptionsPtrOutput() TemplateKpiSparklineOptionsPtrOutput {
	return o
}

func (o TemplateKpiSparklineOptionsPtrOutput) ToTemplateKpiSparklineOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiSparklineOptionsPtrOutput {
	return o
}

func (o TemplateKpiSparklineOptionsPtrOutput) Elem() TemplateKpiSparklineOptionsOutput {
	return o.ApplyT(func(v *TemplateKpiSparklineOptions) TemplateKpiSparklineOptions {
		if v != nil {
			return *v
		}
		var ret TemplateKpiSparklineOptions
		return ret
	}).(TemplateKpiSparklineOptionsOutput)
}

// The color of the sparkline.
func (o TemplateKpiSparklineOptionsPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateKpiSparklineOptions) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The tooltip visibility of the sparkline.
func (o TemplateKpiSparklineOptionsPtrOutput) TooltipVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateKpiSparklineOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.TooltipVisibility
	}).(pulumi.AnyOutput)
}

// The type of the sparkline.
func (o TemplateKpiSparklineOptionsPtrOutput) Type() TemplateKpiSparklineTypePtrOutput {
	return o.ApplyT(func(v *TemplateKpiSparklineOptions) *TemplateKpiSparklineType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(TemplateKpiSparklineTypePtrOutput)
}

// The visibility of the sparkline.
func (o TemplateKpiSparklineOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateKpiSparklineOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateKpiVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a KPI visual.
	ChartConfiguration *TemplateKpiConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The conditional formatting of a KPI visual.
	ConditionalFormatting *TemplateKpiConditionalFormatting `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateKpiVisualInput is an input type that accepts TemplateKpiVisualArgs and TemplateKpiVisualOutput values.
// You can construct a concrete instance of `TemplateKpiVisualInput` via:
//
//	TemplateKpiVisualArgs{...}
type TemplateKpiVisualInput interface {
	pulumi.Input

	ToTemplateKpiVisualOutput() TemplateKpiVisualOutput
	ToTemplateKpiVisualOutputWithContext(context.Context) TemplateKpiVisualOutput
}

type TemplateKpiVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a KPI visual.
	ChartConfiguration TemplateKpiConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The conditional formatting of a KPI visual.
	ConditionalFormatting TemplateKpiConditionalFormattingPtrInput `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateKpiVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiVisual)(nil)).Elem()
}

func (i TemplateKpiVisualArgs) ToTemplateKpiVisualOutput() TemplateKpiVisualOutput {
	return i.ToTemplateKpiVisualOutputWithContext(context.Background())
}

func (i TemplateKpiVisualArgs) ToTemplateKpiVisualOutputWithContext(ctx context.Context) TemplateKpiVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualOutput)
}

func (i TemplateKpiVisualArgs) ToTemplateKpiVisualPtrOutput() TemplateKpiVisualPtrOutput {
	return i.ToTemplateKpiVisualPtrOutputWithContext(context.Background())
}

func (i TemplateKpiVisualArgs) ToTemplateKpiVisualPtrOutputWithContext(ctx context.Context) TemplateKpiVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualOutput).ToTemplateKpiVisualPtrOutputWithContext(ctx)
}

// TemplateKpiVisualPtrInput is an input type that accepts TemplateKpiVisualArgs, TemplateKpiVisualPtr and TemplateKpiVisualPtrOutput values.
// You can construct a concrete instance of `TemplateKpiVisualPtrInput` via:
//
//	        TemplateKpiVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiVisualPtrInput interface {
	pulumi.Input

	ToTemplateKpiVisualPtrOutput() TemplateKpiVisualPtrOutput
	ToTemplateKpiVisualPtrOutputWithContext(context.Context) TemplateKpiVisualPtrOutput
}

type templateKpiVisualPtrType TemplateKpiVisualArgs

func TemplateKpiVisualPtr(v *TemplateKpiVisualArgs) TemplateKpiVisualPtrInput {
	return (*templateKpiVisualPtrType)(v)
}

func (*templateKpiVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiVisual)(nil)).Elem()
}

func (i *templateKpiVisualPtrType) ToTemplateKpiVisualPtrOutput() TemplateKpiVisualPtrOutput {
	return i.ToTemplateKpiVisualPtrOutputWithContext(context.Background())
}

func (i *templateKpiVisualPtrType) ToTemplateKpiVisualPtrOutputWithContext(ctx context.Context) TemplateKpiVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualPtrOutput)
}

type TemplateKpiVisualOutput struct{ *pulumi.OutputState }

func (TemplateKpiVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiVisual)(nil)).Elem()
}

func (o TemplateKpiVisualOutput) ToTemplateKpiVisualOutput() TemplateKpiVisualOutput {
	return o
}

func (o TemplateKpiVisualOutput) ToTemplateKpiVisualOutputWithContext(ctx context.Context) TemplateKpiVisualOutput {
	return o
}

func (o TemplateKpiVisualOutput) ToTemplateKpiVisualPtrOutput() TemplateKpiVisualPtrOutput {
	return o.ToTemplateKpiVisualPtrOutputWithContext(context.Background())
}

func (o TemplateKpiVisualOutput) ToTemplateKpiVisualPtrOutputWithContext(ctx context.Context) TemplateKpiVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiVisual) *TemplateKpiVisual {
		return &v
	}).(TemplateKpiVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateKpiVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateKpiVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a KPI visual.
func (o TemplateKpiVisualOutput) ChartConfiguration() TemplateKpiConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateKpiVisual) *TemplateKpiConfiguration { return v.ChartConfiguration }).(TemplateKpiConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateKpiVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateKpiVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The conditional formatting of a KPI visual.
func (o TemplateKpiVisualOutput) ConditionalFormatting() TemplateKpiConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateKpiVisual) *TemplateKpiConditionalFormatting { return v.ConditionalFormatting }).(TemplateKpiConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateKpiVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateKpiVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateKpiVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateKpiVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateKpiVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateKpiVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateKpiVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateKpiVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiVisual)(nil)).Elem()
}

func (o TemplateKpiVisualPtrOutput) ToTemplateKpiVisualPtrOutput() TemplateKpiVisualPtrOutput {
	return o
}

func (o TemplateKpiVisualPtrOutput) ToTemplateKpiVisualPtrOutputWithContext(ctx context.Context) TemplateKpiVisualPtrOutput {
	return o
}

func (o TemplateKpiVisualPtrOutput) Elem() TemplateKpiVisualOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) TemplateKpiVisual {
		if v != nil {
			return *v
		}
		var ret TemplateKpiVisual
		return ret
	}).(TemplateKpiVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateKpiVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a KPI visual.
func (o TemplateKpiVisualPtrOutput) ChartConfiguration() TemplateKpiConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) *TemplateKpiConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateKpiConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateKpiVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The conditional formatting of a KPI visual.
func (o TemplateKpiVisualPtrOutput) ConditionalFormatting() TemplateKpiConditionalFormattingPtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) *TemplateKpiConditionalFormatting {
		if v == nil {
			return nil
		}
		return v.ConditionalFormatting
	}).(TemplateKpiConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateKpiVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateKpiVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateKpiVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateKpiVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateKpiVisualLayoutOptions struct {
	// The standard layout of the KPI visual.
	StandardLayout *TemplateKpiVisualStandardLayout `pulumi:"standardLayout"`
}

// TemplateKpiVisualLayoutOptionsInput is an input type that accepts TemplateKpiVisualLayoutOptionsArgs and TemplateKpiVisualLayoutOptionsOutput values.
// You can construct a concrete instance of `TemplateKpiVisualLayoutOptionsInput` via:
//
//	TemplateKpiVisualLayoutOptionsArgs{...}
type TemplateKpiVisualLayoutOptionsInput interface {
	pulumi.Input

	ToTemplateKpiVisualLayoutOptionsOutput() TemplateKpiVisualLayoutOptionsOutput
	ToTemplateKpiVisualLayoutOptionsOutputWithContext(context.Context) TemplateKpiVisualLayoutOptionsOutput
}

type TemplateKpiVisualLayoutOptionsArgs struct {
	// The standard layout of the KPI visual.
	StandardLayout TemplateKpiVisualStandardLayoutPtrInput `pulumi:"standardLayout"`
}

func (TemplateKpiVisualLayoutOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiVisualLayoutOptions)(nil)).Elem()
}

func (i TemplateKpiVisualLayoutOptionsArgs) ToTemplateKpiVisualLayoutOptionsOutput() TemplateKpiVisualLayoutOptionsOutput {
	return i.ToTemplateKpiVisualLayoutOptionsOutputWithContext(context.Background())
}

func (i TemplateKpiVisualLayoutOptionsArgs) ToTemplateKpiVisualLayoutOptionsOutputWithContext(ctx context.Context) TemplateKpiVisualLayoutOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualLayoutOptionsOutput)
}

func (i TemplateKpiVisualLayoutOptionsArgs) ToTemplateKpiVisualLayoutOptionsPtrOutput() TemplateKpiVisualLayoutOptionsPtrOutput {
	return i.ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateKpiVisualLayoutOptionsArgs) ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiVisualLayoutOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualLayoutOptionsOutput).ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(ctx)
}

// TemplateKpiVisualLayoutOptionsPtrInput is an input type that accepts TemplateKpiVisualLayoutOptionsArgs, TemplateKpiVisualLayoutOptionsPtr and TemplateKpiVisualLayoutOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateKpiVisualLayoutOptionsPtrInput` via:
//
//	        TemplateKpiVisualLayoutOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiVisualLayoutOptionsPtrInput interface {
	pulumi.Input

	ToTemplateKpiVisualLayoutOptionsPtrOutput() TemplateKpiVisualLayoutOptionsPtrOutput
	ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(context.Context) TemplateKpiVisualLayoutOptionsPtrOutput
}

type templateKpiVisualLayoutOptionsPtrType TemplateKpiVisualLayoutOptionsArgs

func TemplateKpiVisualLayoutOptionsPtr(v *TemplateKpiVisualLayoutOptionsArgs) TemplateKpiVisualLayoutOptionsPtrInput {
	return (*templateKpiVisualLayoutOptionsPtrType)(v)
}

func (*templateKpiVisualLayoutOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiVisualLayoutOptions)(nil)).Elem()
}

func (i *templateKpiVisualLayoutOptionsPtrType) ToTemplateKpiVisualLayoutOptionsPtrOutput() TemplateKpiVisualLayoutOptionsPtrOutput {
	return i.ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(context.Background())
}

func (i *templateKpiVisualLayoutOptionsPtrType) ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiVisualLayoutOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualLayoutOptionsPtrOutput)
}

type TemplateKpiVisualLayoutOptionsOutput struct{ *pulumi.OutputState }

func (TemplateKpiVisualLayoutOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiVisualLayoutOptions)(nil)).Elem()
}

func (o TemplateKpiVisualLayoutOptionsOutput) ToTemplateKpiVisualLayoutOptionsOutput() TemplateKpiVisualLayoutOptionsOutput {
	return o
}

func (o TemplateKpiVisualLayoutOptionsOutput) ToTemplateKpiVisualLayoutOptionsOutputWithContext(ctx context.Context) TemplateKpiVisualLayoutOptionsOutput {
	return o
}

func (o TemplateKpiVisualLayoutOptionsOutput) ToTemplateKpiVisualLayoutOptionsPtrOutput() TemplateKpiVisualLayoutOptionsPtrOutput {
	return o.ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateKpiVisualLayoutOptionsOutput) ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiVisualLayoutOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiVisualLayoutOptions) *TemplateKpiVisualLayoutOptions {
		return &v
	}).(TemplateKpiVisualLayoutOptionsPtrOutput)
}

// The standard layout of the KPI visual.
func (o TemplateKpiVisualLayoutOptionsOutput) StandardLayout() TemplateKpiVisualStandardLayoutPtrOutput {
	return o.ApplyT(func(v TemplateKpiVisualLayoutOptions) *TemplateKpiVisualStandardLayout { return v.StandardLayout }).(TemplateKpiVisualStandardLayoutPtrOutput)
}

type TemplateKpiVisualLayoutOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiVisualLayoutOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiVisualLayoutOptions)(nil)).Elem()
}

func (o TemplateKpiVisualLayoutOptionsPtrOutput) ToTemplateKpiVisualLayoutOptionsPtrOutput() TemplateKpiVisualLayoutOptionsPtrOutput {
	return o
}

func (o TemplateKpiVisualLayoutOptionsPtrOutput) ToTemplateKpiVisualLayoutOptionsPtrOutputWithContext(ctx context.Context) TemplateKpiVisualLayoutOptionsPtrOutput {
	return o
}

func (o TemplateKpiVisualLayoutOptionsPtrOutput) Elem() TemplateKpiVisualLayoutOptionsOutput {
	return o.ApplyT(func(v *TemplateKpiVisualLayoutOptions) TemplateKpiVisualLayoutOptions {
		if v != nil {
			return *v
		}
		var ret TemplateKpiVisualLayoutOptions
		return ret
	}).(TemplateKpiVisualLayoutOptionsOutput)
}

// The standard layout of the KPI visual.
func (o TemplateKpiVisualLayoutOptionsPtrOutput) StandardLayout() TemplateKpiVisualStandardLayoutPtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisualLayoutOptions) *TemplateKpiVisualStandardLayout {
		if v == nil {
			return nil
		}
		return v.StandardLayout
	}).(TemplateKpiVisualStandardLayoutPtrOutput)
}

type TemplateKpiVisualStandardLayout struct {
	// The standard layout type.
	Type TemplateKpiVisualStandardLayoutType `pulumi:"type"`
}

// TemplateKpiVisualStandardLayoutInput is an input type that accepts TemplateKpiVisualStandardLayoutArgs and TemplateKpiVisualStandardLayoutOutput values.
// You can construct a concrete instance of `TemplateKpiVisualStandardLayoutInput` via:
//
//	TemplateKpiVisualStandardLayoutArgs{...}
type TemplateKpiVisualStandardLayoutInput interface {
	pulumi.Input

	ToTemplateKpiVisualStandardLayoutOutput() TemplateKpiVisualStandardLayoutOutput
	ToTemplateKpiVisualStandardLayoutOutputWithContext(context.Context) TemplateKpiVisualStandardLayoutOutput
}

type TemplateKpiVisualStandardLayoutArgs struct {
	// The standard layout type.
	Type TemplateKpiVisualStandardLayoutTypeInput `pulumi:"type"`
}

func (TemplateKpiVisualStandardLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiVisualStandardLayout)(nil)).Elem()
}

func (i TemplateKpiVisualStandardLayoutArgs) ToTemplateKpiVisualStandardLayoutOutput() TemplateKpiVisualStandardLayoutOutput {
	return i.ToTemplateKpiVisualStandardLayoutOutputWithContext(context.Background())
}

func (i TemplateKpiVisualStandardLayoutArgs) ToTemplateKpiVisualStandardLayoutOutputWithContext(ctx context.Context) TemplateKpiVisualStandardLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualStandardLayoutOutput)
}

func (i TemplateKpiVisualStandardLayoutArgs) ToTemplateKpiVisualStandardLayoutPtrOutput() TemplateKpiVisualStandardLayoutPtrOutput {
	return i.ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(context.Background())
}

func (i TemplateKpiVisualStandardLayoutArgs) ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(ctx context.Context) TemplateKpiVisualStandardLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualStandardLayoutOutput).ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(ctx)
}

// TemplateKpiVisualStandardLayoutPtrInput is an input type that accepts TemplateKpiVisualStandardLayoutArgs, TemplateKpiVisualStandardLayoutPtr and TemplateKpiVisualStandardLayoutPtrOutput values.
// You can construct a concrete instance of `TemplateKpiVisualStandardLayoutPtrInput` via:
//
//	        TemplateKpiVisualStandardLayoutArgs{...}
//
//	or:
//
//	        nil
type TemplateKpiVisualStandardLayoutPtrInput interface {
	pulumi.Input

	ToTemplateKpiVisualStandardLayoutPtrOutput() TemplateKpiVisualStandardLayoutPtrOutput
	ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(context.Context) TemplateKpiVisualStandardLayoutPtrOutput
}

type templateKpiVisualStandardLayoutPtrType TemplateKpiVisualStandardLayoutArgs

func TemplateKpiVisualStandardLayoutPtr(v *TemplateKpiVisualStandardLayoutArgs) TemplateKpiVisualStandardLayoutPtrInput {
	return (*templateKpiVisualStandardLayoutPtrType)(v)
}

func (*templateKpiVisualStandardLayoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiVisualStandardLayout)(nil)).Elem()
}

func (i *templateKpiVisualStandardLayoutPtrType) ToTemplateKpiVisualStandardLayoutPtrOutput() TemplateKpiVisualStandardLayoutPtrOutput {
	return i.ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(context.Background())
}

func (i *templateKpiVisualStandardLayoutPtrType) ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(ctx context.Context) TemplateKpiVisualStandardLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateKpiVisualStandardLayoutPtrOutput)
}

type TemplateKpiVisualStandardLayoutOutput struct{ *pulumi.OutputState }

func (TemplateKpiVisualStandardLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateKpiVisualStandardLayout)(nil)).Elem()
}

func (o TemplateKpiVisualStandardLayoutOutput) ToTemplateKpiVisualStandardLayoutOutput() TemplateKpiVisualStandardLayoutOutput {
	return o
}

func (o TemplateKpiVisualStandardLayoutOutput) ToTemplateKpiVisualStandardLayoutOutputWithContext(ctx context.Context) TemplateKpiVisualStandardLayoutOutput {
	return o
}

func (o TemplateKpiVisualStandardLayoutOutput) ToTemplateKpiVisualStandardLayoutPtrOutput() TemplateKpiVisualStandardLayoutPtrOutput {
	return o.ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(context.Background())
}

func (o TemplateKpiVisualStandardLayoutOutput) ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(ctx context.Context) TemplateKpiVisualStandardLayoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateKpiVisualStandardLayout) *TemplateKpiVisualStandardLayout {
		return &v
	}).(TemplateKpiVisualStandardLayoutPtrOutput)
}

// The standard layout type.
func (o TemplateKpiVisualStandardLayoutOutput) Type() TemplateKpiVisualStandardLayoutTypeOutput {
	return o.ApplyT(func(v TemplateKpiVisualStandardLayout) TemplateKpiVisualStandardLayoutType { return v.Type }).(TemplateKpiVisualStandardLayoutTypeOutput)
}

type TemplateKpiVisualStandardLayoutPtrOutput struct{ *pulumi.OutputState }

func (TemplateKpiVisualStandardLayoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateKpiVisualStandardLayout)(nil)).Elem()
}

func (o TemplateKpiVisualStandardLayoutPtrOutput) ToTemplateKpiVisualStandardLayoutPtrOutput() TemplateKpiVisualStandardLayoutPtrOutput {
	return o
}

func (o TemplateKpiVisualStandardLayoutPtrOutput) ToTemplateKpiVisualStandardLayoutPtrOutputWithContext(ctx context.Context) TemplateKpiVisualStandardLayoutPtrOutput {
	return o
}

func (o TemplateKpiVisualStandardLayoutPtrOutput) Elem() TemplateKpiVisualStandardLayoutOutput {
	return o.ApplyT(func(v *TemplateKpiVisualStandardLayout) TemplateKpiVisualStandardLayout {
		if v != nil {
			return *v
		}
		var ret TemplateKpiVisualStandardLayout
		return ret
	}).(TemplateKpiVisualStandardLayoutOutput)
}

// The standard layout type.
func (o TemplateKpiVisualStandardLayoutPtrOutput) Type() TemplateKpiVisualStandardLayoutTypePtrOutput {
	return o.ApplyT(func(v *TemplateKpiVisualStandardLayout) *TemplateKpiVisualStandardLayoutType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(TemplateKpiVisualStandardLayoutTypePtrOutput)
}

type TemplateLabelOptions struct {
	// The text for the label.
	CustomLabel *string `pulumi:"customLabel"`
	// The font configuration of the label.
	FontConfiguration *TemplateFontConfiguration `pulumi:"fontConfiguration"`
	// Determines whether or not the label is visible.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateLabelOptionsInput is an input type that accepts TemplateLabelOptionsArgs and TemplateLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateLabelOptionsInput` via:
//
//	TemplateLabelOptionsArgs{...}
type TemplateLabelOptionsInput interface {
	pulumi.Input

	ToTemplateLabelOptionsOutput() TemplateLabelOptionsOutput
	ToTemplateLabelOptionsOutputWithContext(context.Context) TemplateLabelOptionsOutput
}

type TemplateLabelOptionsArgs struct {
	// The text for the label.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The font configuration of the label.
	FontConfiguration TemplateFontConfigurationPtrInput `pulumi:"fontConfiguration"`
	// Determines whether or not the label is visible.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLabelOptions)(nil)).Elem()
}

func (i TemplateLabelOptionsArgs) ToTemplateLabelOptionsOutput() TemplateLabelOptionsOutput {
	return i.ToTemplateLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateLabelOptionsArgs) ToTemplateLabelOptionsOutputWithContext(ctx context.Context) TemplateLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLabelOptionsOutput)
}

func (i TemplateLabelOptionsArgs) ToTemplateLabelOptionsPtrOutput() TemplateLabelOptionsPtrOutput {
	return i.ToTemplateLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateLabelOptionsArgs) ToTemplateLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLabelOptionsOutput).ToTemplateLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateLabelOptionsPtrInput is an input type that accepts TemplateLabelOptionsArgs, TemplateLabelOptionsPtr and TemplateLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateLabelOptionsPtrInput` via:
//
//	        TemplateLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateLabelOptionsPtrOutput() TemplateLabelOptionsPtrOutput
	ToTemplateLabelOptionsPtrOutputWithContext(context.Context) TemplateLabelOptionsPtrOutput
}

type templateLabelOptionsPtrType TemplateLabelOptionsArgs

func TemplateLabelOptionsPtr(v *TemplateLabelOptionsArgs) TemplateLabelOptionsPtrInput {
	return (*templateLabelOptionsPtrType)(v)
}

func (*templateLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLabelOptions)(nil)).Elem()
}

func (i *templateLabelOptionsPtrType) ToTemplateLabelOptionsPtrOutput() TemplateLabelOptionsPtrOutput {
	return i.ToTemplateLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateLabelOptionsPtrType) ToTemplateLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLabelOptionsPtrOutput)
}

type TemplateLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLabelOptions)(nil)).Elem()
}

func (o TemplateLabelOptionsOutput) ToTemplateLabelOptionsOutput() TemplateLabelOptionsOutput {
	return o
}

func (o TemplateLabelOptionsOutput) ToTemplateLabelOptionsOutputWithContext(ctx context.Context) TemplateLabelOptionsOutput {
	return o
}

func (o TemplateLabelOptionsOutput) ToTemplateLabelOptionsPtrOutput() TemplateLabelOptionsPtrOutput {
	return o.ToTemplateLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateLabelOptionsOutput) ToTemplateLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLabelOptions) *TemplateLabelOptions {
		return &v
	}).(TemplateLabelOptionsPtrOutput)
}

// The text for the label.
func (o TemplateLabelOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLabelOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The font configuration of the label.
func (o TemplateLabelOptionsOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLabelOptions) *TemplateFontConfiguration { return v.FontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// Determines whether or not the label is visible.
func (o TemplateLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLabelOptions)(nil)).Elem()
}

func (o TemplateLabelOptionsPtrOutput) ToTemplateLabelOptionsPtrOutput() TemplateLabelOptionsPtrOutput {
	return o
}

func (o TemplateLabelOptionsPtrOutput) ToTemplateLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateLabelOptionsPtrOutput {
	return o
}

func (o TemplateLabelOptionsPtrOutput) Elem() TemplateLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateLabelOptions) TemplateLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateLabelOptions
		return ret
	}).(TemplateLabelOptionsOutput)
}

// The text for the label.
func (o TemplateLabelOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLabelOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The font configuration of the label.
func (o TemplateLabelOptionsPtrOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateLabelOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.FontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// Determines whether or not the label is visible.
func (o TemplateLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateLayout struct {
	// The configuration that determines what the type of layout for a sheet.
	Configuration TemplateLayoutConfiguration `pulumi:"configuration"`
}

// TemplateLayoutInput is an input type that accepts TemplateLayoutArgs and TemplateLayoutOutput values.
// You can construct a concrete instance of `TemplateLayoutInput` via:
//
//	TemplateLayoutArgs{...}
type TemplateLayoutInput interface {
	pulumi.Input

	ToTemplateLayoutOutput() TemplateLayoutOutput
	ToTemplateLayoutOutputWithContext(context.Context) TemplateLayoutOutput
}

type TemplateLayoutArgs struct {
	// The configuration that determines what the type of layout for a sheet.
	Configuration TemplateLayoutConfigurationInput `pulumi:"configuration"`
}

func (TemplateLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLayout)(nil)).Elem()
}

func (i TemplateLayoutArgs) ToTemplateLayoutOutput() TemplateLayoutOutput {
	return i.ToTemplateLayoutOutputWithContext(context.Background())
}

func (i TemplateLayoutArgs) ToTemplateLayoutOutputWithContext(ctx context.Context) TemplateLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLayoutOutput)
}

// TemplateLayoutArrayInput is an input type that accepts TemplateLayoutArray and TemplateLayoutArrayOutput values.
// You can construct a concrete instance of `TemplateLayoutArrayInput` via:
//
//	TemplateLayoutArray{ TemplateLayoutArgs{...} }
type TemplateLayoutArrayInput interface {
	pulumi.Input

	ToTemplateLayoutArrayOutput() TemplateLayoutArrayOutput
	ToTemplateLayoutArrayOutputWithContext(context.Context) TemplateLayoutArrayOutput
}

type TemplateLayoutArray []TemplateLayoutInput

func (TemplateLayoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateLayout)(nil)).Elem()
}

func (i TemplateLayoutArray) ToTemplateLayoutArrayOutput() TemplateLayoutArrayOutput {
	return i.ToTemplateLayoutArrayOutputWithContext(context.Background())
}

func (i TemplateLayoutArray) ToTemplateLayoutArrayOutputWithContext(ctx context.Context) TemplateLayoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLayoutArrayOutput)
}

type TemplateLayoutOutput struct{ *pulumi.OutputState }

func (TemplateLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLayout)(nil)).Elem()
}

func (o TemplateLayoutOutput) ToTemplateLayoutOutput() TemplateLayoutOutput {
	return o
}

func (o TemplateLayoutOutput) ToTemplateLayoutOutputWithContext(ctx context.Context) TemplateLayoutOutput {
	return o
}

// The configuration that determines what the type of layout for a sheet.
func (o TemplateLayoutOutput) Configuration() TemplateLayoutConfigurationOutput {
	return o.ApplyT(func(v TemplateLayout) TemplateLayoutConfiguration { return v.Configuration }).(TemplateLayoutConfigurationOutput)
}

type TemplateLayoutArrayOutput struct{ *pulumi.OutputState }

func (TemplateLayoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateLayout)(nil)).Elem()
}

func (o TemplateLayoutArrayOutput) ToTemplateLayoutArrayOutput() TemplateLayoutArrayOutput {
	return o
}

func (o TemplateLayoutArrayOutput) ToTemplateLayoutArrayOutputWithContext(ctx context.Context) TemplateLayoutArrayOutput {
	return o
}

func (o TemplateLayoutArrayOutput) Index(i pulumi.IntInput) TemplateLayoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateLayout {
		return vs[0].([]TemplateLayout)[vs[1].(int)]
	}).(TemplateLayoutOutput)
}

type TemplateLayoutConfiguration struct {
	// A free-form is optimized for a fixed width and has more control over the exact placement of layout elements.
	FreeFormLayout *TemplateFreeFormLayoutConfiguration `pulumi:"freeFormLayout"`
	// A type of layout that can be used on a sheet. In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size. A grid layout can be configured to behave in one of two ways when the viewport is resized: `FIXED` or `RESPONSIVE` .
	GridLayout *TemplateGridLayoutConfiguration `pulumi:"gridLayout"`
	// A section based layout organizes visuals into multiple sections and has customized header, footer and page break.
	SectionBasedLayout *TemplateSectionBasedLayoutConfiguration `pulumi:"sectionBasedLayout"`
}

// TemplateLayoutConfigurationInput is an input type that accepts TemplateLayoutConfigurationArgs and TemplateLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateLayoutConfigurationInput` via:
//
//	TemplateLayoutConfigurationArgs{...}
type TemplateLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateLayoutConfigurationOutput() TemplateLayoutConfigurationOutput
	ToTemplateLayoutConfigurationOutputWithContext(context.Context) TemplateLayoutConfigurationOutput
}

type TemplateLayoutConfigurationArgs struct {
	// A free-form is optimized for a fixed width and has more control over the exact placement of layout elements.
	FreeFormLayout TemplateFreeFormLayoutConfigurationPtrInput `pulumi:"freeFormLayout"`
	// A type of layout that can be used on a sheet. In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size. A grid layout can be configured to behave in one of two ways when the viewport is resized: `FIXED` or `RESPONSIVE` .
	GridLayout TemplateGridLayoutConfigurationPtrInput `pulumi:"gridLayout"`
	// A section based layout organizes visuals into multiple sections and has customized header, footer and page break.
	SectionBasedLayout TemplateSectionBasedLayoutConfigurationPtrInput `pulumi:"sectionBasedLayout"`
}

func (TemplateLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLayoutConfiguration)(nil)).Elem()
}

func (i TemplateLayoutConfigurationArgs) ToTemplateLayoutConfigurationOutput() TemplateLayoutConfigurationOutput {
	return i.ToTemplateLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateLayoutConfigurationArgs) ToTemplateLayoutConfigurationOutputWithContext(ctx context.Context) TemplateLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLayoutConfigurationOutput)
}

type TemplateLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLayoutConfiguration)(nil)).Elem()
}

func (o TemplateLayoutConfigurationOutput) ToTemplateLayoutConfigurationOutput() TemplateLayoutConfigurationOutput {
	return o
}

func (o TemplateLayoutConfigurationOutput) ToTemplateLayoutConfigurationOutputWithContext(ctx context.Context) TemplateLayoutConfigurationOutput {
	return o
}

// A free-form is optimized for a fixed width and has more control over the exact placement of layout elements.
func (o TemplateLayoutConfigurationOutput) FreeFormLayout() TemplateFreeFormLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLayoutConfiguration) *TemplateFreeFormLayoutConfiguration { return v.FreeFormLayout }).(TemplateFreeFormLayoutConfigurationPtrOutput)
}

// A type of layout that can be used on a sheet. In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size. A grid layout can be configured to behave in one of two ways when the viewport is resized: `FIXED` or `RESPONSIVE` .
func (o TemplateLayoutConfigurationOutput) GridLayout() TemplateGridLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLayoutConfiguration) *TemplateGridLayoutConfiguration { return v.GridLayout }).(TemplateGridLayoutConfigurationPtrOutput)
}

// A section based layout organizes visuals into multiple sections and has customized header, footer and page break.
func (o TemplateLayoutConfigurationOutput) SectionBasedLayout() TemplateSectionBasedLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLayoutConfiguration) *TemplateSectionBasedLayoutConfiguration {
		return v.SectionBasedLayout
	}).(TemplateSectionBasedLayoutConfigurationPtrOutput)
}

type TemplateLegendOptions struct {
	// String based length that is composed of value and unit in px
	Height *string `pulumi:"height"`
	// The positions for the legend. Choose one of the following options:
	//
	// - `AUTO`
	// - `RIGHT`
	// - `BOTTOM`
	// - `LEFT`
	Position *TemplateLegendPosition `pulumi:"position"`
	// The custom title for the legend.
	Title                  *TemplateLabelOptions      `pulumi:"title"`
	ValueFontConfiguration *TemplateFontConfiguration `pulumi:"valueFontConfiguration"`
	// Determines whether or not the legend is visible.
	Visibility interface{} `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width *string `pulumi:"width"`
}

// TemplateLegendOptionsInput is an input type that accepts TemplateLegendOptionsArgs and TemplateLegendOptionsOutput values.
// You can construct a concrete instance of `TemplateLegendOptionsInput` via:
//
//	TemplateLegendOptionsArgs{...}
type TemplateLegendOptionsInput interface {
	pulumi.Input

	ToTemplateLegendOptionsOutput() TemplateLegendOptionsOutput
	ToTemplateLegendOptionsOutputWithContext(context.Context) TemplateLegendOptionsOutput
}

type TemplateLegendOptionsArgs struct {
	// String based length that is composed of value and unit in px
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The positions for the legend. Choose one of the following options:
	//
	// - `AUTO`
	// - `RIGHT`
	// - `BOTTOM`
	// - `LEFT`
	Position TemplateLegendPositionPtrInput `pulumi:"position"`
	// The custom title for the legend.
	Title                  TemplateLabelOptionsPtrInput      `pulumi:"title"`
	ValueFontConfiguration TemplateFontConfigurationPtrInput `pulumi:"valueFontConfiguration"`
	// Determines whether or not the legend is visible.
	Visibility pulumi.Input `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TemplateLegendOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLegendOptions)(nil)).Elem()
}

func (i TemplateLegendOptionsArgs) ToTemplateLegendOptionsOutput() TemplateLegendOptionsOutput {
	return i.ToTemplateLegendOptionsOutputWithContext(context.Background())
}

func (i TemplateLegendOptionsArgs) ToTemplateLegendOptionsOutputWithContext(ctx context.Context) TemplateLegendOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLegendOptionsOutput)
}

func (i TemplateLegendOptionsArgs) ToTemplateLegendOptionsPtrOutput() TemplateLegendOptionsPtrOutput {
	return i.ToTemplateLegendOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateLegendOptionsArgs) ToTemplateLegendOptionsPtrOutputWithContext(ctx context.Context) TemplateLegendOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLegendOptionsOutput).ToTemplateLegendOptionsPtrOutputWithContext(ctx)
}

// TemplateLegendOptionsPtrInput is an input type that accepts TemplateLegendOptionsArgs, TemplateLegendOptionsPtr and TemplateLegendOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateLegendOptionsPtrInput` via:
//
//	        TemplateLegendOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateLegendOptionsPtrInput interface {
	pulumi.Input

	ToTemplateLegendOptionsPtrOutput() TemplateLegendOptionsPtrOutput
	ToTemplateLegendOptionsPtrOutputWithContext(context.Context) TemplateLegendOptionsPtrOutput
}

type templateLegendOptionsPtrType TemplateLegendOptionsArgs

func TemplateLegendOptionsPtr(v *TemplateLegendOptionsArgs) TemplateLegendOptionsPtrInput {
	return (*templateLegendOptionsPtrType)(v)
}

func (*templateLegendOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLegendOptions)(nil)).Elem()
}

func (i *templateLegendOptionsPtrType) ToTemplateLegendOptionsPtrOutput() TemplateLegendOptionsPtrOutput {
	return i.ToTemplateLegendOptionsPtrOutputWithContext(context.Background())
}

func (i *templateLegendOptionsPtrType) ToTemplateLegendOptionsPtrOutputWithContext(ctx context.Context) TemplateLegendOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLegendOptionsPtrOutput)
}

type TemplateLegendOptionsOutput struct{ *pulumi.OutputState }

func (TemplateLegendOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLegendOptions)(nil)).Elem()
}

func (o TemplateLegendOptionsOutput) ToTemplateLegendOptionsOutput() TemplateLegendOptionsOutput {
	return o
}

func (o TemplateLegendOptionsOutput) ToTemplateLegendOptionsOutputWithContext(ctx context.Context) TemplateLegendOptionsOutput {
	return o
}

func (o TemplateLegendOptionsOutput) ToTemplateLegendOptionsPtrOutput() TemplateLegendOptionsPtrOutput {
	return o.ToTemplateLegendOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateLegendOptionsOutput) ToTemplateLegendOptionsPtrOutputWithContext(ctx context.Context) TemplateLegendOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLegendOptions) *TemplateLegendOptions {
		return &v
	}).(TemplateLegendOptionsPtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLegendOptionsOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLegendOptions) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The positions for the legend. Choose one of the following options:
//
// - `AUTO`
// - `RIGHT`
// - `BOTTOM`
// - `LEFT`
func (o TemplateLegendOptionsOutput) Position() TemplateLegendPositionPtrOutput {
	return o.ApplyT(func(v TemplateLegendOptions) *TemplateLegendPosition { return v.Position }).(TemplateLegendPositionPtrOutput)
}

// The custom title for the legend.
func (o TemplateLegendOptionsOutput) Title() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLegendOptions) *TemplateLabelOptions { return v.Title }).(TemplateLabelOptionsPtrOutput)
}

func (o TemplateLegendOptionsOutput) ValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLegendOptions) *TemplateFontConfiguration { return v.ValueFontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// Determines whether or not the legend is visible.
func (o TemplateLegendOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateLegendOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLegendOptionsOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLegendOptions) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TemplateLegendOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLegendOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLegendOptions)(nil)).Elem()
}

func (o TemplateLegendOptionsPtrOutput) ToTemplateLegendOptionsPtrOutput() TemplateLegendOptionsPtrOutput {
	return o
}

func (o TemplateLegendOptionsPtrOutput) ToTemplateLegendOptionsPtrOutputWithContext(ctx context.Context) TemplateLegendOptionsPtrOutput {
	return o
}

func (o TemplateLegendOptionsPtrOutput) Elem() TemplateLegendOptionsOutput {
	return o.ApplyT(func(v *TemplateLegendOptions) TemplateLegendOptions {
		if v != nil {
			return *v
		}
		var ret TemplateLegendOptions
		return ret
	}).(TemplateLegendOptionsOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLegendOptionsPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLegendOptions) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The positions for the legend. Choose one of the following options:
//
// - `AUTO`
// - `RIGHT`
// - `BOTTOM`
// - `LEFT`
func (o TemplateLegendOptionsPtrOutput) Position() TemplateLegendPositionPtrOutput {
	return o.ApplyT(func(v *TemplateLegendOptions) *TemplateLegendPosition {
		if v == nil {
			return nil
		}
		return v.Position
	}).(TemplateLegendPositionPtrOutput)
}

// The custom title for the legend.
func (o TemplateLegendOptionsPtrOutput) Title() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLegendOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateLabelOptionsPtrOutput)
}

func (o TemplateLegendOptionsPtrOutput) ValueFontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateLegendOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.ValueFontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// Determines whether or not the legend is visible.
func (o TemplateLegendOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateLegendOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLegendOptionsPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLegendOptions) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type TemplateLineChartAggregatedFieldWells struct {
	// The category field wells of a line chart. Values are grouped by category fields.
	Category []TemplateDimensionField `pulumi:"category"`
	// The color field wells of a line chart. Values are grouped by category fields.
	Colors []TemplateDimensionField `pulumi:"colors"`
	// The small multiples field well of a line chart.
	SmallMultiples []TemplateDimensionField `pulumi:"smallMultiples"`
	// The value field wells of a line chart. Values are aggregated based on categories.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateLineChartAggregatedFieldWellsInput is an input type that accepts TemplateLineChartAggregatedFieldWellsArgs and TemplateLineChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateLineChartAggregatedFieldWellsInput` via:
//
//	TemplateLineChartAggregatedFieldWellsArgs{...}
type TemplateLineChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateLineChartAggregatedFieldWellsOutput() TemplateLineChartAggregatedFieldWellsOutput
	ToTemplateLineChartAggregatedFieldWellsOutputWithContext(context.Context) TemplateLineChartAggregatedFieldWellsOutput
}

type TemplateLineChartAggregatedFieldWellsArgs struct {
	// The category field wells of a line chart. Values are grouped by category fields.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The color field wells of a line chart. Values are grouped by category fields.
	Colors TemplateDimensionFieldArrayInput `pulumi:"colors"`
	// The small multiples field well of a line chart.
	SmallMultiples TemplateDimensionFieldArrayInput `pulumi:"smallMultiples"`
	// The value field wells of a line chart. Values are aggregated based on categories.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateLineChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateLineChartAggregatedFieldWellsArgs) ToTemplateLineChartAggregatedFieldWellsOutput() TemplateLineChartAggregatedFieldWellsOutput {
	return i.ToTemplateLineChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateLineChartAggregatedFieldWellsArgs) ToTemplateLineChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateLineChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartAggregatedFieldWellsOutput)
}

func (i TemplateLineChartAggregatedFieldWellsArgs) ToTemplateLineChartAggregatedFieldWellsPtrOutput() TemplateLineChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartAggregatedFieldWellsArgs) ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartAggregatedFieldWellsOutput).ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateLineChartAggregatedFieldWellsPtrInput is an input type that accepts TemplateLineChartAggregatedFieldWellsArgs, TemplateLineChartAggregatedFieldWellsPtr and TemplateLineChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplateLineChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateLineChartAggregatedFieldWellsPtrOutput() TemplateLineChartAggregatedFieldWellsPtrOutput
	ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateLineChartAggregatedFieldWellsPtrOutput
}

type templateLineChartAggregatedFieldWellsPtrType TemplateLineChartAggregatedFieldWellsArgs

func TemplateLineChartAggregatedFieldWellsPtr(v *TemplateLineChartAggregatedFieldWellsArgs) TemplateLineChartAggregatedFieldWellsPtrInput {
	return (*templateLineChartAggregatedFieldWellsPtrType)(v)
}

func (*templateLineChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templateLineChartAggregatedFieldWellsPtrType) ToTemplateLineChartAggregatedFieldWellsPtrOutput() TemplateLineChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateLineChartAggregatedFieldWellsPtrType) ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartAggregatedFieldWellsPtrOutput)
}

type TemplateLineChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateLineChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateLineChartAggregatedFieldWellsOutput) ToTemplateLineChartAggregatedFieldWellsOutput() TemplateLineChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateLineChartAggregatedFieldWellsOutput) ToTemplateLineChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateLineChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateLineChartAggregatedFieldWellsOutput) ToTemplateLineChartAggregatedFieldWellsPtrOutput() TemplateLineChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartAggregatedFieldWellsOutput) ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartAggregatedFieldWells) *TemplateLineChartAggregatedFieldWells {
		return &v
	}).(TemplateLineChartAggregatedFieldWellsPtrOutput)
}

// The category field wells of a line chart. Values are grouped by category fields.
func (o TemplateLineChartAggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateLineChartAggregatedFieldWells) []TemplateDimensionField { return v.Category }).(TemplateDimensionFieldArrayOutput)
}

// The color field wells of a line chart. Values are grouped by category fields.
func (o TemplateLineChartAggregatedFieldWellsOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateLineChartAggregatedFieldWells) []TemplateDimensionField { return v.Colors }).(TemplateDimensionFieldArrayOutput)
}

// The small multiples field well of a line chart.
func (o TemplateLineChartAggregatedFieldWellsOutput) SmallMultiples() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateLineChartAggregatedFieldWells) []TemplateDimensionField { return v.SmallMultiples }).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a line chart. Values are aggregated based on categories.
func (o TemplateLineChartAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateLineChartAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateLineChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateLineChartAggregatedFieldWellsPtrOutput) ToTemplateLineChartAggregatedFieldWellsPtrOutput() TemplateLineChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateLineChartAggregatedFieldWellsPtrOutput) ToTemplateLineChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateLineChartAggregatedFieldWellsPtrOutput) Elem() TemplateLineChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateLineChartAggregatedFieldWells) TemplateLineChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartAggregatedFieldWells
		return ret
	}).(TemplateLineChartAggregatedFieldWellsOutput)
}

// The category field wells of a line chart. Values are grouped by category fields.
func (o TemplateLineChartAggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The color field wells of a line chart. Values are grouped by category fields.
func (o TemplateLineChartAggregatedFieldWellsPtrOutput) Colors() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateDimensionFieldArrayOutput)
}

// The small multiples field well of a line chart.
func (o TemplateLineChartAggregatedFieldWellsPtrOutput) SmallMultiples() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.SmallMultiples
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a line chart. Values are aggregated based on categories.
func (o TemplateLineChartAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateLineChartConfiguration struct {
	// The default configuration of a line chart's contribution analysis.
	ContributionAnalysisDefaults []TemplateContributionAnalysisDefault `pulumi:"contributionAnalysisDefaults"`
	// The data label configuration of a line chart.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The options that determine the default presentation of all line series in `LineChartVisual` .
	DefaultSeriesSettings *TemplateLineChartDefaultSeriesSettings `pulumi:"defaultSeriesSettings"`
	// The field well configuration of a line chart.
	FieldWells *TemplateLineChartFieldWells `pulumi:"fieldWells"`
	// The forecast configuration of a line chart.
	ForecastConfigurations []TemplateForecastConfiguration `pulumi:"forecastConfigurations"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend configuration of a line chart.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The series axis configuration of a line chart.
	PrimaryYAxisDisplayOptions *TemplateLineSeriesAxisDisplayOptions `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"primaryYAxisLabelOptions"`
	// The reference lines configuration of a line chart.
	ReferenceLines []TemplateReferenceLine `pulumi:"referenceLines"`
	// The series axis configuration of a line chart.
	SecondaryYAxisDisplayOptions *TemplateLineSeriesAxisDisplayOptions `pulumi:"secondaryYAxisDisplayOptions"`
	// The options that determine the presentation of the secondary y-axis label.
	SecondaryYAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"secondaryYAxisLabelOptions"`
	// The series item configuration of a line chart.
	Series            []TemplateSeriesItem       `pulumi:"series"`
	SingleAxisOptions *TemplateSingleAxisOptions `pulumi:"singleAxisOptions"`
	// The small multiples setup for the visual.
	SmallMultiplesOptions *TemplateSmallMultiplesOptions `pulumi:"smallMultiplesOptions"`
	// The sort configuration of a line chart.
	SortConfiguration *TemplateLineChartSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip configuration of a line chart.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// Determines the type of the line chart.
	Type *TemplateLineChartType `pulumi:"type"`
	// The visual palette configuration of a line chart.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
	// The options that determine the presentation of the x-axis.
	XAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"xAxisDisplayOptions"`
	// The options that determine the presentation of the x-axis label.
	XAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"xAxisLabelOptions"`
}

// TemplateLineChartConfigurationInput is an input type that accepts TemplateLineChartConfigurationArgs and TemplateLineChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateLineChartConfigurationInput` via:
//
//	TemplateLineChartConfigurationArgs{...}
type TemplateLineChartConfigurationInput interface {
	pulumi.Input

	ToTemplateLineChartConfigurationOutput() TemplateLineChartConfigurationOutput
	ToTemplateLineChartConfigurationOutputWithContext(context.Context) TemplateLineChartConfigurationOutput
}

type TemplateLineChartConfigurationArgs struct {
	// The default configuration of a line chart's contribution analysis.
	ContributionAnalysisDefaults TemplateContributionAnalysisDefaultArrayInput `pulumi:"contributionAnalysisDefaults"`
	// The data label configuration of a line chart.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The options that determine the default presentation of all line series in `LineChartVisual` .
	DefaultSeriesSettings TemplateLineChartDefaultSeriesSettingsPtrInput `pulumi:"defaultSeriesSettings"`
	// The field well configuration of a line chart.
	FieldWells TemplateLineChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The forecast configuration of a line chart.
	ForecastConfigurations TemplateForecastConfigurationArrayInput `pulumi:"forecastConfigurations"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend configuration of a line chart.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The series axis configuration of a line chart.
	PrimaryYAxisDisplayOptions TemplateLineSeriesAxisDisplayOptionsPtrInput `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"primaryYAxisLabelOptions"`
	// The reference lines configuration of a line chart.
	ReferenceLines TemplateReferenceLineArrayInput `pulumi:"referenceLines"`
	// The series axis configuration of a line chart.
	SecondaryYAxisDisplayOptions TemplateLineSeriesAxisDisplayOptionsPtrInput `pulumi:"secondaryYAxisDisplayOptions"`
	// The options that determine the presentation of the secondary y-axis label.
	SecondaryYAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"secondaryYAxisLabelOptions"`
	// The series item configuration of a line chart.
	Series            TemplateSeriesItemArrayInput      `pulumi:"series"`
	SingleAxisOptions TemplateSingleAxisOptionsPtrInput `pulumi:"singleAxisOptions"`
	// The small multiples setup for the visual.
	SmallMultiplesOptions TemplateSmallMultiplesOptionsPtrInput `pulumi:"smallMultiplesOptions"`
	// The sort configuration of a line chart.
	SortConfiguration TemplateLineChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip configuration of a line chart.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// Determines the type of the line chart.
	Type TemplateLineChartTypePtrInput `pulumi:"type"`
	// The visual palette configuration of a line chart.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
	// The options that determine the presentation of the x-axis.
	XAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"xAxisDisplayOptions"`
	// The options that determine the presentation of the x-axis label.
	XAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"xAxisLabelOptions"`
}

func (TemplateLineChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartConfiguration)(nil)).Elem()
}

func (i TemplateLineChartConfigurationArgs) ToTemplateLineChartConfigurationOutput() TemplateLineChartConfigurationOutput {
	return i.ToTemplateLineChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateLineChartConfigurationArgs) ToTemplateLineChartConfigurationOutputWithContext(ctx context.Context) TemplateLineChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartConfigurationOutput)
}

func (i TemplateLineChartConfigurationArgs) ToTemplateLineChartConfigurationPtrOutput() TemplateLineChartConfigurationPtrOutput {
	return i.ToTemplateLineChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartConfigurationArgs) ToTemplateLineChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartConfigurationOutput).ToTemplateLineChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateLineChartConfigurationPtrInput is an input type that accepts TemplateLineChartConfigurationArgs, TemplateLineChartConfigurationPtr and TemplateLineChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartConfigurationPtrInput` via:
//
//	        TemplateLineChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateLineChartConfigurationPtrOutput() TemplateLineChartConfigurationPtrOutput
	ToTemplateLineChartConfigurationPtrOutputWithContext(context.Context) TemplateLineChartConfigurationPtrOutput
}

type templateLineChartConfigurationPtrType TemplateLineChartConfigurationArgs

func TemplateLineChartConfigurationPtr(v *TemplateLineChartConfigurationArgs) TemplateLineChartConfigurationPtrInput {
	return (*templateLineChartConfigurationPtrType)(v)
}

func (*templateLineChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartConfiguration)(nil)).Elem()
}

func (i *templateLineChartConfigurationPtrType) ToTemplateLineChartConfigurationPtrOutput() TemplateLineChartConfigurationPtrOutput {
	return i.ToTemplateLineChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateLineChartConfigurationPtrType) ToTemplateLineChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartConfigurationPtrOutput)
}

type TemplateLineChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateLineChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartConfiguration)(nil)).Elem()
}

func (o TemplateLineChartConfigurationOutput) ToTemplateLineChartConfigurationOutput() TemplateLineChartConfigurationOutput {
	return o
}

func (o TemplateLineChartConfigurationOutput) ToTemplateLineChartConfigurationOutputWithContext(ctx context.Context) TemplateLineChartConfigurationOutput {
	return o
}

func (o TemplateLineChartConfigurationOutput) ToTemplateLineChartConfigurationPtrOutput() TemplateLineChartConfigurationPtrOutput {
	return o.ToTemplateLineChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartConfigurationOutput) ToTemplateLineChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartConfiguration) *TemplateLineChartConfiguration {
		return &v
	}).(TemplateLineChartConfigurationPtrOutput)
}

// The default configuration of a line chart's contribution analysis.
func (o TemplateLineChartConfigurationOutput) ContributionAnalysisDefaults() TemplateContributionAnalysisDefaultArrayOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) []TemplateContributionAnalysisDefault {
		return v.ContributionAnalysisDefaults
	}).(TemplateContributionAnalysisDefaultArrayOutput)
}

// The data label configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The options that determine the default presentation of all line series in `LineChartVisual` .
func (o TemplateLineChartConfigurationOutput) DefaultSeriesSettings() TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateLineChartDefaultSeriesSettings {
		return v.DefaultSeriesSettings
	}).(TemplateLineChartDefaultSeriesSettingsPtrOutput)
}

// The field well configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) FieldWells() TemplateLineChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateLineChartFieldWells { return v.FieldWells }).(TemplateLineChartFieldWellsPtrOutput)
}

// The forecast configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) ForecastConfigurations() TemplateForecastConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) []TemplateForecastConfiguration {
		return v.ForecastConfigurations
	}).(TemplateForecastConfigurationArrayOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateLineChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The series axis configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) PrimaryYAxisDisplayOptions() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateLineSeriesAxisDisplayOptions {
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateLineSeriesAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o TemplateLineChartConfigurationOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The reference lines configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) []TemplateReferenceLine { return v.ReferenceLines }).(TemplateReferenceLineArrayOutput)
}

// The series axis configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) SecondaryYAxisDisplayOptions() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateLineSeriesAxisDisplayOptions {
		return v.SecondaryYAxisDisplayOptions
	}).(TemplateLineSeriesAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the secondary y-axis label.
func (o TemplateLineChartConfigurationOutput) SecondaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.SecondaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The series item configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) Series() TemplateSeriesItemArrayOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) []TemplateSeriesItem { return v.Series }).(TemplateSeriesItemArrayOutput)
}

func (o TemplateLineChartConfigurationOutput) SingleAxisOptions() TemplateSingleAxisOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateSingleAxisOptions { return v.SingleAxisOptions }).(TemplateSingleAxisOptionsPtrOutput)
}

// The small multiples setup for the visual.
func (o TemplateLineChartConfigurationOutput) SmallMultiplesOptions() TemplateSmallMultiplesOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateSmallMultiplesOptions { return v.SmallMultiplesOptions }).(TemplateSmallMultiplesOptionsPtrOutput)
}

// The sort configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) SortConfiguration() TemplateLineChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateLineChartSortConfiguration { return v.SortConfiguration }).(TemplateLineChartSortConfigurationPtrOutput)
}

// The tooltip configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// Determines the type of the line chart.
func (o TemplateLineChartConfigurationOutput) Type() TemplateLineChartTypePtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateLineChartType { return v.Type }).(TemplateLineChartTypePtrOutput)
}

// The visual palette configuration of a line chart.
func (o TemplateLineChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of the x-axis.
func (o TemplateLineChartConfigurationOutput) XAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateAxisDisplayOptions { return v.XAxisDisplayOptions }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the x-axis label.
func (o TemplateLineChartConfigurationOutput) XAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartConfiguration) *TemplateChartAxisLabelOptions { return v.XAxisLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

type TemplateLineChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartConfiguration)(nil)).Elem()
}

func (o TemplateLineChartConfigurationPtrOutput) ToTemplateLineChartConfigurationPtrOutput() TemplateLineChartConfigurationPtrOutput {
	return o
}

func (o TemplateLineChartConfigurationPtrOutput) ToTemplateLineChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartConfigurationPtrOutput {
	return o
}

func (o TemplateLineChartConfigurationPtrOutput) Elem() TemplateLineChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) TemplateLineChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartConfiguration
		return ret
	}).(TemplateLineChartConfigurationOutput)
}

// The default configuration of a line chart's contribution analysis.
func (o TemplateLineChartConfigurationPtrOutput) ContributionAnalysisDefaults() TemplateContributionAnalysisDefaultArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) []TemplateContributionAnalysisDefault {
		if v == nil {
			return nil
		}
		return v.ContributionAnalysisDefaults
	}).(TemplateContributionAnalysisDefaultArrayOutput)
}

// The data label configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The options that determine the default presentation of all line series in `LineChartVisual` .
func (o TemplateLineChartConfigurationPtrOutput) DefaultSeriesSettings() TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateLineChartDefaultSeriesSettings {
		if v == nil {
			return nil
		}
		return v.DefaultSeriesSettings
	}).(TemplateLineChartDefaultSeriesSettingsPtrOutput)
}

// The field well configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) FieldWells() TemplateLineChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateLineChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateLineChartFieldWellsPtrOutput)
}

// The forecast configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) ForecastConfigurations() TemplateForecastConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) []TemplateForecastConfiguration {
		if v == nil {
			return nil
		}
		return v.ForecastConfigurations
	}).(TemplateForecastConfigurationArrayOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateLineChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The series axis configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) PrimaryYAxisDisplayOptions() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateLineSeriesAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateLineSeriesAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o TemplateLineChartConfigurationPtrOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The reference lines configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) ReferenceLines() TemplateReferenceLineArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) []TemplateReferenceLine {
		if v == nil {
			return nil
		}
		return v.ReferenceLines
	}).(TemplateReferenceLineArrayOutput)
}

// The series axis configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) SecondaryYAxisDisplayOptions() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateLineSeriesAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.SecondaryYAxisDisplayOptions
	}).(TemplateLineSeriesAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the secondary y-axis label.
func (o TemplateLineChartConfigurationPtrOutput) SecondaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.SecondaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The series item configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) Series() TemplateSeriesItemArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) []TemplateSeriesItem {
		if v == nil {
			return nil
		}
		return v.Series
	}).(TemplateSeriesItemArrayOutput)
}

func (o TemplateLineChartConfigurationPtrOutput) SingleAxisOptions() TemplateSingleAxisOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateSingleAxisOptions {
		if v == nil {
			return nil
		}
		return v.SingleAxisOptions
	}).(TemplateSingleAxisOptionsPtrOutput)
}

// The small multiples setup for the visual.
func (o TemplateLineChartConfigurationPtrOutput) SmallMultiplesOptions() TemplateSmallMultiplesOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateSmallMultiplesOptions {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesOptions
	}).(TemplateSmallMultiplesOptionsPtrOutput)
}

// The sort configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) SortConfiguration() TemplateLineChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateLineChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateLineChartSortConfigurationPtrOutput)
}

// The tooltip configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// Determines the type of the line chart.
func (o TemplateLineChartConfigurationPtrOutput) Type() TemplateLineChartTypePtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateLineChartType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateLineChartTypePtrOutput)
}

// The visual palette configuration of a line chart.
func (o TemplateLineChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of the x-axis.
func (o TemplateLineChartConfigurationPtrOutput) XAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.XAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the x-axis label.
func (o TemplateLineChartConfigurationPtrOutput) XAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.XAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

type TemplateLineChartDefaultSeriesSettings struct {
	// The axis to which you are binding all line series to.
	AxisBinding *TemplateAxisBinding `pulumi:"axisBinding"`
	// Line styles options for all line series in the visual.
	LineStyleSettings *TemplateLineChartLineStyleSettings `pulumi:"lineStyleSettings"`
	// Marker styles options for all line series in the visual.
	MarkerStyleSettings *TemplateLineChartMarkerStyleSettings `pulumi:"markerStyleSettings"`
}

// TemplateLineChartDefaultSeriesSettingsInput is an input type that accepts TemplateLineChartDefaultSeriesSettingsArgs and TemplateLineChartDefaultSeriesSettingsOutput values.
// You can construct a concrete instance of `TemplateLineChartDefaultSeriesSettingsInput` via:
//
//	TemplateLineChartDefaultSeriesSettingsArgs{...}
type TemplateLineChartDefaultSeriesSettingsInput interface {
	pulumi.Input

	ToTemplateLineChartDefaultSeriesSettingsOutput() TemplateLineChartDefaultSeriesSettingsOutput
	ToTemplateLineChartDefaultSeriesSettingsOutputWithContext(context.Context) TemplateLineChartDefaultSeriesSettingsOutput
}

type TemplateLineChartDefaultSeriesSettingsArgs struct {
	// The axis to which you are binding all line series to.
	AxisBinding TemplateAxisBindingPtrInput `pulumi:"axisBinding"`
	// Line styles options for all line series in the visual.
	LineStyleSettings TemplateLineChartLineStyleSettingsPtrInput `pulumi:"lineStyleSettings"`
	// Marker styles options for all line series in the visual.
	MarkerStyleSettings TemplateLineChartMarkerStyleSettingsPtrInput `pulumi:"markerStyleSettings"`
}

func (TemplateLineChartDefaultSeriesSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartDefaultSeriesSettings)(nil)).Elem()
}

func (i TemplateLineChartDefaultSeriesSettingsArgs) ToTemplateLineChartDefaultSeriesSettingsOutput() TemplateLineChartDefaultSeriesSettingsOutput {
	return i.ToTemplateLineChartDefaultSeriesSettingsOutputWithContext(context.Background())
}

func (i TemplateLineChartDefaultSeriesSettingsArgs) ToTemplateLineChartDefaultSeriesSettingsOutputWithContext(ctx context.Context) TemplateLineChartDefaultSeriesSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartDefaultSeriesSettingsOutput)
}

func (i TemplateLineChartDefaultSeriesSettingsArgs) ToTemplateLineChartDefaultSeriesSettingsPtrOutput() TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return i.ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartDefaultSeriesSettingsArgs) ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartDefaultSeriesSettingsOutput).ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(ctx)
}

// TemplateLineChartDefaultSeriesSettingsPtrInput is an input type that accepts TemplateLineChartDefaultSeriesSettingsArgs, TemplateLineChartDefaultSeriesSettingsPtr and TemplateLineChartDefaultSeriesSettingsPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartDefaultSeriesSettingsPtrInput` via:
//
//	        TemplateLineChartDefaultSeriesSettingsArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartDefaultSeriesSettingsPtrInput interface {
	pulumi.Input

	ToTemplateLineChartDefaultSeriesSettingsPtrOutput() TemplateLineChartDefaultSeriesSettingsPtrOutput
	ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(context.Context) TemplateLineChartDefaultSeriesSettingsPtrOutput
}

type templateLineChartDefaultSeriesSettingsPtrType TemplateLineChartDefaultSeriesSettingsArgs

func TemplateLineChartDefaultSeriesSettingsPtr(v *TemplateLineChartDefaultSeriesSettingsArgs) TemplateLineChartDefaultSeriesSettingsPtrInput {
	return (*templateLineChartDefaultSeriesSettingsPtrType)(v)
}

func (*templateLineChartDefaultSeriesSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartDefaultSeriesSettings)(nil)).Elem()
}

func (i *templateLineChartDefaultSeriesSettingsPtrType) ToTemplateLineChartDefaultSeriesSettingsPtrOutput() TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return i.ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(context.Background())
}

func (i *templateLineChartDefaultSeriesSettingsPtrType) ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartDefaultSeriesSettingsPtrOutput)
}

type TemplateLineChartDefaultSeriesSettingsOutput struct{ *pulumi.OutputState }

func (TemplateLineChartDefaultSeriesSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartDefaultSeriesSettings)(nil)).Elem()
}

func (o TemplateLineChartDefaultSeriesSettingsOutput) ToTemplateLineChartDefaultSeriesSettingsOutput() TemplateLineChartDefaultSeriesSettingsOutput {
	return o
}

func (o TemplateLineChartDefaultSeriesSettingsOutput) ToTemplateLineChartDefaultSeriesSettingsOutputWithContext(ctx context.Context) TemplateLineChartDefaultSeriesSettingsOutput {
	return o
}

func (o TemplateLineChartDefaultSeriesSettingsOutput) ToTemplateLineChartDefaultSeriesSettingsPtrOutput() TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return o.ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartDefaultSeriesSettingsOutput) ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartDefaultSeriesSettings) *TemplateLineChartDefaultSeriesSettings {
		return &v
	}).(TemplateLineChartDefaultSeriesSettingsPtrOutput)
}

// The axis to which you are binding all line series to.
func (o TemplateLineChartDefaultSeriesSettingsOutput) AxisBinding() TemplateAxisBindingPtrOutput {
	return o.ApplyT(func(v TemplateLineChartDefaultSeriesSettings) *TemplateAxisBinding { return v.AxisBinding }).(TemplateAxisBindingPtrOutput)
}

// Line styles options for all line series in the visual.
func (o TemplateLineChartDefaultSeriesSettingsOutput) LineStyleSettings() TemplateLineChartLineStyleSettingsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartDefaultSeriesSettings) *TemplateLineChartLineStyleSettings {
		return v.LineStyleSettings
	}).(TemplateLineChartLineStyleSettingsPtrOutput)
}

// Marker styles options for all line series in the visual.
func (o TemplateLineChartDefaultSeriesSettingsOutput) MarkerStyleSettings() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartDefaultSeriesSettings) *TemplateLineChartMarkerStyleSettings {
		return v.MarkerStyleSettings
	}).(TemplateLineChartMarkerStyleSettingsPtrOutput)
}

type TemplateLineChartDefaultSeriesSettingsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartDefaultSeriesSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartDefaultSeriesSettings)(nil)).Elem()
}

func (o TemplateLineChartDefaultSeriesSettingsPtrOutput) ToTemplateLineChartDefaultSeriesSettingsPtrOutput() TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return o
}

func (o TemplateLineChartDefaultSeriesSettingsPtrOutput) ToTemplateLineChartDefaultSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartDefaultSeriesSettingsPtrOutput {
	return o
}

func (o TemplateLineChartDefaultSeriesSettingsPtrOutput) Elem() TemplateLineChartDefaultSeriesSettingsOutput {
	return o.ApplyT(func(v *TemplateLineChartDefaultSeriesSettings) TemplateLineChartDefaultSeriesSettings {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartDefaultSeriesSettings
		return ret
	}).(TemplateLineChartDefaultSeriesSettingsOutput)
}

// The axis to which you are binding all line series to.
func (o TemplateLineChartDefaultSeriesSettingsPtrOutput) AxisBinding() TemplateAxisBindingPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartDefaultSeriesSettings) *TemplateAxisBinding {
		if v == nil {
			return nil
		}
		return v.AxisBinding
	}).(TemplateAxisBindingPtrOutput)
}

// Line styles options for all line series in the visual.
func (o TemplateLineChartDefaultSeriesSettingsPtrOutput) LineStyleSettings() TemplateLineChartLineStyleSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartDefaultSeriesSettings) *TemplateLineChartLineStyleSettings {
		if v == nil {
			return nil
		}
		return v.LineStyleSettings
	}).(TemplateLineChartLineStyleSettingsPtrOutput)
}

// Marker styles options for all line series in the visual.
func (o TemplateLineChartDefaultSeriesSettingsPtrOutput) MarkerStyleSettings() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartDefaultSeriesSettings) *TemplateLineChartMarkerStyleSettings {
		if v == nil {
			return nil
		}
		return v.MarkerStyleSettings
	}).(TemplateLineChartMarkerStyleSettingsPtrOutput)
}

type TemplateLineChartFieldWells struct {
	// The field well configuration of a line chart.
	LineChartAggregatedFieldWells *TemplateLineChartAggregatedFieldWells `pulumi:"lineChartAggregatedFieldWells"`
}

// TemplateLineChartFieldWellsInput is an input type that accepts TemplateLineChartFieldWellsArgs and TemplateLineChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateLineChartFieldWellsInput` via:
//
//	TemplateLineChartFieldWellsArgs{...}
type TemplateLineChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateLineChartFieldWellsOutput() TemplateLineChartFieldWellsOutput
	ToTemplateLineChartFieldWellsOutputWithContext(context.Context) TemplateLineChartFieldWellsOutput
}

type TemplateLineChartFieldWellsArgs struct {
	// The field well configuration of a line chart.
	LineChartAggregatedFieldWells TemplateLineChartAggregatedFieldWellsPtrInput `pulumi:"lineChartAggregatedFieldWells"`
}

func (TemplateLineChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartFieldWells)(nil)).Elem()
}

func (i TemplateLineChartFieldWellsArgs) ToTemplateLineChartFieldWellsOutput() TemplateLineChartFieldWellsOutput {
	return i.ToTemplateLineChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateLineChartFieldWellsArgs) ToTemplateLineChartFieldWellsOutputWithContext(ctx context.Context) TemplateLineChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartFieldWellsOutput)
}

func (i TemplateLineChartFieldWellsArgs) ToTemplateLineChartFieldWellsPtrOutput() TemplateLineChartFieldWellsPtrOutput {
	return i.ToTemplateLineChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartFieldWellsArgs) ToTemplateLineChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartFieldWellsOutput).ToTemplateLineChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateLineChartFieldWellsPtrInput is an input type that accepts TemplateLineChartFieldWellsArgs, TemplateLineChartFieldWellsPtr and TemplateLineChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartFieldWellsPtrInput` via:
//
//	        TemplateLineChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateLineChartFieldWellsPtrOutput() TemplateLineChartFieldWellsPtrOutput
	ToTemplateLineChartFieldWellsPtrOutputWithContext(context.Context) TemplateLineChartFieldWellsPtrOutput
}

type templateLineChartFieldWellsPtrType TemplateLineChartFieldWellsArgs

func TemplateLineChartFieldWellsPtr(v *TemplateLineChartFieldWellsArgs) TemplateLineChartFieldWellsPtrInput {
	return (*templateLineChartFieldWellsPtrType)(v)
}

func (*templateLineChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartFieldWells)(nil)).Elem()
}

func (i *templateLineChartFieldWellsPtrType) ToTemplateLineChartFieldWellsPtrOutput() TemplateLineChartFieldWellsPtrOutput {
	return i.ToTemplateLineChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateLineChartFieldWellsPtrType) ToTemplateLineChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartFieldWellsPtrOutput)
}

type TemplateLineChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateLineChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartFieldWells)(nil)).Elem()
}

func (o TemplateLineChartFieldWellsOutput) ToTemplateLineChartFieldWellsOutput() TemplateLineChartFieldWellsOutput {
	return o
}

func (o TemplateLineChartFieldWellsOutput) ToTemplateLineChartFieldWellsOutputWithContext(ctx context.Context) TemplateLineChartFieldWellsOutput {
	return o
}

func (o TemplateLineChartFieldWellsOutput) ToTemplateLineChartFieldWellsPtrOutput() TemplateLineChartFieldWellsPtrOutput {
	return o.ToTemplateLineChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartFieldWellsOutput) ToTemplateLineChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartFieldWells) *TemplateLineChartFieldWells {
		return &v
	}).(TemplateLineChartFieldWellsPtrOutput)
}

// The field well configuration of a line chart.
func (o TemplateLineChartFieldWellsOutput) LineChartAggregatedFieldWells() TemplateLineChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartFieldWells) *TemplateLineChartAggregatedFieldWells {
		return v.LineChartAggregatedFieldWells
	}).(TemplateLineChartAggregatedFieldWellsPtrOutput)
}

type TemplateLineChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartFieldWells)(nil)).Elem()
}

func (o TemplateLineChartFieldWellsPtrOutput) ToTemplateLineChartFieldWellsPtrOutput() TemplateLineChartFieldWellsPtrOutput {
	return o
}

func (o TemplateLineChartFieldWellsPtrOutput) ToTemplateLineChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateLineChartFieldWellsPtrOutput {
	return o
}

func (o TemplateLineChartFieldWellsPtrOutput) Elem() TemplateLineChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateLineChartFieldWells) TemplateLineChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartFieldWells
		return ret
	}).(TemplateLineChartFieldWellsOutput)
}

// The field well configuration of a line chart.
func (o TemplateLineChartFieldWellsPtrOutput) LineChartAggregatedFieldWells() TemplateLineChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartFieldWells) *TemplateLineChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.LineChartAggregatedFieldWells
	}).(TemplateLineChartAggregatedFieldWellsPtrOutput)
}

type TemplateLineChartLineStyleSettings struct {
	// Interpolation style for line series.
	//
	// - `LINEAR` : Show as default, linear style.
	// - `SMOOTH` : Show as a smooth curve.
	// - `STEPPED` : Show steps in line.
	LineInterpolation *TemplateLineInterpolation `pulumi:"lineInterpolation"`
	// Line style for line series.
	//
	// - `SOLID` : Show as a solid line.
	// - `DOTTED` : Show as a dotted line.
	// - `DASHED` : Show as a dashed line.
	LineStyle *TemplateLineChartLineStyle `pulumi:"lineStyle"`
	// Configuration option that determines whether to show the line for the series.
	LineVisibility interface{} `pulumi:"lineVisibility"`
	// String based length that is composed of value and unit in px
	LineWidth *string `pulumi:"lineWidth"`
}

// TemplateLineChartLineStyleSettingsInput is an input type that accepts TemplateLineChartLineStyleSettingsArgs and TemplateLineChartLineStyleSettingsOutput values.
// You can construct a concrete instance of `TemplateLineChartLineStyleSettingsInput` via:
//
//	TemplateLineChartLineStyleSettingsArgs{...}
type TemplateLineChartLineStyleSettingsInput interface {
	pulumi.Input

	ToTemplateLineChartLineStyleSettingsOutput() TemplateLineChartLineStyleSettingsOutput
	ToTemplateLineChartLineStyleSettingsOutputWithContext(context.Context) TemplateLineChartLineStyleSettingsOutput
}

type TemplateLineChartLineStyleSettingsArgs struct {
	// Interpolation style for line series.
	//
	// - `LINEAR` : Show as default, linear style.
	// - `SMOOTH` : Show as a smooth curve.
	// - `STEPPED` : Show steps in line.
	LineInterpolation TemplateLineInterpolationPtrInput `pulumi:"lineInterpolation"`
	// Line style for line series.
	//
	// - `SOLID` : Show as a solid line.
	// - `DOTTED` : Show as a dotted line.
	// - `DASHED` : Show as a dashed line.
	LineStyle TemplateLineChartLineStylePtrInput `pulumi:"lineStyle"`
	// Configuration option that determines whether to show the line for the series.
	LineVisibility pulumi.Input `pulumi:"lineVisibility"`
	// String based length that is composed of value and unit in px
	LineWidth pulumi.StringPtrInput `pulumi:"lineWidth"`
}

func (TemplateLineChartLineStyleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartLineStyleSettings)(nil)).Elem()
}

func (i TemplateLineChartLineStyleSettingsArgs) ToTemplateLineChartLineStyleSettingsOutput() TemplateLineChartLineStyleSettingsOutput {
	return i.ToTemplateLineChartLineStyleSettingsOutputWithContext(context.Background())
}

func (i TemplateLineChartLineStyleSettingsArgs) ToTemplateLineChartLineStyleSettingsOutputWithContext(ctx context.Context) TemplateLineChartLineStyleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartLineStyleSettingsOutput)
}

func (i TemplateLineChartLineStyleSettingsArgs) ToTemplateLineChartLineStyleSettingsPtrOutput() TemplateLineChartLineStyleSettingsPtrOutput {
	return i.ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartLineStyleSettingsArgs) ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartLineStyleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartLineStyleSettingsOutput).ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(ctx)
}

// TemplateLineChartLineStyleSettingsPtrInput is an input type that accepts TemplateLineChartLineStyleSettingsArgs, TemplateLineChartLineStyleSettingsPtr and TemplateLineChartLineStyleSettingsPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartLineStyleSettingsPtrInput` via:
//
//	        TemplateLineChartLineStyleSettingsArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartLineStyleSettingsPtrInput interface {
	pulumi.Input

	ToTemplateLineChartLineStyleSettingsPtrOutput() TemplateLineChartLineStyleSettingsPtrOutput
	ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(context.Context) TemplateLineChartLineStyleSettingsPtrOutput
}

type templateLineChartLineStyleSettingsPtrType TemplateLineChartLineStyleSettingsArgs

func TemplateLineChartLineStyleSettingsPtr(v *TemplateLineChartLineStyleSettingsArgs) TemplateLineChartLineStyleSettingsPtrInput {
	return (*templateLineChartLineStyleSettingsPtrType)(v)
}

func (*templateLineChartLineStyleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartLineStyleSettings)(nil)).Elem()
}

func (i *templateLineChartLineStyleSettingsPtrType) ToTemplateLineChartLineStyleSettingsPtrOutput() TemplateLineChartLineStyleSettingsPtrOutput {
	return i.ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(context.Background())
}

func (i *templateLineChartLineStyleSettingsPtrType) ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartLineStyleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartLineStyleSettingsPtrOutput)
}

type TemplateLineChartLineStyleSettingsOutput struct{ *pulumi.OutputState }

func (TemplateLineChartLineStyleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartLineStyleSettings)(nil)).Elem()
}

func (o TemplateLineChartLineStyleSettingsOutput) ToTemplateLineChartLineStyleSettingsOutput() TemplateLineChartLineStyleSettingsOutput {
	return o
}

func (o TemplateLineChartLineStyleSettingsOutput) ToTemplateLineChartLineStyleSettingsOutputWithContext(ctx context.Context) TemplateLineChartLineStyleSettingsOutput {
	return o
}

func (o TemplateLineChartLineStyleSettingsOutput) ToTemplateLineChartLineStyleSettingsPtrOutput() TemplateLineChartLineStyleSettingsPtrOutput {
	return o.ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartLineStyleSettingsOutput) ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartLineStyleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartLineStyleSettings) *TemplateLineChartLineStyleSettings {
		return &v
	}).(TemplateLineChartLineStyleSettingsPtrOutput)
}

// Interpolation style for line series.
//
// - `LINEAR` : Show as default, linear style.
// - `SMOOTH` : Show as a smooth curve.
// - `STEPPED` : Show steps in line.
func (o TemplateLineChartLineStyleSettingsOutput) LineInterpolation() TemplateLineInterpolationPtrOutput {
	return o.ApplyT(func(v TemplateLineChartLineStyleSettings) *TemplateLineInterpolation { return v.LineInterpolation }).(TemplateLineInterpolationPtrOutput)
}

// Line style for line series.
//
// - `SOLID` : Show as a solid line.
// - `DOTTED` : Show as a dotted line.
// - `DASHED` : Show as a dashed line.
func (o TemplateLineChartLineStyleSettingsOutput) LineStyle() TemplateLineChartLineStylePtrOutput {
	return o.ApplyT(func(v TemplateLineChartLineStyleSettings) *TemplateLineChartLineStyle { return v.LineStyle }).(TemplateLineChartLineStylePtrOutput)
}

// Configuration option that determines whether to show the line for the series.
func (o TemplateLineChartLineStyleSettingsOutput) LineVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateLineChartLineStyleSettings) interface{} { return v.LineVisibility }).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLineChartLineStyleSettingsOutput) LineWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLineChartLineStyleSettings) *string { return v.LineWidth }).(pulumi.StringPtrOutput)
}

type TemplateLineChartLineStyleSettingsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartLineStyleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartLineStyleSettings)(nil)).Elem()
}

func (o TemplateLineChartLineStyleSettingsPtrOutput) ToTemplateLineChartLineStyleSettingsPtrOutput() TemplateLineChartLineStyleSettingsPtrOutput {
	return o
}

func (o TemplateLineChartLineStyleSettingsPtrOutput) ToTemplateLineChartLineStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartLineStyleSettingsPtrOutput {
	return o
}

func (o TemplateLineChartLineStyleSettingsPtrOutput) Elem() TemplateLineChartLineStyleSettingsOutput {
	return o.ApplyT(func(v *TemplateLineChartLineStyleSettings) TemplateLineChartLineStyleSettings {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartLineStyleSettings
		return ret
	}).(TemplateLineChartLineStyleSettingsOutput)
}

// Interpolation style for line series.
//
// - `LINEAR` : Show as default, linear style.
// - `SMOOTH` : Show as a smooth curve.
// - `STEPPED` : Show steps in line.
func (o TemplateLineChartLineStyleSettingsPtrOutput) LineInterpolation() TemplateLineInterpolationPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartLineStyleSettings) *TemplateLineInterpolation {
		if v == nil {
			return nil
		}
		return v.LineInterpolation
	}).(TemplateLineInterpolationPtrOutput)
}

// Line style for line series.
//
// - `SOLID` : Show as a solid line.
// - `DOTTED` : Show as a dotted line.
// - `DASHED` : Show as a dashed line.
func (o TemplateLineChartLineStyleSettingsPtrOutput) LineStyle() TemplateLineChartLineStylePtrOutput {
	return o.ApplyT(func(v *TemplateLineChartLineStyleSettings) *TemplateLineChartLineStyle {
		if v == nil {
			return nil
		}
		return v.LineStyle
	}).(TemplateLineChartLineStylePtrOutput)
}

// Configuration option that determines whether to show the line for the series.
func (o TemplateLineChartLineStyleSettingsPtrOutput) LineVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateLineChartLineStyleSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.LineVisibility
	}).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLineChartLineStyleSettingsPtrOutput) LineWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartLineStyleSettings) *string {
		if v == nil {
			return nil
		}
		return v.LineWidth
	}).(pulumi.StringPtrOutput)
}

type TemplateLineChartMarkerStyleSettings struct {
	// Color of marker in the series.
	MarkerColor *string `pulumi:"markerColor"`
	// Shape option for markers in the series.
	//
	// - `CIRCLE` : Show marker as a circle.
	// - `TRIANGLE` : Show marker as a triangle.
	// - `SQUARE` : Show marker as a square.
	// - `DIAMOND` : Show marker as a diamond.
	// - `ROUNDED_SQUARE` : Show marker as a rounded square.
	MarkerShape *TemplateLineChartMarkerShape `pulumi:"markerShape"`
	// String based length that is composed of value and unit in px
	MarkerSize *string `pulumi:"markerSize"`
	// Configuration option that determines whether to show the markers in the series.
	MarkerVisibility interface{} `pulumi:"markerVisibility"`
}

// TemplateLineChartMarkerStyleSettingsInput is an input type that accepts TemplateLineChartMarkerStyleSettingsArgs and TemplateLineChartMarkerStyleSettingsOutput values.
// You can construct a concrete instance of `TemplateLineChartMarkerStyleSettingsInput` via:
//
//	TemplateLineChartMarkerStyleSettingsArgs{...}
type TemplateLineChartMarkerStyleSettingsInput interface {
	pulumi.Input

	ToTemplateLineChartMarkerStyleSettingsOutput() TemplateLineChartMarkerStyleSettingsOutput
	ToTemplateLineChartMarkerStyleSettingsOutputWithContext(context.Context) TemplateLineChartMarkerStyleSettingsOutput
}

type TemplateLineChartMarkerStyleSettingsArgs struct {
	// Color of marker in the series.
	MarkerColor pulumi.StringPtrInput `pulumi:"markerColor"`
	// Shape option for markers in the series.
	//
	// - `CIRCLE` : Show marker as a circle.
	// - `TRIANGLE` : Show marker as a triangle.
	// - `SQUARE` : Show marker as a square.
	// - `DIAMOND` : Show marker as a diamond.
	// - `ROUNDED_SQUARE` : Show marker as a rounded square.
	MarkerShape TemplateLineChartMarkerShapePtrInput `pulumi:"markerShape"`
	// String based length that is composed of value and unit in px
	MarkerSize pulumi.StringPtrInput `pulumi:"markerSize"`
	// Configuration option that determines whether to show the markers in the series.
	MarkerVisibility pulumi.Input `pulumi:"markerVisibility"`
}

func (TemplateLineChartMarkerStyleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartMarkerStyleSettings)(nil)).Elem()
}

func (i TemplateLineChartMarkerStyleSettingsArgs) ToTemplateLineChartMarkerStyleSettingsOutput() TemplateLineChartMarkerStyleSettingsOutput {
	return i.ToTemplateLineChartMarkerStyleSettingsOutputWithContext(context.Background())
}

func (i TemplateLineChartMarkerStyleSettingsArgs) ToTemplateLineChartMarkerStyleSettingsOutputWithContext(ctx context.Context) TemplateLineChartMarkerStyleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartMarkerStyleSettingsOutput)
}

func (i TemplateLineChartMarkerStyleSettingsArgs) ToTemplateLineChartMarkerStyleSettingsPtrOutput() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return i.ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartMarkerStyleSettingsArgs) ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartMarkerStyleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartMarkerStyleSettingsOutput).ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(ctx)
}

// TemplateLineChartMarkerStyleSettingsPtrInput is an input type that accepts TemplateLineChartMarkerStyleSettingsArgs, TemplateLineChartMarkerStyleSettingsPtr and TemplateLineChartMarkerStyleSettingsPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartMarkerStyleSettingsPtrInput` via:
//
//	        TemplateLineChartMarkerStyleSettingsArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartMarkerStyleSettingsPtrInput interface {
	pulumi.Input

	ToTemplateLineChartMarkerStyleSettingsPtrOutput() TemplateLineChartMarkerStyleSettingsPtrOutput
	ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(context.Context) TemplateLineChartMarkerStyleSettingsPtrOutput
}

type templateLineChartMarkerStyleSettingsPtrType TemplateLineChartMarkerStyleSettingsArgs

func TemplateLineChartMarkerStyleSettingsPtr(v *TemplateLineChartMarkerStyleSettingsArgs) TemplateLineChartMarkerStyleSettingsPtrInput {
	return (*templateLineChartMarkerStyleSettingsPtrType)(v)
}

func (*templateLineChartMarkerStyleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartMarkerStyleSettings)(nil)).Elem()
}

func (i *templateLineChartMarkerStyleSettingsPtrType) ToTemplateLineChartMarkerStyleSettingsPtrOutput() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return i.ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(context.Background())
}

func (i *templateLineChartMarkerStyleSettingsPtrType) ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartMarkerStyleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartMarkerStyleSettingsPtrOutput)
}

type TemplateLineChartMarkerStyleSettingsOutput struct{ *pulumi.OutputState }

func (TemplateLineChartMarkerStyleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartMarkerStyleSettings)(nil)).Elem()
}

func (o TemplateLineChartMarkerStyleSettingsOutput) ToTemplateLineChartMarkerStyleSettingsOutput() TemplateLineChartMarkerStyleSettingsOutput {
	return o
}

func (o TemplateLineChartMarkerStyleSettingsOutput) ToTemplateLineChartMarkerStyleSettingsOutputWithContext(ctx context.Context) TemplateLineChartMarkerStyleSettingsOutput {
	return o
}

func (o TemplateLineChartMarkerStyleSettingsOutput) ToTemplateLineChartMarkerStyleSettingsPtrOutput() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o.ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartMarkerStyleSettingsOutput) ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartMarkerStyleSettings) *TemplateLineChartMarkerStyleSettings {
		return &v
	}).(TemplateLineChartMarkerStyleSettingsPtrOutput)
}

// Color of marker in the series.
func (o TemplateLineChartMarkerStyleSettingsOutput) MarkerColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLineChartMarkerStyleSettings) *string { return v.MarkerColor }).(pulumi.StringPtrOutput)
}

// Shape option for markers in the series.
//
// - `CIRCLE` : Show marker as a circle.
// - `TRIANGLE` : Show marker as a triangle.
// - `SQUARE` : Show marker as a square.
// - `DIAMOND` : Show marker as a diamond.
// - `ROUNDED_SQUARE` : Show marker as a rounded square.
func (o TemplateLineChartMarkerStyleSettingsOutput) MarkerShape() TemplateLineChartMarkerShapePtrOutput {
	return o.ApplyT(func(v TemplateLineChartMarkerStyleSettings) *TemplateLineChartMarkerShape { return v.MarkerShape }).(TemplateLineChartMarkerShapePtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLineChartMarkerStyleSettingsOutput) MarkerSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLineChartMarkerStyleSettings) *string { return v.MarkerSize }).(pulumi.StringPtrOutput)
}

// Configuration option that determines whether to show the markers in the series.
func (o TemplateLineChartMarkerStyleSettingsOutput) MarkerVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateLineChartMarkerStyleSettings) interface{} { return v.MarkerVisibility }).(pulumi.AnyOutput)
}

type TemplateLineChartMarkerStyleSettingsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartMarkerStyleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartMarkerStyleSettings)(nil)).Elem()
}

func (o TemplateLineChartMarkerStyleSettingsPtrOutput) ToTemplateLineChartMarkerStyleSettingsPtrOutput() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o
}

func (o TemplateLineChartMarkerStyleSettingsPtrOutput) ToTemplateLineChartMarkerStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o
}

func (o TemplateLineChartMarkerStyleSettingsPtrOutput) Elem() TemplateLineChartMarkerStyleSettingsOutput {
	return o.ApplyT(func(v *TemplateLineChartMarkerStyleSettings) TemplateLineChartMarkerStyleSettings {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartMarkerStyleSettings
		return ret
	}).(TemplateLineChartMarkerStyleSettingsOutput)
}

// Color of marker in the series.
func (o TemplateLineChartMarkerStyleSettingsPtrOutput) MarkerColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartMarkerStyleSettings) *string {
		if v == nil {
			return nil
		}
		return v.MarkerColor
	}).(pulumi.StringPtrOutput)
}

// Shape option for markers in the series.
//
// - `CIRCLE` : Show marker as a circle.
// - `TRIANGLE` : Show marker as a triangle.
// - `SQUARE` : Show marker as a square.
// - `DIAMOND` : Show marker as a diamond.
// - `ROUNDED_SQUARE` : Show marker as a rounded square.
func (o TemplateLineChartMarkerStyleSettingsPtrOutput) MarkerShape() TemplateLineChartMarkerShapePtrOutput {
	return o.ApplyT(func(v *TemplateLineChartMarkerStyleSettings) *TemplateLineChartMarkerShape {
		if v == nil {
			return nil
		}
		return v.MarkerShape
	}).(TemplateLineChartMarkerShapePtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateLineChartMarkerStyleSettingsPtrOutput) MarkerSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartMarkerStyleSettings) *string {
		if v == nil {
			return nil
		}
		return v.MarkerSize
	}).(pulumi.StringPtrOutput)
}

// Configuration option that determines whether to show the markers in the series.
func (o TemplateLineChartMarkerStyleSettingsPtrOutput) MarkerVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateLineChartMarkerStyleSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MarkerVisibility
	}).(pulumi.AnyOutput)
}

type TemplateLineChartSeriesSettings struct {
	// Line styles options for a line series in `LineChartVisual` .
	LineStyleSettings *TemplateLineChartLineStyleSettings `pulumi:"lineStyleSettings"`
	// Marker styles options for a line series in `LineChartVisual` .
	MarkerStyleSettings *TemplateLineChartMarkerStyleSettings `pulumi:"markerStyleSettings"`
}

// TemplateLineChartSeriesSettingsInput is an input type that accepts TemplateLineChartSeriesSettingsArgs and TemplateLineChartSeriesSettingsOutput values.
// You can construct a concrete instance of `TemplateLineChartSeriesSettingsInput` via:
//
//	TemplateLineChartSeriesSettingsArgs{...}
type TemplateLineChartSeriesSettingsInput interface {
	pulumi.Input

	ToTemplateLineChartSeriesSettingsOutput() TemplateLineChartSeriesSettingsOutput
	ToTemplateLineChartSeriesSettingsOutputWithContext(context.Context) TemplateLineChartSeriesSettingsOutput
}

type TemplateLineChartSeriesSettingsArgs struct {
	// Line styles options for a line series in `LineChartVisual` .
	LineStyleSettings TemplateLineChartLineStyleSettingsPtrInput `pulumi:"lineStyleSettings"`
	// Marker styles options for a line series in `LineChartVisual` .
	MarkerStyleSettings TemplateLineChartMarkerStyleSettingsPtrInput `pulumi:"markerStyleSettings"`
}

func (TemplateLineChartSeriesSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartSeriesSettings)(nil)).Elem()
}

func (i TemplateLineChartSeriesSettingsArgs) ToTemplateLineChartSeriesSettingsOutput() TemplateLineChartSeriesSettingsOutput {
	return i.ToTemplateLineChartSeriesSettingsOutputWithContext(context.Background())
}

func (i TemplateLineChartSeriesSettingsArgs) ToTemplateLineChartSeriesSettingsOutputWithContext(ctx context.Context) TemplateLineChartSeriesSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartSeriesSettingsOutput)
}

func (i TemplateLineChartSeriesSettingsArgs) ToTemplateLineChartSeriesSettingsPtrOutput() TemplateLineChartSeriesSettingsPtrOutput {
	return i.ToTemplateLineChartSeriesSettingsPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartSeriesSettingsArgs) ToTemplateLineChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartSeriesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartSeriesSettingsOutput).ToTemplateLineChartSeriesSettingsPtrOutputWithContext(ctx)
}

// TemplateLineChartSeriesSettingsPtrInput is an input type that accepts TemplateLineChartSeriesSettingsArgs, TemplateLineChartSeriesSettingsPtr and TemplateLineChartSeriesSettingsPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartSeriesSettingsPtrInput` via:
//
//	        TemplateLineChartSeriesSettingsArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartSeriesSettingsPtrInput interface {
	pulumi.Input

	ToTemplateLineChartSeriesSettingsPtrOutput() TemplateLineChartSeriesSettingsPtrOutput
	ToTemplateLineChartSeriesSettingsPtrOutputWithContext(context.Context) TemplateLineChartSeriesSettingsPtrOutput
}

type templateLineChartSeriesSettingsPtrType TemplateLineChartSeriesSettingsArgs

func TemplateLineChartSeriesSettingsPtr(v *TemplateLineChartSeriesSettingsArgs) TemplateLineChartSeriesSettingsPtrInput {
	return (*templateLineChartSeriesSettingsPtrType)(v)
}

func (*templateLineChartSeriesSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartSeriesSettings)(nil)).Elem()
}

func (i *templateLineChartSeriesSettingsPtrType) ToTemplateLineChartSeriesSettingsPtrOutput() TemplateLineChartSeriesSettingsPtrOutput {
	return i.ToTemplateLineChartSeriesSettingsPtrOutputWithContext(context.Background())
}

func (i *templateLineChartSeriesSettingsPtrType) ToTemplateLineChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartSeriesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartSeriesSettingsPtrOutput)
}

type TemplateLineChartSeriesSettingsOutput struct{ *pulumi.OutputState }

func (TemplateLineChartSeriesSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartSeriesSettings)(nil)).Elem()
}

func (o TemplateLineChartSeriesSettingsOutput) ToTemplateLineChartSeriesSettingsOutput() TemplateLineChartSeriesSettingsOutput {
	return o
}

func (o TemplateLineChartSeriesSettingsOutput) ToTemplateLineChartSeriesSettingsOutputWithContext(ctx context.Context) TemplateLineChartSeriesSettingsOutput {
	return o
}

func (o TemplateLineChartSeriesSettingsOutput) ToTemplateLineChartSeriesSettingsPtrOutput() TemplateLineChartSeriesSettingsPtrOutput {
	return o.ToTemplateLineChartSeriesSettingsPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartSeriesSettingsOutput) ToTemplateLineChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartSeriesSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartSeriesSettings) *TemplateLineChartSeriesSettings {
		return &v
	}).(TemplateLineChartSeriesSettingsPtrOutput)
}

// Line styles options for a line series in `LineChartVisual` .
func (o TemplateLineChartSeriesSettingsOutput) LineStyleSettings() TemplateLineChartLineStyleSettingsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartSeriesSettings) *TemplateLineChartLineStyleSettings {
		return v.LineStyleSettings
	}).(TemplateLineChartLineStyleSettingsPtrOutput)
}

// Marker styles options for a line series in `LineChartVisual` .
func (o TemplateLineChartSeriesSettingsOutput) MarkerStyleSettings() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartSeriesSettings) *TemplateLineChartMarkerStyleSettings {
		return v.MarkerStyleSettings
	}).(TemplateLineChartMarkerStyleSettingsPtrOutput)
}

type TemplateLineChartSeriesSettingsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartSeriesSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartSeriesSettings)(nil)).Elem()
}

func (o TemplateLineChartSeriesSettingsPtrOutput) ToTemplateLineChartSeriesSettingsPtrOutput() TemplateLineChartSeriesSettingsPtrOutput {
	return o
}

func (o TemplateLineChartSeriesSettingsPtrOutput) ToTemplateLineChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateLineChartSeriesSettingsPtrOutput {
	return o
}

func (o TemplateLineChartSeriesSettingsPtrOutput) Elem() TemplateLineChartSeriesSettingsOutput {
	return o.ApplyT(func(v *TemplateLineChartSeriesSettings) TemplateLineChartSeriesSettings {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartSeriesSettings
		return ret
	}).(TemplateLineChartSeriesSettingsOutput)
}

// Line styles options for a line series in `LineChartVisual` .
func (o TemplateLineChartSeriesSettingsPtrOutput) LineStyleSettings() TemplateLineChartLineStyleSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartSeriesSettings) *TemplateLineChartLineStyleSettings {
		if v == nil {
			return nil
		}
		return v.LineStyleSettings
	}).(TemplateLineChartLineStyleSettingsPtrOutput)
}

// Marker styles options for a line series in `LineChartVisual` .
func (o TemplateLineChartSeriesSettingsPtrOutput) MarkerStyleSettings() TemplateLineChartMarkerStyleSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartSeriesSettings) *TemplateLineChartMarkerStyleSettings {
		if v == nil {
			return nil
		}
		return v.MarkerStyleSettings
	}).(TemplateLineChartMarkerStyleSettingsPtrOutput)
}

type TemplateLineChartSortConfiguration struct {
	// The limit on the number of categories that are displayed in a line chart.
	CategoryItemsLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimitConfiguration"`
	// The sort configuration of the category fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
	// The limit on the number of lines that are displayed in a line chart.
	ColorItemsLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"colorItemsLimitConfiguration"`
	// The limit on the number of small multiples panels that are displayed.
	SmallMultiplesLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"smallMultiplesLimitConfiguration"`
	// The sort configuration of the small multiples field.
	SmallMultiplesSort []TemplateFieldSortOptions `pulumi:"smallMultiplesSort"`
}

// TemplateLineChartSortConfigurationInput is an input type that accepts TemplateLineChartSortConfigurationArgs and TemplateLineChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateLineChartSortConfigurationInput` via:
//
//	TemplateLineChartSortConfigurationArgs{...}
type TemplateLineChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplateLineChartSortConfigurationOutput() TemplateLineChartSortConfigurationOutput
	ToTemplateLineChartSortConfigurationOutputWithContext(context.Context) TemplateLineChartSortConfigurationOutput
}

type TemplateLineChartSortConfigurationArgs struct {
	// The limit on the number of categories that are displayed in a line chart.
	CategoryItemsLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimitConfiguration"`
	// The sort configuration of the category fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
	// The limit on the number of lines that are displayed in a line chart.
	ColorItemsLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"colorItemsLimitConfiguration"`
	// The limit on the number of small multiples panels that are displayed.
	SmallMultiplesLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"smallMultiplesLimitConfiguration"`
	// The sort configuration of the small multiples field.
	SmallMultiplesSort TemplateFieldSortOptionsArrayInput `pulumi:"smallMultiplesSort"`
}

func (TemplateLineChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartSortConfiguration)(nil)).Elem()
}

func (i TemplateLineChartSortConfigurationArgs) ToTemplateLineChartSortConfigurationOutput() TemplateLineChartSortConfigurationOutput {
	return i.ToTemplateLineChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateLineChartSortConfigurationArgs) ToTemplateLineChartSortConfigurationOutputWithContext(ctx context.Context) TemplateLineChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartSortConfigurationOutput)
}

func (i TemplateLineChartSortConfigurationArgs) ToTemplateLineChartSortConfigurationPtrOutput() TemplateLineChartSortConfigurationPtrOutput {
	return i.ToTemplateLineChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartSortConfigurationArgs) ToTemplateLineChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartSortConfigurationOutput).ToTemplateLineChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateLineChartSortConfigurationPtrInput is an input type that accepts TemplateLineChartSortConfigurationArgs, TemplateLineChartSortConfigurationPtr and TemplateLineChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartSortConfigurationPtrInput` via:
//
//	        TemplateLineChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateLineChartSortConfigurationPtrOutput() TemplateLineChartSortConfigurationPtrOutput
	ToTemplateLineChartSortConfigurationPtrOutputWithContext(context.Context) TemplateLineChartSortConfigurationPtrOutput
}

type templateLineChartSortConfigurationPtrType TemplateLineChartSortConfigurationArgs

func TemplateLineChartSortConfigurationPtr(v *TemplateLineChartSortConfigurationArgs) TemplateLineChartSortConfigurationPtrInput {
	return (*templateLineChartSortConfigurationPtrType)(v)
}

func (*templateLineChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartSortConfiguration)(nil)).Elem()
}

func (i *templateLineChartSortConfigurationPtrType) ToTemplateLineChartSortConfigurationPtrOutput() TemplateLineChartSortConfigurationPtrOutput {
	return i.ToTemplateLineChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateLineChartSortConfigurationPtrType) ToTemplateLineChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartSortConfigurationPtrOutput)
}

type TemplateLineChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateLineChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartSortConfiguration)(nil)).Elem()
}

func (o TemplateLineChartSortConfigurationOutput) ToTemplateLineChartSortConfigurationOutput() TemplateLineChartSortConfigurationOutput {
	return o
}

func (o TemplateLineChartSortConfigurationOutput) ToTemplateLineChartSortConfigurationOutputWithContext(ctx context.Context) TemplateLineChartSortConfigurationOutput {
	return o
}

func (o TemplateLineChartSortConfigurationOutput) ToTemplateLineChartSortConfigurationPtrOutput() TemplateLineChartSortConfigurationPtrOutput {
	return o.ToTemplateLineChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartSortConfigurationOutput) ToTemplateLineChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartSortConfiguration) *TemplateLineChartSortConfiguration {
		return &v
	}).(TemplateLineChartSortConfigurationPtrOutput)
}

// The limit on the number of categories that are displayed in a line chart.
func (o TemplateLineChartSortConfigurationOutput) CategoryItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLineChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateLineChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateLineChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of lines that are displayed in a line chart.
func (o TemplateLineChartSortConfigurationOutput) ColorItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLineChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.ColorItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The limit on the number of small multiples panels that are displayed.
func (o TemplateLineChartSortConfigurationOutput) SmallMultiplesLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLineChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.SmallMultiplesLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the small multiples field.
func (o TemplateLineChartSortConfigurationOutput) SmallMultiplesSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateLineChartSortConfiguration) []TemplateFieldSortOptions { return v.SmallMultiplesSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateLineChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartSortConfiguration)(nil)).Elem()
}

func (o TemplateLineChartSortConfigurationPtrOutput) ToTemplateLineChartSortConfigurationPtrOutput() TemplateLineChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateLineChartSortConfigurationPtrOutput) ToTemplateLineChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateLineChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateLineChartSortConfigurationPtrOutput) Elem() TemplateLineChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateLineChartSortConfiguration) TemplateLineChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartSortConfiguration
		return ret
	}).(TemplateLineChartSortConfigurationOutput)
}

// The limit on the number of categories that are displayed in a line chart.
func (o TemplateLineChartSortConfigurationPtrOutput) CategoryItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateLineChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of lines that are displayed in a line chart.
func (o TemplateLineChartSortConfigurationPtrOutput) ColorItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The limit on the number of small multiples panels that are displayed.
func (o TemplateLineChartSortConfigurationPtrOutput) SmallMultiplesLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the small multiples field.
func (o TemplateLineChartSortConfigurationPtrOutput) SmallMultiplesSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateLineChartVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a line chart.
	ChartConfiguration *TemplateLineChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateLineChartVisualInput is an input type that accepts TemplateLineChartVisualArgs and TemplateLineChartVisualOutput values.
// You can construct a concrete instance of `TemplateLineChartVisualInput` via:
//
//	TemplateLineChartVisualArgs{...}
type TemplateLineChartVisualInput interface {
	pulumi.Input

	ToTemplateLineChartVisualOutput() TemplateLineChartVisualOutput
	ToTemplateLineChartVisualOutputWithContext(context.Context) TemplateLineChartVisualOutput
}

type TemplateLineChartVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a line chart.
	ChartConfiguration TemplateLineChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateLineChartVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartVisual)(nil)).Elem()
}

func (i TemplateLineChartVisualArgs) ToTemplateLineChartVisualOutput() TemplateLineChartVisualOutput {
	return i.ToTemplateLineChartVisualOutputWithContext(context.Background())
}

func (i TemplateLineChartVisualArgs) ToTemplateLineChartVisualOutputWithContext(ctx context.Context) TemplateLineChartVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartVisualOutput)
}

func (i TemplateLineChartVisualArgs) ToTemplateLineChartVisualPtrOutput() TemplateLineChartVisualPtrOutput {
	return i.ToTemplateLineChartVisualPtrOutputWithContext(context.Background())
}

func (i TemplateLineChartVisualArgs) ToTemplateLineChartVisualPtrOutputWithContext(ctx context.Context) TemplateLineChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartVisualOutput).ToTemplateLineChartVisualPtrOutputWithContext(ctx)
}

// TemplateLineChartVisualPtrInput is an input type that accepts TemplateLineChartVisualArgs, TemplateLineChartVisualPtr and TemplateLineChartVisualPtrOutput values.
// You can construct a concrete instance of `TemplateLineChartVisualPtrInput` via:
//
//	        TemplateLineChartVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateLineChartVisualPtrInput interface {
	pulumi.Input

	ToTemplateLineChartVisualPtrOutput() TemplateLineChartVisualPtrOutput
	ToTemplateLineChartVisualPtrOutputWithContext(context.Context) TemplateLineChartVisualPtrOutput
}

type templateLineChartVisualPtrType TemplateLineChartVisualArgs

func TemplateLineChartVisualPtr(v *TemplateLineChartVisualArgs) TemplateLineChartVisualPtrInput {
	return (*templateLineChartVisualPtrType)(v)
}

func (*templateLineChartVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartVisual)(nil)).Elem()
}

func (i *templateLineChartVisualPtrType) ToTemplateLineChartVisualPtrOutput() TemplateLineChartVisualPtrOutput {
	return i.ToTemplateLineChartVisualPtrOutputWithContext(context.Background())
}

func (i *templateLineChartVisualPtrType) ToTemplateLineChartVisualPtrOutputWithContext(ctx context.Context) TemplateLineChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineChartVisualPtrOutput)
}

type TemplateLineChartVisualOutput struct{ *pulumi.OutputState }

func (TemplateLineChartVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineChartVisual)(nil)).Elem()
}

func (o TemplateLineChartVisualOutput) ToTemplateLineChartVisualOutput() TemplateLineChartVisualOutput {
	return o
}

func (o TemplateLineChartVisualOutput) ToTemplateLineChartVisualOutputWithContext(ctx context.Context) TemplateLineChartVisualOutput {
	return o
}

func (o TemplateLineChartVisualOutput) ToTemplateLineChartVisualPtrOutput() TemplateLineChartVisualPtrOutput {
	return o.ToTemplateLineChartVisualPtrOutputWithContext(context.Background())
}

func (o TemplateLineChartVisualOutput) ToTemplateLineChartVisualPtrOutputWithContext(ctx context.Context) TemplateLineChartVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineChartVisual) *TemplateLineChartVisual {
		return &v
	}).(TemplateLineChartVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateLineChartVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateLineChartVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a line chart.
func (o TemplateLineChartVisualOutput) ChartConfiguration() TemplateLineChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateLineChartVisual) *TemplateLineChartConfiguration { return v.ChartConfiguration }).(TemplateLineChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateLineChartVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateLineChartVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateLineChartVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateLineChartVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineChartVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateLineChartVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLineChartVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateLineChartVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateLineChartVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateLineChartVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineChartVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineChartVisual)(nil)).Elem()
}

func (o TemplateLineChartVisualPtrOutput) ToTemplateLineChartVisualPtrOutput() TemplateLineChartVisualPtrOutput {
	return o
}

func (o TemplateLineChartVisualPtrOutput) ToTemplateLineChartVisualPtrOutputWithContext(ctx context.Context) TemplateLineChartVisualPtrOutput {
	return o
}

func (o TemplateLineChartVisualPtrOutput) Elem() TemplateLineChartVisualOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) TemplateLineChartVisual {
		if v != nil {
			return *v
		}
		var ret TemplateLineChartVisual
		return ret
	}).(TemplateLineChartVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateLineChartVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a line chart.
func (o TemplateLineChartVisualPtrOutput) ChartConfiguration() TemplateLineChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) *TemplateLineChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateLineChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateLineChartVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateLineChartVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateLineChartVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateLineChartVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateLineChartVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLineChartVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateLineSeriesAxisDisplayOptions struct {
	// The options that determine the presentation of the line series axis.
	AxisOptions *TemplateAxisDisplayOptions `pulumi:"axisOptions"`
	// The configuration options that determine how missing data is treated during the rendering of a line chart.
	MissingDataConfigurations []TemplateMissingDataConfiguration `pulumi:"missingDataConfigurations"`
}

// TemplateLineSeriesAxisDisplayOptionsInput is an input type that accepts TemplateLineSeriesAxisDisplayOptionsArgs and TemplateLineSeriesAxisDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateLineSeriesAxisDisplayOptionsInput` via:
//
//	TemplateLineSeriesAxisDisplayOptionsArgs{...}
type TemplateLineSeriesAxisDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateLineSeriesAxisDisplayOptionsOutput() TemplateLineSeriesAxisDisplayOptionsOutput
	ToTemplateLineSeriesAxisDisplayOptionsOutputWithContext(context.Context) TemplateLineSeriesAxisDisplayOptionsOutput
}

type TemplateLineSeriesAxisDisplayOptionsArgs struct {
	// The options that determine the presentation of the line series axis.
	AxisOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"axisOptions"`
	// The configuration options that determine how missing data is treated during the rendering of a line chart.
	MissingDataConfigurations TemplateMissingDataConfigurationArrayInput `pulumi:"missingDataConfigurations"`
}

func (TemplateLineSeriesAxisDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineSeriesAxisDisplayOptions)(nil)).Elem()
}

func (i TemplateLineSeriesAxisDisplayOptionsArgs) ToTemplateLineSeriesAxisDisplayOptionsOutput() TemplateLineSeriesAxisDisplayOptionsOutput {
	return i.ToTemplateLineSeriesAxisDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateLineSeriesAxisDisplayOptionsArgs) ToTemplateLineSeriesAxisDisplayOptionsOutputWithContext(ctx context.Context) TemplateLineSeriesAxisDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineSeriesAxisDisplayOptionsOutput)
}

func (i TemplateLineSeriesAxisDisplayOptionsArgs) ToTemplateLineSeriesAxisDisplayOptionsPtrOutput() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return i.ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateLineSeriesAxisDisplayOptionsArgs) ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineSeriesAxisDisplayOptionsOutput).ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateLineSeriesAxisDisplayOptionsPtrInput is an input type that accepts TemplateLineSeriesAxisDisplayOptionsArgs, TemplateLineSeriesAxisDisplayOptionsPtr and TemplateLineSeriesAxisDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateLineSeriesAxisDisplayOptionsPtrInput` via:
//
//	        TemplateLineSeriesAxisDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateLineSeriesAxisDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateLineSeriesAxisDisplayOptionsPtrOutput() TemplateLineSeriesAxisDisplayOptionsPtrOutput
	ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(context.Context) TemplateLineSeriesAxisDisplayOptionsPtrOutput
}

type templateLineSeriesAxisDisplayOptionsPtrType TemplateLineSeriesAxisDisplayOptionsArgs

func TemplateLineSeriesAxisDisplayOptionsPtr(v *TemplateLineSeriesAxisDisplayOptionsArgs) TemplateLineSeriesAxisDisplayOptionsPtrInput {
	return (*templateLineSeriesAxisDisplayOptionsPtrType)(v)
}

func (*templateLineSeriesAxisDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineSeriesAxisDisplayOptions)(nil)).Elem()
}

func (i *templateLineSeriesAxisDisplayOptionsPtrType) ToTemplateLineSeriesAxisDisplayOptionsPtrOutput() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return i.ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateLineSeriesAxisDisplayOptionsPtrType) ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLineSeriesAxisDisplayOptionsPtrOutput)
}

type TemplateLineSeriesAxisDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateLineSeriesAxisDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLineSeriesAxisDisplayOptions)(nil)).Elem()
}

func (o TemplateLineSeriesAxisDisplayOptionsOutput) ToTemplateLineSeriesAxisDisplayOptionsOutput() TemplateLineSeriesAxisDisplayOptionsOutput {
	return o
}

func (o TemplateLineSeriesAxisDisplayOptionsOutput) ToTemplateLineSeriesAxisDisplayOptionsOutputWithContext(ctx context.Context) TemplateLineSeriesAxisDisplayOptionsOutput {
	return o
}

func (o TemplateLineSeriesAxisDisplayOptionsOutput) ToTemplateLineSeriesAxisDisplayOptionsPtrOutput() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o.ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateLineSeriesAxisDisplayOptionsOutput) ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLineSeriesAxisDisplayOptions) *TemplateLineSeriesAxisDisplayOptions {
		return &v
	}).(TemplateLineSeriesAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the line series axis.
func (o TemplateLineSeriesAxisDisplayOptionsOutput) AxisOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateLineSeriesAxisDisplayOptions) *TemplateAxisDisplayOptions { return v.AxisOptions }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The configuration options that determine how missing data is treated during the rendering of a line chart.
func (o TemplateLineSeriesAxisDisplayOptionsOutput) MissingDataConfigurations() TemplateMissingDataConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateLineSeriesAxisDisplayOptions) []TemplateMissingDataConfiguration {
		return v.MissingDataConfigurations
	}).(TemplateMissingDataConfigurationArrayOutput)
}

type TemplateLineSeriesAxisDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateLineSeriesAxisDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLineSeriesAxisDisplayOptions)(nil)).Elem()
}

func (o TemplateLineSeriesAxisDisplayOptionsPtrOutput) ToTemplateLineSeriesAxisDisplayOptionsPtrOutput() TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o
}

func (o TemplateLineSeriesAxisDisplayOptionsPtrOutput) ToTemplateLineSeriesAxisDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateLineSeriesAxisDisplayOptionsPtrOutput {
	return o
}

func (o TemplateLineSeriesAxisDisplayOptionsPtrOutput) Elem() TemplateLineSeriesAxisDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateLineSeriesAxisDisplayOptions) TemplateLineSeriesAxisDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateLineSeriesAxisDisplayOptions
		return ret
	}).(TemplateLineSeriesAxisDisplayOptionsOutput)
}

// The options that determine the presentation of the line series axis.
func (o TemplateLineSeriesAxisDisplayOptionsPtrOutput) AxisOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateLineSeriesAxisDisplayOptions) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.AxisOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The configuration options that determine how missing data is treated during the rendering of a line chart.
func (o TemplateLineSeriesAxisDisplayOptionsPtrOutput) MissingDataConfigurations() TemplateMissingDataConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateLineSeriesAxisDisplayOptions) []TemplateMissingDataConfiguration {
		if v == nil {
			return nil
		}
		return v.MissingDataConfigurations
	}).(TemplateMissingDataConfigurationArrayOutput)
}

type TemplateListControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the search options in a list control.
	SearchOptions *TemplateListControlSearchOptions `pulumi:"searchOptions"`
	// The configuration of the `Select all` options in a list control.
	SelectAllOptions *TemplateListControlSelectAllOptions `pulumi:"selectAllOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateListControlDisplayOptionsInput is an input type that accepts TemplateListControlDisplayOptionsArgs and TemplateListControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateListControlDisplayOptionsInput` via:
//
//	TemplateListControlDisplayOptionsArgs{...}
type TemplateListControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateListControlDisplayOptionsOutput() TemplateListControlDisplayOptionsOutput
	ToTemplateListControlDisplayOptionsOutputWithContext(context.Context) TemplateListControlDisplayOptionsOutput
}

type TemplateListControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the search options in a list control.
	SearchOptions TemplateListControlSearchOptionsPtrInput `pulumi:"searchOptions"`
	// The configuration of the `Select all` options in a list control.
	SelectAllOptions TemplateListControlSelectAllOptionsPtrInput `pulumi:"selectAllOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateListControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateListControlDisplayOptions)(nil)).Elem()
}

func (i TemplateListControlDisplayOptionsArgs) ToTemplateListControlDisplayOptionsOutput() TemplateListControlDisplayOptionsOutput {
	return i.ToTemplateListControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateListControlDisplayOptionsArgs) ToTemplateListControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateListControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlDisplayOptionsOutput)
}

func (i TemplateListControlDisplayOptionsArgs) ToTemplateListControlDisplayOptionsPtrOutput() TemplateListControlDisplayOptionsPtrOutput {
	return i.ToTemplateListControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateListControlDisplayOptionsArgs) ToTemplateListControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlDisplayOptionsOutput).ToTemplateListControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateListControlDisplayOptionsPtrInput is an input type that accepts TemplateListControlDisplayOptionsArgs, TemplateListControlDisplayOptionsPtr and TemplateListControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateListControlDisplayOptionsPtrInput` via:
//
//	        TemplateListControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateListControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateListControlDisplayOptionsPtrOutput() TemplateListControlDisplayOptionsPtrOutput
	ToTemplateListControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateListControlDisplayOptionsPtrOutput
}

type templateListControlDisplayOptionsPtrType TemplateListControlDisplayOptionsArgs

func TemplateListControlDisplayOptionsPtr(v *TemplateListControlDisplayOptionsArgs) TemplateListControlDisplayOptionsPtrInput {
	return (*templateListControlDisplayOptionsPtrType)(v)
}

func (*templateListControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateListControlDisplayOptions)(nil)).Elem()
}

func (i *templateListControlDisplayOptionsPtrType) ToTemplateListControlDisplayOptionsPtrOutput() TemplateListControlDisplayOptionsPtrOutput {
	return i.ToTemplateListControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateListControlDisplayOptionsPtrType) ToTemplateListControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlDisplayOptionsPtrOutput)
}

type TemplateListControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateListControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateListControlDisplayOptions)(nil)).Elem()
}

func (o TemplateListControlDisplayOptionsOutput) ToTemplateListControlDisplayOptionsOutput() TemplateListControlDisplayOptionsOutput {
	return o
}

func (o TemplateListControlDisplayOptionsOutput) ToTemplateListControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateListControlDisplayOptionsOutput {
	return o
}

func (o TemplateListControlDisplayOptionsOutput) ToTemplateListControlDisplayOptionsPtrOutput() TemplateListControlDisplayOptionsPtrOutput {
	return o.ToTemplateListControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateListControlDisplayOptionsOutput) ToTemplateListControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateListControlDisplayOptions) *TemplateListControlDisplayOptions {
		return &v
	}).(TemplateListControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateListControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateListControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the search options in a list control.
func (o TemplateListControlDisplayOptionsOutput) SearchOptions() TemplateListControlSearchOptionsPtrOutput {
	return o.ApplyT(func(v TemplateListControlDisplayOptions) *TemplateListControlSearchOptions { return v.SearchOptions }).(TemplateListControlSearchOptionsPtrOutput)
}

// The configuration of the `Select all` options in a list control.
func (o TemplateListControlDisplayOptionsOutput) SelectAllOptions() TemplateListControlSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v TemplateListControlDisplayOptions) *TemplateListControlSelectAllOptions {
		return v.SelectAllOptions
	}).(TemplateListControlSelectAllOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateListControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateListControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateListControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateListControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateListControlDisplayOptions)(nil)).Elem()
}

func (o TemplateListControlDisplayOptionsPtrOutput) ToTemplateListControlDisplayOptionsPtrOutput() TemplateListControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateListControlDisplayOptionsPtrOutput) ToTemplateListControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateListControlDisplayOptionsPtrOutput) Elem() TemplateListControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateListControlDisplayOptions) TemplateListControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateListControlDisplayOptions
		return ret
	}).(TemplateListControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o TemplateListControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateListControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the search options in a list control.
func (o TemplateListControlDisplayOptionsPtrOutput) SearchOptions() TemplateListControlSearchOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateListControlDisplayOptions) *TemplateListControlSearchOptions {
		if v == nil {
			return nil
		}
		return v.SearchOptions
	}).(TemplateListControlSearchOptionsPtrOutput)
}

// The configuration of the `Select all` options in a list control.
func (o TemplateListControlDisplayOptionsPtrOutput) SelectAllOptions() TemplateListControlSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateListControlDisplayOptions) *TemplateListControlSelectAllOptions {
		if v == nil {
			return nil
		}
		return v.SelectAllOptions
	}).(TemplateListControlSelectAllOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateListControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateListControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateListControlSearchOptions struct {
	// The visibility configuration of the search options in a list control.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateListControlSearchOptionsInput is an input type that accepts TemplateListControlSearchOptionsArgs and TemplateListControlSearchOptionsOutput values.
// You can construct a concrete instance of `TemplateListControlSearchOptionsInput` via:
//
//	TemplateListControlSearchOptionsArgs{...}
type TemplateListControlSearchOptionsInput interface {
	pulumi.Input

	ToTemplateListControlSearchOptionsOutput() TemplateListControlSearchOptionsOutput
	ToTemplateListControlSearchOptionsOutputWithContext(context.Context) TemplateListControlSearchOptionsOutput
}

type TemplateListControlSearchOptionsArgs struct {
	// The visibility configuration of the search options in a list control.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateListControlSearchOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateListControlSearchOptions)(nil)).Elem()
}

func (i TemplateListControlSearchOptionsArgs) ToTemplateListControlSearchOptionsOutput() TemplateListControlSearchOptionsOutput {
	return i.ToTemplateListControlSearchOptionsOutputWithContext(context.Background())
}

func (i TemplateListControlSearchOptionsArgs) ToTemplateListControlSearchOptionsOutputWithContext(ctx context.Context) TemplateListControlSearchOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlSearchOptionsOutput)
}

func (i TemplateListControlSearchOptionsArgs) ToTemplateListControlSearchOptionsPtrOutput() TemplateListControlSearchOptionsPtrOutput {
	return i.ToTemplateListControlSearchOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateListControlSearchOptionsArgs) ToTemplateListControlSearchOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSearchOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlSearchOptionsOutput).ToTemplateListControlSearchOptionsPtrOutputWithContext(ctx)
}

// TemplateListControlSearchOptionsPtrInput is an input type that accepts TemplateListControlSearchOptionsArgs, TemplateListControlSearchOptionsPtr and TemplateListControlSearchOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateListControlSearchOptionsPtrInput` via:
//
//	        TemplateListControlSearchOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateListControlSearchOptionsPtrInput interface {
	pulumi.Input

	ToTemplateListControlSearchOptionsPtrOutput() TemplateListControlSearchOptionsPtrOutput
	ToTemplateListControlSearchOptionsPtrOutputWithContext(context.Context) TemplateListControlSearchOptionsPtrOutput
}

type templateListControlSearchOptionsPtrType TemplateListControlSearchOptionsArgs

func TemplateListControlSearchOptionsPtr(v *TemplateListControlSearchOptionsArgs) TemplateListControlSearchOptionsPtrInput {
	return (*templateListControlSearchOptionsPtrType)(v)
}

func (*templateListControlSearchOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateListControlSearchOptions)(nil)).Elem()
}

func (i *templateListControlSearchOptionsPtrType) ToTemplateListControlSearchOptionsPtrOutput() TemplateListControlSearchOptionsPtrOutput {
	return i.ToTemplateListControlSearchOptionsPtrOutputWithContext(context.Background())
}

func (i *templateListControlSearchOptionsPtrType) ToTemplateListControlSearchOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSearchOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlSearchOptionsPtrOutput)
}

type TemplateListControlSearchOptionsOutput struct{ *pulumi.OutputState }

func (TemplateListControlSearchOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateListControlSearchOptions)(nil)).Elem()
}

func (o TemplateListControlSearchOptionsOutput) ToTemplateListControlSearchOptionsOutput() TemplateListControlSearchOptionsOutput {
	return o
}

func (o TemplateListControlSearchOptionsOutput) ToTemplateListControlSearchOptionsOutputWithContext(ctx context.Context) TemplateListControlSearchOptionsOutput {
	return o
}

func (o TemplateListControlSearchOptionsOutput) ToTemplateListControlSearchOptionsPtrOutput() TemplateListControlSearchOptionsPtrOutput {
	return o.ToTemplateListControlSearchOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateListControlSearchOptionsOutput) ToTemplateListControlSearchOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSearchOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateListControlSearchOptions) *TemplateListControlSearchOptions {
		return &v
	}).(TemplateListControlSearchOptionsPtrOutput)
}

// The visibility configuration of the search options in a list control.
func (o TemplateListControlSearchOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateListControlSearchOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateListControlSearchOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateListControlSearchOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateListControlSearchOptions)(nil)).Elem()
}

func (o TemplateListControlSearchOptionsPtrOutput) ToTemplateListControlSearchOptionsPtrOutput() TemplateListControlSearchOptionsPtrOutput {
	return o
}

func (o TemplateListControlSearchOptionsPtrOutput) ToTemplateListControlSearchOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSearchOptionsPtrOutput {
	return o
}

func (o TemplateListControlSearchOptionsPtrOutput) Elem() TemplateListControlSearchOptionsOutput {
	return o.ApplyT(func(v *TemplateListControlSearchOptions) TemplateListControlSearchOptions {
		if v != nil {
			return *v
		}
		var ret TemplateListControlSearchOptions
		return ret
	}).(TemplateListControlSearchOptionsOutput)
}

// The visibility configuration of the search options in a list control.
func (o TemplateListControlSearchOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateListControlSearchOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateListControlSelectAllOptions struct {
	// The visibility configuration of the `Select all` options in a list control.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateListControlSelectAllOptionsInput is an input type that accepts TemplateListControlSelectAllOptionsArgs and TemplateListControlSelectAllOptionsOutput values.
// You can construct a concrete instance of `TemplateListControlSelectAllOptionsInput` via:
//
//	TemplateListControlSelectAllOptionsArgs{...}
type TemplateListControlSelectAllOptionsInput interface {
	pulumi.Input

	ToTemplateListControlSelectAllOptionsOutput() TemplateListControlSelectAllOptionsOutput
	ToTemplateListControlSelectAllOptionsOutputWithContext(context.Context) TemplateListControlSelectAllOptionsOutput
}

type TemplateListControlSelectAllOptionsArgs struct {
	// The visibility configuration of the `Select all` options in a list control.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateListControlSelectAllOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateListControlSelectAllOptions)(nil)).Elem()
}

func (i TemplateListControlSelectAllOptionsArgs) ToTemplateListControlSelectAllOptionsOutput() TemplateListControlSelectAllOptionsOutput {
	return i.ToTemplateListControlSelectAllOptionsOutputWithContext(context.Background())
}

func (i TemplateListControlSelectAllOptionsArgs) ToTemplateListControlSelectAllOptionsOutputWithContext(ctx context.Context) TemplateListControlSelectAllOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlSelectAllOptionsOutput)
}

func (i TemplateListControlSelectAllOptionsArgs) ToTemplateListControlSelectAllOptionsPtrOutput() TemplateListControlSelectAllOptionsPtrOutput {
	return i.ToTemplateListControlSelectAllOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateListControlSelectAllOptionsArgs) ToTemplateListControlSelectAllOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSelectAllOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlSelectAllOptionsOutput).ToTemplateListControlSelectAllOptionsPtrOutputWithContext(ctx)
}

// TemplateListControlSelectAllOptionsPtrInput is an input type that accepts TemplateListControlSelectAllOptionsArgs, TemplateListControlSelectAllOptionsPtr and TemplateListControlSelectAllOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateListControlSelectAllOptionsPtrInput` via:
//
//	        TemplateListControlSelectAllOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateListControlSelectAllOptionsPtrInput interface {
	pulumi.Input

	ToTemplateListControlSelectAllOptionsPtrOutput() TemplateListControlSelectAllOptionsPtrOutput
	ToTemplateListControlSelectAllOptionsPtrOutputWithContext(context.Context) TemplateListControlSelectAllOptionsPtrOutput
}

type templateListControlSelectAllOptionsPtrType TemplateListControlSelectAllOptionsArgs

func TemplateListControlSelectAllOptionsPtr(v *TemplateListControlSelectAllOptionsArgs) TemplateListControlSelectAllOptionsPtrInput {
	return (*templateListControlSelectAllOptionsPtrType)(v)
}

func (*templateListControlSelectAllOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateListControlSelectAllOptions)(nil)).Elem()
}

func (i *templateListControlSelectAllOptionsPtrType) ToTemplateListControlSelectAllOptionsPtrOutput() TemplateListControlSelectAllOptionsPtrOutput {
	return i.ToTemplateListControlSelectAllOptionsPtrOutputWithContext(context.Background())
}

func (i *templateListControlSelectAllOptionsPtrType) ToTemplateListControlSelectAllOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSelectAllOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateListControlSelectAllOptionsPtrOutput)
}

type TemplateListControlSelectAllOptionsOutput struct{ *pulumi.OutputState }

func (TemplateListControlSelectAllOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateListControlSelectAllOptions)(nil)).Elem()
}

func (o TemplateListControlSelectAllOptionsOutput) ToTemplateListControlSelectAllOptionsOutput() TemplateListControlSelectAllOptionsOutput {
	return o
}

func (o TemplateListControlSelectAllOptionsOutput) ToTemplateListControlSelectAllOptionsOutputWithContext(ctx context.Context) TemplateListControlSelectAllOptionsOutput {
	return o
}

func (o TemplateListControlSelectAllOptionsOutput) ToTemplateListControlSelectAllOptionsPtrOutput() TemplateListControlSelectAllOptionsPtrOutput {
	return o.ToTemplateListControlSelectAllOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateListControlSelectAllOptionsOutput) ToTemplateListControlSelectAllOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSelectAllOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateListControlSelectAllOptions) *TemplateListControlSelectAllOptions {
		return &v
	}).(TemplateListControlSelectAllOptionsPtrOutput)
}

// The visibility configuration of the `Select all` options in a list control.
func (o TemplateListControlSelectAllOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateListControlSelectAllOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateListControlSelectAllOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateListControlSelectAllOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateListControlSelectAllOptions)(nil)).Elem()
}

func (o TemplateListControlSelectAllOptionsPtrOutput) ToTemplateListControlSelectAllOptionsPtrOutput() TemplateListControlSelectAllOptionsPtrOutput {
	return o
}

func (o TemplateListControlSelectAllOptionsPtrOutput) ToTemplateListControlSelectAllOptionsPtrOutputWithContext(ctx context.Context) TemplateListControlSelectAllOptionsPtrOutput {
	return o
}

func (o TemplateListControlSelectAllOptionsPtrOutput) Elem() TemplateListControlSelectAllOptionsOutput {
	return o.ApplyT(func(v *TemplateListControlSelectAllOptions) TemplateListControlSelectAllOptions {
		if v != nil {
			return *v
		}
		var ret TemplateListControlSelectAllOptions
		return ret
	}).(TemplateListControlSelectAllOptionsOutput)
}

// The visibility configuration of the `Select all` options in a list control.
func (o TemplateListControlSelectAllOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateListControlSelectAllOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateLoadingAnimation struct {
	// The visibility configuration of `LoadingAnimation` .
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateLoadingAnimationInput is an input type that accepts TemplateLoadingAnimationArgs and TemplateLoadingAnimationOutput values.
// You can construct a concrete instance of `TemplateLoadingAnimationInput` via:
//
//	TemplateLoadingAnimationArgs{...}
type TemplateLoadingAnimationInput interface {
	pulumi.Input

	ToTemplateLoadingAnimationOutput() TemplateLoadingAnimationOutput
	ToTemplateLoadingAnimationOutputWithContext(context.Context) TemplateLoadingAnimationOutput
}

type TemplateLoadingAnimationArgs struct {
	// The visibility configuration of `LoadingAnimation` .
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateLoadingAnimationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLoadingAnimation)(nil)).Elem()
}

func (i TemplateLoadingAnimationArgs) ToTemplateLoadingAnimationOutput() TemplateLoadingAnimationOutput {
	return i.ToTemplateLoadingAnimationOutputWithContext(context.Background())
}

func (i TemplateLoadingAnimationArgs) ToTemplateLoadingAnimationOutputWithContext(ctx context.Context) TemplateLoadingAnimationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLoadingAnimationOutput)
}

func (i TemplateLoadingAnimationArgs) ToTemplateLoadingAnimationPtrOutput() TemplateLoadingAnimationPtrOutput {
	return i.ToTemplateLoadingAnimationPtrOutputWithContext(context.Background())
}

func (i TemplateLoadingAnimationArgs) ToTemplateLoadingAnimationPtrOutputWithContext(ctx context.Context) TemplateLoadingAnimationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLoadingAnimationOutput).ToTemplateLoadingAnimationPtrOutputWithContext(ctx)
}

// TemplateLoadingAnimationPtrInput is an input type that accepts TemplateLoadingAnimationArgs, TemplateLoadingAnimationPtr and TemplateLoadingAnimationPtrOutput values.
// You can construct a concrete instance of `TemplateLoadingAnimationPtrInput` via:
//
//	        TemplateLoadingAnimationArgs{...}
//
//	or:
//
//	        nil
type TemplateLoadingAnimationPtrInput interface {
	pulumi.Input

	ToTemplateLoadingAnimationPtrOutput() TemplateLoadingAnimationPtrOutput
	ToTemplateLoadingAnimationPtrOutputWithContext(context.Context) TemplateLoadingAnimationPtrOutput
}

type templateLoadingAnimationPtrType TemplateLoadingAnimationArgs

func TemplateLoadingAnimationPtr(v *TemplateLoadingAnimationArgs) TemplateLoadingAnimationPtrInput {
	return (*templateLoadingAnimationPtrType)(v)
}

func (*templateLoadingAnimationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLoadingAnimation)(nil)).Elem()
}

func (i *templateLoadingAnimationPtrType) ToTemplateLoadingAnimationPtrOutput() TemplateLoadingAnimationPtrOutput {
	return i.ToTemplateLoadingAnimationPtrOutputWithContext(context.Background())
}

func (i *templateLoadingAnimationPtrType) ToTemplateLoadingAnimationPtrOutputWithContext(ctx context.Context) TemplateLoadingAnimationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLoadingAnimationPtrOutput)
}

type TemplateLoadingAnimationOutput struct{ *pulumi.OutputState }

func (TemplateLoadingAnimationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLoadingAnimation)(nil)).Elem()
}

func (o TemplateLoadingAnimationOutput) ToTemplateLoadingAnimationOutput() TemplateLoadingAnimationOutput {
	return o
}

func (o TemplateLoadingAnimationOutput) ToTemplateLoadingAnimationOutputWithContext(ctx context.Context) TemplateLoadingAnimationOutput {
	return o
}

func (o TemplateLoadingAnimationOutput) ToTemplateLoadingAnimationPtrOutput() TemplateLoadingAnimationPtrOutput {
	return o.ToTemplateLoadingAnimationPtrOutputWithContext(context.Background())
}

func (o TemplateLoadingAnimationOutput) ToTemplateLoadingAnimationPtrOutputWithContext(ctx context.Context) TemplateLoadingAnimationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLoadingAnimation) *TemplateLoadingAnimation {
		return &v
	}).(TemplateLoadingAnimationPtrOutput)
}

// The visibility configuration of `LoadingAnimation` .
func (o TemplateLoadingAnimationOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateLoadingAnimation) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateLoadingAnimationPtrOutput struct{ *pulumi.OutputState }

func (TemplateLoadingAnimationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLoadingAnimation)(nil)).Elem()
}

func (o TemplateLoadingAnimationPtrOutput) ToTemplateLoadingAnimationPtrOutput() TemplateLoadingAnimationPtrOutput {
	return o
}

func (o TemplateLoadingAnimationPtrOutput) ToTemplateLoadingAnimationPtrOutputWithContext(ctx context.Context) TemplateLoadingAnimationPtrOutput {
	return o
}

func (o TemplateLoadingAnimationPtrOutput) Elem() TemplateLoadingAnimationOutput {
	return o.ApplyT(func(v *TemplateLoadingAnimation) TemplateLoadingAnimation {
		if v != nil {
			return *v
		}
		var ret TemplateLoadingAnimation
		return ret
	}).(TemplateLoadingAnimationOutput)
}

// The visibility configuration of `LoadingAnimation` .
func (o TemplateLoadingAnimationPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateLoadingAnimation) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateLocalNavigationConfiguration struct {
	// The sheet that is targeted for navigation in the same analysis.
	TargetSheetId string `pulumi:"targetSheetId"`
}

// TemplateLocalNavigationConfigurationInput is an input type that accepts TemplateLocalNavigationConfigurationArgs and TemplateLocalNavigationConfigurationOutput values.
// You can construct a concrete instance of `TemplateLocalNavigationConfigurationInput` via:
//
//	TemplateLocalNavigationConfigurationArgs{...}
type TemplateLocalNavigationConfigurationInput interface {
	pulumi.Input

	ToTemplateLocalNavigationConfigurationOutput() TemplateLocalNavigationConfigurationOutput
	ToTemplateLocalNavigationConfigurationOutputWithContext(context.Context) TemplateLocalNavigationConfigurationOutput
}

type TemplateLocalNavigationConfigurationArgs struct {
	// The sheet that is targeted for navigation in the same analysis.
	TargetSheetId pulumi.StringInput `pulumi:"targetSheetId"`
}

func (TemplateLocalNavigationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLocalNavigationConfiguration)(nil)).Elem()
}

func (i TemplateLocalNavigationConfigurationArgs) ToTemplateLocalNavigationConfigurationOutput() TemplateLocalNavigationConfigurationOutput {
	return i.ToTemplateLocalNavigationConfigurationOutputWithContext(context.Background())
}

func (i TemplateLocalNavigationConfigurationArgs) ToTemplateLocalNavigationConfigurationOutputWithContext(ctx context.Context) TemplateLocalNavigationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLocalNavigationConfigurationOutput)
}

func (i TemplateLocalNavigationConfigurationArgs) ToTemplateLocalNavigationConfigurationPtrOutput() TemplateLocalNavigationConfigurationPtrOutput {
	return i.ToTemplateLocalNavigationConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateLocalNavigationConfigurationArgs) ToTemplateLocalNavigationConfigurationPtrOutputWithContext(ctx context.Context) TemplateLocalNavigationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLocalNavigationConfigurationOutput).ToTemplateLocalNavigationConfigurationPtrOutputWithContext(ctx)
}

// TemplateLocalNavigationConfigurationPtrInput is an input type that accepts TemplateLocalNavigationConfigurationArgs, TemplateLocalNavigationConfigurationPtr and TemplateLocalNavigationConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateLocalNavigationConfigurationPtrInput` via:
//
//	        TemplateLocalNavigationConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateLocalNavigationConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateLocalNavigationConfigurationPtrOutput() TemplateLocalNavigationConfigurationPtrOutput
	ToTemplateLocalNavigationConfigurationPtrOutputWithContext(context.Context) TemplateLocalNavigationConfigurationPtrOutput
}

type templateLocalNavigationConfigurationPtrType TemplateLocalNavigationConfigurationArgs

func TemplateLocalNavigationConfigurationPtr(v *TemplateLocalNavigationConfigurationArgs) TemplateLocalNavigationConfigurationPtrInput {
	return (*templateLocalNavigationConfigurationPtrType)(v)
}

func (*templateLocalNavigationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLocalNavigationConfiguration)(nil)).Elem()
}

func (i *templateLocalNavigationConfigurationPtrType) ToTemplateLocalNavigationConfigurationPtrOutput() TemplateLocalNavigationConfigurationPtrOutput {
	return i.ToTemplateLocalNavigationConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateLocalNavigationConfigurationPtrType) ToTemplateLocalNavigationConfigurationPtrOutputWithContext(ctx context.Context) TemplateLocalNavigationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLocalNavigationConfigurationPtrOutput)
}

type TemplateLocalNavigationConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateLocalNavigationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLocalNavigationConfiguration)(nil)).Elem()
}

func (o TemplateLocalNavigationConfigurationOutput) ToTemplateLocalNavigationConfigurationOutput() TemplateLocalNavigationConfigurationOutput {
	return o
}

func (o TemplateLocalNavigationConfigurationOutput) ToTemplateLocalNavigationConfigurationOutputWithContext(ctx context.Context) TemplateLocalNavigationConfigurationOutput {
	return o
}

func (o TemplateLocalNavigationConfigurationOutput) ToTemplateLocalNavigationConfigurationPtrOutput() TemplateLocalNavigationConfigurationPtrOutput {
	return o.ToTemplateLocalNavigationConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateLocalNavigationConfigurationOutput) ToTemplateLocalNavigationConfigurationPtrOutputWithContext(ctx context.Context) TemplateLocalNavigationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLocalNavigationConfiguration) *TemplateLocalNavigationConfiguration {
		return &v
	}).(TemplateLocalNavigationConfigurationPtrOutput)
}

// The sheet that is targeted for navigation in the same analysis.
func (o TemplateLocalNavigationConfigurationOutput) TargetSheetId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateLocalNavigationConfiguration) string { return v.TargetSheetId }).(pulumi.StringOutput)
}

type TemplateLocalNavigationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateLocalNavigationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLocalNavigationConfiguration)(nil)).Elem()
}

func (o TemplateLocalNavigationConfigurationPtrOutput) ToTemplateLocalNavigationConfigurationPtrOutput() TemplateLocalNavigationConfigurationPtrOutput {
	return o
}

func (o TemplateLocalNavigationConfigurationPtrOutput) ToTemplateLocalNavigationConfigurationPtrOutputWithContext(ctx context.Context) TemplateLocalNavigationConfigurationPtrOutput {
	return o
}

func (o TemplateLocalNavigationConfigurationPtrOutput) Elem() TemplateLocalNavigationConfigurationOutput {
	return o.ApplyT(func(v *TemplateLocalNavigationConfiguration) TemplateLocalNavigationConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateLocalNavigationConfiguration
		return ret
	}).(TemplateLocalNavigationConfigurationOutput)
}

// The sheet that is targeted for navigation in the same analysis.
func (o TemplateLocalNavigationConfigurationPtrOutput) TargetSheetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLocalNavigationConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.TargetSheetId
	}).(pulumi.StringPtrOutput)
}

type TemplateLongFormatText struct {
	// Plain text format.
	PlainText *string `pulumi:"plainText"`
	// Rich text. Examples of rich text include bold, underline, and italics.
	RichText *string `pulumi:"richText"`
}

// TemplateLongFormatTextInput is an input type that accepts TemplateLongFormatTextArgs and TemplateLongFormatTextOutput values.
// You can construct a concrete instance of `TemplateLongFormatTextInput` via:
//
//	TemplateLongFormatTextArgs{...}
type TemplateLongFormatTextInput interface {
	pulumi.Input

	ToTemplateLongFormatTextOutput() TemplateLongFormatTextOutput
	ToTemplateLongFormatTextOutputWithContext(context.Context) TemplateLongFormatTextOutput
}

type TemplateLongFormatTextArgs struct {
	// Plain text format.
	PlainText pulumi.StringPtrInput `pulumi:"plainText"`
	// Rich text. Examples of rich text include bold, underline, and italics.
	RichText pulumi.StringPtrInput `pulumi:"richText"`
}

func (TemplateLongFormatTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLongFormatText)(nil)).Elem()
}

func (i TemplateLongFormatTextArgs) ToTemplateLongFormatTextOutput() TemplateLongFormatTextOutput {
	return i.ToTemplateLongFormatTextOutputWithContext(context.Background())
}

func (i TemplateLongFormatTextArgs) ToTemplateLongFormatTextOutputWithContext(ctx context.Context) TemplateLongFormatTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLongFormatTextOutput)
}

func (i TemplateLongFormatTextArgs) ToTemplateLongFormatTextPtrOutput() TemplateLongFormatTextPtrOutput {
	return i.ToTemplateLongFormatTextPtrOutputWithContext(context.Background())
}

func (i TemplateLongFormatTextArgs) ToTemplateLongFormatTextPtrOutputWithContext(ctx context.Context) TemplateLongFormatTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLongFormatTextOutput).ToTemplateLongFormatTextPtrOutputWithContext(ctx)
}

// TemplateLongFormatTextPtrInput is an input type that accepts TemplateLongFormatTextArgs, TemplateLongFormatTextPtr and TemplateLongFormatTextPtrOutput values.
// You can construct a concrete instance of `TemplateLongFormatTextPtrInput` via:
//
//	        TemplateLongFormatTextArgs{...}
//
//	or:
//
//	        nil
type TemplateLongFormatTextPtrInput interface {
	pulumi.Input

	ToTemplateLongFormatTextPtrOutput() TemplateLongFormatTextPtrOutput
	ToTemplateLongFormatTextPtrOutputWithContext(context.Context) TemplateLongFormatTextPtrOutput
}

type templateLongFormatTextPtrType TemplateLongFormatTextArgs

func TemplateLongFormatTextPtr(v *TemplateLongFormatTextArgs) TemplateLongFormatTextPtrInput {
	return (*templateLongFormatTextPtrType)(v)
}

func (*templateLongFormatTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLongFormatText)(nil)).Elem()
}

func (i *templateLongFormatTextPtrType) ToTemplateLongFormatTextPtrOutput() TemplateLongFormatTextPtrOutput {
	return i.ToTemplateLongFormatTextPtrOutputWithContext(context.Background())
}

func (i *templateLongFormatTextPtrType) ToTemplateLongFormatTextPtrOutputWithContext(ctx context.Context) TemplateLongFormatTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLongFormatTextPtrOutput)
}

type TemplateLongFormatTextOutput struct{ *pulumi.OutputState }

func (TemplateLongFormatTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLongFormatText)(nil)).Elem()
}

func (o TemplateLongFormatTextOutput) ToTemplateLongFormatTextOutput() TemplateLongFormatTextOutput {
	return o
}

func (o TemplateLongFormatTextOutput) ToTemplateLongFormatTextOutputWithContext(ctx context.Context) TemplateLongFormatTextOutput {
	return o
}

func (o TemplateLongFormatTextOutput) ToTemplateLongFormatTextPtrOutput() TemplateLongFormatTextPtrOutput {
	return o.ToTemplateLongFormatTextPtrOutputWithContext(context.Background())
}

func (o TemplateLongFormatTextOutput) ToTemplateLongFormatTextPtrOutputWithContext(ctx context.Context) TemplateLongFormatTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLongFormatText) *TemplateLongFormatText {
		return &v
	}).(TemplateLongFormatTextPtrOutput)
}

// Plain text format.
func (o TemplateLongFormatTextOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLongFormatText) *string { return v.PlainText }).(pulumi.StringPtrOutput)
}

// Rich text. Examples of rich text include bold, underline, and italics.
func (o TemplateLongFormatTextOutput) RichText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLongFormatText) *string { return v.RichText }).(pulumi.StringPtrOutput)
}

type TemplateLongFormatTextPtrOutput struct{ *pulumi.OutputState }

func (TemplateLongFormatTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLongFormatText)(nil)).Elem()
}

func (o TemplateLongFormatTextPtrOutput) ToTemplateLongFormatTextPtrOutput() TemplateLongFormatTextPtrOutput {
	return o
}

func (o TemplateLongFormatTextPtrOutput) ToTemplateLongFormatTextPtrOutputWithContext(ctx context.Context) TemplateLongFormatTextPtrOutput {
	return o
}

func (o TemplateLongFormatTextPtrOutput) Elem() TemplateLongFormatTextOutput {
	return o.ApplyT(func(v *TemplateLongFormatText) TemplateLongFormatText {
		if v != nil {
			return *v
		}
		var ret TemplateLongFormatText
		return ret
	}).(TemplateLongFormatTextOutput)
}

// Plain text format.
func (o TemplateLongFormatTextPtrOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLongFormatText) *string {
		if v == nil {
			return nil
		}
		return v.PlainText
	}).(pulumi.StringPtrOutput)
}

// Rich text. Examples of rich text include bold, underline, and italics.
func (o TemplateLongFormatTextPtrOutput) RichText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLongFormatText) *string {
		if v == nil {
			return nil
		}
		return v.RichText
	}).(pulumi.StringPtrOutput)
}

type TemplateMappedDataSetParameter struct {
	// A unique name that identifies a dataset within the analysis or dashboard.
	DataSetIdentifier string `pulumi:"dataSetIdentifier"`
	// The name of the dataset parameter.
	DataSetParameterName string `pulumi:"dataSetParameterName"`
}

// TemplateMappedDataSetParameterInput is an input type that accepts TemplateMappedDataSetParameterArgs and TemplateMappedDataSetParameterOutput values.
// You can construct a concrete instance of `TemplateMappedDataSetParameterInput` via:
//
//	TemplateMappedDataSetParameterArgs{...}
type TemplateMappedDataSetParameterInput interface {
	pulumi.Input

	ToTemplateMappedDataSetParameterOutput() TemplateMappedDataSetParameterOutput
	ToTemplateMappedDataSetParameterOutputWithContext(context.Context) TemplateMappedDataSetParameterOutput
}

type TemplateMappedDataSetParameterArgs struct {
	// A unique name that identifies a dataset within the analysis or dashboard.
	DataSetIdentifier pulumi.StringInput `pulumi:"dataSetIdentifier"`
	// The name of the dataset parameter.
	DataSetParameterName pulumi.StringInput `pulumi:"dataSetParameterName"`
}

func (TemplateMappedDataSetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMappedDataSetParameter)(nil)).Elem()
}

func (i TemplateMappedDataSetParameterArgs) ToTemplateMappedDataSetParameterOutput() TemplateMappedDataSetParameterOutput {
	return i.ToTemplateMappedDataSetParameterOutputWithContext(context.Background())
}

func (i TemplateMappedDataSetParameterArgs) ToTemplateMappedDataSetParameterOutputWithContext(ctx context.Context) TemplateMappedDataSetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMappedDataSetParameterOutput)
}

// TemplateMappedDataSetParameterArrayInput is an input type that accepts TemplateMappedDataSetParameterArray and TemplateMappedDataSetParameterArrayOutput values.
// You can construct a concrete instance of `TemplateMappedDataSetParameterArrayInput` via:
//
//	TemplateMappedDataSetParameterArray{ TemplateMappedDataSetParameterArgs{...} }
type TemplateMappedDataSetParameterArrayInput interface {
	pulumi.Input

	ToTemplateMappedDataSetParameterArrayOutput() TemplateMappedDataSetParameterArrayOutput
	ToTemplateMappedDataSetParameterArrayOutputWithContext(context.Context) TemplateMappedDataSetParameterArrayOutput
}

type TemplateMappedDataSetParameterArray []TemplateMappedDataSetParameterInput

func (TemplateMappedDataSetParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateMappedDataSetParameter)(nil)).Elem()
}

func (i TemplateMappedDataSetParameterArray) ToTemplateMappedDataSetParameterArrayOutput() TemplateMappedDataSetParameterArrayOutput {
	return i.ToTemplateMappedDataSetParameterArrayOutputWithContext(context.Background())
}

func (i TemplateMappedDataSetParameterArray) ToTemplateMappedDataSetParameterArrayOutputWithContext(ctx context.Context) TemplateMappedDataSetParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMappedDataSetParameterArrayOutput)
}

type TemplateMappedDataSetParameterOutput struct{ *pulumi.OutputState }

func (TemplateMappedDataSetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMappedDataSetParameter)(nil)).Elem()
}

func (o TemplateMappedDataSetParameterOutput) ToTemplateMappedDataSetParameterOutput() TemplateMappedDataSetParameterOutput {
	return o
}

func (o TemplateMappedDataSetParameterOutput) ToTemplateMappedDataSetParameterOutputWithContext(ctx context.Context) TemplateMappedDataSetParameterOutput {
	return o
}

// A unique name that identifies a dataset within the analysis or dashboard.
func (o TemplateMappedDataSetParameterOutput) DataSetIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateMappedDataSetParameter) string { return v.DataSetIdentifier }).(pulumi.StringOutput)
}

// The name of the dataset parameter.
func (o TemplateMappedDataSetParameterOutput) DataSetParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateMappedDataSetParameter) string { return v.DataSetParameterName }).(pulumi.StringOutput)
}

type TemplateMappedDataSetParameterArrayOutput struct{ *pulumi.OutputState }

func (TemplateMappedDataSetParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateMappedDataSetParameter)(nil)).Elem()
}

func (o TemplateMappedDataSetParameterArrayOutput) ToTemplateMappedDataSetParameterArrayOutput() TemplateMappedDataSetParameterArrayOutput {
	return o
}

func (o TemplateMappedDataSetParameterArrayOutput) ToTemplateMappedDataSetParameterArrayOutputWithContext(ctx context.Context) TemplateMappedDataSetParameterArrayOutput {
	return o
}

func (o TemplateMappedDataSetParameterArrayOutput) Index(i pulumi.IntInput) TemplateMappedDataSetParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateMappedDataSetParameter {
		return vs[0].([]TemplateMappedDataSetParameter)[vs[1].(int)]
	}).(TemplateMappedDataSetParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSectionPageBreakConfigurationInput)(nil)).Elem(), DashboardSectionPageBreakConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSectionPageBreakConfigurationPtrInput)(nil)).Elem(), DashboardSectionPageBreakConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSectionStyleInput)(nil)).Elem(), DashboardSectionStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSectionStylePtrInput)(nil)).Elem(), DashboardSectionStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSelectedSheetsFilterScopeConfigurationInput)(nil)).Elem(), DashboardSelectedSheetsFilterScopeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSelectedSheetsFilterScopeConfigurationPtrInput)(nil)).Elem(), DashboardSelectedSheetsFilterScopeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSeriesItemInput)(nil)).Elem(), DashboardSeriesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSeriesItemArrayInput)(nil)).Elem(), DashboardSeriesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSetParameterValueConfigurationInput)(nil)).Elem(), DashboardSetParameterValueConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSetParameterValueConfigurationArrayInput)(nil)).Elem(), DashboardSetParameterValueConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardShapeConditionalFormatInput)(nil)).Elem(), DashboardShapeConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardShapeConditionalFormatPtrInput)(nil)).Elem(), DashboardShapeConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetControlInfoIconLabelOptionsInput)(nil)).Elem(), DashboardSheetControlInfoIconLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetControlInfoIconLabelOptionsPtrInput)(nil)).Elem(), DashboardSheetControlInfoIconLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetControlLayoutInput)(nil)).Elem(), DashboardSheetControlLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetControlLayoutArrayInput)(nil)).Elem(), DashboardSheetControlLayoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetControlLayoutConfigurationInput)(nil)).Elem(), DashboardSheetControlLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetControlsOptionInput)(nil)).Elem(), DashboardSheetControlsOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetControlsOptionPtrInput)(nil)).Elem(), DashboardSheetControlsOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetDefinitionInput)(nil)).Elem(), DashboardSheetDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetDefinitionArrayInput)(nil)).Elem(), DashboardSheetDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetElementConfigurationOverridesInput)(nil)).Elem(), DashboardSheetElementConfigurationOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetElementRenderingRuleInput)(nil)).Elem(), DashboardSheetElementRenderingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetElementRenderingRuleArrayInput)(nil)).Elem(), DashboardSheetElementRenderingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageInput)(nil)).Elem(), DashboardSheetImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageArrayInput)(nil)).Elem(), DashboardSheetImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageScalingConfigurationInput)(nil)).Elem(), DashboardSheetImageScalingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageScalingConfigurationPtrInput)(nil)).Elem(), DashboardSheetImageScalingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageSourceInput)(nil)).Elem(), DashboardSheetImageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageStaticFileSourceInput)(nil)).Elem(), DashboardSheetImageStaticFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageStaticFileSourcePtrInput)(nil)).Elem(), DashboardSheetImageStaticFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageTooltipConfigurationInput)(nil)).Elem(), DashboardSheetImageTooltipConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageTooltipConfigurationPtrInput)(nil)).Elem(), DashboardSheetImageTooltipConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageTooltipTextInput)(nil)).Elem(), DashboardSheetImageTooltipTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetImageTooltipTextPtrInput)(nil)).Elem(), DashboardSheetImageTooltipTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetLayoutElementMaximizationOptionInput)(nil)).Elem(), DashboardSheetLayoutElementMaximizationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetLayoutElementMaximizationOptionPtrInput)(nil)).Elem(), DashboardSheetLayoutElementMaximizationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetTextBoxInput)(nil)).Elem(), DashboardSheetTextBoxArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetTextBoxArrayInput)(nil)).Elem(), DashboardSheetTextBoxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetVisualScopingConfigurationInput)(nil)).Elem(), DashboardSheetVisualScopingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSheetVisualScopingConfigurationArrayInput)(nil)).Elem(), DashboardSheetVisualScopingConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardShortFormatTextInput)(nil)).Elem(), DashboardShortFormatTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardShortFormatTextPtrInput)(nil)).Elem(), DashboardShortFormatTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSimpleClusterMarkerInput)(nil)).Elem(), DashboardSimpleClusterMarkerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSimpleClusterMarkerPtrInput)(nil)).Elem(), DashboardSimpleClusterMarkerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSingleAxisOptionsInput)(nil)).Elem(), DashboardSingleAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSingleAxisOptionsPtrInput)(nil)).Elem(), DashboardSingleAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSliderControlDisplayOptionsInput)(nil)).Elem(), DashboardSliderControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSliderControlDisplayOptionsPtrInput)(nil)).Elem(), DashboardSliderControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSmallMultiplesAxisPropertiesInput)(nil)).Elem(), DashboardSmallMultiplesAxisPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSmallMultiplesAxisPropertiesPtrInput)(nil)).Elem(), DashboardSmallMultiplesAxisPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSmallMultiplesOptionsInput)(nil)).Elem(), DashboardSmallMultiplesOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSmallMultiplesOptionsPtrInput)(nil)).Elem(), DashboardSmallMultiplesOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntityInput)(nil)).Elem(), DashboardSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceEntityPtrInput)(nil)).Elem(), DashboardSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceTemplateInput)(nil)).Elem(), DashboardSourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSourceTemplatePtrInput)(nil)).Elem(), DashboardSourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSpacingInput)(nil)).Elem(), DashboardSpacingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSpacingPtrInput)(nil)).Elem(), DashboardSpacingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSpatialStaticFileInput)(nil)).Elem(), DashboardSpatialStaticFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSpatialStaticFilePtrInput)(nil)).Elem(), DashboardSpatialStaticFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileInput)(nil)).Elem(), DashboardStaticFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileArrayInput)(nil)).Elem(), DashboardStaticFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileS3SourceOptionsInput)(nil)).Elem(), DashboardStaticFileS3SourceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileS3SourceOptionsPtrInput)(nil)).Elem(), DashboardStaticFileS3SourceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileSourceInput)(nil)).Elem(), DashboardStaticFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileSourcePtrInput)(nil)).Elem(), DashboardStaticFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileUrlSourceOptionsInput)(nil)).Elem(), DashboardStaticFileUrlSourceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStaticFileUrlSourceOptionsPtrInput)(nil)).Elem(), DashboardStaticFileUrlSourceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringDefaultValuesInput)(nil)).Elem(), DashboardStringDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringDefaultValuesPtrInput)(nil)).Elem(), DashboardStringDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringFormatConfigurationInput)(nil)).Elem(), DashboardStringFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringFormatConfigurationPtrInput)(nil)).Elem(), DashboardStringFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringParameterInput)(nil)).Elem(), DashboardStringParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringParameterArrayInput)(nil)).Elem(), DashboardStringParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringParameterDeclarationInput)(nil)).Elem(), DashboardStringParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringParameterDeclarationPtrInput)(nil)).Elem(), DashboardStringParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringValueWhenUnsetConfigurationInput)(nil)).Elem(), DashboardStringValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardStringValueWhenUnsetConfigurationPtrInput)(nil)).Elem(), DashboardStringValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSubtotalOptionsInput)(nil)).Elem(), DashboardSubtotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardSubtotalOptionsPtrInput)(nil)).Elem(), DashboardSubtotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableAggregatedFieldWellsInput)(nil)).Elem(), DashboardTableAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableAggregatedFieldWellsPtrInput)(nil)).Elem(), DashboardTableAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableBorderOptionsInput)(nil)).Elem(), DashboardTableBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableBorderOptionsPtrInput)(nil)).Elem(), DashboardTableBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableCellConditionalFormattingInput)(nil)).Elem(), DashboardTableCellConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableCellConditionalFormattingPtrInput)(nil)).Elem(), DashboardTableCellConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableCellImageSizingConfigurationInput)(nil)).Elem(), DashboardTableCellImageSizingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableCellImageSizingConfigurationPtrInput)(nil)).Elem(), DashboardTableCellImageSizingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableCellStyleInput)(nil)).Elem(), DashboardTableCellStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableCellStylePtrInput)(nil)).Elem(), DashboardTableCellStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableConditionalFormattingInput)(nil)).Elem(), DashboardTableConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableConditionalFormattingPtrInput)(nil)).Elem(), DashboardTableConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableConditionalFormattingOptionInput)(nil)).Elem(), DashboardTableConditionalFormattingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableConditionalFormattingOptionArrayInput)(nil)).Elem(), DashboardTableConditionalFormattingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableConfigurationInput)(nil)).Elem(), DashboardTableConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableConfigurationPtrInput)(nil)).Elem(), DashboardTableConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldCustomIconContentInput)(nil)).Elem(), DashboardTableFieldCustomIconContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldCustomIconContentPtrInput)(nil)).Elem(), DashboardTableFieldCustomIconContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldCustomTextContentInput)(nil)).Elem(), DashboardTableFieldCustomTextContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldCustomTextContentPtrInput)(nil)).Elem(), DashboardTableFieldCustomTextContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldImageConfigurationInput)(nil)).Elem(), DashboardTableFieldImageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldImageConfigurationPtrInput)(nil)).Elem(), DashboardTableFieldImageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldLinkConfigurationInput)(nil)).Elem(), DashboardTableFieldLinkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldLinkConfigurationPtrInput)(nil)).Elem(), DashboardTableFieldLinkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldLinkContentConfigurationInput)(nil)).Elem(), DashboardTableFieldLinkContentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldLinkContentConfigurationPtrInput)(nil)).Elem(), DashboardTableFieldLinkContentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldOptionInput)(nil)).Elem(), DashboardTableFieldOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldOptionArrayInput)(nil)).Elem(), DashboardTableFieldOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldOptionsInput)(nil)).Elem(), DashboardTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldOptionsPtrInput)(nil)).Elem(), DashboardTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldUrlConfigurationInput)(nil)).Elem(), DashboardTableFieldUrlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldUrlConfigurationPtrInput)(nil)).Elem(), DashboardTableFieldUrlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldWellsInput)(nil)).Elem(), DashboardTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableFieldWellsPtrInput)(nil)).Elem(), DashboardTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableInlineVisualizationInput)(nil)).Elem(), DashboardTableInlineVisualizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableInlineVisualizationArrayInput)(nil)).Elem(), DashboardTableInlineVisualizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableOptionsInput)(nil)).Elem(), DashboardTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableOptionsPtrInput)(nil)).Elem(), DashboardTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTablePaginatedReportOptionsInput)(nil)).Elem(), DashboardTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTablePaginatedReportOptionsPtrInput)(nil)).Elem(), DashboardTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTablePinnedFieldOptionsInput)(nil)).Elem(), DashboardTablePinnedFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTablePinnedFieldOptionsPtrInput)(nil)).Elem(), DashboardTablePinnedFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableRowConditionalFormattingInput)(nil)).Elem(), DashboardTableRowConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableRowConditionalFormattingPtrInput)(nil)).Elem(), DashboardTableRowConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableSideBorderOptionsInput)(nil)).Elem(), DashboardTableSideBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableSideBorderOptionsPtrInput)(nil)).Elem(), DashboardTableSideBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableSortConfigurationInput)(nil)).Elem(), DashboardTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableSortConfigurationPtrInput)(nil)).Elem(), DashboardTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableStyleTargetInput)(nil)).Elem(), DashboardTableStyleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableStyleTargetArrayInput)(nil)).Elem(), DashboardTableStyleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableUnaggregatedFieldWellsInput)(nil)).Elem(), DashboardTableUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableUnaggregatedFieldWellsPtrInput)(nil)).Elem(), DashboardTableUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableVisualInput)(nil)).Elem(), DashboardTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTableVisualPtrInput)(nil)).Elem(), DashboardTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextAreaControlDisplayOptionsInput)(nil)).Elem(), DashboardTextAreaControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextAreaControlDisplayOptionsPtrInput)(nil)).Elem(), DashboardTextAreaControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextConditionalFormatInput)(nil)).Elem(), DashboardTextConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextConditionalFormatPtrInput)(nil)).Elem(), DashboardTextConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextControlPlaceholderOptionsInput)(nil)).Elem(), DashboardTextControlPlaceholderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextControlPlaceholderOptionsPtrInput)(nil)).Elem(), DashboardTextControlPlaceholderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextFieldControlDisplayOptionsInput)(nil)).Elem(), DashboardTextFieldControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTextFieldControlDisplayOptionsPtrInput)(nil)).Elem(), DashboardTextFieldControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardThousandSeparatorOptionsInput)(nil)).Elem(), DashboardThousandSeparatorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardThousandSeparatorOptionsPtrInput)(nil)).Elem(), DashboardThousandSeparatorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeBasedForecastPropertiesInput)(nil)).Elem(), DashboardTimeBasedForecastPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeBasedForecastPropertiesPtrInput)(nil)).Elem(), DashboardTimeBasedForecastPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeEqualityFilterInput)(nil)).Elem(), DashboardTimeEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeEqualityFilterPtrInput)(nil)).Elem(), DashboardTimeEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeRangeDrillDownFilterInput)(nil)).Elem(), DashboardTimeRangeDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeRangeDrillDownFilterPtrInput)(nil)).Elem(), DashboardTimeRangeDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeRangeFilterInput)(nil)).Elem(), DashboardTimeRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeRangeFilterPtrInput)(nil)).Elem(), DashboardTimeRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeRangeFilterValueInput)(nil)).Elem(), DashboardTimeRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTimeRangeFilterValuePtrInput)(nil)).Elem(), DashboardTimeRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTooltipItemInput)(nil)).Elem(), DashboardTooltipItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTooltipItemArrayInput)(nil)).Elem(), DashboardTooltipItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTooltipOptionsInput)(nil)).Elem(), DashboardTooltipOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTooltipOptionsPtrInput)(nil)).Elem(), DashboardTooltipOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTopBottomFilterInput)(nil)).Elem(), DashboardTopBottomFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTopBottomFilterPtrInput)(nil)).Elem(), DashboardTopBottomFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTopBottomMoversComputationInput)(nil)).Elem(), DashboardTopBottomMoversComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTopBottomMoversComputationPtrInput)(nil)).Elem(), DashboardTopBottomMoversComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTopBottomRankedComputationInput)(nil)).Elem(), DashboardTopBottomRankedComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTopBottomRankedComputationPtrInput)(nil)).Elem(), DashboardTopBottomRankedComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTotalAggregationComputationInput)(nil)).Elem(), DashboardTotalAggregationComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTotalAggregationComputationPtrInput)(nil)).Elem(), DashboardTotalAggregationComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTotalAggregationFunctionInput)(nil)).Elem(), DashboardTotalAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTotalAggregationOptionInput)(nil)).Elem(), DashboardTotalAggregationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTotalAggregationOptionArrayInput)(nil)).Elem(), DashboardTotalAggregationOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTotalOptionsInput)(nil)).Elem(), DashboardTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTotalOptionsPtrInput)(nil)).Elem(), DashboardTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapAggregatedFieldWellsInput)(nil)).Elem(), DashboardTreeMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapAggregatedFieldWellsPtrInput)(nil)).Elem(), DashboardTreeMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapConfigurationInput)(nil)).Elem(), DashboardTreeMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapConfigurationPtrInput)(nil)).Elem(), DashboardTreeMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapFieldWellsInput)(nil)).Elem(), DashboardTreeMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapFieldWellsPtrInput)(nil)).Elem(), DashboardTreeMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapSortConfigurationInput)(nil)).Elem(), DashboardTreeMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapSortConfigurationPtrInput)(nil)).Elem(), DashboardTreeMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapVisualInput)(nil)).Elem(), DashboardTreeMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTreeMapVisualPtrInput)(nil)).Elem(), DashboardTreeMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTrendArrowOptionsInput)(nil)).Elem(), DashboardTrendArrowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardTrendArrowOptionsPtrInput)(nil)).Elem(), DashboardTrendArrowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardUnaggregatedFieldInput)(nil)).Elem(), DashboardUnaggregatedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardUnaggregatedFieldPtrInput)(nil)).Elem(), DashboardUnaggregatedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardUnaggregatedFieldArrayInput)(nil)).Elem(), DashboardUnaggregatedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardUniqueValuesComputationInput)(nil)).Elem(), DashboardUniqueValuesComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardUniqueValuesComputationPtrInput)(nil)).Elem(), DashboardUniqueValuesComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardValidationStrategyInput)(nil)).Elem(), DashboardValidationStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardValidationStrategyPtrInput)(nil)).Elem(), DashboardValidationStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVersionDefinitionInput)(nil)).Elem(), DashboardVersionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVersionDefinitionPtrInput)(nil)).Elem(), DashboardVersionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisibleRangeOptionsInput)(nil)).Elem(), DashboardVisibleRangeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisibleRangeOptionsPtrInput)(nil)).Elem(), DashboardVisibleRangeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualInput)(nil)).Elem(), DashboardVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualArrayInput)(nil)).Elem(), DashboardVisualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualAxisSortOptionInput)(nil)).Elem(), DashboardVisualAxisSortOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualAxisSortOptionPtrInput)(nil)).Elem(), DashboardVisualAxisSortOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualCustomActionInput)(nil)).Elem(), DashboardVisualCustomActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualCustomActionArrayInput)(nil)).Elem(), DashboardVisualCustomActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualCustomActionOperationInput)(nil)).Elem(), DashboardVisualCustomActionOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualCustomActionOperationArrayInput)(nil)).Elem(), DashboardVisualCustomActionOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualInteractionOptionsInput)(nil)).Elem(), DashboardVisualInteractionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualInteractionOptionsPtrInput)(nil)).Elem(), DashboardVisualInteractionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualMenuOptionInput)(nil)).Elem(), DashboardVisualMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualMenuOptionPtrInput)(nil)).Elem(), DashboardVisualMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualPaletteInput)(nil)).Elem(), DashboardVisualPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualPalettePtrInput)(nil)).Elem(), DashboardVisualPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualPublishOptionsInput)(nil)).Elem(), DashboardVisualPublishOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualPublishOptionsPtrInput)(nil)).Elem(), DashboardVisualPublishOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualSubtitleLabelOptionsInput)(nil)).Elem(), DashboardVisualSubtitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualSubtitleLabelOptionsPtrInput)(nil)).Elem(), DashboardVisualSubtitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualTitleLabelOptionsInput)(nil)).Elem(), DashboardVisualTitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardVisualTitleLabelOptionsPtrInput)(nil)).Elem(), DashboardVisualTitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartAggregatedFieldWellsInput)(nil)).Elem(), DashboardWaterfallChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartAggregatedFieldWellsPtrInput)(nil)).Elem(), DashboardWaterfallChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartColorConfigurationInput)(nil)).Elem(), DashboardWaterfallChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartColorConfigurationPtrInput)(nil)).Elem(), DashboardWaterfallChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartConfigurationInput)(nil)).Elem(), DashboardWaterfallChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartConfigurationPtrInput)(nil)).Elem(), DashboardWaterfallChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartFieldWellsInput)(nil)).Elem(), DashboardWaterfallChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartFieldWellsPtrInput)(nil)).Elem(), DashboardWaterfallChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartGroupColorConfigurationInput)(nil)).Elem(), DashboardWaterfallChartGroupColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartGroupColorConfigurationPtrInput)(nil)).Elem(), DashboardWaterfallChartGroupColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartOptionsInput)(nil)).Elem(), DashboardWaterfallChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartOptionsPtrInput)(nil)).Elem(), DashboardWaterfallChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartSortConfigurationInput)(nil)).Elem(), DashboardWaterfallChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallChartSortConfigurationPtrInput)(nil)).Elem(), DashboardWaterfallChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallVisualInput)(nil)).Elem(), DashboardWaterfallVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWaterfallVisualPtrInput)(nil)).Elem(), DashboardWaterfallVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWhatIfPointScenarioInput)(nil)).Elem(), DashboardWhatIfPointScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWhatIfPointScenarioPtrInput)(nil)).Elem(), DashboardWhatIfPointScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWhatIfRangeScenarioInput)(nil)).Elem(), DashboardWhatIfRangeScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWhatIfRangeScenarioPtrInput)(nil)).Elem(), DashboardWhatIfRangeScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudAggregatedFieldWellsInput)(nil)).Elem(), DashboardWordCloudAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudAggregatedFieldWellsPtrInput)(nil)).Elem(), DashboardWordCloudAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudChartConfigurationInput)(nil)).Elem(), DashboardWordCloudChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudChartConfigurationPtrInput)(nil)).Elem(), DashboardWordCloudChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudFieldWellsInput)(nil)).Elem(), DashboardWordCloudFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudFieldWellsPtrInput)(nil)).Elem(), DashboardWordCloudFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudOptionsInput)(nil)).Elem(), DashboardWordCloudOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudOptionsPtrInput)(nil)).Elem(), DashboardWordCloudOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudSortConfigurationInput)(nil)).Elem(), DashboardWordCloudSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudSortConfigurationPtrInput)(nil)).Elem(), DashboardWordCloudSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudVisualInput)(nil)).Elem(), DashboardWordCloudVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWordCloudVisualPtrInput)(nil)).Elem(), DashboardWordCloudVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardYAxisOptionsInput)(nil)).Elem(), DashboardYAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardYAxisOptionsPtrInput)(nil)).Elem(), DashboardYAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCalculatedColumnInput)(nil)).Elem(), DataSetCalculatedColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCalculatedColumnArrayInput)(nil)).Elem(), DataSetCalculatedColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCastColumnTypeOperationInput)(nil)).Elem(), DataSetCastColumnTypeOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCastColumnTypeOperationPtrInput)(nil)).Elem(), DataSetCastColumnTypeOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnDescriptionInput)(nil)).Elem(), DataSetColumnDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnDescriptionPtrInput)(nil)).Elem(), DataSetColumnDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnGroupInput)(nil)).Elem(), DataSetColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnGroupArrayInput)(nil)).Elem(), DataSetColumnGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnLevelPermissionRuleInput)(nil)).Elem(), DataSetColumnLevelPermissionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnLevelPermissionRuleArrayInput)(nil)).Elem(), DataSetColumnLevelPermissionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnTagInput)(nil)).Elem(), DataSetColumnTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetColumnTagArrayInput)(nil)).Elem(), DataSetColumnTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCreateColumnsOperationInput)(nil)).Elem(), DataSetCreateColumnsOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCreateColumnsOperationPtrInput)(nil)).Elem(), DataSetCreateColumnsOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCustomSqlInput)(nil)).Elem(), DataSetCustomSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetCustomSqlPtrInput)(nil)).Elem(), DataSetCustomSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDatasetParameterInput)(nil)).Elem(), DataSetDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDatasetParameterArrayInput)(nil)).Elem(), DataSetDatasetParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDateTimeDatasetParameterInput)(nil)).Elem(), DataSetDateTimeDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDateTimeDatasetParameterPtrInput)(nil)).Elem(), DataSetDateTimeDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDateTimeDatasetParameterDefaultValuesInput)(nil)).Elem(), DataSetDateTimeDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDateTimeDatasetParameterDefaultValuesPtrInput)(nil)).Elem(), DataSetDateTimeDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDecimalDatasetParameterInput)(nil)).Elem(), DataSetDecimalDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDecimalDatasetParameterPtrInput)(nil)).Elem(), DataSetDecimalDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDecimalDatasetParameterDefaultValuesInput)(nil)).Elem(), DataSetDecimalDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetDecimalDatasetParameterDefaultValuesPtrInput)(nil)).Elem(), DataSetDecimalDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetFieldFolderInput)(nil)).Elem(), DataSetFieldFolderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetFieldFolderMapInput)(nil)).Elem(), DataSetFieldFolderMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetFilterOperationInput)(nil)).Elem(), DataSetFilterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetFilterOperationPtrInput)(nil)).Elem(), DataSetFilterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetGeoSpatialColumnGroupInput)(nil)).Elem(), DataSetGeoSpatialColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetGeoSpatialColumnGroupPtrInput)(nil)).Elem(), DataSetGeoSpatialColumnGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIncrementalRefreshInput)(nil)).Elem(), DataSetIncrementalRefreshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIncrementalRefreshPtrInput)(nil)).Elem(), DataSetIncrementalRefreshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIngestionWaitPolicyInput)(nil)).Elem(), DataSetIngestionWaitPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIngestionWaitPolicyPtrInput)(nil)).Elem(), DataSetIngestionWaitPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetInputColumnInput)(nil)).Elem(), DataSetInputColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetInputColumnArrayInput)(nil)).Elem(), DataSetInputColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIntegerDatasetParameterInput)(nil)).Elem(), DataSetIntegerDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIntegerDatasetParameterPtrInput)(nil)).Elem(), DataSetIntegerDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIntegerDatasetParameterDefaultValuesInput)(nil)).Elem(), DataSetIntegerDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetIntegerDatasetParameterDefaultValuesPtrInput)(nil)).Elem(), DataSetIntegerDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetJoinInstructionInput)(nil)).Elem(), DataSetJoinInstructionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetJoinInstructionPtrInput)(nil)).Elem(), DataSetJoinInstructionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetJoinKeyPropertiesInput)(nil)).Elem(), DataSetJoinKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetJoinKeyPropertiesPtrInput)(nil)).Elem(), DataSetJoinKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableInput)(nil)).Elem(), DataSetLogicalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableMapInput)(nil)).Elem(), DataSetLogicalTableMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableSourceInput)(nil)).Elem(), DataSetLogicalTableSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLogicalTableSourcePtrInput)(nil)).Elem(), DataSetLogicalTableSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLookbackWindowInput)(nil)).Elem(), DataSetLookbackWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetLookbackWindowPtrInput)(nil)).Elem(), DataSetLookbackWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetNewDefaultValuesInput)(nil)).Elem(), DataSetNewDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetNewDefaultValuesPtrInput)(nil)).Elem(), DataSetNewDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetOverrideDatasetParameterOperationInput)(nil)).Elem(), DataSetOverrideDatasetParameterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetOverrideDatasetParameterOperationPtrInput)(nil)).Elem(), DataSetOverrideDatasetParameterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPerformanceConfigurationInput)(nil)).Elem(), DataSetPerformanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPerformanceConfigurationPtrInput)(nil)).Elem(), DataSetPerformanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableInput)(nil)).Elem(), DataSetPhysicalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPhysicalTableMapInput)(nil)).Elem(), DataSetPhysicalTableMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetProjectOperationInput)(nil)).Elem(), DataSetProjectOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetProjectOperationPtrInput)(nil)).Elem(), DataSetProjectOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshConfigurationInput)(nil)).Elem(), DataSetRefreshConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshConfigurationPtrInput)(nil)).Elem(), DataSetRefreshConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesInput)(nil)).Elem(), DataSetRefreshPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRefreshPropertiesPtrInput)(nil)).Elem(), DataSetRefreshPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRelationalTableInput)(nil)).Elem(), DataSetRelationalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRelationalTablePtrInput)(nil)).Elem(), DataSetRelationalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRenameColumnOperationInput)(nil)).Elem(), DataSetRenameColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRenameColumnOperationPtrInput)(nil)).Elem(), DataSetRenameColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetResourcePermissionInput)(nil)).Elem(), DataSetResourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetResourcePermissionArrayInput)(nil)).Elem(), DataSetResourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionDataSetInput)(nil)).Elem(), DataSetRowLevelPermissionDataSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionDataSetPtrInput)(nil)).Elem(), DataSetRowLevelPermissionDataSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationInput)(nil)).Elem(), DataSetRowLevelPermissionTagConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagConfigurationPtrInput)(nil)).Elem(), DataSetRowLevelPermissionTagConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagRuleInput)(nil)).Elem(), DataSetRowLevelPermissionTagRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetRowLevelPermissionTagRuleArrayInput)(nil)).Elem(), DataSetRowLevelPermissionTagRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetS3SourceInput)(nil)).Elem(), DataSetS3SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetS3SourcePtrInput)(nil)).Elem(), DataSetS3SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetStringDatasetParameterInput)(nil)).Elem(), DataSetStringDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetStringDatasetParameterPtrInput)(nil)).Elem(), DataSetStringDatasetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetStringDatasetParameterDefaultValuesInput)(nil)).Elem(), DataSetStringDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetStringDatasetParameterDefaultValuesPtrInput)(nil)).Elem(), DataSetStringDatasetParameterDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetTagColumnOperationInput)(nil)).Elem(), DataSetTagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetTagColumnOperationPtrInput)(nil)).Elem(), DataSetTagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetTransformOperationInput)(nil)).Elem(), DataSetTransformOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetTransformOperationArrayInput)(nil)).Elem(), DataSetTransformOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetUniqueKeyInput)(nil)).Elem(), DataSetUniqueKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetUniqueKeyArrayInput)(nil)).Elem(), DataSetUniqueKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetUntagColumnOperationInput)(nil)).Elem(), DataSetUntagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetUntagColumnOperationPtrInput)(nil)).Elem(), DataSetUntagColumnOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetUsageConfigurationInput)(nil)).Elem(), DataSetUsageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetUsageConfigurationPtrInput)(nil)).Elem(), DataSetUsageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAmazonElasticsearchParametersInput)(nil)).Elem(), DataSourceAmazonElasticsearchParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAmazonElasticsearchParametersPtrInput)(nil)).Elem(), DataSourceAmazonElasticsearchParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAmazonOpenSearchParametersInput)(nil)).Elem(), DataSourceAmazonOpenSearchParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAmazonOpenSearchParametersPtrInput)(nil)).Elem(), DataSourceAmazonOpenSearchParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAthenaParametersInput)(nil)).Elem(), DataSourceAthenaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAthenaParametersPtrInput)(nil)).Elem(), DataSourceAthenaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAuroraParametersInput)(nil)).Elem(), DataSourceAuroraParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAuroraParametersPtrInput)(nil)).Elem(), DataSourceAuroraParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAuroraPostgreSqlParametersInput)(nil)).Elem(), DataSourceAuroraPostgreSqlParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceAuroraPostgreSqlParametersPtrInput)(nil)).Elem(), DataSourceAuroraPostgreSqlParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialPairInput)(nil)).Elem(), DataSourceCredentialPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialPairPtrInput)(nil)).Elem(), DataSourceCredentialPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsInput)(nil)).Elem(), DataSourceCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceCredentialsPtrInput)(nil)).Elem(), DataSourceCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceDatabricksParametersInput)(nil)).Elem(), DataSourceDatabricksParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceDatabricksParametersPtrInput)(nil)).Elem(), DataSourceDatabricksParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceErrorInfoInput)(nil)).Elem(), DataSourceErrorInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceErrorInfoPtrInput)(nil)).Elem(), DataSourceErrorInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceIdentityCenterConfigurationInput)(nil)).Elem(), DataSourceIdentityCenterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceIdentityCenterConfigurationPtrInput)(nil)).Elem(), DataSourceIdentityCenterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceManifestFileLocationInput)(nil)).Elem(), DataSourceManifestFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceManifestFileLocationPtrInput)(nil)).Elem(), DataSourceManifestFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceMariaDbParametersInput)(nil)).Elem(), DataSourceMariaDbParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceMariaDbParametersPtrInput)(nil)).Elem(), DataSourceMariaDbParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceMySqlParametersInput)(nil)).Elem(), DataSourceMySqlParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceMySqlParametersPtrInput)(nil)).Elem(), DataSourceMySqlParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceOAuthParametersInput)(nil)).Elem(), DataSourceOAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceOAuthParametersPtrInput)(nil)).Elem(), DataSourceOAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceOracleParametersInput)(nil)).Elem(), DataSourceOracleParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceOracleParametersPtrInput)(nil)).Elem(), DataSourceOracleParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersInput)(nil)).Elem(), DataSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersPtrInput)(nil)).Elem(), DataSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceParametersArrayInput)(nil)).Elem(), DataSourceParametersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePostgreSqlParametersInput)(nil)).Elem(), DataSourcePostgreSqlParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePostgreSqlParametersPtrInput)(nil)).Elem(), DataSourcePostgreSqlParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePrestoParametersInput)(nil)).Elem(), DataSourcePrestoParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePrestoParametersPtrInput)(nil)).Elem(), DataSourcePrestoParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceRdsParametersInput)(nil)).Elem(), DataSourceRdsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceRdsParametersPtrInput)(nil)).Elem(), DataSourceRdsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceRedshiftIamParametersInput)(nil)).Elem(), DataSourceRedshiftIamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceRedshiftIamParametersPtrInput)(nil)).Elem(), DataSourceRedshiftIamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceRedshiftParametersInput)(nil)).Elem(), DataSourceRedshiftParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceRedshiftParametersPtrInput)(nil)).Elem(), DataSourceRedshiftParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceResourcePermissionInput)(nil)).Elem(), DataSourceResourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceResourcePermissionArrayInput)(nil)).Elem(), DataSourceResourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceS3ParametersInput)(nil)).Elem(), DataSourceS3ParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceS3ParametersPtrInput)(nil)).Elem(), DataSourceS3ParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSnowflakeParametersInput)(nil)).Elem(), DataSourceSnowflakeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSnowflakeParametersPtrInput)(nil)).Elem(), DataSourceSnowflakeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSparkParametersInput)(nil)).Elem(), DataSourceSparkParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSparkParametersPtrInput)(nil)).Elem(), DataSourceSparkParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSqlServerParametersInput)(nil)).Elem(), DataSourceSqlServerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSqlServerParametersPtrInput)(nil)).Elem(), DataSourceSqlServerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSslPropertiesInput)(nil)).Elem(), DataSourceSslPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceSslPropertiesPtrInput)(nil)).Elem(), DataSourceSslPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceStarburstParametersInput)(nil)).Elem(), DataSourceStarburstParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceStarburstParametersPtrInput)(nil)).Elem(), DataSourceStarburstParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceTeradataParametersInput)(nil)).Elem(), DataSourceTeradataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceTeradataParametersPtrInput)(nil)).Elem(), DataSourceTeradataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceTrinoParametersInput)(nil)).Elem(), DataSourceTrinoParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceTrinoParametersPtrInput)(nil)).Elem(), DataSourceTrinoParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceVpcConnectionPropertiesInput)(nil)).Elem(), DataSourceVpcConnectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceVpcConnectionPropertiesPtrInput)(nil)).Elem(), DataSourceVpcConnectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderResourcePermissionInput)(nil)).Elem(), FolderResourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderResourcePermissionArrayInput)(nil)).Elem(), FolderResourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleMapInput)(nil)).Elem(), RefreshScheduleMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleMapPtrInput)(nil)).Elem(), RefreshScheduleMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyPropertiesInput)(nil)).Elem(), RefreshScheduleMapScheduleFrequencyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyPropertiesPtrInput)(nil)).Elem(), RefreshScheduleMapScheduleFrequencyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesInput)(nil)).Elem(), RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrInput)(nil)).Elem(), RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAggregationFunctionInput)(nil)).Elem(), TemplateAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAggregationFunctionPtrInput)(nil)).Elem(), TemplateAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAggregationSortConfigurationInput)(nil)).Elem(), TemplateAggregationSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAggregationSortConfigurationArrayInput)(nil)).Elem(), TemplateAggregationSortConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAllSheetsFilterScopeConfigurationInput)(nil)).Elem(), TemplateAllSheetsFilterScopeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAllSheetsFilterScopeConfigurationPtrInput)(nil)).Elem(), TemplateAllSheetsFilterScopeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAnalysisDefaultsInput)(nil)).Elem(), TemplateAnalysisDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAnalysisDefaultsPtrInput)(nil)).Elem(), TemplateAnalysisDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAnchorDateConfigurationInput)(nil)).Elem(), TemplateAnchorDateConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAnchorDateConfigurationPtrInput)(nil)).Elem(), TemplateAnchorDateConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcAxisConfigurationInput)(nil)).Elem(), TemplateArcAxisConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcAxisConfigurationPtrInput)(nil)).Elem(), TemplateArcAxisConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcAxisDisplayRangeInput)(nil)).Elem(), TemplateArcAxisDisplayRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcAxisDisplayRangePtrInput)(nil)).Elem(), TemplateArcAxisDisplayRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcConfigurationInput)(nil)).Elem(), TemplateArcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcConfigurationPtrInput)(nil)).Elem(), TemplateArcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcOptionsInput)(nil)).Elem(), TemplateArcOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArcOptionsPtrInput)(nil)).Elem(), TemplateArcOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAssetOptionsInput)(nil)).Elem(), TemplateAssetOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAssetOptionsPtrInput)(nil)).Elem(), TemplateAssetOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAttributeAggregationFunctionInput)(nil)).Elem(), TemplateAttributeAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAttributeAggregationFunctionPtrInput)(nil)).Elem(), TemplateAttributeAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDataOptionsInput)(nil)).Elem(), TemplateAxisDataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDataOptionsPtrInput)(nil)).Elem(), TemplateAxisDataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayDataDrivenRangeInput)(nil)).Elem(), TemplateAxisDisplayDataDrivenRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayDataDrivenRangePtrInput)(nil)).Elem(), TemplateAxisDisplayDataDrivenRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayMinMaxRangeInput)(nil)).Elem(), TemplateAxisDisplayMinMaxRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayMinMaxRangePtrInput)(nil)).Elem(), TemplateAxisDisplayMinMaxRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayOptionsInput)(nil)).Elem(), TemplateAxisDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayOptionsPtrInput)(nil)).Elem(), TemplateAxisDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayRangeInput)(nil)).Elem(), TemplateAxisDisplayRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisDisplayRangePtrInput)(nil)).Elem(), TemplateAxisDisplayRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLabelOptionsInput)(nil)).Elem(), TemplateAxisLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLabelOptionsArrayInput)(nil)).Elem(), TemplateAxisLabelOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLabelReferenceOptionsInput)(nil)).Elem(), TemplateAxisLabelReferenceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLabelReferenceOptionsPtrInput)(nil)).Elem(), TemplateAxisLabelReferenceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLinearScaleInput)(nil)).Elem(), TemplateAxisLinearScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLinearScalePtrInput)(nil)).Elem(), TemplateAxisLinearScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLogarithmicScaleInput)(nil)).Elem(), TemplateAxisLogarithmicScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisLogarithmicScalePtrInput)(nil)).Elem(), TemplateAxisLogarithmicScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisScaleInput)(nil)).Elem(), TemplateAxisScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisScalePtrInput)(nil)).Elem(), TemplateAxisScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisTickLabelOptionsInput)(nil)).Elem(), TemplateAxisTickLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateAxisTickLabelOptionsPtrInput)(nil)).Elem(), TemplateAxisTickLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartAggregatedFieldWellsInput)(nil)).Elem(), TemplateBarChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateBarChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartConfigurationInput)(nil)).Elem(), TemplateBarChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartConfigurationPtrInput)(nil)).Elem(), TemplateBarChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartFieldWellsInput)(nil)).Elem(), TemplateBarChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartFieldWellsPtrInput)(nil)).Elem(), TemplateBarChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartSortConfigurationInput)(nil)).Elem(), TemplateBarChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartSortConfigurationPtrInput)(nil)).Elem(), TemplateBarChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartVisualInput)(nil)).Elem(), TemplateBarChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBarChartVisualPtrInput)(nil)).Elem(), TemplateBarChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBinCountOptionsInput)(nil)).Elem(), TemplateBinCountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBinCountOptionsPtrInput)(nil)).Elem(), TemplateBinCountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBinWidthOptionsInput)(nil)).Elem(), TemplateBinWidthOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBinWidthOptionsPtrInput)(nil)).Elem(), TemplateBinWidthOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionConfigurationInput)(nil)).Elem(), TemplateBodySectionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionConfigurationArrayInput)(nil)).Elem(), TemplateBodySectionConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionContentInput)(nil)).Elem(), TemplateBodySectionContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionDynamicCategoryDimensionConfigurationInput)(nil)).Elem(), TemplateBodySectionDynamicCategoryDimensionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionDynamicCategoryDimensionConfigurationPtrInput)(nil)).Elem(), TemplateBodySectionDynamicCategoryDimensionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionDynamicNumericDimensionConfigurationInput)(nil)).Elem(), TemplateBodySectionDynamicNumericDimensionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionDynamicNumericDimensionConfigurationPtrInput)(nil)).Elem(), TemplateBodySectionDynamicNumericDimensionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionRepeatConfigurationInput)(nil)).Elem(), TemplateBodySectionRepeatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionRepeatConfigurationPtrInput)(nil)).Elem(), TemplateBodySectionRepeatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionRepeatDimensionConfigurationInput)(nil)).Elem(), TemplateBodySectionRepeatDimensionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionRepeatDimensionConfigurationArrayInput)(nil)).Elem(), TemplateBodySectionRepeatDimensionConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionRepeatPageBreakConfigurationInput)(nil)).Elem(), TemplateBodySectionRepeatPageBreakConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBodySectionRepeatPageBreakConfigurationPtrInput)(nil)).Elem(), TemplateBodySectionRepeatPageBreakConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotAggregatedFieldWellsInput)(nil)).Elem(), TemplateBoxPlotAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateBoxPlotAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotChartConfigurationInput)(nil)).Elem(), TemplateBoxPlotChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotChartConfigurationPtrInput)(nil)).Elem(), TemplateBoxPlotChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotFieldWellsInput)(nil)).Elem(), TemplateBoxPlotFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotFieldWellsPtrInput)(nil)).Elem(), TemplateBoxPlotFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotOptionsInput)(nil)).Elem(), TemplateBoxPlotOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotOptionsPtrInput)(nil)).Elem(), TemplateBoxPlotOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotSortConfigurationInput)(nil)).Elem(), TemplateBoxPlotSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotSortConfigurationPtrInput)(nil)).Elem(), TemplateBoxPlotSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotStyleOptionsInput)(nil)).Elem(), TemplateBoxPlotStyleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotStyleOptionsPtrInput)(nil)).Elem(), TemplateBoxPlotStyleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotVisualInput)(nil)).Elem(), TemplateBoxPlotVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateBoxPlotVisualPtrInput)(nil)).Elem(), TemplateBoxPlotVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCalculatedFieldInput)(nil)).Elem(), TemplateCalculatedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCalculatedFieldArrayInput)(nil)).Elem(), TemplateCalculatedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCalculatedMeasureFieldInput)(nil)).Elem(), TemplateCalculatedMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCalculatedMeasureFieldPtrInput)(nil)).Elem(), TemplateCalculatedMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCascadingControlConfigurationInput)(nil)).Elem(), TemplateCascadingControlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCascadingControlConfigurationPtrInput)(nil)).Elem(), TemplateCascadingControlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCascadingControlSourceInput)(nil)).Elem(), TemplateCascadingControlSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCascadingControlSourceArrayInput)(nil)).Elem(), TemplateCascadingControlSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoricalDimensionFieldInput)(nil)).Elem(), TemplateCategoricalDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoricalDimensionFieldPtrInput)(nil)).Elem(), TemplateCategoricalDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoricalMeasureFieldInput)(nil)).Elem(), TemplateCategoricalMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoricalMeasureFieldPtrInput)(nil)).Elem(), TemplateCategoricalMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryDrillDownFilterInput)(nil)).Elem(), TemplateCategoryDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryDrillDownFilterPtrInput)(nil)).Elem(), TemplateCategoryDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryFilterInput)(nil)).Elem(), TemplateCategoryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryFilterPtrInput)(nil)).Elem(), TemplateCategoryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryFilterConfigurationInput)(nil)).Elem(), TemplateCategoryFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryFilterConfigurationPtrInput)(nil)).Elem(), TemplateCategoryFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryInnerFilterInput)(nil)).Elem(), TemplateCategoryInnerFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCategoryInnerFilterPtrInput)(nil)).Elem(), TemplateCategoryInnerFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateChartAxisLabelOptionsInput)(nil)).Elem(), TemplateChartAxisLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateChartAxisLabelOptionsPtrInput)(nil)).Elem(), TemplateChartAxisLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateClusterMarkerInput)(nil)).Elem(), TemplateClusterMarkerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateClusterMarkerPtrInput)(nil)).Elem(), TemplateClusterMarkerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateClusterMarkerConfigurationInput)(nil)).Elem(), TemplateClusterMarkerConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateClusterMarkerConfigurationPtrInput)(nil)).Elem(), TemplateClusterMarkerConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColorScaleInput)(nil)).Elem(), TemplateColorScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColorScalePtrInput)(nil)).Elem(), TemplateColorScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColorsConfigurationInput)(nil)).Elem(), TemplateColorsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColorsConfigurationPtrInput)(nil)).Elem(), TemplateColorsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnConfigurationInput)(nil)).Elem(), TemplateColumnConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnConfigurationArrayInput)(nil)).Elem(), TemplateColumnConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnGroupColumnSchemaInput)(nil)).Elem(), TemplateColumnGroupColumnSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnGroupColumnSchemaArrayInput)(nil)).Elem(), TemplateColumnGroupColumnSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnGroupSchemaInput)(nil)).Elem(), TemplateColumnGroupSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnGroupSchemaArrayInput)(nil)).Elem(), TemplateColumnGroupSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnHierarchyInput)(nil)).Elem(), TemplateColumnHierarchyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnHierarchyArrayInput)(nil)).Elem(), TemplateColumnHierarchyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnIdentifierInput)(nil)).Elem(), TemplateColumnIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnIdentifierPtrInput)(nil)).Elem(), TemplateColumnIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnIdentifierArrayInput)(nil)).Elem(), TemplateColumnIdentifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnSchemaInput)(nil)).Elem(), TemplateColumnSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnSchemaArrayInput)(nil)).Elem(), TemplateColumnSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnSortInput)(nil)).Elem(), TemplateColumnSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnSortPtrInput)(nil)).Elem(), TemplateColumnSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnSortArrayInput)(nil)).Elem(), TemplateColumnSortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnTooltipItemInput)(nil)).Elem(), TemplateColumnTooltipItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateColumnTooltipItemPtrInput)(nil)).Elem(), TemplateColumnTooltipItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartAggregatedFieldWellsInput)(nil)).Elem(), TemplateComboChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateComboChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartConfigurationInput)(nil)).Elem(), TemplateComboChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartConfigurationPtrInput)(nil)).Elem(), TemplateComboChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartFieldWellsInput)(nil)).Elem(), TemplateComboChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartFieldWellsPtrInput)(nil)).Elem(), TemplateComboChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartSortConfigurationInput)(nil)).Elem(), TemplateComboChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartSortConfigurationPtrInput)(nil)).Elem(), TemplateComboChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartVisualInput)(nil)).Elem(), TemplateComboChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComboChartVisualPtrInput)(nil)).Elem(), TemplateComboChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComparisonConfigurationInput)(nil)).Elem(), TemplateComparisonConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComparisonConfigurationPtrInput)(nil)).Elem(), TemplateComparisonConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComparisonFormatConfigurationInput)(nil)).Elem(), TemplateComparisonFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComparisonFormatConfigurationPtrInput)(nil)).Elem(), TemplateComparisonFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComputationInput)(nil)).Elem(), TemplateComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateComputationArrayInput)(nil)).Elem(), TemplateComputationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingColorInput)(nil)).Elem(), TemplateConditionalFormattingColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingColorPtrInput)(nil)).Elem(), TemplateConditionalFormattingColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingCustomIconConditionInput)(nil)).Elem(), TemplateConditionalFormattingCustomIconConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingCustomIconConditionPtrInput)(nil)).Elem(), TemplateConditionalFormattingCustomIconConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingCustomIconOptionsInput)(nil)).Elem(), TemplateConditionalFormattingCustomIconOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingCustomIconOptionsPtrInput)(nil)).Elem(), TemplateConditionalFormattingCustomIconOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingGradientColorInput)(nil)).Elem(), TemplateConditionalFormattingGradientColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingGradientColorPtrInput)(nil)).Elem(), TemplateConditionalFormattingGradientColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingIconInput)(nil)).Elem(), TemplateConditionalFormattingIconArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingIconPtrInput)(nil)).Elem(), TemplateConditionalFormattingIconArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingIconDisplayConfigurationInput)(nil)).Elem(), TemplateConditionalFormattingIconDisplayConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingIconDisplayConfigurationPtrInput)(nil)).Elem(), TemplateConditionalFormattingIconDisplayConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingIconSetInput)(nil)).Elem(), TemplateConditionalFormattingIconSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingIconSetPtrInput)(nil)).Elem(), TemplateConditionalFormattingIconSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingSolidColorInput)(nil)).Elem(), TemplateConditionalFormattingSolidColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateConditionalFormattingSolidColorPtrInput)(nil)).Elem(), TemplateConditionalFormattingSolidColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateContextMenuOptionInput)(nil)).Elem(), TemplateContextMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateContextMenuOptionPtrInput)(nil)).Elem(), TemplateContextMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateContributionAnalysisDefaultInput)(nil)).Elem(), TemplateContributionAnalysisDefaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateContributionAnalysisDefaultArrayInput)(nil)).Elem(), TemplateContributionAnalysisDefaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCurrencyDisplayFormatConfigurationInput)(nil)).Elem(), TemplateCurrencyDisplayFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCurrencyDisplayFormatConfigurationPtrInput)(nil)).Elem(), TemplateCurrencyDisplayFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionFilterOperationInput)(nil)).Elem(), TemplateCustomActionFilterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionFilterOperationPtrInput)(nil)).Elem(), TemplateCustomActionFilterOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionNavigationOperationInput)(nil)).Elem(), TemplateCustomActionNavigationOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionNavigationOperationPtrInput)(nil)).Elem(), TemplateCustomActionNavigationOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionSetParametersOperationInput)(nil)).Elem(), TemplateCustomActionSetParametersOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionSetParametersOperationPtrInput)(nil)).Elem(), TemplateCustomActionSetParametersOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionUrlOperationInput)(nil)).Elem(), TemplateCustomActionUrlOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomActionUrlOperationPtrInput)(nil)).Elem(), TemplateCustomActionUrlOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomColorInput)(nil)).Elem(), TemplateCustomColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomColorArrayInput)(nil)).Elem(), TemplateCustomColorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomContentConfigurationInput)(nil)).Elem(), TemplateCustomContentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomContentConfigurationPtrInput)(nil)).Elem(), TemplateCustomContentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomContentVisualInput)(nil)).Elem(), TemplateCustomContentVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomContentVisualPtrInput)(nil)).Elem(), TemplateCustomContentVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomFilterConfigurationInput)(nil)).Elem(), TemplateCustomFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomFilterConfigurationPtrInput)(nil)).Elem(), TemplateCustomFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomFilterListConfigurationInput)(nil)).Elem(), TemplateCustomFilterListConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomFilterListConfigurationPtrInput)(nil)).Elem(), TemplateCustomFilterListConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomNarrativeOptionsInput)(nil)).Elem(), TemplateCustomNarrativeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomNarrativeOptionsPtrInput)(nil)).Elem(), TemplateCustomNarrativeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomParameterValuesInput)(nil)).Elem(), TemplateCustomParameterValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomParameterValuesPtrInput)(nil)).Elem(), TemplateCustomParameterValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomValuesConfigurationInput)(nil)).Elem(), TemplateCustomValuesConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateCustomValuesConfigurationPtrInput)(nil)).Elem(), TemplateCustomValuesConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataBarsOptionsInput)(nil)).Elem(), TemplateDataBarsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataBarsOptionsPtrInput)(nil)).Elem(), TemplateDataBarsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataColorInput)(nil)).Elem(), TemplateDataColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataColorPtrInput)(nil)).Elem(), TemplateDataColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataColorArrayInput)(nil)).Elem(), TemplateDataColorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataFieldSeriesItemInput)(nil)).Elem(), TemplateDataFieldSeriesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataFieldSeriesItemPtrInput)(nil)).Elem(), TemplateDataFieldSeriesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataLabelOptionsInput)(nil)).Elem(), TemplateDataLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataLabelOptionsPtrInput)(nil)).Elem(), TemplateDataLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataLabelTypeInput)(nil)).Elem(), TemplateDataLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataLabelTypeArrayInput)(nil)).Elem(), TemplateDataLabelTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathColorInput)(nil)).Elem(), TemplateDataPathColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathColorArrayInput)(nil)).Elem(), TemplateDataPathColorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathLabelTypeInput)(nil)).Elem(), TemplateDataPathLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathLabelTypePtrInput)(nil)).Elem(), TemplateDataPathLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathSortInput)(nil)).Elem(), TemplateDataPathSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathSortPtrInput)(nil)).Elem(), TemplateDataPathSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathTypeInput)(nil)).Elem(), TemplateDataPathTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathTypePtrInput)(nil)).Elem(), TemplateDataPathTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathValueInput)(nil)).Elem(), TemplateDataPathValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataPathValueArrayInput)(nil)).Elem(), TemplateDataPathValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataSetConfigurationInput)(nil)).Elem(), TemplateDataSetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataSetConfigurationArrayInput)(nil)).Elem(), TemplateDataSetConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataSetReferenceInput)(nil)).Elem(), TemplateDataSetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataSetReferenceArrayInput)(nil)).Elem(), TemplateDataSetReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataSetSchemaInput)(nil)).Elem(), TemplateDataSetSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDataSetSchemaPtrInput)(nil)).Elem(), TemplateDataSetSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateAxisOptionsInput)(nil)).Elem(), TemplateDateAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateAxisOptionsPtrInput)(nil)).Elem(), TemplateDateAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateDimensionFieldInput)(nil)).Elem(), TemplateDateDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateDimensionFieldPtrInput)(nil)).Elem(), TemplateDateDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateMeasureFieldInput)(nil)).Elem(), TemplateDateMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateMeasureFieldPtrInput)(nil)).Elem(), TemplateDateMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeDefaultValuesInput)(nil)).Elem(), TemplateDateTimeDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeDefaultValuesPtrInput)(nil)).Elem(), TemplateDateTimeDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeFormatConfigurationInput)(nil)).Elem(), TemplateDateTimeFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeFormatConfigurationPtrInput)(nil)).Elem(), TemplateDateTimeFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeHierarchyInput)(nil)).Elem(), TemplateDateTimeHierarchyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeHierarchyPtrInput)(nil)).Elem(), TemplateDateTimeHierarchyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeParameterDeclarationInput)(nil)).Elem(), TemplateDateTimeParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeParameterDeclarationPtrInput)(nil)).Elem(), TemplateDateTimeParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimePickerControlDisplayOptionsInput)(nil)).Elem(), TemplateDateTimePickerControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimePickerControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateDateTimePickerControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeValueWhenUnsetConfigurationInput)(nil)).Elem(), TemplateDateTimeValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDateTimeValueWhenUnsetConfigurationPtrInput)(nil)).Elem(), TemplateDateTimeValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalDefaultValuesInput)(nil)).Elem(), TemplateDecimalDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalDefaultValuesPtrInput)(nil)).Elem(), TemplateDecimalDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalParameterDeclarationInput)(nil)).Elem(), TemplateDecimalParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalParameterDeclarationPtrInput)(nil)).Elem(), TemplateDecimalParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalPlacesConfigurationInput)(nil)).Elem(), TemplateDecimalPlacesConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalPlacesConfigurationPtrInput)(nil)).Elem(), TemplateDecimalPlacesConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalValueWhenUnsetConfigurationInput)(nil)).Elem(), TemplateDecimalValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDecimalValueWhenUnsetConfigurationPtrInput)(nil)).Elem(), TemplateDecimalValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultDateTimePickerControlOptionsInput)(nil)).Elem(), TemplateDefaultDateTimePickerControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultDateTimePickerControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultDateTimePickerControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterControlConfigurationInput)(nil)).Elem(), TemplateDefaultFilterControlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterControlConfigurationPtrInput)(nil)).Elem(), TemplateDefaultFilterControlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterControlOptionsInput)(nil)).Elem(), TemplateDefaultFilterControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultFilterControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterDropDownControlOptionsInput)(nil)).Elem(), TemplateDefaultFilterDropDownControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterDropDownControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultFilterDropDownControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterListControlOptionsInput)(nil)).Elem(), TemplateDefaultFilterListControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFilterListControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultFilterListControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFreeFormLayoutConfigurationInput)(nil)).Elem(), TemplateDefaultFreeFormLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultFreeFormLayoutConfigurationPtrInput)(nil)).Elem(), TemplateDefaultFreeFormLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultGridLayoutConfigurationInput)(nil)).Elem(), TemplateDefaultGridLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultGridLayoutConfigurationPtrInput)(nil)).Elem(), TemplateDefaultGridLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultInteractiveLayoutConfigurationInput)(nil)).Elem(), TemplateDefaultInteractiveLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultInteractiveLayoutConfigurationPtrInput)(nil)).Elem(), TemplateDefaultInteractiveLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultNewSheetConfigurationInput)(nil)).Elem(), TemplateDefaultNewSheetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultNewSheetConfigurationPtrInput)(nil)).Elem(), TemplateDefaultNewSheetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultPaginatedLayoutConfigurationInput)(nil)).Elem(), TemplateDefaultPaginatedLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultPaginatedLayoutConfigurationPtrInput)(nil)).Elem(), TemplateDefaultPaginatedLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultRelativeDateTimeControlOptionsInput)(nil)).Elem(), TemplateDefaultRelativeDateTimeControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultRelativeDateTimeControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultRelativeDateTimeControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultSectionBasedLayoutConfigurationInput)(nil)).Elem(), TemplateDefaultSectionBasedLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultSectionBasedLayoutConfigurationPtrInput)(nil)).Elem(), TemplateDefaultSectionBasedLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultSliderControlOptionsInput)(nil)).Elem(), TemplateDefaultSliderControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultSliderControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultSliderControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultTextAreaControlOptionsInput)(nil)).Elem(), TemplateDefaultTextAreaControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultTextAreaControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultTextAreaControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultTextFieldControlOptionsInput)(nil)).Elem(), TemplateDefaultTextFieldControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDefaultTextFieldControlOptionsPtrInput)(nil)).Elem(), TemplateDefaultTextFieldControlOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDestinationParameterValueConfigurationInput)(nil)).Elem(), TemplateDestinationParameterValueConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDimensionFieldInput)(nil)).Elem(), TemplateDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDimensionFieldPtrInput)(nil)).Elem(), TemplateDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDimensionFieldArrayInput)(nil)).Elem(), TemplateDimensionFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDonutCenterOptionsInput)(nil)).Elem(), TemplateDonutCenterOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDonutCenterOptionsPtrInput)(nil)).Elem(), TemplateDonutCenterOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDonutOptionsInput)(nil)).Elem(), TemplateDonutOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDonutOptionsPtrInput)(nil)).Elem(), TemplateDonutOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDrillDownFilterInput)(nil)).Elem(), TemplateDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDrillDownFilterArrayInput)(nil)).Elem(), TemplateDrillDownFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDropDownControlDisplayOptionsInput)(nil)).Elem(), TemplateDropDownControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDropDownControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateDropDownControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDynamicDefaultValueInput)(nil)).Elem(), TemplateDynamicDefaultValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDynamicDefaultValuePtrInput)(nil)).Elem(), TemplateDynamicDefaultValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateEmptyVisualInput)(nil)).Elem(), TemplateEmptyVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateEmptyVisualPtrInput)(nil)).Elem(), TemplateEmptyVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateExcludePeriodConfigurationInput)(nil)).Elem(), TemplateExcludePeriodConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateExcludePeriodConfigurationPtrInput)(nil)).Elem(), TemplateExcludePeriodConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateExplicitHierarchyInput)(nil)).Elem(), TemplateExplicitHierarchyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateExplicitHierarchyPtrInput)(nil)).Elem(), TemplateExplicitHierarchyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldBasedTooltipInput)(nil)).Elem(), TemplateFieldBasedTooltipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldBasedTooltipPtrInput)(nil)).Elem(), TemplateFieldBasedTooltipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldLabelTypeInput)(nil)).Elem(), TemplateFieldLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldLabelTypePtrInput)(nil)).Elem(), TemplateFieldLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldSeriesItemInput)(nil)).Elem(), TemplateFieldSeriesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldSeriesItemPtrInput)(nil)).Elem(), TemplateFieldSeriesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldSortInput)(nil)).Elem(), TemplateFieldSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldSortPtrInput)(nil)).Elem(), TemplateFieldSortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldSortOptionsInput)(nil)).Elem(), TemplateFieldSortOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldSortOptionsArrayInput)(nil)).Elem(), TemplateFieldSortOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldTooltipItemInput)(nil)).Elem(), TemplateFieldTooltipItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFieldTooltipItemPtrInput)(nil)).Elem(), TemplateFieldTooltipItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapAggregatedFieldWellsInput)(nil)).Elem(), TemplateFilledMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateFilledMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapConditionalFormattingInput)(nil)).Elem(), TemplateFilledMapConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapConditionalFormattingPtrInput)(nil)).Elem(), TemplateFilledMapConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapConditionalFormattingOptionInput)(nil)).Elem(), TemplateFilledMapConditionalFormattingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapConditionalFormattingOptionArrayInput)(nil)).Elem(), TemplateFilledMapConditionalFormattingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapConfigurationInput)(nil)).Elem(), TemplateFilledMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapConfigurationPtrInput)(nil)).Elem(), TemplateFilledMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapFieldWellsInput)(nil)).Elem(), TemplateFilledMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapFieldWellsPtrInput)(nil)).Elem(), TemplateFilledMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapShapeConditionalFormattingInput)(nil)).Elem(), TemplateFilledMapShapeConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapSortConfigurationInput)(nil)).Elem(), TemplateFilledMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapSortConfigurationPtrInput)(nil)).Elem(), TemplateFilledMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapVisualInput)(nil)).Elem(), TemplateFilledMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilledMapVisualPtrInput)(nil)).Elem(), TemplateFilledMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterInput)(nil)).Elem(), TemplateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterArrayInput)(nil)).Elem(), TemplateFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterControlInput)(nil)).Elem(), TemplateFilterControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterControlArrayInput)(nil)).Elem(), TemplateFilterControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterCrossSheetControlInput)(nil)).Elem(), TemplateFilterCrossSheetControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterCrossSheetControlPtrInput)(nil)).Elem(), TemplateFilterCrossSheetControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterDateTimePickerControlInput)(nil)).Elem(), TemplateFilterDateTimePickerControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterDateTimePickerControlPtrInput)(nil)).Elem(), TemplateFilterDateTimePickerControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterDropDownControlInput)(nil)).Elem(), TemplateFilterDropDownControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterDropDownControlPtrInput)(nil)).Elem(), TemplateFilterDropDownControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterGroupInput)(nil)).Elem(), TemplateFilterGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterGroupArrayInput)(nil)).Elem(), TemplateFilterGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterListConfigurationInput)(nil)).Elem(), TemplateFilterListConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterListConfigurationPtrInput)(nil)).Elem(), TemplateFilterListConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterListControlInput)(nil)).Elem(), TemplateFilterListControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterListControlPtrInput)(nil)).Elem(), TemplateFilterListControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterOperationSelectedFieldsConfigurationInput)(nil)).Elem(), TemplateFilterOperationSelectedFieldsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterOperationSelectedFieldsConfigurationPtrInput)(nil)).Elem(), TemplateFilterOperationSelectedFieldsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterOperationTargetVisualsConfigurationInput)(nil)).Elem(), TemplateFilterOperationTargetVisualsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterOperationTargetVisualsConfigurationPtrInput)(nil)).Elem(), TemplateFilterOperationTargetVisualsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterRelativeDateTimeControlInput)(nil)).Elem(), TemplateFilterRelativeDateTimeControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterRelativeDateTimeControlPtrInput)(nil)).Elem(), TemplateFilterRelativeDateTimeControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterScopeConfigurationInput)(nil)).Elem(), TemplateFilterScopeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterSelectableValuesInput)(nil)).Elem(), TemplateFilterSelectableValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterSelectableValuesPtrInput)(nil)).Elem(), TemplateFilterSelectableValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterSliderControlInput)(nil)).Elem(), TemplateFilterSliderControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterSliderControlPtrInput)(nil)).Elem(), TemplateFilterSliderControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterTextAreaControlInput)(nil)).Elem(), TemplateFilterTextAreaControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterTextAreaControlPtrInput)(nil)).Elem(), TemplateFilterTextAreaControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterTextFieldControlInput)(nil)).Elem(), TemplateFilterTextFieldControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFilterTextFieldControlPtrInput)(nil)).Elem(), TemplateFilterTextFieldControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFontConfigurationInput)(nil)).Elem(), TemplateFontConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFontConfigurationPtrInput)(nil)).Elem(), TemplateFontConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFontSizeInput)(nil)).Elem(), TemplateFontSizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFontSizePtrInput)(nil)).Elem(), TemplateFontSizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFontWeightInput)(nil)).Elem(), TemplateFontWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFontWeightPtrInput)(nil)).Elem(), TemplateFontWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateForecastComputationInput)(nil)).Elem(), TemplateForecastComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateForecastComputationPtrInput)(nil)).Elem(), TemplateForecastComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateForecastConfigurationInput)(nil)).Elem(), TemplateForecastConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateForecastConfigurationArrayInput)(nil)).Elem(), TemplateForecastConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateForecastScenarioInput)(nil)).Elem(), TemplateForecastScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateForecastScenarioPtrInput)(nil)).Elem(), TemplateForecastScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFormatConfigurationInput)(nil)).Elem(), TemplateFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFormatConfigurationPtrInput)(nil)).Elem(), TemplateFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutCanvasSizeOptionsInput)(nil)).Elem(), TemplateFreeFormLayoutCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutCanvasSizeOptionsPtrInput)(nil)).Elem(), TemplateFreeFormLayoutCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutConfigurationInput)(nil)).Elem(), TemplateFreeFormLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutConfigurationPtrInput)(nil)).Elem(), TemplateFreeFormLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutElementInput)(nil)).Elem(), TemplateFreeFormLayoutElementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutElementArrayInput)(nil)).Elem(), TemplateFreeFormLayoutElementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutElementBackgroundStyleInput)(nil)).Elem(), TemplateFreeFormLayoutElementBackgroundStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutElementBackgroundStylePtrInput)(nil)).Elem(), TemplateFreeFormLayoutElementBackgroundStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutElementBorderStyleInput)(nil)).Elem(), TemplateFreeFormLayoutElementBorderStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutElementBorderStylePtrInput)(nil)).Elem(), TemplateFreeFormLayoutElementBorderStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutScreenCanvasSizeOptionsInput)(nil)).Elem(), TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrInput)(nil)).Elem(), TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormSectionLayoutConfigurationInput)(nil)).Elem(), TemplateFreeFormSectionLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFreeFormSectionLayoutConfigurationPtrInput)(nil)).Elem(), TemplateFreeFormSectionLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartAggregatedFieldWellsInput)(nil)).Elem(), TemplateFunnelChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateFunnelChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartConfigurationInput)(nil)).Elem(), TemplateFunnelChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartConfigurationPtrInput)(nil)).Elem(), TemplateFunnelChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartDataLabelOptionsInput)(nil)).Elem(), TemplateFunnelChartDataLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartDataLabelOptionsPtrInput)(nil)).Elem(), TemplateFunnelChartDataLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartFieldWellsInput)(nil)).Elem(), TemplateFunnelChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartFieldWellsPtrInput)(nil)).Elem(), TemplateFunnelChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartSortConfigurationInput)(nil)).Elem(), TemplateFunnelChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartSortConfigurationPtrInput)(nil)).Elem(), TemplateFunnelChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartVisualInput)(nil)).Elem(), TemplateFunnelChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateFunnelChartVisualPtrInput)(nil)).Elem(), TemplateFunnelChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartArcConditionalFormattingInput)(nil)).Elem(), TemplateGaugeChartArcConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartArcConditionalFormattingPtrInput)(nil)).Elem(), TemplateGaugeChartArcConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartColorConfigurationInput)(nil)).Elem(), TemplateGaugeChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartColorConfigurationPtrInput)(nil)).Elem(), TemplateGaugeChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartConditionalFormattingInput)(nil)).Elem(), TemplateGaugeChartConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartConditionalFormattingPtrInput)(nil)).Elem(), TemplateGaugeChartConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartConditionalFormattingOptionInput)(nil)).Elem(), TemplateGaugeChartConditionalFormattingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartConditionalFormattingOptionArrayInput)(nil)).Elem(), TemplateGaugeChartConditionalFormattingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartConfigurationInput)(nil)).Elem(), TemplateGaugeChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartConfigurationPtrInput)(nil)).Elem(), TemplateGaugeChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartFieldWellsInput)(nil)).Elem(), TemplateGaugeChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartFieldWellsPtrInput)(nil)).Elem(), TemplateGaugeChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartOptionsInput)(nil)).Elem(), TemplateGaugeChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartOptionsPtrInput)(nil)).Elem(), TemplateGaugeChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartPrimaryValueConditionalFormattingInput)(nil)).Elem(), TemplateGaugeChartPrimaryValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartPrimaryValueConditionalFormattingPtrInput)(nil)).Elem(), TemplateGaugeChartPrimaryValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartVisualInput)(nil)).Elem(), TemplateGaugeChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGaugeChartVisualPtrInput)(nil)).Elem(), TemplateGaugeChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialCoordinateBoundsInput)(nil)).Elem(), TemplateGeospatialCoordinateBoundsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialCoordinateBoundsPtrInput)(nil)).Elem(), TemplateGeospatialCoordinateBoundsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialHeatmapColorScaleInput)(nil)).Elem(), TemplateGeospatialHeatmapColorScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialHeatmapColorScalePtrInput)(nil)).Elem(), TemplateGeospatialHeatmapColorScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialHeatmapConfigurationInput)(nil)).Elem(), TemplateGeospatialHeatmapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialHeatmapConfigurationPtrInput)(nil)).Elem(), TemplateGeospatialHeatmapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialHeatmapDataColorInput)(nil)).Elem(), TemplateGeospatialHeatmapDataColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialHeatmapDataColorArrayInput)(nil)).Elem(), TemplateGeospatialHeatmapDataColorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapAggregatedFieldWellsInput)(nil)).Elem(), TemplateGeospatialMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateGeospatialMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapConfigurationInput)(nil)).Elem(), TemplateGeospatialMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapConfigurationPtrInput)(nil)).Elem(), TemplateGeospatialMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapFieldWellsInput)(nil)).Elem(), TemplateGeospatialMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapFieldWellsPtrInput)(nil)).Elem(), TemplateGeospatialMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapStyleOptionsInput)(nil)).Elem(), TemplateGeospatialMapStyleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapStyleOptionsPtrInput)(nil)).Elem(), TemplateGeospatialMapStyleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapVisualInput)(nil)).Elem(), TemplateGeospatialMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialMapVisualPtrInput)(nil)).Elem(), TemplateGeospatialMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialPointStyleOptionsInput)(nil)).Elem(), TemplateGeospatialPointStyleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialPointStyleOptionsPtrInput)(nil)).Elem(), TemplateGeospatialPointStyleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialWindowOptionsInput)(nil)).Elem(), TemplateGeospatialWindowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGeospatialWindowOptionsPtrInput)(nil)).Elem(), TemplateGeospatialWindowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGlobalTableBorderOptionsInput)(nil)).Elem(), TemplateGlobalTableBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGlobalTableBorderOptionsPtrInput)(nil)).Elem(), TemplateGlobalTableBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGradientColorInput)(nil)).Elem(), TemplateGradientColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGradientColorPtrInput)(nil)).Elem(), TemplateGradientColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGradientStopInput)(nil)).Elem(), TemplateGradientStopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGradientStopArrayInput)(nil)).Elem(), TemplateGradientStopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutCanvasSizeOptionsInput)(nil)).Elem(), TemplateGridLayoutCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutCanvasSizeOptionsPtrInput)(nil)).Elem(), TemplateGridLayoutCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutConfigurationInput)(nil)).Elem(), TemplateGridLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutConfigurationPtrInput)(nil)).Elem(), TemplateGridLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutElementInput)(nil)).Elem(), TemplateGridLayoutElementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutElementArrayInput)(nil)).Elem(), TemplateGridLayoutElementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutScreenCanvasSizeOptionsInput)(nil)).Elem(), TemplateGridLayoutScreenCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGridLayoutScreenCanvasSizeOptionsPtrInput)(nil)).Elem(), TemplateGridLayoutScreenCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGrowthRateComputationInput)(nil)).Elem(), TemplateGrowthRateComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateGrowthRateComputationPtrInput)(nil)).Elem(), TemplateGrowthRateComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeaderFooterSectionConfigurationInput)(nil)).Elem(), TemplateHeaderFooterSectionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeaderFooterSectionConfigurationArrayInput)(nil)).Elem(), TemplateHeaderFooterSectionConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapAggregatedFieldWellsInput)(nil)).Elem(), TemplateHeatMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateHeatMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapConfigurationInput)(nil)).Elem(), TemplateHeatMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapConfigurationPtrInput)(nil)).Elem(), TemplateHeatMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapFieldWellsInput)(nil)).Elem(), TemplateHeatMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapFieldWellsPtrInput)(nil)).Elem(), TemplateHeatMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapSortConfigurationInput)(nil)).Elem(), TemplateHeatMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapSortConfigurationPtrInput)(nil)).Elem(), TemplateHeatMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapVisualInput)(nil)).Elem(), TemplateHeatMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHeatMapVisualPtrInput)(nil)).Elem(), TemplateHeatMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramAggregatedFieldWellsInput)(nil)).Elem(), TemplateHistogramAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateHistogramAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramBinOptionsInput)(nil)).Elem(), TemplateHistogramBinOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramBinOptionsPtrInput)(nil)).Elem(), TemplateHistogramBinOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramConfigurationInput)(nil)).Elem(), TemplateHistogramConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramConfigurationPtrInput)(nil)).Elem(), TemplateHistogramConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramFieldWellsInput)(nil)).Elem(), TemplateHistogramFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramFieldWellsPtrInput)(nil)).Elem(), TemplateHistogramFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramVisualInput)(nil)).Elem(), TemplateHistogramVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateHistogramVisualPtrInput)(nil)).Elem(), TemplateHistogramVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageCustomActionInput)(nil)).Elem(), TemplateImageCustomActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageCustomActionArrayInput)(nil)).Elem(), TemplateImageCustomActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageCustomActionOperationInput)(nil)).Elem(), TemplateImageCustomActionOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageCustomActionOperationArrayInput)(nil)).Elem(), TemplateImageCustomActionOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageInteractionOptionsInput)(nil)).Elem(), TemplateImageInteractionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageInteractionOptionsPtrInput)(nil)).Elem(), TemplateImageInteractionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageMenuOptionInput)(nil)).Elem(), TemplateImageMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateImageMenuOptionPtrInput)(nil)).Elem(), TemplateImageMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInnerFilterInput)(nil)).Elem(), TemplateInnerFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInnerFilterPtrInput)(nil)).Elem(), TemplateInnerFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInsightConfigurationInput)(nil)).Elem(), TemplateInsightConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInsightConfigurationPtrInput)(nil)).Elem(), TemplateInsightConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInsightVisualInput)(nil)).Elem(), TemplateInsightVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInsightVisualPtrInput)(nil)).Elem(), TemplateInsightVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIntegerDefaultValuesInput)(nil)).Elem(), TemplateIntegerDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIntegerDefaultValuesPtrInput)(nil)).Elem(), TemplateIntegerDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIntegerParameterDeclarationInput)(nil)).Elem(), TemplateIntegerParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIntegerParameterDeclarationPtrInput)(nil)).Elem(), TemplateIntegerParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIntegerValueWhenUnsetConfigurationInput)(nil)).Elem(), TemplateIntegerValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIntegerValueWhenUnsetConfigurationPtrInput)(nil)).Elem(), TemplateIntegerValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateItemsLimitConfigurationInput)(nil)).Elem(), TemplateItemsLimitConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateItemsLimitConfigurationPtrInput)(nil)).Elem(), TemplateItemsLimitConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiActualValueConditionalFormattingInput)(nil)).Elem(), TemplateKpiActualValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiActualValueConditionalFormattingPtrInput)(nil)).Elem(), TemplateKpiActualValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiComparisonValueConditionalFormattingInput)(nil)).Elem(), TemplateKpiComparisonValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiComparisonValueConditionalFormattingPtrInput)(nil)).Elem(), TemplateKpiComparisonValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiConditionalFormattingInput)(nil)).Elem(), TemplateKpiConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiConditionalFormattingPtrInput)(nil)).Elem(), TemplateKpiConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiConditionalFormattingOptionInput)(nil)).Elem(), TemplateKpiConditionalFormattingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiConditionalFormattingOptionArrayInput)(nil)).Elem(), TemplateKpiConditionalFormattingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiConfigurationInput)(nil)).Elem(), TemplateKpiConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiConfigurationPtrInput)(nil)).Elem(), TemplateKpiConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiFieldWellsInput)(nil)).Elem(), TemplateKpiFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiFieldWellsPtrInput)(nil)).Elem(), TemplateKpiFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiOptionsInput)(nil)).Elem(), TemplateKpiOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiOptionsPtrInput)(nil)).Elem(), TemplateKpiOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiPrimaryValueConditionalFormattingInput)(nil)).Elem(), TemplateKpiPrimaryValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiPrimaryValueConditionalFormattingPtrInput)(nil)).Elem(), TemplateKpiPrimaryValueConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiProgressBarConditionalFormattingInput)(nil)).Elem(), TemplateKpiProgressBarConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiProgressBarConditionalFormattingPtrInput)(nil)).Elem(), TemplateKpiProgressBarConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiSortConfigurationInput)(nil)).Elem(), TemplateKpiSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiSortConfigurationPtrInput)(nil)).Elem(), TemplateKpiSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiSparklineOptionsInput)(nil)).Elem(), TemplateKpiSparklineOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiSparklineOptionsPtrInput)(nil)).Elem(), TemplateKpiSparklineOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiVisualInput)(nil)).Elem(), TemplateKpiVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiVisualPtrInput)(nil)).Elem(), TemplateKpiVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiVisualLayoutOptionsInput)(nil)).Elem(), TemplateKpiVisualLayoutOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiVisualLayoutOptionsPtrInput)(nil)).Elem(), TemplateKpiVisualLayoutOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiVisualStandardLayoutInput)(nil)).Elem(), TemplateKpiVisualStandardLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateKpiVisualStandardLayoutPtrInput)(nil)).Elem(), TemplateKpiVisualStandardLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLabelOptionsInput)(nil)).Elem(), TemplateLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLabelOptionsPtrInput)(nil)).Elem(), TemplateLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLayoutInput)(nil)).Elem(), TemplateLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLayoutArrayInput)(nil)).Elem(), TemplateLayoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLayoutConfigurationInput)(nil)).Elem(), TemplateLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLegendOptionsInput)(nil)).Elem(), TemplateLegendOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLegendOptionsPtrInput)(nil)).Elem(), TemplateLegendOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartAggregatedFieldWellsInput)(nil)).Elem(), TemplateLineChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateLineChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartConfigurationInput)(nil)).Elem(), TemplateLineChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartConfigurationPtrInput)(nil)).Elem(), TemplateLineChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartDefaultSeriesSettingsInput)(nil)).Elem(), TemplateLineChartDefaultSeriesSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartDefaultSeriesSettingsPtrInput)(nil)).Elem(), TemplateLineChartDefaultSeriesSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartFieldWellsInput)(nil)).Elem(), TemplateLineChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartFieldWellsPtrInput)(nil)).Elem(), TemplateLineChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartLineStyleSettingsInput)(nil)).Elem(), TemplateLineChartLineStyleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartLineStyleSettingsPtrInput)(nil)).Elem(), TemplateLineChartLineStyleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartMarkerStyleSettingsInput)(nil)).Elem(), TemplateLineChartMarkerStyleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartMarkerStyleSettingsPtrInput)(nil)).Elem(), TemplateLineChartMarkerStyleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartSeriesSettingsInput)(nil)).Elem(), TemplateLineChartSeriesSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartSeriesSettingsPtrInput)(nil)).Elem(), TemplateLineChartSeriesSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartSortConfigurationInput)(nil)).Elem(), TemplateLineChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartSortConfigurationPtrInput)(nil)).Elem(), TemplateLineChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartVisualInput)(nil)).Elem(), TemplateLineChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineChartVisualPtrInput)(nil)).Elem(), TemplateLineChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineSeriesAxisDisplayOptionsInput)(nil)).Elem(), TemplateLineSeriesAxisDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLineSeriesAxisDisplayOptionsPtrInput)(nil)).Elem(), TemplateLineSeriesAxisDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateListControlDisplayOptionsInput)(nil)).Elem(), TemplateListControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateListControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateListControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateListControlSearchOptionsInput)(nil)).Elem(), TemplateListControlSearchOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateListControlSearchOptionsPtrInput)(nil)).Elem(), TemplateListControlSearchOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateListControlSelectAllOptionsInput)(nil)).Elem(), TemplateListControlSelectAllOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateListControlSelectAllOptionsPtrInput)(nil)).Elem(), TemplateListControlSelectAllOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLoadingAnimationInput)(nil)).Elem(), TemplateLoadingAnimationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLoadingAnimationPtrInput)(nil)).Elem(), TemplateLoadingAnimationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLocalNavigationConfigurationInput)(nil)).Elem(), TemplateLocalNavigationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLocalNavigationConfigurationPtrInput)(nil)).Elem(), TemplateLocalNavigationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLongFormatTextInput)(nil)).Elem(), TemplateLongFormatTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateLongFormatTextPtrInput)(nil)).Elem(), TemplateLongFormatTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMappedDataSetParameterInput)(nil)).Elem(), TemplateMappedDataSetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMappedDataSetParameterArrayInput)(nil)).Elem(), TemplateMappedDataSetParameterArray{})
	pulumi.RegisterOutputType(DashboardSectionPageBreakConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardSectionPageBreakConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardSectionStyleOutput{})
	pulumi.RegisterOutputType(DashboardSectionStylePtrOutput{})
	pulumi.RegisterOutputType(DashboardSelectedSheetsFilterScopeConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardSelectedSheetsFilterScopeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardSeriesItemOutput{})
	pulumi.RegisterOutputType(DashboardSeriesItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardSetParameterValueConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardSetParameterValueConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DashboardShapeConditionalFormatOutput{})
	pulumi.RegisterOutputType(DashboardShapeConditionalFormatPtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetOutput{})
	pulumi.RegisterOutputType(DashboardSheetArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlInfoIconLabelOptionsOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlInfoIconLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlLayoutOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlLayoutArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlsOptionOutput{})
	pulumi.RegisterOutputType(DashboardSheetControlsOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetDefinitionOutput{})
	pulumi.RegisterOutputType(DashboardSheetDefinitionArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetElementConfigurationOverridesOutput{})
	pulumi.RegisterOutputType(DashboardSheetElementRenderingRuleOutput{})
	pulumi.RegisterOutputType(DashboardSheetElementRenderingRuleArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageScalingConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageScalingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageSourceOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageStaticFileSourceOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageStaticFileSourcePtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageTooltipConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageTooltipConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageTooltipTextOutput{})
	pulumi.RegisterOutputType(DashboardSheetImageTooltipTextPtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetLayoutElementMaximizationOptionOutput{})
	pulumi.RegisterOutputType(DashboardSheetLayoutElementMaximizationOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardSheetTextBoxOutput{})
	pulumi.RegisterOutputType(DashboardSheetTextBoxArrayOutput{})
	pulumi.RegisterOutputType(DashboardSheetVisualScopingConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardSheetVisualScopingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DashboardShortFormatTextOutput{})
	pulumi.RegisterOutputType(DashboardShortFormatTextPtrOutput{})
	pulumi.RegisterOutputType(DashboardSimpleClusterMarkerOutput{})
	pulumi.RegisterOutputType(DashboardSimpleClusterMarkerPtrOutput{})
	pulumi.RegisterOutputType(DashboardSingleAxisOptionsOutput{})
	pulumi.RegisterOutputType(DashboardSingleAxisOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardSliderControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(DashboardSliderControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardSmallMultiplesAxisPropertiesOutput{})
	pulumi.RegisterOutputType(DashboardSmallMultiplesAxisPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DashboardSmallMultiplesOptionsOutput{})
	pulumi.RegisterOutputType(DashboardSmallMultiplesOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntityOutput{})
	pulumi.RegisterOutputType(DashboardSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(DashboardSourceTemplateOutput{})
	pulumi.RegisterOutputType(DashboardSourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(DashboardSpacingOutput{})
	pulumi.RegisterOutputType(DashboardSpacingPtrOutput{})
	pulumi.RegisterOutputType(DashboardSpatialStaticFileOutput{})
	pulumi.RegisterOutputType(DashboardSpatialStaticFilePtrOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileArrayOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileS3SourceOptionsOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileS3SourceOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileSourceOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileSourcePtrOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileUrlSourceOptionsOutput{})
	pulumi.RegisterOutputType(DashboardStaticFileUrlSourceOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardStringDefaultValuesOutput{})
	pulumi.RegisterOutputType(DashboardStringDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DashboardStringFormatConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardStringFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardStringParameterOutput{})
	pulumi.RegisterOutputType(DashboardStringParameterArrayOutput{})
	pulumi.RegisterOutputType(DashboardStringParameterDeclarationOutput{})
	pulumi.RegisterOutputType(DashboardStringParameterDeclarationPtrOutput{})
	pulumi.RegisterOutputType(DashboardStringValueWhenUnsetConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardStringValueWhenUnsetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardSubtotalOptionsOutput{})
	pulumi.RegisterOutputType(DashboardSubtotalOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardTableAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableBorderOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTableBorderOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableCellConditionalFormattingOutput{})
	pulumi.RegisterOutputType(DashboardTableCellConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableCellImageSizingConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTableCellImageSizingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableCellStyleOutput{})
	pulumi.RegisterOutputType(DashboardTableCellStylePtrOutput{})
	pulumi.RegisterOutputType(DashboardTableConditionalFormattingOutput{})
	pulumi.RegisterOutputType(DashboardTableConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableConditionalFormattingOptionOutput{})
	pulumi.RegisterOutputType(DashboardTableConditionalFormattingOptionArrayOutput{})
	pulumi.RegisterOutputType(DashboardTableConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTableConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldCustomIconContentOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldCustomIconContentPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldCustomTextContentOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldCustomTextContentPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldImageConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldImageConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldLinkConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldLinkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldLinkContentConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldLinkContentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldOptionOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldOptionArrayOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldUrlConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldUrlConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardTableFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableInlineVisualizationOutput{})
	pulumi.RegisterOutputType(DashboardTableInlineVisualizationArrayOutput{})
	pulumi.RegisterOutputType(DashboardTableOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTableOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTablePaginatedReportOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTablePaginatedReportOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTablePinnedFieldOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTablePinnedFieldOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableRowConditionalFormattingOutput{})
	pulumi.RegisterOutputType(DashboardTableRowConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableSideBorderOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTableSideBorderOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableSortConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTableSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableStyleTargetOutput{})
	pulumi.RegisterOutputType(DashboardTableStyleTargetArrayOutput{})
	pulumi.RegisterOutputType(DashboardTableUnaggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardTableUnaggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTableVisualOutput{})
	pulumi.RegisterOutputType(DashboardTableVisualPtrOutput{})
	pulumi.RegisterOutputType(DashboardTextAreaControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTextAreaControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTextConditionalFormatOutput{})
	pulumi.RegisterOutputType(DashboardTextConditionalFormatPtrOutput{})
	pulumi.RegisterOutputType(DashboardTextControlPlaceholderOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTextControlPlaceholderOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTextFieldControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTextFieldControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardThousandSeparatorOptionsOutput{})
	pulumi.RegisterOutputType(DashboardThousandSeparatorOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTimeBasedForecastPropertiesOutput{})
	pulumi.RegisterOutputType(DashboardTimeBasedForecastPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DashboardTimeEqualityFilterOutput{})
	pulumi.RegisterOutputType(DashboardTimeEqualityFilterPtrOutput{})
	pulumi.RegisterOutputType(DashboardTimeRangeDrillDownFilterOutput{})
	pulumi.RegisterOutputType(DashboardTimeRangeDrillDownFilterPtrOutput{})
	pulumi.RegisterOutputType(DashboardTimeRangeFilterOutput{})
	pulumi.RegisterOutputType(DashboardTimeRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(DashboardTimeRangeFilterValueOutput{})
	pulumi.RegisterOutputType(DashboardTimeRangeFilterValuePtrOutput{})
	pulumi.RegisterOutputType(DashboardTooltipItemOutput{})
	pulumi.RegisterOutputType(DashboardTooltipItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardTooltipOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTooltipOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTopBottomFilterOutput{})
	pulumi.RegisterOutputType(DashboardTopBottomFilterPtrOutput{})
	pulumi.RegisterOutputType(DashboardTopBottomMoversComputationOutput{})
	pulumi.RegisterOutputType(DashboardTopBottomMoversComputationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTopBottomRankedComputationOutput{})
	pulumi.RegisterOutputType(DashboardTopBottomRankedComputationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTotalAggregationComputationOutput{})
	pulumi.RegisterOutputType(DashboardTotalAggregationComputationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTotalAggregationFunctionOutput{})
	pulumi.RegisterOutputType(DashboardTotalAggregationOptionOutput{})
	pulumi.RegisterOutputType(DashboardTotalAggregationOptionArrayOutput{})
	pulumi.RegisterOutputType(DashboardTotalOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTotalOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapSortConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapVisualOutput{})
	pulumi.RegisterOutputType(DashboardTreeMapVisualPtrOutput{})
	pulumi.RegisterOutputType(DashboardTrendArrowOptionsOutput{})
	pulumi.RegisterOutputType(DashboardTrendArrowOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardUnaggregatedFieldOutput{})
	pulumi.RegisterOutputType(DashboardUnaggregatedFieldPtrOutput{})
	pulumi.RegisterOutputType(DashboardUnaggregatedFieldArrayOutput{})
	pulumi.RegisterOutputType(DashboardUniqueValuesComputationOutput{})
	pulumi.RegisterOutputType(DashboardUniqueValuesComputationPtrOutput{})
	pulumi.RegisterOutputType(DashboardValidationStrategyOutput{})
	pulumi.RegisterOutputType(DashboardValidationStrategyPtrOutput{})
	pulumi.RegisterOutputType(DashboardVersionOutput{})
	pulumi.RegisterOutputType(DashboardVersionPtrOutput{})
	pulumi.RegisterOutputType(DashboardVersionDefinitionOutput{})
	pulumi.RegisterOutputType(DashboardVersionDefinitionPtrOutput{})
	pulumi.RegisterOutputType(DashboardVisibleRangeOptionsOutput{})
	pulumi.RegisterOutputType(DashboardVisibleRangeOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardVisualOutput{})
	pulumi.RegisterOutputType(DashboardVisualArrayOutput{})
	pulumi.RegisterOutputType(DashboardVisualAxisSortOptionOutput{})
	pulumi.RegisterOutputType(DashboardVisualAxisSortOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardVisualCustomActionOutput{})
	pulumi.RegisterOutputType(DashboardVisualCustomActionArrayOutput{})
	pulumi.RegisterOutputType(DashboardVisualCustomActionOperationOutput{})
	pulumi.RegisterOutputType(DashboardVisualCustomActionOperationArrayOutput{})
	pulumi.RegisterOutputType(DashboardVisualInteractionOptionsOutput{})
	pulumi.RegisterOutputType(DashboardVisualInteractionOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardVisualMenuOptionOutput{})
	pulumi.RegisterOutputType(DashboardVisualMenuOptionPtrOutput{})
	pulumi.RegisterOutputType(DashboardVisualPaletteOutput{})
	pulumi.RegisterOutputType(DashboardVisualPalettePtrOutput{})
	pulumi.RegisterOutputType(DashboardVisualPublishOptionsOutput{})
	pulumi.RegisterOutputType(DashboardVisualPublishOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardVisualSubtitleLabelOptionsOutput{})
	pulumi.RegisterOutputType(DashboardVisualSubtitleLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardVisualTitleLabelOptionsOutput{})
	pulumi.RegisterOutputType(DashboardVisualTitleLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartColorConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartColorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartGroupColorConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartGroupColorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartOptionsOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallVisualOutput{})
	pulumi.RegisterOutputType(DashboardWaterfallVisualPtrOutput{})
	pulumi.RegisterOutputType(DashboardWhatIfPointScenarioOutput{})
	pulumi.RegisterOutputType(DashboardWhatIfPointScenarioPtrOutput{})
	pulumi.RegisterOutputType(DashboardWhatIfRangeScenarioOutput{})
	pulumi.RegisterOutputType(DashboardWhatIfRangeScenarioPtrOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudChartConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudFieldWellsOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudOptionsOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudOptionsPtrOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudSortConfigurationOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudVisualOutput{})
	pulumi.RegisterOutputType(DashboardWordCloudVisualPtrOutput{})
	pulumi.RegisterOutputType(DashboardYAxisOptionsOutput{})
	pulumi.RegisterOutputType(DashboardYAxisOptionsPtrOutput{})
	pulumi.RegisterOutputType(DataSetCalculatedColumnOutput{})
	pulumi.RegisterOutputType(DataSetCalculatedColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetCastColumnTypeOperationOutput{})
	pulumi.RegisterOutputType(DataSetCastColumnTypeOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetColumnDescriptionOutput{})
	pulumi.RegisterOutputType(DataSetColumnDescriptionPtrOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetColumnGroupArrayOutput{})
	pulumi.RegisterOutputType(DataSetColumnLevelPermissionRuleOutput{})
	pulumi.RegisterOutputType(DataSetColumnLevelPermissionRuleArrayOutput{})
	pulumi.RegisterOutputType(DataSetColumnTagOutput{})
	pulumi.RegisterOutputType(DataSetColumnTagArrayOutput{})
	pulumi.RegisterOutputType(DataSetCreateColumnsOperationOutput{})
	pulumi.RegisterOutputType(DataSetCreateColumnsOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetCustomSqlOutput{})
	pulumi.RegisterOutputType(DataSetCustomSqlPtrOutput{})
	pulumi.RegisterOutputType(DataSetDatasetParameterOutput{})
	pulumi.RegisterOutputType(DataSetDatasetParameterArrayOutput{})
	pulumi.RegisterOutputType(DataSetDateTimeDatasetParameterOutput{})
	pulumi.RegisterOutputType(DataSetDateTimeDatasetParameterPtrOutput{})
	pulumi.RegisterOutputType(DataSetDateTimeDatasetParameterDefaultValuesOutput{})
	pulumi.RegisterOutputType(DataSetDateTimeDatasetParameterDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DataSetDecimalDatasetParameterOutput{})
	pulumi.RegisterOutputType(DataSetDecimalDatasetParameterPtrOutput{})
	pulumi.RegisterOutputType(DataSetDecimalDatasetParameterDefaultValuesOutput{})
	pulumi.RegisterOutputType(DataSetDecimalDatasetParameterDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DataSetFieldFolderOutput{})
	pulumi.RegisterOutputType(DataSetFieldFolderMapOutput{})
	pulumi.RegisterOutputType(DataSetFilterOperationOutput{})
	pulumi.RegisterOutputType(DataSetFilterOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetGeoSpatialColumnGroupOutput{})
	pulumi.RegisterOutputType(DataSetGeoSpatialColumnGroupPtrOutput{})
	pulumi.RegisterOutputType(DataSetIncrementalRefreshOutput{})
	pulumi.RegisterOutputType(DataSetIncrementalRefreshPtrOutput{})
	pulumi.RegisterOutputType(DataSetIngestionWaitPolicyOutput{})
	pulumi.RegisterOutputType(DataSetIngestionWaitPolicyPtrOutput{})
	pulumi.RegisterOutputType(DataSetInputColumnOutput{})
	pulumi.RegisterOutputType(DataSetInputColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetIntegerDatasetParameterOutput{})
	pulumi.RegisterOutputType(DataSetIntegerDatasetParameterPtrOutput{})
	pulumi.RegisterOutputType(DataSetIntegerDatasetParameterDefaultValuesOutput{})
	pulumi.RegisterOutputType(DataSetIntegerDatasetParameterDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DataSetJoinInstructionOutput{})
	pulumi.RegisterOutputType(DataSetJoinInstructionPtrOutput{})
	pulumi.RegisterOutputType(DataSetJoinKeyPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetJoinKeyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableSourceOutput{})
	pulumi.RegisterOutputType(DataSetLogicalTableSourcePtrOutput{})
	pulumi.RegisterOutputType(DataSetLookbackWindowOutput{})
	pulumi.RegisterOutputType(DataSetLookbackWindowPtrOutput{})
	pulumi.RegisterOutputType(DataSetNewDefaultValuesOutput{})
	pulumi.RegisterOutputType(DataSetNewDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DataSetOutputColumnOutput{})
	pulumi.RegisterOutputType(DataSetOutputColumnArrayOutput{})
	pulumi.RegisterOutputType(DataSetOverrideDatasetParameterOperationOutput{})
	pulumi.RegisterOutputType(DataSetOverrideDatasetParameterOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetPerformanceConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetPerformanceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableOutput{})
	pulumi.RegisterOutputType(DataSetPhysicalTableMapOutput{})
	pulumi.RegisterOutputType(DataSetProjectOperationOutput{})
	pulumi.RegisterOutputType(DataSetProjectOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetRefreshConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetRefreshConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesOutput{})
	pulumi.RegisterOutputType(DataSetRefreshPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSetRelationalTableOutput{})
	pulumi.RegisterOutputType(DataSetRelationalTablePtrOutput{})
	pulumi.RegisterOutputType(DataSetRenameColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetRenameColumnOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetResourcePermissionOutput{})
	pulumi.RegisterOutputType(DataSetResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionDataSetOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionDataSetPtrOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagRuleOutput{})
	pulumi.RegisterOutputType(DataSetRowLevelPermissionTagRuleArrayOutput{})
	pulumi.RegisterOutputType(DataSetS3SourceOutput{})
	pulumi.RegisterOutputType(DataSetS3SourcePtrOutput{})
	pulumi.RegisterOutputType(DataSetStringDatasetParameterOutput{})
	pulumi.RegisterOutputType(DataSetStringDatasetParameterPtrOutput{})
	pulumi.RegisterOutputType(DataSetStringDatasetParameterDefaultValuesOutput{})
	pulumi.RegisterOutputType(DataSetStringDatasetParameterDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DataSetTagColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetTagColumnOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetTransformOperationOutput{})
	pulumi.RegisterOutputType(DataSetTransformOperationArrayOutput{})
	pulumi.RegisterOutputType(DataSetUniqueKeyOutput{})
	pulumi.RegisterOutputType(DataSetUniqueKeyArrayOutput{})
	pulumi.RegisterOutputType(DataSetUntagColumnOperationOutput{})
	pulumi.RegisterOutputType(DataSetUntagColumnOperationPtrOutput{})
	pulumi.RegisterOutputType(DataSetUsageConfigurationOutput{})
	pulumi.RegisterOutputType(DataSetUsageConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonElasticsearchParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonElasticsearchParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonOpenSearchParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAmazonOpenSearchParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAthenaParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAthenaParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraPostgreSqlParametersOutput{})
	pulumi.RegisterOutputType(DataSourceAuroraPostgreSqlParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialPairOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialPairPtrOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsOutput{})
	pulumi.RegisterOutputType(DataSourceCredentialsPtrOutput{})
	pulumi.RegisterOutputType(DataSourceDatabricksParametersOutput{})
	pulumi.RegisterOutputType(DataSourceDatabricksParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceErrorInfoOutput{})
	pulumi.RegisterOutputType(DataSourceErrorInfoPtrOutput{})
	pulumi.RegisterOutputType(DataSourceIdentityCenterConfigurationOutput{})
	pulumi.RegisterOutputType(DataSourceIdentityCenterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DataSourceManifestFileLocationOutput{})
	pulumi.RegisterOutputType(DataSourceManifestFileLocationPtrOutput{})
	pulumi.RegisterOutputType(DataSourceMariaDbParametersOutput{})
	pulumi.RegisterOutputType(DataSourceMariaDbParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceMySqlParametersOutput{})
	pulumi.RegisterOutputType(DataSourceMySqlParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceOAuthParametersOutput{})
	pulumi.RegisterOutputType(DataSourceOAuthParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceOracleParametersOutput{})
	pulumi.RegisterOutputType(DataSourceOracleParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersOutput{})
	pulumi.RegisterOutputType(DataSourceParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceParametersArrayOutput{})
	pulumi.RegisterOutputType(DataSourcePostgreSqlParametersOutput{})
	pulumi.RegisterOutputType(DataSourcePostgreSqlParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourcePrestoParametersOutput{})
	pulumi.RegisterOutputType(DataSourcePrestoParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceRdsParametersOutput{})
	pulumi.RegisterOutputType(DataSourceRdsParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceRedshiftIamParametersOutput{})
	pulumi.RegisterOutputType(DataSourceRedshiftIamParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceRedshiftParametersOutput{})
	pulumi.RegisterOutputType(DataSourceRedshiftParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceResourcePermissionOutput{})
	pulumi.RegisterOutputType(DataSourceResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSourceS3ParametersOutput{})
	pulumi.RegisterOutputType(DataSourceS3ParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSnowflakeParametersOutput{})
	pulumi.RegisterOutputType(DataSourceSnowflakeParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSparkParametersOutput{})
	pulumi.RegisterOutputType(DataSourceSparkParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSqlServerParametersOutput{})
	pulumi.RegisterOutputType(DataSourceSqlServerParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceSslPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataSourceStarburstParametersOutput{})
	pulumi.RegisterOutputType(DataSourceStarburstParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceTeradataParametersOutput{})
	pulumi.RegisterOutputType(DataSourceTeradataParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceTrinoParametersOutput{})
	pulumi.RegisterOutputType(DataSourceTrinoParametersPtrOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(DataSourceVpcConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FolderResourcePermissionOutput{})
	pulumi.RegisterOutputType(FolderResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(RefreshScheduleMapOutput{})
	pulumi.RegisterOutputType(RefreshScheduleMapPtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleMapScheduleFrequencyPropertiesOutput{})
	pulumi.RegisterOutputType(RefreshScheduleMapScheduleFrequencyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesOutput{})
	pulumi.RegisterOutputType(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TemplateAggregationFunctionOutput{})
	pulumi.RegisterOutputType(TemplateAggregationFunctionPtrOutput{})
	pulumi.RegisterOutputType(TemplateAggregationSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateAggregationSortConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateAllSheetsFilterScopeConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateAllSheetsFilterScopeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateAnalysisDefaultsOutput{})
	pulumi.RegisterOutputType(TemplateAnalysisDefaultsPtrOutput{})
	pulumi.RegisterOutputType(TemplateAnchorDateConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateAnchorDateConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateArcAxisConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateArcAxisConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateArcAxisDisplayRangeOutput{})
	pulumi.RegisterOutputType(TemplateArcAxisDisplayRangePtrOutput{})
	pulumi.RegisterOutputType(TemplateArcConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateArcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateArcOptionsOutput{})
	pulumi.RegisterOutputType(TemplateArcOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateAssetOptionsOutput{})
	pulumi.RegisterOutputType(TemplateAssetOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateAttributeAggregationFunctionOutput{})
	pulumi.RegisterOutputType(TemplateAttributeAggregationFunctionPtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisDataOptionsOutput{})
	pulumi.RegisterOutputType(TemplateAxisDataOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayDataDrivenRangeOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayDataDrivenRangePtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayMinMaxRangeOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayMinMaxRangePtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayRangeOutput{})
	pulumi.RegisterOutputType(TemplateAxisDisplayRangePtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateAxisLabelOptionsArrayOutput{})
	pulumi.RegisterOutputType(TemplateAxisLabelReferenceOptionsOutput{})
	pulumi.RegisterOutputType(TemplateAxisLabelReferenceOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisLinearScaleOutput{})
	pulumi.RegisterOutputType(TemplateAxisLinearScalePtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisLogarithmicScaleOutput{})
	pulumi.RegisterOutputType(TemplateAxisLogarithmicScalePtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisScaleOutput{})
	pulumi.RegisterOutputType(TemplateAxisScalePtrOutput{})
	pulumi.RegisterOutputType(TemplateAxisTickLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateAxisTickLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBarChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateBarChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBarChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBarChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBarChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateBarChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBarChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBarChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBarChartVisualOutput{})
	pulumi.RegisterOutputType(TemplateBarChartVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateBinCountOptionsOutput{})
	pulumi.RegisterOutputType(TemplateBinCountOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBinWidthOptionsOutput{})
	pulumi.RegisterOutputType(TemplateBinWidthOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionContentOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionDynamicCategoryDimensionConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionDynamicCategoryDimensionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionDynamicNumericDimensionConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionDynamicNumericDimensionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionRepeatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionRepeatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionRepeatDimensionConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionRepeatDimensionConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionRepeatPageBreakConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBodySectionRepeatPageBreakConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotOptionsOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotStyleOptionsOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotStyleOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotVisualOutput{})
	pulumi.RegisterOutputType(TemplateBoxPlotVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateCalculatedFieldOutput{})
	pulumi.RegisterOutputType(TemplateCalculatedFieldArrayOutput{})
	pulumi.RegisterOutputType(TemplateCalculatedMeasureFieldOutput{})
	pulumi.RegisterOutputType(TemplateCalculatedMeasureFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateCascadingControlConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateCascadingControlConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCascadingControlSourceOutput{})
	pulumi.RegisterOutputType(TemplateCascadingControlSourceArrayOutput{})
	pulumi.RegisterOutputType(TemplateCategoricalDimensionFieldOutput{})
	pulumi.RegisterOutputType(TemplateCategoricalDimensionFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateCategoricalMeasureFieldOutput{})
	pulumi.RegisterOutputType(TemplateCategoricalMeasureFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateCategoryDrillDownFilterOutput{})
	pulumi.RegisterOutputType(TemplateCategoryDrillDownFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateCategoryFilterOutput{})
	pulumi.RegisterOutputType(TemplateCategoryFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateCategoryFilterConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateCategoryFilterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCategoryInnerFilterOutput{})
	pulumi.RegisterOutputType(TemplateCategoryInnerFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateChartAxisLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateChartAxisLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateClusterMarkerOutput{})
	pulumi.RegisterOutputType(TemplateClusterMarkerPtrOutput{})
	pulumi.RegisterOutputType(TemplateClusterMarkerConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateClusterMarkerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateColorScaleOutput{})
	pulumi.RegisterOutputType(TemplateColorScalePtrOutput{})
	pulumi.RegisterOutputType(TemplateColorsConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateColorsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateColumnConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateColumnConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupColumnSchemaOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupSchemaOutput{})
	pulumi.RegisterOutputType(TemplateColumnGroupSchemaArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnHierarchyOutput{})
	pulumi.RegisterOutputType(TemplateColumnHierarchyArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnIdentifierOutput{})
	pulumi.RegisterOutputType(TemplateColumnIdentifierPtrOutput{})
	pulumi.RegisterOutputType(TemplateColumnIdentifierArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnSchemaOutput{})
	pulumi.RegisterOutputType(TemplateColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnSortOutput{})
	pulumi.RegisterOutputType(TemplateColumnSortPtrOutput{})
	pulumi.RegisterOutputType(TemplateColumnSortArrayOutput{})
	pulumi.RegisterOutputType(TemplateColumnTooltipItemOutput{})
	pulumi.RegisterOutputType(TemplateColumnTooltipItemPtrOutput{})
	pulumi.RegisterOutputType(TemplateComboChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateComboChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateComboChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateComboChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateComboChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateComboChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateComboChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateComboChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateComboChartVisualOutput{})
	pulumi.RegisterOutputType(TemplateComboChartVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateComparisonConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateComparisonConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateComparisonFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateComparisonFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateComputationOutput{})
	pulumi.RegisterOutputType(TemplateComputationArrayOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingColorOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingColorPtrOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingCustomIconConditionOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingCustomIconConditionPtrOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingCustomIconOptionsOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingCustomIconOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingGradientColorOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingGradientColorPtrOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingIconOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingIconPtrOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingIconDisplayConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingIconDisplayConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingIconSetOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingIconSetPtrOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingSolidColorOutput{})
	pulumi.RegisterOutputType(TemplateConditionalFormattingSolidColorPtrOutput{})
	pulumi.RegisterOutputType(TemplateContextMenuOptionOutput{})
	pulumi.RegisterOutputType(TemplateContextMenuOptionPtrOutput{})
	pulumi.RegisterOutputType(TemplateContributionAnalysisDefaultOutput{})
	pulumi.RegisterOutputType(TemplateContributionAnalysisDefaultArrayOutput{})
	pulumi.RegisterOutputType(TemplateCurrencyDisplayFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateCurrencyDisplayFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionFilterOperationOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionFilterOperationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionNavigationOperationOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionNavigationOperationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionSetParametersOperationOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionSetParametersOperationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionUrlOperationOutput{})
	pulumi.RegisterOutputType(TemplateCustomActionUrlOperationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomColorOutput{})
	pulumi.RegisterOutputType(TemplateCustomColorArrayOutput{})
	pulumi.RegisterOutputType(TemplateCustomContentConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateCustomContentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomContentVisualOutput{})
	pulumi.RegisterOutputType(TemplateCustomContentVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomFilterConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateCustomFilterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomFilterListConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateCustomFilterListConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomNarrativeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateCustomNarrativeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomParameterValuesOutput{})
	pulumi.RegisterOutputType(TemplateCustomParameterValuesPtrOutput{})
	pulumi.RegisterOutputType(TemplateCustomValuesConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateCustomValuesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDataBarsOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDataBarsOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDataColorOutput{})
	pulumi.RegisterOutputType(TemplateDataColorPtrOutput{})
	pulumi.RegisterOutputType(TemplateDataColorArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataFieldSeriesItemOutput{})
	pulumi.RegisterOutputType(TemplateDataFieldSeriesItemPtrOutput{})
	pulumi.RegisterOutputType(TemplateDataLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDataLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDataLabelTypeOutput{})
	pulumi.RegisterOutputType(TemplateDataLabelTypeArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataPathColorOutput{})
	pulumi.RegisterOutputType(TemplateDataPathColorArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataPathLabelTypeOutput{})
	pulumi.RegisterOutputType(TemplateDataPathLabelTypePtrOutput{})
	pulumi.RegisterOutputType(TemplateDataPathSortOutput{})
	pulumi.RegisterOutputType(TemplateDataPathSortPtrOutput{})
	pulumi.RegisterOutputType(TemplateDataPathTypeOutput{})
	pulumi.RegisterOutputType(TemplateDataPathTypePtrOutput{})
	pulumi.RegisterOutputType(TemplateDataPathValueOutput{})
	pulumi.RegisterOutputType(TemplateDataPathValueArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataSetConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDataSetConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataSetReferenceOutput{})
	pulumi.RegisterOutputType(TemplateDataSetReferenceArrayOutput{})
	pulumi.RegisterOutputType(TemplateDataSetSchemaOutput{})
	pulumi.RegisterOutputType(TemplateDataSetSchemaPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateAxisOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDateAxisOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateDimensionFieldOutput{})
	pulumi.RegisterOutputType(TemplateDateDimensionFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateMeasureFieldOutput{})
	pulumi.RegisterOutputType(TemplateDateMeasureFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeDefaultValuesOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeHierarchyOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeHierarchyPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeParameterDeclarationOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeParameterDeclarationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateTimePickerControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDateTimePickerControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeValueWhenUnsetConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDateTimeValueWhenUnsetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDecimalDefaultValuesOutput{})
	pulumi.RegisterOutputType(TemplateDecimalDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(TemplateDecimalParameterDeclarationOutput{})
	pulumi.RegisterOutputType(TemplateDecimalParameterDeclarationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDecimalPlacesConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDecimalPlacesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDecimalValueWhenUnsetConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDecimalValueWhenUnsetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultDateTimePickerControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultDateTimePickerControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterControlConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterControlConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterDropDownControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterDropDownControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterListControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFilterListControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFreeFormLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDefaultFreeFormLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultGridLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDefaultGridLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultInteractiveLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDefaultInteractiveLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultNewSheetConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDefaultNewSheetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultPaginatedLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDefaultPaginatedLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultRelativeDateTimeControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultRelativeDateTimeControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultSectionBasedLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDefaultSectionBasedLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultSliderControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultSliderControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultTextAreaControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultTextAreaControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDefaultTextFieldControlOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDefaultTextFieldControlOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDestinationParameterValueConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateDimensionFieldOutput{})
	pulumi.RegisterOutputType(TemplateDimensionFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateDimensionFieldArrayOutput{})
	pulumi.RegisterOutputType(TemplateDonutCenterOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDonutCenterOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDonutOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDonutOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDrillDownFilterOutput{})
	pulumi.RegisterOutputType(TemplateDrillDownFilterArrayOutput{})
	pulumi.RegisterOutputType(TemplateDropDownControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateDropDownControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateDynamicDefaultValueOutput{})
	pulumi.RegisterOutputType(TemplateDynamicDefaultValuePtrOutput{})
	pulumi.RegisterOutputType(TemplateEmptyVisualOutput{})
	pulumi.RegisterOutputType(TemplateEmptyVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateEntityOutput{})
	pulumi.RegisterOutputType(TemplateEntityArrayOutput{})
	pulumi.RegisterOutputType(TemplateErrorOutput{})
	pulumi.RegisterOutputType(TemplateErrorArrayOutput{})
	pulumi.RegisterOutputType(TemplateExcludePeriodConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateExcludePeriodConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateExplicitHierarchyOutput{})
	pulumi.RegisterOutputType(TemplateExplicitHierarchyPtrOutput{})
	pulumi.RegisterOutputType(TemplateFieldBasedTooltipOutput{})
	pulumi.RegisterOutputType(TemplateFieldBasedTooltipPtrOutput{})
	pulumi.RegisterOutputType(TemplateFieldLabelTypeOutput{})
	pulumi.RegisterOutputType(TemplateFieldLabelTypePtrOutput{})
	pulumi.RegisterOutputType(TemplateFieldSeriesItemOutput{})
	pulumi.RegisterOutputType(TemplateFieldSeriesItemPtrOutput{})
	pulumi.RegisterOutputType(TemplateFieldSortOutput{})
	pulumi.RegisterOutputType(TemplateFieldSortPtrOutput{})
	pulumi.RegisterOutputType(TemplateFieldSortOptionsOutput{})
	pulumi.RegisterOutputType(TemplateFieldSortOptionsArrayOutput{})
	pulumi.RegisterOutputType(TemplateFieldTooltipItemOutput{})
	pulumi.RegisterOutputType(TemplateFieldTooltipItemPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapConditionalFormattingOptionOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapConditionalFormattingOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapShapeConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapVisualOutput{})
	pulumi.RegisterOutputType(TemplateFilledMapVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterOutput{})
	pulumi.RegisterOutputType(TemplateFilterArrayOutput{})
	pulumi.RegisterOutputType(TemplateFilterControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterControlArrayOutput{})
	pulumi.RegisterOutputType(TemplateFilterCrossSheetControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterCrossSheetControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterDateTimePickerControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterDateTimePickerControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterDropDownControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterDropDownControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterGroupOutput{})
	pulumi.RegisterOutputType(TemplateFilterGroupArrayOutput{})
	pulumi.RegisterOutputType(TemplateFilterListConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFilterListConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterListControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterListControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterOperationSelectedFieldsConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFilterOperationSelectedFieldsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterOperationTargetVisualsConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFilterOperationTargetVisualsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterRelativeDateTimeControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterRelativeDateTimeControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterScopeConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFilterSelectableValuesOutput{})
	pulumi.RegisterOutputType(TemplateFilterSelectableValuesPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterSliderControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterSliderControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterTextAreaControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterTextAreaControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFilterTextFieldControlOutput{})
	pulumi.RegisterOutputType(TemplateFilterTextFieldControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateFontConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFontConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFontSizeOutput{})
	pulumi.RegisterOutputType(TemplateFontSizePtrOutput{})
	pulumi.RegisterOutputType(TemplateFontWeightOutput{})
	pulumi.RegisterOutputType(TemplateFontWeightPtrOutput{})
	pulumi.RegisterOutputType(TemplateForecastComputationOutput{})
	pulumi.RegisterOutputType(TemplateForecastComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateForecastConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateForecastConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateForecastScenarioOutput{})
	pulumi.RegisterOutputType(TemplateForecastScenarioPtrOutput{})
	pulumi.RegisterOutputType(TemplateFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutCanvasSizeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutCanvasSizeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutElementOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutElementArrayOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutElementBackgroundStyleOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutElementBackgroundStylePtrOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutElementBorderStyleOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutElementBorderStylePtrOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutScreenCanvasSizeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormLayoutScreenCanvasSizeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormSectionLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFreeFormSectionLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartDataLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartDataLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartVisualOutput{})
	pulumi.RegisterOutputType(TemplateFunnelChartVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartArcConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartArcConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartColorConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartColorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartConditionalFormattingOptionOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartConditionalFormattingOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartOptionsOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartPrimaryValueConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartPrimaryValueConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartVisualOutput{})
	pulumi.RegisterOutputType(TemplateGaugeChartVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialCoordinateBoundsOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialCoordinateBoundsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialHeatmapColorScaleOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialHeatmapColorScalePtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialHeatmapConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialHeatmapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialHeatmapDataColorOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialHeatmapDataColorArrayOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapStyleOptionsOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapStyleOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapVisualOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialMapVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialPointStyleOptionsOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialPointStyleOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialWindowOptionsOutput{})
	pulumi.RegisterOutputType(TemplateGeospatialWindowOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGlobalTableBorderOptionsOutput{})
	pulumi.RegisterOutputType(TemplateGlobalTableBorderOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGradientColorOutput{})
	pulumi.RegisterOutputType(TemplateGradientColorPtrOutput{})
	pulumi.RegisterOutputType(TemplateGradientStopOutput{})
	pulumi.RegisterOutputType(TemplateGradientStopArrayOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutCanvasSizeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutCanvasSizeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutElementOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutElementArrayOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutScreenCanvasSizeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateGridLayoutScreenCanvasSizeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateGrowthRateComputationOutput{})
	pulumi.RegisterOutputType(TemplateGrowthRateComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateHeaderFooterSectionConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateHeaderFooterSectionConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapVisualOutput{})
	pulumi.RegisterOutputType(TemplateHeatMapVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateHistogramAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateHistogramAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateHistogramBinOptionsOutput{})
	pulumi.RegisterOutputType(TemplateHistogramBinOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateHistogramConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateHistogramConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateHistogramFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateHistogramFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateHistogramVisualOutput{})
	pulumi.RegisterOutputType(TemplateHistogramVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateImageCustomActionOutput{})
	pulumi.RegisterOutputType(TemplateImageCustomActionArrayOutput{})
	pulumi.RegisterOutputType(TemplateImageCustomActionOperationOutput{})
	pulumi.RegisterOutputType(TemplateImageCustomActionOperationArrayOutput{})
	pulumi.RegisterOutputType(TemplateImageInteractionOptionsOutput{})
	pulumi.RegisterOutputType(TemplateImageInteractionOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateImageMenuOptionOutput{})
	pulumi.RegisterOutputType(TemplateImageMenuOptionPtrOutput{})
	pulumi.RegisterOutputType(TemplateInnerFilterOutput{})
	pulumi.RegisterOutputType(TemplateInnerFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateInsightConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateInsightConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateInsightVisualOutput{})
	pulumi.RegisterOutputType(TemplateInsightVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateIntegerDefaultValuesOutput{})
	pulumi.RegisterOutputType(TemplateIntegerDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(TemplateIntegerParameterDeclarationOutput{})
	pulumi.RegisterOutputType(TemplateIntegerParameterDeclarationPtrOutput{})
	pulumi.RegisterOutputType(TemplateIntegerValueWhenUnsetConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateIntegerValueWhenUnsetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateItemsLimitConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateItemsLimitConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiActualValueConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateKpiActualValueConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiComparisonValueConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateKpiComparisonValueConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateKpiConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiConditionalFormattingOptionOutput{})
	pulumi.RegisterOutputType(TemplateKpiConditionalFormattingOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateKpiConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateKpiConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateKpiFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiOptionsOutput{})
	pulumi.RegisterOutputType(TemplateKpiOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiPrimaryValueConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateKpiPrimaryValueConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiProgressBarConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateKpiProgressBarConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateKpiSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiSparklineOptionsOutput{})
	pulumi.RegisterOutputType(TemplateKpiSparklineOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiVisualOutput{})
	pulumi.RegisterOutputType(TemplateKpiVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiVisualLayoutOptionsOutput{})
	pulumi.RegisterOutputType(TemplateKpiVisualLayoutOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateKpiVisualStandardLayoutOutput{})
	pulumi.RegisterOutputType(TemplateKpiVisualStandardLayoutPtrOutput{})
	pulumi.RegisterOutputType(TemplateLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLayoutOutput{})
	pulumi.RegisterOutputType(TemplateLayoutArrayOutput{})
	pulumi.RegisterOutputType(TemplateLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateLegendOptionsOutput{})
	pulumi.RegisterOutputType(TemplateLegendOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateLineChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateLineChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartDefaultSeriesSettingsOutput{})
	pulumi.RegisterOutputType(TemplateLineChartDefaultSeriesSettingsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateLineChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartLineStyleSettingsOutput{})
	pulumi.RegisterOutputType(TemplateLineChartLineStyleSettingsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartMarkerStyleSettingsOutput{})
	pulumi.RegisterOutputType(TemplateLineChartMarkerStyleSettingsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartSeriesSettingsOutput{})
	pulumi.RegisterOutputType(TemplateLineChartSeriesSettingsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateLineChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineChartVisualOutput{})
	pulumi.RegisterOutputType(TemplateLineChartVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateLineSeriesAxisDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateLineSeriesAxisDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateListControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateListControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateListControlSearchOptionsOutput{})
	pulumi.RegisterOutputType(TemplateListControlSearchOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateListControlSelectAllOptionsOutput{})
	pulumi.RegisterOutputType(TemplateListControlSelectAllOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateLoadingAnimationOutput{})
	pulumi.RegisterOutputType(TemplateLoadingAnimationPtrOutput{})
	pulumi.RegisterOutputType(TemplateLocalNavigationConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateLocalNavigationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateLongFormatTextOutput{})
	pulumi.RegisterOutputType(TemplateLongFormatTextPtrOutput{})
	pulumi.RegisterOutputType(TemplateMappedDataSetParameterOutput{})
	pulumi.RegisterOutputType(TemplateMappedDataSetParameterArrayOutput{})
}
