// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::DataSet Resource Type.
type DataSet struct {
	pulumi.CustomResourceState

	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn          pulumi.StringOutput    `pulumi:"arn"`
	AwsAccountId pulumi.StringPtrOutput `pulumi:"awsAccountId"`
	// <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>
	ColumnGroups               DataSetColumnGroupArrayOutput               `pulumi:"columnGroups"`
	ColumnLevelPermissionRules DataSetColumnLevelPermissionRuleArrayOutput `pulumi:"columnLevelPermissionRules"`
	// <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't
	//             imported into SPICE.</p>
	ConsumedSpiceCapacityInBytes pulumi.Float64Output `pulumi:"consumedSpiceCapacityInBytes"`
	// <p>The time that this dataset was created.</p>
	CreatedTime               pulumi.StringOutput                `pulumi:"createdTime"`
	DataSetId                 pulumi.StringPtrOutput             `pulumi:"dataSetId"`
	DataSetRefreshProperties  DataSetRefreshPropertiesPtrOutput  `pulumi:"dataSetRefreshProperties"`
	DataSetUsageConfiguration DataSetUsageConfigurationPtrOutput `pulumi:"dataSetUsageConfiguration"`
	// <p>The parameters declared in the dataset.</p>
	DatasetParameters   DataSetDatasetParameterArrayOutput  `pulumi:"datasetParameters"`
	FieldFolders        DataSetFieldFolderMapOutput         `pulumi:"fieldFolders"`
	ImportMode          DataSetImportModePtrOutput          `pulumi:"importMode"`
	IngestionWaitPolicy DataSetIngestionWaitPolicyPtrOutput `pulumi:"ingestionWaitPolicy"`
	// <p>The last time that this dataset was updated.</p>
	LastUpdatedTime pulumi.StringOutput          `pulumi:"lastUpdatedTime"`
	LogicalTableMap DataSetLogicalTableMapOutput `pulumi:"logicalTableMap"`
	// <p>The display name for the dataset.</p>
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// <p>The list of columns after all transforms. These columns are available in templates,
	//             analyses, and dashboards.</p>
	OutputColumns DataSetOutputColumnArrayOutput `pulumi:"outputColumns"`
	// <p>A list of resource permissions on the dataset.</p>
	Permissions                        DataSetResourcePermissionArrayOutput               `pulumi:"permissions"`
	PhysicalTableMap                   DataSetPhysicalTableMapOutput                      `pulumi:"physicalTableMap"`
	RowLevelPermissionDataSet          DataSetRowLevelPermissionDataSetPtrOutput          `pulumi:"rowLevelPermissionDataSet"`
	RowLevelPermissionTagConfiguration DataSetRowLevelPermissionTagConfigurationPtrOutput `pulumi:"rowLevelPermissionTagConfiguration"`
	// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDataSet registers a new resource with the given unique name, arguments, and options.
func NewDataSet(ctx *pulumi.Context,
	name string, args *DataSetArgs, opts ...pulumi.ResourceOption) (*DataSet, error) {
	if args == nil {
		args = &DataSetArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"awsAccountId",
		"dataSetId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSet
	err := ctx.RegisterResource("aws-native:quicksight:DataSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSet gets an existing DataSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSetState, opts ...pulumi.ResourceOption) (*DataSet, error) {
	var resource DataSet
	err := ctx.ReadResource("aws-native:quicksight:DataSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSet resources.
type dataSetState struct {
}

type DataSetState struct {
}

func (DataSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSetState)(nil)).Elem()
}

type dataSetArgs struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	// <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>
	ColumnGroups               []DataSetColumnGroup               `pulumi:"columnGroups"`
	ColumnLevelPermissionRules []DataSetColumnLevelPermissionRule `pulumi:"columnLevelPermissionRules"`
	DataSetId                  *string                            `pulumi:"dataSetId"`
	DataSetRefreshProperties   *DataSetRefreshProperties          `pulumi:"dataSetRefreshProperties"`
	DataSetUsageConfiguration  *DataSetUsageConfiguration         `pulumi:"dataSetUsageConfiguration"`
	// <p>The parameters declared in the dataset.</p>
	DatasetParameters   []DataSetDatasetParameter      `pulumi:"datasetParameters"`
	FieldFolders        map[string]DataSetFieldFolder  `pulumi:"fieldFolders"`
	ImportMode          *DataSetImportMode             `pulumi:"importMode"`
	IngestionWaitPolicy *DataSetIngestionWaitPolicy    `pulumi:"ingestionWaitPolicy"`
	LogicalTableMap     map[string]DataSetLogicalTable `pulumi:"logicalTableMap"`
	// <p>The display name for the dataset.</p>
	Name *string `pulumi:"name"`
	// <p>A list of resource permissions on the dataset.</p>
	Permissions                        []DataSetResourcePermission                `pulumi:"permissions"`
	PhysicalTableMap                   map[string]DataSetPhysicalTable            `pulumi:"physicalTableMap"`
	RowLevelPermissionDataSet          *DataSetRowLevelPermissionDataSet          `pulumi:"rowLevelPermissionDataSet"`
	RowLevelPermissionTagConfiguration *DataSetRowLevelPermissionTagConfiguration `pulumi:"rowLevelPermissionTagConfiguration"`
	// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a DataSet resource.
type DataSetArgs struct {
	AwsAccountId pulumi.StringPtrInput
	// <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>
	ColumnGroups               DataSetColumnGroupArrayInput
	ColumnLevelPermissionRules DataSetColumnLevelPermissionRuleArrayInput
	DataSetId                  pulumi.StringPtrInput
	DataSetRefreshProperties   DataSetRefreshPropertiesPtrInput
	DataSetUsageConfiguration  DataSetUsageConfigurationPtrInput
	// <p>The parameters declared in the dataset.</p>
	DatasetParameters   DataSetDatasetParameterArrayInput
	FieldFolders        DataSetFieldFolderMapInput
	ImportMode          DataSetImportModePtrInput
	IngestionWaitPolicy DataSetIngestionWaitPolicyPtrInput
	LogicalTableMap     DataSetLogicalTableMapInput
	// <p>The display name for the dataset.</p>
	Name pulumi.StringPtrInput
	// <p>A list of resource permissions on the dataset.</p>
	Permissions                        DataSetResourcePermissionArrayInput
	PhysicalTableMap                   DataSetPhysicalTableMapInput
	RowLevelPermissionDataSet          DataSetRowLevelPermissionDataSetPtrInput
	RowLevelPermissionTagConfiguration DataSetRowLevelPermissionTagConfigurationPtrInput
	// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
	Tags aws.TagArrayInput
}

func (DataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSetArgs)(nil)).Elem()
}

type DataSetInput interface {
	pulumi.Input

	ToDataSetOutput() DataSetOutput
	ToDataSetOutputWithContext(ctx context.Context) DataSetOutput
}

func (*DataSet) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSet)(nil)).Elem()
}

func (i *DataSet) ToDataSetOutput() DataSetOutput {
	return i.ToDataSetOutputWithContext(context.Background())
}

func (i *DataSet) ToDataSetOutputWithContext(ctx context.Context) DataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSetOutput)
}

type DataSetOutput struct{ *pulumi.OutputState }

func (DataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSet)(nil)).Elem()
}

func (o DataSetOutput) ToDataSetOutput() DataSetOutput {
	return o
}

func (o DataSetOutput) ToDataSetOutputWithContext(ctx context.Context) DataSetOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DataSetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DataSetOutput) AwsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringPtrOutput { return v.AwsAccountId }).(pulumi.StringPtrOutput)
}

// <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>
func (o DataSetOutput) ColumnGroups() DataSetColumnGroupArrayOutput {
	return o.ApplyT(func(v *DataSet) DataSetColumnGroupArrayOutput { return v.ColumnGroups }).(DataSetColumnGroupArrayOutput)
}

func (o DataSetOutput) ColumnLevelPermissionRules() DataSetColumnLevelPermissionRuleArrayOutput {
	return o.ApplyT(func(v *DataSet) DataSetColumnLevelPermissionRuleArrayOutput { return v.ColumnLevelPermissionRules }).(DataSetColumnLevelPermissionRuleArrayOutput)
}

// <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't
//
//	imported into SPICE.</p>
func (o DataSetOutput) ConsumedSpiceCapacityInBytes() pulumi.Float64Output {
	return o.ApplyT(func(v *DataSet) pulumi.Float64Output { return v.ConsumedSpiceCapacityInBytes }).(pulumi.Float64Output)
}

// <p>The time that this dataset was created.</p>
func (o DataSetOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o DataSetOutput) DataSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringPtrOutput { return v.DataSetId }).(pulumi.StringPtrOutput)
}

func (o DataSetOutput) DataSetRefreshProperties() DataSetRefreshPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSet) DataSetRefreshPropertiesPtrOutput { return v.DataSetRefreshProperties }).(DataSetRefreshPropertiesPtrOutput)
}

func (o DataSetOutput) DataSetUsageConfiguration() DataSetUsageConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSet) DataSetUsageConfigurationPtrOutput { return v.DataSetUsageConfiguration }).(DataSetUsageConfigurationPtrOutput)
}

// <p>The parameters declared in the dataset.</p>
func (o DataSetOutput) DatasetParameters() DataSetDatasetParameterArrayOutput {
	return o.ApplyT(func(v *DataSet) DataSetDatasetParameterArrayOutput { return v.DatasetParameters }).(DataSetDatasetParameterArrayOutput)
}

func (o DataSetOutput) FieldFolders() DataSetFieldFolderMapOutput {
	return o.ApplyT(func(v *DataSet) DataSetFieldFolderMapOutput { return v.FieldFolders }).(DataSetFieldFolderMapOutput)
}

func (o DataSetOutput) ImportMode() DataSetImportModePtrOutput {
	return o.ApplyT(func(v *DataSet) DataSetImportModePtrOutput { return v.ImportMode }).(DataSetImportModePtrOutput)
}

func (o DataSetOutput) IngestionWaitPolicy() DataSetIngestionWaitPolicyPtrOutput {
	return o.ApplyT(func(v *DataSet) DataSetIngestionWaitPolicyPtrOutput { return v.IngestionWaitPolicy }).(DataSetIngestionWaitPolicyPtrOutput)
}

// <p>The last time that this dataset was updated.</p>
func (o DataSetOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

func (o DataSetOutput) LogicalTableMap() DataSetLogicalTableMapOutput {
	return o.ApplyT(func(v *DataSet) DataSetLogicalTableMapOutput { return v.LogicalTableMap }).(DataSetLogicalTableMapOutput)
}

// <p>The display name for the dataset.</p>
func (o DataSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSet) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The list of columns after all transforms. These columns are available in templates,
//
//	analyses, and dashboards.</p>
func (o DataSetOutput) OutputColumns() DataSetOutputColumnArrayOutput {
	return o.ApplyT(func(v *DataSet) DataSetOutputColumnArrayOutput { return v.OutputColumns }).(DataSetOutputColumnArrayOutput)
}

// <p>A list of resource permissions on the dataset.</p>
func (o DataSetOutput) Permissions() DataSetResourcePermissionArrayOutput {
	return o.ApplyT(func(v *DataSet) DataSetResourcePermissionArrayOutput { return v.Permissions }).(DataSetResourcePermissionArrayOutput)
}

func (o DataSetOutput) PhysicalTableMap() DataSetPhysicalTableMapOutput {
	return o.ApplyT(func(v *DataSet) DataSetPhysicalTableMapOutput { return v.PhysicalTableMap }).(DataSetPhysicalTableMapOutput)
}

func (o DataSetOutput) RowLevelPermissionDataSet() DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ApplyT(func(v *DataSet) DataSetRowLevelPermissionDataSetPtrOutput { return v.RowLevelPermissionDataSet }).(DataSetRowLevelPermissionDataSetPtrOutput)
}

func (o DataSetOutput) RowLevelPermissionTagConfiguration() DataSetRowLevelPermissionTagConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSet) DataSetRowLevelPermissionTagConfigurationPtrOutput {
		return v.RowLevelPermissionTagConfiguration
	}).(DataSetRowLevelPermissionTagConfigurationPtrOutput)
}

// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
func (o DataSetOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DataSet) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetInput)(nil)).Elem(), &DataSet{})
	pulumi.RegisterOutputType(DataSetOutput{})
}
