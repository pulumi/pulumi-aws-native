// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::DataSource Resource Type.
type DataSource struct {
	pulumi.CustomResourceState

	// <p>A set of alternate data source parameters that you want to share for the credentials
	//             stored with this data source. The credentials are applied in tandem with the data source
	//             parameters when you copy a data source by using a create or update request. The API
	//             operation compares the <code>DataSourceParameters</code> structure that's in the request
	//             with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the
	//             structures are an exact match, the request is allowed to use the credentials from this
	//             existing data source. If the <code>AlternateDataSourceParameters</code> list is null,
	//             the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>
	//             are automatically allowed.</p>
	AlternateDataSourceParameters DataSourceParametersArrayOutput `pulumi:"alternateDataSourceParameters"`
	// <p>The Amazon Resource Name (ARN) of the data source.</p>
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The AWS account ID.
	AwsAccountId pulumi.StringPtrOutput `pulumi:"awsAccountId"`
	// <p>The time that this data source was created.</p>
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The credentials Amazon QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported.
	Credentials DataSourceCredentialsPtrOutput `pulumi:"credentials"`
	// An ID for the data source. This ID is unique per AWS Region for each AWS account.
	DataSourceId pulumi.StringPtrOutput `pulumi:"dataSourceId"`
	// The parameters that Amazon QuickSight uses to connect to your underlying source.
	DataSourceParameters DataSourceParametersPtrOutput `pulumi:"dataSourceParameters"`
	// Error information from the last update or the creation of the data source.
	ErrorInfo DataSourceErrorInfoPtrOutput `pulumi:"errorInfo"`
	// <p>The last time that this data source was updated.</p>
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// A display name for the data source.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of resource permissions on the data source.
	Permissions DataSourceResourcePermissionArrayOutput `pulumi:"permissions"`
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.
	SslProperties DataSourceSslPropertiesPtrOutput `pulumi:"sslProperties"`
	// The HTTP status of the request.
	Status DataSourceResourceStatusOutput `pulumi:"status"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of the data source. To return a list of all data sources, use `ListDataSources` .
	//
	// Use `AMAZON_ELASTICSEARCH` for Amazon OpenSearch Service.
	Type DataSourceTypeOutput `pulumi:"type"`
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.
	VpcConnectionProperties DataSourceVpcConnectionPropertiesPtrOutput `pulumi:"vpcConnectionProperties"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"awsAccountId",
		"dataSourceId",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws-native:quicksight:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws-native:quicksight:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
}

type DataSourceState struct {
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// <p>A set of alternate data source parameters that you want to share for the credentials
	//             stored with this data source. The credentials are applied in tandem with the data source
	//             parameters when you copy a data source by using a create or update request. The API
	//             operation compares the <code>DataSourceParameters</code> structure that's in the request
	//             with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the
	//             structures are an exact match, the request is allowed to use the credentials from this
	//             existing data source. If the <code>AlternateDataSourceParameters</code> list is null,
	//             the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>
	//             are automatically allowed.</p>
	AlternateDataSourceParameters []DataSourceParameters `pulumi:"alternateDataSourceParameters"`
	// The AWS account ID.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The credentials Amazon QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported.
	Credentials *DataSourceCredentials `pulumi:"credentials"`
	// An ID for the data source. This ID is unique per AWS Region for each AWS account.
	DataSourceId *string `pulumi:"dataSourceId"`
	// The parameters that Amazon QuickSight uses to connect to your underlying source.
	DataSourceParameters *DataSourceParameters `pulumi:"dataSourceParameters"`
	// Error information from the last update or the creation of the data source.
	ErrorInfo *DataSourceErrorInfo `pulumi:"errorInfo"`
	// A display name for the data source.
	Name *string `pulumi:"name"`
	// A list of resource permissions on the data source.
	Permissions []DataSourceResourcePermission `pulumi:"permissions"`
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.
	SslProperties *DataSourceSslProperties `pulumi:"sslProperties"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.
	Tags []aws.Tag `pulumi:"tags"`
	// The type of the data source. To return a list of all data sources, use `ListDataSources` .
	//
	// Use `AMAZON_ELASTICSEARCH` for Amazon OpenSearch Service.
	Type DataSourceType `pulumi:"type"`
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.
	VpcConnectionProperties *DataSourceVpcConnectionProperties `pulumi:"vpcConnectionProperties"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// <p>A set of alternate data source parameters that you want to share for the credentials
	//             stored with this data source. The credentials are applied in tandem with the data source
	//             parameters when you copy a data source by using a create or update request. The API
	//             operation compares the <code>DataSourceParameters</code> structure that's in the request
	//             with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the
	//             structures are an exact match, the request is allowed to use the credentials from this
	//             existing data source. If the <code>AlternateDataSourceParameters</code> list is null,
	//             the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>
	//             are automatically allowed.</p>
	AlternateDataSourceParameters DataSourceParametersArrayInput
	// The AWS account ID.
	AwsAccountId pulumi.StringPtrInput
	// The credentials Amazon QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported.
	Credentials DataSourceCredentialsPtrInput
	// An ID for the data source. This ID is unique per AWS Region for each AWS account.
	DataSourceId pulumi.StringPtrInput
	// The parameters that Amazon QuickSight uses to connect to your underlying source.
	DataSourceParameters DataSourceParametersPtrInput
	// Error information from the last update or the creation of the data source.
	ErrorInfo DataSourceErrorInfoPtrInput
	// A display name for the data source.
	Name pulumi.StringPtrInput
	// A list of resource permissions on the data source.
	Permissions DataSourceResourcePermissionArrayInput
	// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.
	SslProperties DataSourceSslPropertiesPtrInput
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.
	Tags aws.TagArrayInput
	// The type of the data source. To return a list of all data sources, use `ListDataSources` .
	//
	// Use `AMAZON_ELASTICSEARCH` for Amazon OpenSearch Service.
	Type DataSourceTypeInput
	// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.
	VpcConnectionProperties DataSourceVpcConnectionPropertiesPtrInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

// <p>A set of alternate data source parameters that you want to share for the credentials
//
//	stored with this data source. The credentials are applied in tandem with the data source
//	parameters when you copy a data source by using a create or update request. The API
//	operation compares the <code>DataSourceParameters</code> structure that's in the request
//	with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the
//	structures are an exact match, the request is allowed to use the credentials from this
//	existing data source. If the <code>AlternateDataSourceParameters</code> list is null,
//	the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>
//	are automatically allowed.</p>
func (o DataSourceOutput) AlternateDataSourceParameters() DataSourceParametersArrayOutput {
	return o.ApplyT(func(v *DataSource) DataSourceParametersArrayOutput { return v.AlternateDataSourceParameters }).(DataSourceParametersArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the data source.</p>
func (o DataSourceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The AWS account ID.
func (o DataSourceOutput) AwsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.AwsAccountId }).(pulumi.StringPtrOutput)
}

// <p>The time that this data source was created.</p>
func (o DataSourceOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The credentials Amazon QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported.
func (o DataSourceOutput) Credentials() DataSourceCredentialsPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceCredentialsPtrOutput { return v.Credentials }).(DataSourceCredentialsPtrOutput)
}

// An ID for the data source. This ID is unique per AWS Region for each AWS account.
func (o DataSourceOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.DataSourceId }).(pulumi.StringPtrOutput)
}

// The parameters that Amazon QuickSight uses to connect to your underlying source.
func (o DataSourceOutput) DataSourceParameters() DataSourceParametersPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceParametersPtrOutput { return v.DataSourceParameters }).(DataSourceParametersPtrOutput)
}

// Error information from the last update or the creation of the data source.
func (o DataSourceOutput) ErrorInfo() DataSourceErrorInfoPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceErrorInfoPtrOutput { return v.ErrorInfo }).(DataSourceErrorInfoPtrOutput)
}

// <p>The last time that this data source was updated.</p>
func (o DataSourceOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// A display name for the data source.
func (o DataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of resource permissions on the data source.
func (o DataSourceOutput) Permissions() DataSourceResourcePermissionArrayOutput {
	return o.ApplyT(func(v *DataSource) DataSourceResourcePermissionArrayOutput { return v.Permissions }).(DataSourceResourcePermissionArrayOutput)
}

// Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source.
func (o DataSourceOutput) SslProperties() DataSourceSslPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceSslPropertiesPtrOutput { return v.SslProperties }).(DataSourceSslPropertiesPtrOutput)
}

// The HTTP status of the request.
func (o DataSourceOutput) Status() DataSourceResourceStatusOutput {
	return o.ApplyT(func(v *DataSource) DataSourceResourceStatusOutput { return v.Status }).(DataSourceResourceStatusOutput)
}

// Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.
func (o DataSourceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DataSource) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of the data source. To return a list of all data sources, use `ListDataSources` .
//
// Use `AMAZON_ELASTICSEARCH` for Amazon OpenSearch Service.
func (o DataSourceOutput) Type() DataSourceTypeOutput {
	return o.ApplyT(func(v *DataSource) DataSourceTypeOutput { return v.Type }).(DataSourceTypeOutput)
}

// Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source.
func (o DataSourceOutput) VpcConnectionProperties() DataSourceVpcConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceVpcConnectionPropertiesPtrOutput { return v.VpcConnectionProperties }).(DataSourceVpcConnectionPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceInput)(nil)).Elem(), &DataSource{})
	pulumi.RegisterOutputType(DataSourceOutput{})
}
