// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::Folder Resource Type.
type Folder struct {
	pulumi.CustomResourceState

	// <p>The Amazon Resource Name (ARN) for the folder.</p>
	Arn          pulumi.StringOutput    `pulumi:"arn"`
	AwsAccountId pulumi.StringPtrOutput `pulumi:"awsAccountId"`
	// <p>The time that the folder was created.</p>
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The ID of the folder.
	FolderId pulumi.StringPtrOutput `pulumi:"folderId"`
	// The type of folder it is.
	FolderType FolderTypePtrOutput `pulumi:"folderType"`
	// <p>The time that the folder was last updated.</p>
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// A display name for the folder.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// A new parent folder arn. This change can only be applied if the import creates a brand new folder. Existing folders cannot be moved.
	ParentFolderArn pulumi.StringPtrOutput              `pulumi:"parentFolderArn"`
	Permissions     FolderResourcePermissionArrayOutput `pulumi:"permissions"`
	// The sharing scope of the folder.
	SharingModel FolderSharingModelPtrOutput `pulumi:"sharingModel"`
	// A list of tags for the folders that you want to apply overrides to.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewFolder registers a new resource with the given unique name, arguments, and options.
func NewFolder(ctx *pulumi.Context,
	name string, args *FolderArgs, opts ...pulumi.ResourceOption) (*Folder, error) {
	if args == nil {
		args = &FolderArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"awsAccountId",
		"folderId",
		"folderType",
		"parentFolderArn",
		"sharingModel",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Folder
	err := ctx.RegisterResource("aws-native:quicksight:Folder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolder gets an existing Folder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderState, opts ...pulumi.ResourceOption) (*Folder, error) {
	var resource Folder
	err := ctx.ReadResource("aws-native:quicksight:Folder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Folder resources.
type folderState struct {
}

type FolderState struct {
}

func (FolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderState)(nil)).Elem()
}

type folderArgs struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The ID of the folder.
	FolderId *string `pulumi:"folderId"`
	// The type of folder it is.
	FolderType *FolderType `pulumi:"folderType"`
	// A display name for the folder.
	Name *string `pulumi:"name"`
	// A new parent folder arn. This change can only be applied if the import creates a brand new folder. Existing folders cannot be moved.
	ParentFolderArn *string                    `pulumi:"parentFolderArn"`
	Permissions     []FolderResourcePermission `pulumi:"permissions"`
	// The sharing scope of the folder.
	SharingModel *FolderSharingModel `pulumi:"sharingModel"`
	// A list of tags for the folders that you want to apply overrides to.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Folder resource.
type FolderArgs struct {
	AwsAccountId pulumi.StringPtrInput
	// The ID of the folder.
	FolderId pulumi.StringPtrInput
	// The type of folder it is.
	FolderType FolderTypePtrInput
	// A display name for the folder.
	Name pulumi.StringPtrInput
	// A new parent folder arn. This change can only be applied if the import creates a brand new folder. Existing folders cannot be moved.
	ParentFolderArn pulumi.StringPtrInput
	Permissions     FolderResourcePermissionArrayInput
	// The sharing scope of the folder.
	SharingModel FolderSharingModelPtrInput
	// A list of tags for the folders that you want to apply overrides to.
	Tags aws.TagArrayInput
}

func (FolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderArgs)(nil)).Elem()
}

type FolderInput interface {
	pulumi.Input

	ToFolderOutput() FolderOutput
	ToFolderOutputWithContext(ctx context.Context) FolderOutput
}

func (*Folder) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (i *Folder) ToFolderOutput() FolderOutput {
	return i.ToFolderOutputWithContext(context.Background())
}

func (i *Folder) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderOutput)
}

type FolderOutput struct{ *pulumi.OutputState }

func (FolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (o FolderOutput) ToFolderOutput() FolderOutput {
	return o
}

func (o FolderOutput) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) for the folder.</p>
func (o FolderOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FolderOutput) AwsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringPtrOutput { return v.AwsAccountId }).(pulumi.StringPtrOutput)
}

// <p>The time that the folder was created.</p>
func (o FolderOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The ID of the folder.
func (o FolderOutput) FolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringPtrOutput { return v.FolderId }).(pulumi.StringPtrOutput)
}

// The type of folder it is.
func (o FolderOutput) FolderType() FolderTypePtrOutput {
	return o.ApplyT(func(v *Folder) FolderTypePtrOutput { return v.FolderType }).(FolderTypePtrOutput)
}

// <p>The time that the folder was last updated.</p>
func (o FolderOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// A display name for the folder.
func (o FolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// A new parent folder arn. This change can only be applied if the import creates a brand new folder. Existing folders cannot be moved.
func (o FolderOutput) ParentFolderArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringPtrOutput { return v.ParentFolderArn }).(pulumi.StringPtrOutput)
}

func (o FolderOutput) Permissions() FolderResourcePermissionArrayOutput {
	return o.ApplyT(func(v *Folder) FolderResourcePermissionArrayOutput { return v.Permissions }).(FolderResourcePermissionArrayOutput)
}

// The sharing scope of the folder.
func (o FolderOutput) SharingModel() FolderSharingModelPtrOutput {
	return o.ApplyT(func(v *Folder) FolderSharingModelPtrOutput { return v.SharingModel }).(FolderSharingModelPtrOutput)
}

// A list of tags for the folders that you want to apply overrides to.
func (o FolderOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Folder) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderInput)(nil)).Elem(), &Folder{})
	pulumi.RegisterOutputType(FolderOutput{})
}
