// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type TopicSemanticType struct {
	FalseyCellValue         *string              `pulumi:"falseyCellValue"`
	FalseyCellValueSynonyms []string             `pulumi:"falseyCellValueSynonyms"`
	SubTypeName             *string              `pulumi:"subTypeName"`
	TruthyCellValue         *string              `pulumi:"truthyCellValue"`
	TruthyCellValueSynonyms []string             `pulumi:"truthyCellValueSynonyms"`
	TypeName                *string              `pulumi:"typeName"`
	TypeParameters          *TopicTypeParameters `pulumi:"typeParameters"`
}

// TopicSemanticTypeInput is an input type that accepts TopicSemanticTypeArgs and TopicSemanticTypeOutput values.
// You can construct a concrete instance of `TopicSemanticTypeInput` via:
//
//	TopicSemanticTypeArgs{...}
type TopicSemanticTypeInput interface {
	pulumi.Input

	ToTopicSemanticTypeOutput() TopicSemanticTypeOutput
	ToTopicSemanticTypeOutputWithContext(context.Context) TopicSemanticTypeOutput
}

type TopicSemanticTypeArgs struct {
	FalseyCellValue         pulumi.StringPtrInput       `pulumi:"falseyCellValue"`
	FalseyCellValueSynonyms pulumi.StringArrayInput     `pulumi:"falseyCellValueSynonyms"`
	SubTypeName             pulumi.StringPtrInput       `pulumi:"subTypeName"`
	TruthyCellValue         pulumi.StringPtrInput       `pulumi:"truthyCellValue"`
	TruthyCellValueSynonyms pulumi.StringArrayInput     `pulumi:"truthyCellValueSynonyms"`
	TypeName                pulumi.StringPtrInput       `pulumi:"typeName"`
	TypeParameters          TopicTypeParametersPtrInput `pulumi:"typeParameters"`
}

func (TopicSemanticTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return i.ToTopicSemanticTypeOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput)
}

func (i TopicSemanticTypeArgs) ToOutput(ctx context.Context) pulumix.Output[TopicSemanticType] {
	return pulumix.Output[TopicSemanticType]{
		OutputState: i.ToTopicSemanticTypeOutputWithContext(ctx).OutputState,
	}
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput).ToTopicSemanticTypePtrOutputWithContext(ctx)
}

// TopicSemanticTypePtrInput is an input type that accepts TopicSemanticTypeArgs, TopicSemanticTypePtr and TopicSemanticTypePtrOutput values.
// You can construct a concrete instance of `TopicSemanticTypePtrInput` via:
//
//	        TopicSemanticTypeArgs{...}
//
//	or:
//
//	        nil
type TopicSemanticTypePtrInput interface {
	pulumi.Input

	ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput
	ToTopicSemanticTypePtrOutputWithContext(context.Context) TopicSemanticTypePtrOutput
}

type topicSemanticTypePtrType TopicSemanticTypeArgs

func TopicSemanticTypePtr(v *TopicSemanticTypeArgs) TopicSemanticTypePtrInput {
	return (*topicSemanticTypePtrType)(v)
}

func (*topicSemanticTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypePtrOutput)
}

func (i *topicSemanticTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicSemanticType] {
	return pulumix.Output[*TopicSemanticType]{
		OutputState: i.ToTopicSemanticTypePtrOutputWithContext(ctx).OutputState,
	}
}

type TopicSemanticTypeOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSemanticType) *TopicSemanticType {
		return &v
	}).(TopicSemanticTypePtrOutput)
}

func (o TopicSemanticTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TopicSemanticType] {
	return pulumix.Output[TopicSemanticType]{
		OutputState: o.OutputState,
	}
}

func (o TopicSemanticTypeOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.FalseyCellValue }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.FalseyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypeOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.SubTypeName }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TruthyCellValue }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.TruthyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypeOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) TypeParameters() TopicTypeParametersPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *TopicTypeParameters { return v.TypeParameters }).(TopicTypeParametersPtrOutput)
}

type TopicSemanticTypePtrOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicSemanticType] {
	return pulumix.Output[*TopicSemanticType]{
		OutputState: o.OutputState,
	}
}

func (o TopicSemanticTypePtrOutput) Elem() TopicSemanticTypeOutput {
	return o.ApplyT(func(v *TopicSemanticType) TopicSemanticType {
		if v != nil {
			return *v
		}
		var ret TopicSemanticType
		return ret
	}).(TopicSemanticTypeOutput)
}

func (o TopicSemanticTypePtrOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValue
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypePtrOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.SubTypeName
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValue
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) TypeParameters() TopicTypeParametersPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *TopicTypeParameters {
		if v == nil {
			return nil
		}
		return v.TypeParameters
	}).(TopicTypeParametersPtrOutput)
}

type TopicSingularFilterConstant struct {
	ConstantType     *TopicConstantType `pulumi:"constantType"`
	SingularConstant *string            `pulumi:"singularConstant"`
}

// TopicSingularFilterConstantInput is an input type that accepts TopicSingularFilterConstantArgs and TopicSingularFilterConstantOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantInput` via:
//
//	TopicSingularFilterConstantArgs{...}
type TopicSingularFilterConstantInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput
	ToTopicSingularFilterConstantOutputWithContext(context.Context) TopicSingularFilterConstantOutput
}

type TopicSingularFilterConstantArgs struct {
	ConstantType     TopicConstantTypePtrInput `pulumi:"constantType"`
	SingularConstant pulumi.StringPtrInput     `pulumi:"singularConstant"`
}

func (TopicSingularFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return i.ToTopicSingularFilterConstantOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput)
}

func (i TopicSingularFilterConstantArgs) ToOutput(ctx context.Context) pulumix.Output[TopicSingularFilterConstant] {
	return pulumix.Output[TopicSingularFilterConstant]{
		OutputState: i.ToTopicSingularFilterConstantOutputWithContext(ctx).OutputState,
	}
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput).ToTopicSingularFilterConstantPtrOutputWithContext(ctx)
}

// TopicSingularFilterConstantPtrInput is an input type that accepts TopicSingularFilterConstantArgs, TopicSingularFilterConstantPtr and TopicSingularFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantPtrInput` via:
//
//	        TopicSingularFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicSingularFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput
	ToTopicSingularFilterConstantPtrOutputWithContext(context.Context) TopicSingularFilterConstantPtrOutput
}

type topicSingularFilterConstantPtrType TopicSingularFilterConstantArgs

func TopicSingularFilterConstantPtr(v *TopicSingularFilterConstantArgs) TopicSingularFilterConstantPtrInput {
	return (*topicSingularFilterConstantPtrType)(v)
}

func (*topicSingularFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantPtrOutput)
}

func (i *topicSingularFilterConstantPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicSingularFilterConstant] {
	return pulumix.Output[*TopicSingularFilterConstant]{
		OutputState: i.ToTopicSingularFilterConstantPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicSingularFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSingularFilterConstant) *TopicSingularFilterConstant {
		return &v
	}).(TopicSingularFilterConstantPtrOutput)
}

func (o TopicSingularFilterConstantOutput) ToOutput(ctx context.Context) pulumix.Output[TopicSingularFilterConstant] {
	return pulumix.Output[TopicSingularFilterConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicSingularFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

func (o TopicSingularFilterConstantOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *string { return v.SingularConstant }).(pulumi.StringPtrOutput)
}

type TopicSingularFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicSingularFilterConstant] {
	return pulumix.Output[*TopicSingularFilterConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicSingularFilterConstantPtrOutput) Elem() TopicSingularFilterConstantOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) TopicSingularFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicSingularFilterConstant
		return ret
	}).(TopicSingularFilterConstantOutput)
}

func (o TopicSingularFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

func (o TopicSingularFilterConstantPtrOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *string {
		if v == nil {
			return nil
		}
		return v.SingularConstant
	}).(pulumi.StringPtrOutput)
}

type TopicTypeParameters struct {
}

// TopicTypeParametersInput is an input type that accepts TopicTypeParametersArgs and TopicTypeParametersOutput values.
// You can construct a concrete instance of `TopicTypeParametersInput` via:
//
//	TopicTypeParametersArgs{...}
type TopicTypeParametersInput interface {
	pulumi.Input

	ToTopicTypeParametersOutput() TopicTypeParametersOutput
	ToTopicTypeParametersOutputWithContext(context.Context) TopicTypeParametersOutput
}

type TopicTypeParametersArgs struct {
}

func (TopicTypeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicTypeParameters)(nil)).Elem()
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersOutput() TopicTypeParametersOutput {
	return i.ToTopicTypeParametersOutputWithContext(context.Background())
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersOutputWithContext(ctx context.Context) TopicTypeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeParametersOutput)
}

func (i TopicTypeParametersArgs) ToOutput(ctx context.Context) pulumix.Output[TopicTypeParameters] {
	return pulumix.Output[TopicTypeParameters]{
		OutputState: i.ToTopicTypeParametersOutputWithContext(ctx).OutputState,
	}
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return i.ToTopicTypeParametersPtrOutputWithContext(context.Background())
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeParametersOutput).ToTopicTypeParametersPtrOutputWithContext(ctx)
}

// TopicTypeParametersPtrInput is an input type that accepts TopicTypeParametersArgs, TopicTypeParametersPtr and TopicTypeParametersPtrOutput values.
// You can construct a concrete instance of `TopicTypeParametersPtrInput` via:
//
//	        TopicTypeParametersArgs{...}
//
//	or:
//
//	        nil
type TopicTypeParametersPtrInput interface {
	pulumi.Input

	ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput
	ToTopicTypeParametersPtrOutputWithContext(context.Context) TopicTypeParametersPtrOutput
}

type topicTypeParametersPtrType TopicTypeParametersArgs

func TopicTypeParametersPtr(v *TopicTypeParametersArgs) TopicTypeParametersPtrInput {
	return (*topicTypeParametersPtrType)(v)
}

func (*topicTypeParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicTypeParameters)(nil)).Elem()
}

func (i *topicTypeParametersPtrType) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return i.ToTopicTypeParametersPtrOutputWithContext(context.Background())
}

func (i *topicTypeParametersPtrType) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeParametersPtrOutput)
}

func (i *topicTypeParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicTypeParameters] {
	return pulumix.Output[*TopicTypeParameters]{
		OutputState: i.ToTopicTypeParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicTypeParametersOutput struct{ *pulumi.OutputState }

func (TopicTypeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicTypeParameters)(nil)).Elem()
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersOutput() TopicTypeParametersOutput {
	return o
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersOutputWithContext(ctx context.Context) TopicTypeParametersOutput {
	return o
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return o.ToTopicTypeParametersPtrOutputWithContext(context.Background())
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicTypeParameters) *TopicTypeParameters {
		return &v
	}).(TopicTypeParametersPtrOutput)
}

func (o TopicTypeParametersOutput) ToOutput(ctx context.Context) pulumix.Output[TopicTypeParameters] {
	return pulumix.Output[TopicTypeParameters]{
		OutputState: o.OutputState,
	}
}

type TopicTypeParametersPtrOutput struct{ *pulumi.OutputState }

func (TopicTypeParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicTypeParameters)(nil)).Elem()
}

func (o TopicTypeParametersPtrOutput) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return o
}

func (o TopicTypeParametersPtrOutput) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return o
}

func (o TopicTypeParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicTypeParameters] {
	return pulumix.Output[*TopicTypeParameters]{
		OutputState: o.OutputState,
	}
}

func (o TopicTypeParametersPtrOutput) Elem() TopicTypeParametersOutput {
	return o.ApplyT(func(v *TopicTypeParameters) TopicTypeParameters {
		if v != nil {
			return *v
		}
		var ret TopicTypeParameters
		return ret
	}).(TopicTypeParametersOutput)
}

type VpcConnectionNetworkInterface struct {
	AvailabilityZone   *string                              `pulumi:"availabilityZone"`
	ErrorMessage       *string                              `pulumi:"errorMessage"`
	NetworkInterfaceId *string                              `pulumi:"networkInterfaceId"`
	Status             *VpcConnectionNetworkInterfaceStatus `pulumi:"status"`
	SubnetId           *string                              `pulumi:"subnetId"`
}

type VpcConnectionNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutput() VpcConnectionNetworkInterfaceOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionNetworkInterface] {
	return pulumix.Output[VpcConnectionNetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionNetworkInterfaceOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) Status() VpcConnectionNetworkInterfaceStatusPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *VpcConnectionNetworkInterfaceStatus { return v.Status }).(VpcConnectionNetworkInterfaceStatusPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type VpcConnectionNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutput() VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VpcConnectionNetworkInterface] {
	return pulumix.Output[[]VpcConnectionNetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) VpcConnectionNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcConnectionNetworkInterface {
		return vs[0].([]VpcConnectionNetworkInterface)[vs[1].(int)]
	}).(VpcConnectionNetworkInterfaceOutput)
}

type VpcConnectionTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// VpcConnectionTagInput is an input type that accepts VpcConnectionTagArgs and VpcConnectionTagOutput values.
// You can construct a concrete instance of `VpcConnectionTagInput` via:
//
//	VpcConnectionTagArgs{...}
type VpcConnectionTagInput interface {
	pulumi.Input

	ToVpcConnectionTagOutput() VpcConnectionTagOutput
	ToVpcConnectionTagOutputWithContext(context.Context) VpcConnectionTagOutput
}

type VpcConnectionTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (VpcConnectionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTag)(nil)).Elem()
}

func (i VpcConnectionTagArgs) ToVpcConnectionTagOutput() VpcConnectionTagOutput {
	return i.ToVpcConnectionTagOutputWithContext(context.Background())
}

func (i VpcConnectionTagArgs) ToVpcConnectionTagOutputWithContext(ctx context.Context) VpcConnectionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTagOutput)
}

func (i VpcConnectionTagArgs) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionTag] {
	return pulumix.Output[VpcConnectionTag]{
		OutputState: i.ToVpcConnectionTagOutputWithContext(ctx).OutputState,
	}
}

// VpcConnectionTagArrayInput is an input type that accepts VpcConnectionTagArray and VpcConnectionTagArrayOutput values.
// You can construct a concrete instance of `VpcConnectionTagArrayInput` via:
//
//	VpcConnectionTagArray{ VpcConnectionTagArgs{...} }
type VpcConnectionTagArrayInput interface {
	pulumi.Input

	ToVpcConnectionTagArrayOutput() VpcConnectionTagArrayOutput
	ToVpcConnectionTagArrayOutputWithContext(context.Context) VpcConnectionTagArrayOutput
}

type VpcConnectionTagArray []VpcConnectionTagInput

func (VpcConnectionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionTag)(nil)).Elem()
}

func (i VpcConnectionTagArray) ToVpcConnectionTagArrayOutput() VpcConnectionTagArrayOutput {
	return i.ToVpcConnectionTagArrayOutputWithContext(context.Background())
}

func (i VpcConnectionTagArray) ToVpcConnectionTagArrayOutputWithContext(ctx context.Context) VpcConnectionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTagArrayOutput)
}

func (i VpcConnectionTagArray) ToOutput(ctx context.Context) pulumix.Output[[]VpcConnectionTag] {
	return pulumix.Output[[]VpcConnectionTag]{
		OutputState: i.ToVpcConnectionTagArrayOutputWithContext(ctx).OutputState,
	}
}

type VpcConnectionTagOutput struct{ *pulumi.OutputState }

func (VpcConnectionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTag)(nil)).Elem()
}

func (o VpcConnectionTagOutput) ToVpcConnectionTagOutput() VpcConnectionTagOutput {
	return o
}

func (o VpcConnectionTagOutput) ToVpcConnectionTagOutputWithContext(ctx context.Context) VpcConnectionTagOutput {
	return o
}

func (o VpcConnectionTagOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionTag] {
	return pulumix.Output[VpcConnectionTag]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VpcConnectionTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o VpcConnectionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VpcConnectionTag) string { return v.Value }).(pulumi.StringOutput)
}

type VpcConnectionTagArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionTag)(nil)).Elem()
}

func (o VpcConnectionTagArrayOutput) ToVpcConnectionTagArrayOutput() VpcConnectionTagArrayOutput {
	return o
}

func (o VpcConnectionTagArrayOutput) ToVpcConnectionTagArrayOutputWithContext(ctx context.Context) VpcConnectionTagArrayOutput {
	return o
}

func (o VpcConnectionTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VpcConnectionTag] {
	return pulumix.Output[[]VpcConnectionTag]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionTagArrayOutput) Index(i pulumi.IntInput) VpcConnectionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcConnectionTag {
		return vs[0].([]VpcConnectionTag)[vs[1].(int)]
	}).(VpcConnectionTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypeInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypePtrInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantPtrInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicTypeParametersInput)(nil)).Elem(), TopicTypeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicTypeParametersPtrInput)(nil)).Elem(), TopicTypeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTagInput)(nil)).Elem(), VpcConnectionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTagArrayInput)(nil)).Elem(), VpcConnectionTagArray{})
	pulumi.RegisterOutputType(TopicSemanticTypeOutput{})
	pulumi.RegisterOutputType(TopicSemanticTypePtrOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicTypeParametersOutput{})
	pulumi.RegisterOutputType(TopicTypeParametersPtrOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VpcConnectionTagOutput{})
	pulumi.RegisterOutputType(VpcConnectionTagArrayOutput{})
}
